/**
  ******************************************************************************
  * @file    stm32mp211dxx_ca35.h
  * @author  MCD Application Team
  * @brief   CMSIS stm32mp211dxx_ca35 Device Peripheral Access Layer Header File.
  *
  *          This file contains:
  *           - Data structures and the address mapping for all peripherals
  *           - Peripheral registers declarations and bits definition
  *           - Macros to access peripherals registers hardware
  *
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2022 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/** @addtogroup CMSIS_Device
  * @{
  */

/** @addtogroup stm32mp211dxx_ca35
  * @{
  */

#ifndef __STM32MP211Dxx_CA35_H
#define __STM32MP211Dxx_CA35_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

/** @addtogroup Peripheral_interrupt_number_definition
  * @{
  */


/**
 * @brief stm32mp2_ca35 Interrupt Number Definition :
 *        - according to the selected device in @ref Library_configuration_section
 *        - according to "Table 188. STM32MP21xx interrupt mapping for CortexÂ®-A35"
 *          in chapitre 26 "interrupt list" of reference document
 *          RM0506 - Reference Manual - STM32MP21xx - advanced ARM-based 32/64-bit MPUs
 */
 typedef enum
 {
   /******  Cortex-A Processor Specific Interrupt Numbers ***************************************************************/
   /* Software Generated Interrupts                                                                                     */
   SGI0_IRQn                        =  0,     /*!< Software Generated Interrupt  0                                      */
   SGI1_IRQn                        =  1,     /*!< Software Generated Interrupt  1                                      */
   SGI2_IRQn                        =  2,     /*!< Software Generated Interrupt  2                                      */
   SGI3_IRQn                        =  3,     /*!< Software Generated Interrupt  3                                      */
   SGI4_IRQn                        =  4,     /*!< Software Generated Interrupt  4                                      */
   SGI5_IRQn                        =  5,     /*!< Software Generated Interrupt  5                                      */
   SGI6_IRQn                        =  6,     /*!< Software Generated Interrupt  6                                      */
   SGI7_IRQn                        =  7,     /*!< Software Generated Interrupt  7                                      */
   SGI8_IRQn                        =  8,     /*!< Software Generated Interrupt  8                                      */
   SGI9_IRQn                        =  9,     /*!< Software Generated Interrupt  9                                      */
   SGI10_IRQn                       = 10,     /*!< Software Generated Interrupt 10                                      */
   SGI11_IRQn                       = 11,     /*!< Software Generated Interrupt 11                                      */
   SGI12_IRQn                       = 12,     /*!< Software Generated Interrupt 12                                      */
   SGI13_IRQn                       = 13,     /*!< Software Generated Interrupt 13                                      */
   SGI14_IRQn                       = 14,     /*!< Software Generated Interrupt 14                                      */
   SGI15_IRQn                       = 15,     /*!< Software Generated Interrupt 15                                      */
   /* Private Peripheral Interrupts                                                                                     */
                                              /*!< Interrupts 16 to 24 not implemented                                  */
   RESERVED_25                      = 25,     /*!< reserved                                                             */
   HypervisorTimer_IRQn             = 26,     /*!< EL2 non-secure Timer Interrupt                                       */
   VirtualTimer_IRQn                = 27,     /*!< EL1 Virtual Timer Interrupt                                          */
   RESERVED_28                      = 28,     /*!< reserved                                                             */
   SecurePhysicalTimer_IRQn         = 29,     /*!< EL3 (Secure) Physical Timer Interrupt                                */
   NonSecurePhysicalTimer_IRQn      = 30,     /*!< EL1 Physical Timer Interrupt                                         */
   RESERVED_31                      = 31,     /*!< reserved                                                             */
   /******  STM32 specific Interrupt Numbers ****************************************************************************/
   PVD_IRQn                         = 32,     /*!< PVD detector through EXTI                                            */
   PVM_IRQn                         = 33,     /*!< PVM detector through EXTI                                            */
   IWDG1_IRQn                       = 34,     /*!< Independent Watchdog 1 Early wake interrupt                          */
   IWDG2_IRQn                       = 35,     /*!< Independent Watchdog 2 Early wake interrupt                          */
   IWDG3_RST_IRQn                   = 36,     /*!< Independent Watchdog 3 Reset through EXTI                            */
   IWDG2_RST_IRQn                   = 37,     /*!< Independent Watchdog 2 Reset through EXTI                            */
   IWDG4_RST_IRQn                   = 38,     /*!< Independent Watchdog 4 Reset through EXTI                            */
   RESERVED_39                      = 39,     /*!< reserved                                                             */
   RESERVED_40                      = 40,     /*!< reserved                                                             */
   WWDG1_RST_IRQn                   = 41,     /*!< Window Watchdog 1 Reset through EXTI                                 */
   TAMP_IRQn                        = 42,     /*!< Tamper interrupt (include LSECSS interrupts)                         */
   RTC_IRQn                         = 43,     /*!< RTC global  interrupt                                                */
   TAMP_S_IRQn                      = 44,     /*!< Tamper secure interrupt (include LSECSS interrupts)                  */
   RTC_S_IRQn                       = 45,     /*!< RTC global secure interrupt                                          */
   RCC_IRQn                         = 46,     /*!< RCC global interrupt                                                 */
   EXTI2_0_IRQn                     = 47,     /*!< EXTI2 Line 0 interrupt                                               */
   EXTI2_1_IRQn                     = 48,     /*!< EXTI2 Line 1 interrupt                                               */
   EXTI2_2_IRQn                     = 49,     /*!< EXTI2 Line 2 interrupt                                               */
   EXTI2_3_IRQn                     = 50,     /*!< EXTI2 Line 3 interrupt                                               */
   EXTI2_4_IRQn                     = 51,     /*!< EXTI2 Line 4 interrupt                                               */
   EXTI2_5_IRQn                     = 52,     /*!< EXTI2 Line 5 interrupt                                               */
   EXTI2_6_IRQn                     = 53,     /*!< EXTI2 Line 6 interrupt                                               */
   EXTI2_7_IRQn                     = 54,     /*!< EXTI2 Line 7 interrupt                                               */
   EXTI2_8_IRQn                     = 55,     /*!< EXTI2 Line 8 interrupt                                               */
   EXTI2_9_IRQn                     = 56,     /*!< EXTI2 Line 9 interrupt                                               */
   EXTI2_10_IRQn                    = 57,     /*!< EXTI2 Line 10 interrupt                                              */
   EXTI2_11_IRQn                    = 58,     /*!< EXTI2 Line 11 interrupt                                              */
   EXTI2_12_IRQn                    = 59,     /*!< EXTI2 Line 12 interrupt                                              */
   EXTI2_13_IRQn                    = 60,     /*!< EXTI2 Line 13 interrupt                                              */
   EXTI2_14_IRQn                    = 61,     /*!< EXTI2 Line 14 interrupt                                              */
   EXTI2_15_IRQn                    = 62,     /*!< EXTI2 Line 15 interrupt                                              */
   HPDMA1_Channel0_IRQn             = 63,     /*!< HPDMA1 Channel0  interrupt                                           */
   HPDMA1_Channel1_IRQn             = 64,     /*!< HPDMA1 Channel1  interrupt                                           */
   HPDMA1_Channel2_IRQn             = 65,     /*!< HPDMA1 Channel2  interrupt                                           */
   HPDMA1_Channel3_IRQn             = 66,     /*!< HPDMA1 Channel3  interrupt                                           */
   HPDMA1_Channel4_IRQn             = 67,     /*!< HPDMA1 Channel4  interrupt                                           */
   HPDMA1_Channel5_IRQn             = 68,     /*!< HPDMA1 Channel5  interrupt                                           */
   HPDMA1_Channel6_IRQn             = 69,     /*!< HPDMA1 Channel6  interrupt                                           */
   HPDMA1_Channel7_IRQn             = 70,     /*!< HPDMA1 Channel7  interrupt                                           */
   HPDMA1_Channel8_IRQn             = 71,     /*!< HPDMA1 Channel8  interrupt                                           */
   HPDMA1_Channel9_IRQn             = 72,     /*!< HPDMA1 Channel9  interrupt                                           */
   HPDMA1_Channel10_IRQn            = 73,     /*!< HPDMA1 Channel10  interrupt                                          */
   HPDMA1_Channel11_IRQn            = 74,     /*!< HPDMA1 Channel11  interrupt                                          */
   HPDMA1_Channel12_IRQn            = 75,     /*!< HPDMA1 Channel12  interrupt                                          */
   HPDMA1_Channel13_IRQn            = 76,     /*!< HPDMA1 Channel13  interrupt                                          */
   HPDMA1_Channel14_IRQn            = 77,     /*!< HPDMA1 Channel14  interrupt                                          */
   HPDMA1_Channel15_IRQn            = 78,     /*!< HPDMA1 Channel15  interrupt                                          */
   HPDMA2_Channel0_IRQn             = 79,     /*!< HPDMA2 Channel0  interrupt                                           */
   HPDMA2_Channel1_IRQn             = 80,     /*!< HPDMA2 Channel1  interrupt                                           */
   HPDMA2_Channel2_IRQn             = 81,     /*!< HPDMA2 Channel2  interrupt                                           */
   HPDMA2_Channel3_IRQn             = 82,     /*!< HPDMA2 Channel3  interrupt                                           */
   HPDMA2_Channel4_IRQn             = 83,     /*!< HPDMA2 Channel4  interrupt                                           */
   HPDMA2_Channel5_IRQn             = 84,     /*!< HPDMA2 Channel5  interrupt                                           */
   HPDMA2_Channel6_IRQn             = 85,     /*!< HPDMA2 Channel6  interrupt                                           */
   HPDMA2_Channel7_IRQn             = 86,     /*!< HPDMA2 Channel7  interrupt                                           */
   HPDMA2_Channel8_IRQn             = 87,     /*!< HPDMA2 Channel8  interrupt                                           */
   HPDMA2_Channel9_IRQn             = 88,     /*!< HPDMA2 Channel9  interrupt                                           */
   HPDMA2_Channel10_IRQn            = 89,     /*!< HPDMA2 Channel10  interrupt                                          */
   HPDMA2_Channel11_IRQn            = 90,     /*!< HPDMA2 Channel11  interrupt                                          */
   HPDMA2_Channel12_IRQn            = 91,     /*!< HPDMA2 Channel12  interrupt                                          */
   HPDMA2_Channel13_IRQn            = 92,     /*!< HPDMA2 Channel13  interrupt                                          */
   HPDMA2_Channel14_IRQn            = 93,     /*!< HPDMA2 Channel14  interrupt                                          */
   HPDMA2_Channel15_IRQn            = 94,     /*!< HPDMA2 Channel15  interrupt                                          */
   HPDMA3_Channel0_IRQn             = 95,     /*!< HPDMA3 Channel0  interrupt                                           */
   HPDMA3_Channel1_IRQn             = 96,     /*!< HPDMA3 Channel1  interrupt                                           */
   HPDMA3_Channel2_IRQn             = 97,     /*!< HPDMA3 Channel2  interrupt                                           */
   HPDMA3_Channel3_IRQn             = 98,     /*!< HPDMA3 Channel3  interrupt                                           */
   HPDMA3_Channel4_IRQn             = 99,     /*!< HPDMA3 Channel4  interrupt                                           */
   HPDMA3_Channel5_IRQn             = 100,     /*!< HPDMA3 Channel5  interrupt                                          */
   HPDMA3_Channel6_IRQn             = 101,     /*!< HPDMA3 Channel6  interrupt                                          */
   HPDMA3_Channel7_IRQn             = 102,     /*!< HPDMA3 Channel7  interrupt                                          */
   HPDMA3_Channel8_IRQn             = 103,     /*!< HPDMA3 Channel8  interrupt                                          */
   HPDMA3_Channel9_IRQn             = 104,     /*!< HPDMA3 Channel9  interrupt                                          */
   HPDMA3_Channel10_IRQn            = 105,     /*!< HPDMA3 Channel10  interrupt                                         */
   HPDMA3_Channel11_IRQn            = 106,     /*!< HPDMA3 Channel11  interrupt                                         */
   HPDMA3_Channel12_IRQn            = 107,     /*!< HPDMA3 Channel12  interrupt                                         */
   HPDMA3_Channel13_IRQn            = 108,     /*!< HPDMA3 Channel13  interrupt                                         */
   HPDMA3_Channel14_IRQn            = 109,     /*!< HPDMA3 Channel14  interrupt                                         */
   HPDMA3_Channel15_IRQn            = 110,     /*!< HPDMA3 Channel15  interrupt                                         */
   ICACHE_IRQn                      = 111,     /*!< ICACHE interrupt                                                    */
   DCACHE_IRQn                      = 112,     /*!< DCACHE interrupt                                                    */
   ADC1_IRQn                        = 113,     /*!< ADC1 interrupt                                                      */
   ADC2_IRQn                        = 114,     /*!< ADC2  interrupt                                                     */
   RESERVED_115                      = 115,     /*!< reserved                                                             */
   RESERVED_116                      = 116,     /*!< reserved                                                             */
   RESERVED_117                      = 117,     /*!< reserved                                                             */
   RESERVED_118                      = 118,     /*!< reserved                                                             */
   RESERVED_119                      = 119,     /*!< reserved                                                             */
   TIM1_BRK_IRQn                    = 120,     /*!< TIM1 Break interrupt                                                */
   TIM1_UP_IRQn                     = 121,     /*!< TIM1 Update interrupt                                               */
   TIM1_TRG_COM_IRQn                = 122,     /*!< TIM1 Trigger and Commutation interrupts                             */
   TIM1_CC_IRQn                     = 123,     /*!< TIM1 Capture Compare interrupt                                      */
   TIM2_IRQn                        = 124,     /*!< TIM2 global interrupt                                               */
   TIM3_IRQn                        = 125,     /*!< TIM3 global interrupt                                               */
   TIM4_IRQn                        = 126,     /*!< TIM4 global interrupt                                               */
   I2C1_IRQn                        = 127,     /*!< I2C1 Global interrupt                                               */
   I3C1_IRQn                        = 128,     /*!< I3C1 Global interrupt                                               */
   I2C2_IRQn                        = 129,     /*!< I2C2 Global interrupt                                               */
   I3C2_IRQn                        = 130,     /*!< I3C2 Global interrupt                                               */
   SPI1_IRQn                        = 131,     /*!< SPI1 global interrupt                                               */
   SPI2_IRQn                        = 132,     /*!< SPI2 global interrupt                                               */
   USART1_IRQn                      = 133,     /*!< USART1 global interrupt                                             */
   USART2_IRQn                      = 134,     /*!< USART2 global interrupt                                             */
   USART3_IRQn                      = 135,     /*!< USART3 global interrupt                                             */
   RESERVED_136                     = 136,     /*!< reserved                                                            */
   TIM8_BRK_IRQn                    = 137,     /*!< TIM8 Break interrupt                                                */
   TIM8_UP_IRQn                     = 138,     /*!< TIM8 Update interrupt                                               */
   TIM8_TRG_COM_IRQn                = 139,     /*!< TIM8 Trigger & Commutation interrupt                                */
   TIM8_CC_IRQn                     = 140,     /*!< TIM8 Capture Compare interrupt                                      */
   FMC_IRQn                         = 141,     /*!< FMC Global interrupt                                                */
   SDMMC1_IRQn                      = 142,     /*!< SDMMC1 Global interrupt                                             */
   TIM5_IRQn                        = 143,     /*!< TIM5 Global interrupt                                               */
   SPI3_IRQn                        = 144,     /*!< SPI3 Global interrupt                                               */
   UART4_IRQn                       = 145,     /*!< UART4 global interrupt                                              */
   UART5_IRQn                       = 146,     /*!< UART5 global interrupt                                              */
   TIM6_IRQn                        = 147,     /*!< TIM6 global interrupt                                               */
   TIM7_IRQn                        = 148,     /*!< TIM7 global interrupt                                               */
   ETH1_SBD_IRQn                    = 149,     /*!< ETH1 global interrupt                                               */
   ETH1_PMT_IRQn                    = 150,     /*!< ETH1 Wkup interrupt (PMT)                                           */
   ETH1_LPI_IRQn                    = 151,     /*!< ETH1 LPI interrupt                                                  */
   RESERVED_152                     = 152,     /*!< reserved                                                            */
   RESERVED_153                     = 153,     /*!< reserved                                                            */
   RESERVED_154                     = 154,     /*!< reserved                                                            */
   USART6_IRQn                      = 155,     /*!< USART6 global interrupt                                             */
   I2C3_IRQn                        = 156,     /*!< I2C3 Global interrupt                                               */
   I3C3_IRQn                        = 157,     /*!< I3C3  Global interrupt                                              */
   USBH_EHCI_IRQn                   = 158,     /*!< USB Host EHCI Interrupt                                             */
   USBH_OHCI_IRQn                   = 159,     /*!< USB Host OHCI Interrupt                                             */
   DCMI_PSSI_IRQn                   = 160,     /*!< DCMI & PSSI global interrupt                                        */
   RESERVED_161                     = 161,     /*!< reserved                                                           */
   DSI_IRQn                         = 162,     /*!< DSI Host controller global interrupt                                */
   RESERVED_163                     = 163,     /*!< reserved                                                            */
   HASH1_IRQn                       = 164,     /*!< Hash1  interrupt                                                    */
   RESERVED_165                     = 165,     /*!< reserved                                                            */
   RESERVED_166                     = 166,     /*!< reserved                                                            */
   UART7_IRQn                       = 167,     /*!< UART7 global interrupt                                              */
   LPUART1_IRQn                     = 168,     /*!< LPUART1 global interrupt                                            */
   SPI4_IRQn                        = 169,     /*!< SPI4 global interrupt                                               */
   SPI5_IRQn                        = 170,     /*!< SPI5 global interrupt                                               */
   SPI6_IRQn                        = 171,     /*!< SPI6 global interrupt                                               */
   SAI1_IRQn                        = 172,     /*!< SAI1 global interrupt                                               */
   LTDC_IRQn                        = 173,     /*!< LTDC global interrupt                                               */
   LTDC_ER_IRQn                     = 174,     /*!< LTDC global error interrupt                                         */
   LTDC_SEC_IRQn                    = 175,     /*!< LTDC security global interrupt                                      */
   LTDC_SEC_ER_IRQn                 = 176,     /*!< LTDC security global error interrupt                                */
   SAI2_IRQn                        = 177,     /*!< SAI2 global interrupt                                               */
   OCTOSPI1_IRQn                    = 178,     /*!< OCTOSPI1 global interrupt                                           */
   RESERVED_179                     = 179,      /*!< reserved                                                            */
   RESERVED_180                     = 180,     /*!< reserved                                                            */
   LPTIM1_IRQn                      = 181,     /*!< LPTIMER1 global interrupt                                           */
   USBH_WAKEUP_IRQn                 = 182,     /*!< USBH Remote  Wake up from USB2PHY1                                  */
   SPDIFRX_IRQn                     = 183,     /*!< SPDIFRX global interrupt                                            */
   IPCC1_RX_IRQn                    = 184,     /*!< Mailbox 1 RX Occupied  interrupt                                    */
   IPCC1_TX_IRQn                    = 185,     /*!< Mailbox 1 TX Free  interrupt                                        */
   IPCC1_RX_S_IRQn                  = 186,     /*!< Mailbox 1 RX Occupied secure interrupt                              */
   IPCC1_TX_S_IRQn                  = 187,     /*!< Mailbox 1 TX Free secure interrupt                                  */
   RESERVED_188                     = 188,     /*!< reserved                                                            */
   RESERVED_189                     = 189,     /*!< reserved                                                            */
   OTG_WAKEUP_IRQn                  = 190,     /*!< USB2 DR Remote  Wake up from USB2PHY2                               */
   RESERVED_191                     = 191,     /*!< reserved                                                            */
   MDF1_FLT0_IRQn                   = 192,     /*!< MDF1 Filter0 Interrupt                                              */
   MDF1_FLT1_IRQn                   = 193,     /*!< MDF1 Filter1 Interrupt                                              */
   MDF1_FLT2_IRQn                   = 194,     /*!< MDF1 Filter2 Interrupt                                              */
   MDF1_FLT3_IRQn                   = 195,     /*!< MDF1 Filter3 Interrupt                                              */
   SAI3_IRQn                        = 196,     /*!< SAI3 global interrupt                                               */
   TIM15_IRQn                       = 197,     /*!< TIM15 global interrupt                                              */
   TIM16_IRQn                       = 198,     /*!< TIM16 global interrupt                                              */
   TIM17_IRQn                       = 199,     /*!< TIM17 global interrupt                                              */
   TIM12_IRQn                       = 200,     /*!< TIM12 global interrupt                                              */
   SDMMC2_IRQn                      = 201,     /*!< SDMMC2 global interrupt                                             */
   DCMIPP_IRQn                      = 202,     /*!< DCMIPP global interrupt                                             */
   RESERVED_203                     = 203,     /*!< reserved                                                                */
   CPU2_SYSRESETQ_IRQn              = 204,     /*!< MCU local Reset Request through EXTI                                */
   TIM13_IRQn                       = 205,     /*!< TIM13 global interrupt                                              */
   TIM14_IRQn                       = 206,     /*!< TIM14 global interrupt                                              */
   TIM10_IRQn                       = 207,     /*!< TIM10 global interrupt                                              */
   RNG1_IRQn                        = 208,     /*!< RNG1 interrupt                                                      */
   ADF1_FLT_IRQn                    = 209,     /*!< ADF1 Filter Interrupt                                               */
   HASH2_IRQn                       = 210,     /*!< Hash2  interrupt                                                    */
   SDMMC3_IRQn                      = 211,     /*!< SDMMC3 Global interrupt                                             */
   LPTIM2_IRQn                      = 212,     /*!< LPTIMER2 global interrupt                                           */
   LPTIM3_IRQn                      = 213,     /*!< LPTIMER3 global interrupt                                           */
   LPTIM4_IRQn                      = 214,     /*!< LPTIMER4 global interrupt                                           */
   LPTIM5_IRQn                      = 215,     /*!< LPTIMER5 global interrupt                                           */
   RESERVED_216                     = 216,     /*!< reserved                                                            */
   CPU2_SEV_IRQn                    = 217,     /*!< Cortex-M33 Send Event through EXTI                                  */
   RCC_WAKEUP_IRQn                  = 218,     /*!< RCC CPU1 Wake up interrupt                                          */
   SAI4_IRQn                        = 219,     /*!< SAI4 global interrupt                                               */
   DTS_IRQn                         = 220,     /*!< Temperature sensor interrupt                                        */
   TIM11_IRQn                       = 221,     /*!< TIM11 global interrupt                                              */
   CPU1_WAKEUP_PIN_IRQn             = 222,     /*!< Interrupt for all 6 wake-up enabled by CPU1                         */
   OTG_IRQn                         = 223,     /*!< USB2 DR global interrupt                                            */
   RNG2_IRQn                        = 224,     /*!< RNG2 interrupt                                                      */
   RESERVED_225                     = 225,     /*!< reserved                                                            */
   RESERVED_226                     = 226,     /*!< reserved                                                            */
   SERF_IRQn                        = 227,     /*!< SERF global interrupt                                               */
   BUSPERFM_IRQn                    = 228,     /*!< BUS Performance Monitor Interrupt                                   */
   RAMCFG_IRQn                      = 229,     /*!< RAM configuration global interrupt                                  */
   DDRCTRL_IRQn                     = 230,     /*!< DDRCTRL interrupt                                                   */
   DDRPHYC_IRQn                     = 231,     /*!< DDRPHY interrupt (active low)                                       */
   DFI_ERR_IRQn                     = 232,     /*!< DDRPHY DFI error Interrupt                                          */
   IAC_IRQn                         = 233,     /*!< RIF Illegal access Controller interrupt                             */
   VDDCPU_VD_IRQn                   = 234,     /*!< VDDCPU voltage detector                                             */
   VDDCORE_VD_IRQn                  = 235,     /*!< VDDCORE voltage detector                                            */
   RETRAMCRC_ERR_IT_IRQn            = 236,     /*!< RETRAM CRC error                                                    */
   HPDMA1_WKUP_IRQn                 = 237,     /*!< HPDMA1 channel 0 to 15 wake up                                      */
   HPDMA2_WKUP_IRQn                 = 238,     /*!< HPDMA2 channel 0 to 15 wake up                                      */
   HPDMA3_WKUP_IRQn                 = 239,     /*!< HPDMA3 channel 0 to 15 wake up                                      */
   DBG_AUTH_HOST_IRQn               = 240,     /*!< Debugger has written DBG_AUTH_HOST register                         */
   DBG_AUTH_ACK_IRQn                = 241,     /*!< Debugger has read DBG_AUTH_ACKregister                              */
   RCC_HSI_FMON_IRQn                = 242,     /*!< HSI Frequency Monitor                                               */
   VDDGPU_VD_IRQn                   = 243,     /*!< VDDGPU voltage detector                                             */
   RESERVED_244                     = 244,     /*!< reserved                                                            */
   RESERVED_245                     = 245,     /*!< reserved                                                            */
   RESERVED_246                     = 246,     /*!< reserved                                                            */
   RESERVED_247                     = 247,     /*!< reserved                                                            */
   RESERVED_248                     = 248,     /*!< reserved                                                            */
   RESERVED_249                     = 249,     /*!< reserved                                                            */
   RESERVED_250                     = 250,     /*!< reserved                                                            */
   RESERVED_251                     = 251,     /*!< reserved                                                            */
   RESERVED_252                     = 252,     /*!< reserved                                                            */
   RESERVED_253                     = 253,     /*!< reserved                                                            */
   RESERVED_254                     = 254,     /*!< reserved                                                            */
   RESERVED_255                     = 255,     /*!< reserved                                                            */
   RESERVED_256                     = 256,     /*!< reserved                                                            */
   RESERVED_257                     = 257,     /*!< reserved                                                            */
   RESERVED_258                     = 258,     /*!< reserved                                                            */
   RESERVED_259                     = 259,     /*!< reserved                                                            */
   RESERVED_260                     = 260,     /*!< reserved                                                            */
   RESERVED_261                     = 261,     /*!< reserved                                                            */
   RESERVED_262                     = 262,     /*!< reserved                                                            */
   RESERVED_263                     = 263,     /*!< reserved                                                            */
   RESERVED_264                     = 264,     /*!< reserved                                                            */
   RESERVED_265                     = 265,     /*!< reserved                                                            */
   RESERVED_266                     = 266,     /*!< reserved                                                            */
   RESERVED_267                     = 267,     /*!< reserved                                                            */
   RESERVED_268                     = 268,     /*!< reserved                                                            */
   RESERVED_269                     = 269,     /*!< reserved                                                            */
   RESERVED_270                     = 270,     /*!< reserved                                                            */
   RESERVED_271                     = 271,     /*!< reserved                                                            */
   RESERVED_272                     = 272,     /*!< reserved                                                            */
   RESERVED_273                     = 273,     /*!< reserved                                                            */
   RESERVED_274                     = 274,     /*!< reserved                                                            */
   RESERVED_275                     = 275,     /*!< reserved                                                            */
   RESERVED_276                     = 276,     /*!< reserved                                                            */
   RESERVED_277                     = 277,     /*!< reserved                                                            */
   RESERVED_278                     = 278,     /*!< reserved                                                            */
   RESERVED_279                     = 279,     /*!< reserved                                                            */
   RESERVED_280                     = 280,     /*!< reserved                                                            */
   RESERVED_281                     = 281,     /*!< reserved                                                            */
   RESERVED_282                     = 282,     /*!< reserved                                                            */
   RESERVED_283                     = 283,     /*!< reserved                                                            */
   RESERVED_284                     = 284,     /*!< reserved                                                            */
   RESERVED_285                     = 285,     /*!< reserved                                                            */
   RESERVED_286                     = 286,     /*!< reserved                                                            */
   RESERVED_287                     = 287,     /*!< reserved                                                            */
   RESERVED_288                     = 288,     /*!< reserved                                                            */
   RESERVED_289                     = 289,     /*!< reserved                                                            */
   RESERVED_290                     = 290,     /*!< reserved                                                            */
   RESERVED_291                     = 291,     /*!< reserved                                                            */
   RESERVED_292                     = 292,     /*!< reserved                                                            */
   RESERVED_293                     = 293,     /*!< reserved                                                            */
   RESERVED_294                     = 294,     /*!< reserved                                                            */
   RESERVED_295                     = 295,     /*!< reserved                                                            */
   RESERVED_296                     = 296,     /*!< reserved                                                            */
   RESERVED_297                     = 297,     /*!< reserved                                                            */
   RESERVED_298                     = 298,     /*!< reserved                                                            */
   RESERVED_299                     = 299,     /*!< reserved                                                            */
   EXTI1_0_IRQn                     = 300,     /*!< EXTI1 Line 0 interrupt                                              */
   EXTI1_1_IRQn                     = 301,     /*!< EXTI1 Line 1 interrupt                                              */
   EXTI1_2_IRQn                     = 302,     /*!< EXTI1 Line 2 interrupt                                              */
   EXTI1_3_IRQn                     = 303,     /*!< EXTI1 Line 3 interrupt                                              */
   EXTI1_4_IRQn                     = 304,     /*!< EXTI1 Line 4 interrupt                                              */
   EXTI1_5_IRQn                     = 305,     /*!< EXTI1 Line 5 interrupt                                              */
   EXTI1_6_IRQn                     = 306,     /*!< EXTI1 Line 6 interrupt                                              */
   EXTI1_7_IRQn                     = 307,     /*!< EXTI1 Line 7 interrupt                                              */
   EXTI1_8_IRQn                     = 308,     /*!< EXTI1 Line 8 interrupt                                              */
   EXTI1_9_IRQn                     = 309,     /*!< EXTI1 Line 9 interrupt                                              */
   EXTI1_10_IRQn                    = 310,     /*!< EXTI1 Line 10 interrupt                                             */
   EXTI1_11_IRQn                    = 311,     /*!< EXTI1 Line 11 interrupt                                             */
   EXTI1_12_IRQn                    = 312,     /*!< EXTI1 Line 12 interrupt                                             */
   EXTI1_13_IRQn                    = 313,     /*!< EXTI1 Line 13 interrupt                                             */
   EXTI1_14_IRQn                    = 314,     /*!< EXTI1 Line 14 interrupt                                             */
   EXTI1_15_IRQn                    = 315,     /*!< EXTI1 Line 15 interrupt                                             */
   RESERVED_316                     = 316,     /*!< reserved                                                            */
   RESERVED_317                     = 317,     /*!< reserved                                                            */
   RESERVED_318                     = 318,     /*!< reserved                                                            */
   RESERVED_319                     = 319,     /*!< reserved                                                            */
   RESERVED_320                     = 320,     /*!< reserved                                                            */
   RESERVED_321                     = 321,     /*!< reserved                                                            */
   RESERVED_322                     = 322,     /*!< reserved                                                            */
   RESERVED_323                     = 323,     /*!< reserved                                                            */
   RESERVED_324                     = 324,     /*!< reserved                                                            */
   RESERVED_325                     = 325,     /*!< reserved                                                            */
   RESERVED_326                     = 326,     /*!< reserved                                                            */
   RESERVED_327                     = 327,     /*!< reserved                                                            */
   RESERVED_328                     = 328,     /*!< reserved                                                            */
   RESERVED_329                     = 329,     /*!< reserved                                                            */
   RESERVED_330                     = 330,     /*!< reserved                                                            */
   RESERVED_331                     = 331,     /*!< reserved                                                            */
   RESERVED_332                     = 332,     /*!< reserved                                                            */
   RESERVED_333                     = 333,     /*!< reserved                                                            */
   RESERVED_334                     = 334,     /*!< reserved                                                            */
   RESERVED_335                     = 335,     /*!< reserved                                                            */
   RESERVED_336                     = 336,     /*!< reserved                                                            */
   RESERVED_337                     = 337,     /*!< reserved                                                            */
   RESERVED_338                     = 338,     /*!< reserved                                                            */
   RESERVED_339                     = 339,     /*!< reserved                                                            */
   IS2M_IRQn                        = 340,     /*!< IS2M  fault detect                                                  */
   L2WERRIRQ_IRQn                   = 341,     /*!< Error indicator frm L2  for memory transactions with a write response error condition.*/
   DDRPERFM_IRQn                    = 342,     /*!< DDR Performance Monitor Interrupt                                   */
   RESERVED_343                     = 343,     /*!< reserved                                                            */
   PMSTAT0_IRQn                     = 344,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT1_IRQn                     = 345,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT2_IRQn                     = 346,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT3_IRQn                     = 347,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT4_IRQn                     = 348,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT5_IRQn                     = 349,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT6_IRQn                     = 350,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT7_IRQn                     = 351,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT8_IRQn                     = 352,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT9_IRQn                     = 353,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT10_IRQn                    = 354,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT11_IRQn                    = 355,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT12_IRQn                    = 356,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT13_IRQn                    = 357,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT14_IRQn                    = 358,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT15_IRQn                    = 359,     /*!< Power management, PLL and sensor interrupts                         */
   PMSTAT16_IRQn                    = 360,     /*!< Power management, PLL and sensor interrupts                         */
   RESERVED_361                     = 361,     /*!< reserved                                                            */
   RESERVED_362                     = 362,     /*!< reserved                                                            */
   RESERVED_363                     = 363,     /*!< reserved                                                            */
   RESERVED_364                     = 364,     /*!< reserved                                                            */
   RESERVED_365                     = 365,     /*!< reserved                                                            */
   RESERVED_366                     = 366,     /*!< reserved                                                            */
   RESERVED_367                     = 367,     /*!< reserved                                                            */
   RESERVED_368                     = 368,     /*!< reserved                                                            */
   RESERVED_369                     = 369,     /*!< reserved                                                            */
   RESERVED_370                     = 370,     /*!< reserved                                                            */
   RESERVED_371                     = 371,     /*!< reserved                                                            */
   RESERVED_372                     = 372,     /*!< reserved                                                            */
   RESERVED_373                     = 373,     /*!< reserved                                                            */
   RESERVED_374                     = 374,     /*!< reserved                                                            */
   RESERVED_375                     = 375,     /*!< reserved                                                            */
   RESERVED_376                     = 376,     /*!< reserved                                                            */
   RESERVED_377                     = 377,     /*!< reserved                                                            */
   RESERVED_378                     = 378,     /*!< reserved                                                            */
   RESERVED_379                     = 379,     /*!< reserved                                                            */
   RESERVED_380                     = 380,     /*!< reserved                                                            */
   RESERVED_381                     = 381,     /*!< reserved                                                            */
   RESERVED_382                     = 382,     /*!< reserved                                                            */
   RESERVED_383                     = 383,     /*!< reserved                                                            */
   RESERVED_384                     = 384,     /*!< reserved                                                            */
   RESERVED_385                     = 385,     /*!< reserved                                                            */
   RESERVED_386                     = 386,     /*!< reserved                                                            */
   RESERVED_387                     = 387,     /*!< reserved                                                            */
   RESERVED_388                     = 388,     /*!< reserved                                                            */
   RESERVED_389                     = 389,     /*!< reserved                                                            */
   RESERVED_390                     = 390,     /*!< reserved                                                            */
   RESERVED_391                     = 391,     /*!< reserved                                                            */
   RESERVED_392                     = 392,     /*!< reserved                                                            */
   RESERVED_393                     = 393,     /*!< reserved                                                            */
   RESERVED_394                     = 394,     /*!< reserved                                                            */
   RESERVED_395                     = 395,     /*!< reserved                                                            */
   RESERVED_396                     = 396,     /*!< reserved                                                            */
   RESERVED_397                     = 397,     /*!< reserved                                                            */
   RESERVED_398                     = 398,     /*!< reserved                                                            */
   RESERVED_399                     = 399,     /*!< reserved                                                            */
   PMUIRQ0_IRQn                     = 400,     /*!< Cortex-A35 Core#0 Performance Monitor Interrupt                     */
   PMUIRQ1_IRQn                     = 401,     /*!< Cortex-A35 Core#1 Performance Monitor Interrupt                     */
   RESERVED_402                     = 402,     /*!< reserved                                                            */
   RESERVED_403                     = 403,     /*!< reserved                                                            */
   COMMRX0_IRQn                     = 404,     /*!< Cortex-A35 Core#0 Debug Communication Channel Receive interrupt     */
   COMMRX1_IRQn                     = 405,     /*!< Cortex-A35 Core#1 Debug Communication Channel Receive interrupt     */
   RESERVED_406                     = 406,     /*!< reserved                                                            */
   RESERVED_407                     = 407,     /*!< reserved                                                            */
   COMMTX0_IRQn                     = 408,     /*!< Cortex-A35 Core#0 Debug Communication Channel Transmit interrupt    */
   COMMTX1_IRQn                     = 409,     /*!< Cortex-A35 Core#1 Debug Communication Channel Transmit interrupt    */
   RESERVED_410                     = 410,     /*!< reserved                                                            */
   RESERVED_411                     = 411,     /*!< reserved                                                            */
   nCTIIRQ0_IRQn                    = 412,     /*!< Cortex-A35 Core#0 CTI interrupt                                     */
   nCTIIRQ1_IRQn                    = 413,     /*!< Cortex-A35 Core#1 CTI interrupt                                     */
   RESERVED_414                     = 414,     /*!< reserved                                                            */
   RESERVED_415                     = 415,     /*!< reserved                                                            */
   MAX_IRQ_n
 } IRQn_Type;



/**
  * @}
  */

/** @addtogroup Configuration_section_for_CMSIS
  * @{
  */

#define SDC        /*!< Step Down Converter feature */

/**
  * @brief Configuration of the Cortex-A35 Processor and Core Peripherals
  */
#define __A35_REV                0x0100U      /*!< Cortex-A35 revision r1p0                    */
#define __CORTEX_A                   7U       /*!< Cortex-A# Core - WARNINGS :                 */
                                              /*!< - set to A7 to get something from core_ca.h */
                                              /*!< - to be set to "35U" once A35 is supported  */
                                              /*!<   by CMSIS core_ca                          */
#define __CA_REV                 0x0100U      /*!< Core (A35) revision r1p0                    */
#define __FPU_PRESENT                 1U      /*!< Set to 1 if FPU is present                  */
#define __GIC_PRESENT                 1U      /*!< Set to 1 if GIC is present                  */
#define __TIM_PRESENT                 1U      /*!< Set to 1 if TIM is present                  */
#define __L2C_PRESENT                 0U      /*!< Set to 1 if L2C is present                  */

#define GIC_BASE             0x4AC00000UL
#define GIC_DISTRIBUTOR_BASE (GIC_BASE+0x10000UL)
#define GIC_INTERFACE_BASE   (GIC_BASE+0x20000UL)
/* Number of implemented interrupt lines */
/* to be computed from GICD_TYPER.ITLinesNumber, bits [4:0] = NUM_SPIS/32 */
/* 0xC = 12 --> (12+1)*32 = 416 */
#define IRQ_GIC_LINE_COUNT   (416U)
/* Number of priority bits according to A35 security state */
#if defined(A35_NON_SECURE)
#define GIC_PRIO_BITS                 4U
#else
#define GIC_PRIO_BITS                 5U
#endif /* defined(A35_NON_SECURE) */

#include "core_ca.h"

/**
  * @}
  */

#include "system_stm32mp2xx.h"
#include <stdint.h>

/** @addtogroup Peripheral_registers_structures
  * @{
  */

  /**
    * @brief Analog to Digital Converter (ADC)
    */
  typedef struct
  {
    __IO uint32_t ISR;           /*!< ADC interrupt and status register,                     Address offset: 0x00 */
    __IO uint32_t IER;           /*!< ADC interrupt enable register,                         Address offset: 0x04 */
    __IO uint32_t CR;            /*!< ADC control register,                                  Address offset: 0x08 */
    __IO uint32_t CFGR1;         /*!< ADC configuration register 1,                          Address offset: 0x0C */
    __IO uint32_t CFGR2;         /*!< ADC configuration register 2,                          Address offset: 0x10 */
    __IO uint32_t SMPR1;         /*!< ADC sample time register 1,                            Address offset: 0x14 */
    __IO uint32_t SMPR2;         /*!< ADC sample time register 2,                            Address offset: 0x18 */
    __IO uint32_t PCSEL;         /*!< ADC channel preselection register,                     Address offset: 0x1C */
    uint32_t      RESERVED1[4];  /*!< Reserved,                                              Address offset: 0x020-0x02C */
    __IO uint32_t SQR1;          /*!< ADC regular sequence register 1,                       Address offset: 0x30 */
    __IO uint32_t SQR2;          /*!< ADC regular sequence register 2,                       Address offset: 0x34 */
    __IO uint32_t SQR3;          /*!< ADC regular sequence register 3,                       Address offset: 0x38 */
    __IO uint32_t SQR4;          /*!< ADC regular sequence register 4,                       Address offset: 0x3C */
    __IO uint32_t DR;            /*!< ADC regular data register,                             Address offset: 0x40 */
    uint32_t      RESERVED2[2];  /*!< Reserved,                                              Address offset: 0x044-0x048 */
    __IO uint32_t JSQR;          /*!< ADC injected sequence register,                        Address offset: 0x4C */
    __IO uint32_t OFCFGR1;       /*!< ADC offset configuration register 1,                   Address offset: 0x50 */
    __IO uint32_t OFCFGR2;       /*!< ADC offset configuration register 2,                   Address offset: 0x54 */
    __IO uint32_t OFCFGR3;       /*!< ADC offset configuration register 3,                   Address offset: 0x58 */
    __IO uint32_t OFCFGR4;       /*!< ADC offset configuration register 4,                   Address offset: 0x5C */
    __IO uint32_t OFR1;          /*!< ADC offset register 1,                                 Address offset: 0x60 */
    __IO uint32_t OFR2;          /*!< ADC offset register 2,                                 Address offset: 0x64 */
    __IO uint32_t OFR3;          /*!< ADC offset register 3,                                 Address offset: 0x68 */
    __IO uint32_t OFR4;          /*!< ADC offset register 4,                                 Address offset: 0x6C */
    __IO uint32_t GCOMP;         /*!< ADC gain compensation register,                        Address offset: 0x70 */
    uint32_t      RESERVED3[3];  /*!< Reserved,                                              Address offset: 0x074-0x07C */
    __IO uint32_t JDR1;          /*!< ADC injected data register 1,                          Address offset: 0x80 */
    __IO uint32_t JDR2;          /*!< ADC injected data register 2,                          Address offset: 0x84 */
    __IO uint32_t JDR3;          /*!< ADC injected data register 3,                          Address offset: 0x88 */
    __IO uint32_t JDR4;          /*!< ADC injected data register 4,                          Address offset: 0x8C */
    uint32_t      RESERVED4[4];  /*!< Reserved,                                              Address offset: 0x090-0x09C */
    __IO uint32_t AWD2CR;        /*!< ADC analog watchdog 2 configuration register,          Address offset: 0xA0 */
    __IO uint32_t AWD3CR;        /*!< ADC analog watchdog 3 configuration register,          Address offset: 0xA4 */
    __IO uint32_t AWD1LTR;       /*!< ADC analog watchdog 1 low threshold register,          Address offset: 0xA8 */
    __IO uint32_t AWD1HTR;       /*!< ADC analog watchdog 1 high threshold register,         Address offset: 0xAC */
    __IO uint32_t AWD2LTR;       /*!< ADC analog watchdog 2 low threshold register,          Address offset: 0xB0 */
    __IO uint32_t AWD2HTR;       /*!< ADC analog watchdog 2 high threshold register,         Address offset: 0xB4 */
    __IO uint32_t AWD3LTR;       /*!< ADC analog watchdog 3 low threshold register,          Address offset: 0xB8 */
    __IO uint32_t AWD3HTR;       /*!< ADC analog watchdog 3 high threshold register,         Address offset: 0xBC */
    __IO uint32_t DIFSEL;        /*!< ADC differential mode selection register,              Address offset: 0xC0 */
    __IO uint32_t CALFACT;       /*!< ADC calibration factors,                               Address offset: 0xC4 */
    uint32_t      RESERVED5[2];  /*!< Reserved,                                              Address offset: 0x0C8-0x0CC */
    __IO uint32_t OR;            /*!< ADC option register,                                   Address offset: 0xD0 */
  } ADC_TypeDef;

  typedef struct
  {
    __IO uint32_t CSR;           /*!< ADC common status register,                            Address offset: 0x300 */
    uint32_t RESERVED;           /*!< Reserved,                                              Address offset: 0x304 */
    __IO uint32_t CCR;           /*!< ADC common control register,                           Address offset: 0x308 */
    uint32_t RESERVED0[57];      /*!< Reserved                                               Address offset: 0x30C-0x3EC */
    __IO uint32_t HWCFGR1;       /*!< ADC hardware configuration register                    Address offset: 0x3F0 */
    __IO uint32_t VERR;          /*!< CRC version register,                                  Address offset: 0x3F4 */
    __IO uint32_t IPIDR;         /*!< CRC ID register,                                       Address offset: 0x3F8 */
    __IO uint32_t SIDR;          /*!< CRC Size ID register,                                  Address offset: 0x3FC */
  } ADC_Common_TypeDef;
/*
 * @brief BSEC unit (BSEC)
 */
typedef struct
{
  __IO uint32_t FVRw[384];       /*!< BSEC fuse word (0-383) value register    Address offset: 0x000-0x5FC */
       uint32_t RESERVED0[128];  /*!< Reserved                                 Address offset: 0x600-0x7FC */
  __IO uint32_t SPLOCKx[12];     /*!< BSEC sticky program lock register (0-11), */ 
       uint32_t RESERVED1[4];    /*!< Reserved                                 Address offset: 0x830-0x83C */
  __IO uint32_t SWLOCKx[12];     /*!< BSEC sticky write lock register (0-11),      Address offset: 0x840-0x86C */
       uint32_t RESERVED2[4];    /*!< Reserved                                 Address offset: 0x870-0x87C */
  __IO uint32_t SRLOCKx[12];     /*!< BSEC sticky reload lock register (0-11),     Address offset: 0x880-0x8AC */
       uint32_t RESERVED3[4];    /*!< Reserved                                 Address offset: 0x8B0-0x8BC */
  __IO uint32_t OTPVLDRx[12];    /*!< BSEC OTP valid register (0-11),              Address offset: 0x8C0-0x8EC */
       uint32_t RESERVED4[20];   /*!< Reserved                                 Address offset: 0x8F0-0x93C */
  __IO uint32_t SFSRx[12];       /*!< BSEC shadowed fuses status register (0-11),  Address offset: 0x940-0x96C */
       uint32_t RESERVED5[165];  /*!< Reserved                                 Address offset: 0x970-0xC00 */
  __IO uint32_t OTPCR;           /*!< BSEC OTP control register                Address offset: 0xC04 */
  __IO uint32_t WDR;             /*!< BSEC write data register                 Address offset: 0xC08 */
       uint32_t RESERVED6[125];  /*!< Reserved                                 Address offset: 0xC0C-0xDFC */
  __IO uint32_t SCRATCHRx[4];    /*!< BSEC scratch register (0-3),                 Address offset: 0xE00-0xE0C */
  __IO uint32_t LOCKR;           /*!< BSEC lock register                       Address offset: 0xE10 */
  __IO uint32_t JTAGINR;         /*!< BSEC JTAG input register                 Address offset: 0xE14 */
  __IO uint32_t JTAGOUTR;        /*!< BSEC JTAG output register                Address offset: 0xE18 */
       uint32_t RESERVED7;       /*!< Reserved                                 Address offset: 0xE1C */
  __IO uint32_t DENR;            /*!< BSEC debug enable register               Address offset: 0xE20 */
  __IO uint32_t UNMAPR;          /*!< BSEC unmap register                      Address offset: 0xE24 */
       uint32_t RESERVED8[6];    /*!< Reserved                                 Address offset: 0xE28-0xE3C */
  __IO uint32_t SR;              /*!< BSEC status register                     Address offset: 0xE40 */
  __IO uint32_t OTPSR;           /*!< BSEC OTP status register                 Address offset: 0xE44 */
       uint32_t RESERVED9[14];   /*!< Reserved                                     Address offset: 0xE48-0xE7C */
  __IO uint32_t EPOCHR0;         /*!< BSEC epoch register                          Address offset: 0xE80 */
  __IO uint32_t EPOCHR1;         /*!< BSEC epoch register                          Address offset: 0xE84 */
  __IO uint32_t EPOCHSELCR;      /*!< BSEC epoch selection control register        Address offset: 0xE88 */
  __IO uint32_t DBGMCR;          /*!< BSEC debug control register for Cortex-M     Address offset: 0xE8C */
  __IO uint32_t AP_UNLOCK;       /*!< BSEC AP unlock                               Address offset: 0xE90 */
  __IO uint32_t HDPLMSR;         /*!< BSEC HDPL for Cortex-M status register       Address offset: 0xE94 */
  __IO uint32_t HDPLMCR;         /*!< BSEC HDPL for Cortex-M control register      Address offset: 0xE98 */
  __IO uint32_t NEXTHDPLMCR;     /*!< BSEC next HDPL control register for Cortex-M Address offset: 0xE9C */
       uint32_t RESERVED10[3];   /*!< Reserved                                     Address offset: 0xEA0-0xEA8 */
  __IO uint32_t DBGACR;          /*!< BSEC debug control register for Cortex-A     Address offset: 0xEAC */
       uint32_t RESERVED11;      /*!< Reserved                                     Address offset: 0xEB0 */
  __IO uint32_t HDPLASR;         /*!< BSEC HDPL for Cortex-A status register       Address offset: 0xEB4 */
  __IO uint32_t HDPLACR;         /*!< BSEC HDPL for Cortex-A control register      Address offset: 0xEB8 */
  __IO uint32_t NEXTHDPLACR;     /*!< BSEC next HDPL control register for Cortex-A Address offset: 0xEBC */
       uint32_t RESERVED12[32];  /*!< Reserved                                     Address offset: 0xEC0-0xF3C */
  __IO uint32_t WOSCRx[8];       /*!< BSEC write once scratch register (0-7),      Address offset: 0xF40-0xF5C */
       uint32_t RESERVED13[34];  /*!< Reserved                                 Address offset: 0xF60-0xFE4 */
  __IO uint32_t HRCR;            /*!< BSEC hot reset count register            Address offset: 0xFE8 */
  __IO uint32_t WRCR;            /*!< BSEC warm reset count register           Address offset: 0xFEC */
       uint32_t RESERVED14;      /*!< Reserved                                 Address offset: 0xFF0 */
  __IO uint32_t VERR;            /*!< BSEC version register                    Address offset: 0xFF4 */
  __IO uint32_t IPIDR;           /*!< BSEC identification register             Address offset: 0xFF8 */
  __IO uint32_t SIDR;            /*!< BSEC size identification register        Address offset: 0xFFC */
} BSEC_TypeDef;

/**
  * @brief CA35 Standardized status and control (SSC) registers
  */

typedef struct
{
  __IO uint32_t CHGCLKREQ_RW;           /*!< CA35SS SSC CHGCLKREQ register                    Address offset: 0x0000 */
  __IO uint32_t CHGCLKREQ_WS1;          /*!< CA35SS SSC CHGCLKREQ register                    Address offset: 0x0004 */
  __IO uint32_t CHGCLKREQ_WC1;          /*!< CA35SS SSC CHGCLKREQ register                    Address offset: 0x0008 */
  __IO uint32_t CHGCLKREQ_WT1;          /*!< CA35SS SSC CHGCLKREQ register                    Address offset: 0x000C */
  __IO uint32_t BRM_RW;                 /*!< CA35SS SSC BRM register                          Address offset: 0x0010 */
  __IO uint32_t BRM_WS1;                /*!< CA35SS SSC BRM register                          Address offset: 0x0014 */
  __IO uint32_t BRM_WC1;                /*!< CA35SS SSC BRM register                          Address offset: 0x0018 */
  __IO uint32_t BRM_WT1;                /*!< CA35SS SSC BRM register                          Address offset: 0x001C */
       uint32_t RESERVED0[24];          /*!< Reserved                                         Address offset: 0x0020-0x007C */
  __IO uint32_t PLL_FREQ1_RW;           /*!< CA35SS SSC PLL FREQ1 register                    Address offset: 0x0080 */
  __IO uint32_t PLL_FREQ1_WS1;          /*!< CA35SS SSC PLL FREQ1 register                    Address offset: 0x0084 */
  __IO uint32_t PLL_FREQ1_WC1;          /*!< CA35SS SSC PLL FREQ1 register                    Address offset: 0x0088 */
  __IO uint32_t PLL_FREQ1_WT1;          /*!< CA35SS SSC PLL FREQ1 register                    Address offset: 0x008C */
  __IO uint32_t PLL_FREQ2_RW;           /*!< CA35SS SSC PLL FREQ2 register                    Address offset: 0x0090 */
  __IO uint32_t PLL_FREQ2_WS1;          /*!< CA35SS SSC PLL FREQ2 register                    Address offset: 0x0094 */
  __IO uint32_t PLL_FREQ2_WC1;          /*!< CA35SS SSC PLL FREQ2 register                    Address offset: 0x0098 */
  __IO uint32_t PLL_FREQ2_WT1;          /*!< CA35SS SSC PLL FREQ2 register                    Address offset: 0x009C */
  __IO uint32_t PLL_ENABLE_RW;          /*!< CA35SS SSC PLL enable register                   Address offset: 0x00A0 */
  __IO uint32_t PLL_ENABLE_WS1;         /*!< CA35SS SSC PLL enable register                   Address offset: 0x00A4 */
  __IO uint32_t PLL_ENABLE_WC1;         /*!< CA35SS SSC PLL enable register                   Address offset: 0x00A8 */
  __IO uint32_t PLL_ENABLE_WT1;         /*!< CA35SS SSC PLL enable register                   Address offset: 0x00AC */
       uint32_t RESERVED1[8];           /*!< Reserved                                         Address offset: 0x00B0-0x00CC */
  __IO uint32_t LPI_TSGEN_NTS_CR_RW;    /*!< CA35SS SSC LPI TSGEN NTS CR register             Address offset: 0x00D0 */
  __IO uint32_t LPI_TSGEN_NTS_CR_WS1;   /*!< CA35SS SSC LPI TSGEN NTS CR register             Address offset: 0x00D4 */
  __IO uint32_t LPI_TSGEN_NTS_CR_WC1;   /*!< CA35SS SSC LPI TSGEN NTS CR register             Address offset: 0x00D8 */
  __IO uint32_t LPI_TSGEN_NTS_CR_WT1;   /*!< CA35SS SSC LPI TSGEN NTS CR register             Address offset: 0x00DC */
       uint32_t RESERVED2[8];           /*!< Reserved                                         Address offset: 0x00E0-0x00FC */
  __IO uint32_t CORE0_SMP;              /*!< CA35SS SSC core 0 SMP register                   Address offset: 0x0100 */
       uint32_t RESERVED3[3];           /*!< Reserved                                         Address offset: 0x0104-0x010C */
  __IO uint32_t CORE1_SMP;              /*!< CA35SS SSC core 1 SMP register                   Address offset: 0x0110 */
       uint32_t RESERVED4[11];          /*!< Reserved                                         Address offset: 0x0114-0x013C */
  __IO uint32_t LPI_STGEN_NTS_CR_RW;    /*!< CA35SS SSC LPI STGEN NTS CR register             Address offset: 0x0140 */
  __IO uint32_t LPI_STGEN_NTS_CR_WS1;   /*!< CA35SS SSC LPI STGEN NTS CR register             Address offset: 0x0144 */
  __IO uint32_t LPI_STGEN_NTS_CR_WC1;   /*!< CA35SS SSC LPI STGEN NTS CR register             Address offset: 0x0148 */
  __IO uint32_t LPI_STGEN_NTS_CR_WT1;   /*!< CA35SS SSC LPI STGEN NTS CR register             Address offset: 0x014C */
       uint32_t RESERVED5[41];          /*!< Reserved                                         Address offset: 0x0150-0x01F0 */
  __IO uint32_t VERR;                   /*!< CA35SS SYSCFG version register                   Address offset: 0x01F4 */
  __IO uint32_t IPIDR;                  /*!< CA35SS SYSCFG identification register            Address offset: 0x01F8 */
  __IO uint32_t SIDR;                   /*!< CA35SS SYSCFG size register                      Address offset: 0x01FC */
  __IO uint32_t NS_ENABLE_0_RW;         /*!< CA35SS SSC NS enable 0 register                  Address offset: 0x03C0 */
  __IO uint32_t NS_ENABLE_0_WS1;        /*!< CA35SS SSC NS enable 0 register                  Address offset: 0x03C4 */
  __IO uint32_t NS_ENABLE_0_WC1;        /*!< CA35SS SSC NS enable 0 register                  Address offset: 0x03C8 */
  __IO uint32_t NS_ENABLE_0_WT1;        /*!< CA35SS SSC NS enable 0 register                  Address offset: 0x03CC */
  __IO uint32_t NS_ENABLE_1;            /*!< CA35SS SSC NS enable 1 register                  Address offset: 0x03D0 */
} CA35SSC_TypeDef;

/**
  * @brief CA35 System configuration (SYSCFG) registers
  */

typedef struct
{
  __IO uint32_t ETR_LPI_CR;          /*!< CA35SS ETR low-power interface control register  Address offset: 0x00 */
  __IO uint32_t ETR_LPI_SR;          /*!< CA35SS ETR low-power interface status register   Address offset: 0x04 */
  __IO uint32_t STM_NSGUAREN_CR;     /*!< CA35SS STM non-secure guaranteed access register Address offset: 0x08 */
  __IO uint32_t TRACE_CLK_DIV_CR;    /*!< CA35SS TPIU export clock divider register        Address offset: 0x0C */
  __IO uint32_t DBGPWR_CR;           /*!< CA35SS Cortex-A35 core debug power mode register Address offset: 0x10 */
  __IO uint32_t DBGL1RSTDISABLE_CR;  /*!< CA35SS Cortex-A35 L1 data cache register         Address offset: 0x14 */
  __IO uint32_t DBGPWR_SR;           /*!< CA35SS Cortex-A35 debug power register           Address offset: 0x18 */
  __IO uint32_t EDBGACK_SR;          /*!< CA35SS Cortex-A35 debug mode status register     Address offset: 0x1C */
  __IO uint32_t GIC_CFGR;            /*!< GIC configuration register                       Address offset: 0x20 */
  __IO uint32_t LP_SR;               /*!< Cortex-A35 low-power status register             Address offset: 0x24 */
  __IO uint32_t RSTACK_SR;           /*!< Cortex-A35 reset status register                 Address offset: 0x28 */
       uint32_t RESERVED0[21];       /*!< Reserved                                         Address offset: 0x2C-0x7C */
  __IO uint32_t AARCH_MODE_CR;       /*!< CA35SS architecture mode register                Address offset: 0x80 */
  __IO uint32_t VBAR_CR;             /*!< CA35SS 64-bit mode reset vector register         Address offset: 0x84 */
  __IO uint32_t M33_ACCESS_CR;       /*!< Cortex-M33 boot register access rights register  Address offset: 0x88 */
       uint32_t RESERVED1[5];        /*!< Reserved                                         Address offset: 0x8C-0x9C */
  __IO uint32_t M33_TZEN_CR;         /*!< Cortex-M33 secure extension enable register      Address offset: 0xA0 */
  __IO uint32_t M33_INITSVTOR_CR;    /*!< Cortex-M33 secure vector address register        Address offset: 0xA4 */
  __IO uint32_t M33_INITNSVTOR_CR;   /*!< Cortex-M33 non-secure vector address register    Address offset: 0xA8 */
       uint32_t RESERVED2[82];       /*!< Reserved                                         Address offset: 0xAC-0x1F0 */
  __IO uint32_t VERR;                /*!< CA35SS version register,                         Address offset: 0x1F4 */
  __IO uint32_t IPIDR;               /*!< CA35SS ID register,                              Address offset: 0x1F8 */
  __IO uint32_t SIDR;                /*!< CA35SS Size ID register,                         Address offset: 0x1FC */
} CA35SYSCFG_TypeDef;

/**
  * @brief CRC calculation unit
  */

typedef struct
{
  __IO uint32_t DR;          /*!< CRC Data register,                           Address offset: 0x000 */
  __IO uint32_t IDR;         /*!< CRC Independent data register,               Address offset: 0x004 */
  __IO uint32_t CR;          /*!< CRC Control register,                        Address offset: 0x008 */
  uint32_t      RESERVED2;   /*!< Reserved,                                                    0x00C */
  __IO uint32_t INIT;        /*!< Initial CRC value register,                  Address offset: 0x010 */
  __IO uint32_t POL;         /*!< CRC polynomial register,                     Address offset: 0x014 */
  uint32_t      RESERVED3[247];   /*!< Reserved,                                       0x018 - 0x3F0 */
  __IO uint32_t VERR;        /*!< CRC version register,                        Address offset: 0x3F4 */
  __IO uint32_t IPIDR;       /*!< CRC ID register,                             Address offset: 0x3F8 */
  __IO uint32_t SIDR;        /*!< CRC Size ID register,                        Address offset: 0x3FC */
} CRC_TypeDef;


/**
  * @brief Debug MCU
  */

typedef struct
{
  __IO uint32_t IDCODE;        /*!< MCU device ID code                                          Address offset: 0x00 */
  __IO uint32_t CR;            /*!< DBGMCU Configuration Register                               Address offset: 0x04 */
  __IO uint32_t CRA35;         /*!< DBGMCU Configuration Register CPU1                          Address offset: 0x08 */
  __IO uint32_t RESERVED1;     /*!< Reserved                                                    Address offset: 0x0C */
  __IO uint32_t AHB2LFZ1;      /*!< DBGMCU AHB2 (lowest part) Peripheral Freeze Register CPU1   Address offset: 0x10 */
  __IO uint32_t AHB2HFZ1;      /*!< DBGMCU AHB2 (highest part) Peripheral Freeze Register CPU1  Address offset: 0x14 */
  __IO uint32_t AHB2LFZ2;      /*!< DBGMCU AHB2 (lowest part) Peripheral Freeze Register CPU2   Address offset: 0x18 */
  __IO uint32_t AHB2HFZ2;      /*!< DBGMCU AHB2 (highest part) Peripheral Freeze Register CPU2  Address offset: 0x1C */
  __IO uint32_t AHBSRFZ1;      /*!< DBGMCU AHBSR Peripheral Freeze Register CPU1                Address offset: 0x20 */
  __IO uint32_t AHBSRFZ2;      /*!< DBGMCU AHBSR Peripheral Freeze Register CPU2                Address offset: 0x24 */
  __IO uint32_t AHBSRFZ3;      /*!< DBGMCU AHBSR Peripheral Freeze Register CPU3                Address offset: 0x28 */
  __IO uint32_t APB1FZ1;       /*!< DBGMCU APB1 Peripheral Freeze Register CPU1                 Address offset: 0x2C */
  __IO uint32_t APB1FZ2;       /*!< DBGMCU APB1 Peripheral Freeze Register CPU2                 Address offset: 0x30 */
  __IO uint32_t APB2FZ1;       /*!< DBGMCU APB2 Peripheral Freeze Register CPU1                 Address offset: 0x34 */
  __IO uint32_t APB2FZ2;       /*!< DBGMCU APB2 Peripheral Freeze Register CPU2                 Address offset: 0x38 */
  __IO uint32_t APB3FZ1;       /*!< DBGMCU APB3 Peripheral Freeze Register CPU1                 Address offset: 0x3C */
  __IO uint32_t APB3FZ2;       /*!< DBGMCU APB3 Peripheral Freeze Register CPU2                 Address offset: 0x40 */
  __IO uint32_t APBSRFZ1;      /*!< DBGMCU APBSR Peripheral Freeze Register CPU1                Address offset: 0x44 */
  __IO uint32_t APBSRFZ2;      /*!< DBGMCU APBSR Peripheral Freeze Register CPU2                Address offset: 0x48 */
  __IO uint32_t APBSRFZ3;      /*!< DBGMCU APBSR Peripheral Freeze Register CPU3                Address offset: 0x4C */
} DBGMCU_TypeDef;

/**
  * @brief DCMI
  */

typedef struct
{
  __IO uint32_t CR;       /*!< DCMI control register 1,                       Address offset: 0x000 */
  __IO uint32_t SR;       /*!< DCMI status register,                          Address offset: 0x004 */
  __IO uint32_t RISR;     /*!< DCMI raw interrupt status register,            Address offset: 0x008 */
  __IO uint32_t IER;      /*!< DCMI interrupt enable register,                Address offset: 0x00C */
  __IO uint32_t MISR;     /*!< DCMI masked interrupt status register,         Address offset: 0x010 */
  __IO uint32_t ICR;      /*!< DCMI interrupt clear register,                 Address offset: 0x014 */
  __IO uint32_t ESCR;     /*!< DCMI embedded synchronization code register,   Address offset: 0x018 */
  __IO uint32_t ESUR;     /*!< DCMI embedded synchronization unmask register, Address offset: 0x01C */
  __IO uint32_t CWSTRTR;  /*!< DCMI crop window start,                        Address offset: 0x020 */
  __IO uint32_t CWSIZER;  /*!< DCMI crop window size,                         Address offset: 0x024 */
  __IO uint32_t DR;       /*!< DCMI data register,                            Address offset: 0x028 */
  uint32_t RESERVED[242]; /*!< Reserved,                                              0x02C - 0x3F0 */
  __IO uint32_t VERR;     /*!< DCMI Version register,                         Address offset: 0x3F4 */
  __IO uint32_t IPDR;     /*!< DCMI Identification register,                  Address offset: 0x3F8 */
  __IO uint32_t SIDR;     /*!< DCMI Size Identification register,             Address offset: 0x3FC */
} DCMI_TypeDef;

/*
 * @brief  (DCMIPP)
 */
typedef struct
{
  __IO uint32_t IPGR1;           /*!< DCMIPP IP-Plug global register 1                                   Address offset: 0x000 */
  __IO uint32_t IPGR2;           /*!< DCMIPP IP-Plug global register 2                                   Address offset: 0x004 */
  __IO uint32_t IPGR3;           /*!< DCMIPP IP-Plug global register 3                                   Address offset: 0x008 */
       uint32_t RESERVED0[4];    /*!< Reserved                                                           Address offset: 0x00C-0x018 */
  __IO uint32_t IPGR8;           /*!< DCMIPP IP-Plug identification register                             Address offset: 0x01C */
  __IO uint32_t IPC1R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x020 */
  __IO uint32_t IPC1R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x024 */
  __IO uint32_t IPC1R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x028 */
       uint32_t RESERVED1;       /*!< Reserved                                                           Address offset: 0x02C */
  __IO uint32_t IPC2R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x030 */
  __IO uint32_t IPC2R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x034 */
  __IO uint32_t IPC2R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x038 */
       uint32_t RESERVED2;       /*!< Reserved                                                           Address offset: 0x03C */
  __IO uint32_t IPC3R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x040 */
  __IO uint32_t IPC3R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x044 */
  __IO uint32_t IPC3R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x048 */
       uint32_t RESERVED3;       /*!< Reserved                                                           Address offset: 0x04C */
  __IO uint32_t IPC4R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x050 */
  __IO uint32_t IPC4R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x054 */
  __IO uint32_t IPC4R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x058 */
       uint32_t RESERVED4;       /*!< Reserved                                                           Address offset: 0x05C */
  __IO uint32_t IPC5R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x060 */
  __IO uint32_t IPC5R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x064 */
  __IO uint32_t IPC5R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x068 */
       uint32_t RESERVED5;       /*!< Reserved                                                           Address offset: 0x06C */
  __IO uint32_t IPC6R1;          /*!< DCMIPP IP-Plug Clientx register 1                                  Address offset: 0x070 */
  __IO uint32_t IPC6R2;          /*!< DCMIPP IP-Plug Clientx register 2                                  Address offset: 0x074 */
  __IO uint32_t IPC6R3;          /*!< DCMIPP IP-Plug Clientx register 3                                  Address offset: 0x078 */
       uint32_t RESERVED6[34];   /*!< Reserved                                                           Address offset: 0x07C-0x100 */
  __IO uint32_t PRCR;            /*!< DCMIPP parallel interface control register                         Address offset: 0x104 */
  __IO uint32_t PRESCR;          /*!< DCMIPP parallel interface embedded synchronization code register   Address offset: 0x108 */
  __IO uint32_t PRESUR;          /*!< DCMIPP parallel interface embedded synchronization unmask	register Address offset: 0x10C */
       uint32_t RESERVED7[57];   /*!< Reserved                                                           Address offset: 0x110-0x1F0 */
  __IO uint32_t PRIER;           /*!< DCMIPP parallel interface interrupt enable register                Address offset: 0x1F4 */
  __IO uint32_t PRSR;            /*!< DCMIPP parallel interface status register                          Address offset: 0x1F8 */
  __IO uint32_t PRFCR;           /*!< DCMIPP parallel interface interrupt clear register                 Address offset: 0x1FC */
  __IO uint32_t CMHWCFGR;        /*!< DCMIPP common IP HW configuration register                         Address offset: 0x200 */
  __IO uint32_t CMCR;            /*!< DCMIPP common configuration register                               Address offset: 0x204 */
  __IO uint32_t CMFRCR;          /*!< DCMIPP common frame counter register                               Address offset: 0x208 */
       uint32_t RESERVED8;       /*!< Reserved                                                           Address offset: 0x20C */
  __IO uint32_t CMTPGCR1;        /*!< DCMIPP common test pattern generator configuration register 1      Address offset: 0x210 */
  __IO uint32_t CMTPGCR2;        /*!< DCMIPP common test pattern generator configuration register 2      Address offset: 0x214 */
       uint32_t RESERVED9[118];  /*!< Reserved                                                           Address offset: 0x218-0x3EC */
  __IO uint32_t CMIER;           /*!< DCMIPP common interrupt enable register                            Address offset: 0x3F0 */
  __IO uint32_t CMSR1;           /*!< DCMIPP common status register 1                                    Address offset: 0x3F4 */
  __IO uint32_t CMSR2;           /*!< DCMIPP common status register 2                                    Address offset: 0x3F8 */
  __IO uint32_t CMFCR;           /*!< DCMIPP common interrupt clear register                             Address offset: 0x3FC */
  __IO uint32_t P0HWCFGR;        /*!< DCMIPP Pipe0 HW configuration register                             Address offset: 0x400 */
  __IO uint32_t P0FSCR;          /*!< DCMIPP Pipe0 flow selection configuration register                 Address offset: 0x404 */
       uint32_t RESERVED10[62];  /*!< Reserved                                                           Address offset: 0x408-0x4FC */
  __IO uint32_t P0FCTCR;         /*!< DCMIPP Pipe0 flow control configuration register                   Address offset: 0x500 */
  __IO uint32_t P0SCSTR;         /*!< DCMIPP Pipe0 statistic/crop start register                         Address offset: 0x504 */
  __IO uint32_t P0SCSZR;         /*!< DCMIPP Pipe0 statistic/crop size register                          Address offset: 0x508 */
       uint32_t RESERVED11[41];  /*!< Reserved                                                           Address offset: 0x50C-0x5AC */
  __IO uint32_t P0DCCNTR;        /*!< DCMIPP Pipe0 dump counter register                                 Address offset: 0x5B0 */
  __IO uint32_t P0DCLMTR;        /*!< DCMIPP Pipe0 dump limit register                                   Address offset: 0x5B4 */
       uint32_t RESERVED12[2];   /*!< Reserved                                                           Address offset: 0x5B8-0x5BC */
  __IO uint32_t P0PPCR;          /*!< DCMIPP Pipe0 pixel packer configuration register                   Address offset: 0x5C0 */
  __IO uint32_t P0PPM0AR1;       /*!< DCMIPP Pipe0 pixel packer Memory0 address register 1               Address offset: 0x5C4 */
       uint32_t RESERVED13[2];   /*!< Reserved                                                           Address offset: 0x5C8-0x5CC */
  __IO uint32_t P0STM0AR;        /*!< DCMIPP Pipe0 status Memory0 address register                       Address offset: 0x5D0 */
       uint32_t RESERVED14[8];   /*!< Reserved                                                           Address offset: 0x5D4-0x5F0 */
  __IO uint32_t P0IER;           /*!< DCMIPP Pipe0 interrupt enable register                             Address offset: 0x5F4 */
  __IO uint32_t P0SR;            /*!< DCMIPP Pipe0 status register                                       Address offset: 0x5F8 */
  __IO uint32_t P0FCR;           /*!< DCMIPP Pipe0 interrupt clear register                              Address offset: 0x5FC */
       uint32_t RESERVED15;      /*!< Reserved                                                           Address offset: 0x600 */
  __IO uint32_t P0CFSCR;         /*!< DCMIPP Pipe0 current flow selection configuration register         Address offset: 0x604 */
       uint32_t RESERVED16[62];  /*!< Reserved                                                           Address offset: 0x608-0x6FC */
  __IO uint32_t P0CFCTCR;        /*!< DCMIPP Pipe0 current flow control configuration register           Address offset: 0x700 */
  __IO uint32_t P0CSCSTR;        /*!< DCMIPP Pipe0 current statistic/crop start register                 Address offset: 0x704 */
  __IO uint32_t P0CSCSZR;        /*!< DCMIPP Pipe0 current statistic/crop size register                  Address offset: 0x708 */
       uint32_t RESERVED17[45];  /*!< Reserved                                                           Address offset: 0x70C-0x7BC */
  __IO uint32_t P0CPPCR;         /*!< DCMIPP Pipe0 current pixel packer configuration register           Address offset: 0x7C0 */
  __IO uint32_t P0CPPM0AR1;      /*!< DCMIPP Pipe0 current pixel packer Memory0 address register 1       Address offset: 0x7C4 */
       uint32_t RESERVED18[14];  /*!< Reserved                                                           Address offset: 0x7C8-0x7FC */
  __IO uint32_t P1HWCFGR;        /*!< DCMIPP Pipex HW configuration register                             Address offset: 0x800 */
  __IO uint32_t P1FSCR;          /*!< DCMIPP Pipe1 flow selection configuration register                 Address offset: 0x804 */
       uint32_t RESERVED19[6];   /*!< Reserved                                                           Address offset: 0x808-0x81C */
  __IO uint32_t P1SRCR;          /*!< DCMIPP Pipe1 stat removal configuration register                   Address offset: 0x820 */
  __IO uint32_t P1BPRCR;         /*!< DCMIPP Pipe1 bad pixel removal control register                    Address offset: 0x824 */
  __IO uint32_t P1BPRSR;         /*!< DCMIPP Pipe1 bad pixel removal status register                     Address offset: 0x828 */
       uint32_t RESERVED20;      /*!< Reserved                                                           Address offset: 0x82C */
  __IO uint32_t P1DECR;          /*!< DCMIPP Pipe1 decimation register                                   Address offset: 0x830 */
       uint32_t RESERVED21[3];   /*!< Reserved                                                           Address offset: 0x834-0x83C */
  __IO uint32_t P1BLCCR;         /*!< DCMIPP Pipe1 black level calibration control register              Address offset: 0x840 */
  __IO uint32_t P1EXCR1;         /*!< DCMIPP Pipe1 exposure control register 1                           Address offset: 0x844 */
  __IO uint32_t P1EXCR2;         /*!< DCMIPP Pipe1 exposure control register 2                           Address offset: 0x848 */
       uint32_t RESERVED22;      /*!< Reserved                                                           Address offset: 0x84C */
  __IO uint32_t P1ST1CR;         /*!< DCMIPP Pipe1 statistics1 control register                          Address offset: 0x850 */
  __IO uint32_t P1ST2CR;         /*!< DCMIPP Pipe1 statistics 2 control register                         Address offset: 0x854 */
  __IO uint32_t P1ST3CR;         /*!< DCMIPP Pipe1 statistics 3 control register                         Address offset: 0x858 */
  __IO uint32_t P1STSTR;         /*!< DCMIPP Pipe1 statistics window start register                      Address offset: 0x85C */
  __IO uint32_t P1STSZR;         /*!< DCMIPP Pipe1 statistics window size register                       Address offset: 0x860 */
  __IO uint32_t P1ST1SR;         /*!< DCMIPP Pipe1 statistics 1 status register                          Address offset: 0x864 */
  __IO uint32_t P1ST2SR;         /*!< DCMIPP Pipe1 statistics 2 status register                          Address offset: 0x868 */
  __IO uint32_t P1ST3SR;         /*!< DCMIPP Pipe1 statistics 3 status register                          Address offset: 0x86C */
  __IO uint32_t P1DMCR;          /*!< DCMIPP Pipe1 demosaicing configuration register                    Address offset: 0x870 */
       uint32_t RESERVED23[3];   /*!< Reserved                                                           Address offset: 0x874-0x87C */
  __IO uint32_t P1CCCR;          /*!< DCMIPP Pipe1 ColorConv configuration register                      Address offset: 0x880 */
  __IO uint32_t P1CCRR1;         /*!< DCMIPP Pipe1 ColorConv red coefficient register 1                  Address offset: 0x884 */
  __IO uint32_t P1CCRR2;         /*!< DCMIPP Pipe1 ColorConv red coefficient register 2                  Address offset: 0x888 */
  __IO uint32_t P1CCGR1;         /*!< DCMIPP Pipe1 ColorConv green coefficient register 1                Address offset: 0x88C */
  __IO uint32_t P1CCGR2;         /*!< DCMIPP Pipe1 ColorConv green coefficient register 2                Address offset: 0x890 */
  __IO uint32_t P1CCBR1;         /*!< DCMIPP Pipex ColorConv blue coefficient register 1                 Address offset: 0x894 */
  __IO uint32_t P1CCBR2;         /*!< DCMIPP Pipe1 ColorConv blue coefficient register 2                 Address offset: 0x898 */
       uint32_t RESERVED24;      /*!< Reserved                                                           Address offset: 0x89C */
  __IO uint32_t P1CTCR1;         /*!< DCMIPP Pipe1 contrast control register 1                           Address offset: 0x8A0 */
  __IO uint32_t P1CTCR2;         /*!< DCMIPP Pipe1 contrast control register 2                           Address offset: 0x8A4 */
  __IO uint32_t P1CTCR3;         /*!< DCMIPP Pipe1 contrast control register 3                           Address offset: 0x8A8 */
       uint32_t RESERVED25;      /*!< Reserved                                                           Address offset: 0x8AC */
  __IO uint32_t P1HSCR;          /*!< DCMIPP Pipe1 histogram configuration register                      Address offset: 0x8B0 */
  __IO uint32_t P1HSSTR;         /*!< DCMIPP Pipe1 histogram window start register                       Address offset: 0x8B4 */
  __IO uint32_t P1HSSZR;         /*!< DCMIPP Pipe1 histogram window size register                        Address offset: 0x8B8 */
  __IO uint32_t P1HSMAR1;        /*!< DCMIPP Pipe1 histogram memory address register 1                   Address offset: 0x8BC */
       uint32_t RESERVED26;      /*!< Reserved                                                           Address offset: 0x8C0 */
  __IO uint32_t P1HSSMAR;        /*!< DCMIPP Pipe1 histogram memory status address register 3            Address offset: 0x8C4 */
       uint32_t RESERVED27[14];  /*!< Reserved                                                           Address offset: 0x8C8-0x8FC */
  __IO uint32_t P1FCTCR;         /*!< DCMIPP Pipex flow control configuration register                   Address offset: 0x900 */
  __IO uint32_t P1CRSTR;         /*!< DCMIPP Pipex crop window start register                            Address offset: 0x904 */
  __IO uint32_t P1CRSZR;         /*!< DCMIPP Pipex crop window size register                             Address offset: 0x908 */
  __IO uint32_t P1DCCR;          /*!< DCMIPP Pipex decimation register                                   Address offset: 0x90C */
  __IO uint32_t P1DSCR;          /*!< DCMIPP Pipex downsize configuration register                       Address offset: 0x910 */
  __IO uint32_t P1DSRTIOR;       /*!< DCMIPP Pipex downsize ratio register                               Address offset: 0x914 */
  __IO uint32_t P1DSSZR;         /*!< DCMIPP Pipex downsize destination size register                    Address offset: 0x918 */
       uint32_t RESERVED28[21];  /*!< Reserved                                                           Address offset: 0x91C-0x96C */
  __IO uint32_t P1GMCR;          /*!< DCMIPP Pipex gamma configuration register                          Address offset: 0x970 */
       uint32_t RESERVED29[3];   /*!< Reserved                                                           Address offset: 0x974-0x97C */
  __IO uint32_t P1YUVCR;         /*!< DCMIPP Pipe1 YUVConv configuration register                        Address offset: 0x980 */
  __IO uint32_t P1YUVRR1;        /*!< DCMIPP Pipe1 YUVConv red coefficient register 1                    Address offset: 0x984 */
  __IO uint32_t P1YUVRR2;        /*!< DCMIPP Pipe1 YUVConv red coefficient register 2                    Address offset: 0x988 */
  __IO uint32_t P1YUVGR1;        /*!< DCMIPP Pipe1 YUVConv green coefficient register 1                  Address offset: 0x98C */
  __IO uint32_t P1YUVGR2;        /*!< DCMIPP Pipe1 YUVConv green coefficient register 2                  Address offset: 0x990 */
  __IO uint32_t P1YUVBR1;        /*!< DCMIPP Pipe1 YUVConv blue coefficient register 1                   Address offset: 0x994 */
  __IO uint32_t P1YUVBR2;        /*!< DCMIPP Pipe1 YUV blue coefficient register 2                       Address offset: 0x998 */
       uint32_t RESERVED30[9];   /*!< Reserved                                                           Address offset: 0x99C-0x9BC */
  __IO uint32_t P1PPCR;          /*!< DCMIPP Pipe1 pixel packer configuration register                   Address offset: 0x9C0 */
  __IO uint32_t P1PPM0AR1;       /*!< DCMIPP Pipe1 pixel packer Memory0 address register 1               Address offset: 0x9C4 */
       uint32_t RESERVED31;      /*!< Reserved                                                           Address offset: 0x9C8 */
  __IO uint32_t P1PPM0PR;        /*!< DCMIPP Pipex pixel packer Memory0 pitch register                   Address offset: 0x9CC */
  __IO uint32_t P1STM0AR;        /*!< DCMIPP Pipex status Memory0 address register                       Address offset: 0x9D0 */
  __IO uint32_t P1PPM1AR1;       /*!< DCMIPP Pipex pixel packer Memory1 address register 1               Address offset: 0x9D4 */
       uint32_t RESERVED32;      /*!< Reserved                                                           Address offset: 0x9D8 */
  __IO uint32_t P1PPM1PR;        /*!< DCMIPP Pipex pixel packer Memory1 pitch register                   Address offset: 0x9DC */
  __IO uint32_t P1STM1AR;        /*!< DCMIPP Pipex status Memory1 address register                       Address offset: 0x9E0 */
  __IO uint32_t P1PPM2AR1;       /*!< DCMIPP Pipex pixel packer memory2 address register 1               Address offset: 0x9E4 */
       uint32_t RESERVED33[2];   /*!< Reserved                                                           Address offset: 0x9E8-0x9EC */
  __IO uint32_t P1STM2AR;        /*!< DCMIPP Pipex status Memory2 address register                       Address offset: 0x9F0 */
  __IO uint32_t P1IER;           /*!< DCMIPP Pipe1 interrupt enable register                             Address offset: 0x9F4 */
  __IO uint32_t P1SR;            /*!< DCMIPP Pipe1 status register                                       Address offset: 0x9F8 */
  __IO uint32_t P1FCR;           /*!< DCMIPP Pipe1 interrupt clear register                              Address offset: 0x9FC */
       uint32_t RESERVED34;      /*!< Reserved                                                           Address offset: 0xA00 */
  __IO uint32_t P1CFSCR;         /*!< DCMIPP Pipe1 current flow selection configuration register         Address offset: 0xA04 */
       uint32_t RESERVED35[7];   /*!< Reserved                                                           Address offset: 0xA08-0xA20 */
  __IO uint32_t P1CBPRCR;        /*!< DCMIPP Pipe1 current bad pixel removal register                    Address offset: 0xA24 */
       uint32_t RESERVED36[6];   /*!< Reserved                                                           Address offset: 0xA28-0xA3C */
  __IO uint32_t P1CBLCCR;        /*!< DCMIPP Pipe1 current black level calibration control register      Address offset: 0xA40 */
  __IO uint32_t P1CEXCR1;        /*!< DCMIPP Pipe1 current exposure control register 1                   Address offset: 0xA44 */
  __IO uint32_t P1CEXCR2;        /*!< DCMIPP Pipe1 current exposure control register 2                   Address offset: 0xA48 */
       uint32_t RESERVED37;      /*!< Reserved                                                           Address offset: 0xA4C */
  __IO uint32_t P1CST1CR;        /*!< DCMIPP Pipe1 current statistics 1 control register                 Address offset: 0xA50 */
  __IO uint32_t P1CST2CR;        /*!< DCMIPP Pipe1 current statistics 2 control register                 Address offset: 0xA54 */
  __IO uint32_t P1CST3CR;        /*!< DCMIPP Pipe1 current statistics 3 control register                 Address offset: 0xA58 */
  __IO uint32_t P1CSTSTR;        /*!< DCMIPP Pipe1 current statistics window start register              Address offset: 0xA5C */
  __IO uint32_t P1CSTSZR;        /*!< DCMIPP Pipe1 current statistics window size register               Address offset: 0xA60 */
       uint32_t RESERVED38[7];   /*!< Reserved                                                           Address offset: 0xA64-0xA7C */
  __IO uint32_t P1CCCCR;         /*!< DCMIPP Pipe1 current ColorConv configuration register              Address offset: 0xA80 */
  __IO uint32_t P1CCCRR1;        /*!< DCMIPP Pipe1 current ColorConv red coefficient register 1          Address offset: 0xA84 */
  __IO uint32_t P1CCCRR2;        /*!< DCMIPP Pipe1 current ColorConv red coefficient register 2          Address offset: 0xA88 */
  __IO uint32_t P1CCCGR1;        /*!< DCMIPP Pipe1 current ColorConv green coefficient register 1        Address offset: 0xA8C */
  __IO uint32_t P1CCCGR2;        /*!< DCMIPP Pipe1 current ColorConv green coefficient register 2        Address offset: 0xA90 */
  __IO uint32_t P1CCCBR1;        /*!< DCMIPP Pipex current ColorConv blue coefficient register 1         Address offset: 0xA94 */
  __IO uint32_t P1CCCBR2;        /*!< DCMIPP Pipe1 current ColorConv blue coefficient register 2         Address offset: 0xA98 */
       uint32_t RESERVED39;      /*!< Reserved                                                           Address offset: 0xA9C */
  __IO uint32_t P1CCTCR1;        /*!< DCMIPP Pipe1 current contrast control register 1                   Address offset: 0xAA0 */
  __IO uint32_t P1CCTCR2;        /*!< DCMIPP Pipe1 current contrast control register 2                   Address offset: 0xAA4 */
  __IO uint32_t P1CCTCR3;        /*!< DCMIPP Pipe1 current contrast control register 3                   Address offset: 0xAA8 */
       uint32_t RESERVED40;      /*!< Reserved                                                           Address offset: 0xAAC */
  __IO uint32_t P1CHSCR;         /*!< DCMIPP Pipe1 current histogram configuration register              Address offset: 0xAB0 */
  __IO uint32_t P1CHSSTR;        /*!< DCMIPP Pipe1 current histogram window start register               Address offset: 0xAB4 */
  __IO uint32_t P1CHSSZR;        /*!< DCMIPP Pipe1 current histogram window size register                Address offset: 0xAB8 */
  __IO uint32_t P1CHSMAR1;       /*!< DCMIPP Pipe1 current histogram memory address register 1           Address offset: 0xABC */
       uint32_t RESERVED41[16];  /*!< Reserved                                                           Address offset: 0xAC0-0xAFC */
  __IO uint32_t P1CFCTCR;        /*!< DCMIPP Pipex current flow control configuration register           Address offset: 0xB00 */
  __IO uint32_t P1CCRSTR;        /*!< DCMIPP Pipex current crop window start register                    Address offset: 0xB04 */
  __IO uint32_t P1CCRSZR;        /*!< DCMIPP Pipex current crop window size register                     Address offset: 0xB08 */
  __IO uint32_t P1CDCCR;         /*!< DCMIPP Pipex current decimation register                           Address offset: 0xB0C */
  __IO uint32_t P1CDSCR;         /*!< DCMIPP Pipex current downsize configuration register               Address offset: 0xB10 */
  __IO uint32_t P1CDSRTIOR;      /*!< DCMIPP Pipex current downsize ratio register                       Address offset: 0xB14 */
  __IO uint32_t P1CDSSZR;        /*!< DCMIPP Pipex current downsize destination size register            Address offset: 0xB18 */
       uint32_t RESERVED42[41];  /*!< Reserved                                                           Address offset: 0xB1C-0xBBC */
  __IO uint32_t P1CPPCR;         /*!< DCMIPP Pipe1 current pixel packer configuration register           Address offset: 0xBC0 */
  __IO uint32_t P1CPPM0AR1;      /*!< DCMIPP Pipe1 current pixel packer Memory0 address register 1       Address offset: 0xBC4 */
       uint32_t RESERVED43;      /*!< Reserved                                                           Address offset: 0xBC8 */
  __IO uint32_t P1CPPM0PR;       /*!< DCMIPP Pipex current pixel packer Memory0 pitch register           Address offset: 0xBCC */
       uint32_t RESERVED44;      /*!< Reserved                                                           Address offset: 0xBD0 */
  __IO uint32_t P1CPPM1AR1;      /*!< DCMIPP Pipex current pixel packer Memory1 address register 1       Address offset: 0xBD4 */
       uint32_t RESERVED45;      /*!< Reserved                                                           Address offset: 0xBD8 */
  __IO uint32_t P1CPPM1PR;       /*!< DCMIPP Pipex current pixel packer Memory1 pitch register           Address offset: 0xBDC */
       uint32_t RESERVED46;      /*!< Reserved                                                           Address offset: 0xBE0 */
  __IO uint32_t P1CPPM2AR1;      /*!< DCMIPP Pipex current pixel packer Memory2 address register 1       Address offset: 0xBE4 */
       uint32_t RESERVED47[6];   /*!< Reserved                                                           Address offset: 0xBE8-0xBFC */
  __IO uint32_t P2HWCFGR;        /*!< DCMIPP Pipex HW configuration register                             Address offset: 0xC00 */
  __IO uint32_t P2FSCR;          /*!< DCMIPP Pipe2 flow selection configuration register                 Address offset: 0xC04 */
       uint32_t RESERVED48[62];  /*!< Reserved                                                           Address offset: 0xC08-0xCFC */
  __IO uint32_t P2FCTCR;         /*!< DCMIPP Pipex flow control configuration register                   Address offset: 0xD00 */
  __IO uint32_t P2CRSTR;         /*!< DCMIPP Pipex crop window start register                            Address offset: 0xD04 */
  __IO uint32_t P2CRSZR;         /*!< DCMIPP Pipex crop window size register                             Address offset: 0xD08 */
  __IO uint32_t P2DCCR;          /*!< DCMIPP Pipex decimation register                                   Address offset: 0xD0C */
  __IO uint32_t P2DSCR;          /*!< DCMIPP Pipex downsize configuration register                       Address offset: 0xD10 */
  __IO uint32_t P2DSRTIOR;       /*!< DCMIPP Pipex downsize ratio register                               Address offset: 0xD14 */
  __IO uint32_t P2DSSZR;         /*!< DCMIPP Pipex downsize destination size register                    Address offset: 0xD18 */
       uint32_t RESERVED49[21];  /*!< Reserved                                                           Address offset: 0xD1C-0xD6C */
  __IO uint32_t P2GMCR;          /*!< DCMIPP Pipex gamma configuration register                          Address offset: 0xD70 */
       uint32_t RESERVED50[19];  /*!< Reserved                                                           Address offset: 0xD74-0xDBC */
  __IO uint32_t P2PPCR;          /*!< DCMIPP Pipe2 pixel packer configuration register                   Address offset: 0xDC0 */
  __IO uint32_t P2PPM0AR1;       /*!< DCMIPP Pipe2 pixel packer Memory0 address register 1               Address offset: 0xDC4 */
       uint32_t RESERVED51;      /*!< Reserved                                                           Address offset: 0xDC8 */
  __IO uint32_t P2PPM0PR;        /*!< DCMIPP Pipex pixel packer Memory0 pitch register                   Address offset: 0xDCC */
  __IO uint32_t P2STM0AR;        /*!< DCMIPP Pipex status Memory0 address register                       Address offset: 0xDD0 */
       uint32_t RESERVED52[8];   /*!< Reserved                                                           Address offset: 0xDD4-0xDF0 */
  __IO uint32_t P2IER;           /*!< DCMIPP Pipe2 interrupt enable register                             Address offset: 0xDF4 */
  __IO uint32_t P2SR;            /*!< DCMIPP Pipe2 status register                                       Address offset: 0xDF8 */
  __IO uint32_t P2FCR;           /*!< DCMIPP Pipe2 interrupt clear register                              Address offset: 0xDFC */
       uint32_t RESERVED53;      /*!< Reserved                                                           Address offset: 0xE00 */
  __IO uint32_t P2CFSCR;         /*!< DCMIPP Pipe2 current flow selection configuration register         Address offset: 0xE04 */
       uint32_t RESERVED54[62];  /*!< Reserved                                                           Address offset: 0xE08-0xEFC */
  __IO uint32_t P2CFCTCR;        /*!< DCMIPP Pipex current flow control configuration register           Address offset: 0xF00 */
  __IO uint32_t P2CCRSTR;        /*!< DCMIPP Pipex current crop window start register                    Address offset: 0xF04 */
  __IO uint32_t P2CCRSZR;        /*!< DCMIPP Pipex current crop window size register                     Address offset: 0xF08 */
  __IO uint32_t P2CDCCR;         /*!< DCMIPP Pipex current decimation register                           Address offset: 0xF0C */
  __IO uint32_t P2CDSCR;         /*!< DCMIPP Pipex current downsize configuration register               Address offset: 0xF10 */
  __IO uint32_t P2CDSRTIOR;      /*!< DCMIPP Pipex current downsize ratio register                       Address offset: 0xF14 */
  __IO uint32_t P2CDSSZR;        /*!< DCMIPP Pipex current downsize destination size register            Address offset: 0xF18 */
       uint32_t RESERVED55[41];  /*!< Reserved                                                           Address offset: 0xF1C-0xFBC */
  __IO uint32_t P2CPPCR;         /*!< DCMIPP Pipe2 current pixel packer configuration register           Address offset: 0xFC0 */
  __IO uint32_t P2CPPM0AR1;      /*!< DCMIPP Pipe2 current pixel packer Memory0 address register 1       Address offset: 0xFC4 */
       uint32_t RESERVED56;      /*!< Reserved                                                           Address offset: 0xFC8 */
  __IO uint32_t P2CPPM0PR;       /*!< DCMIPP Pipex current pixel packer Memory0 pitch register           Address offset: 0xFCC */
       uint32_t RESERVED57[6];   /*!< Reserved                                                           Address offset: 0xFD0-0xFE4 */
  __IO uint32_t HWCFGR3;         /*!< DCMIPP hardware configuration register 3                           Address offset: 0xFE8 */
  __IO uint32_t HWCFGR2;         /*!< DCMIPP hardware configuration register 2                           Address offset: 0xFEC */
  __IO uint32_t HWCFGR1;         /*!< DCMIPP hardware configuration register 1                           Address offset: 0xFF0 */
  __IO uint32_t VERR;            /*!< DCMIPP version register                                            Address offset: 0xFF4 */
  __IO uint32_t IPIDR;           /*!< DCMIPP identification register                                     Address offset: 0xFF8 */
  __IO uint32_t SIDR;            /*!< DCMIPP size identification register                                Address offset: 0xFFC */
} DCMIPP_TypeDef;

/*
 * @brief DDRCTRL block description (DDRCTRL)
 */
typedef struct
{
  __IO uint32_t MSTR;            /*!< DDRCTRL master register 0                            Address offset: 0x000 */
  __IO uint32_t STAT;            /*!< DDRCTRL operating mode status register               Address offset: 0x004 */
       uint32_t RESERVED0[2];    /*!< Reserved                                             Address offset: 0x008-0x00C */
  __IO uint32_t MRCTRL0;         /*!< DDRCTRL mode register read/write control register 0  Address offset: 0x010 */
  __IO uint32_t MRCTRL1;         /*!< DDRCTRL mode register read/write control register 1  Address offset: 0x014 */
  __IO uint32_t MRSTAT;          /*!< DDRCTRL mode register read/write status register     Address offset: 0x018 */
  __IO uint32_t MRCTRL2;         /*!< DDRCTRL mode register read/write control register 2  Address offset: 0x01C */
  __IO uint32_t DERATEEN;        /*!< DDRCTRL temperature derate enable register           Address offset: 0x020 */
  __IO uint32_t DERATEINT;       /*!< DDRCTRL temperature derate interval register         Address offset: 0x024 */
       uint32_t RESERVED1;       /*!< Reserved                                             Address offset: 0x028 */
  __IO uint32_t DERATECTL;       /*!< DDRCTRL temperature derate control register          Address offset: 0x02C */
  __IO uint32_t PWRCTL;          /*!< DDRCTRL low power control register                   Address offset: 0x030 */
  __IO uint32_t PWRTMG;          /*!< DDRCTRL low power timing register                    Address offset: 0x034 */
  __IO uint32_t HWLPCTL;         /*!< DDRCTRL hardware low power control register          Address offset: 0x038 */
       uint32_t RESERVED2[5];    /*!< Reserved                                             Address offset: 0x03C-0x04C */
  __IO uint32_t RFSHCTL0;        /*!< DDRCTRL refresh control register 0                   Address offset: 0x050 */
  __IO uint32_t RFSHCTL1;        /*!< DDRCTRL refresh control register 1                   Address offset: 0x054 */
       uint32_t RESERVED3;       /*!< DDRCTRL refresh control register 2                   Address offset: 0x058 */
       uint32_t RESERVED4;       /*!< Reserved                                             Address offset: 0x05C */
  __IO uint32_t RFSHCTL3;        /*!< DDRCTRL refresh control register 3                   Address offset: 0x060 */
  __IO uint32_t RFSHTMG;         /*!< DDRCTRL refresh timing register                      Address offset: 0x064 */
  __IO uint32_t RFSHTMG1;        /*!< DDRCTRL refresh timing register 1                    Address offset: 0x068 */
       uint32_t RESERVED5[21];   /*!< Reserved                                             Address offset: 0x06C-0x0BC */
  __IO uint32_t CRCPARCTL0;      /*!< DDRCTRL CRC parity control register 0                Address offset: 0x0C0 */
  __IO uint32_t CRCPARCTL1;      /*!< DDRCTRL CRC parity control register 1                Address offset: 0x0C4 */
       uint32_t RESERVED6;       /*!< Reserved                                             Address offset: 0x0C8 */
  __IO uint32_t CRCPARSTAT;      /*!< DDRCTRL CRC parity status register                   Address offset: 0x0CC */
  __IO uint32_t INIT0;           /*!< DDRCTRL SDRAM initialization register 0              Address offset: 0x0D0 */
  __IO uint32_t INIT1;           /*!< DDRCTRL SDRAM initialization register 1              Address offset: 0x0D4 */
  __IO uint32_t INIT2;           /*!< DDRCTRL SDRAM initialization register 2              Address offset: 0x0D8 */
  __IO uint32_t INIT3;           /*!< DDRCTRL SDRAM initialization register 3              Address offset: 0x0DC */
  __IO uint32_t INIT4;           /*!< DDRCTRL SDRAM initialization register 4              Address offset: 0x0E0 */
  __IO uint32_t INIT5;           /*!< DDRCTRL SDRAM initialization register 5              Address offset: 0x0E4 */
  __IO uint32_t INIT6;           /*!< DDRCTRL SDRAM initialization register 6              Address offset: 0x0E8 */
  __IO uint32_t INIT7;           /*!< DDRCTRL SDRAM initialization register 7              Address offset: 0x0EC */
  __IO uint32_t DIMMCTL;         /*!< DDRCTRL DIMM control register                        Address offset: 0x0F0 */
  __IO uint32_t RANKCTL;         /*!< DDRCTRL rank control register                        Address offset: 0x0F4 */
  __IO uint32_t RANKCTL1;        /*!< DDRCTRL rank control register 1                      Address offset: 0x0F8 */
       uint32_t RESERVED7;       /*!< Reserved                                             Address offset: 0x0FC */
  __IO uint32_t DRAMTMG0;        /*!< DDRCTRL SDRAM timing register 0                      Address offset: 0x100 */
  __IO uint32_t DRAMTMG1;        /*!< DDRCTRL SDRAM timing register 1                      Address offset: 0x104 */
  __IO uint32_t DRAMTMG2;        /*!< DDRCTRL SDRAM timing register 2                      Address offset: 0x108 */
  __IO uint32_t DRAMTMG3;        /*!< DDRCTRL SDRAM timing register 3                      Address offset: 0x10C */
  __IO uint32_t DRAMTMG4;        /*!< DDRCTRL SDRAM timing register 4                      Address offset: 0x110 */
  __IO uint32_t DRAMTMG5;        /*!< DDRCTRL SDRAM timing register 5                      Address offset: 0x114 */
  __IO uint32_t DRAMTMG6;        /*!< DDRCTRL SDRAM timing register 6                      Address offset: 0x118 */
  __IO uint32_t DRAMTMG7;        /*!< DDRCTRL SDRAM timing register 7                      Address offset: 0x11C */
  __IO uint32_t DRAMTMG8;        /*!< DDRCTRL SDRAM timing register 8                      Address offset: 0x120 */
  __IO uint32_t DRAMTMG9;        /*!< DDRCTRL SDRAM timing register 9                      Address offset: 0x124 */
  __IO uint32_t DRAMTMG10;       /*!< DDRCTRL SDRAM timing register 10                     Address offset: 0x128 */
  __IO uint32_t DRAMTMG11;       /*!< DDRCTRL SDRAM timing register 11                     Address offset: 0x12C */
  __IO uint32_t DRAMTMG12;       /*!< DDRCTRL SDRAM timing register 12                     Address offset: 0x130 */
  __IO uint32_t DRAMTMG13;       /*!< DDRCTRL SDRAM timing register 13                     Address offset: 0x134 */
  __IO uint32_t DRAMTMG14;       /*!< DDRCTRL SDRAM timing register 14                     Address offset: 0x138 */
  __IO uint32_t DRAMTMG15;       /*!< DDRCTRL SDRAM timing register 15                     Address offset: 0x13C */
       uint32_t RESERVED8[16];   /*!< Reserved                                             Address offset: 0x140-0x17C */
  __IO uint32_t ZQCTL0;          /*!< DDRCTRL ZQ control register 0                        Address offset: 0x180 */
  __IO uint32_t ZQCTL1;          /*!< DDRCTRL ZQ control register 1                        Address offset: 0x184 */
  __IO uint32_t ZQCTL2;          /*!< DDRCTRL ZQ control register 2                        Address offset: 0x188 */
  __IO uint32_t ZQSTAT;          /*!< DDRCTRL ZQ status register                           Address offset: 0x18C */
  __IO uint32_t DFITMG0;         /*!< DDRCTRL DFI timing register 0                        Address offset: 0x190 */
  __IO uint32_t DFITMG1;         /*!< DDRCTRL DFI timing register 1                        Address offset: 0x194 */
  __IO uint32_t DFILPCFG0;       /*!< DDRCTRL low power configuration register 0           Address offset: 0x198 */
  __IO uint32_t DFILPCFG1;       /*!< DDRCTRL low power configuration register 1           Address offset: 0x19C */
  __IO uint32_t DFIUPD0;         /*!< DDRCTRL DFI update register 0                        Address offset: 0x1A0 */
  __IO uint32_t DFIUPD1;         /*!< DDRCTRL DFI update register 1                        Address offset: 0x1A4 */
  __IO uint32_t DFIUPD2;         /*!< DDRCTRL DFI update register 2                        Address offset: 0x1A8 */
       uint32_t RESERVED9;       /*!< Reserved                                             Address offset: 0x1AC */
  __IO uint32_t DFIMISC;         /*!< DDRCTRL DFI miscellaneous control register           Address offset: 0x1B0 */
  __IO uint32_t DFITMG2;         /*!< DDRCTRL DFI timing register 2                        Address offset: 0x1B4 */
  __IO uint32_t DFITMG3;         /*!< DDRCTRL DFI timing register 3                        Address offset: 0x1B8 */
  __IO uint32_t DFISTAT;         /*!< DDRCTRL DFI status register                          Address offset: 0x1BC */
  __IO uint32_t DBICTL;          /*!< DDRCTRL DM/DBI control register                      Address offset: 0x1C0 */
  __IO uint32_t DFIPHYMSTR;      /*!< DDRCTRL DFI PHY master register                      Address offset: 0x1C4 */
       uint32_t RESERVED10[14];  /*!< Reserved                                             Address offset: 0x1C8-0x1FC */
  __IO uint32_t ADDRMAP0;        /*!< DDRCTRL address map register 0                       Address offset: 0x200 */
  __IO uint32_t ADDRMAP1;        /*!< DDRCTRL address map register 1                       Address offset: 0x204 */
  __IO uint32_t ADDRMAP2;        /*!< DDRCTRL address map register 2                       Address offset: 0x208 */
  __IO uint32_t ADDRMAP3;        /*!< DDRCTRL address map register 3                       Address offset: 0x20C */
  __IO uint32_t ADDRMAP4;        /*!< DDRCTRL address map register 4                       Address offset: 0x210 */
  __IO uint32_t ADDRMAP5;        /*!< DDRCTRL address map register 5                       Address offset: 0x214 */
  __IO uint32_t ADDRMAP6;        /*!< DDRCTRL address register 6                           Address offset: 0x218 */
  __IO uint32_t ADDRMAP7;        /*!< DDRCTRL address register 7                           Address offset: 0x21C */
  __IO uint32_t ADDRMAP8;        /*!< DDRCTRL address register 8                           Address offset: 0x220 */
  __IO uint32_t ADDRMAP9;        /*!< DDRCTRL address map register 9                       Address offset: 0x224 */
  __IO uint32_t ADDRMAP10;       /*!< DDRCTRL address map register 10                      Address offset: 0x228 */
  __IO uint32_t ADDRMAP11;       /*!< DDRCTRL address map register 11                      Address offset: 0x22C */
       uint32_t RESERVED11[4];   /*!< Reserved                                             Address offset: 0x230-0x23C */
  __IO uint32_t ODTCFG;          /*!< DDRCTRL ODT configuration register                   Address offset: 0x240 */
  __IO uint32_t ODTMAP;          /*!< DDRCTRL ODT/Rank map register                        Address offset: 0x244 */
       uint32_t RESERVED12[2];   /*!< Reserved                                             Address offset: 0x248-0x24C */
  __IO uint32_t SCHED;           /*!< DDRCTRL scheduler control register                   Address offset: 0x250 */
  __IO uint32_t SCHED1;          /*!< DDRCTRL scheduler control register 1                 Address offset: 0x254 */
       uint32_t RESERVED13;      /*!< Reserved                                             Address offset: 0x258 */
  __IO uint32_t PERFHPR1;        /*!< DDRCTRL high priority read CAM register 1            Address offset: 0x25C */
       uint32_t RESERVED14;      /*!< Reserved                                             Address offset: 0x260 */
  __IO uint32_t PERFLPR1;        /*!< DDRCTRL low priority read CAM register 1             Address offset: 0x264 */
       uint32_t RESERVED15;      /*!< Reserved                                             Address offset: 0x268 */
  __IO uint32_t PERFWR1;         /*!< DDRCTRL write CAM register 1                         Address offset: 0x26C */
  __IO uint32_t SCHED3;          /*!< DDRCTRL scheduler control register 3                 Address offset: 0x270 */
  __IO uint32_t SCHED4;          /*!< DDRCTRL scheduler control register 4                 Address offset: 0x274 */
       uint32_t RESERVED16[34];  /*!< Reserved                                             Address offset: 0x278-0x2FC */
  __IO uint32_t DBG0;            /*!< DDRCTRL debug register 0                             Address offset: 0x300 */
  __IO uint32_t DBG1;            /*!< DDRCTRL debug register 1                             Address offset: 0x304 */
  __IO uint32_t DBGCAM;          /*!< DDRCTRL CAM debug register                           Address offset: 0x308 */
  __IO uint32_t DBGCMD;          /*!< DDRCTRL command debug register                       Address offset: 0x30C */
  __IO uint32_t DBGSTAT;         /*!< DDRCTRL status debug register                        Address offset: 0x310 */
       uint32_t RESERVED17[3];   /*!< Reserved                                             Address offset: 0x314-0x31C */
  __IO uint32_t SWCTL;           /*!< DDRCTRL software register programming control enable Address offset: 0x320 */
  __IO uint32_t SWSTAT;          /*!< DDRCTRL software register programming control status Address offset: 0x324 */
  __IO uint32_t SWCTLSTATIC;     /*!< Static Registers Write Enable                        Address offset: 0x328 */
       uint32_t RESERVED18[16];  /*!< Reserved                                             Address offset: 0x32C-0x368 */
  __IO uint32_t POISONCFG;       /*!< DDRCTRL AXI Poison configuration register            Address offset: 0x36C */
  __IO uint32_t POISONSTAT;      /*!< DDRCTRL AXI Poison status register                   Address offset: 0x370 */
       uint32_t RESERVED19[31];  /*!< Reserved                                             Address offset: 0x374-0x3EC */
  __IO uint32_t DERATESTAT;      /*!< DDRCTRL temperature derate status register           Address offset: 0x03F0 */
       uint32_t RESERVED20[2];   /*!< Reserved                                             Address offset: 0x3F4-0x3F8 */
  __IO uint32_t PSTAT;           /*!< DDRCTRL port status register                         Address offset: 0x3FC */
  __IO uint32_t PCCFG;           /*!< DDRCTRL port common configuration register           Address offset: 0x400 */
  __IO uint32_t PCFGR_0;         /*!< DDRCTRL port 0 configuration read register           Address offset: 0x404 */
  __IO uint32_t PCFGW_0;         /*!< DDRCTRL port 0 configuration write register          Address offset: 0x408 */
       uint32_t RESERVED21[33];  /*!< Reserved                                             Address offset: 0x40C-0x48C */
  __IO uint32_t PCTRL_0;         /*!< DDRCTRL port 0 control register                      Address offset: 0x490 */
  __IO uint32_t PCFGQOS0_0;      /*!< DDRCTRL port 0 read Q0S configuration register 0     Address offset: 0x494 */
  __IO uint32_t PCFGQOS1_0;      /*!< DDRCTRL port 0 read Q0S configuration register 1     Address offset: 0x498 */
  __IO uint32_t PCFGWQOS0_0;     /*!< DDRCTRL port 0 write Q0S configuration register 0    Address offset: 0x49C */
  __IO uint32_t PCFGWQOS1_0;     /*!< DDRCTRL port 0 write Q0S configuration register 1    Address offset: 0x4A0 */
       uint32_t RESERVED22[4];   /*!< Reserved                                             Address offset: 0x4A4-0x4B0 */
  __IO uint32_t PCFGR_1;         /*!< DDRCTRL port 1 configuration read register           Address offset: 0x4B4 */
  __IO uint32_t PCFGW_1;         /*!< DDRCTRL port 1 configuration write register          Address offset: 0x4B8 */
       uint32_t RESERVED23[33];  /*!< Reserved                                             Address offset: 0x4BC-0x53C */
  __IO uint32_t PCTRL_1;         /*!< DDRCTRL port 1 control register                      Address offset: 0x540 */
  __IO uint32_t PCFGQOS0_1;      /*!< DDRCTRL port 1 read Q0S configuration register 0     Address offset: 0x544 */
  __IO uint32_t PCFGQOS1_1;      /*!< DDRCTRL port 1 read Q0S configuration register 1     Address offset: 0x548 */
  __IO uint32_t PCFGWQOS0_1;     /*!< DDRCTRL port 1 write Q0S configuration register 0    Address offset: 0x54C */
  __IO uint32_t PCFGWQOS1_1;     /*!< DDRCTRL port 1 write Q0S configuration register 1    Address offset: 0x550 */
       uint32_t RESERVED24[679]; /*!< Reserved                                             Address offset: 0x554-0xFEC */
  __IO uint32_t UMCTL2_VER_NUMBER;/*!< DDRCTRL UMCTL2 version number register              Address offset: 0xFF0 */
  __IO uint32_t UMCTL2_VER_TYPE; /*!< UMCTL2 Version Type Register                         Address offset: 0xFF4 */
} DDRC_TypeDef;

/*
 * @brief DDRDBG block description (DDRDBG)
 */
typedef struct
{
  __IO uint32_t LP_DISABLE;                       /*!< DDRDBG low-power disable register                 Address offset: 0x000  */
  __IO uint32_t BYPASS_PCLKEN;                    /*!< DDRDBG bypass PCLKEN register                     Address offset: 0x004  */
  __IO uint32_t DDRC_AUTO_SR_DELAY;               /*!< DDRDBG DDRC auto SR delay register                Address offset: 0x008  */
  __IO uint32_t OBSP_CTRL;                        /*!< DDRDBG OBSP control register                      Address offset: 0x00C  */
  __IO uint32_t FRAC_PLL_LOCK;                    /*!< DDRDBG FRAC PLL lock register                     Address offset: 0x010  */
  __IO uint32_t DTO_OUTPUT;                       /*!< DDRDBG DTO output register                        Address offset: 0x014  */
       uint32_t RESERVED0[6];                     /*!< Reserved                                          Address offset: 0x018-0x02C */
  __IO uint32_t DFI_ERRORS_CTRL;                  /*!< DDRDBG DFI error control register                 Address offset: 0x030  */
  __IO uint32_t DFI_ERROR_STATUS;                 /*!< DDRDBG DFI error status register                  Address offset: 0x034  */
  __IO uint32_t DFI_ERROR_MSK;                    /*!< DDRDBG DFI error mask register                    Address offset: 0x038  */
       uint32_t RESERVED1[49];                    /*!< Reserved                                          Address offset: 0x03C-0x0FC */
  __IO uint32_t DDR34_AC_SWIZZLE_ADD3_0;          /*!< DDRDBG DDR34 AC swizzle ADD3_0 register           Address offset: 0x100  */
  __IO uint32_t DDR34_AC_SWIZZLE_ADD7_4;          /*!< DDRDBG DDR34 AC swizzle ADD7_4 register           Address offset: 0x104  */
  __IO uint32_t DDR34_AC_SWIZZLE_ADD11_8;         /*!< DDRDBG DDR34 AC swizzle ADD11_8 register          Address offset: 0x108  */
  __IO uint32_t DDR34_AC_SWIZZLE_ADD15_12;        /*!< DDRDBG DDR34 AC swizzle ADD15_12 register         Address offset: 0x10C  */
  __IO uint32_t DDR34_AC_SWIZZLE_BK2_0_ACTN;      /*!< DDRDBG DDR34 AC swizzle BK2 0 ACTN register       Address offset: 0x110  */
  __IO uint32_t DDR34_AC_SWIZZLE_RASN_CASN_BG1_0; /*!< DDRDBG DDR34 AC swizzle RASN CASN BG1_0 register  Address offset: 0x114  */
  __IO uint32_t DDR34_AC_SWIZZLE_WEN;             /*!< DDRDBG DDR34 AC swizzle WEN register              Address offset: 0x118  */
} DDRDBG_TypeDef;

/*
 * @brief DDRPERFM unit (DDRPERFM)
 */
typedef struct
{
  __IO uint32_t CTRL;         /*!< Control Register                    Address offset: 0x000 */
  __IO uint32_t IMSK;         /*!< Interrupt Mask Register             Address offset: 0x004 */
  __IO uint32_t ICLR;         /*!< Interrupt Clear Register            Address offset: 0x008 */
  __IO uint32_t CLR;          /*!< Interrupt Counter Clear Register    Address offset: 0x00C */
  __IO uint32_t CFG0;         /*!< Configuration Register 0            Address offset: 0x010 */
  __IO uint32_t CFG1;         /*!< Configuration Register 1            Address offset: 0x014 */
  __IO uint32_t CFG2;         /*!< Configuration Register 2            Address offset: 0x018 */
  __IO uint32_t CFG3;         /*!< Configuration Register 3            Address offset: 0x01C */
  __IO uint32_t CFG4;         /*!< Configuration Register 4            Address offset: 0x020 */
  __IO uint32_t CFG5;         /*!< Event Counter Enable Register       Address offset: 0x024 */
  __IO uint32_t DRAMINF;      /*!< DRAM Information Register           Address offset: 0x028 */
       uint32_t RESERVED0[5]; /*!< Reserved                            Address offset: 0x02C-0x03C */
  __IO uint32_t EVCNT0;       /*!< Event Counter 0 Register            Address offset: 0x040 */
  __IO uint32_t EVCNT1;       /*!< Event Counter 1 Register            Address offset: 0x044 */
  __IO uint32_t EVCNT2;       /*!< Event Counter 2 Register            Address offset: 0x048 */
  __IO uint32_t EVCNT3;       /*!< Event Counter 3 Register            Address offset: 0x04C */
  __IO uint32_t EVCNT4;       /*!< Event Counter 4 Register            Address offset: 0x050 */
  __IO uint32_t EVCNT5;       /*!< Event Counter 5 Register            Address offset: 0x054 */
  __IO uint32_t EVCNT6;       /*!< Event Counter 6 Register            Address offset: 0x058 */
  __IO uint32_t EVCNT7;       /*!< Event Counter 7 Register            Address offset: 0x05C */
  __IO uint32_t TCNT;         /*!< Time Counter Register               Address offset: 0x060 */
       uint32_t RESERVED1[7]; /*!< Reserved                            Address offset: 0x064-0x07C */
  __IO uint32_t STATUS;       /*!< Status Register                     Address offset: 0x080 */
} DDRPERFM_TypeDef;
/**
  * @brief DMA Controller
  */
/* c7amba_dma3_v1_0 */
typedef struct
{
  __IO uint32_t SECCFGR;          /*!< DMA secure configuration register,                      Address offset: 0x00  */
  __IO uint32_t PRIVCFGR;         /*!< DMA privileged configuration register,                  Address offset: 0x04  */
  __IO uint32_t RCFGLOCKR;        /*!< DMA configuration lock register                         Address offset: 0x08 */
  __IO uint32_t MISR;             /*!< DMA non secure masked interrupt status register,        Address offset: 0x0C  */
  __IO uint32_t SMISR;            /*!< DMA secure masked interrupt status register,            Address offset: 0x10  */
       uint32_t RESERVED[1003];   /*!< Reserved                                                Address offset: 0x014-0xFBC */
  __IO uint32_t HWCFGR13;         /*!< HPDMA hardware configuration 13 register                Address offset: 0xFC0 */
  __IO uint32_t HWCFGR12;         /*!< HPDMA hardware configuration 12 register                Address offset: 0xFC4 */
  __IO uint32_t HWCFGR11;         /*!< HPDMA hardware configuration 11 register                Address offset: 0xFC8 */
  __IO uint32_t HWCFGR10;         /*!< HPDMA hardware configuration 10 register                Address offset: 0xFCC */
  __IO uint32_t HWCFGR9;          /*!< HPDMA hardware configuration 9 register                 Address offset: 0xFD0 */
  __IO uint32_t HWCFGR8;          /*!< HPDMA hardware configuration 8 register                 Address offset: 0xFD4 */
  __IO uint32_t HWCFGR7;          /*!< HPDMA hardware configuration 7 register                 Address offset: 0xFD8 */
  __IO uint32_t HWCFGR6;          /*!< HPDMA hardware configuration 6 register                 Address offset: 0xFDC */
  __IO uint32_t HWCFGR5;          /*!< HPDMA hardware configuration 5 register                 Address offset: 0xFE0 */
  __IO uint32_t HWCFGR4;          /*!< HPDMA hardware configuration 4 register                 Address offset: 0xFE4 */
  __IO uint32_t HWCFGR3;          /*!< HPDMA hardware configuration 3 register                 Address offset: 0xFE8 */
  __IO uint32_t HWCFGR2;          /*!< HPDMA hardware configuration 2 register                 Address offset: 0xFEC */
  __IO uint32_t HWCFGR1;          /*!< HPDMA hardware configuration 1 register                 Address offset: 0xFF0 */
  __IO uint32_t VERR;             /*!< HPDMA version register                                  Address offset: 0xFF4 */
  __IO uint32_t IPIDR;            /*!< HPDMA identification register                           Address offset: 0xFF8 */
  __IO uint32_t SIDR;             /*!< HPDMA size identification register                      Address offset: 0xFFC */
} DMA_TypeDef;

typedef struct
{
  __IO uint32_t CLBAR;        /*!< DMA channel x linked-list base address register, Address offset: 0x50 + (x * 0x80) */
  __IO uint32_t CCIDCFGR;     /*!< DMA channel x CID register,                      Address offset: 0x54 + (x * 0x80) */
  __IO uint32_t CSEMCR;       /*!< DMA channel x semaphore control register,        Address offset: 0x58 + (x * 0x80) */
  __IO uint32_t CFCR;         /*!< DMA channel x flag clear register,               Address offset: 0x5C + (x * 0x80) */
  __IO uint32_t CSR;          /*!< DMA channel x flag status register,              Address offset: 0x60 + (x * 0x80) */
  __IO uint32_t CCR;          /*!< DMA channel x control register,                  Address offset: 0x64 + (x * 0x80) */
       uint32_t RESERVED2[10];/*!< Reserved 2,                                      Address offset: 0x68 -- 0x8C      */
  __IO uint32_t CTR1;         /*!< DMA channel x transfer register 1,               Address offset: 0x90 + (x * 0x80) */
  __IO uint32_t CTR2;         /*!< DMA channel x transfer register 2,               Address offset: 0x94 + (x * 0x80) */
  __IO uint32_t CBR1;         /*!< DMA channel x block register 1,                  Address offset: 0x98 + (x * 0x80) */
  __IO uint32_t CSAR;         /*!< DMA channel x source address register,           Address offset: 0x9C + (x * 0x80) */
  __IO uint32_t CDAR;         /*!< DMA channel x destination address register,      Address offset: 0xA0 + (x * 0x80) */
  __IO uint32_t CTR3;         /*!< DMA channel x transfer register 3,               Address offset: 0xA4 + (x * 0x80) */
  __IO uint32_t CBR2;         /*!< DMA channel x block register 2,                  Address offset: 0xA8 + (x * 0x80) */
       uint32_t RESERVED3[8]; /*!< Reserved 3,                                      Address offset: 0xAC -- 0xC8      */
  __IO uint32_t CLLR;         /*!< DMA channel x linked-list address register,      Address offset: 0xCC + (x * 0x80) */
} DMA_Channel_TypeDef;


/*
 * @brief  (DTS)
 */
typedef struct
{
       uint32_t RESERVED15[4];    /*!< Reserved                                Address offset: 0x000-0x00C */
  __IO uint32_t PVTREG_LOCK;      /*!< DTS PVT register lock register          Address offset: 0x010 */
  __IO uint32_t PVTLOCK_SR;       /*!< DTS PVT lock status register            Address offset: 0x014 */
       uint32_t RESERVED0[2];     /*!< Reserved                                Address offset: 0x018-0x01C */
  __IO uint32_t PVTTMR_CR;        /*!< DTS PVT Timer control register          Address offset: 0x020 */
  __IO uint32_t PVTTMR_SR;        /*!< DTS PVT timer status register           Address offset: 0x024 */
  __IO uint32_t PVTTMR_ICR;       /*!< DTS PVT timer IRQ clear register        Address offset: 0x028 */
  __IO uint32_t PVTTMRIRQTESTR;   /*!< DTS PVT timer IRQ test register         Address offset: 0x02C */
       uint32_t RESERVED1[4];     /*!< Reserved                                Address offset: 0x030-0x03C */
  __IO uint32_t PVT_IER;          /*!< DTS PVT IRQ enable register             Address offset: 0x040 */
       uint32_t RESERVED2[3];     /*!< Reserved                                Address offset: 0x044-0x04C */
  __IO uint32_t PVTIRQTRMASKR;    /*!< DTS PVT IRQ timer mask register         Address offset: 0x050 */
  __IO uint32_t TS_MR;            /*!< DTS PVT IRQ TS mask register            Address offset: 0x054 */
       uint32_t RESERVED3[2];     /*!< Reserved                                Address offset: 0x058-0x05C */
  __IO uint32_t PVTTR_SR;         /*!< DTS PVT IRQ timer status register       Address offset: 0x060 */
  __IO uint32_t TS_ISR;           /*!< DTS PVT IRQ TS status register          Address offset: 0x064 */
       uint32_t RESERVED4[2];     /*!< Reserved                                Address offset: 0x068-0x06C */
  __IO uint32_t PVTTMRRAW_ISR;    /*!< DTS PVT IRQ timer raw status register   Address offset: 0x070 */
  __IO uint32_t TSRAW_ISR;        /*!< DTS PVT IRQ TS raw status register      Address offset: 0x074 */
       uint32_t RESERVED5[2];     /*!< Reserved                                Address offset: 0x078-0x07C */
  __IO uint32_t TSCCLKSYNTHR;     /*!< DTS TSC clock synthesizer register      Address offset: 0x080 */
  __IO uint32_t TSCSDIFDISABLER;  /*!< DTS TSC SDIF interface disable register Address offset: 0x084 */
  __IO uint32_t TSCSDIF_SR;       /*!< DTS TSC SDIF status register            Address offset: 0x088 */
  __IO uint32_t TSCSDIF_CR;       /*!< DTS TSC SDIF register                   Address offset: 0x08C */
  __IO uint32_t TSCSDIFHALTR;     /*!< DTS TSC SDIF halt register              Address offset: 0x090 */
  __IO uint32_t TSCSDIF_CFGR;     /*!< DTS TSC SDIF control register           Address offset: 0x094 */
       uint32_t RESERVED6[2];     /*!< Reserved                                Address offset: 0x098-0x09C */
  __IO uint32_t TSCSMPL_CR;       /*!< DTS TSC sample control register         Address offset: 0x0A0 */
  __IO uint32_t TSCSDIFSMPLCLRR;  /*!< DTS TSC sample clear register           Address offset: 0x0A8 */
  __IO uint32_t TSCSMPLCNTR;      /*!< DTS TSC sample count register           Address offset: 0x0AC */
       uint32_t RESERVED7;        /*!< Reserved                                Address offset: 0x0A4 */
       uint32_t RESERVED8[4];     /*!< Reserved                                Address offset: 0x0B0-0x0BC */
  __IO uint32_t TS0_IER;          /*!< DTS TS0 IRQ enable register             Address offset: 0x0C0 */
  __IO uint32_t TS0_ISR;          /*!< DTS TS0 IRQ status register             Address offset: 0x0C4 */
  __IO uint32_t TS0_ICR;          /*!< DTS TS0 IRQ clear register              Address offset: 0x0C8 */
  __IO uint32_t TS0IRQTESTR;      /*!< DTS TS0 IRQ test register               Address offset: 0x0CC */
  __IO uint32_t TS0SDIFRDATAR;    /*!< DTS TS0 SDIF RDATA register             Address offset: 0x0D0 */
  __IO uint32_t TS0SDIFDONER;     /*!< DTS TS0 SDIF done register              Address offset: 0x0D4 */
  __IO uint32_t TS0SDIFDATAR;     /*!< DTS TS0 SDIF data register              Address offset: 0x0D8 */
       uint32_t RESERVED9;        /*!< Reserved                                Address offset: 0x0DC */
  __IO uint32_t TS0ALARMA_CFGR;   /*!< DTS TS0 alarm A configuration register  Address offset: 0x0E0 */
  __IO uint32_t TS0ALARMB_CFGR;   /*!< DTS TS0 alarm B configuration register  Address offset: 0x0E4 */
  __IO uint32_t TS0HLSAMPLER;     /*!< DTS TS0 high/low sample register        Address offset: 0x0E8 */
  __IO uint32_t TS0HILORESETR;    /*!< DTS TS0 high/low reset register         Address offset: 0x0EC */
       uint32_t RESERVED11[4];    /*!< Reserved                                Address offset: 0x0F0-0x0FC */
  __IO uint32_t TS1_IER;          /*!< DTS TS1 IRQ enable register             Address offset: 0x100 */
  __IO uint32_t TS1_ISR;          /*!< DTS TS1 IRQ status register             Address offset: 0x104 */
  __IO uint32_t TS1_ICR;          /*!< DTS TS1 IRQ clear register              Address offset: 0x108 */
  __IO uint32_t TS1IRQTESTR;      /*!< DTS TS1 IRQ test register               Address offset: 0x10C */
  __IO uint32_t TS1SDIFRDATAR;    /*!< DTS TS1 SDIF RDATA register             Address offset: 0x110 */
  __IO uint32_t TS1SDIFDONER;     /*!< DTS TS1 SDIF done register              Address offset: 0x114 */
  __IO uint32_t TS1SDIFDATAR;     /*!< DTS TS1 SDIF data register              Address offset: 0x118 */
       uint32_t RESERVED12;       /*!< Reserved                                Address offset: 0x11C */
  __IO uint32_t TS1ALARMA_CFGR;   /*!< DTS TS1 alarm A configuration register  Address offset: 0x120 */
       uint32_t RESERVED13;       /*!< Reserved                                Address offset: 0x124 */
  __IO uint32_t TS1HLSAMPLER;     /*!< DTS TS1 high/low sample register        Address offset: 0x128 */
  __IO uint32_t TS1HILORESETR;    /*!< DTS TS1 high/low reset register         Address offset: 0x12C */
} DTS_TypeDef;

/**
  * @brief Ethernet MAC
   * COPY from STM32MP13 - IPXACT for MP2 NOT YET AVAILABLE
  */
typedef struct
{
  __IO uint32_t MACCR;            /*!< Operating mode configuration register                      Address offset: 0x0000 */
  __IO uint32_t MACECR;           /*!< Extended operating mode configuration register             Address offset: 0x0004 */
  __IO uint32_t MACPFR;           /*!< Packet filtering control register                          Address offset: 0x0008 */
  __IO uint32_t MACWTR;           /*!< Watchdog timeout register                                  Address offset: 0x000C */
  __IO uint32_t MACHT0R;          /*!< Hash Table 0 register                                      Address offset: 0x0010 */
  __IO uint32_t MACHT1R;          /*!< Hash Table 1 register                                      Address offset: 0x0014 */
       uint32_t RESERVED0[14];    /*!< Reserved                                                   Address offset: 0x0018-0x004C */
  __IO uint32_t MACVTCR;          /*!< VLAN tag control register                                  Address offset: 0x0050 */
  __IO uint32_t MACVTDR;          /*!< VLAN tag data register                                     Address offset: 0x0054 */
  __IO uint32_t MACVHTR;          /*!< VLAN Hash table register                                   Address offset: 0x0058 */
       uint32_t RESERVED2;        /*!< Reserved                                                   Address offset: 0x005C */
  __IO uint32_t MACVIR;           /*!< VLAN inclusion register                                    Address offset: 0x0060 */
  __IO uint32_t MACIVIR;          /*!< Inner VLAN inclusion register                              Address offset: 0x0064 */
       uint32_t RESERVED3[2];     /*!< Reserved                                                   Address offset: 0x0068-0x006C */
  __IO uint32_t MACQ0TXFCR;       /*!< Tx Queue 0 flow control register                           Address offset: 0x0070 */
       uint32_t RESERVED4[7];     /*!< Reserved                                                   Address offset: 0x0074-0x008C */
  __IO uint32_t MACRXFCR;         /*!< Rx flow control register                                   Address offset: 0x0090 */
       uint32_t MACRXQCR;         /*!< Rx Queue control register                                  Address offset: 0x0094 */
  __IO uint32_t RESERVED5[2];     /*!< Reserved                                                   Address offset: 0x0098-0x009C */
  __IO uint32_t MACRXQC0R;        /*!< Rx queue control 0 register                                Address offset: 0x00A0 */
  __IO uint32_t MACRXQC1R;        /*!< Rx queue control 1 register                                Address offset: 0x00A4 */
  __IO uint32_t MACRXQC2R;        /*!< Rx queue control 2 register                                Address offset: 0x00A8 */
       uint32_t RESERVED6;        /*!< Reserved                                                   Address offset: 0x00AC */
  __IO uint32_t MACISR;           /*!< Interrupt status register                                  Address offset: 0x00B0 */
  __IO uint32_t MACIER;           /*!< Interrupt enable register                                  Address offset: 0x00B4 */
  __IO uint32_t MACRXTXSR;        /*!< Rx Tx status register                                      Address offset: 0x00B8 */
       uint32_t RESERVED7;        /*!< Reserved                                                   Address offset: 0x00BC */
  __IO uint32_t MACPCSR;          /*!< PMT control status register                                Address offset: 0x00C0 */
  __IO uint32_t MACRWKPFR;        /*!< Remote wakeup packet filter register                       Address offset: 0x00C4 */
       uint32_t RESERVED8[2];     /*!< Reserved                                                   Address offset: 0x00C8-0x00CC */
  __IO uint32_t MACLCSR;          /*!< LPI control status register                                Address offset: 0x00D0 */
  __IO uint32_t MACLTCR;          /*!< LPI timers control register                                Address offset: 0x00D4 */
  __IO uint32_t MACLETR;          /*!< LPI entry timer register                                   Address offset: 0x00D8 */
  __IO uint32_t MAC1USTCR;        /*!< microsecond-tick counter register                          Address offset: 0x00DC */
       uint32_t RESERVED9[6];     /*!< Reserved                                                   Address offset: 0x00E0-0x00F4 */
  __IO uint32_t MACPHYCSR;        /*!< PHYIF control status register                              Address offset: 0x00F8 */
       uint32_t RESERVED10[5];    /*!< Reserved                                                   Address offset: 0x00FC-0x010C */
  __IO uint32_t MACVR;            /*!< Version register                                           Address offset: 0x0110 */
  __IO uint32_t MACDR;            /*!< Debug register                                             Address offset: 0x0114 */
       uint32_t RESERVED11;       /*!< Reserved                                                   Address offset: 0x0118 */
  __IO uint32_t MACHWF0R;         /*!< HW feature 0 register                                      Address offset: 0x011C */
  __IO uint32_t MACHWF1R;         /*!< HW feature 1 register                                      Address offset: 0x0120 */
  __IO uint32_t MACHWF2R;         /*!< HW feature 2 register                                      Address offset: 0x0124 */
  __IO uint32_t MACHWF3R;         /*!< HW feature 3 register                                      Address offset: 0x0128 */
       uint32_t RESERVED12[53];   /*!< Reserved                                                   Address offset: 0x012C-0x01FC */
  __IO uint32_t MACMDIOAR;        /*!< MDIO address register                                      Address offset: 0x0200 */
  __IO uint32_t MACMDIODR;        /*!< MDIO data register                                         Address offset: 0x0204 */
       uint32_t RESERVED13[2];    /*!< Reserved                                                   Address offset: 0x0208-0x020C */
  __IO uint32_t MACARPAR;         /*!< ARP address register                                       Address offset: 0x0210 */
       uint32_t RESERVED14[7];    /*!< Reserved                                                   Address offset: 0x0214-0x022C */
  __IO uint32_t MACCSRSWCR;       /*!< CSR software control register                              Address offset: 0x0230 */
       uint32_t RESERVED15[51];   /*!< Reserved                                                   Address offset: 0x0234-0x02FC */
  __IO uint32_t MACA0HR;          /*!< MAC Address 0 high register                                Address offset: 0x0300 */
  __IO uint32_t MACA0LR;          /*!< MAC Address 0 low register                                 Address offset: 0x0304 */
  __IO uint32_t MACA1HR;          /*!< MAC Address 1 high register                                Address offset: 0x0308 */
  __IO uint32_t MACA1LR;          /*!< MAC Address 1 low register                                 Address offset: 0x030C */
  __IO uint32_t MACA2HR;          /*!< MAC Address 2 high register                                Address offset: 0x0310 */
  __IO uint32_t MACA2LR;          /*!< MAC Address 2 low register                                 Address offset: 0x0314 */
  __IO uint32_t MACA3HR;          /*!< MAC Address 3 high register                                Address offset: 0x0318 */
  __IO uint32_t MACA3LR;          /*!< MAC Address 3 low register                                 Address offset: 0x031C */
       uint32_t RESERVED16[248];  /*!< Reserved                                                   Address offset: 0x0320-0x06FC */
  __IO uint32_t MMCCR;            /*!< MMC control register                                       Address offset: 0x0700 */
  __IO uint32_t MMCRXIR;          /*!< MMC Rx interrupt register                                  Address offset: 0x704 */
  __IO uint32_t MMCTXIR;          /*!< MMC Tx interrupt register                                  Address offset: 0x708 */
  __IO uint32_t MMCRXIMR;         /*!< MMC Rx interrupt mask register                             Address offset: 0x70C */
  __IO uint32_t MMCTXIMR;         /*!< MMC Tx interrupt mask register                             Address offset: 0x710 */
       uint32_t RESERVED17[14];   /*!< Reserved                                                   Address offset: 0x0714-0x0748 */
  __IO uint32_t MMCTXSCGPR;       /*!< Tx single collision good packets register                  Address offset: 0x74C */
  __IO uint32_t MMCTXMCGPR;       /*!< Tx multiple collision good packets register                Address offset: 0x750 */
       uint32_t RESERVED18[5];    /*!< Reserved                                                   Address offset: 0x0754-0x0764 */
  __IO uint32_t MMCTXPCGR;        /*!< Tx packet count good register                              Address offset: 0x768 */
       uint32_t RESERVED19[10];   /*!< Reserved                                                   Address offset: 0x076C-0x0790 */
  __IO uint32_t MMCRXCRCEPR;      /*!< Rx CRC error packets register                              Address offset: 0x794 */
  __IO uint32_t MMCRXAEPR;        /*!< Rx alignment error packets register                        Address offset: 0x798 */
       uint32_t RESERVED20[10];   /*!< Reserved                                                   Address offset: 0x079C-0x07C0 */
  __IO uint32_t MMCRXUPGR;        /*!< Rx unicast packets good register                           Address offset: 0x7C4 */
       uint32_t RESERVED21[9];    /*!< Reserved                                                   Address offset: 0x07C8-0x07E8 */
  __IO uint32_t MMCTXLPIMSTR;     /*!< Tx LPI microsecond timer register                          Address offset: 0x7EC */
  __IO uint32_t MMCTXLPITCR;      /*!< Tx LPI transition counter register                         Address offset: 0x7F0 */
  __IO uint32_t MMCRXLPIMSTR;     /*!< Rx LPI microsecond counter register                        Address offset: 0x7F4 */
  __IO uint32_t MMCRXLPITCR;      /*!< Rx LPI transition counter register                         Address offset: 0x7F8 */
       uint32_t RESERVED22[65];   /*!< Reserved                                                   Address offset: 0x07FC-0x08FC */
  __IO uint32_t MACL3L4C0R;       /*!< L3 and L4 control 0 register                               Address offset: 0x0900 */
  __IO uint32_t MACL4A0R;         /*!< Layer4 address filter 0 register                           Address offset: 0x0904 */
       uint32_t RESERVED23[2];    /*!< Reserved                                                   Address offset: 0x0908-0x090C */
  __IO uint32_t MACL3A00R;        /*!< Layer 3 Address 0 filter 0 register                        Address offset: 0x0910 */
  __IO uint32_t MACL3A10R;        /*!< Layer3 address 1 filter 0 register                         Address offset: 0x0914 */
  __IO uint32_t MACL3A20;         /*!< Layer3 Address 2 filter 0 register                         Address offset: 0x0918 */
  __IO uint32_t MACL3A30;         /*!< Layer3 Address 3 filter 0 register                         Address offset: 0x091C */
       uint32_t RESERVED24[4];    /*!< Reserved                                                   Address offset: 0x0920-0x092C */
  __IO uint32_t MACL3L4C1R;       /*!< L3 and L4 control 1 register                               Address offset: 0x0930 */
  __IO uint32_t MACL4A1R;         /*!< Layer 4 address filter 1 register                          Address offset: 0x0934 */
       uint32_t RESERVED25[2];    /*!< Reserved                                                   Address offset: 0x0938-0x093C */
  __IO uint32_t MACL3A01R;        /*!< Layer3 address 0 filter 1 Register                         Address offset: 0x0940 */
  __IO uint32_t MACL3A11R;        /*!< Layer3 address 1 filter 1 register                         Address offset: 0x0944 */
  __IO uint32_t MACL3A21R;        /*!< Layer3 address 2 filter 1 Register                         Address offset: 0x0948 */
  __IO uint32_t MACL3A31R;        /*!< Layer3 address 3 filter 1 register                         Address offset: 0x094C */
       uint32_t RESERVED26[108];  /*!< Reserved                                                   Address offset: 0x0950-0x0AFC */
  __IO uint32_t MACTSCR;          /*!< Timestamp control Register                                 Address offset: 0x0B00 */
  __IO uint32_t MACSSIR;          /*!< Sub-second increment register                              Address offset: 0x0B04 */
  __IO uint32_t MACSTSR;          /*!< System time seconds register                               Address offset: 0x0B08 */
  __IO uint32_t MACSTNR;          /*!< System time nanoseconds register                           Address offset: 0x0B0C */
  __IO uint32_t MACSTSUR;         /*!< System time seconds update register                        Address offset: 0x0B10 */
  __IO uint32_t MACSTNUR;         /*!< System time nanoseconds update register                    Address offset: 0x0B14 */
  __IO uint32_t MACTSAR;          /*!< Timestamp addend register                                  Address offset: 0x0B18 */
       uint32_t RESERVED27;       /*!< Reserved                                                   Address offset: 0x0B1C */
  __IO uint32_t MACTSSR;          /*!< Timestamp status register                                  Address offset: 0x0B20 */
       uint32_t RESERVED28[3];    /*!< Reserved                                                   Address offset: 0x0B24-0x0B2C */
  __IO uint32_t MACTXTSSNR;       /*!< Tx timestamp status nanoseconds register                   Address offset: 0x0B30 */
  __IO uint32_t MACTXTSSSR;       /*!< Tx timestamp status seconds register                       Address offset: 0x0B34 */
       uint32_t RESERVED29[2];    /*!< Reserved                                                   Address offset: 0x0B38-0x0B3C */
  __IO uint32_t MACACR;           /*!< Auxiliary control register                                 Address offset: 0x0B40 */
       uint32_t RESERVED30;       /*!< Reserved                                                   Address offset: 0x0B44 */
  __IO uint32_t MACATSNR;         /*!< Auxiliary timestamp nanoseconds register                   Address offset: 0x0B48 */
  __IO uint32_t MACATSSR;         /*!< Auxiliary timestamp seconds register                       Address offset: 0x0B4C */
  __IO uint32_t MACTSIACR;        /*!< Timestamp Ingress asymmetric correction register           Address offset: 0x0B50 */
  __IO uint32_t MACTSEACR;        /*!< Timestamp Egress asymmetric correction register            Address offset: 0x0B54 */
  __IO uint32_t MACTSICNR;        /*!< Timestamp Ingress correction nanosecond register           Address offset: 0x0B58 */
  __IO uint32_t MACTSECNR;        /*!< Timestamp Egress correction nanosecond register            Address offset: 0x0B5C */
       uint32_t RESERVED31[4];    /*!< Reserved                                                   Address offset: 0x0B60-0x0B6C */
  __IO uint32_t MACPPSCR;         /*!< PPS control register [alternate]                           Address offset: 0x0B70 */
       uint32_t RESERVED32[3];    /*!< Reserved                                                   Address offset: 0x0B74-0x0B7C */
  __IO uint32_t MACPPSTTSR;       /*!< PPS target time seconds register                           Address offset: 0x0B80 */
  __IO uint32_t MACPPSTTNR;       /*!< PPS target time nanoseconds register                       Address offset: 0x0B84 */
  __IO uint32_t MACPPSIR;         /*!< PPS interval register                                      Address offset: 0x0B88 */
  __IO uint32_t MACPPSWR;         /*!< PPS width register                                         Address offset: 0x0B8C */
       uint32_t RESERVED33[12];   /*!< Reserved                                                   Address offset: 0x0B90-0x0BBC */
  __IO uint32_t MACPOCR;          /*!< PTP Offload control register                               Address offset: 0x0BC0 */
  __IO uint32_t MACSPI0R;         /*!< PTP Source Port Identity 0 Register                        Address offset: 0x0BC4 */
  __IO uint32_t MACSPI1R;         /*!< PTP Source port identity 1 register                        Address offset: 0x0BC8 */
  __IO uint32_t MACSPI2R;         /*!< PTP Source port identity 2 register                        Address offset: 0x0BCC */
  __IO uint32_t MACLMIR;          /*!< Log message interval register                              Address offset: 0x0BD0 */
       uint32_t RESERVED34[11];   /*!< Reserved                                                   Address offset: 0x0BD4-0x0BFC */
  __IO uint32_t MTLOMR;           /*!< Operating mode Register                                    Address offset: 0x0C00 */
       uint32_t RESERVED35[7];    /*!< Reserved                                                   Address offset: 0x0C04-0x0C1C */
  __IO uint32_t MTLISR;           /*!< Interrupt status Register                                  Address offset: 0x0C20 */
       uint32_t RESERVED36[55];   /*!< Reserved                                                   Address offset: 0x0C24-0x0CFC */
  __IO uint32_t MTLTXQ0OMR;       /*!< Tx queue 0 operating mode Register                         Address offset: 0x0D00 */
  __IO uint32_t MTLTXQ0UR;        /*!< Tx queue 0 underflow register                              Address offset: 0x0D04 */
  __IO uint32_t MTLTXQ0DR;        /*!< Tx queue 0 debug Register                                  Address offset: 0x0D08 */
       uint32_t RESERVED37[2];    /*!< Reserved                                                   Address offset: 0x0D0C-0x0D10 */
  __IO uint32_t MTLTXQ0ESR;       /*!< Tx queue 0 ETS status Register                             Address offset: 0x0D14 */
  __IO uint32_t MTLTXQ0QWR;       /*!< Tx queue 0 quantum weight Register                         Address offset: 0x0D18 */
       uint32_t RESERVED38[4];    /*!< Reserved                                                   Address offset: 0x0D1C-0x0D28 */
  __IO uint32_t MTLQ0ICSR;        /*!< Queue 0 interrupt control status Register                  Address offset: 0x0D2C */
  __IO uint32_t MTLRXQ0OMR;       /*!< Rx queue 0 operating mode register                         Address offset: 0x0D30 */
  __IO uint32_t MTLRXQ0MPOCR;     /*!< Rx queue 0 missed packet and overflow counter register     Address offset: 0x0D34 */
  __IO uint32_t MTLRXQ0DR;        /*!< Rx queue 0 debug register                                  Address offset: 0x0D38 */
  __IO uint32_t MTLRXQ0CR;        /*!< Rx queue 0 control register                                Address offset: 0x0D3C */
  __IO uint32_t MTLTXQ1OMR;       /*!< Tx queue 1 operating mode Register                         Address offset: 0x0D40 */
  __IO uint32_t MTLTXQ1UR;        /*!< Tx queue 1 underflow register                              Address offset: 0x0D44 */
  __IO uint32_t MTLTXQ1DR;        /*!< Tx queue 1 debug Register                                  Address offset: 0x0D48 */
       uint32_t RESERVED39;       /*!< Reserved                                                   Address offset: 0x0D4C */
  __IO uint32_t MTLTXQ1ECR;       /*!< Tx queue 1 ETS control Register                            Address offset: 0x0D50 */
       uint32_t MTLTXTXQ1ESR;     /*!< Tx queue 1 ETS status Register                             Address offset: 0x0D54 */
  __IO uint32_t MTLTXQ1QWR;       /*!< Tx queue 1 quantum weight register                         Address offset: 0x0D58 */
  __IO uint32_t MTLTXQ1SSCR;      /*!< Tx queue 1 send slope credit Register                      Address offset: 0x0D5C */
  __IO uint32_t MTLTXQ1HCR;       /*!< Tx Queue 1 hiCredit register                               Address offset: 0x0D60 */
  __IO uint32_t MTLTXQ1LCR;       /*!< Tx queue 1 loCredit register                               Address offset: 0x0D64 */
       uint32_t RESERVED40;       /*!< Reserved                                                   Address offset: 0x0D68 */
  __IO uint32_t MTLQ1ICSR;        /*!< Queue 1 interrupt control status Register                  Address offset: 0x0D6C */
  __IO uint32_t MTLRXQ1OMR;       /*!< Rx queue 1 operating mode register                         Address offset: 0x0D70 */
  __IO uint32_t MTLRXQ1MPOCR;     /*!< Rx queue 1 missed packet and overflow counter register     Address offset: 0x0D74 */
  __IO uint32_t MTLRXQ1DR;        /*!< Rx queue 1 debug register                                  Address offset: 0x0D78 */
  __IO uint32_t MTLRXQ1CR;        /*!< Rx queue 1 control register                                Address offset: 0x0D7C */
       uint32_t RESERVED42[160];  /*!< Reserved                                                   Address offset: 0x0D80-0x0FFC */
  __IO uint32_t DMAMR;            /*!< DMA mode register                                          Address offset: 0x1000 */
  __IO uint32_t DMASBMR;          /*!< System bus mode register                                   Address offset: 0x1004 */
  __IO uint32_t DMAISR;           /*!< Interrupt status register                                  Address offset: 0x1008 */
  __IO uint32_t DMADSR;           /*!< Debug status register                                      Address offset: 0x100C */
       uint32_t RESERVED43[4];    /*!< Reserved                                                   Address offset: 0x1010-0x101C */
  __IO uint32_t DMAA4TXACR;       /*!< AXI4 transmit channel ACE control register                 Address offset: 0x1020 */
  __IO uint32_t DMAA4RXACR;       /*!< AXI4 receive channel ACE control register                  Address offset: 0x1024 */
  __IO uint32_t DMAA4DACR;        /*!< AXI4 descriptor ACE control register                       Address offset: 0x1028 */
       uint32_t RESERVED44[5];    /*!< Reserved                                                   Address offset: 0x102C-0x103C */
  __IO uint32_t DMALPIEI;         /*!< AXI4 LPI Entry Interval register                           Address offset: 0x1040 */
       uint32_t RESERVED45[47];   /*!< Reserved                                                   Address offset: 0x1044-0x10FC */
  __IO uint32_t DMAC0CR;          /*!< Channel 0 control register                                 Address offset: 0x1100 */
  __IO uint32_t DMAC0TXCR;        /*!< Channel 0 transmit control register                        Address offset: 0x1104 */
  __IO uint32_t DMAC0RXCR;        /*!< Channel 0 receive control register                         Address offset: 0x1108 */
       uint32_t RESERVED46[2];    /*!< Reserved                                                   Address offset: 0x110C-0x1110 */
  __IO uint32_t DMAC0TXDLAR;      /*!< Channel 0 Tx descriptor list address register              Address offset: 0x1114 */
       uint32_t RESERVED47;       /*!< Reserved                                                   Address offset: 0x1118 */
  __IO uint32_t DMAC0RXDLAR;      /*!< Channel 0 Rx descriptor list address register              Address offset: 0x111C */
  __IO uint32_t DMAC0TXDTPR;      /*!< Channel 0 Tx descriptor tail pointer register              Address offset: 0x1120 */
       uint32_t RESERVED48;       /*!< Reserved                                                   Address offset: 0x1124 */
  __IO uint32_t DMAC0RXDTPR;      /*!< Channel 0 Rx descriptor tail pointer register              Address offset: 0x1128 */
  __IO uint32_t DMAC0TXRLR;       /*!< Channel 0 Tx descriptor ring length register               Address offset: 0x112C */
  __IO uint32_t DMAC0RXRLR;       /*!< Channel 0 Rx descriptor ring length register               Address offset: 0x1130 */
  __IO uint32_t DMAC0IER;         /*!< Channel 0 interrupt enable register                        Address offset: 0x1134 */
  __IO uint32_t DMAC0RXIWTR;      /*!< Channel 0 Rx interrupt watchdog timer register             Address offset: 0x1138 */
  __IO uint32_t DMAC0SFCSR;       /*!< Channel 0 slot function control status register            Address offset: 0x113C */
       uint32_t RESERVED49;       /*!< Reserved                                                   Address offset: 0x1140 */
  __IO uint32_t DMAC0CATXDR;      /*!< Channel 0 current application transmit descriptor register Address offset: 0x1144 */
       uint32_t RESERVED50;       /*!< Reserved                                                   Address offset: 0x1148 */
  __IO uint32_t DMAC0CARXDR;      /*!< Channel 0 current application receive descriptor register  Address offset: 0x114C */
       uint32_t RESERVED51;       /*!< Reserved                                                   Address offset: 0x1150 */
  __IO uint32_t DMAC0CATXBR;      /*!< Channel 0 current application transmit buffer register     Address offset: 0x1154 */
       uint32_t RESERVED52;       /*!< Reserved                                                   Address offset: 0x1158 */
  __IO uint32_t DMAC0CARXBR;      /*!< Channel 0 current application receive buffer register      Address offset: 0x115C */
  __IO uint32_t DMAC0SR;          /*!< Channel 0 status register                                  Address offset: 0x1160 */
  __IO uint32_t DMAC0MFCR;        /*!< Channel 0 missed frame count register                      Address offset: 0x1164 */
       uint32_t RESERVED53[6];    /*!< Reserved                                                   Address offset: 0x1168-0x117C */
  __IO uint32_t DMAC1CR;          /*!< Channel 1 control register                                 Address offset: 0x1180 */
  __IO uint32_t DMAC1TXCR;        /*!< Channel 1 transmit control register                        Address offset: 0x1184 */
       uint32_t RESERVED54[3];    /*!< Reserved                                                   Address offset: 0x1188-0x1190 */
  __IO uint32_t DMAC1TXDLAR;      /*!< Channel 1 Tx descriptor list address register              Address offset: 0x1194 */
       uint32_t RESERVED55[2];    /*!< Reserved                                                   Address offset: 0x1198-0x119C */
  __IO uint32_t DMAC1TXDTPR;      /*!< Channel 1 Tx descriptor tail pointer register              Address offset: 0x11A0 */
       uint32_t RESERVED56[2];    /*!< Reserved                                                   Address offset: 0x11A4-0x11A8 */
  __IO uint32_t DMAC1TXRLR;       /*!< Channel 1 Tx descriptor ring length register               Address offset: 0x11AC */
       uint32_t RESERVED57;       /*!< Reserved                                                   Address offset: 0x11B0 */
  __IO uint32_t DMAC1IER;         /*!< Channel 1 interrupt enable register                        Address offset: 0x11B4 */
       uint32_t RESERVED58;       /*!< Reserved                                                   Address offset: 0x11B8 */
  __IO uint32_t DMAC1SFCSR;       /*!< Channel 1 slot function control status register            Address offset: 0x11BC */
       uint32_t RESERVED59;       /*!< Reserved                                                   Address offset: 0x11C0 */
  __IO uint32_t DMAC1CATXDR;      /*!< Channel 1 current application transmit descriptor register Address offset: 0x11C4 */
       uint32_t RESERVED60[3];    /*!< Reserved                                                   Address offset: 0x11C8-0x11D0 */
  __IO uint32_t DMAC1CATXBR;      /*!< Channel 1 current application transmit buffer register     Address offset: 0x11D4 */
       uint32_t RESERVED61[2];    /*!< Reserved                                                   Address offset: 0x11D8-0x11DC */
  __IO uint32_t DMAC1SR;          /*!< Channel 1 status register                                  Address offset: 0x11E0 */
  __IO uint32_t DMAC1MFCR;        /*!< Channel 1 missed frame count register                      Address offset: 0x11E4 */
} ETH_TypeDef;

/*
 * @brief EXTI Block description (EXTI)
 * c7amba_exti_v3-0_UserSpec_v3_0_0m *
 */
typedef struct
{
  __IO uint32_t RTSR1;           /*!< EXTI rising trigger selection register        Address offset: 0x000 */
  __IO uint32_t FTSR1;           /*!< EXTI falling trigger selection register       Address offset: 0x004 */
  __IO uint32_t SWIER1;          /*!< EXTI software interrupt event register        Address offset: 0x008 */
  __IO uint32_t RPR1;            /*!< EXTI rising edge pending register             Address offset: 0x00C */
  __IO uint32_t FPR1;            /*!< EXTI falling edge pending register            Address offset: 0x010 */
  __IO uint32_t SECCFGR1;        /*!< EXTI security configuration register          Address offset: 0x014 */
  __IO uint32_t PRIVCFGR1;       /*!< EXTI Privilege configuration register         Address offset: 0x018 */
       uint32_t RESERVED0;       /*!< Reserved                                      Address offset: 0x01C */
  __IO uint32_t RTSR2;           /*!< EXTI rising trigger selection register        Address offset: 0x020 */
  __IO uint32_t FTSR2;           /*!< EXTI falling trigger selection register       Address offset: 0x024 */
  __IO uint32_t SWIER2;          /*!< EXTI software interrupt event register        Address offset: 0x028 */
  __IO uint32_t RPR2;            /*!< EXTI rising edge pending register             Address offset: 0x02C */
  __IO uint32_t FPR2;            /*!< EXTI falling edge pending register            Address offset: 0x030 */
  __IO uint32_t SECCFGR2;        /*!< EXTI security enable register                 Address offset: 0x034 */
  __IO uint32_t PRIVCFGR2;       /*!< EXTI Privilege enable register                Address offset: 0x038 */
       uint32_t RESERVED1;       /*!< Reserved                                       Address offset: 0x03C */
  __IO uint32_t RTSR3;           /*!< EXTI rising trigger selection register        Address offset: 0x040 */
  __IO uint32_t FTSR3;           /*!< EXTI falling trigger selection register       Address offset: 0x044 */
  __IO uint32_t SWIER3;          /*!< EXTI software interrupt event register        Address offset: 0x048 */
  __IO uint32_t RPR3;            /*!< EXTI rising edge pending register             Address offset: 0x04C */
  __IO uint32_t FPR3;            /*!< EXTI falling edge pending register            Address offset: 0x050 */
  __IO uint32_t SECCFGR3;        /*!< EXTI security enable register                 Address offset: 0x054 */
  __IO uint32_t PRIVCFGR3;       /*!< EXTI Privilege enable register                Address offset: 0x058 */
       uint32_t RESERVED15;      /*!< Reserved                                       Address offset: 0x05C */
  __IO uint32_t EXTICR[4];       /*!< EXTI external interrupt selection register 1  Address offset: 0x060-0x6C */
  __IO uint32_t LOCKR;           /*!< EXTI lock register                            Address offset: 0x070 */
       uint32_t RESERVED3[3];    /*!< Reserved                                       Address offset: 0x074-0x07C */
  __IO uint32_t C1IMR1;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x080 */
       uint32_t RESERVED17[3];   /*!< Reserved                                       Address offset: 0x088-0x08C */
  __IO uint32_t C1IMR2;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x090 */
       uint32_t RESERVED18[3];   /*!< Reserved                                       Address offset: 0x098-0x09C */
  __IO uint32_t C1IMR3;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x0A0 */
       uint32_t RESERVED6[7];    /*!< Reserved                                       Address offset: 0x0A8-0x0BC */
  __IO uint32_t C2IMR1;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0C0 */
  __IO uint32_t C2EMR1;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0C4 */
       uint32_t RESERVED20[2];   /*!< Reserved                                       Address offset: 0x0C8-0x0CC */
  __IO uint32_t C2IMR2;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0D0 */
  __IO uint32_t C2EMR2;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0D4 */
       uint32_t RESERVED21[2];   /*!< Reserved                                       Address offset: 0x0D8-0x0DC */
  __IO uint32_t C2IMR3;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0E0 */
  __IO uint32_t C2EMR3;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0E4 */
         uint32_t RESERVED22[6];   /*!< Reserved                                       Address offset: 0x0E8-0x0FC */
  __IO uint32_t C3IMR1;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x100 */
  __IO uint32_t C3EMR1;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x104 */
       uint32_t RESERVED23[2];   /*!< Reserved                                       Address offset: 0x108-0x10C */
  __IO uint32_t C3IMR2;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x110 */
  __IO uint32_t C3EMR2;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x114 */
       uint32_t RESERVED24[2];   /*!< Reserved                                       Address offset: 0x118-0x11C */
  __IO uint32_t C3IMR3;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x120 */
       uint32_t RESERVED25[23];  /*!< Reserved                                       Address offset: 0x124-0x17C */
  __IO uint32_t ECIDCFGR[96];    /*!< EXTI configurable event CID Config register   Address offset: 0x180-0x2BC */
  __IO uint32_t C1CIDCFGR;       /*!< EXTI processor 1 CID configuration register   Address offset: 0x300 */
  __IO uint32_t C2CIDCFGR;       /*!< EXTI processor 2 CID configuration register   Address offset: 0x304 */
  __IO uint32_t C3CIDCFGR;       /*!< EXTI processor 3 CID configuration register   Address offset: 0x308 */
       uint32_t RESERVED27[45];  /*!< Reserved                                      Address offset: 0x30C-0x3BC */
  __IO uint32_t HWCFGR13;        /*!< EXTI Hardware configuration register 13       Address offset: 0x3C0 */
  __IO uint32_t HWCFGR12;        /*!< EXTI Hardware configuration register 12       Address offset: 0x3C4 */
  __IO uint32_t HWCFGR11;        /*!< EXTI Hardware configuration register 11       Address offset: 0x3C8 */
       uint32_t RESERVED12[3];   /*!< Reserved                                      Address offset: 0x3CC-0x3D4 */
  __IO uint32_t HWCFGR7;         /*!< EXTI Hardware configuration register 7        Address offset: 0x3D8 */
  __IO uint32_t HWCFGR6;         /*!< EXTI Hardware configuration register 6        Address offset: 0x3DC */
  __IO uint32_t HWCFGR5;         /*!< EXTI Hardware configuration register 5        Address offset: 0x3E0 */
  __IO uint32_t HWCFGR4;         /*!< EXTI Hardware configuration register 4        Address offset: 0x3E4 */
  __IO uint32_t HWCFGR3;         /*!< EXTI Hardware configuration register 3        Address offset: 0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< EXTI Hardware configuration register 2        Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< EXTI Hardware configuration register 1        Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< EXTI IP Version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< EXTI Identification register                  Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< EXTI Size ID register                         Address offset: 0x3FC */
} EXTI_TypeDef;

typedef struct
{
  __IO uint32_t IMR1;                /*!< EXTI Interrupt mask register,                Address offset: 0x00 */
  __IO uint32_t EMR1;                /*!< EXTI Event mask register,                    Address offset: 0x04 */
  uint32_t      RESERVED1[2];        /*!< Reserved, offset 0x08 -> 0x10                                     */
  __IO uint32_t IMR2;                /*!< EXTI Interrupt mask register,                Address offset: 0x10 */
  __IO uint32_t EMR2;                /*!< EXTI Event mask register,                    Address offset: 0x14 */
  uint32_t      RESERVED2[2];        /*!< Reserved, offset 0x18 -> 0x20                                     */
  __IO uint32_t IMR3;                /*!< EXTI Interrupt mask register,                Address offset: 0x20 */
  __IO uint32_t EMR3;                /*!< EXTI Event mask register,                    Address offset: 0x24 */
  uint32_t      RESERVED3[6];        /*!< Reserved, offset 0x28 -> 0x40                                     */
} EXTI_Core_TypeDef;

/**
  * @brief Flexible Memory Controller
  */

typedef struct
{
  __IO uint32_t BTCR[8];    /*!< NOR/PSRAM chip-select control register(BCR) and chip-select timing register(BTR), Address offset: 0x00-1C */
} FMC_Bank1_TypeDef;

/**
  * @brief Flexible Memory Controller Bank1E
  */

typedef struct
{
  __IO uint32_t BWTR[7];    /*!< NOR/PSRAM write timing registers, Address offset: 0x104-0x11C */
} FMC_Bank1E_TypeDef;

/**
  * @brief Flexible Memory Controller Bank3
  */

typedef struct
{
  __IO uint32_t PCR;             /*!< NAND Flash Programmable control register               Address offset: 0x080 */
  __IO uint32_t SR;              /*!< FMC status register                                    Address offset: 0x084 */
  __IO uint32_t PMEM;            /*!< Common memory space timing register                    Address offset: 0x088 */
  __IO uint32_t PATT;            /*!< Attribute memory space timing registers                Address offset: 0x08C */
  __IO uint32_t HPR;             /*!< FMC Hamming parity result registers                    Address offset: 0x090 */
  __IO uint32_t HECCR;           /*!< FMC Hamming code ECC result register                   Address offset: 0x094 */
       uint32_t RESERVED0[58];   /*!< Reserved                                               Address offset: 0x098-0x17C */
  __IO uint32_t IER;             /*!< FMC NAND Interrupt Enable Register                     Address offset: 0x180 */
  __IO uint32_t ISR;             /*!< FMC Controller Interrupt Status Register               Address offset: 0x184 */
  __IO uint32_t ICR;             /*!< FMC NAND Controller Interrupt Clear Register           Address offset: 0x188 */
       uint32_t RESERVED1[29];   /*!< Reserved                                               Address offset: 0x18C-0x1FC */
  __IO uint32_t CSQCR;           /*!< FMC NAND Command Sequencer Control Register            Address offset: 0x200 */
  __IO uint32_t CSQCFGR1;        /*!< FMC NAND Command Sequencer Configuration Register 1    Address offset: 0x204 */
  __IO uint32_t CSQCFGR2;        /*!< FMC NAND Command Sequencer Configuration Register 2    Address offset: 0x208 */
  __IO uint32_t CSQCFGR3;        /*!< FMC NAND sequencer configuration register 3            Address offset: 0x20C */
  __IO uint32_t CSQAR1;          /*!< FMC NAND Command Sequencer Address Register 1          Address offset: 0x210 */
  __IO uint32_t CSQAR2;          /*!< FMC NAND Command Sequencer Address Register 2          Address offset: 0x214 */
       uint32_t RESERVED2[2];    /*!< Reserved                                               Address offset: 0x218-0x21C */
  __IO uint32_t CSQIER;          /*!< FMC NAND Command Sequencer Interrupt Enable Register   Address offset: 0x220 */
  __IO uint32_t CSQISR;          /*!< FMC NAND Command Sequencer Interrupt Status Register   Address offset: 0x224 */
  __IO uint32_t CSQICR;          /*!< FMC NAND Command Sequencer Interrupt Clear Register    Address offset: 0x228 */
       uint32_t RESERVED3;       /*!< Reserved                                               Address offset: 0x22C */
  __IO uint32_t CSQEMSR;         /*!< FMC Command Sequencer Error Mapping Status register    Address offset: 0x230 */
       uint32_t RESERVED4[7];    /*!< Reserved                                               Address offset: 0x234-0x24C */
  __IO uint32_t BCHIER;          /*!< FMC BCH Interrupt enable register                      Address offset: 0x250 */
  __IO uint32_t BCHISR;          /*!< FMC BCH Interrupt and Status Register                  Address offset: 0x254 */
  __IO uint32_t BCHICR;          /*!< FMC BCH Interrupt Clear Register                       Address offset: 0x258 */
       uint32_t RESERVED5;       /*!< Reserved                                               Address offset: 0x25C */
  __IO uint32_t BCHPBR1;         /*!< FMC BCH Parity Bits Register 1                         Address offset: 0x260 */
  __IO uint32_t BCHPBR2;         /*!< FMC BCH Parity Bits Register 2                         Address offset: 0x264 */
  __IO uint32_t BCHPBR3;         /*!< FMC BCH Parity Bits Register 3                         Address offset: 0x268 */
  __IO uint32_t BCHPBR4;         /*!< FMC BCH Parity Bits Register 4                         Address offset: 0x26C */
       uint32_t RESERVED6[3];    /*!< Reserved                                               Address offset: 0x270-0x278 */
  __IO uint32_t BCHDSR0;         /*!< FMC BCH Decoder Status register 0                      Address offset: 0x27C */
  __IO uint32_t BCHDSR1;         /*!< FMC BCH Decoder Status register for bank 1             Address offset: 0x280 */
  __IO uint32_t BCHDSR2;         /*!< FMC BCH Decoder Status register for bank 2             Address offset: 0x284 */
  __IO uint32_t BCHDSR3;         /*!< FMC BCH Decoder Status register for bank 3             Address offset: 0x288 */
  __IO uint32_t BCHDSR4;         /*!< FMC BCH Decoder Status register for bank 4             Address offset: 0x28C */
       uint32_t RESERVED7[28];   /*!< Reserved                                               Address offset: 0x290-0x2FC */
} FMC_Bank3_TypeDef;

/**
  * @brief Flexible Memory Controller Common
  */

typedef struct{
  __IO uint32_t CFGR;            /*!< FMC common configuration register                      Address offset: 0x020 */
       uint32_t RESERVED0[183];  /*!< Reserved                                               Address offset: 0x024-0x2FC */
  __IO uint32_t SECCFGR;         /*!< FMC security configuration register                    Address offset: 0x300 */
  __IO uint32_t PRIVCFGR;        /*!< FMC security configuration register                    Address offset: 0x304 */
  __IO uint32_t RCFGLOCK;        /*!< FMC CID configuration lock register                    Address offset: 0x308 */
  __IO uint32_t CIDCFGR0;        /*!< FMC resource 0 CID Register                            Address offset: 0x30C */
  __IO uint32_t SEMCR0;          /*!< FMC Resource 0 Semaphore Control Register              Address offset: 0x310 */
  __IO uint32_t CIDCFGR1;        /*!< FMC resource 1 CID Register                            Address offset: 0x314 */
  __IO uint32_t SEMCR1;          /*!< FMC Resource 1 Semaphore Control Register              Address offset: 0x318 */
  __IO uint32_t CIDCFGR2;        /*!< FMC resource 2 CID Register                            Address offset: 0x31C */
  __IO uint32_t SEMCR2;          /*!< FMC Resource 2 Semaphore Control Register              Address offset: 0x320 */
  __IO uint32_t CIDCFGR3;        /*!< FMC resource 3 CID Register                            Address offset: 0x324 */
  __IO uint32_t SEMCR3;          /*!< FMC Resource 3 Semaphore Control Register              Address offset: 0x328 */
  __IO uint32_t CIDCFGR4;        /*!< FMC resource 4 CID Register                            Address offset: 0x32C */
  __IO uint32_t SEMCR4;          /*!< FMC Resource 4 Semaphore Control Register              Address offset: 0x330 */
  __IO uint32_t CIDCFGR5;        /*!< FMC resource 5 CID Register                            Address offset: 0x334 */
  __IO uint32_t SEMCR5;          /*!< FMC Resource 5 Semaphore Control Register              Address offset: 0x338 */
       uint32_t RESERVED1[43];   /*!< Reserved                                               Address offset: 0x33C-0x3E4 */
  __IO uint32_t HWCFGR3;         /*!< FMC Hardware configuration register 3                  Address offset: 0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< FMC Hardware configuration register 2                  Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< FMC Hardware configuration register 1                  Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< FMC Version register                                   Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< FMC Identification register                            Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< FMC Size Identification register                       Address offset: 0x3FC */
} FMC_Common_TypeDef;

/*
 * @brief  (GICV2M)
 */
typedef struct
{
       uint32_t RESERVED0[2];     /*!< Reserved                  Address offset: 0x000-0x004 */
  __IO uint32_t TYPER;            /*!< GICV2M typer register     Address offset: 0x008 */
       uint32_t RESERVED1[13];    /*!< Reserved                  Address offset: 0x00C-0x03C */
  __IO uint32_t SETSPI;           /*!< GICV2M set SPI register   Address offset: 0x040 */
       uint32_t RESERVED2[47];    /*!< Reserved                  Address offset: 0x044-0x0FC */
  __IO uint32_t MISC_CTRL;        /*!< GICV2M MISC CTRL register Address offset: 0x100 */
       uint32_t RESERVED3[946];   /*!< Reserved                  Address offset: 0x104-0xFC8 */
  __IO uint32_t IIDR;             /*!< GICV2M IIDR register      Address offset: 0xFCC */
} GICV2M_TypeDef;

/**
* @brief General Purpose I/O
* @note c7amba_ioport4 Rev 1.0.2
*/
typedef struct
{
  __IO uint32_t MODER;           /*!< GPIO mode register                                  Address offset: 0x000 */
  __IO uint32_t OTYPER;          /*!< GPIO output type register                           Address offset: 0x004 */
  __IO uint32_t OSPEEDR;         /*!< GPIO output speed register                          Address offset: 0x008 */
  __IO uint32_t PUPDR;           /*!< GPIO port pull-up/pull-down register                Address offset: 0x00C */
  __IO uint32_t IDR;             /*!< GPIO input data register                            Address offset: 0x010 */
  __IO uint32_t ODR;             /*!< GPIO output data register                           Address offset: 0x014 */
  __IO uint32_t BSRR;            /*!< GPIO bit set/reset register                         Address offset: 0x018 */
  __IO uint32_t LCKR;            /*!< GPIO configuration lock register                    Address offset: 0x01C */
  __IO uint32_t AFR[2];          /*!< GPIO alternate function  registers                  Address offset: 0x020 */
  __IO uint32_t BRR;             /*!< GPIO bit reset register                             Address offset: 0x028 */
  __IO uint32_t OR;              /*!< GPIO bit option register                            Address offset: 0x02C */
  __IO uint32_t SECCFGR;         /*!< GPIO secure configuration register                  Address offset: 0x030 */
  __IO uint32_t PRIVCFGR;        /*!< GPIO privileged configuration register              Address offset: 0x034 */
  __IO uint32_t RCFGLOCKR;       /*!< GPIO resource configuration lock register           Address offset: 0x038 */
       uint32_t RESERVED0;       /*!< Reserved                                            Address offset: 0x03C */
  __IO uint32_t DELAYRL;         /*!< GPIO delay low register                             Address offset: 0x040 */
  __IO uint32_t DELAYRH;         /*!< GPIO delay high register                            Address offset: 0x044 */
  __IO uint32_t ADVCFGRL;        /*!< GPIO PIO control low register                       Address offset: 0x048 */
  __IO uint32_t ADVCFGRH;        /*!< GPIO delay high register                            Address offset: 0x04C */

  __IO uint32_t CIDCFGR0;        /*!< GPIO CID configuration register for I/O pin 0       Address offset: 0x050 */
  __IO uint32_t SEMCR0;          /*!< GPIO semaphore control register for I/O pin 0       Address offset: 0x054 */
  __IO uint32_t CIDCFGR1;        /*!< GPIO CID configuration register for I/O pin 1       Address offset: 0x058 */
  __IO uint32_t SEMCR1;          /*!< GPIO semaphore control register for I/O pin 1       Address offset: 0x05C */
  __IO uint32_t CIDCFGR2;        /*!< GPIO CID configuration register for I/O pin 2       Address offset: 0x060 */
  __IO uint32_t SEMCR2;          /*!< GPIO semaphore control register for I/O pin 2       Address offset: 0x064 */
  __IO uint32_t CIDCFGR3;        /*!< GPIO CID configuration register for I/O pin 3       Address offset: 0x068 */
  __IO uint32_t SEMCR3;          /*!< GPIO semaphore control register for I/O pin 3       Address offset: 0x06C */
  __IO uint32_t CIDCFGR4;        /*!< GPIO CID configuration register for I/O pin 4       Address offset: 0x070 */
  __IO uint32_t SEMCR4;          /*!< GPIO semaphore control register for I/O pin 4       Address offset: 0x074 */
  __IO uint32_t CIDCFGR5;        /*!< GPIO CID configuration register for I/O pin 5       Address offset: 0x078 */
  __IO uint32_t SEMCR5;          /*!< GPIO semaphore control register for I/O pin 5       Address offset: 0x07C */
  __IO uint32_t CIDCFGR6;        /*!< GPIO CID configuration register for I/O pin 6       Address offset: 0x080 */
  __IO uint32_t SEMCR6;          /*!< GPIO semaphore control register for I/O pin 6       Address offset: 0x084 */
  __IO uint32_t CIDCFGR7;        /*!< GPIO CID configuration register for I/O pin 7       Address offset: 0x088 */
  __IO uint32_t SEMCR7;          /*!< GPIO semaphore control register for I/O pin 7       Address offset: 0x08C */
  __IO uint32_t CIDCFGR8;        /*!< GPIO CID configuration register for I/O pin 8       Address offset: 0x090 */
  __IO uint32_t SEMCR8;          /*!< GPIO semaphore control register for I/O pin 8       Address offset: 0x094 */
  __IO uint32_t CIDCFGR9;        /*!< GPIO CID configuration register for I/O pin 9       Address offset: 0x098 */
  __IO uint32_t SEMCR9;          /*!< GPIO semaphore control register for I/O pin 9       Address offset: 0x09C */
  __IO uint32_t CIDCFGR10;       /*!< GPIO CID configuration register for I/O pin 10      Address offset: 0x0A0 */
  __IO uint32_t SEMCR10;         /*!< GPIO semaphore control register for I/O pin 10      Address offset: 0x0A4 */
  __IO uint32_t CIDCFGR11;       /*!< GPIO CID configuration register for I/O pin 11      Address offset: 0x0A8 */
  __IO uint32_t SEMCR11;         /*!< GPIO semaphore control register for I/O pin 11      Address offset: 0x0AC */
  __IO uint32_t CIDCFGR12;       /*!< GPIO CID configuration register for I/O pin 12      Address offset: 0x0B0 */
  __IO uint32_t SEMCR12;         /*!< GPIO semaphore control register for I/O pin 12      Address offset: 0x0B4 */
  __IO uint32_t CIDCFGR13;       /*!< GPIO CID configuration register for I/O pin 13      Address offset: 0x0B8 */
  __IO uint32_t SEMCR13;         /*!< GPIO semaphore control register for I/O pin 13      Address offset: 0x0BC */
  __IO uint32_t CIDCFGR14;       /*!< GPIO CID configuration register for I/O pin 14      Address offset: 0x0C0 */
  __IO uint32_t SEMCR14;         /*!< GPIO semaphore control register for I/O pin 14      Address offset: 0x0C4 */
  __IO uint32_t CIDCFGR15;       /*!< GPIO CID configuration register for I/O pin 15      Address offset: 0x0C8 */
  __IO uint32_t SEMCR15;         /*!< GPIO semaphore control register for I/O pin 15      Address offset: 0x0CC */
       uint32_t RESERVED1[190];  /*!< Reserved                                            Address offset: 0x0D0-0x3C4 */
  __IO uint32_t HWCFGR10;        /*!< GPIO hardware configuration register 10             Address offset: 0x3C8 */
  __IO uint32_t HWCFGR9;         /*!< GPIO hardware configuration register 9              Address offset: 0x3CC */
  __IO uint32_t HWCFGR8;         /*!< GPIO hardware configuration register 8              Address offset: 0x3D0 */
  __IO uint32_t HWCFGR7;         /*!< GPIO hardware configuration register 7              Address offset: 0x3D4 */
  __IO uint32_t HWCFGR6;         /*!< GPIO hardware configuration register 6              Address offset: 0x3D8 */
  __IO uint32_t HWCFGR5;         /*!< GPIO hardware configuration register 5              Address offset: 0x3DC */
  __IO uint32_t HWCFGR4;         /*!< GPIO hardware configuration register 4              Address offset: 0x3E0 */
  __IO uint32_t HWCFGR3;         /*!< GPIO hardware configuration register 3              Address offset: 0x3E4 */
  __IO uint32_t HWCFGR2;         /*!< GPIO hardware configuration register 2              Address offset: 0x3E8 */
  __IO uint32_t HWCFGR1;         /*!< GPIO hardware configuration register 1              Address offset: 0x3EC */
  __IO uint32_t HWCFGR0;         /*!< GPIO hardware configuration register 0              Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< GPIO version register                               Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< GPIO identification register                        Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< GPIO size identification register                   Address offset: 0x3FC */
} GPIO_TypeDef;

/**
  * @brief HASH
  */
/* HASH (c7amba_hash1@v4.0) */
typedef struct
{
  __IO uint32_t CR;               /*!< HASH control register,                             Address offset: 0x00        */
  __IO uint32_t DIN;              /*!< HASH data input register,                          Address offset: 0x04        */
  __IO uint32_t STR;              /*!< HASH start register,                               Address offset: 0x08        */
  __IO uint32_t HR[5];            /*!< HASH digest registers,                             Address offset: 0x0C-0x1C   */
  __IO uint32_t IMR;              /*!< HASH interrupt enable register,                    Address offset: 0x20        */
  __IO uint32_t SR;               /*!< HASH status register,                              Address offset: 0x24        */
       uint32_t RESERVED[52];
  __IO uint32_t CSR[103];         /*!< HASH context swap registers,                       Address offset: 0x0F8-0x290 */
       uint32_t RESERVED2[31];
  __IO uint32_t HR2[42];          /*!< HASH digest supplementary registers,               Address offset: 0x310-0x3B4 */
       uint32_t RESERVED3[14];
  __IO uint32_t HWCFGR;           /*!< HASH Hardware configuration register,              Address offset: 0x3F0 */
  __IO uint32_t VERR;             /*!< HASH Version register,                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;            /*!< HASH identification register,                      Address offset: 0x3F8 */
  __IO uint32_t MID;              /*!< HASH Hardware Magic ID register,                   Address offset: 0x3FC */
} HASH_TypeDef;

/**
  * @brief HASH_DIGEST
  */
/* HASH (c7amba_hash1@v3.0) */
typedef struct
{
  __IO uint32_t HR[50];     /*!< HASH digest registers,          Address offset: 0x310-0x3D4 */
} HASH_DIGEST_TypeDef;

/*
 * @brief  (HDP)
 */
typedef struct
{
  __IO uint32_t CTRL;            /*!< HDP control register                      Address offset: 0x000 */
  __IO uint32_t MUX;             /*!< HDP multiplexer control register          Address offset: 0x004 */
       uint32_t RESERVED0[2];    /*!< Reserved                                  Address offset: 0x008-0x00C */
  __IO uint32_t VAL;             /*!< HDP read back value register              Address offset: 0x010 */
  __IO uint32_t GPOSET;          /*!< HDP general purpose output set register   Address offset: 0x014 */
  __IO uint32_t GPOCLR;          /*!< HDP general purpose output clear register Address offset: 0x018 */
  __IO uint32_t GPOVAL;          /*!< HDP general purpose output value register Address offset: 0x01C */
       uint32_t RESERVED1[245];  /*!< Reserved                                  Address offset: 0x020-0x3F0 */
  __IO uint32_t VERR;            /*!< HDP version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< HDP identification register               Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< HDP size identification register          Address offset: 0x3FC */
} HDP_TypeDef;

/*
 * @brief HW Semaphore (HSEM)
 */
typedef struct
{
  __IO uint32_t R[16];           /*!< HSEM register                                    Address offset: 0x000-0x03C */
       uint32_t RESERVED0[16];   /*!< Reserved                                         Address offset: 0x040-0x07C */
  __IO uint32_t RLR[16];         /*!< HSEM read lock register                          Address offset: 0x080-0x0BC */
       uint32_t RESERVED1[16];   /*!< Reserved                                         Address offset: 0x0C0-0x0FC */
  __IO uint32_t C1IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x100 */
  __IO uint32_t C1ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x104 */
  __IO uint32_t C1ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x108 */
  __IO uint32_t C1MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x10C */
  __IO uint32_t C2IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x110 */
  __IO uint32_t C2ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x114 */
  __IO uint32_t C2ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x118 */
  __IO uint32_t C2MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x11C */
  __IO uint32_t C3IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x120 */
  __IO uint32_t C3ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x124 */
  __IO uint32_t C3ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x128 */
  __IO uint32_t C3MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x12C */
       uint32_t RESERVED2[20];   /*!< Reserved                                         Address offset: 0x130-0x17C */
  __IO uint32_t SC1IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x180 */
  __IO uint32_t SC1ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x184 */
  __IO uint32_t SC1ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x188 */
  __IO uint32_t SC1MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x18C */
  __IO uint32_t SC2IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x190 */
  __IO uint32_t SC2ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x194 */
  __IO uint32_t SC2ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x198 */
  __IO uint32_t SC2MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x19C */
  __IO uint32_t SC3IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x1A0 */
  __IO uint32_t SC3ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x1A4 */
  __IO uint32_t SC3ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x1A8 */
  __IO uint32_t SC3MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x1AC */
       uint32_t RESERVED3[20];   /*!< Reserved                                         Address offset: 0x1B0-0x1FC */
  __IO uint32_t SECCFGR;         /*!< HSEM Security configuration register             Address offset: 0x200 */
       uint32_t RESERVED4[3];    /*!< Reserved                                         Address offset: 0x204-0x20C */
  __IO uint32_t PRIVCFGR;        /*!< HSEM Privilege configuration register            Address offset: 0x210 */
       uint32_t RESERVED5[3];    /*!< Reserved                                         Address offset: 0x214-0x21C */
  __IO uint32_t C1CIDCFGR;       /*!< HSEM processor 1 CID configuration register      Address offset: 0x220 */
  __IO uint32_t C2CIDCFGR;       /*!< HSEM processor 2 CID configuration register      Address offset: 0x224 */
  __IO uint32_t C3CIDCFGR;       /*!< HSEM processor 3 CID configuration register      Address offset: 0x228 */
       uint32_t RESERVED6;       /*!< Reserved                                         Address offset: 0x22C */
  __IO uint32_t CR;              /*!< HSEM Clear register                              Address offset: 0x230 */
  __IO uint32_t KEYR;            /*!< HSEM clear key register                          Address offset: 0x234 */
       uint32_t RESERVED7[2];    /*!< Reserved                                         Address offset: 0x238-0x23C */
  __IO uint32_t G0CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x240 */
  __IO uint32_t G1CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x244 */
  __IO uint32_t G2CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x248 */
  __IO uint32_t G3CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x24C */
       uint32_t RESERVED8[103];  /*!< Reserved                                         Address offset: 0x250-0x3E8 */
  __I  uint32_t HWCFGR2;         /*!< HSEM hardware configuration register 2           Address offset: 0x3EC */
  __I  uint32_t HWCFGR1;         /*!< HSEM hardware configuration register 1           Address offset: 0x3F0 */
  __I  uint32_t VERR;            /*!< HSEM IP version register                         Address offset: 0x3F4 */
  __I  uint32_t IPIDR;           /*!< HSEM IP identification register                  Address offset: 0x3F8 */
  __I  uint32_t SIDR;            /*!< HSEM size identification register                Address offset: 0x3FC */
} HSEM_TypeDef;

typedef struct
{
  __IO uint32_t IER;             /*!< HSEM Interrupt enable register                   Address offset: 0x000 */
  __IO uint32_t ICR;             /*!< HSEM Interrupt clear register                    Address offset: 0x004 */
  __IO uint32_t ISR;             /*!< HSEM Interrupt status register                   Address offset: 0x008 */
  __IO uint32_t MISR;            /*!< HSEM Masked interrupt status register            Address offset: 0x00C */
} HSEM_Common_TypeDef;

/**
  * @brief Inter-integrated Circuit Interface (I2C)
  */

typedef struct
{
  __IO uint32_t CR1;            /*!< I2C Control register 1                 Address offset: 0x00 */
  __IO uint32_t CR2;            /*!< I2C Control register 2                 Address offset: 0x04 */
  __IO uint32_t OAR1;           /*!< I2C Own address 1 register             Address offset: 0x08 */
  __IO uint32_t OAR2;           /*!< I2C Own address 2 register             Address offset: 0x0C */
  __IO uint32_t TIMINGR;        /*!< I2C Timing register                    Address offset: 0x10 */
  __IO uint32_t TIMEOUTR;       /*!< I2C Timeout register                   Address offset: 0x14 */
  __IO uint32_t ISR;            /*!< I2C Interrupt and status register      Address offset: 0x18 */
  __IO uint32_t ICR;            /*!< I2C Interrupt clear register           Address offset: 0x1C */
  __IO uint32_t PECR;           /*!< I2C PEC register                       Address offset: 0x20 */
  __IO uint32_t RXDR;           /*!< I2C Receive data register              Address offset: 0x24 */
  __IO uint32_t TXDR;           /*!< I2C Transmit data register             Address offset: 0x28 */
  __IO uint32_t AUTOCR;         /*!< I2C Autonomous mode control register   Address offset: 0x2C */
       uint32_t RESERVED[240];  /*!< Reserved                               Address offset: 0x30->0x3EC */
  __IO uint32_t HWCFGR;         /*!< I2C hardware configuration register    Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< I2C version register                   Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< I2C identification register            Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< I2C size identification register       Address offset: 0x3FC */
} I2C_TypeDef;

/**
  * @brief Inter-integrated Circuit Interface (I3C)
  */
typedef struct
{
  __IO uint32_t CR;              /*!< I3C message control register                Address offset: 0x000 */
  __IO uint32_t CFGR;            /*!< I3C configuration register                  Address offset: 0x004 */
       uint32_t RESERVED0[2];    /*!< Reserved                                    Address offset: 0x008-0x00C */
  __IO uint32_t RDR;             /*!< I3C receive data byte register              Address offset: 0x010 */
  __IO uint32_t RDWR;            /*!< I3C receive data word register              Address offset: 0x014 */
  __IO uint32_t TDR;             /*!< I3C transmit data byte register             Address offset: 0x018 */
  __IO uint32_t TDWR;            /*!< I3C transmit data word register             Address offset: 0x01C */
  __IO uint32_t IBIDR;           /*!< I3C IBI payload data register               Address offset: 0x020 */
  __IO uint32_t TGTTDR;          /*!< I3C target transmit configuration register  Address offset: 0x024 */
       uint32_t RESERVED1[2];    /*!< Reserved                                    Address offset: 0x028-0x02C */
  __IO uint32_t SR;              /*!< I3C status register                         Address offset: 0x030 */
  __IO uint32_t SER;             /*!< I3C status error register                   Address offset: 0x034 */
       uint32_t RESERVED2[2];    /*!< Reserved                                    Address offset: 0x038-0x03C */
  __IO uint32_t RMR;             /*!< I3C received message register               Address offset: 0x040 */
       uint32_t RESERVED3[3];    /*!< Reserved                                    Address offset: 0x044-0x04C */
  __IO uint32_t EVR;             /*!< I3C event register                          Address offset: 0x050 */
  __IO uint32_t IER;             /*!< I3C interrupt enable register               Address offset: 0x054 */
  __IO uint32_t CEVR;            /*!< I3C clear event register                    Address offset: 0x058 */
  __IO uint32_t MISR;            /*!< I3C masked interrupt status register        Address offset: 0x05C */
  __IO uint32_t DEVR0;           /*!< I3C own device characteristics register     Address offset: 0x060 */
  __IO uint32_t DEVRX[4];        /*!< I3C device x (0<=x<=4) register             Address offset: 0x064-0x070 */
       uint32_t RESERVED4[7];    /*!< Reserved                                    Address offset: 0x074-0x08C */
  __IO uint32_t MAXRLR;          /*!< I3C maximum read length register            Address offset: 0x090 */
  __IO uint32_t MAXWLR;          /*!< I3C maximum write length register           Address offset: 0x094 */
       uint32_t RESERVED5[2];    /*!< Reserved                                    Address offset: 0x098-0x09C */
  __IO uint32_t TIMINGR0;        /*!< I3C timing register 0                       Address offset: 0x0A0 */
  __IO uint32_t TIMINGR1;        /*!< I3C timing register 1                       Address offset: 0x0A4 */
  __IO uint32_t TIMINGR2;        /*!< I3C timing register 2                       Address offset: 0x0A8 */
       uint32_t RESERVED6[5];    /*!< Reserved                                    Address offset: 0x0AC-0x0BC */
  __IO uint32_t BCR;             /*!< I3C bus characteristics register            Address offset: 0x0C0 */
  __IO uint32_t DCR;             /*!< I3C device characteristics register         Address offset: 0x0C4 */
  __IO uint32_t GETCAPR;         /*!< I3C get capability register                 Address offset: 0x0C8 */
  __IO uint32_t CRCAPR;          /*!< I3C controller-role capability register     Address offset: 0x0CC */
  __IO uint32_t GETMXDSR;        /*!< I3C get capability register                 Address offset: 0x0D0 */
  __IO uint32_t EPIDR;           /*!< I3C extended provisioned ID register        Address offset: 0x0D4 */
       uint32_t RESERVED7[198];  /*!< Reserved                                    Address offset: 0x0D8-0x3EC */
  __IO uint32_t HWCFGR;          /*!< I3C hardware configuration register         Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< I3C version register                        Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< I3C IP identification register              Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< I3C IP size identification register         Address offset: 0x3FC */
} I3C_TypeDef;

/*
 * @brief Inter-Processor Communication Controller (IPCC)
 */
typedef struct
{
  __IO uint32_t C1CR;            /*!< IPCC Processor 1 control register                 Address offset: 0x000 */
  __IO uint32_t C1MR;            /*!< IPCC Processor 1 mask register                    Address offset: 0x004 */
  __IO uint32_t C1SCR;           /*!< IPCC Processor 1 status set clear register        Address offset: 0x008 */
  __IO uint32_t C1TOC2SR;        /*!< IPCC processor 1 to processor 2 status register   Address offset: 0x00C */
  __IO uint32_t C2CR;            /*!< IPCC Processor 2 control register                 Address offset: 0x010 */
  __IO uint32_t C2MR;            /*!< IPCC Processor 2 mask register                    Address offset: 0x014 */
  __IO uint32_t C2SCR;           /*!< IPCC Processor 2 status set clear register        Address offset: 0x018 */
  __IO uint32_t C2TOC1SR;        /*!< IPCC processor 2 to processor 1 status register   Address offset: 0x01C */
       uint32_t RESERVED0[24];   /*!< Reserved                                          Address offset: 0x020-0x07C */
  __IO uint32_t C1SECCFGR;       /*!< IPCC Processor 1 security configuration register  Address offset: 0x080 */
  __IO uint32_t C1PRIVCFGR;      /*!< IPCC processor 1 privilege configuration register Address offset: 0x084 */
  __IO uint32_t C1CIDCFGR;       /*!< IPCC processor 1 CID configuration register       Address offset: 0x088 */
       uint32_t RESERVED1;       /*!< Reserved                                          Address offset: 0x08C */
  __IO uint32_t C2SECCFGR;       /*!< IPCC processor 2 security configuration register  Address offset: 0x090 */
  __IO uint32_t C2PRIVCFGR;      /*!< IPCC processor 2 privilege configuration register Address offset: 0x094 */
  __IO uint32_t C2CIDCFGR;       /*!< IPCC processor 2 CID configuration register       Address offset: 0x098 */
       uint32_t RESERVED2[213];  /*!< Reserved                                          Address offset: 0x09C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< IPCC Hardware configuration register              Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< IPCC IP Version register                          Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< IPCC IP Identification register                   Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< IPCC Size ID register                             Address offset: 0x3FC */
} IPCC_TypeDef;

typedef struct
{
  __IO uint32_t CR;              /*!< Control register                                  Address offset: 0x000 */
  __IO uint32_t MR;              /*!< Mask register                                     Address offset: 0x004 */
  __IO uint32_t SCR;             /*!< Status set clear register                         Address offset: 0x008 */
  __IO uint32_t SR;              /*!< Status register                                   Address offset: 0x00C */
} IPCC_CommonTypeDef;

/*
 * @brief Independent Watchdog (IWDG)
 */
typedef struct
{
  __IO uint32_t KR;              /*!< IWDG key register                    Address offset: 0x000 */
  __IO uint32_t PR;              /*!< IWDG prescaler register              Address offset: 0x004 */
  __IO uint32_t RLR;             /*!< IWDG reload register                 Address offset: 0x008 */
  __IO uint32_t SR;              /*!< IWDG status register                 Address offset: 0x00C */
  __IO uint32_t WINR;            /*!< IWDG window register                 Address offset: 0x010 */
  __IO uint32_t EWCR;            /*!< IWDG early wakeup interrupt register Address offset: 0x014 */
  __IO uint32_t ICR;             /*!< IWDG Interrupt clear register        Address offset: 0x018 */
       uint32_t RESERVED0[245];  /*!< Reserved                             Address offset: 0x01C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< IWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< IWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IDR;             /*!< IWDG identification register         Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< IWDG size identification register    Address offset: 0x3FC */
} IWDG_TypeDef;

/*
 * @brief Low power timer (LPTIM)
          IP version is v2_1
 */
typedef struct
{
  __IO uint32_t ISR;             /*!< LPTIM interrupt and status register                 Address offset: 0x000 */
  __IO uint32_t ICR;             /*!< LPTIM interrupt clear register                      Address offset: 0x004 */
  __IO uint32_t DIER;            /*!< LPTIM interrupt enable register                     Address offset: 0x008 */
  __IO uint32_t CFGR;            /*!< LPTIM configuration register                        Address offset: 0x00C */
  __IO uint32_t CR;              /*!< LPTIM control register                              Address offset: 0x010 */
  __IO uint32_t CCR1;            /*!< LPTIM compare register 1                            Address offset: 0x014 */
  __IO uint32_t ARR;             /*!< LPTIM autoreload register                           Address offset: 0x018 */
  __IO uint32_t CNT;             /*!< LPTIM counter register                              Address offset: 0x01C */
  __IO uint32_t OR;              /*!< LPTIM1 option register                              Address offset: 0x020 */
  __IO uint32_t CFGR2;           /*!< LPTIM configuration register 2                      Address offset: 0x024 */
  __IO uint32_t RCR;             /*!< LPTIM repetition register                           Address offset: 0x028 */
  __IO uint32_t CCMR1;           /*!< LPTIM capture/compare mode register 1               Address offset: 0x02C */
       uint32_t RESERVED1;       /*!< Reserved                                            Address offset: 0x030 */
  __IO uint32_t CCR2;            /*!< LPTIM compare register 2                            Address offset: 0x034 */
       uint32_t RESERVED2[237];  /*!< Reserved                                            Address offset: 0x038-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< LPTIM peripheral hardware configuration register 2  Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< LPTIM peripheral hardware configuration register 1  Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< LPTIM peripheral version identification register    Address offset: 0x3F4 */
  __IO uint32_t PIDR;            /*!< LPTIM peripheral type identification register       Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< LPTIM registers map size identification register    Address offset: 0x3FC */
} LPTIM_TypeDef;

/**
  * @brief LCD-TFT Display Controller
  */

typedef struct
{
  __IO uint32_t IDR;             /*!< LTDC identification register                                  Address offset: 0x0000 */
  __IO uint32_t LCR;             /*!< LDTC layer count register                                     Address offset: 0x0004 */
  __IO uint32_t SSCR;            /*!< LTDC synchronization size configuration register              Address offset: 0x0008 */
  __IO uint32_t BPCR;            /*!< LTDC back porch configuration register                        Address offset: 0x000C */
  __IO uint32_t AWCR;            /*!< LTDC active width configuration register                      Address offset: 0x0010 */
  __IO uint32_t TWCR;            /*!< LTDC total width configuration register                       Address offset: 0x0014 */
  __IO uint32_t GCR;             /*!< LTDC global control register                                  Address offset: 0x0018 */
  __IO uint32_t GC1R;            /*!< LTDC global configuration 1 register                          Address offset: 0x001C */
  __IO uint32_t GC2R;            /*!< LTDC global configuration 2 register                          Address offset: 0x0020 */
  __IO uint32_t SRCR;            /*!< LTDC shadow reload configuration register                     Address offset: 0x0024 */
  __IO uint32_t GCCR;            /*!< LTDC gamma correction configuration register                  Address offset: 0x0028 */
  __IO uint32_t BCCR;            /*!< LTDC background color configuration register                  Address offset: 0x002C */
       uint32_t RESERVED0;       /*!< Reserved                                                      Address offset: 0x0030 */
  __IO uint32_t IER;             /*!< LTDC interrupt enable register                                Address offset: 0x0034 */
  __IO uint32_t ISR;             /*!< LTDC interrupt status register                                Address offset: 0x0038 */
  __IO uint32_t ICR;             /*!< LTDC interrupt clear register                                 Address offset: 0x003C */
  __IO uint32_t LIPCR;           /*!< LTDC line interrupt position configuration register           Address offset: 0x0040 */
  __IO uint32_t CPSR;            /*!< LTDC current position status register                         Address offset: 0x0044 */
  __IO uint32_t CDSR;            /*!< LTDC current display status register                          Address offset: 0x0048 */
       uint32_t RESERVED1[5];    /*!< Reserved                                                      Address offset: 0x004C-0x005C */
  __IO uint32_t EDCR;            /*!< LTDC external display control register                        Address offset: 0x0060 */
  __IO uint32_t IER2;            /*!< LTDC interrupt enable register 2                              Address offset: 0x0064 */
  __IO uint32_t ISR2;            /*!< LTDC interrupt status register 2                              Address offset: 0x0068 */
  __IO uint32_t ICR2;            /*!< LTDC interrupt clear register 2                               Address offset: 0x006C */
  __IO uint32_t LIPCR2;          /*!< LTDC line interrupt position configuration register 2         Address offset: 0x0070 */
       uint32_t RESERVED2;       /*!< Reserved                                                      Address offset: 0x0074 */
  __IO uint32_t ECRCR;           /*!< LTDC expected CRC register                                    Address offset: 0x0078 */
  __IO uint32_t CCRCR;           /*!< LTDC computed CRC register                                    Address offset: 0x007C */
       uint32_t RESERVED3[4];    /*!< Reserved                                                      Address offset: 0x0080-0x008C */
  __IO uint32_t FUTR;            /*!< LTDC FIFO underrun threshold register                         Address offset: 0x0090 */
} LTDC_TypeDef;

/**
  * @brief LCD-TFT Display layer x Controller
  */

typedef struct
{
  __IO uint32_t C0R;             /*!< LTDC layerx configuration 0 register                          Address offset: 0x0100 */
  __IO uint32_t C1R;             /*!< LTDC layerx configuration 1 register                          Address offset: 0x0104 */
  __IO uint32_t RCR;             /*!< LTDC layerx reload control register                           Address offset: 0x0108 */
  __IO uint32_t CR;              /*!< LTDC layerx control register                                  Address offset: 0x010C */
  __IO uint32_t WHPCR;           /*!< LTDC layerx window horizontal position configuration register Address offset: 0x0110 */
  __IO uint32_t WVPCR;           /*!< LTDC layerx window vertical position configuration register   Address offset: 0x0114 */
  __IO uint32_t CKCR;            /*!< LTDC layerx color keying configuration register               Address offset: 0x0118 */
  __IO uint32_t PFCR;            /*!< LTDC layerx pixel format configuration register               Address offset: 0x011C */
  __IO uint32_t CACR;            /*!< LTDC layerx constant alpha configuration register             Address offset: 0x0120 */
  __IO uint32_t DCCR;            /*!< LTDC layerx default color configuration register              Address offset: 0x0124 */
  __IO uint32_t BFCR;            /*!< LTDC layerx blending factors configuration register           Address offset: 0x0128 */
  __IO uint32_t BLCR;            /*!< LTDC layerx burst length configuration register               Address offset: 0x012C */
  __IO uint32_t PCR;             /*!< LTDC layerx planar configuration register                     Address offset: 0x0130 */
  __IO uint32_t CFBAR;           /*!< LTDC layerx color frame buffer address register               Address offset: 0x0134 */
  __IO uint32_t CFBLR;           /*!< LTDC layerx color frame buffer length register                Address offset: 0x0138 */
  __IO uint32_t CFBLNR;          /*!< LTDC layerx color frame buffer line number register           Address offset: 0x013C */
  __IO uint32_t AFBA0R;          /*!< LTDC layerx auxiliary frame buffer address 0 register         Address offset: 0x0140 */
  __IO uint32_t AFBA1R;          /*!< LTDC layerx auxiliary frame buffer address 1 register         Address offset: 0x0144 */
  __IO uint32_t AFBLR;           /*!< LTDC layerx auxiliary frame buffer length register            Address offset: 0x0148 */
  __IO uint32_t AFBLNR;          /*!< LTDC layerx auxiliary frame buffer line number register       Address offset: 0x014C */
  __IO uint32_t CLUTWR;          /*!< LTDC layerx CLUT write register                               Address offset: 0x0150 */
  __IO uint32_t SISR;            /*!< LTDC layerx scaler input size register                        Address offset: 0x0154 */
  __IO uint32_t SOSR;            /*!< LTDC layerx scaler output size register                       Address offset: 0x0158 */
  __IO uint32_t SVSFR;           /*!< LTDC layerx scaler vertical scaling factor register           Address offset: 0x015C */
  __IO uint32_t SVSPR;           /*!< LTDC layerx scaler vertical scaling phase register            Address offset: 0x0160 */
  __IO uint32_t SHSFR;           /*!< LTDC layerx scaler horizontal scaling factor register         Address offset: 0x0164 */
  __IO uint32_t SHSPR;           /*!< LTDC layerx scaler horizontal scaling phase register          Address offset: 0x0168 */
  __IO uint32_t CYR0R;           /*!< LTDC layerx conversion YCbCr RGB 0 register                   Address offset: 0x016C */
  __IO uint32_t CYR1R;           /*!< LTDC layerx conversion YCbCr RGB 1 register                   Address offset: 0x0170 */
  __IO uint32_t FPF0R;           /*!< LTDC layerx flexible pixel format 0 register                  Address offset: 0x0174 */
  __IO uint32_t FPF1R;           /*!< LTDC layerx flexible pixel format 1 register                  Address offset: 0x0178 */
} LTDC_Layer_TypeDef;

/**
  * @brief MDF/ADF
  */
typedef struct
{
 __IO uint32_t GCR;            /*!< MDF Global Control register,             Address offset: 0x00  */
 __IO uint32_t CKGCR;          /*!< MDF Clock Generator Control Register,    Address offset: 0x04  */
 uint32_t     RESERVED1[6];    /*!< Reserved, 0x08-0x1C                                            */
 __IO uint32_t OR;             /*!< MDF  Option Register,                    Address offset: 0x20  */
 uint32_t     RESERVED2[1011]; /*!< Reserved, 0x24-0xFEC                                           */
 __IO uint32_t HWCFGR;         /*!< MDF Hardware Configuration Register,     Address offset:0xFF0  */
 __IO uint32_t VERR;           /*!< MDF Version Register,                    Address offset:0xFF4  */
 __IO uint32_t IPIDR;          /*!< MDF Identification Register,             Address offset:0xFF8  */
 __IO uint32_t SIDR;           /*!< MDF Size Identification Register,        Address offset:0xFFC  */
}MDF_TypeDef;

/**
  * @brief MDF/ADF filter
  */
typedef struct
{
 __IO uint32_t SITFCR;         /*!< MDF Serial Interface Control Register,          Address offset: 0x80 */
 __IO uint32_t BSMXCR;         /*!< MDF Bitstream Matrix Control Register,          Address offset: 0x84 */
 __IO uint32_t DFLTCR;         /*!< MDF Digital Filter Control Register,            Address offset: 0x88 */
 __IO uint32_t DFLTCICR;       /*!< MDF MCIC Configuration Register,                Address offset: 0x8C */
 __IO uint32_t DFLTRSFR;       /*!< MDF Reshape Filter Configuration Register,      Address offset: 0x90 */
 __IO uint32_t DFLTINTR;       /*!< MDF Integrator Configuration Register,          Address offset: 0x94 */
 __IO uint32_t OLDCR;          /*!< MDF Out-Of Limit Detector Control Register,     Address offset: 0x98 */
 __IO uint32_t OLDTHLR;        /*!< MDF OLD Threshold Low Register,                 Address offset: 0x9C */
 __IO uint32_t OLDTHHR;        /*!< MDF OLD Threshold High Register,                Address offset: 0xA0 */
 __IO uint32_t DLYCR;          /*!< MDF Delay control Register,                     Address offset: 0xA4 */
 __IO uint32_t SCDCR;          /*!< MDF short circuit detector control Register,    Address offset: 0xA8 */
 __IO uint32_t DFLTIER;        /*!< MDF DFLT Interrupt enable Register,             Address offset: 0xAC */
 __IO uint32_t DFLTISR;        /*!< MDF DFLT Interrupt status Register,             Address offset: 0xB0 */
 __IO uint32_t OECCR;          /*!< MDF Offset Error Compensation Control Register, Address offset: 0xB4 */
 __IO uint32_t SADCR;          /*!< MDF SAD Control Register,                       Address offset: 0xB8 */
 __IO uint32_t SADCFGR;        /*!< MDF SAD configuration register,                 Address offset: 0xBC */
 __IO uint32_t SADSDLVR;       /*!< MDF SAD Sound level Register,                   Address offset: 0xC0 */
 __IO uint32_t SADANLVR;       /*!< MDF SAD Ambient Noise level Register,           Address offset: 0xC4 */
 uint32_t     RESERVED1[9];    /*!< Reserved, 0xC8-0xE8                                                  */
 __IO uint32_t SNPSDR;         /*!< MDF Snapshot Data Register,                     Address offset: 0xEC */
 __IO uint32_t DFLTDR;         /*!< MDF Digital Filter Data Register,               Address offset: 0xF0 */
} MDF_Filter_TypeDef;

/**
  * @brief OCTO Serial Peripheral Interface
  */

typedef struct
{
  __IO uint32_t CR;               /*!< OCTOSPI Control register,                           Address offset: 0x000 */
       uint32_t RESERVED;         /*!< Reserved,                                           Address offset: 0x004 */
  __IO uint32_t DCR1;             /*!< OCTOSPI Device Configuration register 1,            Address offset: 0x008 */
  __IO uint32_t DCR2;             /*!< OCTOSPI Device Configuration register 2,            Address offset: 0x00C */
  __IO uint32_t DCR3;             /*!< OCTOSPI Device Configuration register 3,            Address offset: 0x010 */
  __IO uint32_t DCR4;             /*!< OCTOSPI Device Configuration register 4,            Address offset: 0x014 */
       uint32_t RESERVED1[2];     /*!< Reserved,                                           Address offset: 0x018-0x01C */
  __IO uint32_t SR;               /*!< OCTOSPI Status register,                            Address offset: 0x020 */
  __IO uint32_t FCR;              /*!< OCTOSPI Flag Clear register,                        Address offset: 0x024 */
       uint32_t RESERVED2[6];     /*!< Reserved,                                           Address offset: 0x028-0x03C */
  __IO uint32_t DLR;              /*!< OCTOSPI Data Length register,                       Address offset: 0x040 */
       uint32_t RESERVED3;        /*!< Reserved,                                           Address offset: 0x044 */
  __IO uint32_t AR;               /*!< OCTOSPI Address register,                           Address offset: 0x048 */
       uint32_t RESERVED4;        /*!< Reserved,                                           Address offset: 0x04C */
  __IO uint32_t DR;               /*!< OCTOPSI Data register,                              Address offset: 0x050 */
       uint32_t RESERVED5[11];    /*!< Reserved,                                           Address offset: 0x054-0x07C */
  __IO uint32_t PSMKR;            /*!< OCTOSPI Polling Status Mask register,               Address offset: 0x080 */
       uint32_t RESERVED6;        /*!< Reserved,                                           Address offset: 0x084 */
  __IO uint32_t PSMAR;            /*!< OCTOSPI Polling Status Match register,              Address offset: 0x088 */
       uint32_t RESERVED7;        /*!< Reserved,                                           Address offset: 0x08C */
  __IO uint32_t PIR;              /*!< OCTOSPI Polling Interval register,                  Address offset: 0x090 */
       uint32_t RESERVED8[27];    /*!< Reserved,                                           Address offset: 0x094-0x0FC */
  __IO uint32_t CCR;              /*!< OCTOSPI Communication Configuration register,       Address offset: 0x100 */
       uint32_t RESERVED9;        /*!< Reserved,                                           Address offset: 0x104 */
  __IO uint32_t TCR;              /*!< OCTOSPI Timing Configuration register,              Address offset: 0x108 */
       uint32_t RESERVED10;       /*!< Reserved,                                           Address offset: 0x10C */
  __IO uint32_t IR;               /*!< OCTOSPI Instruction register,                       Address offset: 0x110 */
       uint32_t RESERVED11[3];    /*!< Reserved,                                           Address offset: 0x114-0x11C */
  __IO uint32_t ABR;              /*!< OCTOSPI Alternate Bytes register,                   Address offset: 0x120 */
       uint32_t RESERVED12[3];    /*!< Reserved,                                           Address offset: 0x124-0x12C */
  __IO uint32_t LPTR;             /*!< OCTOSPI Low Power Timeout register,                 Address offset: 0x130 */
       uint32_t RESERVED13[3];    /*!< Reserved,                                           Address offset: 0x134-0x13C */
  __IO uint32_t WPCCR;            /*!< OCTOSPI Wrap Communication Configuration register,  Address offset: 0x140 */
       uint32_t RESERVED14;       /*!< Reserved,                                           Address offset: 0x144 */
  __IO uint32_t WPTCR;            /*!< OCTOSPI Wrap Timing Configuration register,         Address offset: 0x148 */
       uint32_t RESERVED15;       /*!< Reserved,                                           Address offset: 0x14C */
  __IO uint32_t WPIR;             /*!< OCTOSPI Wrap Instruction register,                  Address offset: 0x150 */
       uint32_t RESERVED16[3];    /*!< Reserved,                                           Address offset: 0x154-0x15C */
  __IO uint32_t WPABR;            /*!< OCTOSPI Wrap Alternate Bytes register,              Address offset: 0x160 */
       uint32_t RESERVED17[7];    /*!< Reserved,                                           Address offset: 0x164-0x17C */
  __IO uint32_t WCCR;             /*!< OCTOSPI Write Communication Configuration register, Address offset: 0x180 */
       uint32_t RESERVED18;       /*!< Reserved,                                           Address offset: 0x184 */
  __IO uint32_t WTCR;             /*!< OCTOSPI Write Timing Configuration register,        Address offset: 0x188 */
       uint32_t RESERVED19;       /*!< Reserved,                                           Address offset: 0x18C */
  __IO uint32_t WIR;              /*!< OCTOSPI Write Instruction register,                 Address offset: 0x190 */
       uint32_t RESERVED20[3];    /*!< Reserved,                                           Address offset: 0x194-0x19C */
  __IO uint32_t WABR;             /*!< OCTOSPI Write Alternate Bytes register,             Address offset: 0x1A0 */
       uint32_t RESERVED21[23];   /*!< Reserved,                                           Address offset: 0x1A4-0x1FC */
  __IO uint32_t HLCR;             /*!< OCTOSPI Hyperbus Latency Configuration register,    Address offset: 0x200 */
       uint32_t RESERVED22[122];  /*!< Reserved,                                           Address offset: 0x204-0x3E8 */
  __IO uint32_t HWCFGR2;          /*!< OCTOSPI hardware configuration register 2           Address offset: 0x3EC */
  __IO uint32_t HWCFGR;           /*!< OCTOSPI HW Configuration register,                  Address offset: 0x3F0 */
  __IO uint32_t VERR;             /*!< OCTOSPI Version register,                           Address offset: 0x3F4 */
  __IO uint32_t IDR;              /*!< OCTOSPI Identification register,                    Address offset: 0x3F8 */
  __IO uint32_t MIDR;             /*!< OCTOPSI HW Magic ID register,                       Address offset: 0x3FC */
} OCTOSPI_TypeDef;


/**
  * @brief PSSI
  */

typedef struct
{
  __IO uint32_t CR;             /*!< PSSI control register 1,               Address offset: 0x000 */
  __IO uint32_t SR;             /*!< PSSI status register,                  Address offset: 0x004 */
  __IO uint32_t RIS;            /*!< PSSI raw interrupt status register,    Address offset: 0x008 */
  __IO uint32_t IER;            /*!< PSSI interrupt enable register,        Address offset: 0x00C */
  __IO uint32_t MIS;            /*!< PSSI masked interrupt status register, Address offset: 0x010 */
  __IO uint32_t ICR;            /*!< PSSI interrupt clear register,         Address offset: 0x014 */
  __IO uint32_t RESERVED1[4];   /*!< Reserved,                                      0x018 - 0x024 */
  __IO uint32_t DR;             /*!< PSSI data register,                    Address offset: 0x028 */
  __IO uint32_t RESERVED2[241]; /*!< Reserved,                                      0x02C - 0x3EC */
  __IO uint32_t HWCFGR;         /*!< PSSI IP HW configuration register,     Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< PSSI IP version register,              Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< PSSI IP ID register,                   Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< PSSI SIZE ID register,                 Address offset: 0x3FC */
} PSSI_TypeDef;

/**
  * @brief Power Management
  */
typedef struct
{
  __IO uint32_t CR1;             /*!< PWR control register 1                         Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< PWR control register 2                         Address offset: 0x004 */
  __IO uint32_t CR3;             /*!< PWR control register 3                         Address offset: 0x008 */
       uint32_t RESERVED0[3];    /*!< Reserved                                       Address offset: 0x00C-0x014 */
  __IO uint32_t CR7;             /*!< PWR control register 7                         Address offset: 0x018 */
  __IO uint32_t CR8;             /*!< PWR control register 8                         Address offset: 0x01C */
  __IO uint32_t CR9;             /*!< PWR control register 9                         Address offset: 0x020 */
  __IO uint32_t CR10;            /*!< PWR control register 10                        Address offset: 0x024 */
  __IO uint32_t CR11;            /*!< PWR control register 11                        Address offset: 0x028 */
       uint32_t RESERVED1[3];    /*!< Reserved                                       Address offset: 0x02C-0x034 */
  __IO uint32_t BDCR;            /*!< PWR backup domain control register             Address offset: 0x038 */
       uint32_t RESERVED2;       /*!< Reserved                                       Address offset: 0x03C */
  __IO uint32_t CPU1CR;          /*!< PWR CPU1 control register                      Address offset: 0x040 */
  __IO uint32_t CPU2CR;          /*!< PWR CPU2 control register                      Address offset: 0x044 */
       uint32_t RESERVED3;       /*!< Reserved                                       Address offset: 0x048 */
  __IO uint32_t D1CR;            /*!< PWR D1 control register                        Address offset: 0x04C */
  __IO uint32_t D2CR;            /*!< PWR D2 control register                        Address offset: 0x050 */
       uint32_t RESERVED4[3];    /*!< Reserved                                       Address offset: 0x054-0x05C */
  __IO uint32_t WKUPCR1;         /*!< PWR wake-up control register 1                 Address offset: 0x060 */
  __IO uint32_t WKUPCR2;         /*!< PWR wake-up control register 2                 Address offset: 0x064 */
  __IO uint32_t WKUPCR3;         /*!< PWR wake-up control register 3                 Address offset: 0x068 */
  __IO uint32_t WKUPCR4;         /*!< PWR wake-up control register 4                 Address offset: 0x06C */
  __IO uint32_t WKUPCR5;         /*!< PWR wake-up control register 5                 Address offset: 0x070 */
  __IO uint32_t WKUPCR6;         /*!< PWR wake-up control register 6                 Address offset: 0x074 */
       uint32_t RESERVED5[34];   /*!< Reserved                                       Address offset: 0x078-0x0FC */
  __IO uint32_t RSECCFGR;        /*!< PWR resource secure configuration register     Address offset: 0x100 */
  __IO uint32_t RPRIVCFGR;       /*!< PWR resource privileged configuration register Address offset: 0x104 */
  __IO uint32_t RxCIDCFGR[7];    /*!< PWR Resource 0-6 CID Configuration Registers   Address offsets 0x108-0x120 */
       uint32_t RESERVED6[23];   /*!< Reserved                                       Address offset: 0x124-0x17C */
  __IO uint32_t WIOSECCFGR;      /*!< PWR WIO secure configuration register          Address offset: 0x180 */
  __IO uint32_t WIOPRIVCFGR;     /*!< PWR WIO privileged configuration register      Address offset: 0x184 */
  __IO uint32_t WIO1CIDCFGR;     /*!< PWR WIO 1 CID configuration register           Address offset: 0x188 */
  __IO uint32_t WIO1SEMCR;       /*!< PWR WIO 1 semaphore control register           Address offset: 0x18C */
  __IO uint32_t WIO2CIDCFGR;     /*!< PWR WIO 2 CID configuration register           Address offset: 0x190 */
  __IO uint32_t WIO2SEMCR;       /*!< PWR WIO 2 semaphore control register           Address offset: 0x194 */
  __IO uint32_t WIO3CIDCFGR;     /*!< PWR WIO 3 CID configuration register           Address offset: 0x198 */
  __IO uint32_t WIO3SEMCR;       /*!< PWR WIO 3 semaphore control register           Address offset: 0x19C */
  __IO uint32_t WIO4CIDCFGR;     /*!< PWR WIO 4 CID configuration register           Address offset: 0x1A0 */
  __IO uint32_t WIO4SEMCR;       /*!< PWR WIO 4 semaphore control register           Address offset: 0x1A4 */
  __IO uint32_t WIO5CIDCFGR;     /*!< PWR WIO 5 CID configuration register           Address offset: 0x1A8 */
  __IO uint32_t WIO5SEMCR;       /*!< PWR WIO 5 semaphore control register           Address offset: 0x1AC */
  __IO uint32_t WIO6CIDCFGR;     /*!< PWR WIO 6 CID configuration register           Address offset: 0x1B0 */
  __IO uint32_t WIO6SEMCR;       /*!< PWR WIO 6 semaphore control register           Address offset: 0x1B4 */
       uint32_t RESERVED7[18];   /*!< Reserved                                       Address offset: 0x1B8-0x1FC */
  __IO uint32_t CPU1D1SR;        /*!< PWR CPU1 status register                       Address offset: 0x200 */
  __IO uint32_t CPU2D2SR;        /*!< PWR CPU2 status register                       Address offset: 0x204 */
       uint32_t RESERVED8[123];  /*!< Reserved                                       Address offset: 0x208-0x3F0 */
  __IO uint32_t VERR;            /*!< PWR VER register                               Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< PWR identifier register                        Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< PWR size identification register               Address offset: 0x3FC */
} PWR_TypeDef;

/**
  * @brief SRAMs configuration controller
  */
typedef struct
{
  __IO uint32_t CR;           /*!< Control Register,                  Address offset: 0x000 */
  __IO uint32_t IER;          /*!< Interrupt Enable Register,         Address offset: 0x004 */
  __IO uint32_t ISR;          /*!< Interrupt Status Register,         Address offset: 0x008 */
  __IO uint32_t SEAR;         /*!< ECC Single Error Address Register, Address offset: 0x00C */
  __IO uint32_t DEAR;         /*!< ECC Double Error Address Register, Address offset: 0x010 */
  __IO uint32_t ICR;          /*!< Interrupt Clear Register,          Address offset: 0x014 */
       uint32_t RESERVED1[3]; /*!< Reserved1,                         Address offset: 0x018-0x20 */
  __IO uint32_t ECCKEY;       /*!< ECC Key Register,                  Address offset: 0x024 */
  __IO uint32_t ERKEYR;       /*!< Erase Key Register,                Address offset: 0x028 */
       uint32_t RESERVED2;    /*!< Reserved2,                         Address offset: 0x02C */
  __IO uint32_t CCR1;         /*!< CRC Control Register 1,            Address offset: 0x030 */
  __IO uint32_t CCR2;         /*!< CRC Control Register 2,            Address offset: 0x034 */
  __IO uint32_t CRSR;         /*!< CRC Reference Signature Register,  Address offset: 0x038 */
  __IO uint32_t CSR;          /*!< CRC Status Register,               Address offset: 0x03C */
  __IO uint32_t CCSR;         /*!< CRC Calculated Signature Register, Address offset: 0x040 */
} RAMCFG_TypeDef;

/**
  * @brief Resets & Clocks Control
  *        reference document : Chapter #20 "Reset and clock control (RCC)"
  *                             RM0506 - Reference Manual - STM32MP21xx
  *                             advanced ARM-based 32/64-bit MPUs
  */
typedef struct
{
  __IO uint32_t CIDCFGR; /*!< RCC Resource x CID Configuration Register */
  __IO uint32_t SEMCR;   /*!< RCC Resource x Semaphore Control Register */
} RCC_Comp_TypeDef;

typedef struct
{                                  /*!< ************** Register description **************  Address offset */
  __IO uint32_t SECCFGR[4];        /*!< RCC Secure Configuration Register x (x=0 to 3)         0x000-0x00c */
  __IO uint32_t PRIVCFGR[4];       /*!< RCC Privileged Configuration Register x (x=0 to 3)     0x010-0x01c */
  __IO uint32_t RCFGLOCKR[4];      /*!< RCC Resource Configuration Lock Register x (x=0 to 3)  0x020-0x02c */
       RCC_Comp_TypeDef R[114];    /*!< RCC Resource x Compartment Configuration (x=0 to 113)  0x030-0x3bc */
       uint32_t RESERVED0[16];      /*!< Reserved                                                                       Address offset: 0x03C0-0x03FC */
  __IO uint32_t GRSTCSETR;          /*!< RCC global reset control set register                                          Address offset: 0x0400 */
  __IO uint32_t C1RSTCSETR;         /*!< RCC CPU1 reset control set register                                            Address offset: 0x0404 */
  __IO uint32_t RESERVED1;          /*!< Reserved                                                                       Address offset: 0x0408 */
  __IO uint32_t C2RSTCSETR;         /*!< RCC CPU2 reset control set register                                            Address offset: 0x040C */
  __IO uint32_t HWRSTSCLRR;         /*!< RCC hardware reset status clear register                                       Address offset: 0x0410 */
  __IO uint32_t C1HWRSTSCLRR;       /*!< RCC CPU1 hardware reset status clear register                                  Address offset: 0x0414 */
  __IO uint32_t C2HWRSTSCLRR;       /*!< RCC CPU2 hardware reset status clear register                                  Address offset: 0x0418 */
  __IO uint32_t C1BOOTRSTSSETR;     /*!< RCC CPU1 boot reset status set register                                        Address offset: 0x041C */
  __IO uint32_t C1BOOTRSTSCLRR;     /*!< RCC CPU1 boot reset status clear register                                      Address offset: 0x0420 */
  __IO uint32_t C2BOOTRSTSSETR;     /*!< RCC CPU2 boot reset status set register                                        Address offset: 0x0424 */
  __IO uint32_t C2BOOTRSTSCLRR;     /*!< RCC CPU2 boot reset status clear register                                      Address offset: 0x0428 */
  __IO uint32_t C1SREQSETR;         /*!< RCC CPU1 stop request set register                                             Address offset: 0x042C */
  __IO uint32_t C1SREQCLRR;         /*!< RCC CPU1 stop request clear register                                           Address offset: 0x0430 */
  __IO uint32_t CPUBOOTCR;          /*!< RCC CPU boot control register                                                  Address offset: 0x0434 */
  __IO uint32_t STBYBOOTCR;         /*!< RCC standby boot control register                                              Address offset: 0x0438 */
  __IO uint32_t LEGBOOTCR;          /*!< RCC legacy boot control register                                               Address offset: 0x043C */
  __IO uint32_t BDCR;               /*!< RCC backup domain control register                                             Address offset: 0x0440 */
       uint32_t RESERVED2[2];       /*!< Reserved                                                                       Address offset: 0x0444-0x0448 */
  __IO uint32_t RDCR;               /*!< RCC reset duration control register                                            Address offset: 0x044C */
  __IO uint32_t C1MSRDCR;           /*!< RCC C1MS reset delay control register                                          Address offset: 0x0450 */
  __IO uint32_t PWRLPDLYCR;         /*!< RCC PWR_LP delay control register                                              Address offset: 0x0454 */
  __IO uint32_t C1CIESETR;          /*!< RCC CPU1 clock source interrupt enable set register                            Address offset: 0x0458 */
  __IO uint32_t C1CIFCLRR;          /*!< RCC CPU1 clock source interrupt flag clear register                            Address offset: 0x045C */
  __IO uint32_t C2CIESETR;          /*!< RCC CPU2 clock source interrupt enable set register                            Address offset: 0x0460 */
  __IO uint32_t C2CIFCLRR;          /*!< RCC CPU2 clock source interrupt flag clear register                            Address offset: 0x0464 */
  __IO uint32_t IWDGC1FZSETR;       /*!< RCC IWDG CPU1 clock freeze set register                                        Address offset: 0x0468 */
  __IO uint32_t IWDGC1FZCLRR;       /*!< RCC IWDG CPU1 clock freeze clear register                                      Address offset: 0x046C */
  __IO uint32_t IWDGC1CFGSETR;      /*!< RCC IWDG CPU1 configuration set register                                       Address offset: 0x0470 */
  __IO uint32_t IWDGC1CFGCLRR;      /*!< RCC IWDG CPU1 configuration clear register                                     Address offset: 0x0474 */
  __IO uint32_t IWDGC2FZSETR;       /*!< RCC IWDG CPU2 clock freeze set register                                        Address offset: 0x0478 */
  __IO uint32_t IWDGC2FZCLRR;       /*!< RCC IWDG CPU2 clock freeze clear register                                      Address offset: 0x047C */
  __IO uint32_t IWDGC2CFGSETR;      /*!< RCC IWDG CPU2 configuration set register                                       Address offset: 0x0480 */
  __IO uint32_t IWDGC2CFGCLRR;      /*!< RCC IWDG CPU2 configuration clear register                                     Address offset: 0x0484 */
  __IO uint32_t MCO1CFGR;           /*!< RCC MCO1 configuration register                                                Address offset: 0x0488 */
  __IO uint32_t MCO2CFGR;           /*!< RCC MCO2 configuration register                                                Address offset: 0x048C */
  __IO uint32_t OCENSETR;           /*!< RCC oscillator clock enable set register                                       Address offset: 0x0490 */
  __IO uint32_t OCENCLRR;           /*!< RCC oscillator clock enable clear register                                     Address offset: 0x0494 */
  __IO uint32_t OCRDYR;             /*!< RCC oscillator clock ready register                                            Address offset: 0x0498 */
  __IO uint32_t HSICFGR;            /*!< RCC HSI configuration register                                                 Address offset: 0x049C */
  __IO uint32_t MSICFGR;            /*!< RCC MSI configuration register                                                 Address offset: 0x04A0 */
  __IO uint32_t LSICR;              /*!< RCC LSI control register                                                       Address offset: 0x04A4 */
  __IO uint32_t RTCDIVR;            /*!< RCC RTC clock divider register                                                 Address offset: 0x04A8 */
  __IO uint32_t APB1DIVR;           /*!< RCC APB1 clock divider register                                                Address offset: 0x04AC */
  __IO uint32_t APB2DIVR;           /*!< RCC APB2 clock divider register                                                Address offset: 0x04B0 */
  __IO uint32_t APB3DIVR;           /*!< RCC APB3 clock divider register                                                Address offset: 0x04B4 */
  __IO uint32_t APB4DIVR;           /*!< RCC APB4 clock divider register                                                Address offset: 0x04B8 */
  __IO uint32_t APB5DIVR;           /*!< RCC APB5 clock divider register                                                Address offset: 0x04BC */
  __IO uint32_t APBDBGDIVR;         /*!< RCC APBDBG clock divider register                                              Address offset: 0x04C0 */
       uint32_t RESERVED3;          /*!< Reserved                                                                       Address offset: 0x04C4 */
  __IO uint32_t TIMG1PRER;          /*!< RCC TIM group 1 prescaler register                                             Address offset: 0x04C8 */
  __IO uint32_t TIMG2PRER;          /*!< RCC TIM group 2 prescaler register                                             Address offset: 0x04CC */
  __IO uint32_t LSMCUDIVR;          /*!< RCC LSMCU clock divider register                                               Address offset: 0x04D0 */
  __IO uint32_t DDRCPCFGR;          /*!< RCC DDRC AXI port configuration register                                       Address offset: 0x04D4 */
  __IO uint32_t DDRCAPBCFGR;        /*!< RCC DDRC APB configuration register                                            Address offset: 0x04D8 */
  __IO uint32_t DDRPHYCAPBCFGR;     /*!< RCC DDRPHYC APB configuration register                                         Address offset: 0x04DC */
  __IO uint32_t DDRPHYCCFGR;        /*!< RCC DDRPHYC configuration register                                             Address offset: 0x04E0 */
  __IO uint32_t DDRCFGR;            /*!< RCC DDR configuration register                                                 Address offset: 0x04E4 */
  __IO uint32_t DDRITFCFGR;         /*!< RCC DDR interface configuration register                                       Address offset: 0x04E8 */
       uint32_t RESERVED4;          /*!< Reserved                                                                       Address offset: 0x04EC */
  __IO uint32_t SYSRAMCFGR;         /*!< RCC SYSRAM configuration register                                              Address offset: 0x04F0 */
       uint32_t RESERVED5;          /*!< Reserved                                                                       Address offset: 0x04F4 */
  __IO uint32_t SRAM1CFGR;          /*!< RCC SRAM1 configuration register                                               Address offset: 0x04F8 */
       uint32_t RESERVED6;          /*!< Reserved                                                                       Address offset: 0x04FC */
  __IO uint32_t RETRAMCFGR;         /*!< RCC RETRAM configuration register                                              Address offset: 0x0500 */
  __IO uint32_t BKPSRAMCFGR;        /*!< RCC BKPSRAM configuration register                                             Address offset: 0x0504 */
       uint32_t RESERVED7[3];       /*!< Reserved                                                                       Address offset: 0x0508-0x0510 */
  __IO uint32_t OSPI1CFGR;          /*!< RCC OCTOSPI1 configuration register                                            Address offset: 0x0514 */
  __IO uint32_t RESERVED8;          /*!< Reserved                                                                       Address offset: 0x0518 */
  __IO uint32_t FMCCFGR;            /*!< RCC FMC configuration register                                                 Address offset: 0x051C */
  __IO uint32_t DBGCFGR;            /*!< RCC debug configuration register                                               Address offset: 0x0520 */
  __IO uint32_t STMCFGR;            /*!< RCC STM configuration register                                                 Address offset: 0x0524 */
  __IO uint32_t ETRCFGR;            /*!< RCC ETR configuration register                                                 Address offset: 0x0528 */
  __IO uint32_t GPIOACFGR;          /*!< RCC GPIOA configuration register                                               Address offset: 0x052C */
  __IO uint32_t GPIOBCFGR;          /*!< RCC GPIOB configuration register                                               Address offset: 0x0530 */
  __IO uint32_t GPIOCCFGR;          /*!< RCC GPIOC configuration register                                               Address offset: 0x0534 */
  __IO uint32_t GPIODCFGR;          /*!< RCC GPIOD configuration register                                               Address offset: 0x0538 */
  __IO uint32_t GPIOECFGR;          /*!< RCC GPIOE configuration register                                               Address offset: 0x053C */
  __IO uint32_t GPIOFCFGR;          /*!< RCC GPIOF configuration register                                               Address offset: 0x0540 */
  __IO uint32_t GPIOGCFGR;          /*!< RCC GPIOG configuration register                                               Address offset: 0x0544 */
  __IO uint32_t GPIOHCFGR;          /*!< RCC GPIOH configuration register                                               Address offset: 0x0548 */
  __IO uint32_t GPIOICFGR;          /*!< RCC GPIOI configuration register                                               Address offset: 0x054C */
       uint32_t RESERVED9[2];       /*!< Reserved                                                                       Address offset: 0x0550-0x0554 */
  __IO uint32_t GPIOZCFGR;          /*!< RCC GPIOZ configuration register                                               Address offset: 0x0558 */
  __IO uint32_t HPDMA1CFGR;         /*!< RCC HPDMA1 configuration register                                              Address offset: 0x055C */
  __IO uint32_t HPDMA2CFGR;         /*!< RCC HPDMA2 configuration register                                              Address offset: 0x0560 */
  __IO uint32_t HPDMA3CFGR;         /*!< RCC HPDMA3 configuration register                                              Address offset: 0x0564 */
       uint32_t RESERVED10[2];      /*!< Reserved                                                                       Address offset: 0x0568-0x056C */
  __IO uint32_t IPCC1CFGR;          /*!< RCC IPCC1 configuration register                                               Address offset: 0x0570 */
       uint32_t RESERVED11;         /*!< Reserved                                                                       Address offset: 0x0574 */
  __IO uint32_t RTCCFGR;            /*!< RCC RTC configuration register                                                 Address offset: 0x0578 */
       uint32_t RESERVED12;         /*!< Reserved                                                                       Address offset: 0x057C */
  __IO uint32_t SYSCPU1CFGR;        /*!< RCC SYSCPU1 configuration register                                             Address offset: 0x0580 */
  __IO uint32_t BSECCFGR;           /*!< RCC BSEC configuration register                                                Address offset: 0x0584 */
       uint32_t RESERVED13[2];      /*!< Reserved                                                                       Address offset: 0x0588-0x058C */
  __IO uint32_t PLL2CFGR1;          /*!< RCC PLL2 configuration register 1                                              Address offset: 0x0590 */
  __IO uint32_t PLL2CFGR2;          /*!< RCC PLL2 configuration register 2                                              Address offset: 0x0594 */
  __IO uint32_t PLL2CFGR3;          /*!< RCC PLL2 configuration register 3                                              Address offset: 0x0598 */
  __IO uint32_t PLL2CFGR4;          /*!< RCC PLLx configuration register 4                                              Address offset: 0x059C */
  __IO uint32_t PLL2CFGR5;          /*!< RCC PLL2 configuration register 5                                              Address offset: 0x05A0 */
       uint32_t RESERVED14;         /*!< Reserved                                                                       Address offset: 0x05A4 */
  __IO uint32_t PLL2CFGR6;          /*!< RCC PLL2 configuration register 6                                              Address offset: 0x05A8 */
  __IO uint32_t PLL2CFGR7;          /*!< RCC PLL2 configuration register 7                                              Address offset: 0x05AC */
       uint32_t RESERVED15[12];     /*!< Reserved                                                                       Address offset: 0x05B0-0x05DC */
  __IO uint32_t HSIFMONCR;          /*!< RCC HSI frequency monitoring control register                                  Address offset: 0x05E0 */
  __IO uint32_t HSIFVALR;           /*!< RCC HSI frequency value register                                               Address offset: 0x05E4 */
  __IO uint32_t MSIFMONCR;          /*!< RCC MSI frequency monitoring control register                                  Address offset: 0x05E8 */
  __IO uint32_t MSIFVALR;           /*!< RCC MSI frequency value register                                               Address offset: 0x05EC */
       uint32_t RESERVED16[68];     /*!< Reserved                                                                       Address offset: 0x05F0-0x06FC */
  __IO uint32_t TIM1CFGR;           /*!< RCC TIM1 configuration register                                                Address offset: 0x0700 */
  __IO uint32_t TIM2CFGR;           /*!< RCC TIM2 configuration register                                                Address offset: 0x0704 */
  __IO uint32_t TIM3CFGR;           /*!< RCC TIM3 configuration register                                                Address offset: 0x0708 */
  __IO uint32_t TIM4CFGR;           /*!< RCC TIM4 configuration register                                                Address offset: 0x070C */
  __IO uint32_t TIM5CFGR;           /*!< RCC TIM5 configuration register                                                Address offset: 0x0710 */
  __IO uint32_t TIM6CFGR;           /*!< RCC TIM6 configuration register                                                Address offset: 0x0714 */
  __IO uint32_t TIM7CFGR;           /*!< RCC TIM7 configuration register                                                Address offset: 0x0718 */
  __IO uint32_t TIM8CFGR;           /*!< RCC TIM8 configuration register                                                Address offset: 0x071C */
  __IO uint32_t TIM10CFGR;          /*!< RCC TIM10 configuration register                                               Address offset: 0x0720 */
  __IO uint32_t TIM11CFGR;          /*!< RCC TIM11 configuration register                                               Address offset: 0x0724 */
  __IO uint32_t TIM12CFGR;          /*!< RCC TIM12 configuration register                                               Address offset: 0x0728 */
  __IO uint32_t TIM13CFGR;          /*!< RCC TIM13 configuration register                                               Address offset: 0x072C */
  __IO uint32_t TIM14CFGR;          /*!< RCC TIM14 configuration register                                               Address offset: 0x0730 */
  __IO uint32_t TIM15CFGR;          /*!< RCC TIM15 configuration register                                               Address offset: 0x0734 */
  __IO uint32_t TIM16CFGR;          /*!< RCC TIM16 configuration register                                               Address offset: 0x0738 */
  __IO uint32_t TIM17CFGR;          /*!< RCC TIM17 configuration register                                               Address offset: 0x073C */
       uint32_t RESERVED17;         /*!< Reserved                                                                       Address offset: 0x0740 */
  __IO uint32_t LPTIM1CFGR;         /*!< RCC LPTIM1 configuration register                                              Address offset: 0x0744 */
  __IO uint32_t LPTIM2CFGR;         /*!< RCC LPTIM2 configuration register                                              Address offset: 0x0748 */
  __IO uint32_t LPTIM3CFGR;         /*!< RCC LPTIM3 configuration register                                              Address offset: 0x074C */
  __IO uint32_t LPTIM4CFGR;         /*!< RCC LPTIM4 configuration register                                              Address offset: 0x0750 */
  __IO uint32_t LPTIM5CFGR;         /*!< RCC LPTIM5 configuration register                                              Address offset: 0x0754 */
  __IO uint32_t SPI1CFGR;           /*!< RCC SPI1 configuration register                                                Address offset: 0x0758 */
  __IO uint32_t SPI2CFGR;           /*!< RCC SPI2 configuration register                                                Address offset: 0x075C */
  __IO uint32_t SPI3CFGR;           /*!< RCC SPI3 configuration register                                                Address offset: 0x0760 */
  __IO uint32_t SPI4CFGR;           /*!< RCC SPI4 configuration register                                                Address offset: 0x0764 */
  __IO uint32_t SPI5CFGR;           /*!< RCC SPI5 configuration register                                                Address offset: 0x0768 */
  __IO uint32_t SPI6CFGR;           /*!< RCC SPI6 configuration register                                                Address offset: 0x076C */
       uint32_t RESERVED18[2];      /*!< Reserved                                                                       Address offset: 0x0770-0x0774 */
  __IO uint32_t SPDIFRXCFGR;        /*!< RCC SPDIFRX configuration register                                             Address offset: 0x0778 */
  __IO uint32_t USART1CFGR;         /*!< RCC USART1 configuration register                                              Address offset: 0x077C */
  __IO uint32_t USART2CFGR;         /*!< RCC USART2 configuration register                                              Address offset: 0x0780 */
  __IO uint32_t USART3CFGR;         /*!< RCC USART3 configuration register                                              Address offset: 0x0784 */
  __IO uint32_t UART4CFGR;          /*!< RCC UART4 configuration register                                               Address offset: 0x0788 */
  __IO uint32_t UART5CFGR;          /*!< RCC UART5 configuration register                                               Address offset: 0x078C */
  __IO uint32_t USART6CFGR;         /*!< RCC USART6 configuration register                                              Address offset: 0x0790 */
  __IO uint32_t UART7CFGR;          /*!< RCC UART7 configuration register                                               Address offset: 0x0794 */
       uint32_t RESERVED19[2];      /*!< Reserved                                                                       Address offset: 0x0798-0x079C */
  __IO uint32_t LPUART1CFGR;        /*!< RCC LPUART1 configuration register                                             Address offset: 0x07A0 */
  __IO uint32_t I2C1CFGR;           /*!< RCC I2C1 configuration register                                                Address offset: 0x07A4 */
  __IO uint32_t I2C2CFGR;           /*!< RCC I2C2 configuration register                                                Address offset: 0x07A8 */
  __IO uint32_t I2C3CFGR;           /*!< RCC I2C3 configuration register                                                Address offset: 0x07AC */
       uint32_t RESERVED20[5];      /*!< Reserved                                                                       Address offset: 0x07B0-0x07C0 */
  __IO uint32_t SAI1CFGR;           /*!< RCC SAI1 configuration register                                                Address offset: 0x07C4 */
  __IO uint32_t SAI2CFGR;           /*!< RCC SAI2 configuration register                                                Address offset: 0x07C8 */
  __IO uint32_t SAI3CFGR;           /*!< RCC SAI3 configuration register                                                Address offset: 0x07CC */
  __IO uint32_t SAI4CFGR;           /*!< RCC SAI4 configuration register                                                Address offset: 0x07D0 */
       uint32_t RESERVED21;         /*!< Reserved                                                                       Address offset: 0x07D4 */
  __IO uint32_t MDF1CFGR;           /*!< RCC MDF1 configuration register                                                Address offset: 0x07D8 */
       uint32_t RESERVED22;         /*!< Reserved                                                                       Address offset: 0x07DC */
  __IO uint32_t FDCANCFGR;          /*!< RCC FDCAN configuration register                                               Address offset: 0x07E0 */
  __IO uint32_t HDPCFGR;            /*!< RCC HDP configuration register                                                 Address offset: 0x07E4 */
  __IO uint32_t ADC1CFGR;           /*!< RCC ADC1 configuration register                                                Address offset: 0x07E8 */
  __IO uint32_t ADC2CFGR;           /*!< RCC ADC2 configuration register                                                Address offset: 0x07EC */
  __IO uint32_t ETH1CFGR;           /*!< RCC Ethernet 1 configuration register                                          Address offset: 0x07F0 */
  __IO uint32_t ETH2CFGR;           /*!< RCC Ethernet 2 configuration register                                          Address offset: 0x07F4 */
       uint32_t RESERVED23;         /*!< Reserved                                                                       Address offset: 0x07F8 */
  __IO uint32_t USBHCFGR;           /*!< RCC USBH configuration register                                                Address offset: 0x07FC */
  __IO uint32_t USB2PHY1CFGR;       /*!< RCC USB2PHY1 configuration register                                            Address offset: 0x0800 */
       uint32_t RESERVED24;         /*!< Reserved                                                                       Address offset: 0x0804 */
  __IO uint32_t OTGCFGR;            /*!< RCC OTG  configuration register                                                Address offset: 0x0808 */
  __IO uint32_t USB2PHY2CFGR;       /*!< RCC USB2PHY2 configuration register                                            Address offset: 0x080C */
       uint32_t RESERVED25[5];      /*!< Reserved                                                                       Address offset: 0x0810-0x820 */
  __IO uint32_t STGENCFGR;          /*!< RCC STGEN configuration register                                               Address offset: 0x0824 */
       uint32_t RESERVED26[2];      /*!< Reserved                                                                       Address offset: 0x0828-0x082C */
  __IO uint32_t SDMMC1CFGR;         /*!< RCC SDMMC1 configuration register                                              Address offset: 0x0830 */
  __IO uint32_t SDMMC2CFGR;         /*!< RCC SDMMC2 configuration register                                              Address offset: 0x0834 */
  __IO uint32_t SDMMC3CFGR;         /*!< RCC SDMMC3 configuration register                                              Address offset: 0x0838 */
       uint32_t RESERVED27;         /*!< Reserved                                                                       Address offset: 0x083C */
  __IO uint32_t LTDCCFGR;           /*!< RCC LTDC configuration register                                                Address offset: 0x0840 */
       uint32_t RESERVED28[5];      /*!< Reserved                                                                       Address offset: 0x0844-0x0854 */
       uint32_t RESERVED_CS;        /*!< Reserved                                                                       Address offset: 0x0858 */
  __IO uint32_t DCMIPPCFGR;           /*!< RCC DCMIPP configuration register                                              Address offset: 0x085C */
  __IO uint32_t DCMIPSSICFGR;       /*!< RCC DCMIPSSI configuration register                                            Address offset: 0x0860 */
       uint32_t RESERVED29[3];      /*!< Reserved                                                                       Address offset: 0x0864-0x086C */
  __IO uint32_t RNG1CFGR;           /*!< RCC RNG1 configuration register                                                Address offset: 0x0870 */
  __IO uint32_t RNG2CFGR;           /*!< RCC RNG2 configuration register                                                Address offset: 0x0874 */
  __IO uint32_t PKACFGR;            /*!< RCC PKA configuration register                                                 Address offset: 0x0878 */
  __IO uint32_t SAESCFGR;           /*!< RCC SAES configuration register                                                Address offset: 0x087C */
  __IO uint32_t HASH1CFGR;          /*!< RCC HASH1 configuration register                                               Address offset: 0x0880 */
  __IO uint32_t HASH2CFGR;          /*!< RCC HASH2 configuration register                                               Address offset: 0x0884 */
  __IO uint32_t CRYP1CFGR;          /*!< RCC CRYP1 configuration register                                               Address offset: 0x0888 */
  __IO uint32_t CRYP2CFGR;          /*!< RCC CRYP2 configuration register                                               Address offset: 0x088C */
       uint32_t RESERVED30;         /*!< Reserved                                                                       Address offset: 0x0890 */
  __IO uint32_t IWDG1CFGR;          /*!< RCC IWDG1 configuration register                                               Address offset: 0x0894 */
  __IO uint32_t IWDG2CFGR;          /*!< RCC IWDG2 configuration register                                               Address offset: 0x0898 */
  __IO uint32_t IWDG3CFGR;          /*!< RCC IWDG3 configuration register                                               Address offset: 0x089C */
  __IO uint32_t IWDG4CFGR;          /*!< RCC IWDG4 configuration register                                               Address offset: 0x08A0 */
  __IO uint32_t WWDG1CFGR;          /*!< RCC WWDG1 configuration register                                               Address offset: 0x08A4 */
  __IO uint32_t RESERVED31;         /*!< Reserved                                                                       Address offset: 0x08A8 */
  __IO uint32_t VREFCFGR;           /*!< RCC VREF configuration register                                                Address offset: 0x08AC */
  __IO uint32_t DTSCFGR;            /*!< RCC DTS configuration register                                                 Address offset: 0x08B0 */
  __IO uint32_t CRCCFGR;            /*!< RCC CRC configuration register                                                 Address offset: 0x08B4 */
  __IO uint32_t SERCCFGR;           /*!< RCC SERC configuration register                                                Address offset: 0x08B8 */
       uint32_t RESERVED32;         /*!< Reserved                                                                       Address offset: 0x08BC */
  __IO uint32_t DDRPERFMCFGR;       /*!< RCC DDRPERFM configuration register                                            Address offset: 0x08C0 */
       uint32_t RESERVED33;         /*!< Reserved                                                                       Address offset: 0x08C4 */
  __IO uint32_t I3C1CFGR;           /*!< RCC I3C1 configuration register                                                Address offset: 0x08C8 */
  __IO uint32_t I3C2CFGR;           /*!< RCC I3C2 configuration register                                                Address offset: 0x08CC */
  __IO uint32_t I3C3CFGR;           /*!< RCC I3C3 configuration register                                                Address offset: 0x08D0 */
       uint32_t RESERVED34[459];    /*!< Reserved                                                                       Address offset: 0x08D4-0x0FFC */
  __IO uint32_t MUXSELCFGR;         /*!< RCC MUXSEL configuration register                                              Address offset: 0x1000 */
       uint32_t RESERVED35[5];      /*!< Reserved                                                                       Address offset: 0x1004-0x1014 */
  __IO uint32_t XBARxCFGR[64];      /*!< RCC Cross Bar x Configuration Register (x=0 to 63)                                              0x1018-0x1114 */
  __IO uint32_t PREDIVxCFGR[64];    /*!< RCC Pre Divider x Configuration Register (x=0 to 63)                                            0x1118-0x1214 */
  __IO uint32_t PREDIVSR1;          /*!< RCC pre divider status register 1                                              Address offset: 0x1218 */
  __IO uint32_t PREDIVSR2;          /*!< RCC pre divider status register 2                                              Address offset: 0x121C */
       uint32_t RESERVED36;         /*!< Reserved                                                                       Address offset: 0x1220 */
  __IO uint32_t FINDIVxCFGR[64];    /*!< RCC Final Divider x Configuration Register (x=0 to 63)                                          0x1224-0x1320 */
  __IO uint32_t FINDIVSR1;          /*!< RCC final divider status register 1                                            Address offset: 0x1324 */
  __IO uint32_t FINDIVSR2;          /*!< RCC final divider status register 2                                            Address offset: 0x1328 */
       uint32_t RESERVED37[5];      /*!< Reserved                                                                       Address offset: 0x132C-0x133C */
  __IO uint32_t FCALCOBS0CFGR;      /*!< RCC clock frequency calculator and observation 0 clock 	configuration register Address offset: 0x1340 */
  __IO uint32_t FCALCOBS1CFGR;      /*!< RCC clock frequency calculator and observation 1 clock 	configuration register Address offset: 0x1344 */
  __IO uint32_t FCALCREFCFGR;       /*!< RCC clock frequency calculator reference clock	configuration register          Address offset: 0x1348 */
  __IO uint32_t FCALCCR1;           /*!< RCC clock frequency calculator control register 1                              Address offset: 0x134C */
       uint32_t RESERVED38;         /*!< Reserved                                                                       Address offset: 0x1350 */
  __IO uint32_t FCALCCR2;           /*!< RCC clock frequency calculator control register 2                              Address offset: 0x1354 */
  __IO uint32_t FCALCSR;            /*!< RCC clock frequency calculator status register                                 Address offset: 0x1358 */
       uint32_t RESERVED39;         /*!< Reserved                                                                       Address offset: 0x135C */
  __IO uint32_t PLL4CFGR1;          /*!< RCC PLL4 configuration register 1                                              Address offset: 0x1360 */
  __IO uint32_t PLL4CFGR2;          /*!< RCC PLL4 configuration register 2                                              Address offset: 0x1364 */
  __IO uint32_t PLL4CFGR3;          /*!< RCC PLL4 configuration register 3                                              Address offset: 0x1368 */
  __IO uint32_t PLL4CFGR4;          /*!< RCC PLL4 configuration register 4                                              Address offset: 0x136C */
  __IO uint32_t PLL4CFGR5;          /*!< RCC PLL4 configuration register 5                                              Address offset: 0x1370 */
       uint32_t RESERVED40;         /*!< Reserved                                                                       Address offset: 0x1374 */
  __IO uint32_t PLL4CFGR6;          /*!< RCC PLL4 configuration register 6                                              Address offset: 0x1378 */
  __IO uint32_t PLL4CFGR7;          /*!< RCC PLL4 configuration register 7                                              Address offset: 0x137C */
       uint32_t RESERVED41[2];      /*!< Reserved                                                                       Address offset: 0x1380-0x1384 */
  __IO uint32_t PLL5CFGR1;          /*!< RCC PLL5 configuration register 1                                              Address offset: 0x1388 */
  __IO uint32_t PLL5CFGR2;          /*!< RCC PLL5 configuration register 2                                              Address offset: 0x138C */
  __IO uint32_t PLL5CFGR3;          /*!< RCC PLL5 configuration register 3                                              Address offset: 0x1390 */
  __IO uint32_t PLL5CFGR4;          /*!< RCC PLL5 configuration register 4                                              Address offset: 0x1394 */
  __IO uint32_t PLL5CFGR5;          /*!< RCC PLL5 configuration register 5                                              Address offset: 0x1398 */
       uint32_t RESERVED42;         /*!< Reserved                                                                       Address offset: 0x139C */
  __IO uint32_t PLL5CFGR6;          /*!< RCC PLL5 configuration register 6                                              Address offset: 0x13A0 */
  __IO uint32_t PLL5CFGR7;          /*!< RCC PLL5 configuration register 7                                              Address offset: 0x13A4 */
       uint32_t RESERVED43[2];      /*!< Reserved                                                                       Address offset: 0x13A8-0x13AC */
  __IO uint32_t PLL6CFGR1;          /*!< RCC PLL6 configuration register 1                                              Address offset: 0x13B0 */
  __IO uint32_t PLL6CFGR2;          /*!< RCC PLL6 configuration register 2                                              Address offset: 0x13B4 */
  __IO uint32_t PLL6CFGR3;          /*!< RCC PLL6 configuration register 3                                              Address offset: 0x13B8 */
  __IO uint32_t PLL6CFGR4;          /*!< RCC PLL6 configuration register 4                                              Address offset: 0x13BC */
  __IO uint32_t PLL6CFGR5;          /*!< RCC PLL6 configuration register 5                                              Address offset: 0x13C0 */
       uint32_t RESERVED44;         /*!< Reserved                                                                       Address offset: 0x13C4 */
  __IO uint32_t PLL6CFGR6;          /*!< RCC PLL6 configuration register 6                                              Address offset: 0x13C8 */
  __IO uint32_t PLL6CFGR7;          /*!< RCC PLL6 configuration register 7                                              Address offset: 0x13CC */
       uint32_t RESERVED45[2];      /*!< Reserved                                                                       Address offset: 0x13D0-0x13D4 */
  __IO uint32_t PLL7CFGR1;          /*!< RCC PLL7 configuration register 1                                              Address offset: 0x13D8 */
  __IO uint32_t PLL7CFGR2;          /*!< RCC PLL7 configuration register 2                                              Address offset: 0x13DC */
  __IO uint32_t PLL7CFGR3;          /*!< RCC PLL7 configuration register 3                                              Address offset: 0x13E0 */
  __IO uint32_t PLL7CFGR4;          /*!< RCC PLL7 configuration register 4                                              Address offset: 0x13E4 */
  __IO uint32_t PLL7CFGR5;          /*!< RCC PLL7 configuration register 5                                              Address offset: 0x13E8 */
       uint32_t RESERVED46;         /*!< Reserved                                                                       Address offset: 0x13EC */
  __IO uint32_t PLL7CFGR6;          /*!< RCC PLL7 configuration register 6                                              Address offset: 0x13F0 */
  __IO uint32_t PLL7CFGR7;          /*!< RCC PLL7 configuration register 7                                              Address offset: 0x13F4 */
       uint32_t RESERVED47[2];      /*!< Reserved                                                                       Address offset: 0x13F8-0x13FC */
  __IO uint32_t PLL8CFGR1;          /*!< RCC PLL8 configuration register 1                                              Address offset: 0x1400 */
  __IO uint32_t PLL8CFGR2;          /*!< RCC PLL8 configuration register 2                                              Address offset: 0x1404 */
  __IO uint32_t PLL8CFGR3;          /*!< RCC PLL8 configuration register 3                                              Address offset: 0x1408 */
  __IO uint32_t PLL8CFGR4;          /*!< RCC PLL8 configuration register 4                                              Address offset: 0x140C */
  __IO uint32_t PLL8CFGR5;          /*!< RCC PLL8 configuration register 5                                              Address offset: 0x1410 */
       uint32_t RESERVED48;         /*!< Reserved                                                                       Address offset: 0x1414 */
  __IO uint32_t PLL8CFGR6;          /*!< RCC PLL8 configuration register 6                                              Address offset: 0x1418 */
  __IO uint32_t PLL8CFGR7;          /*!< RCC PLL8 configuration register 7                                              Address offset: 0x141C */
       uint32_t RESERVED49[15093];  /*!< Reserved                                                                       Address offset: 0x1420-0xFFF0 */
  __IO uint32_t VERR;               /*!< RCC version register                                                           Address offset: 0xFFF4 */
  __IO uint32_t IDR;                /*!< RCC identifier register                                                        Address offset: 0xFFF8 */
  __IO uint32_t SIDR;               /*!< RCC size identification register                                               Address offset: 0xFFFC */
} RCC_TypeDef;
/**
  * @brief RISC Resource Isolation Slave Controller Compartment (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t CIDCFGR;        /*!< RISC CID configuration register for peripheral x */
  __IO uint32_t SEMCR;          /*!< RISC Semaphore control register for peripheral x */
} RISC_Comp_TypeDef;

/**
  * @brief RISC Resource Isolation Slave Controller Peripheral (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t          CR;             /*!< RISC Control register,                                           Address offset: 0x000 */
       uint32_t          RESERVED1[3];   /*!< Reserved,                                                                  0x004-0x00C */
  __IO uint32_t          SECCFGR[6];     /*!< RISC Security configuration register x,                                    0x010-0x024 */
       uint32_t          RESERVED2[2];   /*!< Reserved,                                                                  0x028-0x02C */
  __IO uint32_t          PRIVCFGR[6];    /*!< RISC Privileged configuration register x,                                  0x030-0x044 */
       uint32_t          RESERVED3[2];   /*!< Reserved,                                                                  0x048-0x04C */
  __IO uint32_t          RCFGLOCKR[6];   /*!< RISC Resource configuration lock register x,                               0x050-0x064 */
       uint32_t          RESERVED4[38];  /*!< Reserved,                                                                  0x068-0x0FC */
       RISC_Comp_TypeDef PER[128];       /*!< RISC Compartment configuration for peripheral x                            0x100-0x4FC */
       uint32_t          RESERVED5[256]; /*!< Reserved,                                                                  0x500-0x8FC */
  __IO uint32_t          REG1ACFGR;      /*!< RISAL Region 1 subregion A configuration register,               Address offset: 0x900 */
  __IO uint32_t          RESERVED6[1];   /*!< Reserved,                                                        Address offset: 0x904 */
  __IO uint32_t          REG1BCFGR;      /*!< RISAL Region 1 subregion B configuration register,               Address offset: 0x908 */
  __IO uint32_t          RESERVED7[1];   /*!< Reserved,                                                        Address offset: 0x90C */
  __IO uint32_t          REG2ACFGR;      /*!< RISAL Region 2 subregion A configuration register,               Address offset: 0x910 */
  __IO uint32_t          RESERVED8[1];   /*!< Reserved,                                                        Address offset: 0x914 */
  __IO uint32_t          REG2BCFGR;      /*!< RISAL Region 2 subregion B configuration register,               Address offset: 0x918 */
  __IO uint32_t          RESERVED9[1];   /*!< Reserved,                                                        Address offset: 0x91C */
  __IO uint32_t          REG3ACFGR;      /*!< RISAL Region 3 subregion A configuration register,               Address offset: 0x920 */
  __IO uint32_t          REG3AADDR;      /*!< RISAL Region 3 subregion A address register,                     Address offset: 0x924 */
  __IO uint32_t          REG3BCFGR;      /*!< RISAL Region 3 subregion B configuration register,               Address offset: 0x928 */
  __IO uint32_t          REG3BADDR;      /*!< RISAL Region 3 subregion B address register,                     Address offset: 0x92C */
} RISC_TypeDef;

/**
  * @brief RIMC Resource Isolation Master Controller (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t CR;            /*!< RIMC Configuration register,         Address offset: 0xC00 */
  __IO uint32_t SR;            /*!< RIMC Status register,                Address offset: 0xC04 */
       uint32_t RESERVED1[2];  /*!< Reserved,                                      0xC08-0xC0C */
  __IO uint32_t ATTR[16];      /*!< RIMC Attribute register x,                     0xC10-0xC4C */
} RIMC_TypeDef;

/**
  * @brief RIFSC Resource Isolation Framework Security Controller ID Registers (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t PPSR0;        /*!< RIFSC peripheral protection status register 0, Address offset: 0xFB0 */
  __IO uint32_t PPSR1;        /*!< RIFSC peripheral protection status register 1, Address offset: 0xFB4 */
  __IO uint32_t PPSR2;        /*!< RIFSC peripheral protection status register 2, Address offset: 0xFB8 */
  __IO uint32_t PPSR3;        /*!< RIFSC peripheral protection status register 3, Address offset: 0xFBC */
       uint32_t RESERVED[10]; /*!< Reserved,                               Address offsets: 0xFC0-0xFE4 */
  __IO uint32_t HWCFGR3;      /*!< RIFSC HW configuration register 3,             Address offset: 0xFE8 */
  __IO uint32_t HWCFGR2;      /*!< RIFSC HW configuration register 2,             Address offset: 0xFEC */
  __IO uint32_t HWCFGR1;      /*!< RIFSC HW configuration register 1,             Address offset: 0xFF0 */
  __IO uint32_t VERR;         /*!< RIFSC Version register,                        Address offset: 0xFF4 */
  __IO uint32_t IPIDR;        /*!< RIFSC Identification register,                 Address offset: 0xFF8 */
  __IO uint32_t SIDR;         /*!< RIFSC Size ID register,                        Address offset: 0xFFC */
} RIFSC_ID_TypeDef;

/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) Page Compartment (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t PRIVCFGR;      /*!< RISAB Compartment privilege configuration register */
       uint32_t RESERVED1[1];  /*!< Reserved                                           */
  __IO uint32_t RDCFGR;        /*!< RISAB Compartment read configuration register      */
       uint32_t RESERVED2[1];  /*!< Reserved                                           */
  __IO uint32_t WRCFGR;        /*!< RISAB Compartment write configuration register     */
       uint32_t RESERVED3[3];  /*!< Reserved                                           */
} RISAB_PageComp_TypeDef;

/**
  * @brief RISAB Resource Isolation Slave Unit for Address Space Protection (block-based) (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t               CR;             /*!< RISAB Configuration register,                                      Address offset: 0x000 */
       uint32_t               RESERVED1[1];   /*!< Reserved,                                                                          0x004 */
  __IO uint32_t               IASR;           /*!< RISAB Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t               IACR;           /*!< RISAB Illegal access clear register,                               Address offset: 0x00C */
  __IO uint32_t               RIFLOCKR;       /*!< RISAB RIF configuration lock register,                             Address offset: 0x010 */
       uint32_t               RESERVED2[3];   /*!< Reserved,                                                                    0x014-0x01C */
  __IO uint32_t               IAESR;          /*!< RISAB Illegal access error status register,                        Address offset: 0x020 */
  __IO uint32_t               IADDR;          /*!< RISAB Illegal address register,                                    Address offset: 0x024 */
       uint32_t               RESERVED3[54];  /*!< Reserved,                                                                    0x028-0x0FC */
  __IO uint32_t               PGSECCFGR[32];  /*!< RISAB Page x Security configuration register,                                0x100-0x17C */
       uint32_t               RESERVED4[32];  /*!< Reserved,                                                                    0x180-0x1FC */
  __IO uint32_t               PGPRIVCFGR[32]; /*!< RISAB Page x Privileged configuration register,                              0x200-0x27C */
       uint32_t               RESERVED5[224]; /*!< Reserved,                                                                    0x280-0x5FC */
  __IO uint32_t               PGC2PRIVCFGR[32]; /*!< RISAB Page x privileged configuration register for compartment 2,          0x600-0x67C */
       uint32_t               RESERVED6[96];  /*!< Reserved,                                                                    0x680-0x7FC */
       RISAB_PageComp_TypeDef CID[7];         /*!< RISAB Compartment x privilege configuration register,                        0x800-0x8DC */
       uint32_t               RESERVED8[72];  /*!< Reserved,                                                                    0x8E0-0x9FC */
  __IO uint32_t               PGCIDCFGR[32];  /*!< RISAB Compartment configuration for page x,                                  0xA00-0xA7C */
       uint32_t               RESERVED9[346]; /*!< Reserved,                                                                    0xA80-0xFE4 */
  __IO uint32_t               HWCFGR3;        /*!< RISAB HW configuration register 3,                                 Address offset: 0xFE8 */
  __IO uint32_t               HWCFGR2;        /*!< RISAB HW configuration register 2,                                 Address offset: 0xFEC */
  __IO uint32_t               HWCFGR1;        /*!< RISAB HW configuration register 1,                                 Address offset: 0xFF0 */
  __IO uint32_t               VERR;           /*!< RISAB Version register,                                            Address offset: 0xFF4 */
  __IO uint32_t               IPIDR;          /*!< RISAB Identification register,                                     Address offset: 0xFF8 */
  __IO uint32_t               SIDR;           /*!< RISAB Size ID register,                                            Address offset: 0xFFC */
} RISAB_TypeDef;

/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) Region (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t CFGR;          /*!< RISAF Region x configuration register             */
  __IO uint32_t STARTR;        /*!< RISAF Region x start address register             */
  __IO uint32_t ENDR;          /*!< RISAF Region x end address register               */
  __IO uint32_t CIDCFGR;       /*!< RISAF Region x CID configuration register         */
  __IO uint32_t ACFGR;         /*!< RISAF Region x subregion A configuration register */
  __IO uint32_t ASTARTR;       /*!< RISAF Region x subregion A start address register */
  __IO uint32_t AENDR;         /*!< RISAF Region x subregion A end address register   */
  __IO uint32_t ANESTR;        /*!< RISAF Region x subregion A nested mode register   */
  __IO uint32_t BCFGR;         /*!< RISAF Region x subregion B configuration register */
  __IO uint32_t BSTARTR;       /*!< RISAF Region x subregion B start address register */
  __IO uint32_t BENDR;         /*!< RISAF Region x subregion B end address register   */
  __IO uint32_t BNESTR;        /*!< RISAF Region x subregion B nested mode register   */
       uint32_t RESERVED1[4];  /*!< Reserved                                          */
} RISAF_Region_TypeDef;

/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) Illegal Access Register (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t             IAESR;         /*!< RISAF Illegal access error status register */
  __IO uint32_t             IADDR;         /*!< RISAF Illegal address register,            */
} RISAF_Illegal_TypeDef;

/**
  * @brief RISAF Resource Isolation Slave Unit for Address Space Protection (full version) (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t              CR;             /*!< RISAF Configuration register,                                      Address offset: 0x000 */
  __IO uint32_t              SR;             /*!< RISAF Status register,                                             Address offset: 0x004 */
  __IO uint32_t              IASR;           /*!< RISAF Illegal access status register,                              Address offset: 0x008 */
  __IO uint32_t              IACR;           /*!< RISAF Illegal access clear register,                               Address offset: 0x00C */
       uint32_t              RESERVED0[4];   /*!< Reserved,                                                                    0x010-0x01C */
       RISAF_Illegal_TypeDef IAR[2];         /*!< RISAF Illegal access error status and address register,                      0x020-0x02C */
  __IO uint32_t              KEYR[4];        /*!< RISAF Encryption key register x,                                             0x030-0x03C */
       RISAF_Region_TypeDef  REG[15];        /*!< RISAF Region x configuration register,                                       0x040-0x3FC */
       uint32_t              RESERVED1[764]; /*!< Reserved,                                                                    0x400-0xFEC */
  __IO uint32_t              HWCFGR;         /*!< RISAF HW configuration register,                                   Address offset: 0xFF0 */
  __IO uint32_t              VERR;           /*!< RISAF Version register,                                            Address offset: 0xFF4 */
  __IO uint32_t              IPIDR;          /*!< RISAF Identification register,                                     Address offset: 0xFF8 */
  __IO uint32_t              SIDR;           /*!< RISAF Size ID register,                                            Address offset: 0xFFC */
       uint32_t              RESERVED2[768]; /*!< Reserved,                                                                  0x1000-0x1BFC */
  __IO uint32_t              XCR;            /*!< RISAF Extended configuration register,                            Address offset: 0x1C00 */
  __IO uint32_t              XSR;            /*!< RISAF Extended status register,                                   Address offset: 0x1C04 */
       uint32_t              RESERVED3[126]; /*!< Reserved,                                                                  0x1C08-0x1DFC */
  __IO uint32_t              MKEYR[8];       /*!< RISAF Master key register y,                                               0x1E00-0x1E1C */
       uint32_t              RESERVED4[118]; /*!< Reserved,                                                                  0x1E20-0x1FF4 */
  __IO uint32_t              IPIDR2;         /*!< RISAF Identification register 2,                                  Address offset: 0x1FF8 */
  __IO uint32_t              SIDR2;          /*!< RISAF Size ID register 2,                                         Address offset: 0x1FFC */
} RISAF_TypeDef;

/**
  * @brief RIF Illegal Access Controller (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t IER[6];         /*!< IAC Interrupt enable register x,                                           0x000-0x014 */
       uint32_t RESERVED1[26];  /*!< Reserved,                                                                  0x018-0x07C */
  __IO uint32_t ISR[6];         /*!< IAC Interrupt status register x,                                           0x080-0x094 */
       uint32_t RESERVED2[26];  /*!< Reserved,                                                                  0x098-0x0FC */
  __IO uint32_t ICR[6];         /*!< IAC Interrupt clear register x,                                            0x100-0x114 */
       uint32_t RESERVED3[149]; /*!< Reserved,                                                                  0x118-0x368 */
  __IO uint32_t IISR[6];        /*!< IAC Ilac input status register x,                                          0x36C-0x380 */
       uint32_t RESERVED4[26];  /*!< Reserved,                                                                  0x384-0x3E8 */
  __IO uint32_t HWCFGR2;        /*!< IAC HW configuration register 2,                                 Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;        /*!< IAC HW configuration register 1,                                 Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< IAC Version register,                                            Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< IAC Identification register,                                     Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< IAC Size ID register,                                            Address offset: 0x3FC */
} IAC_TypeDef;

/**
  * @brief RNG
  */

typedef struct
{
  __IO uint32_t CR;             /*!< RNG control register                Address offset: 0x000 */
  __IO uint32_t SR;             /*!< RNG status register                 Address offset: 0x004 */
  __IO uint32_t DR;             /*!< RNG data register                   Address offset: 0x008 */
  __IO uint32_t NSCR;           /*!< RNG noise source control register   Address offset: 0x00C */
  __IO uint32_t HTCR[4];        /*!< RNG health test control register    Address offset: 0x010 */
       uint32_t RESERVED0[244]; /*!< Reserved                            Address offset: 0x020-0x3EC */
  __IO uint32_t HWCFGR;         /*!< RNG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< RNG version register                Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< RNG identification register         Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< RNG size identification register    Address offset: 0x3FC */
} RNG_TypeDef;

/*
* @brief RTC Specific device feature definitions
*/
#define RTC_BKP_NB         128U
#define RTC_TAMP_NB        7U
#define RTC_INT_TAMP_NB    16U

/**
  * @brief Real-Time Clock
  */
typedef struct
{
  __IO uint32_t TR;             /*!< RTC time register                                Address offset: 0x000 */
  __IO uint32_t DR;             /*!< RTC date register                                Address offset: 0x004 */
  __IO uint32_t SSR;            /*!< RTC sub second register                          Address offset: 0x008 */
  __IO uint32_t ICSR;           /*!< RTC initialization control and status register   Address offset: 0x00C */
  __IO uint32_t PRER;           /*!< RTC prescaler register                           Address offset: 0x010 */
  __IO uint32_t WUTR;           /*!< RTC wakeup timer register                        Address offset: 0x014 */
  __IO uint32_t CR;             /*!< RTC control register                             Address offset: 0x018 */
  __IO uint32_t PRIVCR;         /*!< RTC privilege mode control register              Address offset: 0x01C */
  __IO uint32_t SECCFGR;        /*!< RTC secure mode control register                 Address offset: 0x020 */
  __IO uint32_t WPR;            /*!< RTC write protection register                    Address offset: 0x024 */
  __IO uint32_t CALR;           /*!< RTC calibration register                         Address offset: 0x028 */
  __IO uint32_t SHIFTR;         /*!< RTC shift control register                       Address offset: 0x02C */
  __IO uint32_t TSTR;           /*!< RTC timestamp time register                      Address offset: 0x030 */
  __IO uint32_t TSDR;           /*!< RTC timestamp date register                      Address offset: 0x034 */
  __IO uint32_t TSSSR;          /*!< RTC timestamp sub second register                Address offset: 0x038 */
       uint32_t RESERVED0;      /*!< Reserved                                         Address offset: 0x03C */
  __IO uint32_t ALRMAR;         /*!< RTC alarm A register                             Address offset: 0x040 */
  __IO uint32_t ALRMASSR;       /*!< RTC alarm A sub second register                  Address offset: 0x044 */
  __IO uint32_t ALRMBR;         /*!< RTC alarm B register                             Address offset: 0x048 */
  __IO uint32_t ALRMBSSR;       /*!< RTC alarm B sub second register                  Address offset: 0x04C */
  __IO uint32_t SR;             /*!< RTC Status register                              Address offset: 0x050 */
  __IO uint32_t MISR;           /*!< RTC non-secure masked interrupt status register  Address offset: 0x054 */
  __IO uint32_t SMISR;          /*!< RTC secure masked interrupt status register      Address offset: 0x058 */
  __IO uint32_t SCR;            /*!< RTC status Clear register                        Address offset: 0x05C */
  __IO uint32_t CFGR;           /*!< RTC configuration register                       Address offset: 0x060 */
       uint32_t RESERVED1[3];   /*!< Reserved                                         Address offset: 0x064-0x06C */
  __IO uint32_t ALRABINR;       /*!< RTC alarm A binary mode register                 Address offset: 0x070 */
  __IO uint32_t ALRBBINR;       /*!< RTC alarm B binary mode register                 Address offset: 0x074 */
       uint32_t RESERVED2[2];   /*!< Reserved                                         Address offset: 0x078-0x07C */
  __IO uint32_t RCIDCFGR[6];    /*!< RTC Resource x CID configuration register        Address offset: 0x080-0x094 */
       uint32_t RESERVED3[214]; /*!< Reserved                                         Address offset: 0x098-0x3EC */
  __IO uint32_t HWCFGR;         /*!< RTC hardware configuration register              Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< RTC version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< RTC identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< RTC size identification register                 Address offset: 0x3FC */
} RTC_TypeDef;


/**
  * @brief Serial Audio Interface
  */

typedef struct
{
  __IO uint32_t GCR;            /*!< SAI global configuration register, Address offset: 0x000 */
  uint32_t      RESERVED0[16];  /*!< Reserved,                          Address offset: 0x004-0x040 */
  __IO uint32_t PDMCR;          /*!< SAI PDM control register,          Address offset: 0x044 */
  __IO uint32_t PDMDLY;         /*!< SAI PDM delay register,            Address offset: 0x048 */
  uint32_t      RESERVED1[233]; /*!< Reserved,                          Address offset: 0x04C-0x3EC */
  __IO uint32_t HWCFGR;         /*!< SAI HW Configuration register,     Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< SAI Version register,              Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< SAI Identification register,       Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SAI Size Identification register,  Address offset: 0x3FC */
} SAI_TypeDef;

typedef struct
{
  __IO uint32_t CR1;      /*!< SAI block x configuration register 1,     Address offset: 0x04 */
  __IO uint32_t CR2;      /*!< SAI block x configuration register 2,     Address offset: 0x08 */
  __IO uint32_t FRCR;     /*!< SAI block x frame configuration register, Address offset: 0x0C */
  __IO uint32_t SLOTR;    /*!< SAI block x slot register,                Address offset: 0x10 */
  __IO uint32_t IMR;      /*!< SAI block x interrupt mask register,      Address offset: 0x14 */
  __IO uint32_t SR;       /*!< SAI block x status register,              Address offset: 0x18 */
  __IO uint32_t CLRFR;    /*!< SAI block x clear flag register,          Address offset: 0x1C */
  __IO uint32_t DR;       /*!< SAI block x data register,                Address offset: 0x20 */
} SAI_Block_TypeDef;

/**
  * @brief Secure digital input/output Interface
  */

typedef struct
{
  __IO uint32_t POWER;          /*!< SDMMC power control register,               Address offset: 0x00 */
  __IO uint32_t CLKCR;          /*!< SDMMC clock control register,               Address offset: 0x04 */
  __IO uint32_t ARG;            /*!< SDMMC argument register,                    Address offset: 0x08 */
  __IO uint32_t CMD;            /*!< SDMMC command register,                     Address offset: 0x0C */
  __I  uint32_t RESPCMD;        /*!< SDMMC command response register,            Address offset: 0x10 */
  __I  uint32_t RESP1;          /*!< SDMMC response 1 register,                  Address offset: 0x14 */
  __I  uint32_t RESP2;          /*!< SDMMC response 2 register,                  Address offset: 0x18 */
  __I  uint32_t RESP3;          /*!< SDMMC response 3 register,                  Address offset: 0x1C */
  __I  uint32_t RESP4;          /*!< SDMMC response 4 register,                  Address offset: 0x20 */
  __IO uint32_t DTIMER;         /*!< SDMMC data timer register,                  Address offset: 0x24 */
  __IO uint32_t DLEN;           /*!< SDMMC data length register,                 Address offset: 0x28 */
  __IO uint32_t DCTRL;          /*!< SDMMC data control register,                Address offset: 0x2C */
  __I  uint32_t DCOUNT;         /*!< SDMMC data counter register,                Address offset: 0x30 */
  __I  uint32_t STA;            /*!< SDMMC status register,                      Address offset: 0x34 */
  __IO uint32_t ICR;            /*!< SDMMC interrupt clear register,             Address offset: 0x38 */
  __IO uint32_t MASK;           /*!< SDMMC mask register,                        Address offset: 0x3C */
  __IO uint32_t ACKTIME;        /*!< SDMMC Acknowledgement timer register,       Address offset: 0x40 */
  __IO uint32_t FIFOTHR;        /*!< SDMMC data FIFO threshold register          Address offset: 0x44 */
       uint32_t RESERVED0[2];   /*!< Reserved,                                   Address offset: 0x48 - 0x4C */
  __IO uint32_t IDMACTRL;       /*!< SDMMC DMA control register,                 Address offset: 0x50 */
  __IO uint32_t IDMABSIZE;      /*!< SDMMC DMA buffer size register,             Address offset: 0x54 */
  __IO uint32_t IDMABASER;      /*!< SDMMC DMA buffer 0 base address register,   Address offset: 0x58 */
       uint32_t RESERVED1[2];   /*!< Reserved,                                   Address offset: 0x5C - 0x60 */
  __IO uint32_t IDMALAR;        /*!< SDMMC DMA linked list address register,     Address offset: 0x64 */
  __IO uint32_t IDMABAR;        /*!< SDMMC DMA linked list memory base register, Address offset: 0x68 */
       uint32_t RESERVED2[5];   /*!< Reserved,                                   Address offset: 0x6C - 0x7C */
  __IO uint32_t FIFO;           /*!< SDMMC data FIFO register,                   Address offset: 0x80 - 0xBC */
       uint32_t RESERVED3[204]; /*!< Reserved,                                   Address offset: 0xBC - 0x3F0 */
  __IO uint32_t HWCFGR1;        /*!< SDMMC hardware configuration register 1     Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< SDMMC version register,                     Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< SDMMC identification register,              Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SDMMC size ID register,                     Address offset: 0x3FC */
} SDMMC_TypeDef;

/**
  * @brief Software Error Robustness Collector (SERC)
  *        reference document : "SERF (Software Error Robustness Framework)
  *                              user Specification"
  *                             SERF_user_specification1.0.5.pdf
  *                             (Revision 1.0.5 - March 16th, 2020)
  */
typedef struct
{
  __IO uint32_t IER[6];         /*!< SERC Interrupt Enable registers,         Address offset: 0x000-0x014 */
       uint32_t RESERVED1[10];  /*!< Reserved,                                                0x018-0x03C */
  __IO uint32_t ISR[6];         /*!< SERC Interrupt Status registers,         Address offset: 0x040-0x054 */
       uint32_t RESERVED2[10];  /*!< Reserved,                                                0x058-0x07C */
  __IO uint32_t ICR[6];         /*!< SERC Interrupt Clear registers,          Address offset: 0x080-0x094 */
       uint32_t RESERVED3[26];  /*!< Reserved,                                                0x098-0x0FC */
  __IO uint32_t ENABLE;         /*!< SERF Enable register,                    Address offset:       0x100 */
       uint32_t RESERVED4[187]; /*!< Reserved,                                                0x104-0x3EC */
  __IO uint32_t HWCFGR;         /*!< SERF HardWare Configuration register,    Address offset:       0x3F0 */
  __IO uint32_t VERR;           /*!< SERF Version register,                   Address offset:       0x3F4 */
  __IO uint32_t IPIDR;          /*!< SERF IP Identification register,         Address offset:       0x3F8 */
  __IO uint32_t SIDR;           /*!< SERF Size Identification register,       Address offset:       0x3FC */
} SERC_TypeDef;

/**
  * @brief SPDIF-RX Interface
  */

typedef struct
{
  __IO uint32_t CR;             /*!< SPDIFRX control register,                   Address offset: 0x00 */
  __IO uint32_t IMR;            /*!< SPDIFRX interrupt mask register,            Address offset: 0x04 */
  __IO uint32_t SR;             /*!< SPDIFRX status register,                    Address offset: 0x08 */
  __IO uint32_t IFCR;           /*!< SPDIFRX interrupt Flag Clear register,      Address offset: 0x0C */
  __IO uint32_t DR;             /*!< SPDIFRX data input register,                Address offset: 0x10 */
  __IO uint32_t CSR;            /*!< SPDIFRX channel Status register,            Address offset: 0x14 */
  __IO uint32_t DIR;            /*!< SPDIFRX debug Information register,         Address offset: 0x18 */
  uint32_t      RESERVED2[246]; /*!< Reserved,                                   Address offst:  0x1C-0x3F0 */
  __IO uint32_t VERR;           /*!< SPDIFRX version register,                   Address offset: 0x34F */
  __IO uint32_t IPIDR;          /*!< SPDIFRX identification register,            Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< SPDIFRX size ID register,                   Address offset: 0x3FC */
} SPDIFRX_TypeDef;

/**
  * @brief SPI/I2S
  *
  *     Serial peripheral interface and integrated interchip sound
  *     User Spec c7amba_spi2s3 version v2.0  (April 21th, 2020 Draft!!)
  *
  */
typedef struct
{
  __IO uint32_t CR1;              /*!< SPI/I2S Control register 1,                         Address offset: 0x000       */
  __IO uint32_t CR2;              /*!< SPI Control register 2,                             Address offset: 0x004       */
  __IO uint32_t CFG1;             /*!< SPI Configuration register 1,                       Address offset: 0x008       */
  __IO uint32_t CFG2;             /*!< SPI Configuration register 2,                       Address offset: 0x00C       */
  __IO uint32_t IER;              /*!< SPI/I2S Interrupt Enable register,                  Address offset: 0x010       */
  __IO uint32_t SR;               /*!< SPI Status register,                                Address offset: 0x014       */
  __IO uint32_t IFCR;             /*!< SPI/I2S Interrupt/Status Flags Clear register,      Address offset: 0x018       */
  __IO uint32_t AUTOCR;           /*!< SPI/I2S Autonomous Mode Control register,           Address offset: 0x01C       */
  __IO uint32_t TXDR;             /*!< SPI/I2S Transmit data register,                     Address offset: 0x020       */
  uint32_t      RESERVED0[3];     /*!< Reserved,                                           Address offset: 0x024-0x02C */
  __IO uint32_t RXDR;             /*!< SPI/I2S Receive data register,                      Address offset: 0x030       */
  uint32_t      RESERVED1[3];     /*!< Reserved,                                           Adresse offset: 0X034-0x03C */
  __IO uint32_t CRCPOLY;          /*!< SPI CRC Polynomial register,                        Address offset: 0x040       */
  __IO uint32_t TXCRC;            /*!< SPI Transmitter CRC register,                       Address offset: 0x044       */
  __IO uint32_t RXCRC;            /*!< SPI Receiver CRC register,                          Address offset: 0x048       */
  __IO uint32_t UDRDR;            /*!< SPI Underrun data register,                         Address offset: 0x04C       */
  __IO uint32_t I2SCFGR;          /*!< SPI/I2S configuration register,                     Address offset: 0x050       */
  uint32_t      RESERVED2[230];   /*!< Reserved,                                           Adresse offset: 0X054-0x3E8 */
  __IO uint32_t HWCFGR2;          /*!< SPI/I2S hardware configuration register 2,          Address offset: 0x03EC      */
  __IO uint32_t HWCFGR1;          /*!< SPI/I2S hardware configuration register 1,          Address offset: 0x03F0      */
  __IO uint32_t VERR;             /*!< SPI/I2S Version register,                           Address offset: 0x03F4      */
  __IO uint32_t IPIDR;            /*!< SPI/I2S Identification register,                    Address offset: 0x03F8      */
  __IO uint32_t SIDR;             /*!< SPI/I2S Size Identification register,               Address offset: 0x03FC      */
} SPI_TypeDef;

/**
  * @brief STGENC System Timestamp Generator Control
  *        ref. ARM CoreSight SoC-400 Rev.r3p1 TRM [ARM DDI 0480F]
  *             see #3.18 "Timestamp generator register summary"
  */
typedef struct
{
  __IO uint32_t CNTCR;   /*!< STGENC Counter Control Register,              Address offset: 0x000 */
       uint32_t CNTSR;   /*!< STGENC Counter Status Register,               Address offset: 0x004 */
  __IO uint32_t CNTCVL;  /*!< STGENC Current Counter Value Lower Register,  Address offset: 0x008 */
  __IO uint32_t CNTCVU;  /*!< STGENC Current Counter Value Upper Register,  Address offset: 0x00C */
       uint32_t RESERVED1[4];                         /*!< Reserved, Address offsets: 0x010-0x01C */
  __IO uint32_t CNTFID0; /*!< STGENC Base Frequency ID Register,            Address offset: 0x020 */
       uint32_t RESERVED2[1003];                      /*!< Reserved, Address offsets: 0x024-0xFCC */
  __IO uint32_t PIDR4;   /*!< STGENC Peripheral ID4 Register,               Address offset: 0xFD0 */
  __IO uint32_t RESERVED3[3];                         /*!< Reserved, Address offsets: 0xFD4-0xFDC */
  __IO uint32_t PIDR[4]; /*!< STGENC Peripheral ID0-ID3 Registers,          Address offset: 0xFE0 */
  __IO uint32_t CIDR[4]; /*!< STGENC Component ID0-ID3 Registers,           Address offset: 0xFF0 */
} STGENC_TypeDef;

/**
  * @brief STGENR System Timestamp Generator Read
  */
typedef struct
{
  __IO uint32_t CNTCVL;  /*!< STGENR Current Counter Value Lower Register,  Address offset: 0x000 */
  __IO uint32_t CNTCVU;  /*!< STGENR Current Counter Value Upper Register,  Address offset: 0x004 */
       uint32_t RESERVED1[1010];                      /*!< Reserved, Address offsets: 0x008-0xFCC */
  __IO uint32_t PIDR4;   /*!< STGENR Peripheral ID4 Register,               Address offset: 0xFD0 */
  __IO uint32_t RESERVED2[3];                         /*!< Reserved, Address offsets: 0xFD4-0xFDC */
  __IO uint32_t PIDR[4]; /*!< STGENR Peripheral ID0-ID3 Registers,          Address offset: 0xFE0 */
  __IO uint32_t CIDR[4]; /*!< STGENR Component ID0-ID3 Registers,           Address offset: 0xFF0 */
} STGENR_TypeDef;

/**
  * @brief System configuration controller
  */
typedef struct
{
  __IO uint32_t BOOTSR;             /*!< SYSCFG boot pin status register                             Address offset: 0x0000 */
  __IO uint32_t BOOTCR;             /*!< SYSCFG boot pin control register                            Address offset: 0x0004 */
       uint32_t RESERVED377[254];   /*!< Reserved                                                    Address offset: 0x0008-0x03FC */
  __IO uint32_t DLYBSD1CR;          /*!< SYSCFG DLYBSD1 control register                             Address offset: 0x0400 */
  __IO uint32_t DLYBSD1SR;          /*!< SYSCFG DLYBSD1 status register                              Address offset: 0x0404 */
  __IO uint32_t SDMMC1CR;           /*!< SYSCFG SDMMC1 control register                              Address offset: 0x0408 */
  __IO uint32_t SDMMC1ARCR;         /*!< SYSCFG SDMMC1 address remapping control register            Address offset: 0x040C */
       uint32_t RESERVED378[252];   /*!< Reserved                                                    Address offset: 0x0410-0x07FC */
  __IO uint32_t DLYBSD2CR;          /*!< SYSCFG DLYBSD2 control register                             Address offset: 0x0800 */
  __IO uint32_t DLYBSD2SR;          /*!< SYSCFG DLYBSD2 status register                              Address offset: 0x0804 */
  __IO uint32_t SDMMC2CR;           /*!< SYSCFG SDMMC2 control register                              Address offset: 0x0808 */
  __IO uint32_t SDMMC2ARCR;         /*!< SYSCFG SDMMC2 address remapping control register            Address offset: 0x080C */
       uint32_t RESERVED379[252];   /*!< Reserved                                                    Address offset: 0x0810-0x0BFC */
  __IO uint32_t DLYBSD3CR;          /*!< SYSCFG DLYBSD3 control register                             Address offset: 0x0C00 */
  __IO uint32_t DLYBSD3SR;          /*!< SYSCFG DLYBSD3 status register                              Address offset: 0x0C04 */
       uint32_t RESERVED380;        /*!< Reserved                                                    Address offset: 0x0C08 */
  __IO uint32_t SDMMC3ARCR;         /*!< SYSCFG SDMMC3 address remapping control register            Address offset: 0x0C0C */
       uint32_t RESERVED381[252];   /*!< Reserved                                                    Address offset: 0x0C10-0x0FFC */
  __IO uint32_t DLYBOS1CR;          /*!< SYSCFG DLYBOS1 control register                             Address offset: 0x1000 */
  __IO uint32_t DLYBOS1SR;          /*!< SYSCFG DLYBOS1 status register                              Address offset: 0x1004 */
       uint32_t RESERVED382[254];   /*!< Reserved                                                    Address offset: 0x1008-0x13FC */
  __IO uint32_t DLYBOS2CR;          /*!< SYSCFG DLYBOS2 control register                             Address offset: 0x1400 */
  __IO uint32_t DLYBOS2SR;          /*!< SYSCFG DLYBOS2 status register                              Address offset: 0x1404 */
       uint32_t RESERVED383[254];   /*!< Reserved                                                    Address offset: 0x1408-0x17FC */
  __IO uint32_t VDENPURAMCR;        /*!< SYSCFG video decoder and npu RAM control register           Address offset: 0x1800 */
  __IO uint32_t POTTAMPRSTCR;       /*!< SYSCFG potential tamper reset control register              Address offset: 0x1804 */
       uint32_t RESERVED384[254];   /*!< Reserved                                                    Address offset: 0x1808-0x1BFC */
  __IO uint32_t M33SSCR;            /*!< SYSCFG M33SS control register                               Address offset: 0x1C00 */
       uint32_t RESERVED385[255];   /*!< Reserved                                                    Address offset: 0x1C04-0x1FFC */
  __IO uint32_t ICNQPCR1;           /*!< SYSCFG ICN QOS priority control register 1                  Address offset: 0x2000 */
  __IO uint32_t ICNQPCR2;           /*!< SYSCFG ICN QOS priority control register 2                  Address offset: 0x2004 */
  __IO uint32_t ICNEWRCR;           /*!< SYSCFG ICN early write response control register            Address offset: 0x2008 */
  __IO uint32_t ICNCGCR;            /*!< SYSCFG ICN clock gating control register                    Address offset: 0x200C */
  __IO uint32_t ICNGPUBWLCR;        /*!< SYSCFG ICN GPU bandwidth limiter control register           Address offset: 0x2010 */
  __IO uint32_t ICNE2EBWRCR;        /*!< SYSCFG ICN end-to-end bandwidth regulation control register Address offset: 0x2014 */
  __IO uint32_t SAFERSTCR;          /*!< SYSCFG safe reset control register                          Address offset: 0x2018 */
       uint32_t RESERVED386;        /*!< Reserved                                                    Address offset: 0x201C */
  __IO uint32_t ICNETHBWLCR;        /*!< SYSCFG ICN ETH bandwidth limiter control register           Address offset: 0x2020 */
       uint32_t RESERVED387;        /*!< Reserved                                                    Address offset: 0x2024 */
  __IO uint32_t ICNCPU1BWLCR;       /*!< SYSCFG ICN CPU1 bandwidth limiter control register          Address offset: 0x2028 */
  __IO uint32_t ICNLTDCBWLCR;       /*!< SYSCFG ICN LTDC bandwidth limiter control register          Address offset: 0x202C */
  __IO uint32_t ICNDCMIPPBWLCR;     /*!< SYSCFG ICN DCMIPP bandwidth limiter control register        Address offset: 0x2030 */
  __IO uint32_t ICNVDEBWLCR;        /*!< SYSCFG ICN Video Decoder bandwidth limiter control register Address offset: 0x2034 */
       uint32_t RESERVED388[6];     /*!< Reserved                                                    Address offset: 0x2038-0x204C */
  __IO uint32_t HPDMAARCR;          /*!< SYSCFG HPDMA address remapping control register             Address offset: 0x2050 */
       uint32_t RESERVED389[235];   /*!< Reserved                                                    Address offset: 0x2054-0x23FC */
  __IO uint32_t USB2PHY1CR;         /*!< SYSCFG USB2PHY1 control register                            Address offset: 0x2400 */
  __IO uint32_t USB2PHY1BCCR;       /*!< SYSCFG USB2PHY1 battery charging control register           Address offset: 0x2404 */
  __IO uint32_t USB2PHY1BCSR;       /*!< SYSCFG USB2PHY1 battery charging status register            Address offset: 0x2408 */
  __IO uint32_t USB2PHY1TRIM1CR;    /*!< SYSCFG USB2PHY1 trimming 1 control register                 Address offset: 0x240C */
  __IO uint32_t USB2PHY1TRIM2CR;    /*!< SYSCFG USB2PHY1 trimming 2 control register                 Address offset: 0x2410 */
       uint32_t RESERVED390[3];     /*!< Reserved                                                    Address offset: 0x2414-0x241C */
  __IO uint32_t USBHCR;             /*!< SYSCFG USBH control register                                Address offset: 0x2420 */
  __IO uint32_t USBHARCR;           /*!< SYSCFG USBH address remapping control register              Address offset: 0x2424 */
       uint32_t RESERVED391[246];   /*!< Reserved                                                    Address offset: 0x2428-0x27FC */
  __IO uint32_t USB2PHY2CR;         /*!< SYSCFG USB2PHY2 control register                            Address offset: 0x2800 */
       uint32_t RESERVED392;        /*!< Reserved                                                    Address offset: 0x2804 */
  __IO uint32_t USB2PHY2TRIM1CR;    /*!< SYSCFG USB2PHY2 trimming 1 control register                 Address offset: 0x2808 */
  __IO uint32_t USB2PHY2TRIM2CR;    /*!< SYSCFG USB2PHY2 trimming 2 control register                 Address offset: 0x280C */
       uint32_t RESERVED393[5];     /*!< Reserved                                                    Address offset: 0x2810-0x2820 */
  __IO uint32_t OTGARCR;            /*!< SYSCFG OTG address remapping control register               Address offset: 0x2824 */
       uint32_t RESERVED394[246];   /*!< Reserved                                                    Address offset: 0x2828-0x2BFC */
  __IO uint32_t OCTOSPIAMCR;        /*!< SYSCFG OCTOSPI address mapping control register             Address offset: 0x2C00 */
       uint32_t RESERVED395[255];   /*!< Reserved                                                    Address offset: 0x2C04-0x2FFC */
  __IO uint32_t ETH1CR;             /*!< SYSCFG Ethernet1 control register                           Address offset: 0x3000 */
       uint32_t RESERVED396[3];     /*!< Reserved                                                    Address offset: 0x3004-0x300C */
  __IO uint32_t ETH1SR;             /*!< SYSCFG Ethernet1 status register                            Address offset: 0x3010 */
       uint32_t RESERVED397[251];   /*!< Reserved                                                    Address offset: 0x3014-0x33FC */
  __IO uint32_t ETH2CR;             /*!< SYSCFG Ethernet2 configuration register                     Address offset: 0x3400 */
       uint32_t RESERVED398[3];     /*!< Reserved                                                    Address offset: 0x3404-0x340C */
  __IO uint32_t ETH2SR;             /*!< SYSCFG Ethernet2 status register                            Address offset: 0x3410 */
       uint32_t RESERVED399[763];   /*!< Reserved                                                    Address offset: 0x3414-0x3FFC */
  __IO uint32_t VDDIO3CCCR;         /*!< SYSCFG VDDIO3 compensation cell control register            Address offset: 0x4000 */
  __IO uint32_t VDDIO3CCSR;         /*!< SYSCFG VDDIO3 compensation cell status register             Address offset: 0x4004 */
  __IO uint32_t VDDIO4CCCR;         /*!< SYSCFG VDDIO4 compensation cell control register            Address offset: 0x4008 */
  __IO uint32_t VDDIO4CCSR;         /*!< SYSCFG VDDIO4 compensation cell status register             Address offset: 0x400C */
  __IO uint32_t VDDCCCR;            /*!< SYSCFG VDD compensation cell control register               Address offset: 0x4010 */
  __IO uint32_t VDDCCSR;            /*!< SYSCFG VDD compensation cell status register                Address offset: 0x4014 */
  __IO uint32_t VDDIO2CCCR;         /*!< SYSCFG VDDIO2 compensation cell control register            Address offset: 0x4018 */
  __IO uint32_t VDDIO2CCSR;         /*!< SYSCFG VDDIO2 compensation cell status register             Address offset: 0x401C */
  __IO uint32_t VDDIO1CCCR;         /*!< SYSCFG VDDIO1 compensation cell control register            Address offset: 0x4020 */
  __IO uint32_t VDDIO1CCSR;         /*!< SYSCFG VDDIO1 compensation cell status register             Address offset: 0x4024 */
       uint32_t RESERVED400[246];   /*!< Reserved                                                    Address offset: 0x4028-0x43FC */
  __IO uint32_t CBR;                /*!< SYSCFG control timer break register                         Address offset: 0x4400 */
       uint32_t RESERVED401[767];   /*!< Reserved                                                    Address offset: 0x4404-0x4FFC */
  __IO uint32_t DISPLAYCLKCR;       /*!< SYSCFG display clock control register                       Address offset: 0x5000 */
       uint32_t RESERVED402[255];   /*!< Reserved                                                    Address offset: 0x5004-0x53FC */
  __IO uint32_t HDPUSBDBGCR;        /*!< SYSCFG HDP USB debug control register                       Address offset: 0x5400 */
       uint32_t RESERVED403[1023];  /*!< Reserved                                                    Address offset: 0x5404-0x63FC */
  __IO uint32_t IDC;                /*!< SYSCFG device ID register                                   Address offset: 0x6400 */
       uint32_t RESERVED404[1788];  /*!< Reserved                                                    Address offset: 0x6404-0x7FF0 */
  __IO uint32_t VERR;               /*!< SYSCFG version register                                     Address offset: 0x7FF4 */
  __IO uint32_t IPIDR;              /*!< SYSCFG identification register                              Address offset: 0x7FF8 */
  __IO uint32_t SIDR;               /*!< SYSCFG size identification register                         Address offset: 0x7FFC */
} SYSCFG_TypeDef;
/**
  * @brief Tamper and backup registers
  */
typedef struct
{
  __IO uint32_t CR1;           /*!< TAMP control register 1                           Address offset: 0x000 */
  __IO uint32_t CR2;           /*!< TAMP control register 2                           Address offset: 0x004 */
  __IO uint32_t CR3;           /*!< TAMP control register 3                           Address offset: 0x008 */
  __IO uint32_t FLTCR;         /*!< TAMP filter control register                      Address offset: 0x00C */
  __IO uint32_t ATCR1;         /*!< TAMP active tamper control register 1             Address offset: 0x010 */
  __IO uint32_t ATSEEDR;       /*!< TAMP active tamper seed register                  Address offset: 0x014 */
  __IO uint32_t ATOR;          /*!< TAMP active tamper output register                Address offset: 0x018 */
  __IO uint32_t ATCR2;         /*!< TAMP active tamper control register 2             Address offset: 0x01C */
  __IO uint32_t SECCFGR;       /*!< TAMP secure mode register                         Address offset: 0x020 */
  __IO uint32_t PRIVCR;        /*!< TAMP privilege mode control register              Address offset: 0x024 */
       uint32_t RESERVED0;     /*!< Reserved                                          Address offset: 0x028 */
  __IO uint32_t IER;           /*!< TAMP interrupt enable register                    Address offset: 0x02C */
  __IO uint32_t SR;            /*!< TAMP status register                              Address offset: 0x030 */
  __IO uint32_t MISR;          /*!< TAMP non-secure masked interrupt status register  Address offset: 0x034 */
  __IO uint32_t SMISR;         /*!< TAMP secure masked interrupt status register      Address offset: 0x038 */
  __IO uint32_t SCR;           /*!< TAMP status clear register                        Address offset: 0x03C */
  __IO uint32_t COUNT1R;       /*!< TAMP monotonic counter 1 register                 Address offset: 0x040 */
  __IO uint32_t COUNT2R;       /*!< TAMP monotonic counter 2 register                 Address offset: 0x044 */
       uint32_t RESERVED1[2];  /*!< Reserved                                          Address offset: 0x048-0x04C */
  __IO uint32_t OR;            /*!< TAMP option register                              Address offset: 0x050 */
  __IO uint32_t ERCFGR;        /*!< TAMP erase configuration register                 Address offset: 0x054 */
       uint32_t RESERVED2[6];  /*!< Reserved                                          Address offset: 0x058-0x06C */
  __IO uint32_t BKPRIFR1;      /*!< TAMP Backup registers RIF register 1              Address offset: 0x070 */
  __IO uint32_t BKPRIFR2;      /*!< TAMP Backup registers RIF register 2              Address offset: 0x074 */
  __IO uint32_t BKPRIFR3;      /*!< TAMP Backup registers RIF register 3              Address offset: 0x078 */
       uint32_t RESERVED3;     /*!< Reserved                                          Address offset: 0x07C */
  __IO uint32_t RCIDCFGR[3];   /*!< TAMP Resource CID configuration register          Address offset: 0x080-0x088 */
       uint32_t RESERVED4[29]; /*!< Reserved                                          Address offset: 0x08C-0x0FC */
  __IO uint32_t BKP0R;         /*!< TAMP backup register 0                            Address offset: 0x100 */
  __IO uint32_t BKP1R;         /*!< TAMP backup register 1                            Address offset: 0x104 */
  __IO uint32_t BKP2R;         /*!< TAMP backup register 2                            Address offset: 0x108 */
  __IO uint32_t BKP3R;         /*!< TAMP backup register 3                            Address offset: 0x10C */
  __IO uint32_t BKP4R;         /*!< TAMP backup register 4                            Address offset: 0x110 */
  __IO uint32_t BKP5R;         /*!< TAMP backup register 5                            Address offset: 0x114 */
  __IO uint32_t BKP6R;         /*!< TAMP backup register 6                            Address offset: 0x118 */
  __IO uint32_t BKP7R;         /*!< TAMP backup register 7                            Address offset: 0x11C */
  __IO uint32_t BKP8R;         /*!< TAMP backup register 8                            Address offset: 0x120 */
  __IO uint32_t BKP9R;         /*!< TAMP backup register 9                            Address offset: 0x124 */
  __IO uint32_t BKP10R;        /*!< TAMP backup register 10                           Address offset: 0x128 */
  __IO uint32_t BKP11R;        /*!< TAMP backup register 11                           Address offset: 0x12C */
  __IO uint32_t BKP12R;        /*!< TAMP backup register 12                           Address offset: 0x130 */
  __IO uint32_t BKP13R;        /*!< TAMP backup register 13                           Address offset: 0x134 */
  __IO uint32_t BKP14R;        /*!< TAMP backup register 14                           Address offset: 0x138 */
  __IO uint32_t BKP15R;        /*!< TAMP backup register 15                           Address offset: 0x13C */
  __IO uint32_t BKP16R;        /*!< TAMP backup register 16                           Address offset: 0x140 */
  __IO uint32_t BKP17R;        /*!< TAMP backup register 17                           Address offset: 0x144 */
  __IO uint32_t BKP18R;        /*!< TAMP backup register 18                           Address offset: 0x148 */
  __IO uint32_t BKP19R;        /*!< TAMP backup register 19                           Address offset: 0x14C */
  __IO uint32_t BKP20R;        /*!< TAMP backup register 20                           Address offset: 0x150 */
  __IO uint32_t BKP21R;        /*!< TAMP backup register 21                           Address offset: 0x154 */
  __IO uint32_t BKP22R;        /*!< TAMP backup register 22                           Address offset: 0x158 */
  __IO uint32_t BKP23R;        /*!< TAMP backup register 23                           Address offset: 0x15C */
  __IO uint32_t BKP24R;        /*!< TAMP backup register 24                           Address offset: 0x160 */
  __IO uint32_t BKP25R;        /*!< TAMP backup register 25                           Address offset: 0x164 */
  __IO uint32_t BKP26R;        /*!< TAMP backup register 26                           Address offset: 0x168 */
  __IO uint32_t BKP27R;        /*!< TAMP backup register 27                           Address offset: 0x16C */
  __IO uint32_t BKP28R;        /*!< TAMP backup register 28                           Address offset: 0x170 */
  __IO uint32_t BKP29R;        /*!< TAMP backup register 29                           Address offset: 0x174 */
  __IO uint32_t BKP30R;        /*!< TAMP backup register 30                           Address offset: 0x178 */
  __IO uint32_t BKP31R;        /*!< TAMP backup register 31                           Address offset: 0x17C */
  __IO uint32_t BKP32R;        /*!< TAMP backup register 32                           Address offset: 0x180 */
  __IO uint32_t BKP33R;        /*!< TAMP backup register 33                           Address offset: 0x184 */
  __IO uint32_t BKP34R;        /*!< TAMP backup register 34                           Address offset: 0x188 */
  __IO uint32_t BKP35R;        /*!< TAMP backup register 35                           Address offset: 0x18C */
  __IO uint32_t BKP36R;        /*!< TAMP backup register 36                           Address offset: 0x190 */
  __IO uint32_t BKP37R;        /*!< TAMP backup register 37                           Address offset: 0x194 */
  __IO uint32_t BKP38R;        /*!< TAMP backup register 38                           Address offset: 0x198 */
  __IO uint32_t BKP39R;        /*!< TAMP backup register 39                           Address offset: 0x19C */
  __IO uint32_t BKP40R;        /*!< TAMP backup register 40                           Address offset: 0x1A0 */
  __IO uint32_t BKP41R;        /*!< TAMP backup register 41                           Address offset: 0x1A4 */
  __IO uint32_t BKP42R;        /*!< TAMP backup register 42                           Address offset: 0x1A8 */
  __IO uint32_t BKP43R;        /*!< TAMP backup register 43                           Address offset: 0x1AC */
  __IO uint32_t BKP44R;        /*!< TAMP backup register 44                           Address offset: 0x1B0 */
  __IO uint32_t BKP45R;        /*!< TAMP backup register 45                           Address offset: 0x1B4 */
  __IO uint32_t BKP46R;        /*!< TAMP backup register 46                           Address offset: 0x1B8 */
  __IO uint32_t BKP47R;        /*!< TAMP backup register 47                           Address offset: 0x1BC */
  __IO uint32_t BKP48R;        /*!< TAMP backup register 48                           Address offset: 0x1C0 */
  __IO uint32_t BKP49R;        /*!< TAMP backup register 49                           Address offset: 0x1C4 */
  __IO uint32_t BKP50R;        /*!< TAMP backup register 50                           Address offset: 0x1C8 */
  __IO uint32_t BKP51R;        /*!< TAMP backup register 51                           Address offset: 0x1CC */
  __IO uint32_t BKP52R;        /*!< TAMP backup register 52                           Address offset: 0x1D0 */
  __IO uint32_t BKP53R;        /*!< TAMP backup register 53                           Address offset: 0x1D4 */
  __IO uint32_t BKP54R;        /*!< TAMP backup register 54                           Address offset: 0x1D8 */
  __IO uint32_t BKP55R;        /*!< TAMP backup register 55                           Address offset: 0x1DC */
  __IO uint32_t BKP56R;        /*!< TAMP backup register 56                           Address offset: 0x1E0 */
  __IO uint32_t BKP57R;        /*!< TAMP backup register 57                           Address offset: 0x1E4 */
  __IO uint32_t BKP58R;        /*!< TAMP backup register 58                           Address offset: 0x1E8 */
  __IO uint32_t BKP59R;        /*!< TAMP backup register 59                           Address offset: 0x1EC */
  __IO uint32_t BKP60R;        /*!< TAMP backup register 60                           Address offset: 0x1F0 */
  __IO uint32_t BKP61R;        /*!< TAMP backup register 61                           Address offset: 0x1F4 */
  __IO uint32_t BKP62R;        /*!< TAMP backup register 62                           Address offset: 0x1F8 */
  __IO uint32_t BKP63R;        /*!< TAMP backup register 63                           Address offset: 0x1FC */
  __IO uint32_t BKP64R;        /*!< TAMP backup register 64                           Address offset: 0x200 */
  __IO uint32_t BKP65R;        /*!< TAMP backup register 65                           Address offset: 0x204 */
  __IO uint32_t BKP66R;        /*!< TAMP backup register 66                           Address offset: 0x208 */
  __IO uint32_t BKP67R;        /*!< TAMP backup register 67                           Address offset: 0x20C */
  __IO uint32_t BKP68R;        /*!< TAMP backup register 68                           Address offset: 0x210 */
  __IO uint32_t BKP69R;        /*!< TAMP backup register 69                           Address offset: 0x214 */
  __IO uint32_t BKP70R;        /*!< TAMP backup register 70                           Address offset: 0x218 */
  __IO uint32_t BKP71R;        /*!< TAMP backup register 71                           Address offset: 0x21C */
  __IO uint32_t BKP72R;        /*!< TAMP backup register 72                           Address offset: 0x220 */
  __IO uint32_t BKP73R;        /*!< TAMP backup register 73                           Address offset: 0x224 */
  __IO uint32_t BKP74R;        /*!< TAMP backup register 74                           Address offset: 0x228 */
  __IO uint32_t BKP75R;        /*!< TAMP backup register 75                           Address offset: 0x22C */
  __IO uint32_t BKP76R;        /*!< TAMP backup register 76                           Address offset: 0x230 */
  __IO uint32_t BKP77R;        /*!< TAMP backup register 77                           Address offset: 0x234 */
  __IO uint32_t BKP78R;        /*!< TAMP backup register 78                           Address offset: 0x238 */
  __IO uint32_t BKP79R;        /*!< TAMP backup register 79                           Address offset: 0x23C */
  __IO uint32_t BKP80R;        /*!< TAMP backup register 80                           Address offset: 0x240 */
  __IO uint32_t BKP81R;        /*!< TAMP backup register 81                           Address offset: 0x244 */
  __IO uint32_t BKP82R;        /*!< TAMP backup register 82                           Address offset: 0x248 */
  __IO uint32_t BKP83R;        /*!< TAMP backup register 83                           Address offset: 0x24C */
  __IO uint32_t BKP84R;        /*!< TAMP backup register 84                           Address offset: 0x250 */
  __IO uint32_t BKP85R;        /*!< TAMP backup register 85                           Address offset: 0x254 */
  __IO uint32_t BKP86R;        /*!< TAMP backup register 86                           Address offset: 0x258 */
  __IO uint32_t BKP87R;        /*!< TAMP backup register 87                           Address offset: 0x25C */
  __IO uint32_t BKP88R;        /*!< TAMP backup register 88                           Address offset: 0x260 */
  __IO uint32_t BKP89R;        /*!< TAMP backup register 89                           Address offset: 0x264 */
  __IO uint32_t BKP90R;        /*!< TAMP backup register 90                           Address offset: 0x268 */
  __IO uint32_t BKP91R;        /*!< TAMP backup register 91                           Address offset: 0x26C */
  __IO uint32_t BKP92R;        /*!< TAMP backup register 92                           Address offset: 0x270 */
  __IO uint32_t BKP93R;        /*!< TAMP backup register 93                           Address offset: 0x274 */
  __IO uint32_t BKP94R;        /*!< TAMP backup register 94                           Address offset: 0x278 */
  __IO uint32_t BKP95R;        /*!< TAMP backup register 95                           Address offset: 0x27C */
  __IO uint32_t BKP96R;        /*!< TAMP backup register 96                           Address offset: 0x280 */
  __IO uint32_t BKP97R;        /*!< TAMP backup register 97                           Address offset: 0x284 */
  __IO uint32_t BKP98R;        /*!< TAMP backup register 98                           Address offset: 0x288 */
  __IO uint32_t BKP99R;        /*!< TAMP backup register 99                           Address offset: 0x28C */
  __IO uint32_t BKP100R;       /*!< TAMP backup register 100                          Address offset: 0x290 */
  __IO uint32_t BKP101R;       /*!< TAMP backup register 101                          Address offset: 0x294 */
  __IO uint32_t BKP102R;       /*!< TAMP backup register 102                          Address offset: 0x298 */
  __IO uint32_t BKP103R;       /*!< TAMP backup register 103                          Address offset: 0x29C */
  __IO uint32_t BKP104R;       /*!< TAMP backup register 104                          Address offset: 0x2A0 */
  __IO uint32_t BKP105R;       /*!< TAMP backup register 105                          Address offset: 0x2A4 */
  __IO uint32_t BKP106R;       /*!< TAMP backup register 106                          Address offset: 0x2A8 */
  __IO uint32_t BKP107R;       /*!< TAMP backup register 107                          Address offset: 0x2AC */
  __IO uint32_t BKP108R;       /*!< TAMP backup register 108                          Address offset: 0x2B0 */
  __IO uint32_t BKP109R;       /*!< TAMP backup register 109                          Address offset: 0x2B4 */
  __IO uint32_t BKP110R;       /*!< TAMP backup register 110                          Address offset: 0x2B8 */
  __IO uint32_t BKP111R;       /*!< TAMP backup register 111                          Address offset: 0x2BC */
  __IO uint32_t BKP112R;       /*!< TAMP backup register 112                          Address offset: 0x2C0 */
  __IO uint32_t BKP113R;       /*!< TAMP backup register 113                          Address offset: 0x2C4 */
  __IO uint32_t BKP114R;       /*!< TAMP backup register 114                          Address offset: 0x2C8 */
  __IO uint32_t BKP115R;       /*!< TAMP backup register 115                          Address offset: 0x2CC */
  __IO uint32_t BKP116R;       /*!< TAMP backup register 116                          Address offset: 0x2D0 */
  __IO uint32_t BKP117R;       /*!< TAMP backup register 117                          Address offset: 0x2D4 */
  __IO uint32_t BKP118R;       /*!< TAMP backup register 118                          Address offset: 0x2D8 */
  __IO uint32_t BKP119R;       /*!< TAMP backup register 119                          Address offset: 0x2DC */
  __IO uint32_t BKP120R;       /*!< TAMP backup register 120                          Address offset: 0x2E0 */
  __IO uint32_t BKP121R;       /*!< TAMP backup register 121                          Address offset: 0x2E4 */
  __IO uint32_t BKP122R;       /*!< TAMP backup register 122                          Address offset: 0x2E8 */
  __IO uint32_t BKP123R;       /*!< TAMP backup register 123                          Address offset: 0x2EC */
  __IO uint32_t BKP124R;       /*!< TAMP backup register 124                          Address offset: 0x2F0 */
  __IO uint32_t BKP125R;       /*!< TAMP backup register 125                          Address offset: 0x2F4 */
  __IO uint32_t BKP126R;       /*!< TAMP backup register 126                          Address offset: 0x2F8 */
  __IO uint32_t BKP127R;       /*!< TAMP backup register 127                          Address offset: 0x2FC */
       uint32_t RESERVED5[59]; /*!< Reserved                                          Address offset: 0x300-0x3E8 */
  __IO uint32_t HWCFGR2;       /*!< TAMP hardware configuration register 2            Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;       /*!< TAMP hardware configuration register 1            Address offset: 0x3F0 */
  __IO uint32_t VERR;          /*!< TAMP version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;         /*!< TAMP identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;          /*!< TAMP size identification register                 Address offset: 0x3FC */
} TAMP_TypeDef;

/**
  * @brief TIM
  */
typedef struct
{
  __IO uint32_t CR1;             /*!< TIM control register 1                    Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< TIM control register 2                    Address offset: 0x004 */
  __IO uint32_t SMCR;            /*!< TIM slave mode control register           Address offset: 0x008 */
  __IO uint32_t DIER;            /*!< TIM DMA/interrupt enable register         Address offset: 0x00C */
  __IO uint32_t SR;              /*!< TIM status register                       Address offset: 0x010 */
  __IO uint32_t EGR;             /*!< TIM event generation register             Address offset: 0x014 */
  __IO uint32_t CCMR1;           /*!< TIM capture/compare mode register 1       Address offset: 0x018 */
  __IO uint32_t CCMR2;           /*!< TIM capture/compare mode register 2       Address offset: 0x01C */
  __IO uint32_t CCER;            /*!< TIM capture/compare enable register       Address offset: 0x020 */
  __IO uint32_t CNT;             /*!< TIM counter register                      Address offset: 0x024 */
  __IO uint32_t PSC;             /*!< TIM prescaler                             Address offset: 0x028 */
  __IO uint32_t ARR;             /*!< TIM auto-reload register                  Address offset: 0x02C */
  __IO uint32_t RCR;             /*!< TIM repetition counter register           Address offset: 0x030 */
  __IO uint32_t CCR1;            /*!< TIM capture/compare register 1            Address offset: 0x034 */
  __IO uint32_t CCR2;            /*!< TIM capture/compare register 2            Address offset: 0x038 */
  __IO uint32_t CCR3;            /*!< TIM capture/compare register 3            Address offset: 0x03C */
  __IO uint32_t CCR4;            /*!< TIM capture/compare register 4            Address offset: 0x040 */
  __IO uint32_t BDTR;            /*!< TIM break and dead-time register          Address offset: 0x044 */
  __IO uint32_t CCR5;            /*!< TIM capture/compare register 5            Address offset: 0x048 */
  __IO uint32_t CCR6;            /*!< TIM capture/compare register 6            Address offset: 0x04C */
  __IO uint32_t CCMR3;           /*!< TIM capture/compare mode register 3       Address offset: 0x050 */
  __IO uint32_t DTR2;            /*!< TIM timer deadtime register 2             Address offset: 0x054 */
  __IO uint32_t ECR;             /*!< TIM timer encoder control register        Address offset: 0x058 */
  __IO uint32_t TISEL;           /*!< TIM timer Input Selection register        Address offset: 0x05C */
  __IO uint32_t AF1;             /*!< TIM alternate function option register 1  Address offset: 0x060 */
  __IO uint32_t AF2;             /*!< TIM alternate function option register 2  Address offset: 0x064 */
       uint32_t RESERVED0[221];  /*!< Reserved                                  Address offset: 0x068-0x3D8 */
  __IO uint32_t DCR;             /*!< TIM DMA control register                  Address offset: 0x3DC */
  __IO uint32_t DMAR;            /*!< TIM DMA address for full transfer         Address offset: 0x3E0 */
       uint32_t RESERVED1[2];    /*!< Reserved                                  Address offset: 0x3E4-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< TIM hardware configuration 2 register     Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< TIM hardware configuration 1 register     Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< TIM version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< TIM IP identification register            Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< TIM size ID register                      Address offset: 0x3FC */
} TIM_TypeDef;

/**
  * @brief Universal Synchronous Asynchronous Receiver Transmitter
  */
/* c7amba_sci3_v3.0 */
typedef struct
{
  __IO uint32_t CR1;             /*!< USART Control register 1                    Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< USART Control register 2                    Address offset: 0x004 */
  __IO uint32_t CR3;             /*!< USART Control register 3                    Address offset: 0x008 */
  __IO uint32_t BRR;             /*!< USART Baud rate register                    Address offset: 0x00C */
  __IO uint32_t GTPR;            /*!< USART Guard time and prescaler register     Address offset: 0x010 */
  __IO uint32_t RTOR;            /*!< USART Receiver timeout register             Address offset: 0x014 */
  __IO uint32_t RQR;             /*!< USART Request register                      Address offset: 0x018 */
  __IO uint32_t ISR;             /*!< USART Interrupt and status register         Address offset: 0x01C */
  __IO uint32_t ICR;             /*!< USART Interrupt flag Clear register         Address offset: 0x020 */
  __IO uint32_t RDR;             /*!< USART Receive Data register                 Address offset: 0x024 */
  __IO uint32_t TDR;             /*!< USART Transmit Data register                Address offset: 0x028 */
  __IO uint32_t PRESC;           /*!< USART Prescaler register                    Address offset: 0x02C */
  __IO uint32_t AUTOCR;          /*!< USART Autonomous mode Control register      Address offset: 0x030 */
       uint32_t RESERVED0[238];  /*!< Reserved                                    Address offset: 0x034-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< USART Hardware Configuration register 2     Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< USART Hardware Configuration register 1     Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< USART version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< USART Identification register               Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< USART Size Identification register          Address offset: 0x3FC */
} USART_TypeDef;

/**
  * @brief USB_OTG_Core_register
  */
typedef struct
{
  __IO uint32_t GOTGCTL;             /*!< USB_OTG Control and Status Register,       Address offset: 000h */
  __IO uint32_t GOTGINT;             /*!< USB_OTG Interrupt Register,                Address offset: 004h */
  __IO uint32_t GAHBCFG;             /*!< Core AHB Configuration Register,           Address offset: 008h */
  __IO uint32_t GUSBCFG;             /*!< Core USB Configuration Register,           Address offset: 00Ch */
  __IO uint32_t GRSTCTL;             /*!< Core Reset Register,                       Address offset: 010h */
  __IO uint32_t GINTSTS;             /*!< Core Interrupt Register,                   Address offset: 014h */
  __IO uint32_t GINTMSK;             /*!< Core Interrupt Mask Register,              Address offset: 018h */
  __IO uint32_t GRXSTSR;             /*!< Receive Sts Q Read Register,               Address offset: 01Ch */
  __IO uint32_t GRXSTSP;             /*!< Receive Sts Q Read & POP Register,         Address offset: 020h */
  __IO uint32_t GRXFSIZ;             /*!< Receive FIFO Size Register,                Address offset: 024h */
  __IO uint32_t DIEPTXF0_HNPTXFSIZ;  /*!< EP0 / Non Periodic Tx FIFO Size Register,  Address offset: 028h */
  __IO uint32_t HNPTXSTS;            /*!< Non Periodic Tx FIFO/Queue Sts reg,        Address offset: 02Ch */
  __IO uint32_t Reserved0[2];        /*!< Reserved,                                  Address offset: 030h */
  __IO uint32_t GCCFG;               /*!< General Purpose IO Register,               Address offset: 038h */
  __IO uint32_t CID;                 /*!< User ID Register,                          Address offset: 03Ch */
       uint32_t RESERVED1[5];        /*!< Reserved,                                  Address offset: 040h-050h */
  __IO uint32_t GLPMCFG;             /*!< LPM Register,                              Address offset: 054h */
  __IO uint32_t Reserved2[42];       /*!< Reserved,                                  Address offset: 058h-0FCh */
  __IO uint32_t HPTXFSIZ;            /*!< Host Periodic Tx FIFO Size Reg,            Address offset: 100h */
  __IO uint32_t DIEPTXF[0x08];       /*!< dev Periodic Transmit FIFO                 Address offset: 104h */
} USB_OTG_GlobalTypeDef;

/**
  * @brief USB_OTG_device_Registers
  */
typedef struct
{
  __IO uint32_t DCFG;                /*!< dev Configuration Register,   Address offset: 800h */
  __IO uint32_t DCTL;                /*!< dev Control Register,         Address offset: 804h */
  __IO uint32_t DSTS;                /*!< dev Status Register (RO),     Address offset: 808h */
       uint32_t Reserved23;          /*!< Reserved,                     Address offset: 80Ch */
  __IO uint32_t DIEPMSK;             /*!< dev IN Endpoint Mask,         Address offset: 810h */
  __IO uint32_t DOEPMSK;             /*!< dev OUT Endpoint Mask,        Address offset: 814h */
  __IO uint32_t DAINT;               /*!< dev All Endpoints Itr Reg,    Address offset: 818h */
  __IO uint32_t DAINTMSK;            /*!< dev All Endpoints Itr Mask,   Address offset: 81Ch */
       uint32_t RESERVED24[4];       /*!< Reserved,                     Address offset: 820-82Ch */
  __IO uint32_t DTHRCTL;             /*!< dev threshold,                Address offset: 830h */
  __IO uint32_t DIEPEMPMSK;          /*!< dev empty msk,                Address offset: 834h */
  __IO uint32_t DEACHINT;            /*!< dedicated EP interrupt,       Address offset: 838h */
  __IO uint32_t DEACHMSK;            /*!< dedicated EP msk,             Address offset: 83Ch */
       uint32_t Reserved25;               /*!< dedicated EP mask,            Address offset: 840h */
  __IO uint32_t DINEP1MSK;           /*!< dedicated EP mask,            Address offset: 844h */
       uint32_t Reserved26[15];          /*!< Reserved,                     Address offset: 844-87Ch */
  __IO uint32_t DOUTEP1MSK;          /*!< dedicated EP msk,             Address offset: 884h */
} USB_OTG_DeviceTypeDef;

/**
  * @brief USB_OTG_IN_Endpoint-Specific_Register
  */
typedef struct
{
  __IO uint32_t DIEPCTL;             /*!< dev IN Endpoint Control Register,          Address offset: 900h + (ep_num * 20h) + 00h */
  __IO uint32_t Reserved04;          /*!< Reserved,                                  Address offset: 900h + (ep_num * 20h) + 04h */
  __IO uint32_t DIEPINT;             /*!< dev IN Endpoint Itr Register,              Address offset: 900h + (ep_num * 20h) + 08h */
  __IO uint32_t Reserved0C;          /*!< Reserved,                                  Address offset: 900h + (ep_num * 20h) + 0Ch */
  __IO uint32_t DIEPTSIZ;            /*!< IN Endpoint Txfer Size Register,           Address offset: 900h + (ep_num * 20h) + 10h */
  __IO uint32_t DIEPDMA;             /*!< IN Endpoint DMA Address Register,          Address offset: 900h + (ep_num * 20h) + 14h */
  __IO uint32_t DTXFSTS;             /*!< IN Endpoint Tx FIFO Status Register,       Address offset: 900h + (ep_num * 20h) + 18h */
  __IO uint32_t Reserved18;          /*!< Reserved,                                  Address offset: 900h + (ep_num * 20h) + 1Ch */
} USB_OTG_INEndpointTypeDef;

/**
  * @brief USB_OTG_OUT_Endpoint-Specific_Registers
  */
typedef struct
{
  __IO uint32_t DOEPCTL;             /*!< dev OUT Endpoint Control Register,         Address offset: B00h + (ep_num * 20h) + 00h */
  __IO uint32_t Reserved04;          /*!< Reserved,                                  Address offset: B00h + (ep_num * 20h) + 04h */
  __IO uint32_t DOEPINT;             /*!< dev OUT Endpoint Itr Register,             Address offset: B00h + (ep_num * 20h) + 08h */
  __IO uint32_t Reserved0C;          /*!< Reserved,                                  Address offset: B00h + (ep_num * 20h) + 0Ch */
  __IO uint32_t DOEPTSIZ;            /*!< dev OUT Endpoint Txfer Size Register,      Address offset: B00h + (ep_num * 20h) + 10h */
  __IO uint32_t DOEPDMA;             /*!< dev OUT Endpoint DMA Address Register,     Address offset: B00h + (ep_num * 20h) + 14h */
  __IO uint32_t Reserved18[2];       /*!< Reserved,                                  Address offset: B00h + (ep_num * 20h) + 18h */
} USB_OTG_OUTEndpointTypeDef;

/**
  * @brief USB_OTG_Host_Mode_Register_Structures
  */
typedef struct
{
  __IO uint32_t HCFG;                 /*!< Host Configuration Register,                Address offset: 400h */
  __IO uint32_t HFIR;                 /*!< Host Frame Interval Register,               Address offset: 404h */
  __IO uint32_t HFNUM;                /*!< Host Frame Nbr/Frame Remaining,             Address offset: 408h */
       uint32_t Reserved4;            /*!< Reserved,                                   Address offset: 40Ch */
  __IO uint32_t HPTXSTS;              /*!< Host Periodic Tx FIFO/ Queue Status,        Address offset: 410h */
  __IO uint32_t HAINT;                /*!< Host All Channels Interrupt Register,       Address offset: 414h */
  __IO uint32_t HAINTMSK;             /*!< Host All Channels Interrupt Mask,           Address offset: 418h */
       uint32_t RESERVED5[9];         /*!< Reserved,                                   Address offset: 41C-43Ch */
  __IO uint32_t HPRT;                 /*!< OTG host port control and status register,  Address offset: 440h */
} USB_OTG_HostTypeDef;

/**
  * @brief USB_OTG_Host_Channel_Specific_Registers
  */
typedef struct
{
  __IO uint32_t HCCHAR;               /*!< Host Channel Characteristics Register,    Address offset: 500h */
  __IO uint32_t HCSPLT;               /*!< Host Channel Split Control Register,      Address offset: 504h */
  __IO uint32_t HCINT;                /*!< Host Channel Interrupt Register,          Address offset: 508h */
  __IO uint32_t HCINTMSK;             /*!< Host Channel Interrupt Mask Register,     Address offset: 50Ch */
  __IO uint32_t HCTSIZ;               /*!< Host Channel Transfer Size Register,      Address offset: 510h */
  __IO uint32_t HCDMA;                /*!< Host Channel DMA Address Register,        Address offset: 514h */
       uint32_t Reserved[2];          /*!< Reserved,                                 Address offset: 518h */
} USB_OTG_HostChannelTypeDef;

/**
  * @brief VREFBUF
  */
typedef struct
{
  __IO uint32_t CSR;         /*!< VREFBUF control and status register,         Address offset: 0x00 */
  __IO uint32_t CCR;         /*!< VREFBUF calibration and control register,    Address offset: 0x04 */
} VREFBUF_TypeDef;

/*
 * @brief Window Watchdog (WWDG)
 */
typedef struct
{
  __IO uint32_t CR;              /*!< Control register                     Address offset: 0x000 */
  __IO uint32_t CFR;             /*!< Configuration register               Address offset: 0x004 */
  __IO uint32_t SR;              /*!< Status register                      Address offset: 0x008 */
       uint32_t RESERVED0[249];  /*!< Reserved                             Address offset: 0x00C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< WWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< WWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< WWDG ID register                     Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< WWDG size ID register                Address offset: 0x3FC */
} WWDG_TypeDef;

/**
  * @}
  */

/**
 * @}
 */

/** @addtogroup Peripheral_declaration
  * @{
  */
/**
 * @brief stm32mp2 base addresses Definitions :
 */
#define PERIPH_SIZE                         (0x10000000UL)  /*!< Size of : AHB/APB Peripherals                                  */

#define SRAMS_SIZE                          (0x10000000UL)  /*!< Size of : SRAMs memory region                                  */

#define SYSRAM_SIZE                         ( 256UL *1024UL) /*!< Unit is Byte                                                   */
#define SRAM1_SIZE                          ( 64UL *1024UL) /*!< Unit is Byte                                                   */
#define NPURAM_SIZE                         ( 128UL *1024UL) /*!< Unit is Byte                                                   */
#define RETRAM_SIZE                         ( 128UL *1024UL) /*!< Unit is Byte                                                   */
#define BKP_SRAM_SIZE                       (   8UL *1024UL) /*!< Unit is Byte                                                   */
#define CAN_SRAM_SIZE                       (  10UL *1024UL) /*!< Unit is Byte                                                   */
#define DDR_SIZE                            (4096UL * 1024UL * 1024UL) /*!< Unit is Byte                                       */

#define MPU_AXI_BUS_MEMORY_BASE             (0x50000000UL) /*!< Base address of : AXI Bus                                       */

#define OSPI1_MEM_BASE                      (MPU_AXI_BUS_MEMORY_BASE + 0x10000000UL) /*!< Base address of : OSPI1 memory  accessible over AXI    */
#define FMC_NOR_MEM_BASE                    (MPU_AXI_BUS_MEMORY_BASE + 0x20000000UL) /*!< Base address of : FMC NOR memories  accessible over AXI */
#define DDR_MEM_BASE                        (MPU_AXI_BUS_MEMORY_BASE + 0x30000000UL) /*!< Base address of : DDR (DRAM) over AXI                   */

/*!< Peripherals */
#define PERIPH_BASE                         (0x40000000UL)  /*!< Base address of : AHB/APB Peripherals                          */

/*!< Memories */
#define SRAMS_BASE                          (0x20000000UL)  /*!< Base address of : SRAMs region                                 */

#define SYSRAM_BASE                         (SRAMS_BASE + 0x00000000UL)     /*!< Base address of : System RAM accessible over AXI         */
#define RETRAM_BASE                         (SRAMS_BASE + 0x00040000UL)     /*!< Base address of : Retention RAM                          */
#define SRAM1_BASE                          (SRAMS_BASE + 0x00060000UL)     /*!< Base address of : static data RAM1                       */
#define NPURAM_BASE                         (SRAMS_BASE + 0x000A0000UL)     /*!< Base address of : VIDEO ENCODE/DECODE static RAM         */
#define BKP_SRAM_BASE                       (0x42000000UL)                  /*!< Base address of : backup static  RAM                     */
#define CAN_SRAM_BASE                       (0x40310000UL)                  /*!< Base address of : CAN static  RAM                        */

/*!< Peripheral buses */
#define APB1_PERIPH_BASE                    (PERIPH_BASE + 0x00000000UL)
#define APB2_PERIPH_BASE                    (PERIPH_BASE + 0x00200000UL)
#define AHB2_PERIPH_BASE                    (PERIPH_BASE + 0x00400000UL)
#define AHB3_PERIPH_BASE                    (PERIPH_BASE + 0x02000000UL)
#define APB3_PERIPH_BASE                    (PERIPH_BASE + 0x04000000UL)
#define AHB4_PERIPH_BASE                    (PERIPH_BASE + 0x04200000UL)
#define SMART_RUN_APB_PERIPH_BASE           (PERIPH_BASE + 0x06000000UL)
#define SMART_RUN_AHB_PERIPH_BASE           (PERIPH_BASE + 0x06200000UL)
#define APB4_PERIPH_BASE                    (PERIPH_BASE + 0x08000000UL)
#define AHB5_PERIPH_BASE                    (PERIPH_BASE + 0x08200000UL)
#define APB_DEBUG_PERIPH_BASE               (PERIPH_BASE + 0x0A000000UL)
#define AHB6_PERIPH_BASE                    (PERIPH_BASE + 0x0B000000UL)

/*!< APB1 peripherals */
#define TIM2_BASE                           (APB1_PERIPH_BASE + 0x000000UL)
#define TIM3_BASE                           (APB1_PERIPH_BASE + 0x010000UL)
#define TIM4_BASE                           (APB1_PERIPH_BASE + 0x020000UL)
#define TIM5_BASE                           (APB1_PERIPH_BASE + 0x030000UL)
#define TIM6_BASE                           (APB1_PERIPH_BASE + 0x040000UL)
#define TIM7_BASE                           (APB1_PERIPH_BASE + 0x050000UL)
#define TIM12_BASE                          (APB1_PERIPH_BASE + 0x060000UL)
#define TIM13_BASE                          (APB1_PERIPH_BASE + 0x070000UL)
#define TIM14_BASE                          (APB1_PERIPH_BASE + 0x080000UL)
#define LPTIM1_BASE                         (APB1_PERIPH_BASE + 0x090000UL)
#define LPTIM2_BASE                         (APB1_PERIPH_BASE + 0x0A0000UL)
#define SPI2_BASE                           (APB1_PERIPH_BASE + 0x0B0000UL)
#define SPI3_BASE                           (APB1_PERIPH_BASE + 0x0C0000UL)
#define SPDIFRX_BASE                        (APB1_PERIPH_BASE + 0x0D0000UL)
#define USART2_BASE                         (APB1_PERIPH_BASE + 0x0E0000UL)
#define USART3_BASE                         (APB1_PERIPH_BASE + 0x0F0000UL)
#define UART4_BASE                          (APB1_PERIPH_BASE + 0x100000UL)
#define UART5_BASE                          (APB1_PERIPH_BASE + 0x110000UL)
#define I2C1_BASE                           (APB1_PERIPH_BASE + 0x170000UL)
#define I2C2_BASE                           (APB1_PERIPH_BASE + 0x180000UL)
#define I3C1_BASE                           (APB1_PERIPH_BASE + 0x190000UL)
#define I3C2_BASE                           (APB1_PERIPH_BASE + 0x1A0000UL)
#define TIM10_BASE                          (APB1_PERIPH_BASE + 0x1C0000UL)
#define TIM11_BASE                          (APB1_PERIPH_BASE + 0x1D0000UL)

/*!< APB2 peripherals */
#define TIM1_BASE                           (APB2_PERIPH_BASE + 0x000000UL)
#define TIM8_BASE                           (APB2_PERIPH_BASE + 0x010000UL)
#define USART6_BASE                         (APB2_PERIPH_BASE + 0x020000UL)
#define SPI1_BASE                           (APB2_PERIPH_BASE + 0x030000UL)
#define SPI4_BASE                           (APB2_PERIPH_BASE + 0x040000UL)
#define TIM15_BASE                          (APB2_PERIPH_BASE + 0x050000UL)
#define TIM16_BASE                          (APB2_PERIPH_BASE + 0x060000UL)
#define TIM17_BASE                          (APB2_PERIPH_BASE + 0x070000UL)
#define SPI5_BASE                           (APB2_PERIPH_BASE + 0x080000UL)
#define SAI1_BASE                           (APB2_PERIPH_BASE + 0x090000UL)
#define SAI1_Block_A_BASE                   (SAI1_BASE + 0x004UL)
#define SAI1_Block_B_BASE                   (SAI1_BASE + 0x024UL)
#define SAI2_BASE                           (APB2_PERIPH_BASE + 0x0A0000UL)
#define SAI2_Block_A_BASE                   (SAI2_BASE + 0x004UL)
#define SAI2_Block_B_BASE                   (SAI2_BASE + 0x024UL)
#define SAI3_BASE                           (APB2_PERIPH_BASE + 0x0B0000UL)
#define SAI3_Block_A_BASE                   (SAI3_BASE + 0x004UL)
#define SAI3_Block_B_BASE                   (SAI3_BASE + 0x024UL)
#define CANSRAM_BASE                        (APB2_PERIPH_BASE + 0x110000UL)
#define USART1_BASE                         (APB2_PERIPH_BASE + 0x130000UL)
#define SAI4_BASE                           (APB2_PERIPH_BASE + 0x140000UL)
#define SAI4_Block_A_BASE                   (SAI4_BASE + 0x004UL)
#define SAI4_Block_B_BASE                   (SAI4_BASE + 0x024UL)
#define UART7_BASE                          (APB2_PERIPH_BASE + 0x170000UL)

/*!< AHB2 peripherals */
#define HPDMA1_BASE                         (AHB2_PERIPH_BASE + 0x000000UL)
#define HPDMA2_BASE                         (AHB2_PERIPH_BASE + 0x010000UL)
#define HPDMA3_BASE                         (AHB2_PERIPH_BASE + 0x020000UL)
#define OCTOSPI1_BASE                       (AHB2_PERIPH_BASE + 0x030000UL)
#define IPCC1_BASE                          (AHB2_PERIPH_BASE + 0x090000UL)
#define IPCC1_C1_BASE                       (IPCC1_BASE)
#define IPCC1_C2_BASE                       (IPCC1_BASE + 0x10UL)
#define DCMI_BASE                           (AHB2_PERIPH_BASE + 0x0A0000UL)
#define PSSI_BASE                           (AHB2_PERIPH_BASE + 0x0B0000UL)
#define CRC_BASE                            (AHB2_PERIPH_BASE + 0x0C0000UL)
#define MDF1_BASE                           (AHB2_PERIPH_BASE + 0x0D0000UL)
#define MDF1_Filter0_BASE                   (MDF1_BASE + 0x80UL)
#define MDF1_Filter1_BASE                   (MDF1_BASE + 0x100UL)
#define MDF1_Filter2_BASE                   (MDF1_BASE + 0x180UL)
#define MDF1_Filter3_BASE                   (MDF1_BASE + 0x200UL)
#define MDF1_Filter4_BASE                   (MDF1_BASE + 0x280UL)
#define MDF1_Filter5_BASE                   (MDF1_BASE + 0x300UL)
#define MDF1_Filter6_BASE                   (MDF1_BASE + 0x380UL)
#define MDF1_Filter7_BASE                   (MDF1_BASE + 0x400UL)
#define ADC1_BASE                           (AHB2_PERIPH_BASE + 0x0E0000UL)
#define ADC2_BASE                           (AHB2_PERIPH_BASE + 0x0F0000UL)

#define HPDMA1_Channel0_BASE                (HPDMA1_BASE + 0x0050UL)
#define HPDMA1_Channel1_BASE                (HPDMA1_BASE + 0x00D0UL)
#define HPDMA1_Channel2_BASE                (HPDMA1_BASE + 0x0150UL)
#define HPDMA1_Channel3_BASE                (HPDMA1_BASE + 0x01D0UL)
#define HPDMA1_Channel4_BASE                (HPDMA1_BASE + 0x0250UL)
#define HPDMA1_Channel5_BASE                (HPDMA1_BASE + 0x02D0UL)
#define HPDMA1_Channel6_BASE                (HPDMA1_BASE + 0x0350UL)
#define HPDMA1_Channel7_BASE                (HPDMA1_BASE + 0x03D0UL)
#define HPDMA1_Channel8_BASE                (HPDMA1_BASE + 0x0450UL)
#define HPDMA1_Channel9_BASE                (HPDMA1_BASE + 0x04D0UL)
#define HPDMA1_Channel10_BASE               (HPDMA1_BASE + 0x0550UL)
#define HPDMA1_Channel11_BASE               (HPDMA1_BASE + 0x05D0UL)
#define HPDMA1_Channel12_BASE               (HPDMA1_BASE + 0x0650UL)
#define HPDMA1_Channel13_BASE               (HPDMA1_BASE + 0x06D0UL)
#define HPDMA1_Channel14_BASE               (HPDMA1_BASE + 0x0750UL)
#define HPDMA1_Channel15_BASE               (HPDMA1_BASE + 0x07D0UL)

#define HPDMA2_Channel0_BASE                (HPDMA2_BASE + 0x0050UL)
#define HPDMA2_Channel1_BASE                (HPDMA2_BASE + 0x00D0UL)
#define HPDMA2_Channel2_BASE                (HPDMA2_BASE + 0x0150UL)
#define HPDMA2_Channel3_BASE                (HPDMA2_BASE + 0x01D0UL)
#define HPDMA2_Channel4_BASE                (HPDMA2_BASE + 0x0250UL)
#define HPDMA2_Channel5_BASE                (HPDMA2_BASE + 0x02D0UL)
#define HPDMA2_Channel6_BASE                (HPDMA2_BASE + 0x0350UL)
#define HPDMA2_Channel7_BASE                (HPDMA2_BASE + 0x03D0UL)
#define HPDMA2_Channel8_BASE                (HPDMA2_BASE + 0x0450UL)
#define HPDMA2_Channel9_BASE                (HPDMA2_BASE + 0x04D0UL)
#define HPDMA2_Channel10_BASE               (HPDMA2_BASE + 0x0550UL)
#define HPDMA2_Channel11_BASE               (HPDMA2_BASE + 0x05D0UL)
#define HPDMA2_Channel12_BASE               (HPDMA2_BASE + 0x0650UL)
#define HPDMA2_Channel13_BASE               (HPDMA2_BASE + 0x06D0UL)
#define HPDMA2_Channel14_BASE               (HPDMA2_BASE + 0x0750UL)
#define HPDMA2_Channel15_BASE               (HPDMA2_BASE + 0x07D0UL)

#define HPDMA3_Channel0_BASE                (HPDMA3_BASE + 0x0050UL)
#define HPDMA3_Channel1_BASE                (HPDMA3_BASE + 0x00D0UL)
#define HPDMA3_Channel2_BASE                (HPDMA3_BASE + 0x0150UL)
#define HPDMA3_Channel3_BASE                (HPDMA3_BASE + 0x01D0UL)
#define HPDMA3_Channel4_BASE                (HPDMA3_BASE + 0x0250UL)
#define HPDMA3_Channel5_BASE                (HPDMA3_BASE + 0x02D0UL)
#define HPDMA3_Channel6_BASE                (HPDMA3_BASE + 0x0350UL)
#define HPDMA3_Channel7_BASE                (HPDMA3_BASE + 0x03D0UL)
#define HPDMA3_Channel8_BASE                (HPDMA3_BASE + 0x0450UL)
#define HPDMA3_Channel9_BASE                (HPDMA3_BASE + 0x04D0UL)
#define HPDMA3_Channel10_BASE               (HPDMA3_BASE + 0x0550UL)
#define HPDMA3_Channel11_BASE               (HPDMA3_BASE + 0x05D0UL)
#define HPDMA3_Channel12_BASE               (HPDMA3_BASE + 0x0650UL)
#define HPDMA3_Channel13_BASE               (HPDMA3_BASE + 0x06D0UL)
#define HPDMA3_Channel14_BASE               (HPDMA3_BASE + 0x0750UL)
#define HPDMA3_Channel15_BASE               (HPDMA3_BASE + 0x07D0UL)

/*!< AHB3 peripherals */
#define HASH2_BASE                          (AHB3_PERIPH_BASE + 0x010000UL)
#define HASH2_DIGEST_BASE                   (HASH2_BASE + 0x310UL)
#define RNG2_BASE                           (AHB3_PERIPH_BASE + 0x020000UL)
#define RAMCFG_BASE                         (AHB3_PERIPH_BASE + 0x070000UL)
#define RAMCFG_SYSRAM_BASE                  (RAMCFG_BASE)
#define RAMCFG_SRAM1_BASE                   (RAMCFG_BASE + 0x000080UL)
#define RAMCFG_SRAM2_BASE                   (RAMCFG_BASE + 0x000100UL)
#define RAMCFG_RETRAM_BASE                  (RAMCFG_BASE + 0x000180UL)
#define RAMCFG_BKPSRAM_BASE                 (RAMCFG_BASE + 0x000380UL)
#define RIFSC_BASE                          (AHB3_PERIPH_BASE + 0x080000UL)
#define RISC_BASE                           (RIFSC_BASE)
#define RIMC_BASE                           (RIFSC_BASE + 0xC00UL)
#define RIFSC_ID_BASE                       (RIFSC_BASE + 0xFB0UL)
#define IAC_BASE                            (AHB3_PERIPH_BASE + 0x090000UL)
#define RISAF1_BASE                         (AHB3_PERIPH_BASE + 0x0A0000UL)
#define RISAF2_BASE                         (AHB3_PERIPH_BASE + 0x0B0000UL)
#define RISAF4_BASE                         (AHB3_PERIPH_BASE + 0x0D0000UL)
#define RISAB1_BASE                         (AHB3_PERIPH_BASE + 0x0F0000UL)
#define RISAB2_BASE                         (AHB3_PERIPH_BASE + 0x100000UL)
#define RISAB3_BASE                         (AHB3_PERIPH_BASE + 0x110000UL)
#define RISAB5_BASE                         (AHB3_PERIPH_BASE + 0x130000UL)
#define RISAB6_BASE                         (AHB3_PERIPH_BASE + 0x140000UL)

/*!< APB3 peripherals */
#define BSEC_BASE                           (APB3_PERIPH_BASE + 0x000000UL)
#define IWDG1_BASE                          (APB3_PERIPH_BASE + 0x010000UL)
#define IWDG2_BASE                          (APB3_PERIPH_BASE + 0x020000UL)
#define IWDG3_BASE                          (APB3_PERIPH_BASE + 0x030000UL)
#define IWDG4_BASE                          (APB3_PERIPH_BASE + 0x040000UL)
#define WWDG1_BASE                          (APB3_PERIPH_BASE + 0x050000UL)
#define VREFBUF_BASE                        (APB3_PERIPH_BASE + 0x060000UL)
#define DTS_BASE                            (APB3_PERIPH_BASE + 0x070000UL)
#define SERC_BASE                           (APB3_PERIPH_BASE + 0x080000UL)
#define HDP_BASE                            (APB3_PERIPH_BASE + 0x090000UL)
#define DBGMCU_BASE                         (APB3_PERIPH_BASE + 0x0A0000UL)
/*!< AHB4 peripherals */
#define RCC_BASE                            (AHB4_PERIPH_BASE + 0x00000UL)
#define PWR_BASE                            (AHB4_PERIPH_BASE + 0x10000UL)
#define EXTI1_BASE                          (AHB4_PERIPH_BASE + 0x20000UL)
#define EXTI1_C1_BASE                       (EXTI1_BASE + 0x80UL)
#define EXTI1_C2_BASE                       (EXTI1_BASE + 0xC0UL)
#define EXTI1_C3_BASE                       (EXTI1_BASE + 0x100UL)
#define SYSCFG_BASE                         (AHB4_PERIPH_BASE + 0x30000UL)
#define GPIOA_BASE                          (AHB4_PERIPH_BASE + 0x40000UL)
#define GPIOB_BASE                          (AHB4_PERIPH_BASE + 0x50000UL)
#define GPIOC_BASE                          (AHB4_PERIPH_BASE + 0x60000UL)
#define GPIOD_BASE                          (AHB4_PERIPH_BASE + 0x70000UL)
#define GPIOE_BASE                          (AHB4_PERIPH_BASE + 0x80000UL)
#define GPIOF_BASE                          (AHB4_PERIPH_BASE + 0x90000UL)
#define GPIOG_BASE                          (AHB4_PERIPH_BASE + 0xA0000UL)
#define GPIOH_BASE                          (AHB4_PERIPH_BASE + 0xB0000UL)
#define GPIOI_BASE                          (AHB4_PERIPH_BASE + 0xC0000UL)
#define EXTI2_BASE                          (AHB4_PERIPH_BASE + 0xD0000UL)
#define EXTI2_C1_BASE                       (EXTI2_BASE + 0x80UL)
#define EXTI2_C2_BASE                       (EXTI2_BASE + 0xC0UL)
#define EXTI2_C3_BASE                       (EXTI2_BASE + 0x100UL)

/*!< SMART_RUN_APB peripherals */
#define RTC_BASE                            (SMART_RUN_APB_PERIPH_BASE + 0x00000UL)
#define TAMP_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x10000UL)
#define SPI6_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x20000UL)
#define LPUART1_BASE                        (SMART_RUN_APB_PERIPH_BASE + 0x30000UL)
#define I2C3_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x40000UL)
#define LPTIM3_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x50000UL)
#define LPTIM4_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x60000UL)
#define LPTIM5_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x70000UL)
#define I3C3_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x80000UL)

/*!< SMART_RUN_AHB peripherals */
#define GPIOZ_BASE                          (SMART_RUN_AHB_PERIPH_BASE + 0x00000UL)
#define ADF1_BASE                           (SMART_RUN_AHB_PERIPH_BASE + 0x20000UL)
#define ADF1_Filter0_BASE                   (ADF1_BASE + 0x80UL)

/*!< APB4 peripherals */
#define LTDC_BASE                           (APB4_PERIPH_BASE + 0x10000UL)
#define LTDC_Layer1_BASE                    (LTDC_BASE + 0x100UL)
#define LTDC_Layer2_BASE                    (LTDC_BASE + 0x200UL)
#define LTDC_Layer3_BASE                    (LTDC_BASE + 0x300UL)
#define DCMIPP_BASE                         (APB4_PERIPH_BASE + 0x30000UL)
#define DDRC_BASE                           (APB4_PERIPH_BASE + 0x40000UL)
#define DDRDBG_BASE                         (APB4_PERIPH_BASE + 0x50000UL)
#define STGENR_BASE                         (APB4_PERIPH_BASE + 0x70000UL)
#define STGENC_BASE                         (APB4_PERIPH_BASE + 0x80000UL)
#define ATG_BASE                            (APB4_PERIPH_BASE + 0x90000UL)
#define BUSPERFM_BASE                       (APB4_PERIPH_BASE + 0xB0000UL)
#define DDRPERFM_BASE                       (APB4_PERIPH_BASE + 0xC0000UL)
/*!< AHB5 peripherals */
#define FMC_BASE                            (AHB5_PERIPH_BASE + 0x000000UL)
#define SDMMC1_BASE                         (AHB5_PERIPH_BASE + 0x020000UL)
#define SDMMC2_BASE                         (AHB5_PERIPH_BASE + 0x030000UL)
#define SDMMC3_BASE                         (AHB5_PERIPH_BASE + 0x040000UL)
#define ETH1_BASE                           (AHB5_PERIPH_BASE + 0x0C0000UL)
#define USBH_OHCI_BASE                      (AHB5_PERIPH_BASE + 0x0E0000UL)
#define USBH_EHCI_BASE                      (AHB5_PERIPH_BASE + 0x0F0000UL)
#define USBDR_BASE                          (AHB5_PERIPH_BASE + 0x100000UL)
#define PCIE_BASE                           (AHB5_PERIPH_BASE + 0x200000UL)
#define CA35SSC_BASE                        (AHB5_PERIPH_BASE + 0x600000UL)
#define CA35SYSCFG_BASE                     (AHB5_PERIPH_BASE + 0x602000UL)
#define FMC_NAND_DATA_BASE                  (AHB5_PERIPH_BASE + 0x610000UL)
#define DDRPHYC_BASE                        (AHB5_PERIPH_BASE + 0xA00000UL)


/*!< AHB6 peripherals */
/*!< USB registers base address */
#define USB_OTG_GLOBAL_BASE                 ((uint32_t )0x000UL)
#define USB_OTG_DEVICE_BASE                 ((uint32_t )0x800UL)
#define USB_OTG_IN_ENDPOINT_BASE            ((uint32_t )0x900UL)
#define USB_OTG_OUT_ENDPOINT_BASE           ((uint32_t )0xB00UL)
#define USB_OTG_EP_REG_SIZE                 ((uint32_t )0x20UL)
#define USB_OTG_HOST_BASE                   ((uint32_t )0x400UL)
#define USB_OTG_HOST_PORT_BASE              ((uint32_t )0x440UL)
#define USB_OTG_HOST_CHANNEL_BASE           ((uint32_t )0x500UL)
#define USB_OTG_HOST_CHANNEL_SIZE           ((uint32_t )0x20UL)
#define USB_OTG_PCGCCTL_BASE                ((uint32_t )0xE00UL)
#define USB_OTG_PCGCCTL1_BASE               ((uint32_t )0xE04UL)
#define USB_OTG_FIFO_BASE                   ((uint32_t )0x1000UL)
#define USB_OTG_FIFO_SIZE                   ((uint32_t )0x1000UL)
/*!< FMC Banks registers base address */
#define FMC_Bank1_R_BASE                    (FMC_BASE + 0x0000UL)
#define FMC_Bank1E_R_BASE                   (FMC_BASE + 0x0104UL)
#define FMC_Bank3_R_BASE                    (FMC_BASE + 0x0080UL)
#define FMC_Common_R_BASE                   (FMC_BASE + 0x0020UL)

/*!< Device electronic signature memory map */
#define UID_BASE                            (0x44000014UL)            /*!< Unique Device ID register base address */
#define PACKAGE_BASE                        (0x440001E8UL)            /*!< Package Data register base address */
#define RPN_BASE                            (0x44000024UL)            /*!< Device Part Number register base address */
#define DV_BASE                             (0x4A010000UL)            /*!< Device Version register base address */

/**
  * @}
  */
#define TIM2                                ((TIM_TypeDef *) TIM2_BASE)
#define TIM3                                ((TIM_TypeDef *) TIM3_BASE)
#define TIM4                                ((TIM_TypeDef *) TIM4_BASE)
#define TIM5                                ((TIM_TypeDef *) TIM5_BASE)
#define TIM6                                ((TIM_TypeDef *) TIM6_BASE)
#define TIM7                                ((TIM_TypeDef *) TIM7_BASE)
#define TIM12                               ((TIM_TypeDef *) TIM12_BASE)
#define TIM13                               ((TIM_TypeDef *) TIM13_BASE)
#define TIM14                               ((TIM_TypeDef *) TIM14_BASE)
#define LPTIM1                              ((LPTIM_TypeDef *) LPTIM1_BASE)
#define LPTIM2                              ((LPTIM_TypeDef *) LPTIM2_BASE)
#define SPI2                                ((SPI_TypeDef *) SPI2_BASE)
#define SPI3                                ((SPI_TypeDef *) SPI3_BASE)
#define SPDIFRX                             ((SPDIFRX_TypeDef *) SPDIFRX_BASE)
#define USART2                              ((USART_TypeDef *) USART2_BASE)
#define USART3                              ((USART_TypeDef *) USART3_BASE)
#define UART4                               ((USART_TypeDef *) UART4_BASE)
#define UART5                               ((USART_TypeDef *) UART5_BASE)
#define I2C1                                ((I2C_TypeDef *) I2C1_BASE)
#define I2C2                                ((I2C_TypeDef *) I2C2_BASE)
#define I2C3                                ((I2C_TypeDef *) I2C3_BASE)
#define I3C1                                ((I3C_TypeDef *) I3C1_BASE)
#define I3C2                                ((I3C_TypeDef *) I3C2_BASE)
#define I3C3                                ((I3C_TypeDef *) I3C3_BASE)
#define TIM10                               ((TIM_TypeDef *) TIM10_BASE)
#define TIM11                               ((TIM_TypeDef *) TIM11_BASE)

#define TIM1                                ((TIM_TypeDef *) TIM1_BASE)
#define TIM8                                ((TIM_TypeDef *) TIM8_BASE)
#define USART6                              ((USART_TypeDef *) USART6_BASE)
#define SPI1                                ((SPI_TypeDef *) SPI1_BASE)
#define SPI4                                ((SPI_TypeDef *) SPI4_BASE)
#define TIM15                               ((TIM_TypeDef *) TIM15_BASE)
#define TIM16                               ((TIM_TypeDef *) TIM16_BASE)
#define TIM17                               ((TIM_TypeDef *) TIM17_BASE)
#define SPI5                                ((SPI_TypeDef *) SPI5_BASE)
#define SAI1                                ((SAI_TypeDef *) SAI1_BASE)
#define SAI1_Block_A                        ((SAI_Block_TypeDef *) SAI1_Block_A_BASE)
#define SAI1_Block_B                        ((SAI_Block_TypeDef *) SAI1_Block_B_BASE)
#define SAI2                                ((SAI_TypeDef *) SAI2_BASE)
#define SAI2_Block_A                        ((SAI_Block_TypeDef *) SAI2_Block_A_BASE)
#define SAI2_Block_B                        ((SAI_Block_TypeDef *) SAI2_Block_B_BASE)
#define SAI3                                ((SAI_TypeDef *) SAI3_BASE)
#define SAI3_Block_A                        ((SAI_Block_TypeDef *) SAI3_Block_A_BASE)
#define SAI3_Block_B                        ((SAI_Block_TypeDef *) SAI3_Block_B_BASE)
#define USART1                              ((USART_TypeDef *) USART1_BASE)
#define SAI4                                ((SAI_TypeDef *) SAI4_BASE)
#define SAI4_Block_A                        ((SAI_Block_TypeDef *) SAI4_Block_A_BASE)
#define SAI4_Block_B                        ((SAI_Block_TypeDef *) SAI4_Block_B_BASE)
#define UART7                               ((USART_TypeDef *) UART7_BASE)

#define HPDMA1                              ((DMA_TypeDef *) HPDMA1_BASE)
#define HPDMA2                              ((DMA_TypeDef *) HPDMA2_BASE)
#define HPDMA3                              ((DMA_TypeDef *) HPDMA3_BASE)
#define OCTOSPI1                            ((OCTOSPI_TypeDef *) OCTOSPI1_BASE)
#define IPCC1                               ((IPCC_TypeDef *) IPCC1_BASE)
#define IPCC1_C1                            ((IPCC_CommonTypeDef *) IPCC1_C1_BASE)
#define IPCC1_C2                            ((IPCC_CommonTypeDef *) IPCC1_C2_BASE)
#define DCMI                                ((DCMI_TypeDef *) DCMI_BASE)
#define PSSI                                ((PSSI_TypeDef *) PSSI_BASE)
#define CRC                                 ((CRC_TypeDef *) CRC_BASE)
#define MDF1                                ((MDF_TypeDef *) MDF1_BASE)
#define MDF1_Filter0                        ((MDF_Filter_TypeDef*) MDF1_Filter0_BASE)
#define MDF1_Filter1                        ((MDF_Filter_TypeDef*) MDF1_Filter1_BASE)
#define MDF1_Filter2                        ((MDF_Filter_TypeDef*) MDF1_Filter2_BASE)
#define MDF1_Filter3                        ((MDF_Filter_TypeDef*) MDF1_Filter3_BASE)
#define MDF1_Filter4                        ((MDF_Filter_TypeDef*) MDF1_Filter4_BASE)
#define MDF1_Filter5                        ((MDF_Filter_TypeDef*) MDF1_Filter5_BASE)
#define MDF1_Filter6                        ((MDF_Filter_TypeDef*) MDF1_Filter6_BASE)
#define MDF1_Filter7                        ((MDF_Filter_TypeDef*) MDF1_Filter7_BASE)
#define ADC1                                ((ADC_TypeDef *) ADC1_BASE)
#define ADC2                                ((ADC_TypeDef *) ADC2_BASE)

#define HPDMA1_Channel0                     ((DMA_Channel_TypeDef *) HPDMA1_Channel0_BASE)
#define HPDMA1_Channel1                     ((DMA_Channel_TypeDef *) HPDMA1_Channel1_BASE)
#define HPDMA1_Channel2                     ((DMA_Channel_TypeDef *) HPDMA1_Channel2_BASE)
#define HPDMA1_Channel3                     ((DMA_Channel_TypeDef *) HPDMA1_Channel3_BASE)
#define HPDMA1_Channel4                     ((DMA_Channel_TypeDef *) HPDMA1_Channel4_BASE)
#define HPDMA1_Channel5                     ((DMA_Channel_TypeDef *) HPDMA1_Channel5_BASE)
#define HPDMA1_Channel6                     ((DMA_Channel_TypeDef *) HPDMA1_Channel6_BASE)
#define HPDMA1_Channel7                     ((DMA_Channel_TypeDef *) HPDMA1_Channel7_BASE)
#define HPDMA1_Channel8                     ((DMA_Channel_TypeDef *) HPDMA1_Channel8_BASE)
#define HPDMA1_Channel9                     ((DMA_Channel_TypeDef *) HPDMA1_Channel9_BASE)
#define HPDMA1_Channel10                    ((DMA_Channel_TypeDef *) HPDMA1_Channel10_BASE)
#define HPDMA1_Channel11                    ((DMA_Channel_TypeDef *) HPDMA1_Channel11_BASE)
#define HPDMA1_Channel12                    ((DMA_Channel_TypeDef *) HPDMA1_Channel12_BASE)
#define HPDMA1_Channel13                    ((DMA_Channel_TypeDef *) HPDMA1_Channel13_BASE)
#define HPDMA1_Channel14                    ((DMA_Channel_TypeDef *) HPDMA1_Channel14_BASE)
#define HPDMA1_Channel15                    ((DMA_Channel_TypeDef *) HPDMA1_Channel15_BASE)

#define HPDMA2_Channel0                     ((DMA_Channel_TypeDef *) HPDMA2_Channel0_BASE)
#define HPDMA2_Channel1                     ((DMA_Channel_TypeDef *) HPDMA2_Channel1_BASE)
#define HPDMA2_Channel2                     ((DMA_Channel_TypeDef *) HPDMA2_Channel2_BASE)
#define HPDMA2_Channel3                     ((DMA_Channel_TypeDef *) HPDMA2_Channel3_BASE)
#define HPDMA2_Channel4                     ((DMA_Channel_TypeDef *) HPDMA2_Channel4_BASE)
#define HPDMA2_Channel5                     ((DMA_Channel_TypeDef *) HPDMA2_Channel5_BASE)
#define HPDMA2_Channel6                     ((DMA_Channel_TypeDef *) HPDMA2_Channel6_BASE)
#define HPDMA2_Channel7                     ((DMA_Channel_TypeDef *) HPDMA2_Channel7_BASE)
#define HPDMA2_Channel8                     ((DMA_Channel_TypeDef *) HPDMA2_Channel8_BASE)
#define HPDMA2_Channel9                     ((DMA_Channel_TypeDef *) HPDMA2_Channel9_BASE)
#define HPDMA2_Channel10                    ((DMA_Channel_TypeDef *) HPDMA2_Channel10_BASE)
#define HPDMA2_Channel11                    ((DMA_Channel_TypeDef *) HPDMA2_Channel11_BASE)
#define HPDMA2_Channel12                    ((DMA_Channel_TypeDef *) HPDMA2_Channel12_BASE)
#define HPDMA2_Channel13                    ((DMA_Channel_TypeDef *) HPDMA2_Channel13_BASE)
#define HPDMA2_Channel14                    ((DMA_Channel_TypeDef *) HPDMA2_Channel14_BASE)
#define HPDMA2_Channel15                    ((DMA_Channel_TypeDef *) HPDMA2_Channel15_BASE)

#define HPDMA3_Channel0                     ((DMA_Channel_TypeDef *) HPDMA3_Channel0_BASE)
#define HPDMA3_Channel1                     ((DMA_Channel_TypeDef *) HPDMA3_Channel1_BASE)
#define HPDMA3_Channel2                     ((DMA_Channel_TypeDef *) HPDMA3_Channel2_BASE)
#define HPDMA3_Channel3                     ((DMA_Channel_TypeDef *) HPDMA3_Channel3_BASE)
#define HPDMA3_Channel4                     ((DMA_Channel_TypeDef *) HPDMA3_Channel4_BASE)
#define HPDMA3_Channel5                     ((DMA_Channel_TypeDef *) HPDMA3_Channel5_BASE)
#define HPDMA3_Channel6                     ((DMA_Channel_TypeDef *) HPDMA3_Channel6_BASE)
#define HPDMA3_Channel7                     ((DMA_Channel_TypeDef *) HPDMA3_Channel7_BASE)
#define HPDMA3_Channel8                     ((DMA_Channel_TypeDef *) HPDMA3_Channel8_BASE)
#define HPDMA3_Channel9                     ((DMA_Channel_TypeDef *) HPDMA3_Channel9_BASE)
#define HPDMA3_Channel10                    ((DMA_Channel_TypeDef *) HPDMA3_Channel10_BASE)
#define HPDMA3_Channel11                    ((DMA_Channel_TypeDef *) HPDMA3_Channel11_BASE)
#define HPDMA3_Channel12                    ((DMA_Channel_TypeDef *) HPDMA3_Channel12_BASE)
#define HPDMA3_Channel13                    ((DMA_Channel_TypeDef *) HPDMA3_Channel13_BASE)
#define HPDMA3_Channel14                    ((DMA_Channel_TypeDef *) HPDMA3_Channel14_BASE)
#define HPDMA3_Channel15                    ((DMA_Channel_TypeDef *) HPDMA3_Channel15_BASE)

#define HASH2                               ((HASH_TypeDef *) HASH2_BASE)
#define HASH2_DIGEST                        ((HASH_DIGEST_TypeDef *) HASH2_DIGEST_BASE)
#define RNG2                                ((RNG_TypeDef *) RNG2_BASE)
#define RAMCFG_SYSRAM                       ((RAMCFG_TypeDef *) RAMCFG_SYSRAM_BASE)
#define RAMCFG_SRAM1                        ((RAMCFG_TypeDef *) RAMCFG_SRAM1_BASE)
#define RAMCFG_RETRAM                       ((RAMCFG_TypeDef *) RAMCFG_RETRAM_BASE)
#define RAMCFG_BKPSRAM                      ((RAMCFG_TypeDef *) RAMCFG_BKPSRAM_BASE)
#define RISC                                ((RISC_TypeDef *)     RISC_BASE)
#define RIMC                                ((RIMC_TypeDef *)     RIMC_BASE)
#define RIFSC_ID                            ((RIFSC_ID_TypeDef *) RIFSC_ID_BASE)
#define IAC                                 ((IAC_TypeDef *)      IAC_BASE)
#define RISAF1                              ((RISAF_TypeDef *)    RISAF1_BASE)
#define RISAF2                              ((RISAF_TypeDef *)    RISAF2_BASE)
#define RISAF4                              ((RISAF_TypeDef *)    RISAF4_BASE)
#define RISAB1                              ((RISAB_TypeDef *)    RISAB1_BASE)
#define RISAB2                              ((RISAB_TypeDef *)    RISAB2_BASE)
#define RISAB3                              ((RISAB_TypeDef *)    RISAB3_BASE)
#define RISAB5                              ((RISAB_TypeDef *)    RISAB5_BASE)

#define BSEC                                ((BSEC_TypeDef *) BSEC_BASE)
#define IWDG1                               ((IWDG_TypeDef *) IWDG1_BASE)
#define IWDG2                               ((IWDG_TypeDef *) IWDG2_BASE)
#define IWDG3                               ((IWDG_TypeDef *) IWDG3_BASE)
#define IWDG4                               ((IWDG_TypeDef *) IWDG4_BASE)
#define WWDG1                               ((WWDG_TypeDef *) WWDG1_BASE)
#define VREFBUF                             ((VREFBUF_TypeDef *) VREFBUF_BASE)
#define DTS                                 ((DTS_TypeDef *) DTS_BASE)
#define SERC                                ((SERC_TypeDef *) SERC_BASE)
#define HDP                                 ((HDP_TypeDef *) HDP_BASE)

#define RCC                                 ((RCC_TypeDef *) RCC_BASE)
#define PWR                                 ((PWR_TypeDef *) PWR_BASE)
#define EXTI1                               ((EXTI_TypeDef *) EXTI1_BASE)
#define EXTI1_C1                            ((EXTI_Core_TypeDef *) EXTI1_C1_BASE)
#define EXTI1_C2                            ((EXTI_Core_TypeDef *) EXTI1_C2_BASE)
#define SYSCFG                              ((SYSCFG_TypeDef *) SYSCFG_BASE)
#define GPIOA                               ((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB                               ((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC                               ((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD                               ((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE                               ((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOF                               ((GPIO_TypeDef *) GPIOF_BASE)
#define GPIOG                               ((GPIO_TypeDef *) GPIOG_BASE)
#define GPIOH                               ((GPIO_TypeDef *) GPIOH_BASE)
#define GPIOI                               ((GPIO_TypeDef *) GPIOI_BASE)

#define RTC                                 ((RTC_TypeDef *) RTC_BASE)
#define TAMP                                ((TAMP_TypeDef *) TAMP_BASE)
#define LPUART1                             ((USART_TypeDef *) LPUART1_BASE)
#define LPTIM3                              ((LPTIM_TypeDef *) LPTIM3_BASE)
#define LPTIM4                              ((LPTIM_TypeDef *) LPTIM4_BASE)
#define LPTIM5                              ((LPTIM_TypeDef *) LPTIM5_BASE)

#define GPIOZ                               ((GPIO_TypeDef *) GPIOZ_BASE)
#define ADF1                                ((MDF_TypeDef *) ADF1_BASE)
#define ADF1_Filter0                        ((MDF_Filter_TypeDef*) ADF1_Filter0_BASE)
#define EXTI2                               ((EXTI_TypeDef *) EXTI2_BASE)
#define EXTI2_C1                            ((EXTI_Core_TypeDef *) EXTI2_C1_BASE)
#define EXTI2_C2                            ((EXTI_Core_TypeDef *) EXTI2_C2_BASE)
#define EXTI2_C3                            ((EXTI_Core_TypeDef *) EXTI2_C3_BASE)
#define LTDC                                ((LTDC_TypeDef *) LTDC_BASE)
#define LTDC_Layer1                         ((LTDC_Layer_TypeDef *) LTDC_Layer1_BASE)
#define LTDC_Layer2                         ((LTDC_Layer_TypeDef *) LTDC_Layer2_BASE)
#define LTDC_Layer3                         ((LTDC_Layer_TypeDef *) LTDC_Layer3_BASE)
#define DCMIPP                              ((DCMIPP_TypeDef *) DCMIPP_BASE)
#define DDRC                                ((DDRC_TypeDef *) DDRC_BASE)
#define DDRDBG                              ((DDRDBG_TypeDef *) DDRDBG_BASE)
#define DDRPERFM                            ((DDRPERFM_TypeDef *) DDRPERFM_BASE)
#define STGENR                              ((STGENR_TypeDef *) STGENR_BASE)
#define STGENC                              ((STGENC_TypeDef *) STGENC_BASE)

#define FMC_Bank1_R                         ((FMC_Bank1_TypeDef *) FMC_Bank1_R_BASE)
#define FMC_Bank1E_R                        ((FMC_Bank1E_TypeDef *) FMC_Bank1E_R_BASE)
#define FMC_Bank3_R                         ((FMC_Bank3_TypeDef *) FMC_Bank3_R_BASE)
#define FMC_Common_R                        ((FMC_Common_TypeDef *) FMC_Common_R_BASE)
#define SDMMC1                              ((SDMMC_TypeDef *) SDMMC1_BASE)
#define SDMMC2                              ((SDMMC_TypeDef *) SDMMC2_BASE)
#define SDMMC3                              ((SDMMC_TypeDef *) SDMMC3_BASE)
#define ETH1                                ((ETH_TypeDef *) ETH1_BASE)
#define CA35SSC                             ((CA35SSC_TypeDef *) CA35SSC_BASE)
#define CA35SYSCFG                          ((CA35SYSCFG_TypeDef *) CA35SYSCFG_BASE)
#define DDRPHYC                             ((DDRPHYC_TypeDef *) DDRPHYC_BASE)
#define USBDR                               ((USB_OTG_GlobalTypeDef *) USBDR_BASE)

#define DBGMCU                              ((DBGMCU_TypeDef *) DBGMCU_BASE)

/*!< AHB6 peripherals */
/**
  * @}
  */

/** @addtogroup Exported_constants
  * @{
  */

  /** @addtogroup Peripheral_Registers_Bits_Definition
  * @{
  */

/******************************************************************************/
/*                         Peripheral Registers_Bits_Definition               */
/******************************************************************************/

/******************************************************************************/
/*                                                                            */
/*                        Analog to Digital Converter (ADC)                   */
/*                                                                            */
/******************************************************************************/
/*******************************  ADC VERSION  ********************************/
#define ADC_VER_V6_X

/* Specific device feature definitions  (not present on all devices of STM32MP2 serie) */
/*#define ADC_MULTIMODE_SUPPORT*/         /*!< ADC feature available only on specific devices: multimode available on devices with several ADC instances */

/********************  Bit definition for ADC_ISR register  *******************/
#define ADC_ISR_ADRDY_Pos              (0U)
#define ADC_ISR_ADRDY_Msk              (0x1UL << ADC_ISR_ADRDY_Pos)            /*!< 0x00000001 */
#define ADC_ISR_ADRDY                  ADC_ISR_ADRDY_Msk                       /*!< ADC ready flag */
#define ADC_ISR_EOSMP_Pos              (1U)
#define ADC_ISR_EOSMP_Msk              (0x1UL << ADC_ISR_EOSMP_Pos)            /*!< 0x00000002 */
#define ADC_ISR_EOSMP                  ADC_ISR_EOSMP_Msk                       /*!< ADC group regular end of sampling flag */
#define ADC_ISR_EOC_Pos                (2U)
#define ADC_ISR_EOC_Msk                (0x1UL << ADC_ISR_EOC_Pos)              /*!< 0x00000004 */
#define ADC_ISR_EOC                    ADC_ISR_EOC_Msk                         /*!< ADC group regular end of unitary conversion flag */
#define ADC_ISR_EOS_Pos                (3U)
#define ADC_ISR_EOS_Msk                (0x1UL << ADC_ISR_EOS_Pos)              /*!< 0x00000008 */
#define ADC_ISR_EOS                    ADC_ISR_EOS_Msk                         /*!< ADC group regular end of sequence conversions flag */
#define ADC_ISR_OVR_Pos                (4U)
#define ADC_ISR_OVR_Msk                (0x1UL << ADC_ISR_OVR_Pos)              /*!< 0x00000010 */
#define ADC_ISR_OVR                    ADC_ISR_OVR_Msk                         /*!< ADC group regular overrun flag */
#define ADC_ISR_JEOC_Pos               (5U)
#define ADC_ISR_JEOC_Msk               (0x1UL << ADC_ISR_JEOC_Pos)             /*!< 0x00000020 */
#define ADC_ISR_JEOC                   ADC_ISR_JEOC_Msk                        /*!< ADC group injected end of unitary conversion flag */
#define ADC_ISR_JEOS_Pos               (6U)
#define ADC_ISR_JEOS_Msk               (0x1UL << ADC_ISR_JEOS_Pos)             /*!< 0x00000040 */
#define ADC_ISR_JEOS                   ADC_ISR_JEOS_Msk                        /*!< ADC group injected end of sequence conversions flag */
#define ADC_ISR_AWD1_Pos               (7U)
#define ADC_ISR_AWD1_Msk               (0x1UL << ADC_ISR_AWD1_Pos)             /*!< 0x00000080 */
#define ADC_ISR_AWD1                   ADC_ISR_AWD1_Msk                        /*!< ADC analog watchdog 1 flag */
#define ADC_ISR_AWD2_Pos               (8U)
#define ADC_ISR_AWD2_Msk               (0x1UL << ADC_ISR_AWD2_Pos)             /*!< 0x00000100 */
#define ADC_ISR_AWD2                   ADC_ISR_AWD2_Msk                        /*!< ADC analog watchdog 2 flag */
#define ADC_ISR_AWD3_Pos               (9U)
#define ADC_ISR_AWD3_Msk               (0x1UL << ADC_ISR_AWD3_Pos)             /*!< 0x00000200 */
#define ADC_ISR_AWD3                   ADC_ISR_AWD3_Msk                        /*!< ADC analog watchdog 3 flag */

/********************  Bit definition for ADC_IER register  *******************/
#define ADC_IER_ADRDYIE_Pos            (0U)
#define ADC_IER_ADRDYIE_Msk            (0x1UL << ADC_IER_ADRDYIE_Pos)          /*!< 0x00000001 */
#define ADC_IER_ADRDYIE                ADC_IER_ADRDYIE_Msk                     /*!< ADC ready interrupt */
#define ADC_IER_EOSMPIE_Pos            (1U)
#define ADC_IER_EOSMPIE_Msk            (0x1UL << ADC_IER_EOSMPIE_Pos)          /*!< 0x00000002 */
#define ADC_IER_EOSMPIE                ADC_IER_EOSMPIE_Msk                     /*!< ADC group regular end of sampling interrupt */
#define ADC_IER_EOCIE_Pos              (2U)
#define ADC_IER_EOCIE_Msk              (0x1UL << ADC_IER_EOCIE_Pos)            /*!< 0x00000004 */
#define ADC_IER_EOCIE                  ADC_IER_EOCIE_Msk                       /*!< ADC group regular end of unitary conversion interrupt */
#define ADC_IER_EOSIE_Pos              (3U)
#define ADC_IER_EOSIE_Msk              (0x1UL << ADC_IER_EOSIE_Pos)            /*!< 0x00000008 */
#define ADC_IER_EOSIE                  ADC_IER_EOSIE_Msk                       /*!< ADC group regular end of sequence conversions interrupt */
#define ADC_IER_OVRIE_Pos              (4U)
#define ADC_IER_OVRIE_Msk              (0x1UL << ADC_IER_OVRIE_Pos)            /*!< 0x00000010 */
#define ADC_IER_OVRIE                  ADC_IER_OVRIE_Msk                       /*!< ADC group regular overrun interrupt */
#define ADC_IER_JEOCIE_Pos             (5U)
#define ADC_IER_JEOCIE_Msk             (0x1UL << ADC_IER_JEOCIE_Pos)           /*!< 0x00000020 */
#define ADC_IER_JEOCIE                 ADC_IER_JEOCIE_Msk                      /*!< ADC group injected end of unitary conversion interrupt */
#define ADC_IER_JEOSIE_Pos             (6U)
#define ADC_IER_JEOSIE_Msk             (0x1UL << ADC_IER_JEOSIE_Pos)           /*!< 0x00000040 */
#define ADC_IER_JEOSIE                 ADC_IER_JEOSIE_Msk                      /*!< ADC group injected end of sequence conversions interrupt */
#define ADC_IER_AWD1IE_Pos             (7U)
#define ADC_IER_AWD1IE_Msk             (0x1UL << ADC_IER_AWD1IE_Pos)           /*!< 0x00000080 */
#define ADC_IER_AWD1IE                 ADC_IER_AWD1IE_Msk                      /*!< ADC analog watchdog 1 interrupt */
#define ADC_IER_AWD2IE_Pos             (8U)
#define ADC_IER_AWD2IE_Msk             (0x1UL << ADC_IER_AWD2IE_Pos)           /*!< 0x00000100 */
#define ADC_IER_AWD2IE                 ADC_IER_AWD2IE_Msk                      /*!< ADC analog watchdog 2 interrupt */
#define ADC_IER_AWD3IE_Pos             (9U)
#define ADC_IER_AWD3IE_Msk             (0x1UL << ADC_IER_AWD3IE_Pos)           /*!< 0x00000200 */
#define ADC_IER_AWD3IE                 ADC_IER_AWD3IE_Msk                      /*!< ADC analog watchdog 3 interrupt */

/********************  Bit definition for ADC_CR register  ********************/
#define ADC_CR_ADEN_Pos                (0U)
#define ADC_CR_ADEN_Msk                (0x1UL << ADC_CR_ADEN_Pos)              /*!< 0x00000001 */
#define ADC_CR_ADEN                    ADC_CR_ADEN_Msk                         /*!< ADC enable */
#define ADC_CR_ADDIS_Pos               (1U)
#define ADC_CR_ADDIS_Msk               (0x1UL << ADC_CR_ADDIS_Pos)             /*!< 0x00000002 */
#define ADC_CR_ADDIS                   ADC_CR_ADDIS_Msk                        /*!< ADC disable */
#define ADC_CR_ADSTART_Pos             (2U)
#define ADC_CR_ADSTART_Msk             (0x1UL << ADC_CR_ADSTART_Pos)           /*!< 0x00000004 */
#define ADC_CR_ADSTART                 ADC_CR_ADSTART_Msk                      /*!< ADC group regular conversion start */
#define ADC_CR_JADSTART_Pos            (3U)
#define ADC_CR_JADSTART_Msk            (0x1UL << ADC_CR_JADSTART_Pos)          /*!< 0x00000008 */
#define ADC_CR_JADSTART                ADC_CR_JADSTART_Msk                     /*!< ADC group injected conversion start */
#define ADC_CR_ADSTP_Pos               (4U)
#define ADC_CR_ADSTP_Msk               (0x1UL << ADC_CR_ADSTP_Pos)             /*!< 0x00000010 */
#define ADC_CR_ADSTP                   ADC_CR_ADSTP_Msk                        /*!< ADC group regular conversion stop */
#define ADC_CR_JADSTP_Pos              (5U)
#define ADC_CR_JADSTP_Msk              (0x1UL << ADC_CR_JADSTP_Pos)            /*!< 0x00000020 */
#define ADC_CR_JADSTP                  ADC_CR_JADSTP_Msk                       /*!< ADC group injected conversion stop */
#define ADC_CR_DEEPPWD_Pos             (29U)
#define ADC_CR_DEEPPWD_Msk             (0x1UL << ADC_CR_DEEPPWD_Pos)           /*!< 0x20000000 */
#define ADC_CR_DEEPPWD                 ADC_CR_DEEPPWD_Msk                      /*!< ADC deep power down enable */
#define ADC_CR_ADCALDIF_Pos            (30U)
#define ADC_CR_ADCALDIF_Msk            (0x1UL << ADC_CR_ADCALDIF_Pos)          /*!< 0x40000000 */
#define ADC_CR_ADCALDIF                ADC_CR_ADCALDIF_Msk                     /*!< ADC differential mode for calibration */
#define ADC_CR_ADCAL_Pos               (31U)
#define ADC_CR_ADCAL_Msk               (0x1UL << ADC_CR_ADCAL_Pos)             /*!< 0x80000000 */
#define ADC_CR_ADCAL                   ADC_CR_ADCAL_Msk                        /*!< ADC calibration */

/********************  Bit definition for ADC_CFGR1 register  ******************/
#define ADC_CFGR1_DMNGT_Pos            (0U)
#define ADC_CFGR1_DMNGT_Msk            (0x3UL << ADC_CFGR1_DMNGT_Pos)          /*!< 0x00000003 */
#define ADC_CFGR1_DMNGT                ADC_CFGR1_DMNGT_Msk                     /*!< ADC data management configuration */
#define ADC_CFGR1_DMNGT_0              (0x1UL << ADC_CFGR1_DMNGT_Pos)          /*!< 0x00000001 */
#define ADC_CFGR1_DMNGT_1              (0x2UL << ADC_CFGR1_DMNGT_Pos)          /*!< 0x00000002 */

#define ADC_CFGR1_RES_Pos              (2U)
#define ADC_CFGR1_RES_Msk              (0x3UL << ADC_CFGR1_RES_Pos)            /*!< 0x0000000C */
#define ADC_CFGR1_RES                  ADC_CFGR1_RES_Msk                       /*!< ADC data resolution */
#define ADC_CFGR1_RES_0                (0x1UL << ADC_CFGR1_RES_Pos)            /*!< 0x00000004 */
#define ADC_CFGR1_RES_1                (0x2UL << ADC_CFGR1_RES_Pos)            /*!< 0x00000008 */

#define ADC_CFGR1_EXTSEL_Pos           (5U)
#define ADC_CFGR1_EXTSEL_Msk           (0x1FUL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x000003E0 */
#define ADC_CFGR1_EXTSEL               ADC_CFGR1_EXTSEL_Msk                    /*!< ADC group regular external trigger source */
#define ADC_CFGR1_EXTSEL_0             (0x01UL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x00000020 */
#define ADC_CFGR1_EXTSEL_1             (0x02UL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x00000040 */
#define ADC_CFGR1_EXTSEL_2             (0x04UL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x00000080 */
#define ADC_CFGR1_EXTSEL_3             (0x08UL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x00000100 */
#define ADC_CFGR1_EXTSEL_4             (0x10UL << ADC_CFGR1_EXTSEL_Pos)        /*!< 0x00000200 */

#define ADC_CFGR1_EXTEN_Pos            (10U)
#define ADC_CFGR1_EXTEN_Msk            (0x3UL << ADC_CFGR1_EXTEN_Pos)          /*!< 0x00000C00 */
#define ADC_CFGR1_EXTEN                ADC_CFGR1_EXTEN_Msk                     /*!< ADC group regular external trigger polarity */
#define ADC_CFGR1_EXTEN_0              (0x1UL << ADC_CFGR1_EXTEN_Pos)          /*!< 0x00000400 */
#define ADC_CFGR1_EXTEN_1              (0x2UL << ADC_CFGR1_EXTEN_Pos)          /*!< 0x00000800 */

#define ADC_CFGR1_OVRMOD_Pos           (12U)
#define ADC_CFGR1_OVRMOD_Msk           (0x1UL << ADC_CFGR1_OVRMOD_Pos)         /*!< 0x00001000 */
#define ADC_CFGR1_OVRMOD               ADC_CFGR1_OVRMOD_Msk                    /*!< ADC group regular overrun configuration */
#define ADC_CFGR1_CONT_Pos             (13U)
#define ADC_CFGR1_CONT_Msk             (0x1UL << ADC_CFGR1_CONT_Pos)           /*!< 0x00002000 */
#define ADC_CFGR1_CONT                 ADC_CFGR1_CONT_Msk                      /*!< ADC group regular continuous conversion mode */
#define ADC_CFGR1_AUTDLY_Pos           (14U)
#define ADC_CFGR1_AUTDLY_Msk           (0x1UL << ADC_CFGR1_AUTDLY_Pos)         /*!< 0x00004000 */
#define ADC_CFGR1_AUTDLY               ADC_CFGR1_AUTDLY_Msk                    /*!< ADC low power auto wait */

#define ADC_CFGR1_DISCEN_Pos           (16U)
#define ADC_CFGR1_DISCEN_Msk           (0x1UL << ADC_CFGR1_DISCEN_Pos)         /*!< 0x00010000 */
#define ADC_CFGR1_DISCEN               ADC_CFGR1_DISCEN_Msk                    /*!< ADC group regular sequencer discontinuous mode */

#define ADC_CFGR1_DISCNUM_Pos          (17U)
#define ADC_CFGR1_DISCNUM_Msk          (0x7UL << ADC_CFGR1_DISCNUM_Pos)        /*!< 0x000E0000 */
#define ADC_CFGR1_DISCNUM              ADC_CFGR1_DISCNUM_Msk                   /*!< ADC group regular sequencer discontinuous number of ranks */
#define ADC_CFGR1_DISCNUM_0            (0x1UL << ADC_CFGR1_DISCNUM_Pos)        /*!< 0x00020000 */
#define ADC_CFGR1_DISCNUM_1            (0x2UL << ADC_CFGR1_DISCNUM_Pos)        /*!< 0x00040000 */
#define ADC_CFGR1_DISCNUM_2            (0x4UL << ADC_CFGR1_DISCNUM_Pos)        /*!< 0x00080000 */

#define ADC_CFGR1_JDISCEN_Pos          (20U)
#define ADC_CFGR1_JDISCEN_Msk          (0x1UL << ADC_CFGR1_JDISCEN_Pos)        /*!< 0x00100000 */
#define ADC_CFGR1_JDISCEN              ADC_CFGR1_JDISCEN_Msk                   /*!< ADC group injected sequencer discontinuous mode */

#define ADC_CFGR1_AWD1SGL_Pos          (22U)
#define ADC_CFGR1_AWD1SGL_Msk          (0x1UL << ADC_CFGR1_AWD1SGL_Pos)        /*!< 0x00400000 */
#define ADC_CFGR1_AWD1SGL              ADC_CFGR1_AWD1SGL_Msk                   /*!< ADC analog watchdog 1 monitoring a single channel or all channels */
#define ADC_CFGR1_AWD1EN_Pos           (23U)
#define ADC_CFGR1_AWD1EN_Msk           (0x1UL << ADC_CFGR1_AWD1EN_Pos)         /*!< 0x00800000 */
#define ADC_CFGR1_AWD1EN               ADC_CFGR1_AWD1EN_Msk                    /*!< ADC analog watchdog 1 enable on scope ADC group regular */
#define ADC_CFGR1_JAWD1EN_Pos          (24U)
#define ADC_CFGR1_JAWD1EN_Msk          (0x1UL << ADC_CFGR1_JAWD1EN_Pos)        /*!< 0x01000000 */
#define ADC_CFGR1_JAWD1EN              ADC_CFGR1_JAWD1EN_Msk                   /*!< ADC analog watchdog 1 enable on scope ADC group injected */
#define ADC_CFGR1_JAUTO_Pos            (25U)
#define ADC_CFGR1_JAUTO_Msk            (0x1UL << ADC_CFGR1_JAUTO_Pos)          /*!< 0x02000000 */
#define ADC_CFGR1_JAUTO                ADC_CFGR1_JAUTO_Msk                     /*!< ADC group injected automatic trigger mode */

#define ADC_CFGR1_AWD1CH_Pos           (26U)
#define ADC_CFGR1_AWD1CH_Msk           (0x1FUL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x7C000000 */
#define ADC_CFGR1_AWD1CH               ADC_CFGR1_AWD1CH_Msk                    /*!< ADC analog watchdog 1 monitored channel selection */
#define ADC_CFGR1_AWD1CH_0             (0x01UL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x04000000 */
#define ADC_CFGR1_AWD1CH_1             (0x02UL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x08000000 */
#define ADC_CFGR1_AWD1CH_2             (0x04UL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x10000000 */
#define ADC_CFGR1_AWD1CH_3             (0x08UL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x20000000 */
#define ADC_CFGR1_AWD1CH_4             (0x10UL << ADC_CFGR1_AWD1CH_Pos)        /*!< 0x40000000 */

/********************  Bit definition for ADC_CFGR2 register  *****************/
#define ADC_CFGR2_ROVSE_Pos            (0U)
#define ADC_CFGR2_ROVSE_Msk            (0x1UL << ADC_CFGR2_ROVSE_Pos)          /*!< 0x00000001 */
#define ADC_CFGR2_ROVSE                ADC_CFGR2_ROVSE_Msk                     /*!< ADC oversampler enable on scope ADC group regular */
#define ADC_CFGR2_JOVSE_Pos            (1U)
#define ADC_CFGR2_JOVSE_Msk            (0x1UL << ADC_CFGR2_JOVSE_Pos)          /*!< 0x00000002 */
#define ADC_CFGR2_JOVSE                ADC_CFGR2_JOVSE_Msk                     /*!< ADC oversampler enable on scope ADC group injected */

#define ADC_CFGR2_OVSS_Pos             (5U)
#define ADC_CFGR2_OVSS_Msk             (0xFUL << ADC_CFGR2_OVSS_Pos)           /*!< 0x000001E0 */
#define ADC_CFGR2_OVSS                 ADC_CFGR2_OVSS_Msk                      /*!< ADC oversampling shift */
#define ADC_CFGR2_OVSS_0               (0x1UL << ADC_CFGR2_OVSS_Pos)           /*!< 0x00000020 */
#define ADC_CFGR2_OVSS_1               (0x2UL << ADC_CFGR2_OVSS_Pos)           /*!< 0x00000040 */
#define ADC_CFGR2_OVSS_2               (0x4UL << ADC_CFGR2_OVSS_Pos)           /*!< 0x00000080 */
#define ADC_CFGR2_OVSS_3               (0x8UL << ADC_CFGR2_OVSS_Pos)           /*!< 0x00000100 */

#define ADC_CFGR2_TROVS_Pos            (9U)
#define ADC_CFGR2_TROVS_Msk            (0x1UL << ADC_CFGR2_TROVS_Pos)          /*!< 0x00000200 */
#define ADC_CFGR2_TROVS                ADC_CFGR2_TROVS_Msk                     /*!< ADC oversampling discontinuous mode (triggered mode) for ADC group regular */
#define ADC_CFGR2_ROVSM_Pos            (10U)
#define ADC_CFGR2_ROVSM_Msk            (0x1UL << ADC_CFGR2_ROVSM_Pos)          /*!< 0x00000400 */
#define ADC_CFGR2_ROVSM                ADC_CFGR2_ROVSM_Msk                     /*!< ADC oversampling mode managing interlaced conversions of ADC group regular and group injected */

#define ADC_CFGR2_BULB_Pos             (13U)
#define ADC_CFGR2_BULB_Msk             (0x1UL << ADC_CFGR2_BULB_Pos)            /*!< 0x00002000 */
#define ADC_CFGR2_BULB                 ADC_CFGR2_BULB_Msk                       /*!< ADC bulb sampling mode */

#define ADC_CFGR2_SWTRIG_Pos           (14U)
#define ADC_CFGR2_SWTRIG_Msk           (0x1UL << ADC_CFGR2_SWTRIG_Pos)          /*!< 0x00004000 */
#define ADC_CFGR2_SWTRIG               ADC_CFGR2_SWTRIG_Msk                     /*!< ADC software trigger bit for sampling time control trigger mode */

#define ADC_CFGR2_SMPTRIG_Pos          (15U)
#define ADC_CFGR2_SMPTRIG_Msk          (0x1UL << ADC_CFGR2_SMPTRIG_Pos)         /*!< 0x00008000 */
#define ADC_CFGR2_SMPTRIG              ADC_CFGR2_SMPTRIG_Msk                    /*!< ADC sampling time control trigger mode */

#define ADC_CFGR2_OVSR_Pos             (16U)
#define ADC_CFGR2_OVSR_Msk             (0x3FFUL << ADC_CFGR2_OVSR_Pos)          /*!< 0x03FF0000 */
#define ADC_CFGR2_OVSR                 ADC_CFGR2_OVSR_Msk                       /*!< ADC oversampling ratio */
#define ADC_CFGR2_OVSR_0               (0x001UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00010000 */
#define ADC_CFGR2_OVSR_1               (0x002UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00020000 */
#define ADC_CFGR2_OVSR_2               (0x004UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00040000 */
#define ADC_CFGR2_OVSR_3               (0x008UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00080000 */
#define ADC_CFGR2_OVSR_4               (0x010UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00100000 */
#define ADC_CFGR2_OVSR_5               (0x020UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00200000 */
#define ADC_CFGR2_OVSR_6               (0x040UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00400000 */
#define ADC_CFGR2_OVSR_7               (0x080UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x00800000 */
#define ADC_CFGR2_OVSR_8               (0x100UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x01000000 */
#define ADC_CFGR2_OVSR_9               (0x200UL << ADC_CFGR2_OVSR_Pos)          /*!< 0x02000000 */

#define ADC_CFGR2_LSHIFT_Pos           (28U)
#define ADC_CFGR2_LSHIFT_Msk           (0xFUL << ADC_CFGR2_LSHIFT_Pos)          /*!< 0xF0000000 */
#define ADC_CFGR2_LSHIFT               ADC_CFGR2_LSHIFT_Msk                     /*!< ADC left shift factor */
#define ADC_CFGR2_LSHIFT_0             (0x1UL << ADC_CFGR2_LSHIFT_Pos)          /*!< 0x10000000 */
#define ADC_CFGR2_LSHIFT_1             (0x2UL << ADC_CFGR2_LSHIFT_Pos)          /*!< 0x20000000 */
#define ADC_CFGR2_LSHIFT_2             (0x4UL << ADC_CFGR2_LSHIFT_Pos)          /*!< 0x40000000 */
#define ADC_CFGR2_LSHIFT_3             (0x8UL << ADC_CFGR2_LSHIFT_Pos)          /*!< 0x80000000 */

/********************  Bit definition for ADC_SMPR1 register  *****************/
#define ADC_SMPR1_SMP0_Pos             (0U)
#define ADC_SMPR1_SMP0_Msk             (0x7UL << ADC_SMPR1_SMP0_Pos)           /*!< 0x00000007 */
#define ADC_SMPR1_SMP0                 ADC_SMPR1_SMP0_Msk                      /*!< ADC channel 0 sampling time selection  */
#define ADC_SMPR1_SMP0_0               (0x1UL << ADC_SMPR1_SMP0_Pos)           /*!< 0x00000001 */
#define ADC_SMPR1_SMP0_1               (0x2UL << ADC_SMPR1_SMP0_Pos)           /*!< 0x00000002 */
#define ADC_SMPR1_SMP0_2               (0x4UL << ADC_SMPR1_SMP0_Pos)           /*!< 0x00000004 */

#define ADC_SMPR1_SMP1_Pos             (3U)
#define ADC_SMPR1_SMP1_Msk             (0x7UL << ADC_SMPR1_SMP1_Pos)           /*!< 0x00000038 */
#define ADC_SMPR1_SMP1                 ADC_SMPR1_SMP1_Msk                      /*!< ADC channel 1 sampling time selection  */
#define ADC_SMPR1_SMP1_0               (0x1UL << ADC_SMPR1_SMP1_Pos)           /*!< 0x00000008 */
#define ADC_SMPR1_SMP1_1               (0x2UL << ADC_SMPR1_SMP1_Pos)           /*!< 0x00000010 */
#define ADC_SMPR1_SMP1_2               (0x4UL << ADC_SMPR1_SMP1_Pos)           /*!< 0x00000020 */

#define ADC_SMPR1_SMP2_Pos             (6U)
#define ADC_SMPR1_SMP2_Msk             (0x7UL << ADC_SMPR1_SMP2_Pos)           /*!< 0x000001C0 */
#define ADC_SMPR1_SMP2                 ADC_SMPR1_SMP2_Msk                      /*!< ADC channel 2 sampling time selection  */
#define ADC_SMPR1_SMP2_0               (0x1UL << ADC_SMPR1_SMP2_Pos)           /*!< 0x00000040 */
#define ADC_SMPR1_SMP2_1               (0x2UL << ADC_SMPR1_SMP2_Pos)           /*!< 0x00000080 */
#define ADC_SMPR1_SMP2_2               (0x4UL << ADC_SMPR1_SMP2_Pos)           /*!< 0x00000100 */

#define ADC_SMPR1_SMP3_Pos             (9U)
#define ADC_SMPR1_SMP3_Msk             (0x7UL << ADC_SMPR1_SMP3_Pos)           /*!< 0x00000E00 */
#define ADC_SMPR1_SMP3                 ADC_SMPR1_SMP3_Msk                      /*!< ADC channel 3 sampling time selection  */
#define ADC_SMPR1_SMP3_0               (0x1UL << ADC_SMPR1_SMP3_Pos)           /*!< 0x00000200 */
#define ADC_SMPR1_SMP3_1               (0x2UL << ADC_SMPR1_SMP3_Pos)           /*!< 0x00000400 */
#define ADC_SMPR1_SMP3_2               (0x4UL << ADC_SMPR1_SMP3_Pos)           /*!< 0x00000800 */

#define ADC_SMPR1_SMP4_Pos             (12U)
#define ADC_SMPR1_SMP4_Msk             (0x7UL << ADC_SMPR1_SMP4_Pos)           /*!< 0x00007000 */
#define ADC_SMPR1_SMP4                 ADC_SMPR1_SMP4_Msk                      /*!< ADC channel 4 sampling time selection  */
#define ADC_SMPR1_SMP4_0               (0x1UL << ADC_SMPR1_SMP4_Pos)           /*!< 0x00001000 */
#define ADC_SMPR1_SMP4_1               (0x2UL << ADC_SMPR1_SMP4_Pos)           /*!< 0x00002000 */
#define ADC_SMPR1_SMP4_2               (0x4UL << ADC_SMPR1_SMP4_Pos)           /*!< 0x00004000 */

#define ADC_SMPR1_SMP5_Pos             (15U)
#define ADC_SMPR1_SMP5_Msk             (0x7UL << ADC_SMPR1_SMP5_Pos)           /*!< 0x00038000 */
#define ADC_SMPR1_SMP5                 ADC_SMPR1_SMP5_Msk                      /*!< ADC channel 5 sampling time selection  */
#define ADC_SMPR1_SMP5_0               (0x1UL << ADC_SMPR1_SMP5_Pos)           /*!< 0x00008000 */
#define ADC_SMPR1_SMP5_1               (0x2UL << ADC_SMPR1_SMP5_Pos)           /*!< 0x00010000 */
#define ADC_SMPR1_SMP5_2               (0x4UL << ADC_SMPR1_SMP5_Pos)           /*!< 0x00020000 */

#define ADC_SMPR1_SMP6_Pos             (18U)
#define ADC_SMPR1_SMP6_Msk             (0x7UL << ADC_SMPR1_SMP6_Pos)           /*!< 0x001C0000 */
#define ADC_SMPR1_SMP6                 ADC_SMPR1_SMP6_Msk                      /*!< ADC channel 6 sampling time selection  */
#define ADC_SMPR1_SMP6_0               (0x1UL << ADC_SMPR1_SMP6_Pos)           /*!< 0x00040000 */
#define ADC_SMPR1_SMP6_1               (0x2UL << ADC_SMPR1_SMP6_Pos)           /*!< 0x00080000 */
#define ADC_SMPR1_SMP6_2               (0x4UL << ADC_SMPR1_SMP6_Pos)           /*!< 0x00100000 */

#define ADC_SMPR1_SMP7_Pos             (21U)
#define ADC_SMPR1_SMP7_Msk             (0x7UL << ADC_SMPR1_SMP7_Pos)           /*!< 0x00E00000 */
#define ADC_SMPR1_SMP7                 ADC_SMPR1_SMP7_Msk                      /*!< ADC channel 7 sampling time selection  */
#define ADC_SMPR1_SMP7_0               (0x1UL << ADC_SMPR1_SMP7_Pos)           /*!< 0x00200000 */
#define ADC_SMPR1_SMP7_1               (0x2UL << ADC_SMPR1_SMP7_Pos)           /*!< 0x00400000 */
#define ADC_SMPR1_SMP7_2               (0x4UL << ADC_SMPR1_SMP7_Pos)           /*!< 0x00800000 */

#define ADC_SMPR1_SMP8_Pos             (24U)
#define ADC_SMPR1_SMP8_Msk             (0x7UL << ADC_SMPR1_SMP8_Pos)           /*!< 0x07000000 */
#define ADC_SMPR1_SMP8                 ADC_SMPR1_SMP8_Msk                      /*!< ADC channel 8 sampling time selection  */
#define ADC_SMPR1_SMP8_0               (0x1UL << ADC_SMPR1_SMP8_Pos)           /*!< 0x01000000 */
#define ADC_SMPR1_SMP8_1               (0x2UL << ADC_SMPR1_SMP8_Pos)           /*!< 0x02000000 */
#define ADC_SMPR1_SMP8_2               (0x4UL << ADC_SMPR1_SMP8_Pos)           /*!< 0x04000000 */

#define ADC_SMPR1_SMP9_Pos             (27U)
#define ADC_SMPR1_SMP9_Msk             (0x7UL << ADC_SMPR1_SMP9_Pos)           /*!< 0x38000000 */
#define ADC_SMPR1_SMP9                 ADC_SMPR1_SMP9_Msk                      /*!< ADC channel 9 sampling time selection  */
#define ADC_SMPR1_SMP9_0               (0x1UL << ADC_SMPR1_SMP9_Pos)           /*!< 0x08000000 */
#define ADC_SMPR1_SMP9_1               (0x2UL << ADC_SMPR1_SMP9_Pos)           /*!< 0x10000000 */
#define ADC_SMPR1_SMP9_2               (0x4UL << ADC_SMPR1_SMP9_Pos)           /*!< 0x20000000 */

/********************  Bit definition for ADC_SMPR2 register  *****************/
#define ADC_SMPR2_SMP10_Pos            (0U)
#define ADC_SMPR2_SMP10_Msk            (0x7UL << ADC_SMPR2_SMP10_Pos)          /*!< 0x00000007 */
#define ADC_SMPR2_SMP10                ADC_SMPR2_SMP10_Msk                     /*!< ADC channel 10 sampling time selection  */
#define ADC_SMPR2_SMP10_0              (0x1UL << ADC_SMPR2_SMP10_Pos)          /*!< 0x00000001 */
#define ADC_SMPR2_SMP10_1              (0x2UL << ADC_SMPR2_SMP10_Pos)          /*!< 0x00000002 */
#define ADC_SMPR2_SMP10_2              (0x4UL << ADC_SMPR2_SMP10_Pos)          /*!< 0x00000004 */

#define ADC_SMPR2_SMP11_Pos            (3U)
#define ADC_SMPR2_SMP11_Msk            (0x7UL << ADC_SMPR2_SMP11_Pos)          /*!< 0x00000038 */
#define ADC_SMPR2_SMP11                ADC_SMPR2_SMP11_Msk                     /*!< ADC channel 11 sampling time selection  */
#define ADC_SMPR2_SMP11_0              (0x1UL << ADC_SMPR2_SMP11_Pos)          /*!< 0x00000008 */
#define ADC_SMPR2_SMP11_1              (0x2UL << ADC_SMPR2_SMP11_Pos)          /*!< 0x00000010 */
#define ADC_SMPR2_SMP11_2              (0x4UL << ADC_SMPR2_SMP11_Pos)          /*!< 0x00000020 */

#define ADC_SMPR2_SMP12_Pos            (6U)
#define ADC_SMPR2_SMP12_Msk            (0x7UL << ADC_SMPR2_SMP12_Pos)          /*!< 0x000001C0 */
#define ADC_SMPR2_SMP12                ADC_SMPR2_SMP12_Msk                     /*!< ADC channel 12 sampling time selection  */
#define ADC_SMPR2_SMP12_0              (0x1UL << ADC_SMPR2_SMP12_Pos)          /*!< 0x00000040 */
#define ADC_SMPR2_SMP12_1              (0x2UL << ADC_SMPR2_SMP12_Pos)          /*!< 0x00000080 */
#define ADC_SMPR2_SMP12_2              (0x4UL << ADC_SMPR2_SMP12_Pos)          /*!< 0x00000100 */

#define ADC_SMPR2_SMP13_Pos            (9U)
#define ADC_SMPR2_SMP13_Msk            (0x7UL << ADC_SMPR2_SMP13_Pos)          /*!< 0x00000E00 */
#define ADC_SMPR2_SMP13                ADC_SMPR2_SMP13_Msk                     /*!< ADC channel 13 sampling time selection  */
#define ADC_SMPR2_SMP13_0              (0x1UL << ADC_SMPR2_SMP13_Pos)          /*!< 0x00000200 */
#define ADC_SMPR2_SMP13_1              (0x2UL << ADC_SMPR2_SMP13_Pos)          /*!< 0x00000400 */
#define ADC_SMPR2_SMP13_2              (0x4UL << ADC_SMPR2_SMP13_Pos)          /*!< 0x00000800 */

#define ADC_SMPR2_SMP14_Pos            (12U)
#define ADC_SMPR2_SMP14_Msk            (0x7UL << ADC_SMPR2_SMP14_Pos)          /*!< 0x00007000 */
#define ADC_SMPR2_SMP14                ADC_SMPR2_SMP14_Msk                     /*!< ADC channel 14 sampling time selection  */
#define ADC_SMPR2_SMP14_0              (0x1UL << ADC_SMPR2_SMP14_Pos)          /*!< 0x00001000 */
#define ADC_SMPR2_SMP14_1              (0x2UL << ADC_SMPR2_SMP14_Pos)          /*!< 0x00002000 */
#define ADC_SMPR2_SMP14_2              (0x4UL << ADC_SMPR2_SMP14_Pos)          /*!< 0x00004000 */

#define ADC_SMPR2_SMP15_Pos            (15U)
#define ADC_SMPR2_SMP15_Msk            (0x7UL << ADC_SMPR2_SMP15_Pos)          /*!< 0x00038000 */
#define ADC_SMPR2_SMP15                ADC_SMPR2_SMP15_Msk                     /*!< ADC channel 15 sampling time selection  */
#define ADC_SMPR2_SMP15_0              (0x1UL << ADC_SMPR2_SMP15_Pos)          /*!< 0x00008000 */
#define ADC_SMPR2_SMP15_1              (0x2UL << ADC_SMPR2_SMP15_Pos)          /*!< 0x00010000 */
#define ADC_SMPR2_SMP15_2              (0x4UL << ADC_SMPR2_SMP15_Pos)          /*!< 0x00020000 */

#define ADC_SMPR2_SMP16_Pos            (18U)
#define ADC_SMPR2_SMP16_Msk            (0x7UL << ADC_SMPR2_SMP16_Pos)          /*!< 0x001C0000 */
#define ADC_SMPR2_SMP16                ADC_SMPR2_SMP16_Msk                     /*!< ADC channel 16 sampling time selection  */
#define ADC_SMPR2_SMP16_0              (0x1UL << ADC_SMPR2_SMP16_Pos)          /*!< 0x00040000 */
#define ADC_SMPR2_SMP16_1              (0x2UL << ADC_SMPR2_SMP16_Pos)          /*!< 0x00080000 */
#define ADC_SMPR2_SMP16_2              (0x4UL << ADC_SMPR2_SMP16_Pos)          /*!< 0x00100000 */

#define ADC_SMPR2_SMP17_Pos            (21U)
#define ADC_SMPR2_SMP17_Msk            (0x7UL << ADC_SMPR2_SMP17_Pos)          /*!< 0x00E00000 */
#define ADC_SMPR2_SMP17                ADC_SMPR2_SMP17_Msk                     /*!< ADC channel 17 sampling time selection  */
#define ADC_SMPR2_SMP17_0              (0x1UL << ADC_SMPR2_SMP17_Pos)          /*!< 0x00200000 */
#define ADC_SMPR2_SMP17_1              (0x2UL << ADC_SMPR2_SMP17_Pos)          /*!< 0x00400000 */
#define ADC_SMPR2_SMP17_2              (0x4UL << ADC_SMPR2_SMP17_Pos)          /*!< 0x00800000 */

#define ADC_SMPR2_SMP18_Pos            (24U)
#define ADC_SMPR2_SMP18_Msk            (0x7UL << ADC_SMPR2_SMP18_Pos)          /*!< 0x07000000 */
#define ADC_SMPR2_SMP18                ADC_SMPR2_SMP18_Msk                     /*!< ADC channel 18 sampling time selection  */
#define ADC_SMPR2_SMP18_0              (0x1UL << ADC_SMPR2_SMP18_Pos)          /*!< 0x01000000 */
#define ADC_SMPR2_SMP18_1              (0x2UL << ADC_SMPR2_SMP18_Pos)          /*!< 0x02000000 */
#define ADC_SMPR2_SMP18_2              (0x4UL << ADC_SMPR2_SMP18_Pos)          /*!< 0x04000000 */

#define ADC_SMPR2_SMP19_Pos            (27U)
#define ADC_SMPR2_SMP19_Msk            (0x7UL << ADC_SMPR2_SMP19_Pos)          /*!< 0x38000000 */
#define ADC_SMPR2_SMP19                ADC_SMPR2_SMP19_Msk                     /*!< ADC Channel 19 Sampling time selection  */
#define ADC_SMPR2_SMP19_0              (0x1UL << ADC_SMPR2_SMP19_Pos)          /*!< 0x08000000 */
#define ADC_SMPR2_SMP19_1              (0x2UL << ADC_SMPR2_SMP19_Pos)          /*!< 0x10000000 */
#define ADC_SMPR2_SMP19_2              (0x4UL << ADC_SMPR2_SMP19_Pos)          /*!< 0x20000000 */

/********************  Bit definition for ADC_PCSEL register  *****************/
#define ADC_PCSEL_PCSEL_Pos            (0U)
#define ADC_PCSEL_PCSEL_Msk            (0xFFFFFUL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x000FFFFF */
#define ADC_PCSEL_PCSEL                ADC_PCSEL_PCSEL_Msk                   /*!< ADC channel preselection */
#define ADC_PCSEL_PCSEL_0              (0x00001UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000001 */
#define ADC_PCSEL_PCSEL_1              (0x00002UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000002 */
#define ADC_PCSEL_PCSEL_2              (0x00004UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000004 */
#define ADC_PCSEL_PCSEL_3              (0x00008UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000008 */
#define ADC_PCSEL_PCSEL_4              (0x00010UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000010 */
#define ADC_PCSEL_PCSEL_5              (0x00020UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000020 */
#define ADC_PCSEL_PCSEL_6              (0x00040UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000040 */
#define ADC_PCSEL_PCSEL_7              (0x00080UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000080 */
#define ADC_PCSEL_PCSEL_8              (0x00100UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000100 */
#define ADC_PCSEL_PCSEL_9              (0x00200UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000200 */
#define ADC_PCSEL_PCSEL_10             (0x00400UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000400 */
#define ADC_PCSEL_PCSEL_11             (0x00800UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00000800 */
#define ADC_PCSEL_PCSEL_12             (0x01000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00001000 */
#define ADC_PCSEL_PCSEL_13             (0x02000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00002000 */
#define ADC_PCSEL_PCSEL_14             (0x04000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00004000 */
#define ADC_PCSEL_PCSEL_15             (0x08000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00008000 */
#define ADC_PCSEL_PCSEL_16             (0x10000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00010000 */
#define ADC_PCSEL_PCSEL_17             (0x20000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00020000 */
#define ADC_PCSEL_PCSEL_18             (0x40000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00040000 */
#define ADC_PCSEL_PCSEL_19             (0x80000UL << ADC_PCSEL_PCSEL_Pos)    /*!< 0x00080000 */

/********************  Bit definition for ADC_SQR1 register  ******************/
#define ADC_SQR1_L_Pos                 (0U)
#define ADC_SQR1_L_Msk                 (0xFUL << ADC_SQR1_L_Pos)               /*!< 0x0000000F */
#define ADC_SQR1_L                     ADC_SQR1_L_Msk                          /*!< ADC group regular sequencer scan length */
#define ADC_SQR1_L_0                   (0x1UL << ADC_SQR1_L_Pos)               /*!< 0x00000001 */
#define ADC_SQR1_L_1                   (0x2UL << ADC_SQR1_L_Pos)               /*!< 0x00000002 */
#define ADC_SQR1_L_2                   (0x4UL << ADC_SQR1_L_Pos)               /*!< 0x00000004 */
#define ADC_SQR1_L_3                   (0x8UL << ADC_SQR1_L_Pos)               /*!< 0x00000008 */

#define ADC_SQR1_SQ1_Pos               (6U)
#define ADC_SQR1_SQ1_Msk               (0x1FUL << ADC_SQR1_SQ1_Pos)            /*!< 0x000007C0 */
#define ADC_SQR1_SQ1                   ADC_SQR1_SQ1_Msk                        /*!< ADC group regular sequencer rank 1 */
#define ADC_SQR1_SQ1_0                 (0x01UL << ADC_SQR1_SQ1_Pos)            /*!< 0x00000040 */
#define ADC_SQR1_SQ1_1                 (0x02UL << ADC_SQR1_SQ1_Pos)            /*!< 0x00000080 */
#define ADC_SQR1_SQ1_2                 (0x04UL << ADC_SQR1_SQ1_Pos)            /*!< 0x00000100 */
#define ADC_SQR1_SQ1_3                 (0x08UL << ADC_SQR1_SQ1_Pos)            /*!< 0x00000200 */
#define ADC_SQR1_SQ1_4                 (0x10UL << ADC_SQR1_SQ1_Pos)            /*!< 0x00000400 */

#define ADC_SQR1_SQ2_Pos               (12U)
#define ADC_SQR1_SQ2_Msk               (0x1FUL << ADC_SQR1_SQ2_Pos)            /*!< 0x0001F000 */
#define ADC_SQR1_SQ2                   ADC_SQR1_SQ2_Msk                        /*!< ADC group regular sequencer rank 2 */
#define ADC_SQR1_SQ2_0                 (0x01UL << ADC_SQR1_SQ2_Pos)            /*!< 0x00001000 */
#define ADC_SQR1_SQ2_1                 (0x02UL << ADC_SQR1_SQ2_Pos)            /*!< 0x00002000 */
#define ADC_SQR1_SQ2_2                 (0x04UL << ADC_SQR1_SQ2_Pos)            /*!< 0x00004000 */
#define ADC_SQR1_SQ2_3                 (0x08UL << ADC_SQR1_SQ2_Pos)            /*!< 0x00008000 */
#define ADC_SQR1_SQ2_4                 (0x10UL << ADC_SQR1_SQ2_Pos)            /*!< 0x00010000 */

#define ADC_SQR1_SQ3_Pos               (18U)
#define ADC_SQR1_SQ3_Msk               (0x1FUL << ADC_SQR1_SQ3_Pos)            /*!< 0x007C0000 */
#define ADC_SQR1_SQ3                   ADC_SQR1_SQ3_Msk                        /*!< ADC group regular sequencer rank 3 */
#define ADC_SQR1_SQ3_0                 (0x01UL << ADC_SQR1_SQ3_Pos)            /*!< 0x00040000 */
#define ADC_SQR1_SQ3_1                 (0x02UL << ADC_SQR1_SQ3_Pos)            /*!< 0x00080000 */
#define ADC_SQR1_SQ3_2                 (0x04UL << ADC_SQR1_SQ3_Pos)            /*!< 0x00100000 */
#define ADC_SQR1_SQ3_3                 (0x08UL << ADC_SQR1_SQ3_Pos)            /*!< 0x00200000 */
#define ADC_SQR1_SQ3_4                 (0x10UL << ADC_SQR1_SQ3_Pos)            /*!< 0x00400000 */

#define ADC_SQR1_SQ4_Pos               (24U)
#define ADC_SQR1_SQ4_Msk               (0x1FUL << ADC_SQR1_SQ4_Pos)            /*!< 0x1F000000 */
#define ADC_SQR1_SQ4                   ADC_SQR1_SQ4_Msk                        /*!< ADC group regular sequencer rank 4 */
#define ADC_SQR1_SQ4_0                 (0x01UL << ADC_SQR1_SQ4_Pos)            /*!< 0x01000000 */
#define ADC_SQR1_SQ4_1                 (0x02UL << ADC_SQR1_SQ4_Pos)            /*!< 0x02000000 */
#define ADC_SQR1_SQ4_2                 (0x04UL << ADC_SQR1_SQ4_Pos)            /*!< 0x04000000 */
#define ADC_SQR1_SQ4_3                 (0x08UL << ADC_SQR1_SQ4_Pos)            /*!< 0x08000000 */
#define ADC_SQR1_SQ4_4                 (0x10UL << ADC_SQR1_SQ4_Pos)            /*!< 0x10000000 */

/********************  Bit definition for ADC_SQR2 register  ******************/
#define ADC_SQR2_SQ5_Pos               (0U)
#define ADC_SQR2_SQ5_Msk               (0x1FUL << ADC_SQR2_SQ5_Pos)            /*!< 0x0000001F */
#define ADC_SQR2_SQ5                   ADC_SQR2_SQ5_Msk                        /*!< ADC group regular sequencer rank 5 */
#define ADC_SQR2_SQ5_0                 (0x01UL << ADC_SQR2_SQ5_Pos)            /*!< 0x00000001 */
#define ADC_SQR2_SQ5_1                 (0x02UL << ADC_SQR2_SQ5_Pos)            /*!< 0x00000002 */
#define ADC_SQR2_SQ5_2                 (0x04UL << ADC_SQR2_SQ5_Pos)            /*!< 0x00000004 */
#define ADC_SQR2_SQ5_3                 (0x08UL << ADC_SQR2_SQ5_Pos)            /*!< 0x00000008 */
#define ADC_SQR2_SQ5_4                 (0x10UL << ADC_SQR2_SQ5_Pos)            /*!< 0x00000010 */

#define ADC_SQR2_SQ6_Pos               (6U)
#define ADC_SQR2_SQ6_Msk               (0x1FUL << ADC_SQR2_SQ6_Pos)            /*!< 0x000007C0 */
#define ADC_SQR2_SQ6                   ADC_SQR2_SQ6_Msk                        /*!< ADC group regular sequencer rank 6 */
#define ADC_SQR2_SQ6_0                 (0x01UL << ADC_SQR2_SQ6_Pos)            /*!< 0x00000040 */
#define ADC_SQR2_SQ6_1                 (0x02UL << ADC_SQR2_SQ6_Pos)            /*!< 0x00000080 */
#define ADC_SQR2_SQ6_2                 (0x04UL << ADC_SQR2_SQ6_Pos)            /*!< 0x00000100 */
#define ADC_SQR2_SQ6_3                 (0x08UL << ADC_SQR2_SQ6_Pos)            /*!< 0x00000200 */
#define ADC_SQR2_SQ6_4                 (0x10UL << ADC_SQR2_SQ6_Pos)            /*!< 0x00000400 */

#define ADC_SQR2_SQ7_Pos               (12U)
#define ADC_SQR2_SQ7_Msk               (0x1FUL << ADC_SQR2_SQ7_Pos)            /*!< 0x0001F000 */
#define ADC_SQR2_SQ7                   ADC_SQR2_SQ7_Msk                        /*!< ADC group regular sequencer rank 7 */
#define ADC_SQR2_SQ7_0                 (0x01UL << ADC_SQR2_SQ7_Pos)            /*!< 0x00001000 */
#define ADC_SQR2_SQ7_1                 (0x02UL << ADC_SQR2_SQ7_Pos)            /*!< 0x00002000 */
#define ADC_SQR2_SQ7_2                 (0x04UL << ADC_SQR2_SQ7_Pos)            /*!< 0x00004000 */
#define ADC_SQR2_SQ7_3                 (0x08UL << ADC_SQR2_SQ7_Pos)            /*!< 0x00008000 */
#define ADC_SQR2_SQ7_4                 (0x10UL << ADC_SQR2_SQ7_Pos)            /*!< 0x00010000 */

#define ADC_SQR2_SQ8_Pos               (18U)
#define ADC_SQR2_SQ8_Msk               (0x1FUL << ADC_SQR2_SQ8_Pos)            /*!< 0x007C0000 */
#define ADC_SQR2_SQ8                   ADC_SQR2_SQ8_Msk                        /*!< ADC group regular sequencer rank 8 */
#define ADC_SQR2_SQ8_0                 (0x01UL << ADC_SQR2_SQ8_Pos)            /*!< 0x00040000 */
#define ADC_SQR2_SQ8_1                 (0x02UL << ADC_SQR2_SQ8_Pos)            /*!< 0x00080000 */
#define ADC_SQR2_SQ8_2                 (0x04UL << ADC_SQR2_SQ8_Pos)            /*!< 0x00100000 */
#define ADC_SQR2_SQ8_3                 (0x08UL << ADC_SQR2_SQ8_Pos)            /*!< 0x00200000 */
#define ADC_SQR2_SQ8_4                 (0x10UL << ADC_SQR2_SQ8_Pos)            /*!< 0x00400000 */

#define ADC_SQR2_SQ9_Pos               (24U)
#define ADC_SQR2_SQ9_Msk               (0x1FUL << ADC_SQR2_SQ9_Pos)            /*!< 0x1F000000 */
#define ADC_SQR2_SQ9                   ADC_SQR2_SQ9_Msk                        /*!< ADC group regular sequencer rank 9 */
#define ADC_SQR2_SQ9_0                 (0x01UL << ADC_SQR2_SQ9_Pos)            /*!< 0x01000000 */
#define ADC_SQR2_SQ9_1                 (0x02UL << ADC_SQR2_SQ9_Pos)            /*!< 0x02000000 */
#define ADC_SQR2_SQ9_2                 (0x04UL << ADC_SQR2_SQ9_Pos)            /*!< 0x04000000 */
#define ADC_SQR2_SQ9_3                 (0x08UL << ADC_SQR2_SQ9_Pos)            /*!< 0x08000000 */
#define ADC_SQR2_SQ9_4                 (0x10UL << ADC_SQR2_SQ9_Pos)            /*!< 0x10000000 */

/********************  Bit definition for ADC_SQR3 register  ******************/
#define ADC_SQR3_SQ10_Pos              (0U)
#define ADC_SQR3_SQ10_Msk              (0x1FUL << ADC_SQR3_SQ10_Pos)           /*!< 0x0000001F */
#define ADC_SQR3_SQ10                  ADC_SQR3_SQ10_Msk                       /*!< ADC group regular sequencer rank 10 */
#define ADC_SQR3_SQ10_0                (0x01UL << ADC_SQR3_SQ10_Pos)           /*!< 0x00000001 */
#define ADC_SQR3_SQ10_1                (0x02UL << ADC_SQR3_SQ10_Pos)           /*!< 0x00000002 */
#define ADC_SQR3_SQ10_2                (0x04UL << ADC_SQR3_SQ10_Pos)           /*!< 0x00000004 */
#define ADC_SQR3_SQ10_3                (0x08UL << ADC_SQR3_SQ10_Pos)           /*!< 0x00000008 */
#define ADC_SQR3_SQ10_4                (0x10UL << ADC_SQR3_SQ10_Pos)           /*!< 0x00000010 */

#define ADC_SQR3_SQ11_Pos              (6U)
#define ADC_SQR3_SQ11_Msk              (0x1FUL << ADC_SQR3_SQ11_Pos)           /*!< 0x000007C0 */
#define ADC_SQR3_SQ11                  ADC_SQR3_SQ11_Msk                       /*!< ADC group regular sequencer rank 11 */
#define ADC_SQR3_SQ11_0                (0x01UL << ADC_SQR3_SQ11_Pos)           /*!< 0x00000040 */
#define ADC_SQR3_SQ11_1                (0x02UL << ADC_SQR3_SQ11_Pos)           /*!< 0x00000080 */
#define ADC_SQR3_SQ11_2                (0x04UL << ADC_SQR3_SQ11_Pos)           /*!< 0x00000100 */
#define ADC_SQR3_SQ11_3                (0x08UL << ADC_SQR3_SQ11_Pos)           /*!< 0x00000200 */
#define ADC_SQR3_SQ11_4                (0x10UL << ADC_SQR3_SQ11_Pos)           /*!< 0x00000400 */

#define ADC_SQR3_SQ12_Pos              (12U)
#define ADC_SQR3_SQ12_Msk              (0x1FUL << ADC_SQR3_SQ12_Pos)           /*!< 0x0001F000 */
#define ADC_SQR3_SQ12                  ADC_SQR3_SQ12_Msk                       /*!< ADC group regular sequencer rank 12 */
#define ADC_SQR3_SQ12_0                (0x01UL << ADC_SQR3_SQ12_Pos)           /*!< 0x00001000 */
#define ADC_SQR3_SQ12_1                (0x02UL << ADC_SQR3_SQ12_Pos)           /*!< 0x00002000 */
#define ADC_SQR3_SQ12_2                (0x04UL << ADC_SQR3_SQ12_Pos)           /*!< 0x00004000 */
#define ADC_SQR3_SQ12_3                (0x08UL << ADC_SQR3_SQ12_Pos)           /*!< 0x00008000 */
#define ADC_SQR3_SQ12_4                (0x10UL << ADC_SQR3_SQ12_Pos)           /*!< 0x00010000 */

#define ADC_SQR3_SQ13_Pos              (18U)
#define ADC_SQR3_SQ13_Msk              (0x1FUL << ADC_SQR3_SQ13_Pos)           /*!< 0x007C0000 */
#define ADC_SQR3_SQ13                  ADC_SQR3_SQ13_Msk                       /*!< ADC group regular sequencer rank 13 */
#define ADC_SQR3_SQ13_0                (0x01UL << ADC_SQR3_SQ13_Pos)           /*!< 0x00040000 */
#define ADC_SQR3_SQ13_1                (0x02UL << ADC_SQR3_SQ13_Pos)           /*!< 0x00080000 */
#define ADC_SQR3_SQ13_2                (0x04UL << ADC_SQR3_SQ13_Pos)           /*!< 0x00100000 */
#define ADC_SQR3_SQ13_3                (0x08UL << ADC_SQR3_SQ13_Pos)           /*!< 0x00200000 */
#define ADC_SQR3_SQ13_4                (0x10UL << ADC_SQR3_SQ13_Pos)           /*!< 0x00400000 */

#define ADC_SQR3_SQ14_Pos              (24U)
#define ADC_SQR3_SQ14_Msk              (0x1FUL << ADC_SQR3_SQ14_Pos)           /*!< 0x1F000000 */
#define ADC_SQR3_SQ14                  ADC_SQR3_SQ14_Msk                       /*!< ADC group regular sequencer rank 14 */
#define ADC_SQR3_SQ14_0                (0x01UL << ADC_SQR3_SQ14_Pos)           /*!< 0x01000000 */
#define ADC_SQR3_SQ14_1                (0x02UL << ADC_SQR3_SQ14_Pos)           /*!< 0x02000000 */
#define ADC_SQR3_SQ14_2                (0x04UL << ADC_SQR3_SQ14_Pos)           /*!< 0x04000000 */
#define ADC_SQR3_SQ14_3                (0x08UL << ADC_SQR3_SQ14_Pos)           /*!< 0x08000000 */
#define ADC_SQR3_SQ14_4                (0x10UL << ADC_SQR3_SQ14_Pos)           /*!< 0x10000000 */

/********************  Bit definition for ADC_SQR4 register  ******************/
#define ADC_SQR4_SQ15_Pos              (0U)
#define ADC_SQR4_SQ15_Msk              (0x1FUL << ADC_SQR4_SQ15_Pos)           /*!< 0x0000001F */
#define ADC_SQR4_SQ15                  ADC_SQR4_SQ15_Msk                       /*!< ADC group regular sequencer rank 15 */
#define ADC_SQR4_SQ15_0                (0x01UL << ADC_SQR4_SQ15_Pos)           /*!< 0x00000001 */
#define ADC_SQR4_SQ15_1                (0x02UL << ADC_SQR4_SQ15_Pos)           /*!< 0x00000002 */
#define ADC_SQR4_SQ15_2                (0x04UL << ADC_SQR4_SQ15_Pos)           /*!< 0x00000004 */
#define ADC_SQR4_SQ15_3                (0x08UL << ADC_SQR4_SQ15_Pos)           /*!< 0x00000008 */
#define ADC_SQR4_SQ15_4                (0x10UL << ADC_SQR4_SQ15_Pos)           /*!< 0x00000010 */

#define ADC_SQR4_SQ16_Pos              (6U)
#define ADC_SQR4_SQ16_Msk              (0x1FUL << ADC_SQR4_SQ16_Pos)           /*!< 0x000007C0 */
#define ADC_SQR4_SQ16                  ADC_SQR4_SQ16_Msk                       /*!< ADC group regular sequencer rank 16 */
#define ADC_SQR4_SQ16_0                (0x01UL << ADC_SQR4_SQ16_Pos)           /*!< 0x00000040 */
#define ADC_SQR4_SQ16_1                (0x02UL << ADC_SQR4_SQ16_Pos)           /*!< 0x00000080 */
#define ADC_SQR4_SQ16_2                (0x04UL << ADC_SQR4_SQ16_Pos)           /*!< 0x00000100 */
#define ADC_SQR4_SQ16_3                (0x08UL << ADC_SQR4_SQ16_Pos)           /*!< 0x00000200 */
#define ADC_SQR4_SQ16_4                (0x10UL << ADC_SQR4_SQ16_Pos)           /*!< 0x00000400 */

/********************  Bit definition for ADC_DR register  ********************/
#define ADC_DR_RDATA_Pos               (0U)
#define ADC_DR_RDATA_Msk               (0xFFFFFFFFUL << ADC_DR_RDATA_Pos)      /*!< 0xFFFFFFFF */
#define ADC_DR_RDATA                   ADC_DR_RDATA_Msk                        /*!< ADC group regular conversion data */
#define ADC_DR_RDATA_0                 (0x00000001UL << ADC_DR_RDATA_Pos)      /*!< 0x00000001 */
#define ADC_DR_RDATA_1                 (0x00000002UL << ADC_DR_RDATA_Pos)      /*!< 0x00000002 */
#define ADC_DR_RDATA_2                 (0x00000004UL << ADC_DR_RDATA_Pos)      /*!< 0x00000004 */
#define ADC_DR_RDATA_3                 (0x00000008UL << ADC_DR_RDATA_Pos)      /*!< 0x00000008 */
#define ADC_DR_RDATA_4                 (0x00000010UL << ADC_DR_RDATA_Pos)      /*!< 0x00000010 */
#define ADC_DR_RDATA_5                 (0x00000020UL << ADC_DR_RDATA_Pos)      /*!< 0x00000020 */
#define ADC_DR_RDATA_6                 (0x00000040UL << ADC_DR_RDATA_Pos)      /*!< 0x00000040 */
#define ADC_DR_RDATA_7                 (0x00000080UL << ADC_DR_RDATA_Pos)      /*!< 0x00000080 */
#define ADC_DR_RDATA_8                 (0x00000100UL << ADC_DR_RDATA_Pos)      /*!< 0x00000100 */
#define ADC_DR_RDATA_9                 (0x00000200UL << ADC_DR_RDATA_Pos)      /*!< 0x00000200 */
#define ADC_DR_RDATA_10                (0x00000400UL << ADC_DR_RDATA_Pos)      /*!< 0x00000400 */
#define ADC_DR_RDATA_11                (0x00000800UL << ADC_DR_RDATA_Pos)      /*!< 0x00000800 */
#define ADC_DR_RDATA_12                (0x00001000UL << ADC_DR_RDATA_Pos)      /*!< 0x00001000 */
#define ADC_DR_RDATA_13                (0x00002000UL << ADC_DR_RDATA_Pos)      /*!< 0x00002000 */
#define ADC_DR_RDATA_14                (0x00004000UL << ADC_DR_RDATA_Pos)      /*!< 0x00004000 */
#define ADC_DR_RDATA_15                (0x00008000UL << ADC_DR_RDATA_Pos)      /*!< 0x00008000 */
#define ADC_DR_RDATA_16                (0x00010000UL << ADC_DR_RDATA_Pos)      /*!< 0x00010000 */
#define ADC_DR_RDATA_17                (0x00020000UL << ADC_DR_RDATA_Pos)      /*!< 0x00020000 */
#define ADC_DR_RDATA_18                (0x00040000UL << ADC_DR_RDATA_Pos)      /*!< 0x00040000 */
#define ADC_DR_RDATA_19                (0x00080000UL << ADC_DR_RDATA_Pos)      /*!< 0x00080000 */
#define ADC_DR_RDATA_20                (0x00100000UL << ADC_DR_RDATA_Pos)      /*!< 0x00100000 */
#define ADC_DR_RDATA_21                (0x00200000UL << ADC_DR_RDATA_Pos)      /*!< 0x00200000 */
#define ADC_DR_RDATA_22                (0x00400000UL << ADC_DR_RDATA_Pos)      /*!< 0x00400000 */
#define ADC_DR_RDATA_23                (0x00800000UL << ADC_DR_RDATA_Pos)      /*!< 0x00800000 */
#define ADC_DR_RDATA_24                (0x01000000UL << ADC_DR_RDATA_Pos)      /*!< 0x01000000 */
#define ADC_DR_RDATA_25                (0x02000000UL << ADC_DR_RDATA_Pos)      /*!< 0x02000000 */
#define ADC_DR_RDATA_26                (0x04000000UL << ADC_DR_RDATA_Pos)      /*!< 0x04000000 */
#define ADC_DR_RDATA_27                (0x08000000UL << ADC_DR_RDATA_Pos)      /*!< 0x08000000 */
#define ADC_DR_RDATA_28                (0x10000000UL << ADC_DR_RDATA_Pos)      /*!< 0x10000000 */
#define ADC_DR_RDATA_29                (0x20000000UL << ADC_DR_RDATA_Pos)      /*!< 0x20000000 */
#define ADC_DR_RDATA_30                (0x40000000UL << ADC_DR_RDATA_Pos)      /*!< 0x40000000 */
#define ADC_DR_RDATA_31                (0x80000000UL << ADC_DR_RDATA_Pos)      /*!< 0x80000000 */

/********************  Bit definition for ADC_JSQR register  ******************/
#define ADC_JSQR_JL_Pos                (0U)
#define ADC_JSQR_JL_Msk                (0x3UL << ADC_JSQR_JL_Pos)              /*!< 0x00000003 */
#define ADC_JSQR_JL                    ADC_JSQR_JL_Msk                         /*!< ADC group injected sequencer scan length */
#define ADC_JSQR_JL_0                  (0x1UL << ADC_JSQR_JL_Pos)              /*!< 0x00000001 */
#define ADC_JSQR_JL_1                  (0x2UL << ADC_JSQR_JL_Pos)              /*!< 0x00000002 */

#define ADC_JSQR_JEXTSEL_Pos           (2U)
#define ADC_JSQR_JEXTSEL_Msk           (0x1FUL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x0000007C */
#define ADC_JSQR_JEXTSEL               ADC_JSQR_JEXTSEL_Msk                    /*!< ADC group injected external trigger source */
#define ADC_JSQR_JEXTSEL_0             (0x01UL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x00000004 */
#define ADC_JSQR_JEXTSEL_1             (0x02UL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x00000008 */
#define ADC_JSQR_JEXTSEL_2             (0x04UL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x00000010 */
#define ADC_JSQR_JEXTSEL_3             (0x08UL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x00000020 */
#define ADC_JSQR_JEXTSEL_4             (0x10UL << ADC_JSQR_JEXTSEL_Pos)        /*!< 0x00000040 */

#define ADC_JSQR_JEXTEN_Pos            (7U)
#define ADC_JSQR_JEXTEN_Msk            (0x3UL << ADC_JSQR_JEXTEN_Pos)          /*!< 0x00000180 */
#define ADC_JSQR_JEXTEN                ADC_JSQR_JEXTEN_Msk                     /*!< ADC group injected external trigger polarity */
#define ADC_JSQR_JEXTEN_0              (0x1UL << ADC_JSQR_JEXTEN_Pos)          /*!< 0x00000080 */
#define ADC_JSQR_JEXTEN_1              (0x2UL << ADC_JSQR_JEXTEN_Pos)          /*!< 0x00000100 */

#define ADC_JSQR_JSQ1_Pos              (9U)
#define ADC_JSQR_JSQ1_Msk              (0x1FUL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00003E00 */
#define ADC_JSQR_JSQ1                  ADC_JSQR_JSQ1_Msk                       /*!< ADC group injected sequencer rank 1 */
#define ADC_JSQR_JSQ1_0                (0x01UL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00000200 */
#define ADC_JSQR_JSQ1_1                (0x02UL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00000400 */
#define ADC_JSQR_JSQ1_2                (0x04UL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00000800 */
#define ADC_JSQR_JSQ1_3                (0x08UL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00001000 */
#define ADC_JSQR_JSQ1_4                (0x10UL << ADC_JSQR_JSQ1_Pos)           /*!< 0x00002000 */

#define ADC_JSQR_JSQ2_Pos              (15U)
#define ADC_JSQR_JSQ2_Msk              (0x1FUL << ADC_JSQR_JSQ2_Pos)           /*!< 0x000F8000 */
#define ADC_JSQR_JSQ2                  ADC_JSQR_JSQ2_Msk                       /*!< ADC group injected sequencer rank 2 */
#define ADC_JSQR_JSQ2_0                (0x01UL << ADC_JSQR_JSQ2_Pos)           /*!< 0x00008000 */
#define ADC_JSQR_JSQ2_1                (0x02UL << ADC_JSQR_JSQ2_Pos)           /*!< 0x00010000 */
#define ADC_JSQR_JSQ2_2                (0x04UL << ADC_JSQR_JSQ2_Pos)           /*!< 0x00020000 */
#define ADC_JSQR_JSQ2_3                (0x08UL << ADC_JSQR_JSQ2_Pos)           /*!< 0x00040000 */
#define ADC_JSQR_JSQ2_4                (0x10UL << ADC_JSQR_JSQ2_Pos)           /*!< 0x00080000 */

#define ADC_JSQR_JSQ3_Pos              (21U)
#define ADC_JSQR_JSQ3_Msk              (0x1FUL << ADC_JSQR_JSQ3_Pos)           /*!< 0x03E00000 */
#define ADC_JSQR_JSQ3                  ADC_JSQR_JSQ3_Msk                       /*!< ADC group injected sequencer rank 3 */
#define ADC_JSQR_JSQ3_0                (0x01UL << ADC_JSQR_JSQ3_Pos)           /*!< 0x00200000 */
#define ADC_JSQR_JSQ3_1                (0x02UL << ADC_JSQR_JSQ3_Pos)           /*!< 0x00400000 */
#define ADC_JSQR_JSQ3_2                (0x04UL << ADC_JSQR_JSQ3_Pos)           /*!< 0x00800000 */
#define ADC_JSQR_JSQ3_3                (0x08UL << ADC_JSQR_JSQ3_Pos)           /*!< 0x01000000 */
#define ADC_JSQR_JSQ3_4                (0x10UL << ADC_JSQR_JSQ3_Pos)           /*!< 0x02000000 */

#define ADC_JSQR_JSQ4_Pos              (27U)
#define ADC_JSQR_JSQ4_Msk              (0x1FUL << ADC_JSQR_JSQ4_Pos)           /*!< 0xF8000000 */
#define ADC_JSQR_JSQ4                  ADC_JSQR_JSQ4_Msk                       /*!< ADC group injected sequencer rank 4 */
#define ADC_JSQR_JSQ4_0                (0x01UL << ADC_JSQR_JSQ4_Pos)           /*!< 0x08000000 */
#define ADC_JSQR_JSQ4_1                (0x02UL << ADC_JSQR_JSQ4_Pos)           /*!< 0x10000000 */
#define ADC_JSQR_JSQ4_2                (0x04UL << ADC_JSQR_JSQ4_Pos)           /*!< 0x20000000 */
#define ADC_JSQR_JSQ4_3                (0x08UL << ADC_JSQR_JSQ4_Pos)           /*!< 0x40000000 */
#define ADC_JSQR_JSQ4_4                (0x10UL << ADC_JSQR_JSQ4_Pos)           /*!< 0x80000000 */

/********************  Bit definition for ADC_OFCFGR1 register  ***************/
#define ADC_OFCFGR1_POSOFF_Pos         (24U)
#define ADC_OFCFGR1_POSOFF_Msk         (0x01UL << ADC_OFCFGR1_POSOFF_Pos)      /*!< 0x01000000 */
#define ADC_OFCFGR1_POSOFF             ADC_OFCFGR1_POSOFF_Msk                  /*!< ADC offset instance 1 positive offset enable */

#define ADC_OFCFGR1_USAT_Pos           (25U)
#define ADC_OFCFGR1_USAT_Msk           (0x01UL << ADC_OFCFGR1_USAT_Pos)        /*!< 0x02000000 */
#define ADC_OFCFGR1_USAT               ADC_OFCFGR1_USAT_Msk                    /*!< ADC offset instance 1  unsigned saturation value */

#define ADC_OFCFGR1_SSAT_Pos           (26U)
#define ADC_OFCFGR1_SSAT_Msk           (0x01UL << ADC_OFCFGR1_SSAT_Pos)        /*!< 0x04000000 */
#define ADC_OFCFGR1_SSAT               ADC_OFCFGR1_SSAT_Msk                    /*!< ADC offset instance 1 signed satuaration enable */

#define ADC_OFCFGR1_OFFSET_CH_Pos      (27U)
#define ADC_OFCFGR1_OFFSET_CH_Msk      (0x1FUL << ADC_OFCFGR1_OFFSET_CH_Pos)   /*!< 0xF8000000 */
#define ADC_OFCFGR1_OFFSET_CH          ADC_OFCFGR1_OFFSET_CH_Msk               /*!< ADC offset instance 1 channel selection */
#define ADC_OFCFGR1_OFFSET_CH_0        (0x01UL << ADC_OFCFGR1_OFFSET1_CH_Pos)  /*!< 0x08000000 */
#define ADC_OFCFGR1_OFFSET_CH_1        (0x02UL << ADC_OFCFGR1_OFFSET1_CH_Pos)  /*!< 0x10000000 */
#define ADC_OFCFGR1_OFFSET_CH_2        (0x03UL << ADC_OFCFGR1_OFFSET1_CH_Pos)  /*!< 0x20000000 */
#define ADC_OFCFGR1_OFFSET_CH_3        (0x04UL << ADC_OFCFGR1_OFFSET1_CH_Pos)  /*!< 0x40000000 */
#define ADC_OFCFGR1_OFFSET_CH_4        (0x05UL << ADC_OFCFGR1_OFFSET1_CH_Pos)  /*!< 0x80000000 */

/********************  Bit definition for ADC_OFCFGR2 register  ***************/
#define ADC_OFCFGR2_POSOFF_Pos         (24U)
#define ADC_OFCFGR2_POSOFF_Msk         (0x01UL << ADC_OFCFGR2_POSOFF_Pos)      /*!< 0x01000000 */
#define ADC_OFCFGR2_POSOFF             ADC_OFCFGR2_POSOFF_Msk                  /*!< ADC offset instance 2 positive offset enable */

#define ADC_OFCFGR2_USAT_Pos           (25U)
#define ADC_OFCFGR2_USAT_Msk           (0x01UL << ADC_OFCFGR2_USAT_Pos)        /*!< 0x02000000 */
#define ADC_OFCFGR2_USAT               ADC_OFCFGR2_USAT_Msk                    /*!< ADC offset instance 2 unsigned saturation value */

#define ADC_OFCFGR2_SSAT_Pos           (26U)
#define ADC_OFCFGR2_SSAT_Msk           (0x01UL << ADC_OFCFGR2_SSAT_Pos)        /*!< 0x04000000 */
#define ADC_OFCFGR2_SSAT               ADC_OFCFGR2_SSAT_Msk                    /*!< ADC offset instance 2 signed satuaration enable */

#define ADC_OFCFGR2_OFFSET_CH_Pos      (27U)
#define ADC_OFCFGR2_OFFSET_CH_Msk      (0x1FUL << ADC_OFCFGR2_OFFSET_CH_Pos)   /*!< 0xF8000000 */
#define ADC_OFCFGR2_OFFSET_CH          ADC_OFCFGR2_OFFSET_CH_Msk               /*!< ADC offset instance 2 channel selection */
#define ADC_OFCFGR2_OFFSET_CH_0        (0x01UL << ADC_OFCFGR2_OFFSET2_CH_Pos)  /*!< 0x08000000 */
#define ADC_OFCFGR2_OFFSET_CH_1        (0x02UL << ADC_OFCFGR2_OFFSET2_CH_Pos)  /*!< 0x10000000 */
#define ADC_OFCFGR2_OFFSET_CH_2        (0x03UL << ADC_OFCFGR2_OFFSET2_CH_Pos)  /*!< 0x20000000 */
#define ADC_OFCFGR2_OFFSET_CH_3        (0x04UL << ADC_OFCFGR2_OFFSET2_CH_Pos)  /*!< 0x40000000 */
#define ADC_OFCFGR2_OFFSET_CH_4        (0x05UL << ADC_OFCFGR2_OFFSET1_CH_Pos)  /*!< 0x80000000 */

/********************  Bit definition for ADC_OFCFGR3 register  ***************/
#define ADC_OFCFGR3_POSOFF_Pos         (24U)
#define ADC_OFCFGR3_POSOFF_Msk         (0x01UL << ADC_OFCFGR3_POSOFF_Pos)      /*!< 0x01000000 */
#define ADC_OFCFGR3_POSOFF             ADC_OFCFGR3_POSOFF_Msk                  /*!< ADC offset instance 3 positive offset enable */

#define ADC_OFCFGR3_USAT_Pos           (25U)
#define ADC_OFCFGR3_USAT_Msk           (0x01UL << ADC_OFCFGR3_USAT_Pos)        /*!< 0x02000000 */
#define ADC_OFCFGR3_USAT               ADC_OFCFGR3_USAT_Msk                    /*!< ADC offset instance 3 unsigned saturation value */

#define ADC_OFCFGR3_SSAT_Pos           (26U)
#define ADC_OFCFGR3_SSAT_Msk           (0x01UL << ADC_OFCFGR3_SSAT_Pos)        /*!< 0x04000000 */
#define ADC_OFCFGR3_SSAT               ADC_OFCFGR3_SSAT_Msk                    /*!< ADC offset instance 3 signed satuaration enable */

#define ADC_OFCFGR3_OFFSET_CH_Pos      (27U)
#define ADC_OFCFGR3_OFFSET_CH_Msk      (0x1FUL << ADC_OFCFGR3_OFFSET_CH_Pos)   /*!< 0xF8000000 */
#define ADC_OFCFGR3_OFFSET_CH          ADC_OFCFGR3_OFFSET_CH_Msk               /*!< ADC offset instance 3 channel selection for the data offset */
#define ADC_OFCFGR3_OFFSET_CH_0        (0x01UL << ADC_OFCFGR3_OFFSET3_CH_Pos)  /*!< 0x08000000 */
#define ADC_OFCFGR3_OFFSET_CH_1        (0x02UL << ADC_OFCFGR3_OFFSET3_CH_Pos)  /*!< 0x10000000 */
#define ADC_OFCFGR3_OFFSET_CH_2        (0x03UL << ADC_OFCFGR3_OFFSET3_CH_Pos)  /*!< 0x20000000 */
#define ADC_OFCFGR3_OFFSET_CH_3        (0x04UL << ADC_OFCFGR3_OFFSET3_CH_Pos)  /*!< 0x40000000 */
#define ADC_OFCFGR3_OFFSET_CH_4        (0x05UL << ADC_OFCFGR3_OFFSET3_CH_Pos)  /*!< 0x80000000 */

/********************  Bit definition for ADC_OFCFGR4 register  ***************/
#define ADC_OFCFGR4_POSOFF_Pos         (24U)
#define ADC_OFCFGR4_POSOFF_Msk         (0x01UL << ADC_OFCFGR4_POSOFF_Pos)      /*!< 0x01000000 */
#define ADC_OFCFGR4_POSOFF             ADC_OFCFGR4_POSOFF_Msk                  /*!< ADC offset instance 4 positive offset enable */

#define ADC_OFCFGR4_USAT_Pos           (25U)
#define ADC_OFCFGR4_USAT_Msk           (0x01UL << ADC_OFCFGR4_USAT_Pos)        /*!< 0x02000000 */
#define ADC_OFCFGR4_USAT               ADC_OFCFGR4_USAT_Msk                    /*!< ADC offset instance 4 unsigned saturation value */

#define ADC_OFCFGR4_SSAT_Pos           (26U)
#define ADC_OFCFGR4_SSAT_Msk           (0x01UL << ADC_OFCFGR4_SSAT_Pos)        /*!< 0x04000000 */
#define ADC_OFCFGR4_SSAT               ADC_OFCFGR4_SSAT_Msk                    /*!< ADC offset instance 4 signed satuaration enable */

#define ADC_OFCFGR4_OFFSET_CH_Pos      (27U)
#define ADC_OFCFGR4_OFFSET_CH_Msk      (0x1FUL << ADC_OFCFGR4_OFFSET_CH_Pos)   /*!< 0xF8000000 */
#define ADC_OFCFGR4_OFFSET_CH          ADC_OFCFGR4_OFFSET_CH_Msk               /*!< ADC offset instance 4 channel selection for the data offset */
#define ADC_OFCFGR4_OFFSET_CH_0        (0x01UL << ADC_OFCFGR4_OFFSET4_CH_Pos)  /*!< 0x08000000 */
#define ADC_OFCFGR4_OFFSET_CH_1        (0x02UL << ADC_OFCFGR4_OFFSET4_CH_Pos)  /*!< 0x10000000 */
#define ADC_OFCFGR4_OFFSET_CH_2        (0x03UL << ADC_OFCFGR4_OFFSET4_CH_Pos)  /*!< 0x20000000 */
#define ADC_OFCFGR4_OFFSET_CH_3        (0x04UL << ADC_OFCFGR4_OFFSET4_CH_Pos)  /*!< 0x40000000 */
#define ADC_OFCFGR4_OFFSET_CH_4        (0x05UL << ADC_OFCFGR4_OFFSET4_CH_Pos)  /*!< 0x80000000 */

/********************  Bit definition for ADC_OFR1 register  ******************/
#define ADC_OFR1_OFFSET_Pos            (0U)
#define ADC_OFR1_OFFSET_Msk            (0x03FFFFFUL << ADC_OFR1_OFFSET_Pos)    /*!< 0x003FFFFF */
#define ADC_OFR1_OFFSET                ADC_OFR1_OFFSET_Msk                     /*!< ADC offset instance 1 offset level */
#define ADC_OFR1_OFFSET_0              (0x0000001UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000001 */
#define ADC_OFR1_OFFSET_1              (0x0000002UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000002 */
#define ADC_OFR1_OFFSET_2              (0x0000004UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000004 */
#define ADC_OFR1_OFFSET_3              (0x0000008UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000008 */
#define ADC_OFR1_OFFSET_4              (0x0000010UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000010 */
#define ADC_OFR1_OFFSET_5              (0x0000020UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000020 */
#define ADC_OFR1_OFFSET_6              (0x0000040UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000040 */
#define ADC_OFR1_OFFSET_7              (0x0000080UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000080 */
#define ADC_OFR1_OFFSET_8              (0x0000100UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000100 */
#define ADC_OFR1_OFFSET_9              (0x0000200UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000200 */
#define ADC_OFR1_OFFSET_10             (0x0000400UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000400 */
#define ADC_OFR1_OFFSET_11             (0x0000800UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00000800 */
#define ADC_OFR1_OFFSET_12             (0x0001000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00001000 */
#define ADC_OFR1_OFFSET_13             (0x0002000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00002000 */
#define ADC_OFR1_OFFSET_14             (0x0004000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00004000 */
#define ADC_OFR1_OFFSET_15             (0x0008000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00008000 */
#define ADC_OFR1_OFFSET_16             (0x0010000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00010000 */
#define ADC_OFR1_OFFSET_17             (0x0020000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00020000 */
#define ADC_OFR1_OFFSET_18             (0x0040000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00040000 */
#define ADC_OFR1_OFFSET_19             (0x0080000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00080000 */
#define ADC_OFR1_OFFSET_20             (0x0100000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00100000 */
#define ADC_OFR1_OFFSET_21             (0x0200000UL << ADC_OFR1_OFFSET_Pos)    /*!< 0x00200000 */

/********************  Bit definition for ADC_OFR2 register  ******************/
#define ADC_OFR2_OFFSET_Pos            (0U)
#define ADC_OFR2_OFFSET_Msk            (0x03FFFFFUL << ADC_OFR2_OFFSET_Pos)    /*!< 0x003FFFFF */
#define ADC_OFR2_OFFSET                ADC_OFR2_OFFSET_Msk                     /*!< ADC offset instance 2 offset level */
#define ADC_OFR2_OFFSET_0              (0x0000001UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000001 */
#define ADC_OFR2_OFFSET_1              (0x0000002UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000002 */
#define ADC_OFR2_OFFSET_2              (0x0000004UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000004 */
#define ADC_OFR2_OFFSET_3              (0x0000008UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000008 */
#define ADC_OFR2_OFFSET_4              (0x0000010UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000010 */
#define ADC_OFR2_OFFSET_5              (0x0000020UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000020 */
#define ADC_OFR2_OFFSET_6              (0x0000040UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000040 */
#define ADC_OFR2_OFFSET_7              (0x0000080UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000080 */
#define ADC_OFR2_OFFSET_8              (0x0000100UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000100 */
#define ADC_OFR2_OFFSET_9              (0x0000200UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000200 */
#define ADC_OFR2_OFFSET_10             (0x0000400UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000400 */
#define ADC_OFR2_OFFSET_11             (0x0000800UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00000800 */
#define ADC_OFR2_OFFSET_12             (0x0001000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00001000 */
#define ADC_OFR2_OFFSET_13             (0x0002000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00002000 */
#define ADC_OFR2_OFFSET_14             (0x0004000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00004000 */
#define ADC_OFR2_OFFSET_15             (0x0008000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00008000 */
#define ADC_OFR2_OFFSET_16             (0x0010000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00010000 */
#define ADC_OFR2_OFFSET_17             (0x0020000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00020000 */
#define ADC_OFR2_OFFSET_18             (0x0040000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00040000 */
#define ADC_OFR2_OFFSET_19             (0x0080000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00080000 */
#define ADC_OFR2_OFFSET_20             (0x0100000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00100000 */
#define ADC_OFR2_OFFSET_21             (0x0200000UL << ADC_OFR2_OFFSET_Pos)    /*!< 0x00200000 */

/********************  Bit definition for ADC_OFR3 register  ******************/
#define ADC_OFR3_OFFSET_Pos            (0U)
#define ADC_OFR3_OFFSET_Msk            (0x03FFFFFUL << ADC_OFR3_OFFSET_Pos)    /*!< 0x003FFFFF */
#define ADC_OFR3_OFFSET                ADC_OFR3_OFFSET_Msk                     /*!< ADC offset instance 3 offset level */
#define ADC_OFR3_OFFSET_0              (0x0000001UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000001 */
#define ADC_OFR3_OFFSET_1              (0x0000002UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000002 */
#define ADC_OFR3_OFFSET_2              (0x0000004UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000004 */
#define ADC_OFR3_OFFSET_3              (0x0000008UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000008 */
#define ADC_OFR3_OFFSET_4              (0x0000010UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000010 */
#define ADC_OFR3_OFFSET_5              (0x0000020UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000020 */
#define ADC_OFR3_OFFSET_6              (0x0000040UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000040 */
#define ADC_OFR3_OFFSET_7              (0x0000080UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000080 */
#define ADC_OFR3_OFFSET_8              (0x0000100UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000100 */
#define ADC_OFR3_OFFSET_9              (0x0000200UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000200 */
#define ADC_OFR3_OFFSET_10             (0x0000400UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000400 */
#define ADC_OFR3_OFFSET_11             (0x0000800UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00000800 */
#define ADC_OFR3_OFFSET_12             (0x0001000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00001000 */
#define ADC_OFR3_OFFSET_13             (0x0002000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00002000 */
#define ADC_OFR3_OFFSET_14             (0x0004000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00004000 */
#define ADC_OFR3_OFFSET_15             (0x0008000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00008000 */
#define ADC_OFR3_OFFSET_16             (0x0010000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00010000 */
#define ADC_OFR3_OFFSET_17             (0x0020000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00020000 */
#define ADC_OFR3_OFFSET_18             (0x0040000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00040000 */
#define ADC_OFR3_OFFSET_19             (0x0080000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00080000 */
#define ADC_OFR3_OFFSET_20             (0x0100000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00100000 */
#define ADC_OFR3_OFFSET_21             (0x0200000UL << ADC_OFR3_OFFSET_Pos)    /*!< 0x00200000 */

/********************  Bit definition for ADC_OFR4 register  ******************/
#define ADC_OFR4_OFFSET_Pos            (0U)
#define ADC_OFR4_OFFSET_Msk            (0x03FFFFFUL << ADC_OFR4_OFFSET_Pos)    /*!< 0x003FFFFF */
#define ADC_OFR4_OFFSET                ADC_OFR4_OFFSET_Msk                     /*!< ADC offset instance 4 offset level */
#define ADC_OFR4_OFFSET_0              (0x0000001UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000001 */
#define ADC_OFR4_OFFSET_1              (0x0000002UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000002 */
#define ADC_OFR4_OFFSET_2              (0x0000004UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000004 */
#define ADC_OFR4_OFFSET_3              (0x0000008UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000008 */
#define ADC_OFR4_OFFSET_4              (0x0000010UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000010 */
#define ADC_OFR4_OFFSET_5              (0x0000020UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000020 */
#define ADC_OFR4_OFFSET_6              (0x0000040UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000040 */
#define ADC_OFR4_OFFSET_7              (0x0000080UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000080 */
#define ADC_OFR4_OFFSET_8              (0x0000100UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000100 */
#define ADC_OFR4_OFFSET_9              (0x0000200UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000200 */
#define ADC_OFR4_OFFSET_10             (0x0000400UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000400 */
#define ADC_OFR4_OFFSET_11             (0x0000800UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00000800 */
#define ADC_OFR4_OFFSET_12             (0x0001000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00001000 */
#define ADC_OFR4_OFFSET_13             (0x0002000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00002000 */
#define ADC_OFR4_OFFSET_14             (0x0004000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00004000 */
#define ADC_OFR4_OFFSET_15             (0x0008000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00008000 */
#define ADC_OFR4_OFFSET_16             (0x0010000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00010000 */
#define ADC_OFR4_OFFSET_17             (0x0020000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00020000 */
#define ADC_OFR4_OFFSET_18             (0x0040000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00040000 */
#define ADC_OFR4_OFFSET_19             (0x0080000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00080000 */
#define ADC_OFR4_OFFSET_20             (0x0100000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00100000 */
#define ADC_OFR4_OFFSET_21             (0x0200000UL << ADC_OFR4_OFFSET_Pos)    /*!< 0x00200000 */

/********************  Bit definition for ADC_GCOMP register  *****************/
#define ADC_GCOMP_GCOMPCOEFF_Pos       (0U)
#define ADC_GCOMP_GCOMPCOEFF_Msk       (0x3FFFUL << ADC_GCOMP_GCOMPCOEFF_Pos)  /*!< 0x00003FFF */
#define ADC_GCOMP_GCOMPCOEFF           ADC_GCOMP_GCOMPCOEFF_Msk                /*!< Gain compensation coefficient */
#define ADC_GCOMP_GCOMP_Pos            (31U)
#define ADC_GCOMP_GCOMP_Msk            (0x1UL << ADC_GCOMP_GCOMP_Pos)          /*!< 0x80000000 */
#define ADC_GCOMP_GCOMP                ADC_GCOMP_GCOMP_Msk                     /*!< Gain compensation mode */

/********************  Bit definition for ADC_JDR1 register  ******************/
#define ADC_JDR1_JDATA_Pos             (0U)
#define ADC_JDR1_JDATA_Msk             (0xFFFFFFFFUL << ADC_JDR1_JDATA_Pos)    /*!< 0xFFFFFFFF */
#define ADC_JDR1_JDATA                 ADC_JDR1_JDATA_Msk                      /*!< ADC group injected sequencer rank 1 conversion data */
#define ADC_JDR1_JDATA_0               (0x00000001UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000001 */
#define ADC_JDR1_JDATA_1               (0x00000002UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000002 */
#define ADC_JDR1_JDATA_2               (0x00000004UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000004 */
#define ADC_JDR1_JDATA_3               (0x00000008UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000008 */
#define ADC_JDR1_JDATA_4               (0x00000010UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000010 */
#define ADC_JDR1_JDATA_5               (0x00000020UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000020 */
#define ADC_JDR1_JDATA_6               (0x00000040UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000040 */
#define ADC_JDR1_JDATA_7               (0x00000080UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000080 */
#define ADC_JDR1_JDATA_8               (0x00000100UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000100 */
#define ADC_JDR1_JDATA_9               (0x00000200UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000200 */
#define ADC_JDR1_JDATA_10              (0x00000400UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000400 */
#define ADC_JDR1_JDATA_11              (0x00000800UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00000800 */
#define ADC_JDR1_JDATA_12              (0x00001000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00001000 */
#define ADC_JDR1_JDATA_13              (0x00002000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00002000 */
#define ADC_JDR1_JDATA_14              (0x00004000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00004000 */
#define ADC_JDR1_JDATA_15              (0x00008000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00008000 */
#define ADC_JDR1_JDATA_16              (0x00010000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00010000 */
#define ADC_JDR1_JDATA_17              (0x00020000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00020000 */
#define ADC_JDR1_JDATA_18              (0x00040000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00040000 */
#define ADC_JDR1_JDATA_19              (0x00080000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00080000 */
#define ADC_JDR1_JDATA_20              (0x00100000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00100000 */
#define ADC_JDR1_JDATA_21              (0x00200000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00200000 */
#define ADC_JDR1_JDATA_22              (0x00400000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00400000 */
#define ADC_JDR1_JDATA_23              (0x00800000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x00800000 */
#define ADC_JDR1_JDATA_24              (0x01000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x01000000 */
#define ADC_JDR1_JDATA_25              (0x02000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x02000000 */
#define ADC_JDR1_JDATA_26              (0x04000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x04000000 */
#define ADC_JDR1_JDATA_27              (0x08000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x08000000 */
#define ADC_JDR1_JDATA_28              (0x10000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x10000000 */
#define ADC_JDR1_JDATA_29              (0x20000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x20000000 */
#define ADC_JDR1_JDATA_30              (0x40000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x40000000 */
#define ADC_JDR1_JDATA_31              (0x80000000UL << ADC_JDR1_JDATA_Pos)    /*!< 0x80000000 */

/********************  Bit definition for ADC_JDR2 register  ********************/
#define ADC_JDR2_JDATA_Pos             (0U)
#define ADC_JDR2_JDATA_Msk             (0xFFFFFFFFUL << ADC_JDR2_JDATA_Pos)    /*!< 0xFFFFFFFF */
#define ADC_JDR2_JDATA                 ADC_JDR2_JDATA_Msk                      /*!< ADC group injected sequencer rank 2 conversion data */
#define ADC_JDR2_JDATA_0               (0x00000001UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000001 */
#define ADC_JDR2_JDATA_1               (0x00000002UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000002 */
#define ADC_JDR2_JDATA_2               (0x00000004UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000004 */
#define ADC_JDR2_JDATA_3               (0x00000008UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000008 */
#define ADC_JDR2_JDATA_4               (0x00000010UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000010 */
#define ADC_JDR2_JDATA_5               (0x00000020UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000020 */
#define ADC_JDR2_JDATA_6               (0x00000040UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000040 */
#define ADC_JDR2_JDATA_7               (0x00000080UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000080 */
#define ADC_JDR2_JDATA_8               (0x00000100UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000100 */
#define ADC_JDR2_JDATA_9               (0x00000200UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000200 */
#define ADC_JDR2_JDATA_10              (0x00000400UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000400 */
#define ADC_JDR2_JDATA_11              (0x00000800UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00000800 */
#define ADC_JDR2_JDATA_12              (0x00001000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00001000 */
#define ADC_JDR2_JDATA_13              (0x00002000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00002000 */
#define ADC_JDR2_JDATA_14              (0x00004000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00004000 */
#define ADC_JDR2_JDATA_15              (0x00008000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00008000 */
#define ADC_JDR2_JDATA_16              (0x00010000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00010000 */
#define ADC_JDR2_JDATA_17              (0x00020000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00020000 */
#define ADC_JDR2_JDATA_18              (0x00040000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00040000 */
#define ADC_JDR2_JDATA_19              (0x00080000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00080000 */
#define ADC_JDR2_JDATA_20              (0x00100000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00100000 */
#define ADC_JDR2_JDATA_21              (0x00200000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00200000 */
#define ADC_JDR2_JDATA_22              (0x00400000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00400000 */
#define ADC_JDR2_JDATA_23              (0x00800000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x00800000 */
#define ADC_JDR2_JDATA_24              (0x01000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x01000000 */
#define ADC_JDR2_JDATA_25              (0x02000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x02000000 */
#define ADC_JDR2_JDATA_26              (0x04000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x04000000 */
#define ADC_JDR2_JDATA_27              (0x08000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x08000000 */
#define ADC_JDR2_JDATA_28              (0x10000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x10000000 */
#define ADC_JDR2_JDATA_29              (0x20000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x20000000 */
#define ADC_JDR2_JDATA_30              (0x40000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x40000000 */
#define ADC_JDR2_JDATA_31              (0x80000000UL << ADC_JDR2_JDATA_Pos)    /*!< 0x80000000 */

/********************  Bit definition for ADC_JDR3 register  ********************/
#define ADC_JDR3_JDATA_Pos             (0U)
#define ADC_JDR3_JDATA_Msk             (0xFFFFFFFFUL << ADC_JDR3_JDATA_Pos)    /*!< 0xFFFFFFFF */
#define ADC_JDR3_JDATA                 ADC_JDR3_JDATA_Msk                      /*!< ADC group injected sequencer rank 3 conversion data */
#define ADC_JDR3_JDATA_0               (0x00000001UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000001 */
#define ADC_JDR3_JDATA_1               (0x00000002UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000002 */
#define ADC_JDR3_JDATA_2               (0x00000004UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000004 */
#define ADC_JDR3_JDATA_3               (0x00000008UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000008 */
#define ADC_JDR3_JDATA_4               (0x00000010UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000010 */
#define ADC_JDR3_JDATA_5               (0x00000020UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000020 */
#define ADC_JDR3_JDATA_6               (0x00000040UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000040 */
#define ADC_JDR3_JDATA_7               (0x00000080UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000080 */
#define ADC_JDR3_JDATA_8               (0x00000100UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000100 */
#define ADC_JDR3_JDATA_9               (0x00000200UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000200 */
#define ADC_JDR3_JDATA_10              (0x00000400UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000400 */
#define ADC_JDR3_JDATA_11              (0x00000800UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00000800 */
#define ADC_JDR3_JDATA_12              (0x00001000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00001000 */
#define ADC_JDR3_JDATA_13              (0x00002000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00002000 */
#define ADC_JDR3_JDATA_14              (0x00004000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00004000 */
#define ADC_JDR3_JDATA_15              (0x00008000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00008000 */
#define ADC_JDR3_JDATA_16              (0x00010000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00010000 */
#define ADC_JDR3_JDATA_17              (0x00020000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00020000 */
#define ADC_JDR3_JDATA_18              (0x00040000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00040000 */
#define ADC_JDR3_JDATA_19              (0x00080000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00080000 */
#define ADC_JDR3_JDATA_20              (0x00100000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00100000 */
#define ADC_JDR3_JDATA_21              (0x00200000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00200000 */
#define ADC_JDR3_JDATA_22              (0x00400000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00400000 */
#define ADC_JDR3_JDATA_23              (0x00800000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x00800000 */
#define ADC_JDR3_JDATA_24              (0x01000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x01000000 */
#define ADC_JDR3_JDATA_25              (0x02000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x02000000 */
#define ADC_JDR3_JDATA_26              (0x04000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x04000000 */
#define ADC_JDR3_JDATA_27              (0x08000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x08000000 */
#define ADC_JDR3_JDATA_28              (0x10000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x10000000 */
#define ADC_JDR3_JDATA_29              (0x20000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x20000000 */
#define ADC_JDR3_JDATA_30              (0x40000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x40000000 */
#define ADC_JDR3_JDATA_31              (0x80000000UL << ADC_JDR3_JDATA_Pos)    /*!< 0x80000000 */

/********************  Bit definition for ADC_JDR4 register  ********************/
#define ADC_JDR4_JDATA_Pos             (0U)
#define ADC_JDR4_JDATA_Msk             (0xFFFFFFFFUL << ADC_JDR4_JDATA_Pos)    /*!< 0xFFFFFFFF */
#define ADC_JDR4_JDATA                 ADC_JDR4_JDATA_Msk                      /*!< ADC group injected sequencer rank 4 conversion data */
#define ADC_JDR4_JDATA_0               (0x00000001UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000001 */
#define ADC_JDR4_JDATA_1               (0x00000002UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000002 */
#define ADC_JDR4_JDATA_2               (0x00000004UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000004 */
#define ADC_JDR4_JDATA_3               (0x00000008UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000008 */
#define ADC_JDR4_JDATA_4               (0x00000010UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000010 */
#define ADC_JDR4_JDATA_5               (0x00000020UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000020 */
#define ADC_JDR4_JDATA_6               (0x00000040UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000040 */
#define ADC_JDR4_JDATA_7               (0x00000080UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000080 */
#define ADC_JDR4_JDATA_8               (0x00000100UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000100 */
#define ADC_JDR4_JDATA_9               (0x00000200UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000200 */
#define ADC_JDR4_JDATA_10              (0x00000400UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000400 */
#define ADC_JDR4_JDATA_11              (0x00000800UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00000800 */
#define ADC_JDR4_JDATA_12              (0x00001000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00001000 */
#define ADC_JDR4_JDATA_13              (0x00002000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00002000 */
#define ADC_JDR4_JDATA_14              (0x00004000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00004000 */
#define ADC_JDR4_JDATA_15              (0x00008000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00008000 */
#define ADC_JDR4_JDATA_16              (0x00010000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00010000 */
#define ADC_JDR4_JDATA_17              (0x00020000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00020000 */
#define ADC_JDR4_JDATA_18              (0x00040000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00040000 */
#define ADC_JDR4_JDATA_19              (0x00080000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00080000 */
#define ADC_JDR4_JDATA_20              (0x00100000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00100000 */
#define ADC_JDR4_JDATA_21              (0x00200000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00200000 */
#define ADC_JDR4_JDATA_22              (0x00400000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00400000 */
#define ADC_JDR4_JDATA_23              (0x00800000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x00800000 */
#define ADC_JDR4_JDATA_24              (0x01000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x01000000 */
#define ADC_JDR4_JDATA_25              (0x02000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x02000000 */
#define ADC_JDR4_JDATA_26              (0x04000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x04000000 */
#define ADC_JDR4_JDATA_27              (0x08000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x08000000 */
#define ADC_JDR4_JDATA_28              (0x10000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x10000000 */
#define ADC_JDR4_JDATA_29              (0x20000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x20000000 */
#define ADC_JDR4_JDATA_30              (0x40000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x40000000 */
#define ADC_JDR4_JDATA_31              (0x80000000UL << ADC_JDR4_JDATA_Pos)    /*!< 0x80000000 */

/********************  Bit definition for ADC_AWD2CR register  ****************/
#define ADC_AWD2CR_AWD2CH_Pos          (0U)
#define ADC_AWD2CR_AWD2CH_Msk          (0xFFFFFUL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x000FFFFF */
#define ADC_AWD2CR_AWD2CH              ADC_AWD2CR_AWD2CH_Msk                   /*!< ADC analog watchdog 2 monitored channel selection */
#define ADC_AWD2CR_AWD2CH_0            (0x00001UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000001 */
#define ADC_AWD2CR_AWD2CH_1            (0x00002UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000002 */
#define ADC_AWD2CR_AWD2CH_2            (0x00004UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000004 */
#define ADC_AWD2CR_AWD2CH_3            (0x00008UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000008 */
#define ADC_AWD2CR_AWD2CH_4            (0x00010UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000010 */
#define ADC_AWD2CR_AWD2CH_5            (0x00020UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000020 */
#define ADC_AWD2CR_AWD2CH_6            (0x00040UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000040 */
#define ADC_AWD2CR_AWD2CH_7            (0x00080UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000080 */
#define ADC_AWD2CR_AWD2CH_8            (0x00100UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000100 */
#define ADC_AWD2CR_AWD2CH_9            (0x00200UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000200 */
#define ADC_AWD2CR_AWD2CH_10           (0x00400UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000400 */
#define ADC_AWD2CR_AWD2CH_11           (0x00800UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00000800 */
#define ADC_AWD2CR_AWD2CH_12           (0x01000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00001000 */
#define ADC_AWD2CR_AWD2CH_13           (0x02000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00002000 */
#define ADC_AWD2CR_AWD2CH_14           (0x04000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00004000 */
#define ADC_AWD2CR_AWD2CH_15           (0x08000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00008000 */
#define ADC_AWD2CR_AWD2CH_16           (0x10000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00010000 */
#define ADC_AWD2CR_AWD2CH_17           (0x20000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00020000 */
#define ADC_AWD2CR_AWD2CH_18           (0x40000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00040000 */
#define ADC_AWD2CR_AWD2CH_19           (0x80000UL << ADC_AWD2CR_AWD2CH_Pos)    /*!< 0x00080000 */

/********************  Bit definition for ADC_AWD3CR register  ****************/
#define ADC_AWD3CR_AWD3CH_Pos          (0U)
#define ADC_AWD3CR_AWD3CH_Msk          (0xFFFFFUL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x000FFFFF */
#define ADC_AWD3CR_AWD3CH              ADC_AWD3CR_AWD3CH_Msk                   /*!< ADC analog watchdog 3 monitored channel selection */
#define ADC_AWD3CR_AWD3CH_0            (0x00001UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000001 */
#define ADC_AWD3CR_AWD3CH_1            (0x00002UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000002 */
#define ADC_AWD3CR_AWD3CH_2            (0x00004UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000004 */
#define ADC_AWD3CR_AWD3CH_3            (0x00008UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000008 */
#define ADC_AWD3CR_AWD3CH_4            (0x00010UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000010 */
#define ADC_AWD3CR_AWD3CH_5            (0x00020UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000020 */
#define ADC_AWD3CR_AWD3CH_6            (0x00040UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000040 */
#define ADC_AWD3CR_AWD3CH_7            (0x00080UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000080 */
#define ADC_AWD3CR_AWD3CH_8            (0x00100UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000100 */
#define ADC_AWD3CR_AWD3CH_9            (0x00200UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000200 */
#define ADC_AWD3CR_AWD3CH_10           (0x00400UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000400 */
#define ADC_AWD3CR_AWD3CH_11           (0x00800UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00000800 */
#define ADC_AWD3CR_AWD3CH_12           (0x01000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00001000 */
#define ADC_AWD3CR_AWD3CH_13           (0x02000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00002000 */
#define ADC_AWD3CR_AWD3CH_14           (0x04000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00004000 */
#define ADC_AWD3CR_AWD3CH_15           (0x08000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00008000 */
#define ADC_AWD3CR_AWD3CH_16           (0x10000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00010000 */
#define ADC_AWD3CR_AWD3CH_17           (0x20000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00020000 */
#define ADC_AWD3CR_AWD3CH_18           (0x40000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00040000 */
#define ADC_AWD3CR_AWD3CH_19           (0x80000UL << ADC_AWD3CR_AWD3CH_Pos)    /*!< 0x00080000 */

/********************  Bit definition for ADC_AWD1TR_LT register  *************/
#define ADC_AWD1LTR_LTR_Pos            (0U)
#define ADC_AWD1LTR_LTR_Msk            (0x007FFFFFUL << ADC_AWD1LTR_LTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD1LTR_LTR                ADC_AWD1LTR_LTR_Msk                    /*!< ADC analog watchdog 1 threshold low */
#define ADC_AWD1LTR_LTR_0              (0x000001UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD1LTR_LTR_1              (0x000002UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD1LTR_LTR_2              (0x000004UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD1LTR_LTR_3              (0x000008UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD1LTR_LTR_4              (0x000010UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD1LTR_LTR_5              (0x000020UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD1LTR_LTR_6              (0x000040UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD1LTR_LTR_7              (0x000080UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD1LTR_LTR_8              (0x000100UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD1LTR_LTR_9              (0x000200UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD1LTR_LTR_10             (0x000400UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD1LTR_LTR_11             (0x000800UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD1LTR_LTR_12             (0x001000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD1LTR_LTR_13             (0x002000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD1LTR_LTR_14             (0x004000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD1LTR_LTR_15             (0x008000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD1LTR_LTR_16             (0x010000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD1LTR_LTR_17             (0x020000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD1LTR_LTR_18             (0x040000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD1LTR_LTR_19             (0x080000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD1LTR_LTR_20             (0x100000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD1LTR_LTR_21             (0x200000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD1LTR_LTR_22             (0x400000UL << ADC_AWD1LTR_LTR_Pos)    /*!< 0x00400000 */

/********************  Bit definition for ADC_AWD1TR_HT register  *******************/
#define ADC_AWD1HTR_HTR_Pos            (0U)
#define ADC_AWD1HTR_HTR_Msk            (0x007FFFFFUL << ADC_AWD1HTR_HTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD1HTR_HTR                ADC_AWD1HTR_HTR_Msk                    /*!< ADC analog watchdog 1 threshold high */
#define ADC_AWD1HTR_HTR_0              (0x000001UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD1HTR_HTR_1              (0x000002UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD1HTR_HTR_2              (0x000004UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD1HTR_HTR_3              (0x000008UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD1HTR_HTR_4              (0x000010UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD1HTR_HTR_5              (0x000020UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD1HTR_HTR_6              (0x000040UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD1HTR_HTR_7              (0x000080UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD1HTR_HTR_8              (0x000100UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD1HTR_HTR_9              (0x000200UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD1HTR_HTR_10             (0x000400UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD1HTR_HTR_11             (0x000800UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD1HTR_HTR_12             (0x001000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD1HTR_HTR_13             (0x002000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD1HTR_HTR_14             (0x004000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD1HTR_HTR_15             (0x008000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD1HTR_HTR_16             (0x010000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD1HTR_HTR_17             (0x020000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD1HTR_HTR_18             (0x040000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD1HTR_HTR_19             (0x080000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD1HTR_HTR_20             (0x100000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD1HTR_HTR_21             (0x200000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD1HTR_HTR_22             (0x400000UL << ADC_AWD1HTR_HTR_Pos)    /*!< 0x00400000 */

#define ADC_AWD1HTR_AWDFILT_Pos         (29U)
#define ADC_AWD1HTR_AWDFILT_Msk         (0x7UL << ADC_AWD1HTR_AWDFILT_Pos)      /*!< 0x00000007 */
#define ADC_AWD1HTR_AWDFILT             ADC_AWD1HTR_AWDFILT_Msk                 /*!< ADC analog watchdog 1 filtering */
#define ADC_AWD1HTR_AWDFILT_0           (0x000001UL << ADC_AWD1HTR_AWDFILT_Pos) /*!< 0x00000001 */
#define ADC_AWD1HTR_AWDFILT_1           (0x000002UL << ADC_AWD1HTR_AWDFILT_Pos) /*!< 0x00000002 */
#define ADC_AWD1HTR_AWDFILT_2           (0x000004UL << ADC_AWD1HTR_AWDFILT_Pos) /*!< 0x00000004 */

/********************  Bit definition for ADC_AWD2TR_LT register  *******************/
#define ADC_AWD2LTR_LTR_Pos            (0U)
#define ADC_AWD2LTR_LTR_Msk            (0x007FFFFFUL << ADC_AWD2LTR_LTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD2LTR_LTR                ADC_AWD2LTR_LTR_Msk                    /*!< ADC analog watchdog 2 threshold low */
#define ADC_AWD2LTR_LTR_0              (0x000001UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD2LTR_LTR_1              (0x000002UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD2LTR_LTR_2              (0x000004UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD2LTR_LTR_3              (0x000008UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD2LTR_LTR_4              (0x000010UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD2LTR_LTR_5              (0x000020UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD2LTR_LTR_6              (0x000040UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD2LTR_LTR_7              (0x000080UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD2LTR_LTR_8              (0x000100UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD2LTR_LTR_9              (0x000200UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD2LTR_LTR_10             (0x000400UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD2LTR_LTR_11             (0x000800UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD2LTR_LTR_12             (0x001000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD2LTR_LTR_13             (0x002000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD2LTR_LTR_14             (0x004000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD2LTR_LTR_15             (0x008000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD2LTR_LTR_16             (0x010000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD2LTR_LTR_17             (0x020000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD2LTR_LTR_18             (0x040000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD2LTR_LTR_19             (0x080000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD2LTR_LTR_20             (0x100000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD2LTR_LTR_21             (0x200000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD2LTR_LTR_22             (0x400000UL << ADC_AWD2LTR_LTR_Pos)    /*!< 0x00400000 */

/********************  Bit definition for ADC_AWD2TR_HT register  *******************/
#define ADC_AWD2HTR_HTR_Pos            (0U)
#define ADC_AWD2HTR_HTR_Msk            (0x007FFFFFUL << ADC_AWD2HTR_HTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD2HTR_HTR                ADC_AWD2HTR_HTR_Msk                    /*!< ADC analog watchdog 2 threshold high */
#define ADC_AWD2HTR_HTR_0              (0x000001UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD2HTR_HTR_1              (0x000002UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD2HTR_HTR_2              (0x000004UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD2HTR_HTR_3              (0x000008UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD2HTR_HTR_4              (0x000010UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD2HTR_HTR_5              (0x000020UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD2HTR_HTR_6              (0x000040UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD2HTR_HTR_7              (0x000080UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD2HTR_HTR_8              (0x000100UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD2HTR_HTR_9              (0x000200UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD2HTR_HTR_10             (0x000400UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD2HTR_HTR_11             (0x000800UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD2HTR_HTR_12             (0x001000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD2HTR_HTR_13             (0x002000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD2HTR_HTR_14             (0x004000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD2HTR_HTR_15             (0x008000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD2HTR_HTR_16             (0x010000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD2HTR_HTR_17             (0x020000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD2HTR_HTR_18             (0x040000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD2HTR_HTR_19             (0x080000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD2HTR_HTR_20             (0x100000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD2HTR_HTR_21             (0x200000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD2HTR_HTR_22             (0x400000UL << ADC_AWD2HTR_HTR_Pos)    /*!< 0x00400000 */

/********************  Bit definition for ADC_AWD3TR_LT register  *******************/
#define ADC_AWD3LTR_LTR_Pos            (0U)
#define ADC_AWD3LTR_LTR_Msk            (0x007FFFFFUL << ADC_AWD3LTR_LTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD3LTR_LTR                ADC_AWD3LTR_LTR_Msk                    /*!< ADC analog watchdog 3 threshold low */
#define ADC_AWD3LTR_LTR_0              (0x000001UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD3LTR_LTR_1              (0x000002UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD3LTR_LTR_2              (0x000004UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD3LTR_LTR_3              (0x000008UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD3LTR_LTR_4              (0x000010UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD3LTR_LTR_5              (0x000020UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD3LTR_LTR_6              (0x000040UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD3LTR_LTR_7              (0x000080UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD3LTR_LTR_8              (0x000100UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD3LTR_LTR_9              (0x000200UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD3LTR_LTR_10             (0x000400UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD3LTR_LTR_11             (0x000800UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD3LTR_LTR_12             (0x001000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD3LTR_LTR_13             (0x002000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD3LTR_LTR_14             (0x004000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD3LTR_LTR_15             (0x008000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD3LTR_LTR_16             (0x010000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD3LTR_LTR_17             (0x020000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD3LTR_LTR_18             (0x040000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD3LTR_LTR_19             (0x080000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD3LTR_LTR_20             (0x100000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD3LTR_LTR_21             (0x200000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD3LTR_LTR_22             (0x400000UL << ADC_AWD3LTR_LTR_Pos)    /*!< 0x00400000 */

/********************  Bit definition for ADC_AWD3TR_HT register  *******************/
#define ADC_AWD3HTR_HTR_Pos            (0U)
#define ADC_AWD3HTR_HTR_Msk            (0x007FFFFFUL << ADC_AWD3HTR_HTR_Pos)  /*!< 0x007FFFFF */
#define ADC_AWD3HTR_HTR                ADC_AWD3HTR_HTR_Msk                    /*!< ADC analog watchdog 3 threshold high */
#define ADC_AWD3HTR_HTR_0              (0x000001UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000001 */
#define ADC_AWD3HTR_HTR_1              (0x000002UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000002 */
#define ADC_AWD3HTR_HTR_2              (0x000004UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000004 */
#define ADC_AWD3HTR_HTR_3              (0x000008UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000008 */
#define ADC_AWD3HTR_HTR_4              (0x000010UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000010 */
#define ADC_AWD3HTR_HTR_5              (0x000020UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000020 */
#define ADC_AWD3HTR_HTR_6              (0x000040UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000040 */
#define ADC_AWD3HTR_HTR_7              (0x000080UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000080 */
#define ADC_AWD3HTR_HTR_8              (0x000100UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000100 */
#define ADC_AWD3HTR_HTR_9              (0x000200UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000200 */
#define ADC_AWD3HTR_HTR_10             (0x000400UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000400 */
#define ADC_AWD3HTR_HTR_11             (0x000800UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00000800 */
#define ADC_AWD3HTR_HTR_12             (0x001000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00001000 */
#define ADC_AWD3HTR_HTR_13             (0x002000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00002000 */
#define ADC_AWD3HTR_HTR_14             (0x004000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00004000 */
#define ADC_AWD3HTR_HTR_15             (0x008000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00008000 */
#define ADC_AWD3HTR_HTR_16             (0x010000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00010000 */
#define ADC_AWD3HTR_HTR_17             (0x020000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00020000 */
#define ADC_AWD3HTR_HTR_18             (0x040000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00040000 */
#define ADC_AWD3HTR_HTR_19             (0x080000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00080000 */
#define ADC_AWD3HTR_HTR_20             (0x100000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00100000 */
#define ADC_AWD3HTR_HTR_21             (0x200000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00200000 */
#define ADC_AWD3HTR_HTR_22             (0x400000UL << ADC_AWD3HTR_HTR_Pos)    /*!< 0x00400000 */

/********************  Bit definition for ADC_DIFSEL register  ****************/
#define ADC_DIFSEL_DIFSEL_Pos          (0U)
#define ADC_DIFSEL_DIFSEL_Msk          (0xFFFFFUL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x000FFFFF */
#define ADC_DIFSEL_DIFSEL              ADC_DIFSEL_DIFSEL_Msk                   /*!< ADC channel differential or single-ended mode selection */
#define ADC_DIFSEL_DIFSEL_0            (0x00001UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000001 */
#define ADC_DIFSEL_DIFSEL_1            (0x00002UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000002 */
#define ADC_DIFSEL_DIFSEL_2            (0x00004UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000004 */
#define ADC_DIFSEL_DIFSEL_3            (0x00008UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000008 */
#define ADC_DIFSEL_DIFSEL_4            (0x00010UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000010 */
#define ADC_DIFSEL_DIFSEL_5            (0x00020UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000020 */
#define ADC_DIFSEL_DIFSEL_6            (0x00040UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000040 */
#define ADC_DIFSEL_DIFSEL_7            (0x00080UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000080 */
#define ADC_DIFSEL_DIFSEL_8            (0x00100UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000100 */
#define ADC_DIFSEL_DIFSEL_9            (0x00200UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000200 */
#define ADC_DIFSEL_DIFSEL_10           (0x00400UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000400 */
#define ADC_DIFSEL_DIFSEL_11           (0x00800UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00000800 */
#define ADC_DIFSEL_DIFSEL_12           (0x01000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00001000 */
#define ADC_DIFSEL_DIFSEL_13           (0x02000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00002000 */
#define ADC_DIFSEL_DIFSEL_14           (0x04000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00004000 */
#define ADC_DIFSEL_DIFSEL_15           (0x08000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00008000 */
#define ADC_DIFSEL_DIFSEL_16           (0x10000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00010000 */
#define ADC_DIFSEL_DIFSEL_17           (0x20000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00020000 */
#define ADC_DIFSEL_DIFSEL_18           (0x40000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00040000 */
#define ADC_DIFSEL_DIFSEL_19           (0x80000UL << ADC_DIFSEL_DIFSEL_Pos)    /*!< 0x00080000 */

/********************  Bit definition for ADC_CALFACT register  ***************/
#define ADC_CALFACT_CALFACT_S_Pos      (0U)
#define ADC_CALFACT_CALFACT_S_Msk      (0x3FFUL << ADC_CALFACT_CALFACT_S_Pos)  /*!< 0x000003FF */
#define ADC_CALFACT_CALFACT_S          ADC_CALFACT_CALFACT_S_Msk               /*!< ADC calibration factor in single-ended mode */
#define ADC_CALFACT_CALFACT_S_0        (0x01UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000001 */
#define ADC_CALFACT_CALFACT_S_1        (0x02UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000002 */
#define ADC_CALFACT_CALFACT_S_2        (0x04UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000004 */
#define ADC_CALFACT_CALFACT_S_3        (0x08UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000008 */
#define ADC_CALFACT_CALFACT_S_4        (0x10UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000010 */
#define ADC_CALFACT_CALFACT_S_5        (0x20UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000020 */
#define ADC_CALFACT_CALFACT_S_6        (0x40UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000040 */
#define ADC_CALFACT_CALFACT_S_7        (0x80UL << ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000080 */
#define ADC_CALFACT_CALFACT_S_8        (0x100UL<< ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000100 */
#define ADC_CALFACT_CALFACT_S_9        (0x200UL<< ADC_CALFACT_CALFACT_S_Pos)   /*!< 0x00000200 */

#define ADC_CALFACT_CALFACT_D_Pos      (16U)
#define ADC_CALFACT_CALFACT_D_Msk      (0x3FFUL << ADC_CALFACT_CALFACT_D_Pos)  /*!< 0x03FF0000 */
#define ADC_CALFACT_CALFACT_D          ADC_CALFACT_CALFACT_D_Msk               /*!< ADC calibration factor in differential mode */
#define ADC_CALFACT_CALFACT_D_0        (0x01UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00010000 */
#define ADC_CALFACT_CALFACT_D_1        (0x02UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00020000 */
#define ADC_CALFACT_CALFACT_D_2        (0x04UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00040000 */
#define ADC_CALFACT_CALFACT_D_3        (0x08UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00080000 */
#define ADC_CALFACT_CALFACT_D_4        (0x10UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00100000 */
#define ADC_CALFACT_CALFACT_D_5        (0x20UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00200000 */
#define ADC_CALFACT_CALFACT_D_6        (0x40UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00400000 */
#define ADC_CALFACT_CALFACT_D_7        (0x80UL << ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x00800000 */
#define ADC_CALFACT_CALFACT_D_8        (0x100UL<< ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x01000000 */
#define ADC_CALFACT_CALFACT_D_9        (0x200UL<< ADC_CALFACT_CALFACT_D_Pos)   /*!< 0x02000000 */

#define ADC_CALFACT_CALADDOS_Pos       (31U)
#define ADC_CALFACT_CALADDOS_Msk       (0x01UL << ADC_CALFACT_CALADDOS_Pos)    /*!< 0x00000001 */
#define ADC_CALFACT_CALADDOS           ADC_CALFACT_CALADDOS_Msk                /*!< ADC calibration additional offset mode */

/********************  Bit definition for ADC_OR option register  ***************/
#define ADC_OR_SELREF_Pos              (0U)
#define ADC_OR_SELREF_Msk              (0x1UL << ADC_OR_SELREF_Pos)            /*!< 0x00000001 */
#define ADC_OR_SELREF                  ADC_OR_SELREF_Msk                       /*!< ADC internal path to internal reference voltage */
#define ADC_OR_SELBG_Pos               (1U)
#define ADC_OR_SELBG_Msk               (0x1UL << ADC_OR_SELBG_Pos)             /*!< 0x00000002 */
#define ADC_OR_SELBG                   ADC_OR_SELBG_Msk                        /*!< ADC internal path to bandgap */
#define ADC_OR_VDDCOREEN_Pos           (2U)
#define ADC_OR_VDDCOREEN_Msk           (0x1UL << ADC_OR_VDDCOREEN_Pos)         /*!< 0x00000004 */
#define ADC_OR_VDDCOREEN               ADC_OR_VDDCOREEN_Msk                    /*!< ADC internal path to VDDCORE */
#define ADC_OR_VDDCPUEN_Pos            (3U)
#define ADC_OR_VDDCPUEN_Msk            (0x1UL << ADC_OR_VDDCPUEN_Pos)          /*!< 0x00000008 */
#define ADC_OR_VDDCPUEN                ADC_OR_VDDCPUEN_Msk                     /*!< ADC internal path to VDDCPU */
#define ADC_OR_VDDGPUEN_Pos            (4U)
#define ADC_OR_VDDGPUEN_Msk            (0x1UL << ADC_OR_VDDGPUEN_Pos)          /*!< 0x00000010 */
#define ADC_OR_VDDGPUEN                ADC_OR_VDDGPUEN_Msk                     /*!< ADC internal path to VDDGPU */

/*************************  ADC Common registers  *****************************/
/********************  Bit definition for ADC_CSR register  *******************/
#define ADC_CSR_ADRDY_MST_Pos          (0U)
#define ADC_CSR_ADRDY_MST_Msk          (0x1UL << ADC_CSR_ADRDY_MST_Pos)        /*!< 0x00000001 */
#define ADC_CSR_ADRDY_MST              ADC_CSR_ADRDY_MST_Msk                   /*!< ADC multimode master ready flag */
#define ADC_CSR_EOSMP_MST_Pos          (1U)
#define ADC_CSR_EOSMP_MST_Msk          (0x1UL << ADC_CSR_EOSMP_MST_Pos)        /*!< 0x00000002 */
#define ADC_CSR_EOSMP_MST              ADC_CSR_EOSMP_MST_Msk                   /*!< ADC multimode master group regular end of sampling flag */
#define ADC_CSR_EOC_MST_Pos            (2U)
#define ADC_CSR_EOC_MST_Msk            (0x1UL << ADC_CSR_EOC_MST_Pos)          /*!< 0x00000004 */
#define ADC_CSR_EOC_MST                ADC_CSR_EOC_MST_Msk                     /*!< ADC multimode master group regular end of unitary conversion flag */
#define ADC_CSR_EOS_MST_Pos            (3U)
#define ADC_CSR_EOS_MST_Msk            (0x1UL << ADC_CSR_EOS_MST_Pos)          /*!< 0x00000008 */
#define ADC_CSR_EOS_MST                ADC_CSR_EOS_MST_Msk                     /*!< ADC multimode master group regular end of sequence conversions flag */
#define ADC_CSR_OVR_MST_Pos            (4U)
#define ADC_CSR_OVR_MST_Msk            (0x1UL << ADC_CSR_OVR_MST_Pos)          /*!< 0x00000010 */
#define ADC_CSR_OVR_MST                ADC_CSR_OVR_MST_Msk                     /*!< ADC multimode master group regular overrun flag */
#define ADC_CSR_JEOC_MST_Pos           (5U)
#define ADC_CSR_JEOC_MST_Msk           (0x1UL << ADC_CSR_JEOC_MST_Pos)         /*!< 0x00000020 */
#define ADC_CSR_JEOC_MST               ADC_CSR_JEOC_MST_Msk                    /*!< ADC multimode master group injected end of unitary conversion flag */
#define ADC_CSR_JEOS_MST_Pos           (6U)
#define ADC_CSR_JEOS_MST_Msk           (0x1UL << ADC_CSR_JEOS_MST_Pos)         /*!< 0x00000040 */
#define ADC_CSR_JEOS_MST               ADC_CSR_JEOS_MST_Msk                    /*!< ADC multimode master group injected end of sequence conversions flag */
#define ADC_CSR_AWD1_MST_Pos           (7U)
#define ADC_CSR_AWD1_MST_Msk           (0x1UL << ADC_CSR_AWD1_MST_Pos)         /*!< 0x00000080 */
#define ADC_CSR_AWD1_MST               ADC_CSR_AWD1_MST_Msk                    /*!< ADC multimode master analog watchdog 1 flag */
#define ADC_CSR_AWD2_MST_Pos           (8U)
#define ADC_CSR_AWD2_MST_Msk           (0x1UL << ADC_CSR_AWD2_MST_Pos)         /*!< 0x00000100 */
#define ADC_CSR_AWD2_MST               ADC_CSR_AWD2_MST_Msk                    /*!< ADC multimode master analog watchdog 2 flag */
#define ADC_CSR_AWD3_MST_Pos           (9U)
#define ADC_CSR_AWD3_MST_Msk           (0x1UL << ADC_CSR_AWD3_MST_Pos)         /*!< 0x00000200 */
#define ADC_CSR_AWD3_MST               ADC_CSR_AWD3_MST_Msk                    /*!< ADC multimode master analog watchdog 3 flag */

#define ADC_CSR_ADRDY_SLV_Pos          (16U)
#define ADC_CSR_ADRDY_SLV_Msk          (0x1UL << ADC_CSR_ADRDY_SLV_Pos)        /*!< 0x00010000 */
#define ADC_CSR_ADRDY_SLV              ADC_CSR_ADRDY_SLV_Msk                   /*!< ADC multimode slave ready flag */
#define ADC_CSR_EOSMP_SLV_Pos          (17U)
#define ADC_CSR_EOSMP_SLV_Msk          (0x1UL << ADC_CSR_EOSMP_SLV_Pos)        /*!< 0x00020000 */
#define ADC_CSR_EOSMP_SLV              ADC_CSR_EOSMP_SLV_Msk                   /*!< ADC multimode slave group regular end of sampling flag */
#define ADC_CSR_EOC_SLV_Pos            (18U)
#define ADC_CSR_EOC_SLV_Msk            (0x1UL << ADC_CSR_EOC_SLV_Pos)          /*!< 0x00040000 */
#define ADC_CSR_EOC_SLV                ADC_CSR_EOC_SLV_Msk                     /*!< ADC multimode slave group regular end of unitary conversion flag */
#define ADC_CSR_EOS_SLV_Pos            (19U)
#define ADC_CSR_EOS_SLV_Msk            (0x1UL << ADC_CSR_EOS_SLV_Pos)          /*!< 0x00080000 */
#define ADC_CSR_EOS_SLV                ADC_CSR_EOS_SLV_Msk                     /*!< ADC multimode slave group regular end of sequence conversions flag */
#define ADC_CSR_OVR_SLV_Pos            (20U)
#define ADC_CSR_OVR_SLV_Msk            (0x1UL << ADC_CSR_OVR_SLV_Pos)          /*!< 0x00100000 */
#define ADC_CSR_OVR_SLV                ADC_CSR_OVR_SLV_Msk                     /*!< ADC multimode slave group regular overrun flag */
#define ADC_CSR_JEOC_SLV_Pos           (21U)
#define ADC_CSR_JEOC_SLV_Msk           (0x1UL << ADC_CSR_JEOC_SLV_Pos)         /*!< 0x00200000 */
#define ADC_CSR_JEOC_SLV               ADC_CSR_JEOC_SLV_Msk                    /*!< ADC multimode slave group injected end of unitary conversion flag */
#define ADC_CSR_JEOS_SLV_Pos           (22U)
#define ADC_CSR_JEOS_SLV_Msk           (0x1UL << ADC_CSR_JEOS_SLV_Pos)         /*!< 0x00400000 */
#define ADC_CSR_JEOS_SLV               ADC_CSR_JEOS_SLV_Msk                    /*!< ADC multimode slave group injected end of sequence conversions flag */
#define ADC_CSR_AWD1_SLV_Pos           (23U)
#define ADC_CSR_AWD1_SLV_Msk           (0x1UL << ADC_CSR_AWD1_SLV_Pos)         /*!< 0x00800000 */
#define ADC_CSR_AWD1_SLV               ADC_CSR_AWD1_SLV_Msk                    /*!< ADC multimode slave analog watchdog 1 flag */
#define ADC_CSR_AWD2_SLV_Pos           (24U)
#define ADC_CSR_AWD2_SLV_Msk           (0x1UL << ADC_CSR_AWD2_SLV_Pos)         /*!< 0x01000000 */
#define ADC_CSR_AWD2_SLV               ADC_CSR_AWD2_SLV_Msk                    /*!< ADC multimode slave analog watchdog 2 flag */
#define ADC_CSR_AWD3_SLV_Pos           (25U)
#define ADC_CSR_AWD3_SLV_Msk           (0x1UL << ADC_CSR_AWD3_SLV_Pos)         /*!< 0x02000000 */
#define ADC_CSR_AWD3_SLV               ADC_CSR_AWD3_SLV_Msk                    /*!< ADC multimode slave analog watchdog 3 flag */

/********************  Bit definition for ADC_CCR register  *******************/

#define ADC_CCR_PRESC_Pos              (18U)
#define ADC_CCR_PRESC_Msk              (0xFUL << ADC_CCR_PRESC_Pos)            /*!< 0x003C0000 */
#define ADC_CCR_PRESC                  ADC_CCR_PRESC_Msk                       /*!< ADC common clock prescaler */
#define ADC_CCR_PRESC_0                (0x1UL << ADC_CCR_PRESC_Pos)            /*!< 0x00040000 */
#define ADC_CCR_PRESC_1                (0x2UL << ADC_CCR_PRESC_Pos)            /*!< 0x00080000 */
#define ADC_CCR_PRESC_2                (0x4UL << ADC_CCR_PRESC_Pos)            /*!< 0x00100000 */
#define ADC_CCR_PRESC_3                (0x8UL << ADC_CCR_PRESC_Pos)            /*!< 0x00200000 */

#define ADC_CCR_VREFEN_Pos             (22U)
#define ADC_CCR_VREFEN_Msk             (0x1UL << ADC_CCR_VREFEN_Pos)           /*!< 0x00400000 */
#define ADC_CCR_VREFEN                 ADC_CCR_VREFEN_Msk                      /*!< ADC internal path to VrefInt enable */

#define ADC_CCR_VBATEN_Pos             (24U)
#define ADC_CCR_VBATEN_Msk             (0x1UL << ADC_CCR_VBATEN_Pos)           /*!< 0x01000000 */
#define ADC_CCR_VBATEN                 ADC_CCR_VBATEN_Msk                      /*!< ADC internal path to battery voltage enable */

/*****************  Bit definition for ADCC_HWCFGR1 register  *****************/
#define ADC_HWCFGR1_ADCNUM_Pos     (0U)
#define ADC_HWCFGR1_ADCNUM_Msk     (0xFUL << ADC_HWCFGR1_ADCNUM_Pos)     /*!< 0x0000000F */
#define ADC_HWCFGR1_ADCNUM         ADC_HWCFGR1_ADCNUM_Msk               /*!< Number of ADCs implemented */
#define ADC_HWCFGR1_OPBITS_Pos     (4U)
#define ADC_HWCFGR1_OPBITS_Msk     (0xFUL << ADC_HWCFGR1_OPBITS_Pos)     /*!< 0x000000F0 */
#define ADC_HWCFGR1_OPBITS         ADC_HWCFGR1_OPBITS_Msk               /*!< Number of option bits */
#define ADC_HWCFGR1_ANAIP_Pos      (8U)
#define ADC_HWCFGR1_ANAIP_Msk      (0xFUL << ADC_HWCFGR1_ANAIP_Pos)      /*!< 0x00000F00 */
#define ADC_HWCFGR1_ANAIP          ADC_HWCFGR1_ANAIP_Msk                /*!< Analog IP compatibility */

/******************  Bit definition for ADC_VERR register  *******************/
#define ADC_VERR_MINREV_Pos        (0U)
#define ADC_VERR_MINREV_Msk        (0xFUL << ADC_VERR_MINREV_Pos)        /*!< 0x0000000F */
#define ADC_VERR_MINREV            ADC_VERR_MINREV_Msk                  /*!< Minor revision */
#define ADC_VERR_MAJREV_Pos        (4U)
#define ADC_VERR_MAJREV_Msk        (0xFUL << ADC_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define ADC_VERR_MAJREV            ADC_VERR_MAJREV_Msk                  /*!< Major revision */

/******************  Bit definition for ADC_IPIDR register  ******************/
#define ADC_IPIDR_ID_Pos           (0U)
#define ADC_IPIDR_ID_Msk           (0xFFFFFFFFUL << ADC_IPIDR_ID_Pos)    /*!< 0xFFFFFFFF */
#define ADC_IPIDR_ID               ADC_IPIDR_ID_Msk                     /*!< Peripheral identifier */

/******************  Bit definition for ADC_SIDR register  *******************/
#define ADC_SIDR_SID_Pos           (0U)
#define ADC_SIDR_SID_Msk           (0xFFFFFFFFUL << ADC_SIDR_SID_Pos)    /*!< 0xFFFFFFFF */
#define ADC_SIDR_SID               ADC_SIDR_SID_Msk                     /*!< Size Identification */

/******************************************************************************/
/*                                                                            */
/*                              BSEC unit (BSEC)                              */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for BSEC_FVRw register  *******************/
#define BSEC_FVRw_FV_Pos               (0U)
#define BSEC_FVRw_FV_Msk               (0xFFFFFFFFUL << BSEC_FVRw_FV_Pos)           /*!< 0xFFFFFFFF */
#define BSEC_FVRw_FV                   BSEC_FVRw_FV_Msk                            /*!< Fuse value */

/*****************  Bit definition for BSEC_SPLOCKx register  *****************/
#define BSEC_SPLOCKx_SPLOCK0_Pos       (0U)
#define BSEC_SPLOCKx_SPLOCK0_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK0_Pos)          /*!< 0x00000001 */
#define BSEC_SPLOCKx_SPLOCK0           BSEC_SPLOCKx_SPLOCK0_Msk                    /*!< Sticky programming lock for word (32*x) */
#define BSEC_SPLOCKx_SPLOCK1_Pos       (1U)
#define BSEC_SPLOCKx_SPLOCK1_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK1_Pos)          /*!< 0x00000002 */
#define BSEC_SPLOCKx_SPLOCK1           BSEC_SPLOCKx_SPLOCK1_Msk                    /*!< Sticky programming lock for word (1+32*x) */
#define BSEC_SPLOCKx_SPLOCK2_Pos       (2U)
#define BSEC_SPLOCKx_SPLOCK2_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK2_Pos)          /*!< 0x00000004 */
#define BSEC_SPLOCKx_SPLOCK2           BSEC_SPLOCKx_SPLOCK2_Msk                    /*!< Sticky programming lock for word (2+32*x) */
#define BSEC_SPLOCKx_SPLOCK3_Pos       (3U)
#define BSEC_SPLOCKx_SPLOCK3_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK3_Pos)          /*!< 0x00000008 */
#define BSEC_SPLOCKx_SPLOCK3           BSEC_SPLOCKx_SPLOCK3_Msk                    /*!< Sticky programming lock for word (3+32*x) */
#define BSEC_SPLOCKx_SPLOCK4_Pos       (4U)
#define BSEC_SPLOCKx_SPLOCK4_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK4_Pos)          /*!< 0x00000010 */
#define BSEC_SPLOCKx_SPLOCK4           BSEC_SPLOCKx_SPLOCK4_Msk                    /*!< Sticky programming lock for word (4+32*x) */
#define BSEC_SPLOCKx_SPLOCK5_Pos       (5U)
#define BSEC_SPLOCKx_SPLOCK5_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK5_Pos)          /*!< 0x00000020 */
#define BSEC_SPLOCKx_SPLOCK5           BSEC_SPLOCKx_SPLOCK5_Msk                    /*!< Sticky programming lock for word (5+32*x) */
#define BSEC_SPLOCKx_SPLOCK6_Pos       (6U)
#define BSEC_SPLOCKx_SPLOCK6_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK6_Pos)          /*!< 0x00000040 */
#define BSEC_SPLOCKx_SPLOCK6           BSEC_SPLOCKx_SPLOCK6_Msk                    /*!< Sticky programming lock for word (6+32*x) */
#define BSEC_SPLOCKx_SPLOCK7_Pos       (7U)
#define BSEC_SPLOCKx_SPLOCK7_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK7_Pos)          /*!< 0x00000080 */
#define BSEC_SPLOCKx_SPLOCK7           BSEC_SPLOCKx_SPLOCK7_Msk                    /*!< Sticky programming lock for word (7+32*x) */
#define BSEC_SPLOCKx_SPLOCK8_Pos       (8U)
#define BSEC_SPLOCKx_SPLOCK8_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK8_Pos)          /*!< 0x00000100 */
#define BSEC_SPLOCKx_SPLOCK8           BSEC_SPLOCKx_SPLOCK8_Msk                    /*!< Sticky programming lock for word (8+32*x) */
#define BSEC_SPLOCKx_SPLOCK9_Pos       (9U)
#define BSEC_SPLOCKx_SPLOCK9_Msk       (0x1UL << BSEC_SPLOCKx_SPLOCK9_Pos)          /*!< 0x00000200 */
#define BSEC_SPLOCKx_SPLOCK9           BSEC_SPLOCKx_SPLOCK9_Msk                    /*!< Sticky programming lock for word (9+32*x) */
#define BSEC_SPLOCKx_SPLOCK10_Pos      (10U)
#define BSEC_SPLOCKx_SPLOCK10_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK10_Pos)         /*!< 0x00000400 */
#define BSEC_SPLOCKx_SPLOCK10          BSEC_SPLOCKx_SPLOCK10_Msk                   /*!< Sticky programming lock for word (10+32*x) */
#define BSEC_SPLOCKx_SPLOCK11_Pos      (11U)
#define BSEC_SPLOCKx_SPLOCK11_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK11_Pos)         /*!< 0x00000800 */
#define BSEC_SPLOCKx_SPLOCK11          BSEC_SPLOCKx_SPLOCK11_Msk                   /*!< Sticky programming lock for word (11+32*x) */
#define BSEC_SPLOCKx_SPLOCK12_Pos      (12U)
#define BSEC_SPLOCKx_SPLOCK12_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK12_Pos)         /*!< 0x00001000 */
#define BSEC_SPLOCKx_SPLOCK12          BSEC_SPLOCKx_SPLOCK12_Msk                   /*!< Sticky programming lock for word (12+32*x) */
#define BSEC_SPLOCKx_SPLOCK13_Pos      (13U)
#define BSEC_SPLOCKx_SPLOCK13_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK13_Pos)         /*!< 0x00002000 */
#define BSEC_SPLOCKx_SPLOCK13          BSEC_SPLOCKx_SPLOCK13_Msk                   /*!< Sticky programming lock for word (13+32*x) */
#define BSEC_SPLOCKx_SPLOCK14_Pos      (14U)
#define BSEC_SPLOCKx_SPLOCK14_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK14_Pos)         /*!< 0x00004000 */
#define BSEC_SPLOCKx_SPLOCK14          BSEC_SPLOCKx_SPLOCK14_Msk                   /*!< Sticky programming lock for word (14+32*x) */
#define BSEC_SPLOCKx_SPLOCK15_Pos      (15U)
#define BSEC_SPLOCKx_SPLOCK15_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK15_Pos)         /*!< 0x00008000 */
#define BSEC_SPLOCKx_SPLOCK15          BSEC_SPLOCKx_SPLOCK15_Msk                   /*!< Sticky programming lock for word (15+32*x) */
#define BSEC_SPLOCKx_SPLOCK16_Pos      (16U)
#define BSEC_SPLOCKx_SPLOCK16_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK16_Pos)         /*!< 0x00010000 */
#define BSEC_SPLOCKx_SPLOCK16          BSEC_SPLOCKx_SPLOCK16_Msk                   /*!< Sticky programming lock for word (16+32*x) */
#define BSEC_SPLOCKx_SPLOCK17_Pos      (17U)
#define BSEC_SPLOCKx_SPLOCK17_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK17_Pos)         /*!< 0x00020000 */
#define BSEC_SPLOCKx_SPLOCK17          BSEC_SPLOCKx_SPLOCK17_Msk                   /*!< Sticky programming lock for word (17+32*x) */
#define BSEC_SPLOCKx_SPLOCK18_Pos      (18U)
#define BSEC_SPLOCKx_SPLOCK18_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK18_Pos)         /*!< 0x00040000 */
#define BSEC_SPLOCKx_SPLOCK18          BSEC_SPLOCKx_SPLOCK18_Msk                   /*!< Sticky programming lock for word (18+32*x) */
#define BSEC_SPLOCKx_SPLOCK19_Pos      (19U)
#define BSEC_SPLOCKx_SPLOCK19_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK19_Pos)         /*!< 0x00080000 */
#define BSEC_SPLOCKx_SPLOCK19          BSEC_SPLOCKx_SPLOCK19_Msk                   /*!< Sticky programming lock for word (19+32*x) */
#define BSEC_SPLOCKx_SPLOCK20_Pos      (20U)
#define BSEC_SPLOCKx_SPLOCK20_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK20_Pos)         /*!< 0x00100000 */
#define BSEC_SPLOCKx_SPLOCK20          BSEC_SPLOCKx_SPLOCK20_Msk                   /*!< Sticky programming lock for word (20+32*x) */
#define BSEC_SPLOCKx_SPLOCK21_Pos      (21U)
#define BSEC_SPLOCKx_SPLOCK21_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK21_Pos)         /*!< 0x00200000 */
#define BSEC_SPLOCKx_SPLOCK21          BSEC_SPLOCKx_SPLOCK21_Msk                   /*!< Sticky programming lock for word (21+32*x) */
#define BSEC_SPLOCKx_SPLOCK22_Pos      (22U)
#define BSEC_SPLOCKx_SPLOCK22_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK22_Pos)         /*!< 0x00400000 */
#define BSEC_SPLOCKx_SPLOCK22          BSEC_SPLOCKx_SPLOCK22_Msk                   /*!< Sticky programming lock for word (22+32*x) */
#define BSEC_SPLOCKx_SPLOCK23_Pos      (23U)
#define BSEC_SPLOCKx_SPLOCK23_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK23_Pos)         /*!< 0x00800000 */
#define BSEC_SPLOCKx_SPLOCK23          BSEC_SPLOCKx_SPLOCK23_Msk                   /*!< Sticky programming lock for word (23+32*x) */
#define BSEC_SPLOCKx_SPLOCK24_Pos      (24U)
#define BSEC_SPLOCKx_SPLOCK24_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK24_Pos)         /*!< 0x01000000 */
#define BSEC_SPLOCKx_SPLOCK24          BSEC_SPLOCKx_SPLOCK24_Msk                   /*!< Sticky programming lock for word (24+32*x) */
#define BSEC_SPLOCKx_SPLOCK25_Pos      (25U)
#define BSEC_SPLOCKx_SPLOCK25_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK25_Pos)         /*!< 0x02000000 */
#define BSEC_SPLOCKx_SPLOCK25          BSEC_SPLOCKx_SPLOCK25_Msk                   /*!< Sticky programming lock for word (25+32*x) */
#define BSEC_SPLOCKx_SPLOCK26_Pos      (26U)
#define BSEC_SPLOCKx_SPLOCK26_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK26_Pos)         /*!< 0x04000000 */
#define BSEC_SPLOCKx_SPLOCK26          BSEC_SPLOCKx_SPLOCK26_Msk                   /*!< Sticky programming lock for word (26+32*x) */
#define BSEC_SPLOCKx_SPLOCK27_Pos      (27U)
#define BSEC_SPLOCKx_SPLOCK27_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK27_Pos)         /*!< 0x08000000 */
#define BSEC_SPLOCKx_SPLOCK27          BSEC_SPLOCKx_SPLOCK27_Msk                   /*!< Sticky programming lock for word (27+32*x) */
#define BSEC_SPLOCKx_SPLOCK28_Pos      (28U)
#define BSEC_SPLOCKx_SPLOCK28_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK28_Pos)         /*!< 0x10000000 */
#define BSEC_SPLOCKx_SPLOCK28          BSEC_SPLOCKx_SPLOCK28_Msk                   /*!< Sticky programming lock for word (28+32*x) */
#define BSEC_SPLOCKx_SPLOCK29_Pos      (29U)
#define BSEC_SPLOCKx_SPLOCK29_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK29_Pos)         /*!< 0x20000000 */
#define BSEC_SPLOCKx_SPLOCK29          BSEC_SPLOCKx_SPLOCK29_Msk                   /*!< Sticky programming lock for word (29+32*x) */
#define BSEC_SPLOCKx_SPLOCK30_Pos      (30U)
#define BSEC_SPLOCKx_SPLOCK30_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK30_Pos)         /*!< 0x40000000 */
#define BSEC_SPLOCKx_SPLOCK30          BSEC_SPLOCKx_SPLOCK30_Msk                   /*!< Sticky programming lock for word (30+32*x) */
#define BSEC_SPLOCKx_SPLOCK31_Pos      (31U)
#define BSEC_SPLOCKx_SPLOCK31_Msk      (0x1UL << BSEC_SPLOCKx_SPLOCK31_Pos)         /*!< 0x80000000 */
#define BSEC_SPLOCKx_SPLOCK31          BSEC_SPLOCKx_SPLOCK31_Msk                   /*!< Sticky programming lock for word (31+32*x) */

/*****************  Bit definition for BSEC_SWLOCKx register  *****************/
#define BSEC_SWLOCKx_SWLOCK0_Pos       (0U)
#define BSEC_SWLOCKx_SWLOCK0_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK0_Pos)          /*!< 0x00000001 */
#define BSEC_SWLOCKx_SWLOCK0           BSEC_SWLOCKx_SWLOCK0_Msk                    /*!< Sticky write lock for shadow register (32*x) */
#define BSEC_SWLOCKx_SWLOCK1_Pos       (1U)
#define BSEC_SWLOCKx_SWLOCK1_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK1_Pos)          /*!< 0x00000002 */
#define BSEC_SWLOCKx_SWLOCK1           BSEC_SWLOCKx_SWLOCK1_Msk                    /*!< Sticky write lock for shadow register (1+32*x) */
#define BSEC_SWLOCKx_SWLOCK2_Pos       (2U)
#define BSEC_SWLOCKx_SWLOCK2_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK2_Pos)          /*!< 0x00000004 */
#define BSEC_SWLOCKx_SWLOCK2           BSEC_SWLOCKx_SWLOCK2_Msk                    /*!< Sticky write lock for shadow register (2+32*x) */
#define BSEC_SWLOCKx_SWLOCK3_Pos       (3U)
#define BSEC_SWLOCKx_SWLOCK3_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK3_Pos)          /*!< 0x00000008 */
#define BSEC_SWLOCKx_SWLOCK3           BSEC_SWLOCKx_SWLOCK3_Msk                    /*!< Sticky write lock for shadow register (3+32*x) */
#define BSEC_SWLOCKx_SWLOCK4_Pos       (4U)
#define BSEC_SWLOCKx_SWLOCK4_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK4_Pos)          /*!< 0x00000010 */
#define BSEC_SWLOCKx_SWLOCK4           BSEC_SWLOCKx_SWLOCK4_Msk                    /*!< Sticky write lock for shadow register (4+32*x) */
#define BSEC_SWLOCKx_SWLOCK5_Pos       (5U)
#define BSEC_SWLOCKx_SWLOCK5_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK5_Pos)          /*!< 0x00000020 */
#define BSEC_SWLOCKx_SWLOCK5           BSEC_SWLOCKx_SWLOCK5_Msk                    /*!< Sticky write lock for shadow register (5+32*x) */
#define BSEC_SWLOCKx_SWLOCK6_Pos       (6U)
#define BSEC_SWLOCKx_SWLOCK6_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK6_Pos)          /*!< 0x00000040 */
#define BSEC_SWLOCKx_SWLOCK6           BSEC_SWLOCKx_SWLOCK6_Msk                    /*!< Sticky write lock for shadow register (6+32*x) */
#define BSEC_SWLOCKx_SWLOCK7_Pos       (7U)
#define BSEC_SWLOCKx_SWLOCK7_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK7_Pos)          /*!< 0x00000080 */
#define BSEC_SWLOCKx_SWLOCK7           BSEC_SWLOCKx_SWLOCK7_Msk                    /*!< Sticky write lock for shadow register (7+32*x) */
#define BSEC_SWLOCKx_SWLOCK8_Pos       (8U)
#define BSEC_SWLOCKx_SWLOCK8_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK8_Pos)          /*!< 0x00000100 */
#define BSEC_SWLOCKx_SWLOCK8           BSEC_SWLOCKx_SWLOCK8_Msk                    /*!< Sticky write lock for shadow register (8+32*x) */
#define BSEC_SWLOCKx_SWLOCK9_Pos       (9U)
#define BSEC_SWLOCKx_SWLOCK9_Msk       (0x1UL << BSEC_SWLOCKx_SWLOCK9_Pos)          /*!< 0x00000200 */
#define BSEC_SWLOCKx_SWLOCK9           BSEC_SWLOCKx_SWLOCK9_Msk                    /*!< Sticky write lock for shadow register (9+32*x) */
#define BSEC_SWLOCKx_SWLOCK10_Pos      (10U)
#define BSEC_SWLOCKx_SWLOCK10_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK10_Pos)         /*!< 0x00000400 */
#define BSEC_SWLOCKx_SWLOCK10          BSEC_SWLOCKx_SWLOCK10_Msk                   /*!< Sticky write lock for shadow register (10+32*x) */
#define BSEC_SWLOCKx_SWLOCK11_Pos      (11U)
#define BSEC_SWLOCKx_SWLOCK11_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK11_Pos)         /*!< 0x00000800 */
#define BSEC_SWLOCKx_SWLOCK11          BSEC_SWLOCKx_SWLOCK11_Msk                   /*!< Sticky write lock for shadow register (11+32*x) */
#define BSEC_SWLOCKx_SWLOCK12_Pos      (12U)
#define BSEC_SWLOCKx_SWLOCK12_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK12_Pos)         /*!< 0x00001000 */
#define BSEC_SWLOCKx_SWLOCK12          BSEC_SWLOCKx_SWLOCK12_Msk                   /*!< Sticky write lock for shadow register (12+32*x) */
#define BSEC_SWLOCKx_SWLOCK13_Pos      (13U)
#define BSEC_SWLOCKx_SWLOCK13_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK13_Pos)         /*!< 0x00002000 */
#define BSEC_SWLOCKx_SWLOCK13          BSEC_SWLOCKx_SWLOCK13_Msk                   /*!< Sticky write lock for shadow register (13+32*x) */
#define BSEC_SWLOCKx_SWLOCK14_Pos      (14U)
#define BSEC_SWLOCKx_SWLOCK14_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK14_Pos)         /*!< 0x00004000 */
#define BSEC_SWLOCKx_SWLOCK14          BSEC_SWLOCKx_SWLOCK14_Msk                   /*!< Sticky write lock for shadow register (14+32*x) */
#define BSEC_SWLOCKx_SWLOCK15_Pos      (15U)
#define BSEC_SWLOCKx_SWLOCK15_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK15_Pos)         /*!< 0x00008000 */
#define BSEC_SWLOCKx_SWLOCK15          BSEC_SWLOCKx_SWLOCK15_Msk                   /*!< Sticky write lock for shadow register (15+32*x) */
#define BSEC_SWLOCKx_SWLOCK16_Pos      (16U)
#define BSEC_SWLOCKx_SWLOCK16_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK16_Pos)         /*!< 0x00010000 */
#define BSEC_SWLOCKx_SWLOCK16          BSEC_SWLOCKx_SWLOCK16_Msk                   /*!< Sticky write lock for shadow register (16+32*x) */
#define BSEC_SWLOCKx_SWLOCK17_Pos      (17U)
#define BSEC_SWLOCKx_SWLOCK17_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK17_Pos)         /*!< 0x00020000 */
#define BSEC_SWLOCKx_SWLOCK17          BSEC_SWLOCKx_SWLOCK17_Msk                   /*!< Sticky write lock for shadow register (17+32*x) */
#define BSEC_SWLOCKx_SWLOCK18_Pos      (18U)
#define BSEC_SWLOCKx_SWLOCK18_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK18_Pos)         /*!< 0x00040000 */
#define BSEC_SWLOCKx_SWLOCK18          BSEC_SWLOCKx_SWLOCK18_Msk                   /*!< Sticky write lock for shadow register (18+32*x) */
#define BSEC_SWLOCKx_SWLOCK19_Pos      (19U)
#define BSEC_SWLOCKx_SWLOCK19_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK19_Pos)         /*!< 0x00080000 */
#define BSEC_SWLOCKx_SWLOCK19          BSEC_SWLOCKx_SWLOCK19_Msk                   /*!< Sticky write lock for shadow register (19+32*x) */
#define BSEC_SWLOCKx_SWLOCK20_Pos      (20U)
#define BSEC_SWLOCKx_SWLOCK20_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK20_Pos)         /*!< 0x00100000 */
#define BSEC_SWLOCKx_SWLOCK20          BSEC_SWLOCKx_SWLOCK20_Msk                   /*!< Sticky write lock for shadow register (20+32*x) */
#define BSEC_SWLOCKx_SWLOCK21_Pos      (21U)
#define BSEC_SWLOCKx_SWLOCK21_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK21_Pos)         /*!< 0x00200000 */
#define BSEC_SWLOCKx_SWLOCK21          BSEC_SWLOCKx_SWLOCK21_Msk                   /*!< Sticky write lock for shadow register (21+32*x) */
#define BSEC_SWLOCKx_SWLOCK22_Pos      (22U)
#define BSEC_SWLOCKx_SWLOCK22_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK22_Pos)         /*!< 0x00400000 */
#define BSEC_SWLOCKx_SWLOCK22          BSEC_SWLOCKx_SWLOCK22_Msk                   /*!< Sticky write lock for shadow register (22+32*x) */
#define BSEC_SWLOCKx_SWLOCK23_Pos      (23U)
#define BSEC_SWLOCKx_SWLOCK23_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK23_Pos)         /*!< 0x00800000 */
#define BSEC_SWLOCKx_SWLOCK23          BSEC_SWLOCKx_SWLOCK23_Msk                   /*!< Sticky write lock for shadow register (23+32*x) */
#define BSEC_SWLOCKx_SWLOCK24_Pos      (24U)
#define BSEC_SWLOCKx_SWLOCK24_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK24_Pos)         /*!< 0x01000000 */
#define BSEC_SWLOCKx_SWLOCK24          BSEC_SWLOCKx_SWLOCK24_Msk                   /*!< Sticky write lock for shadow register (24+32*x) */
#define BSEC_SWLOCKx_SWLOCK25_Pos      (25U)
#define BSEC_SWLOCKx_SWLOCK25_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK25_Pos)         /*!< 0x02000000 */
#define BSEC_SWLOCKx_SWLOCK25          BSEC_SWLOCKx_SWLOCK25_Msk                   /*!< Sticky write lock for shadow register (25+32*x) */
#define BSEC_SWLOCKx_SWLOCK26_Pos      (26U)
#define BSEC_SWLOCKx_SWLOCK26_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK26_Pos)         /*!< 0x04000000 */
#define BSEC_SWLOCKx_SWLOCK26          BSEC_SWLOCKx_SWLOCK26_Msk                   /*!< Sticky write lock for shadow register (26+32*x) */
#define BSEC_SWLOCKx_SWLOCK27_Pos      (27U)
#define BSEC_SWLOCKx_SWLOCK27_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK27_Pos)         /*!< 0x08000000 */
#define BSEC_SWLOCKx_SWLOCK27          BSEC_SWLOCKx_SWLOCK27_Msk                   /*!< Sticky write lock for shadow register (27+32*x) */
#define BSEC_SWLOCKx_SWLOCK28_Pos      (28U)
#define BSEC_SWLOCKx_SWLOCK28_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK28_Pos)         /*!< 0x10000000 */
#define BSEC_SWLOCKx_SWLOCK28          BSEC_SWLOCKx_SWLOCK28_Msk                   /*!< Sticky write lock for shadow register (28+32*x) */
#define BSEC_SWLOCKx_SWLOCK29_Pos      (29U)
#define BSEC_SWLOCKx_SWLOCK29_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK29_Pos)         /*!< 0x20000000 */
#define BSEC_SWLOCKx_SWLOCK29          BSEC_SWLOCKx_SWLOCK29_Msk                   /*!< Sticky write lock for shadow register (29+32*x) */
#define BSEC_SWLOCKx_SWLOCK30_Pos      (30U)
#define BSEC_SWLOCKx_SWLOCK30_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK30_Pos)         /*!< 0x40000000 */
#define BSEC_SWLOCKx_SWLOCK30          BSEC_SWLOCKx_SWLOCK30_Msk                   /*!< Sticky write lock for shadow register (30+32*x) */
#define BSEC_SWLOCKx_SWLOCK31_Pos      (31U)
#define BSEC_SWLOCKx_SWLOCK31_Msk      (0x1UL << BSEC_SWLOCKx_SWLOCK31_Pos)         /*!< 0x80000000 */
#define BSEC_SWLOCKx_SWLOCK31          BSEC_SWLOCKx_SWLOCK31_Msk                   /*!< Sticky write lock for shadow register (31+32*x) */

/*****************  Bit definition for BSEC_SRLOCKx register  *****************/
#define BSEC_SRLOCKx_SRLOCK0_Pos       (0U)
#define BSEC_SRLOCKx_SRLOCK0_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK0_Pos)          /*!< 0x00000001 */
#define BSEC_SRLOCKx_SRLOCK0           BSEC_SRLOCKx_SRLOCK0_Msk                    /*!< Sticky reload lock for fuse word (32*x) */
#define BSEC_SRLOCKx_SRLOCK1_Pos       (1U)
#define BSEC_SRLOCKx_SRLOCK1_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK1_Pos)          /*!< 0x00000002 */
#define BSEC_SRLOCKx_SRLOCK1           BSEC_SRLOCKx_SRLOCK1_Msk                    /*!< Sticky reload lock for fuse word (1+32*x) */
#define BSEC_SRLOCKx_SRLOCK2_Pos       (2U)
#define BSEC_SRLOCKx_SRLOCK2_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK2_Pos)          /*!< 0x00000004 */
#define BSEC_SRLOCKx_SRLOCK2           BSEC_SRLOCKx_SRLOCK2_Msk                    /*!< Sticky reload lock for fuse word (2+32*x) */
#define BSEC_SRLOCKx_SRLOCK3_Pos       (3U)
#define BSEC_SRLOCKx_SRLOCK3_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK3_Pos)          /*!< 0x00000008 */
#define BSEC_SRLOCKx_SRLOCK3           BSEC_SRLOCKx_SRLOCK3_Msk                    /*!< Sticky reload lock for fuse word (3+32*x) */
#define BSEC_SRLOCKx_SRLOCK4_Pos       (4U)
#define BSEC_SRLOCKx_SRLOCK4_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK4_Pos)          /*!< 0x00000010 */
#define BSEC_SRLOCKx_SRLOCK4           BSEC_SRLOCKx_SRLOCK4_Msk                    /*!< Sticky reload lock for fuse word (4+32*x) */
#define BSEC_SRLOCKx_SRLOCK5_Pos       (5U)
#define BSEC_SRLOCKx_SRLOCK5_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK5_Pos)          /*!< 0x00000020 */
#define BSEC_SRLOCKx_SRLOCK5           BSEC_SRLOCKx_SRLOCK5_Msk                    /*!< Sticky reload lock for fuse word (5+32*x) */
#define BSEC_SRLOCKx_SRLOCK6_Pos       (6U)
#define BSEC_SRLOCKx_SRLOCK6_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK6_Pos)          /*!< 0x00000040 */
#define BSEC_SRLOCKx_SRLOCK6           BSEC_SRLOCKx_SRLOCK6_Msk                    /*!< Sticky reload lock for fuse word (6+32*x) */
#define BSEC_SRLOCKx_SRLOCK7_Pos       (7U)
#define BSEC_SRLOCKx_SRLOCK7_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK7_Pos)          /*!< 0x00000080 */
#define BSEC_SRLOCKx_SRLOCK7           BSEC_SRLOCKx_SRLOCK7_Msk                    /*!< Sticky reload lock for fuse word (7+32*x) */
#define BSEC_SRLOCKx_SRLOCK8_Pos       (8U)
#define BSEC_SRLOCKx_SRLOCK8_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK8_Pos)          /*!< 0x00000100 */
#define BSEC_SRLOCKx_SRLOCK8           BSEC_SRLOCKx_SRLOCK8_Msk                    /*!< Sticky reload lock for fuse word (8+32*x) */
#define BSEC_SRLOCKx_SRLOCK9_Pos       (9U)
#define BSEC_SRLOCKx_SRLOCK9_Msk       (0x1UL << BSEC_SRLOCKx_SRLOCK9_Pos)          /*!< 0x00000200 */
#define BSEC_SRLOCKx_SRLOCK9           BSEC_SRLOCKx_SRLOCK9_Msk                    /*!< Sticky reload lock for fuse word (9+32*x) */
#define BSEC_SRLOCKx_SRLOCK10_Pos      (10U)
#define BSEC_SRLOCKx_SRLOCK10_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK10_Pos)         /*!< 0x00000400 */
#define BSEC_SRLOCKx_SRLOCK10          BSEC_SRLOCKx_SRLOCK10_Msk                   /*!< Sticky reload lock for fuse word (10+2*x) */
#define BSEC_SRLOCKx_SRLOCK11_Pos      (11U)
#define BSEC_SRLOCKx_SRLOCK11_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK11_Pos)         /*!< 0x00000800 */
#define BSEC_SRLOCKx_SRLOCK11          BSEC_SRLOCKx_SRLOCK11_Msk                   /*!< Sticky reload lock for fuse word (11+32*x) */
#define BSEC_SRLOCKx_SRLOCK12_Pos      (12U)
#define BSEC_SRLOCKx_SRLOCK12_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK12_Pos)         /*!< 0x00001000 */
#define BSEC_SRLOCKx_SRLOCK12          BSEC_SRLOCKx_SRLOCK12_Msk                   /*!< Sticky reload lock for fuse word (12+32*x) */
#define BSEC_SRLOCKx_SRLOCK13_Pos      (13U)
#define BSEC_SRLOCKx_SRLOCK13_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK13_Pos)         /*!< 0x00002000 */
#define BSEC_SRLOCKx_SRLOCK13          BSEC_SRLOCKx_SRLOCK13_Msk                   /*!< Sticky reload lock for fuse word (13+32*x) */
#define BSEC_SRLOCKx_SRLOCK14_Pos      (14U)
#define BSEC_SRLOCKx_SRLOCK14_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK14_Pos)         /*!< 0x00004000 */
#define BSEC_SRLOCKx_SRLOCK14          BSEC_SRLOCKx_SRLOCK14_Msk                   /*!< Sticky reload lock for fuse word (14+32*x) */
#define BSEC_SRLOCKx_SRLOCK15_Pos      (15U)
#define BSEC_SRLOCKx_SRLOCK15_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK15_Pos)         /*!< 0x00008000 */
#define BSEC_SRLOCKx_SRLOCK15          BSEC_SRLOCKx_SRLOCK15_Msk                   /*!< Sticky reload lock for fuse word (15+32*x) */
#define BSEC_SRLOCKx_SRLOCK16_Pos      (16U)
#define BSEC_SRLOCKx_SRLOCK16_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK16_Pos)         /*!< 0x00010000 */
#define BSEC_SRLOCKx_SRLOCK16          BSEC_SRLOCKx_SRLOCK16_Msk                   /*!< Sticky reload lock for fuse word (16+32*x) */
#define BSEC_SRLOCKx_SRLOCK17_Pos      (17U)
#define BSEC_SRLOCKx_SRLOCK17_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK17_Pos)         /*!< 0x00020000 */
#define BSEC_SRLOCKx_SRLOCK17          BSEC_SRLOCKx_SRLOCK17_Msk                   /*!< Sticky reload lock for fuse word (17+32*x) */
#define BSEC_SRLOCKx_SRLOCK18_Pos      (18U)
#define BSEC_SRLOCKx_SRLOCK18_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK18_Pos)         /*!< 0x00040000 */
#define BSEC_SRLOCKx_SRLOCK18          BSEC_SRLOCKx_SRLOCK18_Msk                   /*!< Sticky reload lock for fuse word (18+32*x) */
#define BSEC_SRLOCKx_SRLOCK19_Pos      (19U)
#define BSEC_SRLOCKx_SRLOCK19_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK19_Pos)         /*!< 0x00080000 */
#define BSEC_SRLOCKx_SRLOCK19          BSEC_SRLOCKx_SRLOCK19_Msk                   /*!< Sticky reload lock for fuse word (19+32*x) */
#define BSEC_SRLOCKx_SRLOCK20_Pos      (20U)
#define BSEC_SRLOCKx_SRLOCK20_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK20_Pos)         /*!< 0x00100000 */
#define BSEC_SRLOCKx_SRLOCK20          BSEC_SRLOCKx_SRLOCK20_Msk                   /*!< Sticky reload lock for fuse word (20+32*x) */
#define BSEC_SRLOCKx_SRLOCK21_Pos      (21U)
#define BSEC_SRLOCKx_SRLOCK21_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK21_Pos)         /*!< 0x00200000 */
#define BSEC_SRLOCKx_SRLOCK21          BSEC_SRLOCKx_SRLOCK21_Msk                   /*!< Sticky reload lock for fuse word (21+32*x) */
#define BSEC_SRLOCKx_SRLOCK22_Pos      (22U)
#define BSEC_SRLOCKx_SRLOCK22_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK22_Pos)         /*!< 0x00400000 */
#define BSEC_SRLOCKx_SRLOCK22          BSEC_SRLOCKx_SRLOCK22_Msk                   /*!< Sticky reload lock for fuse word (22+32*x) */
#define BSEC_SRLOCKx_SRLOCK23_Pos      (23U)
#define BSEC_SRLOCKx_SRLOCK23_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK23_Pos)         /*!< 0x00800000 */
#define BSEC_SRLOCKx_SRLOCK23          BSEC_SRLOCKx_SRLOCK23_Msk                   /*!< Sticky reload lock for fuse word (23+32*x) */
#define BSEC_SRLOCKx_SRLOCK24_Pos      (24U)
#define BSEC_SRLOCKx_SRLOCK24_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK24_Pos)         /*!< 0x01000000 */
#define BSEC_SRLOCKx_SRLOCK24          BSEC_SRLOCKx_SRLOCK24_Msk                   /*!< Sticky reload lock for fuse word (24+32*x) */
#define BSEC_SRLOCKx_SRLOCK25_Pos      (25U)
#define BSEC_SRLOCKx_SRLOCK25_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK25_Pos)         /*!< 0x02000000 */
#define BSEC_SRLOCKx_SRLOCK25          BSEC_SRLOCKx_SRLOCK25_Msk                   /*!< Sticky reload lock for fuse word (25+32*x) */
#define BSEC_SRLOCKx_SRLOCK26_Pos      (26U)
#define BSEC_SRLOCKx_SRLOCK26_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK26_Pos)         /*!< 0x04000000 */
#define BSEC_SRLOCKx_SRLOCK26          BSEC_SRLOCKx_SRLOCK26_Msk                   /*!< Sticky reload lock for fuse word (26+32*x) */
#define BSEC_SRLOCKx_SRLOCK27_Pos      (27U)
#define BSEC_SRLOCKx_SRLOCK27_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK27_Pos)         /*!< 0x08000000 */
#define BSEC_SRLOCKx_SRLOCK27          BSEC_SRLOCKx_SRLOCK27_Msk                   /*!< Sticky reload lock for fuse word (27+32*x) */
#define BSEC_SRLOCKx_SRLOCK28_Pos      (28U)
#define BSEC_SRLOCKx_SRLOCK28_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK28_Pos)         /*!< 0x10000000 */
#define BSEC_SRLOCKx_SRLOCK28          BSEC_SRLOCKx_SRLOCK28_Msk                   /*!< Sticky reload lock for fuse word (28+32*x) */
#define BSEC_SRLOCKx_SRLOCK29_Pos      (29U)
#define BSEC_SRLOCKx_SRLOCK29_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK29_Pos)         /*!< 0x20000000 */
#define BSEC_SRLOCKx_SRLOCK29          BSEC_SRLOCKx_SRLOCK29_Msk                   /*!< Sticky reload lock for fuse word (29+32*x) */
#define BSEC_SRLOCKx_SRLOCK30_Pos      (30U)
#define BSEC_SRLOCKx_SRLOCK30_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK30_Pos)         /*!< 0x40000000 */
#define BSEC_SRLOCKx_SRLOCK30          BSEC_SRLOCKx_SRLOCK30_Msk                   /*!< Sticky reload lock for fuse word (30+32*x) */
#define BSEC_SRLOCKx_SRLOCK31_Pos      (31U)
#define BSEC_SRLOCKx_SRLOCK31_Msk      (0x1UL << BSEC_SRLOCKx_SRLOCK31_Pos)         /*!< 0x80000000 */
#define BSEC_SRLOCKx_SRLOCK31          BSEC_SRLOCKx_SRLOCK31_Msk                   /*!< Sticky reload lock for fuse word (31+32*x) */

/****************  Bit definition for BSEC_OTPVLDRx register  *****************/
#define BSEC_OTPVLDRx_VLDF0_Pos        (0U)
#define BSEC_OTPVLDRx_VLDF0_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF0_Pos)           /*!< 0x00000001 */
#define BSEC_OTPVLDRx_VLDF0            BSEC_OTPVLDRx_VLDF0_Msk                     /*!< Valid flag for shadow register (32*x) */
#define BSEC_OTPVLDRx_VLDF1_Pos        (1U)
#define BSEC_OTPVLDRx_VLDF1_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF1_Pos)           /*!< 0x00000002 */
#define BSEC_OTPVLDRx_VLDF1            BSEC_OTPVLDRx_VLDF1_Msk                     /*!< Valid flag for shadow register (1+32*x) */
#define BSEC_OTPVLDRx_VLDF2_Pos        (2U)
#define BSEC_OTPVLDRx_VLDF2_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF2_Pos)           /*!< 0x00000004 */
#define BSEC_OTPVLDRx_VLDF2            BSEC_OTPVLDRx_VLDF2_Msk                     /*!< Valid flag for shadow register (2+32*x) */
#define BSEC_OTPVLDRx_VLDF3_Pos        (3U)
#define BSEC_OTPVLDRx_VLDF3_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF3_Pos)           /*!< 0x00000008 */
#define BSEC_OTPVLDRx_VLDF3            BSEC_OTPVLDRx_VLDF3_Msk                     /*!< Valid flag for shadow register (3+32*x) */
#define BSEC_OTPVLDRx_VLDF4_Pos        (4U)
#define BSEC_OTPVLDRx_VLDF4_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF4_Pos)           /*!< 0x00000010 */
#define BSEC_OTPVLDRx_VLDF4            BSEC_OTPVLDRx_VLDF4_Msk                     /*!< Valid flag for shadow register (4+32*x) */
#define BSEC_OTPVLDRx_VLDF5_Pos        (5U)
#define BSEC_OTPVLDRx_VLDF5_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF5_Pos)           /*!< 0x00000020 */
#define BSEC_OTPVLDRx_VLDF5            BSEC_OTPVLDRx_VLDF5_Msk                     /*!< Valid flag for shadow register (5+32*x) */
#define BSEC_OTPVLDRx_VLDF6_Pos        (6U)
#define BSEC_OTPVLDRx_VLDF6_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF6_Pos)           /*!< 0x00000040 */
#define BSEC_OTPVLDRx_VLDF6            BSEC_OTPVLDRx_VLDF6_Msk                     /*!< Valid flag for shadow register (6+32*x) */
#define BSEC_OTPVLDRx_VLDF7_Pos        (7U)
#define BSEC_OTPVLDRx_VLDF7_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF7_Pos)           /*!< 0x00000080 */
#define BSEC_OTPVLDRx_VLDF7            BSEC_OTPVLDRx_VLDF7_Msk                     /*!< Valid flag for shadow register (7+32*x) */
#define BSEC_OTPVLDRx_VLDF8_Pos        (8U)
#define BSEC_OTPVLDRx_VLDF8_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF8_Pos)           /*!< 0x00000100 */
#define BSEC_OTPVLDRx_VLDF8            BSEC_OTPVLDRx_VLDF8_Msk                     /*!< Valid flag for shadow register (8+32*x) */
#define BSEC_OTPVLDRx_VLDF9_Pos        (9U)
#define BSEC_OTPVLDRx_VLDF9_Msk        (0x1UL << BSEC_OTPVLDRx_VLDF9_Pos)           /*!< 0x00000200 */
#define BSEC_OTPVLDRx_VLDF9            BSEC_OTPVLDRx_VLDF9_Msk                     /*!< Valid flag for shadow register (9+32*x) */
#define BSEC_OTPVLDRx_VLDF10_Pos       (10U)
#define BSEC_OTPVLDRx_VLDF10_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF10_Pos)          /*!< 0x00000400 */
#define BSEC_OTPVLDRx_VLDF10           BSEC_OTPVLDRx_VLDF10_Msk                    /*!< Valid flag for shadow register (10+32*x) */
#define BSEC_OTPVLDRx_VLDF11_Pos       (11U)
#define BSEC_OTPVLDRx_VLDF11_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF11_Pos)          /*!< 0x00000800 */
#define BSEC_OTPVLDRx_VLDF11           BSEC_OTPVLDRx_VLDF11_Msk                    /*!< Valid flag for shadow register (11+32*x) */
#define BSEC_OTPVLDRx_VLDF12_Pos       (12U)
#define BSEC_OTPVLDRx_VLDF12_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF12_Pos)          /*!< 0x00001000 */
#define BSEC_OTPVLDRx_VLDF12           BSEC_OTPVLDRx_VLDF12_Msk                    /*!< Valid flag for shadow register (12+32*x) */
#define BSEC_OTPVLDRx_VLDF13_Pos       (13U)
#define BSEC_OTPVLDRx_VLDF13_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF13_Pos)          /*!< 0x00002000 */
#define BSEC_OTPVLDRx_VLDF13           BSEC_OTPVLDRx_VLDF13_Msk                    /*!< Valid flag for shadow register (13+32*x) */
#define BSEC_OTPVLDRx_VLDF14_Pos       (14U)
#define BSEC_OTPVLDRx_VLDF14_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF14_Pos)          /*!< 0x00004000 */
#define BSEC_OTPVLDRx_VLDF14           BSEC_OTPVLDRx_VLDF14_Msk                    /*!< Valid flag for shadow register (14+32*x) */
#define BSEC_OTPVLDRx_VLDF15_Pos       (15U)
#define BSEC_OTPVLDRx_VLDF15_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF15_Pos)          /*!< 0x00008000 */
#define BSEC_OTPVLDRx_VLDF15           BSEC_OTPVLDRx_VLDF15_Msk                    /*!< Valid flag for shadow register (15+32*x) */
#define BSEC_OTPVLDRx_VLDF16_Pos       (16U)
#define BSEC_OTPVLDRx_VLDF16_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF16_Pos)          /*!< 0x00010000 */
#define BSEC_OTPVLDRx_VLDF16           BSEC_OTPVLDRx_VLDF16_Msk                    /*!< Valid flag for shadow register (16+32*x) */
#define BSEC_OTPVLDRx_VLDF17_Pos       (17U)
#define BSEC_OTPVLDRx_VLDF17_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF17_Pos)          /*!< 0x00020000 */
#define BSEC_OTPVLDRx_VLDF17           BSEC_OTPVLDRx_VLDF17_Msk                    /*!< Valid flag for shadow register (17+32*x) */
#define BSEC_OTPVLDRx_VLDF18_Pos       (18U)
#define BSEC_OTPVLDRx_VLDF18_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF18_Pos)          /*!< 0x00040000 */
#define BSEC_OTPVLDRx_VLDF18           BSEC_OTPVLDRx_VLDF18_Msk                    /*!< Valid flag for shadow register (18+32*x) */
#define BSEC_OTPVLDRx_VLDF19_Pos       (19U)
#define BSEC_OTPVLDRx_VLDF19_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF19_Pos)          /*!< 0x00080000 */
#define BSEC_OTPVLDRx_VLDF19           BSEC_OTPVLDRx_VLDF19_Msk                    /*!< Valid flag for shadow register (19+32*x) */
#define BSEC_OTPVLDRx_VLDF20_Pos       (20U)
#define BSEC_OTPVLDRx_VLDF20_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF20_Pos)          /*!< 0x00100000 */
#define BSEC_OTPVLDRx_VLDF20           BSEC_OTPVLDRx_VLDF20_Msk                    /*!< Valid flag for shadow register (20+32*x) */
#define BSEC_OTPVLDRx_VLDF21_Pos       (21U)
#define BSEC_OTPVLDRx_VLDF21_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF21_Pos)          /*!< 0x00200000 */
#define BSEC_OTPVLDRx_VLDF21           BSEC_OTPVLDRx_VLDF21_Msk                    /*!< Valid flag for shadow register (21+32*x) */
#define BSEC_OTPVLDRx_VLDF22_Pos       (22U)
#define BSEC_OTPVLDRx_VLDF22_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF22_Pos)          /*!< 0x00400000 */
#define BSEC_OTPVLDRx_VLDF22           BSEC_OTPVLDRx_VLDF22_Msk                    /*!< Valid flag for shadow register (22+32*x) */
#define BSEC_OTPVLDRx_VLDF23_Pos       (23U)
#define BSEC_OTPVLDRx_VLDF23_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF23_Pos)          /*!< 0x00800000 */
#define BSEC_OTPVLDRx_VLDF23           BSEC_OTPVLDRx_VLDF23_Msk                    /*!< Valid flag for shadow register (23+32*x) */
#define BSEC_OTPVLDRx_VLDF24_Pos       (24U)
#define BSEC_OTPVLDRx_VLDF24_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF24_Pos)          /*!< 0x01000000 */
#define BSEC_OTPVLDRx_VLDF24           BSEC_OTPVLDRx_VLDF24_Msk                    /*!< Valid flag for shadow register (24+32*x) */
#define BSEC_OTPVLDRx_VLDF25_Pos       (25U)
#define BSEC_OTPVLDRx_VLDF25_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF25_Pos)          /*!< 0x02000000 */
#define BSEC_OTPVLDRx_VLDF25           BSEC_OTPVLDRx_VLDF25_Msk                    /*!< Valid flag for shadow register (25+32*x) */
#define BSEC_OTPVLDRx_VLDF26_Pos       (26U)
#define BSEC_OTPVLDRx_VLDF26_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF26_Pos)          /*!< 0x04000000 */
#define BSEC_OTPVLDRx_VLDF26           BSEC_OTPVLDRx_VLDF26_Msk                    /*!< Valid flag for shadow register (26+32*x) */
#define BSEC_OTPVLDRx_VLDF27_Pos       (27U)
#define BSEC_OTPVLDRx_VLDF27_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF27_Pos)          /*!< 0x08000000 */
#define BSEC_OTPVLDRx_VLDF27           BSEC_OTPVLDRx_VLDF27_Msk                    /*!< Valid flag for shadow register (27+32*x) */
#define BSEC_OTPVLDRx_VLDF28_Pos       (28U)
#define BSEC_OTPVLDRx_VLDF28_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF28_Pos)          /*!< 0x10000000 */
#define BSEC_OTPVLDRx_VLDF28           BSEC_OTPVLDRx_VLDF28_Msk                    /*!< Valid flag for shadow register (28+32*x) */
#define BSEC_OTPVLDRx_VLDF29_Pos       (29U)
#define BSEC_OTPVLDRx_VLDF29_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF29_Pos)          /*!< 0x20000000 */
#define BSEC_OTPVLDRx_VLDF29           BSEC_OTPVLDRx_VLDF29_Msk                    /*!< Valid flag for shadow register (29+32*x) */
#define BSEC_OTPVLDRx_VLDF30_Pos       (30U)
#define BSEC_OTPVLDRx_VLDF30_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF30_Pos)          /*!< 0x40000000 */
#define BSEC_OTPVLDRx_VLDF30           BSEC_OTPVLDRx_VLDF30_Msk                    /*!< Valid flag for shadow register (30+32*x) */
#define BSEC_OTPVLDRx_VLDF31_Pos       (31U)
#define BSEC_OTPVLDRx_VLDF31_Msk       (0x1UL << BSEC_OTPVLDRx_VLDF31_Pos)          /*!< 0x80000000 */
#define BSEC_OTPVLDRx_VLDF31           BSEC_OTPVLDRx_VLDF31_Msk                    /*!< Valid flag for shadow register (31+32*x) */

/******************  Bit definition for BSEC_SFSRx register  ******************/
#define BSEC_SFSRx_SFW0_Pos            (0U)
#define BSEC_SFSRx_SFW0_Msk            (0x1UL << BSEC_SFSRx_SFW0_Pos)               /*!< 0x00000001 */
#define BSEC_SFSRx_SFW0                BSEC_SFSRx_SFW0_Msk                         /*!< Shadowed fuse word (32*x) */
#define BSEC_SFSRx_SFW1_Pos            (1U)
#define BSEC_SFSRx_SFW1_Msk            (0x1UL << BSEC_SFSRx_SFW1_Pos)               /*!< 0x00000002 */
#define BSEC_SFSRx_SFW1                BSEC_SFSRx_SFW1_Msk                         /*!< Shadowed fuse word (1+32*x) */
#define BSEC_SFSRx_SFW2_Pos            (2U)
#define BSEC_SFSRx_SFW2_Msk            (0x1UL << BSEC_SFSRx_SFW2_Pos)               /*!< 0x00000004 */
#define BSEC_SFSRx_SFW2                BSEC_SFSRx_SFW2_Msk                         /*!< Shadowed fuse word (2+32*x) */
#define BSEC_SFSRx_SFW3_Pos            (3U)
#define BSEC_SFSRx_SFW3_Msk            (0x1UL << BSEC_SFSRx_SFW3_Pos)               /*!< 0x00000008 */
#define BSEC_SFSRx_SFW3                BSEC_SFSRx_SFW3_Msk                         /*!< Shadowed fuse word (3+32*x) */
#define BSEC_SFSRx_SFW4_Pos            (4U)
#define BSEC_SFSRx_SFW4_Msk            (0x1UL << BSEC_SFSRx_SFW4_Pos)               /*!< 0x00000010 */
#define BSEC_SFSRx_SFW4                BSEC_SFSRx_SFW4_Msk                         /*!< Shadowed fuse word (4+32*x) */
#define BSEC_SFSRx_SFW5_Pos            (5U)
#define BSEC_SFSRx_SFW5_Msk            (0x1UL << BSEC_SFSRx_SFW5_Pos)               /*!< 0x00000020 */
#define BSEC_SFSRx_SFW5                BSEC_SFSRx_SFW5_Msk                         /*!< Shadowed fuse word (5+32*x) */
#define BSEC_SFSRx_SFW6_Pos            (6U)
#define BSEC_SFSRx_SFW6_Msk            (0x1UL << BSEC_SFSRx_SFW6_Pos)               /*!< 0x00000040 */
#define BSEC_SFSRx_SFW6                BSEC_SFSRx_SFW6_Msk                         /*!< Shadowed fuse word (6+32*x) */
#define BSEC_SFSRx_SFW7_Pos            (7U)
#define BSEC_SFSRx_SFW7_Msk            (0x1UL << BSEC_SFSRx_SFW7_Pos)               /*!< 0x00000080 */
#define BSEC_SFSRx_SFW7                BSEC_SFSRx_SFW7_Msk                         /*!< Shadowed fuse word (7+32*x) */
#define BSEC_SFSRx_SFW8_Pos            (8U)
#define BSEC_SFSRx_SFW8_Msk            (0x1UL << BSEC_SFSRx_SFW8_Pos)               /*!< 0x00000100 */
#define BSEC_SFSRx_SFW8                BSEC_SFSRx_SFW8_Msk                         /*!< Shadowed fuse word (8+32*x) */
#define BSEC_SFSRx_SFW9_Pos            (9U)
#define BSEC_SFSRx_SFW9_Msk            (0x1UL << BSEC_SFSRx_SFW9_Pos)               /*!< 0x00000200 */
#define BSEC_SFSRx_SFW9                BSEC_SFSRx_SFW9_Msk                         /*!< Shadowed fuse word (9+32*x) */
#define BSEC_SFSRx_SFW10_Pos           (10U)
#define BSEC_SFSRx_SFW10_Msk           (0x1UL << BSEC_SFSRx_SFW10_Pos)              /*!< 0x00000400 */
#define BSEC_SFSRx_SFW10               BSEC_SFSRx_SFW10_Msk                        /*!< Shadowed fuse word (10+32*x) */
#define BSEC_SFSRx_SFW11_Pos           (11U)
#define BSEC_SFSRx_SFW11_Msk           (0x1UL << BSEC_SFSRx_SFW11_Pos)              /*!< 0x00000800 */
#define BSEC_SFSRx_SFW11               BSEC_SFSRx_SFW11_Msk                        /*!< Shadowed fuse word (11+32*x) */
#define BSEC_SFSRx_SFW12_Pos           (12U)
#define BSEC_SFSRx_SFW12_Msk           (0x1UL << BSEC_SFSRx_SFW12_Pos)              /*!< 0x00001000 */
#define BSEC_SFSRx_SFW12               BSEC_SFSRx_SFW12_Msk                        /*!< Shadowed fuse word (12+32*x) */
#define BSEC_SFSRx_SFW13_Pos           (13U)
#define BSEC_SFSRx_SFW13_Msk           (0x1UL << BSEC_SFSRx_SFW13_Pos)              /*!< 0x00002000 */
#define BSEC_SFSRx_SFW13               BSEC_SFSRx_SFW13_Msk                        /*!< Shadowed fuse word (13+32*x) */
#define BSEC_SFSRx_SFW14_Pos           (14U)
#define BSEC_SFSRx_SFW14_Msk           (0x1UL << BSEC_SFSRx_SFW14_Pos)              /*!< 0x00004000 */
#define BSEC_SFSRx_SFW14               BSEC_SFSRx_SFW14_Msk                        /*!< Shadowed fuse word (14+32*x) */
#define BSEC_SFSRx_SFW15_Pos           (15U)
#define BSEC_SFSRx_SFW15_Msk           (0x1UL << BSEC_SFSRx_SFW15_Pos)              /*!< 0x00008000 */
#define BSEC_SFSRx_SFW15               BSEC_SFSRx_SFW15_Msk                        /*!< Shadowed fuse word (15+32*x) */
#define BSEC_SFSRx_SFW16_Pos           (16U)
#define BSEC_SFSRx_SFW16_Msk           (0x1UL << BSEC_SFSRx_SFW16_Pos)              /*!< 0x00010000 */
#define BSEC_SFSRx_SFW16               BSEC_SFSRx_SFW16_Msk                        /*!< Shadowed fuse word (16+32*x) */
#define BSEC_SFSRx_SFW17_Pos           (17U)
#define BSEC_SFSRx_SFW17_Msk           (0x1UL << BSEC_SFSRx_SFW17_Pos)              /*!< 0x00020000 */
#define BSEC_SFSRx_SFW17               BSEC_SFSRx_SFW17_Msk                        /*!< Shadowed fuse word (17+32*x) */
#define BSEC_SFSRx_SFW18_Pos           (18U)
#define BSEC_SFSRx_SFW18_Msk           (0x1UL << BSEC_SFSRx_SFW18_Pos)              /*!< 0x00040000 */
#define BSEC_SFSRx_SFW18               BSEC_SFSRx_SFW18_Msk                        /*!< Shadowed fuse word (18+32*x) */
#define BSEC_SFSRx_SFW19_Pos           (19U)
#define BSEC_SFSRx_SFW19_Msk           (0x1UL << BSEC_SFSRx_SFW19_Pos)              /*!< 0x00080000 */
#define BSEC_SFSRx_SFW19               BSEC_SFSRx_SFW19_Msk                        /*!< Shadowed fuse word (19+32*x) */
#define BSEC_SFSRx_SFW20_Pos           (20U)
#define BSEC_SFSRx_SFW20_Msk           (0x1UL << BSEC_SFSRx_SFW20_Pos)              /*!< 0x00100000 */
#define BSEC_SFSRx_SFW20               BSEC_SFSRx_SFW20_Msk                        /*!< Shadowed fuse word (20+32*x) */
#define BSEC_SFSRx_SFW21_Pos           (21U)
#define BSEC_SFSRx_SFW21_Msk           (0x1UL << BSEC_SFSRx_SFW21_Pos)              /*!< 0x00200000 */
#define BSEC_SFSRx_SFW21               BSEC_SFSRx_SFW21_Msk                        /*!< Shadowed fuse word (21+32*x) */
#define BSEC_SFSRx_SFW22_Pos           (22U)
#define BSEC_SFSRx_SFW22_Msk           (0x1UL << BSEC_SFSRx_SFW22_Pos)              /*!< 0x00400000 */
#define BSEC_SFSRx_SFW22               BSEC_SFSRx_SFW22_Msk                        /*!< Shadowed fuse word (22+32*x) */
#define BSEC_SFSRx_SFW23_Pos           (23U)
#define BSEC_SFSRx_SFW23_Msk           (0x1UL << BSEC_SFSRx_SFW23_Pos)              /*!< 0x00800000 */
#define BSEC_SFSRx_SFW23               BSEC_SFSRx_SFW23_Msk                        /*!< Shadowed fuse word (23+32*x) */
#define BSEC_SFSRx_SFW24_Pos           (24U)
#define BSEC_SFSRx_SFW24_Msk           (0x1UL << BSEC_SFSRx_SFW24_Pos)              /*!< 0x01000000 */
#define BSEC_SFSRx_SFW24               BSEC_SFSRx_SFW24_Msk                        /*!< Shadowed fuse word (24+32*x) */
#define BSEC_SFSRx_SFW25_Pos           (25U)
#define BSEC_SFSRx_SFW25_Msk           (0x1UL << BSEC_SFSRx_SFW25_Pos)              /*!< 0x02000000 */
#define BSEC_SFSRx_SFW25               BSEC_SFSRx_SFW25_Msk                        /*!< Shadowed fuse word (25+32*x) */
#define BSEC_SFSRx_SFW26_Pos           (26U)
#define BSEC_SFSRx_SFW26_Msk           (0x1UL << BSEC_SFSRx_SFW26_Pos)              /*!< 0x04000000 */
#define BSEC_SFSRx_SFW26               BSEC_SFSRx_SFW26_Msk                        /*!< Shadowed fuse word (26+32*x) */
#define BSEC_SFSRx_SFW27_Pos           (27U)
#define BSEC_SFSRx_SFW27_Msk           (0x1UL << BSEC_SFSRx_SFW27_Pos)              /*!< 0x08000000 */
#define BSEC_SFSRx_SFW27               BSEC_SFSRx_SFW27_Msk                        /*!< Shadowed fuse word (27+32*x) */
#define BSEC_SFSRx_SFW28_Pos           (28U)
#define BSEC_SFSRx_SFW28_Msk           (0x1UL << BSEC_SFSRx_SFW28_Pos)              /*!< 0x10000000 */
#define BSEC_SFSRx_SFW28               BSEC_SFSRx_SFW28_Msk                        /*!< Shadowed fuse word (28+32*x) */
#define BSEC_SFSRx_SFW29_Pos           (29U)
#define BSEC_SFSRx_SFW29_Msk           (0x1UL << BSEC_SFSRx_SFW29_Pos)              /*!< 0x20000000 */
#define BSEC_SFSRx_SFW29               BSEC_SFSRx_SFW29_Msk                        /*!< Shadowed fuse word (29+32*x) */
#define BSEC_SFSRx_SFW30_Pos           (30U)
#define BSEC_SFSRx_SFW30_Msk           (0x1UL << BSEC_SFSRx_SFW30_Pos)              /*!< 0x40000000 */
#define BSEC_SFSRx_SFW30               BSEC_SFSRx_SFW30_Msk                        /*!< Shadowed fuse word (30+32*x) */
#define BSEC_SFSRx_SFW31_Pos           (31U)
#define BSEC_SFSRx_SFW31_Msk           (0x1UL << BSEC_SFSRx_SFW31_Pos)              /*!< 0x80000000 */
#define BSEC_SFSRx_SFW31               BSEC_SFSRx_SFW31_Msk                        /*!< Shadowed fuse word (31+32*x) */

/******************  Bit definition for BSEC_OTPCR register  ******************/
#define BSEC_OTPCR_ADDR_Pos            (0U)
#define BSEC_OTPCR_ADDR_Msk            (0x1FFUL << BSEC_OTPCR_ADDR_Pos)             /*!< 0x000001FF */
#define BSEC_OTPCR_ADDR                BSEC_OTPCR_ADDR_Msk                         /*!< Fuse word address */
#define BSEC_OTPCR_PROG_Pos            (13U)
#define BSEC_OTPCR_PROG_Msk            (0x1UL << BSEC_OTPCR_PROG_Pos)               /*!< 0x00002000 */
#define BSEC_OTPCR_PROG                BSEC_OTPCR_PROG_Msk                         /*!< Fuse word programming */
#define BSEC_OTPCR_PPLOCK_Pos          (14U)
#define BSEC_OTPCR_PPLOCK_Msk          (0x1UL << BSEC_OTPCR_PPLOCK_Pos)             /*!< 0x00004000 */
#define BSEC_OTPCR_PPLOCK              BSEC_OTPCR_PPLOCK_Msk                       /*!< Permanent programming lock */
#define BSEC_OTPCR_LASTCID_Pos         (19U)
#define BSEC_OTPCR_LASTCID_Msk         (0x7UL << BSEC_OTPCR_LASTCID_Pos)            /*!< 0x00380000 */
#define BSEC_OTPCR_LASTCID             BSEC_OTPCR_LASTCID_Msk                      /*!< Last CID */

/*******************  Bit definition for BSEC_WDR register  *******************/
#define BSEC_WDR_WRDATA_Pos           (0U)
#define BSEC_WDR_WRDATA_Msk            (0xFFFFFFFFUL << BSEC_WDR_WRDATA_Pos)        /*!< 0xFFFFFFFF */
#define BSEC_WDR_WRDATA               BSEC_WDR_WRDATA_Msk                     /*!< OTP write data */

/*****************  Bit definition for BSEC_SRDATAR register  *****************/
#define BSEC_SRDATAR_SRDATA_Pos       (0U)
#define BSEC_SRDATAR_SRDATA_Msk       (0xFFFFFFFFUL << BSEC_SRDATAR_SRDATA_Pos)/*!< 0xFFFFFFFF */
#define BSEC_SRDATAR_SRDATA           BSEC_SRDATAR_SRDATA_Msk                 /*!< Supplementary read data */

/****************  Bit definition for BSEC_SCRATCHRx register  ****************/
#define BSEC_SCRATCHRx_SDATA_Pos       (0U)
#define BSEC_SCRATCHRx_SDATA_Msk       (0xFFFFFFFFUL << BSEC_SCRATCHRx_SDATA_Pos)   /*!< 0xFFFFFFFF */
#define BSEC_SCRATCHRx_SDATA           BSEC_SCRATCHRx_SDATA_Msk                    /*!< Scratch data */

/******************  Bit definition for BSEC_LOCKR register  ******************/
#define BSEC_LOCKR_GWLOCK_Pos         (0U)
#define BSEC_LOCKR_GWLOCK_Msk          (0x1UL << BSEC_LOCKR_GWLOCK_Pos)             /*!< 0x00000001 */
#define BSEC_LOCKR_GWLOCK             BSEC_LOCKR_GWLOCK_Msk                   /*!< Global write lock */
#define BSEC_LOCKR_DENLOCK_Pos        (1U)
#define BSEC_LOCKR_DENLOCK_Msk        (0x1UL << BSEC_LOCKR_DENLOCK_Pos)        /*!< 0x00000002 */
#define BSEC_LOCKR_DENLOCK            BSEC_LOCKR_DENLOCK_Msk                  /*!< Debug enable register sticky lock */
#define BSEC_LOCKR_HKLOCK_Pos         (2U)
#define BSEC_LOCKR_HKLOCK_Msk          (0x1UL << BSEC_LOCKR_HKLOCK_Pos)             /*!< 0x00000004 */
#define BSEC_LOCKR_HKLOCK             BSEC_LOCKR_HKLOCK_Msk                   /*!< Hardware key lock */

/*****************  Bit definition for BSEC_JTAGINR register  *****************/
#define BSEC_JTAGINR_JDATAIN_Pos       (0U)
#define BSEC_JTAGINR_JDATAIN_Msk       (0xFFFFFFFFUL << BSEC_JTAGINR_JDATAIN_Pos)   /*!< 0xFFFFFFFF */
#define BSEC_JTAGINR_JDATAIN           BSEC_JTAGINR_JDATAIN_Msk                    /*!< JTAG input data */

/****************  Bit definition for BSEC_JTAGOUTR register  *****************/
#define BSEC_JTAGOUTR_JDATAOUT_Pos     (0U)
#define BSEC_JTAGOUTR_JDATAOUT_Msk     (0xFFFFFFFFUL << BSEC_JTAGOUTR_JDATAOUT_Pos) /*!< 0xFFFFFFFF */
#define BSEC_JTAGOUTR_JDATAOUT         BSEC_JTAGOUTR_JDATAOUT_Msk                  /*!< JTAG output data */

/******************  Bit definition for BSEC_DENR register  *******************/
#define BSEC_DENR_DBGENA_Pos          (1U)
#define BSEC_DENR_DBGENA_Msk          (0x1UL << BSEC_DENR_DBGENA_Pos)          /*!< 0x00000002 */
#define BSEC_DENR_DBGENA              BSEC_DENR_DBGENA_Msk                    /*!< Debug enable for Cortex A */
#define BSEC_DENR_NIDENA_Pos          (2U)
#define BSEC_DENR_NIDENA_Msk          (0x1UL << BSEC_DENR_NIDENA_Pos)          /*!< 0x00000004 */
#define BSEC_DENR_NIDENA              BSEC_DENR_NIDENA_Msk                    /*!< Non invasive debug enable for Cortex A */
#define BSEC_DENR_DEVICEEN_Pos        (3U)
#define BSEC_DENR_DEVICEEN_Msk        (0x1UL << BSEC_DENR_DEVICEEN_Pos)        /*!< 0x00000008 */
#define BSEC_DENR_DEVICEEN            BSEC_DENR_DEVICEEN_Msk                  /*!< Device debug enable */
#define BSEC_DENR_HDPEN_Pos           (4U)
#define BSEC_DENR_HDPEN_Msk           (0x1UL << BSEC_DENR_HDPEN_Pos)           /*!< 0x00000010 */
#define BSEC_DENR_HDPEN               BSEC_DENR_HDPEN_Msk                     /*!< Hardware debug port enable */
#define BSEC_DENR_SPIDENA_Pos         (5U)
#define BSEC_DENR_SPIDENA_Msk         (0x1UL << BSEC_DENR_SPIDENA_Pos)         /*!< 0x00000020 */
#define BSEC_DENR_SPIDENA             BSEC_DENR_SPIDENA_Msk                   /*!< Secure privilege invasive debug enable for Cortex A */
#define BSEC_DENR_SPNIDENA_Pos        (6U)
#define BSEC_DENR_SPNIDENA_Msk        (0x1UL << BSEC_DENR_SPNIDENA_Pos)        /*!< 0x00000040 */
#define BSEC_DENR_SPNIDENA            BSEC_DENR_SPNIDENA_Msk                  /*!< Secure privilege non-invasive debug enable for Cortex A */
#define BSEC_DENR_DBGSWEN_Pos         (7U)
#define BSEC_DENR_DBGSWEN_Msk         (0x1UL << BSEC_DENR_DBGSWEN_Pos)         /*!< 0x00000080 */
#define BSEC_DENR_DBGSWEN             BSEC_DENR_DBGSWEN_Msk                   /*!< Self-hosted debug enable */
#define BSEC_DENR_DBGENM_Pos          (8U)
#define BSEC_DENR_DBGENM_Msk          (0x1UL << BSEC_DENR_DBGENM_Pos)          /*!< 0x00000100 */
#define BSEC_DENR_DBGENM              BSEC_DENR_DBGENM_Msk                    /*!< Debug enable for Cortex M */
#define BSEC_DENR_NIDENM_Pos          (9U)
#define BSEC_DENR_NIDENM_Msk          (0x1UL << BSEC_DENR_NIDENM_Pos)          /*!< 0x00000200 */
#define BSEC_DENR_NIDENM              BSEC_DENR_NIDENM_Msk                    /*!< Non invasive debug enable for Cortex M */
#define BSEC_DENR_SPIDENM_Pos         (10U)
#define BSEC_DENR_SPIDENM_Msk         (0x1UL << BSEC_DENR_SPIDENM_Pos)         /*!< 0x00000400 */
#define BSEC_DENR_SPIDENM             BSEC_DENR_SPIDENM_Msk                   /*!< Secure privilege invasive debug enable for Cortex M */
#define BSEC_DENR_SPNIDENM_Pos        (11U)
#define BSEC_DENR_SPNIDENM_Msk        (0x1UL << BSEC_DENR_SPNIDENM_Pos)        /*!< 0x00000800 */
#define BSEC_DENR_SPNIDENM            BSEC_DENR_SPNIDENM_Msk                  /*!< Secure privilege non-invasive debug enable for Cortex M */
#define BSEC_DENR_RCODE0_Pos            (12U)
#define BSEC_DENR_RCODE0_Msk            (0x1UL << BSEC_DENR_RCODE0_Pos)            /*!< 0x00001000 */
#define BSEC_DENR_RCODE0                BSEC_DENR_RCODE0_Msk                      /*!< SECDED code */
#define BSEC_DENR_RCODE1_Pos            (13U)
#define BSEC_DENR_RCODE1_Msk            (0x1UL << BSEC_DENR_RCODE1_Pos)            /*!< 0x00002000 */
#define BSEC_DENR_RCODE1                BSEC_DENR_RCODE1_Msk                      /*!< SECDED code */
#define BSEC_DENR_RCODE2_Pos            (14U)
#define BSEC_DENR_RCODE2_Msk            (0x1UL << BSEC_DENR_RCODE2_Pos)            /*!< 0x00004000 */
#define BSEC_DENR_RCODE2                BSEC_DENR_RCODE2_Msk                      /*!< SECDED code */
#define BSEC_DENR_RCODE3_Pos            (15U)
#define BSEC_DENR_RCODE3_Msk            (0x1UL << BSEC_DENR_RCODE3_Pos)            /*!< 0x00008000 */
#define BSEC_DENR_RCODE3                BSEC_DENR_RCODE3_Msk                      /*!< SECDED code */
#define BSEC_DENR_RCODE4_Pos            (16U)
#define BSEC_DENR_RCODE4_Msk            (0x1UL << BSEC_DENR_RCODE4_Pos)            /*!< 0x00010000 */
#define BSEC_DENR_RCODE4                BSEC_DENR_RCODE4_Msk                      /*!< SECDED code */
#define BSEC_DENR_RCODE5_Pos            (17U)
#define BSEC_DENR_RCODE5_Msk            (0x1UL << BSEC_DENR_RCODE5_Pos)            /*!< 0x00020000 */
#define BSEC_DENR_RCODE5                BSEC_DENR_RCODE5_Msk                      /*!< SECDED code */
#define BSEC_DENR_PATTERN_Pos           (20U)
#define BSEC_DENR_PATTERN_Msk           (0xFFFUL << BSEC_DENR_PATTERN_Pos)         /*!< 0xFFF00000 */
#define BSEC_DENR_PATTERN               BSEC_DENR_PATTERN_Msk                     /*!< Pattern to validate write data value */

/*****************  Bit definition for BSEC_UNMAPR register  ******************/
#define BSEC_UNMAPR_UNMAP_Pos         (0U)
#define BSEC_UNMAPR_UNMAP_Msk         (0xFFFFFFFFUL << BSEC_UNMAPR_UNMAP_Pos)  /*!< 0xFFFFFFFF */
#define BSEC_UNMAPR_UNMAP             BSEC_UNMAPR_UNMAP_Msk                   /*!< unmap key */

/*******************  Bit definition for BSEC_SR register  ********************/
#define BSEC_SR_HVALID_Pos            (1U)
#define BSEC_SR_HVALID_Msk            (0x1UL << BSEC_SR_HVALID_Pos)            /*!< 0x00000002 */
#define BSEC_SR_HVALID                BSEC_SR_HVALID_Msk                      /*!< Hardware key valid */
#define BSEC_SR_NVSTATE_Pos           (26U)
#define BSEC_SR_NVSTATE_Msk           (0x3FUL << BSEC_SR_NVSTATE_Pos)          /*!< 0xFC000000 */
#define BSEC_SR_NVSTATE               BSEC_SR_NVSTATE_Msk                     /*!< Non-volatile state */

/******************  Bit definition for BSEC_OTPSR register  ******************/
#define BSEC_OTPSR_BUSY_Pos           (0U)
#define BSEC_OTPSR_BUSY_Msk           (0x1UL << BSEC_OTPSR_BUSY_Pos)           /*!< 0x00000001 */
#define BSEC_OTPSR_BUSY               BSEC_OTPSR_BUSY_Msk                     /*!< Busy flag */
#define BSEC_OTPSR_INIT_DONE_Pos       (1U)
#define BSEC_OTPSR_INIT_DONE_Msk       (0x1UL << BSEC_OTPSR_INIT_DONE_Pos)        /*!< 0x00000002 */
#define BSEC_OTPSR_INIT_DONE           BSEC_OTPSR_INIT_DONE_Msk                  /*!< Initialization done */
#define BSEC_OTPSR_HIDEUP_Pos          (2U)
#define BSEC_OTPSR_HIDEUP_Msk          (0x1UL << BSEC_OTPSR_HIDEUP_Pos)             /*!< 0x00000004 */
#define BSEC_OTPSR_HIDEUP              BSEC_OTPSR_HIDEUP_Msk                       /*!< Hide upper fuse words */
#define BSEC_OTPSR_OTPNVIR_Pos         (4U)
#define BSEC_OTPSR_OTPNVIR_Msk         (0x1UL << BSEC_OTPSR_OTPNVIR_Pos)            /*!< 0x00000010 */
#define BSEC_OTPSR_OTPNVIR             BSEC_OTPSR_OTPNVIR_Msk                      /*!< OTP not virgin */
#define BSEC_OTPSR_OTPERR_Pos          (5U)
#define BSEC_OTPSR_OTPERR_Msk          (0x1UL << BSEC_OTPSR_OTPERR_Pos)             /*!< 0x00000020 */
#define BSEC_OTPSR_OTPERR              BSEC_OTPSR_OTPERR_Msk                       /*!< OTP with error */
#define BSEC_OTPSR_OTPSEC_Pos          (6U)
#define BSEC_OTPSR_OTPSEC_Msk          (0x1UL << BSEC_OTPSR_OTPSEC_Pos)             /*!< 0x00000040 */
#define BSEC_OTPSR_OTPSEC              BSEC_OTPSR_OTPSEC_Msk                       /*!< OTP with single error correction */
#define BSEC_OTPSR_PROGFAIL_Pos        (16U)
#define BSEC_OTPSR_PROGFAIL_Msk        (0x1UL << BSEC_OTPSR_PROGFAIL_Pos)           /*!< 0x00010000 */
#define BSEC_OTPSR_PROGFAIL            BSEC_OTPSR_PROGFAIL_Msk                     /*!< Programming failed */
#define BSEC_OTPSR_DISTURBF_Pos        (17U)
#define BSEC_OTPSR_DISTURBF_Msk        (0x1UL << BSEC_OTPSR_DISTURBF_Pos)           /*!< 0x00020000 */
#define BSEC_OTPSR_DISTURBF            BSEC_OTPSR_DISTURBF_Msk                     /*!< Disturb flag */
#define BSEC_OTPSR_DEDF_Pos            (18U)
#define BSEC_OTPSR_DEDF_Msk            (0x1UL << BSEC_OTPSR_DEDF_Pos)               /*!< 0x00040000 */
#define BSEC_OTPSR_DEDF                BSEC_OTPSR_DEDF_Msk                         /*!< Double error detection flag */
#define BSEC_OTPSR_SECF_Pos            (19U)
#define BSEC_OTPSR_SECF_Msk            (0x1UL << BSEC_OTPSR_SECF_Pos)               /*!< 0x00080000 */
#define BSEC_OTPSR_SECF                BSEC_OTPSR_SECF_Msk                         /*!< Single error correction flag */
#define BSEC_OTPSR_PPLF_Pos            (20U)
#define BSEC_OTPSR_PPLF_Msk            (0x1UL << BSEC_OTPSR_PPLF_Pos)               /*!< 0x00100000 */
#define BSEC_OTPSR_PPLF                BSEC_OTPSR_PPLF_Msk                         /*!< Permanent programming lock flag */
#define BSEC_OTPSR_PPLMF_Pos           (21U)
#define BSEC_OTPSR_PPLMF_Msk           (0x1UL << BSEC_OTPSR_PPLMF_Pos)              /*!< 0x00200000 */
#define BSEC_OTPSR_PPLMF               BSEC_OTPSR_PPLMF_Msk                        /*!< Permanent programming lock mismatch flag */
#define BSEC_OTPSR_AMEF_Pos            (22U)
#define BSEC_OTPSR_AMEF_Msk            (0x1UL << BSEC_OTPSR_AMEF_Pos)               /*!< 0x00400000 */
#define BSEC_OTPSR_AMEF                BSEC_OTPSR_AMEF_Msk                         /*!< Addresses mismatch error flag */

/*****************  Bit definition for BSEC_EPOCHR0 register  *****************/
#define BSEC_EPOCHR0_EPOCH_Pos          (0U)
#define BSEC_EPOCHR0_EPOCH_Msk          (0xFFFFFFFFUL << BSEC_EPOCHR0_EPOCH_Pos)   /*!< 0xFFFFFFFF */
#define BSEC_EPOCHR0_EPOCH              BSEC_EPOCHR0_EPOCH_Msk                    /*!< epoch */

/*****************  Bit definition for BSEC_EPOCHR1 register  *****************/
#define BSEC_EPOCHR1_EPOCH_Pos          (0U)
#define BSEC_EPOCHR1_EPOCH_Msk          (0xFFFFFFFFUL << BSEC_EPOCHR1_EPOCH_Pos)   /*!< 0xFFFFFFFF */
#define BSEC_EPOCHR1_EPOCH              BSEC_EPOCHR1_EPOCH_Msk                    /*!< epoch */

/***************  Bit definition for BSEC_EPOCHSELCR register  ****************/
#define BSEC_EPOCHSELCR_EPOCH_SEL_Pos   (0U)
#define BSEC_EPOCHSELCR_EPOCH_SEL_Msk   (0x1UL << BSEC_EPOCHSELCR_EPOCH_SEL_Pos)   /*!< 0x00000001 */
#define BSEC_EPOCHSELCR_EPOCH_SEL       BSEC_EPOCHSELCR_EPOCH_SEL_Msk             /*!< Selection of the epoch value to be sent to the SAES */

/*****************  Bit definition for BSEC_DBGMCR register  ******************/
#define BSEC_DBGMCR_UNLOCK_Pos          (8U)
#define BSEC_DBGMCR_UNLOCK_Msk          (0xFFUL << BSEC_DBGMCR_UNLOCK_Pos)         /*!< 0x0000FF00 */
#define BSEC_DBGMCR_UNLOCK              BSEC_DBGMCR_UNLOCK_Msk                    /*!< Others: Cortex M debug not possible (provided state is not BSEC-open) */
#define BSEC_DBGMCR_AUTH_HDPL_Pos       (16U)
#define BSEC_DBGMCR_AUTH_HDPL_Msk       (0xFFUL << BSEC_DBGMCR_AUTH_HDPL_Pos)      /*!< 0x00FF0000 */
#define BSEC_DBGMCR_AUTH_HDPL           BSEC_DBGMCR_AUTH_HDPL_Msk                 /*!< level at which debug may be opened */
#define BSEC_DBGMCR_AUTH_SEC_Pos        (24U)
#define BSEC_DBGMCR_AUTH_SEC_Msk        (0xFFUL << BSEC_DBGMCR_AUTH_SEC_Pos)       /*!< 0xFF000000 */
#define BSEC_DBGMCR_AUTH_SEC            BSEC_DBGMCR_AUTH_SEC_Msk                  /*!< Others: Cortex M secure debug not possible (provided state is not BSEC-open) */

/****************  Bit definition for BSEC_AP_UNLOCK register  ****************/
#define BSEC_AP_UNLOCK_UNLOCK_Pos       (0U)
#define BSEC_AP_UNLOCK_UNLOCK_Msk       (0xFFUL << BSEC_AP_UNLOCK_UNLOCK_Pos)      /*!< 0x000000FF */
#define BSEC_AP_UNLOCK_UNLOCK           BSEC_AP_UNLOCK_UNLOCK_Msk                 /*!< Others:	Do not unlock */

/*****************  Bit definition for BSEC_HDPLMSR register  *****************/
#define BSEC_HDPLMSR_HDPL_Pos           (0U)
#define BSEC_HDPLMSR_HDPL_Msk           (0xFFUL << BSEC_HDPLMSR_HDPL_Pos)          /*!< 0x000000FF */
#define BSEC_HDPLMSR_HDPL               BSEC_HDPLMSR_HDPL_Msk                     /*!< current HDPL for Cortex M */

/*****************  Bit definition for BSEC_HDPLMCR register  *****************/
#define BSEC_HDPLMCR_INCR_HDPL_Pos      (0U)
#define BSEC_HDPLMCR_INCR_HDPL_Msk      (0xFFFFFFFFUL << BSEC_HDPLMCR_INCR_HDPL_Pos) /*!< 0xFFFFFFFF */
#define BSEC_HDPLMCR_INCR_HDPL          BSEC_HDPLMCR_INCR_HDPL_Msk                  /*!< Increment HDPL for Cortex M */

/***************  Bit definition for BSEC_NEXTHDPLMCR register  ***************/
#define BSEC_NEXTHDPLMCR_INCR_Pos       (0U)
#define BSEC_NEXTHDPLMCR_INCR_Msk       (0x3UL << BSEC_NEXTHDPLMCR_INCR_Pos)       /*!< 0x00000003 */
#define BSEC_NEXTHDPLMCR_INCR           BSEC_NEXTHDPLMCR_INCR_Msk                 /*!< Increment */

/*****************  Bit definition for BSEC_DBGACR register  ******************/
#define BSEC_DBGACR_UNLOCK_Pos          (8U)
#define BSEC_DBGACR_UNLOCK_Msk          (0xFFUL << BSEC_DBGACR_UNLOCK_Pos)         /*!< 0x0000FF00 */
#define BSEC_DBGACR_UNLOCK              BSEC_DBGACR_UNLOCK_Msk                    /*!< Others: Cortex A debug not possible (provided state is not BSEC-open) */
#define BSEC_DBGACR_AUTH_HDPL_Pos       (16U)
#define BSEC_DBGACR_AUTH_HDPL_Msk       (0xFFUL << BSEC_DBGACR_AUTH_HDPL_Pos)      /*!< 0x00FF0000 */
#define BSEC_DBGACR_AUTH_HDPL           BSEC_DBGACR_AUTH_HDPL_Msk                 /*!< level at which Cortex A debug may be opened */
#define BSEC_DBGACR_AUTH_SEC_Pos        (24U)
#define BSEC_DBGACR_AUTH_SEC_Msk        (0xFFUL << BSEC_DBGACR_AUTH_SEC_Pos)       /*!< 0xFF000000 */
#define BSEC_DBGACR_AUTH_SEC            BSEC_DBGACR_AUTH_SEC_Msk                  /*!< Others: secure debug not possible (provided state is not BSEC-open) */

/*****************  Bit definition for BSEC_HDPLASR register  *****************/
#define BSEC_HDPLASR_HDPL_Pos           (0U)
#define BSEC_HDPLASR_HDPL_Msk           (0xFFUL << BSEC_HDPLASR_HDPL_Pos)          /*!< 0x000000FF */
#define BSEC_HDPLASR_HDPL               BSEC_HDPLASR_HDPL_Msk                     /*!< current HDPL for Cortex A */

/*****************  Bit definition for BSEC_HDPLACR register  *****************/
#define BSEC_HDPLACR_INCR_HDPL_Pos      (0U)
#define BSEC_HDPLACR_INCR_HDPL_Msk      (0xFFFFFFFFUL << BSEC_HDPLACR_INCR_HDPL_Pos) /*!< 0xFFFFFFFF */
#define BSEC_HDPLACR_INCR_HDPL          BSEC_HDPLACR_INCR_HDPL_Msk                  /*!< Increment HDPL for Cortex A */

/***************  Bit definition for BSEC_NEXTHDPLACR register  ***************/
#define BSEC_NEXTHDPLACR_INCR_Pos       (0U)
#define BSEC_NEXTHDPLACR_INCR_Msk       (0x3UL << BSEC_NEXTHDPLACR_INCR_Pos)       /*!< 0x00000003 */
#define BSEC_NEXTHDPLACR_INCR           BSEC_NEXTHDPLACR_INCR_Msk                 /*!< Increment */


/*****************  Bit definition for BSEC_WOSCRx register  ******************/
#define BSEC_WOSCRx_WOSDATA_Pos        (0U)
#define BSEC_WOSCRx_WOSDATA_Msk        (0xFFFFFFFFUL << BSEC_WOSCRx_WOSDATA_Pos)    /*!< 0xFFFFFFFF */
#define BSEC_WOSCRx_WOSDATA            BSEC_WOSCRx_WOSDATA_Msk                      /*!< Write once scratch data */

/******************  Bit definition for BSEC_HRCR register  *******************/
#define BSEC_HRCR_HRC_Pos             (0U)
#define BSEC_HRCR_HRC_Msk             (0xFFFFFFFFUL << BSEC_HRCR_HRC_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_HRCR_HRC                 BSEC_HRCR_HRC_Msk                       /*!< hot reset counter */

/******************  Bit definition for BSEC_WRCR register  *******************/
#define BSEC_WRCR_WRC_Pos             (0U)
#define BSEC_WRCR_WRC_Msk             (0xFFFFFFFFUL << BSEC_WRCR_WRC_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_WRCR_WRC                 BSEC_WRCR_WRC_Msk                       /*!< warm reset counter */

/******************  Bit definition for BSEC_VERR register  *******************/
#define BSEC_VERR_MINREV_Pos          (0U)
#define BSEC_VERR_MINREV_Msk          (0xFUL << BSEC_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define BSEC_VERR_MINREV              BSEC_VERR_MINREV_Msk                    /*!< minor revision information */
#define BSEC_VERR_MAJREV_Pos          (4U)
#define BSEC_VERR_MAJREV_Msk          (0xFUL << BSEC_VERR_MAJREV_Pos)          /*!< 0x000000F0 */
#define BSEC_VERR_MAJREV              BSEC_VERR_MAJREV_Msk                    /*!< major revision information */

/******************  Bit definition for BSEC_IPIDR register  ******************/
#define BSEC_IPIDR_ID_Pos             (0U)
#define BSEC_IPIDR_ID_Msk             (0xFFFFFFFFUL << BSEC_IPIDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_IPIDR_ID                 BSEC_IPIDR_ID_Msk                       /*!< BSEC identification */

/******************  Bit definition for BSEC_SIDR register  *******************/
#define BSEC_SIDR_SID_Pos             (0U)
#define BSEC_SIDR_SID_Msk             (0xFFFFFFFFUL << BSEC_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define BSEC_SIDR_SID                 BSEC_SIDR_SID_Msk                       /*!< BSEC size identification */

/******************************************************************************/
/*                                                                            */
/*                                  (CA35SSC)                                 */
/*                                                                            */
/******************************************************************************/
/************  Bit definition for CA35SSC_CHGCLKREQ_RW register  *************/
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKREQ_Pos                   (0U)
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKREQ_Msk                   (0x1UL << CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKREQ_Pos)      /*!< 0x00000001 */
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKREQ                       CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKREQ_Msk                /*!<  */
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKACK_Pos                   (1U)
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKACK_Msk                   (0x1UL << CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKACK_Pos)      /*!< 0x00000002 */
#define CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKACK                       CA35SSC_CHGCLKREQ_RW_ARM_CHGCLKACK_Msk                /*!<  */
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSEL_Pos                      (16U)
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSEL_Msk                      (0x1UL << CA35SSC_CHGCLKREQ_RW_ARM_DIVSEL_Pos)         /*!< 0x00010000 */
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSEL                          CA35SSC_CHGCLKREQ_RW_ARM_DIVSEL_Msk                   /*!<  */
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSELACK_Pos                   (17U)
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSELACK_Msk                   (0x1UL << CA35SSC_CHGCLKREQ_RW_ARM_DIVSELACK_Pos)      /*!< 0x00020000 */
#define CA35SSC_CHGCLKREQ_RW_ARM_DIVSELACK                       CA35SSC_CHGCLKREQ_RW_ARM_DIVSELACK_Msk                /*!<  */

/************  Bit definition for CA35SSC_CHGCLKREQ_WS1 register  *************/
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKREQ_Pos                  (0U)
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKREQ_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKREQ_Pos)     /*!< 0x00000001 */
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKREQ                      CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKREQ_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKACK_Pos                  (1U)
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKACK_Pos)     /*!< 0x00000002 */
#define CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKACK                      CA35SSC_CHGCLKREQ_WS1_ARM_CHGCLKACK_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSEL_Pos                     (16U)
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSEL_Msk                     (0x1UL << CA35SSC_CHGCLKREQ_WS1_ARM_DIVSEL_Pos)        /*!< 0x00010000 */
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSEL                         CA35SSC_CHGCLKREQ_WS1_ARM_DIVSEL_Msk                  /*!<  */
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSELACK_Pos                  (17U)
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSELACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WS1_ARM_DIVSELACK_Pos)     /*!< 0x00020000 */
#define CA35SSC_CHGCLKREQ_WS1_ARM_DIVSELACK                      CA35SSC_CHGCLKREQ_WS1_ARM_DIVSELACK_Msk               /*!<  */

/************  Bit definition for CA35SSC_CHGCLKREQ_WC1 register  *************/
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKREQ_Pos                  (0U)
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKREQ_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKREQ_Pos)     /*!< 0x00000001 */
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKREQ                      CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKREQ_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKACK_Pos                  (1U)
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKACK_Pos)     /*!< 0x00000002 */
#define CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKACK                      CA35SSC_CHGCLKREQ_WC1_ARM_CHGCLKACK_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSEL_Pos                     (16U)
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSEL_Msk                     (0x1UL << CA35SSC_CHGCLKREQ_WC1_ARM_DIVSEL_Pos)        /*!< 0x00010000 */
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSEL                         CA35SSC_CHGCLKREQ_WC1_ARM_DIVSEL_Msk                  /*!<  */
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSELACK_Pos                  (17U)
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSELACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WC1_ARM_DIVSELACK_Pos)     /*!< 0x00020000 */
#define CA35SSC_CHGCLKREQ_WC1_ARM_DIVSELACK                      CA35SSC_CHGCLKREQ_WC1_ARM_DIVSELACK_Msk               /*!<  */

/************  Bit definition for CA35SSC_CHGCLKREQ_WT1 register  *************/
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKREQ_Pos                  (0U)
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKREQ_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKREQ_Pos)     /*!< 0x00000001 */
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKREQ                      CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKREQ_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKACK_Pos                  (1U)
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKACK_Pos)     /*!< 0x00000002 */
#define CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKACK                      CA35SSC_CHGCLKREQ_WT1_ARM_CHGCLKACK_Msk               /*!<  */
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSEL_Pos                     (16U)
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSEL_Msk                     (0x1UL << CA35SSC_CHGCLKREQ_WT1_ARM_DIVSEL_Pos)        /*!< 0x00010000 */
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSEL                         CA35SSC_CHGCLKREQ_WT1_ARM_DIVSEL_Msk                  /*!<  */
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSELACK_Pos                  (17U)
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSELACK_Msk                  (0x1UL << CA35SSC_CHGCLKREQ_WT1_ARM_DIVSELACK_Pos)     /*!< 0x00020000 */
#define CA35SSC_CHGCLKREQ_WT1_ARM_DIVSELACK                      CA35SSC_CHGCLKREQ_WT1_ARM_DIVSELACK_Msk               /*!<  */

/***************  Bit definition for CA35SSC_BRM0_RW register  ****************/
#define CA35SSC_BRM_RW_BRM_RATEVAL_Pos                           (0U)
#define CA35SSC_BRM_RW_BRM_RATEVAL_Msk                           (0x1UL << CA35SSC_BRM_RW_BRM_RATEVAL_Pos)              /*!< 0x00000001 */
#define CA35SSC_BRM_RW_BRM_RATEVAL                               CA35SSC_BRM_RW_BRM_RATEVAL_Msk                        /*!<  */
#define CA35SSC_BRM_RW_BRM_RATEACK_Pos                           (1U)
#define CA35SSC_BRM_RW_BRM_RATEACK_Msk                           (0x1UL << CA35SSC_BRM_RW_BRM_RATEACK_Pos)              /*!< 0x00000002 */
#define CA35SSC_BRM_RW_BRM_RATEACK                               CA35SSC_BRM_RW_BRM_RATEACK_Msk                        /*!<  */
#define CA35SSC_BRM_RW_BRM_RATE_Pos                              (8U)
#define CA35SSC_BRM_RW_BRM_RATE_Msk                              (0x3FUL << CA35SSC_BRM_RW_BRM_RATE_Pos)                /*!< 0x00003F00 */
#define CA35SSC_BRM_RW_BRM_RATE                                  CA35SSC_BRM_RW_BRM_RATE_Msk                           /*!< BRM rate in normal or idle mode when BRM_IDLEDIVEN =0 */
#define CA35SSC_BRM_RW_BRM_IDLEDIVEN_Pos                         (16U)
#define CA35SSC_BRM_RW_BRM_IDLEDIVEN_Msk                         (0x1UL << CA35SSC_BRM_RW_BRM_IDLEDIVEN_Pos)            /*!< 0x00010000 */
#define CA35SSC_BRM_RW_BRM_IDLEDIVEN                             CA35SSC_BRM_RW_BRM_IDLEDIVEN_Msk                      /*!<  */
#define CA35SSC_BRM_RW_BRM_IDLEDIV_Pos                           (24U)
#define CA35SSC_BRM_RW_BRM_IDLEDIV_Msk                           (0x3UL << CA35SSC_BRM_RW_BRM_IDLEDIV_Pos)              /*!< 0x03000000 */
#define CA35SSC_BRM_RW_BRM_IDLEDIV                               CA35SSC_BRM_RW_BRM_IDLEDIV_Msk                        /*!< Defines BRM rate when idle mode is entered */

/***************  Bit definition for CA35SSC_BRM_WS1 register  ****************/
#define CA35SSC_BRM_WS1_BRM_RATEVAL_Pos                          (0U)
#define CA35SSC_BRM_WS1_BRM_RATEVAL_Msk                          (0x1UL << CA35SSC_BRM_WS1_BRM_RATEVAL_Pos)             /*!< 0x00000001 */
#define CA35SSC_BRM_WS1_BRM_RATEVAL                              CA35SSC_BRM_WS1_BRM_RATEVAL_Msk                       /*!<  */
#define CA35SSC_BRM_WS1_BRM_RATEACK_Pos                          (1U)
#define CA35SSC_BRM_WS1_BRM_RATEACK_Msk                          (0x1UL << CA35SSC_BRM_WS1_BRM_RATEACK_Pos)             /*!< 0x00000002 */
#define CA35SSC_BRM_WS1_BRM_RATEACK                              CA35SSC_BRM_WS1_BRM_RATEACK_Msk                       /*!<  */
#define CA35SSC_BRM_WS1_BRM_RATE_Pos                             (8U)
#define CA35SSC_BRM_WS1_BRM_RATE_Msk                             (0x3FUL << CA35SSC_BRM_WS1_BRM_RATE_Pos)               /*!< 0x00003F00 */
#define CA35SSC_BRM_WS1_BRM_RATE                                 CA35SSC_BRM_WS1_BRM_RATE_Msk                          /*!< BRM rate in normal or idle mode when BRM_IDLEDIVEN =0 */
#define CA35SSC_BRM_WS1_BRM_IDLEDIVEN_Pos                        (16U)
#define CA35SSC_BRM_WS1_BRM_IDLEDIVEN_Msk                        (0x1UL << CA35SSC_BRM_WS1_BRM_IDLEDIVEN_Pos)           /*!< 0x00010000 */
#define CA35SSC_BRM_WS1_BRM_IDLEDIVEN                            CA35SSC_BRM_WS1_BRM_IDLEDIVEN_Msk                     /*!<  */
#define CA35SSC_BRM_WS1_BRM_IDLEDIV_Pos                          (24U)
#define CA35SSC_BRM_WS1_BRM_IDLEDIV_Msk                          (0x3UL << CA35SSC_BRM_WS1_BRM_IDLEDIV_Pos)             /*!< 0x03000000 */
#define CA35SSC_BRM_WS1_BRM_IDLEDIV                              CA35SSC_BRM_WS1_BRM_IDLEDIV_Msk                       /*!< Defines BRM rate when idle mode is entered */

/***************  Bit definition for CA35SSC_BRM_WC1 register  ****************/
#define CA35SSC_BRM_WC1_BRM_RATEVAL_Pos                          (0U)
#define CA35SSC_BRM_WC1_BRM_RATEVAL_Msk                          (0x1UL << CA35SSC_BRM_WC1_BRM_RATEVAL_Pos)             /*!< 0x00000001 */
#define CA35SSC_BRM_WC1_BRM_RATEVAL                              CA35SSC_BRM_WC1_BRM_RATEVAL_Msk                       /*!<  */
#define CA35SSC_BRM_WC1_BRM_RATEACK_Pos                          (1U)
#define CA35SSC_BRM_WC1_BRM_RATEACK_Msk                          (0x1UL << CA35SSC_BRM_WC1_BRM_RATEACK_Pos)             /*!< 0x00000002 */
#define CA35SSC_BRM_WC1_BRM_RATEACK                              CA35SSC_BRM_WC1_BRM_RATEACK_Msk                       /*!<  */
#define CA35SSC_BRM_WC1_BRM_RATE_Pos                             (8U)
#define CA35SSC_BRM_WC1_BRM_RATE_Msk                             (0x3FUL << CA35SSC_BRM_WC1_BRM_RATE_Pos)               /*!< 0x00003F00 */
#define CA35SSC_BRM_WC1_BRM_RATE                                 CA35SSC_BRM_WC1_BRM_RATE_Msk                          /*!< BRM rate in normal or idle mode when BRM_IDLEDIVEN =0 */
#define CA35SSC_BRM_WC1_BRM_IDLEDIVEN_Pos                        (16U)
#define CA35SSC_BRM_WC1_BRM_IDLEDIVEN_Msk                        (0x1UL << CA35SSC_BRM_WC1_BRM_IDLEDIVEN_Pos)           /*!< 0x00010000 */
#define CA35SSC_BRM_WC1_BRM_IDLEDIVEN                            CA35SSC_BRM_WC1_BRM_IDLEDIVEN_Msk                     /*!<  */
#define CA35SSC_BRM_WC1_BRM_IDLEDIV_Pos                          (24U)
#define CA35SSC_BRM_WC1_BRM_IDLEDIV_Msk                          (0x3UL << CA35SSC_BRM_WC1_BRM_IDLEDIV_Pos)             /*!< 0x03000000 */
#define CA35SSC_BRM_WC1_BRM_IDLEDIV                              CA35SSC_BRM_WC1_BRM_IDLEDIV_Msk                       /*!< Defines BRM rate when idle mode is entered */

/***************  Bit definition for CA35SSC_BRM_WT1 register  ****************/
#define CA35SSC_BRM_WT1_BRM_RATEVAL_Pos                          (0U)
#define CA35SSC_BRM_WT1_BRM_RATEVAL_Msk                          (0x1UL << CA35SSC_BRM_WT1_BRM_RATEVAL_Pos)             /*!< 0x00000001 */
#define CA35SSC_BRM_WT1_BRM_RATEVAL                              CA35SSC_BRM_WT1_BRM_RATEVAL_Msk                       /*!<  */
#define CA35SSC_BRM_WT1_BRM_RATEACK_Pos                          (1U)
#define CA35SSC_BRM_WT1_BRM_RATEACK_Msk                          (0x1UL << CA35SSC_BRM_WT1_BRM_RATEACK_Pos)             /*!< 0x00000002 */
#define CA35SSC_BRM_WT1_BRM_RATEACK                              CA35SSC_BRM_WT1_BRM_RATEACK_Msk                       /*!<  */
#define CA35SSC_BRM_WT1_BRM_RATE_Pos                             (8U)
#define CA35SSC_BRM_WT1_BRM_RATE_Msk                             (0x3FUL << CA35SSC_BRM_WT1_BRM_RATE_Pos)               /*!< 0x00003F00 */
#define CA35SSC_BRM_WT1_BRM_RATE                                 CA35SSC_BRM_WT1_BRM_RATE_Msk                          /*!< BRM rate in normal or idle mode when BRM_IDLEDIVEN =0 */
#define CA35SSC_BRM_WT1_BRM_IDLEDIVEN_Pos                        (16U)
#define CA35SSC_BRM_WT1_BRM_IDLEDIVEN_Msk                        (0x1UL << CA35SSC_BRM_WT1_BRM_IDLEDIVEN_Pos)           /*!< 0x00010000 */
#define CA35SSC_BRM_WT1_BRM_IDLEDIVEN                            CA35SSC_BRM_WT1_BRM_IDLEDIVEN_Msk                     /*!<  */
#define CA35SSC_BRM_WT1_BRM_IDLEDIV_Pos                          (24U)
#define CA35SSC_BRM_WT1_BRM_IDLEDIV_Msk                          (0x3UL << CA35SSC_BRM_WT1_BRM_IDLEDIV_Pos)             /*!< 0x03000000 */
#define CA35SSC_BRM_WT1_BRM_IDLEDIV                              CA35SSC_BRM_WT1_BRM_IDLEDIV_Msk                       /*!< Defines BRM rate when idle mode is entered */

/************  Bit definition for CA35SSC_PLL_FREQ1_RW register  ************/
#define CA35SSC_PLL_FREQ1_RW_FBDIV_Pos                           (0U)
#define CA35SSC_PLL_FREQ1_RW_FBDIV_Msk                           (0xFFFUL << CA35SSC_PLL_FREQ1_RW_FBDIV_Pos)            /*!< 0x00000FFF */
#define CA35SSC_PLL_FREQ1_RW_FBDIV                               CA35SSC_PLL_FREQ1_RW_FBDIV_Msk                        /*!< Feedback divide value */
#define CA35SSC_PLL_FREQ1_RW_REFDIV_Pos                          (16U)
#define CA35SSC_PLL_FREQ1_RW_REFDIV_Msk                          (0x3FUL << CA35SSC_PLL_FREQ1_RW_REFDIV_Pos)            /*!< 0x003F0000 */
#define CA35SSC_PLL_FREQ1_RW_REFDIV                              CA35SSC_PLL_FREQ1_RW_REFDIV_Msk                       /*!< Reference divide value */

/************  Bit definition for CA35SSC_PLL_FREQ1_WS1 register  ************/
#define CA35SSC_PLL_FREQ1_WS1_FBDIV_Pos                          (0U)
#define CA35SSC_PLL_FREQ1_WS1_FBDIV_Msk                          (0xFFFUL << CA35SSC_PLL_FREQ1_WS1_FBDIV_Pos)           /*!< 0x00000FFF */
#define CA35SSC_PLL_FREQ1_WS1_FBDIV                              CA35SSC_PLL_FREQ1_WS1_FBDIV_Msk                       /*!< Feedback divide value */
#define CA35SSC_PLL_FREQ1_WS1_REFDIV_Pos                         (16U)
#define CA35SSC_PLL_FREQ1_WS1_REFDIV_Msk                         (0x3FUL << CA35SSC_PLL_FREQ1_WS1_REFDIV_Pos)           /*!< 0x003F0000 */
#define CA35SSC_PLL_FREQ1_WS1_REFDIV                             CA35SSC_PLL_FREQ1_WS1_REFDIV_Msk                      /*!< Reference divide value */

/************  Bit definition for CA35SSC_PLL_FREQ1_WC1 register  ************/
#define CA35SSC_PLL_FREQ1_WC1_FBDIV_Pos                          (0U)
#define CA35SSC_PLL_FREQ1_WC1_FBDIV_Msk                          (0xFFFUL << CA35SSC_PLL_FREQ1_WC1_FBDIV_Pos)           /*!< 0x00000FFF */
#define CA35SSC_PLL_FREQ1_WC1_FBDIV                              CA35SSC_PLL_FREQ1_WC1_FBDIV_Msk                       /*!< Feedback divide value */
#define CA35SSC_PLL_FREQ1_WC1_REFDIV_Pos                         (16U)
#define CA35SSC_PLL_FREQ1_WC1_REFDIV_Msk                         (0x3FUL << CA35SSC_PLL_FREQ1_WC1_REFDIV_Pos)           /*!< 0x003F0000 */
#define CA35SSC_PLL_FREQ1_WC1_REFDIV                             CA35SSC_PLL_FREQ1_WC1_REFDIV_Msk                      /*!< Reference divide value */

/************  Bit definition for CA35SSC_PLL_FREQ1_WT1 register  ************/
#define CA35SSC_PLL_FREQ1_WT1_FBDIV_Pos                          (0U)
#define CA35SSC_PLL_FREQ1_WT1_FBDIV_Msk                          (0xFFFUL << CA35SSC_PLL_FREQ1_WT1_FBDIV_Pos)           /*!< 0x00000FFF */
#define CA35SSC_PLL_FREQ1_WT1_FBDIV                              CA35SSC_PLL_FREQ1_WT1_FBDIV_Msk                       /*!< Feedback divide value */
#define CA35SSC_PLL_FREQ1_WT1_REFDIV_Pos                         (16U)
#define CA35SSC_PLL_FREQ1_WT1_REFDIV_Msk                         (0x3FUL << CA35SSC_PLL_FREQ1_WT1_REFDIV_Pos)           /*!< 0x003F0000 */
#define CA35SSC_PLL_FREQ1_WT1_REFDIV                             CA35SSC_PLL_FREQ1_WT1_REFDIV_Msk                      /*!< Reference divide value */

/************  Bit definition for CA35SSC_PLL_FREQ2_RW register  ************/
#define CA35SSC_PLL_FREQ2_RW_POSTDIV1_Pos                        (0U)
#define CA35SSC_PLL_FREQ2_RW_POSTDIV1_Msk                        (0x7UL << CA35SSC_PLL_FREQ2_RW_POSTDIV1_Pos)           /*!< 0x00000007 */
#define CA35SSC_PLL_FREQ2_RW_POSTDIV1                            CA35SSC_PLL_FREQ2_RW_POSTDIV1_Msk                     /*!< PLL post divide 1 setting (1 to 7), POSTDIV1 = 0 is unused */
#define CA35SSC_PLL_FREQ2_RW_POSTDIV2_Pos                        (3U)
#define CA35SSC_PLL_FREQ2_RW_POSTDIV2_Msk                        (0x7UL << CA35SSC_PLL_FREQ2_RW_POSTDIV2_Pos)           /*!< 0x00000038 */
#define CA35SSC_PLL_FREQ2_RW_POSTDIV2                            CA35SSC_PLL_FREQ2_RW_POSTDIV2_Msk                     /*!< PLL post divide 2 setting (1 to 7), POSTDIV2 = 0 is unused */

/************  Bit definition for CA35SSC_PLL_FREQ2_WS1 register  ************/
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV1_Pos                       (0U)
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV1_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WS1_POSTDIV1_Pos)          /*!< 0x00000007 */
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV1                           CA35SSC_PLL_FREQ2_WS1_POSTDIV1_Msk                    /*!< PLL post divide 1 setting (1 to 7), POSTDIV1 = 0 is unused */
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV2_Pos                       (3U)
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV2_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WS1_POSTDIV2_Pos)          /*!< 0x00000038 */
#define CA35SSC_PLL_FREQ2_WS1_POSTDIV2                           CA35SSC_PLL_FREQ2_WS1_POSTDIV2_Msk                    /*!< PLL post divide 2 setting (1 to 7), POSTDIV2 = 0 is unused */

/************  Bit definition for CA35SSC_PLL_FREQ2_WC1 register  ************/
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV1_Pos                       (0U)
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV1_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WC1_POSTDIV1_Pos)          /*!< 0x00000007 */
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV1                           CA35SSC_PLL_FREQ2_WC1_POSTDIV1_Msk                    /*!< PLL post divide 1 setting (1 to 7), POSTDIV1 = 0 is unused */
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV2_Pos                       (3U)
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV2_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WC1_POSTDIV2_Pos)          /*!< 0x00000038 */
#define CA35SSC_PLL_FREQ2_WC1_POSTDIV2                           CA35SSC_PLL_FREQ2_WC1_POSTDIV2_Msk                    /*!< PLL post divide 2 setting (1 to 7), POSTDIV2 = 0 is unused */

/************  Bit definition for CA35SSC_PLL_FREQ2_WT1 register  ************/
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV1_Pos                       (0U)
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV1_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WT1_POSTDIV1_Pos)          /*!< 0x00000007 */
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV1                           CA35SSC_PLL_FREQ2_WT1_POSTDIV1_Msk                    /*!< PLL post divide 1 setting (1 to 7), POSTDIV1 = 0 is unused */
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV2_Pos                       (3U)
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV2_Msk                       (0x7UL << CA35SSC_PLL_FREQ2_WT1_POSTDIV2_Pos)          /*!< 0x00000038 */
#define CA35SSC_PLL_FREQ2_WT1_POSTDIV2                           CA35SSC_PLL_FREQ2_WT1_POSTDIV2_Msk                    /*!< PLL post divide 2 setting (1 to 7), POSTDIV2 = 0 is unused */

/************  Bit definition for CA35SSC_PLL_ENABLE_RW register  ************/
#define CA35SSC_PLL_ENABLE_RW_PLL_EN_Pos                         (0U)
#define CA35SSC_PLL_ENABLE_RW_PLL_EN_Msk                         (0x1UL << CA35SSC_PLL_ENABLE_RW_PLL_EN_Pos)            /*!< 0x00000001 */
#define CA35SSC_PLL_ENABLE_RW_PLL_EN                             CA35SSC_PLL_ENABLE_RW_PLL_EN_Msk                      /*!<  */
#define CA35SSC_PLL_ENABLE_RW_LOCKP_Pos                          (1U)
#define CA35SSC_PLL_ENABLE_RW_LOCKP_Msk                          (0x1UL << CA35SSC_PLL_ENABLE_RW_LOCKP_Pos)             /*!< 0x00000002 */
#define CA35SSC_PLL_ENABLE_RW_LOCKP                              CA35SSC_PLL_ENABLE_RW_LOCKP_Msk                       /*!<  */
#define CA35SSC_PLL_ENABLE_RW_NRESET_SWPLL_Pos                   (2U)
#define CA35SSC_PLL_ENABLE_RW_NRESET_SWPLL_Msk                   (0x1UL << CA35SSC_PLL_ENABLE_RW_NRESET_SWPLL_Pos)      /*!< 0x00000004 */
#define CA35SSC_PLL_ENABLE_RW_NRESET_SWPLL                       CA35SSC_PLL_ENABLE_RW_NRESET_SWPLL_Msk                /*!<  */
#define CA35SSC_PLL_ENABLE_RW_EN_PLL_OBS_Pos                     (31U)
#define CA35SSC_PLL_ENABLE_RW_EN_PLL_OBS_Msk                     (0x1UL << CA35SSC_PLL_ENABLE_RW_EN_PLL_OBS_Pos)        /*!< 0x80000000 */
#define CA35SSC_PLL_ENABLE_RW_EN_PLL_OBS                         CA35SSC_PLL_ENABLE_RW_EN_PLL_OBS_Msk                  /*!<  */

/************  Bit definition for CA35SSC_PLL_ENABLE_WS1 register  ************/
#define CA35SSC_PLL_ENABLE_WS1_PLL_EN_Pos                        (0U)
#define CA35SSC_PLL_ENABLE_WS1_PLL_EN_Msk                        (0x1UL << CA35SSC_PLL_ENABLE_WS1_PLL_EN_Pos)           /*!< 0x00000001 */
#define CA35SSC_PLL_ENABLE_WS1_PLL_EN                            CA35SSC_PLL_ENABLE_WS1_PLL_EN_Msk                     /*!<  */
#define CA35SSC_PLL_ENABLE_WS1_LOCKP_Pos                         (1U)
#define CA35SSC_PLL_ENABLE_WS1_LOCKP_Msk                         (0x1UL << CA35SSC_PLL_ENABLE_WS1_LOCKP_Pos)            /*!< 0x00000002 */
#define CA35SSC_PLL_ENABLE_WS1_LOCKP                             CA35SSC_PLL_ENABLE_WS1_LOCKP_Msk                      /*!<  */
#define CA35SSC_PLL_ENABLE_WS1_NRESET_SWPLL_Pos                  (2U)
#define CA35SSC_PLL_ENABLE_WS1_NRESET_SWPLL_Msk                  (0x1UL << CA35SSC_PLL_ENABLE_WS1_NRESET_SWPLL_Pos)     /*!< 0x00000004 */
#define CA35SSC_PLL_ENABLE_WS1_NRESET_SWPLL                      CA35SSC_PLL_ENABLE_WS1_NRESET_SWPLL_Msk               /*!<  */
#define CA35SSC_PLL_ENABLE_WS1_EN_PLL_OBS_Pos                    (31U)
#define CA35SSC_PLL_ENABLE_WS1_EN_PLL_OBS_Msk                    (0x1UL << CA35SSC_PLL_ENABLE_WS1_EN_PLL_OBS_Pos)       /*!< 0x80000000 */
#define CA35SSC_PLL_ENABLE_WS1_EN_PLL_OBS                        CA35SSC_PLL_ENABLE_WS1_EN_PLL_OBS_Msk                 /*!<  */

/************  Bit definition for CA35SSC_PLL_ENABLE_WC1 register  ************/
#define CA35SSC_PLL_ENABLE_WC1_PLL_EN_Pos                        (0U)
#define CA35SSC_PLL_ENABLE_WC1_PLL_EN_Msk                        (0x1UL << CA35SSC_PLL_ENABLE_WC1_PLL_EN_Pos)           /*!< 0x00000001 */
#define CA35SSC_PLL_ENABLE_WC1_PLL_EN                            CA35SSC_PLL_ENABLE_WC1_PLL_EN_Msk                     /*!<  */
#define CA35SSC_PLL_ENABLE_WC1_LOCKP_Pos                         (1U)
#define CA35SSC_PLL_ENABLE_WC1_LOCKP_Msk                         (0x1UL << CA35SSC_PLL_ENABLE_WC1_LOCKP_Pos)            /*!< 0x00000002 */
#define CA35SSC_PLL_ENABLE_WC1_LOCKP                             CA35SSC_PLL_ENABLE_WC1_LOCKP_Msk                      /*!<  */
#define CA35SSC_PLL_ENABLE_WC1_NRESET_SWPLL_Pos                  (2U)
#define CA35SSC_PLL_ENABLE_WC1_NRESET_SWPLL_Msk                  (0x1UL << CA35SSC_PLL_ENABLE_WC1_NRESET_SWPLL_Pos)     /*!< 0x00000004 */
#define CA35SSC_PLL_ENABLE_WC1_NRESET_SWPLL                      CA35SSC_PLL_ENABLE_WC1_NRESET_SWPLL_Msk               /*!<  */
#define CA35SSC_PLL_ENABLE_WC1_EN_PLL_OBS_Pos                    (31U)
#define CA35SSC_PLL_ENABLE_WC1_EN_PLL_OBS_Msk                    (0x1UL << CA35SSC_PLL_ENABLE_WC1_EN_PLL_OBS_Pos)       /*!< 0x80000000 */
#define CA35SSC_PLL_ENABLE_WC1_EN_PLL_OBS                        CA35SSC_PLL_ENABLE_WC1_EN_PLL_OBS_Msk                 /*!<  */

/************  Bit definition for CA35SSC_PLL_ENABLE_WT1 register  ************/
#define CA35SSC_PLL_ENABLE_WT1_PLL_EN_Pos                        (0U)
#define CA35SSC_PLL_ENABLE_WT1_PLL_EN_Msk                        (0x1UL << CA35SSC_PLL_ENABLE_WT1_PLL_EN_Pos)           /*!< 0x00000001 */
#define CA35SSC_PLL_ENABLE_WT1_PLL_EN                            CA35SSC_PLL_ENABLE_WT1_PLL_EN_Msk                     /*!<  */
#define CA35SSC_PLL_ENABLE_WT1_LOCKP_Pos                         (1U)
#define CA35SSC_PLL_ENABLE_WT1_LOCKP_Msk                         (0x1UL << CA35SSC_PLL_ENABLE_WT1_LOCKP_Pos)            /*!< 0x00000002 */
#define CA35SSC_PLL_ENABLE_WT1_LOCKP                             CA35SSC_PLL_ENABLE_WT1_LOCKP_Msk                      /*!<  */
#define CA35SSC_PLL_ENABLE_WT1_NRESET_SWPLL_Pos                  (2U)
#define CA35SSC_PLL_ENABLE_WT1_NRESET_SWPLL_Msk                  (0x1UL << CA35SSC_PLL_ENABLE_WT1_NRESET_SWPLL_Pos)     /*!< 0x00000004 */
#define CA35SSC_PLL_ENABLE_WT1_NRESET_SWPLL                      CA35SSC_PLL_ENABLE_WT1_NRESET_SWPLL_Msk               /*!<  */
#define CA35SSC_PLL_ENABLE_WT1_EN_PLL_OBS_Pos                    (31U)
#define CA35SSC_PLL_ENABLE_WT1_EN_PLL_OBS_Msk                    (0x1UL << CA35SSC_PLL_ENABLE_WT1_EN_PLL_OBS_Pos)       /*!< 0x80000000 */
#define CA35SSC_PLL_ENABLE_WT1_EN_PLL_OBS                        CA35SSC_PLL_ENABLE_WT1_EN_PLL_OBS_Msk                 /*!<  */

/*********  Bit definition for CA35SSC_LPI_TSGEN_NTS_CR_RW register  *********/
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSREQ_Pos               (8U)
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSREQ_Msk               (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSREQ_Pos)  /*!< 0x00000100 */
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSREQ                   CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSREQ_Msk            /*!<  */
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSACK_Pos               (9U)
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSACK_Msk               (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSACK_Pos)  /*!< 0x00000200 */
#define CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSACK                   CA35SSC_LPI_TSGEN_NTS_CR_RW_TS_CSYSACK_Msk            /*!<  */

/*********  Bit definition for CA35SSC_LPI_TSGEN_NTS_CR_WS1 register  *********/
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSREQ_Pos              (8U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSREQ_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSREQ_Pos) /*!< 0x00000100 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSREQ                  CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSACK_Pos              (9U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSACK_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSACK_Pos) /*!< 0x00000200 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSACK                  CA35SSC_LPI_TSGEN_NTS_CR_WS1_TS_CSYSACK_Msk           /*!<  */

/*********  Bit definition for CA35SSC_LPI_TSGEN_NTS_CR_WC1 register  *********/
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSREQ_Pos              (8U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSREQ_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSREQ_Pos) *!< 0x00000100 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSREQ                  CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSREQ_Msk           *!<  */
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSACK_Pos              (9U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSACK_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSACK_Pos) *!< 0x00000200 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSACK                  CA35SSC_LPI_TSGEN_NTS_CR_WC1_TS_CSYSACK_Msk           *!<  */

/*********  Bit definition for CA35SSC_LPI_TSGEN_NTS_CR_WT1 register  *********/
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSREQ_Pos              (8U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSREQ_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSREQ_Pos) /*!< 0x00000100 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSREQ                  CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSACK_Pos              (9U)
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSACK_Msk              (0x1UL << CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSACK_Pos) /*!< 0x00000200 */
#define CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSACK                  CA35SSC_LPI_TSGEN_NTS_CR_WT1_TS_CSYSACK_Msk           /*!<  */

/*************  Bit definition for CA35SSC_CORE0_SMP register  *************/
#define CA35SSC_CORE0_SMP_SMPEN_Pos                              (16U)
#define CA35SSC_CORE0_SMP_SMPEN_Msk                              (0x1UL << CA35SSC_CORE0_SMP_SMPEN_Pos)                 /*!< 0x00010000 */
#define CA35SSC_CORE0_SMP_SMPEN                                  CA35SSC_CORE0_SMP_SMPEN_Msk                           /*!<  */

/*************  Bit definition for CA35SSC_CORE1_SMP register  *************/
#define CA35SSC_CORE1_SMP_SMPEN_Pos                              (16U)
#define CA35SSC_CORE1_SMP_SMPEN_Msk                              (0x1UL << CA35SSC_CORE1_SMP_SMPEN_Pos)                 /*!< 0x00010000 */
#define CA35SSC_CORE1_SMP_SMPEN                                  CA35SSC_CORE1_SMP_SMPEN_Msk                           /*!<  */

/*********  Bit definition for CA35SSC_LPI_STGEN_NTS_CR_RW register  *********/
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSREQ_Pos            (24U)
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSREQ_Msk            (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSREQ_Pos) /*!< 0x01000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSREQ                CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSACK_Pos            (25U)
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSACK_Msk            (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSACK_Pos) /*!< 0x02000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSACK                CA35SSC_LPI_STGEN_NTS_CR_RW_STGEN_CSYSACK_Msk           /*!<  */

/*********  Bit definition for CA35SSC_LPI_STGEN_NTS_CR_WS1 register  *********/
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSREQ_Pos           (24U)
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSREQ_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSREQ_Pos) /*!< 0x01000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSREQ               CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSACK_Pos           (25U)
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSACK_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSACK_Pos) /*!< 0x02000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSACK               CA35SSC_LPI_STGEN_NTS_CR_WS1_STGEN_CSYSACK_Msk           /*!<  */

/*********  Bit definition for CA35SSC_LPI_STGEN_NTS_CR_WC1 register  *********/
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSREQ_Pos           (24U)
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSREQ_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSREQ_Pos) /*!< 0x01000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSREQ               CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSACK_Pos           (25U)
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSACK_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSACK_Pos) /*!< 0x02000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSACK               CA35SSC_LPI_STGEN_NTS_CR_WC1_STGEN_CSYSACK_Msk           /*!<  */

/*********  Bit definition for CA35SSC_LPI_STGEN_NTS_CR_WT1 register  *********/
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSREQ_Pos           (24U)
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSREQ_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSREQ_Pos) /*!< 0x01000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSREQ               CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSREQ_Msk           /*!<  */
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSACK_Pos           (25U)
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSACK_Msk           (0x1UL << CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSACK_Pos) /*!< 0x02000000 */
#define CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSACK               CA35SSC_LPI_STGEN_NTS_CR_WT1_STGEN_CSYSACK_Msk           /*!<  */

/*****************  Bit definition for CA35SS_VERR register  ******************/
#define CA35SSC_VERR_MINREV_Pos                                  (0U)
#define CA35SSC_VERR_MINREV_Msk                                  (0xFUL << CA35SSC_VERR_MINREV_Pos)                     /*!< 0x0000000F */
#define CA35SSC_VERR_MINREV                                      CA35SSC_VERR_MINREV_Msk                               /*!< Minor revision number */
#define CA35SSC_VERR_MAJREV_Pos                                  (4U)
#define CA35SSC_VERR_MAJREV_Msk                                  (0xFUL << CA35SSC_VERR_MAJREV_Pos)                     /*!< 0x000000F0 */
#define CA35SSC_VERR_MAJREV                                      CA35SSC_VERR_MAJREV_Msk                               /*!< Major revision number */

/*****************  Bit definition for CA35SS_IPIDR register  *****************/
#define CA35SSC_IPIDR_ID_Pos                                     (0U)
#define CA35SSC_IPIDR_ID_Msk                                     (0xFFFFFFFFUL << CA35SSC_IPIDR_ID_Pos)                 /*!< 0xFFFFFFFF */
#define CA35SSC_IPIDR_ID                                         CA35SSC_IPIDR_ID_Msk                                  /*!< Peripheral identification */

/*****************  Bit definition for CA35SS_SIDR register  ******************/
#define CA35SSC_SIDR_SID_Pos                                     (0U)
#define CA35SSC_SIDR_SID_Msk                                     (0xFFFFFFFFUL << CA35SSC_SIDR_SID_Pos)                 /*!< 0xFFFFFFFF */
#define CA35SSC_SIDR_SID                                         CA35SSC_SIDR_SID_Msk                                  /*!< block of registers size in Kbytes */

/***********  Bit definition for CA35SSC_NS_ENABLE_0_RW register  ***********/
#define CA35SSC_NS_ENABLE_0_RW_ALLOW_NONSEC_Pos                  (0U)
#define CA35SSC_NS_ENABLE_0_RW_ALLOW_NONSEC_Msk                  (0xFFFFFFFFUL << CA35SSC_NS_ENABLE_0_RW_ALLOW_NONSEC_Pos) /*!< 0xFFFFFFFF */
#define CA35SSC_NS_ENABLE_0_RW_ALLOW_NONSEC                      CA35SSC_NS_ENABLE_0_RW_ALLOW_NONSEC_Msk               /*!< Bit n configures the security settings of the SSC register at address 16 * n up to 0x1F0 */

/***********  Bit definition for CA35SSC_NS_ENABLE_0_WS1 register  ***********/
#define CA35SSC_NS_ENABLE_0_WS1_ALLOW_NONSEC_Pos                 (0U)
#define CA35SSC_NS_ENABLE_0_WS1_ALLOW_NONSEC_Msk                 (0xFFFFFFFFUL << CA35SSC_NS_ENABLE_0_WS1_ALLOW_NONSEC_Pos) /*!< 0xFFFFFFFF */
#define CA35SSC_NS_ENABLE_0_WS1_ALLOW_NONSEC                     CA35SSC_NS_ENABLE_0_WS1_ALLOW_NONSEC_Msk                /*!< Bit n configures the security settings of the SSC register at address 16 * n up to 0x1F0 */

/***********  Bit definition for CA35SSC_NS_ENABLE_0_WC1 register  ***********/
#define CA35SSC_NS_ENABLE_0_WC1_ALLOW_NONSEC_Pos                 (0U)
#define CA35SSC_NS_ENABLE_0_WC1_ALLOW_NONSEC_Msk                 (0xFFFFFFFFUL << CA35SSC_NS_ENABLE_0_WC1_ALLOW_NONSEC_Pos) /*!< 0xFFFFFFFF */
#define CA35SSC_NS_ENABLE_0_WC1_ALLOW_NONSEC                     CA35SSC_NS_ENABLE_0_WC1_ALLOW_NONSEC_Msk                /*!< Bit n configures the security settings of the SSC register at address 16 * n up to 0x1F0 */

/***********  Bit definition for CA35SSC_NS_ENABLE_0_WT1 register  ***********/
#define CA35SSC_NS_ENABLE_0_WT1_ALLOW_NONSEC_Pos                 (0U)
#define CA35SSC_NS_ENABLE_0_WT1_ALLOW_NONSEC_Msk                 (0xFFFFFFFFUL << CA35SSC_NS_ENABLE_0_WT1_ALLOW_NONSEC_Pos) /*!< 0xFFFFFFFF */
#define CA35SSC_NS_ENABLE_0_WT1_ALLOW_NONSEC                     CA35SSC_NS_ENABLE_0_WT1_ALLOW_NONSEC_Msk                /*!< Bit n configures the security settings of the SSC register at address 16 * n up to 0x1F0 */

/************  Bit definition for CA35SSC_NS_ENABLE_1 register  ************/
#define CA35SSC_NS_ENABLE_1_ALLOW_NONSEC_RO_Pos                  (28U)
#define CA35SSC_NS_ENABLE_1_ALLOW_NONSEC_RO_Msk                  (0xFUL << CA35SSC_NS_ENABLE_1_ALLOW_NONSEC_RO_Pos)     /*!< 0xF0000000 */
#define CA35SSC_NS_ENABLE_1_ALLOW_NONSEC_RO                      CA35SSC_NS_ENABLE_1_ALLOW_NONSEC_RO_Msk               /*!< Bit n indicates the security settings of the SSC register from 0x3C0 (bit 28) up to 0x3F0 (bit 31) */

/******************************************************************************/
/*                                                                            */
/*                                (CA35 SYSCFG)                               */
/*                                                                            */
/******************************************************************************/
/***********  Bit definition for CA35SYSCFG_ETR_LPI_CR register  ***********/
#define CA35SYSCFG_ETR_LPI_CR_ETR_CSYSREQ_Pos                    (0U)
#define CA35SYSCFG_ETR_LPI_CR_ETR_CSYSREQ_Msk                    (0x1UL << CA35SYSCFG_ETR_LPI_CR_ETR_CSYSREQ_Pos)       /*!< 0x00000001 */
#define CA35SYSCFG_ETR_LPI_CR_ETR_CSYSREQ                        CA35SYSCFG_ETR_LPI_CR_ETR_CSYSREQ_Msk                 /*!<  */

/***********  Bit definition for CA35SYSCFG_ETR_LPI_SR register  ***********/
#define CA35SYSCFG_ETR_LPI_SR_ETR_CSYSACK_Pos                    (0U)
#define CA35SYSCFG_ETR_LPI_SR_ETR_CSYSACK_Msk                    (0x1UL << CA35SYSCFG_ETR_LPI_SR_ETR_CSYSACK_Pos)       /*!< 0x00000001 */
#define CA35SYSCFG_ETR_LPI_SR_ETR_CSYSACK                        CA35SYSCFG_ETR_LPI_SR_ETR_CSYSACK_Msk                 /*!<  */

/********  Bit definition for CA35SYSCFG_STM_NSGUAREN_CR register  *********/
#define CA35SYSCFG_STM_NSGUAREN_CR_STM_NSGUAREN_Pos              (0U)
#define CA35SYSCFG_STM_NSGUAREN_CR_STM_NSGUAREN_Msk              (0x1UL << CA35SYSCFG_STM_NSGUAREN_CR_STM_NSGUAREN_Pos) /*!< 0x00000001 */
#define CA35SYSCFG_STM_NSGUAREN_CR_STM_NSGUAREN                  CA35SYSCFG_STM_NSGUAREN_CR_STM_NSGUAREN_Msk           /*!<  */

/********  Bit definition for CA35SYSCFG_TRACE_CLK_DIV_CR register  ********/
#define CA35SYSCFG_TRACE_CLK_DIV_CR_TRACE_CLK_DIV_VALUE_Pos      (0U)
#define CA35SYSCFG_TRACE_CLK_DIV_CR_TRACE_CLK_DIV_VALUE_Msk      (0x3FUL << CA35SYSCFG_TRACE_CLK_DIV_CR_TRACE_CLK_DIV_VALUE_Pos)        /*!< 0x0000003F */
#define CA35SYSCFG_TRACE_CLK_DIV_CR_TRACE_CLK_DIV_VALUE          CA35SYSCFG_TRACE_CLK_DIV_CR_TRACE_CLK_DIV_VALUE_Msk   /*!< 0x1 to 0x3F: Divider ratio from 2 to 64 */

/***********  Bit definition for CA35SYSCFG_DBGPWR_CR register  ************/
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP0_Pos                       (0U)
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP0_Msk                       (0x1UL << CA35SYSCFG_DBGPWR_CR_DBGPWRUP0_Pos)          /*!< 0x00000001 */
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP0                           CA35SYSCFG_DBGPWR_CR_DBGPWRUP0_Msk                    /*!<  */
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP1_Pos                       (1U)
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP1_Msk                       (0x1UL << CA35SYSCFG_DBGPWR_CR_DBGPWRUP1_Pos)          /*!< 0x00000002 */
#define CA35SYSCFG_DBGPWR_CR_DBGPWRUP1                           CA35SYSCFG_DBGPWR_CR_DBGPWRUP1_Msk                    /*!<  */

/*******  Bit definition for CA35SYSCFG_DBGL1RSTDISABLE_CR register  *******/
#define CA35SYSCFG_DBGL1RSTDISABLE_CR_DBGL1RSTDIS_Pos            (0U)
#define CA35SYSCFG_DBGL1RSTDISABLE_CR_DBGL1RSTDIS_Msk            (0x1UL << CA35SYSCFG_DBGL1RSTDISABLE_CR_DBGL1RSTDIS_Pos) /*!< 0x00000001 */
#define CA35SYSCFG_DBGL1RSTDISABLE_CR_DBGL1RSTDIS                CA35SYSCFG_DBGL1RSTDISABLE_CR_DBGL1RSTDIS_Msk         /*!<  */

/***********  Bit definition for CA35SYSCFG_DBGPWR_SR register  ************/
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN0_Pos                    (0U)
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN0_Msk                    (0x1UL << CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN0_Pos)       /*!< 0x00000001 */
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN0                        CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN0_Msk                 /*!<  */
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN1_Pos                    (1U)
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN1_Msk                    (0x1UL << CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN1_Pos)       /*!< 0x00000002 */
#define CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN1                        CA35SYSCFG_DBGPWR_SR_DBGNOPWRDWN1_Msk                 /*!<  */
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ0_Pos                    (2U)
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ0_Msk                    (0x1UL << CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ0_Pos)       /*!< 0x00000004 */
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ0                        CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ0_Msk                 /*!<  */
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ1_Pos                    (3U)
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ1_Msk                    (0x1UL << CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ1_Pos)       /*!< 0x00000008 */
#define CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ1                        CA35SYSCFG_DBGPWR_SR_DBGPWRUPREQ1_Msk                 /*!<  */

/***********  Bit definition for CA35SYSCFG_EDBGACK_SR register  ***********/
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C0_Pos                      (0U)
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C0_Msk                      (0x1UL << CA35SYSCFG_EDBGACK_SR_DBGACK_C0_Pos)         /*!< 0x00000001 */
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C0                          CA35SYSCFG_EDBGACK_SR_DBGACK_C0_Msk                   /*!<  */
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C1_Pos                      (1U)
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C1_Msk                      (0x1UL << CA35SYSCFG_EDBGACK_SR_DBGACK_C1_Pos)         /*!< 0x00000002 */
#define CA35SYSCFG_EDBGACK_SR_DBGACK_C1                          CA35SYSCFG_EDBGACK_SR_DBGACK_C1_Msk                   /*!<  */

/************  Bit definition for CA35SYSCFG_GIC_CFGR register  ************/
#define CA35SYSCFG_GIC_CFGR_GIC_4KNOT64K_Pos                     (0U)
#define CA35SYSCFG_GIC_CFGR_GIC_4KNOT64K_Msk                     (0x1UL << CA35SYSCFG_GIC_CFGR_GIC_4KNOT64K_Pos)        /*!< 0x00000001 */
#define CA35SYSCFG_GIC_CFGR_GIC_4KNOT64K                         CA35SYSCFG_GIC_CFGR_GIC_4KNOT64K_Msk                  /*!<  */

/*************  Bit definition for CA35SYSCFG_LP_SR register  **************/
#define CA35SYSCFG_LP_SR_STANDBYWFE_0_Pos                        (0U)
#define CA35SYSCFG_LP_SR_STANDBYWFE_0_Msk                        (0x1UL << CA35SYSCFG_LP_SR_STANDBYWFE_0_Pos)           /*!< 0x00000001 */
#define CA35SYSCFG_LP_SR_STANDBYWFE_0                            CA35SYSCFG_LP_SR_STANDBYWFE_0_Msk                     /*!<  */
#define CA35SYSCFG_LP_SR_STANDBYWFE_1_Pos                        (1U)
#define CA35SYSCFG_LP_SR_STANDBYWFE_1_Msk                        (0x1UL << CA35SYSCFG_LP_SR_STANDBYWFE_1_Pos)           /*!< 0x00000002 */
#define CA35SYSCFG_LP_SR_STANDBYWFE_1                            CA35SYSCFG_LP_SR_STANDBYWFE_1_Msk                     /*!<  */
#define CA35SYSCFG_LP_SR_STANDBYWFI_0_Pos                        (2U)
#define CA35SYSCFG_LP_SR_STANDBYWFI_0_Msk                        (0x1UL << CA35SYSCFG_LP_SR_STANDBYWFI_0_Pos)           /*!< 0x00000004 */
#define CA35SYSCFG_LP_SR_STANDBYWFI_0                            CA35SYSCFG_LP_SR_STANDBYWFI_0_Msk                     /*!<  */
#define CA35SYSCFG_LP_SR_STANDBYWFI_1_Pos                        (3U)
#define CA35SYSCFG_LP_SR_STANDBYWFI_1_Msk                        (0x1UL << CA35SYSCFG_LP_SR_STANDBYWFI_1_Pos)           /*!< 0x00000008 */
#define CA35SYSCFG_LP_SR_STANDBYWFI_1                            CA35SYSCFG_LP_SR_STANDBYWFI_1_Msk                     /*!<  */
#define CA35SYSCFG_LP_SR_STANDBYWFIL2_Pos                        (4U)
#define CA35SYSCFG_LP_SR_STANDBYWFIL2_Msk                        (0x1UL << CA35SYSCFG_LP_SR_STANDBYWFIL2_Pos)           /*!< 0x00000010 */
#define CA35SYSCFG_LP_SR_STANDBYWFIL2                            CA35SYSCFG_LP_SR_STANDBYWFIL2_Msk                     /*!<  */

/***********  Bit definition for CA35SYSCFG_RSTACK_SR register  ************/
#define CA35SYSCFG_RSTACK_SR_NRESET_DBG_ACK_Pos                  (0U)
#define CA35SYSCFG_RSTACK_SR_NRESET_DBG_ACK_Msk                  (0x1UL << CA35SYSCFG_RSTACK_SR_NRESET_DBG_ACK_Pos)     /*!< 0x00000001 */
#define CA35SYSCFG_RSTACK_SR_NRESET_DBG_ACK                      CA35SYSCFG_RSTACK_SR_NRESET_DBG_ACK_Msk               /*!<  */
#define CA35SYSCFG_RSTACK_SR_NRESET_FCT_ACK_Pos                  (1U)
#define CA35SYSCFG_RSTACK_SR_NRESET_FCT_ACK_Msk                  (0x1UL << CA35SYSCFG_RSTACK_SR_NRESET_FCT_ACK_Pos)     /*!< 0x00000002 */
#define CA35SYSCFG_RSTACK_SR_NRESET_FCT_ACK                      CA35SYSCFG_RSTACK_SR_NRESET_FCT_ACK_Msk               /*!<  */

/*********  Bit definition for CA35SYSCFG_AARCH_MODE_CR register  **********/
#define CA35SYSCFG_AARCH_MODE_CR_AA64NAA32_Pos                   (0U)
#define CA35SYSCFG_AARCH_MODE_CR_AA64NAA32_Msk                   (0x1UL << CA35SYSCFG_AARCH_MODE_CR_AA64NAA32_Pos)      /*!< 0x00000001 */
#define CA35SYSCFG_AARCH_MODE_CR_AA64NAA32                       CA35SYSCFG_AARCH_MODE_CR_AA64NAA32_Msk                /*!<  */

/************  Bit definition for CA35SYSCFG_VBAR_CR register  *************/
#define CA35SYSCFG_VBAR_CR_RVBARADDRL_Pos                        (2U)
#define CA35SYSCFG_VBAR_CR_RVBARADDRL_Msk                        (0x3FFFFFFFUL << CA35SYSCFG_VBAR_CR_RVBARADDRL_Pos)    /*!< 0xFFFFFFFC */
#define CA35SYSCFG_VBAR_CR_RVBARADDRL                            CA35SYSCFG_VBAR_CR_RVBARADDRL_Msk                     /*!< Set the value of reset vector at the boundaries of the Cortex-A35 cores */

/*********  Bit definition for CA35SYSCFG_M33_ACCESS_CR register  **********/
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_SEC_Pos                  (0U)
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_SEC_Msk                  (0x1UL << CA35SYSCFG_M33_ACCESS_CR_M33CFG_SEC_Pos)     /*!< 0x00000001 */
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_SEC                      CA35SYSCFG_M33_ACCESS_CR_M33CFG_SEC_Msk               /*!<  */
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_PRIV_Pos                 (1U)
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_PRIV_Msk                 (0x1UL << CA35SYSCFG_M33_ACCESS_CR_M33CFG_PRIV_Pos)    /*!< 0x00000002 */
#define CA35SYSCFG_M33_ACCESS_CR_M33CFG_PRIV                     CA35SYSCFG_M33_ACCESS_CR_M33CFG_PRIV_Msk              /*!<  */

/**********  Bit definition for CA35SYSCFG_M33_TZEN_CR register  ***********/
#define CA35SYSCFG_M33_TZEN_CR_CFG_SECEXT_Pos                    (0U)
#define CA35SYSCFG_M33_TZEN_CR_CFG_SECEXT_Msk                    (0x1UL << CA35SYSCFG_M33_TZEN_CR_CFG_SECEXT_Pos)       /*!< 0x00000001 */
#define CA35SYSCFG_M33_TZEN_CR_CFG_SECEXT                        CA35SYSCFG_M33_TZEN_CR_CFG_SECEXT_Msk                 /*!<  */

/********  Bit definition for CA35SYSCFG_M33_INITSVTOR_CR register  ********/
#define CA35SYSCFG_M33_INITSVTOR_CR_INITSVTOR_Pos                (7U)
#define CA35SYSCFG_M33_INITSVTOR_CR_INITSVTOR_Msk                (0x1FFFFFFUL << CA35SYSCFG_M33_INITSVTOR_CR_INITSVTOR_Pos)   /*!< 0xFFFFFF80 */
#define CA35SYSCFG_M33_INITSVTOR_CR_INITSVTOR                    CA35SYSCFG_M33_INITSVTOR_CR_INITSVTOR_Msk             /*!< Secure vector table offset */

/*******  Bit definition for CA35SYSCFG_M33_INITNSVTOR_CR register  ********/
#define CA35SYSCFG_M33_INITNSVTOR_CR_INITNSVTOR_Pos              (7U)
#define CA35SYSCFG_M33_INITNSVTOR_CR_INITNSVTOR_Msk              (0x1FFFFFFUL << CA35SYSCFG_M33_INITNSVTOR_CR_INITNSVTOR_Pos)     /*!< 0xFFFFFF80 */
#define CA35SYSCFG_M33_INITNSVTOR_CR_INITNSVTOR                  CA35SYSCFG_M33_INITNSVTOR_CR_INITNSVTOR_Msk           /*!< Non-secure vector table offset */

/*************  Bit definition for CA35SYSCFG_VERR register  ***************/
#define CA35SYSCFG_VERR_MINREV_Pos                               (0U)
#define CA35SYSCFG_VERR_MINREV_Msk                               (0xFUL << CA35SYSCFG_VERR_MINREV_Pos)                  /*!< 0x0000000F */
#define CA35SYSCFG_VERR_MINREV                                   CA35SYSCFG_VERR_MINREV_Msk                            /*!< minor revision information */
#define CA35SYSCFG_VERR_MAJREV_Pos                               (4U)
#define CA35SYSCFG_VERR_MAJREV_Msk                               (0xFUL << CA35SYSCFG_VERR_MAJREV_Pos)                  /*!< 0x000000F0 */
#define CA35SYSCFG_VERR_MAJREV                                    CA35SYSCFG_VERR_MAJREV_Msk                           /*!< major revision information */

/*************  Bit definition for CA35SYSCFG_IPIDR register  **************/
#define CA35SYSCFG_IPIDR_ID_Pos                                  (0U)
#define CA35SYSCFG_IPIDR_ID_Msk                                  (0xFFFFFFFFUL << CA35SYSCFG_IPIDR_ID_Pos)              /*!< 0xFFFFFFFF */
#define CA35SYSCFG_IPIDR_ID                                      CA35SYSCFG_IPIDR_ID_Msk                               /*!< BSEC identification */

/*************  Bit definition for CA35SYSCFG_SIDR register  ***************/
#define CA35SYSCFG_SIDR_SID_Pos                                  (0U)
#define CA35SYSCFG_SIDR_SID_Msk                                  (0xFFFFFFFFUL << CA35SYSCFG_SIDR_SID_Pos)              /*!< 0xFFFFFFFF */
#define CA35SYSCFG_SIDR_SID                                      CA35SYSCFG_SIDR_SID_Msk                               /*!< BSEC size identification */

/******************************************************************************/
/*                                                                            */
/*                          CRC calculation unit                              */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for CRC_DR register  *********************/
#define CRC_DR_DR_Pos            (0U)
#define CRC_DR_DR_Msk            (0xFFFFFFFFUL << CRC_DR_DR_Pos)                /*!< 0xFFFFFFFF */
#define CRC_DR_DR                CRC_DR_DR_Msk                                 /*!< Data register bits */

/*******************  Bit definition for CRC_IDR register  ********************/
#define CRC_IDR_IDR_Pos          (0U)
#define CRC_IDR_IDR_Msk          (0xFFFFFFFFUL << CRC_IDR_IDR_Pos)              /*!< 0xFFFFFFFF */
#define CRC_IDR_IDR              CRC_IDR_IDR_Msk                               /*!< General-purpose 32-bit data register bits */

/********************  Bit definition for CRC_CR register  ********************/
#define CRC_CR_RESET_Pos         (0U)
#define CRC_CR_RESET_Msk         (0x1UL << CRC_CR_RESET_Pos)                    /*!< 0x00000001 */
#define CRC_CR_RESET             CRC_CR_RESET_Msk                              /*!< RESET the CRC computation unit bit */
#define CRC_CR_POLYSIZE_Pos      (3U)
#define CRC_CR_POLYSIZE_Msk      (0x3UL << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000018 */
#define CRC_CR_POLYSIZE          CRC_CR_POLYSIZE_Msk                           /*!< Polynomial size bits */
#define CRC_CR_POLYSIZE_0        (0x1UL << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000008 */
#define CRC_CR_POLYSIZE_1        (0x2UL << CRC_CR_POLYSIZE_Pos)                 /*!< 0x00000010 */
#define CRC_CR_REV_IN_Pos        (5U)
#define CRC_CR_REV_IN_Msk        (0x3UL << CRC_CR_REV_IN_Pos)                   /*!< 0x00000060 */
#define CRC_CR_REV_IN            CRC_CR_REV_IN_Msk                             /*!< REV_IN Reverse Input Data bits */
#define CRC_CR_REV_IN_0          (0x1UL << CRC_CR_REV_IN_Pos)                   /*!< 0x00000020 */
#define CRC_CR_REV_IN_1          (0x2UL << CRC_CR_REV_IN_Pos)                   /*!< 0x00000040 */
#define CRC_CR_REV_OUT_Pos       (7U)
#define CRC_CR_REV_OUT_Msk       (0x3UL << CRC_CR_REV_OUT_Pos)                  /*!< 0x00000080 */
#define CRC_CR_REV_OUT           CRC_CR_REV_OUT_Msk                            /*!< REV_OUT Reverse Output Data bits */
#define CRC_CR_REV_OUT_0         (0x1UL << CRC_CR_REV_OUT_Pos)
#define CRC_CR_REV_OUT_1         (0x2UL << CRC_CR_REV_OUT_Pos)
#define CRC_CR_RTYPE_IN_Pos      (9U)
#define CRC_CR_RTYPE_IN_Msk      (0x1UL << CRC_CR_RTYPE_IN_Pos)
#define CRC_CR_RTYPE_IN          CRC_CR_RTYPE_IN_Msk
#define CRC_CR_RTYPE_OUT_Pos     (10U)
#define CRC_CR_RTYPE_OUT_Msk     (0x1UL << CRC_CR_RTYPE_OUT_Pos)
#define CRC_CR_RTYPE_OUT         CRC_CR_RTYPE_OUT_Msk

/*******************  Bit definition for CRC_INIT register  *******************/
#define CRC_INIT_INIT_Pos        (0U)
#define CRC_INIT_INIT_Msk        (0xFFFFFFFFUL << CRC_INIT_INIT_Pos)            /*!< 0xFFFFFFFF */
#define CRC_INIT_INIT            CRC_INIT_INIT_Msk                             /*!< Initial CRC value bits */

/*******************  Bit definition for CRC_POL register  ********************/
#define CRC_POL_POL_Pos          (0U)
#define CRC_POL_POL_Msk          (0xFFFFFFFFUL << CRC_POL_POL_Pos)              /*!< 0xFFFFFFFF */
#define CRC_POL_POL              CRC_POL_POL_Msk                               /*!< Coefficients of the polynomial */

/******************************************************************************/
/*                                                                            */
/*                                DBGMCU                                      */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for DBGMCU_IDCODE register  *************/
#define DBGMCU_IDCODE_DEV_ID_Pos                    (0U)
#define DBGMCU_IDCODE_DEV_ID_Msk                    (0xFFFUL << DBGMCU_IDCODE_DEV_ID_Pos)                /*!< 0x00000FFF */
#define DBGMCU_IDCODE_DEV_ID                        DBGMCU_IDCODE_DEV_ID_Msk                            /*!< Device ID */
#define DBGMCU_IDCODE_DIV_ID_Pos                    (12U)
#define DBGMCU_IDCODE_DIV_ID_Msk                    (0xFUL << DBGMCU_IDCODE_DIV_ID_Pos)                  /*!< 0x0000F000 */
#define DBGMCU_IDCODE_DIV_ID                        DBGMCU_IDCODE_DIV_ID_Msk                            /*!< Division ID */
#define DBGMCU_IDCODE_REV_ID_Pos                    (16U)
#define DBGMCU_IDCODE_REV_ID_Msk                    (0xFFFFUL << DBGMCU_IDCODE_REV_ID_Pos)               /*!< 0xFFFF0000 */
#define DBGMCU_IDCODE_REV_ID                        DBGMCU_IDCODE_REV_ID_Msk                            /*!< Device revision */

/********************  Bit definition for DBGMCU_CR register  *****************/
#define DBGMCU_CR_DBG_SLEEP_Pos                     (0U)
#define DBGMCU_CR_DBG_SLEEP_Msk                     (0x1UL << DBGMCU_CR_DBG_SLEEP_Pos)                   /*!< 0x00000001 */
#define DBGMCU_CR_DBG_SLEEP                         DBGMCU_CR_DBG_SLEEP_Msk                             /*!< Allow debug in SLEEP mode */
#define DBGMCU_CR_DBG_STOP_Pos                      (1U)
#define DBGMCU_CR_DBG_STOP_Msk                      (0x1UL << DBGMCU_CR_DBG_STOP_Pos)                    /*!< 0x00000002 */
#define DBGMCU_CR_DBG_STOP                          DBGMCU_CR_DBG_STOP_Msk                              /*!< Allow debug in STOP mode */
#define DBGMCU_CR_DBG_STANDBY_Pos                   (2U)
#define DBGMCU_CR_DBG_STANDBY_Msk                   (0x1UL << DBGMCU_CR_DBG_STANDBY_Pos)                 /*!< 0x00000004 */
#define DBGMCU_CR_DBG_STANDBY                       DBGMCU_CR_DBG_STANDBY_Msk                           /*!< Allow debug in STANDBY mode */
#define DBGMCU_CR_DBG_SWD_SELN_Pos                  (4U)
#define DBGMCU_CR_DBG_SWD_SELN_Msk                  (0x1UL << DBGMCU_CR_DBG_SWD_SELN_Pos)                /*!< 0x00000010 */
#define DBGMCU_CR_DBG_SWD_SELN                      DBGMCU_CR_DBG_SWD_SELN_Msk                          /*!< Select M0+ debug interface */

/******************  Bit definition for DBGMCU_CRA35 register  ****************/
#define DBGMCU_CRA35_WDFZCTL_Pos                    (0U)
#define DBGMCU_CRA35_WDFZCTL_Msk                    (0x1UL << DBGMCU_CRA35_WDFZCTL_Pos)                  /*!< 0x00000001 */
#define DBGMCU_CRA35_WDFZCTL                        DBGMCU_CRA35_WDFZCTL_Msk                            /*!< IWDG1 behavior when secure debug enabled */
#define DBGMCU_CRA35_DBG_STGEN_STOP_Pos             (1U)
#define DBGMCU_CRA35_DBG_STGEN_STOP_Msk             (0x1UL << DBGMCU_CRA35_DBG_STGEN_STOP_Pos)           /*!< 0x00000002 */
#define DBGMCU_CRA35_DBG_STGEN_STOP                 DBGMCU_CRA35_DBG_STGEN_STOP_Msk                     /*!< STGEN suspend in debug */

/********************  Bit definition for AHB2LFZ register  *******************/
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Pos      (0U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Pos)    /*!< 0x00000001 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH0_STOP_Msk              /*!< HPDMA1 Channel 0 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Pos      (1U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Pos)    /*!< 0x00000002 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH1_STOP_Msk              /*!< HPDMA1 Channel 1 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Pos      (2U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Pos)    /*!< 0x00000004 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH2_STOP_Msk              /*!< HPDMA1 Channel 2 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Pos      (3U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Pos)    /*!< 0x00000008 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH3_STOP_Msk              /*!< HPDMA1 Channel 3 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Pos      (4U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Pos)    /*!< 0x00000010 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH4_STOP_Msk              /*!< HPDMA1 Channel 4 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Pos      (5U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Pos)    /*!< 0x00000020 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH5_STOP_Msk              /*!< HPDMA1 Channel 5 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Pos      (6U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Pos)    /*!< 0x00000040 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH6_STOP_Msk              /*!< HPDMA1 Channel 6 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Pos      (7U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Pos)    /*!< 0x00000080 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH7_STOP_Msk              /*!< HPDMA1 Channel 7 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Pos      (8U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Pos)    /*!< 0x00000100 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH8_STOP_Msk              /*!< HPDMA1 Channel 8 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Pos      (9U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Pos)    /*!< 0x00000200 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA1_CH9_STOP_Msk              /*!< HPDMA1 Channel 9 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Pos     (10U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Pos)   /*!< 0x00000400 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH10_STOP_Msk             /*!< HPDMA1 Channel 10 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Pos     (11U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Pos)   /*!< 0x00000800 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH11_STOP_Msk             /*!< HPDMA1 Channel 11 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Pos     (12U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Pos)   /*!< 0x00001000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH12_STOP_Msk             /*!< HPDMA1 Channel 12 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Pos     (13U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Pos)   /*!< 0x00002000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH13_STOP_Msk             /*!< HPDMA1 Channel 13 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Pos     (14U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Pos)   /*!< 0x00004000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH14_STOP_Msk             /*!< HPDMA1 Channel 14 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Pos     (15U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Pos)   /*!< 0x00008000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA1_CH15_STOP_Msk             /*!< HPDMA1 Channel 15 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Pos      (16U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Pos)    /*!< 0x00010000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH0_STOP_Msk              /*!< HPDMA2 Channel 0 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Pos      (17U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Pos)    /*!< 0x00020000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH1_STOP_Msk              /*!< HPDMA2 Channel 1 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Pos      (18U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Pos)    /*!< 0x00040000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH2_STOP_Msk              /*!< HPDMA2 Channel 2 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Pos      (19U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Pos)    /*!< 0x00080000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH3_STOP_Msk              /*!< HPDMA2 Channel 3 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Pos      (20U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Pos)    /*!< 0x00100000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH4_STOP_Msk              /*!< HPDMA2 Channel 4 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Pos      (21U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Pos)    /*!< 0x00200000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH5_STOP_Msk              /*!< HPDMA2 Channel 5 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Pos      (22U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Pos)    /*!< 0x00400000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH6_STOP_Msk              /*!< HPDMA2 Channel 6 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Pos      (23U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Pos)    /*!< 0x00800000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH7_STOP_Msk              /*!< HPDMA2 Channel 7 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Pos      (24U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Pos)    /*!< 0x01000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH8_STOP_Msk              /*!< HPDMA2 Channel 8 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Pos      (25U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Msk      (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Pos)    /*!< 0x02000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP          DBGMCU_AHB2LFZ_DBG_HPDMA2_CH9_STOP_Msk              /*!< HPDMA2 Channel 9 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Pos     (26U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Pos)   /*!< 0x04000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH10_STOP_Msk             /*!< HPDMA2 Channel 10 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Pos     (27U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Pos)   /*!< 0x08000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH11_STOP_Msk             /*!< HPDMA2 Channel 11 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Pos     (28U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Pos)   /*!< 0x10000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH12_STOP_Msk             /*!< HPDMA2 Channel 12 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Pos     (29U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Pos)   /*!< 0x20000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH13_STOP_Msk             /*!< HPDMA2 Channel 13 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Pos     (30U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Pos)   /*!< 0x40000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH14_STOP_Msk             /*!< HPDMA2 Channel 14 suspend in debug */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Pos     (31U)
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Msk     (0x1UL << DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Pos)   /*!< 0x80000000 */
#define DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP         DBGMCU_AHB2LFZ_DBG_HPDMA2_CH15_STOP_Msk             /*!< HPDMA2 Channel 15 suspend in debug */

/********************  Bit definition for AHB2HFZ register  *******************/
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Pos      (0U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Pos)    /*!< 0x00000001 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH0_STOP_Msk              /*!< HPDMA3 Channel 0 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Pos      (1U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Pos)    /*!< 0x00000002 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH1_STOP_Msk              /*!< HPDMA3 Channel 1 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Pos      (2U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Pos)    /*!< 0x00000004 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH2_STOP_Msk              /*!< HPDMA3 Channel 2 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Pos      (3U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Pos)    /*!< 0x00000008 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH3_STOP_Msk              /*!< HPDMA3 Channel 3 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Pos      (4U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Pos)    /*!< 0x00000010 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH4_STOP_Msk              /*!< HPDMA3 Channel 4 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Pos      (5U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Pos)    /*!< 0x00000020 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH5_STOP_Msk              /*!< HPDMA3 Channel 5 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Pos      (6U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Pos)    /*!< 0x00000040 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH6_STOP_Msk              /*!< HPDMA3 Channel 6 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Pos      (7U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Pos)    /*!< 0x00000080 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH7_STOP_Msk              /*!< HPDMA3 Channel 7 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Pos      (8U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Pos)    /*!< 0x00000100 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH8_STOP_Msk              /*!< HPDMA3 Channel 8 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Pos      (9U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Msk      (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Pos)    /*!< 0x00000200 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP          DBGMCU_AHB2HFZ_DBG_HPDMA3_CH9_STOP_Msk              /*!< HPDMA3 Channel 9 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Pos     (10U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Pos)   /*!< 0x00000400 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH10_STOP_Msk             /*!< HPDMA3 Channel 10 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Pos     (11U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Pos)   /*!< 0x00000800 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH11_STOP_Msk             /*!< HPDMA3 Channel 11 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Pos     (12U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Pos)   /*!< 0x00001000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH12_STOP_Msk             /*!< HPDMA3 Channel 12 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Pos     (13U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Pos)   /*!< 0x00002000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH13_STOP_Msk             /*!< HPDMA3 Channel 13 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Pos     (14U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Pos)   /*!< 0x00004000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH14_STOP_Msk             /*!< HPDMA3 Channel 14 suspend in debug */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Pos     (15U)
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Msk     (0x1UL << DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Pos)   /*!< 0x00008000 */
#define DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP         DBGMCU_AHB2HFZ_DBG_HPDMA3_CH15_STOP_Msk             /*!< HPDMA3 Channel 15 suspend in debug */

/********************  Bit definition for AHBSRFZ register  *******************/
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Pos       (0U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Msk       (0x1UL << DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Pos)     /*!< 0x00000001 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH0_STOP_Msk               /*!< LPDMA Channel 0 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Pos       (1U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Msk       (0x1UL << DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Pos)     /*!< 0x00000002 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH1_STOP_Msk               /*!< LPDMA Channel 1 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Pos       (2U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Msk       (0x1UL << DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Pos)     /*!< 0x00000004 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH2_STOP_Msk               /*!< LPDMA Channel 2 suspend in debug */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Pos       (3U)
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Msk       (0x1UL << DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Pos)     /*!< 0x00000008 */
#define DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP           DBGMCU_AHBSRFZ_DBG_LPDMA_CH3_STOP_Msk               /*!< LPDMA Channel 3 suspend in debug */

/********************  Bit definition for APB1FZ register  ********************/
#define DBGMCU_APB1FZ_DBG_TIM2_STOP_Pos             (0U)
#define DBGMCU_APB1FZ_DBG_TIM2_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM2_STOP_Pos)           /*!< 0x00000001 */
#define DBGMCU_APB1FZ_DBG_TIM2_STOP                 DBGMCU_APB1FZ_DBG_TIM2_STOP_Msk                     /*!< TIM2 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM3_STOP_Pos             (1U)
#define DBGMCU_APB1FZ_DBG_TIM3_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM3_STOP_Pos)           /*!< 0x00000002 */
#define DBGMCU_APB1FZ_DBG_TIM3_STOP                 DBGMCU_APB1FZ_DBG_TIM3_STOP_Msk                     /*!< TIM3 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM4_STOP_Pos             (2U)
#define DBGMCU_APB1FZ_DBG_TIM4_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM4_STOP_Pos)           /*!< 0x00000004 */
#define DBGMCU_APB1FZ_DBG_TIM4_STOP                 DBGMCU_APB1FZ_DBG_TIM4_STOP_Msk                     /*!< TIM4 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM5_STOP_Pos             (3U)
#define DBGMCU_APB1FZ_DBG_TIM5_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM5_STOP_Pos)           /*!< 0x00000008 */
#define DBGMCU_APB1FZ_DBG_TIM5_STOP                 DBGMCU_APB1FZ_DBG_TIM5_STOP_Msk                     /*!< TIM5 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM6_STOP_Pos             (4U)
#define DBGMCU_APB1FZ_DBG_TIM6_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM6_STOP_Pos)           /*!< 0x00000010 */
#define DBGMCU_APB1FZ_DBG_TIM6_STOP                 DBGMCU_APB1FZ_DBG_TIM6_STOP_Msk                     /*!< TIM6 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM7_STOP_Pos             (5U)
#define DBGMCU_APB1FZ_DBG_TIM7_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_TIM7_STOP_Pos)           /*!< 0x00000020 */
#define DBGMCU_APB1FZ_DBG_TIM7_STOP                 DBGMCU_APB1FZ_DBG_TIM7_STOP_Msk                     /*!< TIM7 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM12_STOP_Pos            (6U)
#define DBGMCU_APB1FZ_DBG_TIM12_STOP_Msk            (0x1UL << DBGMCU_APB1FZ_DBG_TIM12_STOP_Pos)          /*!< 0x00000040 */
#define DBGMCU_APB1FZ_DBG_TIM12_STOP                DBGMCU_APB1FZ_DBG_TIM12_STOP_Msk                    /*!< TIM12 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM13_STOP_Pos            (7U)
#define DBGMCU_APB1FZ_DBG_TIM13_STOP_Msk            (0x1UL << DBGMCU_APB1FZ_DBG_TIM13_STOP_Pos)          /*!< 0x00000080 */
#define DBGMCU_APB1FZ_DBG_TIM13_STOP                DBGMCU_APB1FZ_DBG_TIM13_STOP_Msk                    /*!< TIM13 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM14_STOP_Pos            (8U)
#define DBGMCU_APB1FZ_DBG_TIM14_STOP_Msk            (0x1UL << DBGMCU_APB1FZ_DBG_TIM14_STOP_Pos)          /*!< 0x00000100 */
#define DBGMCU_APB1FZ_DBG_TIM14_STOP                DBGMCU_APB1FZ_DBG_TIM14_STOP_Msk                    /*!< TIM14 suspend in debug */
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Pos           (9U)
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Msk           (0x1UL << DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Pos)         /*!< 0x00000200 */
#define DBGMCU_APB1FZ_DBG_LPTIM1_STOP               DBGMCU_APB1FZ_DBG_LPTIM1_STOP_Msk                   /*!< LPTIM1 suspend in debug */
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Pos           (10U)
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Msk           (0x1UL << DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Pos)         /*!< 0x00000400 */
#define DBGMCU_APB1FZ_DBG_LPTIM2_STOP               DBGMCU_APB1FZ_DBG_LPTIM2_STOP_Msk                   /*!< LPTIM2 suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C1_STOP_Pos             (18U)
#define DBGMCU_APB1FZ_DBG_I2C1_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C1_STOP_Pos)           /*!< 0x00040000 */
#define DBGMCU_APB1FZ_DBG_I2C1_STOP                 DBGMCU_APB1FZ_DBG_I2C1_STOP_Msk                     /*!< I2C1 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C2_STOP_Pos             (19U)
#define DBGMCU_APB1FZ_DBG_I2C2_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C2_STOP_Pos)           /*!< 0x00080000 */
#define DBGMCU_APB1FZ_DBG_I2C2_STOP                 DBGMCU_APB1FZ_DBG_I2C2_STOP_Msk                     /*!< I2C2 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C3_STOP_Pos             (20U)
#define DBGMCU_APB1FZ_DBG_I2C3_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C3_STOP_Pos)           /*!< 0x00100000 */
#define DBGMCU_APB1FZ_DBG_I2C3_STOP                 DBGMCU_APB1FZ_DBG_I2C3_STOP_Msk                     /*!< I2C3 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C4_STOP_Pos             (21U)
#define DBGMCU_APB1FZ_DBG_I2C4_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C4_STOP_Pos)           /*!< 0x00200000 */
#define DBGMCU_APB1FZ_DBG_I2C4_STOP                 DBGMCU_APB1FZ_DBG_I2C4_STOP_Msk                     /*!< I2C4 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C5_STOP_Pos             (22U)
#define DBGMCU_APB1FZ_DBG_I2C5_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C5_STOP_Pos)           /*!< 0x00400000 */
#define DBGMCU_APB1FZ_DBG_I2C5_STOP                 DBGMCU_APB1FZ_DBG_I2C5_STOP_Msk                     /*!< I2C5 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C6_STOP_Pos             (23U)
#define DBGMCU_APB1FZ_DBG_I2C6_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C6_STOP_Pos)           /*!< 0x00800000 */
#define DBGMCU_APB1FZ_DBG_I2C6_STOP                 DBGMCU_APB1FZ_DBG_I2C6_STOP_Msk                     /*!< I2C6 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I2C7_STOP_Pos             (24U)
#define DBGMCU_APB1FZ_DBG_I2C7_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I2C7_STOP_Pos)           /*!< 0x01000000 */
#define DBGMCU_APB1FZ_DBG_I2C7_STOP                 DBGMCU_APB1FZ_DBG_I2C7_STOP_Msk                     /*!< I2C7 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I3C1_STOP_Pos             (25U)
#define DBGMCU_APB1FZ_DBG_I3C1_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I3C1_STOP_Pos)           /*!< 0x02000000 */
#define DBGMCU_APB1FZ_DBG_I3C1_STOP                 DBGMCU_APB1FZ_DBG_I3C1_STOP_Msk                     /*!< I3C1 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I3C2_STOP_Pos             (26U)
#define DBGMCU_APB1FZ_DBG_I3C2_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I3C2_STOP_Pos)           /*!< 0x04000000 */
#define DBGMCU_APB1FZ_DBG_I3C2_STOP                 DBGMCU_APB1FZ_DBG_I3C2_STOP_Msk                     /*!< I3C2 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_I3C3_STOP_Pos             (27U)
#define DBGMCU_APB1FZ_DBG_I3C3_STOP_Msk             (0x1UL << DBGMCU_APB1FZ_DBG_I3C3_STOP_Pos)           /*!< 0x08000000 */
#define DBGMCU_APB1FZ_DBG_I3C3_STOP                 DBGMCU_APB1FZ_DBG_I3C3_STOP_Msk                     /*!< I3C3 SMBUS timeout suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM10_STOP_Pos            (28U)
#define DBGMCU_APB1FZ_DBG_TIM10_STOP_Msk            (0x1UL << DBGMCU_APB1FZ_DBG_TIM10_STOP_Pos)          /*!< 0x1000000 */
#define DBGMCU_APB1FZ_DBG_TIM10_STOP                DBGMCU_APB1FZ_DBG_TIM10_STOP_Msk                    /*!< TIM10 suspend in debug */
#define DBGMCU_APB1FZ_DBG_TIM11_STOP_Pos            (29U)
#define DBGMCU_APB1FZ_DBG_TIM11_STOP_Msk            (0x1UL << DBGMCU_APB1FZ_DBG_TIM11_STOP_Pos)          /*!< 0x20000000 */
#define DBGMCU_APB1FZ_DBG_TIM11_STOP                DBGMCU_APB1FZ_DBG_TIM11_STOP_Msk                    /*!< TIM11 suspend in debug */

/********************  Bit definition for APB2FZ register  ********************/
#define DBGMCU_APB2FZ_DBG_TIM1_STOP_Pos             (0U)
#define DBGMCU_APB2FZ_DBG_TIM1_STOP_Msk             (0x1UL << DBGMCU_APB2FZ_DBG_TIM1_STOP_Pos)           /*!< 0x00000001 */
#define DBGMCU_APB2FZ_DBG_TIM1_STOP                 DBGMCU_APB2FZ_DBG_TIM1_STOP_Msk                     /*!< TIM1 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM8_STOP_Pos             (1U)
#define DBGMCU_APB2FZ_DBG_TIM8_STOP_Msk             (0x1UL << DBGMCU_APB2FZ_DBG_TIM8_STOP_Pos)           /*!< 0x00000002 */
#define DBGMCU_APB2FZ_DBG_TIM8_STOP                 DBGMCU_APB2FZ_DBG_TIM8_STOP_Msk                     /*!< TIM8 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM15_STOP_Pos            (5U)
#define DBGMCU_APB2FZ_DBG_TIM15_STOP_Msk            (0x1UL << DBGMCU_APB2FZ_DBG_TIM15_STOP_Pos)          /*!< 0x00000020 */
#define DBGMCU_APB2FZ_DBG_TIM15_STOP                DBGMCU_APB2FZ_DBG_TIM15_STOP_Msk                    /*!< TIM15 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM16_STOP_Pos            (6U)
#define DBGMCU_APB2FZ_DBG_TIM16_STOP_Msk            (0x1UL << DBGMCU_APB2FZ_DBG_TIM16_STOP_Pos)          /*!< 0x00000040 */
#define DBGMCU_APB2FZ_DBG_TIM16_STOP                DBGMCU_APB2FZ_DBG_TIM16_STOP_Msk                    /*!< TIM16 suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM17_STOP_Pos            (7U)
#define DBGMCU_APB2FZ_DBG_TIM17_STOP_Msk            (0x1UL << DBGMCU_APB2FZ_DBG_TIM17_STOP_Pos)          /*!< 0x00000080 */
#define DBGMCU_APB2FZ_DBG_TIM17_STOP                DBGMCU_APB2FZ_DBG_TIM17_STOP_Msk                    /*!< TIM17 suspend in debug */
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP_Pos            (13U)
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP_Msk            (0x1UL << DBGMCU_APB2FZ_DBG_FDCAN_STOP_Pos)          /*!< 0x00002000 */
#define DBGMCU_APB2FZ_DBG_FDCAN_STOP                DBGMCU_APB2FZ_DBG_FDCAN_STOP_Msk                    /*!< FDCAN suspend in debug */
#define DBGMCU_APB2FZ_DBG_TIM20_STOP_Pos            (18U)
#define DBGMCU_APB2FZ_DBG_TIM20_STOP_Msk            (0x1UL << DBGMCU_APB2FZ_DBG_TIM20_STOP_Pos)          /*!< 0x00040000 */
#define DBGMCU_APB2FZ_DBG_TIM20_STOP                DBGMCU_APB2FZ_DBG_TIM20_STOP_Msk                    /*!< TIM20 suspend in debug */

/********************  Bit definition for APB3FZ register  ********************/
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP_Pos            (1U)
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP_Msk            (0x1UL << DBGMCU_APB3FZ_DBG_IWDG1_STOP_Pos)          /*!< 0x00000002 */
#define DBGMCU_APB3FZ_DBG_IWDG1_STOP                DBGMCU_APB3FZ_DBG_IWDG1_STOP_Msk                    /*!< IWDG1 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP_Pos            (2U)
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP_Msk            (0x1UL << DBGMCU_APB3FZ_DBG_IWDG2_STOP_Pos)          /*!< 0x00000004 */
#define DBGMCU_APB3FZ_DBG_IWDG2_STOP                DBGMCU_APB3FZ_DBG_IWDG2_STOP_Msk                    /*!< IWDG2 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP_Pos            (3U)
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP_Msk            (0x1UL << DBGMCU_APB3FZ_DBG_IWDG3_STOP_Pos)          /*!< 0x00000008 */
#define DBGMCU_APB3FZ_DBG_IWDG3_STOP                DBGMCU_APB3FZ_DBG_IWDG3_STOP_Msk                    /*!< IWDG3 suspend in debug */
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP_Pos            (4U)
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP_Msk            (0x1UL << DBGMCU_APB3FZ_DBG_IWDG4_STOP_Pos)          /*!< 0x00000010 */
#define DBGMCU_APB3FZ_DBG_IWDG4_STOP                DBGMCU_APB3FZ_DBG_IWDG4_STOP_Msk                    /*!< IWDG4 suspend in debug */
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP_Pos            (5U)
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP_Msk            (0x1UL << DBGMCU_APB3FZ_DBG_WWDG1_STOP_Pos)          /*!< 0x00000020 */
#define DBGMCU_APB3FZ_DBG_WWDG1_STOP                DBGMCU_APB3FZ_DBG_WWDG1_STOP_Msk                    /*!< WWDG1 suspend in debug */

/********************  Bit definition for APBSRFZ register  *******************/
#define DBGMCU_APBSRFZ_DBG_RTC_STOP_Pos             (0U)
#define DBGMCU_APBSRFZ_DBG_RTC_STOP_Msk             (0x1UL << DBGMCU_APBSRFZ_DBG_RTC_STOP_Pos)           /*!< 0x00000001 */
#define DBGMCU_APBSRFZ_DBG_RTC_STOP                 DBGMCU_APBSRFZ_DBG_RTC_STOP_Msk                     /*!< RTC suspend in debug */
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP_Pos            (4U)
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP_Msk            (0x1UL << DBGMCU_APBSRFZ_DBG_I2C8_STOP_Pos)          /*!< 0x00000010 */
#define DBGMCU_APBSRFZ_DBG_I2C8_STOP                DBGMCU_APBSRFZ_DBG_I2C8_STOP_Msk                    /*!< I2C8 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Pos          (5U)
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Msk          (0x1UL << DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Pos)        /*!< 0x00000020 */
#define DBGMCU_APBSRFZ_DBG_LPTIM3_STOP              DBGMCU_APBSRFZ_DBG_LPTIM3_STOP_Msk                  /*!< LPTIM3 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Pos          (6U)
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Msk          (0x1UL << DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Pos)        /*!< 0x00000040 */
#define DBGMCU_APBSRFZ_DBG_LPTIM4_STOP              DBGMCU_APBSRFZ_DBG_LPTIM4_STOP_Msk                  /*!< LPTIM4 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Pos          (7U)
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Msk          (0x1UL << DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Pos)        /*!< 0x00000080 */
#define DBGMCU_APBSRFZ_DBG_LPTIM5_STOP              DBGMCU_APBSRFZ_DBG_LPTIM5_STOP_Msk                  /*!< LPTIM5 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Pos           (9U)
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Msk           (0x1UL << DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Pos)         /*!< 0x00000200 */
#define DBGMCU_APBSRFZ_DBG_IWDG5_STOP               DBGMCU_APBSRFZ_DBG_IWDG5_STOP_Msk                   /*!< IWDG5 suspend in debug */
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Pos           (10U)
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Msk           (0x1UL << DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Pos)         /*!< 0x00000400 */
#define DBGMCU_APBSRFZ_DBG_WWDG2_STOP               DBGMCU_APBSRFZ_DBG_WWDG2_STOP_Msk                   /*!< WWDG2 suspend in debug */

/******************************************************************************/
/*                                                                            */
/*                                    DCMI                                    */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for DCMI_CR register  ******************/
#define DCMI_CR_CAPTURE_Pos        (0U)
#define DCMI_CR_CAPTURE_Msk        (0x1UL << DCMI_CR_CAPTURE_Pos)              /*!< 0x00000001 */
#define DCMI_CR_CAPTURE            DCMI_CR_CAPTURE_Msk
#define DCMI_CR_CM_Pos             (1U)
#define DCMI_CR_CM_Msk             (0x1UL << DCMI_CR_CM_Pos)                   /*!< 0x00000002 */
#define DCMI_CR_CM                 DCMI_CR_CM_Msk
#define DCMI_CR_CROP_Pos           (2U)
#define DCMI_CR_CROP_Msk           (0x1UL << DCMI_CR_CROP_Pos)                 /*!< 0x00000004 */
#define DCMI_CR_CROP               DCMI_CR_CROP_Msk
#define DCMI_CR_JPEG_Pos           (3U)
#define DCMI_CR_JPEG_Msk           (0x1UL << DCMI_CR_JPEG_Pos)                 /*!< 0x00000008 */
#define DCMI_CR_JPEG               DCMI_CR_JPEG_Msk
#define DCMI_CR_ESS_Pos            (4U)
#define DCMI_CR_ESS_Msk            (0x1UL << DCMI_CR_ESS_Pos)                  /*!< 0x00000010 */
#define DCMI_CR_ESS                DCMI_CR_ESS_Msk
#define DCMI_CR_PCKPOL_Pos         (5U)
#define DCMI_CR_PCKPOL_Msk         (0x1UL << DCMI_CR_PCKPOL_Pos)               /*!< 0x00000020 */
#define DCMI_CR_PCKPOL             DCMI_CR_PCKPOL_Msk
#define DCMI_CR_HSPOL_Pos          (6U)
#define DCMI_CR_HSPOL_Msk          (0x1UL << DCMI_CR_HSPOL_Pos)                /*!< 0x00000040 */
#define DCMI_CR_HSPOL              DCMI_CR_HSPOL_Msk
#define DCMI_CR_VSPOL_Pos          (7U)
#define DCMI_CR_VSPOL_Msk          (0x1UL << DCMI_CR_VSPOL_Pos)                /*!< 0x00000080 */
#define DCMI_CR_VSPOL              DCMI_CR_VSPOL_Msk
#define DCMI_CR_FCRC_0             ((uint32_t)0x00000100U)
#define DCMI_CR_FCRC_1             ((uint32_t)0x00000200U)
#define DCMI_CR_EDM_0              ((uint32_t)0x00000400U)
#define DCMI_CR_EDM_1              ((uint32_t)0x00000800U)
#define DCMI_CR_CRE_Pos            (12U)
#define DCMI_CR_CRE_Msk            (0x1UL << DCMI_CR_CRE_Pos)                  /*!< 0x00001000 */
#define DCMI_CR_CRE                DCMI_CR_CRE_Msk
#define DCMI_CR_ENABLE_Pos         (14U)
#define DCMI_CR_ENABLE_Msk         (0x1UL << DCMI_CR_ENABLE_Pos)               /*!< 0x00004000 */
#define DCMI_CR_ENABLE             DCMI_CR_ENABLE_Msk
#define DCMI_CR_BSM_Pos            (16U)
#define DCMI_CR_BSM_Msk            (0x3UL << DCMI_CR_BSM_Pos)                  /*!< 0x00030000 */
#define DCMI_CR_BSM                DCMI_CR_BSM_Msk
#define DCMI_CR_BSM_0              (0x1UL << DCMI_CR_BSM_Pos)                   /*!< 0x00010000 */
#define DCMI_CR_BSM_1              (0x2UL << DCMI_CR_BSM_Pos)                   /*!< 0x00020000 */
#define DCMI_CR_OEBS_Pos           (18U)
#define DCMI_CR_OEBS_Msk           (0x1UL << DCMI_CR_OEBS_Pos)                 /*!< 0x00040000 */
#define DCMI_CR_OEBS               DCMI_CR_OEBS_Msk
#define DCMI_CR_LSM_Pos            (19U)
#define DCMI_CR_LSM_Msk            (0x1UL << DCMI_CR_LSM_Pos)                  /*!< 0x00080000 */
#define DCMI_CR_LSM                DCMI_CR_LSM_Msk
#define DCMI_CR_OELS_Pos           (20U)
#define DCMI_CR_OELS_Msk           (0x1UL << DCMI_CR_OELS_Pos)                 /*!< 0x00100000 */
#define DCMI_CR_OELS               DCMI_CR_OELS_Msk

/********************  Bits definition for DCMI_SR register  ******************/
#define DCMI_SR_HSYNC_Pos          (0U)
#define DCMI_SR_HSYNC_Msk          (0x1UL << DCMI_SR_HSYNC_Pos)                /*!< 0x00000001 */
#define DCMI_SR_HSYNC              DCMI_SR_HSYNC_Msk
#define DCMI_SR_VSYNC_Pos          (1U)
#define DCMI_SR_VSYNC_Msk          (0x1UL << DCMI_SR_VSYNC_Pos)                /*!< 0x00000002 */
#define DCMI_SR_VSYNC              DCMI_SR_VSYNC_Msk
#define DCMI_SR_FNE_Pos            (2U)
#define DCMI_SR_FNE_Msk            (0x1UL << DCMI_SR_FNE_Pos)                  /*!< 0x00000004 */
#define DCMI_SR_FNE                DCMI_SR_FNE_Msk

/********************  Bits definition for DCMI_RIS register   ****************/
#define DCMI_RIS_FRAME_RIS_Pos     (0U)
#define DCMI_RIS_FRAME_RIS_Msk     (0x1UL << DCMI_RIS_FRAME_RIS_Pos)           /*!< 0x00000001 */
#define DCMI_RIS_FRAME_RIS         DCMI_RIS_FRAME_RIS_Msk
#define DCMI_RIS_OVR_RIS_Pos       (1U)
#define DCMI_RIS_OVR_RIS_Msk       (0x1UL << DCMI_RIS_OVR_RIS_Pos)             /*!< 0x00000002 */
#define DCMI_RIS_OVR_RIS           DCMI_RIS_OVR_RIS_Msk
#define DCMI_RIS_ERR_RIS_Pos       (2U)
#define DCMI_RIS_ERR_RIS_Msk       (0x1UL << DCMI_RIS_ERR_RIS_Pos)             /*!< 0x00000004 */
#define DCMI_RIS_ERR_RIS           DCMI_RIS_ERR_RIS_Msk
#define DCMI_RIS_VSYNC_RIS_Pos     (3U)
#define DCMI_RIS_VSYNC_RIS_Msk     (0x1UL << DCMI_RIS_VSYNC_RIS_Pos)           /*!< 0x00000008 */
#define DCMI_RIS_VSYNC_RIS         DCMI_RIS_VSYNC_RIS_Msk
#define DCMI_RIS_LINE_RIS_Pos      (4U)
#define DCMI_RIS_LINE_RIS_Msk      (0x1UL << DCMI_RIS_LINE_RIS_Pos)            /*!< 0x00000010 */
#define DCMI_RIS_LINE_RIS          DCMI_RIS_LINE_RIS_Msk

/********************  Bits definition for DCMI_IER register  *****************/
#define DCMI_IER_FRAME_IE_Pos      (0U)
#define DCMI_IER_FRAME_IE_Msk      (0x1UL << DCMI_IER_FRAME_IE_Pos)            /*!< 0x00000001 */
#define DCMI_IER_FRAME_IE          DCMI_IER_FRAME_IE_Msk
#define DCMI_IER_OVR_IE_Pos        (1U)
#define DCMI_IER_OVR_IE_Msk        (0x1UL << DCMI_IER_OVR_IE_Pos)              /*!< 0x00000002 */
#define DCMI_IER_OVR_IE            DCMI_IER_OVR_IE_Msk
#define DCMI_IER_ERR_IE_Pos        (2U)
#define DCMI_IER_ERR_IE_Msk        (0x1UL << DCMI_IER_ERR_IE_Pos)              /*!< 0x00000004 */
#define DCMI_IER_ERR_IE            DCMI_IER_ERR_IE_Msk
#define DCMI_IER_VSYNC_IE_Pos      (3U)
#define DCMI_IER_VSYNC_IE_Msk      (0x1UL << DCMI_IER_VSYNC_IE_Pos)            /*!< 0x00000008 */
#define DCMI_IER_VSYNC_IE          DCMI_IER_VSYNC_IE_Msk
#define DCMI_IER_LINE_IE_Pos       (4U)
#define DCMI_IER_LINE_IE_Msk       (0x1UL << DCMI_IER_LINE_IE_Pos)             /*!< 0x00000010 */
#define DCMI_IER_LINE_IE           DCMI_IER_LINE_IE_Msk

/********************  Bits definition for DCMI_MIS register  *****************/
#define DCMI_MIS_FRAME_MIS_Pos     (0U)
#define DCMI_MIS_FRAME_MIS_Msk     (0x1UL << DCMI_MIS_FRAME_MIS_Pos)           /*!< 0x00000001 */
#define DCMI_MIS_FRAME_MIS         DCMI_MIS_FRAME_MIS_Msk
#define DCMI_MIS_OVR_MIS_Pos       (1U)
#define DCMI_MIS_OVR_MIS_Msk       (0x1UL << DCMI_MIS_OVR_MIS_Pos)             /*!< 0x00000002 */
#define DCMI_MIS_OVR_MIS           DCMI_MIS_OVR_MIS_Msk
#define DCMI_MIS_ERR_MIS_Pos       (2U)
#define DCMI_MIS_ERR_MIS_Msk       (0x1UL << DCMI_MIS_ERR_MIS_Pos)             /*!< 0x00000004 */
#define DCMI_MIS_ERR_MIS           DCMI_MIS_ERR_MIS_Msk
#define DCMI_MIS_VSYNC_MIS_Pos     (3U)
#define DCMI_MIS_VSYNC_MIS_Msk     (0x1UL << DCMI_MIS_VSYNC_MIS_Pos)           /*!< 0x00000008 */
#define DCMI_MIS_VSYNC_MIS         DCMI_MIS_VSYNC_MIS_Msk
#define DCMI_MIS_LINE_MIS_Pos      (4U)
#define DCMI_MIS_LINE_MIS_Msk      (0x1UL << DCMI_MIS_LINE_MIS_Pos)            /*!< 0x00000010 */
#define DCMI_MIS_LINE_MIS          DCMI_MIS_LINE_MIS_Msk

/********************  Bits definition for DCMI_ICR register  *****************/
#define DCMI_ICR_FRAME_ISC_Pos     (0U)
#define DCMI_ICR_FRAME_ISC_Msk     (0x1UL << DCMI_ICR_FRAME_ISC_Pos)           /*!< 0x00000001 */
#define DCMI_ICR_FRAME_ISC         DCMI_ICR_FRAME_ISC_Msk
#define DCMI_ICR_OVR_ISC_Pos       (1U)
#define DCMI_ICR_OVR_ISC_Msk       (0x1UL << DCMI_ICR_OVR_ISC_Pos)             /*!< 0x00000002 */
#define DCMI_ICR_OVR_ISC           DCMI_ICR_OVR_ISC_Msk
#define DCMI_ICR_ERR_ISC_Pos       (2U)
#define DCMI_ICR_ERR_ISC_Msk       (0x1UL << DCMI_ICR_ERR_ISC_Pos)             /*!< 0x00000004 */
#define DCMI_ICR_ERR_ISC           DCMI_ICR_ERR_ISC_Msk
#define DCMI_ICR_VSYNC_ISC_Pos     (3U)
#define DCMI_ICR_VSYNC_ISC_Msk     (0x1UL << DCMI_ICR_VSYNC_ISC_Pos)           /*!< 0x00000008 */
#define DCMI_ICR_VSYNC_ISC         DCMI_ICR_VSYNC_ISC_Msk
#define DCMI_ICR_LINE_ISC_Pos      (4U)
#define DCMI_ICR_LINE_ISC_Msk      (0x1UL << DCMI_ICR_LINE_ISC_Pos)            /*!< 0x00000010 */
#define DCMI_ICR_LINE_ISC          DCMI_ICR_LINE_ISC_Msk

/********************  Bits definition for DCMI_ESCR register  ******************/
#define DCMI_ESCR_FSC_Pos          (0U)
#define DCMI_ESCR_FSC_Msk          (0xFFUL << DCMI_ESCR_FSC_Pos)               /*!< 0x000000FF */
#define DCMI_ESCR_FSC              DCMI_ESCR_FSC_Msk
#define DCMI_ESCR_LSC_Pos          (8U)
#define DCMI_ESCR_LSC_Msk          (0xFFUL << DCMI_ESCR_LSC_Pos)               /*!< 0x0000FF00 */
#define DCMI_ESCR_LSC              DCMI_ESCR_LSC_Msk
#define DCMI_ESCR_LEC_Pos          (16U)
#define DCMI_ESCR_LEC_Msk          (0xFFUL << DCMI_ESCR_LEC_Pos)               /*!< 0x00FF0000 */
#define DCMI_ESCR_LEC              DCMI_ESCR_LEC_Msk
#define DCMI_ESCR_FEC_Pos          (24U)
#define DCMI_ESCR_FEC_Msk          (0xFFUL << DCMI_ESCR_FEC_Pos)               /*!< 0xFF000000 */
#define DCMI_ESCR_FEC              DCMI_ESCR_FEC_Msk

/********************  Bits definition for DCMI_ESUR register  ******************/
#define DCMI_ESUR_FSU_Pos          (0U)
#define DCMI_ESUR_FSU_Msk          (0xFFUL << DCMI_ESUR_FSU_Pos)               /*!< 0x000000FF */
#define DCMI_ESUR_FSU              DCMI_ESUR_FSU_Msk
#define DCMI_ESUR_LSU_Pos          (8U)
#define DCMI_ESUR_LSU_Msk          (0xFFUL << DCMI_ESUR_LSU_Pos)               /*!< 0x0000FF00 */
#define DCMI_ESUR_LSU              DCMI_ESUR_LSU_Msk
#define DCMI_ESUR_LEU_Pos          (16U)
#define DCMI_ESUR_LEU_Msk          (0xFFUL << DCMI_ESUR_LEU_Pos)               /*!< 0x00FF0000 */
#define DCMI_ESUR_LEU              DCMI_ESUR_LEU_Msk
#define DCMI_ESUR_FEU_Pos          (24U)
#define DCMI_ESUR_FEU_Msk          (0xFFUL << DCMI_ESUR_FEU_Pos)               /*!< 0xFF000000 */
#define DCMI_ESUR_FEU              DCMI_ESUR_FEU_Msk

/********************  Bits definition for DCMI_CWSTRT register  ******************/
#define DCMI_CWSTRT_HOFFCNT_Pos    (0U)
#define DCMI_CWSTRT_HOFFCNT_Msk    (0x3FFFUL << DCMI_CWSTRT_HOFFCNT_Pos)       /*!< 0x00003FFF */
#define DCMI_CWSTRT_HOFFCNT        DCMI_CWSTRT_HOFFCNT_Msk
#define DCMI_CWSTRT_VST_Pos        (16U)
#define DCMI_CWSTRT_VST_Msk        (0x1FFFUL << DCMI_CWSTRT_VST_Pos)           /*!< 0x1FFF0000 */
#define DCMI_CWSTRT_VST            DCMI_CWSTRT_VST_Msk

/********************  Bits definition for DCMI_CWSIZE register  ******************/
#define DCMI_CWSIZE_CAPCNT_Pos     (0U)
#define DCMI_CWSIZE_CAPCNT_Msk     (0x3FFFUL << DCMI_CWSIZE_CAPCNT_Pos)        /*!< 0x00003FFF */
#define DCMI_CWSIZE_CAPCNT         DCMI_CWSIZE_CAPCNT_Msk
#define DCMI_CWSIZE_VLINE_Pos      (16U)
#define DCMI_CWSIZE_VLINE_Msk      (0x3FFFUL << DCMI_CWSIZE_VLINE_Pos)         /*!< 0x3FFF0000 */
#define DCMI_CWSIZE_VLINE          DCMI_CWSIZE_VLINE_Msk

/********************  Bits definition for DCMI_DR register  ******************/
#define DCMI_DR_BYTE0_Pos          (0U)
#define DCMI_DR_BYTE0_Msk          (0xFFUL << DCMI_DR_BYTE0_Pos)               /*!< 0x000000FF */
#define DCMI_DR_BYTE0              DCMI_DR_BYTE0_Msk
#define DCMI_DR_BYTE1_Pos          (8U)
#define DCMI_DR_BYTE1_Msk          (0xFFUL << DCMI_DR_BYTE1_Pos)               /*!< 0x0000FF00 */
#define DCMI_DR_BYTE1              DCMI_DR_BYTE1_Msk
#define DCMI_DR_BYTE2_Pos          (16U)
#define DCMI_DR_BYTE2_Msk          (0xFFUL << DCMI_DR_BYTE2_Pos)               /*!< 0x00FF0000 */
#define DCMI_DR_BYTE2              DCMI_DR_BYTE2_Msk
#define DCMI_DR_BYTE3_Pos          (24U)
#define DCMI_DR_BYTE3_Msk          (0xFFUL << DCMI_DR_BYTE3_Pos)               /*!< 0xFF000000 */
#define DCMI_DR_BYTE3              DCMI_DR_BYTE3_Msk

/******************************************************************************/
/*                                                                            */
/*                                  (DCMIPP)                                  */
/*                                                                            */
/******************************************************************************/
#define DCMIPP_NUM_OF_PIPES               (0x3U)


#define DCMIPP_P1HISTOGRAM_SUPPORT
/******************  Bit definition for DCMIPP_IPGR1 register  *****************/
#define DCMIPP_IPGR1_MEMORYPAGE_Pos         (0U)
#define DCMIPP_IPGR1_MEMORYPAGE_Msk         (0x7UL << DCMIPP_IPGR1_MEMORYPAGE_Pos)           /*!< 0x00000007 */
#define DCMIPP_IPGR1_MEMORYPAGE             DCMIPP_IPGR1_MEMORYPAGE_Msk                     /*!< Memory page size, as power of 2 of 64-byte units: */
#define DCMIPP_IPGR1_QOS_MODE_Pos           (24U)
#define DCMIPP_IPGR1_QOS_MODE_Msk           (0x1UL << DCMIPP_IPGR1_QOS_MODE_Pos)             /*!< 0x01000000 */
#define DCMIPP_IPGR1_QOS_MODE               DCMIPP_IPGR1_QOS_MODE_Msk                       /*!< Quality of service */

/*****************  Bit definition for DCMIPP_IPGR2 register  *****************/
#define DCMIPP_IPGR2_PSTART_Pos             (0U)
#define DCMIPP_IPGR2_PSTART_Msk             (0x1UL << DCMIPP_IPGR2_PSTART_Pos)               /*!< 0x00000001 */
#define DCMIPP_IPGR2_PSTART                 DCMIPP_IPGR2_PSTART_Msk                         /*!< Request to lock the IP-Plug, to allow reconfiguration */

/*****************  Bit definition for DCMIPP_IPGR3 register  *****************/
#define DCMIPP_IPGR3_IDLE_Pos               (0U)
#define DCMIPP_IPGR3_IDLE_Msk               (0x1UL << DCMIPP_IPGR3_IDLE_Pos)                 /*!< 0x00000001 */
#define DCMIPP_IPGR3_IDLE                   DCMIPP_IPGR3_IDLE_Msk                           /*!< Status of IP-Plug */

/*****************  Bit definition for DCMIPP_IPGR8 register  *****************/
#define DCMIPP_IPGR8_DID_Pos                (0U)
#define DCMIPP_IPGR8_DID_Msk                (0x3FUL << DCMIPP_IPGR8_DID_Pos)                 /*!< 0x0000003F */
#define DCMIPP_IPGR8_DID                    DCMIPP_IPGR8_DID_Msk                            /*!< Division identifier (0x14) */
#define DCMIPP_IPGR8_REVID_Pos              (8U)
#define DCMIPP_IPGR8_REVID_Msk              (0x1FUL << DCMIPP_IPGR8_REVID_Pos)               /*!< 0x00001F00 */
#define DCMIPP_IPGR8_REVID                  DCMIPP_IPGR8_REVID_Msk                          /*!< Revision identifier (0x03) */
#define DCMIPP_IPGR8_ARCHIID_Pos            (16U)
#define DCMIPP_IPGR8_ARCHIID_Msk            (0x1FUL << DCMIPP_IPGR8_ARCHIID_Pos)             /*!< 0x001F0000 */
#define DCMIPP_IPGR8_ARCHIID                DCMIPP_IPGR8_ARCHIID_Msk                        /*!< Architecture identifier (0x04) */
#define DCMIPP_IPGR8_IPPID_Pos              (24U)
#define DCMIPP_IPGR8_IPPID_Msk              (0xFFUL << DCMIPP_IPGR8_IPPID_Pos)               /*!< 0xFF000000 */
#define DCMIPP_IPGR8_IPPID                  DCMIPP_IPGR8_IPPID_Msk                          /*!< IP identifier (0xAA) */

/****************  Bit definition for DCMIPP_IPC1R1 register  *****************/
#define DCMIPP_IPC1R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC1R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC1R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC1R1_TRAFFIC               DCMIPP_IPC1R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC1R1_OTR_Pos               (8U)
#define DCMIPP_IPC1R1_OTR_Msk               (0xFUL << DCMIPP_IPC1R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC1R1_OTR                   DCMIPP_IPC1R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC1R2 register  *****************/
#define DCMIPP_IPC1R2_WLRU_Pos              (16U)
#define DCMIPP_IPC1R2_WLRU_Msk              (0xFUL << DCMIPP_IPC1R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC1R2_WLRU                  DCMIPP_IPC1R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC1R3 register  *****************/
#define DCMIPP_IPC1R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC1R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC1R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC1R3_DPREGSTART            DCMIPP_IPC1R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC1R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC1R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC1R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC1R3_DPREGEND              DCMIPP_IPC1R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/****************  Bit definition for DCMIPP_IPC2R1 register  *****************/
#define DCMIPP_IPC2R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC2R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC2R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC2R1_TRAFFIC               DCMIPP_IPC2R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC2R1_OTR_Pos               (8U)
#define DCMIPP_IPC2R1_OTR_Msk               (0xFUL << DCMIPP_IPC2R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC2R1_OTR                   DCMIPP_IPC2R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC2R2 register  *****************/
#define DCMIPP_IPC2R2_WLRU_Pos              (16U)
#define DCMIPP_IPC2R2_WLRU_Msk              (0xFUL << DCMIPP_IPC2R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC2R2_WLRU                  DCMIPP_IPC2R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC2R3 register  *****************/
#define DCMIPP_IPC2R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC2R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC2R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC2R3_DPREGSTART            DCMIPP_IPC2R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC2R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC2R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC2R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC2R3_DPREGEND              DCMIPP_IPC2R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/****************  Bit definition for DCMIPP_IPC3R1 register  *****************/
#define DCMIPP_IPC3R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC3R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC3R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC3R1_TRAFFIC               DCMIPP_IPC3R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC3R1_OTR_Pos               (8U)
#define DCMIPP_IPC3R1_OTR_Msk               (0xFUL << DCMIPP_IPC3R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC3R1_OTR                   DCMIPP_IPC3R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC3R2 register  *****************/
#define DCMIPP_IPC3R2_WLRU_Pos              (16U)
#define DCMIPP_IPC3R2_WLRU_Msk              (0xFUL << DCMIPP_IPC3R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC3R2_WLRU                  DCMIPP_IPC3R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC3R3 register  *****************/
#define DCMIPP_IPC3R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC3R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC3R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC3R3_DPREGSTART            DCMIPP_IPC3R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC3R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC3R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC3R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC3R3_DPREGEND              DCMIPP_IPC3R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/****************  Bit definition for DCMIPP_IPC4R1 register  *****************/
#define DCMIPP_IPC4R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC4R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC4R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC4R1_TRAFFIC               DCMIPP_IPC4R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC4R1_OTR_Pos               (8U)
#define DCMIPP_IPC4R1_OTR_Msk               (0xFUL << DCMIPP_IPC4R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC4R1_OTR                   DCMIPP_IPC4R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC4R2 register  *****************/
#define DCMIPP_IPC4R2_WLRU_Pos              (16U)
#define DCMIPP_IPC4R2_WLRU_Msk              (0xFUL << DCMIPP_IPC4R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC4R2_WLRU                  DCMIPP_IPC4R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC4R3 register  *****************/
#define DCMIPP_IPC4R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC4R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC4R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC4R3_DPREGSTART            DCMIPP_IPC4R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC4R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC4R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC4R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC4R3_DPREGEND              DCMIPP_IPC4R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/****************  Bit definition for DCMIPP_IPC5R1 register  *****************/
#define DCMIPP_IPC5R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC5R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC5R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC5R1_TRAFFIC               DCMIPP_IPC5R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC5R1_OTR_Pos               (8U)
#define DCMIPP_IPC5R1_OTR_Msk               (0xFUL << DCMIPP_IPC5R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC5R1_OTR                   DCMIPP_IPC5R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC5R2 register  *****************/
#define DCMIPP_IPC5R2_WLRU_Pos              (16U)
#define DCMIPP_IPC5R2_WLRU_Msk              (0xFUL << DCMIPP_IPC5R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC5R2_WLRU                  DCMIPP_IPC5R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC5R3 register  *****************/
#define DCMIPP_IPC5R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC5R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC5R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC5R3_DPREGSTART            DCMIPP_IPC5R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC5R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC5R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC5R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC5R3_DPREGEND              DCMIPP_IPC5R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/****************  Bit definition for DCMIPP_IPC6R1 register  *****************/
#define DCMIPP_IPC6R1_TRAFFIC_Pos           (0U)
#define DCMIPP_IPC6R1_TRAFFIC_Msk           (0x7UL << DCMIPP_IPC6R1_TRAFFIC_Pos)             /*!< 0x00000007 */
#define DCMIPP_IPC6R1_TRAFFIC               DCMIPP_IPC6R1_TRAFFIC_Msk                       /*!< Burst size as power of 2 of 8-byte units */
#define DCMIPP_IPC6R1_OTR_Pos               (8U)
#define DCMIPP_IPC6R1_OTR_Msk               (0xFUL << DCMIPP_IPC6R1_OTR_Pos)                 /*!< 0x00000F00 */
#define DCMIPP_IPC6R1_OTR                   DCMIPP_IPC6R1_OTR_Msk                           /*!< Maximum outstanding transactions */

/****************  Bit definition for DCMIPP_IPC6R2 register  *****************/
#define DCMIPP_IPC6R2_WLRU_Pos              (16U)
#define DCMIPP_IPC6R2_WLRU_Msk              (0xFUL << DCMIPP_IPC6R2_WLRU_Pos)                /*!< 0x000F0000 */
#define DCMIPP_IPC6R2_WLRU                  DCMIPP_IPC6R2_WLRU_Msk                          /*!< Ratio for WLRU[3:0] arbitration */

/****************  Bit definition for DCMIPP_IPC6R3 register  *****************/
#define DCMIPP_IPC6R3_DPREGSTART_Pos        (0U)
#define DCMIPP_IPC6R3_DPREGSTART_Msk        (0x7FFUL << DCMIPP_IPC6R3_DPREGSTART_Pos)        /*!< 0x000007FF */
#define DCMIPP_IPC6R3_DPREGSTART            DCMIPP_IPC6R3_DPREGSTART_Msk                    /*!< Start word (AXI width = 64 bits) of the FIFO of Clientx */
#define DCMIPP_IPC6R3_DPREGEND_Pos          (16U)
#define DCMIPP_IPC6R3_DPREGEND_Msk          (0x7FFUL << DCMIPP_IPC6R3_DPREGEND_Pos)          /*!< 0x07FF0000 */
#define DCMIPP_IPC6R3_DPREGEND              DCMIPP_IPC6R3_DPREGEND_Msk                      /*!< End word (AXI width = 64 bits) of the FIFO of Clientx */

/*****************  Bit definition for DCMIPP_PRCR register  ******************/
#define DCMIPP_PRCR_ESS_Pos                 (4U)
#define DCMIPP_PRCR_ESS_Msk                 (0x1UL << DCMIPP_PRCR_ESS_Pos)                   /*!< 0x00000010 */
#define DCMIPP_PRCR_ESS                     DCMIPP_PRCR_ESS_Msk                             /*!< Embedded synchronization select */
#define DCMIPP_PRCR_PCKPOL_Pos              (5U)
#define DCMIPP_PRCR_PCKPOL_Msk              (0x1UL << DCMIPP_PRCR_PCKPOL_Pos)                /*!< 0x00000020 */
#define DCMIPP_PRCR_PCKPOL                  DCMIPP_PRCR_PCKPOL_Msk                          /*!< Pixel clock polarity */
#define DCMIPP_PRCR_HSPOL_Pos               (6U)
#define DCMIPP_PRCR_HSPOL_Msk               (0x1UL << DCMIPP_PRCR_HSPOL_Pos)                 /*!< 0x00000040 */
#define DCMIPP_PRCR_HSPOL                   DCMIPP_PRCR_HSPOL_Msk                           /*!< Horizontal synchronization polarity */
#define DCMIPP_PRCR_VSPOL_Pos               (7U)
#define DCMIPP_PRCR_VSPOL_Msk               (0x1UL << DCMIPP_PRCR_VSPOL_Pos)                 /*!< 0x00000080 */
#define DCMIPP_PRCR_VSPOL                   DCMIPP_PRCR_VSPOL_Msk                           /*!< Vertical synchronization polarity */
#define DCMIPP_PRCR_EDM_Pos                 (10U)
#define DCMIPP_PRCR_EDM_Msk                 (0x7UL << DCMIPP_PRCR_EDM_Pos)                   /*!< 0x00001C00 */
#define DCMIPP_PRCR_EDM                     DCMIPP_PRCR_EDM_Msk                             /*!< Extended data mode */
#define DCMIPP_PRCR_ENABLE_Pos              (14U)
#define DCMIPP_PRCR_ENABLE_Msk              (0x1UL << DCMIPP_PRCR_ENABLE_Pos)                /*!< 0x00004000 */
#define DCMIPP_PRCR_ENABLE                  DCMIPP_PRCR_ENABLE_Msk                          /*!< Parallel interface enable */
#define DCMIPP_PRCR_FORMAT_Pos              (16U)
#define DCMIPP_PRCR_FORMAT_Msk              (0xFFUL << DCMIPP_PRCR_FORMAT_Pos)               /*!< 0x00FF0000 */
#define DCMIPP_PRCR_FORMAT                  DCMIPP_PRCR_FORMAT_Msk                          /*!< Other values: data are captured and output as-is only through the data/dump pipeline (for&#160;exam */
#define DCMIPP_PRCR_SWAPCYCLES_Pos          (25U)
#define DCMIPP_PRCR_SWAPCYCLES_Msk          (0x1UL << DCMIPP_PRCR_SWAPCYCLES_Pos)            /*!< 0x02000000 */
#define DCMIPP_PRCR_SWAPCYCLES              DCMIPP_PRCR_SWAPCYCLES_Msk                      /*!< Swap data (cycle 0 vs */
#define DCMIPP_PRCR_SWAPBITS_Pos            (26U)
#define DCMIPP_PRCR_SWAPBITS_Msk            (0x1UL << DCMIPP_PRCR_SWAPBITS_Pos)              /*!< 0x04000000 */
#define DCMIPP_PRCR_SWAPBITS                DCMIPP_PRCR_SWAPBITS_Msk                        /*!< Swap LSB vs */

/****************  Bit definition for DCMIPP_PRESCR register  *****************/
#define DCMIPP_PRESCR_FSC_Pos               (0U)
#define DCMIPP_PRESCR_FSC_Msk               (0xFFUL << DCMIPP_PRESCR_FSC_Pos)                /*!< 0x000000FF */
#define DCMIPP_PRESCR_FSC                   DCMIPP_PRESCR_FSC_Msk                           /*!< Frame start delimiter code */
#define DCMIPP_PRESCR_LSC_Pos               (8U)
#define DCMIPP_PRESCR_LSC_Msk               (0xFFUL << DCMIPP_PRESCR_LSC_Pos)                /*!< 0x0000FF00 */
#define DCMIPP_PRESCR_LSC                   DCMIPP_PRESCR_LSC_Msk                           /*!< Line start delimiter code */
#define DCMIPP_PRESCR_LEC_Pos               (16U)
#define DCMIPP_PRESCR_LEC_Msk               (0xFFUL << DCMIPP_PRESCR_LEC_Pos)                /*!< 0x00FF0000 */
#define DCMIPP_PRESCR_LEC                   DCMIPP_PRESCR_LEC_Msk                           /*!< Line end delimiter code */
#define DCMIPP_PRESCR_FEC_Pos               (24U)
#define DCMIPP_PRESCR_FEC_Msk               (0xFFUL << DCMIPP_PRESCR_FEC_Pos)                /*!< 0xFF000000 */
#define DCMIPP_PRESCR_FEC                   DCMIPP_PRESCR_FEC_Msk                           /*!< Frame end delimiter code */

/****************  Bit definition for DCMIPP_PRESUR register  *****************/
#define DCMIPP_PRESUR_FSU_Pos               (0U)
#define DCMIPP_PRESUR_FSU_Msk               (0xFFUL << DCMIPP_PRESUR_FSU_Pos)                /*!< 0x000000FF */
#define DCMIPP_PRESUR_FSU                   DCMIPP_PRESUR_FSU_Msk                           /*!< Frame start delimiter unmask */
#define DCMIPP_PRESUR_LSU_Pos               (8U)
#define DCMIPP_PRESUR_LSU_Msk               (0xFFUL << DCMIPP_PRESUR_LSU_Pos)                /*!< 0x0000FF00 */
#define DCMIPP_PRESUR_LSU                   DCMIPP_PRESUR_LSU_Msk                           /*!< Line start delimiter unmask */
#define DCMIPP_PRESUR_LEU_Pos               (16U)
#define DCMIPP_PRESUR_LEU_Msk               (0xFFUL << DCMIPP_PRESUR_LEU_Pos)                /*!< 0x00FF0000 */
#define DCMIPP_PRESUR_LEU                   DCMIPP_PRESUR_LEU_Msk                           /*!< Line end delimiter unmask */
#define DCMIPP_PRESUR_FEU_Pos               (24U)
#define DCMIPP_PRESUR_FEU_Msk               (0xFFUL << DCMIPP_PRESUR_FEU_Pos)                /*!< 0xFF000000 */
#define DCMIPP_PRESUR_FEU                   DCMIPP_PRESUR_FEU_Msk                           /*!< Frame end delimiter unmask */

/*****************  Bit definition for DCMIPP_PRIER register  *****************/
#define DCMIPP_PRIER_ERRIE_Pos              (6U)
#define DCMIPP_PRIER_ERRIE_Msk              (0x1UL << DCMIPP_PRIER_ERRIE_Pos)                /*!< 0x00000040 */
#define DCMIPP_PRIER_ERRIE                  DCMIPP_PRIER_ERRIE_Msk                          /*!< Synchronization error interrupt enable */

/*****************  Bit definition for DCMIPP_PRSR register  ******************/
#define DCMIPP_PRSR_ERRF_Pos                (6U)
#define DCMIPP_PRSR_ERRF_Msk                (0x1UL << DCMIPP_PRSR_ERRF_Pos)                  /*!< 0x00000040 */
#define DCMIPP_PRSR_ERRF                    DCMIPP_PRSR_ERRF_Msk                            /*!< Synchronization error raw interrupt status */
#define DCMIPP_PRSR_HSYNC_Pos               (16U)
#define DCMIPP_PRSR_HSYNC_Msk               (0x1UL << DCMIPP_PRSR_HSYNC_Pos)                 /*!< 0x00010000 */
#define DCMIPP_PRSR_HSYNC                   DCMIPP_PRSR_HSYNC_Msk                           /*!< This bit gives the state of the HSYNC pin with the correct programmed polarity if ENABLE bit is set */
#define DCMIPP_PRSR_VSYNC_Pos               (17U)
#define DCMIPP_PRSR_VSYNC_Msk               (0x1UL << DCMIPP_PRSR_VSYNC_Pos)                 /*!< 0x00020000 */
#define DCMIPP_PRSR_VSYNC                   DCMIPP_PRSR_VSYNC_Msk                           /*!< This bit gives the state of the VSYNC pin with the correct programmed polarity if ENABLE bit is set */

/*****************  Bit definition for DCMIPP_PRFCR register  *****************/
#define DCMIPP_PRFCR_CERRF_Pos              (6U)
#define DCMIPP_PRFCR_CERRF_Msk              (0x1UL << DCMIPP_PRFCR_CERRF_Pos)                /*!< 0x00000040 */
#define DCMIPP_PRFCR_CERRF                  DCMIPP_PRFCR_CERRF_Msk                          /*!< Synchronization error interrupt status clear */

/***************  Bit definition for DCMIPP_CMHWCFGR register  ****************/
#define DCMIPP_CMHWCFGR_CPIPES_Pos          (2U)
#define DCMIPP_CMHWCFGR_CPIPES_Msk          (0x3UL << DCMIPP_CMHWCFGR_CPIPES_Pos)            /*!< 0x0000000C */
#define DCMIPP_CMHWCFGR_CPIPES              DCMIPP_CMHWCFGR_CPIPES_Msk                      /*!< Amount of instantiated pipes (either dump or pixel pipes) */
#define DCMIPP_CMHWCFGR_CPAR_Pos            (4U)
#define DCMIPP_CMHWCFGR_CPAR_Msk            (0x1UL << DCMIPP_CMHWCFGR_CPAR_Pos)              /*!< 0x00000010 */
#define DCMIPP_CMHWCFGR_CPAR                DCMIPP_CMHWCFGR_CPAR_Msk                        /*!< Presence of the parallel interface */
#define DCMIPP_CMHWCFGR_CCSI_Pos            (5U)
#define DCMIPP_CMHWCFGR_CCSI_Msk            (0x1UL << DCMIPP_CMHWCFGR_CCSI_Pos)              /*!< 0x00000020 */
#define DCMIPP_CMHWCFGR_CCSI                DCMIPP_CMHWCFGR_CCSI_Msk                        /*!< Presence of the CSI-2 host interface */
#define DCMIPP_CMHWCFGR_TPG_Pos             (6U)
#define DCMIPP_CMHWCFGR_TPG_Msk             (0x1UL << DCMIPP_CMHWCFGR_TPG_Pos)               /*!< 0x00000040 */
#define DCMIPP_CMHWCFGR_TPG                 DCMIPP_CMHWCFGR_TPG_Msk                         /*!< Presence of the test pattern generator */

/*****************  Bit definition for DCMIPP_CMCR register  ******************/
#define DCMIPP_CMCR_INSEL_Pos               (0U)
#define DCMIPP_CMCR_INSEL_Msk               (0x1UL << DCMIPP_CMCR_INSEL_Pos)                 /*!< 0x00000001 */
#define DCMIPP_CMCR_INSEL                   DCMIPP_CMCR_INSEL_Msk                           /*!< input selection */
#define DCMIPP_CMCR_PSFC_Pos                (1U)
#define DCMIPP_CMCR_PSFC_Msk                (0x3UL << DCMIPP_CMCR_PSFC_Pos)                  /*!< 0x00000006 */
#define DCMIPP_CMCR_PSFC                    DCMIPP_CMCR_PSFC_Msk                            /*!< Pipe selection for the frame counter */
#define DCMIPP_CMCR_CFC_Pos                 (4U)
#define DCMIPP_CMCR_CFC_Msk                 (0x1UL << DCMIPP_CMCR_CFC_Pos)                   /*!< 0x00000010 */
#define DCMIPP_CMCR_CFC                     DCMIPP_CMCR_CFC_Msk                             /*!< Clear frame counter */
#define DCMIPP_CMCR_SWAPRB_Pos              (7U)
#define DCMIPP_CMCR_SWAPRB_Msk              (0x1UL << DCMIPP_CMCR_SWAPRB_Pos)                /*!< 0x00000080 */
#define DCMIPP_CMCR_SWAPRB                  DCMIPP_CMCR_SWAPRB_Msk                          /*!< Swap R/U and B/V */

/****************  Bit definition for DCMIPP_CMFRCR register  *****************/
#define DCMIPP_CMFRCR_FRMCNT_Pos            (0U)
#define DCMIPP_CMFRCR_FRMCNT_Msk            (0xFFFFFFFFUL << DCMIPP_CMFRCR_FRMCNT_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_CMFRCR_FRMCNT                DCMIPP_CMFRCR_FRMCNT_Msk                        /*!< Frame counter, read-only, loops around */

/***************  Bit definition for DCMIPP_CMTPGCR1 register  ****************/
#define DCMIPP_CMTPGCR1_WIDTH_Pos           (0U)
#define DCMIPP_CMTPGCR1_WIDTH_Msk           (0x3FFFUL << DCMIPP_CMTPGCR1_WIDTH_Pos)          /*!< 0x00003FFF */
#define DCMIPP_CMTPGCR1_WIDTH               DCMIPP_CMTPGCR1_WIDTH_Msk                       /*!< Width of the visible pixels of the generated frame */
#define DCMIPP_CMTPGCR1_HEIGHT_Pos          (16U)
#define DCMIPP_CMTPGCR1_HEIGHT_Msk          (0x3FFFUL << DCMIPP_CMTPGCR1_HEIGHT_Pos)         /*!< 0x3FFF0000 */
#define DCMIPP_CMTPGCR1_HEIGHT              DCMIPP_CMTPGCR1_HEIGHT_Msk                      /*!< Height of the visible pixels of the generated frame */

/***************  Bit definition for DCMIPP_CMTPGCR2 register  ****************/
#define DCMIPP_CMTPGCR2_TPGEN_Pos           (0U)
#define DCMIPP_CMTPGCR2_TPGEN_Msk           (0x1UL << DCMIPP_CMTPGCR2_TPGEN_Pos)             /*!< 0x00000001 */
#define DCMIPP_CMTPGCR2_TPGEN               DCMIPP_CMTPGCR2_TPGEN_Msk                       /*!< Test pattern generator enable */
#define DCMIPP_CMTPGCR2_LFLEN_Pos           (1U)
#define DCMIPP_CMTPGCR2_LFLEN_Msk           (0x1UL << DCMIPP_CMTPGCR2_LFLEN_Pos)             /*!< 0x00000002 */
#define DCMIPP_CMTPGCR2_LFLEN               DCMIPP_CMTPGCR2_LFLEN_Msk                       /*!< Lifeline enable */
#define DCMIPP_CMTPGCR2_GSEN_Pos            (2U)
#define DCMIPP_CMTPGCR2_GSEN_Msk            (0x1UL << DCMIPP_CMTPGCR2_GSEN_Pos)              /*!< 0x00000004 */
#define DCMIPP_CMTPGCR2_GSEN                DCMIPP_CMTPGCR2_GSEN_Msk                        /*!< Gray scale enable */
#define DCMIPP_CMTPGCR2_PATTERN_Pos         (3U)
#define DCMIPP_CMTPGCR2_PATTERN_Msk         (0x1UL << DCMIPP_CMTPGCR2_PATTERN_Pos)           /*!< 0x00000008 */
#define DCMIPP_CMTPGCR2_PATTERN             DCMIPP_CMTPGCR2_PATTERN_Msk                     /*!< Pattern selection, between color bars and color squares */
#define DCMIPP_CMTPGCR2_YT_Pos              (4U)
#define DCMIPP_CMTPGCR2_YT_Msk              (0x3UL << DCMIPP_CMTPGCR2_YT_Pos)                /*!< 0x00000030 */
#define DCMIPP_CMTPGCR2_YT                  DCMIPP_CMTPGCR2_YT_Msk                          /*!< YUV type */
#define DCMIPP_CMTPGCR2_RT_Pos              (6U)
#define DCMIPP_CMTPGCR2_RT_Msk              (0x3UL << DCMIPP_CMTPGCR2_RT_Pos)                /*!< 0x000000C0 */
#define DCMIPP_CMTPGCR2_RT                  DCMIPP_CMTPGCR2_RT_Msk                          /*!< Raw Bayer type */
#define DCMIPP_CMTPGCR2_FORMAT_Pos          (8U)
#define DCMIPP_CMTPGCR2_FORMAT_Msk          (0xFFUL << DCMIPP_CMTPGCR2_FORMAT_Pos)           /*!< 0x0000FF00 */
#define DCMIPP_CMTPGCR2_FORMAT              DCMIPP_CMTPGCR2_FORMAT_Msk                      /*!< Pixel format generated: */
#define DCMIPP_CMTPGCR2_VBL_Pos             (16U)
#define DCMIPP_CMTPGCR2_VBL_Msk             (0xFFFFUL << DCMIPP_CMTPGCR2_VBL_Pos)            /*!< 0xFFFF0000 */
#define DCMIPP_CMTPGCR2_VBL                 DCMIPP_CMTPGCR2_VBL_Msk                         /*!< Amount of lines of the vertical blanking */

/*****************  Bit definition for DCMIPP_CMIER register  *****************/
#define DCMIPP_CMIER_ATXERRIE_Pos           (5U)
#define DCMIPP_CMIER_ATXERRIE_Msk           (0x1UL << DCMIPP_CMIER_ATXERRIE_Pos)             /*!< 0x00000020 */
#define DCMIPP_CMIER_ATXERRIE               DCMIPP_CMIER_ATXERRIE_Msk                       /*!< AXI transfer error interrupt enable for IP-Plug */
#define DCMIPP_CMIER_PRERRIE_Pos            (6U)
#define DCMIPP_CMIER_PRERRIE_Msk            (0x1UL << DCMIPP_CMIER_PRERRIE_Pos)              /*!< 0x00000040 */
#define DCMIPP_CMIER_PRERRIE                DCMIPP_CMIER_PRERRIE_Msk                        /*!< Limit interrupt enable for the parallel Interface */
#define DCMIPP_CMIER_P0LINEIE_Pos           (8U)
#define DCMIPP_CMIER_P0LINEIE_Msk           (0x1UL << DCMIPP_CMIER_P0LINEIE_Pos)             /*!< 0x00000100 */
#define DCMIPP_CMIER_P0LINEIE               DCMIPP_CMIER_P0LINEIE_Msk                       /*!< Multi-line capture complete interrupt enable for Pipe0 */
#define DCMIPP_CMIER_P0FRAMEIE_Pos          (9U)
#define DCMIPP_CMIER_P0FRAMEIE_Msk          (0x1UL << DCMIPP_CMIER_P0FRAMEIE_Pos)            /*!< 0x00000200 */
#define DCMIPP_CMIER_P0FRAMEIE              DCMIPP_CMIER_P0FRAMEIE_Msk                      /*!< Frame capture complete interrupt enable for Pipe0 */
#define DCMIPP_CMIER_P0VSYNCIE_Pos          (10U)
#define DCMIPP_CMIER_P0VSYNCIE_Msk          (0x1UL << DCMIPP_CMIER_P0VSYNCIE_Pos)            /*!< 0x00000400 */
#define DCMIPP_CMIER_P0VSYNCIE              DCMIPP_CMIER_P0VSYNCIE_Msk                      /*!< Vertical sync interrupt enable for Pipe0 */
#define DCMIPP_CMIER_P0LIMITIE_Pos          (14U)
#define DCMIPP_CMIER_P0LIMITIE_Msk          (0x1UL << DCMIPP_CMIER_P0LIMITIE_Pos)            /*!< 0x00004000 */
#define DCMIPP_CMIER_P0LIMITIE              DCMIPP_CMIER_P0LIMITIE_Msk                      /*!< Limit interrupt enable for Pipe0 */
#define DCMIPP_CMIER_P0OVRIE_Pos            (15U)
#define DCMIPP_CMIER_P0OVRIE_Msk            (0x1UL << DCMIPP_CMIER_P0OVRIE_Pos)              /*!< 0x00008000 */
#define DCMIPP_CMIER_P0OVRIE                DCMIPP_CMIER_P0OVRIE_Msk                        /*!< Overrun interrupt enable for Pipe0 */
#define DCMIPP_CMIER_P1LINEIE_Pos           (16U)
#define DCMIPP_CMIER_P1LINEIE_Msk           (0x1UL << DCMIPP_CMIER_P1LINEIE_Pos)             /*!< 0x00010000 */
#define DCMIPP_CMIER_P1LINEIE               DCMIPP_CMIER_P1LINEIE_Msk                       /*!< Multi-line capture complete interrupt status clear for Pipe1 */
#define DCMIPP_CMIER_P1FRAMEIE_Pos          (17U)
#define DCMIPP_CMIER_P1FRAMEIE_Msk          (0x1UL << DCMIPP_CMIER_P1FRAMEIE_Pos)            /*!< 0x00020000 */
#define DCMIPP_CMIER_P1FRAMEIE              DCMIPP_CMIER_P1FRAMEIE_Msk                      /*!< Frame capture complete interrupt enable for Pipe1 */
#define DCMIPP_CMIER_P1VSYNCIE_Pos          (18U)
#define DCMIPP_CMIER_P1VSYNCIE_Msk          (0x1UL << DCMIPP_CMIER_P1VSYNCIE_Pos)            /*!< 0x00040000 */
#define DCMIPP_CMIER_P1VSYNCIE              DCMIPP_CMIER_P1VSYNCIE_Msk                      /*!< Vertical sync interrupt enable for Pipe1 */
#define DCMIPP_CMIER_STFRAMEIE_Pos          (20U)
#define DCMIPP_CMIER_STFRAMEIE_Msk          (0x1UL << DCMIPP_CMIER_STFRAMEIE_Pos)            /*!< 0x00100000 */
#define DCMIPP_CMIER_STFRAMEIE              DCMIPP_CMIER_STFRAMEIE_Msk                      /*!< Statistics frame capture completed interrupt enable */
#define DCMIPP_CMIER_STBCIE_Pos             (21U)
#define DCMIPP_CMIER_STBCIE_Msk             (0x1UL << DCMIPP_CMIER_STBCIE_Pos)               /*!< 0x00200000 */
#define DCMIPP_CMIER_STBCIE                 DCMIPP_CMIER_STBCIE_Msk                         /*!< Statistics bad configuration interrupt enable */
#define DCMIPP_CMIER_STOVRIE_Pos            (22U)
#define DCMIPP_CMIER_STOVRIE_Msk            (0x1UL << DCMIPP_CMIER_STOVRIE_Pos)              /*!< 0x00400000 */
#define DCMIPP_CMIER_STOVRIE                DCMIPP_CMIER_STOVRIE_Msk                        /*!< Statistics overrun interrupt enable */
#define DCMIPP_CMIER_P1OVRIE_Pos            (23U)
#define DCMIPP_CMIER_P1OVRIE_Msk            (0x1UL << DCMIPP_CMIER_P1OVRIE_Pos)              /*!< 0x00800000 */
#define DCMIPP_CMIER_P1OVRIE                DCMIPP_CMIER_P1OVRIE_Msk                        /*!< Overrun interrupt enable for Pipe1 */
#define DCMIPP_CMIER_P2LINEIE_Pos           (24U)
#define DCMIPP_CMIER_P2LINEIE_Msk           (0x1UL << DCMIPP_CMIER_P2LINEIE_Pos)             /*!< 0x01000000 */
#define DCMIPP_CMIER_P2LINEIE               DCMIPP_CMIER_P2LINEIE_Msk                       /*!< Multi-line capture complete interrupt enable for Pipe2 */
#define DCMIPP_CMIER_P2FRAMEIE_Pos          (25U)
#define DCMIPP_CMIER_P2FRAMEIE_Msk          (0x1UL << DCMIPP_CMIER_P2FRAMEIE_Pos)            /*!< 0x02000000 */
#define DCMIPP_CMIER_P2FRAMEIE              DCMIPP_CMIER_P2FRAMEIE_Msk                      /*!< Frame capture complete interrupt enable for Pipe2 */
#define DCMIPP_CMIER_P2VSYNCIE_Pos          (26U)
#define DCMIPP_CMIER_P2VSYNCIE_Msk          (0x1UL << DCMIPP_CMIER_P2VSYNCIE_Pos)            /*!< 0x04000000 */
#define DCMIPP_CMIER_P2VSYNCIE              DCMIPP_CMIER_P2VSYNCIE_Msk                      /*!< Vertical sync interrupt enable for Pipe2 */
#define DCMIPP_CMIER_P2OVRIE_Pos            (31U)
#define DCMIPP_CMIER_P2OVRIE_Msk            (0x1UL << DCMIPP_CMIER_P2OVRIE_Pos)              /*!< 0x80000000 */
#define DCMIPP_CMIER_P2OVRIE                DCMIPP_CMIER_P2OVRIE_Msk                        /*!< Overrun interrupt status enable for Pipe2 */

/*****************  Bit definition for DCMIPP_CMSR1 register  *****************/
#define DCMIPP_CMSR1_PRHSYNC_Pos            (0U)
#define DCMIPP_CMSR1_PRHSYNC_Msk            (0x1UL << DCMIPP_CMSR1_PRHSYNC_Pos)              /*!< 0x00000001 */
#define DCMIPP_CMSR1_PRHSYNC                DCMIPP_CMSR1_PRHSYNC_Msk                        /*!< This bit gives the state of the HSYNC pin with the correct programmed polarity on the parallel inte */
#define DCMIPP_CMSR1_PRVSYNC_Pos            (1U)
#define DCMIPP_CMSR1_PRVSYNC_Msk            (0x1UL << DCMIPP_CMSR1_PRVSYNC_Pos)              /*!< 0x00000002 */
#define DCMIPP_CMSR1_PRVSYNC                DCMIPP_CMSR1_PRVSYNC_Msk                        /*!< This bit gives the state of the VSYNC pin with the correct programmed polarity on the parallel inte */
#define DCMIPP_CMSR1_P0LSTLINE_Pos          (8U)
#define DCMIPP_CMSR1_P0LSTLINE_Msk          (0x1UL << DCMIPP_CMSR1_P0LSTLINE_Pos)            /*!< 0x00000100 */
#define DCMIPP_CMSR1_P0LSTLINE              DCMIPP_CMSR1_P0LSTLINE_Msk                      /*!< Last line LSB bit, sampled at Frame capture complete event for Pipe0 */
#define DCMIPP_CMSR1_P0LSTFRM_Pos           (9U)
#define DCMIPP_CMSR1_P0LSTFRM_Msk           (0x1UL << DCMIPP_CMSR1_P0LSTFRM_Pos)             /*!< 0x00000200 */
#define DCMIPP_CMSR1_P0LSTFRM               DCMIPP_CMSR1_P0LSTFRM_Msk                       /*!< Last frame LSB bit, sampled at Frame capture complete event for Pipe0 */
#define DCMIPP_CMSR1_P0CPTACT_Pos           (15U)
#define DCMIPP_CMSR1_P0CPTACT_Msk           (0x1UL << DCMIPP_CMSR1_P0CPTACT_Pos)             /*!< 0x00008000 */
#define DCMIPP_CMSR1_P0CPTACT               DCMIPP_CMSR1_P0CPTACT_Msk                       /*!< Active frame capture (active from start-of-frame to frame complete) for Pipe0 */
#define DCMIPP_CMSR1_P1LSTLINE_Pos          (16U)
#define DCMIPP_CMSR1_P1LSTLINE_Msk          (0x1UL << DCMIPP_CMSR1_P1LSTLINE_Pos)            /*!< 0x00010000 */
#define DCMIPP_CMSR1_P1LSTLINE              DCMIPP_CMSR1_P1LSTLINE_Msk                      /*!< Last line LSB bit, sampled at Frame capture complete event for Pipe1 */
#define DCMIPP_CMSR1_P1LSTFRM_Pos           (17U)
#define DCMIPP_CMSR1_P1LSTFRM_Msk           (0x1UL << DCMIPP_CMSR1_P1LSTFRM_Pos)             /*!< 0x00020000 */
#define DCMIPP_CMSR1_P1LSTFRM               DCMIPP_CMSR1_P1LSTFRM_Msk                       /*!< Last frame LSB bit, sampled at frame capture complete event for Pipe1 */
#define DCMIPP_CMSR1_P1CPTACT_Pos           (23U)
#define DCMIPP_CMSR1_P1CPTACT_Msk           (0x1UL << DCMIPP_CMSR1_P1CPTACT_Pos)             /*!< 0x00800000 */
#define DCMIPP_CMSR1_P1CPTACT               DCMIPP_CMSR1_P1CPTACT_Msk                       /*!< Active frame capture (active from start-of-frame to frame complete) for Pipe1 */
#define DCMIPP_CMSR1_P2LSTLINE_Pos          (24U)
#define DCMIPP_CMSR1_P2LSTLINE_Msk          (0x1UL << DCMIPP_CMSR1_P2LSTLINE_Pos)            /*!< 0x01000000 */
#define DCMIPP_CMSR1_P2LSTLINE              DCMIPP_CMSR1_P2LSTLINE_Msk                      /*!< Last line LSB bit, sampled at frame capture complete event for Pipe2 */
#define DCMIPP_CMSR1_P2LSTFRM_Pos           (25U)
#define DCMIPP_CMSR1_P2LSTFRM_Msk           (0x1UL << DCMIPP_CMSR1_P2LSTFRM_Pos)             /*!< 0x02000000 */
#define DCMIPP_CMSR1_P2LSTFRM               DCMIPP_CMSR1_P2LSTFRM_Msk                       /*!< Last frame LSB bit, sampled at frame capture complete event for Pipe2 */
#define DCMIPP_CMSR1_P2CPTACT_Pos           (31U)
#define DCMIPP_CMSR1_P2CPTACT_Msk           (0x1UL << DCMIPP_CMSR1_P2CPTACT_Pos)             /*!< 0x80000000 */
#define DCMIPP_CMSR1_P2CPTACT               DCMIPP_CMSR1_P2CPTACT_Msk                       /*!< Active frame capture (active from start-of-frame to frame complete) for Pipe2 */

/*****************  Bit definition for DCMIPP_CMSR2 register  *****************/
#define DCMIPP_CMSR2_ATXERRF_Pos            (5U)
#define DCMIPP_CMSR2_ATXERRF_Msk            (0x1UL << DCMIPP_CMSR2_ATXERRF_Pos)              /*!< 0x00000020 */
#define DCMIPP_CMSR2_ATXERRF                DCMIPP_CMSR2_ATXERRF_Msk                        /*!< AXI transfer error interrupt status flag for the IP-Plug */
#define DCMIPP_CMSR2_PRERRF_Pos             (6U)
#define DCMIPP_CMSR2_PRERRF_Msk             (0x1UL << DCMIPP_CMSR2_PRERRF_Pos)               /*!< 0x00000040 */
#define DCMIPP_CMSR2_PRERRF                 DCMIPP_CMSR2_PRERRF_Msk                         /*!< Synchronization error raw interrupt status for the parallel interface */
#define DCMIPP_CMSR2_P0LINEF_Pos            (8U)
#define DCMIPP_CMSR2_P0LINEF_Msk            (0x1UL << DCMIPP_CMSR2_P0LINEF_Pos)              /*!< 0x00000100 */
#define DCMIPP_CMSR2_P0LINEF                DCMIPP_CMSR2_P0LINEF_Msk                        /*!< Multi-line capture completed raw interrupt status for Pipe0 */
#define DCMIPP_CMSR2_P0FRAMEF_Pos           (9U)
#define DCMIPP_CMSR2_P0FRAMEF_Msk           (0x1UL << DCMIPP_CMSR2_P0FRAMEF_Pos)             /*!< 0x00000200 */
#define DCMIPP_CMSR2_P0FRAMEF               DCMIPP_CMSR2_P0FRAMEF_Msk                       /*!< Frame capture completed raw interrupt status for Pipe0 */
#define DCMIPP_CMSR2_P0VSYNCF_Pos           (10U)
#define DCMIPP_CMSR2_P0VSYNCF_Msk           (0x1UL << DCMIPP_CMSR2_P0VSYNCF_Pos)             /*!< 0x00000400 */
#define DCMIPP_CMSR2_P0VSYNCF               DCMIPP_CMSR2_P0VSYNCF_Msk                       /*!< VSYNC raw interrupt status for Pipe0 */
#define DCMIPP_CMSR2_P0LIMITF_Pos           (14U)
#define DCMIPP_CMSR2_P0LIMITF_Msk           (0x1UL << DCMIPP_CMSR2_P0LIMITF_Pos)             /*!< 0x00004000 */
#define DCMIPP_CMSR2_P0LIMITF               DCMIPP_CMSR2_P0LIMITF_Msk                       /*!< Limit raw interrupt status for Pipe0 */
#define DCMIPP_CMSR2_P0OVRF_Pos             (15U)
#define DCMIPP_CMSR2_P0OVRF_Msk             (0x1UL << DCMIPP_CMSR2_P0OVRF_Pos)               /*!< 0x00008000 */
#define DCMIPP_CMSR2_P0OVRF                 DCMIPP_CMSR2_P0OVRF_Msk                         /*!< Overrun raw interrupt status for Pipe0 */
#define DCMIPP_CMSR2_P1LINEF_Pos            (16U)
#define DCMIPP_CMSR2_P1LINEF_Msk            (0x1UL << DCMIPP_CMSR2_P1LINEF_Pos)              /*!< 0x00010000 */
#define DCMIPP_CMSR2_P1LINEF                DCMIPP_CMSR2_P1LINEF_Msk                        /*!< Multi-line capture completed raw interrupt status for Pipe1 */
#define DCMIPP_CMSR2_P1FRAMEF_Pos           (17U)
#define DCMIPP_CMSR2_P1FRAMEF_Msk           (0x1UL << DCMIPP_CMSR2_P1FRAMEF_Pos)             /*!< 0x00020000 */
#define DCMIPP_CMSR2_P1FRAMEF               DCMIPP_CMSR2_P1FRAMEF_Msk                       /*!< Frame capture completed raw interrupt status for Pipe1 */
#define DCMIPP_CMSR2_P1VSYNCF_Pos           (18U)
#define DCMIPP_CMSR2_P1VSYNCF_Msk           (0x1UL << DCMIPP_CMSR2_P1VSYNCF_Pos)             /*!< 0x00040000 */
#define DCMIPP_CMSR2_P1VSYNCF               DCMIPP_CMSR2_P1VSYNCF_Msk                       /*!< VSYNC raw interrupt status for Pipe1 */
#define DCMIPP_CMSR2_STFRAMEF_Pos           (20U)
#define DCMIPP_CMSR2_STFRAMEF_Msk           (0x1UL << DCMIPP_CMSR2_STFRAMEF_Pos)             /*!< 0x00100000 */
#define DCMIPP_CMSR2_STFRAMEF               DCMIPP_CMSR2_STFRAMEF_Msk                       /*!< Statistics frame capture completed interrupt enable */
#define DCMIPP_CMSR2_STBCF_Pos              (21U)
#define DCMIPP_CMSR2_STBCF_Msk              (0x1UL << DCMIPP_CMSR2_STBCF_Pos)                /*!< 0x00200000 */
#define DCMIPP_CMSR2_STBCF                  DCMIPP_CMSR2_STBCF_Msk                          /*!< Statistics bad configuration interrupt status */
#define DCMIPP_CMSR2_STOVRF_Pos             (22U)
#define DCMIPP_CMSR2_STOVRF_Msk             (0x1UL << DCMIPP_CMSR2_STOVRF_Pos)               /*!< 0x00400000 */
#define DCMIPP_CMSR2_STOVRF                 DCMIPP_CMSR2_STOVRF_Msk                         /*!< Statistics overrun interrupt status */
#define DCMIPP_CMSR2_P1OVRF_Pos             (23U)
#define DCMIPP_CMSR2_P1OVRF_Msk             (0x1UL << DCMIPP_CMSR2_P1OVRF_Pos)               /*!< 0x00800000 */
#define DCMIPP_CMSR2_P1OVRF                 DCMIPP_CMSR2_P1OVRF_Msk                         /*!< Overrun raw interrupt status for Pipe1 */
#define DCMIPP_CMSR2_P2LINEF_Pos            (24U)
#define DCMIPP_CMSR2_P2LINEF_Msk            (0x1UL << DCMIPP_CMSR2_P2LINEF_Pos)              /*!< 0x01000000 */
#define DCMIPP_CMSR2_P2LINEF                DCMIPP_CMSR2_P2LINEF_Msk                        /*!< Multi-line capture completed raw interrupt status for Pipe2 */
#define DCMIPP_CMSR2_P2FRAMEF_Pos           (25U)
#define DCMIPP_CMSR2_P2FRAMEF_Msk           (0x1UL << DCMIPP_CMSR2_P2FRAMEF_Pos)             /*!< 0x02000000 */
#define DCMIPP_CMSR2_P2FRAMEF               DCMIPP_CMSR2_P2FRAMEF_Msk                       /*!< Frame capture completed raw interrupt status for Pipe2 */
#define DCMIPP_CMSR2_P2VSYNCF_Pos           (26U)
#define DCMIPP_CMSR2_P2VSYNCF_Msk           (0x1UL << DCMIPP_CMSR2_P2VSYNCF_Pos)             /*!< 0x04000000 */
#define DCMIPP_CMSR2_P2VSYNCF               DCMIPP_CMSR2_P2VSYNCF_Msk                       /*!< VSYNC raw interrupt status for Pipe2 */
#define DCMIPP_CMSR2_P2OVRF_Pos             (31U)
#define DCMIPP_CMSR2_P2OVRF_Msk             (0x1UL << DCMIPP_CMSR2_P2OVRF_Pos)               /*!< 0x80000000 */
#define DCMIPP_CMSR2_P2OVRF                 DCMIPP_CMSR2_P2OVRF_Msk                         /*!< Overrun raw interrupt status for Pipe2 */

/*****************  Bit definition for DCMIPP_CMFCR register  *****************/
#define DCMIPP_CMFCR_CATXERRF_Pos           (5U)
#define DCMIPP_CMFCR_CATXERRF_Msk           (0x1UL << DCMIPP_CMFCR_CATXERRF_Pos)             /*!< 0x00000020 */
#define DCMIPP_CMFCR_CATXERRF               DCMIPP_CMFCR_CATXERRF_Msk                       /*!< AXI transfer error interrupt status clear */
#define DCMIPP_CMFCR_CPRERRF_Pos            (6U)
#define DCMIPP_CMFCR_CPRERRF_Msk            (0x1UL << DCMIPP_CMFCR_CPRERRF_Pos)              /*!< 0x00000040 */
#define DCMIPP_CMFCR_CPRERRF                DCMIPP_CMFCR_CPRERRF_Msk                        /*!< Synchronization error interrupt status clear */
#define DCMIPP_CMFCR_CP0LINEF_Pos           (8U)
#define DCMIPP_CMFCR_CP0LINEF_Msk           (0x1UL << DCMIPP_CMFCR_CP0LINEF_Pos)             /*!< 0x00000100 */
#define DCMIPP_CMFCR_CP0LINEF               DCMIPP_CMFCR_CP0LINEF_Msk                       /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP0FRAMEF_Pos          (9U)
#define DCMIPP_CMFCR_CP0FRAMEF_Msk          (0x1UL << DCMIPP_CMFCR_CP0FRAMEF_Pos)            /*!< 0x00000200 */
#define DCMIPP_CMFCR_CP0FRAMEF              DCMIPP_CMFCR_CP0FRAMEF_Msk                      /*!< Frame capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP0VSYNCF_Pos          (10U)
#define DCMIPP_CMFCR_CP0VSYNCF_Msk          (0x1UL << DCMIPP_CMFCR_CP0VSYNCF_Pos)            /*!< 0x00000400 */
#define DCMIPP_CMFCR_CP0VSYNCF              DCMIPP_CMFCR_CP0VSYNCF_Msk                      /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_CMFCR_CP0LIMITF_Pos          (14U)
#define DCMIPP_CMFCR_CP0LIMITF_Msk          (0x1UL << DCMIPP_CMFCR_CP0LIMITF_Pos)            /*!< 0x00004000 */
#define DCMIPP_CMFCR_CP0LIMITF              DCMIPP_CMFCR_CP0LIMITF_Msk                      /*!< limit interrupt status clear */
#define DCMIPP_CMFCR_CP0OVRF_Pos            (15U)
#define DCMIPP_CMFCR_CP0OVRF_Msk            (0x1UL << DCMIPP_CMFCR_CP0OVRF_Pos)              /*!< 0x00008000 */
#define DCMIPP_CMFCR_CP0OVRF                DCMIPP_CMFCR_CP0OVRF_Msk                        /*!< Overrun interrupt status clear */
#define DCMIPP_CMFCR_CP1LINEF_Pos           (16U)
#define DCMIPP_CMFCR_CP1LINEF_Msk           (0x1UL << DCMIPP_CMFCR_CP1LINEF_Pos)             /*!< 0x00010000 */
#define DCMIPP_CMFCR_CP1LINEF               DCMIPP_CMFCR_CP1LINEF_Msk                       /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP1FRAMEF_Pos          (17U)
#define DCMIPP_CMFCR_CP1FRAMEF_Msk          (0x1UL << DCMIPP_CMFCR_CP1FRAMEF_Pos)            /*!< 0x00020000 */
#define DCMIPP_CMFCR_CP1FRAMEF              DCMIPP_CMFCR_CP1FRAMEF_Msk                      /*!< Frame capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP1VSYNCF_Pos          (18U)
#define DCMIPP_CMFCR_CP1VSYNCF_Msk          (0x1UL << DCMIPP_CMFCR_CP1VSYNCF_Pos)            /*!< 0x00040000 */
#define DCMIPP_CMFCR_CP1VSYNCF              DCMIPP_CMFCR_CP1VSYNCF_Msk                      /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_CMFCR_CSTFRAMEF_Pos          (20U)
#define DCMIPP_CMFCR_CSTFRAMEF_Msk          (0x1UL << DCMIPP_CMFCR_CSTFRAMEF_Pos)            /*!< 0x00100000 */
#define DCMIPP_CMFCR_CSTFRAMEF              DCMIPP_CMFCR_CSTFRAMEF_Msk                      /*!< Statistics frame capture completed interrupt enable */
#define DCMIPP_CMFCR_CSTBCF_Pos             (21U)
#define DCMIPP_CMFCR_CSTBCF_Msk             (0x1UL << DCMIPP_CMFCR_CSTBCF_Pos)               /*!< 0x00200000 */
#define DCMIPP_CMFCR_CSTBCF                 DCMIPP_CMFCR_CSTBCF_Msk                         /*!< Statistics bad configuration interrupt enable */
#define DCMIPP_CMFCR_CSTOVRF_Pos            (22U)
#define DCMIPP_CMFCR_CSTOVRF_Msk            (0x1UL << DCMIPP_CMFCR_CSTOVRF_Pos)              /*!< 0x00400000 */
#define DCMIPP_CMFCR_CSTOVRF                DCMIPP_CMFCR_CSTOVRF_Msk                        /*!< Statistics overrun interrupt clear */
#define DCMIPP_CMFCR_CP1OVRF_Pos            (23U)
#define DCMIPP_CMFCR_CP1OVRF_Msk            (0x1UL << DCMIPP_CMFCR_CP1OVRF_Pos)              /*!< 0x00800000 */
#define DCMIPP_CMFCR_CP1OVRF                DCMIPP_CMFCR_CP1OVRF_Msk                        /*!< Overrun interrupt status clear */
#define DCMIPP_CMFCR_CP2LINEF_Pos           (24U)
#define DCMIPP_CMFCR_CP2LINEF_Msk           (0x1UL << DCMIPP_CMFCR_CP2LINEF_Pos)             /*!< 0x01000000 */
#define DCMIPP_CMFCR_CP2LINEF               DCMIPP_CMFCR_CP2LINEF_Msk                       /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP2FRAMEF_Pos          (25U)
#define DCMIPP_CMFCR_CP2FRAMEF_Msk          (0x1UL << DCMIPP_CMFCR_CP2FRAMEF_Pos)            /*!< 0x02000000 */
#define DCMIPP_CMFCR_CP2FRAMEF              DCMIPP_CMFCR_CP2FRAMEF_Msk                      /*!< Frame capture complete interrupt status clear */
#define DCMIPP_CMFCR_CP2VSYNCF_Pos          (26U)
#define DCMIPP_CMFCR_CP2VSYNCF_Msk          (0x1UL << DCMIPP_CMFCR_CP2VSYNCF_Pos)            /*!< 0x04000000 */
#define DCMIPP_CMFCR_CP2VSYNCF              DCMIPP_CMFCR_CP2VSYNCF_Msk                      /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_CMFCR_CP2OVRF_Pos            (31U)
#define DCMIPP_CMFCR_CP2OVRF_Msk            (0x1UL << DCMIPP_CMFCR_CP2OVRF_Pos)              /*!< 0x80000000 */
#define DCMIPP_CMFCR_CP2OVRF                DCMIPP_CMFCR_CP2OVRF_Msk                        /*!< Overrun interrupt status clear */

/***************  Bit definition for DCMIPP_P0HWCFGR register  ****************/
#define DCMIPP_P0HWCFGR_CPLA_Pos            (0U)
#define DCMIPP_P0HWCFGR_CPLA_Msk            (0x3UL << DCMIPP_P0HWCFGR_CPLA_Pos)              /*!< 0x00000003 */
#define DCMIPP_P0HWCFGR_CPLA                DCMIPP_P0HWCFGR_CPLA_Msk                        /*!< Capability for planar buffers */
#define DCMIPP_P0HWCFGR_CDS_Pos             (2U)
#define DCMIPP_P0HWCFGR_CDS_Msk             (0x1UL << DCMIPP_P0HWCFGR_CDS_Pos)               /*!< 0x00000004 */
#define DCMIPP_P0HWCFGR_CDS                 DCMIPP_P0HWCFGR_CDS_Msk                         /*!< Capability for downsize filter */
#define DCMIPP_P0HWCFGR_DBM_Pos             (3U)
#define DCMIPP_P0HWCFGR_DBM_Msk             (0x1UL << DCMIPP_P0HWCFGR_DBM_Pos)               /*!< 0x00000008 */
#define DCMIPP_P0HWCFGR_DBM                 DCMIPP_P0HWCFGR_DBM_Msk                         /*!< Double buffer mode */
#define DCMIPP_P0HWCFGR_CRB_Pos             (4U)
#define DCMIPP_P0HWCFGR_CRB_Msk             (0x3UL << DCMIPP_P0HWCFGR_CRB_Pos)               /*!< 0x00000030 */
#define DCMIPP_P0HWCFGR_CRB                 DCMIPP_P0HWCFGR_CRB_Msk                         /*!< Capability for demosaicing */
#define DCMIPP_P0HWCFGR_CGM_Pos             (6U)
#define DCMIPP_P0HWCFGR_CGM_Msk             (0x3UL << DCMIPP_P0HWCFGR_CGM_Pos)               /*!< 0x000000C0 */
#define DCMIPP_P0HWCFGR_CGM                 DCMIPP_P0HWCFGR_CGM_Msk                         /*!< Capability for gamma conversions */
#define DCMIPP_P0HWCFGR_CROI_Pos            (8U)
#define DCMIPP_P0HWCFGR_CROI_Msk            (0xFUL << DCMIPP_P0HWCFGR_CROI_Pos)              /*!< 0x00000F00 */
#define DCMIPP_P0HWCFGR_CROI                DCMIPP_P0HWCFGR_CROI_Msk                        /*!< Capability for ROI: defines the number of ROIs in the pipe */
#define DCMIPP_P0HWCFGR_CVP_Pos             (13U)
#define DCMIPP_P0HWCFGR_CVP_Msk             (0x1UL << DCMIPP_P0HWCFGR_CVP_Pos)               /*!< 0x00002000 */
#define DCMIPP_P0HWCFGR_CVP                 DCMIPP_P0HWCFGR_CVP_Msk                         /*!< Capability for pipeline virtualization */

/****************  Bit definition for DCMIPP_P0FSCR register  *****************/
#define DCMIPP_P0FSCR_DTIDA_Pos             (0U)
#define DCMIPP_P0FSCR_DTIDA_Msk             (0x3FUL << DCMIPP_P0FSCR_DTIDA_Pos)              /*!< 0x0000003F */
#define DCMIPP_P0FSCR_DTIDA                 DCMIPP_P0FSCR_DTIDA_Msk                         /*!< Data type selection ID A */
#define DCMIPP_P0FSCR_DTIDB_Pos             (8U)
#define DCMIPP_P0FSCR_DTIDB_Msk             (0x3FUL << DCMIPP_P0FSCR_DTIDB_Pos)              /*!< 0x00003F00 */
#define DCMIPP_P0FSCR_DTIDB                 DCMIPP_P0FSCR_DTIDB_Msk                         /*!< Data type selection ID B */
#define DCMIPP_P0FSCR_DTMODE_Pos            (16U)
#define DCMIPP_P0FSCR_DTMODE_Msk            (0x3UL << DCMIPP_P0FSCR_DTMODE_Pos)              /*!< 0x00030000 */
#define DCMIPP_P0FSCR_DTMODE                DCMIPP_P0FSCR_DTMODE_Msk                        /*!< Flow selection mode */
#define DCMIPP_P0FSCR_VC_Pos                (19U)
#define DCMIPP_P0FSCR_VC_Msk                (0x3UL << DCMIPP_P0FSCR_VC_Pos)                  /*!< 0x00180000 */
#define DCMIPP_P0FSCR_VC                    DCMIPP_P0FSCR_VC_Msk                            /*!< Flow selection mode */
#define DCMIPP_P0FSCR_PIPEN_Pos             (31U)
#define DCMIPP_P0FSCR_PIPEN_Msk             (0x1UL << DCMIPP_P0FSCR_PIPEN_Pos)               /*!< 0x80000000 */
#define DCMIPP_P0FSCR_PIPEN                 DCMIPP_P0FSCR_PIPEN_Msk                         /*!< Activation of PipeN */

/****************  Bit definition for DCMIPP_P0FCTCR register  ****************/
#define DCMIPP_P0FCTCR_FRATE_Pos            (0U)
#define DCMIPP_P0FCTCR_FRATE_Msk            (0x3UL << DCMIPP_P0FCTCR_FRATE_Pos)              /*!< 0x00000003 */
#define DCMIPP_P0FCTCR_FRATE                DCMIPP_P0FCTCR_FRATE_Msk                        /*!< Frame capture rate control */
#define DCMIPP_P0FCTCR_CPTMODE_Pos          (2U)
#define DCMIPP_P0FCTCR_CPTMODE_Msk          (0x1UL << DCMIPP_P0FCTCR_CPTMODE_Pos)            /*!< 0x00000004 */
#define DCMIPP_P0FCTCR_CPTMODE              DCMIPP_P0FCTCR_CPTMODE_Msk                      /*!< Capture mode */
#define DCMIPP_P0FCTCR_CPTREQ_Pos           (3U)
#define DCMIPP_P0FCTCR_CPTREQ_Msk           (0x1UL << DCMIPP_P0FCTCR_CPTREQ_Pos)             /*!< 0x00000008 */
#define DCMIPP_P0FCTCR_CPTREQ               DCMIPP_P0FCTCR_CPTREQ_Msk                       /*!< Capture requested */

/****************  Bit definition for DCMIPP_P0SCSTR register  ****************/
#define DCMIPP_P0SCSTR_HSTART_Pos           (0U)
#define DCMIPP_P0SCSTR_HSTART_Msk           (0xFFFUL << DCMIPP_P0SCSTR_HSTART_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P0SCSTR_HSTART               DCMIPP_P0SCSTR_HSTART_Msk                       /*!< Horizontal start, from 0 to 4094 words wide */
#define DCMIPP_P0SCSTR_VSTART_Pos           (16U)
#define DCMIPP_P0SCSTR_VSTART_Msk           (0xFFFUL << DCMIPP_P0SCSTR_VSTART_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P0SCSTR_VSTART               DCMIPP_P0SCSTR_VSTART_Msk                       /*!< Vertical start, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P0SCSZR register  ****************/
#define DCMIPP_P0SCSZR_HSIZE_Pos            (0U)
#define DCMIPP_P0SCSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P0SCSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P0SCSZR_HSIZE                DCMIPP_P0SCSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 word wide (data 32-bit) */
#define DCMIPP_P0SCSZR_VSIZE_Pos            (16U)
#define DCMIPP_P0SCSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P0SCSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P0SCSZR_VSIZE                DCMIPP_P0SCSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P0SCSZR_POSNEG_Pos           (30U)
#define DCMIPP_P0SCSZR_POSNEG_Msk           (0x1UL << DCMIPP_P0SCSZR_POSNEG_Pos)             /*!< 0x40000000 */
#define DCMIPP_P0SCSZR_POSNEG               DCMIPP_P0SCSZR_POSNEG_Msk                       /*!< This bit is set and cleared by software */
#define DCMIPP_P0SCSZR_ENABLE_Pos           (31U)
#define DCMIPP_P0SCSZR_ENABLE_Msk           (0x1UL << DCMIPP_P0SCSZR_ENABLE_Pos)             /*!< 0x80000000 */
#define DCMIPP_P0SCSZR_ENABLE               DCMIPP_P0SCSZR_ENABLE_Msk                       /*!< This bit is set and cleared by software */

/***************  Bit definition for DCMIPP_P0DCCNTR register  ****************/
#define DCMIPP_P0DCCNTR_CNT_Pos             (0U)
#define DCMIPP_P0DCCNTR_CNT_Msk             (0x3FFFFFFUL << DCMIPP_P0DCCNTR_CNT_Pos)         /*!< 0x03FFFFFF */
#define DCMIPP_P0DCCNTR_CNT                 DCMIPP_P0DCCNTR_CNT_Msk                         /*!< Number of data dumped during the frame */

/***************  Bit definition for DCMIPP_P0DCLMTR register  ****************/
#define DCMIPP_P0DCLMTR_LIMIT_Pos           (0U)
#define DCMIPP_P0DCLMTR_LIMIT_Msk           (0xFFFFFFUL << DCMIPP_P0DCLMTR_LIMIT_Pos)        /*!< 0x00FFFFFF */
#define DCMIPP_P0DCLMTR_LIMIT               DCMIPP_P0DCLMTR_LIMIT_Msk                       /*!< Maximum number of 32-bit data that can be dumped during a frame, after the crop 2D operation */
#define DCMIPP_P0DCLMTR_ENABLE_Pos          (31U)
#define DCMIPP_P0DCLMTR_ENABLE_Msk          (0x1UL << DCMIPP_P0DCLMTR_ENABLE_Pos)            /*!< 0x80000000 */
#define DCMIPP_P0DCLMTR_ENABLE              DCMIPP_P0DCLMTR_ENABLE_Msk                      /*!< None */

/****************  Bit definition for DCMIPP_P0PPCR register  *****************/
#define DCMIPP_P0PPCR_SWAPYUV_Pos           (0U)
#define DCMIPP_P0PPCR_SWAPYUV_Msk           (0x1UL << DCMIPP_P0PPCR_SWAPYUV_Pos)             /*!< 0x00000001 */
#define DCMIPP_P0PPCR_SWAPYUV               DCMIPP_P0PPCR_SWAPYUV_Msk                       /*!< Swaps, within a 32-bit word, byte 0-vs-1 and byte 2-vs-3 */
#define DCMIPP_P0PPCR_PAD_Pos               (5U)
#define DCMIPP_P0PPCR_PAD_Msk               (0x1UL << DCMIPP_P0PPCR_PAD_Pos)                 /*!< 0x00000020 */
#define DCMIPP_P0PPCR_PAD                   DCMIPP_P0PPCR_PAD_Msk                           /*!< Pad mode for monochrome and raw Bayer 10/12/14 bpp (MSB vs */
#define DCMIPP_P0PPCR_HEADEREN_Pos          (6U)
#define DCMIPP_P0PPCR_HEADEREN_Msk          (0x1UL << DCMIPP_P0PPCR_HEADEREN_Pos)            /*!< 0x00000040 */
#define DCMIPP_P0PPCR_HEADEREN              DCMIPP_P0PPCR_HEADEREN_Msk                      /*!< CSI header dump enable */
#define DCMIPP_P0PPCR_BSM_Pos               (7U)
#define DCMIPP_P0PPCR_BSM_Msk               (0x3UL << DCMIPP_P0PPCR_BSM_Pos)                 /*!< 0x00000180 */
#define DCMIPP_P0PPCR_BSM                   DCMIPP_P0PPCR_BSM_Msk                           /*!< Byte select mode */
#define DCMIPP_P0PPCR_OEBS_Pos              (9U)
#define DCMIPP_P0PPCR_OEBS_Msk              (0x1UL << DCMIPP_P0PPCR_OEBS_Pos)                /*!< 0x00000200 */
#define DCMIPP_P0PPCR_OEBS                  DCMIPP_P0PPCR_OEBS_Msk                          /*!< Odd/even byte select (byte select start) */
#define DCMIPP_P0PPCR_LSM_Pos               (10U)
#define DCMIPP_P0PPCR_LSM_Msk               (0x1UL << DCMIPP_P0PPCR_LSM_Pos)                 /*!< 0x00000400 */
#define DCMIPP_P0PPCR_LSM                   DCMIPP_P0PPCR_LSM_Msk                           /*!< Line select mode */
#define DCMIPP_P0PPCR_OELS_Pos              (11U)
#define DCMIPP_P0PPCR_OELS_Msk              (0x1UL << DCMIPP_P0PPCR_OELS_Pos)                /*!< 0x00000800 */
#define DCMIPP_P0PPCR_OELS                  DCMIPP_P0PPCR_OELS_Msk                          /*!< Odd/even line select (line select start) */
#define DCMIPP_P0PPCR_LINEMULT_Pos          (13U)
#define DCMIPP_P0PPCR_LINEMULT_Msk          (0x7UL << DCMIPP_P0PPCR_LINEMULT_Pos)            /*!< 0x0000E000 */
#define DCMIPP_P0PPCR_LINEMULT              DCMIPP_P0PPCR_LINEMULT_Msk                      /*!< Amount of capture completed lines for LINE event and interrupt */

/***************  Bit definition for DCMIPP_P0PPM0AR1 register  ***************/
#define DCMIPP_P0PPM0AR1_M0A_Pos            (0U)
#define DCMIPP_P0PPM0AR1_M0A_Msk            (0xFFFFFFFFUL << DCMIPP_P0PPM0AR1_M0A_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_P0PPM0AR1_M0A                DCMIPP_P0PPM0AR1_M0A_Msk                        /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P0STM0AR register  ****************/
#define DCMIPP_P0STM0AR_M0A_Pos             (0U)
#define DCMIPP_P0STM0AR_M0A_Msk             (0xFFFFFFFFUL << DCMIPP_P0STM0AR_M0A_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P0STM0AR_M0A                 DCMIPP_P0STM0AR_M0A_Msk                         /*!< Memory0 address */

/*****************  Bit definition for DCMIPP_P0IER register  *****************/
#define DCMIPP_P0IER_LINEIE_Pos             (0U)
#define DCMIPP_P0IER_LINEIE_Msk             (0x1UL << DCMIPP_P0IER_LINEIE_Pos)               /*!< 0x00000001 */
#define DCMIPP_P0IER_LINEIE                 DCMIPP_P0IER_LINEIE_Msk                         /*!< Multi-line capture completed interrupt enable */
#define DCMIPP_P0IER_FRAMEIE_Pos            (1U)
#define DCMIPP_P0IER_FRAMEIE_Msk            (0x1UL << DCMIPP_P0IER_FRAMEIE_Pos)              /*!< 0x00000002 */
#define DCMIPP_P0IER_FRAMEIE                DCMIPP_P0IER_FRAMEIE_Msk                        /*!< Frame capture completed interrupt enable */
#define DCMIPP_P0IER_VSYNCIE_Pos            (2U)
#define DCMIPP_P0IER_VSYNCIE_Msk            (0x1UL << DCMIPP_P0IER_VSYNCIE_Pos)              /*!< 0x00000004 */
#define DCMIPP_P0IER_VSYNCIE                DCMIPP_P0IER_VSYNCIE_Msk                        /*!< VSYNC interrupt enable */
#define DCMIPP_P0IER_LIMITIE_Pos            (6U)
#define DCMIPP_P0IER_LIMITIE_Msk            (0x1UL << DCMIPP_P0IER_LIMITIE_Pos)              /*!< 0x00000040 */
#define DCMIPP_P0IER_LIMITIE                DCMIPP_P0IER_LIMITIE_Msk                        /*!< Limit interrupt enable */
#define DCMIPP_P0IER_OVRIE_Pos              (7U)
#define DCMIPP_P0IER_OVRIE_Msk              (0x1UL << DCMIPP_P0IER_OVRIE_Pos)                /*!< 0x00000080 */
#define DCMIPP_P0IER_OVRIE                  DCMIPP_P0IER_OVRIE_Msk                          /*!< Overrun interrupt enable */

/*****************  Bit definition for DCMIPP_P0SR register  ******************/
#define DCMIPP_P0SR_LINEF_Pos               (0U)
#define DCMIPP_P0SR_LINEF_Msk               (0x1UL << DCMIPP_P0SR_LINEF_Pos)                 /*!< 0x00000001 */
#define DCMIPP_P0SR_LINEF                   DCMIPP_P0SR_LINEF_Msk                           /*!< Multi-line capture completed raw interrupt status */
#define DCMIPP_P0SR_FRAMEF_Pos              (1U)
#define DCMIPP_P0SR_FRAMEF_Msk              (0x1UL << DCMIPP_P0SR_FRAMEF_Pos)                /*!< 0x00000002 */
#define DCMIPP_P0SR_FRAMEF                  DCMIPP_P0SR_FRAMEF_Msk                          /*!< Frame capture completed raw interrupt status */
#define DCMIPP_P0SR_VSYNCF_Pos              (2U)
#define DCMIPP_P0SR_VSYNCF_Msk              (0x1UL << DCMIPP_P0SR_VSYNCF_Pos)                /*!< 0x00000004 */
#define DCMIPP_P0SR_VSYNCF                  DCMIPP_P0SR_VSYNCF_Msk                          /*!< VSYNC raw interrupt status */
#define DCMIPP_P0SR_LIMITF_Pos              (6U)
#define DCMIPP_P0SR_LIMITF_Msk              (0x1UL << DCMIPP_P0SR_LIMITF_Pos)                /*!< 0x00000040 */
#define DCMIPP_P0SR_LIMITF                  DCMIPP_P0SR_LIMITF_Msk                          /*!< Limit raw interrupt status */
#define DCMIPP_P0SR_OVRF_Pos                (7U)
#define DCMIPP_P0SR_OVRF_Msk                (0x1UL << DCMIPP_P0SR_OVRF_Pos)                  /*!< 0x00000080 */
#define DCMIPP_P0SR_OVRF                    DCMIPP_P0SR_OVRF_Msk                            /*!< Overrun raw interrupt status */
#define DCMIPP_P0SR_LSTLINE_Pos             (16U)
#define DCMIPP_P0SR_LSTLINE_Msk             (0x1UL << DCMIPP_P0SR_LSTLINE_Pos)               /*!< 0x00010000 */
#define DCMIPP_P0SR_LSTLINE                 DCMIPP_P0SR_LSTLINE_Msk                         /*!< Last line LSB bit, sampled at frame capture complete event */
#define DCMIPP_P0SR_LSTFRM_Pos              (17U)
#define DCMIPP_P0SR_LSTFRM_Msk              (0x1UL << DCMIPP_P0SR_LSTFRM_Pos)                /*!< 0x00020000 */
#define DCMIPP_P0SR_LSTFRM                  DCMIPP_P0SR_LSTFRM_Msk                          /*!< Last frame LSB bit, sampled at frame capture complete event */
#define DCMIPP_P0SR_CPTACT_Pos              (23U)
#define DCMIPP_P0SR_CPTACT_Msk              (0x1UL << DCMIPP_P0SR_CPTACT_Pos)                /*!< 0x00800000 */
#define DCMIPP_P0SR_CPTACT                  DCMIPP_P0SR_CPTACT_Msk                          /*!< Capture immediate status */

/*****************  Bit definition for DCMIPP_P0FCR register  *****************/
#define DCMIPP_P0FCR_CLINEF_Pos             (0U)
#define DCMIPP_P0FCR_CLINEF_Msk             (0x1UL << DCMIPP_P0FCR_CLINEF_Pos)               /*!< 0x00000001 */
#define DCMIPP_P0FCR_CLINEF                 DCMIPP_P0FCR_CLINEF_Msk                         /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_P0FCR_CFRAMEF_Pos            (1U)
#define DCMIPP_P0FCR_CFRAMEF_Msk            (0x1UL << DCMIPP_P0FCR_CFRAMEF_Pos)              /*!< 0x00000002 */
#define DCMIPP_P0FCR_CFRAMEF                DCMIPP_P0FCR_CFRAMEF_Msk                        /*!< Frame capture complete interrupt status clear */
#define DCMIPP_P0FCR_CVSYNCF_Pos            (2U)
#define DCMIPP_P0FCR_CVSYNCF_Msk            (0x1UL << DCMIPP_P0FCR_CVSYNCF_Pos)              /*!< 0x00000004 */
#define DCMIPP_P0FCR_CVSYNCF                DCMIPP_P0FCR_CVSYNCF_Msk                        /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_P0FCR_CLIMITF_Pos            (6U)
#define DCMIPP_P0FCR_CLIMITF_Msk            (0x1UL << DCMIPP_P0FCR_CLIMITF_Pos)              /*!< 0x00000040 */
#define DCMIPP_P0FCR_CLIMITF                DCMIPP_P0FCR_CLIMITF_Msk                        /*!< limit interrupt status clear */
#define DCMIPP_P0FCR_COVRF_Pos              (7U)
#define DCMIPP_P0FCR_COVRF_Msk              (0x1UL << DCMIPP_P0FCR_COVRF_Pos)                /*!< 0x00000080 */
#define DCMIPP_P0FCR_COVRF                  DCMIPP_P0FCR_COVRF_Msk                          /*!< Overrun interrupt status clear */

/****************  Bit definition for DCMIPP_P0CFSCR register  ****************/
#define DCMIPP_P0CFSCR_DTIDA_Pos            (0U)
#define DCMIPP_P0CFSCR_DTIDA_Msk            (0x3FUL << DCMIPP_P0CFSCR_DTIDA_Pos)             /*!< 0x0000003F */
#define DCMIPP_P0CFSCR_DTIDA                DCMIPP_P0CFSCR_DTIDA_Msk                        /*!< Current data type selection ID A */
#define DCMIPP_P0CFSCR_DTIDB_Pos            (8U)
#define DCMIPP_P0CFSCR_DTIDB_Msk            (0x3FUL << DCMIPP_P0CFSCR_DTIDB_Pos)             /*!< 0x00003F00 */
#define DCMIPP_P0CFSCR_DTIDB                DCMIPP_P0CFSCR_DTIDB_Msk                        /*!< Current data type selection ID B */
#define DCMIPP_P0CFSCR_DTMODE_Pos           (16U)
#define DCMIPP_P0CFSCR_DTMODE_Msk           (0x3UL << DCMIPP_P0CFSCR_DTMODE_Pos)             /*!< 0x00030000 */
#define DCMIPP_P0CFSCR_DTMODE               DCMIPP_P0CFSCR_DTMODE_Msk                       /*!< Flow selection mode */
#define DCMIPP_P0CFSCR_VC_Pos               (19U)
#define DCMIPP_P0CFSCR_VC_Msk               (0x3UL << DCMIPP_P0CFSCR_VC_Pos)                 /*!< 0x00180000 */
#define DCMIPP_P0CFSCR_VC                   DCMIPP_P0CFSCR_VC_Msk                           /*!< Current flow selection mode */
#define DCMIPP_P0CFSCR_PIPEN_Pos            (31U)
#define DCMIPP_P0CFSCR_PIPEN_Msk            (0x1UL << DCMIPP_P0CFSCR_PIPEN_Pos)              /*!< 0x80000000 */
#define DCMIPP_P0CFSCR_PIPEN                DCMIPP_P0CFSCR_PIPEN_Msk                        /*!< Current activation of PipeN */

/***************  Bit definition for DCMIPP_P0CFCTCR register  ****************/
#define DCMIPP_P0CFCTCR_FRATE_Pos           (0U)
#define DCMIPP_P0CFCTCR_FRATE_Msk           (0x3UL << DCMIPP_P0CFCTCR_FRATE_Pos)             /*!< 0x00000003 */
#define DCMIPP_P0CFCTCR_FRATE               DCMIPP_P0CFCTCR_FRATE_Msk                       /*!< Frame capture rate control */
#define DCMIPP_P0CFCTCR_CPTMODE_Pos         (2U)
#define DCMIPP_P0CFCTCR_CPTMODE_Msk         (0x1UL << DCMIPP_P0CFCTCR_CPTMODE_Pos)           /*!< 0x00000004 */
#define DCMIPP_P0CFCTCR_CPTMODE             DCMIPP_P0CFCTCR_CPTMODE_Msk                     /*!< Capture mode */
#define DCMIPP_P0CFCTCR_CPTREQ_Pos          (3U)
#define DCMIPP_P0CFCTCR_CPTREQ_Msk          (0x1UL << DCMIPP_P0CFCTCR_CPTREQ_Pos)            /*!< 0x00000008 */
#define DCMIPP_P0CFCTCR_CPTREQ              DCMIPP_P0CFCTCR_CPTREQ_Msk                      /*!< Capture requested */

/***************  Bit definition for DCMIPP_P0CSCSTR register  ****************/
#define DCMIPP_P0CSCSTR_HSTART_Pos          (0U)
#define DCMIPP_P0CSCSTR_HSTART_Msk          (0xFFFUL << DCMIPP_P0CSCSTR_HSTART_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P0CSCSTR_HSTART              DCMIPP_P0CSCSTR_HSTART_Msk                      /*!< Current horizontal start, from 0 to 4094 words wide */
#define DCMIPP_P0CSCSTR_VSTART_Pos          (16U)
#define DCMIPP_P0CSCSTR_VSTART_Msk          (0xFFFUL << DCMIPP_P0CSCSTR_VSTART_Pos)          /*!< 0x0FFF0000 */
#define DCMIPP_P0CSCSTR_VSTART              DCMIPP_P0CSCSTR_VSTART_Msk                      /*!< Current vertical start, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P0CSCSZR register  ****************/
#define DCMIPP_P0CSCSZR_HSIZE_Pos           (0U)
#define DCMIPP_P0CSCSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P0CSCSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P0CSCSZR_HSIZE               DCMIPP_P0CSCSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 word wide (data 32-bit) */
#define DCMIPP_P0CSCSZR_VSIZE_Pos           (16U)
#define DCMIPP_P0CSCSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P0CSCSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P0CSCSZR_VSIZE               DCMIPP_P0CSCSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P0CSCSZR_POSNEG_Pos          (30U)
#define DCMIPP_P0CSCSZR_POSNEG_Msk          (0x1UL << DCMIPP_P0CSCSZR_POSNEG_Pos)            /*!< 0x40000000 */
#define DCMIPP_P0CSCSZR_POSNEG              DCMIPP_P0CSCSZR_POSNEG_Msk                      /*!< Current value of the POSNEG bit */
#define DCMIPP_P0CSCSZR_ENABLE_Pos          (31U)
#define DCMIPP_P0CSCSZR_ENABLE_Msk          (0x1UL << DCMIPP_P0CSCSZR_ENABLE_Pos)            /*!< 0x80000000 */
#define DCMIPP_P0CSCSZR_ENABLE              DCMIPP_P0CSCSZR_ENABLE_Msk                      /*!< Current value of the ENABLE bit */

/****************  Bit definition for DCMIPP_P0CPPCR register  ****************/
#define DCMIPP_P0CPPCR_SWAPYUV_Pos          (0U)
#define DCMIPP_P0CPPCR_SWAPYUV_Msk          (0x1UL << DCMIPP_P0CPPCR_SWAPYUV_Pos)            /*!< 0x00000001 */
#define DCMIPP_P0CPPCR_SWAPYUV              DCMIPP_P0CPPCR_SWAPYUV_Msk                      /*!< Swaps, within a 32-bit word, byte 0 vs */
#define DCMIPP_P0CPPCR_PAD_Pos              (5U)
#define DCMIPP_P0CPPCR_PAD_Msk              (0x1UL << DCMIPP_P0CPPCR_PAD_Pos)                /*!< 0x00000020 */
#define DCMIPP_P0CPPCR_PAD                  DCMIPP_P0CPPCR_PAD_Msk                          /*!< Current Pad mode for monochrome and raw Bayer 10/12/14 bpp (MSB vs */
#define DCMIPP_P0CPPCR_HEADEREN_Pos         (6U)
#define DCMIPP_P0CPPCR_HEADEREN_Msk         (0x1UL << DCMIPP_P0CPPCR_HEADEREN_Pos)           /*!< 0x00000040 */
#define DCMIPP_P0CPPCR_HEADEREN             DCMIPP_P0CPPCR_HEADEREN_Msk                     /*!< Current CSI header dump enable */
#define DCMIPP_P0CPPCR_BSM_Pos              (7U)
#define DCMIPP_P0CPPCR_BSM_Msk              (0x3UL << DCMIPP_P0CPPCR_BSM_Pos)                /*!< 0x00000180 */
#define DCMIPP_P0CPPCR_BSM                  DCMIPP_P0CPPCR_BSM_Msk                          /*!< Current Byte select mode */
#define DCMIPP_P0CPPCR_OEBS_Pos             (9U)
#define DCMIPP_P0CPPCR_OEBS_Msk             (0x1UL << DCMIPP_P0CPPCR_OEBS_Pos)               /*!< 0x00000200 */
#define DCMIPP_P0CPPCR_OEBS                 DCMIPP_P0CPPCR_OEBS_Msk                         /*!< Current odd/even byte select (byte select start) */
#define DCMIPP_P0CPPCR_LSM_Pos              (10U)
#define DCMIPP_P0CPPCR_LSM_Msk              (0x1UL << DCMIPP_P0CPPCR_LSM_Pos)                /*!< 0x00000400 */
#define DCMIPP_P0CPPCR_LSM                  DCMIPP_P0CPPCR_LSM_Msk                          /*!< Current Line select mode */
#define DCMIPP_P0CPPCR_OELS_Pos             (11U)
#define DCMIPP_P0CPPCR_OELS_Msk             (0x1UL << DCMIPP_P0CPPCR_OELS_Pos)               /*!< 0x00000800 */
#define DCMIPP_P0CPPCR_OELS                 DCMIPP_P0CPPCR_OELS_Msk                         /*!< Current odd/even line select (ine select start) */
#define DCMIPP_P0CPPCR_LINEMULT_Pos         (13U)
#define DCMIPP_P0CPPCR_LINEMULT_Msk         (0x7UL << DCMIPP_P0CPPCR_LINEMULT_Pos)           /*!< 0x0000E000 */
#define DCMIPP_P0CPPCR_LINEMULT             DCMIPP_P0CPPCR_LINEMULT_Msk                     /*!< Current amount of capture completed lines for LINE event and interrupt */

/**************  Bit definition for DCMIPP_P0CPPM0AR1 register  ***************/
#define DCMIPP_P0CPPM0AR1_M0A_Pos           (0U)
#define DCMIPP_P0CPPM0AR1_M0A_Msk           (0xFFFFFFFFUL << DCMIPP_P0CPPM0AR1_M0A_Pos)      /*!< 0xFFFFFFFF */
#define DCMIPP_P0CPPM0AR1_M0A               DCMIPP_P0CPPM0AR1_M0A_Msk                       /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P1HWCFGR register  ****************/
#define DCMIPP_P1HWCFGR_CPLA_Pos            (0U)
#define DCMIPP_P1HWCFGR_CPLA_Msk            (0x3UL << DCMIPP_P1HWCFGR_CPLA_Pos)              /*!< 0x00000003 */
#define DCMIPP_P1HWCFGR_CPLA                DCMIPP_P1HWCFGR_CPLA_Msk                        /*!< Capability for planar buffers */
#define DCMIPP_P1HWCFGR_CDS_Pos             (2U)
#define DCMIPP_P1HWCFGR_CDS_Msk             (0x1UL << DCMIPP_P1HWCFGR_CDS_Pos)               /*!< 0x00000004 */
#define DCMIPP_P1HWCFGR_CDS                 DCMIPP_P1HWCFGR_CDS_Msk                         /*!< Capability for downsize filter */
#define DCMIPP_P1HWCFGR_DBM_Pos             (3U)
#define DCMIPP_P1HWCFGR_DBM_Msk             (0x1UL << DCMIPP_P1HWCFGR_DBM_Pos)               /*!< 0x00000008 */
#define DCMIPP_P1HWCFGR_DBM                 DCMIPP_P1HWCFGR_DBM_Msk                         /*!< Double buffer mode */
#define DCMIPP_P1HWCFGR_CRB_Pos             (4U)
#define DCMIPP_P1HWCFGR_CRB_Msk             (0x3UL << DCMIPP_P1HWCFGR_CRB_Pos)               /*!< 0x00000030 */
#define DCMIPP_P1HWCFGR_CRB                 DCMIPP_P1HWCFGR_CRB_Msk                         /*!< Capability for demosaicing */
#define DCMIPP_P1HWCFGR_CGM_Pos             (6U)
#define DCMIPP_P1HWCFGR_CGM_Msk             (0x3UL << DCMIPP_P1HWCFGR_CGM_Pos)               /*!< 0x000000C0 */
#define DCMIPP_P1HWCFGR_CGM                 DCMIPP_P1HWCFGR_CGM_Msk                         /*!< Capability for gamma conversions */
#define DCMIPP_P1HWCFGR_CROI_Pos            (8U)
#define DCMIPP_P1HWCFGR_CROI_Msk            (0xFUL << DCMIPP_P1HWCFGR_CROI_Pos)              /*!< 0x00000F00 */
#define DCMIPP_P1HWCFGR_CROI                DCMIPP_P1HWCFGR_CROI_Msk                        /*!< Capability for ROI: defines the number of ROIs in the pipe */
#define DCMIPP_P1HWCFGR_CDEC_Pos            (12U)
#define DCMIPP_P1HWCFGR_CDEC_Msk            (0x1UL << DCMIPP_P1HWCFGR_CDEC_Pos)              /*!< 0x00001000 */
#define DCMIPP_P1HWCFGR_CDEC                DCMIPP_P1HWCFGR_CDEC_Msk                        /*!< Capability to decimate before downsize */
#define DCMIPP_P1HWCFGR_CVP_Pos             (13U)
#define DCMIPP_P1HWCFGR_CVP_Msk             (0x1UL << DCMIPP_P1HWCFGR_CVP_Pos)               /*!< 0x00002000 */
#define DCMIPP_P1HWCFGR_CVP                 DCMIPP_P1HWCFGR_CVP_Msk                         /*!< Capability for pipeline virtualization */
#define DCMIPP_P1HWCFGR_CHS_Pos             (16U)
#define DCMIPP_P1HWCFGR_CHS_Msk             (0x1UL << DCMIPP_P1HWCFGR_CHS_Pos)               /*!< 0x00010000 */
#define DCMIPP_P1HWCFGR_CHS                 DCMIPP_P1HWCFGR_CHS_Msk                         /*!< Capability to extract histograms */
#define DCMIPP_P1HWCFGR_CLS_Pos             (17U)
#define DCMIPP_P1HWCFGR_CLS_Msk             (0x1UL << DCMIPP_P1HWCFGR_CLS_Pos)               /*!< 0x00020000 */
#define DCMIPP_P1HWCFGR_CLS                 DCMIPP_P1HWCFGR_CLS_Msk                         /*!< Capability for lens shading */
#define DCMIPP_P1HWCFGR_CFOC_Pos            (18U)
#define DCMIPP_P1HWCFGR_CFOC_Msk            (0x1UL << DCMIPP_P1HWCFGR_CFOC_Pos)              /*!< 0x00040000 */
#define DCMIPP_P1HWCFGR_CFOC                DCMIPP_P1HWCFGR_CFOC_Msk                        /*!< Capability for focus extraction */

/****************  Bit definition for DCMIPP_P1FSCR register  *****************/
#define DCMIPP_P1FSCR_DTIDA_Pos             (0U)
#define DCMIPP_P1FSCR_DTIDA_Msk             (0x3FUL << DCMIPP_P1FSCR_DTIDA_Pos)              /*!< 0x0000003F */
#define DCMIPP_P1FSCR_DTIDA                 DCMIPP_P1FSCR_DTIDA_Msk                         /*!< Data type selection ID A */
#define DCMIPP_P1FSCR_DTIDB_Pos             (8U)
#define DCMIPP_P1FSCR_DTIDB_Msk             (0x3FUL << DCMIPP_P1FSCR_DTIDB_Pos)              /*!< 0x00003F00 */
#define DCMIPP_P1FSCR_DTIDB                 DCMIPP_P1FSCR_DTIDB_Msk                         /*!< Data type selection ID B */
#define DCMIPP_P1FSCR_DTMODE_Pos            (16U)
#define DCMIPP_P1FSCR_DTMODE_Msk            (0x3UL << DCMIPP_P1FSCR_DTMODE_Pos)              /*!< 0x00030000 */
#define DCMIPP_P1FSCR_DTMODE                DCMIPP_P1FSCR_DTMODE_Msk                        /*!< Flow selection mode */
#define DCMIPP_P1FSCR_PIPEDIFF_Pos          (18U)
#define DCMIPP_P1FSCR_PIPEDIFF_Msk          (0x1UL << DCMIPP_P1FSCR_PIPEDIFF_Pos)            /*!< 0x00040000 */
#define DCMIPP_P1FSCR_PIPEDIFF              DCMIPP_P1FSCR_PIPEDIFF_Msk                      /*!< Differentiates Pipe2 from Pipe1 */
#define DCMIPP_P1FSCR_VC_Pos                (19U)
#define DCMIPP_P1FSCR_VC_Msk                (0x3UL << DCMIPP_P1FSCR_VC_Pos)                  /*!< 0x00180000 */
#define DCMIPP_P1FSCR_VC                    DCMIPP_P1FSCR_VC_Msk                            /*!< Flow selection mode */
#define DCMIPP_P1FSCR_FDTF_Pos              (24U)
#define DCMIPP_P1FSCR_FDTF_Msk              (0x3FUL << DCMIPP_P1FSCR_FDTF_Pos)               /*!< 0x3F000000 */
#define DCMIPP_P1FSCR_FDTF                  DCMIPP_P1FSCR_FDTF_Msk                          /*!< Force Datatype format */
#define DCMIPP_P1FSCR_FDTFEN_Pos            (30U)
#define DCMIPP_P1FSCR_FDTFEN_Msk            (0x1UL << DCMIPP_P1FSCR_FDTFEN_Pos)              /*!< 0x40000000 */
#define DCMIPP_P1FSCR_FDTFEN                DCMIPP_P1FSCR_FDTFEN_Msk                        /*!< Force Datatype format enable */
#define DCMIPP_P1FSCR_PIPEN_Pos             (31U)
#define DCMIPP_P1FSCR_PIPEN_Msk             (0x1UL << DCMIPP_P1FSCR_PIPEN_Pos)               /*!< 0x80000000 */
#define DCMIPP_P1FSCR_PIPEN                 DCMIPP_P1FSCR_PIPEN_Msk                         /*!< Activation of PipeN */

/****************  Bit definition for DCMIPP_P1SRCR register  *****************/
#define DCMIPP_P1SRCR_LASTLINE_Pos          (0U)
#define DCMIPP_P1SRCR_LASTLINE_Msk          (0xFFFUL << DCMIPP_P1SRCR_LASTLINE_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P1SRCR_LASTLINE              DCMIPP_P1SRCR_LASTLINE_Msk                      /*!< Amount of following lines to keep when CROPEN = 1 */
#define DCMIPP_P1SRCR_FIRSTLINEDEL_Pos      (12U)
#define DCMIPP_P1SRCR_FIRSTLINEDEL_Msk      (0x7UL << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos)        /*!< 0x00007000 */
#define DCMIPP_P1SRCR_FIRSTLINEDEL          DCMIPP_P1SRCR_FIRSTLINEDEL_Msk                  /*!< Amount of first lines to delete when CROPEN = 1 */
#define DCMIPP_P1SRCR_CROPEN_Pos            (15U)
#define DCMIPP_P1SRCR_CROPEN_Msk            (0x1UL << DCMIPP_P1SRCR_CROPEN_Pos)              /*!< 0x00008000 */
#define DCMIPP_P1SRCR_CROPEN                DCMIPP_P1SRCR_CROPEN_Msk                        /*!< Crop line enable */

/****************  Bit definition for DCMIPP_P1BPRCR register  ****************/
#define DCMIPP_P1BPRCR_ENABLE_Pos           (0U)
#define DCMIPP_P1BPRCR_ENABLE_Msk           (0x1UL << DCMIPP_P1BPRCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1BPRCR_ENABLE               DCMIPP_P1BPRCR_ENABLE_Msk                       /*!< Bad pixel detection must be enabled only for raw Bayer flows, as it corrupts RGB flows */
#define DCMIPP_P1BPRCR_STRENGTH_Pos         (1U)
#define DCMIPP_P1BPRCR_STRENGTH_Msk         (0x7UL << DCMIPP_P1BPRCR_STRENGTH_Pos)           /*!< 0x0000000E */
#define DCMIPP_P1BPRCR_STRENGTH             DCMIPP_P1BPRCR_STRENGTH_Msk                     /*!< Strength (aggressiveness) of the bad pixel detection */

/****************  Bit definition for DCMIPP_P1BPRSR register  ****************/
#define DCMIPP_P1BPRSR_BADCNT_Pos           (0U)
#define DCMIPP_P1BPRSR_BADCNT_Msk           (0xFFFUL << DCMIPP_P1BPRSR_BADCNT_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1BPRSR_BADCNT               DCMIPP_P1BPRSR_BADCNT_Msk                       /*!< Amount of detected bad pixels */

/****************  Bit definition for DCMIPP_P1DECR register  *****************/
#define DCMIPP_P1DECR_ENABLE_Pos            (0U)
#define DCMIPP_P1DECR_ENABLE_Msk            (0x1UL << DCMIPP_P1DECR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P1DECR_ENABLE                DCMIPP_P1DECR_ENABLE_Msk                        /*!< None */
#define DCMIPP_P1DECR_HDEC_Pos              (1U)
#define DCMIPP_P1DECR_HDEC_Msk              (0x3UL << DCMIPP_P1DECR_HDEC_Pos)                /*!< 0x00000006 */
#define DCMIPP_P1DECR_HDEC                  DCMIPP_P1DECR_HDEC_Msk                          /*!< Horizontal decimation ratio */
#define DCMIPP_P1DECR_VDEC_Pos              (3U)
#define DCMIPP_P1DECR_VDEC_Msk              (0x3UL << DCMIPP_P1DECR_VDEC_Pos)                /*!< 0x00000018 */
#define DCMIPP_P1DECR_VDEC                  DCMIPP_P1DECR_VDEC_Msk                          /*!< Vertical decimation ratio */

/****************  Bit definition for DCMIPP_P1BLCCR register  ****************/
#define DCMIPP_P1BLCCR_ENABLE_Pos           (0U)
#define DCMIPP_P1BLCCR_ENABLE_Msk           (0x1UL << DCMIPP_P1BLCCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1BLCCR_ENABLE               DCMIPP_P1BLCCR_ENABLE_Msk                       /*!< Black level calibration */
#define DCMIPP_P1BLCCR_BLCB_Pos             (8U)
#define DCMIPP_P1BLCCR_BLCB_Msk             (0xFFUL << DCMIPP_P1BLCCR_BLCB_Pos)              /*!< 0x0000FF00 */
#define DCMIPP_P1BLCCR_BLCB                 DCMIPP_P1BLCCR_BLCB_Msk                         /*!< Black level calibration - Blue */
#define DCMIPP_P1BLCCR_BLCG_Pos             (16U)
#define DCMIPP_P1BLCCR_BLCG_Msk             (0xFFUL << DCMIPP_P1BLCCR_BLCG_Pos)              /*!< 0x00FF0000 */
#define DCMIPP_P1BLCCR_BLCG                 DCMIPP_P1BLCCR_BLCG_Msk                         /*!< Black level calibration - Green */
#define DCMIPP_P1BLCCR_BLCR_Pos             (24U)
#define DCMIPP_P1BLCCR_BLCR_Msk             (0xFFUL << DCMIPP_P1BLCCR_BLCR_Pos)              /*!< 0xFF000000 */
#define DCMIPP_P1BLCCR_BLCR                 DCMIPP_P1BLCCR_BLCR_Msk                         /*!< Black level calibration - Red */

/****************  Bit definition for DCMIPP_P1EXCR1 register  ****************/
#define DCMIPP_P1EXCR1_ENABLE_Pos           (0U)
#define DCMIPP_P1EXCR1_ENABLE_Msk           (0x1UL << DCMIPP_P1EXCR1_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1EXCR1_ENABLE               DCMIPP_P1EXCR1_ENABLE_Msk                       /*!< Exposure control (multiplication and shift) of all red, green and blue */
#define DCMIPP_P1EXCR1_MULTR_Pos            (20U)
#define DCMIPP_P1EXCR1_MULTR_Msk            (0xFFUL << DCMIPP_P1EXCR1_MULTR_Pos)             /*!< 0x0FF00000 */
#define DCMIPP_P1EXCR1_MULTR                DCMIPP_P1EXCR1_MULTR_Msk                        /*!< Exposure multiplier - Red */
#define DCMIPP_P1EXCR1_SHFR_Pos             (28U)
#define DCMIPP_P1EXCR1_SHFR_Msk             (0x7UL << DCMIPP_P1EXCR1_SHFR_Pos)               /*!< 0x70000000 */
#define DCMIPP_P1EXCR1_SHFR                 DCMIPP_P1EXCR1_SHFR_Msk                         /*!< Exposure shift - Red */

/****************  Bit definition for DCMIPP_P1EXCR2 register  ****************/
#define DCMIPP_P1EXCR2_MULTB_Pos            (4U)
#define DCMIPP_P1EXCR2_MULTB_Msk            (0xFFUL << DCMIPP_P1EXCR2_MULTB_Pos)             /*!< 0x00000FF0 */
#define DCMIPP_P1EXCR2_MULTB                DCMIPP_P1EXCR2_MULTB_Msk                        /*!< Exposure multiplier - Blue */
#define DCMIPP_P1EXCR2_SHFB_Pos             (12U)
#define DCMIPP_P1EXCR2_SHFB_Msk             (0x7UL << DCMIPP_P1EXCR2_SHFB_Pos)               /*!< 0x00007000 */
#define DCMIPP_P1EXCR2_SHFB                 DCMIPP_P1EXCR2_SHFB_Msk                         /*!< Exposure shift - Blue */
#define DCMIPP_P1EXCR2_MULTG_Pos            (20U)
#define DCMIPP_P1EXCR2_MULTG_Msk            (0xFFUL << DCMIPP_P1EXCR2_MULTG_Pos)             /*!< 0x0FF00000 */
#define DCMIPP_P1EXCR2_MULTG                DCMIPP_P1EXCR2_MULTG_Msk                        /*!< Exposure multiplier - Green */
#define DCMIPP_P1EXCR2_SHFG_Pos             (28U)
#define DCMIPP_P1EXCR2_SHFG_Msk             (0x7UL << DCMIPP_P1EXCR2_SHFG_Pos)               /*!< 0x70000000 */
#define DCMIPP_P1EXCR2_SHFG                 DCMIPP_P1EXCR2_SHFG_Msk                         /*!< Exposure shift - Green */

/****************  Bit definition for DCMIPP_P1ST1CR register  ****************/
#define DCMIPP_P1ST1CR_ENABLE_Pos           (0U)
#define DCMIPP_P1ST1CR_ENABLE_Msk           (0x1UL << DCMIPP_P1ST1CR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1ST1CR_ENABLE               DCMIPP_P1ST1CR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1ST1CR_BINS_Pos             (2U)
#define DCMIPP_P1ST1CR_BINS_Msk             (0x3UL << DCMIPP_P1ST1CR_BINS_Pos)               /*!< 0x0000000C */
#define DCMIPP_P1ST1CR_BINS                 DCMIPP_P1ST1CR_BINS_Msk                         /*!< Current bin definition */
#define DCMIPP_P1ST1CR_SRC_Pos              (4U)
#define DCMIPP_P1ST1CR_SRC_Msk              (0x7UL << DCMIPP_P1ST1CR_SRC_Pos)                /*!< 0x00000070 */
#define DCMIPP_P1ST1CR_SRC                  DCMIPP_P1ST1CR_SRC_Msk                          /*!< Statistics source */
#define DCMIPP_P1ST1CR_MODE_Pos             (7U)
#define DCMIPP_P1ST1CR_MODE_Msk             (0x1UL << DCMIPP_P1ST1CR_MODE_Pos)               /*!< 0x00000080 */
#define DCMIPP_P1ST1CR_MODE                 DCMIPP_P1ST1CR_MODE_Msk                         /*!< Statistics mode */

/****************  Bit definition for DCMIPP_P1ST2CR register  ****************/
#define DCMIPP_P1ST2CR_ENABLE_Pos           (0U)
#define DCMIPP_P1ST2CR_ENABLE_Msk           (0x1UL << DCMIPP_P1ST2CR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1ST2CR_ENABLE               DCMIPP_P1ST2CR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1ST2CR_BINS_Pos             (2U)
#define DCMIPP_P1ST2CR_BINS_Msk             (0x3UL << DCMIPP_P1ST2CR_BINS_Pos)               /*!< 0x0000000C */
#define DCMIPP_P1ST2CR_BINS                 DCMIPP_P1ST2CR_BINS_Msk                         /*!< Bin definition */
#define DCMIPP_P1ST2CR_SRC_Pos              (4U)
#define DCMIPP_P1ST2CR_SRC_Msk              (0x7UL << DCMIPP_P1ST2CR_SRC_Pos)                /*!< 0x00000070 */
#define DCMIPP_P1ST2CR_SRC                  DCMIPP_P1ST2CR_SRC_Msk                          /*!< Statistics source */
#define DCMIPP_P1ST2CR_MODE_Pos             (7U)
#define DCMIPP_P1ST2CR_MODE_Msk             (0x1UL << DCMIPP_P1ST2CR_MODE_Pos)               /*!< 0x00000080 */
#define DCMIPP_P1ST2CR_MODE                 DCMIPP_P1ST2CR_MODE_Msk                         /*!< Statistics mode */

/****************  Bit definition for DCMIPP_P1ST3CR register  ****************/
#define DCMIPP_P1ST3CR_ENABLE_Pos           (0U)
#define DCMIPP_P1ST3CR_ENABLE_Msk           (0x1UL << DCMIPP_P1ST3CR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1ST3CR_ENABLE               DCMIPP_P1ST3CR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1ST3CR_BINS_Pos             (2U)
#define DCMIPP_P1ST3CR_BINS_Msk             (0x3UL << DCMIPP_P1ST3CR_BINS_Pos)               /*!< 0x0000000C */
#define DCMIPP_P1ST3CR_BINS                 DCMIPP_P1ST3CR_BINS_Msk                         /*!< Bin definition */
#define DCMIPP_P1ST3CR_SRC_Pos              (4U)
#define DCMIPP_P1ST3CR_SRC_Msk              (0x7UL << DCMIPP_P1ST3CR_SRC_Pos)                /*!< 0x00000070 */
#define DCMIPP_P1ST3CR_SRC                  DCMIPP_P1ST3CR_SRC_Msk                          /*!< Statistics source */
#define DCMIPP_P1ST3CR_MODE_Pos             (7U)
#define DCMIPP_P1ST3CR_MODE_Msk             (0x1UL << DCMIPP_P1ST3CR_MODE_Pos)               /*!< 0x00000080 */
#define DCMIPP_P1ST3CR_MODE                 DCMIPP_P1ST3CR_MODE_Msk                         /*!< Statistics mode */

/****************  Bit definition for DCMIPP_P1STSTR register  ****************/
#define DCMIPP_P1STSTR_HSTART_Pos           (0U)
#define DCMIPP_P1STSTR_HSTART_Msk           (0xFFFUL << DCMIPP_P1STSTR_HSTART_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1STSTR_HSTART               DCMIPP_P1STSTR_HSTART_Msk                       /*!< Horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P1STSTR_VSTART_Pos           (16U)
#define DCMIPP_P1STSTR_VSTART_Msk           (0xFFFUL << DCMIPP_P1STSTR_VSTART_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1STSTR_VSTART               DCMIPP_P1STSTR_VSTART_Msk                       /*!< Vertical start, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P1STSZR register  ****************/
#define DCMIPP_P1STSZR_HSIZE_Pos            (0U)
#define DCMIPP_P1STSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P1STSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P1STSZR_HSIZE                DCMIPP_P1STSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1STSZR_VSIZE_Pos            (16U)
#define DCMIPP_P1STSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P1STSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P1STSZR_VSIZE                DCMIPP_P1STSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P1STSZR_CROPEN_Pos           (31U)
#define DCMIPP_P1STSZR_CROPEN_Msk           (0x1UL << DCMIPP_P1STSZR_CROPEN_Pos)             /*!< 0x80000000 */
#define DCMIPP_P1STSZR_CROPEN               DCMIPP_P1STSZR_CROPEN_Msk                       /*!< None */

/****************  Bit definition for DCMIPP_P1ST1SR register  ****************/
#define DCMIPP_P1ST1SR_ACCU_Pos             (0U)
#define DCMIPP_P1ST1SR_ACCU_Msk             (0xFFFFFFUL << DCMIPP_P1ST1SR_ACCU_Pos)          /*!< 0x00FFFFFF */
#define DCMIPP_P1ST1SR_ACCU                 DCMIPP_P1ST1SR_ACCU_Msk                         /*!< Accumulation result, divided by 256 */

/****************  Bit definition for DCMIPP_P1ST2SR register  ****************/
#define DCMIPP_P1ST2SR_ACCU_Pos             (0U)
#define DCMIPP_P1ST2SR_ACCU_Msk             (0xFFFFFFUL << DCMIPP_P1ST2SR_ACCU_Pos)          /*!< 0x00FFFFFF */
#define DCMIPP_P1ST2SR_ACCU                 DCMIPP_P1ST2SR_ACCU_Msk                         /*!< accumulation result, divided by 256 */

/****************  Bit definition for DCMIPP_P1ST3SR register  ****************/
#define DCMIPP_P1ST3SR_ACCU_Pos             (0U)
#define DCMIPP_P1ST3SR_ACCU_Msk             (0xFFFFFFUL << DCMIPP_P1ST3SR_ACCU_Pos)          /*!< 0x00FFFFFF */
#define DCMIPP_P1ST3SR_ACCU                 DCMIPP_P1ST3SR_ACCU_Msk                         /*!< accumulation result, divided by 256 */

/****************  Bit definition for DCMIPP_P1DMCR register  *****************/
#define DCMIPP_P1DMCR_ENABLE_Pos            (0U)
#define DCMIPP_P1DMCR_ENABLE_Msk            (0x1UL << DCMIPP_P1DMCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P1DMCR_ENABLE                DCMIPP_P1DMCR_ENABLE_Msk                        /*!< None */
#define DCMIPP_P1DMCR_TYPE_Pos              (1U)
#define DCMIPP_P1DMCR_TYPE_Msk              (0x3UL << DCMIPP_P1DMCR_TYPE_Pos)                /*!< 0x00000006 */
#define DCMIPP_P1DMCR_TYPE                  DCMIPP_P1DMCR_TYPE_Msk                          /*!< Raw Bayer type */
#define DCMIPP_P1DMCR_PEAK_Pos              (16U)
#define DCMIPP_P1DMCR_PEAK_Msk              (0x7UL << DCMIPP_P1DMCR_PEAK_Pos)                /*!< 0x00070000 */
#define DCMIPP_P1DMCR_PEAK                  DCMIPP_P1DMCR_PEAK_Msk                          /*!< Strength of the peak detection */
#define DCMIPP_P1DMCR_LINEV_Pos             (20U)
#define DCMIPP_P1DMCR_LINEV_Msk             (0x7UL << DCMIPP_P1DMCR_LINEV_Pos)               /*!< 0x00700000 */
#define DCMIPP_P1DMCR_LINEV                 DCMIPP_P1DMCR_LINEV_Msk                         /*!< Strength of the vertical line detection */
#define DCMIPP_P1DMCR_LINEH_Pos             (24U)
#define DCMIPP_P1DMCR_LINEH_Msk             (0x7UL << DCMIPP_P1DMCR_LINEH_Pos)               /*!< 0x07000000 */
#define DCMIPP_P1DMCR_LINEH                 DCMIPP_P1DMCR_LINEH_Msk                         /*!< Strength of the horizontal line detection */
#define DCMIPP_P1DMCR_EDGE_Pos              (28U)
#define DCMIPP_P1DMCR_EDGE_Msk              (0x7UL << DCMIPP_P1DMCR_EDGE_Pos)                /*!< 0x70000000 */
#define DCMIPP_P1DMCR_EDGE                  DCMIPP_P1DMCR_EDGE_Msk                          /*!< Strength of the edge detection */

/****************  Bit definition for DCMIPP_P1CCCR register  *****************/
#define DCMIPP_P1CCCR_ENABLE_Pos            (0U)
#define DCMIPP_P1CCCR_ENABLE_Msk            (0x1UL << DCMIPP_P1CCCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P1CCCR_ENABLE                DCMIPP_P1CCCR_ENABLE_Msk                        /*!< None */
#define DCMIPP_P1CCCR_TYPE_Pos              (1U)
#define DCMIPP_P1CCCR_TYPE_Msk              (0x1UL << DCMIPP_P1CCCR_TYPE_Pos)                /*!< 0x00000002 */
#define DCMIPP_P1CCCR_TYPE                  DCMIPP_P1CCCR_TYPE_Msk                          /*!< output samples type used while CLAMP is activated */
#define DCMIPP_P1CCCR_CLAMP_Pos             (2U)
#define DCMIPP_P1CCCR_CLAMP_Msk             (0x1UL << DCMIPP_P1CCCR_CLAMP_Pos)               /*!< 0x00000004 */
#define DCMIPP_P1CCCR_CLAMP                 DCMIPP_P1CCCR_CLAMP_Msk                         /*!< Clamp the output samples */

/****************  Bit definition for DCMIPP_P1CCRR1 register  ****************/
#define DCMIPP_P1CCRR1_RR_Pos               (0U)
#define DCMIPP_P1CCRR1_RR_Msk               (0x7FFUL << DCMIPP_P1CCRR1_RR_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCRR1_RR                   DCMIPP_P1CCRR1_RR_Msk                           /*!< Coefficient row 1 column 1 of the matrix */
#define DCMIPP_P1CCRR1_RG_Pos               (16U)
#define DCMIPP_P1CCRR1_RG_Msk               (0x7FFUL << DCMIPP_P1CCRR1_RG_Pos)               /*!< 0x07FF0000 */
#define DCMIPP_P1CCRR1_RG                   DCMIPP_P1CCRR1_RG_Msk                           /*!< Coefficient row 1 column 2 of the matrix */

/****************  Bit definition for DCMIPP_P1CCRR2 register  ****************/
#define DCMIPP_P1CCRR2_RB_Pos               (0U)
#define DCMIPP_P1CCRR2_RB_Msk               (0x7FFUL << DCMIPP_P1CCRR2_RB_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCRR2_RB                   DCMIPP_P1CCRR2_RB_Msk                           /*!< Coefficient row 1 column 3 of the matrix */
#define DCMIPP_P1CCRR2_RA_Pos               (16U)
#define DCMIPP_P1CCRR2_RA_Msk               (0x3FFUL << DCMIPP_P1CCRR2_RA_Pos)               /*!< 0x03FF0000 */
#define DCMIPP_P1CCRR2_RA                   DCMIPP_P1CCRR2_RA_Msk                           /*!< Coefficient row 1 of the added column (signed integer value) */

/****************  Bit definition for DCMIPP_P1CCGR1 register  ****************/
#define DCMIPP_P1CCGR1_GR_Pos               (0U)
#define DCMIPP_P1CCGR1_GR_Msk               (0x7FFUL << DCMIPP_P1CCGR1_GR_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCGR1_GR                   DCMIPP_P1CCGR1_GR_Msk                           /*!< Coefficient row 2 column 1 of the matrix */
#define DCMIPP_P1CCGR1_GG_Pos               (16U)
#define DCMIPP_P1CCGR1_GG_Msk               (0x7FFUL << DCMIPP_P1CCGR1_GG_Pos)               /*!< 0x07FF0000 */
#define DCMIPP_P1CCGR1_GG                   DCMIPP_P1CCGR1_GG_Msk                           /*!< Coefficient row 2 column 2 of the matrix */

/****************  Bit definition for DCMIPP_P1CCGR2 register  ****************/
#define DCMIPP_P1CCGR2_GB_Pos               (0U)
#define DCMIPP_P1CCGR2_GB_Msk               (0x7FFUL << DCMIPP_P1CCGR2_GB_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCGR2_GB                   DCMIPP_P1CCGR2_GB_Msk                           /*!< Coefficient row 2 column 3 of the matrix */
#define DCMIPP_P1CCGR2_GA_Pos               (16U)
#define DCMIPP_P1CCGR2_GA_Msk               (0x3FFUL << DCMIPP_P1CCGR2_GA_Pos)               /*!< 0x03FF0000 */
#define DCMIPP_P1CCGR2_GA                   DCMIPP_P1CCGR2_GA_Msk                           /*!< Coefficient row 2 of the added column (signed integer value) */

/****************  Bit definition for DCMIPP_P1CCBR1 register  ****************/
#define DCMIPP_P1CCBR1_BR_Pos               (0U)
#define DCMIPP_P1CCBR1_BR_Msk               (0x7FFUL << DCMIPP_P1CCBR1_BR_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCBR1_BR                   DCMIPP_P1CCBR1_BR_Msk                           /*!< Coefficient row 3 column 1 of the matrix */
#define DCMIPP_P1CCBR1_BG_Pos               (16U)
#define DCMIPP_P1CCBR1_BG_Msk               (0x7FFUL << DCMIPP_P1CCBR1_BG_Pos)               /*!< 0x07FF0000 */
#define DCMIPP_P1CCBR1_BG                   DCMIPP_P1CCBR1_BG_Msk                           /*!< Coefficient row 3 column 2 of the matrix */

/****************  Bit definition for DCMIPP_P1CCBR2 register  ****************/
#define DCMIPP_P1CCBR2_BB_Pos               (0U)
#define DCMIPP_P1CCBR2_BB_Msk               (0x7FFUL << DCMIPP_P1CCBR2_BB_Pos)               /*!< 0x000007FF */
#define DCMIPP_P1CCBR2_BB                   DCMIPP_P1CCBR2_BB_Msk                           /*!< Coefficient row 3 column 3 of the matrix */
#define DCMIPP_P1CCBR2_BA_Pos               (16U)
#define DCMIPP_P1CCBR2_BA_Msk               (0x3FFUL << DCMIPP_P1CCBR2_BA_Pos)               /*!< 0x03FF0000 */
#define DCMIPP_P1CCBR2_BA                   DCMIPP_P1CCBR2_BA_Msk                           /*!< Coefficient row 3 of the added column (signed integer value) */

/****************  Bit definition for DCMIPP_P1CTCR1 register  ****************/
#define DCMIPP_P1CTCR1_ENABLE_Pos           (0U)
#define DCMIPP_P1CTCR1_ENABLE_Msk           (0x1UL << DCMIPP_P1CTCR1_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1CTCR1_ENABLE               DCMIPP_P1CTCR1_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1CTCR1_LUM0_Pos             (9U)
#define DCMIPP_P1CTCR1_LUM0_Msk             (0x3FUL << DCMIPP_P1CTCR1_LUM0_Pos)              /*!< 0x00007E00 */
#define DCMIPP_P1CTCR1_LUM0                 DCMIPP_P1CTCR1_LUM0_Msk                         /*!< Luminance increase for input luminance of 0 (increase is idle with LUMx = 16) */

/****************  Bit definition for DCMIPP_P1CTCR2 register  ****************/
#define DCMIPP_P1CTCR2_LUM4_Pos             (1U)
#define DCMIPP_P1CTCR2_LUM4_Msk             (0x3FUL << DCMIPP_P1CTCR2_LUM4_Pos)              /*!< 0x0000007E */
#define DCMIPP_P1CTCR2_LUM4                 DCMIPP_P1CTCR2_LUM4_Msk                         /*!< Luminance increase for input luminance of 128 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR2_LUM3_Pos             (9U)
#define DCMIPP_P1CTCR2_LUM3_Msk             (0x3FUL << DCMIPP_P1CTCR2_LUM3_Pos)              /*!< 0x00007E00 */
#define DCMIPP_P1CTCR2_LUM3                 DCMIPP_P1CTCR2_LUM3_Msk                         /*!< Luminance increase for input luminance of 96 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR2_LUM2_Pos             (17U)
#define DCMIPP_P1CTCR2_LUM2_Msk             (0x3FUL << DCMIPP_P1CTCR2_LUM2_Pos)              /*!< 0x007E0000 */
#define DCMIPP_P1CTCR2_LUM2                 DCMIPP_P1CTCR2_LUM2_Msk                         /*!< Luminance increase for input luminance of 64 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR2_LUM1_Pos             (25U)
#define DCMIPP_P1CTCR2_LUM1_Msk             (0x3FUL << DCMIPP_P1CTCR2_LUM1_Pos)              /*!< 0x7E000000 */
#define DCMIPP_P1CTCR2_LUM1                 DCMIPP_P1CTCR2_LUM1_Msk                         /*!< Luminance increase for input luminance of 32 (increase is idle with LUMx = 16) */

/****************  Bit definition for DCMIPP_P1CTCR3 register  ****************/
#define DCMIPP_P1CTCR3_LUM8_Pos             (1U)
#define DCMIPP_P1CTCR3_LUM8_Msk             (0x3FUL << DCMIPP_P1CTCR3_LUM8_Pos)              /*!< 0x0000007E */
#define DCMIPP_P1CTCR3_LUM8                 DCMIPP_P1CTCR3_LUM8_Msk                         /*!< Luminance increase for input luminance of 256 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR3_LUM7_Pos             (9U)
#define DCMIPP_P1CTCR3_LUM7_Msk             (0x3FUL << DCMIPP_P1CTCR3_LUM7_Pos)              /*!< 0x00007E00 */
#define DCMIPP_P1CTCR3_LUM7                 DCMIPP_P1CTCR3_LUM7_Msk                         /*!< Luminance increase for input luminance of 224 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR3_LUM6_Pos             (17U)
#define DCMIPP_P1CTCR3_LUM6_Msk             (0x3FUL << DCMIPP_P1CTCR3_LUM6_Pos)              /*!< 0x007E0000 */
#define DCMIPP_P1CTCR3_LUM6                 DCMIPP_P1CTCR3_LUM6_Msk                         /*!< Luminance increase for input luminance of 192 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CTCR3_LUM5_Pos             (25U)
#define DCMIPP_P1CTCR3_LUM5_Msk             (0x3FUL << DCMIPP_P1CTCR3_LUM5_Pos)              /*!< 0x7E000000 */
#define DCMIPP_P1CTCR3_LUM5                 DCMIPP_P1CTCR3_LUM5_Msk                         /*!< Luminance increase for input luminance of 160 (increase is idle with LUMx = 16) */

/****************  Bit definition for DCMIPP_P1HSCR register  *****************/
#define DCMIPP_P1HSCR_EN_Pos                (0U)
#define DCMIPP_P1HSCR_EN_Msk                (0x1UL << DCMIPP_P1HSCR_EN_Pos)                  /*!< 0x00000001 */
#define DCMIPP_P1HSCR_EN                    DCMIPP_P1HSCR_EN_Msk                            /*!< Histogram enable */
#define DCMIPP_P1HSCR_SRC_Pos               (1U)
#define DCMIPP_P1HSCR_SRC_Msk               (0x7UL << DCMIPP_P1HSCR_SRC_Pos)                 /*!< 0x0000000E */
#define DCMIPP_P1HSCR_SRC                   DCMIPP_P1HSCR_SRC_Msk                           /*!< Source across the pipeline, where to sample pixels and extract the histograms: */
#define DCMIPP_P1HSCR_HREG_Pos              (4U)
#define DCMIPP_P1HSCR_HREG_Msk              (0xFUL << DCMIPP_P1HSCR_HREG_Pos)                /*!< 0x000000F0 */
#define DCMIPP_P1HSCR_HREG                  DCMIPP_P1HSCR_HREG_Msk                          /*!< Amount of horizontal regions per frame, from which to extract the histograms */
#define DCMIPP_P1HSCR_VREG_Pos              (8U)
#define DCMIPP_P1HSCR_VREG_Msk              (0xFUL << DCMIPP_P1HSCR_VREG_Pos)                /*!< 0x00000F00 */
#define DCMIPP_P1HSCR_VREG                  DCMIPP_P1HSCR_VREG_Msk                          /*!< Amount of vertical regions per frame, from which to extract the histograms: */
#define DCMIPP_P1HSCR_HDEC_Pos              (12U)
#define DCMIPP_P1HSCR_HDEC_Msk              (0x7UL << DCMIPP_P1HSCR_HDEC_Pos)                /*!< 0x00007000 */
#define DCMIPP_P1HSCR_HDEC                  DCMIPP_P1HSCR_HDEC_Msk                          /*!< Horizontal decimation ratio */
#define DCMIPP_P1HSCR_VDEC_Pos              (16U)
#define DCMIPP_P1HSCR_VDEC_Msk              (0x7UL << DCMIPP_P1HSCR_VDEC_Pos)                /*!< 0x00070000 */
#define DCMIPP_P1HSCR_VDEC                  DCMIPP_P1HSCR_VDEC_Msk                          /*!< Vertical decimation ratio */
#define DCMIPP_P1HSCR_COMP_Pos              (20U)
#define DCMIPP_P1HSCR_COMP_Msk              (0x7UL << DCMIPP_P1HSCR_COMP_Pos)                /*!< 0x00700000 */
#define DCMIPP_P1HSCR_COMP                  DCMIPP_P1HSCR_COMP_Msk                          /*!< Component selected for the histograms: */
#define DCMIPP_P1HSCR_DYN_Pos               (24U)
#define DCMIPP_P1HSCR_DYN_Msk               (0x3UL << DCMIPP_P1HSCR_DYN_Pos)                 /*!< 0x03000000 */
#define DCMIPP_P1HSCR_DYN                   DCMIPP_P1HSCR_DYN_Msk                           /*!< Dynamic of the pixel value, when extracting the histogram */
#define DCMIPP_P1HSCR_BIN_Pos               (26U)
#define DCMIPP_P1HSCR_BIN_Msk               (0x3UL << DCMIPP_P1HSCR_BIN_Pos)                 /*!< 0x0C000000 */
#define DCMIPP_P1HSCR_BIN                   DCMIPP_P1HSCR_BIN_Msk                           /*!< Bin amount per histogram */

/****************  Bit definition for DCMIPP_P1HSSTR register  ****************/
#define DCMIPP_P1HSSTR_HSTART_Pos           (0U)
#define DCMIPP_P1HSSTR_HSTART_Msk           (0xFFFUL << DCMIPP_P1HSSTR_HSTART_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1HSSTR_HSTART               DCMIPP_P1HSSTR_HSTART_Msk                       /*!< Horizontal start, from 0 to 4094 pixels high */
#define DCMIPP_P1HSSTR_VSTART_Pos           (16U)
#define DCMIPP_P1HSSTR_VSTART_Msk           (0xFFFUL << DCMIPP_P1HSSTR_VSTART_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1HSSTR_VSTART               DCMIPP_P1HSSTR_VSTART_Msk                       /*!< Vertical start, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P1HSSZR register  ****************/
#define DCMIPP_P1HSSZR_HSIZE_Pos            (0U)
#define DCMIPP_P1HSSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P1HSSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P1HSSZR_HSIZE                DCMIPP_P1HSSZR_HSIZE_Msk                        /*!< Horizontal size of each histogram region, from 0 to 4094 pixels high */
#define DCMIPP_P1HSSZR_VSIZE_Pos            (16U)
#define DCMIPP_P1HSSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P1HSSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P1HSSZR_VSIZE                DCMIPP_P1HSSZR_VSIZE_Msk                        /*!< Vertical size of each histogram region, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P1HSMAR1 register  ****************/
#define DCMIPP_P1HSMAR1_MA_Pos              (0U)
#define DCMIPP_P1HSMAR1_MA_Msk              (0xFFFFFFFFUL << DCMIPP_P1HSMAR1_MA_Pos)         /*!< 0xFFFFFFFF */
#define DCMIPP_P1HSMAR1_MA                  DCMIPP_P1HSMAR1_MA_Msk                          /*!< Memory address */

/***************  Bit definition for DCMIPP_P1HSSMAR register  ****************/
#define DCMIPP_P1HSSMAR_MA_Pos              (0U)
#define DCMIPP_P1HSSMAR_MA_Msk              (0xFFFFFFFFUL << DCMIPP_P1HSSMAR_MA_Pos)         /*!< 0xFFFFFFFF */
#define DCMIPP_P1HSSMAR_MA                  DCMIPP_P1HSSMAR_MA_Msk                          /*!< Memory address */

/****************  Bit definition for DCMIPP_P1FCTCR register  ****************/
#define DCMIPP_P1FCTCR_FRATE_Pos            (0U)
#define DCMIPP_P1FCTCR_FRATE_Msk            (0x3UL << DCMIPP_P1FCTCR_FRATE_Pos)              /*!< 0x00000003 */
#define DCMIPP_P1FCTCR_FRATE                DCMIPP_P1FCTCR_FRATE_Msk                        /*!< Frame capture rate control */
#define DCMIPP_P1FCTCR_CPTMODE_Pos          (2U)
#define DCMIPP_P1FCTCR_CPTMODE_Msk          (0x1UL << DCMIPP_P1FCTCR_CPTMODE_Pos)            /*!< 0x00000004 */
#define DCMIPP_P1FCTCR_CPTMODE              DCMIPP_P1FCTCR_CPTMODE_Msk                      /*!< Capture mode */
#define DCMIPP_P1FCTCR_CPTREQ_Pos           (3U)
#define DCMIPP_P1FCTCR_CPTREQ_Msk           (0x1UL << DCMIPP_P1FCTCR_CPTREQ_Pos)             /*!< 0x00000008 */
#define DCMIPP_P1FCTCR_CPTREQ               DCMIPP_P1FCTCR_CPTREQ_Msk                       /*!< Capture requested */

/****************  Bit definition for DCMIPP_P1CRSTR register  ****************/
#define DCMIPP_P1CRSTR_HSTART_Pos           (0U)
#define DCMIPP_P1CRSTR_HSTART_Msk           (0xFFFUL << DCMIPP_P1CRSTR_HSTART_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1CRSTR_HSTART               DCMIPP_P1CRSTR_HSTART_Msk                       /*!< Horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P1CRSTR_VSTART_Pos           (16U)
#define DCMIPP_P1CRSTR_VSTART_Msk           (0xFFFUL << DCMIPP_P1CRSTR_VSTART_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1CRSTR_VSTART               DCMIPP_P1CRSTR_VSTART_Msk                       /*!< Vertical start, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P1CRSZR register  ****************/
#define DCMIPP_P1CRSZR_HSIZE_Pos            (0U)
#define DCMIPP_P1CRSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P1CRSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P1CRSZR_HSIZE                DCMIPP_P1CRSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1CRSZR_VSIZE_Pos            (16U)
#define DCMIPP_P1CRSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P1CRSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P1CRSZR_VSIZE                DCMIPP_P1CRSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P1CRSZR_ENABLE_Pos           (31U)
#define DCMIPP_P1CRSZR_ENABLE_Msk           (0x1UL << DCMIPP_P1CRSZR_ENABLE_Pos)             /*!< 0x80000000 */
#define DCMIPP_P1CRSZR_ENABLE               DCMIPP_P1CRSZR_ENABLE_Msk                       /*!< None */

/****************  Bit definition for DCMIPP_P1DCCR register  *****************/
#define DCMIPP_P1DCCR_ENABLE_Pos            (0U)
#define DCMIPP_P1DCCR_ENABLE_Msk            (0x1UL << DCMIPP_P1DCCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P1DCCR_ENABLE                DCMIPP_P1DCCR_ENABLE_Msk                        /*!< None */
#define DCMIPP_P1DCCR_HDEC_Pos              (1U)
#define DCMIPP_P1DCCR_HDEC_Msk              (0x3UL << DCMIPP_P1DCCR_HDEC_Pos)                /*!< 0x00000006 */
#define DCMIPP_P1DCCR_HDEC                  DCMIPP_P1DCCR_HDEC_Msk                          /*!< Horizontal decimation ratio */
#define DCMIPP_P1DCCR_VDEC_Pos              (3U)
#define DCMIPP_P1DCCR_VDEC_Msk              (0x3UL << DCMIPP_P1DCCR_VDEC_Pos)                /*!< 0x00000018 */
#define DCMIPP_P1DCCR_VDEC                  DCMIPP_P1DCCR_VDEC_Msk                          /*!< Vertical decimation ratio */

/****************  Bit definition for DCMIPP_P1DSCR register  *****************/
#define DCMIPP_P1DSCR_HDIV_Pos              (0U)
#define DCMIPP_P1DSCR_HDIV_Msk              (0x3FFUL << DCMIPP_P1DSCR_HDIV_Pos)              /*!< 0x000003FF */
#define DCMIPP_P1DSCR_HDIV                  DCMIPP_P1DSCR_HDIV_Msk                          /*!< Horizontal division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P1DSCR_VDIV_Pos              (16U)
#define DCMIPP_P1DSCR_VDIV_Msk              (0x3FFUL << DCMIPP_P1DSCR_VDIV_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1DSCR_VDIV                  DCMIPP_P1DSCR_VDIV_Msk                          /*!< Vertical division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P1DSCR_ENABLE_Pos            (31U)
#define DCMIPP_P1DSCR_ENABLE_Msk            (0x1UL << DCMIPP_P1DSCR_ENABLE_Pos)              /*!< 0x80000000 */
#define DCMIPP_P1DSCR_ENABLE                DCMIPP_P1DSCR_ENABLE_Msk                        /*!< None */

/***************  Bit definition for DCMIPP_P1DSRTIOR register  ***************/
#define DCMIPP_P1DSRTIOR_HRATIO_Pos         (0U)
#define DCMIPP_P1DSRTIOR_HRATIO_Msk         (0xFFFFUL << DCMIPP_P1DSRTIOR_HRATIO_Pos)        /*!< 0x0000FFFF */
#define DCMIPP_P1DSRTIOR_HRATIO             DCMIPP_P1DSRTIOR_HRATIO_Msk                     /*!< Horizontal ratio, from 8192 (1x) to 65535 (8x) */
#define DCMIPP_P1DSRTIOR_VRATIO_Pos         (16U)
#define DCMIPP_P1DSRTIOR_VRATIO_Msk         (0xFFFFUL << DCMIPP_P1DSRTIOR_VRATIO_Pos)        /*!< 0xFFFF0000 */
#define DCMIPP_P1DSRTIOR_VRATIO             DCMIPP_P1DSRTIOR_VRATIO_Msk                     /*!< Vertical ratio, from 8192 (1x) to 65535 (8x) */

/****************  Bit definition for DCMIPP_P1DSSZR register  ****************/
#define DCMIPP_P1DSSZR_HSIZE_Pos            (0U)
#define DCMIPP_P1DSSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P1DSSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P1DSSZR_HSIZE                DCMIPP_P1DSSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1DSSZR_VSIZE_Pos            (16U)
#define DCMIPP_P1DSSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P1DSSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P1DSSZR_VSIZE                DCMIPP_P1DSSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P1GMCR register  *****************/
#define DCMIPP_P1GMCR_ENABLE_Pos            (0U)
#define DCMIPP_P1GMCR_ENABLE_Msk            (0x1UL << DCMIPP_P1GMCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P1GMCR_ENABLE                DCMIPP_P1GMCR_ENABLE_Msk                        /*!< None */

/****************  Bit definition for DCMIPP_P1YUVCR register  ****************/
#define DCMIPP_P1YUVCR_ENABLE_Pos           (0U)
#define DCMIPP_P1YUVCR_ENABLE_Msk           (0x1UL << DCMIPP_P1YUVCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1YUVCR_ENABLE               DCMIPP_P1YUVCR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1YUVCR_TYPE_Pos             (1U)
#define DCMIPP_P1YUVCR_TYPE_Msk             (0x1UL << DCMIPP_P1YUVCR_TYPE_Pos)               /*!< 0x00000002 */
#define DCMIPP_P1YUVCR_TYPE                 DCMIPP_P1YUVCR_TYPE_Msk                         /*!< Output samples type used while CLAMP is activated */
#define DCMIPP_P1YUVCR_CLAMP_Pos            (2U)
#define DCMIPP_P1YUVCR_CLAMP_Msk            (0x1UL << DCMIPP_P1YUVCR_CLAMP_Pos)              /*!< 0x00000004 */
#define DCMIPP_P1YUVCR_CLAMP                DCMIPP_P1YUVCR_CLAMP_Msk                        /*!< Clamp the output samples */

/***************  Bit definition for DCMIPP_P1YUVRR1 register  ****************/
#define DCMIPP_P1YUVRR1_RR_Pos              (0U)
#define DCMIPP_P1YUVRR1_RR_Msk              (0x7FFUL << DCMIPP_P1YUVRR1_RR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVRR1_RR                  DCMIPP_P1YUVRR1_RR_Msk                          /*!< Coefficient row 1 column 1 of the matrix */
#define DCMIPP_P1YUVRR1_RG_Pos              (16U)
#define DCMIPP_P1YUVRR1_RG_Msk              (0x7FFUL << DCMIPP_P1YUVRR1_RG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1YUVRR1_RG                  DCMIPP_P1YUVRR1_RG_Msk                          /*!< Coefficient row 1 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1YUVRR2 register  ****************/
#define DCMIPP_P1YUVRR2_RB_Pos              (0U)
#define DCMIPP_P1YUVRR2_RB_Msk              (0x7FFUL << DCMIPP_P1YUVRR2_RB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVRR2_RB                  DCMIPP_P1YUVRR2_RB_Msk                          /*!< Coefficient row 1 column 3 of the matrix */
#define DCMIPP_P1YUVRR2_RA_Pos              (16U)
#define DCMIPP_P1YUVRR2_RA_Msk              (0x3FFUL << DCMIPP_P1YUVRR2_RA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1YUVRR2_RA                  DCMIPP_P1YUVRR2_RA_Msk                          /*!< Coefficient row 1 of the added column (signed integer value) */

/***************  Bit definition for DCMIPP_P1YUVGR1 register  ****************/
#define DCMIPP_P1YUVGR1_GR_Pos              (0U)
#define DCMIPP_P1YUVGR1_GR_Msk              (0x7FFUL << DCMIPP_P1YUVGR1_GR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVGR1_GR                  DCMIPP_P1YUVGR1_GR_Msk                          /*!< Coefficient row 2 column 1 of the matrix */
#define DCMIPP_P1YUVGR1_GG_Pos              (16U)
#define DCMIPP_P1YUVGR1_GG_Msk              (0x7FFUL << DCMIPP_P1YUVGR1_GG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1YUVGR1_GG                  DCMIPP_P1YUVGR1_GG_Msk                          /*!< Coefficient row 2 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1YUVGR2 register  ****************/
#define DCMIPP_P1YUVGR2_GB_Pos              (0U)
#define DCMIPP_P1YUVGR2_GB_Msk              (0x7FFUL << DCMIPP_P1YUVGR2_GB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVGR2_GB                  DCMIPP_P1YUVGR2_GB_Msk                          /*!< Coefficient row 2 column 3 of the matrix */
#define DCMIPP_P1YUVGR2_GA_Pos              (16U)
#define DCMIPP_P1YUVGR2_GA_Msk              (0x3FFUL << DCMIPP_P1YUVGR2_GA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1YUVGR2_GA                  DCMIPP_P1YUVGR2_GA_Msk                          /*!< Coefficient row 2 of the added column (signed integer value) */

/***************  Bit definition for DCMIPP_P1YUVBR1 register  ****************/
#define DCMIPP_P1YUVBR1_BR_Pos              (0U)
#define DCMIPP_P1YUVBR1_BR_Msk              (0x7FFUL << DCMIPP_P1YUVBR1_BR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVBR1_BR                  DCMIPP_P1YUVBR1_BR_Msk                          /*!< Coefficient row 3 column 1 of the matrix */
#define DCMIPP_P1YUVBR1_BG_Pos              (16U)
#define DCMIPP_P1YUVBR1_BG_Msk              (0x7FFUL << DCMIPP_P1YUVBR1_BG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1YUVBR1_BG                  DCMIPP_P1YUVBR1_BG_Msk                          /*!< Coefficient row 3 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1YUVBR2 register  ****************/
#define DCMIPP_P1YUVBR2_BB_Pos              (0U)
#define DCMIPP_P1YUVBR2_BB_Msk              (0x7FFUL << DCMIPP_P1YUVBR2_BB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1YUVBR2_BB                  DCMIPP_P1YUVBR2_BB_Msk                          /*!< Coefficient row 3 column 3 of the matrix */
#define DCMIPP_P1YUVBR2_BA_Pos              (16U)
#define DCMIPP_P1YUVBR2_BA_Msk              (0x3FFUL << DCMIPP_P1YUVBR2_BA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1YUVBR2_BA                  DCMIPP_P1YUVBR2_BA_Msk                          /*!< Coefficient row 3 of the added column (signed integer value) */

/****************  Bit definition for DCMIPP_P1PPCR register  *****************/
#define DCMIPP_P1PPCR_FORMAT_Pos            (0U)
#define DCMIPP_P1PPCR_FORMAT_Msk            (0xFUL << DCMIPP_P1PPCR_FORMAT_Pos)              /*!< 0x0000000F */
#define DCMIPP_P1PPCR_FORMAT                DCMIPP_P1PPCR_FORMAT_Msk                        /*!< Memory format */
#define DCMIPP_P1PPCR_SWAPRB_Pos            (4U)
#define DCMIPP_P1PPCR_SWAPRB_Msk            (0x1UL << DCMIPP_P1PPCR_SWAPRB_Pos)              /*!< 0x00000010 */
#define DCMIPP_P1PPCR_SWAPRB                DCMIPP_P1PPCR_SWAPRB_Msk                        /*!< Swaps R-vs-B components if RGB, and U-vs-V components if YUV */
#define DCMIPP_P1PPCR_LINEMULT_Pos          (13U)
#define DCMIPP_P1PPCR_LINEMULT_Msk          (0x7UL << DCMIPP_P1PPCR_LINEMULT_Pos)            /*!< 0x0000E000 */
#define DCMIPP_P1PPCR_LINEMULT              DCMIPP_P1PPCR_LINEMULT_Msk                      /*!< Amount of capture completed lines for LINE Event and Interrupt */

/***************  Bit definition for DCMIPP_P1PPM0AR1 register  ***************/
#define DCMIPP_P1PPM0AR1_M0A_Pos            (0U)
#define DCMIPP_P1PPM0AR1_M0A_Msk            (0xFFFFFFFFUL << DCMIPP_P1PPM0AR1_M0A_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_P1PPM0AR1_M0A                DCMIPP_P1PPM0AR1_M0A_Msk                        /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P1PPM0PR register  ****************/
#define DCMIPP_P1PPM0PR_PITCH_Pos           (0U)
#define DCMIPP_P1PPM0PR_PITCH_Msk           (0x7FFFUL << DCMIPP_P1PPM0PR_PITCH_Pos)          /*!< 0x00007FFF */
#define DCMIPP_P1PPM0PR_PITCH               DCMIPP_P1PPM0PR_PITCH_Msk                       /*!< Number of bytes between the address of two consecutive lines */

/***************  Bit definition for DCMIPP_P1STM0AR register  ****************/
#define DCMIPP_P1STM0AR_M0A_Pos             (0U)
#define DCMIPP_P1STM0AR_M0A_Msk             (0xFFFFFFFFUL << DCMIPP_P1STM0AR_M0A_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P1STM0AR_M0A                 DCMIPP_P1STM0AR_M0A_Msk                         /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P1PPM1AR1 register  ***************/
#define DCMIPP_P1PPM1AR1_M1A_Pos            (0U)
#define DCMIPP_P1PPM1AR1_M1A_Msk            (0xFFFFFFFFUL << DCMIPP_P1PPM1AR1_M1A_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_P1PPM1AR1_M1A                DCMIPP_P1PPM1AR1_M1A_Msk                        /*!< Memory1 address */

/***************  Bit definition for DCMIPP_P1PPM1PR register  ****************/
#define DCMIPP_P1PPM1PR_PITCH_Pos           (0U)
#define DCMIPP_P1PPM1PR_PITCH_Msk           (0x7FFFUL << DCMIPP_P1PPM1PR_PITCH_Pos)          /*!< 0x00007FFF */
#define DCMIPP_P1PPM1PR_PITCH               DCMIPP_P1PPM1PR_PITCH_Msk                       /*!< Number of bytes between the address of two consecutive lines */

/***************  Bit definition for DCMIPP_P1STM1AR register  ****************/
#define DCMIPP_P1STM1AR_M1A_Pos             (0U)
#define DCMIPP_P1STM1AR_M1A_Msk             (0xFFFFFFFFUL << DCMIPP_P1STM1AR_M1A_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P1STM1AR_M1A                 DCMIPP_P1STM1AR_M1A_Msk                         /*!< Memory1 address */

/***************  Bit definition for DCMIPP_P1PPM2AR1 register  ***************/
#define DCMIPP_P1PPM2AR1_M2A_Pos            (0U)
#define DCMIPP_P1PPM2AR1_M2A_Msk            (0xFFFFFFFFUL << DCMIPP_P1PPM2AR1_M2A_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_P1PPM2AR1_M2A                DCMIPP_P1PPM2AR1_M2A_Msk                        /*!< Memory 2 address */

/***************  Bit definition for DCMIPP_P1STM2AR register  ****************/
#define DCMIPP_P1STM2AR_M2A_Pos             (0U)
#define DCMIPP_P1STM2AR_M2A_Msk             (0xFFFFFFFFUL << DCMIPP_P1STM2AR_M2A_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P1STM2AR_M2A                 DCMIPP_P1STM2AR_M2A_Msk                         /*!< Memory2 address */

/*****************  Bit definition for DCMIPP_P1IER register  *****************/
#define DCMIPP_P1IER_LINEIE_Pos             (0U)
#define DCMIPP_P1IER_LINEIE_Msk             (0x1UL << DCMIPP_P1IER_LINEIE_Pos)               /*!< 0x00000001 */
#define DCMIPP_P1IER_LINEIE                 DCMIPP_P1IER_LINEIE_Msk                         /*!< Multi-line capture completed interrupt enable */
#define DCMIPP_P1IER_FRAMEIE_Pos            (1U)
#define DCMIPP_P1IER_FRAMEIE_Msk            (0x1UL << DCMIPP_P1IER_FRAMEIE_Pos)              /*!< 0x00000002 */
#define DCMIPP_P1IER_FRAMEIE                DCMIPP_P1IER_FRAMEIE_Msk                        /*!< Frame capture completed interrupt enable */
#define DCMIPP_P1IER_VSYNCIE_Pos            (2U)
#define DCMIPP_P1IER_VSYNCIE_Msk            (0x1UL << DCMIPP_P1IER_VSYNCIE_Pos)              /*!< 0x00000004 */
#define DCMIPP_P1IER_VSYNCIE                DCMIPP_P1IER_VSYNCIE_Msk                        /*!< VSYNC interrupt enable */
#define DCMIPP_P1IER_STFRAMEIE_Pos          (4U)
#define DCMIPP_P1IER_STFRAMEIE_Msk          (0x1UL << DCMIPP_P1IER_STFRAMEIE_Pos)            /*!< 0x00000010 */
#define DCMIPP_P1IER_STFRAMEIE              DCMIPP_P1IER_STFRAMEIE_Msk                      /*!< Statistic frame capture interrupt enable */
#define DCMIPP_P1IER_STBCIE_Pos             (5U)
#define DCMIPP_P1IER_STBCIE_Msk             (0x1UL << DCMIPP_P1IER_STBCIE_Pos)               /*!< 0x00000020 */
#define DCMIPP_P1IER_STBCIE                 DCMIPP_P1IER_STBCIE_Msk                         /*!< Statistic bad configuration interrupt enable */
#define DCMIPP_P1IER_STOVRIE_Pos            (6U)
#define DCMIPP_P1IER_STOVRIE_Msk            (0x1UL << DCMIPP_P1IER_STOVRIE_Pos)              /*!< 0x00000040 */
#define DCMIPP_P1IER_STOVRIE                DCMIPP_P1IER_STOVRIE_Msk                        /*!< Statistic overrun interrupt enable */
#define DCMIPP_P1IER_OVRIE_Pos              (7U)
#define DCMIPP_P1IER_OVRIE_Msk              (0x1UL << DCMIPP_P1IER_OVRIE_Pos)                /*!< 0x00000080 */
#define DCMIPP_P1IER_OVRIE                  DCMIPP_P1IER_OVRIE_Msk                          /*!< Overrun interrupt enable */

/*****************  Bit definition for DCMIPP_P1SR register  ******************/
#define DCMIPP_P1SR_LINEF_Pos               (0U)
#define DCMIPP_P1SR_LINEF_Msk               (0x1UL << DCMIPP_P1SR_LINEF_Pos)                 /*!< 0x00000001 */
#define DCMIPP_P1SR_LINEF                   DCMIPP_P1SR_LINEF_Msk                           /*!< Multi-line capture completed raw interrupt status */
#define DCMIPP_P1SR_FRAMEF_Pos              (1U)
#define DCMIPP_P1SR_FRAMEF_Msk              (0x1UL << DCMIPP_P1SR_FRAMEF_Pos)                /*!< 0x00000002 */
#define DCMIPP_P1SR_FRAMEF                  DCMIPP_P1SR_FRAMEF_Msk                          /*!< Frame capture completed raw interrupt status */
#define DCMIPP_P1SR_VSYNCF_Pos              (2U)
#define DCMIPP_P1SR_VSYNCF_Msk              (0x1UL << DCMIPP_P1SR_VSYNCF_Pos)                /*!< 0x00000004 */
#define DCMIPP_P1SR_VSYNCF                  DCMIPP_P1SR_VSYNCF_Msk                          /*!< VSYNC raw interrupt status */
#define DCMIPP_P1SR_STFRAMEF_Pos            (4U)
#define DCMIPP_P1SR_STFRAMEF_Msk            (0x1UL << DCMIPP_P1SR_STFRAMEF_Pos)              /*!< 0x00000010 */
#define DCMIPP_P1SR_STFRAMEF                DCMIPP_P1SR_STFRAMEF_Msk                        /*!< Statistic frame capture interrupt status */
#define DCMIPP_P1SR_STBCF_Pos               (5U)
#define DCMIPP_P1SR_STBCF_Msk               (0x1UL << DCMIPP_P1SR_STBCF_Pos)                 /*!< 0x00000020 */
#define DCMIPP_P1SR_STBCF                   DCMIPP_P1SR_STBCF_Msk                           /*!< Statistic bad configuration interrupt status */
#define DCMIPP_P1SR_STOVRF_Pos              (6U)
#define DCMIPP_P1SR_STOVRF_Msk              (0x1UL << DCMIPP_P1SR_STOVRF_Pos)                /*!< 0x00000040 */
#define DCMIPP_P1SR_STOVRF                  DCMIPP_P1SR_STOVRF_Msk                          /*!< Statistic overrun interrupt status */
#define DCMIPP_P1SR_OVRF_Pos                (7U)
#define DCMIPP_P1SR_OVRF_Msk                (0x1UL << DCMIPP_P1SR_OVRF_Pos)                  /*!< 0x00000080 */
#define DCMIPP_P1SR_OVRF                    DCMIPP_P1SR_OVRF_Msk                            /*!< Overrun raw interrupt status */
#define DCMIPP_P1SR_LSTLINE_Pos             (16U)
#define DCMIPP_P1SR_LSTLINE_Msk             (0x1UL << DCMIPP_P1SR_LSTLINE_Pos)               /*!< 0x00010000 */
#define DCMIPP_P1SR_LSTLINE                 DCMIPP_P1SR_LSTLINE_Msk                         /*!< Last line LSB bit, sampled at frame capture complete event */
#define DCMIPP_P1SR_LSTFRM_Pos              (17U)
#define DCMIPP_P1SR_LSTFRM_Msk              (0x1UL << DCMIPP_P1SR_LSTFRM_Pos)                /*!< 0x00020000 */
#define DCMIPP_P1SR_LSTFRM                  DCMIPP_P1SR_LSTFRM_Msk                          /*!< Last frame LSB bit, sampled at frame capture complete event */
#define DCMIPP_P1SR_CPTACT_Pos              (23U)
#define DCMIPP_P1SR_CPTACT_Msk              (0x1UL << DCMIPP_P1SR_CPTACT_Pos)                /*!< 0x00800000 */
#define DCMIPP_P1SR_CPTACT                  DCMIPP_P1SR_CPTACT_Msk                          /*!< Capture immediate status */

/*****************  Bit definition for DCMIPP_P1FCR register  *****************/
#define DCMIPP_P1FCR_CLINEF_Pos             (0U)
#define DCMIPP_P1FCR_CLINEF_Msk             (0x1UL << DCMIPP_P1FCR_CLINEF_Pos)               /*!< 0x00000001 */
#define DCMIPP_P1FCR_CLINEF                 DCMIPP_P1FCR_CLINEF_Msk                         /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_P1FCR_CFRAMEF_Pos            (1U)
#define DCMIPP_P1FCR_CFRAMEF_Msk            (0x1UL << DCMIPP_P1FCR_CFRAMEF_Pos)              /*!< 0x00000002 */
#define DCMIPP_P1FCR_CFRAMEF                DCMIPP_P1FCR_CFRAMEF_Msk                        /*!< Frame capture complete interrupt status clear */
#define DCMIPP_P1FCR_CVSYNCF_Pos            (2U)
#define DCMIPP_P1FCR_CVSYNCF_Msk            (0x1UL << DCMIPP_P1FCR_CVSYNCF_Pos)              /*!< 0x00000004 */
#define DCMIPP_P1FCR_CVSYNCF                DCMIPP_P1FCR_CVSYNCF_Msk                        /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_P1FCR_CSTFRAMEF_Pos          (4U)
#define DCMIPP_P1FCR_CSTFRAMEF_Msk          (0x1UL << DCMIPP_P1FCR_CSTFRAMEF_Pos)            /*!< 0x00000010 */
#define DCMIPP_P1FCR_CSTFRAMEF              DCMIPP_P1FCR_CSTFRAMEF_Msk                      /*!< Statistic frame capture interrupt clear */
#define DCMIPP_P1FCR_CSTBCF_Pos             (5U)
#define DCMIPP_P1FCR_CSTBCF_Msk             (0x1UL << DCMIPP_P1FCR_CSTBCF_Pos)               /*!< 0x00000020 */
#define DCMIPP_P1FCR_CSTBCF                 DCMIPP_P1FCR_CSTBCF_Msk                         /*!< Statistic bad configuration interrupt clear */
#define DCMIPP_P1FCR_CSTOVRF_Pos            (6U)
#define DCMIPP_P1FCR_CSTOVRF_Msk            (0x1UL << DCMIPP_P1FCR_CSTOVRF_Pos)              /*!< 0x00000040 */
#define DCMIPP_P1FCR_CSTOVRF                DCMIPP_P1FCR_CSTOVRF_Msk                        /*!< Statistic overrun interrupt clear */
#define DCMIPP_P1FCR_COVRF_Pos              (7U)
#define DCMIPP_P1FCR_COVRF_Msk              (0x1UL << DCMIPP_P1FCR_COVRF_Pos)                /*!< 0x00000080 */
#define DCMIPP_P1FCR_COVRF                  DCMIPP_P1FCR_COVRF_Msk                          /*!< Overrun interrupt status clear */

/****************  Bit definition for DCMIPP_P1CFSCR register  ****************/
#define DCMIPP_P1CFSCR_DTIDA_Pos            (0U)
#define DCMIPP_P1CFSCR_DTIDA_Msk            (0x3FUL << DCMIPP_P1CFSCR_DTIDA_Pos)             /*!< 0x0000003F */
#define DCMIPP_P1CFSCR_DTIDA                DCMIPP_P1CFSCR_DTIDA_Msk                        /*!< Current data type ID A */
#define DCMIPP_P1CFSCR_DTIDB_Pos            (8U)
#define DCMIPP_P1CFSCR_DTIDB_Msk            (0x3FUL << DCMIPP_P1CFSCR_DTIDB_Pos)             /*!< 0x00003F00 */
#define DCMIPP_P1CFSCR_DTIDB                DCMIPP_P1CFSCR_DTIDB_Msk                        /*!< Current data type ID B */
#define DCMIPP_P1CFSCR_DTMODE_Pos           (16U)
#define DCMIPP_P1CFSCR_DTMODE_Msk           (0x3UL << DCMIPP_P1CFSCR_DTMODE_Pos)             /*!< 0x00030000 */
#define DCMIPP_P1CFSCR_DTMODE               DCMIPP_P1CFSCR_DTMODE_Msk                       /*!< Flow selection mode */
#define DCMIPP_P1CFSCR_PIPEDIFF_Pos         (18U)
#define DCMIPP_P1CFSCR_PIPEDIFF_Msk         (0x1UL << DCMIPP_P1CFSCR_PIPEDIFF_Pos)           /*!< 0x00040000 */
#define DCMIPP_P1CFSCR_PIPEDIFF             DCMIPP_P1CFSCR_PIPEDIFF_Msk                     /*!< Current differentiates Pipe2 vs */
#define DCMIPP_P1CFSCR_VC_Pos               (19U)
#define DCMIPP_P1CFSCR_VC_Msk               (0x3UL << DCMIPP_P1CFSCR_VC_Pos)                 /*!< 0x00180000 */
#define DCMIPP_P1CFSCR_VC                   DCMIPP_P1CFSCR_VC_Msk                           /*!< Current flow selection mode */
#define DCMIPP_P1CFSCR_FDTF_Pos             (24U)
#define DCMIPP_P1CFSCR_FDTF_Msk             (0x3FUL << DCMIPP_P1CFSCR_FDTF_Pos)              /*!< 0x3F000000 */
#define DCMIPP_P1CFSCR_FDTF                 DCMIPP_P1CFSCR_FDTF_Msk                         /*!< Current force data type format */
#define DCMIPP_P1CFSCR_FDTFEN_Pos           (30U)
#define DCMIPP_P1CFSCR_FDTFEN_Msk           (0x1UL << DCMIPP_P1CFSCR_FDTFEN_Pos)             /*!< 0x40000000 */
#define DCMIPP_P1CFSCR_FDTFEN               DCMIPP_P1CFSCR_FDTFEN_Msk                       /*!< Current force data type format enable */
#define DCMIPP_P1CFSCR_PIPEN_Pos            (31U)
#define DCMIPP_P1CFSCR_PIPEN_Msk            (0x1UL << DCMIPP_P1CFSCR_PIPEN_Pos)              /*!< 0x80000000 */
#define DCMIPP_P1CFSCR_PIPEN                DCMIPP_P1CFSCR_PIPEN_Msk                        /*!< Current activation of PipeN */

/***************  Bit definition for DCMIPP_P1CBPRCR register  ****************/
#define DCMIPP_P1CBPRCR_ENABLE_Pos          (0U)
#define DCMIPP_P1CBPRCR_ENABLE_Msk          (0x1UL << DCMIPP_P1CBPRCR_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CBPRCR_ENABLE              DCMIPP_P1CBPRCR_ENABLE_Msk                      /*!< Current status of enable bit */
#define DCMIPP_P1CBPRCR_STRENGTH_Pos        (1U)
#define DCMIPP_P1CBPRCR_STRENGTH_Msk        (0x7UL << DCMIPP_P1CBPRCR_STRENGTH_Pos)          /*!< 0x0000000E */
#define DCMIPP_P1CBPRCR_STRENGTH            DCMIPP_P1CBPRCR_STRENGTH_Msk                    /*!< Current strength (aggressiveness) of the bad pixel detection: */

/***************  Bit definition for DCMIPP_P1CBLCCR register  ****************/
#define DCMIPP_P1CBLCCR_ENABLE_Pos          (0U)
#define DCMIPP_P1CBLCCR_ENABLE_Msk          (0x1UL << DCMIPP_P1CBLCCR_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CBLCCR_ENABLE              DCMIPP_P1CBLCCR_ENABLE_Msk                      /*!< For current black level calibration */
#define DCMIPP_P1CBLCCR_BLCB_Pos            (8U)
#define DCMIPP_P1CBLCCR_BLCB_Msk            (0xFFUL << DCMIPP_P1CBLCCR_BLCB_Pos)             /*!< 0x0000FF00 */
#define DCMIPP_P1CBLCCR_BLCB                DCMIPP_P1CBLCCR_BLCB_Msk                        /*!< Current black level calibration - Blue */
#define DCMIPP_P1CBLCCR_BLCG_Pos            (16U)
#define DCMIPP_P1CBLCCR_BLCG_Msk            (0xFFUL << DCMIPP_P1CBLCCR_BLCG_Pos)             /*!< 0x00FF0000 */
#define DCMIPP_P1CBLCCR_BLCG                DCMIPP_P1CBLCCR_BLCG_Msk                        /*!< Current black level calibration - Green */
#define DCMIPP_P1CBLCCR_BLCR_Pos            (24U)
#define DCMIPP_P1CBLCCR_BLCR_Msk            (0xFFUL << DCMIPP_P1CBLCCR_BLCR_Pos)             /*!< 0xFF000000 */
#define DCMIPP_P1CBLCCR_BLCR                DCMIPP_P1CBLCCR_BLCR_Msk                        /*!< Current black level calibration - Red */

/***************  Bit definition for DCMIPP_P1CEXCR1 register  ****************/
#define DCMIPP_P1CEXCR1_ENABLE_Pos          (0U)
#define DCMIPP_P1CEXCR1_ENABLE_Msk          (0x1UL << DCMIPP_P1CEXCR1_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CEXCR1_ENABLE              DCMIPP_P1CEXCR1_ENABLE_Msk                      /*!< for exposure control (multiplication and shift) */
#define DCMIPP_P1CEXCR1_MULTR_Pos           (20U)
#define DCMIPP_P1CEXCR1_MULTR_Msk           (0xFFUL << DCMIPP_P1CEXCR1_MULTR_Pos)            /*!< 0x0FF00000 */
#define DCMIPP_P1CEXCR1_MULTR               DCMIPP_P1CEXCR1_MULTR_Msk                       /*!< Current exposure multiplier - Red */
#define DCMIPP_P1CEXCR1_SHFR_Pos            (28U)
#define DCMIPP_P1CEXCR1_SHFR_Msk            (0x7UL << DCMIPP_P1CEXCR1_SHFR_Pos)              /*!< 0x70000000 */
#define DCMIPP_P1CEXCR1_SHFR                DCMIPP_P1CEXCR1_SHFR_Msk                        /*!< Current exposure shift - Red */

/***************  Bit definition for DCMIPP_P1CEXCR2 register  ****************/
#define DCMIPP_P1CEXCR2_MULTB_Pos           (4U)
#define DCMIPP_P1CEXCR2_MULTB_Msk           (0xFFUL << DCMIPP_P1CEXCR2_MULTB_Pos)            /*!< 0x00000FF0 */
#define DCMIPP_P1CEXCR2_MULTB               DCMIPP_P1CEXCR2_MULTB_Msk                       /*!< Current exposure multiplier - Blue */
#define DCMIPP_P1CEXCR2_SHFB_Pos            (12U)
#define DCMIPP_P1CEXCR2_SHFB_Msk            (0x7UL << DCMIPP_P1CEXCR2_SHFB_Pos)              /*!< 0x00007000 */
#define DCMIPP_P1CEXCR2_SHFB                DCMIPP_P1CEXCR2_SHFB_Msk                        /*!< Current exposure shift - Blue */
#define DCMIPP_P1CEXCR2_MULTG_Pos           (20U)
#define DCMIPP_P1CEXCR2_MULTG_Msk           (0xFFUL << DCMIPP_P1CEXCR2_MULTG_Pos)            /*!< 0x0FF00000 */
#define DCMIPP_P1CEXCR2_MULTG               DCMIPP_P1CEXCR2_MULTG_Msk                       /*!< Current exposure multiplier - Green */
#define DCMIPP_P1CEXCR2_SHFG_Pos            (28U)
#define DCMIPP_P1CEXCR2_SHFG_Msk            (0x7UL << DCMIPP_P1CEXCR2_SHFG_Pos)              /*!< 0x70000000 */
#define DCMIPP_P1CEXCR2_SHFG                DCMIPP_P1CEXCR2_SHFG_Msk                        /*!< Current exposure shift - Green */

/***************  Bit definition for DCMIPP_P1CST1CR register  ****************/
#define DCMIPP_P1CST1CR_ENABLE_Pos          (0U)
#define DCMIPP_P1CST1CR_ENABLE_Msk          (0x1UL << DCMIPP_P1CST1CR_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CST1CR_ENABLE              DCMIPP_P1CST1CR_ENABLE_Msk                      /*!< Current enable bit value */
#define DCMIPP_P1CST1CR_BINS_Pos            (2U)
#define DCMIPP_P1CST1CR_BINS_Msk            (0x3UL << DCMIPP_P1CST1CR_BINS_Pos)              /*!< 0x0000000C */
#define DCMIPP_P1CST1CR_BINS                DCMIPP_P1CST1CR_BINS_Msk                        /*!< Current bin definition */
#define DCMIPP_P1CST1CR_SRC_Pos             (4U)
#define DCMIPP_P1CST1CR_SRC_Msk             (0x7UL << DCMIPP_P1CST1CR_SRC_Pos)               /*!< 0x00000070 */
#define DCMIPP_P1CST1CR_SRC                 DCMIPP_P1CST1CR_SRC_Msk                         /*!< Current source of statistics */
#define DCMIPP_P1CST1CR_MODE_Pos            (7U)
#define DCMIPP_P1CST1CR_MODE_Msk            (0x1UL << DCMIPP_P1CST1CR_MODE_Pos)              /*!< 0x00000080 */
#define DCMIPP_P1CST1CR_MODE                DCMIPP_P1CST1CR_MODE_Msk                        /*!< Current statistics mode */
#define DCMIPP_P1CST1CR_ACCU_Pos            (8U)
#define DCMIPP_P1CST1CR_ACCU_Msk            (0xFFFFFFUL << DCMIPP_P1CST1CR_ACCU_Pos)         /*!< 0xFFFFFF00 */
#define DCMIPP_P1CST1CR_ACCU                DCMIPP_P1CST1CR_ACCU_Msk                        /*!< Current accumulation result, divided by 256 */

/***************  Bit definition for DCMIPP_P1CST2CR register  ****************/
#define DCMIPP_P1CST2CR_ENABLE_Pos          (0U)
#define DCMIPP_P1CST2CR_ENABLE_Msk          (0x1UL << DCMIPP_P1CST2CR_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CST2CR_ENABLE              DCMIPP_P1CST2CR_ENABLE_Msk                      /*!< None */
#define DCMIPP_P1CST2CR_BINS_Pos            (2U)
#define DCMIPP_P1CST2CR_BINS_Msk            (0x3UL << DCMIPP_P1CST2CR_BINS_Pos)              /*!< 0x0000000C */
#define DCMIPP_P1CST2CR_BINS                DCMIPP_P1CST2CR_BINS_Msk                        /*!< Bin definition */
#define DCMIPP_P1CST2CR_SRC_Pos             (4U)
#define DCMIPP_P1CST2CR_SRC_Msk             (0x7UL << DCMIPP_P1CST2CR_SRC_Pos)               /*!< 0x00000070 */
#define DCMIPP_P1CST2CR_SRC                 DCMIPP_P1CST2CR_SRC_Msk                         /*!< Statistics source */
#define DCMIPP_P1CST2CR_MODE_Pos            (7U)
#define DCMIPP_P1CST2CR_MODE_Msk            (0x1UL << DCMIPP_P1CST2CR_MODE_Pos)              /*!< 0x00000080 */
#define DCMIPP_P1CST2CR_MODE                DCMIPP_P1CST2CR_MODE_Msk                        /*!< Statistics mode */
#define DCMIPP_P1CST2CR_ACCU_Pos            (8U)
#define DCMIPP_P1CST2CR_ACCU_Msk            (0xFFFFFFUL << DCMIPP_P1CST2CR_ACCU_Pos)         /*!< 0xFFFFFF00 */
#define DCMIPP_P1CST2CR_ACCU                DCMIPP_P1CST2CR_ACCU_Msk                        /*!< Accumulation result, divided by 256 */

/***************  Bit definition for DCMIPP_P1CST3CR register  ****************/
#define DCMIPP_P1CST3CR_ENABLE_Pos          (0U)
#define DCMIPP_P1CST3CR_ENABLE_Msk          (0x1UL << DCMIPP_P1CST3CR_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CST3CR_ENABLE              DCMIPP_P1CST3CR_ENABLE_Msk                      /*!< None */
#define DCMIPP_P1CST3CR_BINS_Pos            (2U)
#define DCMIPP_P1CST3CR_BINS_Msk            (0x3UL << DCMIPP_P1CST3CR_BINS_Pos)              /*!< 0x0000000C */
#define DCMIPP_P1CST3CR_BINS                DCMIPP_P1CST3CR_BINS_Msk                        /*!< Current bin definition */
#define DCMIPP_P1CST3CR_SRC_Pos             (4U)
#define DCMIPP_P1CST3CR_SRC_Msk             (0x7UL << DCMIPP_P1CST3CR_SRC_Pos)               /*!< 0x00000070 */
#define DCMIPP_P1CST3CR_SRC                 DCMIPP_P1CST3CR_SRC_Msk                         /*!< Statistics source */
#define DCMIPP_P1CST3CR_MODE_Pos            (7U)
#define DCMIPP_P1CST3CR_MODE_Msk            (0x1UL << DCMIPP_P1CST3CR_MODE_Pos)              /*!< 0x00000080 */
#define DCMIPP_P1CST3CR_MODE                DCMIPP_P1CST3CR_MODE_Msk                        /*!< Statistics mode */
#define DCMIPP_P1CST3CR_ACCU_Pos            (8U)
#define DCMIPP_P1CST3CR_ACCU_Msk            (0xFFFFFFUL << DCMIPP_P1CST3CR_ACCU_Pos)         /*!< 0xFFFFFF00 */
#define DCMIPP_P1CST3CR_ACCU                DCMIPP_P1CST3CR_ACCU_Msk                        /*!< Accumulation result, divided by 256 */

/***************  Bit definition for DCMIPP_P1CSTSTR register  ****************/
#define DCMIPP_P1CSTSTR_HSTART_Pos          (0U)
#define DCMIPP_P1CSTSTR_HSTART_Msk          (0xFFFUL << DCMIPP_P1CSTSTR_HSTART_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P1CSTSTR_HSTART              DCMIPP_P1CSTSTR_HSTART_Msk                      /*!< Current horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P1CSTSTR_VSTART_Pos          (16U)
#define DCMIPP_P1CSTSTR_VSTART_Msk          (0xFFFUL << DCMIPP_P1CSTSTR_VSTART_Pos)          /*!< 0x0FFF0000 */
#define DCMIPP_P1CSTSTR_VSTART              DCMIPP_P1CSTSTR_VSTART_Msk                      /*!< Current vertical start, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P1CSTSZR register  ****************/
#define DCMIPP_P1CSTSZR_HSIZE_Pos           (0U)
#define DCMIPP_P1CSTSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P1CSTSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1CSTSZR_HSIZE               DCMIPP_P1CSTSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1CSTSZR_VSIZE_Pos           (16U)
#define DCMIPP_P1CSTSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P1CSTSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1CSTSZR_VSIZE               DCMIPP_P1CSTSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P1CSTSZR_CROPEN_Pos          (31U)
#define DCMIPP_P1CSTSZR_CROPEN_Msk          (0x1UL << DCMIPP_P1CSTSZR_CROPEN_Pos)            /*!< 0x80000000 */
#define DCMIPP_P1CSTSZR_CROPEN              DCMIPP_P1CSTSZR_CROPEN_Msk                      /*!< Current CROPEN bit value */

/****************  Bit definition for DCMIPP_P1CCCCR register  ****************/
#define DCMIPP_P1CCCCR_ENABLE_Pos           (0U)
#define DCMIPP_P1CCCCR_ENABLE_Msk           (0x1UL << DCMIPP_P1CCCCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1CCCCR_ENABLE               DCMIPP_P1CCCCR_ENABLE_Msk                       /*!< Current value applied */
#define DCMIPP_P1CCCCR_TYPE_Pos             (1U)
#define DCMIPP_P1CCCCR_TYPE_Msk             (0x1UL << DCMIPP_P1CCCCR_TYPE_Pos)               /*!< 0x00000002 */
#define DCMIPP_P1CCCCR_TYPE                 DCMIPP_P1CCCCR_TYPE_Msk                         /*!< Output samples type used while CLAMP is activated */
#define DCMIPP_P1CCCCR_CLAMP_Pos            (2U)
#define DCMIPP_P1CCCCR_CLAMP_Msk            (0x1UL << DCMIPP_P1CCCCR_CLAMP_Pos)              /*!< 0x00000004 */
#define DCMIPP_P1CCCCR_CLAMP                DCMIPP_P1CCCCR_CLAMP_Msk                        /*!< Clamp the output samples */

/***************  Bit definition for DCMIPP_P1CCCRR1 register  ****************/
#define DCMIPP_P1CCCRR1_RR_Pos              (0U)
#define DCMIPP_P1CCCRR1_RR_Msk              (0x7FFUL << DCMIPP_P1CCCRR1_RR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCRR1_RR                  DCMIPP_P1CCCRR1_RR_Msk                          /*!< Current coefficient row 1 column 1 of the matrix */
#define DCMIPP_P1CCCRR1_RG_Pos              (16U)
#define DCMIPP_P1CCCRR1_RG_Msk              (0x7FFUL << DCMIPP_P1CCCRR1_RG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1CCCRR1_RG                  DCMIPP_P1CCCRR1_RG_Msk                          /*!< Current coefficient row 1 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1CCCRR2 register  ****************/
#define DCMIPP_P1CCCRR2_RB_Pos              (0U)
#define DCMIPP_P1CCCRR2_RB_Msk              (0x7FFUL << DCMIPP_P1CCCRR2_RB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCRR2_RB                  DCMIPP_P1CCCRR2_RB_Msk                          /*!< Current coefficient row 1 column 3 of the matrix */
#define DCMIPP_P1CCCRR2_RA_Pos              (16U)
#define DCMIPP_P1CCCRR2_RA_Msk              (0x3FFUL << DCMIPP_P1CCCRR2_RA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1CCCRR2_RA                  DCMIPP_P1CCCRR2_RA_Msk                          /*!< Current coefficient row 1 of the added column (signed integer value) */

/***************  Bit definition for DCMIPP_P1CCCGR1 register  ****************/
#define DCMIPP_P1CCCGR1_GR_Pos              (0U)
#define DCMIPP_P1CCCGR1_GR_Msk              (0x7FFUL << DCMIPP_P1CCCGR1_GR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCGR1_GR                  DCMIPP_P1CCCGR1_GR_Msk                          /*!< Current coefficient row 2 column 1 of the matrix */
#define DCMIPP_P1CCCGR1_GG_Pos              (16U)
#define DCMIPP_P1CCCGR1_GG_Msk              (0x7FFUL << DCMIPP_P1CCCGR1_GG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1CCCGR1_GG                  DCMIPP_P1CCCGR1_GG_Msk                          /*!< Current coefficient row 2 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1CCCGR2 register  ****************/
#define DCMIPP_P1CCCGR2_GB_Pos              (0U)
#define DCMIPP_P1CCCGR2_GB_Msk              (0x7FFUL << DCMIPP_P1CCCGR2_GB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCGR2_GB                  DCMIPP_P1CCCGR2_GB_Msk                          /*!< Current coefficient row 2 column 3 of the matrix */
#define DCMIPP_P1CCCGR2_GA_Pos              (16U)
#define DCMIPP_P1CCCGR2_GA_Msk              (0x3FFUL << DCMIPP_P1CCCGR2_GA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1CCCGR2_GA                  DCMIPP_P1CCCGR2_GA_Msk                          /*!< Current coefficient row 2 of the added column (signed integer value) */

/***************  Bit definition for DCMIPP_P1CCCBR1 register  ****************/
#define DCMIPP_P1CCCBR1_BR_Pos              (0U)
#define DCMIPP_P1CCCBR1_BR_Msk              (0x7FFUL << DCMIPP_P1CCCBR1_BR_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCBR1_BR                  DCMIPP_P1CCCBR1_BR_Msk                          /*!< Current coefficient row 3 column 1 of the matrix */
#define DCMIPP_P1CCCBR1_BG_Pos              (16U)
#define DCMIPP_P1CCCBR1_BG_Msk              (0x7FFUL << DCMIPP_P1CCCBR1_BG_Pos)              /*!< 0x07FF0000 */
#define DCMIPP_P1CCCBR1_BG                  DCMIPP_P1CCCBR1_BG_Msk                          /*!< Current coefficient row 3 column 2 of the matrix */

/***************  Bit definition for DCMIPP_P1CCCBR2 register  ****************/
#define DCMIPP_P1CCCBR2_BB_Pos              (0U)
#define DCMIPP_P1CCCBR2_BB_Msk              (0x7FFUL << DCMIPP_P1CCCBR2_BB_Pos)              /*!< 0x000007FF */
#define DCMIPP_P1CCCBR2_BB                  DCMIPP_P1CCCBR2_BB_Msk                          /*!< Current coefficient row 3 column 3 of the matrix */
#define DCMIPP_P1CCCBR2_BA_Pos              (16U)
#define DCMIPP_P1CCCBR2_BA_Msk              (0x3FFUL << DCMIPP_P1CCCBR2_BA_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P1CCCBR2_BA                  DCMIPP_P1CCCBR2_BA_Msk                          /*!< Current coefficient row 3 of the added column (signed integer value) */

/***************  Bit definition for DCMIPP_P1CCTCR1 register  ****************/
#define DCMIPP_P1CCTCR1_ENABLE_Pos          (0U)
#define DCMIPP_P1CCTCR1_ENABLE_Msk          (0x1UL << DCMIPP_P1CCTCR1_ENABLE_Pos)            /*!< 0x00000001 */
#define DCMIPP_P1CCTCR1_ENABLE              DCMIPP_P1CCTCR1_ENABLE_Msk                      /*!< Current ENABLE bit value */
#define DCMIPP_P1CCTCR1_LUM0_Pos            (9U)
#define DCMIPP_P1CCTCR1_LUM0_Msk            (0x3FUL << DCMIPP_P1CCTCR1_LUM0_Pos)             /*!< 0x00007E00 */
#define DCMIPP_P1CCTCR1_LUM0                DCMIPP_P1CCTCR1_LUM0_Msk                        /*!< Current luminance increase for input luminance of 0 (increase is idle with LUMx&#160;=&#160;16) */

/***************  Bit definition for DCMIPP_P1CCTCR2 register  ****************/
#define DCMIPP_P1CCTCR2_LUM4_Pos            (1U)
#define DCMIPP_P1CCTCR2_LUM4_Msk            (0x3FUL << DCMIPP_P1CCTCR2_LUM4_Pos)             /*!< 0x0000007E */
#define DCMIPP_P1CCTCR2_LUM4                DCMIPP_P1CCTCR2_LUM4_Msk                        /*!< Current luminance increase for input luminance of 128 (increase is idle with LUMx&#160;=&#160;16) */
#define DCMIPP_P1CCTCR2_LUM3_Pos            (9U)
#define DCMIPP_P1CCTCR2_LUM3_Msk            (0x3FUL << DCMIPP_P1CCTCR2_LUM3_Pos)             /*!< 0x00007E00 */
#define DCMIPP_P1CCTCR2_LUM3                DCMIPP_P1CCTCR2_LUM3_Msk                        /*!< Current luminance increase for input luminance of 96 (increase is idle with LUMx&#160;=&#160;16) */
#define DCMIPP_P1CCTCR2_LUM2_Pos            (17U)
#define DCMIPP_P1CCTCR2_LUM2_Msk            (0x3FUL << DCMIPP_P1CCTCR2_LUM2_Pos)             /*!< 0x007E0000 */
#define DCMIPP_P1CCTCR2_LUM2                DCMIPP_P1CCTCR2_LUM2_Msk                        /*!< Current luminance increase for input luminance of 64 (increase is idle with LUMx&#160;=&#160;16) */
#define DCMIPP_P1CCTCR2_LUM1_Pos            (25U)
#define DCMIPP_P1CCTCR2_LUM1_Msk            (0x3FUL << DCMIPP_P1CCTCR2_LUM1_Pos)             /*!< 0x7E000000 */
#define DCMIPP_P1CCTCR2_LUM1                DCMIPP_P1CCTCR2_LUM1_Msk                        /*!< Current luminance increase for input luminance of 32 (increase is idle with LUMx&#160;=&#160;16) */

/***************  Bit definition for DCMIPP_P1CCTCR3 register  ****************/
#define DCMIPP_P1CCTCR3_LUM8_Pos            (1U)
#define DCMIPP_P1CCTCR3_LUM8_Msk            (0x3FUL << DCMIPP_P1CCTCR3_LUM8_Pos)             /*!< 0x0000007E */
#define DCMIPP_P1CCTCR3_LUM8                DCMIPP_P1CCTCR3_LUM8_Msk                        /*!< Luminance increase for input luminance of 256 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CCTCR3_LUM7_Pos            (9U)
#define DCMIPP_P1CCTCR3_LUM7_Msk            (0x3FUL << DCMIPP_P1CCTCR3_LUM7_Pos)             /*!< 0x00007E00 */
#define DCMIPP_P1CCTCR3_LUM7                DCMIPP_P1CCTCR3_LUM7_Msk                        /*!< Luminance increase for input luminance of 224 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CCTCR3_LUM6_Pos            (17U)
#define DCMIPP_P1CCTCR3_LUM6_Msk            (0x3FUL << DCMIPP_P1CCTCR3_LUM6_Pos)             /*!< 0x007E0000 */
#define DCMIPP_P1CCTCR3_LUM6                DCMIPP_P1CCTCR3_LUM6_Msk                        /*!< Luminance increase for input luminance of 192 (increase is idle with LUMx = 16) */
#define DCMIPP_P1CCTCR3_LUM5_Pos            (25U)
#define DCMIPP_P1CCTCR3_LUM5_Msk            (0x3FUL << DCMIPP_P1CCTCR3_LUM5_Pos)             /*!< 0x7E000000 */
#define DCMIPP_P1CCTCR3_LUM5                DCMIPP_P1CCTCR3_LUM5_Msk                        /*!< Luminance increase for input luminance of 160 (increase is idle with LUMx = 16) */

/****************  Bit definition for DCMIPP_P1CHSCR register  ****************/
#define DCMIPP_P1CHSCR_EN_Pos               (0U)
#define DCMIPP_P1CHSCR_EN_Msk               (0x1UL << DCMIPP_P1CHSCR_EN_Pos)                 /*!< 0x00000001 */
#define DCMIPP_P1CHSCR_EN                   DCMIPP_P1CHSCR_EN_Msk                           /*!< Histogram enable */
#define DCMIPP_P1CHSCR_SRC_Pos              (1U)
#define DCMIPP_P1CHSCR_SRC_Msk              (0x7UL << DCMIPP_P1CHSCR_SRC_Pos)                /*!< 0x0000000E */
#define DCMIPP_P1CHSCR_SRC                  DCMIPP_P1CHSCR_SRC_Msk                          /*!< Source across the pipeline, where to sample pixels and extract the histograms: */
#define DCMIPP_P1CHSCR_HREG_Pos             (4U)
#define DCMIPP_P1CHSCR_HREG_Msk             (0xFUL << DCMIPP_P1CHSCR_HREG_Pos)               /*!< 0x000000F0 */
#define DCMIPP_P1CHSCR_HREG                 DCMIPP_P1CHSCR_HREG_Msk                         /*!< Amount of horizontal regions per frame, from which to extract the histograms */
#define DCMIPP_P1CHSCR_VREG_Pos             (8U)
#define DCMIPP_P1CHSCR_VREG_Msk             (0xFUL << DCMIPP_P1CHSCR_VREG_Pos)               /*!< 0x00000F00 */
#define DCMIPP_P1CHSCR_VREG                 DCMIPP_P1CHSCR_VREG_Msk                         /*!< Amount of vertical regions per frame, from which to extract the histograms: */
#define DCMIPP_P1CHSCR_HDEC_Pos             (12U)
#define DCMIPP_P1CHSCR_HDEC_Msk             (0x7UL << DCMIPP_P1CHSCR_HDEC_Pos)               /*!< 0x00007000 */
#define DCMIPP_P1CHSCR_HDEC                 DCMIPP_P1CHSCR_HDEC_Msk                         /*!< Horizontal decimation ratio */
#define DCMIPP_P1CHSCR_VDEC_Pos             (16U)
#define DCMIPP_P1CHSCR_VDEC_Msk             (0x7UL << DCMIPP_P1CHSCR_VDEC_Pos)               /*!< 0x00070000 */
#define DCMIPP_P1CHSCR_VDEC                 DCMIPP_P1CHSCR_VDEC_Msk                         /*!< Vertical decimation ratio */
#define DCMIPP_P1CHSCR_COMP_Pos             (20U)
#define DCMIPP_P1CHSCR_COMP_Msk             (0x7UL << DCMIPP_P1CHSCR_COMP_Pos)               /*!< 0x00700000 */
#define DCMIPP_P1CHSCR_COMP                 DCMIPP_P1CHSCR_COMP_Msk                         /*!< Component selected for the histograms: */
#define DCMIPP_P1CHSCR_DYN_Pos              (24U)
#define DCMIPP_P1CHSCR_DYN_Msk              (0x3UL << DCMIPP_P1CHSCR_DYN_Pos)                /*!< 0x03000000 */
#define DCMIPP_P1CHSCR_DYN                  DCMIPP_P1CHSCR_DYN_Msk                          /*!< Dynamic of the pixel value, when extracting the histogram */
#define DCMIPP_P1CHSCR_BIN_Pos              (26U)
#define DCMIPP_P1CHSCR_BIN_Msk              (0x3UL << DCMIPP_P1CHSCR_BIN_Pos)                /*!< 0x0C000000 */
#define DCMIPP_P1CHSCR_BIN                  DCMIPP_P1CHSCR_BIN_Msk                          /*!< Bin amount per histogram */

/***************  Bit definition for DCMIPP_P1CHSSTR register  ****************/
#define DCMIPP_P1CHSSTR_HSTART_Pos          (0U)
#define DCMIPP_P1CHSSTR_HSTART_Msk          (0xFFFUL << DCMIPP_P1CHSSTR_HSTART_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P1CHSSTR_HSTART              DCMIPP_P1CHSSTR_HSTART_Msk                      /*!< Horizontal start, from 0 to 4094 pixels high */
#define DCMIPP_P1CHSSTR_VSTART_Pos          (16U)
#define DCMIPP_P1CHSSTR_VSTART_Msk          (0xFFFUL << DCMIPP_P1CHSSTR_VSTART_Pos)          /*!< 0x0FFF0000 */
#define DCMIPP_P1CHSSTR_VSTART              DCMIPP_P1CHSSTR_VSTART_Msk                      /*!< Vertical start, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P1CHSSZR register  ****************/
#define DCMIPP_P1CHSSZR_HSIZE_Pos           (0U)
#define DCMIPP_P1CHSSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P1CHSSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1CHSSZR_HSIZE               DCMIPP_P1CHSSZR_HSIZE_Msk                       /*!< Horizontal size of each histogram region, from 0 to 4094 pixels high */
#define DCMIPP_P1CHSSZR_VSIZE_Pos           (16U)
#define DCMIPP_P1CHSSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P1CHSSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1CHSSZR_VSIZE               DCMIPP_P1CHSSZR_VSIZE_Msk                       /*!< Vertical size of each histogram region, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P1CHSMAR1 register  ***************/
#define DCMIPP_P1CHSMAR1_MA_Pos             (0U)
#define DCMIPP_P1CHSMAR1_MA_Msk             (0xFFFFFFFFUL << DCMIPP_P1CHSMAR1_MA_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P1CHSMAR1_MA                 DCMIPP_P1CHSMAR1_MA_Msk                         /*!< Memory address */

/***************  Bit definition for DCMIPP_P1CFCTCR register  ****************/
#define DCMIPP_P1CFCTCR_FRATE_Pos           (0U)
#define DCMIPP_P1CFCTCR_FRATE_Msk           (0x3UL << DCMIPP_P1CFCTCR_FRATE_Pos)             /*!< 0x00000003 */
#define DCMIPP_P1CFCTCR_FRATE               DCMIPP_P1CFCTCR_FRATE_Msk                       /*!< Frame capture rate control */
#define DCMIPP_P1CFCTCR_CPTMODE_Pos         (2U)
#define DCMIPP_P1CFCTCR_CPTMODE_Msk         (0x1UL << DCMIPP_P1CFCTCR_CPTMODE_Pos)           /*!< 0x00000004 */
#define DCMIPP_P1CFCTCR_CPTMODE             DCMIPP_P1CFCTCR_CPTMODE_Msk                     /*!< Capture mode */
#define DCMIPP_P1CFCTCR_CPTREQ_Pos          (3U)
#define DCMIPP_P1CFCTCR_CPTREQ_Msk          (0x1UL << DCMIPP_P1CFCTCR_CPTREQ_Pos)            /*!< 0x00000008 */
#define DCMIPP_P1CFCTCR_CPTREQ              DCMIPP_P1CFCTCR_CPTREQ_Msk                      /*!< Capture requested */

/***************  Bit definition for DCMIPP_P1CCRSTR register  ****************/
#define DCMIPP_P1CCRSTR_HSTART_Pos          (0U)
#define DCMIPP_P1CCRSTR_HSTART_Msk          (0xFFFUL << DCMIPP_P1CCRSTR_HSTART_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P1CCRSTR_HSTART              DCMIPP_P1CCRSTR_HSTART_Msk                      /*!< Current horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P1CCRSTR_VSTART_Pos          (16U)
#define DCMIPP_P1CCRSTR_VSTART_Msk          (0xFFFUL << DCMIPP_P1CCRSTR_VSTART_Pos)          /*!< 0x0FFF0000 */
#define DCMIPP_P1CCRSTR_VSTART              DCMIPP_P1CCRSTR_VSTART_Msk                      /*!< Current vertical start, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P1CCRSZR register  ****************/
#define DCMIPP_P1CCRSZR_HSIZE_Pos           (0U)
#define DCMIPP_P1CCRSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P1CCRSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1CCRSZR_HSIZE               DCMIPP_P1CCRSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1CCRSZR_VSIZE_Pos           (16U)
#define DCMIPP_P1CCRSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P1CCRSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1CCRSZR_VSIZE               DCMIPP_P1CCRSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P1CCRSZR_ENABLE_Pos          (31U)
#define DCMIPP_P1CCRSZR_ENABLE_Msk          (0x1UL << DCMIPP_P1CCRSZR_ENABLE_Pos)            /*!< 0x80000000 */
#define DCMIPP_P1CCRSZR_ENABLE              DCMIPP_P1CCRSZR_ENABLE_Msk                      /*!< Current ENABLE bit value */

/****************  Bit definition for DCMIPP_P1CDCCR register  ****************/
#define DCMIPP_P1CDCCR_ENABLE_Pos           (0U)
#define DCMIPP_P1CDCCR_ENABLE_Msk           (0x1UL << DCMIPP_P1CDCCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P1CDCCR_ENABLE               DCMIPP_P1CDCCR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P1CDCCR_HDEC_Pos             (1U)
#define DCMIPP_P1CDCCR_HDEC_Msk             (0x3UL << DCMIPP_P1CDCCR_HDEC_Pos)               /*!< 0x00000006 */
#define DCMIPP_P1CDCCR_HDEC                 DCMIPP_P1CDCCR_HDEC_Msk                         /*!< Horizontal decimation ratio */
#define DCMIPP_P1CDCCR_VDEC_Pos             (3U)
#define DCMIPP_P1CDCCR_VDEC_Msk             (0x3UL << DCMIPP_P1CDCCR_VDEC_Pos)               /*!< 0x00000018 */
#define DCMIPP_P1CDCCR_VDEC                 DCMIPP_P1CDCCR_VDEC_Msk                         /*!< Vertical decimation ratio */

/****************  Bit definition for DCMIPP_P1CDSCR register  ****************/
#define DCMIPP_P1CDSCR_HDIV_Pos             (0U)
#define DCMIPP_P1CDSCR_HDIV_Msk             (0x3FFUL << DCMIPP_P1CDSCR_HDIV_Pos)             /*!< 0x000003FF */
#define DCMIPP_P1CDSCR_HDIV                 DCMIPP_P1CDSCR_HDIV_Msk                         /*!< Current horizontal division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P1CDSCR_VDIV_Pos             (16U)
#define DCMIPP_P1CDSCR_VDIV_Msk             (0x3FFUL << DCMIPP_P1CDSCR_VDIV_Pos)             /*!< 0x03FF0000 */
#define DCMIPP_P1CDSCR_VDIV                 DCMIPP_P1CDSCR_VDIV_Msk                         /*!< Current vertical division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P1CDSCR_ENABLE_Pos           (31U)
#define DCMIPP_P1CDSCR_ENABLE_Msk           (0x1UL << DCMIPP_P1CDSCR_ENABLE_Pos)             /*!< 0x80000000 */
#define DCMIPP_P1CDSCR_ENABLE               DCMIPP_P1CDSCR_ENABLE_Msk                       /*!< Current value of bit ENABLE */

/**************  Bit definition for DCMIPP_P1CDSRTIOR register  ***************/
#define DCMIPP_P1CDSRTIOR_HRATIO_Pos        (0U)
#define DCMIPP_P1CDSRTIOR_HRATIO_Msk        (0xFFFFUL << DCMIPP_P1CDSRTIOR_HRATIO_Pos)       /*!< 0x0000FFFF */
#define DCMIPP_P1CDSRTIOR_HRATIO            DCMIPP_P1CDSRTIOR_HRATIO_Msk                    /*!< Current horizontal ratio, from 8192 (1x) to 65535 (8x) */
#define DCMIPP_P1CDSRTIOR_VRATIO_Pos        (16U)
#define DCMIPP_P1CDSRTIOR_VRATIO_Msk        (0xFFFFUL << DCMIPP_P1CDSRTIOR_VRATIO_Pos)       /*!< 0xFFFF0000 */
#define DCMIPP_P1CDSRTIOR_VRATIO            DCMIPP_P1CDSRTIOR_VRATIO_Msk                    /*!< Current vertical ratio, from 8192 (1x) to 65535 (8x) */

/***************  Bit definition for DCMIPP_P1CDSSZR register  ****************/
#define DCMIPP_P1CDSSZR_HSIZE_Pos           (0U)
#define DCMIPP_P1CDSSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P1CDSSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P1CDSSZR_HSIZE               DCMIPP_P1CDSSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P1CDSSZR_VSIZE_Pos           (16U)
#define DCMIPP_P1CDSSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P1CDSSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P1CDSSZR_VSIZE               DCMIPP_P1CDSSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P1CPPCR register  ****************/
#define DCMIPP_P1CPPCR_FORMAT_Pos           (0U)
#define DCMIPP_P1CPPCR_FORMAT_Msk           (0xFUL << DCMIPP_P1CPPCR_FORMAT_Pos)             /*!< 0x0000000F */
#define DCMIPP_P1CPPCR_FORMAT               DCMIPP_P1CPPCR_FORMAT_Msk                       /*!< Memory format */
#define DCMIPP_P1CPPCR_SWAPRB_Pos           (4U)
#define DCMIPP_P1CPPCR_SWAPRB_Msk           (0x1UL << DCMIPP_P1CPPCR_SWAPRB_Pos)             /*!< 0x00000010 */
#define DCMIPP_P1CPPCR_SWAPRB               DCMIPP_P1CPPCR_SWAPRB_Msk                       /*!< Swaps R-vs-B components if RGB, and U-vs-V components if YUV */
#define DCMIPP_P1CPPCR_LINEMULT_Pos         (13U)
#define DCMIPP_P1CPPCR_LINEMULT_Msk         (0x7UL << DCMIPP_P1CPPCR_LINEMULT_Pos)           /*!< 0x0000E000 */
#define DCMIPP_P1CPPCR_LINEMULT             DCMIPP_P1CPPCR_LINEMULT_Msk                     /*!< Amount of capture completed lines for LINE Event and Interrupt */

/**************  Bit definition for DCMIPP_P1CPPM0AR1 register  ***************/
#define DCMIPP_P1CPPM0AR1_M0A_Pos           (0U)
#define DCMIPP_P1CPPM0AR1_M0A_Msk           (0xFFFFFFFFUL << DCMIPP_P1CPPM0AR1_M0A_Pos)      /*!< 0xFFFFFFFF */
#define DCMIPP_P1CPPM0AR1_M0A               DCMIPP_P1CPPM0AR1_M0A_Msk                       /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P1CPPM0PR register  ***************/
#define DCMIPP_P1CPPM0PR_PITCH_Pos          (0U)
#define DCMIPP_P1CPPM0PR_PITCH_Msk          (0x7FFFUL << DCMIPP_P1CPPM0PR_PITCH_Pos)         /*!< 0x00007FFF */
#define DCMIPP_P1CPPM0PR_PITCH              DCMIPP_P1CPPM0PR_PITCH_Msk                      /*!< Current number of bytes between the address of two consecutive lines */

/**************  Bit definition for DCMIPP_P1CPPM1AR1 register  ***************/
#define DCMIPP_P1CPPM1AR1_M1A_Pos           (0U)
#define DCMIPP_P1CPPM1AR1_M1A_Msk           (0xFFFFFFFFUL << DCMIPP_P1CPPM1AR1_M1A_Pos)      /*!< 0xFFFFFFFF */
#define DCMIPP_P1CPPM1AR1_M1A               DCMIPP_P1CPPM1AR1_M1A_Msk                       /*!< Memory1 address */

/***************  Bit definition for DCMIPP_P1CPPM1PR register  ***************/
#define DCMIPP_P1CPPM1PR_PITCH_Pos          (0U)
#define DCMIPP_P1CPPM1PR_PITCH_Msk          (0x7FFFUL << DCMIPP_P1CPPM1PR_PITCH_Pos)         /*!< 0x00007FFF */
#define DCMIPP_P1CPPM1PR_PITCH              DCMIPP_P1CPPM1PR_PITCH_Msk                      /*!< Current number of bytes between the address of two consecutive lines */

/**************  Bit definition for DCMIPP_P1CPPM2AR1 register  ***************/
#define DCMIPP_P1CPPM2AR1_M2A_Pos           (0U)
#define DCMIPP_P1CPPM2AR1_M2A_Msk           (0xFFFFFFFFUL << DCMIPP_P1CPPM2AR1_M2A_Pos)      /*!< 0xFFFFFFFF */
#define DCMIPP_P1CPPM2AR1_M2A               DCMIPP_P1CPPM2AR1_M2A_Msk                       /*!< Memory 2 address */

/***************  Bit definition for DCMIPP_P2HWCFGR register  ****************/
#define DCMIPP_P2HWCFGR_CPLA_Pos            (0U)
#define DCMIPP_P2HWCFGR_CPLA_Msk            (0x3UL << DCMIPP_P2HWCFGR_CPLA_Pos)              /*!< 0x00000003 */
#define DCMIPP_P2HWCFGR_CPLA                DCMIPP_P2HWCFGR_CPLA_Msk                        /*!< Capability for planar buffers */
#define DCMIPP_P2HWCFGR_CDS_Pos             (2U)
#define DCMIPP_P2HWCFGR_CDS_Msk             (0x1UL << DCMIPP_P2HWCFGR_CDS_Pos)               /*!< 0x00000004 */
#define DCMIPP_P2HWCFGR_CDS                 DCMIPP_P2HWCFGR_CDS_Msk                         /*!< Capability for downsize filter */
#define DCMIPP_P2HWCFGR_DBM_Pos             (3U)
#define DCMIPP_P2HWCFGR_DBM_Msk             (0x1UL << DCMIPP_P2HWCFGR_DBM_Pos)               /*!< 0x00000008 */
#define DCMIPP_P2HWCFGR_DBM                 DCMIPP_P2HWCFGR_DBM_Msk                         /*!< Double buffer mode */
#define DCMIPP_P2HWCFGR_CRB_Pos             (4U)
#define DCMIPP_P2HWCFGR_CRB_Msk             (0x3UL << DCMIPP_P2HWCFGR_CRB_Pos)               /*!< 0x00000030 */
#define DCMIPP_P2HWCFGR_CRB                 DCMIPP_P2HWCFGR_CRB_Msk                         /*!< Capability for demosaicing */
#define DCMIPP_P2HWCFGR_CGM_Pos             (6U)
#define DCMIPP_P2HWCFGR_CGM_Msk             (0x3UL << DCMIPP_P2HWCFGR_CGM_Pos)               /*!< 0x000000C0 */
#define DCMIPP_P2HWCFGR_CGM                 DCMIPP_P2HWCFGR_CGM_Msk                         /*!< Capability for gamma conversions */
#define DCMIPP_P2HWCFGR_CROI_Pos            (8U)
#define DCMIPP_P2HWCFGR_CROI_Msk            (0xFUL << DCMIPP_P2HWCFGR_CROI_Pos)              /*!< 0x00000F00 */
#define DCMIPP_P2HWCFGR_CROI                DCMIPP_P2HWCFGR_CROI_Msk                        /*!< Capability for ROI: defines the number of ROIs in the pipe */
#define DCMIPP_P2HWCFGR_CDEC_Pos            (12U)
#define DCMIPP_P2HWCFGR_CDEC_Msk            (0x1UL << DCMIPP_P2HWCFGR_CDEC_Pos)              /*!< 0x00001000 */
#define DCMIPP_P2HWCFGR_CDEC                DCMIPP_P2HWCFGR_CDEC_Msk                        /*!< Capability to decimate before downsize */
#define DCMIPP_P2HWCFGR_CVP_Pos             (13U)
#define DCMIPP_P2HWCFGR_CVP_Msk             (0x1UL << DCMIPP_P2HWCFGR_CVP_Pos)               /*!< 0x00002000 */
#define DCMIPP_P2HWCFGR_CVP                 DCMIPP_P2HWCFGR_CVP_Msk                         /*!< Capability for pipeline virtualization */
#define DCMIPP_P2HWCFGR_CHS_Pos             (16U)
#define DCMIPP_P2HWCFGR_CHS_Msk             (0x1UL << DCMIPP_P2HWCFGR_CHS_Pos)               /*!< 0x00010000 */
#define DCMIPP_P2HWCFGR_CHS                 DCMIPP_P2HWCFGR_CHS_Msk                         /*!< Capability to extract histograms */
#define DCMIPP_P2HWCFGR_CLS_Pos             (17U)
#define DCMIPP_P2HWCFGR_CLS_Msk             (0x1UL << DCMIPP_P2HWCFGR_CLS_Pos)               /*!< 0x00020000 */
#define DCMIPP_P2HWCFGR_CLS                 DCMIPP_P2HWCFGR_CLS_Msk                         /*!< Capability for lens shading */
#define DCMIPP_P2HWCFGR_CFOC_Pos            (18U)
#define DCMIPP_P2HWCFGR_CFOC_Msk            (0x1UL << DCMIPP_P2HWCFGR_CFOC_Pos)              /*!< 0x00040000 */
#define DCMIPP_P2HWCFGR_CFOC                DCMIPP_P2HWCFGR_CFOC_Msk                        /*!< Capability for focus extraction */

/****************  Bit definition for DCMIPP_P2FSCR register  *****************/
#define DCMIPP_P2FSCR_DTIDA_Pos             (0U)
#define DCMIPP_P2FSCR_DTIDA_Msk             (0x3FUL << DCMIPP_P2FSCR_DTIDA_Pos)              /*!< 0x0000003F */
#define DCMIPP_P2FSCR_DTIDA                 DCMIPP_P2FSCR_DTIDA_Msk                         /*!< Data type ID */
#define DCMIPP_P2FSCR_VC_Pos                (19U)
#define DCMIPP_P2FSCR_VC_Msk                (0x3UL << DCMIPP_P2FSCR_VC_Pos)                  /*!< 0x00180000 */
#define DCMIPP_P2FSCR_VC                    DCMIPP_P2FSCR_VC_Msk                            /*!< Flow selection mode */
#define DCMIPP_P2FSCR_FDTF_Pos              (24U)
#define DCMIPP_P2FSCR_FDTF_Msk              (0x3FUL << DCMIPP_P2FSCR_FDTF_Pos)               /*!< 0x3F000000 */
#define DCMIPP_P2FSCR_FDTF                  DCMIPP_P2FSCR_FDTF_Msk                          /*!< Force data type format */
#define DCMIPP_P2FSCR_FDTFEN_Pos            (30U)
#define DCMIPP_P2FSCR_FDTFEN_Msk            (0x1UL << DCMIPP_P2FSCR_FDTFEN_Pos)              /*!< 0x40000000 */
#define DCMIPP_P2FSCR_FDTFEN                DCMIPP_P2FSCR_FDTFEN_Msk                        /*!< Force data type format enable */
#define DCMIPP_P2FSCR_PIPEN_Pos             (31U)
#define DCMIPP_P2FSCR_PIPEN_Msk             (0x1UL << DCMIPP_P2FSCR_PIPEN_Pos)               /*!< 0x80000000 */
#define DCMIPP_P2FSCR_PIPEN                 DCMIPP_P2FSCR_PIPEN_Msk                         /*!< Activation of PipeN */

/****************  Bit definition for DCMIPP_P2FCTCR register  ****************/
#define DCMIPP_P2FCTCR_FRATE_Pos            (0U)
#define DCMIPP_P2FCTCR_FRATE_Msk            (0x3UL << DCMIPP_P2FCTCR_FRATE_Pos)              /*!< 0x00000003 */
#define DCMIPP_P2FCTCR_FRATE                DCMIPP_P2FCTCR_FRATE_Msk                        /*!< Frame capture rate control */
#define DCMIPP_P2FCTCR_CPTMODE_Pos          (2U)
#define DCMIPP_P2FCTCR_CPTMODE_Msk          (0x1UL << DCMIPP_P2FCTCR_CPTMODE_Pos)            /*!< 0x00000004 */
#define DCMIPP_P2FCTCR_CPTMODE              DCMIPP_P2FCTCR_CPTMODE_Msk                      /*!< Capture mode */
#define DCMIPP_P2FCTCR_CPTREQ_Pos           (3U)
#define DCMIPP_P2FCTCR_CPTREQ_Msk           (0x1UL << DCMIPP_P2FCTCR_CPTREQ_Pos)             /*!< 0x00000008 */
#define DCMIPP_P2FCTCR_CPTREQ               DCMIPP_P2FCTCR_CPTREQ_Msk                       /*!< Capture requested */

/****************  Bit definition for DCMIPP_P2CRSTR register  ****************/
#define DCMIPP_P2CRSTR_HSTART_Pos           (0U)
#define DCMIPP_P2CRSTR_HSTART_Msk           (0xFFFUL << DCMIPP_P2CRSTR_HSTART_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P2CRSTR_HSTART               DCMIPP_P2CRSTR_HSTART_Msk                       /*!< Horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P2CRSTR_VSTART_Pos           (16U)
#define DCMIPP_P2CRSTR_VSTART_Msk           (0xFFFUL << DCMIPP_P2CRSTR_VSTART_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P2CRSTR_VSTART               DCMIPP_P2CRSTR_VSTART_Msk                       /*!< Vertical start, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P2CRSZR register  ****************/
#define DCMIPP_P2CRSZR_HSIZE_Pos            (0U)
#define DCMIPP_P2CRSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P2CRSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P2CRSZR_HSIZE                DCMIPP_P2CRSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P2CRSZR_VSIZE_Pos            (16U)
#define DCMIPP_P2CRSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P2CRSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P2CRSZR_VSIZE                DCMIPP_P2CRSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P2CRSZR_ENABLE_Pos           (31U)
#define DCMIPP_P2CRSZR_ENABLE_Msk           (0x1UL << DCMIPP_P2CRSZR_ENABLE_Pos)             /*!< 0x80000000 */
#define DCMIPP_P2CRSZR_ENABLE               DCMIPP_P2CRSZR_ENABLE_Msk                       /*!< None */

/****************  Bit definition for DCMIPP_P2DCCR register  *****************/
#define DCMIPP_P2DCCR_ENABLE_Pos            (0U)
#define DCMIPP_P2DCCR_ENABLE_Msk            (0x1UL << DCMIPP_P2DCCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P2DCCR_ENABLE                DCMIPP_P2DCCR_ENABLE_Msk                        /*!< None */
#define DCMIPP_P2DCCR_HDEC_Pos              (1U)
#define DCMIPP_P2DCCR_HDEC_Msk              (0x3UL << DCMIPP_P2DCCR_HDEC_Pos)                /*!< 0x00000006 */
#define DCMIPP_P2DCCR_HDEC                  DCMIPP_P2DCCR_HDEC_Msk                          /*!< Horizontal decimation ratio */
#define DCMIPP_P2DCCR_VDEC_Pos              (3U)
#define DCMIPP_P2DCCR_VDEC_Msk              (0x3UL << DCMIPP_P2DCCR_VDEC_Pos)                /*!< 0x00000018 */
#define DCMIPP_P2DCCR_VDEC                  DCMIPP_P2DCCR_VDEC_Msk                          /*!< Vertical decimation ratio */

/****************  Bit definition for DCMIPP_P2DSCR register  *****************/
#define DCMIPP_P2DSCR_HDIV_Pos              (0U)
#define DCMIPP_P2DSCR_HDIV_Msk              (0x3FFUL << DCMIPP_P2DSCR_HDIV_Pos)              /*!< 0x000003FF */
#define DCMIPP_P2DSCR_HDIV                  DCMIPP_P2DSCR_HDIV_Msk                          /*!< Horizontal division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P2DSCR_VDIV_Pos              (16U)
#define DCMIPP_P2DSCR_VDIV_Msk              (0x3FFUL << DCMIPP_P2DSCR_VDIV_Pos)              /*!< 0x03FF0000 */
#define DCMIPP_P2DSCR_VDIV                  DCMIPP_P2DSCR_VDIV_Msk                          /*!< Vertical division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P2DSCR_ENABLE_Pos            (31U)
#define DCMIPP_P2DSCR_ENABLE_Msk            (0x1UL << DCMIPP_P2DSCR_ENABLE_Pos)              /*!< 0x80000000 */
#define DCMIPP_P2DSCR_ENABLE                DCMIPP_P2DSCR_ENABLE_Msk                        /*!< None */

/***************  Bit definition for DCMIPP_P2DSRTIOR register  ***************/
#define DCMIPP_P2DSRTIOR_HRATIO_Pos         (0U)
#define DCMIPP_P2DSRTIOR_HRATIO_Msk         (0xFFFFUL << DCMIPP_P2DSRTIOR_HRATIO_Pos)        /*!< 0x0000FFFF */
#define DCMIPP_P2DSRTIOR_HRATIO             DCMIPP_P2DSRTIOR_HRATIO_Msk                     /*!< Horizontal ratio, from 8192 (1x) to 65535 (8x) */
#define DCMIPP_P2DSRTIOR_VRATIO_Pos         (16U)
#define DCMIPP_P2DSRTIOR_VRATIO_Msk         (0xFFFFUL << DCMIPP_P2DSRTIOR_VRATIO_Pos)        /*!< 0xFFFF0000 */
#define DCMIPP_P2DSRTIOR_VRATIO             DCMIPP_P2DSRTIOR_VRATIO_Msk                     /*!< Vertical ratio, from 8192 (1x) to 65535 (8x) */

/****************  Bit definition for DCMIPP_P2DSSZR register  ****************/
#define DCMIPP_P2DSSZR_HSIZE_Pos            (0U)
#define DCMIPP_P2DSSZR_HSIZE_Msk            (0xFFFUL << DCMIPP_P2DSSZR_HSIZE_Pos)            /*!< 0x00000FFF */
#define DCMIPP_P2DSSZR_HSIZE                DCMIPP_P2DSSZR_HSIZE_Msk                        /*!< Horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P2DSSZR_VSIZE_Pos            (16U)
#define DCMIPP_P2DSSZR_VSIZE_Msk            (0xFFFUL << DCMIPP_P2DSSZR_VSIZE_Pos)            /*!< 0x0FFF0000 */
#define DCMIPP_P2DSSZR_VSIZE                DCMIPP_P2DSSZR_VSIZE_Msk                        /*!< Vertical size, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P2GMCR register  *****************/
#define DCMIPP_P2GMCR_ENABLE_Pos            (0U)
#define DCMIPP_P2GMCR_ENABLE_Msk            (0x1UL << DCMIPP_P2GMCR_ENABLE_Pos)              /*!< 0x00000001 */
#define DCMIPP_P2GMCR_ENABLE                DCMIPP_P2GMCR_ENABLE_Msk                        /*!< None */

/****************  Bit definition for DCMIPP_P2PPCR register  *****************/
#define DCMIPP_P2PPCR_FORMAT_Pos            (0U)
#define DCMIPP_P2PPCR_FORMAT_Msk            (0xFUL << DCMIPP_P2PPCR_FORMAT_Pos)              /*!< 0x0000000F */
#define DCMIPP_P2PPCR_FORMAT                DCMIPP_P2PPCR_FORMAT_Msk                        /*!< Memory format (only coplanar formats are supported in Pipe2) */
#define DCMIPP_P2PPCR_SWAPRB_Pos            (4U)
#define DCMIPP_P2PPCR_SWAPRB_Msk            (0x1UL << DCMIPP_P2PPCR_SWAPRB_Pos)              /*!< 0x00000010 */
#define DCMIPP_P2PPCR_SWAPRB                DCMIPP_P2PPCR_SWAPRB_Msk                        /*!< Swaps R-vs-B components if RGB, and if YUV, swaps U-vs-V components */
#define DCMIPP_P2PPCR_LINEMULT_Pos          (13U)
#define DCMIPP_P2PPCR_LINEMULT_Msk          (0x7UL << DCMIPP_P2PPCR_LINEMULT_Pos)            /*!< 0x0000E000 */
#define DCMIPP_P2PPCR_LINEMULT              DCMIPP_P2PPCR_LINEMULT_Msk                      /*!< Amount of capture completed lines for LINE event and interrupt */

/***************  Bit definition for DCMIPP_P2PPM0AR1 register  ***************/
#define DCMIPP_P2PPM0AR1_M0A_Pos            (0U)
#define DCMIPP_P2PPM0AR1_M0A_Msk            (0xFFFFFFFFUL << DCMIPP_P2PPM0AR1_M0A_Pos)       /*!< 0xFFFFFFFF */
#define DCMIPP_P2PPM0AR1_M0A                DCMIPP_P2PPM0AR1_M0A_Msk                        /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P2PPM0PR register  ****************/
#define DCMIPP_P2PPM0PR_PITCH_Pos           (0U)
#define DCMIPP_P2PPM0PR_PITCH_Msk           (0x7FFFUL << DCMIPP_P2PPM0PR_PITCH_Pos)          /*!< 0x00007FFF */
#define DCMIPP_P2PPM0PR_PITCH               DCMIPP_P2PPM0PR_PITCH_Msk                       /*!< Number of bytes between the address of two consecutive lines */

/***************  Bit definition for DCMIPP_P2STM0AR register  ****************/
#define DCMIPP_P2STM0AR_M0A_Pos             (0U)
#define DCMIPP_P2STM0AR_M0A_Msk             (0xFFFFFFFFUL << DCMIPP_P2STM0AR_M0A_Pos)        /*!< 0xFFFFFFFF */
#define DCMIPP_P2STM0AR_M0A                 DCMIPP_P2STM0AR_M0A_Msk                         /*!< Memory0 address */

/*****************  Bit definition for DCMIPP_P2IER register  *****************/
#define DCMIPP_P2IER_LINEIE_Pos             (0U)
#define DCMIPP_P2IER_LINEIE_Msk             (0x1UL << DCMIPP_P2IER_LINEIE_Pos)               /*!< 0x00000001 */
#define DCMIPP_P2IER_LINEIE                 DCMIPP_P2IER_LINEIE_Msk                         /*!< Multi-line capture completed interrupt enable */
#define DCMIPP_P2IER_FRAMEIE_Pos            (1U)
#define DCMIPP_P2IER_FRAMEIE_Msk            (0x1UL << DCMIPP_P2IER_FRAMEIE_Pos)              /*!< 0x00000002 */
#define DCMIPP_P2IER_FRAMEIE                DCMIPP_P2IER_FRAMEIE_Msk                        /*!< Frame capture completed interrupt enable */
#define DCMIPP_P2IER_VSYNCIE_Pos            (2U)
#define DCMIPP_P2IER_VSYNCIE_Msk            (0x1UL << DCMIPP_P2IER_VSYNCIE_Pos)              /*!< 0x00000004 */
#define DCMIPP_P2IER_VSYNCIE                DCMIPP_P2IER_VSYNCIE_Msk                        /*!< VSYNC interrupt enable */
#define DCMIPP_P2IER_OVRIE_Pos              (7U)
#define DCMIPP_P2IER_OVRIE_Msk              (0x1UL << DCMIPP_P2IER_OVRIE_Pos)                /*!< 0x00000080 */
#define DCMIPP_P2IER_OVRIE                  DCMIPP_P2IER_OVRIE_Msk                          /*!< Overrun interrupt enable */

/*****************  Bit definition for DCMIPP_P2SR register  ******************/
#define DCMIPP_P2SR_LINEF_Pos               (0U)
#define DCMIPP_P2SR_LINEF_Msk               (0x1UL << DCMIPP_P2SR_LINEF_Pos)                 /*!< 0x00000001 */
#define DCMIPP_P2SR_LINEF                   DCMIPP_P2SR_LINEF_Msk                           /*!< Multi-line capture completed raw interrupt status */
#define DCMIPP_P2SR_FRAMEF_Pos              (1U)
#define DCMIPP_P2SR_FRAMEF_Msk              (0x1UL << DCMIPP_P2SR_FRAMEF_Pos)                /*!< 0x00000002 */
#define DCMIPP_P2SR_FRAMEF                  DCMIPP_P2SR_FRAMEF_Msk                          /*!< Frame capture completed raw interrupt status */
#define DCMIPP_P2SR_VSYNCF_Pos              (2U)
#define DCMIPP_P2SR_VSYNCF_Msk              (0x1UL << DCMIPP_P2SR_VSYNCF_Pos)                /*!< 0x00000004 */
#define DCMIPP_P2SR_VSYNCF                  DCMIPP_P2SR_VSYNCF_Msk                          /*!< VSYNC raw interrupt status */
#define DCMIPP_P2SR_OVRF_Pos                (7U)
#define DCMIPP_P2SR_OVRF_Msk                (0x1UL << DCMIPP_P2SR_OVRF_Pos)                  /*!< 0x00000080 */
#define DCMIPP_P2SR_OVRF                    DCMIPP_P2SR_OVRF_Msk                            /*!< Overrun raw interrupt status */
#define DCMIPP_P2SR_LSTLINE_Pos             (16U)
#define DCMIPP_P2SR_LSTLINE_Msk             (0x1UL << DCMIPP_P2SR_LSTLINE_Pos)               /*!< 0x00010000 */
#define DCMIPP_P2SR_LSTLINE                 DCMIPP_P2SR_LSTLINE_Msk                         /*!< Last line LSB bit, sampled at frame capture complete event */
#define DCMIPP_P2SR_LSTFRM_Pos              (17U)
#define DCMIPP_P2SR_LSTFRM_Msk              (0x1UL << DCMIPP_P2SR_LSTFRM_Pos)                /*!< 0x00020000 */
#define DCMIPP_P2SR_LSTFRM                  DCMIPP_P2SR_LSTFRM_Msk                          /*!< Last frame LSB bit, sampled at frame capture complete event */
#define DCMIPP_P2SR_CPTACT_Pos              (23U)
#define DCMIPP_P2SR_CPTACT_Msk              (0x1UL << DCMIPP_P2SR_CPTACT_Pos)                /*!< 0x00800000 */
#define DCMIPP_P2SR_CPTACT                  DCMIPP_P2SR_CPTACT_Msk                          /*!< Capture immediate status */

/*****************  Bit definition for DCMIPP_P2FCR register  *****************/
#define DCMIPP_P2FCR_CLINEF_Pos             (0U)
#define DCMIPP_P2FCR_CLINEF_Msk             (0x1UL << DCMIPP_P2FCR_CLINEF_Pos)               /*!< 0x00000001 */
#define DCMIPP_P2FCR_CLINEF                 DCMIPP_P2FCR_CLINEF_Msk                         /*!< Multi-line capture complete interrupt status clear */
#define DCMIPP_P2FCR_CFRAMEF_Pos            (1U)
#define DCMIPP_P2FCR_CFRAMEF_Msk            (0x1UL << DCMIPP_P2FCR_CFRAMEF_Pos)              /*!< 0x00000002 */
#define DCMIPP_P2FCR_CFRAMEF                DCMIPP_P2FCR_CFRAMEF_Msk                        /*!< Frame capture complete interrupt status clear */
#define DCMIPP_P2FCR_CVSYNCF_Pos            (2U)
#define DCMIPP_P2FCR_CVSYNCF_Msk            (0x1UL << DCMIPP_P2FCR_CVSYNCF_Pos)              /*!< 0x00000004 */
#define DCMIPP_P2FCR_CVSYNCF                DCMIPP_P2FCR_CVSYNCF_Msk                        /*!< Vertical synchronization interrupt status clear */
#define DCMIPP_P2FCR_COVRF_Pos              (7U)
#define DCMIPP_P2FCR_COVRF_Msk              (0x1UL << DCMIPP_P2FCR_COVRF_Pos)                /*!< 0x00000080 */
#define DCMIPP_P2FCR_COVRF                  DCMIPP_P2FCR_COVRF_Msk                          /*!< Overrun interrupt status clear */

/****************  Bit definition for DCMIPP_P2CFSCR register  ****************/
#define DCMIPP_P2CFSCR_DTIDA_Pos            (0U)
#define DCMIPP_P2CFSCR_DTIDA_Msk            (0x3FUL << DCMIPP_P2CFSCR_DTIDA_Pos)             /*!< 0x0000003F */
#define DCMIPP_P2CFSCR_DTIDA                DCMIPP_P2CFSCR_DTIDA_Msk                        /*!< Current data type ID */
#define DCMIPP_P2CFSCR_VC_Pos               (19U)
#define DCMIPP_P2CFSCR_VC_Msk               (0x3UL << DCMIPP_P2CFSCR_VC_Pos)                 /*!< 0x00180000 */
#define DCMIPP_P2CFSCR_VC                   DCMIPP_P2CFSCR_VC_Msk                           /*!< Current flow selection mode */
#define DCMIPP_P2CFSCR_FDTF_Pos             (24U)
#define DCMIPP_P2CFSCR_FDTF_Msk             (0x3FUL << DCMIPP_P2CFSCR_FDTF_Pos)              /*!< 0x3F000000 */
#define DCMIPP_P2CFSCR_FDTF                 DCMIPP_P2CFSCR_FDTF_Msk                         /*!< Current force data type format */
#define DCMIPP_P2CFSCR_FDTFEN_Pos           (30U)
#define DCMIPP_P2CFSCR_FDTFEN_Msk           (0x1UL << DCMIPP_P2CFSCR_FDTFEN_Pos)             /*!< 0x40000000 */
#define DCMIPP_P2CFSCR_FDTFEN               DCMIPP_P2CFSCR_FDTFEN_Msk                       /*!< Current force data type format enable */
#define DCMIPP_P2CFSCR_PIPEN_Pos            (31U)
#define DCMIPP_P2CFSCR_PIPEN_Msk            (0x1UL << DCMIPP_P2CFSCR_PIPEN_Pos)              /*!< 0x80000000 */
#define DCMIPP_P2CFSCR_PIPEN                DCMIPP_P2CFSCR_PIPEN_Msk                        /*!< Current activation of PipeN */

/***************  Bit definition for DCMIPP_P2CFCTCR register  ****************/
#define DCMIPP_P2CFCTCR_FRATE_Pos           (0U)
#define DCMIPP_P2CFCTCR_FRATE_Msk           (0x3UL << DCMIPP_P2CFCTCR_FRATE_Pos)             /*!< 0x00000003 */
#define DCMIPP_P2CFCTCR_FRATE               DCMIPP_P2CFCTCR_FRATE_Msk                       /*!< Frame capture rate control */
#define DCMIPP_P2CFCTCR_CPTMODE_Pos         (2U)
#define DCMIPP_P2CFCTCR_CPTMODE_Msk         (0x1UL << DCMIPP_P2CFCTCR_CPTMODE_Pos)           /*!< 0x00000004 */
#define DCMIPP_P2CFCTCR_CPTMODE             DCMIPP_P2CFCTCR_CPTMODE_Msk                     /*!< Capture mode */
#define DCMIPP_P2CFCTCR_CPTREQ_Pos          (3U)
#define DCMIPP_P2CFCTCR_CPTREQ_Msk          (0x1UL << DCMIPP_P2CFCTCR_CPTREQ_Pos)            /*!< 0x00000008 */
#define DCMIPP_P2CFCTCR_CPTREQ              DCMIPP_P2CFCTCR_CPTREQ_Msk                      /*!< Capture requested */

/***************  Bit definition for DCMIPP_P2CCRSTR register  ****************/
#define DCMIPP_P2CCRSTR_HSTART_Pos          (0U)
#define DCMIPP_P2CCRSTR_HSTART_Msk          (0xFFFUL << DCMIPP_P2CCRSTR_HSTART_Pos)          /*!< 0x00000FFF */
#define DCMIPP_P2CCRSTR_HSTART              DCMIPP_P2CCRSTR_HSTART_Msk                      /*!< Current horizontal start, from 0 to 4094 pixels wide */
#define DCMIPP_P2CCRSTR_VSTART_Pos          (16U)
#define DCMIPP_P2CCRSTR_VSTART_Msk          (0xFFFUL << DCMIPP_P2CCRSTR_VSTART_Pos)          /*!< 0x0FFF0000 */
#define DCMIPP_P2CCRSTR_VSTART              DCMIPP_P2CCRSTR_VSTART_Msk                      /*!< Current vertical start, from 0 to 4094 pixels high */

/***************  Bit definition for DCMIPP_P2CCRSZR register  ****************/
#define DCMIPP_P2CCRSZR_HSIZE_Pos           (0U)
#define DCMIPP_P2CCRSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P2CCRSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P2CCRSZR_HSIZE               DCMIPP_P2CCRSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P2CCRSZR_VSIZE_Pos           (16U)
#define DCMIPP_P2CCRSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P2CCRSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P2CCRSZR_VSIZE               DCMIPP_P2CCRSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */
#define DCMIPP_P2CCRSZR_ENABLE_Pos          (31U)
#define DCMIPP_P2CCRSZR_ENABLE_Msk          (0x1UL << DCMIPP_P2CCRSZR_ENABLE_Pos)            /*!< 0x80000000 */
#define DCMIPP_P2CCRSZR_ENABLE              DCMIPP_P2CCRSZR_ENABLE_Msk                      /*!< Current ENABLE bit value */

/****************  Bit definition for DCMIPP_P2CDCCR register  ****************/
#define DCMIPP_P2CDCCR_ENABLE_Pos           (0U)
#define DCMIPP_P2CDCCR_ENABLE_Msk           (0x1UL << DCMIPP_P2CDCCR_ENABLE_Pos)             /*!< 0x00000001 */
#define DCMIPP_P2CDCCR_ENABLE               DCMIPP_P2CDCCR_ENABLE_Msk                       /*!< None */
#define DCMIPP_P2CDCCR_HDEC_Pos             (1U)
#define DCMIPP_P2CDCCR_HDEC_Msk             (0x3UL << DCMIPP_P2CDCCR_HDEC_Pos)               /*!< 0x00000006 */
#define DCMIPP_P2CDCCR_HDEC                 DCMIPP_P2CDCCR_HDEC_Msk                         /*!< Horizontal decimation ratio */
#define DCMIPP_P2CDCCR_VDEC_Pos             (3U)
#define DCMIPP_P2CDCCR_VDEC_Msk             (0x3UL << DCMIPP_P2CDCCR_VDEC_Pos)               /*!< 0x00000018 */
#define DCMIPP_P2CDCCR_VDEC                 DCMIPP_P2CDCCR_VDEC_Msk                         /*!< Vertical decimation ratio */

/****************  Bit definition for DCMIPP_P2CDSCR register  ****************/
#define DCMIPP_P2CDSCR_HDIV_Pos             (0U)
#define DCMIPP_P2CDSCR_HDIV_Msk             (0x3FFUL << DCMIPP_P2CDSCR_HDIV_Pos)             /*!< 0x000003FF */
#define DCMIPP_P2CDSCR_HDIV                 DCMIPP_P2CDSCR_HDIV_Msk                         /*!< Current horizontal division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P2CDSCR_VDIV_Pos             (16U)
#define DCMIPP_P2CDSCR_VDIV_Msk             (0x3FFUL << DCMIPP_P2CDSCR_VDIV_Pos)             /*!< 0x03FF0000 */
#define DCMIPP_P2CDSCR_VDIV                 DCMIPP_P2CDSCR_VDIV_Msk                         /*!< Current vertical division factor, from 128 (8x) to 1023 (1x) */
#define DCMIPP_P2CDSCR_ENABLE_Pos           (31U)
#define DCMIPP_P2CDSCR_ENABLE_Msk           (0x1UL << DCMIPP_P2CDSCR_ENABLE_Pos)             /*!< 0x80000000 */
#define DCMIPP_P2CDSCR_ENABLE               DCMIPP_P2CDSCR_ENABLE_Msk                       /*!< Current value of bit ENABLE */

/**************  Bit definition for DCMIPP_P2CDSRTIOR register  ***************/
#define DCMIPP_P2CDSRTIOR_HRATIO_Pos        (0U)
#define DCMIPP_P2CDSRTIOR_HRATIO_Msk        (0xFFFFUL << DCMIPP_P2CDSRTIOR_HRATIO_Pos)       /*!< 0x0000FFFF */
#define DCMIPP_P2CDSRTIOR_HRATIO            DCMIPP_P2CDSRTIOR_HRATIO_Msk                    /*!< Current horizontal ratio, from 8192 (1x) to 65535 (8x) */
#define DCMIPP_P2CDSRTIOR_VRATIO_Pos        (16U)
#define DCMIPP_P2CDSRTIOR_VRATIO_Msk        (0xFFFFUL << DCMIPP_P2CDSRTIOR_VRATIO_Pos)       /*!< 0xFFFF0000 */
#define DCMIPP_P2CDSRTIOR_VRATIO            DCMIPP_P2CDSRTIOR_VRATIO_Msk                    /*!< Current vertical ratio, from 8192 (1x) to 65535 (8x) */

/***************  Bit definition for DCMIPP_P2CDSSZR register  ****************/
#define DCMIPP_P2CDSSZR_HSIZE_Pos           (0U)
#define DCMIPP_P2CDSSZR_HSIZE_Msk           (0xFFFUL << DCMIPP_P2CDSSZR_HSIZE_Pos)           /*!< 0x00000FFF */
#define DCMIPP_P2CDSSZR_HSIZE               DCMIPP_P2CDSSZR_HSIZE_Msk                       /*!< Current horizontal size, from 0 to 4094 pixels wide */
#define DCMIPP_P2CDSSZR_VSIZE_Pos           (16U)
#define DCMIPP_P2CDSSZR_VSIZE_Msk           (0xFFFUL << DCMIPP_P2CDSSZR_VSIZE_Pos)           /*!< 0x0FFF0000 */
#define DCMIPP_P2CDSSZR_VSIZE               DCMIPP_P2CDSSZR_VSIZE_Msk                       /*!< Current vertical size, from 0 to 4094 pixels high */

/****************  Bit definition for DCMIPP_P2CPPCR register  ****************/
#define DCMIPP_P2CPPCR_FORMAT_Pos           (0U)
#define DCMIPP_P2CPPCR_FORMAT_Msk           (0xFUL << DCMIPP_P2CPPCR_FORMAT_Pos)             /*!< 0x0000000F */
#define DCMIPP_P2CPPCR_FORMAT               DCMIPP_P2CPPCR_FORMAT_Msk                       /*!< Memory format (only coplanar formats are supported in Pipe2) */
#define DCMIPP_P2CPPCR_SWAPRB_Pos           (4U)
#define DCMIPP_P2CPPCR_SWAPRB_Msk           (0x1UL << DCMIPP_P2CPPCR_SWAPRB_Pos)             /*!< 0x00000010 */
#define DCMIPP_P2CPPCR_SWAPRB               DCMIPP_P2CPPCR_SWAPRB_Msk                       /*!< Swaps R-vs-B components if RGB, and if YUV, swaps U-vs-V components */
#define DCMIPP_P2CPPCR_LINEMULT_Pos         (13U)
#define DCMIPP_P2CPPCR_LINEMULT_Msk         (0x7UL << DCMIPP_P2CPPCR_LINEMULT_Pos)           /*!< 0x0000E000 */
#define DCMIPP_P2CPPCR_LINEMULT             DCMIPP_P2CPPCR_LINEMULT_Msk                     /*!< Amount of capture completed lines for LINE event and interrupt */

/**************  Bit definition for DCMIPP_P2CPPM0AR1 register  ***************/
#define DCMIPP_P2CPPM0AR1_M0A_Pos           (0U)
#define DCMIPP_P2CPPM0AR1_M0A_Msk           (0xFFFFFFFFUL << DCMIPP_P2CPPM0AR1_M0A_Pos)      /*!< 0xFFFFFFFF */
#define DCMIPP_P2CPPM0AR1_M0A               DCMIPP_P2CPPM0AR1_M0A_Msk                       /*!< Memory0 address */

/***************  Bit definition for DCMIPP_P2CPPM0PR register  ***************/
#define DCMIPP_P2CPPM0PR_PITCH_Pos          (0U)
#define DCMIPP_P2CPPM0PR_PITCH_Msk          (0x7FFFUL << DCMIPP_P2CPPM0PR_PITCH_Pos)         /*!< 0x00007FFF */
#define DCMIPP_P2CPPM0PR_PITCH              DCMIPP_P2CPPM0PR_PITCH_Msk                      /*!< Current number of bytes between the address of two consecutive lines */

/****************  Bit definition for DCMIPP_HWCFGR3 register  ****************/
#define DCMIPP_HWCFGR3_LSF_Pos              (0U)
#define DCMIPP_HWCFGR3_LSF_Msk              (0x1UL << DCMIPP_HWCFGR3_LSF_Pos)                /*!< 0x00000001 */
#define DCMIPP_HWCFGR3_LSF                  DCMIPP_HWCFGR3_LSF_Msk                          /*!< Lens shading */

/****************  Bit definition for DCMIPP_HWCFGR2 register  ****************/
#define DCMIPP_HWCFGR2_VPFT_Pos             (0U)
#define DCMIPP_HWCFGR2_VPFT_Msk             (0x7UL << DCMIPP_HWCFGR2_VPFT_Pos)               /*!< 0x00000007 */
#define DCMIPP_HWCFGR2_VPFT                 DCMIPP_HWCFGR2_VPFT_Msk                         /*!< Virtual pipe function */
#define DCMIPP_HWCFGR2_DBMFT_Pos            (4U)
#define DCMIPP_HWCFGR2_DBMFT_Msk            (0x1UL << DCMIPP_HWCFGR2_DBMFT_Pos)              /*!< 0x00000010 */
#define DCMIPP_HWCFGR2_DBMFT                DCMIPP_HWCFGR2_DBMFT_Msk                        /*!< Double buffer mode featured */
#define DCMIPP_HWCFGR2_PROCCLK_Pos          (8U)
#define DCMIPP_HWCFGR2_PROCCLK_Msk          (0x1UL << DCMIPP_HWCFGR2_PROCCLK_Pos)            /*!< 0x00000100 */
#define DCMIPP_HWCFGR2_PROCCLK              DCMIPP_HWCFGR2_PROCCLK_Msk                      /*!< Processing clock linked to AXI clock featured */
#define DCMIPP_HWCFGR2_ADDMOD_Pos           (12U)
#define DCMIPP_HWCFGR2_ADDMOD_Msk           (0x1UL << DCMIPP_HWCFGR2_ADDMOD_Pos)             /*!< 0x00001000 */
#define DCMIPP_HWCFGR2_ADDMOD               DCMIPP_HWCFGR2_ADDMOD_Msk                       /*!< Address modulo computation to access a small buffer in streaming featured */
#define DCMIPP_HWCFGR2_DEC1_Pos             (16U)
#define DCMIPP_HWCFGR2_DEC1_Msk             (0x1UL << DCMIPP_HWCFGR2_DEC1_Pos)               /*!< 0x00010000 */
#define DCMIPP_HWCFGR2_DEC1                 DCMIPP_HWCFGR2_DEC1_Msk                         /*!< Decimation on Pipe1 before downsize */
#define DCMIPP_HWCFGR2_DEC2_Pos             (17U)
#define DCMIPP_HWCFGR2_DEC2_Msk             (0x1UL << DCMIPP_HWCFGR2_DEC2_Pos)               /*!< 0x00020000 */
#define DCMIPP_HWCFGR2_DEC2                 DCMIPP_HWCFGR2_DEC2_Msk                         /*!< Decimation on Pipe2 before downsize */
#define DCMIPP_HWCFGR2_MCU_Pos              (20U)
#define DCMIPP_HWCFGR2_MCU_Msk              (0x1UL << DCMIPP_HWCFGR2_MCU_Pos)                /*!< 0x00100000 */
#define DCMIPP_HWCFGR2_MCU                  DCMIPP_HWCFGR2_MCU_Msk                          /*!< Macroblock unit as pixel format */
#define DCMIPP_HWCFGR2_TPG_Pos              (24U)
#define DCMIPP_HWCFGR2_TPG_Msk              (0x1UL << DCMIPP_HWCFGR2_TPG_Pos)                /*!< 0x01000000 */
#define DCMIPP_HWCFGR2_TPG                  DCMIPP_HWCFGR2_TPG_Msk                          /*!< Test pattern generator */
#define DCMIPP_HWCFGR2_STV_Pos              (28U)
#define DCMIPP_HWCFGR2_STV_Msk              (0x1UL << DCMIPP_HWCFGR2_STV_Pos)                /*!< 0x10000000 */
#define DCMIPP_HWCFGR2_STV                  DCMIPP_HWCFGR2_STV_Msk                          /*!< Statistic version */

/****************  Bit definition for DCMIPP_HWCFGR1 register  ****************/
#define DCMIPP_HWCFGR1_CSIFT_Pos            (0U)
#define DCMIPP_HWCFGR1_CSIFT_Msk            (0x1UL << DCMIPP_HWCFGR1_CSIFT_Pos)              /*!< 0x00000001 */
#define DCMIPP_HWCFGR1_CSIFT                DCMIPP_HWCFGR1_CSIFT_Msk                        /*!< CSI2 host protocol compliant */
#define DCMIPP_HWCFGR1_PIPENB_Pos           (4U)
#define DCMIPP_HWCFGR1_PIPENB_Msk           (0x3UL << DCMIPP_HWCFGR1_PIPENB_Pos)             /*!< 0x00000030 */
#define DCMIPP_HWCFGR1_PIPENB               DCMIPP_HWCFGR1_PIPENB_Msk                       /*!< Number of pipes */
#define DCMIPP_HWCFGR1_IPPLUGCFG_Pos        (8U)
#define DCMIPP_HWCFGR1_IPPLUGCFG_Msk        (0x1UL << DCMIPP_HWCFGR1_IPPLUGCFG_Pos)          /*!< 0x00000100 */
#define DCMIPP_HWCFGR1_IPPLUGCFG            DCMIPP_HWCFGR1_IPPLUGCFG_Msk                    /*!< IP-Plug configuration */
#define DCMIPP_HWCFGR1_DSP1FT_Pos           (12U)
#define DCMIPP_HWCFGR1_DSP1FT_Msk           (0x1UL << DCMIPP_HWCFGR1_DSP1FT_Pos)             /*!< 0x00001000 */
#define DCMIPP_HWCFGR1_DSP1FT               DCMIPP_HWCFGR1_DSP1FT_Msk                       /*!< Down-sampling feature for the pixel Pipe1 */
#define DCMIPP_HWCFGR1_DSP2FT_Pos           (13U)
#define DCMIPP_HWCFGR1_DSP2FT_Msk           (0x1UL << DCMIPP_HWCFGR1_DSP2FT_Pos)             /*!< 0x00002000 */
#define DCMIPP_HWCFGR1_DSP2FT               DCMIPP_HWCFGR1_DSP2FT_Msk                       /*!< Down-sampling feature for the pixel Pipe2 */
#define DCMIPP_HWCFGR1_RB2RGB_Pos           (16U)
#define DCMIPP_HWCFGR1_RB2RGB_Msk           (0x1UL << DCMIPP_HWCFGR1_RB2RGB_Pos)             /*!< 0x00010000 */
#define DCMIPP_HWCFGR1_RB2RGB               DCMIPP_HWCFGR1_RB2RGB_Msk                       /*!< Raw Bayer to RGB feature (demosaicer) */
#define DCMIPP_HWCFGR1_PLANARFT_Pos         (20U)
#define DCMIPP_HWCFGR1_PLANARFT_Msk         (0x3UL << DCMIPP_HWCFGR1_PLANARFT_Pos)           /*!< 0x00300000 */
#define DCMIPP_HWCFGR1_PLANARFT             DCMIPP_HWCFGR1_PLANARFT_Msk                     /*!< Buffer features for Pipe1 */
#define DCMIPP_HWCFGR1_ROI1NB_Pos           (24U)
#define DCMIPP_HWCFGR1_ROI1NB_Msk           (0xFUL << DCMIPP_HWCFGR1_ROI1NB_Pos)             /*!< 0x0F000000 */
#define DCMIPP_HWCFGR1_ROI1NB               DCMIPP_HWCFGR1_ROI1NB_Msk                       /*!< Number of ROIs for Pipe1 */
#define DCMIPP_HWCFGR1_ROI2NB_Pos           (28U)
#define DCMIPP_HWCFGR1_ROI2NB_Msk           (0xFUL << DCMIPP_HWCFGR1_ROI2NB_Pos)             /*!< 0xF0000000 */
#define DCMIPP_HWCFGR1_ROI2NB               DCMIPP_HWCFGR1_ROI2NB_Msk                       /*!< Number of ROIs for Pipe2 */

/*****************  Bit definition for DCMIPP_VERR register  ******************/
#define DCMIPP_VERR_MINREV_Pos              (0U)
#define DCMIPP_VERR_MINREV_Msk              (0xFUL << DCMIPP_VERR_MINREV_Pos)                /*!< 0x0000000F */
#define DCMIPP_VERR_MINREV                  DCMIPP_VERR_MINREV_Msk                          /*!< DCMIPP minor revision */
#define DCMIPP_VERR_MAJREV_Pos              (4U)
#define DCMIPP_VERR_MAJREV_Msk              (0xFUL << DCMIPP_VERR_MAJREV_Pos)                /*!< 0x000000F0 */
#define DCMIPP_VERR_MAJREV                  DCMIPP_VERR_MAJREV_Msk                          /*!< DCMIPP major revision */

/*****************  Bit definition for DCMIPP_IPIDR register  *****************/
#define DCMIPP_IPIDR_IDR_Pos                (0U)
#define DCMIPP_IPIDR_IDR_Msk                (0xFFFFFFFFUL << DCMIPP_IPIDR_IDR_Pos)           /*!< 0xFFFFFFFF */
#define DCMIPP_IPIDR_IDR                    DCMIPP_IPIDR_IDR_Msk                            /*!< Parallel camera interface (DCMI) and optional pixel processing (PP) */

/*****************  Bit definition for DCMIPP_SIDR register  ******************/
#define DCMIPP_SIDR_SID_Pos                 (0U)
#define DCMIPP_SIDR_SID_Msk                 (0xFFFFFFFFUL << DCMIPP_SIDR_SID_Pos)            /*!< 0xFFFFFFFF */
#define DCMIPP_SIDR_SID                     DCMIPP_SIDR_SID_Msk                             /*!< 4-Kbyte decoding space */

/******************************************************************************/
/*                                                                            */
/*                             DDR Controller                                 */
/*                                                                            */
/******************************************************************************/
/*****************  Bit definition for DDRC_MSTR register  *****************/
#define DDRC_MSTR_DDR3_Pos              (0U)
#define DDRC_MSTR_DDR3_Msk              (0x1UL << DDRC_MSTR_DDR3_Pos)              /*!< 0x00000001 */
#define DDRC_MSTR_DDR3                  DDRC_MSTR_DDR3_Msk                        /*!< Selects DDR3 SDRAM */
#define DDRC_MSTR_DDR4_Pos              (4U)
#define DDRC_MSTR_DDR4_Msk              (0x1UL << DDRC_MSTR_DDR4_Pos)              /*!< 0x00000010 */
#define DDRC_MSTR_DDR4                  DDRC_MSTR_DDR4_Msk                        /*!< Selects DDR4 SDRAM */
#define DDRC_MSTR_LPDDR4_Pos            (5U)
#define DDRC_MSTR_LPDDR4_Msk            (0x1UL << DDRC_MSTR_LPDDR4_Pos)            /*!< 0x00000020 */
#define DDRC_MSTR_LPDDR4                DDRC_MSTR_LPDDR4_Msk                      /*!< Selects LPDDR4 SDRAM */
#define DDRC_MSTR_DATA_BUS_WIDTH_Pos    (12U)
#define DDRC_MSTR_DATA_BUS_WIDTH_Msk    (0x3UL << DDRC_MSTR_DATA_BUS_WIDTH_Pos)    /*!< 0x00003000 */
#define DDRC_MSTR_DATA_BUS_WIDTH        DDRC_MSTR_DATA_BUS_WIDTH_Msk              /*!< Selects proportion of DQ bus width that is used by the SDRAM */
#define DDRC_MSTR_DATA_BUS_WIDTH_0      (0x1UL << DDRC_MSTR_DATA_BUS_WIDTH_Pos)    /*!< 0x00001000 */
#define DDRC_MSTR_DATA_BUS_WIDTH_1      (0x2UL << DDRC_MSTR_DATA_BUS_WIDTH_Pos)    /*!< 0x00002000 */
#define DDRC_MSTR_DLL_OFF_MODE_Pos      (15U)
#define DDRC_MSTR_DLL_OFF_MODE_Msk      (0x1UL << DDRC_MSTR_DLL_OFF_MODE_Pos)      /*!< 0x00008000 */
#define DDRC_MSTR_DLL_OFF_MODE          DDRC_MSTR_DLL_OFF_MODE_Msk                /*!< Set to 1 when the DDRC and DRAM has to be put in DLL-off mode for low frequency operation. */

/*****************  Bit definition for DDRC_STAT register  *****************/
#define DDRC_STAT_OPERATING_MODE_Pos        (0U)
#define DDRC_STAT_OPERATING_MODE_Msk        (0x7UL << DDRC_STAT_OPERATING_MODE_Pos)        /*!< 0x00000007 */
#define DDRC_STAT_OPERATING_MODE            DDRC_STAT_OPERATING_MODE_Msk                  /*!< Operating mode. This is 3-bits wide in configurations with mDDR/LPDDR2/LPDDR3/LPDDR4/DDR4 support and 2-bits in all other configurations. */
#define DDRC_STAT_OPERATING_MODE_0          (0x1UL << DDRC_STAT_OPERATING_MODE_Pos)        /*!< 0x00000001 */
#define DDRC_STAT_OPERATING_MODE_1          (0x2UL << DDRC_STAT_OPERATING_MODE_Pos)        /*!< 0x00000002 */
#define DDRC_STAT_OPERATING_MODE_2          (0x4UL << DDRC_STAT_OPERATING_MODE_Pos)        /*!< 0x00000004 */
#define DDRC_STAT_SELFREF_TYPE_Pos          (4U)
#define DDRC_STAT_SELFREF_TYPE_Msk          (0x3UL << DDRC_STAT_SELFREF_TYPE_Pos)          /*!< 0x00000030 */
#define DDRC_STAT_SELFREF_TYPE              DDRC_STAT_SELFREF_TYPE_Msk                    /*!< Flags if Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4) is entered and if it was under Automatic Self Refresh control only or not. */
#define DDRC_STAT_SELFREF_TYPE_0            (0x1UL << DDRC_STAT_SELFREF_TYPE_Pos)          /*!< 0x00000010 */
#define DDRC_STAT_SELFREF_TYPE_1            (0x2UL << DDRC_STAT_SELFREF_TYPE_Pos)          /*!< 0x00000020 */
#define DDRC_STAT_SELFREF_STATE_Pos         (8U)
#define DDRC_STAT_SELFREF_STATE_Msk         (0x3UL << DDRC_STAT_SELFREF_STATE_Pos)         /*!< 0x00000300 */
#define DDRC_STAT_SELFREF_STATE              DDRC_STAT_SELFREF_STATE_Msk                  /*!< SR or SRPD (SR power-down) for LPDDR4. This bitfield is used for frequency change and MRR/MRW access during SR. */
#define DDRC_STAT_SELFREF_STATE_0           (0x1UL << DDRC_STAT_SELFREF_STATE_Pos)         /*!< 0x00000100 */
#define DDRC_STAT_SELFREF_STATE_1           (0x2UL << DDRC_STAT_SELFREF_STATE_Pos)         /*!< 0x00000200 */

/***************  Bit definition for DDRC_MRCTRL0 register  ****************/
#define DDRC_MRCTRL0_MR_TYPE_Pos (0U)
#define DDRC_MRCTRL0_MR_TYPE_Msk (0x1UL << DDRC_MRCTRL0_MR_TYPE_Pos) /*!< 0x00000001 */
#define DDRC_MRCTRL0_MR_TYPE     DDRC_MRCTRL0_MR_TYPE_Msk           /*!< Indicates whether the mode register operation is read or write. Only used for LPDDR2/LPDDR3/LPDDR4/DDR4. */
#define DDRC_MRCTRL0_MR_RANK_Pos (4U)
#define DDRC_MRCTRL0_MR_RANK_Msk (0x1UL << DDRC_MRCTRL0_MR_RANK_Pos) /*!< 0x00000010 */
#define DDRC_MRCTRL0_MR_RANK     DDRC_MRCTRL0_MR_RANK_Msk           /*!< Controls which rank is accessed by MRCTRL0.mr_wr. Normally, it is desired to access all ranks, so all bits should be set to 1. However, for multi-rank UDIMMs/RDIMMs/LRDIMMs which implement address mirroring, it may be necessary to access ranks individually. */
#define DDRC_MRCTRL0_MR_ADDR_Pos (12U)
#define DDRC_MRCTRL0_MR_ADDR_Msk (0xFUL << DDRC_MRCTRL0_MR_ADDR_Pos) /*!< 0x0000F000 */
#define DDRC_MRCTRL0_MR_ADDR     DDRC_MRCTRL0_MR_ADDR_Msk           /*!< Address of the mode register that is to be written to. */
#define DDRC_MRCTRL0_MR_ADDR_0   (0x1UL << DDRC_MRCTRL0_MR_ADDR_Pos) /*!< 0x00001000 */
#define DDRC_MRCTRL0_MR_ADDR_1   (0x2UL << DDRC_MRCTRL0_MR_ADDR_Pos) /*!< 0x00002000 */
#define DDRC_MRCTRL0_MR_ADDR_2   (0x4UL << DDRC_MRCTRL0_MR_ADDR_Pos) /*!< 0x00004000 */
#define DDRC_MRCTRL0_MR_ADDR_3   (0x8UL << DDRC_MRCTRL0_MR_ADDR_Pos) /*!< 0x00008000 */
#define DDRC_MRCTRL0_MR_WR_Pos   (31U)
#define DDRC_MRCTRL0_MR_WR_Msk   (0x1UL << DDRC_MRCTRL0_MR_WR_Pos)   /*!< 0x80000000 */
#define DDRC_MRCTRL0_MR_WR       DDRC_MRCTRL0_MR_WR_Msk             /*!< Setting this register bit to 1 triggers a mode register read or write operation. When the MR operation is complete, the DDRC automatically clears this bit. The other register fields of this register must be written in a separate APB transaction, before setting this mr_wr bit. It is recommended NOT to set this signal if in Init, Deep power-down or MPSM operating modes. */

/****************  Bit definition for DDRC_MRSTAT register  ****************/
#define DDRC_MRSTAT_MR_WR_BUSY_Pos (0U)
#define DDRC_MRSTAT_MR_WR_BUSY_Msk (0x1UL << DDRC_MRSTAT_MR_WR_BUSY_Pos) /*!< 0x00000001 */
#define DDRC_MRSTAT_MR_WR_BUSY     DDRC_MRSTAT_MR_WR_BUSY_Msk           /*!< The SoC core may initiate a MR write operation only if this signal is low. This signal goes high in the clock after the DDRC accepts the MRW/MRR request. It goes low when the MRW/MRR command is issued to the SDRAM. It is recommended not to perform MRW/MRR commands when \qMRSTAT.mr_wr_busy\q is high. */

/****************  Bit definition for DDRC_PWRCTL register  ****************/
#define DDRC_PWRCTL_SELFREF_EN_Pos              (0U)
#define DDRC_PWRCTL_SELFREF_EN_Msk              (0x1UL << DDRC_PWRCTL_SELFREF_EN_Pos)              /*!< 0x00000001 */
#define DDRC_PWRCTL_SELFREF_EN                  DDRC_PWRCTL_SELFREF_EN_Msk                        /*!< If true then the DDRC puts the SDRAM into Self Refresh after a programmable number of cycles "maximum idle clocks before Self Refresh (PWRTMG.selfref_to_x32)". This register bit may be re-programmed during the course of normal operation. */
#define DDRC_PWRCTL_POWERDOWN_EN_Pos            (1U)
#define DDRC_PWRCTL_POWERDOWN_EN_Msk            (0x1UL << DDRC_PWRCTL_POWERDOWN_EN_Pos)            /*!< 0x00000002 */
#define DDRC_PWRCTL_POWERDOWN_EN                DDRC_PWRCTL_POWERDOWN_EN_Msk                      /*!< If true then the DDRC goes into power-down after a programmable number of cycles "maximum idle clocks before power down" (PWRTMG.powerdown_to_x32). */
#define DDRC_PWRCTL_EN_DFI_DRAM_CLK_DISABLE_Pos (3U)
#define DDRC_PWRCTL_EN_DFI_DRAM_CLK_DISABLE_Msk (0x1UL << DDRC_PWRCTL_EN_DFI_DRAM_CLK_DISABLE_Pos) /*!< 0x00000008 */
#define DDRC_PWRCTL_EN_DFI_DRAM_CLK_DISABLE     DDRC_PWRCTL_EN_DFI_DRAM_CLK_DISABLE_Msk           /*!< Enable the assertion of dfi_dram_clk_disable whenever a clock is not required by the SDRAM. */
#define DDRC_PWRCTL_SELFREF_SW_Pos              (5U)
#define DDRC_PWRCTL_SELFREF_SW_Msk              (0x1UL << DDRC_PWRCTL_SELFREF_SW_Pos)              /*!< 0x00000020 */
#define DDRC_PWRCTL_SELFREF_SW                  DDRC_PWRCTL_SELFREF_SW_Msk                        /*!< A value of 1 to this register causes system to move to Self Refresh state immediately, as long as it is not in INIT or DPD/MPSM operating_mode. This is referred to as Software Entry/Exit to Self Refresh. */
#define DDRC_PWRCTL_STAY_IN_SELFREF_Pos         (6U)
#define DDRC_PWRCTL_STAY_IN_SELFREF_Msk         (0x1UL << DDRC_PWRCTL_STAY_IN_SELFREF_Pos)         /*!< 0x00000040 */
#define DDRC_PWRCTL_STAY_IN_SELFREF             DDRC_PWRCTL_STAY_IN_SELFREF_Msk                   /*!< SR state transition. SR is an intermediate state to enter/exit SRPD state for LPDDR4. This bit controls transition from SR state. */

/****************  Bit definition for DDRC_PWRTMG register  ****************/
#define DDRC_PWRTMG_SELFREF_TO_X32_Pos   (16U)
#define DDRC_PWRTMG_SELFREF_TO_X32_Msk   (0xFFUL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)   /*!< 0x00FF0000 */
#define DDRC_PWRTMG_SELFREF_TO_X32       DDRC_PWRTMG_SELFREF_TO_X32_Msk              /*!< After this many clocks of the DDRC command channel being idle the DDRC automatically puts the SDRAM into Self Refresh. The DDRC command channel is considered idle when there are no HIF commands outstanding. This must be enabled in the PWRCTL.selfref_en. */
#define DDRC_PWRTMG_SELFREF_TO_X32_0     (0x1UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)    /*!< 0x00010000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_1     (0x2UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)    /*!< 0x00020000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_2     (0x4UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)    /*!< 0x00040000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_3     (0x8UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)    /*!< 0x00080000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_4     (0x10UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)   /*!< 0x00100000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_5     (0x20UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)   /*!< 0x00200000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_6     (0x40UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)   /*!< 0x00400000 */
#define DDRC_PWRTMG_SELFREF_TO_X32_7     (0x80UL << DDRC_PWRTMG_SELFREF_TO_X32_Pos)   /*!< 0x00800000 */

/***************  Bit definition for DDRC_HWLPCTL register  ****************/
#define DDRC_HWLPCTL_HW_LP_EN_Pos           (0U)
#define DDRC_HWLPCTL_HW_LP_EN_Msk           (0x1UL << DDRC_HWLPCTL_HW_LP_EN_Pos)           /*!< 0x00000001 */
#define DDRC_HWLPCTL_HW_LP_EN               DDRC_HWLPCTL_HW_LP_EN_Msk                     /*!< Enable for hardware low power interface. */
#define DDRC_HWLPCTL_HW_LP_EXIT_IDLE_EN_Pos (1U)
#define DDRC_HWLPCTL_HW_LP_EXIT_IDLE_EN_Msk (0x1UL << DDRC_HWLPCTL_HW_LP_EXIT_IDLE_EN_Pos)           /*!< 0x00000001 */
#define DDRC_HWLPCTL_HW_LP_EXIT_IDLE_EN     DDRC_HWLPCTL_HW_LP_EXIT_IDLE_EN_Msk                     /*!< Enable for hardware low power interface. */
#define DDRC_HWLPCTL_HW_LP_IDLE_X32_Pos     (16U)
#define DDRC_HWLPCTL_HW_LP_IDLE_X32_Msk     (0x3FFUL << DDRC_HWLPCTL_HW_LP_IDLE_X32_Pos)           /*!< 0x00000001 */
#define DDRC_HWLPCTL_HW_LP_IDLE_X32         DDRC_HWLPCTL_HW_LP_IDLE_X32_Msk                     /*!< Enable for hardware low power interface. */

/***************  Bit definition for DDRC_RFSHCTL3 register  ***************/
#define DDRC_RFSHCTL3_DIS_AUTO_REFRESH_Pos     (0U)
#define DDRC_RFSHCTL3_DIS_AUTO_REFRESH_Msk     (0x1UL << DDRC_RFSHCTL3_DIS_AUTO_REFRESH_Pos)     /*!< 0x00000001 */
#define DDRC_RFSHCTL3_DIS_AUTO_REFRESH         DDRC_RFSHCTL3_DIS_AUTO_REFRESH_Msk               /*!< When \q1\q, disable auto-refresh generated by the DDRC. When auto-refresh is disabled, the SoC core must generate refreshes using the registers DBGCMD.rankn_refresh. */
#define DDRC_RFSHCTL3_REFRESH_UPDATE_LEVEL_Pos (1U)
#define DDRC_RFSHCTL3_REFRESH_UPDATE_LEVEL_Msk (0x1UL << DDRC_RFSHCTL3_REFRESH_UPDATE_LEVEL_Pos) /*!< 0x00000002 */
#define DDRC_RFSHCTL3_REFRESH_UPDATE_LEVEL     DDRC_RFSHCTL3_REFRESH_UPDATE_LEVEL_Msk           /*!< Toggles this signal (either from 0 to 1 or from 1 to 0) to indicate that the refresh register(s) have been updated. */

/***************  Bit definition for DDRC_RFSHTMG register  ****************/
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos (16U)
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Msk (0xFFFUL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos) /*!< 0x0FFF0000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32     DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Msk             /*!< tREFI: Average time interval between refreshes per rank (Specification: 7.8us for DDR2, DDR3 and DDR4. See JEDEC specification for mDDR, LPDDR2, LPDDR3 and LPDDR4). */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_0   (0x1UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)   /*!< 0x00010000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_1   (0x2UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)   /*!< 0x00020000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_2   (0x4UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)   /*!< 0x00040000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_3   (0x8UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)   /*!< 0x00080000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_4   (0x10UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)  /*!< 0x00100000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_5   (0x20UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)  /*!< 0x00200000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_6   (0x40UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)  /*!< 0x00400000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_7   (0x80UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos)  /*!< 0x00800000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_8   (0x100UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos) /*!< 0x01000000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_9   (0x200UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos) /*!< 0x02000000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_10  (0x400UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos) /*!< 0x04000000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_X32_11  (0x800UL << DDRC_RFSHTMG_T_RFC_NOM_X1_X32_Pos) /*!< 0x08000000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_SEL_Pos (31U)
#define DDRC_RFSHTMG_T_RFC_NOM_X1_SEL_Msk (0x1UL << DDRC_RFSHTMG_T_RFC_NOM_X1_SEL_Pos)  /*!< 0x80000000 */
#define DDRC_RFSHTMG_T_RFC_NOM_X1_SEL     DDRC_RFSHTMG_T_RFC_NOM_X1_SEL_Msk         /*!< Specifies whether the t_rfc_nom_x1_x32 register value is x1 or x32. */

/****************  Bit definition for DDRC_INIT0 register  *****************/
#define DDRC_INIT0_SKIP_DRAM_INIT_Pos (30U)
#define DDRC_INIT0_SKIP_DRAM_INIT_Msk (0x3UL << DDRC_INIT0_SKIP_DRAM_INIT_Pos)   /*!< 0xC0000000 */
#define DDRC_INIT0_SKIP_DRAM_INIT     DDRC_INIT0_SKIP_DRAM_INIT_Msk             /*!< If lower bit is enabled the SDRAM initialization routine is skipped. The upper bit decides what state the controller starts up in when reset is removed */
#define DDRC_INIT0_SKIP_DRAM_INIT_0   (0x1UL << DDRC_INIT0_SKIP_DRAM_INIT_Pos)   /*!< 0x40000000 */
#define DDRC_INIT0_SKIP_DRAM_INIT_1   (0x2UL << DDRC_INIT0_SKIP_DRAM_INIT_Pos)   /*!< 0x80000000 */

/***************  Bit definition for DDRC_DFILPCFG0 register  ****************/
#define DDRC_DFILPCFG0_DFI_LP_EN_SR_Pos (8U)
#define DDRC_DFILPCFG0_DFI_LP_EN_SR_Msk (0x1UL << DDRC_DFILPCFG0_DFI_LP_EN_SR_Pos) /*!< 0x00000100 */
#define DDRC_DFILPCFG0_DFI_LP_EN_SR     DDRC_DFILPCFG0_DFI_LP_EN_SR_Msk           /*!< DFI low-power interface handshaking during SR entry/exit. */

/***************  Bit definition for DDRC_DFIMISC register  ****************/
#define DDRC_DFIMISC_DFI_INIT_COMPLETE_EN_Pos (0U)
#define DDRC_DFIMISC_DFI_INIT_COMPLETE_EN_Msk (0x1UL << DDRC_DFIMISC_DFI_INIT_COMPLETE_EN_Pos) /*!< 0x00000001 */
#define DDRC_DFIMISC_DFI_INIT_COMPLETE_EN     DDRC_DFIMISC_DFI_INIT_COMPLETE_EN_Msk           /*!< PHY initialization complete enable signal. */
#define DDRC_DFIMISC_DFI_INIT_START_Pos       (5U)
#define DDRC_DFIMISC_DFI_INIT_START_Msk       (0x1UL << DDRC_DFIMISC_DFI_INIT_START_Pos)       /*!< 0x00000020 */
#define DDRC_DFIMISC_DFI_INIT_START           DDRC_DFIMISC_DFI_INIT_START_Msk                 /*!< PHY init start request signal.When asserted it triggers the PHY init start request */
#define DDRC_DFIMISC_DFI_FREQUENCY_Pos        (8U)
#define DDRC_DFIMISC_DFI_FREQUENCY_Msk        (0x1FUL << DDRC_DFIMISC_DFI_FREQUENCY_Pos)       /*!< 0x00001F00 */
#define DDRC_DFIMISC_DFI_FREQUENCY            DDRC_DFIMISC_DFI_FREQUENCY_Msk                  /*!< PHY system operating frequency */

/***************  Bit definition for DDRC_DFISTAT register  ****************/
#define DDRC_DFISTAT_DFI_INIT_COMPLETE_Pos (0U)
#define DDRC_DFISTAT_DFI_INIT_COMPLETE_Msk (0x1UL << DDRC_DFISTAT_DFI_INIT_COMPLETE_Pos) /*!< 0x00000001 */
#define DDRC_DFISTAT_DFI_INIT_COMPLETE     DDRC_DFISTAT_DFI_INIT_COMPLETE_Msk           /*!< The status flag register which announces when the DFI initialization has been completed. The DFI INIT triggered by dfi_init_start signal and then the dfi_init_complete flag is polled to know when the initialization is done. */
#define DDRC_DFISTAT_DFI_LP_ACK_Pos        (1U)
#define DDRC_DFISTAT_DFI_LP_ACK_Msk        (0x1UL << DDRC_DFISTAT_DFI_LP_ACK_Pos)        /*!< 0x00000002 */
#define DDRC_DFISTAT_DFI_LP_ACK            DDRC_DFISTAT_DFI_LP_ACK_Msk                  /*!< Stores the value of dfi_lp_ack input to the controller. */

/*****************  Bit definition for DDRC_DBG1 register  *****************/
#define DDRC_DBG1_DIS_DQ_Pos  (0U)
#define DDRC_DBG1_DIS_DQ_Msk  (0x1UL << DDRC_DBG1_DIS_DQ_Pos)  /*!< 0x00000001 */
#define DDRC_DBG1_DIS_DQ      DDRC_DBG1_DIS_DQ_Msk            /*!< When 1, DDRC does not dequeue any transactions from the CAM. Bypass is also disabled. All transactions are queued in the CAM. No reads or writes are issued to SDRAM as long as this bit is asserted. */
#define DDRC_DBG1_DIS_HIF_Pos (1U)
#define DDRC_DBG1_DIS_HIF_Msk (0x1UL << DDRC_DBG1_DIS_HIF_Pos) /*!< 0x00000002 */
#define DDRC_DBG1_DIS_HIF     DDRC_DBG1_DIS_HIF_Msk           /*!< When 1, DDRC asserts the HIF command signal hif_cmd_stall. DDRC ignores the hif_cmd_valid and all other associated request signals. */

/****************  Bit definition for DDRC_DBGCAM register  ****************/
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos        (0U)
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Msk        (0x1FUL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)       /*!< 0x0000001F */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH            DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Msk                  /*!< High priority read queue depth */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_0          (0x1UL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)        /*!< 0x00000001 */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_1          (0x2UL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)        /*!< 0x00000002 */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_2          (0x4UL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)        /*!< 0x00000004 */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_3          (0x8UL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)        /*!< 0x00000008 */
#define DDRC_DBGCAM_DBG_HPR_Q_DEPTH_4          (0x10UL << DDRC_DBGCAM_DBG_HPR_Q_DEPTH_Pos)       /*!< 0x00000010 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos        (8U)
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Msk        (0x1FUL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)       /*!< 0x00001F00 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH            DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Msk                  /*!< Low priority read queue depth */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_0          (0x1UL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)        /*!< 0x00000100 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_1          (0x2UL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)        /*!< 0x00000200 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_2          (0x4UL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)        /*!< 0x00000400 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_3          (0x8UL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)        /*!< 0x00000800 */
#define DDRC_DBGCAM_DBG_LPR_Q_DEPTH_4          (0x10UL << DDRC_DBGCAM_DBG_LPR_Q_DEPTH_Pos)       /*!< 0x00001000 */
#define DDRC_DBGCAM_DBG_RD_Q_EMPTY_Pos         (25U)
#define DDRC_DBGCAM_DBG_RD_Q_EMPTY_Msk         (0x1UL << DDRC_DBGCAM_DBG_RD_Q_EMPTY_Pos)         /*!< 0x02000000 */
#define DDRC_DBGCAM_DBG_RD_Q_EMPTY             DDRC_DBGCAM_DBG_RD_Q_EMPTY_Msk                   /*!< When 1, all the Read command queues and Read data buffers inside DDRC are empty. This register is to be used for debug purpose. */
#define DDRC_DBGCAM_DBG_WR_Q_EMPTY_Pos         (26U)
#define DDRC_DBGCAM_DBG_WR_Q_EMPTY_Msk         (0x1UL << DDRC_DBGCAM_DBG_WR_Q_EMPTY_Pos)         /*!< 0x04000000 */
#define DDRC_DBGCAM_DBG_WR_Q_EMPTY             DDRC_DBGCAM_DBG_WR_Q_EMPTY_Msk                   /*!< When 1, all the Write command queues and Write data buffers inside DDRC are empty. This register is to be used for debug purpose. */
#define DDRC_DBGCAM_RD_DATA_PIPELINE_EMPTY_Pos (28U)
#define DDRC_DBGCAM_RD_DATA_PIPELINE_EMPTY_Msk (0x1UL << DDRC_DBGCAM_RD_DATA_PIPELINE_EMPTY_Pos) /*!< 0x10000000 */
#define DDRC_DBGCAM_RD_DATA_PIPELINE_EMPTY     DDRC_DBGCAM_RD_DATA_PIPELINE_EMPTY_Msk           /*!< This bit indicates that the read data pipeline on the DFI interface is empty. This register is intended to be polled at least twice after setting DBG1.dis_dq, to ensure that all remaining commands/data have completed. */
#define DDRC_DBGCAM_WR_DATA_PIPELINE_EMPTY_Pos (29U)
#define DDRC_DBGCAM_WR_DATA_PIPELINE_EMPTY_Msk (0x1UL << DDRC_DBGCAM_WR_DATA_PIPELINE_EMPTY_Pos) /*!< 0x20000000 */
#define DDRC_DBGCAM_WR_DATA_PIPELINE_EMPTY     DDRC_DBGCAM_WR_DATA_PIPELINE_EMPTY_Msk           /*!< This bit indicates that the write data pipeline on the DFI interface is empty. This register is intended to be polled at least twice after setting DBG1.dis_dq, to ensure that all remaining commands/data have completed. */

/****************  Bit definition for DDRC_DBGCMD register  ****************/
#define DDRC_DBGCMD_RANK0_REFRESH_Pos  (0U)
#define DDRC_DBGCMD_RANK0_REFRESH_Msk  (0x1UL << DDRC_DBGCMD_RANK0_REFRESH_Pos)  /*!< 0x00000001 */
#define DDRC_DBGCMD_RANK0_REFRESH      DDRC_DBGCMD_RANK0_REFRESH_Msk            /*!< Setting this register bit to 1 indicates to the DDRC to issue a refresh to rank 0. Writing to this bit causes DBGSTAT.rank0_refresh_busy to be set. When DBGSTAT.rank0_refresh_busy is cleared, the command has been stored in DDRC. */

/***************  Bit definition for DDRC_DBGSTAT register  ****************/
#define DDRC_DBGSTAT_RANK0_REFRESH_BUSY_Pos  (0U)
#define DDRC_DBGSTAT_RANK0_REFRESH_BUSY_Msk  (0x1UL << DDRC_DBGSTAT_RANK0_REFRESH_BUSY_Pos)  /*!< 0x00000001 */
#define DDRC_DBGSTAT_RANK0_REFRESH_BUSY      DDRC_DBGSTAT_RANK0_REFRESH_BUSY_Msk            /*!< SoC core may initiate a rank0_refresh operation (refresh operation to rank 0) only if this signal is low. This signal goes high in the clock after DBGCMD.rank0_refresh is set to one. It goes low when the rank0_refresh operation is stored in the DDRC. It is recommended not to perform rank0_refresh operations when this signal is high. */

/****************  Bit definition for DDRC_SWCTL register  *****************/
#define DDRC_SWCTL_SW_DONE_Pos (0U)
#define DDRC_SWCTL_SW_DONE_Msk (0x1UL << DDRC_SWCTL_SW_DONE_Pos) /*!< 0x00000001 */
#define DDRC_SWCTL_SW_DONE     DDRC_SWCTL_SW_DONE_Msk           /*!< Enable quasi-dynamic register programming outside reset. Program register to 0 to enable quasi-dynamic programming. Set back register to 1 once programming is done. */

/****************  Bit definition for DDRC_SWSTAT register  ****************/
#define DDRC_SWSTAT_SW_DONE_ACK_Pos (0U)
#define DDRC_SWSTAT_SW_DONE_ACK_Msk (0x1UL << DDRC_SWSTAT_SW_DONE_ACK_Pos) /*!< 0x00000001 */
#define DDRC_SWSTAT_SW_DONE_ACK     DDRC_SWSTAT_SW_DONE_ACK_Msk           /*!< Register programming done. This register is the echo of SWCTL.sw_done. Wait for sw_done value 1 to propagate to sw_done_ack at the end of the programming sequence to ensure that the correct registers values are propagated to the destination clock domains. */

/***************  Bit definition for DDRC_PCTRL_0 register  ****************/
#define DDRC_PCTRL_0_PORT_EN_Pos (0U)
#define DDRC_PCTRL_0_PORT_EN_Msk (0x1UL << DDRC_PCTRL_0_PORT_EN_Pos) /*!< 0x00000001 */
#define DDRC_PCTRL_0_PORT_EN     DDRC_PCTRL_0_PORT_EN_Msk           /*!< Enables AXI port n. */

/***************  Bit definition for DDRC_PCTRL_1 register  ****************/
#define DDRC_PCTRL_1_PORT_EN_Pos (0U)
#define DDRC_PCTRL_1_PORT_EN_Msk (0x1UL << DDRC_PCTRL_1_PORT_EN_Pos) /*!< 0x00000001 */
#define DDRC_PCTRL_1_PORT_EN     DDRC_PCTRL_1_PORT_EN_Msk           /*!< Enables AXI port n. */

/******************************************************************************/
/*                                                                            */
/*                             DDRDBG (DDRSS sysconf)                         */
/*                                                                            */
/******************************************************************************/
/***************  Bit definition for DDRDBG_LP_DISABLE  ********************/
#define DDRDBG_LP_DISABLE_LPI_XPI_DISABLE_Pos  (0U)
#define DDRDBG_LP_DISABLE_LPI_XPI_DISABLE_Msk  (0x1UL << DDRDBG_LP_DISABLE_LPI_XPI_DISABLE_Pos)  /*!< 0x00000001 */
#define DDRDBG_LP_DISABLE_LPI_XPI_DISABLE      DDRDBG_LP_DISABLE_LPI_XPI_DISABLE_Msk            /*!< Disables the possibility to automatically (out of RCC control) gate down the DDRC clock when an inactivity period is detected. */
#define DDRDBG_LP_DISABLE_LPI_DDRC_DISABLE_Pos (8U)
#define DDRDBG_LP_DISABLE_LPI_DDRC_DISABLE_Msk (0x1UL << DDRDBG_LP_DISABLE_LPI_DDRC_DISABLE_Pos) /*!< 0x00000100 */
#define DDRDBG_LP_DISABLE_LPI_DDRC_DISABLE     DDRDBG_LP_DISABLE_LPI_DDRC_DISABLE_Msk           /*!< Disables the possibility to automatically (out of RCC control) gate down the XPI port axi_clock when an inactivity period is detected. */

/***************  Bit definition for DDRDBG_BYPASS_PCLKEN  *****************/
#define DDRDBG_BYPASS_PCLKEN_ENABLE_Pos  (0U)
#define DDRDBG_BYPASS_PCLKEN_ENABLE_Msk  (0x1UL << DDRDBG_BYPASS_PCLKEN_ENABLE_Pos)  /*!< 0x00000001 */
#define DDRDBG_BYPASS_PCLKEN_ENABLE      DDRDBG_BYPASS_PCLKEN_ENABLE_Msk            /*!< The DDRPHYC Bypass_Pclken is active. The targeted data rate is less than 666 MT/s. The clock fed to the SDRAM interface is the one coming directly from the interfan frac pll, and the DDRPHYC does not alter it. */

/***************  Bit definition for DDRDBG_DDRC_AUTO_SR_DELAY  ************/
#define DDRDBG_DDRC_AUTO_SR_DELAY_DELAY_CYCLES_Pos  (0U)
#define DDRDBG_DDRC_AUTO_SR_DELAY_DELAY_CYCLES_Msk  (0x7FUL << DDRDBG_DDRC_AUTO_SR_DELAY_DELAY_CYCLES_Pos)  /*!< 0x0000007F */
#define DDRDBG_DDRC_AUTO_SR_DELAY_DELAY_CYCLES      DDRDBG_DDRC_AUTO_SR_DELAY_DELAY_CYCLES_Msk             /*!< Number of delay cycles to wait before to gate down the DDRC clock when in auto self-refresh. */

/***************  Bit definition for DDRDBG_OBSP_CTRL  *********************/
#define DDRDBG_OBSP_CTRL_OBSP0_SEL_Pos  (0U)
#define DDRDBG_OBSP_CTRL_OBSP0_SEL_Msk  (0x1FUL << DDRDBG_OBSP_CTRL_OBSP0_SEL_Pos)  /*!< 0x0000001F */
#define DDRDBG_OBSP_CTRL_OBSP0_SEL      DDRDBG_OBSP_CTRL_OBSP0_SEL_Msk             /*!< Selects which of the input observable signal is forwarded to the HDP on selectable observability line 0. */
#define DDRDBG_OBSP_CTRL_OBSP1_SEL_Pos  (8U)
#define DDRDBG_OBSP_CTRL_OBSP1_SEL_Msk  (0x1FUL << DDRDBG_OBSP_CTRL_OBSP1_SEL_Pos)  /*!< 0x00001F00 */
#define DDRDBG_OBSP_CTRL_OBSP1_SEL      DDRDBG_OBSP_CTRL_OBSP1_SEL_Msk             /*!< Selects which of the input observable signal is forwarded to the HDP on selectable observability line 1. */
#define DDRDBG_OBSP_CTRL_OBSP2_SEL_Pos  (16U)
#define DDRDBG_OBSP_CTRL_OBSP2_SEL_Msk  (0x1FUL << DDRDBG_OBSP_CTRL_OBSP2_SEL_Pos)  /*!< 0x001F0000 */
#define DDRDBG_OBSP_CTRL_OBSP2_SEL      DDRDBG_OBSP_CTRL_OBSP2_SEL_Msk             /*!< Selects which of the input observable signal is forwarded to the HDP on selectable observability line 2. */
#define DDRDBG_OBSP_CTRL_OBSP3_SEL_Pos  (24U)
#define DDRDBG_OBSP_CTRL_OBSP3_SEL_Msk  (0x1FUL << DDRDBG_OBSP_CTRL_OBSP3_SEL_Pos)  /*!< 0x1F000000 */
#define DDRDBG_OBSP_CTRL_OBSP3_SEL      DDRDBG_OBSP_CTRL_OBSP3_SEL_Msk             /*!< Selects which of the input observable signal is forwarded to the HDP on selectable observability line 3. */

/***************  Bit definition for DDRDBG_FRAC_PLL_LOCK  *****************/
#define DDRDBG_FRAC_PLL_LOCK_LOCK_Pos  (0U)
#define DDRDBG_FRAC_PLL_LOCK_LOCK_Msk  (0x1UL << DDRDBG_FRAC_PLL_LOCK_LOCK_Pos)  /*!< 0x00000001 */
#define DDRDBG_FRAC_PLL_LOCK_LOCK      DDRDBG_FRAC_PLL_LOCK_LOCK_Msk            /*!< PLL lock, direct copy of ddrss_pll2_lock. */

/***************  Bit definition for DDRDBG_DTO_OUTPUT  ********************/
#define DDRDBG_DTO_OUTPUT_DTO_Pos  (0U)
#define DDRDBG_DTO_OUTPUT_DTO_Msk  (0x1UL << DDRDBG_DTO_OUTPUT_DTO_Pos)  /*!< 0x00000001 */
#define DDRDBG_DTO_OUTPUT_DTO      DDRDBG_DTO_OUTPUT_DTO_Msk            /*!< DDRPHYC DTO output is stored in this register. Among other signals of interests, the DDRPHYC PLL lock can be observed on this register. */

/***************  Bit definition for DDRDBG_DFI_ERRORS_CTRL  ***************/
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_CLEAR_Pos  (0U)
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_CLEAR_Msk  (0x1UL << DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_CLEAR_Pos)  /*!< 0x00000001 */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_CLEAR      DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_CLEAR_Msk            /*!< Clears the interrupt linked with dfi_error0. */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_SET_Pos    (1U)
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_SET_Msk    (0x1UL << DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_SET_Pos)    /*!< 0x00000002 */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_SET        DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR0_SET_Msk              /*!< Triggers the interrupt linked with dfi_error0. */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_CLEAR_Pos  (8U)
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_CLEAR_Msk  (0x1UL << DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_CLEAR_Pos)  /*!< 0x00000100 */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_CLEAR      DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_CLEAR_Msk            /*!< Clears the interrupt linked with dfi_error1. */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_SET_Pos    (9U)
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_SET_Msk    (0x1UL << DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_SET_Pos)    /*!< 0x00000200 */
#define DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_SET        DDRDBG_DFI_ERRORS_CTRL_DFI_ERROR1_SET_Msk              /*!< Triggers the interrupt linked with dfi_error1. */

/***************  Bit definition for DDRDBG_DFI_ERROR_STATUS  **************/
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR0_STATUS_Pos  (0U)
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR0_STATUS_Msk  (0x1UL << DDRDBG_DFI_ERROR_STATUS_DFI_ERROR0_STATUS_Pos)  /*!< 0x00000001 */
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR0_STATUS      DDRDBG_DFI_ERROR_STATUS_DFI_ERROR0_STATUS_Msk            /*!< Gets the status of the interrupt linked with dfi_error0. */
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR1_STATUS_Pos  (8U)
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR1_STATUS_Msk  (0x1UL << DDRDBG_DFI_ERROR_STATUS_DFI_ERROR1_STATUS_Pos)  /*!< 0x00000100 */
#define DDRDBG_DFI_ERROR_STATUS_DFI_ERROR1_STATUS      DDRDBG_DFI_ERROR_STATUS_DFI_ERROR1_STATUS_Msk            /*!< Gets the status of the interrupt linked with dfi_error1. */

/***************  Bit definition for DDRDBG_DFI_ERROR_MSK  *****************/
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR0_MASK_Pos  (0U)
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR0_MASK_Msk  (0x1UL << DDRDBG_DFI_ERROR_MSK_DFI_ERROR0_MASK_Pos)  /*!< 0x00000001 */
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR0_MASK      DDRDBG_DFI_ERROR_MSK_DFI_ERROR0_MASK_Msk            /*!< Interrupt linked to dfi_error0 is masked. Clears the interrupt linked with dfi_error0. */
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR1_MASK_Pos  (8U)
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR1_MASK_Msk  (0x1UL << DDRDBG_DFI_ERROR_MSK_DFI_ERROR1_MASK_Pos)  /*!< 0x00000100 */
#define DDRDBG_DFI_ERROR_MSK_DFI_ERROR1_MASK      DDRDBG_DFI_ERROR_MSK_DFI_ERROR1_MASK_Msk            /*!< Interrupt linked to dfi_error1 is masked. Clears the interrupt linked with dfi_error1. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_ADD3_0  *******/
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD0_Pos  (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD0_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD0_Pos)  /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD0      DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD0_Msk             /* Remapping input bit on add0 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD1_Pos  (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD1_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD1_Pos)  /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD1      DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD1_Msk             /* Remapping input bit on add1 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD2_Pos  (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD2_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD2_Pos)  /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD2      DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD2_Msk             /* Remapping input bit on add2 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD3_Pos  (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD3_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD3_Pos)  /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD3      DDRDBG_DDR34_AC_SWIZZLE_ADD3_0_DDR34_AC_SWIZZLING_ADD3_Msk             /* Remapping input bit on add3 DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_ADD7_4  *******/
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD4_Pos  (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD4_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD4_Pos)  /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD4      DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD4_Msk             /* Remapping input bit on add4 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD5_Pos  (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD5_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD5_Pos)  /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD5      DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD5_Msk             /* Remapping input bit on add5 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD6_Pos  (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD6_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD6_Pos)  /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD6      DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD6_Msk             /* Remapping input bit on add6 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD7_Pos  (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD7_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD7_Pos)  /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD7      DDRDBG_DDR34_AC_SWIZZLE_ADD7_4_DDR34_AC_SWIZZLING_ADD7_Msk             /* Remapping input bit on add7 DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_ADD11_8  ******/
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD8_Pos   (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD8_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD8_Pos)   /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD8       DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD8_Msk              /* Remapping input bit on add8 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD9_Pos   (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD9_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD9_Pos)   /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD9       DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD9_Msk              /* Remapping input bit on add9 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD10_Pos  (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD10_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD10_Pos)  /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD10      DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD10_Msk             /* Remapping input bit on add10 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD11_Pos  (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD11_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD11_Pos)  /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD11      DDRDBG_DDR34_AC_SWIZZLE_ADD11_8_DDR34_AC_SWIZZLING_ADD11_Msk             /* Remapping input bit on add11 DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_ADD15_12  *****/
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD12_Pos  (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD12_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD12_Pos)  /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD12      DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD12_Msk             /* Remapping input bit on add12 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD13_Pos  (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD13_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD13_Pos)  /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD13      DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD13_Msk             /* Remapping input bit on add13 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD14_Pos  (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD14_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD14_Pos)  /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD14      DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD14_Msk             /* Remapping input bit on add14 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD15_Pos  (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD15_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD15_Pos)  /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD15      DDRDBG_DDR34_AC_SWIZZLE_ADD15_12_DDR34_AC_SWIZZLING_ADD15_Msk             /* Remapping input bit on add15 DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN  ***/
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_ACTN_Pos  (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_ACTN_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_ACTN_Pos)  /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_ACTN      DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_ACTN_Msk             /* Remapping input bit on actn DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK0_Pos   (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK0_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK0_Pos)   /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK0       DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK0_Msk              /* Remapping input bit on bk0 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK1_Pos   (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK1_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK1_Pos)   /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK1       DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK1_Msk              /* Remapping input bit on bk1 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK2_Pos   (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK2_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK2_Pos)   /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK2       DDRDBG_DDR34_AC_SWIZZLE_BK2_0_ACTN_DDR34_AC_SWIZZLING_BK2_Msk              /* Remapping input bit on bk2 DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0  */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG0_Pos   (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG0_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG0_Pos)   /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG0       DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG0_Msk              /* Remapping input bit on bg0 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG1_Pos   (8U)
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG1_Msk   (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG1_Pos)   /*!< 0x00001F00 */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG1       DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_BG1_Msk              /* Remapping input bit on bg1 DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_CASN_Pos  (16U)
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_CASN_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_CASN_Pos)  /*!< 0x001F0000 */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_CASN      DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_CASN_Msk             /* Remapping input bit on casn DDRPHYC input at the DFI interface. */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_RASN_Pos  (24U)
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_RASN_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_RASN_Pos)  /*!< 0x1F000000 */
#define DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_RASN      DDRDBG_DDR34_AC_SWIZZLE_RASN_CASN_BG1_0_DDR34_AC_SWIZZLING_RASN_Msk             /* Remapping input bit on rasn DDRPHYC input at the DFI interface. */

/***************  Bit definition for DDRDBG_DDR34_AC_SWIZZLE_WEN  **********/
#define DDRDBG_DDR34_AC_SWIZZLE_WEN_DDR34_AC_SWIZZLING_WEN_Pos  (0U)
#define DDRDBG_DDR34_AC_SWIZZLE_WEN_DDR34_AC_SWIZZLING_WEN_Msk  (0x1FUL << DDRDBG_DDR34_AC_SWIZZLE_WEN_DDR34_AC_SWIZZLING_WEN_Pos)   /*!< 0x0000001F */
#define DDRDBG_DDR34_AC_SWIZZLE_WEN_DDR34_AC_SWIZZLING_WEN      DDRDBG_DDR34_AC_SWIZZLE_WEN_DDR34_AC_SWIZZLING_WEN_Msk              /* Remapping input bit on wen DDRPHYC input at the DFI interface. */

/******************************************************************************/
/*                                                                            */
/*                             DMA Controller                                 */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for DMA_SECCFGR register  ****************/
#define DMA_VER_V1_6

#define DMA_SECCFGR_SEC0_Pos     (0U)
#define DMA_SECCFGR_SEC0_Msk     (0x1UL << DMA_SECCFGR_SEC0_Pos)                /*!< 0x00000001 */
#define DMA_SECCFGR_SEC0         DMA_SECCFGR_SEC0_Msk                          /*!< Secure State of Channel 0 */
#define DMA_SECCFGR_SEC1_Pos     (1U)
#define DMA_SECCFGR_SEC1_Msk     (0x1UL << DMA_SECCFGR_SEC1_Pos)                /*!< 0x00000002 */
#define DMA_SECCFGR_SEC1         DMA_SECCFGR_SEC1_Msk                          /*!< Secure State of Channel 1 */
#define DMA_SECCFGR_SEC2_Pos     (2U)
#define DMA_SECCFGR_SEC2_Msk     (0x1UL << DMA_SECCFGR_SEC2_Pos)                /*!< 0x00000004 */
#define DMA_SECCFGR_SEC2         DMA_SECCFGR_SEC2_Msk                          /*!< Secure State of Channel 2 */
#define DMA_SECCFGR_SEC3_Pos     (3U)
#define DMA_SECCFGR_SEC3_Msk     (0x1UL << DMA_SECCFGR_SEC3_Pos)                /*!< 0x00000008 */
#define DMA_SECCFGR_SEC3         DMA_SECCFGR_SEC3_Msk                          /*!< Secure State of Channel 3 */
#define DMA_SECCFGR_SEC4_Pos     (4U)
#define DMA_SECCFGR_SEC4_Msk     (0x1UL << DMA_SECCFGR_SEC4_Pos)                /*!< 0x00000010 */
#define DMA_SECCFGR_SEC4         DMA_SECCFGR_SEC4_Msk                          /*!< Secure State of Channel 4 */
#define DMA_SECCFGR_SEC5_Pos     (5U)
#define DMA_SECCFGR_SEC5_Msk     (0x1UL << DMA_SECCFGR_SEC5_Pos)                /*!< 0x00000020 */
#define DMA_SECCFGR_SEC5         DMA_SECCFGR_SEC5_Msk                          /*!< Secure State of Channel 5 */
#define DMA_SECCFGR_SEC6_Pos     (6U)
#define DMA_SECCFGR_SEC6_Msk     (0x1UL << DMA_SECCFGR_SEC6_Pos)                /*!< 0x00000040 */
#define DMA_SECCFGR_SEC6         DMA_SECCFGR_SEC6_Msk                          /*!< Secure State of Channel 6 */
#define DMA_SECCFGR_SEC7_Pos     (7U)
#define DMA_SECCFGR_SEC7_Msk     (0x1UL << DMA_SECCFGR_SEC7_Pos)                /*!< 0x00000080 */
#define DMA_SECCFGR_SEC7         DMA_SECCFGR_SEC7_Msk                          /*!< Secure State of Channel 7 */
#define DMA_SECCFGR_SEC8_Pos     (8U)
#define DMA_SECCFGR_SEC8_Msk     (0x1UL << DMA_SECCFGR_SEC8_Pos)                /*!< 0x00000100 */
#define DMA_SECCFGR_SEC8         DMA_SECCFGR_SEC8_Msk                          /*!< Secure State of Channel 8 */
#define DMA_SECCFGR_SEC9_Pos     (9U)
#define DMA_SECCFGR_SEC9_Msk     (0x1UL << DMA_SECCFGR_SEC9_Pos)                /*!< 0x00000200 */
#define DMA_SECCFGR_SEC9         DMA_SECCFGR_SEC9_Msk                          /*!< Secure State of Channel 9 */
#define DMA_SECCFGR_SEC10_Pos    (10U)
#define DMA_SECCFGR_SEC10_Msk    (0x1UL << DMA_SECCFGR_SEC10_Pos)               /*!< 0x00000400 */
#define DMA_SECCFGR_SEC10        DMA_SECCFGR_SEC10_Msk                         /*!< Secure State of Channel 10 */
#define DMA_SECCFGR_SEC11_Pos    (11U)
#define DMA_SECCFGR_SEC11_Msk    (0x1UL << DMA_SECCFGR_SEC11_Pos)               /*!< 0x00000800 */
#define DMA_SECCFGR_SEC11        DMA_SECCFGR_SEC11_Msk                         /*!< Secure State of Channel 11 */
#define DMA_SECCFGR_SEC12_Pos    (12U)
#define DMA_SECCFGR_SEC12_Msk    (0x1UL << DMA_SECCFGR_SEC12_Pos)               /*!< 0x00001000 */
#define DMA_SECCFGR_SEC12        DMA_SECCFGR_SEC12_Msk                         /*!< Secure State of Channel 12 */
#define DMA_SECCFGR_SEC13_Pos    (13U)
#define DMA_SECCFGR_SEC13_Msk    (0x1UL << DMA_SECCFGR_SEC13_Pos)               /*!< 0x00002000 */
#define DMA_SECCFGR_SEC13        DMA_SECCFGR_SEC13_Msk                         /*!< Secure State of Channel 13 */
#define DMA_SECCFGR_SEC14_Pos    (14U)
#define DMA_SECCFGR_SEC14_Msk    (0x1UL << DMA_SECCFGR_SEC14_Pos)               /*!< 0x00004000 */
#define DMA_SECCFGR_SEC14        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 14 */
#define DMA_SECCFGR_SEC15_Pos    (15U)
#define DMA_SECCFGR_SEC15_Msk    (0x1UL << DMA_SECCFGR_SEC15_Pos)               /*!< 0x00008000 */
#define DMA_SECCFGR_SEC15        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 15 */

/*******************  Bit definition for DMA_PRIVCFGR register  ****************/
#define DMA_PRIVCFGR_PRIV0_Pos   (0U)
#define DMA_PRIVCFGR_PRIV0_Msk   (0x1UL << DMA_PRIVCFGR_PRIV0_Pos)              /*!< 0x00000001 */
#define DMA_PRIVCFGR_PRIV0       DMA_PRIVCFGR_PRIV0_Msk                        /*!< Privileged State of Channel 0 */
#define DMA_PRIVCFGR_PRIV1_Pos   (1U)
#define DMA_PRIVCFGR_PRIV1_Msk   (0x1UL << DMA_PRIVCFGR_PRIV1_Pos)              /*!< 0x00000002 */
#define DMA_PRIVCFGR_PRIV1       DMA_PRIVCFGR_PRIV1_Msk                        /*!< Privileged State of Channel 1 */
#define DMA_PRIVCFGR_PRIV2_Pos   (2U)
#define DMA_PRIVCFGR_PRIV2_Msk   (0x1UL << DMA_PRIVCFGR_PRIV2_Pos)              /*!< 0x00000004 */
#define DMA_PRIVCFGR_PRIV2       DMA_PRIVCFGR_PRIV2_Msk                        /*!< Privileged State of Channel 2 */
#define DMA_PRIVCFGR_PRIV3_Pos   (3U)
#define DMA_PRIVCFGR_PRIV3_Msk   (0x1UL << DMA_PRIVCFGR_PRIV3_Pos)              /*!< 0x00000008 */
#define DMA_PRIVCFGR_PRIV3       DMA_PRIVCFGR_PRIV3_Msk                        /*!< Privileged State of Channel 3 */
#define DMA_PRIVCFGR_PRIV4_Pos   (4U)
#define DMA_PRIVCFGR_PRIV4_Msk   (0x1UL << DMA_PRIVCFGR_PRIV4_Pos)              /*!< 0x00000010 */
#define DMA_PRIVCFGR_PRIV4       DMA_PRIVCFGR_PRIV4_Msk                        /*!< Privileged State of Channel 4 */
#define DMA_PRIVCFGR_PRIV5_Pos   (5U)
#define DMA_PRIVCFGR_PRIV5_Msk   (0x1UL << DMA_PRIVCFGR_PRIV5_Pos)              /*!< 0x00000020 */
#define DMA_PRIVCFGR_PRIV5       DMA_PRIVCFGR_PRIV5_Msk                        /*!< Privileged State of Channel 5 */
#define DMA_PRIVCFGR_PRIV6_Pos   (6U)
#define DMA_PRIVCFGR_PRIV6_Msk   (0x1UL << DMA_PRIVCFGR_PRIV6_Pos)              /*!< 0x00000040 */
#define DMA_PRIVCFGR_PRIV6       DMA_PRIVCFGR_PRIV6_Msk                        /*!< Privileged State of Channel 6 */
#define DMA_PRIVCFGR_PRIV7_Pos   (7U)
#define DMA_PRIVCFGR_PRIV7_Msk   (0x1UL << DMA_PRIVCFGR_PRIV7_Pos)              /*!< 0x00000080 */
#define DMA_PRIVCFGR_PRIV7       DMA_PRIVCFGR_PRIV7_Msk                        /*!< Privileged State of Channel 7 */
#define DMA_PRIVCFGR_PRIV8_Pos   (8U)
#define DMA_PRIVCFGR_PRIV8_Msk   (0x1UL << DMA_PRIVCFGR_PRIV8_Pos)              /*!< 0x00000100 */
#define DMA_PRIVCFGR_PRIV8       DMA_PRIVCFGR_PRIV8_Msk                        /*!< Privileged State of Channel 8 */
#define DMA_PRIVCFGR_PRIV9_Pos   (9U)
#define DMA_PRIVCFGR_PRIV9_Msk   (0x1UL << DMA_PRIVCFGR_PRIV9_Pos)              /*!< 0x00000200 */
#define DMA_PRIVCFGR_PRIV9       DMA_PRIVCFGR_PRIV9_Msk                        /*!< Privileged State of Channel 9 */
#define DMA_PRIVCFGR_PRIV10_Pos  (10U)
#define DMA_PRIVCFGR_PRIV10_Msk  (0x1UL << DMA_PRIVCFGR_PRIV10_Pos)             /*!< 0x00000400 */
#define DMA_PRIVCFGR_PRIV10      DMA_PRIVCFGR_PRIV10_Msk                       /*!< Privileged State of Channel 10 */
#define DMA_PRIVCFGR_PRIV11_Pos  (11U)
#define DMA_PRIVCFGR_PRIV11_Msk  (0x1UL << DMA_PRIVCFGR_PRIV11_Pos)             /*!< 0x00000800 */
#define DMA_PRIVCFGR_PRIV11      DMA_PRIVCFGR_PRIV11_Msk                       /*!< Privileged State of Channel 11 */
#define DMA_PRIVCFGR_PRIV12_Pos  (12U)
#define DMA_PRIVCFGR_PRIV12_Msk  (0x1UL << DMA_PRIVCFGR_PRIV12_Pos)             /*!< 0x00001000 */
#define DMA_PRIVCFGR_PRIV12      DMA_PRIVCFGR_PRIV12_Msk                       /*!< Privileged State of Channel 12 */
#define DMA_PRIVCFGR_PRIV13_Pos  (13U)
#define DMA_PRIVCFGR_PRIV13_Msk  (0x1UL << DMA_PRIVCFGR_PRIV13_Pos)             /*!< 0x00002000 */
#define DMA_PRIVCFGR_PRIV13      DMA_PRIVCFGR_PRIV13_Msk                       /*!< Privileged State of Channel 13 */
#define DMA_PRIVCFGR_PRIV14_Pos  (14U)
#define DMA_PRIVCFGR_PRIV14_Msk  (0x1UL << DMA_PRIVCFGR_PRIV14_Pos)             /*!< 0x00004000 */
#define DMA_PRIVCFGR_PRIV14      DMA_PRIVCFGR_PRIV14_Msk                       /*!< Privileged State of Channel 14 */
#define DMA_PRIVCFGR_PRIV15_Pos  (15U)
#define DMA_PRIVCFGR_PRIV15_Msk  (0x1UL << DMA_PRIVCFGR_PRIV15_Pos)             /*!< 0x00008000 */
#define DMA_PRIVCFGR_PRIV15      DMA_PRIVCFGR_PRIV15_Msk                       /*!< Privileged State of Channel 15 */

/***************  Bit definition for DMA_RCFGLOCKR register  ***************/
#define DMA_RCFGLOCKR_LOCK0_Pos  (0U)
#define DMA_RCFGLOCKR_LOCK0_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK0_Pos)             /*!< 0x00000001 */
#define DMA_RCFGLOCKR_LOCK0      DMA_RCFGLOCKR_LOCK0_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK1_Pos  (1U)
#define DMA_RCFGLOCKR_LOCK1_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK1_Pos)             /*!< 0x00000002 */
#define DMA_RCFGLOCKR_LOCK1      DMA_RCFGLOCKR_LOCK1_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK2_Pos  (2U)
#define DMA_RCFGLOCKR_LOCK2_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK2_Pos)             /*!< 0x00000004 */
#define DMA_RCFGLOCKR_LOCK2      DMA_RCFGLOCKR_LOCK2_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK3_Pos  (3U)
#define DMA_RCFGLOCKR_LOCK3_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK3_Pos)             /*!< 0x00000008 */
#define DMA_RCFGLOCKR_LOCK3      DMA_RCFGLOCKR_LOCK3_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK4_Pos  (4U)
#define DMA_RCFGLOCKR_LOCK4_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK4_Pos)             /*!< 0x00000010 */
#define DMA_RCFGLOCKR_LOCK4      DMA_RCFGLOCKR_LOCK4_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK5_Pos  (5U)
#define DMA_RCFGLOCKR_LOCK5_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK5_Pos)             /*!< 0x00000020 */
#define DMA_RCFGLOCKR_LOCK5      DMA_RCFGLOCKR_LOCK5_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK6_Pos  (6U)
#define DMA_RCFGLOCKR_LOCK6_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK6_Pos)             /*!< 0x00000040 */
#define DMA_RCFGLOCKR_LOCK6      DMA_RCFGLOCKR_LOCK6_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK7_Pos  (7U)
#define DMA_RCFGLOCKR_LOCK7_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK7_Pos)             /*!< 0x00000080 */
#define DMA_RCFGLOCKR_LOCK7      DMA_RCFGLOCKR_LOCK7_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK8_Pos  (8U)
#define DMA_RCFGLOCKR_LOCK8_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK8_Pos)             /*!< 0x00000100 */
#define DMA_RCFGLOCKR_LOCK8      DMA_RCFGLOCKR_LOCK8_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK9_Pos  (9U)
#define DMA_RCFGLOCKR_LOCK9_Msk  (0x1UL << DMA_RCFGLOCKR_LOCK9_Pos)             /*!< 0x00000200 */
#define DMA_RCFGLOCKR_LOCK9      DMA_RCFGLOCKR_LOCK9_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK10_Pos (10U)
#define DMA_RCFGLOCKR_LOCK10_Msk (0x1UL << DMA_RCFGLOCKR_LOCK10_Pos)            /*!< 0x00000400 */
#define DMA_RCFGLOCKR_LOCK10     DMA_RCFGLOCKR_LOCK10_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK11_Pos (11U)
#define DMA_RCFGLOCKR_LOCK11_Msk (0x1UL << DMA_RCFGLOCKR_LOCK11_Pos)            /*!< 0x00000800 */
#define DMA_RCFGLOCKR_LOCK11     DMA_RCFGLOCKR_LOCK11_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK12_Pos (12U)
#define DMA_RCFGLOCKR_LOCK12_Msk (0x1UL << DMA_RCFGLOCKR_LOCK12_Pos)            /*!< 0x00001000 */
#define DMA_RCFGLOCKR_LOCK12     DMA_RCFGLOCKR_LOCK12_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK13_Pos (13U)
#define DMA_RCFGLOCKR_LOCK13_Msk (0x1UL << DMA_RCFGLOCKR_LOCK13_Pos)            /*!< 0x00002000 */
#define DMA_RCFGLOCKR_LOCK13     DMA_RCFGLOCKR_LOCK13_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK14_Pos (14U)
#define DMA_RCFGLOCKR_LOCK14_Msk (0x1UL << DMA_RCFGLOCKR_LOCK14_Pos)            /*!< 0x00004000 */
#define DMA_RCFGLOCKR_LOCK14     DMA_RCFGLOCKR_LOCK14_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK15_Pos (15U)
#define DMA_RCFGLOCKR_LOCK15_Msk (0x1UL << DMA_RCFGLOCKR_LOCK15_Pos)            /*!< 0x00008000 */
#define DMA_RCFGLOCKR_LOCK15     DMA_RCFGLOCKR_LOCK15_Msk                      /*!< lock the configuration of the DMA_SECCFGR */

/*******************  Bit definition for DMA_MISR register  ****************/
#define DMA_MISR_MIS0_Pos        (0U)
#define DMA_MISR_MIS0_Msk        (0x1UL << DMA_MISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_MISR_MIS0            DMA_MISR_MIS0_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 0 */
#define DMA_MISR_MIS1_Pos        (1U)
#define DMA_MISR_MIS1_Msk        (0x1UL << DMA_MISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_MISR_MIS1            DMA_MISR_MIS1_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 1 */
#define DMA_MISR_MIS2_Pos        (2U)
#define DMA_MISR_MIS2_Msk        (0x1UL << DMA_MISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_MISR_MIS2            DMA_MISR_MIS2_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 2 */
#define DMA_MISR_MIS3_Pos        (3U)
#define DMA_MISR_MIS3_Msk        (0x1UL << DMA_MISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_MISR_MIS3            DMA_MISR_MIS3_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 3 */
#define DMA_MISR_MIS4_Pos        (4U)
#define DMA_MISR_MIS4_Msk        (0x1UL << DMA_MISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_MISR_MIS4            DMA_MISR_MIS4_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 4 */
#define DMA_MISR_MIS5_Pos        (5U)
#define DMA_MISR_MIS5_Msk        (0x1UL << DMA_MISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_MISR_MIS5            DMA_MISR_MIS5_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 5 */
#define DMA_MISR_MIS6_Pos        (6U)
#define DMA_MISR_MIS6_Msk        (0x1UL << DMA_MISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_MISR_MIS6            DMA_MISR_MIS6_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 6 */
#define DMA_MISR_MIS7_Pos        (7U)
#define DMA_MISR_MIS7_Msk        (0x1UL << DMA_MISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_MISR_MIS7            DMA_MISR_MIS7_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 7 */
#define DMA_MISR_MIS8_Pos        (8U)
#define DMA_MISR_MIS8_Msk        (0x1UL << DMA_MISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_MISR_MIS8            DMA_MISR_MIS8_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 8 */
#define DMA_MISR_MIS9_Pos        (9U)
#define DMA_MISR_MIS9_Msk        (0x1UL << DMA_MISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_MISR_MIS9            DMA_MISR_MIS9_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 9 */
#define DMA_MISR_MIS10_Pos       (10U)
#define DMA_MISR_MIS10_Msk       (0x1UL << DMA_MISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_MISR_MIS10           DMA_MISR_MIS10_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 10 */
#define DMA_MISR_MIS11_Pos       (11U)
#define DMA_MISR_MIS11_Msk       (0x1UL << DMA_MISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_MISR_MIS11           DMA_MISR_MIS11_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 11 */
#define DMA_MISR_MIS12_Pos       (12U)
#define DMA_MISR_MIS12_Msk       (0x1UL << DMA_MISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_MISR_MIS12           DMA_MISR_MIS12_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 12 */
#define DMA_MISR_MIS13_Pos       (13U)
#define DMA_MISR_MIS13_Msk       (0x1UL << DMA_MISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_MISR_MIS13           DMA_MISR_MIS13_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 13 */
#define DMA_MISR_MIS14_Pos       (14U)
#define DMA_MISR_MIS14_Msk       (0x1UL << DMA_MISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_MISR_MIS14           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 14 */
#define DMA_MISR_MIS15_Pos       (15U)
#define DMA_MISR_MIS15_Msk       (0x1UL << DMA_MISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_MISR_MIS15           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 15 */

/*******************  Bit definition for DMA_SMISR register  ****************/
#define DMA_SMISR_MIS0_Pos       (0U)
#define DMA_SMISR_MIS0_Msk       (0x1UL << DMA_SMISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_SMISR_MIS0           DMA_SMISR_MIS0_Msk                            /*!< Masked Interrupt State of Secure Channel 0 */
#define DMA_SMISR_MIS1_Pos       (1U)
#define DMA_SMISR_MIS1_Msk       (0x1UL << DMA_SMISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_SMISR_MIS1           DMA_SMISR_MIS1_Msk                            /*!< Masked Interrupt State of Secure Channel 1 */
#define DMA_SMISR_MIS2_Pos       (2U)
#define DMA_SMISR_MIS2_Msk       (0x1UL << DMA_SMISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_SMISR_MIS2           DMA_SMISR_MIS2_Msk                            /*!< Masked Interrupt State of Secure Channel 2 */
#define DMA_SMISR_MIS3_Pos       (3U)
#define DMA_SMISR_MIS3_Msk       (0x1UL << DMA_SMISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_SMISR_MIS3           DMA_SMISR_MIS3_Msk                            /*!< Masked Interrupt State of Secure Channel 3 */
#define DMA_SMISR_MIS4_Pos       (4U)
#define DMA_SMISR_MIS4_Msk       (0x1UL << DMA_SMISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_SMISR_MIS4           DMA_SMISR_MIS4_Msk                            /*!< Masked Interrupt State of Secure Channel 4 */
#define DMA_SMISR_MIS5_Pos       (5U)
#define DMA_SMISR_MIS5_Msk       (0x1UL << DMA_SMISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_SMISR_MIS5           DMA_SMISR_MIS5_Msk                            /*!< Masked Interrupt State of Secure Channel 5 */
#define DMA_SMISR_MIS6_Pos       (6U)
#define DMA_SMISR_MIS6_Msk       (0x1UL << DMA_SMISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_SMISR_MIS6           DMA_SMISR_MIS6_Msk                            /*!< Masked Interrupt State of Secure Channel 6 */
#define DMA_SMISR_MIS7_Pos       (7U)
#define DMA_SMISR_MIS7_Msk       (0x1UL << DMA_SMISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_SMISR_MIS7           DMA_SMISR_MIS7_Msk                            /*!< Masked Interrupt State of Secure Channel 7 */
#define DMA_SMISR_MIS8_Pos       (8U)
#define DMA_SMISR_MIS8_Msk       (0x1UL << DMA_SMISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_SMISR_MIS8           DMA_SMISR_MIS8_Msk                            /*!< Masked Interrupt State of Secure Channel 8 */
#define DMA_SMISR_MIS9_Pos       (9U)
#define DMA_SMISR_MIS9_Msk       (0x1UL << DMA_SMISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_SMISR_MIS9           DMA_SMISR_MIS9_Msk                            /*!< Masked Interrupt State of Secure Channel 9 */
#define DMA_SMISR_MIS10_Pos      (10U)
#define DMA_SMISR_MIS10_Msk      (0x1UL << DMA_SMISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_SMISR_MIS10          DMA_SMISR_MIS10_Msk                           /*!< Masked Interrupt State of Secure Channel 10 */
#define DMA_SMISR_MIS11_Pos      (11U)
#define DMA_SMISR_MIS11_Msk      (0x1UL << DMA_SMISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_SMISR_MIS11          DMA_SMISR_MIS11_Msk                           /*!< Masked Interrupt State of Secure Channel 11 */
#define DMA_SMISR_MIS12_Pos      (12U)
#define DMA_SMISR_MIS12_Msk      (0x1UL << DMA_SMISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_SMISR_MIS12          DMA_SMISR_MIS12_Msk                           /*!< Masked Interrupt State of Secure Channel 12 */
#define DMA_SMISR_MIS13_Pos      (13U)
#define DMA_SMISR_MIS13_Msk      (0x1UL << DMA_SMISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_SMISR_MIS13          DMA_SMISR_MIS13_Msk                           /*!< Masked Interrupt State of Secure Channel 13 */
#define DMA_SMISR_MIS14_Pos      (14U)
#define DMA_SMISR_MIS14_Msk      (0x1UL << DMA_SMISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_SMISR_MIS14          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 14 */
#define DMA_SMISR_MIS15_Pos      (15U)
#define DMA_SMISR_MIS15_Msk      (0x1UL << DMA_SMISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_SMISR_MIS15          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 15 */

/*******************  Bit definition for DMA_CLBAR register  ****************/
#define DMA_CLBAR_LBA_Pos         (16U)
#define DMA_CLBAR_LBA_Msk         (0xFFFFUL << DMA_CLBAR_LBA_Pos)               /*!< 0xFFFF0000 */
#define DMA_CLBAR_LBA             DMA_CLBAR_LBA_Msk                            /*!< Linked-list Base Address of DMA channel x */

/*******************  Bit definition for DMA_CCIDCFGR register  *******************/
#define DMA_CCIDCFGR_CFEN_Pos           (0U)
#define DMA_CCIDCFGR_CFEN_Msk           (0x1UL << DMA_CCIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define DMA_CCIDCFGR_CFEN               DMA_CCIDCFGR_CFEN_Msk                   /*!< CID filtering enable of the channel x */
#define DMA_CCIDCFGR_SEMEN_Pos          (1U)
#define DMA_CCIDCFGR_SEMEN_Msk          (0x1UL << DMA_CCIDCFGR_SEMEN_Pos)        /*!< 0x00000002 */
#define DMA_CCIDCFGR_SEMEN              DMA_CCIDCFGR_SEMEN_Msk                  /*!< semaphore enable mode */
#define DMA_CCIDCFGR_SCID_Pos           (4U)
#define DMA_CCIDCFGR_SCID_Msk           (0x3UL << DMA_CCIDCFGR_SCID_Pos)         /*!< 0x00000030 */
#define DMA_CCIDCFGR_SCID               DMA_CCIDCFGR_SCID_Msk                   /*!< select a static CID to the channel x */
#define DMA_CCIDCFGR_WLISTCID0_Pos      (16U)
#define DMA_CCIDCFGR_WLISTCID0_Msk      (0x1UL << DMA_CCIDCFGR_WLISTCID0_Pos)    /*!< 0x00010000 */
#define DMA_CCIDCFGR_WLISTCID0          DMA_CCIDCFGR_WLISTCID0_Msk              /*!< white-listed CID0 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID1_Pos      (17U)
#define DMA_CCIDCFGR_WLISTCID1_Msk      (0x1UL << DMA_CCIDCFGR_WLISTCID1_Pos)    /*!< 0x00020000 */
#define DMA_CCIDCFGR_WLISTCID1          DMA_CCIDCFGR_WLISTCID1_Msk              /*!< white-listed CID1 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID2_Pos      (18U)
#define DMA_CCIDCFGR_WLISTCID2_Msk      (0x1UL << DMA_CCIDCFGR_WLISTCID2_Pos)    /*!< 0x00040000 */
#define DMA_CCIDCFGR_WLISTCID2          DMA_CCIDCFGR_WLISTCID2_Msk              /*!< white-listed CID2 in the CID allocation pool (of the channel x in semaphore mode) */

#define DMA_CCIDCFGR_WLISTCID_CURRENT   ((0x1UL << RIF_CID_CPU1_CA35) << DMA_CCIDCFGR_WLISTCID0_Pos)

/*******************  Bit definition for DMA_CSEMCR register  *******************/
#define DMA_CSEMCR_SEMMUTEX_Pos       (0U)
#define DMA_CSEMCR_SEMMUTEX_Msk       (0x1UL << DMA_CSEMCR_SEMMUTEX_Pos)       /*!< 0x00000001 */
#define DMA_CSEMCR_SEMMUTEX           DMA_CSEMCR_SEMMUTEX_Msk                 /*!< mutex for the CID allocation of the channel x */
#define DMA_CSEMCR_SEMCCID_Pos        (4U)
#define DMA_CSEMCR_SEMCCID_Msk        (0x3UL << DMA_CSEMCR_SEMCCID_Pos)         /*!< 0x00000030 */
#define DMA_CSEMCR_SEMCCID            DMA_CSEMCR_SEMCCID_Msk                   /*!< current CID allocated to the channel x */
#define DMA_CSEMCR_SEMCCID_CID1       (RIF_CID_CPU1_CA35 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID2       (RIF_CID_CPU2_CM33 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID3       (RIF_CID_CPU3_CM0  << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CURRENT    DMA_CSEMCR_SEMCCID_CID1

/*******************  Bit definition for DMA_CFCR register  *******************/
#define DMA_CFCR_TCF_Pos       (8U)
#define DMA_CFCR_TCF_Msk       (0x1UL << DMA_CFCR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CFCR_TCF           DMA_CFCR_TCF_Msk                              /*!< Transfer complete flag clear */
#define DMA_CFCR_HTF_Pos       (9U)
#define DMA_CFCR_HTF_Msk       (0x1UL << DMA_CFCR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CFCR_HTF           DMA_CFCR_HTF_Msk                              /*!< Half transfer complete flag clear */
#define DMA_CFCR_DTEF_Pos      (10U)
#define DMA_CFCR_DTEF_Msk      (0x1UL << DMA_CFCR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CFCR_DTEF          DMA_CFCR_DTEF_Msk                             /*!< Data transfer error flag clear */
#define DMA_CFCR_ULEF_Pos      (11U)
#define DMA_CFCR_ULEF_Msk      (0x1UL << DMA_CFCR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CFCR_ULEF          DMA_CFCR_ULEF_Msk                             /*!< Update linked-list item error flag clear */
#define DMA_CFCR_USEF_Pos      (12U)
#define DMA_CFCR_USEF_Msk      (0x1UL << DMA_CFCR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CFCR_USEF          DMA_CFCR_USEF_Msk                             /*!< User setting error flag clear */
#define DMA_CFCR_SUSPF_Pos     (13U)
#define DMA_CFCR_SUSPF_Msk     (0x1UL << DMA_CFCR_SUSPF_Pos)                   /*!< 0x00002000 */
#define DMA_CFCR_SUSPF         DMA_CFCR_SUSPF_Msk                             /*!< Completed suspension flag clear */
#define DMA_CFCR_TOF_Pos       (14U)
#define DMA_CFCR_TOF_Msk       (0x1UL << DMA_CFCR_TOF_Pos)                    /*!< 0x00004000 */
#define DMA_CFCR_TOF           DMA_CFCR_TOF_Msk                              /*!< trigger overrun flag clear */

/*******************  Bit definition for DMA_CSR register  *******************/
#define DMA_CSR_IDLEF_Pos      (0U)
#define DMA_CSR_IDLEF_Msk      (0x1UL << DMA_CSR_IDLEF_Pos)                  /*!< 0x00000001 */
#define DMA_CSR_IDLEF          DMA_CSR_IDLEF_Msk                            /*!< Idle flag */
#define DMA_CSR_DRAININGF_Pos (1U)
#define DMA_CSR_DRAININGF_Msk (0x1UL << DMA_CSR_DRAININGF_Pos)               /*!< 0x00000010 */
#define DMA_CSR_DRAININGF      DMA_CSR_DRAININGF                            /*!< Draning fifo */
#define DMA_CSR_TCF_Pos        (8U)
#define DMA_CSR_TCF_Msk        (0x1UL << DMA_CSR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CSR_TCF            DMA_CSR_TCF_Msk                              /*!< Transfer complete flag */
#define DMA_CSR_HTF_Pos        (9U)
#define DMA_CSR_HTF_Msk        (0x1UL << DMA_CSR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CSR_HTF            DMA_CSR_HTF_Msk                              /*!< Half transfer complete flag */
#define DMA_CSR_DTEF_Pos       (10U)
#define DMA_CSR_DTEF_Msk       (0x1UL << DMA_CSR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CSR_DTEF           DMA_CSR_DTEF_Msk                             /*!< Data transfer error flag */
#define DMA_CSR_ULEF_Pos       (11U)
#define DMA_CSR_ULEF_Msk       (0x1UL << DMA_CSR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CSR_ULEF           DMA_CSR_ULEF_Msk                             /*!< Update linked-list item error flag */
#define DMA_CSR_USEF_Pos       (12U)
#define DMA_CSR_USEF_Msk       (0x1UL << DMA_CSR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CSR_USEF           DMA_CSR_USEF_Msk                             /*!< User setting error flag */
#define DMA_CSR_SUSPF_Pos      (13U)
#define DMA_CSR_SUSPF_Msk      (0x1UL << DMA_CSR_SUSPF_Pos)                  /*!< 0x00002000 */
#define DMA_CSR_SUSPF          DMA_CSR_SUSPF_Msk                            /*!< User setting error flag */
#define DMA_CSR_TOF_Pos        (14U)
#define DMA_CSR_TOF_Msk        (0x1UL << DMA_CSR_TOF_Pos)                    /*!< 0x00004000 */
#define DMA_CSR_TOF            DMA_CSR_TOF_Msk                              /*!< trigger overrun flag */
#define DMA_CSR_FIFOL_Pos      (16U)
#define DMA_CSR_FIFOL_Msk      (0xFFUL << DMA_CSR_FIFOL_Pos)                 /*!< 0x00FF0000 */
#define DMA_CSR_FIFOL          DMA_CSR_FIFOL_Msk                            /*!< Monitored FIFO level in bytes */

/*******************  Bit definition for DMA_CCR register  ********************/
#define DMA_CCR_EN_Pos         (0U)
#define DMA_CCR_EN_Msk         (0x1UL << DMA_CCR_EN_Pos)                     /*!< 0x00000001 */
#define DMA_CCR_EN             DMA_CCR_EN_Msk                               /*!< Channel enable */
#define DMA_CCR_RESET_Pos      (1U)
#define DMA_CCR_RESET_Msk      (0x1UL << DMA_CCR_RESET_Pos)                  /*!< 0x00000002 */
#define DMA_CCR_RESET          DMA_CCR_RESET_Msk                            /*!< Channel reset */
#define DMA_CCR_SUSP_Pos       (2U)
#define DMA_CCR_SUSP_Msk       (0x1UL << DMA_CCR_SUSP_Pos)                   /*!< 0x00000004 */
#define DMA_CCR_SUSP           DMA_CCR_SUSP_Msk                             /*!< Channel suspend */
#define DMA_CCR_DRAINFIFO_Pos  (3U)
#define DMA_CCR_DRAINFIFO_Msk  (0x1UL << DMA_CCR_DRAINFIFO_Pos)              /*!< 0x00000008 */
#define DMA_CCR_DRAINFIFO       DMA_CCR_DRAINFIFO_Msk                       /*!< Empty FIFO */
#define DMA_CCR_TCIE_Pos       (8U)
#define DMA_CCR_TCIE_Msk       (0x1UL << DMA_CCR_TCIE_Pos)                   /*!< 0x00000100 */
#define DMA_CCR_TCIE           DMA_CCR_TCIE_Msk                             /*!< Transfer complete interrupt enable */
#define DMA_CCR_HTIE_Pos       (9U)
#define DMA_CCR_HTIE_Msk       (0x1UL << DMA_CCR_HTIE_Pos)                   /*!< 0x00000200 */
#define DMA_CCR_HTIE           DMA_CCR_HTIE_Msk                             /*!< Half transfer complete interrupt enable */
#define DMA_CCR_DTEIE_Pos      (10U)
#define DMA_CCR_DTEIE_Msk      (0x1UL << DMA_CCR_DTEIE_Pos)                  /*!< 0x00000400 */
#define DMA_CCR_DTEIE          DMA_CCR_DTEIE_Msk                            /*!< Data transfer error interrput enable */
#define DMA_CCR_ULEIE_Pos      (11U)
#define DMA_CCR_ULEIE_Msk      (0x1UL << DMA_CCR_ULEIE_Pos)                  /*!< 0x00000800 */
#define DMA_CCR_ULEIE          DMA_CCR_ULEIE_Msk                            /*!< Update linked-list item error interrput enable */
#define DMA_CCR_USEIE_Pos      (12U)
#define DMA_CCR_USEIE_Msk      (0x1UL << DMA_CCR_USEIE_Pos)                  /*!< 0x00001000 */
#define DMA_CCR_USEIE          DMA_CCR_USEIE_Msk                            /*!< User setting error interrput enable */
#define DMA_CCR_SUSPIE_Pos     (13U)
#define DMA_CCR_SUSPIE_Msk     (0x1UL << DMA_CCR_SUSPIE_Pos)                 /*!< 0x00002000 */
#define DMA_CCR_SUSPIE         DMA_CCR_SUSPIE_Msk                           /*!< Completed suspension interrput enable */
#define DMA_CCR_TOIE_Pos       (14U)
#define DMA_CCR_TOIE_Msk       (0x1UL << DMA_CCR_TOIE_Pos)                   /*!< 0x00004000 */
#define DMA_CCR_TOIE           DMA_CCR_TOIE_Msk                             /*!< trigger overrun interrupt enable */
#define DMA_CCR_LSM_Pos        (16U)
#define DMA_CCR_LSM_Msk        (0x1UL << DMA_CCR_LSM_Pos)                    /*!< 0x00010000 */
#define DMA_CCR_LSM            DMA_CCR_LSM_Msk                              /*!< Link step mode */
#define DMA_CCR_LAP_Pos        (17U)
#define DMA_CCR_LAP_Msk        (0x1UL << DMA_CCR_LAP_Pos)                    /*!< 0x00020000 */
#define DMA_CCR_LAP            DMA_CCR_LAP_Msk                              /*!< Linked-list allocated port */
#define DMA_CCR_PRIO_Pos       (22U)
#define DMA_CCR_PRIO_Msk       (0x3UL << DMA_CCR_PRIO_Pos)                   /*!< 0x00C00000 */
#define DMA_CCR_PRIO           DMA_CCR_PRIO_Msk                             /*!< Priority level */
#define DMA_CCR_PRIO_0         (0x1UL << DMA_CCR_PRIO_Pos)                   /*!< 0x00400000 */
#define DMA_CCR_PRIO_1         (0x2UL << DMA_CCR_PRIO_Pos)                   /*!< 0x00800000 */

/*******************  Bit definition for DMA_CTR1 register  *******************/
#define DMA_CTR1_SDW_LOG2_Pos  (0U)
#define DMA_CTR1_SDW_LOG2_Msk  (0x3UL << DMA_CTR1_SDW_LOG2_Pos)             /*!< 0x00000003 */
#define DMA_CTR1_SDW_LOG2      DMA_CTR1_SDW_LOG2_Msk                       /*!< Binary logarithm of the source data width of a burst */
#define DMA_CTR1_SDW_LOG2_0    (0x1UL << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_SDW_LOG2_1    (0x2UL << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_SINC_Pos      (3U)
#define DMA_CTR1_SINC_Msk      (0x1UL << DMA_CTR1_SINC_Pos)                 /*!< 0x00000008 */
#define DMA_CTR1_SINC          DMA_CTR1_SINC_Msk                           /*!< Source incrementing burst */
#define DMA_CTR1_SBL_1_Pos     (4U)
#define DMA_CTR1_SBL_1_Msk     (0x3FUL << DMA_CTR1_SBL_1_Pos)               /*!< 0x000003F0 */
#define DMA_CTR1_SBL_1         DMA_CTR1_SBL_1_Msk                          /*!< Source burst length minus 1 */
#define DMA_CTR1_PAM_Pos       (11U)
#define DMA_CTR1_PAM_Msk       (0x3UL << DMA_CTR1_PAM_Pos)                  /*!< 0x0001800 */
#define DMA_CTR1_PAM           DMA_CTR1_PAM_Msk                            /*!< Padding / alignment mode */
#define DMA_CTR1_PAM_0         (0x1UL << DMA_CTR1_PAM_Pos)                  /*!< Bit 0 */
#define DMA_CTR1_PAM_1         (0x2UL << DMA_CTR1_PAM_Pos)                  /*!< Bit 1 */
#define DMA_CTR1_SBX_Pos       (13U)
#define DMA_CTR1_SBX_Msk       (0x1UL << DMA_CTR1_SBX_Pos)                  /*!< 0x00002000 */
#define DMA_CTR1_SBX           DMA_CTR1_SBX_Msk                            /*!< Source byte exchange within the unaligned half-word of each source word */
#define DMA_CTR1_SAP_Pos       (14U)
#define DMA_CTR1_SAP_Msk       (0x1UL << DMA_CTR1_SAP_Pos)                  /*!< 0x00004000 */
#define DMA_CTR1_SAP           DMA_CTR1_SAP_Msk                            /*!< Source allocated port */
#define DMA_CTR1_SSEC_Pos      (15U)
#define DMA_CTR1_SSEC_Msk      (0x1UL << DMA_CTR1_SSEC_Pos)                 /*!< 0x00008000 */
#define DMA_CTR1_SSEC          DMA_CTR1_SSEC_Msk                           /*!< Security attribute of the DMA transfer from the source */
#define DMA_CTR1_DDW_LOG2_Pos  (16U)
#define DMA_CTR1_DDW_LOG2_Msk  (0x3UL << DMA_CTR1_DDW_LOG2_Pos)             /*!< 0x00030000 */
#define DMA_CTR1_DDW_LOG2      DMA_CTR1_DDW_LOG2_Msk                       /*!< Binary logarithm of the destination data width of a burst */
#define DMA_CTR1_DDW_LOG2_0    (0x1UL << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_DDW_LOG2_1    (0x2UL << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_DINC_Pos      (19U)
#define DMA_CTR1_DINC_Msk      (0x1UL << DMA_CTR1_DINC_Pos)                 /*!< 0x00080000 */
#define DMA_CTR1_DINC          DMA_CTR1_DINC_Msk                           /*!< Destination incrementing burst */
#define DMA_CTR1_DBL_1_Pos     (20U)
#define DMA_CTR1_DBL_1_Msk     (0x3FUL << DMA_CTR1_DBL_1_Pos)               /*!< 0x03F00000 */
#define DMA_CTR1_DBL_1         DMA_CTR1_DBL_1_Msk                          /*!< Destination burst length minus 1 */
#define DMA_CTR1_DBX_Pos       (26U)
#define DMA_CTR1_DBX_Msk       (0x1UL << DMA_CTR1_DBX_Pos)                  /*!< 0x04000000 */
#define DMA_CTR1_DBX           DMA_CTR1_DBX_Msk                            /*!< Destination byte exchange */
#define DMA_CTR1_DHX_Pos       (27U)
#define DMA_CTR1_DHX_Msk       (0x1UL << DMA_CTR1_DHX_Pos)                  /*!< 0x08000000 */
#define DMA_CTR1_DHX           DMA_CTR1_DHX_Msk                            /*!< Destination half-word exchange */
#define DMA_CTR1_DWX_Pos       (28U)
#define DMA_CTR1_DWX_Msk       (0x1UL << DMA_CTR1_DWX_Pos)                  /*!< 0x10000000 */
#define DMA_CTR1_DWX           DMA_CTR1_DWX_Msk                            /*!< Destination word exchange */
#define DMA_CTR1_DAP_Pos       (30U)
#define DMA_CTR1_DAP_Msk       (0x1UL << DMA_CTR1_DAP_Pos)                  /*!< 0x40000000 */
#define DMA_CTR1_DAP           DMA_CTR1_DAP_Msk                            /*!< Destination allocated port */
#define DMA_CTR1_DSEC_Pos      (31U)
#define DMA_CTR1_DSEC_Msk      (0x1UL << DMA_CTR1_DSEC_Pos)                 /*!< 0x80000000 */
#define DMA_CTR1_DSEC          DMA_CTR1_DSEC_Msk                           /*!< Security attribute of the DMA transfer from the destination */

/******************  Bit definition for DMA_CTR2 register  *******************/
#define DMA_CTR2_REQSEL_Pos     (0U)
#define DMA_CTR2_REQSEL_Msk     (0xFFUL << DMA_CTR2_REQSEL_Pos)             /*!< 0x000000FF */
#define DMA_CTR2_REQSEL         DMA_CTR2_REQSEL_Msk                        /*!< DMA hardware request selection */
#define DMA_CTR2_SWREQ_Pos      (9U)
#define DMA_CTR2_SWREQ_Msk      (0x1UL << DMA_CTR2_SWREQ_Pos)               /*!< 0x00000200 */
#define DMA_CTR2_SWREQ          DMA_CTR2_SWREQ_Msk                         /*!< Software request */
#define DMA_CTR2_DREQ_Pos       (10U)
#define DMA_CTR2_DREQ_Msk       (0x1UL << DMA_CTR2_DREQ_Pos)                /*!< 0x00000400 */
#define DMA_CTR2_DREQ           DMA_CTR2_DREQ_Msk                          /*!< Destination hardware request */
#define DMA_CTR2_BREQ_Pos       (11U)
#define DMA_CTR2_BREQ_Msk       (0x1UL << DMA_CTR2_BREQ_Pos)                /*!< 0x00000800 */
#define DMA_CTR2_BREQ           DMA_CTR2_BREQ_Msk                          /*!< Block hardware request */
#define DMA_CTR2_PFREQ_Pos      (12U)
#define DMA_CTR2_PFREQ_Msk      (0x1UL << DMA_CTR2_PFREQ_Pos)               /*!< 0x00001000 */
#define DMA_CTR2_PFREQ          DMA_CTR2_PFREQ_Msk                         /*!< Hardware request in peripheral flow control mode */
#define DMA_CTR2_TRIGM_Pos      (14U)
#define DMA_CTR2_TRIGM_Msk      (0x3UL << DMA_CTR2_TRIGM_Pos)               /*!< 0x0000C000 */
#define DMA_CTR2_TRIGM          DMA_CTR2_TRIGM_Msk                         /*!< Trigger mode */
#define DMA_CTR2_TRIGM_0        (0x1UL << DMA_CTR2_TRIGM_Pos)               /*!< Bit 0 */
#define DMA_CTR2_TRIGM_1        (0x2UL << DMA_CTR2_TRIGM_Pos)               /*!< Bit 1 */
#define DMA_CTR2_TRIGSEL_Pos    (16U)
#define DMA_CTR2_TRIGSEL_Msk    (0x7FUL << DMA_CTR2_TRIGSEL_Pos)            /*!< 0x007F0000 */
#define DMA_CTR2_TRIGSEL        DMA_CTR2_TRIGSEL_Msk                       /*!< Trigger event input selection */
#define DMA_CTR2_TRIGPOL_Pos    (24U)
#define DMA_CTR2_TRIGPOL_Msk    (0x3UL << DMA_CTR2_TRIGPOL_Pos)             /*!< 0x03000000 */
#define DMA_CTR2_TRIGPOL        DMA_CTR2_TRIGPOL_Msk                       /*!< Trigger event polarity */
#define DMA_CTR2_TRIGPOL_0      (0x1UL << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 0 */
#define DMA_CTR2_TRIGPOL_1      (0x2UL << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 1 */
#define DMA_CTR2_TCEM_Pos       (30U)
#define DMA_CTR2_TCEM_Msk       (0x3UL << DMA_CTR2_TCEM_Pos)                /*!< 0xC0000000 */
#define DMA_CTR2_TCEM           DMA_CTR2_TCEM_Msk                          /*!< Transfer complete event mode */
#define DMA_CTR2_TCEM_0         (0x1UL << DMA_CTR2_TCEM_Pos)                /*!< Bit 0 */
#define DMA_CTR2_TCEM_1         (0x2UL << DMA_CTR2_TCEM_Pos)                /*!< Bit 1 */

/******************  Bit definition for DMA_CBR1 register  *******************/
#define DMA_CBR1_BNDT_Pos      (0U)
#define DMA_CBR1_BNDT_Msk      (0xFFFFUL << DMA_CBR1_BNDT_Pos)              /*!< 0x0000FFFF */
#define DMA_CBR1_BNDT          DMA_CBR1_BNDT_Msk                           /*!< Block number of data bytes to transfer from the source */
#define DMA_CBR1_BRC_Pos       (16U)
#define DMA_CBR1_BRC_Msk       (0x7FFUL << DMA_CBR1_BRC_Pos)               /*!< 0x07FF0000 */
#define DMA_CBR1_BRC           DMA_CBR1_BRC_Msk                            /*!< Block repeat counter */
#define DMA_CBR1_SDEC_Pos      (28U)
#define DMA_CBR1_SDEC_Msk      (0x1UL << DMA_CBR1_SDEC_Pos)                 /*!< 0x10000000 */
#define DMA_CBR1_SDEC          DMA_CBR1_SDEC_Msk                           /*!< Source address decrement */
#define DMA_CBR1_DDEC_Pos      (29U)
#define DMA_CBR1_DDEC_Msk      (0x1UL << DMA_CBR1_DDEC_Pos)                 /*!< 0x20000000 */
#define DMA_CBR1_DDEC          DMA_CBR1_DDEC_Msk                           /*!< Destination address decrement */
#define DMA_CBR1_BRSDEC_Pos    (30U)
#define DMA_CBR1_BRSDEC_Msk    (0x1UL << DMA_CBR1_BRSDEC_Pos)               /*!< 0x40000000 */
#define DMA_CBR1_BRSDEC        DMA_CBR1_BRSDEC_Msk                         /*!< Block repeat source address decrement */
#define DMA_CBR1_BRDDEC_Pos    (31U)
#define DMA_CBR1_BRDDEC_Msk    (0x1UL << DMA_CBR1_BRDDEC_Pos)               /*!< 0x80000000 */
#define DMA_CBR1_BRDDEC        DMA_CBR1_BRDDEC_Msk                         /*!< Block repeat destination address decrement */

/******************  Bit definition for DMA_CSAR register  ********************/
#define DMA_CSAR_SA_Pos        (0U)
#define DMA_CSAR_SA_Msk        (0xFFFFFFFFUL << DMA_CSAR_SA_Pos)            /*!< 0xFFFFFFFF */
#define DMA_CSAR_SA            DMA_CSAR_SA_Msk                             /*!< Source Address */

/******************  Bit definition for DMA_CDAR register  *******************/
#define DMA_CDAR_DA_Pos        (0U)
#define DMA_CDAR_DA_Msk        (0xFFFFFFFFUL << DMA_CDAR_DA_Pos)             /*!< 0xFFFFFFFF */
#define DMA_CDAR_DA            DMA_CDAR_DA_Msk                              /*!< Destination address */

/******************  Bit definition for DMA_CTR3 register  *******************/
#define DMA_CTR3_SAO_Pos       (0U)
#define DMA_CTR3_SAO_Msk       (0x1FFFUL << DMA_CTR3_SAO_Pos)               /*!< 0x00001FFF */
#define DMA_CTR3_SAO           DMA_CTR3_SAO_Msk                            /*!< Source address offset increment */
#define DMA_CTR3_DAO_Pos       (16U)
#define DMA_CTR3_DAO_Msk       (0x1FFFUL << DMA_CTR3_DAO_Pos)               /*!< 0x1FFF0000 */
#define DMA_CTR3_DAO           DMA_CTR3_DAO_Msk                            /*!< Destination address offset increment */

/******************  Bit definition for DMA_CBR2 register  *******************/
#define DMA_CBR2_BRSAO_Pos     (0U)
#define DMA_CBR2_BRSAO_Msk     (0xFFFFUL << DMA_CBR2_BRSAO_Pos)             /*!< 0x0000FFFF */
#define DMA_CBR2_BRSAO         DMA_CBR2_BRSAO_Msk                          /*!< Block repeated source address offset */
#define DMA_CBR2_BRDAO_Pos     (16U)
#define DMA_CBR2_BRDAO_Msk     (0xFFFFUL << DMA_CBR2_BRDAO_Pos)             /*!< 0xFFFF0000 */
#define DMA_CBR2_BRDAO         DMA_CBR2_BRDAO_Msk                          /*!< Block repeated destination address offset */

/******************  Bit definition for DMA_CLLR register  *******************/
#define DMA_CLLR_LA_Pos        (2U)
#define DMA_CLLR_LA_Msk        (0x3FFFUL << DMA_CLLR_LA_Pos)                /*!< 0x0000FFFC */
#define DMA_CLLR_LA            DMA_CLLR_LA_Msk                             /*!< Pointer to the next linked-list data structure */
#define DMA_CLLR_ULL_Pos       (16U)
#define DMA_CLLR_ULL_Msk       (0x1UL << DMA_CLLR_ULL_Pos)                  /*!< 0x00010000 */
#define DMA_CLLR_ULL           DMA_CLLR_ULL_Msk                            /*!< Update link address register from memory */
#define DMA_CLLR_UB2_Pos       (25U)
#define DMA_CLLR_UB2_Msk       (0x1UL << DMA_CLLR_UB2_Pos)                  /*!< 0x02000000 */
#define DMA_CLLR_UB2           DMA_CLLR_UB2_Msk                            /*!< Update block register 2 from memory */
#define DMA_CLLR_UT3_Pos       (26U)
#define DMA_CLLR_UT3_Msk       (0x1UL << DMA_CLLR_UT3_Pos)                  /*!< 0x04000000 */
#define DMA_CLLR_UT3           DMA_CLLR_UT3_Msk                            /*!< Update transfer register 3 from SRAM */
#define DMA_CLLR_UDA_Pos       (27U)
#define DMA_CLLR_UDA_Msk       (0x1UL << DMA_CLLR_UDA_Pos)                  /*!< 0x08000000 */
#define DMA_CLLR_UDA           DMA_CLLR_UDA_Msk                            /*!< Update destination address register from SRAM */
#define DMA_CLLR_USA_Pos       (28U)
#define DMA_CLLR_USA_Msk       (0x1UL << DMA_CLLR_USA_Pos)                  /*!< 0x10000000 */
#define DMA_CLLR_USA           DMA_CLLR_USA_Msk                            /*!< Update source address register from SRAM */
#define DMA_CLLR_UB1_Pos       (29U)
#define DMA_CLLR_UB1_Msk       (0x1UL << DMA_CLLR_UB1_Pos)                  /*!< 0x20000000 */
#define DMA_CLLR_UB1           DMA_CLLR_UB1_Msk                            /*!< Update block register 1 from SRAM */
#define DMA_CLLR_UT2_Pos       (30U)
#define DMA_CLLR_UT2_Msk       (0x1UL << DMA_CLLR_UT2_Pos)                  /*!< 0x40000000 */
#define DMA_CLLR_UT2           DMA_CLLR_UT2_Msk                            /*!< Update transfer register 2 from SRAM */
#define DMA_CLLR_UT1_Pos       (31U)
#define DMA_CLLR_UT1_Msk       (0x1UL << DMA_CLLR_UT1_Pos)                  /*!< 0x80000000 */
#define DMA_CLLR_UT1           DMA_CLLR_UT1_Msk                            /*!< Update transfer register 1 from SRAM */

/******************************************************************************/
/*                                                                            */
/*                  DTS Registers bits definitions                            */
/*                                                                            */
/******************************************************************************/
/***************  Bit definition for DTS_PVTREG_LOCK register  ****************/
#define DTS_PVTREG_LOCK_LOCK_Pos                    (0U)
#define DTS_PVTREG_LOCK_LOCK_Msk                    (0xFFFFFFFFUL << DTS_PVTREG_LOCK_LOCK_Pos)            /*!< 0xFFFFFFFF */
#define DTS_PVTREG_LOCK_LOCK                        DTS_PVTREG_LOCK_LOCK_Msk                             /*!< PVT software lock register */

/****************  Bit definition for DTS_PVTLOCK_SR register  ****************/
#define DTS_PVTLOCK_SR_SW_LOCK_STATUS_Pos           (0U)
#define DTS_PVTLOCK_SR_SW_LOCK_STATUS_Msk           (0x1UL << DTS_PVTLOCK_SR_SW_LOCK_STATUS_Pos)          /*!< 0x00000001 */
#define DTS_PVTLOCK_SR_SW_LOCK_STATUS               DTS_PVTLOCK_SR_SW_LOCK_STATUS_Msk                    /*!< Software lock input status */
#define DTS_PVTLOCK_SR_HW_LOCK_STATUS_Pos           (1U)
#define DTS_PVTLOCK_SR_HW_LOCK_STATUS_Msk           (0x1UL << DTS_PVTLOCK_SR_HW_LOCK_STATUS_Pos)          /*!< 0x00000002 */
#define DTS_PVTLOCK_SR_HW_LOCK_STATUS               DTS_PVTLOCK_SR_HW_LOCK_STATUS_Msk                    /*!< Hardware lock input status */

/****************  Bit definition for DTS_PVTTMR_CR register  *****************/
#define DTS_PVTTMR_CR_TMR_DELAY_Pos                 (0U)
#define DTS_PVTTMR_CR_TMR_DELAY_Msk                 (0xFFFFUL << DTS_PVTTMR_CR_TMR_DELAY_Pos)             /*!< 0x0000FFFF */
#define DTS_PVTTMR_CR_TMR_DELAY                     DTS_PVTTMR_CR_TMR_DELAY_Msk                          /*!< Timer delay */
#define DTS_PVTTMR_CR_TMR_RUN_Pos                   (16U)
#define DTS_PVTTMR_CR_TMR_RUN_Msk                   (0x1UL << DTS_PVTTMR_CR_TMR_RUN_Pos)                  /*!< 0x00010000 */
#define DTS_PVTTMR_CR_TMR_RUN                       DTS_PVTTMR_CR_TMR_RUN_Msk                            /*!< Timer count enable bit */

/****************  Bit definition for DTS_PVTTMR_SR register  *****************/
#define DTS_PVTTMR_SR_TMR_BUSY_Pos                  (0U)
#define DTS_PVTTMR_SR_TMR_BUSY_Msk                  (0x1UL << DTS_PVTTMR_SR_TMR_BUSY_Pos)                 /*!< 0x00000001 */
#define DTS_PVTTMR_SR_TMR_BUSY                      DTS_PVTTMR_SR_TMR_BUSY_Msk                           /*!< Counter busy flag */
#define DTS_PVTTMR_SR_TMR_DONE_Pos                  (1U)
#define DTS_PVTTMR_SR_TMR_DONE_Msk                  (0x1UL << DTS_PVTTMR_SR_TMR_DONE_Pos)                 /*!< 0x00000002 */
#define DTS_PVTTMR_SR_TMR_DONE                      DTS_PVTTMR_SR_TMR_DONE_Msk                           /*!< Counter delay expiration flag */

/****************  Bit definition for DTS_PVTTMR_ICR register  ****************/
#define DTS_PVTTMR_ICR_TMR_IRQ_CLR_Pos              (0U)
#define DTS_PVTTMR_ICR_TMR_IRQ_CLR_Msk              (0x1UL << DTS_PVTTMR_ICR_TMR_IRQ_CLR_Pos)             /*!< 0x00000001 */
#define DTS_PVTTMR_ICR_TMR_IRQ_CLR                  DTS_PVTTMR_ICR_TMR_IRQ_CLR_Msk                       /*!< Timer IRQ clear bit */

/**************  Bit definition for DTS_PVTTMRIRQTESTR register  **************/
#define DTS_PVTTMRIRQTESTR_TMR_IRQ_TEST_Pos         (0U)
#define DTS_PVTTMRIRQTESTR_TMR_IRQ_TEST_Msk         (0x1UL << DTS_PVTTMRIRQTESTR_TMR_IRQ_TEST_Pos)        /*!< 0x00000001 */
#define DTS_PVTTMRIRQTESTR_TMR_IRQ_TEST             DTS_PVTTMRIRQTESTR_TMR_IRQ_TEST_Msk                  /*!< Timer IRQ test bit */

/*****************  Bit definition for DTS_PVT_IER register  ******************/
#define DTS_PVT_IER_TMR_IRQ_ENABLE_Pos              (0U)
#define DTS_PVT_IER_TMR_IRQ_ENABLE_Msk              (0x1UL << DTS_PVT_IER_TMR_IRQ_ENABLE_Pos)             /*!< 0x00000001 */
#define DTS_PVT_IER_TMR_IRQ_ENABLE                  DTS_PVT_IER_TMR_IRQ_ENABLE_Msk                       /*!< Timer IRQ source enable bit */
#define DTS_PVT_IER_TS_IRQ_ENABLE_Pos               (1U)
#define DTS_PVT_IER_TS_IRQ_ENABLE_Msk               (0x1UL << DTS_PVT_IER_TS_IRQ_ENABLE_Pos)              /*!< 0x00000002 */
#define DTS_PVT_IER_TS_IRQ_ENABLE                   DTS_PVT_IER_TS_IRQ_ENABLE_Msk                        /*!< TS IRQ source enable bit */

/**************  Bit definition for DTS_PVTIRQTRMASKR register  ***************/
#define DTS_PVTIRQTRMASKR_TMR_IRQ_MASK_Pos          (0U)
#define DTS_PVTIRQTRMASKR_TMR_IRQ_MASK_Msk          (0x1UL << DTS_PVTIRQTRMASKR_TMR_IRQ_MASK_Pos)         /*!< 0x00000001 */
#define DTS_PVTIRQTRMASKR_TMR_IRQ_MASK              DTS_PVTIRQTRMASKR_TMR_IRQ_MASK_Msk                   /*!< Timer IRQ source mask bit */

/******************  Bit definition for DTS_TS_MR register  *******************/
#define DTS_TS_MR_TS0_IRQ_MASK_Pos                  (0U)
#define DTS_TS_MR_TS0_IRQ_MASK_Msk                  (0x1UL << DTS_TS_MR_TS0_IRQ_MASK_Pos)                 /*!< 0x00000001 */
#define DTS_TS_MR_TS0_IRQ_MASK                      DTS_TS_MR_TS0_IRQ_MASK_Msk                           /*!< TS0 IRQ source mask bit */
#define DTS_TS_MR_TS1_IRQ_MASK_Pos                  (1U)
#define DTS_TS_MR_TS1_IRQ_MASK_Msk                  (0x1UL << DTS_TS_MR_TS1_IRQ_MASK_Pos)                 /*!< 0x00000002 */
#define DTS_TS_MR_TS1_IRQ_MASK                      DTS_TS_MR_TS1_IRQ_MASK_Msk                           /*!< TS1 IRQ source mask bit */

/*****************  Bit definition for DTS_PVTTR_SR register  *****************/
#define DTS_PVTTR_SR_TMR_IRQ_STATUS_Pos             (0U)
#define DTS_PVTTR_SR_TMR_IRQ_STATUS_Msk             (0x1UL << DTS_PVTTR_SR_TMR_IRQ_STATUS_Pos)            /*!< 0x00000001 */
#define DTS_PVTTR_SR_TMR_IRQ_STATUS                 DTS_PVTTR_SR_TMR_IRQ_STATUS_Msk                      /*!< Timer IRQ status bit after masking */

/******************  Bit definition for DTS_TS_ISR register  ******************/
#define DTS_TS_ISR_TS0_IRQ_STATUS_Pos               (0U)
#define DTS_TS_ISR_TS0_IRQ_STATUS_Msk               (0x1UL << DTS_TS_ISR_TS0_IRQ_STATUS_Pos)              /*!< 0x00000001 */
#define DTS_TS_ISR_TS0_IRQ_STATUS                   DTS_TS_ISR_TS0_IRQ_STATUS_Msk                        /*!< TS0 IRQ status bit after masking */
#define DTS_TS_ISR_TS1_IRQ_STATUS_Pos               (1U)
#define DTS_TS_ISR_TS1_IRQ_STATUS_Msk               (0x1UL << DTS_TS_ISR_TS1_IRQ_STATUS_Pos)              /*!< 0x00000002 */
#define DTS_TS_ISR_TS1_IRQ_STATUS                   DTS_TS_ISR_TS1_IRQ_STATUS_Msk                        /*!< TS1 IRQ status bit after masking */

/**************  Bit definition for DTS_PVTTMRRAW_ISR register  ***************/
#define DTS_PVTTMRRAW_ISR_TMR_IRQ_RAW_STATUS_Pos    (0U)
#define DTS_PVTTMRRAW_ISR_TMR_IRQ_RAW_STATUS_Msk    (0x1UL << DTS_PVTTMRRAW_ISR_TMR_IRQ_RAW_STATUS_Pos)   /*!< 0x00000001 */
#define DTS_PVTTMRRAW_ISR_TMR_IRQ_RAW_STATUS        DTS_PVTTMRRAW_ISR_TMR_IRQ_RAW_STATUS_Msk             /*!< TMR IRQ status bit before masking */

/****************  Bit definition for DTS_TSRAW_ISR register  *****************/
#define DTS_TSRAW_ISR_TS0_IRQ_RAW_STATUS_Pos        (0U)
#define DTS_TSRAW_ISR_TS0_IRQ_RAW_STATUS_Msk        (0x1UL << DTS_TSRAW_ISR_TS0_IRQ_RAW_STATUS_Pos)       /*!< 0x00000001 */
#define DTS_TSRAW_ISR_TS0_IRQ_RAW_STATUS            DTS_TSRAW_ISR_TS0_IRQ_RAW_STATUS_Msk                 /*!< TS0 IRQ status bit before masking */
#define DTS_TSRAW_ISR_TS1_IRQ_RAW_STATUS_Pos        (1U)
#define DTS_TSRAW_ISR_TS1_IRQ_RAW_STATUS_Msk        (0x1UL << DTS_TSRAW_ISR_TS1_IRQ_RAW_STATUS_Pos)       /*!< 0x00000002 */
#define DTS_TSRAW_ISR_TS1_IRQ_RAW_STATUS            DTS_TSRAW_ISR_TS1_IRQ_RAW_STATUS_Msk                 /*!< TS1 IRQ status bit before masking */

/***************  Bit definition for DTS_TSCCLKSYNTHR register  ***************/
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_LO_Pos           (0U)
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_LO_Msk           (0xFFUL << DTS_TSCCLKSYNTHR_CLK_SYNTH_LO_Pos)         /*!< 0x000000FF */
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_LO               DTS_TSCCLKSYNTHR_CLK_SYNTH_LO_Msk                    /*!< Synthesized clk_ts low period */
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HI_Pos           (8U)
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HI_Msk           (0xFFUL << DTS_TSCCLKSYNTHR_CLK_SYNTH_HI_Pos)         /*!< 0x0000FF00 */
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HI               DTS_TSCCLKSYNTHR_CLK_SYNTH_HI_Msk                    /*!< Synthesized clk_ts high period */
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HOLD_Pos         (16U)
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HOLD_Msk         (0xFUL << DTS_TSCCLKSYNTHR_CLK_SYNTH_HOLD_Pos)        /*!< 0x000F0000 */
#define DTS_TSCCLKSYNTHR_CLK_SYNTH_HOLD             DTS_TSCCLKSYNTHR_CLK_SYNTH_HOLD_Msk                  /*!< SDA master-to-SDA slave output hold delay/SDA slave-to-SDA master input setup delay */
#define DTS_TSCCLKSYNTHR_CLK_SYTH_EN_Pos            (24U)
#define DTS_TSCCLKSYNTHR_CLK_SYTH_EN_Msk            (0x1UL << DTS_TSCCLKSYNTHR_CLK_SYTH_EN_Pos)           /*!< 0x01000000 */
#define DTS_TSCCLKSYNTHR_CLK_SYTH_EN                DTS_TSCCLKSYNTHR_CLK_SYTH_EN_Msk                     /*!< Synthesized clk_ts enable bit */

/*************  Bit definition for DTS_TSCSDIFDISABLER register  **************/
#define DTS_TSCSDIFDISABLER_TS0_SDIF_DISABLE_Pos    (0U)
#define DTS_TSCSDIFDISABLER_TS0_SDIF_DISABLE_Msk    (0x1UL << DTS_TSCSDIFDISABLER_TS0_SDIF_DISABLE_Pos)   /*!< 0x00000001 */
#define DTS_TSCSDIFDISABLER_TS0_SDIF_DISABLE        DTS_TSCSDIFDISABLER_TS0_SDIF_DISABLE_Msk             /*!< TS0 serial data interface (SDIF) disable bit */
#define DTS_TSCSDIFDISABLER_TS1_SDIF_DISABLE_Pos    (1U)
#define DTS_TSCSDIFDISABLER_TS1_SDIF_DISABLE_Msk    (0x1UL << DTS_TSCSDIFDISABLER_TS1_SDIF_DISABLE_Pos)   /*!< 0x00000002 */
#define DTS_TSCSDIFDISABLER_TS1_SDIF_DISABLE        DTS_TSCSDIFDISABLER_TS1_SDIF_DISABLE_Msk             /*!< TS1 serial data interface (SDIF) disable bit */

/****************  Bit definition for DTS_TSCSDIF_SR register  ****************/
#define DTS_TSCSDIF_SR_SDIF_BUSY_Pos                (0U)
#define DTS_TSCSDIF_SR_SDIF_BUSY_Msk                (0x1UL << DTS_TSCSDIF_SR_SDIF_BUSY_Pos)               /*!< 0x00000001 */
#define DTS_TSCSDIF_SR_SDIF_BUSY                    DTS_TSCSDIF_SR_SDIF_BUSY_Msk                         /*!< SDIF busy flag */
#define DTS_TSCSDIF_SR_SDIF_LOCK_Pos                (1U)
#define DTS_TSCSDIF_SR_SDIF_LOCK_Msk                (0x1UL << DTS_TSCSDIF_SR_SDIF_LOCK_Pos)               /*!< 0x00000002 */
#define DTS_TSCSDIF_SR_SDIF_LOCK                    DTS_TSCSDIF_SR_SDIF_LOCK_Msk                         /*!< SDIF locked flag */

/****************  Bit definition for DTS_TSCSDIF_CR register  ****************/
#define DTS_TSCSDIF_CR_SDIF_WDATA_Pos               (0U)
#define DTS_TSCSDIF_CR_SDIF_WDATA_Msk               (0xFFFFFFUL << DTS_TSCSDIF_CR_SDIF_WDATA_Pos)         /*!< 0x00FFFFFF */
#define DTS_TSCSDIF_CR_SDIF_WDATA                   DTS_TSCSDIF_CR_SDIF_WDATA_Msk                        /*!< Serial interface write data */
#define DTS_TSCSDIF_CR_SDIF_ADDR_Pos                (24U)
#define DTS_TSCSDIF_CR_SDIF_ADDR_Msk                (0x7UL << DTS_TSCSDIF_CR_SDIF_ADDR_Pos)               /*!< 0x07000000 */
#define DTS_TSCSDIF_CR_SDIF_ADDR                    DTS_TSCSDIF_CR_SDIF_ADDR_Msk                         /*!< Serial interface register address */
#define DTS_TSCSDIF_CR_SDIF_WRN_Pos                 (27U)
#define DTS_TSCSDIF_CR_SDIF_WRN_Msk                 (0x1UL << DTS_TSCSDIF_CR_SDIF_WRN_Pos)                /*!< 0x08000000 */
#define DTS_TSCSDIF_CR_SDIF_WRN                     DTS_TSCSDIF_CR_SDIF_WRN_Msk                          /*!< Serial interface write/no read control bit */
#define DTS_TSCSDIF_CR_SDIF_PROG_Pos                (31U)
#define DTS_TSCSDIF_CR_SDIF_PROG_Msk                (0x1UL << DTS_TSCSDIF_CR_SDIF_PROG_Pos)               /*!< 0x80000000 */
#define DTS_TSCSDIF_CR_SDIF_PROG                    DTS_TSCSDIF_CR_SDIF_PROG_Msk                         /*!< Serial interface program request */

/***************  Bit definition for DTS_TSCSDIFHALTR register  ***************/
#define DTS_TSCSDIFHALTR_SDIF_STOP_Pos              (0U)
#define DTS_TSCSDIFHALTR_SDIF_STOP_Msk              (0x1UL << DTS_TSCSDIFHALTR_SDIF_STOP_Pos)             /*!< 0x00000001 */
#define DTS_TSCSDIFHALTR_SDIF_STOP                  DTS_TSCSDIFHALTR_SDIF_STOP_Msk                       /*!< Serial data interface (SDIF) stop  */

/***************  Bit definition for DTS_TSCSDIF_CFGR register  ***************/
#define DTS_TSCSDIF_CFGR_SDIF_INHIBIT_Pos           (0U)
#define DTS_TSCSDIF_CFGR_SDIF_INHIBIT_Msk           (0x3UL << DTS_TSCSDIF_CFGR_SDIF_INHIBIT_Pos)          /*!< 0x00000003 */
#define DTS_TSCSDIF_CFGR_SDIF_INHIBIT               DTS_TSCSDIF_CFGR_SDIF_INHIBIT_Msk                    /*!< Serial data interface (SDIF) programming inhibit  */

/****************  Bit definition for DTS_TSCSMPL_CR register  ****************/
#define DTS_TSCSMPL_CR_SMPL_CTR_DISABLE_Pos         (0U)
#define DTS_TSCSMPL_CR_SMPL_CTR_DISABLE_Msk         (0x1UL << DTS_TSCSMPL_CR_SMPL_CTR_DISABLE_Pos)        /*!< 0x00000001 */
#define DTS_TSCSMPL_CR_SMPL_CTR_DISABLE             DTS_TSCSMPL_CR_SMPL_CTR_DISABLE_Msk                  /*!< Sample counter disable bit */
#define DTS_TSCSMPL_CR_SMPL_CTR_HOLD_Pos            (1U)
#define DTS_TSCSMPL_CR_SMPL_CTR_HOLD_Msk            (0x1UL << DTS_TSCSMPL_CR_SMPL_CTR_HOLD_Pos)           /*!< 0x00000002 */
#define DTS_TSCSMPL_CR_SMPL_CTR_HOLD                DTS_TSCSMPL_CR_SMPL_CTR_HOLD_Msk                     /*!< Sample counter hold bit */
#define DTS_TSCSMPL_CR_SMPL_DISCARD_Pos             (2U)
#define DTS_TSCSMPL_CR_SMPL_DISCARD_Msk             (0x1UL << DTS_TSCSMPL_CR_SMPL_DISCARD_Pos)            /*!< 0x00000004 */
#define DTS_TSCSMPL_CR_SMPL_DISCARD                 DTS_TSCSMPL_CR_SMPL_DISCARD_Msk                      /*!< Sample discard bit */

/*************  Bit definition for DTS_TSCSDIFSMPLCLRR register  **************/
#define DTS_TSCSDIFSMPLCLRR_SMPL_CNTER_CLEAR_Pos    (0U)
#define DTS_TSCSDIFSMPLCLRR_SMPL_CNTER_CLEAR_Msk    (0x1UL << DTS_TSCSDIFSMPLCLRR_SMPL_CNTER_CLEAR_Pos)   /*!< 0x00000001 */
#define DTS_TSCSDIFSMPLCLRR_SMPL_CNTER_CLEAR        DTS_TSCSDIFSMPLCLRR_SMPL_CNTER_CLEAR_Msk             /*!< Sample counter clear bit  */

/***************  Bit definition for DTS_TSCSMPLCNTR register  ****************/
#define DTS_TSCSMPLCNTR_SMPL_COUNT_Pos              (0U)
#define DTS_TSCSMPLCNTR_SMPL_COUNT_Msk              (0xFFFFUL << DTS_TSCSMPLCNTR_SMPL_COUNT_Pos)          /*!< 0x0000FFFF */
#define DTS_TSCSMPLCNTR_SMPL_COUNT                  DTS_TSCSMPLCNTR_SMPL_COUNT_Msk                       /*!< Sample counter */

/*****************  Bit definition for DTS_TS0_IER register  ******************/
#define DTS_TS0_IER_IRQ_EN_FAULT_Pos                (0U)
#define DTS_TS0_IER_IRQ_EN_FAULT_Msk                (0x1UL << DTS_TS0_IER_IRQ_EN_FAULT_Pos)               /*!< 0x00000001 */
#define DTS_TS0_IER_IRQ_EN_FAULT                    DTS_TS0_IER_IRQ_EN_FAULT_Msk                         /*!< Fault IRQ enable bit */
#define DTS_TS0_IER_IRQ_EN_DONE_Pos                 (1U)
#define DTS_TS0_IER_IRQ_EN_DONE_Msk                 (0x1UL << DTS_TS0_IER_IRQ_EN_DONE_Pos)                /*!< 0x00000002 */
#define DTS_TS0_IER_IRQ_EN_DONE                     DTS_TS0_IER_IRQ_EN_DONE_Msk                          /*!< Sample done IRQ enable bit */
#define DTS_TS0_IER_IRQ_EN_ALARMA_Pos               (3U)
#define DTS_TS0_IER_IRQ_EN_ALARMA_Msk               (0x1UL << DTS_TS0_IER_IRQ_EN_ALARMA_Pos)              /*!< 0x00000008 */
#define DTS_TS0_IER_IRQ_EN_ALARMA                   DTS_TS0_IER_IRQ_EN_ALARMA_Msk                        /*!< Alarm A IRQ enable bit */
#define DTS_TS0_IER_IRQ_EN_ALARMB_Pos               (4U)
#define DTS_TS0_IER_IRQ_EN_ALARMB_Msk               (0x1UL << DTS_TS0_IER_IRQ_EN_ALARMB_Pos)              /*!< 0x00000010 */
#define DTS_TS0_IER_IRQ_EN_ALARMB                   DTS_TS0_IER_IRQ_EN_ALARMB_Msk                        /*!< Alarm B IRQ enable bit */

/*****************  Bit definition for DTS_TS0_ISR register  ******************/
#define DTS_TS0_ISR_IRQ_STATUS_FAULT_Pos            (0U)
#define DTS_TS0_ISR_IRQ_STATUS_FAULT_Msk            (0x1UL << DTS_TS0_ISR_IRQ_STATUS_FAULT_Pos)           /*!< 0x00000001 */
#define DTS_TS0_ISR_IRQ_STATUS_FAULT                DTS_TS0_ISR_IRQ_STATUS_FAULT_Msk                     /*!< Fault IRQ status bit */
#define DTS_TS0_ISR_IRQ_STATUS_DONE_Pos             (1U)
#define DTS_TS0_ISR_IRQ_STATUS_DONE_Msk             (0x1UL << DTS_TS0_ISR_IRQ_STATUS_DONE_Pos)            /*!< 0x00000002 */
#define DTS_TS0_ISR_IRQ_STATUS_DONE                 DTS_TS0_ISR_IRQ_STATUS_DONE_Msk                      /*!< Sample done IRQ status bit */
#define DTS_TS0_ISR_IRQ_STATUS_ALARMA_Pos           (3U)
#define DTS_TS0_ISR_IRQ_STATUS_ALARMA_Msk           (0x1UL << DTS_TS0_ISR_IRQ_STATUS_ALARMA_Pos)          /*!< 0x00000008 */
#define DTS_TS0_ISR_IRQ_STATUS_ALARMA               DTS_TS0_ISR_IRQ_STATUS_ALARMA_Msk                    /*!< Alarm A IRQ status bit */
#define DTS_TS0_ISR_IRQ_STATUS_ALARMB_Pos           (4U)
#define DTS_TS0_ISR_IRQ_STATUS_ALARMB_Msk           (0x1UL << DTS_TS0_ISR_IRQ_STATUS_ALARMB_Pos)          /*!< 0x00000010 */
#define DTS_TS0_ISR_IRQ_STATUS_ALARMB               DTS_TS0_ISR_IRQ_STATUS_ALARMB_Msk                    /*!< Alarm B IRQ status bit */

/*****************  Bit definition for DTS_TS0_ICR register  ******************/
#define DTS_TS0_ICR_IRQ_CLEAR_FAULT_Pos             (0U)
#define DTS_TS0_ICR_IRQ_CLEAR_FAULT_Msk             (0x1UL << DTS_TS0_ICR_IRQ_CLEAR_FAULT_Pos)            /*!< 0x00000001 */
#define DTS_TS0_ICR_IRQ_CLEAR_FAULT                 DTS_TS0_ICR_IRQ_CLEAR_FAULT_Msk                      /*!< Fault IRQ clear bit */
#define DTS_TS0_ICR_IRQ_CLEAR_DONE_Pos              (1U)
#define DTS_TS0_ICR_IRQ_CLEAR_DONE_Msk              (0x1UL << DTS_TS0_ICR_IRQ_CLEAR_DONE_Pos)             /*!< 0x00000002 */
#define DTS_TS0_ICR_IRQ_CLEAR_DONE                  DTS_TS0_ICR_IRQ_CLEAR_DONE_Msk                       /*!< Sample done IRQ clear bit */
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMA_Pos            (3U)
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMA_Msk            (0x1UL << DTS_TS0_ICR_IRQ_CLEAR_ALARMA_Pos)           /*!< 0x00000008 */
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMA                DTS_TS0_ICR_IRQ_CLEAR_ALARMA_Msk                     /*!< Alarm A IRQ clear bit */
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMB_Pos            (4U)
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMB_Msk            (0x1UL << DTS_TS0_ICR_IRQ_CLEAR_ALARMB_Pos)           /*!< 0x00000010 */
#define DTS_TS0_ICR_IRQ_CLEAR_ALARMB                DTS_TS0_ICR_IRQ_CLEAR_ALARMB_Msk                     /*!< Alarm B IRQ clear bit */

/***************  Bit definition for DTS_TS0IRQTESTR register  ****************/
#define DTS_TS0IRQTESTR_IRQ_TEST_FAULT_Pos          (0U)
#define DTS_TS0IRQTESTR_IRQ_TEST_FAULT_Msk          (0x1UL << DTS_TS0IRQTESTR_IRQ_TEST_FAULT_Pos)         /*!< 0x00000001 */
#define DTS_TS0IRQTESTR_IRQ_TEST_FAULT              DTS_TS0IRQTESTR_IRQ_TEST_FAULT_Msk                   /*!< Fault IRQ test bit */
#define DTS_TS0IRQTESTR_IRQ_TEST_DONE_Pos           (1U)
#define DTS_TS0IRQTESTR_IRQ_TEST_DONE_Msk           (0x1UL << DTS_TS0IRQTESTR_IRQ_TEST_DONE_Pos)          /*!< 0x00000002 */
#define DTS_TS0IRQTESTR_IRQ_TEST_DONE               DTS_TS0IRQTESTR_IRQ_TEST_DONE_Msk                    /*!< Sample done IRQ test bit */
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMA_Pos         (3U)
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMA_Msk         (0x1UL << DTS_TS0IRQTESTR_IRQ_TEST_ALARMA_Pos)        /*!< 0x00000008 */
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMA             DTS_TS0IRQTESTR_IRQ_TEST_ALARMA_Msk                  /*!< Alarm A IRQ test bit */
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMB_Pos         (4U)
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMB_Msk         (0x1UL << DTS_TS0IRQTESTR_IRQ_TEST_ALARMB_Pos)        /*!< 0x00000010 */
#define DTS_TS0IRQTESTR_IRQ_TEST_ALARMB             DTS_TS0IRQTESTR_IRQ_TEST_ALARMB_Msk                  /*!< Alarm B IRQ test bit */

/**************  Bit definition for DTS_TS0SDIFRDATAR register  ***************/
#define DTS_TS0SDIFRDATAR_SDIF_RDATA_Pos            (0U)
#define DTS_TS0SDIFRDATAR_SDIF_RDATA_Msk            (0xFFFFFFUL << DTS_TS0SDIFRDATAR_SDIF_RDATA_Pos)      /*!< 0x00FFFFFF */
#define DTS_TS0SDIFRDATAR_SDIF_RDATA                DTS_TS0SDIFRDATAR_SDIF_RDATA_Msk                     /*!< SDIF read data */

/***************  Bit definition for DTS_TS0SDIFDONER register  ***************/
#define DTS_TS0SDIFDONER_SDIF_SMPL_DONE_Pos         (0U)
#define DTS_TS0SDIFDONER_SDIF_SMPL_DONE_Msk         (0x1UL << DTS_TS0SDIFDONER_SDIF_SMPL_DONE_Pos)        /*!< 0x00000001 */
#define DTS_TS0SDIFDONER_SDIF_SMPL_DONE             DTS_TS0SDIFDONER_SDIF_SMPL_DONE_Msk                  /*!< Sample done flag  */

/***************  Bit definition for DTS_TS0SDIFDATAR register  ***************/
#define DTS_TS0SDIFDATAR_SAMPLE_DATA_Pos            (0U)
#define DTS_TS0SDIFDATAR_SAMPLE_DATA_Msk            (0xFFFFUL << DTS_TS0SDIFDATAR_SAMPLE_DATA_Pos)        /*!< 0x0000FFFF */
#define DTS_TS0SDIFDATAR_SAMPLE_DATA                DTS_TS0SDIFDATAR_SAMPLE_DATA_Msk                     /*!< Sample data */
#define DTS_TS0SDIFDATAR_SAMPLE_TYPE_Pos            (16U)
#define DTS_TS0SDIFDATAR_SAMPLE_TYPE_Msk            (0x1UL << DTS_TS0SDIFDATAR_SAMPLE_TYPE_Pos)           /*!< 0x00010000 */
#define DTS_TS0SDIFDATAR_SAMPLE_TYPE                DTS_TS0SDIFDATAR_SAMPLE_TYPE_Msk                     /*!< TS sample type */
#define DTS_TS0SDIFDATAR_SAMPLE_FAULT_Pos           (17U)
#define DTS_TS0SDIFDATAR_SAMPLE_FAULT_Msk           (0x1UL << DTS_TS0SDIFDATAR_SAMPLE_FAULT_Pos)          /*!< 0x00020000 */
#define DTS_TS0SDIFDATAR_SAMPLE_FAULT               DTS_TS0SDIFDATAR_SAMPLE_FAULT_Msk                    /*!< Sample fault */

/**************  Bit definition for DTS_TS0ALARMA_CFGR register  **************/
#define DTS_TS0ALARMA_CFGR_HYSTA_THRESH_Pos         (0U)
#define DTS_TS0ALARMA_CFGR_HYSTA_THRESH_Msk         (0xFFFFUL << DTS_TS0ALARMA_CFGR_HYSTA_THRESH_Pos)     /*!< 0x0000FFFF */
#define DTS_TS0ALARMA_CFGR_HYSTA_THRESH             DTS_TS0ALARMA_CFGR_HYSTA_THRESH_Msk                  /*!< Alarm A hysteresis threshold */
#define DTS_TS0ALARMA_CFGR_ALARMA_THRESH_Pos        (16U)
#define DTS_TS0ALARMA_CFGR_ALARMA_THRESH_Msk        (0xFFFFUL << DTS_TS0ALARMA_CFGR_ALARMA_THRESH_Pos)    /*!< 0xFFFF0000 */
#define DTS_TS0ALARMA_CFGR_ALARMA_THRESH            DTS_TS0ALARMA_CFGR_ALARMA_THRESH_Msk                 /*!< Alarm A threshold */

/***************  Bit definition for DTS_TS0HLSAMPLER register  ***************/
#define DTS_TS0HLSAMPLER_SMPL_LO_Pos                (0U)
#define DTS_TS0HLSAMPLER_SMPL_LO_Msk                (0xFFFFUL << DTS_TS0HLSAMPLER_SMPL_LO_Pos)            /*!< 0x0000FFFF */
#define DTS_TS0HLSAMPLER_SMPL_LO                    DTS_TS0HLSAMPLER_SMPL_LO_Msk                         /*!< Lowest valid data sample value received */
#define DTS_TS0HLSAMPLER_SMPL_HI_Pos                (16U)
#define DTS_TS0HLSAMPLER_SMPL_HI_Msk                (0xFFFFUL << DTS_TS0HLSAMPLER_SMPL_HI_Pos)            /*!< 0xFFFF0000 */
#define DTS_TS0HLSAMPLER_SMPL_HI                    DTS_TS0HLSAMPLER_SMPL_HI_Msk                         /*!< Highest valid data sample value received */

/**************  Bit definition for DTS_TS0HILORESETR register  ***************/
#define DTS_TS0HILORESETR_SMPL_LO_SET_Pos           (0U)
#define DTS_TS0HILORESETR_SMPL_LO_SET_Msk           (0x1UL << DTS_TS0HILORESETR_SMPL_LO_SET_Pos)          /*!< 0x00000001 */
#define DTS_TS0HILORESETR_SMPL_LO_SET               DTS_TS0HILORESETR_SMPL_LO_SET_Msk                    /*!< Sample Low Set */
#define DTS_TS0HILORESETR_SMPL_HI_CLR_Pos           (1U)
#define DTS_TS0HILORESETR_SMPL_HI_CLR_Msk           (0x1UL << DTS_TS0HILORESETR_SMPL_HI_CLR_Pos)          /*!< 0x00000002 */
#define DTS_TS0HILORESETR_SMPL_HI_CLR               DTS_TS0HILORESETR_SMPL_HI_CLR_Msk                    /*!< Sample high clear 0 */

/*****************  Bit definition for DTS_TS1_IER register  ******************/
#define DTS_TS1_IER_IRQ_EN_FAULT_Pos                (0U)
#define DTS_TS1_IER_IRQ_EN_FAULT_Msk                (0x1UL << DTS_TS1_IER_IRQ_EN_FAULT_Pos)               /*!< 0x00000001 */
#define DTS_TS1_IER_IRQ_EN_FAULT                    DTS_TS1_IER_IRQ_EN_FAULT_Msk                         /*!< Fault IRQ enable bit */
#define DTS_TS1_IER_IRQ_EN_DONE_Pos                 (1U)
#define DTS_TS1_IER_IRQ_EN_DONE_Msk                 (0x1UL << DTS_TS1_IER_IRQ_EN_DONE_Pos)                /*!< 0x00000002 */
#define DTS_TS1_IER_IRQ_EN_DONE                     DTS_TS1_IER_IRQ_EN_DONE_Msk                          /*!< Sample done IRQ enable bit */
#define DTS_TS1_IER_IRQ_EN_ALARMA_Pos               (3U)
#define DTS_TS1_IER_IRQ_EN_ALARMA_Msk               (0x1UL << DTS_TS1_IER_IRQ_EN_ALARMA_Pos)              /*!< 0x00000008 */
#define DTS_TS1_IER_IRQ_EN_ALARMA                   DTS_TS1_IER_IRQ_EN_ALARMA_Msk                        /*!< Alarm A IRQ enable bit */
#define DTS_TS1_IER_IRQ_EN_ALARMB_Pos               (4U)
#define DTS_TS1_IER_IRQ_EN_ALARMB_Msk               (0x1UL << DTS_TS1_IER_IRQ_EN_ALARMB_Pos)              /*!< 0x00000010 */
#define DTS_TS1_IER_IRQ_EN_ALARMB                   DTS_TS1_IER_IRQ_EN_ALARMB_Msk                        /*!< Alarm B IRQ enable bit */

/*****************  Bit definition for DTS_TS1_ISR register  ******************/
#define DTS_TS1_ISR_IRQ_STATUS_FAULT_Pos            (0U)
#define DTS_TS1_ISR_IRQ_STATUS_FAULT_Msk            (0x1UL << DTS_TS1_ISR_IRQ_STATUS_FAULT_Pos)           /*!< 0x00000001 */
#define DTS_TS1_ISR_IRQ_STATUS_FAULT                DTS_TS1_ISR_IRQ_STATUS_FAULT_Msk                     /*!< Fault IRQ status bit */
#define DTS_TS1_ISR_IRQ_STATUS_DONE_Pos             (1U)
#define DTS_TS1_ISR_IRQ_STATUS_DONE_Msk             (0x1UL << DTS_TS1_ISR_IRQ_STATUS_DONE_Pos)            /*!< 0x00000002 */
#define DTS_TS1_ISR_IRQ_STATUS_DONE                 DTS_TS1_ISR_IRQ_STATUS_DONE_Msk                      /*!< Sample done IRQ status bit */
#define DTS_TS1_ISR_IRQ_STATUS_ALARMA_Pos           (3U)
#define DTS_TS1_ISR_IRQ_STATUS_ALARMA_Msk           (0x1UL << DTS_TS1_ISR_IRQ_STATUS_ALARMA_Pos)          /*!< 0x00000008 */
#define DTS_TS1_ISR_IRQ_STATUS_ALARMA               DTS_TS1_ISR_IRQ_STATUS_ALARMA_Msk                    /*!< Alarm A IRQ status bit */
#define DTS_TS1_ISR_IRQ_STATUS_ALARMB_Pos           (4U)
#define DTS_TS1_ISR_IRQ_STATUS_ALARMB_Msk           (0x1UL << DTS_TS1_ISR_IRQ_STATUS_ALARMB_Pos)          /*!< 0x00000010 */
#define DTS_TS1_ISR_IRQ_STATUS_ALARMB               DTS_TS1_ISR_IRQ_STATUS_ALARMB_Msk                    /*!< Alarm B IRQ status bit */

/*****************  Bit definition for DTS_TS1_ICR register  ******************/
#define DTS_TS1_ICR_IRQ_CLEAR_FAULT_Pos             (0U)
#define DTS_TS1_ICR_IRQ_CLEAR_FAULT_Msk             (0x1UL << DTS_TS1_ICR_IRQ_CLEAR_FAULT_Pos)            /*!< 0x00000001 */
#define DTS_TS1_ICR_IRQ_CLEAR_FAULT                 DTS_TS1_ICR_IRQ_CLEAR_FAULT_Msk                      /*!< Fault IRQ clear bit */
#define DTS_TS1_ICR_IRQ_CLEAR_DONE_Pos              (1U)
#define DTS_TS1_ICR_IRQ_CLEAR_DONE_Msk              (0x1UL << DTS_TS1_ICR_IRQ_CLEAR_DONE_Pos)             /*!< 0x00000002 */
#define DTS_TS1_ICR_IRQ_CLEAR_DONE                  DTS_TS1_ICR_IRQ_CLEAR_DONE_Msk                       /*!< Sample done IRQ clear bit */
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMA_Pos            (3U)
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMA_Msk            (0x1UL << DTS_TS1_ICR_IRQ_CLEAR_ALARMA_Pos)           /*!< 0x00000008 */
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMA                DTS_TS1_ICR_IRQ_CLEAR_ALARMA_Msk                     /*!< Alarm A IRQ clear bit */
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMB_Pos            (4U)
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMB_Msk            (0x1UL << DTS_TS1_ICR_IRQ_CLEAR_ALARMB_Pos)           /*!< 0x00000010 */
#define DTS_TS1_ICR_IRQ_CLEAR_ALARMB                DTS_TS1_ICR_IRQ_CLEAR_ALARMB_Msk                     /*!< Alarm B IRQ clear bit */

/***************  Bit definition for DTS_TS1IRQTESTR register  ****************/
#define DTS_TS1IRQTESTR_IRQ_TEST_FAULT_Pos          (0U)
#define DTS_TS1IRQTESTR_IRQ_TEST_FAULT_Msk          (0x1UL << DTS_TS1IRQTESTR_IRQ_TEST_FAULT_Pos)         /*!< 0x00000001 */
#define DTS_TS1IRQTESTR_IRQ_TEST_FAULT              DTS_TS1IRQTESTR_IRQ_TEST_FAULT_Msk                   /*!< Fault IRQ test bit */
#define DTS_TS1IRQTESTR_IRQ_TEST_DONE_Pos           (1U)
#define DTS_TS1IRQTESTR_IRQ_TEST_DONE_Msk           (0x1UL << DTS_TS1IRQTESTR_IRQ_TEST_DONE_Pos)          /*!< 0x00000002 */
#define DTS_TS1IRQTESTR_IRQ_TEST_DONE               DTS_TS1IRQTESTR_IRQ_TEST_DONE_Msk                    /*!< Sample done IRQ test bit */
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMA_Pos         (3U)
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMA_Msk         (0x1UL << DTS_TS1IRQTESTR_IRQ_TEST_ALARMA_Pos)        /*!< 0x00000008 */
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMA             DTS_TS1IRQTESTR_IRQ_TEST_ALARMA_Msk                  /*!< Alarm A IRQ test bit */
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMB_Pos         (4U)
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMB_Msk         (0x1UL << DTS_TS1IRQTESTR_IRQ_TEST_ALARMB_Pos)        /*!< 0x00000010 */
#define DTS_TS1IRQTESTR_IRQ_TEST_ALARMB             DTS_TS1IRQTESTR_IRQ_TEST_ALARMB_Msk                  /*!< Alarm B IRQ test bit */

/**************  Bit definition for DTS_TS1SDIFRDATAR register  ***************/
#define DTS_TS1SDIFRDATAR_SDIF_RDATA_Pos            (0U)
#define DTS_TS1SDIFRDATAR_SDIF_RDATA_Msk            (0xFFFFFFUL << DTS_TS1SDIFRDATAR_SDIF_RDATA_Pos)      /*!< 0x00FFFFFF */
#define DTS_TS1SDIFRDATAR_SDIF_RDATA                DTS_TS1SDIFRDATAR_SDIF_RDATA_Msk                     /*!< SDIF read data */

/***************  Bit definition for DTS_TS1SDIFDONER register  ***************/
#define DTS_TS1SDIFDONER_SDIF_SMPL_DONE_Pos         (0U)
#define DTS_TS1SDIFDONER_SDIF_SMPL_DONE_Msk         (0x1UL << DTS_TS1SDIFDONER_SDIF_SMPL_DONE_Pos)        /*!< 0x00000001 */
#define DTS_TS1SDIFDONER_SDIF_SMPL_DONE             DTS_TS1SDIFDONER_SDIF_SMPL_DONE_Msk                  /*!< Sample done flag  */

/***************  Bit definition for DTS_TS1SDIFDATAR register  ***************/
#define DTS_TS1SDIFDATAR_SAMPLE_DATA_Pos            (0U)
#define DTS_TS1SDIFDATAR_SAMPLE_DATA_Msk            (0xFFFFUL << DTS_TS1SDIFDATAR_SAMPLE_DATA_Pos)        /*!< 0x0000FFFF */
#define DTS_TS1SDIFDATAR_SAMPLE_DATA                DTS_TS1SDIFDATAR_SAMPLE_DATA_Msk                     /*!< Sample data */
#define DTS_TS1SDIFDATAR_SAMPLE_TYPE_Pos            (16U)
#define DTS_TS1SDIFDATAR_SAMPLE_TYPE_Msk            (0x1UL << DTS_TS1SDIFDATAR_SAMPLE_TYPE_Pos)           /*!< 0x00010000 */
#define DTS_TS1SDIFDATAR_SAMPLE_TYPE                DTS_TS1SDIFDATAR_SAMPLE_TYPE_Msk                     /*!< TS sample type */
#define DTS_TS1SDIFDATAR_SAMPLE_FAULT_Pos           (17U)
#define DTS_TS1SDIFDATAR_SAMPLE_FAULT_Msk           (0x1UL << DTS_TS1SDIFDATAR_SAMPLE_FAULT_Pos)          /*!< 0x00020000 */
#define DTS_TS1SDIFDATAR_SAMPLE_FAULT               DTS_TS1SDIFDATAR_SAMPLE_FAULT_Msk                    /*!< Sample fault */

/**************  Bit definition for DTS_TS1ALARMA_CFGR register  **************/
#define DTS_TS1ALARMA_CFGR_HYSTA_THRESH_Pos         (0U)
#define DTS_TS1ALARMA_CFGR_HYSTA_THRESH_Msk         (0xFFFFUL << DTS_TS1ALARMA_CFGR_HYSTA_THRESH_Pos)     /*!< 0x0000FFFF */
#define DTS_TS1ALARMA_CFGR_HYSTA_THRESH             DTS_TS1ALARMA_CFGR_HYSTA_THRESH_Msk                  /*!< Alarm A hysteresis threshold */
#define DTS_TS1ALARMA_CFGR_ALARMA_THRESH_Pos        (16U)
#define DTS_TS1ALARMA_CFGR_ALARMA_THRESH_Msk        (0xFFFFUL << DTS_TS1ALARMA_CFGR_ALARMA_THRESH_Pos)    /*!< 0xFFFF0000 */
#define DTS_TS1ALARMA_CFGR_ALARMA_THRESH            DTS_TS1ALARMA_CFGR_ALARMA_THRESH_Msk                 /*!< Alarm A threshold */

/***************  Bit definition for DTS_TS1HLSAMPLER register  ***************/
#define DTS_TS1HLSAMPLER_SMPL_LO_Pos                (0U)
#define DTS_TS1HLSAMPLER_SMPL_LO_Msk                (0xFFFFUL << DTS_TS1HLSAMPLER_SMPL_LO_Pos)            /*!< 0x0000FFFF */
#define DTS_TS1HLSAMPLER_SMPL_LO                    DTS_TS1HLSAMPLER_SMPL_LO_Msk                         /*!< Lowest valid data sample value received */
#define DTS_TS1HLSAMPLER_SMPL_HI_Pos                (16U)
#define DTS_TS1HLSAMPLER_SMPL_HI_Msk                (0xFFFFUL << DTS_TS1HLSAMPLER_SMPL_HI_Pos)            /*!< 0xFFFF0000 */
#define DTS_TS1HLSAMPLER_SMPL_HI                    DTS_TS1HLSAMPLER_SMPL_HI_Msk                         /*!< Highest valid data sample value received */

/**************  Bit definition for DTS_TS1HILORESETR register  ***************/
#define DTS_TS1HILORESETR_SMPL_LO_SET_Pos           (0U)
#define DTS_TS1HILORESETR_SMPL_LO_SET_Msk           (0x1UL << DTS_TS1HILORESETR_SMPL_LO_SET_Pos)          /*!< 0x00000001 */
#define DTS_TS1HILORESETR_SMPL_LO_SET               DTS_TS1HILORESETR_SMPL_LO_SET_Msk                    /*!< Sample Low Set */
#define DTS_TS1HILORESETR_SMPL_HI_CLR_Pos           (1U)
#define DTS_TS1HILORESETR_SMPL_HI_CLR_Msk           (0x1UL << DTS_TS1HILORESETR_SMPL_HI_CLR_Pos)          /*!< 0x00000002 */
#define DTS_TS1HILORESETR_SMPL_HI_CLR               DTS_TS1HILORESETR_SMPL_HI_CLR_Msk                    /*!< Sample high clear 0 */

/******************************************************************************/
/*                                                                            */
/*                Ethernet MAC Registers bits definitions                     */
/*                                                                            */
/******************************************************************************/
/***************  Bit definition for ETH_MACCR register  ***************/
#define ETH_MACCR_RE_Pos                    (0U)
#define ETH_MACCR_RE_Msk                    (0x1UL << ETH_MACCR_RE_Pos)                          /*!< 0x00000001 */
#define ETH_MACCR_RE                        ETH_MACCR_RE_Msk                                    /*!< Receiver Enable */
#define ETH_MACCR_TE_Pos                    (1U)
#define ETH_MACCR_TE_Msk                    (0x1UL << ETH_MACCR_TE_Pos)                          /*!< 0x00000002 */
#define ETH_MACCR_TE                        ETH_MACCR_TE_Msk                                    /*!< Transmitter Enable */
#define ETH_MACCR_PRELEN_Pos                (2U)
#define ETH_MACCR_PRELEN_Msk                (0x3UL << ETH_MACCR_PRELEN_Pos)                      /*!< 0x0000000C */
#define ETH_MACCR_PRELEN                    ETH_MACCR_PRELEN_Msk                                /*!< Preamble Length for Transmit packets */
#define ETH_MACCR_PRELEN_7                  (0x0UL << ETH_MACCR_PRELEN_Pos)                      /*!< 0x00000000 */
#define ETH_MACCR_PRELEN_5                  (0x1UL << ETH_MACCR_PRELEN_Pos)                      /*!< 0x00000004 */
#define ETH_MACCR_PRELEN_3                  (0x2UL << ETH_MACCR_PRELEN_Pos)                      /*!< 0x00000008 */
#define ETH_MACCR_DC_Pos                    (4U)
#define ETH_MACCR_DC_Msk                    (0x1UL << ETH_MACCR_DC_Pos)                          /*!< 0x00000010 */
#define ETH_MACCR_DC                        ETH_MACCR_DC_Msk                                    /*!< Deferral Check */
#define ETH_MACCR_BL_Pos                    (5U)
#define ETH_MACCR_BL_Msk                    (0x3UL << ETH_MACCR_BL_Pos)                          /*!< 0x00000060 */
#define ETH_MACCR_BL                        ETH_MACCR_BL_Msk                                    /*!< Back-Off Limit */
#define ETH_MACCR_BL_10                     (0x0UL << ETH_MACCR_BL_Pos)                          /*!< 0x00000000 */
#define ETH_MACCR_BL_8                      (0x1UL << ETH_MACCR_BL_Pos)                          /*!< 0x00000020 */
#define ETH_MACCR_BL_4                      (0x2UL << ETH_MACCR_BL_Pos)                          /*!< 0x00000040 */
#define ETH_MACCR_BL_1                      (0x3UL << ETH_MACCR_BL_Pos)                          /*!< 0x00000060 */
#define ETH_MACCR_DR_Pos                    (8U)
#define ETH_MACCR_DR_Msk                    (0x1UL << ETH_MACCR_DR_Pos)                          /*!< 0x00000100 */
#define ETH_MACCR_DR                        ETH_MACCR_DR_Msk                                    /*!< Disable Retry */
#define ETH_MACCR_DCRS_Pos                  (9U)
#define ETH_MACCR_DCRS_Msk                  (0x1UL << ETH_MACCR_DCRS_Pos)                        /*!< 0x00000200 */
#define ETH_MACCR_DCRS                      ETH_MACCR_DCRS_Msk                                  /*!< Disable Carrier Sense During Transmission */
#define ETH_MACCR_DO_Pos                    (10U)
#define ETH_MACCR_DO_Msk                    (0x1UL << ETH_MACCR_DO_Pos)                          /*!< 0x00000400 */
#define ETH_MACCR_DO                        ETH_MACCR_DO_Msk                                    /*!< Disable Receive Own */
#define ETH_MACCR_ECRSFD_Pos                (11U)
#define ETH_MACCR_ECRSFD_Msk                (0x1UL << ETH_MACCR_ECRSFD_Pos)                      /*!< 0x00000800 */
#define ETH_MACCR_ECRSFD                    ETH_MACCR_ECRSFD_Msk                                /*!< Enable Carrier Sense Before Transmission in Full-Duplex Mode */
#define ETH_MACCR_LM_Pos                    (12U)
#define ETH_MACCR_LM_Msk                    (0x1UL << ETH_MACCR_LM_Pos)                          /*!< 0x00001000 */
#define ETH_MACCR_LM                        ETH_MACCR_LM_Msk                                    /*!< Loopback Mode */
#define ETH_MACCR_DM_Pos                    (13U)
#define ETH_MACCR_DM_Msk                    (0x1UL << ETH_MACCR_DM_Pos)                          /*!< 0x00002000 */
#define ETH_MACCR_DM                        ETH_MACCR_DM_Msk                                    /*!< Duplex Mode */
#define ETH_MACCR_FES_Pos                   (14U)
#define ETH_MACCR_FES_Msk                   (0x1UL << ETH_MACCR_FES_Pos)                         /*!< 0x00004000 */
#define ETH_MACCR_FES                       ETH_MACCR_FES_Msk                                   /*!< MAC Speed */
#define ETH_MACCR_PS_Pos                    (15U)
#define ETH_MACCR_PS_Msk                    (0x1UL << ETH_MACCR_PS_Pos)                          /*!< 0x00008000 */
#define ETH_MACCR_PS                        ETH_MACCR_PS_Msk                                    /*!< Port Select */
#define ETH_MACCR_JE_Pos                    (16U)
#define ETH_MACCR_JE_Msk                    (0x1UL << ETH_MACCR_JE_Pos)                          /*!< 0x00010000 */
#define ETH_MACCR_JE                        ETH_MACCR_JE_Msk                                    /*!< Jumbo Packet Enable */
#define ETH_MACCR_JD_Pos                    (17U)
#define ETH_MACCR_JD_Msk                    (0x1UL << ETH_MACCR_JD_Pos)                          /*!< 0x00020000 */
#define ETH_MACCR_JD                        ETH_MACCR_JD_Msk                                    /*!< Jabber Disable */
#define ETH_MACCR_BE_Pos                    (18U)
#define ETH_MACCR_BE_Msk                    (0x1UL << ETH_MACCR_BE_Pos)                          /*!< 0x00040000 */
#define ETH_MACCR_BE                        ETH_MACCR_BE_Msk                                    /*!< Packet Burst Enable */
#define ETH_MACCR_WD_Pos                    (19U)
#define ETH_MACCR_WD_Msk                    (0x1UL << ETH_MACCR_WD_Pos)                          /*!< 0x00080000 */
#define ETH_MACCR_WD                        ETH_MACCR_WD_Msk                                    /*!< Watchdog Disable */
#define ETH_MACCR_ACS_Pos                   (20U)
#define ETH_MACCR_ACS_Msk                   (0x1UL << ETH_MACCR_ACS_Pos)                         /*!< 0x00100000 */
#define ETH_MACCR_ACS                       ETH_MACCR_ACS_Msk                                   /*!< Automatic Pad or CRC Stripping */
#define ETH_MACCR_CST_Pos                   (21U)
#define ETH_MACCR_CST_Msk                   (0x1UL << ETH_MACCR_CST_Pos)                         /*!< 0x00200000 */
#define ETH_MACCR_CST                       ETH_MACCR_CST_Msk                                   /*!< CRC stripping for Type packets */
#define ETH_MACCR_S2KP_Pos                  (22U)
#define ETH_MACCR_S2KP_Msk                  (0x1UL << ETH_MACCR_S2KP_Pos)                        /*!< 0x00400000 */
#define ETH_MACCR_S2KP                      ETH_MACCR_S2KP_Msk                                  /*!< IEEE 802.3as Support for 2K Packets */
#define ETH_MACCR_GPSLCE_Pos                (23U)
#define ETH_MACCR_GPSLCE_Msk                (0x1UL << ETH_MACCR_GPSLCE_Pos)                      /*!< 0x00800000 */
#define ETH_MACCR_GPSLCE                    ETH_MACCR_GPSLCE_Msk                                /*!< Giant Packet Size Limit Control Enable */
#define ETH_MACCR_IPG_Pos                   (24U)
#define ETH_MACCR_IPG_Msk                   (0x7UL << ETH_MACCR_IPG_Pos)                         /*!< 0x07000000 */
#define ETH_MACCR_IPG                       ETH_MACCR_IPG_Msk                                   /*!< Inter-Packet Gap */
#define ETH_MACCR_IPG_96BIT                 (0x0UL << ETH_MACCR_IPG_Pos)                         /*!< 0x00000000 */
#define ETH_MACCR_IPG_88BIT                 (0x1UL << ETH_MACCR_IPG_Pos)                         /*!< 0x01000000 */
#define ETH_MACCR_IPG_80BIT                 (0x2UL << ETH_MACCR_IPG_Pos)                         /*!< 0x02000000 */
#define ETH_MACCR_IPG_72BIT                 (0x3UL << ETH_MACCR_IPG_Pos)                         /*!< 0x03000000 */
#define ETH_MACCR_IPG_64BIT                 (0x4UL << ETH_MACCR_IPG_Pos)                         /*!< 0x04000000 */
#define ETH_MACCR_IPG_56BIT                 (0x5UL << ETH_MACCR_IPG_Pos)                         /*!< 0x05000000 */
#define ETH_MACCR_IPG_48BIT                 (0x6UL << ETH_MACCR_IPG_Pos)                         /*!< 0x06000000 */
#define ETH_MACCR_IPG_40BIT                 (0x7UL << ETH_MACCR_IPG_Pos)                         /*!< 0x07000000 */
#define ETH_MACCR_IPC_Pos                   (27U)
#define ETH_MACCR_IPC_Msk                   (0x1UL << ETH_MACCR_IPC_Pos)                         /*!< 0x08000000 */
#define ETH_MACCR_IPC                       ETH_MACCR_IPC_Msk                                   /*!< Checksum Offload */
#define ETH_MACCR_SARC_Pos                  (28U)
#define ETH_MACCR_SARC_Msk                  (0x7UL << ETH_MACCR_SARC_Pos)                        /*!< 0x70000000 */
#define ETH_MACCR_SARC                      ETH_MACCR_SARC_Msk                                  /*!< Source Address Insertion or Replacement Control */
#define ETH_MACCR_SARC_0                    (0x1UL << ETH_MACCR_SARC_Pos)                        /*!< 0x10000000 */
#define ETH_MACCR_SARC_1                    (0x2UL << ETH_MACCR_SARC_Pos)                        /*!< 0x20000000 */
#define ETH_MACCR_SARC_2                    (0x4UL << ETH_MACCR_SARC_Pos)                        /*!< 0x40000000 */
#define ETH_MACCR_ARPEN_Pos                 (31U)
#define ETH_MACCR_ARPEN_Msk                 (0x1UL << ETH_MACCR_ARPEN_Pos)                       /*!< 0x80000000 */
#define ETH_MACCR_ARPEN                     ETH_MACCR_ARPEN_Msk                                 /*!< ARP Offload Enable */

/**************  Bit definition for ETH_MACECR register  ***************/
#define ETH_MACECR_GPSL_Pos                 (0U)
#define ETH_MACECR_GPSL_Msk                 (0x3FFFUL << ETH_MACECR_GPSL_Pos)                    /*!< 0x00003FFF */
#define ETH_MACECR_GPSL                     ETH_MACECR_GPSL_Msk                                 /*!< Giant Packet Size Limit */
#define ETH_MACECR_GPSL_0                   (0x1UL << ETH_MACECR_GPSL_Pos)                       /*!< 0x00000001 */
#define ETH_MACECR_GPSL_1                   (0x2UL << ETH_MACECR_GPSL_Pos)                       /*!< 0x00000002 */
#define ETH_MACECR_GPSL_2                   (0x4UL << ETH_MACECR_GPSL_Pos)                       /*!< 0x00000004 */
#define ETH_MACECR_GPSL_3                   (0x8UL << ETH_MACECR_GPSL_Pos)                       /*!< 0x00000008 */
#define ETH_MACECR_GPSL_4                   (0x10UL << ETH_MACECR_GPSL_Pos)                      /*!< 0x00000010 */
#define ETH_MACECR_GPSL_5                   (0x20UL << ETH_MACECR_GPSL_Pos)                      /*!< 0x00000020 */
#define ETH_MACECR_GPSL_6                   (0x40UL << ETH_MACECR_GPSL_Pos)                      /*!< 0x00000040 */
#define ETH_MACECR_GPSL_7                   (0x80UL << ETH_MACECR_GPSL_Pos)                      /*!< 0x00000080 */
#define ETH_MACECR_GPSL_8                   (0x100UL << ETH_MACECR_GPSL_Pos)                     /*!< 0x00000100 */
#define ETH_MACECR_GPSL_9                   (0x200UL << ETH_MACECR_GPSL_Pos)                     /*!< 0x00000200 */
#define ETH_MACECR_GPSL_10                  (0x400UL << ETH_MACECR_GPSL_Pos)                     /*!< 0x00000400 */
#define ETH_MACECR_GPSL_11                  (0x800UL << ETH_MACECR_GPSL_Pos)                     /*!< 0x00000800 */
#define ETH_MACECR_GPSL_12                  (0x1000UL << ETH_MACECR_GPSL_Pos)                    /*!< 0x00001000 */
#define ETH_MACECR_GPSL_13                  (0x2000UL << ETH_MACECR_GPSL_Pos)                    /*!< 0x00002000 */
#define ETH_MACECR_DCRCC_Pos                (16U)
#define ETH_MACECR_DCRCC_Msk                (0x1UL << ETH_MACECR_DCRCC_Pos)                      /*!< 0x00010000 */
#define ETH_MACECR_DCRCC                    ETH_MACECR_DCRCC_Msk                                /*!< Disable CRC Checking for Received Packets */
#define ETH_MACECR_SPEN_Pos                 (17U)
#define ETH_MACECR_SPEN_Msk                 (0x1UL << ETH_MACECR_SPEN_Pos)                       /*!< 0x00020000 */
#define ETH_MACECR_SPEN                     ETH_MACECR_SPEN_Msk                                 /*!< Slow Protocol Detection Enable */
#define ETH_MACECR_USP_Pos                  (18U)
#define ETH_MACECR_USP_Msk                  (0x1UL << ETH_MACECR_USP_Pos)                        /*!< 0x00040000 */
#define ETH_MACECR_USP                      ETH_MACECR_USP_Msk                                  /*!< Unicast Slow Protocol Packet Detect */
#define ETH_MACECR_EIPGEN_Pos               (24U)
#define ETH_MACECR_EIPGEN_Msk               (0x1UL << ETH_MACECR_EIPGEN_Pos)                     /*!< 0x01000000 */
#define ETH_MACECR_EIPGEN                   ETH_MACECR_EIPGEN_Msk                               /*!< Extended Inter-Packet Gap Enable */
#define ETH_MACECR_EIPG_Pos                 (25U)
#define ETH_MACECR_EIPG_Msk                 (0x1FUL << ETH_MACECR_EIPG_Pos)                      /*!< 0x3E000000 */
#define ETH_MACECR_EIPG                     ETH_MACECR_EIPG_Msk                                 /*!< Extended Inter-Packet Gap */
#define ETH_MACECR_EIPG_0                   (0x1UL << ETH_MACECR_EIPG_Pos)                       /*!< 0x02000000 */
#define ETH_MACECR_EIPG_1                   (0x2UL << ETH_MACECR_EIPG_Pos)                       /*!< 0x04000000 */
#define ETH_MACECR_EIPG_2                   (0x4UL << ETH_MACECR_EIPG_Pos)                       /*!< 0x08000000 */
#define ETH_MACECR_EIPG_3                   (0x8UL << ETH_MACECR_EIPG_Pos)                       /*!< 0x10000000 */
#define ETH_MACECR_EIPG_4                   (0x10UL << ETH_MACECR_EIPG_Pos)                      /*!< 0x20000000 */

/**************  Bit definition for ETH_MACPFR register  ***************/
#define ETH_MACPFR_PR_Pos                   (0U)
#define ETH_MACPFR_PR_Msk                   (0x1UL << ETH_MACPFR_PR_Pos)                         /*!< 0x00000001 */
#define ETH_MACPFR_PR                       ETH_MACPFR_PR_Msk                                   /*!< Promiscuous Mode */
#define ETH_MACPFR_HUC_Pos                  (1U)
#define ETH_MACPFR_HUC_Msk                  (0x1UL << ETH_MACPFR_HUC_Pos)                        /*!< 0x00000002 */
#define ETH_MACPFR_HUC                      ETH_MACPFR_HUC_Msk                                  /*!< Hash Unicast */
#define ETH_MACPFR_HMC_Pos                  (2U)
#define ETH_MACPFR_HMC_Msk                  (0x1UL << ETH_MACPFR_HMC_Pos)                        /*!< 0x00000004 */
#define ETH_MACPFR_HMC                      ETH_MACPFR_HMC_Msk                                  /*!< Hash Multicast */
#define ETH_MACPFR_DAIF_Pos                 (3U)
#define ETH_MACPFR_DAIF_Msk                 (0x1UL << ETH_MACPFR_DAIF_Pos)                       /*!< 0x00000008 */
#define ETH_MACPFR_DAIF                     ETH_MACPFR_DAIF_Msk                                 /*!< DA Inverse Filtering */
#define ETH_MACPFR_PM_Pos                   (4U)
#define ETH_MACPFR_PM_Msk                   (0x1UL << ETH_MACPFR_PM_Pos)                         /*!< 0x00000010 */
#define ETH_MACPFR_PM                       ETH_MACPFR_PM_Msk                                   /*!< Pass All Multicast */
#define ETH_MACPFR_DBF_Pos                  (5U)
#define ETH_MACPFR_DBF_Msk                  (0x1UL << ETH_MACPFR_DBF_Pos)                        /*!< 0x00000020 */
#define ETH_MACPFR_DBF                      ETH_MACPFR_DBF_Msk                                  /*!< Disable Broadcast Packets */
#define ETH_MACPFR_PCF_Pos                  (6U)
#define ETH_MACPFR_PCF_Msk                  (0x3UL << ETH_MACPFR_PCF_Pos)                        /*!< 0x000000C0 */
#define ETH_MACPFR_PCF                      ETH_MACPFR_PCF_Msk                                  /*!< Pass Control Packets */
#define ETH_MACPFR_PCF_BLOCKALL                 (0x0UL << ETH_MACPFR_PCF_Pos)                    /*!< 0x00000000 */
#define ETH_MACPFR_PCF_FORWARDALLEXCEPTPA       (0x1UL << ETH_MACPFR_PCF_Pos)                    /*!< 0x00000010 */
#define ETH_MACPFR_PCF_FORWARDALL               (0x2UL << ETH_MACPFR_PCF_Pos)                    /*!< 0x00000020 */
#define ETH_MACPFR_PCF_FORWARDPASSEDADDRFILTER  (0x3UL << ETH_MACPFR_PCF_Pos)                    /*!< 0x00000030 */
#define ETH_MACPFR_SAIF_Pos                 (8U)
#define ETH_MACPFR_SAIF_Msk                 (0x1UL << ETH_MACPFR_SAIF_Pos)                       /*!< 0x00000100 */
#define ETH_MACPFR_SAIF                     ETH_MACPFR_SAIF_Msk                                 /*!< SA Inverse Filtering */
#define ETH_MACPFR_SAF_Pos                  (9U)
#define ETH_MACPFR_SAF_Msk                  (0x1UL << ETH_MACPFR_SAF_Pos)                        /*!< 0x00000200 */
#define ETH_MACPFR_SAF                      ETH_MACPFR_SAF_Msk                                  /*!< Source Address Filter Enable */
#define ETH_MACPFR_HPF_Pos                  (10U)
#define ETH_MACPFR_HPF_Msk                  (0x1UL << ETH_MACPFR_HPF_Pos)                        /*!< 0x00000400 */
#define ETH_MACPFR_HPF                      ETH_MACPFR_HPF_Msk                                  /*!< Hash or Perfect Filter */
#define ETH_MACPFR_VTFE_Pos                 (16U)
#define ETH_MACPFR_VTFE_Msk                 (0x1UL << ETH_MACPFR_VTFE_Pos)                       /*!< 0x00010000 */
#define ETH_MACPFR_VTFE                     ETH_MACPFR_VTFE_Msk                                 /*!< VLAN Tag Filter Enable */
#define ETH_MACPFR_IPFE_Pos                 (20U)
#define ETH_MACPFR_IPFE_Msk                 (0x1UL << ETH_MACPFR_IPFE_Pos)                       /*!< 0x00100000 */
#define ETH_MACPFR_IPFE                     ETH_MACPFR_IPFE_Msk                                 /*!< Layer 3 and Layer 4 Filter Enable */
#define ETH_MACPFR_DNTU_Pos                 (21U)
#define ETH_MACPFR_DNTU_Msk                 (0x1UL << ETH_MACPFR_DNTU_Pos)                       /*!< 0x00200000 */
#define ETH_MACPFR_DNTU                     ETH_MACPFR_DNTU_Msk                                 /*!< Drop Non-TCP/UDP over IP Packets */
#define ETH_MACPFR_RA_Pos                   (31U)
#define ETH_MACPFR_RA_Msk                   (0x1UL << ETH_MACPFR_RA_Pos)                         /*!< 0x80000000 */
#define ETH_MACPFR_RA                       ETH_MACPFR_RA_Msk                                   /*!< Receive All */

/**************  Bit definition for ETH_MACWTR register  ***************/
#define ETH_MACWTR_WTO_Pos                  (0U)
#define ETH_MACWTR_WTO_Msk                  (0xFUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000F */
#define ETH_MACWTR_WTO                      ETH_MACWTR_WTO_Msk                                  /*!< Watchdog Timeout */
#define ETH_MACWTR_WTO_2KB                  (0x0UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000001 */
#define ETH_MACWTR_WTO_3KB                  (0x1UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000001 */
#define ETH_MACWTR_WTO_4KB                  (0x2UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000002 */
#define ETH_MACWTR_WTO_5KB                  (0x3UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000003 */
#define ETH_MACWTR_WTO_6KB                  (0x4UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000004 */
#define ETH_MACWTR_WTO_7KB                  (0x5UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000005 */
#define ETH_MACWTR_WTO_8KB                  (0x6UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000006 */
#define ETH_MACWTR_WTO_9KB                  (0x7UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000007 */
#define ETH_MACWTR_WTO_10KB                 (0x8UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000008 */
#define ETH_MACWTR_WTO_11KB                 (0x9UL << ETH_MACWTR_WTO_Pos)                        /*!< 0x00000009 */
#define ETH_MACWTR_WTO_12KB                 (0xAUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000A */
#define ETH_MACWTR_WTO_13KB                 (0xBUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000B */
#define ETH_MACWTR_WTO_14KB                 (0xCUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000C */
#define ETH_MACWTR_WTO_15KB                 (0xDUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000D */
#define ETH_MACWTR_WTO_16KB                 (0xEUL << ETH_MACWTR_WTO_Pos)                        /*!< 0x0000000E */
#define ETH_MACWTR_PWE_Pos                  (8U)
#define ETH_MACWTR_PWE_Msk                  (0x1UL << ETH_MACWTR_PWE_Pos)                        /*!< 0x00000100 */
#define ETH_MACWTR_PWE                      ETH_MACWTR_PWE_Msk                                  /*!< Programmable Watchdog Enable */

/**************  Bit definition for ETH_MACHT0R register  **************/
#define ETH_MACHT0R_HT31T0_Pos              (0U)
#define ETH_MACHT0R_HT31T0_Msk              (0xFFFFFFFFUL << ETH_MACHT0R_HT31T0_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACHT0R_HT31T0                  ETH_MACHT0R_HT31T0_Msk                              /*!< MAC Hash Table First 32 Bits */
#define ETH_MACHT0R_HT31T0_0                (0x1UL << ETH_MACHT0R_HT31T0_Pos)                    /*!< 0x00000001 */
#define ETH_MACHT0R_HT31T0_1                (0x2UL << ETH_MACHT0R_HT31T0_Pos)                    /*!< 0x00000002 */
#define ETH_MACHT0R_HT31T0_2                (0x4UL << ETH_MACHT0R_HT31T0_Pos)                    /*!< 0x00000004 */
#define ETH_MACHT0R_HT31T0_3                (0x8UL << ETH_MACHT0R_HT31T0_Pos)                    /*!< 0x00000008 */
#define ETH_MACHT0R_HT31T0_4                (0x10UL << ETH_MACHT0R_HT31T0_Pos)                   /*!< 0x00000010 */
#define ETH_MACHT0R_HT31T0_5                (0x20UL << ETH_MACHT0R_HT31T0_Pos)                   /*!< 0x00000020 */
#define ETH_MACHT0R_HT31T0_6                (0x40UL << ETH_MACHT0R_HT31T0_Pos)                   /*!< 0x00000040 */
#define ETH_MACHT0R_HT31T0_7                (0x80UL << ETH_MACHT0R_HT31T0_Pos)                   /*!< 0x00000080 */
#define ETH_MACHT0R_HT31T0_8                (0x100UL << ETH_MACHT0R_HT31T0_Pos)                  /*!< 0x00000100 */
#define ETH_MACHT0R_HT31T0_9                (0x200UL << ETH_MACHT0R_HT31T0_Pos)                  /*!< 0x00000200 */
#define ETH_MACHT0R_HT31T0_10               (0x400UL << ETH_MACHT0R_HT31T0_Pos)                  /*!< 0x00000400 */
#define ETH_MACHT0R_HT31T0_11               (0x800UL << ETH_MACHT0R_HT31T0_Pos)                  /*!< 0x00000800 */
#define ETH_MACHT0R_HT31T0_12               (0x1000UL << ETH_MACHT0R_HT31T0_Pos)                 /*!< 0x00001000 */
#define ETH_MACHT0R_HT31T0_13               (0x2000UL << ETH_MACHT0R_HT31T0_Pos)                 /*!< 0x00002000 */
#define ETH_MACHT0R_HT31T0_14               (0x4000UL << ETH_MACHT0R_HT31T0_Pos)                 /*!< 0x00004000 */
#define ETH_MACHT0R_HT31T0_15               (0x8000UL << ETH_MACHT0R_HT31T0_Pos)                 /*!< 0x00008000 */
#define ETH_MACHT0R_HT31T0_16               (0x10000UL << ETH_MACHT0R_HT31T0_Pos)                /*!< 0x00010000 */
#define ETH_MACHT0R_HT31T0_17               (0x20000UL << ETH_MACHT0R_HT31T0_Pos)                /*!< 0x00020000 */
#define ETH_MACHT0R_HT31T0_18               (0x40000UL << ETH_MACHT0R_HT31T0_Pos)                /*!< 0x00040000 */
#define ETH_MACHT0R_HT31T0_19               (0x80000UL << ETH_MACHT0R_HT31T0_Pos)                /*!< 0x00080000 */
#define ETH_MACHT0R_HT31T0_20               (0x100000UL << ETH_MACHT0R_HT31T0_Pos)               /*!< 0x00100000 */
#define ETH_MACHT0R_HT31T0_21               (0x200000UL << ETH_MACHT0R_HT31T0_Pos)               /*!< 0x00200000 */
#define ETH_MACHT0R_HT31T0_22               (0x400000UL << ETH_MACHT0R_HT31T0_Pos)               /*!< 0x00400000 */
#define ETH_MACHT0R_HT31T0_23               (0x800000UL << ETH_MACHT0R_HT31T0_Pos)               /*!< 0x00800000 */
#define ETH_MACHT0R_HT31T0_24               (0x1000000UL << ETH_MACHT0R_HT31T0_Pos)              /*!< 0x01000000 */
#define ETH_MACHT0R_HT31T0_25               (0x2000000UL << ETH_MACHT0R_HT31T0_Pos)              /*!< 0x02000000 */
#define ETH_MACHT0R_HT31T0_26               (0x4000000UL << ETH_MACHT0R_HT31T0_Pos)              /*!< 0x04000000 */
#define ETH_MACHT0R_HT31T0_27               (0x8000000UL << ETH_MACHT0R_HT31T0_Pos)              /*!< 0x08000000 */
#define ETH_MACHT0R_HT31T0_28               (0x10000000UL << ETH_MACHT0R_HT31T0_Pos)             /*!< 0x10000000 */
#define ETH_MACHT0R_HT31T0_29               (0x20000000UL << ETH_MACHT0R_HT31T0_Pos)             /*!< 0x20000000 */
#define ETH_MACHT0R_HT31T0_30               (0x40000000UL << ETH_MACHT0R_HT31T0_Pos)             /*!< 0x40000000 */
#define ETH_MACHT0R_HT31T0_31               (0x80000000UL << ETH_MACHT0R_HT31T0_Pos)             /*!< 0x80000000 */

/**************  Bit definition for ETH_MACHT1R register  **************/
#define ETH_MACHT1R_HT63T32_Pos             (0U)
#define ETH_MACHT1R_HT63T32_Msk             (0xFFFFFFFFUL << ETH_MACHT1R_HT63T32_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACHT1R_HT63T32                 ETH_MACHT1R_HT63T32_Msk                             /*!< MAC Hash Table Second 32 Bits */
#define ETH_MACHT1R_HT63T32_0               (0x1UL << ETH_MACHT1R_HT63T32_Pos)                   /*!< 0x00000001 */
#define ETH_MACHT1R_HT63T32_1               (0x2UL << ETH_MACHT1R_HT63T32_Pos)                   /*!< 0x00000002 */
#define ETH_MACHT1R_HT63T32_2               (0x4UL << ETH_MACHT1R_HT63T32_Pos)                   /*!< 0x00000004 */
#define ETH_MACHT1R_HT63T32_3               (0x8UL << ETH_MACHT1R_HT63T32_Pos)                   /*!< 0x00000008 */
#define ETH_MACHT1R_HT63T32_4               (0x10UL << ETH_MACHT1R_HT63T32_Pos)                  /*!< 0x00000010 */
#define ETH_MACHT1R_HT63T32_5               (0x20UL << ETH_MACHT1R_HT63T32_Pos)                  /*!< 0x00000020 */
#define ETH_MACHT1R_HT63T32_6               (0x40UL << ETH_MACHT1R_HT63T32_Pos)                  /*!< 0x00000040 */
#define ETH_MACHT1R_HT63T32_7               (0x80UL << ETH_MACHT1R_HT63T32_Pos)                  /*!< 0x00000080 */
#define ETH_MACHT1R_HT63T32_8               (0x100UL << ETH_MACHT1R_HT63T32_Pos)                 /*!< 0x00000100 */
#define ETH_MACHT1R_HT63T32_9               (0x200UL << ETH_MACHT1R_HT63T32_Pos)                 /*!< 0x00000200 */
#define ETH_MACHT1R_HT63T32_10              (0x400UL << ETH_MACHT1R_HT63T32_Pos)                 /*!< 0x00000400 */
#define ETH_MACHT1R_HT63T32_11              (0x800UL << ETH_MACHT1R_HT63T32_Pos)                 /*!< 0x00000800 */
#define ETH_MACHT1R_HT63T32_12              (0x1000UL << ETH_MACHT1R_HT63T32_Pos)                /*!< 0x00001000 */
#define ETH_MACHT1R_HT63T32_13              (0x2000UL << ETH_MACHT1R_HT63T32_Pos)                /*!< 0x00002000 */
#define ETH_MACHT1R_HT63T32_14              (0x4000UL << ETH_MACHT1R_HT63T32_Pos)                /*!< 0x00004000 */
#define ETH_MACHT1R_HT63T32_15              (0x8000UL << ETH_MACHT1R_HT63T32_Pos)                /*!< 0x00008000 */
#define ETH_MACHT1R_HT63T32_16              (0x10000UL << ETH_MACHT1R_HT63T32_Pos)               /*!< 0x00010000 */
#define ETH_MACHT1R_HT63T32_17              (0x20000UL << ETH_MACHT1R_HT63T32_Pos)               /*!< 0x00020000 */
#define ETH_MACHT1R_HT63T32_18              (0x40000UL << ETH_MACHT1R_HT63T32_Pos)               /*!< 0x00040000 */
#define ETH_MACHT1R_HT63T32_19              (0x80000UL << ETH_MACHT1R_HT63T32_Pos)               /*!< 0x00080000 */
#define ETH_MACHT1R_HT63T32_20              (0x100000UL << ETH_MACHT1R_HT63T32_Pos)              /*!< 0x00100000 */
#define ETH_MACHT1R_HT63T32_21              (0x200000UL << ETH_MACHT1R_HT63T32_Pos)              /*!< 0x00200000 */
#define ETH_MACHT1R_HT63T32_22              (0x400000UL << ETH_MACHT1R_HT63T32_Pos)              /*!< 0x00400000 */
#define ETH_MACHT1R_HT63T32_23              (0x800000UL << ETH_MACHT1R_HT63T32_Pos)              /*!< 0x00800000 */
#define ETH_MACHT1R_HT63T32_24              (0x1000000UL << ETH_MACHT1R_HT63T32_Pos)             /*!< 0x01000000 */
#define ETH_MACHT1R_HT63T32_25              (0x2000000UL << ETH_MACHT1R_HT63T32_Pos)             /*!< 0x02000000 */
#define ETH_MACHT1R_HT63T32_26              (0x4000000UL << ETH_MACHT1R_HT63T32_Pos)             /*!< 0x04000000 */
#define ETH_MACHT1R_HT63T32_27              (0x8000000UL << ETH_MACHT1R_HT63T32_Pos)             /*!< 0x08000000 */
#define ETH_MACHT1R_HT63T32_28              (0x10000000UL << ETH_MACHT1R_HT63T32_Pos)            /*!< 0x10000000 */
#define ETH_MACHT1R_HT63T32_29              (0x20000000UL << ETH_MACHT1R_HT63T32_Pos)            /*!< 0x20000000 */
#define ETH_MACHT1R_HT63T32_30              (0x40000000UL << ETH_MACHT1R_HT63T32_Pos)            /*!< 0x40000000 */
#define ETH_MACHT1R_HT63T32_31              (0x80000000UL << ETH_MACHT1R_HT63T32_Pos)            /*!< 0x80000000 */

/**************  Bit definition for ETH_MACVTCR register  ***************/
#define ETH_MACVTCR_OB_Pos                  (0U)
#define ETH_MACVTCR_OB_Msk                  (0x1UL << ETH_MACVTCR_OB_Pos)                        /*!< 0x00000001 */
#define ETH_MACVTCR_OB                      ETH_MACVTCR_OB_Msk                                  /*!< Operation Busy */
#define ETH_MACVTCR_CT_Pos                  (1U)
#define ETH_MACVTCR_CT_Msk                  (0x1UL << ETH_MACVTCR_CT_Pos)                        /*!< 0x00000002 */
#define ETH_MACVTCR_CT                      ETH_MACVTCR_CT_Msk                                  /*!< Command Type */
#define ETH_MACVTCR_OFS_Pos                 (2U)
#define ETH_MACVTCR_OFS_Msk                 (0x3UL << ETH_MACVTCR_OFS_Pos)                       /*!< 0x00000000C */
#define ETH_MACVTCR_OFS                     ETH_MACVTCR_OFS_Msk                                 /*!< Offset */
#define ETH_MACVTCR_OFS_1                   (0x1 << ETH_MACVTCR_OFS_Pos)                        /*!< 0x000000004 */
#define ETH_MACVTCR_OFS_2                   (0x2 << ETH_MACVTCR_OFS_Pos)                        /*!< 0x000000008 */
#define ETH_MACVTCR_OFS_3                   (0x3 << ETH_MACVTCR_OFS_Pos)                        /*!< 0x00000000C */
#define ETH_MACVTCR_ETV_Pos                 (16U)
#define ETH_MACVTCR_ETV_Msk                 (0x1UL << ETH_MACVTCR_ETV_Pos)                       /*!< 0x00010000 */
#define ETH_MACVTCR_ETV                     ETH_MACVTCR_ETV_Msk                                 /*!< Enable 12-Bit VLAN Tag Comparison */
#define ETH_MACVTCR_VTIM_Pos                (17U)
#define ETH_MACVTCR_VTIM_Msk                (0x1UL << ETH_MACVTCR_VTIM_Pos)                      /*!< 0x00020000 */
#define ETH_MACVTCR_VTIM                    ETH_MACVTCR_VTIM_Msk                                /*!< VLAN Tag Inverse Match Enable */
#define ETH_MACVTCR_ESVL_Pos                (18U)
#define ETH_MACVTCR_ESVL_Msk                (0x1UL << ETH_MACVTCR_ESVL_Pos)                      /*!< 0x00040000 */
#define ETH_MACVTCR_ESVL                    ETH_MACVTCR_ESVL_Msk                                /*!< Enable S-VLAN */
#define ETH_MACVTCR_ERSVLM_Pos              (19U)
#define ETH_MACVTCR_ERSVLM_Msk              (0x1UL << ETH_MACVTCR_ERSVLM_Pos)                    /*!< 0x00080000 */
#define ETH_MACVTCR_ERSVLM                  ETH_MACVTCR_ERSVLM_Msk                              /*!< Enable Receive S-VLAN Match */
#define ETH_MACVTCR_DOVLTC_Pos              (20U)
#define ETH_MACVTCR_DOVLTC_Msk              (0x1UL << ETH_MACVTCR_DOVLTC_Pos)                    /*!< 0x00100000 */
#define ETH_MACVTCR_DOVLTC                  ETH_MACVTCR_DOVLTC_Msk                              /*!< Disable VLAN Type Check */
#define ETH_MACVTCR_EVLS_Pos                (21U)
#define ETH_MACVTCR_EVLS_Msk                (0x3UL << ETH_MACVTCR_EVLS_Pos)                      /*!< 0x00600000 */
#define ETH_MACVTCR_EVLS                    ETH_MACVTCR_EVLS_Msk                                /*!< Enable VLAN Tag Stripping on Receive */
#define ETH_MACVTCR_EVLS_DONOTSTRIP         ((uint32_t)0x00000000)                              /*!< Do not strip */
#define ETH_MACVTCR_EVLS_STRIPIFPASS_Pos    (21U)
#define ETH_MACVTCR_EVLS_STRIPIFPASS_Msk    (0x1UL << ETH_MACVTCR_EVLS_STRIPIFPASS_Pos)         /*!< 0x00200000 */
#define ETH_MACVTCR_EVLS_STRIPIFPASS        ETH_MACVTCR_EVLS_STRIPIFPASS_Msk                    /*!< Strip if VLAN filter passes */
#define ETH_MACVTCR_EVLS_STRIPIFFAILS_Pos   (22U)
#define ETH_MACVTCR_EVLS_STRIPIFFAILS_Msk   (0x1UL << ETH_MACVTCR_EVLS_STRIPIFFAILS_Pos)        /*!< 0x00400000 */
#define ETH_MACVTCR_EVLS_STRIPIFFAILS       ETH_MACVTCR_EVLS_STRIPIFFAILS_Msk                   /*!< Strip if VLAN filter fails */
#define ETH_MACVTCR_EVLS_ALWAYSSTRIP_Pos    (21U)
#define ETH_MACVTCR_EVLS_ALWAYSSTRIP_Msk    (0x3UL << ETH_MACVTCR_EVLS_ALWAYSSTRIP_Pos)         /*!< 0x00600000 */
#define ETH_MACVTCR_EVLS_ALWAYSSTRIP        ETH_MACVTCR_EVLS_ALWAYSSTRIP_Msk                    /*!< Always strip */
#define ETH_MACVTCR_EVLRXS_Pos              (24U)
#define ETH_MACVTCR_EVLRXS_Msk              (0x1UL << ETH_MACVTCR_EVLRXS_Pos)                    /*!< 0x01000000 */
#define ETH_MACVTCR_EVLRXS                  ETH_MACVTCR_EVLRXS_Msk                              /*!< Enable VLAN Tag in Rx status */
#define ETH_MACVTCR_VTHM_Pos                (25U)
#define ETH_MACVTCR_VTHM_Msk                (0x1UL << ETH_MACVTCR_VTHM_Pos)                      /*!< 0x02000000 */
#define ETH_MACVTCR_VTHM                    ETH_MACVTCR_VTHM_Msk                                /*!< VLAN Tag Hash Table Match Enable */
#define ETH_MACVTCR_EDVLP_Pos               (26U)
#define ETH_MACVTCR_EDVLP_Msk               (0x1UL << ETH_MACVTCR_EDVLP_Pos)                     /*!< 0x04000000 */
#define ETH_MACVTCR_EDVLP                   ETH_MACVTCR_EDVLP_Msk                               /*!< Enable Double VLAN Processing */
#define ETH_MACVTCR_ERIVLT_Pos              (27U)
#define ETH_MACVTCR_ERIVLT_Msk              (0x1UL << ETH_MACVTCR_ERIVLT_Pos)                    /*!< 0x08000000 */
#define ETH_MACVTCR_ERIVLT                  ETH_MACVTCR_ERIVLT_Msk                              /*!< Enable Inner VLAN Tag */
#define ETH_MACVTCR_EIVLS_Pos               (28U)
#define ETH_MACVTCR_EIVLS_Msk               (0x3UL << ETH_MACVTCR_EIVLS_Pos)                     /*!< 0x30000000 */
#define ETH_MACVTCR_EIVLS                   ETH_MACVTCR_EIVLS_Msk                               /*!< Enable Inner VLAN Tag Stripping on Receive */
#define ETH_MACVTCR_EIVLS_DONOTSTRIP        ((uint32_t)0x00000000)                              /*!<  Do not strip */
#define ETH_MACVTCR_EIVLS_STRIPIFPASS_Pos   (28U)
#define ETH_MACVTCR_EIVLS_STRIPIFPASS_Msk   (0x1UL << ETH_MACVTCR_EIVLS_STRIPIFPASS_Pos)         /*!< 0x10000000 */
#define ETH_MACVTCR_EIVLS_STRIPIFPASS       ETH_MACVTCR_EIVLS_STRIPIFPASS_Msk                   /*!<  Strip if VLAN filter passes */
#define ETH_MACVTCR_EIVLS_STRIPIFFAILS_Pos  (29U)
#define ETH_MACVTCR_EIVLS_STRIPIFFAILS_Msk  (0x1UL << ETH_MACVTCR_EIVLS_STRIPIFFAILS_Pos)        /*!< 0x20000000 */
#define ETH_MACVTCR_EIVLS_STRIPIFFAILS      ETH_MACVTCR_EIVLS_STRIPIFFAILS_Msk                  /*!<  Strip if VLAN filter fails */
#define ETH_MACVTCR_EIVLS_ALWAYSSTRIP_Pos   (28U)
#define ETH_MACVTCR_EIVLS_ALWAYSSTRIP_Msk   (0x3UL << ETH_MACVTCR_EIVLS_ALWAYSSTRIP_Pos)         /*!< 0x30000000 */
#define ETH_MACVTCR_EIVLS_ALWAYSSTRIP        ETH_MACVTCR_EIVLS_ALWAYSSTRIP_Msk                  /*!<  Always strip */
#define ETH_MACVTCR_EIVLRXS_Pos             (31U)
#define ETH_MACVTCR_EIVLRXS_Msk             (0x1UL << ETH_MACVTCR_EIVLRXS_Pos)                   /*!< 0x80000000 */
#define ETH_MACVTCR_EIVLRXS                 ETH_MACVTCR_EIVLRXS_Msk                             /*!< Enable Inner VLAN Tag in Rx Status */

/**************  Bit definition for ETH_MACVTDR register  ***************/
#define ETH_MACVTDR_VID_Pos                 (0U)
#define ETH_MACVTDR_VID_Msk                 (0xFFFFUL << ETH_MACVTDR_VID_Pos)                    /*!< 0x0000FFFF */
#define ETH_MACVTDR_VID                     ETH_MACVTDR_VID_Msk                                 /*!< VLAN Tag Identifier field of VLAN tag */
#define ETH_MACVTDR_VID_12BIT_Msk           (0xFFFUL << ETH_MACVTDR_VID_Pos)                     /*!< 0x00000FFF */
#define ETH_MACVTDR_VID_12BIT               ETH_MACVTDR_VID_12BIT_Msk                           /*!< VLAN Tag Identifier field of VLAN tag 12bit */
#define ETH_MACVTDR_VID_16BIT_Msk           (0xFFFFUL << ETH_MACVTDR_VID_Pos)                    /*!< 0x0000FFFF */
#define ETH_MACVTDR_VID_16BIT               ETH_MACVTDR_VID_16BIT_Msk                           /*!< VLAN Tag Identifier field of VLAN tag 16bit */
#define ETH_MACVTDR_VID_0                   (0x1UL << ETH_MACVTDR_VID_Pos)                       /*!< 0x00000001 */
#define ETH_MACVTDR_VID_1                   (0x2UL << ETH_MACVTDR_VID_Pos)                       /*!< 0x00000002 */
#define ETH_MACVTDR_VID_2                   (0x4UL << ETH_MACVTDR_VID_Pos)                       /*!< 0x00000004 */
#define ETH_MACVTDR_VID_3                   (0x8UL << ETH_MACVTDR_VID_Pos)                       /*!< 0x00000008 */
#define ETH_MACVTDR_VID_4                   (0x10UL << ETH_MACVTDR_VID_Pos)                      /*!< 0x00000010 */
#define ETH_MACVTDR_VID_5                   (0x20UL << ETH_MACVTDR_VID_Pos)                      /*!< 0x00000020 */
#define ETH_MACVTDR_VID_6                   (0x40UL << ETH_MACVTDR_VID_Pos)                      /*!< 0x00000040 */
#define ETH_MACVTDR_VID_7                   (0x80UL << ETH_MACVTDR_VID_Pos)                      /*!< 0x00000080 */
#define ETH_MACVTDR_VID_8                   (0x100UL << ETH_MACVTDR_VID_Pos)                     /*!< 0x00000100 */
#define ETH_MACVTDR_VID_9                   (0x200UL << ETH_MACVTDR_VID_Pos)                     /*!< 0x00000200 */
#define ETH_MACVTDR_VID_10                  (0x400UL << ETH_MACVTDR_VID_Pos)                     /*!< 0x00000400 */
#define ETH_MACVTDR_VID_11                  (0x800UL << ETH_MACVTDR_VID_Pos)                     /*!< 0x00000800 */
#define ETH_MACVTDR_VID_12                  (0x1000UL << ETH_MACVTDR_VID_Pos)                    /*!< 0x00001000 */
#define ETH_MACVTDR_VID_13                  (0x2000UL << ETH_MACVTDR_VID_Pos)                    /*!< 0x00002000 */
#define ETH_MACVTDR_VID_14                  (0x4000UL << ETH_MACVTDR_VID_Pos)                    /*!< 0x00004000 */
#define ETH_MACVTDR_VID_15                  (0x8000UL << ETH_MACVTDR_VID_Pos)                    /*!< 0x00008000 */
#define ETH_MACVTDR_VEN_Pos                 (16U)
#define ETH_MACVTDR_VEN_Msk                 (0x1UL << ETH_MACVTDR_VEN_Pos)                       /*!< 0x00010000 */
#define ETH_MACVTDR_VEN                     ETH_MACVTDR_ETV_Msk                                 /*!< VLAN Tag Enable */
#define ETH_MACVTDR_ETV_Pos                 (17U)
#define ETH_MACVTDR_ETV_Msk                 (0x1UL << ETH_MACVTDR_ETV_Pos)                       /*!< 0x00020000 */
#define ETH_MACVTDR_ETV                     ETH_MACVTDR_ETV_Msk                                 /*!< Enable 12-Bit or 16-bit VLAN Tag Comparison */
#define ETH_MACVTDR_DOVLTC_Pos              (18U)
#define ETH_MACVTDR_DOVLTC_Msk              (0x1UL << ETH_MACVTDR_DOVLTC_Pos)                    /*!< 0x00040000 */
#define ETH_MACVTDR_DOVLTC                  ETH_MACVTDR_DOVLTC_Msk                              /*!< Disable VLAN Type Check */
#define ETH_MACVTDR_ERSVLM_Pos              (19U)
#define ETH_MACVTDR_ERSVLM_Msk              (0x1UL << ETH_MACVTDR_ERSVLM_Pos)                    /*!< 0x00080000 */
#define ETH_MACVTDR_ERSVLM                  ETH_MACVTDR_ERSVLM_Msk                              /*!< Enable Receive S-VLAN Match */
#define ETH_MACVTDR_ERIVLT_Pos              (20U)
#define ETH_MACVTDR_ERIVLT_Msk              (0x1UL << ETH_MACVTDR_ERIVLT_Pos)                    /*!< 0x00100000 */
#define ETH_MACVTDR_ERIVLT                  ETH_MACVTDR_ERIVLT_Msk                              /*!< Enable Inner VLAN Tag */
#define ETH_MACVTDR_DMACHEN_Pos             (24U)
#define ETH_MACVTDR_DMACHEN_Msk             (0x1UL << ETH_MACVTDR_DMACHEN_Pos)                   /*!< 0x01000000 */
#define ETH_MACVTDR_DMACHEN                 ETH_MACVTDR_DMACHEN_Msk                             /*!< DMA Channel Enable */
#define ETH_MACVTDR_DMACHN_Pos              (25U)
#define ETH_MACVTDR_DMACHN_Msk              (0x1UL << ETH_MACVTDR_DMACHEN_Pos)                   /*!< 0x02000000 */
#define ETH_MACVTDR_DMACHN                  ETH_MACVTDR_DMACHEN_Msk                             /*!< DMA Channel Number */

/**************  Bit definition for ETH_MACVHTR register  **************/
#define ETH_MACVHTR_VLHT_Pos                (0U)
#define ETH_MACVHTR_VLHT_Msk                (0xFFFFUL << ETH_MACVHTR_VLHT_Pos)                   /*!< 0x0000FFFF */
#define ETH_MACVHTR_VLHT                    ETH_MACVHTR_VLHT_Msk                                /*!< VLAN Hash Table */
#define ETH_MACVHTR_VLHT_0                  (0x1UL << ETH_MACVHTR_VLHT_Pos)                      /*!< 0x00000001 */
#define ETH_MACVHTR_VLHT_1                  (0x2UL << ETH_MACVHTR_VLHT_Pos)                      /*!< 0x00000002 */
#define ETH_MACVHTR_VLHT_2                  (0x4UL << ETH_MACVHTR_VLHT_Pos)                      /*!< 0x00000004 */
#define ETH_MACVHTR_VLHT_3                  (0x8UL << ETH_MACVHTR_VLHT_Pos)                      /*!< 0x00000008 */
#define ETH_MACVHTR_VLHT_4                  (0x10UL << ETH_MACVHTR_VLHT_Pos)                     /*!< 0x00000010 */
#define ETH_MACVHTR_VLHT_5                  (0x20UL << ETH_MACVHTR_VLHT_Pos)                     /*!< 0x00000020 */
#define ETH_MACVHTR_VLHT_6                  (0x40UL << ETH_MACVHTR_VLHT_Pos)                     /*!< 0x00000040 */
#define ETH_MACVHTR_VLHT_7                  (0x80UL << ETH_MACVHTR_VLHT_Pos)                     /*!< 0x00000080 */
#define ETH_MACVHTR_VLHT_8                  (0x100UL << ETH_MACVHTR_VLHT_Pos)                    /*!< 0x00000100 */
#define ETH_MACVHTR_VLHT_9                  (0x200UL << ETH_MACVHTR_VLHT_Pos)                    /*!< 0x00000200 */
#define ETH_MACVHTR_VLHT_10                 (0x400UL << ETH_MACVHTR_VLHT_Pos)                    /*!< 0x00000400 */
#define ETH_MACVHTR_VLHT_11                 (0x800UL << ETH_MACVHTR_VLHT_Pos)                    /*!< 0x00000800 */
#define ETH_MACVHTR_VLHT_12                 (0x1000UL << ETH_MACVHTR_VLHT_Pos)                   /*!< 0x00001000 */
#define ETH_MACVHTR_VLHT_13                 (0x2000UL << ETH_MACVHTR_VLHT_Pos)                   /*!< 0x00002000 */
#define ETH_MACVHTR_VLHT_14                 (0x4000UL << ETH_MACVHTR_VLHT_Pos)                   /*!< 0x00004000 */
#define ETH_MACVHTR_VLHT_15                 (0x8000UL << ETH_MACVHTR_VLHT_Pos)                   /*!< 0x00008000 */

/**************  Bit definition for ETH_MACVIR register  ***************/
#define ETH_MACVIR_VLT_Pos                  (0U)
#define ETH_MACVIR_VLT_Msk                  (0xFFFFUL << ETH_MACVIR_VLT_Pos)                     /*!< 0x0000FFFF */
#define ETH_MACVIR_VLT                      ETH_MACVIR_VLT_Msk                                  /*!< VLAN Tag for Transmit Packets */
#define ETH_MACVIR_VLT_0                    (0x1UL << ETH_MACVIR_VLT_Pos)                        /*!< 0x00000001 */
#define ETH_MACVIR_VLT_1                    (0x2UL << ETH_MACVIR_VLT_Pos)                        /*!< 0x00000002 */
#define ETH_MACVIR_VLT_2                    (0x4UL << ETH_MACVIR_VLT_Pos)                        /*!< 0x00000004 */
#define ETH_MACVIR_VLT_3                    (0x8UL << ETH_MACVIR_VLT_Pos)                        /*!< 0x00000008 */
#define ETH_MACVIR_VLT_4                    (0x10UL << ETH_MACVIR_VLT_Pos)                       /*!< 0x00000010 */
#define ETH_MACVIR_VLT_5                    (0x20UL << ETH_MACVIR_VLT_Pos)                       /*!< 0x00000020 */
#define ETH_MACVIR_VLT_6                    (0x40UL << ETH_MACVIR_VLT_Pos)                       /*!< 0x00000040 */
#define ETH_MACVIR_VLT_7                    (0x80UL << ETH_MACVIR_VLT_Pos)                       /*!< 0x00000080 */
#define ETH_MACVIR_VLT_8                    (0x100UL << ETH_MACVIR_VLT_Pos)                      /*!< 0x00000100 */
#define ETH_MACVIR_VLT_9                    (0x200UL << ETH_MACVIR_VLT_Pos)                      /*!< 0x00000200 */
#define ETH_MACVIR_VLT_10                   (0x400UL << ETH_MACVIR_VLT_Pos)                      /*!< 0x00000400 */
#define ETH_MACVIR_VLT_11                   (0x800UL << ETH_MACVIR_VLT_Pos)                      /*!< 0x00000800 */
#define ETH_MACVIR_VLT_12                   (0x1000UL << ETH_MACVIR_VLT_Pos)                     /*!< 0x00001000 */
#define ETH_MACVIR_VLT_13                   (0x2000UL << ETH_MACVIR_VLT_Pos)                     /*!< 0x00002000 */
#define ETH_MACVIR_VLT_14                   (0x4000UL << ETH_MACVIR_VLT_Pos)                     /*!< 0x00004000 */
#define ETH_MACVIR_VLT_15                   (0x8000UL << ETH_MACVIR_VLT_Pos)                     /*!< 0x00008000 */
#define ETH_MACVIR_VLC_Pos                  (16U)
#define ETH_MACVIR_VLC_Msk                  (0x3UL << ETH_MACVIR_VLC_Pos)                        /*!< 0x00030000 */
#define ETH_MACVIR_VLC                      ETH_MACVIR_VLC_Msk                                  /*!< VLAN Tag Control in Transmit Packets */
#define ETH_MACVIR_VLC_NOVLANTAG            ((uint32_t)0x00000000)                              /*!<  No VLAN tag deletion, insertion, or replacement */
#define ETH_MACVIR_VLC_VLANTAGDELETE_Pos    (16U)
#define ETH_MACVIR_VLC_VLANTAGDELETE_Msk    (0x1UL << ETH_MACVIR_VLC_VLANTAGDELETE_Pos)         /*!< 0x00010000 */
#define ETH_MACVIR_VLC_VLANTAGDELETE        ETH_MACVIR_VLC_VLANTAGDELETE_Msk                    /*!<  VLAN tag deletion */
#define ETH_MACVIR_VLC_VLANTAGINSERT_Pos    (17U)
#define ETH_MACVIR_VLC_VLANTAGINSERT_Msk    (0x1UL << ETH_MACVIR_VLC_VLANTAGINSERT_Pos)         /*!< 0x00020000 */
#define ETH_MACVIR_VLC_VLANTAGINSERT        ETH_MACVIR_VLC_VLANTAGINSERT_Msk                    /*!<  VLAN tag insertion */
#define ETH_MACVIR_VLC_VLANTAGREPLACE_Pos   (16U)
#define ETH_MACVIR_VLC_VLANTAGREPLACE_Msk   (0x3UL << ETH_MACVIR_VLC_VLANTAGREPLACE_Pos)        /*!< 0x00030000 */
#define ETH_MACVIR_VLC_VLANTAGREPLACE       ETH_MACVIR_VLC_VLANTAGREPLACE_Msk                   /*!<  VLAN tag replacement */
#define ETH_MACVIR_VLP_Pos                  (18U)
#define ETH_MACVIR_VLP_Msk                  (0x1UL << ETH_MACVIR_VLP_Pos)                        /*!< 0x00040000 */
#define ETH_MACVIR_VLP                      ETH_MACVIR_VLP_Msk                                  /*!< VLAN Priority Control */
#define ETH_MACVIR_CSVL_Pos                 (19U)
#define ETH_MACVIR_CSVL_Msk                 (0x1UL << ETH_MACVIR_CSVL_Pos)                       /*!< 0x00080000 */
#define ETH_MACVIR_CSVL                     ETH_MACVIR_CSVL_Msk                                 /*!< C-VLAN or S-VLAN */
#define ETH_MACVIR_VLTI_Pos                 (20U)
#define ETH_MACVIR_VLTI_Msk                 (0x1UL << ETH_MACVIR_VLTI_Pos)                       /*!< 0x00100000 */
#define ETH_MACVIR_VLTI                     ETH_MACVIR_VLTI_Msk                                 /*!< VLAN Tag Input */

/**************  Bit definition for ETH_MACIVIR register  **************/
#define ETH_MACIVIR_VLT_Pos                 (0U)
#define ETH_MACIVIR_VLT_Msk                 (0xFFFFUL << ETH_MACIVIR_VLT_Pos)                    /*!< 0x0000FFFF */
#define ETH_MACIVIR_VLT                     ETH_MACIVIR_VLT_Msk                                 /*!< VLAN Tag for Transmit Packets */
#define ETH_MACIVIR_VLT_0                   (0x1UL << ETH_MACIVIR_VLT_Pos)                       /*!< 0x00000001 */
#define ETH_MACIVIR_VLT_1                   (0x2UL << ETH_MACIVIR_VLT_Pos)                       /*!< 0x00000002 */
#define ETH_MACIVIR_VLT_2                   (0x4UL << ETH_MACIVIR_VLT_Pos)                       /*!< 0x00000004 */
#define ETH_MACIVIR_VLT_3                   (0x8UL << ETH_MACIVIR_VLT_Pos)                       /*!< 0x00000008 */
#define ETH_MACIVIR_VLT_4                   (0x10UL << ETH_MACIVIR_VLT_Pos)                      /*!< 0x00000010 */
#define ETH_MACIVIR_VLT_5                   (0x20UL << ETH_MACIVIR_VLT_Pos)                      /*!< 0x00000020 */
#define ETH_MACIVIR_VLT_6                   (0x40UL << ETH_MACIVIR_VLT_Pos)                      /*!< 0x00000040 */
#define ETH_MACIVIR_VLT_7                   (0x80UL << ETH_MACIVIR_VLT_Pos)                      /*!< 0x00000080 */
#define ETH_MACIVIR_VLT_8                   (0x100UL << ETH_MACIVIR_VLT_Pos)                     /*!< 0x00000100 */
#define ETH_MACIVIR_VLT_9                   (0x200UL << ETH_MACIVIR_VLT_Pos)                     /*!< 0x00000200 */
#define ETH_MACIVIR_VLT_10                  (0x400UL << ETH_MACIVIR_VLT_Pos)                     /*!< 0x00000400 */
#define ETH_MACIVIR_VLT_11                  (0x800UL << ETH_MACIVIR_VLT_Pos)                     /*!< 0x00000800 */
#define ETH_MACIVIR_VLT_12                  (0x1000UL << ETH_MACIVIR_VLT_Pos)                    /*!< 0x00001000 */
#define ETH_MACIVIR_VLT_13                  (0x2000UL << ETH_MACIVIR_VLT_Pos)                    /*!< 0x00002000 */
#define ETH_MACIVIR_VLT_14                  (0x4000UL << ETH_MACIVIR_VLT_Pos)                    /*!< 0x00004000 */
#define ETH_MACIVIR_VLT_15                  (0x8000UL << ETH_MACIVIR_VLT_Pos)                    /*!< 0x00008000 */
#define ETH_MACIVIR_VLC_Pos                 (16U)
#define ETH_MACIVIR_VLC_Msk                 (0x3UL << ETH_MACIVIR_VLC_Pos)                       /*!< 0x00030000 */
#define ETH_MACIVIR_VLC                     ETH_MACIVIR_VLC_Msk                                 /*!< VLAN Tag Control in Transmit Packets */
#define ETH_MACIVIR_VLC_0                   (0x1UL << ETH_MACIVIR_VLC_Pos)                   /*!< 0x00010000 */
#define ETH_MACIVIR_VLC_1                   (0x2UL << ETH_MACIVIR_VLC_Pos)                   /*!< 0x00020000 */
#define ETH_MACIVIR_VLP_Pos                 (18U)
#define ETH_MACIVIR_VLP_Msk                 (0x1UL << ETH_MACIVIR_VLP_Pos)                       /*!< 0x00040000 */
#define ETH_MACIVIR_VLP                     ETH_MACIVIR_VLP_Msk                                 /*!< VLAN Priority Control */
#define ETH_MACIVIR_CSVL_Pos                (19U)
#define ETH_MACIVIR_CSVL_Msk                (0x1UL << ETH_MACIVIR_CSVL_Pos)                      /*!< 0x00080000 */
#define ETH_MACIVIR_CSVL                    ETH_MACIVIR_CSVL_Msk                                /*!< C-VLAN or S-VLAN */
#define ETH_MACIVIR_VLTI_Pos                (20U)
#define ETH_MACIVIR_VLTI_Msk                (0x1UL << ETH_MACIVIR_VLTI_Pos)                      /*!< 0x00100000 */
#define ETH_MACIVIR_VLTI                    ETH_MACIVIR_VLTI_Msk                                /*!< VLAN Tag Input */

/************  Bit definition for ETH_MACQ0TXFCR register  *************/
#define ETH_MACQ0TXFCR_FCB_BPA_Pos          (0U)
#define ETH_MACQ0TXFCR_FCB_BPA_Msk          (0x1UL << ETH_MACQ0TXFCR_FCB_BPA_Pos)                /*!< 0x00000001 */
#define ETH_MACQ0TXFCR_FCB_BPA              ETH_MACQ0TXFCR_FCB_BPA_Msk                          /*!< Flow Control Busy or Backpressure Activate */
#define ETH_MACQ0TXFCR_TFE_Pos              (1U)
#define ETH_MACQ0TXFCR_TFE_Msk              (0x1UL << ETH_MACQ0TXFCR_TFE_Pos)                    /*!< 0x00000002 */
#define ETH_MACQ0TXFCR_TFE                  ETH_MACQ0TXFCR_TFE_Msk                              /*!< Transmit Flow Control Enable */
#define ETH_MACQ0TXFCR_PLT_Pos              (4U)
#define ETH_MACQ0TXFCR_PLT_Msk              (0x7UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000070 */
#define ETH_MACQ0TXFCR_PLT                  ETH_MACQ0TXFCR_PLT_Msk                              /*!< Pause Low Threshold */
#define ETH_MACQ0TXFCR_PLT_MINUS4           (0x0UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000000 */
#define ETH_MACQ0TXFCR_PLT_MINUS28          (0x1UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000010 */
#define ETH_MACQ0TXFCR_PLT_MINUS36          (0x2UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000020 */
#define ETH_MACQ0TXFCR_PLT_MINUS144         (0x3UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000030 */
#define ETH_MACQ0TXFCR_PLT_MINUS256         (0x4UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000040 */
#define ETH_MACQ0TXFCR_PLT_MINUS512         (0x5UL << ETH_MACQ0TXFCR_PLT_Pos)                    /*!< 0x00000050 */
#define ETH_MACQ0TXFCR_DZPQ_Pos             (7U)
#define ETH_MACQ0TXFCR_DZPQ_Msk             (0x1UL << ETH_MACQ0TXFCR_DZPQ_Pos)                   /*!< 0x00000080 */
#define ETH_MACQ0TXFCR_DZPQ                 ETH_MACQ0TXFCR_DZPQ_Msk                             /*!< Disable Zero-Quanta Pause */
#define ETH_MACQ0TXFCR_PT_Pos               (16U)
#define ETH_MACQ0TXFCR_PT_Msk               (0xFFFFUL << ETH_MACQ0TXFCR_PT_Pos)                  /*!< 0xFFFF0000 */
#define ETH_MACQ0TXFCR_PT                   ETH_MACQ0TXFCR_PT_Msk                               /*!< Pause Time */
#define ETH_MACQ0TXFCR_PT_0                 (0x1UL << ETH_MACQ0TXFCR_PT_Pos)                     /*!< 0x00010000 */
#define ETH_MACQ0TXFCR_PT_1                 (0x2UL << ETH_MACQ0TXFCR_PT_Pos)                     /*!< 0x00020000 */
#define ETH_MACQ0TXFCR_PT_2                 (0x4UL << ETH_MACQ0TXFCR_PT_Pos)                     /*!< 0x00040000 */
#define ETH_MACQ0TXFCR_PT_3                 (0x8UL << ETH_MACQ0TXFCR_PT_Pos)                     /*!< 0x00080000 */
#define ETH_MACQ0TXFCR_PT_4                 (0x10UL << ETH_MACQ0TXFCR_PT_Pos)                    /*!< 0x00100000 */
#define ETH_MACQ0TXFCR_PT_5                 (0x20UL << ETH_MACQ0TXFCR_PT_Pos)                    /*!< 0x00200000 */
#define ETH_MACQ0TXFCR_PT_6                 (0x40UL << ETH_MACQ0TXFCR_PT_Pos)                    /*!< 0x00400000 */
#define ETH_MACQ0TXFCR_PT_7                 (0x80UL << ETH_MACQ0TXFCR_PT_Pos)                    /*!< 0x00800000 */
#define ETH_MACQ0TXFCR_PT_8                 (0x100UL << ETH_MACQ0TXFCR_PT_Pos)                   /*!< 0x01000000 */
#define ETH_MACQ0TXFCR_PT_9                 (0x200UL << ETH_MACQ0TXFCR_PT_Pos)                   /*!< 0x02000000 */
#define ETH_MACQ0TXFCR_PT_10                (0x400UL << ETH_MACQ0TXFCR_PT_Pos)                   /*!< 0x04000000 */
#define ETH_MACQ0TXFCR_PT_11                (0x800UL << ETH_MACQ0TXFCR_PT_Pos)                   /*!< 0x08000000 */
#define ETH_MACQ0TXFCR_PT_12                (0x1000UL << ETH_MACQ0TXFCR_PT_Pos)                  /*!< 0x10000000 */
#define ETH_MACQ0TXFCR_PT_13                (0x2000UL << ETH_MACQ0TXFCR_PT_Pos)                  /*!< 0x20000000 */
#define ETH_MACQ0TXFCR_PT_14                (0x4000UL << ETH_MACQ0TXFCR_PT_Pos)                  /*!< 0x40000000 */
#define ETH_MACQ0TXFCR_PT_15                (0x8000UL << ETH_MACQ0TXFCR_PT_Pos)                  /*!< 0x80000000 */

/*************  Bit definition for ETH_MACRXFCR register  **************/
#define ETH_MACRXFCR_RFE_Pos                (0U)
#define ETH_MACRXFCR_RFE_Msk                (0x1UL << ETH_MACRXFCR_RFE_Pos)                      /*!< 0x00000001 */
#define ETH_MACRXFCR_RFE                    ETH_MACRXFCR_RFE_Msk                                /*!< Receive Flow Control Enable */
#define ETH_MACRXFCR_UP_Pos                 (1U)
#define ETH_MACRXFCR_UP_Msk                 (0x1UL << ETH_MACRXFCR_UP_Pos)                       /*!< 0x00000002 */
#define ETH_MACRXFCR_UP                     ETH_MACRXFCR_UP_Msk                                 /*!< Unicast Pause Packet Detect */

/*************  Bit definition for ETH_MACTXQPMR register  *************/
#define ETH_MACTXQPMR_PSTQ0_Pos             (0U)
#define ETH_MACTXQPMR_PSTQ0_Msk             (0xFFUL << ETH_MACTXQPMR_PSTQ0_Pos)                  /*!< 0x000000FF */
#define ETH_MACTXQPMR_PSTQ0                 ETH_MACTXQPMR_PSTQ0_Msk                             /*!< Priorities Selected in Transmit Queue 0 */
#define ETH_MACTXQPMR_PSTQ0_0               (0x1UL << ETH_MACTXQPMR_PSTQ0_Pos)                   /*!< 0x00000001 */
#define ETH_MACTXQPMR_PSTQ0_1               (0x2UL << ETH_MACTXQPMR_PSTQ0_Pos)                   /*!< 0x00000002 */
#define ETH_MACTXQPMR_PSTQ0_2               (0x4UL << ETH_MACTXQPMR_PSTQ0_Pos)                   /*!< 0x00000004 */
#define ETH_MACTXQPMR_PSTQ0_3               (0x8UL << ETH_MACTXQPMR_PSTQ0_Pos)                   /*!< 0x00000008 */
#define ETH_MACTXQPMR_PSTQ0_4               (0x10UL << ETH_MACTXQPMR_PSTQ0_Pos)                  /*!< 0x00000010 */
#define ETH_MACTXQPMR_PSTQ0_5               (0x20UL << ETH_MACTXQPMR_PSTQ0_Pos)                  /*!< 0x00000020 */
#define ETH_MACTXQPMR_PSTQ0_6               (0x40UL << ETH_MACTXQPMR_PSTQ0_Pos)                  /*!< 0x00000040 */
#define ETH_MACTXQPMR_PSTQ0_7               (0x80UL << ETH_MACTXQPMR_PSTQ0_Pos)                  /*!< 0x00000080 */
#define ETH_MACTXQPMR_PSTQ1_Pos             (8U)
#define ETH_MACTXQPMR_PSTQ1_Msk             (0xFFUL << ETH_MACTXQPMR_PSTQ1_Pos)                  /*!< 0x0000FF00 */
#define ETH_MACTXQPMR_PSTQ1                 ETH_MACTXQPMR_PSTQ1_Msk                             /*!< Priorities Selected in Transmit Queue 1 */
#define ETH_MACTXQPMR_PSTQ1_0               (0x1UL << ETH_MACTXQPMR_PSTQ1_Pos)                   /*!< 0x00000100 */
#define ETH_MACTXQPMR_PSTQ1_1               (0x2UL << ETH_MACTXQPMR_PSTQ1_Pos)                   /*!< 0x00000200 */
#define ETH_MACTXQPMR_PSTQ1_2               (0x4UL << ETH_MACTXQPMR_PSTQ1_Pos)                   /*!< 0x00000400 */
#define ETH_MACTXQPMR_PSTQ1_3               (0x8UL << ETH_MACTXQPMR_PSTQ1_Pos)                   /*!< 0x00000800 */
#define ETH_MACTXQPMR_PSTQ1_4               (0x10UL << ETH_MACTXQPMR_PSTQ1_Pos)                  /*!< 0x00001000 */
#define ETH_MACTXQPMR_PSTQ1_5               (0x20UL << ETH_MACTXQPMR_PSTQ1_Pos)                  /*!< 0x00002000 */
#define ETH_MACTXQPMR_PSTQ1_6               (0x40UL << ETH_MACTXQPMR_PSTQ1_Pos)                  /*!< 0x00004000 */
#define ETH_MACTXQPMR_PSTQ1_7               (0x80UL << ETH_MACTXQPMR_PSTQ1_Pos)                  /*!< 0x00008000 */

/*************  Bit definition for ETH_MACRXQC0R register  *************/
#define ETH_MACRXQC0R_RXQ0EN_Pos            (0U)
#define ETH_MACRXQC0R_RXQ0EN_Msk            (0x3UL << ETH_MACRXQC0R_RXQ0EN_Pos)                  /*!< 0x00000003 */
#define ETH_MACRXQC0R_RXQ0EN                ETH_MACRXQC0R_RXQ0EN_Msk                            /*!< Receive Queue 0 Enable */
#define ETH_MACRXQC0R_RXQ0EN_0              (0x1UL << ETH_MACRXQC0R_RXQ0EN_Pos)                  /*!< 0x00000001 */
#define ETH_MACRXQC0R_RXQ0EN_1              (0x2UL << ETH_MACRXQC0R_RXQ0EN_Pos)                  /*!< 0x00000002 */
#define ETH_MACRXQC0R_RXQ1EN_Pos            (2U)
#define ETH_MACRXQC0R_RXQ1EN_Msk            (0x3UL << ETH_MACRXQC0R_RXQ1EN_Pos)                  /*!< 0x0000000C */
#define ETH_MACRXQC0R_RXQ1EN                ETH_MACRXQC0R_RXQ1EN_Msk                            /*!< Receive Queue 1 Enable */
#define ETH_MACRXQC0R_RXQ1EN_0              (0x1UL << ETH_MACRXQC0R_RXQ1EN_Pos)                  /*!< 0x00000004 */
#define ETH_MACRXQC0R_RXQ1EN_1              (0x2UL << ETH_MACRXQC0R_RXQ1EN_Pos)                  /*!< 0x00000008 */

/*************  Bit definition for ETH_MACRXQC1R register  *************/
#define ETH_MACRXQC1R_AVCPQ_Pos             (0U)
#define ETH_MACRXQC1R_AVCPQ_Msk             (0x7UL << ETH_MACRXQC1R_AVCPQ_Pos)                   /*!< 0x00000007 */
#define ETH_MACRXQC1R_AVCPQ                 ETH_MACRXQC1R_AVCPQ_Msk                             /*!< AV Untagged Control Packets Queue */
#define ETH_MACRXQC1R_AVCPQ_0               (0x1UL << ETH_MACRXQC1R_AVCPQ_Pos)                   /*!< 0x00000001 */
#define ETH_MACRXQC1R_AVCPQ_1               (0x2UL << ETH_MACRXQC1R_AVCPQ_Pos)                   /*!< 0x00000002 */
#define ETH_MACRXQC1R_AVCPQ_2               (0x4UL << ETH_MACRXQC1R_AVCPQ_Pos)                   /*!< 0x00000004 */
#define ETH_MACRXQC1R_AVPTPQ_Pos            (4U)
#define ETH_MACRXQC1R_AVPTPQ_Msk            (0x7UL << ETH_MACRXQC1R_AVPTPQ_Pos)                  /*!< 0x00000070 */
#define ETH_MACRXQC1R_AVPTPQ                ETH_MACRXQC1R_AVPTPQ_Msk                            /*!< AV PTP Packets Queue */
#define ETH_MACRXQC1R_AVPTPQ_0              (0x1UL << ETH_MACRXQC1R_AVPTPQ_Pos)                  /*!< 0x00000010 */
#define ETH_MACRXQC1R_AVPTPQ_1              (0x2UL << ETH_MACRXQC1R_AVPTPQ_Pos)                  /*!< 0x00000020 */
#define ETH_MACRXQC1R_AVPTPQ_2              (0x4UL << ETH_MACRXQC1R_AVPTPQ_Pos)                  /*!< 0x00000040 */
#define ETH_MACRXQC1R_UPQ_Pos               (12U)
#define ETH_MACRXQC1R_UPQ_Msk               (0x7UL << ETH_MACRXQC1R_UPQ_Pos)                     /*!< 0x00007000 */
#define ETH_MACRXQC1R_UPQ                   ETH_MACRXQC1R_UPQ_Msk                               /*!< Untagged Packet Queue */
#define ETH_MACRXQC1R_UPQ_0                 (0x1UL << ETH_MACRXQC1R_UPQ_Pos)                     /*!< 0x00001000 */
#define ETH_MACRXQC1R_UPQ_1                 (0x2UL << ETH_MACRXQC1R_UPQ_Pos)                     /*!< 0x00002000 */
#define ETH_MACRXQC1R_UPQ_2                 (0x4UL << ETH_MACRXQC1R_UPQ_Pos)                     /*!< 0x00004000 */
#define ETH_MACRXQC1R_MCBCQ_Pos             (16U)
#define ETH_MACRXQC1R_MCBCQ_Msk             (0x7UL << ETH_MACRXQC1R_MCBCQ_Pos)                   /*!< 0x00070000 */
#define ETH_MACRXQC1R_MCBCQ                 ETH_MACRXQC1R_MCBCQ_Msk                             /*!< Multicast and Broadcast Queue */
#define ETH_MACRXQC1R_MCBCQ_0               (0x1UL << ETH_MACRXQC1R_MCBCQ_Pos)                   /*!< 0x00010000 */
#define ETH_MACRXQC1R_MCBCQ_1               (0x2UL << ETH_MACRXQC1R_MCBCQ_Pos)                   /*!< 0x00020000 */
#define ETH_MACRXQC1R_MCBCQ_2               (0x4UL << ETH_MACRXQC1R_MCBCQ_Pos)                   /*!< 0x00040000 */
#define ETH_MACRXQC1R_MCBCQEN_Pos           (20U)
#define ETH_MACRXQC1R_MCBCQEN_Msk           (0x1UL << ETH_MACRXQC1R_MCBCQEN_Pos)                 /*!< 0x00100000 */
#define ETH_MACRXQC1R_MCBCQEN               ETH_MACRXQC1R_MCBCQEN_Msk                           /*!< Multicast and Broadcast Queue Enable */
#define ETH_MACRXQC1R_TACPQE_Pos            (21U)
#define ETH_MACRXQC1R_TACPQE_Msk            (0x1UL << ETH_MACRXQC1R_TACPQE_Pos)                  /*!< 0x00200000 */
#define ETH_MACRXQC1R_TACPQE                ETH_MACRXQC1R_TACPQE_Msk                            /*!< Tagged AV Control Packets Queuing Enable. */

/*************  Bit definition for ETH_MACRXQC2R register  *************/
#define ETH_MACRXQC2R_PSRQ0_Pos             (0U)
#define ETH_MACRXQC2R_PSRQ0_Msk             (0xFFUL << ETH_MACRXQC2R_PSRQ0_Pos)                  /*!< 0x000000FF */
#define ETH_MACRXQC2R_PSRQ0                 ETH_MACRXQC2R_PSRQ0_Msk                             /*!< Priorities Selected in the Receive Queue 0 */
#define ETH_MACRXQC2R_PSRQ0_0               (0x1UL << ETH_MACRXQC2R_PSRQ0_Pos)                   /*!< 0x00000001 */
#define ETH_MACRXQC2R_PSRQ0_1               (0x2UL << ETH_MACRXQC2R_PSRQ0_Pos)                   /*!< 0x00000002 */
#define ETH_MACRXQC2R_PSRQ0_2               (0x4UL << ETH_MACRXQC2R_PSRQ0_Pos)                   /*!< 0x00000004 */
#define ETH_MACRXQC2R_PSRQ0_3               (0x8UL << ETH_MACRXQC2R_PSRQ0_Pos)                   /*!< 0x00000008 */
#define ETH_MACRXQC2R_PSRQ0_4               (0x10UL << ETH_MACRXQC2R_PSRQ0_Pos)                  /*!< 0x00000010 */
#define ETH_MACRXQC2R_PSRQ0_5               (0x20UL << ETH_MACRXQC2R_PSRQ0_Pos)                  /*!< 0x00000020 */
#define ETH_MACRXQC2R_PSRQ0_6               (0x40UL << ETH_MACRXQC2R_PSRQ0_Pos)                  /*!< 0x00000040 */
#define ETH_MACRXQC2R_PSRQ0_7               (0x80UL << ETH_MACRXQC2R_PSRQ0_Pos)                  /*!< 0x00000080 */
#define ETH_MACRXQC2R_PSRQ1_Pos             (8U)
#define ETH_MACRXQC2R_PSRQ1_Msk             (0xFFUL << ETH_MACRXQC2R_PSRQ1_Pos)                  /*!< 0x0000FF00 */
#define ETH_MACRXQC2R_PSRQ1                 ETH_MACRXQC2R_PSRQ1_Msk                             /*!< Priorities Selected in the Receive Queue 1 */
#define ETH_MACRXQC2R_PSRQ1_0               (0x1UL << ETH_MACRXQC2R_PSRQ1_Pos)                   /*!< 0x00000100 */
#define ETH_MACRXQC2R_PSRQ1_1               (0x2UL << ETH_MACRXQC2R_PSRQ1_Pos)                   /*!< 0x00000200 */
#define ETH_MACRXQC2R_PSRQ1_2               (0x4UL << ETH_MACRXQC2R_PSRQ1_Pos)                   /*!< 0x00000400 */
#define ETH_MACRXQC2R_PSRQ1_3               (0x8UL << ETH_MACRXQC2R_PSRQ1_Pos)                   /*!< 0x00000800 */
#define ETH_MACRXQC2R_PSRQ1_4               (0x10UL << ETH_MACRXQC2R_PSRQ1_Pos)                  /*!< 0x00001000 */
#define ETH_MACRXQC2R_PSRQ1_5               (0x20UL << ETH_MACRXQC2R_PSRQ1_Pos)                  /*!< 0x00002000 */
#define ETH_MACRXQC2R_PSRQ1_6               (0x40UL << ETH_MACRXQC2R_PSRQ1_Pos)                  /*!< 0x00004000 */
#define ETH_MACRXQC2R_PSRQ1_7               (0x80UL << ETH_MACRXQC2R_PSRQ1_Pos)                  /*!< 0x00008000 */

/**************  Bit definition for ETH_MACISR register  ***************/
#define ETH_MACISR_RGSMIIIS_Pos             (0U)
#define ETH_MACISR_RGSMIIIS_Msk             (0x1UL << ETH_MACISR_RGSMIIIS_Pos)                   /*!< 0x00000001 */
#define ETH_MACISR_RGSMIIIS                 ETH_MACISR_RGSMIIIS_Msk                             /*!< RGMII or SMII Interrupt Status */
#define ETH_MACISR_PHYIS_Pos                (3U)
#define ETH_MACISR_PHYIS_Msk                (0x1UL << ETH_MACISR_PHYIS_Pos)                      /*!< 0x00000008 */
#define ETH_MACISR_PHYIS                    ETH_MACISR_PHYIS_Msk                                /*!< PHY Interrupt */
#define ETH_MACISR_PMTIS_Pos                (4U)
#define ETH_MACISR_PMTIS_Msk                (0x1UL << ETH_MACISR_PMTIS_Pos)                      /*!< 0x00000010 */
#define ETH_MACISR_PMTIS                    ETH_MACISR_PMTIS_Msk                                /*!< PMT Interrupt Status */
#define ETH_MACISR_LPIIS_Pos                (5U)
#define ETH_MACISR_LPIIS_Msk                (0x1UL << ETH_MACISR_LPIIS_Pos)                      /*!< 0x00000020 */
#define ETH_MACISR_LPIIS                    ETH_MACISR_LPIIS_Msk                                /*!< LPI Interrupt Status */
#define ETH_MACISR_MMCIS_Pos                (8U)
#define ETH_MACISR_MMCIS_Msk                (0x1UL << ETH_MACISR_MMCIS_Pos)                      /*!< 0x00000100 */
#define ETH_MACISR_MMCIS                    ETH_MACISR_MMCIS_Msk                                /*!< MMC Interrupt Status */
#define ETH_MACISR_MMCRXIS_Pos              (9U)
#define ETH_MACISR_MMCRXIS_Msk              (0x1UL << ETH_MACISR_MMCRXIS_Pos)                    /*!< 0x00000200 */
#define ETH_MACISR_MMCRXIS                  ETH_MACISR_MMCRXIS_Msk                              /*!< MMC Receive Interrupt Status */
#define ETH_MACISR_MMCTXIS_Pos              (10U)
#define ETH_MACISR_MMCTXIS_Msk              (0x1UL << ETH_MACISR_MMCTXIS_Pos)                    /*!< 0x00000400 */
#define ETH_MACISR_MMCTXIS                  ETH_MACISR_MMCTXIS_Msk                              /*!< MMC Transmit Interrupt Status */
#define ETH_MACISR_TSIS_Pos                 (12U)
#define ETH_MACISR_TSIS_Msk                 (0x1UL << ETH_MACISR_TSIS_Pos)                       /*!< 0x00001000 */
#define ETH_MACISR_TSIS                     ETH_MACISR_TSIS_Msk                                 /*!< Timestamp Interrupt Status */
#define ETH_MACISR_TXSTSIS_Pos              (13U)
#define ETH_MACISR_TXSTSIS_Msk              (0x1UL << ETH_MACISR_TXSTSIS_Pos)                    /*!< 0x00002000 */
#define ETH_MACISR_TXSTSIS                  ETH_MACISR_TXSTSIS_Msk                              /*!< Transmit Status Interrupt */
#define ETH_MACISR_RXSTSIS_Pos              (14U)
#define ETH_MACISR_RXSTSIS_Msk              (0x1UL << ETH_MACISR_RXSTSIS_Pos)                    /*!< 0x00004000 */
#define ETH_MACISR_RXSTSIS                  ETH_MACISR_RXSTSIS_Msk                              /*!< Receive Status Interrupt */

/**************  Bit definition for ETH_MACIER register  ***************/
#define ETH_MACIER_RGSMIIIE_Pos             (0U)
#define ETH_MACIER_RGSMIIIE_Msk             (0x1UL << ETH_MACIER_RGSMIIIE_Pos)                   /*!< 0x00000001 */
#define ETH_MACIER_RGSMIIIE                 ETH_MACIER_RGSMIIIE_Msk                             /*!< RGMII or SMII Interrupt Enable */
#define ETH_MACIER_PHYIE_Pos                (3U)
#define ETH_MACIER_PHYIE_Msk                (0x1UL << ETH_MACIER_PHYIE_Pos)                      /*!< 0x00000008 */
#define ETH_MACIER_PHYIE                    ETH_MACIER_PHYIE_Msk                                /*!< PHY Interrupt Enable */
#define ETH_MACIER_PMTIE_Pos                (4U)
#define ETH_MACIER_PMTIE_Msk                (0x1UL << ETH_MACIER_PMTIE_Pos)                      /*!< 0x00000010 */
#define ETH_MACIER_PMTIE                    ETH_MACIER_PMTIE_Msk                                /*!< PMT Interrupt Enable */
#define ETH_MACIER_LPIIE_Pos                (5U)
#define ETH_MACIER_LPIIE_Msk                (0x1UL << ETH_MACIER_LPIIE_Pos)                      /*!< 0x00000020 */
#define ETH_MACIER_LPIIE                    ETH_MACIER_LPIIE_Msk                                /*!< LPI Interrupt Enable */
#define ETH_MACIER_TSIE_Pos                 (12U)
#define ETH_MACIER_TSIE_Msk                 (0x1UL << ETH_MACIER_TSIE_Pos)                       /*!< 0x00001000 */
#define ETH_MACIER_TSIE                     ETH_MACIER_TSIE_Msk                                 /*!< Timestamp Interrupt Enable */
#define ETH_MACIER_TXSTSIE_Pos              (13U)
#define ETH_MACIER_TXSTSIE_Msk              (0x1UL << ETH_MACIER_TXSTSIE_Pos)                    /*!< 0x00002000 */
#define ETH_MACIER_TXSTSIE                  ETH_MACIER_TXSTSIE_Msk                              /*!< Transmit Status Interrupt Enable */
#define ETH_MACIER_RXSTSIE_Pos              (14U)
#define ETH_MACIER_RXSTSIE_Msk              (0x1UL << ETH_MACIER_RXSTSIE_Pos)                    /*!< 0x00004000 */
#define ETH_MACIER_RXSTSIE                  ETH_MACIER_RXSTSIE_Msk                              /*!< Receive Status Interrupt Enable */

/*************  Bit definition for ETH_MACRXTXSR register  *************/
#define ETH_MACRXTXSR_TJT_Pos               (0U)
#define ETH_MACRXTXSR_TJT_Msk               (0x1UL << ETH_MACRXTXSR_TJT_Pos)                     /*!< 0x00000001 */
#define ETH_MACRXTXSR_TJT                   ETH_MACRXTXSR_TJT_Msk                               /*!< Transmit Jabber Timeout */
#define ETH_MACRXTXSR_NCARR_Pos             (1U)
#define ETH_MACRXTXSR_NCARR_Msk             (0x1UL << ETH_MACRXTXSR_NCARR_Pos)                   /*!< 0x00000002 */
#define ETH_MACRXTXSR_NCARR                 ETH_MACRXTXSR_NCARR_Msk                             /*!< No Carrier */
#define ETH_MACRXTXSR_LCARR_Pos             (2U)
#define ETH_MACRXTXSR_LCARR_Msk             (0x1UL << ETH_MACRXTXSR_LCARR_Pos)                   /*!< 0x00000004 */
#define ETH_MACRXTXSR_LCARR                 ETH_MACRXTXSR_LCARR_Msk                             /*!< Loss of Carrier */
#define ETH_MACRXTXSR_EXDEF_Pos             (3U)
#define ETH_MACRXTXSR_EXDEF_Msk             (0x1UL << ETH_MACRXTXSR_EXDEF_Pos)                   /*!< 0x00000008 */
#define ETH_MACRXTXSR_EXDEF                 ETH_MACRXTXSR_EXDEF_Msk                             /*!< Excessive Deferral */
#define ETH_MACRXTXSR_LCOL_Pos              (4U)
#define ETH_MACRXTXSR_LCOL_Msk              (0x1UL << ETH_MACRXTXSR_LCOL_Pos)                    /*!< 0x00000010 */
#define ETH_MACRXTXSR_LCOL                  ETH_MACRXTXSR_LCOL_Msk                              /*!< Late Collision */
#define ETH_MACRXTXSR_EXCOL_Pos             (5U)
#define ETH_MACRXTXSR_EXCOL_Msk             (0x1UL << ETH_MACRXTXSR_EXCOL_Pos)                   /*!< 0x00000020 */
#define ETH_MACRXTXSR_EXCOL                 ETH_MACRXTXSR_EXCOL_Msk                             /*!< Excessive Collisions */
#define ETH_MACRXTXSR_RWT_Pos               (8U)
#define ETH_MACRXTXSR_RWT_Msk               (0x1UL << ETH_MACRXTXSR_RWT_Pos)                     /*!< 0x00000100 */
#define ETH_MACRXTXSR_RWT                   ETH_MACRXTXSR_RWT_Msk                               /*!< Receive Watchdog Timeout */

/**************  Bit definition for ETH_MACPCSR register  **************/
#define ETH_MACPCSR_PWRDWN_Pos              (0U)
#define ETH_MACPCSR_PWRDWN_Msk              (0x1UL << ETH_MACPCSR_PWRDWN_Pos)                    /*!< 0x00000001 */
#define ETH_MACPCSR_PWRDWN                  ETH_MACPCSR_PWRDWN_Msk                              /*!< Power Down */
#define ETH_MACPCSR_MGKPKTEN_Pos            (1U)
#define ETH_MACPCSR_MGKPKTEN_Msk            (0x1UL << ETH_MACPCSR_MGKPKTEN_Pos)                  /*!< 0x00000002 */
#define ETH_MACPCSR_MGKPKTEN                ETH_MACPCSR_MGKPKTEN_Msk                            /*!< Magic Packet Enable */
#define ETH_MACPCSR_RWKPKTEN_Pos            (2U)
#define ETH_MACPCSR_RWKPKTEN_Msk            (0x1UL << ETH_MACPCSR_RWKPKTEN_Pos)                  /*!< 0x00000004 */
#define ETH_MACPCSR_RWKPKTEN                ETH_MACPCSR_RWKPKTEN_Msk                            /*!< Remote wakeup Packet Enable */
#define ETH_MACPCSR_MGKPRCVD_Pos            (5U)
#define ETH_MACPCSR_MGKPRCVD_Msk            (0x1UL << ETH_MACPCSR_MGKPRCVD_Pos)                  /*!< 0x00000020 */
#define ETH_MACPCSR_MGKPRCVD                ETH_MACPCSR_MGKPRCVD_Msk                            /*!< Magic Packet Received */
#define ETH_MACPCSR_RWKPRCVD_Pos            (6U)
#define ETH_MACPCSR_RWKPRCVD_Msk            (0x1UL << ETH_MACPCSR_RWKPRCVD_Pos)                  /*!< 0x00000040 */
#define ETH_MACPCSR_RWKPRCVD                ETH_MACPCSR_RWKPRCVD_Msk                            /*!< Remote wakeup Packet Received */
#define ETH_MACPCSR_GLBLUCAST_Pos           (9U)
#define ETH_MACPCSR_GLBLUCAST_Msk           (0x1UL << ETH_MACPCSR_GLBLUCAST_Pos)                 /*!< 0x00000200 */
#define ETH_MACPCSR_GLBLUCAST               ETH_MACPCSR_GLBLUCAST_Msk                           /*!< Global Unicast */
#define ETH_MACPCSR_RWKPFE_Pos              (10U)
#define ETH_MACPCSR_RWKPFE_Msk              (0x1UL << ETH_MACPCSR_RWKPFE_Pos)                    /*!< 0x00000400 */
#define ETH_MACPCSR_RWKPFE                  ETH_MACPCSR_RWKPFE_Msk                              /*!< Remote wakeup Packet Forwarding Enable */
#define ETH_MACPCSR_RWKPTR_Pos              (24U)
#define ETH_MACPCSR_RWKPTR_Msk              (0x1FUL << ETH_MACPCSR_RWKPTR_Pos)                   /*!< 0x1F000000 */
#define ETH_MACPCSR_RWKPTR                  ETH_MACPCSR_RWKPTR_Msk                              /*!< Remote wakeup FIFO Pointer */
#define ETH_MACPCSR_RWKPTR_0                (0x1UL << ETH_MACPCSR_RWKPTR_Pos)                    /*!< 0x01000000 */
#define ETH_MACPCSR_RWKPTR_1                (0x2UL << ETH_MACPCSR_RWKPTR_Pos)                    /*!< 0x02000000 */
#define ETH_MACPCSR_RWKPTR_2                (0x4UL << ETH_MACPCSR_RWKPTR_Pos)                    /*!< 0x04000000 */
#define ETH_MACPCSR_RWKPTR_3                (0x8UL << ETH_MACPCSR_RWKPTR_Pos)                    /*!< 0x08000000 */
#define ETH_MACPCSR_RWKPTR_4                (0x10UL << ETH_MACPCSR_RWKPTR_Pos)                   /*!< 0x10000000 */
#define ETH_MACPCSR_RWKFILTRST_Pos          (31U)
#define ETH_MACPCSR_RWKFILTRST_Msk          (0x1UL << ETH_MACPCSR_RWKFILTRST_Pos)                /*!< 0x80000000 */
#define ETH_MACPCSR_RWKFILTRST              ETH_MACPCSR_RWKFILTRST_Msk                          /*!< Remote wakeup Packet Filter Register Pointer Reset */

/*************  Bit definition for ETH_MACRWKPFR register  *************/
#define ETH_MACRWKPFR_MACRWKPFR_Pos         (0U)
#define ETH_MACRWKPFR_MACRWKPFR_Msk         (0xFFFFFFFFUL << ETH_MACRWKPFR_MACRWKPFR_Pos)        /*!< 0xFFFFFFFF */
#define ETH_MACRWKPFR_MACRWKPFR             ETH_MACRWKPFR_MACRWKPFR_Msk                         /*!< Remote wakeup packet filter */
#define ETH_MACRWKPFR_MACRWKPFR_0           (0x1UL << ETH_MACRWKPFR_MACRWKPFR_Pos)               /*!< 0x00000001 */
#define ETH_MACRWKPFR_MACRWKPFR_1           (0x2UL << ETH_MACRWKPFR_MACRWKPFR_Pos)               /*!< 0x00000002 */
#define ETH_MACRWKPFR_MACRWKPFR_2           (0x4UL << ETH_MACRWKPFR_MACRWKPFR_Pos)               /*!< 0x00000004 */
#define ETH_MACRWKPFR_MACRWKPFR_3           (0x8UL << ETH_MACRWKPFR_MACRWKPFR_Pos)               /*!< 0x00000008 */
#define ETH_MACRWKPFR_MACRWKPFR_4           (0x10UL << ETH_MACRWKPFR_MACRWKPFR_Pos)              /*!< 0x00000010 */
#define ETH_MACRWKPFR_MACRWKPFR_5           (0x20UL << ETH_MACRWKPFR_MACRWKPFR_Pos)              /*!< 0x00000020 */
#define ETH_MACRWKPFR_MACRWKPFR_6           (0x40UL << ETH_MACRWKPFR_MACRWKPFR_Pos)              /*!< 0x00000040 */
#define ETH_MACRWKPFR_MACRWKPFR_7           (0x80UL << ETH_MACRWKPFR_MACRWKPFR_Pos)              /*!< 0x00000080 */
#define ETH_MACRWKPFR_MACRWKPFR_8           (0x100UL << ETH_MACRWKPFR_MACRWKPFR_Pos)             /*!< 0x00000100 */
#define ETH_MACRWKPFR_MACRWKPFR_9           (0x200UL << ETH_MACRWKPFR_MACRWKPFR_Pos)             /*!< 0x00000200 */
#define ETH_MACRWKPFR_MACRWKPFR_10          (0x400UL << ETH_MACRWKPFR_MACRWKPFR_Pos)             /*!< 0x00000400 */
#define ETH_MACRWKPFR_MACRWKPFR_11          (0x800UL << ETH_MACRWKPFR_MACRWKPFR_Pos)             /*!< 0x00000800 */
#define ETH_MACRWKPFR_MACRWKPFR_12          (0x1000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)            /*!< 0x00001000 */
#define ETH_MACRWKPFR_MACRWKPFR_13          (0x2000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)            /*!< 0x00002000 */
#define ETH_MACRWKPFR_MACRWKPFR_14          (0x4000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)            /*!< 0x00004000 */
#define ETH_MACRWKPFR_MACRWKPFR_15          (0x8000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)            /*!< 0x00008000 */
#define ETH_MACRWKPFR_MACRWKPFR_16          (0x10000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)           /*!< 0x00010000 */
#define ETH_MACRWKPFR_MACRWKPFR_17          (0x20000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)           /*!< 0x00020000 */
#define ETH_MACRWKPFR_MACRWKPFR_18          (0x40000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)           /*!< 0x00040000 */
#define ETH_MACRWKPFR_MACRWKPFR_19          (0x80000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)           /*!< 0x00080000 */
#define ETH_MACRWKPFR_MACRWKPFR_20          (0x100000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)          /*!< 0x00100000 */
#define ETH_MACRWKPFR_MACRWKPFR_21          (0x200000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)          /*!< 0x00200000 */
#define ETH_MACRWKPFR_MACRWKPFR_22          (0x400000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)          /*!< 0x00400000 */
#define ETH_MACRWKPFR_MACRWKPFR_23          (0x800000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)          /*!< 0x00800000 */
#define ETH_MACRWKPFR_MACRWKPFR_24          (0x1000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)         /*!< 0x01000000 */
#define ETH_MACRWKPFR_MACRWKPFR_25          (0x2000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)         /*!< 0x02000000 */
#define ETH_MACRWKPFR_MACRWKPFR_26          (0x4000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)         /*!< 0x04000000 */
#define ETH_MACRWKPFR_MACRWKPFR_27          (0x8000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)         /*!< 0x08000000 */
#define ETH_MACRWKPFR_MACRWKPFR_28          (0x10000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)        /*!< 0x10000000 */
#define ETH_MACRWKPFR_MACRWKPFR_29          (0x20000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)        /*!< 0x20000000 */
#define ETH_MACRWKPFR_MACRWKPFR_30          (0x40000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)        /*!< 0x40000000 */
#define ETH_MACRWKPFR_MACRWKPFR_31          (0x80000000UL << ETH_MACRWKPFR_MACRWKPFR_Pos)        /*!< 0x80000000 */

/**************  Bit definition for ETH_MACLCSR register  **************/
#define ETH_MACLCSR_TLPIEN_Pos              (0U)
#define ETH_MACLCSR_TLPIEN_Msk              (0x1UL << ETH_MACLCSR_TLPIEN_Pos)                    /*!< 0x00000001 */
#define ETH_MACLCSR_TLPIEN                  ETH_MACLCSR_TLPIEN_Msk                              /*!< Transmit LPI Entry */
#define ETH_MACLCSR_TLPIEX_Pos              (1U)
#define ETH_MACLCSR_TLPIEX_Msk              (0x1UL << ETH_MACLCSR_TLPIEX_Pos)                    /*!< 0x00000002 */
#define ETH_MACLCSR_TLPIEX                  ETH_MACLCSR_TLPIEX_Msk                              /*!< Transmit LPI Exit */
#define ETH_MACLCSR_RLPIEN_Pos              (2U)
#define ETH_MACLCSR_RLPIEN_Msk              (0x1UL << ETH_MACLCSR_RLPIEN_Pos)                    /*!< 0x00000004 */
#define ETH_MACLCSR_RLPIEN                  ETH_MACLCSR_RLPIEN_Msk                              /*!< Receive LPI Entry */
#define ETH_MACLCSR_RLPIEX_Pos              (3U)
#define ETH_MACLCSR_RLPIEX_Msk              (0x1UL << ETH_MACLCSR_RLPIEX_Pos)                    /*!< 0x00000008 */
#define ETH_MACLCSR_RLPIEX                  ETH_MACLCSR_RLPIEX_Msk                              /*!< Receive LPI Exit */
#define ETH_MACLCSR_TLPIST_Pos              (8U)
#define ETH_MACLCSR_TLPIST_Msk              (0x1UL << ETH_MACLCSR_TLPIST_Pos)                    /*!< 0x00000100 */
#define ETH_MACLCSR_TLPIST                  ETH_MACLCSR_TLPIST_Msk                              /*!< Transmit LPI State */
#define ETH_MACLCSR_RLPIST_Pos              (9U)
#define ETH_MACLCSR_RLPIST_Msk              (0x1UL << ETH_MACLCSR_RLPIST_Pos)                    /*!< 0x00000200 */
#define ETH_MACLCSR_RLPIST                  ETH_MACLCSR_RLPIST_Msk                              /*!< Receive LPI State */
#define ETH_MACLCSR_LPIEN_Pos               (16U)
#define ETH_MACLCSR_LPIEN_Msk               (0x1UL << ETH_MACLCSR_LPIEN_Pos)                     /*!< 0x00010000 */
#define ETH_MACLCSR_LPIEN                   ETH_MACLCSR_LPIEN_Msk                               /*!< LPI Enable */
#define ETH_MACLCSR_PLS_Pos                 (17U)
#define ETH_MACLCSR_PLS_Msk                 (0x1UL << ETH_MACLCSR_PLS_Pos)                       /*!< 0x00020000 */
#define ETH_MACLCSR_PLS                     ETH_MACLCSR_PLS_Msk                                 /*!< PHY Link Status */
#define ETH_MACLCSR_PLSEN_Pos               (18U)
#define ETH_MACLCSR_PLSEN_Msk               (0x1UL << ETH_MACLCSR_PLSEN_Pos)                     /*!< 0x00040000 */
#define ETH_MACLCSR_PLSEN                   ETH_MACLCSR_PLSEN_Msk                               /*!< PHY Link Status Enable */
#define ETH_MACLCSR_LPITXA_Pos              (19U)
#define ETH_MACLCSR_LPITXA_Msk              (0x1UL << ETH_MACLCSR_LPITXA_Pos)                    /*!< 0x00080000 */
#define ETH_MACLCSR_LPITXA                  ETH_MACLCSR_LPITXA_Msk                              /*!< LPI Tx Automate */
#define ETH_MACLCSR_LPITE_Pos               (20U)
#define ETH_MACLCSR_LPITE_Msk               (0x1UL << ETH_MACLCSR_LPITE_Pos)                     /*!< 0x00100000 */
#define ETH_MACLCSR_LPITE                   ETH_MACLCSR_LPITE_Msk                               /*!< LPI Timer Enable */
#define ETH_MACLCSR_LPITCSE_Pos             (21U)
#define ETH_MACLCSR_LPITCSE_Msk             (0x1UL << ETH_MACLCSR_LPITCSE_Pos)                   /*!< 0x00200000 */
#define ETH_MACLCSR_LPITCSE                 ETH_MACLCSR_LPITCSE_Msk                             /*!<  LPI Tx Clock Stop Enable */

/**************  Bit definition for ETH_MACLTCR register  **************/
#define ETH_MACLTCR_TWT_Pos                 (0U)
#define ETH_MACLTCR_TWT_Msk                 (0xFFFFUL << ETH_MACLTCR_TWT_Pos)                    /*!< 0x0000FFFF */
#define ETH_MACLTCR_TWT                     ETH_MACLTCR_TWT_Msk                                 /*!< LPI TW Timer */
#define ETH_MACLTCR_TWT_0                   (0x1UL << ETH_MACLTCR_TWT_Pos)                       /*!< 0x00000001 */
#define ETH_MACLTCR_TWT_1                   (0x2UL << ETH_MACLTCR_TWT_Pos)                       /*!< 0x00000002 */
#define ETH_MACLTCR_TWT_2                   (0x4UL << ETH_MACLTCR_TWT_Pos)                       /*!< 0x00000004 */
#define ETH_MACLTCR_TWT_3                   (0x8UL << ETH_MACLTCR_TWT_Pos)                       /*!< 0x00000008 */
#define ETH_MACLTCR_TWT_4                   (0x10UL << ETH_MACLTCR_TWT_Pos)                      /*!< 0x00000010 */
#define ETH_MACLTCR_TWT_5                   (0x20UL << ETH_MACLTCR_TWT_Pos)                      /*!< 0x00000020 */
#define ETH_MACLTCR_TWT_6                   (0x40UL << ETH_MACLTCR_TWT_Pos)                      /*!< 0x00000040 */
#define ETH_MACLTCR_TWT_7                   (0x80UL << ETH_MACLTCR_TWT_Pos)                      /*!< 0x00000080 */
#define ETH_MACLTCR_TWT_8                   (0x100UL << ETH_MACLTCR_TWT_Pos)                     /*!< 0x00000100 */
#define ETH_MACLTCR_TWT_9                   (0x200UL << ETH_MACLTCR_TWT_Pos)                     /*!< 0x00000200 */
#define ETH_MACLTCR_TWT_10                  (0x400UL << ETH_MACLTCR_TWT_Pos)                     /*!< 0x00000400 */
#define ETH_MACLTCR_TWT_11                  (0x800UL << ETH_MACLTCR_TWT_Pos)                     /*!< 0x00000800 */
#define ETH_MACLTCR_TWT_12                  (0x1000UL << ETH_MACLTCR_TWT_Pos)                    /*!< 0x00001000 */
#define ETH_MACLTCR_TWT_13                  (0x2000UL << ETH_MACLTCR_TWT_Pos)                    /*!< 0x00002000 */
#define ETH_MACLTCR_TWT_14                  (0x4000UL << ETH_MACLTCR_TWT_Pos)                    /*!< 0x00004000 */
#define ETH_MACLTCR_TWT_15                  (0x8000UL << ETH_MACLTCR_TWT_Pos)                    /*!< 0x00008000 */
#define ETH_MACLTCR_LST_Pos                 (16U)
#define ETH_MACLTCR_LST_Msk                 (0x3FFUL << ETH_MACLTCR_LST_Pos)                     /*!< 0x03FF0000 */
#define ETH_MACLTCR_LST                     ETH_MACLTCR_LST_Msk                                 /*!< LPI LS Timer */
#define ETH_MACLTCR_LST_0                   (0x1UL << ETH_MACLTCR_LST_Pos)                       /*!< 0x00010000 */
#define ETH_MACLTCR_LST_1                   (0x2UL << ETH_MACLTCR_LST_Pos)                       /*!< 0x00020000 */
#define ETH_MACLTCR_LST_2                   (0x4UL << ETH_MACLTCR_LST_Pos)                       /*!< 0x00040000 */
#define ETH_MACLTCR_LST_3                   (0x8UL << ETH_MACLTCR_LST_Pos)                       /*!< 0x00080000 */
#define ETH_MACLTCR_LST_4                   (0x10UL << ETH_MACLTCR_LST_Pos)                      /*!< 0x00100000 */
#define ETH_MACLTCR_LST_5                   (0x20UL << ETH_MACLTCR_LST_Pos)                      /*!< 0x00200000 */
#define ETH_MACLTCR_LST_6                   (0x40UL << ETH_MACLTCR_LST_Pos)                      /*!< 0x00400000 */
#define ETH_MACLTCR_LST_7                   (0x80UL << ETH_MACLTCR_LST_Pos)                      /*!< 0x00800000 */
#define ETH_MACLTCR_LST_8                   (0x100UL << ETH_MACLTCR_LST_Pos)                     /*!< 0x01000000 */
#define ETH_MACLTCR_LST_9                   (0x200UL << ETH_MACLTCR_LST_Pos)                     /*!< 0x02000000 */

/**************  Bit definition for ETH_MACLETR register  **************/
#define ETH_MACLETR_LPIET_Pos               (3U)
#define ETH_MACLETR_LPIET_Msk               (0x1FFFFUL << ETH_MACLETR_LPIET_Pos)                 /*!< 0x000FFFF8 */
#define ETH_MACLETR_LPIET                   ETH_MACLETR_LPIET_Msk                               /*!< LPI Entry Timer */
#define ETH_MACLETR_LPIET_0                 (0x1UL << ETH_MACLETR_LPIET_Pos)                     /*!< 0x00000008 */
#define ETH_MACLETR_LPIET_1                 (0x2UL << ETH_MACLETR_LPIET_Pos)                     /*!< 0x00000010 */
#define ETH_MACLETR_LPIET_2                 (0x4UL << ETH_MACLETR_LPIET_Pos)                     /*!< 0x00000020 */
#define ETH_MACLETR_LPIET_3                 (0x8UL << ETH_MACLETR_LPIET_Pos)                     /*!< 0x00000040 */
#define ETH_MACLETR_LPIET_4                 (0x10UL << ETH_MACLETR_LPIET_Pos)                    /*!< 0x00000080 */
#define ETH_MACLETR_LPIET_5                 (0x20UL << ETH_MACLETR_LPIET_Pos)                    /*!< 0x00000100 */
#define ETH_MACLETR_LPIET_6                 (0x40UL << ETH_MACLETR_LPIET_Pos)                    /*!< 0x00000200 */
#define ETH_MACLETR_LPIET_7                 (0x80UL << ETH_MACLETR_LPIET_Pos)                    /*!< 0x00000400 */
#define ETH_MACLETR_LPIET_8                 (0x100UL << ETH_MACLETR_LPIET_Pos)                   /*!< 0x00000800 */
#define ETH_MACLETR_LPIET_9                 (0x200UL << ETH_MACLETR_LPIET_Pos)                   /*!< 0x00001000 */
#define ETH_MACLETR_LPIET_10                (0x400UL << ETH_MACLETR_LPIET_Pos)                   /*!< 0x00002000 */
#define ETH_MACLETR_LPIET_11                (0x800UL << ETH_MACLETR_LPIET_Pos)                   /*!< 0x00004000 */
#define ETH_MACLETR_LPIET_12                (0x1000UL << ETH_MACLETR_LPIET_Pos)                  /*!< 0x00008000 */
#define ETH_MACLETR_LPIET_13                (0x2000UL << ETH_MACLETR_LPIET_Pos)                  /*!< 0x00010000 */
#define ETH_MACLETR_LPIET_14                (0x4000UL << ETH_MACLETR_LPIET_Pos)                  /*!< 0x00020000 */
#define ETH_MACLETR_LPIET_15                (0x8000UL << ETH_MACLETR_LPIET_Pos)                  /*!< 0x00040000 */
#define ETH_MACLETR_LPIET_16                (0x10000UL << ETH_MACLETR_LPIET_Pos)                 /*!< 0x00080000 */

/*************  Bit definition for ETH_MAC1USTCR register  *************/
#define ETH_MAC1USTCR_TIC_1US_CNTR_Pos      (0U)
#define ETH_MAC1USTCR_TIC_1US_CNTR_Msk      (0xFFFUL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)          /*!< 0x00000FFF */
#define ETH_MAC1USTCR_TIC_1US_CNTR          ETH_MAC1USTCR_TIC_1US_CNTR_Msk                      /*!< 1 ÃÂÃÂµs tick Counter */
#define ETH_MAC1USTCR_TIC_1US_CNTR_0        (0x1UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)            /*!< 0x00000001 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_1        (0x2UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)            /*!< 0x00000002 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_2        (0x4UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)            /*!< 0x00000004 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_3        (0x8UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)            /*!< 0x00000008 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_4        (0x10UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)           /*!< 0x00000010 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_5        (0x20UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)           /*!< 0x00000020 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_6        (0x40UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)           /*!< 0x00000040 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_7        (0x80UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)           /*!< 0x00000080 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_8        (0x100UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)          /*!< 0x00000100 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_9        (0x200UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)          /*!< 0x00000200 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_10       (0x400UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)          /*!< 0x00000400 */
#define ETH_MAC1USTCR_TIC_1US_CNTR_11       (0x800UL << ETH_MAC1USTCR_TIC_1US_CNTR_Pos)          /*!< 0x00000800 */

/*************  Bit definition for ETH_MACPHYCSR register  *************/
#define ETH_MACPHYCSR_TC_Pos                (0U)
#define ETH_MACPHYCSR_TC_Msk                (0x1UL << ETH_MACPHYCSR_TC_Pos)                      /*!< 0x00000001 */
#define ETH_MACPHYCSR_TC                    ETH_MACPHYCSR_TC_Msk                                /*!< Transmit Configuration in RGMII, SGMII, or SMII */
#define ETH_MACPHYCSR_LUD_Pos               (1U)
#define ETH_MACPHYCSR_LUD_Msk               (0x1UL << ETH_MACPHYCSR_LUD_Pos)                     /*!< 0x00000002 */
#define ETH_MACPHYCSR_LUD                   ETH_MACPHYCSR_LUD_Msk                               /*!< Link Up or Down */
#define ETH_MACPHYCSR_LNKMOD_Pos            (16U)
#define ETH_MACPHYCSR_LNKMOD_Msk            (0x1UL << ETH_MACPHYCSR_LNKMOD_Pos)                  /*!< 0x00010000 */
#define ETH_MACPHYCSR_LNKMOD                ETH_MACPHYCSR_LNKMOD_Msk                            /*!< Link Mode */
#define ETH_MACPHYCSR_LNKSPEED_Pos          (17U)
#define ETH_MACPHYCSR_LNKSPEED_Msk          (0x3UL << ETH_MACPHYCSR_LNKSPEED_Pos)                /*!< 0x00060000 */
#define ETH_MACPHYCSR_LNKSPEED              ETH_MACPHYCSR_LNKSPEED_Msk                          /*!< Link Speed */
#define ETH_MACPHYCSR_LNKSPEED_0            (0x1UL << ETH_MACPHYCSR_LNKSPEED_Pos)                /*!< 0x00020000 */
#define ETH_MACPHYCSR_LNKSPEED_1            (0x2UL << ETH_MACPHYCSR_LNKSPEED_Pos)                /*!< 0x00040000 */
#define ETH_MACPHYCSR_LNKSTS_Pos            (19U)
#define ETH_MACPHYCSR_LNKSTS_Msk            (0x1UL << ETH_MACPHYCSR_LNKSTS_Pos)                  /*!< 0x00080000 */
#define ETH_MACPHYCSR_LNKSTS                ETH_MACPHYCSR_LNKSTS_Msk                            /*!< Link Status */

/***************  Bit definition for ETH_MACVR register  ***************/
#define ETH_MACVR_SNPSVER_Pos               (0U)
#define ETH_MACVR_SNPSVER_Msk               (0xFFUL << ETH_MACVR_SNPSVER_Pos)                    /*!< 0x000000FF */
#define ETH_MACVR_SNPSVER                   ETH_MACVR_SNPSVER_Msk                               /*!< IP version */
#define ETH_MACVR_SNPSVER_0                 (0x1UL << ETH_MACVR_SNPSVER_Pos)                     /*!< 0x00000001 */
#define ETH_MACVR_SNPSVER_1                 (0x2UL << ETH_MACVR_SNPSVER_Pos)                     /*!< 0x00000002 */
#define ETH_MACVR_SNPSVER_2                 (0x4UL << ETH_MACVR_SNPSVER_Pos)                     /*!< 0x00000004 */
#define ETH_MACVR_SNPSVER_3                 (0x8UL << ETH_MACVR_SNPSVER_Pos)                     /*!< 0x00000008 */
#define ETH_MACVR_SNPSVER_4                 (0x10UL << ETH_MACVR_SNPSVER_Pos)                    /*!< 0x00000010 */
#define ETH_MACVR_SNPSVER_5                 (0x20UL << ETH_MACVR_SNPSVER_Pos)                    /*!< 0x00000020 */
#define ETH_MACVR_SNPSVER_6                 (0x40UL << ETH_MACVR_SNPSVER_Pos)                    /*!< 0x00000040 */
#define ETH_MACVR_SNPSVER_7                 (0x80UL << ETH_MACVR_SNPSVER_Pos)                    /*!< 0x00000080 */
#define ETH_MACVR_USERVER_Pos               (8U)
#define ETH_MACVR_USERVER_Msk               (0xFFUL << ETH_MACVR_USERVER_Pos)                    /*!< 0x0000FF00 */
#define ETH_MACVR_USERVER                   ETH_MACVR_USERVER_Msk                               /*!< ST-defined version */
#define ETH_MACVR_USERVER_0                 (0x1UL << ETH_MACVR_USERVER_Pos)                     /*!< 0x00000100 */
#define ETH_MACVR_USERVER_1                 (0x2UL << ETH_MACVR_USERVER_Pos)                     /*!< 0x00000200 */
#define ETH_MACVR_USERVER_2                 (0x4UL << ETH_MACVR_USERVER_Pos)                     /*!< 0x00000400 */
#define ETH_MACVR_USERVER_3                 (0x8UL << ETH_MACVR_USERVER_Pos)                     /*!< 0x00000800 */
#define ETH_MACVR_USERVER_4                 (0x10UL << ETH_MACVR_USERVER_Pos)                    /*!< 0x00001000 */
#define ETH_MACVR_USERVER_5                 (0x20UL << ETH_MACVR_USERVER_Pos)                    /*!< 0x00002000 */
#define ETH_MACVR_USERVER_6                 (0x40UL << ETH_MACVR_USERVER_Pos)                    /*!< 0x00004000 */
#define ETH_MACVR_USERVER_7                 (0x80UL << ETH_MACVR_USERVER_Pos)                    /*!< 0x00008000 */

/***************  Bit definition for ETH_MACDR register  ***************/
#define ETH_MACDR_RPESTS_Pos                (0U)
#define ETH_MACDR_RPESTS_Msk                (0x1UL << ETH_MACDR_RPESTS_Pos)                      /*!< 0x00000001 */
#define ETH_MACDR_RPESTS                    ETH_MACDR_RPESTS_Msk                                /*!< MAC GMII or MII Receive Protocol Engine Status */
#define ETH_MACDR_RFCFCSTS_Pos              (1U)
#define ETH_MACDR_RFCFCSTS_Msk              (0x3UL << ETH_MACDR_RFCFCSTS_Pos)                    /*!< 0x00000006 */
#define ETH_MACDR_RFCFCSTS                  ETH_MACDR_RFCFCSTS_Msk                              /*!< MAC Receive Packet Controller FIFO Status */
#define ETH_MACDR_RFCFCSTS_0                (0x1UL << ETH_MACDR_RFCFCSTS_Pos)                    /*!< 0x00000002 */
#define ETH_MACDR_RFCFCSTS_1                (0x2UL << ETH_MACDR_RFCFCSTS_Pos)                    /*!< 0x00000004 */
#define ETH_MACDR_TPESTS_Pos                (16U)
#define ETH_MACDR_TPESTS_Msk                (0x1UL << ETH_MACDR_TPESTS_Pos)                      /*!< 0x00010000 */
#define ETH_MACDR_TPESTS                    ETH_MACDR_TPESTS_Msk                                /*!< MAC GMII or MII Transmit Protocol Engine Status */
#define ETH_MACDR_TFCSTS_Pos                (17U)
#define ETH_MACDR_TFCSTS_Msk                (0x3UL << ETH_MACDR_TFCSTS_Pos)                      /*!< 0x00060000 */
#define ETH_MACDR_TFCSTS                    ETH_MACDR_TFCSTS_Msk                                /*!< MAC Transmit Packet Controller Status */
#define ETH_MACDR_TFCSTS_0                  (0x1UL << ETH_MACDR_TFCSTS_Pos)                      /*!< 0x00020000 */
#define ETH_MACDR_TFCSTS_1                  (0x2UL << ETH_MACDR_TFCSTS_Pos)                      /*!< 0x00040000 */

/*************  Bit definition for ETH_MACHWF1R register  **************/
#define ETH_MACHWF1R_RXFIFOSIZE_Pos         (0U)
#define ETH_MACHWF1R_RXFIFOSIZE_Msk         (0x1FUL << ETH_MACHWF1R_RXFIFOSIZE_Pos)              /*!< 0x0000001F */
#define ETH_MACHWF1R_RXFIFOSIZE             ETH_MACHWF1R_RXFIFOSIZE_Msk                         /*!< MTL Receive FIFO Size */
#define ETH_MACHWF1R_RXFIFOSIZE_0           (0x1UL << ETH_MACHWF1R_RXFIFOSIZE_Pos)               /*!< 0x00000001 */
#define ETH_MACHWF1R_RXFIFOSIZE_1           (0x2UL << ETH_MACHWF1R_RXFIFOSIZE_Pos)               /*!< 0x00000002 */
#define ETH_MACHWF1R_RXFIFOSIZE_2           (0x4UL << ETH_MACHWF1R_RXFIFOSIZE_Pos)               /*!< 0x00000004 */
#define ETH_MACHWF1R_RXFIFOSIZE_3           (0x8UL << ETH_MACHWF1R_RXFIFOSIZE_Pos)               /*!< 0x00000008 */
#define ETH_MACHWF1R_RXFIFOSIZE_4           (0x10UL << ETH_MACHWF1R_RXFIFOSIZE_Pos)              /*!< 0x00000010 */
#define ETH_MACHWF1R_TXFIFOSIZE_Pos         (6U)
#define ETH_MACHWF1R_TXFIFOSIZE_Msk         (0x1FUL << ETH_MACHWF1R_TXFIFOSIZE_Pos)              /*!< 0x000007C0 */
#define ETH_MACHWF1R_TXFIFOSIZE             ETH_MACHWF1R_TXFIFOSIZE_Msk                         /*!< MTL Transmit FIFO Size */
#define ETH_MACHWF1R_TXFIFOSIZE_0           (0x1UL << ETH_MACHWF1R_TXFIFOSIZE_Pos)               /*!< 0x00000040 */
#define ETH_MACHWF1R_TXFIFOSIZE_1           (0x2UL << ETH_MACHWF1R_TXFIFOSIZE_Pos)               /*!< 0x00000080 */
#define ETH_MACHWF1R_TXFIFOSIZE_2           (0x4UL << ETH_MACHWF1R_TXFIFOSIZE_Pos)               /*!< 0x00000100 */
#define ETH_MACHWF1R_TXFIFOSIZE_3           (0x8UL << ETH_MACHWF1R_TXFIFOSIZE_Pos)               /*!< 0x00000200 */
#define ETH_MACHWF1R_TXFIFOSIZE_4           (0x10UL << ETH_MACHWF1R_TXFIFOSIZE_Pos)              /*!< 0x00000400 */
#define ETH_MACHWF1R_OSTEN_Pos              (11U)
#define ETH_MACHWF1R_OSTEN_Msk              (0x1UL << ETH_MACHWF1R_OSTEN_Pos)                    /*!< 0x00000800 */
#define ETH_MACHWF1R_OSTEN                  ETH_MACHWF1R_OSTEN_Msk                              /*!< One-Step Timestamping Enable */
#define ETH_MACHWF1R_PTOEN_Pos              (12U)
#define ETH_MACHWF1R_PTOEN_Msk              (0x1UL << ETH_MACHWF1R_PTOEN_Pos)                    /*!< 0x00001000 */
#define ETH_MACHWF1R_PTOEN                  ETH_MACHWF1R_PTOEN_Msk                              /*!< PTP Offload Enable */
#define ETH_MACHWF1R_ADVTHWORD_Pos          (13U)
#define ETH_MACHWF1R_ADVTHWORD_Msk          (0x1UL << ETH_MACHWF1R_ADVTHWORD_Pos)                /*!< 0x00002000 */
#define ETH_MACHWF1R_ADVTHWORD              ETH_MACHWF1R_ADVTHWORD_Msk                          /*!< IEEE 1588 High Word Register Enable */
#define ETH_MACHWF1R_ADDR64_Pos             (14U)
#define ETH_MACHWF1R_ADDR64_Msk             (0x3UL << ETH_MACHWF1R_ADDR64_Pos)                   /*!< 0x0000C000 */
#define ETH_MACHWF1R_ADDR64                 ETH_MACHWF1R_ADDR64_Msk                             /*!< Address width */
#define ETH_MACHWF1R_ADDR64_0               (0x1UL << ETH_MACHWF1R_ADDR64_Pos)                   /*!< 0x00004000 */
#define ETH_MACHWF1R_ADDR64_1               (0x2UL << ETH_MACHWF1R_ADDR64_Pos)                   /*!< 0x00008000 */
#define ETH_MACHWF1R_DCBEN_Pos              (16U)
#define ETH_MACHWF1R_DCBEN_Msk              (0x1UL << ETH_MACHWF1R_DCBEN_Pos)                    /*!< 0x00010000 */
#define ETH_MACHWF1R_DCBEN                  ETH_MACHWF1R_DCBEN_Msk                              /*!< DCB Feature Enable */
#define ETH_MACHWF1R_SPHEN_Pos              (17U)
#define ETH_MACHWF1R_SPHEN_Msk              (0x1UL << ETH_MACHWF1R_SPHEN_Pos)                    /*!< 0x00020000 */
#define ETH_MACHWF1R_SPHEN                  ETH_MACHWF1R_SPHEN_Msk                              /*!< Split Header Feature Enable */
#define ETH_MACHWF1R_TSOEN_Pos              (18U)
#define ETH_MACHWF1R_TSOEN_Msk              (0x1UL << ETH_MACHWF1R_TSOEN_Pos)                    /*!< 0x00040000 */
#define ETH_MACHWF1R_TSOEN                  ETH_MACHWF1R_TSOEN_Msk                              /*!< TCP Segmentation Offload Enable */
#define ETH_MACHWF1R_DBGMEMA_Pos            (19U)
#define ETH_MACHWF1R_DBGMEMA_Msk            (0x1UL << ETH_MACHWF1R_DBGMEMA_Pos)                  /*!< 0x00080000 */
#define ETH_MACHWF1R_DBGMEMA                ETH_MACHWF1R_DBGMEMA_Msk                            /*!< DMA Debug Registers Enable */
#define ETH_MACHWF1R_AVSEL_Pos              (20U)
#define ETH_MACHWF1R_AVSEL_Msk              (0x1UL << ETH_MACHWF1R_AVSEL_Pos)                    /*!< 0x00100000 */
#define ETH_MACHWF1R_AVSEL                  ETH_MACHWF1R_AVSEL_Msk                              /*!< AV Feature Enable */
#define ETH_MACHWF1R_HASHTBLSZ_Pos          (24U)
#define ETH_MACHWF1R_HASHTBLSZ_Msk          (0x3UL << ETH_MACHWF1R_HASHTBLSZ_Pos)                /*!< 0x03000000 */
#define ETH_MACHWF1R_HASHTBLSZ              ETH_MACHWF1R_HASHTBLSZ_Msk                          /*!< Hash Table Size */
#define ETH_MACHWF1R_HASHTBLSZ_0            (0x1UL << ETH_MACHWF1R_HASHTBLSZ_Pos)                /*!< 0x01000000 */
#define ETH_MACHWF1R_HASHTBLSZ_1            (0x2UL << ETH_MACHWF1R_HASHTBLSZ_Pos)                /*!< 0x02000000 */
#define ETH_MACHWF1R_L3L4FNUM_Pos           (27U)
#define ETH_MACHWF1R_L3L4FNUM_Msk           (0xFUL << ETH_MACHWF1R_L3L4FNUM_Pos)                 /*!< 0x78000000 */
#define ETH_MACHWF1R_L3L4FNUM               ETH_MACHWF1R_L3L4FNUM_Msk                           /*!< Total number of L3 or L4 Filters */
#define ETH_MACHWF1R_L3L4FNUM_0             (0x1UL << ETH_MACHWF1R_L3L4FNUM_Pos)                 /*!< 0x08000000 */
#define ETH_MACHWF1R_L3L4FNUM_1             (0x2UL << ETH_MACHWF1R_L3L4FNUM_Pos)                 /*!< 0x10000000 */
#define ETH_MACHWF1R_L3L4FNUM_2             (0x4UL << ETH_MACHWF1R_L3L4FNUM_Pos)                 /*!< 0x20000000 */
#define ETH_MACHWF1R_L3L4FNUM_3             (0x8UL << ETH_MACHWF1R_L3L4FNUM_Pos)                 /*!< 0x40000000 */

/*************  Bit definition for ETH_MACHWF2R register  **************/
#define ETH_MACHWF2R_RXQCNT_Pos             (0U)
#define ETH_MACHWF2R_RXQCNT_Msk             (0xFUL << ETH_MACHWF2R_RXQCNT_Pos)                   /*!< 0x0000000F */
#define ETH_MACHWF2R_RXQCNT                 ETH_MACHWF2R_RXQCNT_Msk                             /*!< Number of MTL Receive Queues */
#define ETH_MACHWF2R_RXQCNT_0               (0x1UL << ETH_MACHWF2R_RXQCNT_Pos)                   /*!< 0x00000001 */
#define ETH_MACHWF2R_RXQCNT_1               (0x2UL << ETH_MACHWF2R_RXQCNT_Pos)                   /*!< 0x00000002 */
#define ETH_MACHWF2R_RXQCNT_2               (0x4UL << ETH_MACHWF2R_RXQCNT_Pos)                   /*!< 0x00000004 */
#define ETH_MACHWF2R_RXQCNT_3               (0x8UL << ETH_MACHWF2R_RXQCNT_Pos)                   /*!< 0x00000008 */
#define ETH_MACHWF2R_TXQCNT_Pos             (6U)
#define ETH_MACHWF2R_TXQCNT_Msk             (0xFUL << ETH_MACHWF2R_TXQCNT_Pos)                   /*!< 0x000003C0 */
#define ETH_MACHWF2R_TXQCNT                 ETH_MACHWF2R_TXQCNT_Msk                             /*!< Number of MTL Transmit Queues */
#define ETH_MACHWF2R_TXQCNT_0               (0x1UL << ETH_MACHWF2R_TXQCNT_Pos)                   /*!< 0x00000040 */
#define ETH_MACHWF2R_TXQCNT_1               (0x2UL << ETH_MACHWF2R_TXQCNT_Pos)                   /*!< 0x00000080 */
#define ETH_MACHWF2R_TXQCNT_2               (0x4UL << ETH_MACHWF2R_TXQCNT_Pos)                   /*!< 0x00000100 */
#define ETH_MACHWF2R_TXQCNT_3               (0x8UL << ETH_MACHWF2R_TXQCNT_Pos)                   /*!< 0x00000200 */
#define ETH_MACHWF2R_RXCHCNT_Pos            (12U)
#define ETH_MACHWF2R_RXCHCNT_Msk            (0xFUL << ETH_MACHWF2R_RXCHCNT_Pos)                  /*!< 0x0000F000 */
#define ETH_MACHWF2R_RXCHCNT                ETH_MACHWF2R_RXCHCNT_Msk                            /*!< Number of DMA Receive Channels */
#define ETH_MACHWF2R_RXCHCNT_0              (0x1UL << ETH_MACHWF2R_RXCHCNT_Pos)                  /*!< 0x00001000 */
#define ETH_MACHWF2R_RXCHCNT_1              (0x2UL << ETH_MACHWF2R_RXCHCNT_Pos)                  /*!< 0x00002000 */
#define ETH_MACHWF2R_RXCHCNT_2              (0x4UL << ETH_MACHWF2R_RXCHCNT_Pos)                  /*!< 0x00004000 */
#define ETH_MACHWF2R_RXCHCNT_3              (0x8UL << ETH_MACHWF2R_RXCHCNT_Pos)                  /*!< 0x00008000 */
#define ETH_MACHWF2R_TXCHCNT_Pos            (18U)
#define ETH_MACHWF2R_TXCHCNT_Msk            (0xFUL << ETH_MACHWF2R_TXCHCNT_Pos)                  /*!< 0x003C0000 */
#define ETH_MACHWF2R_TXCHCNT                ETH_MACHWF2R_TXCHCNT_Msk                            /*!< Number of DMA Transmit Channels */
#define ETH_MACHWF2R_TXCHCNT_0              (0x1UL << ETH_MACHWF2R_TXCHCNT_Pos)                  /*!< 0x00040000 */
#define ETH_MACHWF2R_TXCHCNT_1              (0x2UL << ETH_MACHWF2R_TXCHCNT_Pos)                  /*!< 0x00080000 */
#define ETH_MACHWF2R_TXCHCNT_2              (0x4UL << ETH_MACHWF2R_TXCHCNT_Pos)                  /*!< 0x00100000 */
#define ETH_MACHWF2R_TXCHCNT_3              (0x8UL << ETH_MACHWF2R_TXCHCNT_Pos)                  /*!< 0x00200000 */
#define ETH_MACHWF2R_PPSOUTNUM_Pos          (24U)
#define ETH_MACHWF2R_PPSOUTNUM_Msk          (0x7UL << ETH_MACHWF2R_PPSOUTNUM_Pos)                /*!< 0x07000000 */
#define ETH_MACHWF2R_PPSOUTNUM              ETH_MACHWF2R_PPSOUTNUM_Msk                          /*!< Number of PPS Outputs */
#define ETH_MACHWF2R_PPSOUTNUM_0            (0x1UL << ETH_MACHWF2R_PPSOUTNUM_Pos)                /*!< 0x01000000 */
#define ETH_MACHWF2R_PPSOUTNUM_1            (0x2UL << ETH_MACHWF2R_PPSOUTNUM_Pos)                /*!< 0x02000000 */
#define ETH_MACHWF2R_PPSOUTNUM_2            (0x4UL << ETH_MACHWF2R_PPSOUTNUM_Pos)                /*!< 0x04000000 */
#define ETH_MACHWF2R_AUXSNAPNUM_Pos         (28U)
#define ETH_MACHWF2R_AUXSNAPNUM_Msk         (0x7UL << ETH_MACHWF2R_AUXSNAPNUM_Pos)               /*!< 0x70000000 */
#define ETH_MACHWF2R_AUXSNAPNUM             ETH_MACHWF2R_AUXSNAPNUM_Msk                         /*!< Number of Auxiliary Snapshot Inputs */
#define ETH_MACHWF2R_AUXSNAPNUM_0           (0x1UL << ETH_MACHWF2R_AUXSNAPNUM_Pos)               /*!< 0x10000000 */
#define ETH_MACHWF2R_AUXSNAPNUM_1           (0x2UL << ETH_MACHWF2R_AUXSNAPNUM_Pos)               /*!< 0x20000000 */
#define ETH_MACHWF2R_AUXSNAPNUM_2           (0x4UL << ETH_MACHWF2R_AUXSNAPNUM_Pos)               /*!< 0x40000000 */

/*************  Bit definition for ETH_MACMDIOAR register  *************/
#define ETH_MACMDIOAR_GB_Pos                (0U)
#define ETH_MACMDIOAR_GB_Msk                (0x1UL << ETH_MACMDIOAR_GB_Pos)                      /*!< 0x00000001 */
#define ETH_MACMDIOAR_GB                    ETH_MACMDIOAR_GB_Msk                                /*!< GMII Busy */
#define ETH_MACMDIOAR_C45E_Pos              (1U)
#define ETH_MACMDIOAR_C45E_Msk              (0x1UL << ETH_MACMDIOAR_C45E_Pos)                    /*!< 0x00000002 */
#define ETH_MACMDIOAR_C45E                  ETH_MACMDIOAR_C45E_Msk                              /*!< Clause 45 PHY Enable */
#define ETH_MACMDIOAR_GOC_Pos               (2U)
#define ETH_MACMDIOAR_GOC_Msk               (0x3UL << ETH_MACMDIOAR_GOC_Pos)                     /*!< 0x0000000C */
#define ETH_MACMDIOAR_GOC                   ETH_MACMDIOAR_GOC_Msk                               /*!< GMII Operation Command */
#define ETH_MACMDIOAR_GOC_0                 (0x1UL << ETH_MACMDIOAR_GOC_Pos)                     /*!< 0x00000004 */
#define ETH_MACMDIOAR_GOC_1                 (0x2UL << ETH_MACMDIOAR_GOC_Pos)                     /*!< 0x00000008 */
#define ETH_MACMDIOAR_SKAP_Pos              (4U)
#define ETH_MACMDIOAR_SKAP_Msk              (0x1UL << ETH_MACMDIOAR_SKAP_Pos)                    /*!< 0x00000010 */
#define ETH_MACMDIOAR_SKAP                  ETH_MACMDIOAR_SKAP_Msk                              /*!< Skip Address Packet */
#define ETH_MACMDIOAR_CR_Pos                (8U)
#define ETH_MACMDIOAR_CR_Msk                (0xFUL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000F00 */
#define ETH_MACMDIOAR_CR                    ETH_MACMDIOAR_CR_Msk                                /*!< CSR Clock Range */
#define ETH_MACMDIOAR_CR_DIV42              (0x0UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000000 */
#define ETH_MACMDIOAR_CR_DIV62              (0x1UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000100 */
#define ETH_MACMDIOAR_CR_DIV16              (0x2UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000200 */
#define ETH_MACMDIOAR_CR_DIV26              (0x3UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000300 */
#define ETH_MACMDIOAR_CR_DIV102             (0x4UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000400 */
#define ETH_MACMDIOAR_CR_DIV124             (0x5UL << ETH_MACMDIOAR_CR_Pos)                      /*!< 0x00000500 */
#define ETH_MACMDIOAR_NTC_Pos               (12U)
#define ETH_MACMDIOAR_NTC_Msk               (0x7UL << ETH_MACMDIOAR_NTC_Pos)                     /*!< 0x00007000 */
#define ETH_MACMDIOAR_NTC                   ETH_MACMDIOAR_NTC_Msk                               /*!< Number of Training Clocks */
#define ETH_MACMDIOAR_NTC_0                 (0x1UL << ETH_MACMDIOAR_NTC_Pos)                     /*!< 0x00001000 */
#define ETH_MACMDIOAR_NTC_1                 (0x2UL << ETH_MACMDIOAR_NTC_Pos)                     /*!< 0x00002000 */
#define ETH_MACMDIOAR_NTC_2                 (0x4UL << ETH_MACMDIOAR_NTC_Pos)                     /*!< 0x00004000 */
#define ETH_MACMDIOAR_RDA_Pos               (16U)
#define ETH_MACMDIOAR_RDA_Msk               (0x1FUL << ETH_MACMDIOAR_RDA_Pos)                    /*!< 0x001F0000 */
#define ETH_MACMDIOAR_RDA                   ETH_MACMDIOAR_RDA_Msk                               /*!< Register/Device Address */
#define ETH_MACMDIOAR_RDA_0                 (0x1UL << ETH_MACMDIOAR_RDA_Pos)                     /*!< 0x00010000 */
#define ETH_MACMDIOAR_RDA_1                 (0x2UL << ETH_MACMDIOAR_RDA_Pos)                     /*!< 0x00020000 */
#define ETH_MACMDIOAR_RDA_2                 (0x4UL << ETH_MACMDIOAR_RDA_Pos)                     /*!< 0x00040000 */
#define ETH_MACMDIOAR_RDA_3                 (0x8UL << ETH_MACMDIOAR_RDA_Pos)                     /*!< 0x00080000 */
#define ETH_MACMDIOAR_RDA_4                 (0x10UL << ETH_MACMDIOAR_RDA_Pos)                    /*!< 0x00100000 */
#define ETH_MACMDIOAR_PA_Pos                (21U)
#define ETH_MACMDIOAR_PA_Msk                (0x1FUL << ETH_MACMDIOAR_PA_Pos)                     /*!< 0x03E00000 */
#define ETH_MACMDIOAR_PA                    ETH_MACMDIOAR_PA_Msk                                /*!< Physical Layer Address */
#define ETH_MACMDIOAR_PA_0                  (0x1UL << ETH_MACMDIOAR_PA_Pos)                      /*!< 0x00200000 */
#define ETH_MACMDIOAR_PA_1                  (0x2UL << ETH_MACMDIOAR_PA_Pos)                      /*!< 0x00400000 */
#define ETH_MACMDIOAR_PA_2                  (0x4UL << ETH_MACMDIOAR_PA_Pos)                      /*!< 0x00800000 */
#define ETH_MACMDIOAR_PA_3                  (0x8UL << ETH_MACMDIOAR_PA_Pos)                      /*!< 0x01000000 */
#define ETH_MACMDIOAR_PA_4                  (0x10UL << ETH_MACMDIOAR_PA_Pos)                     /*!< 0x02000000 */
#define ETH_MACMDIOAR_BTB_Pos               (26U)
#define ETH_MACMDIOAR_BTB_Msk               (0x1UL << ETH_MACMDIOAR_BTB_Pos)                     /*!< 0x04000000 */
#define ETH_MACMDIOAR_BTB                   ETH_MACMDIOAR_BTB_Msk                               /*!< Back to Back transactions */
#define ETH_MACMDIOAR_PSE_Pos               (27U)
#define ETH_MACMDIOAR_PSE_Msk               (0x1UL << ETH_MACMDIOAR_PSE_Pos)                     /*!< 0x08000000 */
#define ETH_MACMDIOAR_PSE                   ETH_MACMDIOAR_PSE_Msk                               /*!< Preamble Suppression Enable */

/*************  Bit definition for ETH_MACMDIODR register  *************/
#define ETH_MACMDIODR_GD_Pos                (0U)
#define ETH_MACMDIODR_GD_Msk                (0xFFFFUL << ETH_MACMDIODR_GD_Pos)                   /*!< 0x0000FFFF */
#define ETH_MACMDIODR_GD                    ETH_MACMDIODR_GD_Msk                                /*!< GMII Data */
#define ETH_MACMDIODR_GD_0                  (0x1UL << ETH_MACMDIODR_GD_Pos)                      /*!< 0x00000001 */
#define ETH_MACMDIODR_GD_1                  (0x2UL << ETH_MACMDIODR_GD_Pos)                      /*!< 0x00000002 */
#define ETH_MACMDIODR_GD_2                  (0x4UL << ETH_MACMDIODR_GD_Pos)                      /*!< 0x00000004 */
#define ETH_MACMDIODR_GD_3                  (0x8UL << ETH_MACMDIODR_GD_Pos)                      /*!< 0x00000008 */
#define ETH_MACMDIODR_GD_4                  (0x10UL << ETH_MACMDIODR_GD_Pos)                     /*!< 0x00000010 */
#define ETH_MACMDIODR_GD_5                  (0x20UL << ETH_MACMDIODR_GD_Pos)                     /*!< 0x00000020 */
#define ETH_MACMDIODR_GD_6                  (0x40UL << ETH_MACMDIODR_GD_Pos)                     /*!< 0x00000040 */
#define ETH_MACMDIODR_GD_7                  (0x80UL << ETH_MACMDIODR_GD_Pos)                     /*!< 0x00000080 */
#define ETH_MACMDIODR_GD_8                  (0x100UL << ETH_MACMDIODR_GD_Pos)                    /*!< 0x00000100 */
#define ETH_MACMDIODR_GD_9                  (0x200UL << ETH_MACMDIODR_GD_Pos)                    /*!< 0x00000200 */
#define ETH_MACMDIODR_GD_10                 (0x400UL << ETH_MACMDIODR_GD_Pos)                    /*!< 0x00000400 */
#define ETH_MACMDIODR_GD_11                 (0x800UL << ETH_MACMDIODR_GD_Pos)                    /*!< 0x00000800 */
#define ETH_MACMDIODR_GD_12                 (0x1000UL << ETH_MACMDIODR_GD_Pos)                   /*!< 0x00001000 */
#define ETH_MACMDIODR_GD_13                 (0x2000UL << ETH_MACMDIODR_GD_Pos)                   /*!< 0x00002000 */
#define ETH_MACMDIODR_GD_14                 (0x4000UL << ETH_MACMDIODR_GD_Pos)                   /*!< 0x00004000 */
#define ETH_MACMDIODR_GD_15                 (0x8000UL << ETH_MACMDIODR_GD_Pos)                   /*!< 0x00008000 */
#define ETH_MACMDIODR_RA_Pos                (16U)
#define ETH_MACMDIODR_RA_Msk                (0xFFFFUL << ETH_MACMDIODR_RA_Pos)                   /*!< 0xFFFF0000 */
#define ETH_MACMDIODR_RA                    ETH_MACMDIODR_RA_Msk                                /*!< Register Address */
#define ETH_MACMDIODR_RA_0                  (0x1UL << ETH_MACMDIODR_RA_Pos)                      /*!< 0x00010000 */
#define ETH_MACMDIODR_RA_1                  (0x2UL << ETH_MACMDIODR_RA_Pos)                      /*!< 0x00020000 */
#define ETH_MACMDIODR_RA_2                  (0x4UL << ETH_MACMDIODR_RA_Pos)                      /*!< 0x00040000 */
#define ETH_MACMDIODR_RA_3                  (0x8UL << ETH_MACMDIODR_RA_Pos)                      /*!< 0x00080000 */
#define ETH_MACMDIODR_RA_4                  (0x10UL << ETH_MACMDIODR_RA_Pos)                     /*!< 0x00100000 */
#define ETH_MACMDIODR_RA_5                  (0x20UL << ETH_MACMDIODR_RA_Pos)                     /*!< 0x00200000 */
#define ETH_MACMDIODR_RA_6                  (0x40UL << ETH_MACMDIODR_RA_Pos)                     /*!< 0x00400000 */
#define ETH_MACMDIODR_RA_7                  (0x80UL << ETH_MACMDIODR_RA_Pos)                     /*!< 0x00800000 */
#define ETH_MACMDIODR_RA_8                  (0x100UL << ETH_MACMDIODR_RA_Pos)                    /*!< 0x01000000 */
#define ETH_MACMDIODR_RA_9                  (0x200UL << ETH_MACMDIODR_RA_Pos)                    /*!< 0x02000000 */
#define ETH_MACMDIODR_RA_10                 (0x400UL << ETH_MACMDIODR_RA_Pos)                    /*!< 0x04000000 */
#define ETH_MACMDIODR_RA_11                 (0x800UL << ETH_MACMDIODR_RA_Pos)                    /*!< 0x08000000 */
#define ETH_MACMDIODR_RA_12                 (0x1000UL << ETH_MACMDIODR_RA_Pos)                   /*!< 0x10000000 */
#define ETH_MACMDIODR_RA_13                 (0x2000UL << ETH_MACMDIODR_RA_Pos)                   /*!< 0x20000000 */
#define ETH_MACMDIODR_RA_14                 (0x4000UL << ETH_MACMDIODR_RA_Pos)                   /*!< 0x40000000 */
#define ETH_MACMDIODR_RA_15                 (0x8000UL << ETH_MACMDIODR_RA_Pos)                   /*!< 0x80000000 */

/**************  Bit definition for ETH_MACA0HR register  **************/
#define ETH_MACA0HR_ADDRHI_Pos              (0U)
#define ETH_MACA0HR_ADDRHI_Msk              (0xFFFFUL << ETH_MACA0HR_ADDRHI_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACA0HR_ADDRHI                  ETH_MACA0HR_ADDRHI_Msk                              /*!< MAC Address0[47:32] */
#define ETH_MACA0HR_ADDRHI_0                (0x1UL << ETH_MACA0HR_ADDRHI_Pos)                    /*!< 0x00000001 */
#define ETH_MACA0HR_ADDRHI_1                (0x2UL << ETH_MACA0HR_ADDRHI_Pos)                    /*!< 0x00000002 */
#define ETH_MACA0HR_ADDRHI_2                (0x4UL << ETH_MACA0HR_ADDRHI_Pos)                    /*!< 0x00000004 */
#define ETH_MACA0HR_ADDRHI_3                (0x8UL << ETH_MACA0HR_ADDRHI_Pos)                    /*!< 0x00000008 */
#define ETH_MACA0HR_ADDRHI_4                (0x10UL << ETH_MACA0HR_ADDRHI_Pos)                   /*!< 0x00000010 */
#define ETH_MACA0HR_ADDRHI_5                (0x20UL << ETH_MACA0HR_ADDRHI_Pos)                   /*!< 0x00000020 */
#define ETH_MACA0HR_ADDRHI_6                (0x40UL << ETH_MACA0HR_ADDRHI_Pos)                   /*!< 0x00000040 */
#define ETH_MACA0HR_ADDRHI_7                (0x80UL << ETH_MACA0HR_ADDRHI_Pos)                   /*!< 0x00000080 */
#define ETH_MACA0HR_ADDRHI_8                (0x100UL << ETH_MACA0HR_ADDRHI_Pos)                  /*!< 0x00000100 */
#define ETH_MACA0HR_ADDRHI_9                (0x200UL << ETH_MACA0HR_ADDRHI_Pos)                  /*!< 0x00000200 */
#define ETH_MACA0HR_ADDRHI_10               (0x400UL << ETH_MACA0HR_ADDRHI_Pos)                  /*!< 0x00000400 */
#define ETH_MACA0HR_ADDRHI_11               (0x800UL << ETH_MACA0HR_ADDRHI_Pos)                  /*!< 0x00000800 */
#define ETH_MACA0HR_ADDRHI_12               (0x1000UL << ETH_MACA0HR_ADDRHI_Pos)                 /*!< 0x00001000 */
#define ETH_MACA0HR_ADDRHI_13               (0x2000UL << ETH_MACA0HR_ADDRHI_Pos)                 /*!< 0x00002000 */
#define ETH_MACA0HR_ADDRHI_14               (0x4000UL << ETH_MACA0HR_ADDRHI_Pos)                 /*!< 0x00004000 */
#define ETH_MACA0HR_ADDRHI_15               (0x8000UL << ETH_MACA0HR_ADDRHI_Pos)                 /*!< 0x00008000 */
#define ETH_MACA0HR_AE_Pos                  (31U)
#define ETH_MACA0HR_AE_Msk                  (0x1UL << ETH_MACA0HR_AE_Pos)                        /*!< 0x80000000 */
#define ETH_MACA0HR_AE                      ETH_MACA0HR_AE_Msk                                  /*!< Address Enable */

/**************  Bit definition for ETH_MACA0LR register  **************/
#define ETH_MACA0LR_ADDRLO_Pos              (0U)
#define ETH_MACA0LR_ADDRLO_Msk              (0xFFFFFFFFUL << ETH_MACA0LR_ADDRLO_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACA0LR_ADDRLO                  ETH_MACA0LR_ADDRLO_Msk                              /*!< MAC Address x [31:0] (x = 0 to 3) */
#define ETH_MACA0LR_ADDRLO_0                (0x1UL << ETH_MACA0LR_ADDRLO_Pos)                    /*!< 0x00000001 */
#define ETH_MACA0LR_ADDRLO_1                (0x2UL << ETH_MACA0LR_ADDRLO_Pos)                    /*!< 0x00000002 */
#define ETH_MACA0LR_ADDRLO_2                (0x4UL << ETH_MACA0LR_ADDRLO_Pos)                    /*!< 0x00000004 */
#define ETH_MACA0LR_ADDRLO_3                (0x8UL << ETH_MACA0LR_ADDRLO_Pos)                    /*!< 0x00000008 */
#define ETH_MACA0LR_ADDRLO_4                (0x10UL << ETH_MACA0LR_ADDRLO_Pos)                   /*!< 0x00000010 */
#define ETH_MACA0LR_ADDRLO_5                (0x20UL << ETH_MACA0LR_ADDRLO_Pos)                   /*!< 0x00000020 */
#define ETH_MACA0LR_ADDRLO_6                (0x40UL << ETH_MACA0LR_ADDRLO_Pos)                   /*!< 0x00000040 */
#define ETH_MACA0LR_ADDRLO_7                (0x80UL << ETH_MACA0LR_ADDRLO_Pos)                   /*!< 0x00000080 */
#define ETH_MACA0LR_ADDRLO_8                (0x100UL << ETH_MACA0LR_ADDRLO_Pos)                  /*!< 0x00000100 */
#define ETH_MACA0LR_ADDRLO_9                (0x200UL << ETH_MACA0LR_ADDRLO_Pos)                  /*!< 0x00000200 */
#define ETH_MACA0LR_ADDRLO_10               (0x400UL << ETH_MACA0LR_ADDRLO_Pos)                  /*!< 0x00000400 */
#define ETH_MACA0LR_ADDRLO_11               (0x800UL << ETH_MACA0LR_ADDRLO_Pos)                  /*!< 0x00000800 */
#define ETH_MACA0LR_ADDRLO_12               (0x1000UL << ETH_MACA0LR_ADDRLO_Pos)                 /*!< 0x00001000 */
#define ETH_MACA0LR_ADDRLO_13               (0x2000UL << ETH_MACA0LR_ADDRLO_Pos)                 /*!< 0x00002000 */
#define ETH_MACA0LR_ADDRLO_14               (0x4000UL << ETH_MACA0LR_ADDRLO_Pos)                 /*!< 0x00004000 */
#define ETH_MACA0LR_ADDRLO_15               (0x8000UL << ETH_MACA0LR_ADDRLO_Pos)                 /*!< 0x00008000 */
#define ETH_MACA0LR_ADDRLO_16               (0x10000UL << ETH_MACA0LR_ADDRLO_Pos)                /*!< 0x00010000 */
#define ETH_MACA0LR_ADDRLO_17               (0x20000UL << ETH_MACA0LR_ADDRLO_Pos)                /*!< 0x00020000 */
#define ETH_MACA0LR_ADDRLO_18               (0x40000UL << ETH_MACA0LR_ADDRLO_Pos)                /*!< 0x00040000 */
#define ETH_MACA0LR_ADDRLO_19               (0x80000UL << ETH_MACA0LR_ADDRLO_Pos)                /*!< 0x00080000 */
#define ETH_MACA0LR_ADDRLO_20               (0x100000UL << ETH_MACA0LR_ADDRLO_Pos)               /*!< 0x00100000 */
#define ETH_MACA0LR_ADDRLO_21               (0x200000UL << ETH_MACA0LR_ADDRLO_Pos)               /*!< 0x00200000 */
#define ETH_MACA0LR_ADDRLO_22               (0x400000UL << ETH_MACA0LR_ADDRLO_Pos)               /*!< 0x00400000 */
#define ETH_MACA0LR_ADDRLO_23               (0x800000UL << ETH_MACA0LR_ADDRLO_Pos)               /*!< 0x00800000 */
#define ETH_MACA0LR_ADDRLO_24               (0x1000000UL << ETH_MACA0LR_ADDRLO_Pos)              /*!< 0x01000000 */
#define ETH_MACA0LR_ADDRLO_25               (0x2000000UL << ETH_MACA0LR_ADDRLO_Pos)              /*!< 0x02000000 */
#define ETH_MACA0LR_ADDRLO_26               (0x4000000UL << ETH_MACA0LR_ADDRLO_Pos)              /*!< 0x04000000 */
#define ETH_MACA0LR_ADDRLO_27               (0x8000000UL << ETH_MACA0LR_ADDRLO_Pos)              /*!< 0x08000000 */
#define ETH_MACA0LR_ADDRLO_28               (0x10000000UL << ETH_MACA0LR_ADDRLO_Pos)             /*!< 0x10000000 */
#define ETH_MACA0LR_ADDRLO_29               (0x20000000UL << ETH_MACA0LR_ADDRLO_Pos)             /*!< 0x20000000 */
#define ETH_MACA0LR_ADDRLO_30               (0x40000000UL << ETH_MACA0LR_ADDRLO_Pos)             /*!< 0x40000000 */
#define ETH_MACA0LR_ADDRLO_31               (0x80000000UL << ETH_MACA0LR_ADDRLO_Pos)             /*!< 0x80000000 */

/**************  Bit definition for ETH_MACA1HR register  **************/
#define ETH_MACA1HR_ADDRHI_Pos              (0U)
#define ETH_MACA1HR_ADDRHI_Msk              (0xFFFFUL << ETH_MACA1HR_ADDRHI_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACA1HR_ADDRHI                  ETH_MACA1HR_ADDRHI_Msk                              /*!< MAC Address1 [47:32] */
#define ETH_MACA1HR_ADDRHI_0                (0x1UL << ETH_MACA1HR_ADDRHI_Pos)                    /*!< 0x00000001 */
#define ETH_MACA1HR_ADDRHI_1                (0x2UL << ETH_MACA1HR_ADDRHI_Pos)                    /*!< 0x00000002 */
#define ETH_MACA1HR_ADDRHI_2                (0x4UL << ETH_MACA1HR_ADDRHI_Pos)                    /*!< 0x00000004 */
#define ETH_MACA1HR_ADDRHI_3                (0x8UL << ETH_MACA1HR_ADDRHI_Pos)                    /*!< 0x00000008 */
#define ETH_MACA1HR_ADDRHI_4                (0x10UL << ETH_MACA1HR_ADDRHI_Pos)                   /*!< 0x00000010 */
#define ETH_MACA1HR_ADDRHI_5                (0x20UL << ETH_MACA1HR_ADDRHI_Pos)                   /*!< 0x00000020 */
#define ETH_MACA1HR_ADDRHI_6                (0x40UL << ETH_MACA1HR_ADDRHI_Pos)                   /*!< 0x00000040 */
#define ETH_MACA1HR_ADDRHI_7                (0x80UL << ETH_MACA1HR_ADDRHI_Pos)                   /*!< 0x00000080 */
#define ETH_MACA1HR_ADDRHI_8                (0x100UL << ETH_MACA1HR_ADDRHI_Pos)                  /*!< 0x00000100 */
#define ETH_MACA1HR_ADDRHI_9                (0x200UL << ETH_MACA1HR_ADDRHI_Pos)                  /*!< 0x00000200 */
#define ETH_MACA1HR_ADDRHI_10               (0x400UL << ETH_MACA1HR_ADDRHI_Pos)                  /*!< 0x00000400 */
#define ETH_MACA1HR_ADDRHI_11               (0x800UL << ETH_MACA1HR_ADDRHI_Pos)                  /*!< 0x00000800 */
#define ETH_MACA1HR_ADDRHI_12               (0x1000UL << ETH_MACA1HR_ADDRHI_Pos)                 /*!< 0x00001000 */
#define ETH_MACA1HR_ADDRHI_13               (0x2000UL << ETH_MACA1HR_ADDRHI_Pos)                 /*!< 0x00002000 */
#define ETH_MACA1HR_ADDRHI_14               (0x4000UL << ETH_MACA1HR_ADDRHI_Pos)                 /*!< 0x00004000 */
#define ETH_MACA1HR_ADDRHI_15               (0x8000UL << ETH_MACA1HR_ADDRHI_Pos)                 /*!< 0x00008000 */
#define ETH_MACA1HR_MBC_Pos                 (24U)
#define ETH_MACA1HR_MBC_Msk                 (0x3FUL << ETH_MACA1HR_MBC_Pos)                      /*!< 0x3F000000 */
#define ETH_MACA1HR_MBC                     ETH_MACA1HR_MBC_Msk                                 /*!< Mask Byte Control */
#define ETH_MACA1HR_MBC_0                   (0x1UL << ETH_MACA1HR_MBC_Pos)                       /*!< 0x01000000 */
#define ETH_MACA1HR_MBC_1                   (0x2UL << ETH_MACA1HR_MBC_Pos)                       /*!< 0x02000000 */
#define ETH_MACA1HR_MBC_2                   (0x4UL << ETH_MACA1HR_MBC_Pos)                       /*!< 0x04000000 */
#define ETH_MACA1HR_MBC_3                   (0x8UL << ETH_MACA1HR_MBC_Pos)                       /*!< 0x08000000 */
#define ETH_MACA1HR_MBC_4                   (0x10UL << ETH_MACA1HR_MBC_Pos)                      /*!< 0x10000000 */
#define ETH_MACA1HR_MBC_5                   (0x20UL << ETH_MACA1HR_MBC_Pos)                      /*!< 0x20000000 */
#define ETH_MACA1HR_SA_Pos                  (30U)
#define ETH_MACA1HR_SA_Msk                  (0x1UL << ETH_MACA1HR_SA_Pos)                        /*!< 0x40000000 */
#define ETH_MACA1HR_SA                      ETH_MACA1HR_SA_Msk                                  /*!< Source Address */
#define ETH_MACA1HR_AE_Pos                  (31U)
#define ETH_MACA1HR_AE_Msk                  (0x1UL << ETH_MACA1HR_AE_Pos)                        /*!< 0x80000000 */
#define ETH_MACA1HR_AE                      ETH_MACA1HR_AE_Msk                                  /*!< Address Enable */

/**************  Bit definition for ETH_MACA1LR register  **************/
#define ETH_MACA1LR_ADDRLO_Pos              (0U)
#define ETH_MACA1LR_ADDRLO_Msk              (0xFFFFFFFFUL << ETH_MACA1LR_ADDRLO_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACA1LR_ADDRLO                  ETH_MACA1LR_ADDRLO_Msk                              /*!< MAC Address x [31:0] (x = 0 to 3) */
#define ETH_MACA1LR_ADDRLO_0                (0x1UL << ETH_MACA1LR_ADDRLO_Pos)                    /*!< 0x00000001 */
#define ETH_MACA1LR_ADDRLO_1                (0x2UL << ETH_MACA1LR_ADDRLO_Pos)                    /*!< 0x00000002 */
#define ETH_MACA1LR_ADDRLO_2                (0x4UL << ETH_MACA1LR_ADDRLO_Pos)                    /*!< 0x00000004 */
#define ETH_MACA1LR_ADDRLO_3                (0x8UL << ETH_MACA1LR_ADDRLO_Pos)                    /*!< 0x00000008 */
#define ETH_MACA1LR_ADDRLO_4                (0x10UL << ETH_MACA1LR_ADDRLO_Pos)                   /*!< 0x00000010 */
#define ETH_MACA1LR_ADDRLO_5                (0x20UL << ETH_MACA1LR_ADDRLO_Pos)                   /*!< 0x00000020 */
#define ETH_MACA1LR_ADDRLO_6                (0x40UL << ETH_MACA1LR_ADDRLO_Pos)                   /*!< 0x00000040 */
#define ETH_MACA1LR_ADDRLO_7                (0x80UL << ETH_MACA1LR_ADDRLO_Pos)                   /*!< 0x00000080 */
#define ETH_MACA1LR_ADDRLO_8                (0x100UL << ETH_MACA1LR_ADDRLO_Pos)                  /*!< 0x00000100 */
#define ETH_MACA1LR_ADDRLO_9                (0x200UL << ETH_MACA1LR_ADDRLO_Pos)                  /*!< 0x00000200 */
#define ETH_MACA1LR_ADDRLO_10               (0x400UL << ETH_MACA1LR_ADDRLO_Pos)                  /*!< 0x00000400 */
#define ETH_MACA1LR_ADDRLO_11               (0x800UL << ETH_MACA1LR_ADDRLO_Pos)                  /*!< 0x00000800 */
#define ETH_MACA1LR_ADDRLO_12               (0x1000UL << ETH_MACA1LR_ADDRLO_Pos)                 /*!< 0x00001000 */
#define ETH_MACA1LR_ADDRLO_13               (0x2000UL << ETH_MACA1LR_ADDRLO_Pos)                 /*!< 0x00002000 */
#define ETH_MACA1LR_ADDRLO_14               (0x4000UL << ETH_MACA1LR_ADDRLO_Pos)                 /*!< 0x00004000 */
#define ETH_MACA1LR_ADDRLO_15               (0x8000UL << ETH_MACA1LR_ADDRLO_Pos)                 /*!< 0x00008000 */
#define ETH_MACA1LR_ADDRLO_16               (0x10000UL << ETH_MACA1LR_ADDRLO_Pos)                /*!< 0x00010000 */
#define ETH_MACA1LR_ADDRLO_17               (0x20000UL << ETH_MACA1LR_ADDRLO_Pos)                /*!< 0x00020000 */
#define ETH_MACA1LR_ADDRLO_18               (0x40000UL << ETH_MACA1LR_ADDRLO_Pos)                /*!< 0x00040000 */
#define ETH_MACA1LR_ADDRLO_19               (0x80000UL << ETH_MACA1LR_ADDRLO_Pos)                /*!< 0x00080000 */
#define ETH_MACA1LR_ADDRLO_20               (0x100000UL << ETH_MACA1LR_ADDRLO_Pos)               /*!< 0x00100000 */
#define ETH_MACA1LR_ADDRLO_21               (0x200000UL << ETH_MACA1LR_ADDRLO_Pos)               /*!< 0x00200000 */
#define ETH_MACA1LR_ADDRLO_22               (0x400000UL << ETH_MACA1LR_ADDRLO_Pos)               /*!< 0x00400000 */
#define ETH_MACA1LR_ADDRLO_23               (0x800000UL << ETH_MACA1LR_ADDRLO_Pos)               /*!< 0x00800000 */
#define ETH_MACA1LR_ADDRLO_24               (0x1000000UL << ETH_MACA1LR_ADDRLO_Pos)              /*!< 0x01000000 */
#define ETH_MACA1LR_ADDRLO_25               (0x2000000UL << ETH_MACA1LR_ADDRLO_Pos)              /*!< 0x02000000 */
#define ETH_MACA1LR_ADDRLO_26               (0x4000000UL << ETH_MACA1LR_ADDRLO_Pos)              /*!< 0x04000000 */
#define ETH_MACA1LR_ADDRLO_27               (0x8000000UL << ETH_MACA1LR_ADDRLO_Pos)              /*!< 0x08000000 */
#define ETH_MACA1LR_ADDRLO_28               (0x10000000UL << ETH_MACA1LR_ADDRLO_Pos)             /*!< 0x10000000 */
#define ETH_MACA1LR_ADDRLO_29               (0x20000000UL << ETH_MACA1LR_ADDRLO_Pos)             /*!< 0x20000000 */
#define ETH_MACA1LR_ADDRLO_30               (0x40000000UL << ETH_MACA1LR_ADDRLO_Pos)             /*!< 0x40000000 */
#define ETH_MACA1LR_ADDRLO_31               (0x80000000UL << ETH_MACA1LR_ADDRLO_Pos)             /*!< 0x80000000 */

/**************  Bit definition for ETH_MACA2HR register  **************/
#define ETH_MACA2HR_ADDRHI_Pos              (0U)
#define ETH_MACA2HR_ADDRHI_Msk              (0xFFFFUL << ETH_MACA2HR_ADDRHI_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACA2HR_ADDRHI                  ETH_MACA2HR_ADDRHI_Msk                              /*!< MAC Address1 [47:32] */
#define ETH_MACA2HR_ADDRHI_0                (0x1UL << ETH_MACA2HR_ADDRHI_Pos)                    /*!< 0x00000001 */
#define ETH_MACA2HR_ADDRHI_1                (0x2UL << ETH_MACA2HR_ADDRHI_Pos)                    /*!< 0x00000002 */
#define ETH_MACA2HR_ADDRHI_2                (0x4UL << ETH_MACA2HR_ADDRHI_Pos)                    /*!< 0x00000004 */
#define ETH_MACA2HR_ADDRHI_3                (0x8UL << ETH_MACA2HR_ADDRHI_Pos)                    /*!< 0x00000008 */
#define ETH_MACA2HR_ADDRHI_4                (0x10UL << ETH_MACA2HR_ADDRHI_Pos)                   /*!< 0x00000010 */
#define ETH_MACA2HR_ADDRHI_5                (0x20UL << ETH_MACA2HR_ADDRHI_Pos)                   /*!< 0x00000020 */
#define ETH_MACA2HR_ADDRHI_6                (0x40UL << ETH_MACA2HR_ADDRHI_Pos)                   /*!< 0x00000040 */
#define ETH_MACA2HR_ADDRHI_7                (0x80UL << ETH_MACA2HR_ADDRHI_Pos)                   /*!< 0x00000080 */
#define ETH_MACA2HR_ADDRHI_8                (0x100UL << ETH_MACA2HR_ADDRHI_Pos)                  /*!< 0x00000100 */
#define ETH_MACA2HR_ADDRHI_9                (0x200UL << ETH_MACA2HR_ADDRHI_Pos)                  /*!< 0x00000200 */
#define ETH_MACA2HR_ADDRHI_10               (0x400UL << ETH_MACA2HR_ADDRHI_Pos)                  /*!< 0x00000400 */
#define ETH_MACA2HR_ADDRHI_11               (0x800UL << ETH_MACA2HR_ADDRHI_Pos)                  /*!< 0x00000800 */
#define ETH_MACA2HR_ADDRHI_12               (0x1000UL << ETH_MACA2HR_ADDRHI_Pos)                 /*!< 0x00001000 */
#define ETH_MACA2HR_ADDRHI_13               (0x2000UL << ETH_MACA2HR_ADDRHI_Pos)                 /*!< 0x00002000 */
#define ETH_MACA2HR_ADDRHI_14               (0x4000UL << ETH_MACA2HR_ADDRHI_Pos)                 /*!< 0x00004000 */
#define ETH_MACA2HR_ADDRHI_15               (0x8000UL << ETH_MACA2HR_ADDRHI_Pos)                 /*!< 0x00008000 */
#define ETH_MACA2HR_MBC_Pos                 (24U)
#define ETH_MACA2HR_MBC_Msk                 (0x3FUL << ETH_MACA2HR_MBC_Pos)                      /*!< 0x3F000000 */
#define ETH_MACA2HR_MBC                     ETH_MACA2HR_MBC_Msk                                 /*!< Mask Byte Control */
#define ETH_MACA2HR_MBC_0                   (0x1UL << ETH_MACA2HR_MBC_Pos)                       /*!< 0x01000000 */
#define ETH_MACA2HR_MBC_1                   (0x2UL << ETH_MACA2HR_MBC_Pos)                       /*!< 0x02000000 */
#define ETH_MACA2HR_MBC_2                   (0x4UL << ETH_MACA2HR_MBC_Pos)                       /*!< 0x04000000 */
#define ETH_MACA2HR_MBC_3                   (0x8UL << ETH_MACA2HR_MBC_Pos)                       /*!< 0x08000000 */
#define ETH_MACA2HR_MBC_4                   (0x10UL << ETH_MACA2HR_MBC_Pos)                      /*!< 0x10000000 */
#define ETH_MACA2HR_MBC_5                   (0x20UL << ETH_MACA2HR_MBC_Pos)                      /*!< 0x20000000 */
#define ETH_MACA2HR_SA_Pos                  (30U)
#define ETH_MACA2HR_SA_Msk                  (0x1UL << ETH_MACA2HR_SA_Pos)                        /*!< 0x40000000 */
#define ETH_MACA2HR_SA                      ETH_MACA2HR_SA_Msk                                  /*!< Source Address */
#define ETH_MACA2HR_AE_Pos                  (31U)
#define ETH_MACA2HR_AE_Msk                  (0x1UL << ETH_MACA2HR_AE_Pos)                        /*!< 0x80000000 */
#define ETH_MACA2HR_AE                      ETH_MACA2HR_AE_Msk                                  /*!< Address Enable */

/**************  Bit definition for ETH_MACA2LR register  **************/
#define ETH_MACA2LR_ADDRLO_Pos              (0U)
#define ETH_MACA2LR_ADDRLO_Msk              (0xFFFFFFFFUL << ETH_MACA2LR_ADDRLO_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACA2LR_ADDRLO                  ETH_MACA2LR_ADDRLO_Msk                              /*!< MAC Address x [31:0] (x = 0 to 3) */
#define ETH_MACA2LR_ADDRLO_0                (0x1UL << ETH_MACA2LR_ADDRLO_Pos)                    /*!< 0x00000001 */
#define ETH_MACA2LR_ADDRLO_1                (0x2UL << ETH_MACA2LR_ADDRLO_Pos)                    /*!< 0x00000002 */
#define ETH_MACA2LR_ADDRLO_2                (0x4UL << ETH_MACA2LR_ADDRLO_Pos)                    /*!< 0x00000004 */
#define ETH_MACA2LR_ADDRLO_3                (0x8UL << ETH_MACA2LR_ADDRLO_Pos)                    /*!< 0x00000008 */
#define ETH_MACA2LR_ADDRLO_4                (0x10UL << ETH_MACA2LR_ADDRLO_Pos)                   /*!< 0x00000010 */
#define ETH_MACA2LR_ADDRLO_5                (0x20UL << ETH_MACA2LR_ADDRLO_Pos)                   /*!< 0x00000020 */
#define ETH_MACA2LR_ADDRLO_6                (0x40UL << ETH_MACA2LR_ADDRLO_Pos)                   /*!< 0x00000040 */
#define ETH_MACA2LR_ADDRLO_7                (0x80UL << ETH_MACA2LR_ADDRLO_Pos)                   /*!< 0x00000080 */
#define ETH_MACA2LR_ADDRLO_8                (0x100UL << ETH_MACA2LR_ADDRLO_Pos)                  /*!< 0x00000100 */
#define ETH_MACA2LR_ADDRLO_9                (0x200UL << ETH_MACA2LR_ADDRLO_Pos)                  /*!< 0x00000200 */
#define ETH_MACA2LR_ADDRLO_10               (0x400UL << ETH_MACA2LR_ADDRLO_Pos)                  /*!< 0x00000400 */
#define ETH_MACA2LR_ADDRLO_11               (0x800UL << ETH_MACA2LR_ADDRLO_Pos)                  /*!< 0x00000800 */
#define ETH_MACA2LR_ADDRLO_12               (0x1000UL << ETH_MACA2LR_ADDRLO_Pos)                 /*!< 0x00001000 */
#define ETH_MACA2LR_ADDRLO_13               (0x2000UL << ETH_MACA2LR_ADDRLO_Pos)                 /*!< 0x00002000 */
#define ETH_MACA2LR_ADDRLO_14               (0x4000UL << ETH_MACA2LR_ADDRLO_Pos)                 /*!< 0x00004000 */
#define ETH_MACA2LR_ADDRLO_15               (0x8000UL << ETH_MACA2LR_ADDRLO_Pos)                 /*!< 0x00008000 */
#define ETH_MACA2LR_ADDRLO_16               (0x10000UL << ETH_MACA2LR_ADDRLO_Pos)                /*!< 0x00010000 */
#define ETH_MACA2LR_ADDRLO_17               (0x20000UL << ETH_MACA2LR_ADDRLO_Pos)                /*!< 0x00020000 */
#define ETH_MACA2LR_ADDRLO_18               (0x40000UL << ETH_MACA2LR_ADDRLO_Pos)                /*!< 0x00040000 */
#define ETH_MACA2LR_ADDRLO_19               (0x80000UL << ETH_MACA2LR_ADDRLO_Pos)                /*!< 0x00080000 */
#define ETH_MACA2LR_ADDRLO_20               (0x100000UL << ETH_MACA2LR_ADDRLO_Pos)               /*!< 0x00100000 */
#define ETH_MACA2LR_ADDRLO_21               (0x200000UL << ETH_MACA2LR_ADDRLO_Pos)               /*!< 0x00200000 */
#define ETH_MACA2LR_ADDRLO_22               (0x400000UL << ETH_MACA2LR_ADDRLO_Pos)               /*!< 0x00400000 */
#define ETH_MACA2LR_ADDRLO_23               (0x800000UL << ETH_MACA2LR_ADDRLO_Pos)               /*!< 0x00800000 */
#define ETH_MACA2LR_ADDRLO_24               (0x1000000UL << ETH_MACA2LR_ADDRLO_Pos)              /*!< 0x01000000 */
#define ETH_MACA2LR_ADDRLO_25               (0x2000000UL << ETH_MACA2LR_ADDRLO_Pos)              /*!< 0x02000000 */
#define ETH_MACA2LR_ADDRLO_26               (0x4000000UL << ETH_MACA2LR_ADDRLO_Pos)              /*!< 0x04000000 */
#define ETH_MACA2LR_ADDRLO_27               (0x8000000UL << ETH_MACA2LR_ADDRLO_Pos)              /*!< 0x08000000 */
#define ETH_MACA2LR_ADDRLO_28               (0x10000000UL << ETH_MACA2LR_ADDRLO_Pos)             /*!< 0x10000000 */
#define ETH_MACA2LR_ADDRLO_29               (0x20000000UL << ETH_MACA2LR_ADDRLO_Pos)             /*!< 0x20000000 */
#define ETH_MACA2LR_ADDRLO_30               (0x40000000UL << ETH_MACA2LR_ADDRLO_Pos)             /*!< 0x40000000 */
#define ETH_MACA2LR_ADDRLO_31               (0x80000000UL << ETH_MACA2LR_ADDRLO_Pos)             /*!< 0x80000000 */

/**************  Bit definition for ETH_MACA3HR register  **************/
#define ETH_MACA3HR_ADDRHI_Pos              (0U)
#define ETH_MACA3HR_ADDRHI_Msk              (0xFFFFUL << ETH_MACA3HR_ADDRHI_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACA3HR_ADDRHI                  ETH_MACA3HR_ADDRHI_Msk                              /*!< MAC Address1 [47:32] */
#define ETH_MACA3HR_ADDRHI_0                (0x1UL << ETH_MACA3HR_ADDRHI_Pos)                    /*!< 0x00000001 */
#define ETH_MACA3HR_ADDRHI_1                (0x2UL << ETH_MACA3HR_ADDRHI_Pos)                    /*!< 0x00000002 */
#define ETH_MACA3HR_ADDRHI_2                (0x4UL << ETH_MACA3HR_ADDRHI_Pos)                    /*!< 0x00000004 */
#define ETH_MACA3HR_ADDRHI_3                (0x8UL << ETH_MACA3HR_ADDRHI_Pos)                    /*!< 0x00000008 */
#define ETH_MACA3HR_ADDRHI_4                (0x10UL << ETH_MACA3HR_ADDRHI_Pos)                   /*!< 0x00000010 */
#define ETH_MACA3HR_ADDRHI_5                (0x20UL << ETH_MACA3HR_ADDRHI_Pos)                   /*!< 0x00000020 */
#define ETH_MACA3HR_ADDRHI_6                (0x40UL << ETH_MACA3HR_ADDRHI_Pos)                   /*!< 0x00000040 */
#define ETH_MACA3HR_ADDRHI_7                (0x80UL << ETH_MACA3HR_ADDRHI_Pos)                   /*!< 0x00000080 */
#define ETH_MACA3HR_ADDRHI_8                (0x100UL << ETH_MACA3HR_ADDRHI_Pos)                  /*!< 0x00000100 */
#define ETH_MACA3HR_ADDRHI_9                (0x200UL << ETH_MACA3HR_ADDRHI_Pos)                  /*!< 0x00000200 */
#define ETH_MACA3HR_ADDRHI_10               (0x400UL << ETH_MACA3HR_ADDRHI_Pos)                  /*!< 0x00000400 */
#define ETH_MACA3HR_ADDRHI_11               (0x800UL << ETH_MACA3HR_ADDRHI_Pos)                  /*!< 0x00000800 */
#define ETH_MACA3HR_ADDRHI_12               (0x1000UL << ETH_MACA3HR_ADDRHI_Pos)                 /*!< 0x00001000 */
#define ETH_MACA3HR_ADDRHI_13               (0x2000UL << ETH_MACA3HR_ADDRHI_Pos)                 /*!< 0x00002000 */
#define ETH_MACA3HR_ADDRHI_14               (0x4000UL << ETH_MACA3HR_ADDRHI_Pos)                 /*!< 0x00004000 */
#define ETH_MACA3HR_ADDRHI_15               (0x8000UL << ETH_MACA3HR_ADDRHI_Pos)                 /*!< 0x00008000 */
#define ETH_MACA3HR_MBC_Pos                 (24U)
#define ETH_MACA3HR_MBC_Msk                 (0x3FUL << ETH_MACA3HR_MBC_Pos)                      /*!< 0x3F000000 */
#define ETH_MACA3HR_MBC                     ETH_MACA3HR_MBC_Msk                                 /*!< Mask Byte Control */
#define ETH_MACA3HR_MBC_0                   (0x1UL << ETH_MACA3HR_MBC_Pos)                       /*!< 0x01000000 */
#define ETH_MACA3HR_MBC_1                   (0x2UL << ETH_MACA3HR_MBC_Pos)                       /*!< 0x02000000 */
#define ETH_MACA3HR_MBC_2                   (0x4UL << ETH_MACA3HR_MBC_Pos)                       /*!< 0x04000000 */
#define ETH_MACA3HR_MBC_3                   (0x8UL << ETH_MACA3HR_MBC_Pos)                       /*!< 0x08000000 */
#define ETH_MACA3HR_MBC_4                   (0x10UL << ETH_MACA3HR_MBC_Pos)                      /*!< 0x10000000 */
#define ETH_MACA3HR_MBC_5                   (0x20UL << ETH_MACA3HR_MBC_Pos)                      /*!< 0x20000000 */
#define ETH_MACA3HR_SA_Pos                  (30U)
#define ETH_MACA3HR_SA_Msk                  (0x1UL << ETH_MACA3HR_SA_Pos)                        /*!< 0x40000000 */
#define ETH_MACA3HR_SA                      ETH_MACA3HR_SA_Msk                                  /*!< Source Address */
#define ETH_MACA3HR_AE_Pos                  (31U)
#define ETH_MACA3HR_AE_Msk                  (0x1UL << ETH_MACA3HR_AE_Pos)                        /*!< 0x80000000 */
#define ETH_MACA3HR_AE                      ETH_MACA3HR_AE_Msk                                  /*!< Address Enable */

/**************  Bit definition for ETH_MACA3LR register  **************/
#define ETH_MACA3LR_ADDRLO_Pos              (0U)
#define ETH_MACA3LR_ADDRLO_Msk              (0xFFFFFFFFUL << ETH_MACA3LR_ADDRLO_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACA3LR_ADDRLO                  ETH_MACA3LR_ADDRLO_Msk                              /*!< MAC Address x [31:0] (x = 0 to 3) */
#define ETH_MACA3LR_ADDRLO_0                (0x1UL << ETH_MACA3LR_ADDRLO_Pos)                    /*!< 0x00000001 */
#define ETH_MACA3LR_ADDRLO_1                (0x2UL << ETH_MACA3LR_ADDRLO_Pos)                    /*!< 0x00000002 */
#define ETH_MACA3LR_ADDRLO_2                (0x4UL << ETH_MACA3LR_ADDRLO_Pos)                    /*!< 0x00000004 */
#define ETH_MACA3LR_ADDRLO_3                (0x8UL << ETH_MACA3LR_ADDRLO_Pos)                    /*!< 0x00000008 */
#define ETH_MACA3LR_ADDRLO_4                (0x10UL << ETH_MACA3LR_ADDRLO_Pos)                   /*!< 0x00000010 */
#define ETH_MACA3LR_ADDRLO_5                (0x20UL << ETH_MACA3LR_ADDRLO_Pos)                   /*!< 0x00000020 */
#define ETH_MACA3LR_ADDRLO_6                (0x40UL << ETH_MACA3LR_ADDRLO_Pos)                   /*!< 0x00000040 */
#define ETH_MACA3LR_ADDRLO_7                (0x80UL << ETH_MACA3LR_ADDRLO_Pos)                   /*!< 0x00000080 */
#define ETH_MACA3LR_ADDRLO_8                (0x100UL << ETH_MACA3LR_ADDRLO_Pos)                  /*!< 0x00000100 */
#define ETH_MACA3LR_ADDRLO_9                (0x200UL << ETH_MACA3LR_ADDRLO_Pos)                  /*!< 0x00000200 */
#define ETH_MACA3LR_ADDRLO_10               (0x400UL << ETH_MACA3LR_ADDRLO_Pos)                  /*!< 0x00000400 */
#define ETH_MACA3LR_ADDRLO_11               (0x800UL << ETH_MACA3LR_ADDRLO_Pos)                  /*!< 0x00000800 */
#define ETH_MACA3LR_ADDRLO_12               (0x1000UL << ETH_MACA3LR_ADDRLO_Pos)                 /*!< 0x00001000 */
#define ETH_MACA3LR_ADDRLO_13               (0x2000UL << ETH_MACA3LR_ADDRLO_Pos)                 /*!< 0x00002000 */
#define ETH_MACA3LR_ADDRLO_14               (0x4000UL << ETH_MACA3LR_ADDRLO_Pos)                 /*!< 0x00004000 */
#define ETH_MACA3LR_ADDRLO_15               (0x8000UL << ETH_MACA3LR_ADDRLO_Pos)                 /*!< 0x00008000 */
#define ETH_MACA3LR_ADDRLO_16               (0x10000UL << ETH_MACA3LR_ADDRLO_Pos)                /*!< 0x00010000 */
#define ETH_MACA3LR_ADDRLO_17               (0x20000UL << ETH_MACA3LR_ADDRLO_Pos)                /*!< 0x00020000 */
#define ETH_MACA3LR_ADDRLO_18               (0x40000UL << ETH_MACA3LR_ADDRLO_Pos)                /*!< 0x00040000 */
#define ETH_MACA3LR_ADDRLO_19               (0x80000UL << ETH_MACA3LR_ADDRLO_Pos)                /*!< 0x00080000 */
#define ETH_MACA3LR_ADDRLO_20               (0x100000UL << ETH_MACA3LR_ADDRLO_Pos)               /*!< 0x00100000 */
#define ETH_MACA3LR_ADDRLO_21               (0x200000UL << ETH_MACA3LR_ADDRLO_Pos)               /*!< 0x00200000 */
#define ETH_MACA3LR_ADDRLO_22               (0x400000UL << ETH_MACA3LR_ADDRLO_Pos)               /*!< 0x00400000 */
#define ETH_MACA3LR_ADDRLO_23               (0x800000UL << ETH_MACA3LR_ADDRLO_Pos)               /*!< 0x00800000 */
#define ETH_MACA3LR_ADDRLO_24               (0x1000000UL << ETH_MACA3LR_ADDRLO_Pos)              /*!< 0x01000000 */
#define ETH_MACA3LR_ADDRLO_25               (0x2000000UL << ETH_MACA3LR_ADDRLO_Pos)              /*!< 0x02000000 */
#define ETH_MACA3LR_ADDRLO_26               (0x4000000UL << ETH_MACA3LR_ADDRLO_Pos)              /*!< 0x04000000 */
#define ETH_MACA3LR_ADDRLO_27               (0x8000000UL << ETH_MACA3LR_ADDRLO_Pos)              /*!< 0x08000000 */
#define ETH_MACA3LR_ADDRLO_28               (0x10000000UL << ETH_MACA3LR_ADDRLO_Pos)             /*!< 0x10000000 */
#define ETH_MACA3LR_ADDRLO_29               (0x20000000UL << ETH_MACA3LR_ADDRLO_Pos)             /*!< 0x20000000 */
#define ETH_MACA3LR_ADDRLO_30               (0x40000000UL << ETH_MACA3LR_ADDRLO_Pos)             /*!< 0x40000000 */
#define ETH_MACA3LR_ADDRLO_31               (0x80000000UL << ETH_MACA3LR_ADDRLO_Pos)             /*!< 0x80000000 */

/************  Bit definition for ETH_MMC_CONTROL register  ************/
#define ETH_MMCCR_CNTRST_Pos                (0U)
#define ETH_MMCCR_CNTRST_Msk                (0x1UL << ETH_MMCCR_CNTRST_Pos)                /*!< 0x00000001 */
#define ETH_MMCCR_CNTRST                    ETH_MMCCR_CNTRST_Msk                          /*!< Counters Reset */
#define ETH_MMCCR_CNTSTOPRO_Pos             (1U)
#define ETH_MMCCR_CNTSTOPRO_Msk             (0x1UL << ETH_MMCCR_CNTSTOPRO_Pos)             /*!< 0x00000002 */
#define ETH_MMCCR_CNTSTOPRO                 ETH_MMCCR_CNTSTOPRO_Msk                       /*!< Counter Stop Rollover */
#define ETH_MMCCR_RSTONRD_Pos               (2U)
#define ETH_MMCCR_RSTONRD_Msk               (0x1UL << ETH_MMCCR_RSTONRD_Pos)               /*!< 0x00000004 */
#define ETH_MMCCR_RSTONRD                   ETH_MMCCR_RSTONRD_Msk                         /*!< Reset on Read */
#define ETH_MMCCR_CNTFREEZ_Pos              (3U)
#define ETH_MMCCR_CNTFREEZ_Msk              (0x1UL << ETH_MMCCR_CNTFREEZ_Pos)              /*!< 0x00000008 */
#define ETH_MMCCR_CNTFREEZ                  ETH_MMCCR_CNTFREEZ_Msk                        /*!< MMC Counter Freeze */
#define ETH_MMCCR_CNTPRST_Pos               (4U)
#define ETH_MMCCR_CNTPRST_Msk               (0x1UL << ETH_MMCCR_CNTPRST_Pos)               /*!< 0x00000010 */
#define ETH_MMCCR_CNTPRST                   ETH_MMCCR_CNTPRST_Msk                         /*!< Counters Preset */
#define ETH_MMCCR_CNTPRSTLVL_Pos            (5U)
#define ETH_MMCCR_CNTPRSTLVL_Msk            (0x1UL << ETH_MMCCR_CNTPRSTLVL_Pos)            /*!< 0x00000020 */
#define ETH_MMCCR_CNTPRSTLVL                ETH_MMCCR_CNTPRSTLVL_Msk                      /*!< Full-Half Preset */
#define ETH_MMCCR_UCDBC_Pos                 (8U)
#define ETH_MMCCR_UCDBC_Msk                 (0x1UL << ETH_MMCCR_UCDBC_Pos)                 /*!< 0x00000100 */
#define ETH_MMCCR_UCDBC                     ETH_MMCCR_UCDBC_Msk                           /*!< Update MMC Counters for Dropped Broadcast Packets */

/***********  Bit definition for ETH_MMC_RX_INTERRUPT register  ************/
#define ETH_MMCRXIR_RXCRCERPIS_Pos          (5U)
#define ETH_MMCRXIR_RXCRCERPIS_Msk          (0x1UL << ETH_MMCRXIR_RXCRCERPIS_Pos)         /*!< 0x00000020 */
#define ETH_MMCRXIR_RXCRCERPIS              ETH_MMCRXIR_RXCRCERPIS_Msk                   /*!< MMC Receive CRC Error Packet Counter Interrupt Status */
#define ETH_MMCRXIR_RXALGNERPIS_Pos         (6U)
#define ETH_MMCRXIR_RXALGNERPIS_Msk         (0x1UL << ETH_MMCRXIR_RXALGNERPIS_Pos)        /*!< 0x00000040 */
#define ETH_MMCRXIR_RXALGNERPIS             ETH_MMCRXIR_RXALGNERPIS_Msk                  /*!< MMC Receive Alignment Error Packet Counter Interrupt Status */
#define ETH_MMCRXIR_RXUCGPIS_Pos            (17U)
#define ETH_MMCRXIR_RXUCGPIS_Msk            (0x1UL << ETH_MMCRXIR_RXUCGPIS_Pos)           /*!< 0x00020000 */
#define ETH_MMCRXIR_RXUCGPIS                ETH_MMCRXIR_RXUCGPIS_Msk                     /*!< MMC Receive Unicast Good Packet Counter Interrupt Status */
#define ETH_MMCRXIR_RXLPIUSCIS_Pos          (26U)
#define ETH_MMCRXIR_RXLPIUSCIS_Msk          (0x1UL << ETH_MMCRXIR_RXLPIUSCIS_Pos)         /*!< 0x04000000 */
#define ETH_MMCRXIR_RXLPIUSCIS              ETH_MMCRXIR_RXLPIUSCIS_Msk                   /*!< MMC Receive LPI microsecond counter interrupt status */
#define ETH_MMCRXIR_RXLPITRCIS_Pos          (27U)
#define ETH_MMCRXIR_RXLPITRCIS_Msk          (0x1UL << ETH_MMCRXIR_RXLPITRCIS_Pos)         /*!< 0x08000000 */
#define ETH_MMCRXIR_RXLPITRCIS              ETH_MMCRXIR_RXLPITRCIS_Msk                   /*!< MMC Receive LPI transition counter interrupt status */

/***********  Bit definition for ETH_MMC_TX_INTERRUPT register  ************/
#define ETH_MMCTXIR_TXSCOLGPIS_Pos          (14U)
#define ETH_MMCTXIR_TXSCOLGPIS_Msk          (0x1UL << ETH_MMCTXIR_TXSCOLGPIS_Pos)         /*!< 0x00004000 */
#define ETH_MMCTXIR_TXSCOLGPIS              ETH_MMCTXIR_TXSCOLGPIS_Msk                   /*!< MMC Transmit Single Collision Good Packet Counter Interrupt Status */
#define ETH_MMCTXIR_TXMCOLGPIS_Pos          (15U)
#define ETH_MMCTXIR_TXMCOLGPIS_Msk          (0x1UL << ETH_MMCTXIR_TXMCOLGPIS_Pos)         /*!< 0x00008000 */
#define ETH_MMCTXIR_TXMCOLGPIS              ETH_MMCTXIR_TXMCOLGPIS_Msk                   /*!< MMC Transmit Multiple Collision Good Packet Counter Interrupt Status */
#define ETH_MMCTXIR_TXGPKTIS_Pos            (21U)
#define ETH_MMCTXIR_TXGPKTIS_Msk            (0x1UL << ETH_MMCTXIR_TXGPKTIS_Pos)           /*!< 0x00200000 */
#define ETH_MMCTXIR_TXGPKTIS                ETH_MMCTXIR_TXGPKTIS_Msk                     /*!< MMC Transmit Good Packet Counter Interrupt Status */
#define ETH_MMCTXIR_TXLPIUSCIS_Pos          (26U)
#define ETH_MMCTXIR_TXLPIUSCIS_Msk          (0x1UL << ETH_MMCTXIR_TXLPIUSCIS_Pos)         /*!< 0x04000000 */
#define ETH_MMCTXIR_TXLPIUSCIS              ETH_MMCTXIR_TXLPIUSCIS_Msk                   /*!< MMC Transmit LPI microsecond counter interrupt status */
#define ETH_MMCTXIR_TXLPITRCIS_Pos          (27U)
#define ETH_MMCTXIR_TXLPITRCIS_Msk          (0x1UL << ETH_MMCTXIR_TXLPITRCIS_Pos)         /*!< 0x08000000 */
#define ETH_MMCTXIR_TXLPITRCIS              ETH_MMCTXIR_TXLPITRCIS_Msk                   /*!< MMC Transmit LPI transition counter interrupt status */

/**********  Bit definition for ETH_MMC_RX_INTERRUPT_MASK register  ***********/
#define ETH_MMCRXIMR_RXCRCERPIM_Pos         (5U)
#define ETH_MMCRXIMR_RXCRCERPIM_Msk         (0x1UL << ETH_MMCRXIMR_RXCRCERPIM_Pos)         /*!< 0x00000020 */
#define ETH_MMCRXIMR_RXCRCERPIM             ETH_MMCRXIMR_RXCRCERPIM_Msk                   /*!< MMC Receive CRC Error Packet Counter Interrupt Mask */
#define ETH_MMCRXIMR_RXALGNERPIM_Pos        (6U)
#define ETH_MMCRXIMR_RXALGNERPIM_Msk        (0x1UL << ETH_MMCRXIMR_RXALGNERPIM_Pos)        /*!< 0x00000040 */
#define ETH_MMCRXIMR_RXALGNERPIM            ETH_MMCRXIMR_RXALGNERPIM_Msk                  /*!< MMC Receive Alignment Error Packet Counter Interrupt Mask */
#define ETH_MMCRXIMR_RXUCGPIM_Pos           (17U)
#define ETH_MMCRXIMR_RXUCGPIM_Msk           (0x1UL << ETH_MMCRXIMR_RXUCGPIM_Pos)           /*!< 0x00020000 */
#define ETH_MMCRXIMR_RXUCGPIM               ETH_MMCRXIMR_RXUCGPIM_Msk                     /*!< MMC Receive Unicast Good Packet Counter Interrupt Mask */
#define ETH_MMCRXIMR_RXLPIUSCIM_Pos         (26U)
#define ETH_MMCRXIMR_RXLPIUSCIM_Msk         (0x1UL << ETH_MMCRXIMR_RXLPIUSCIM_Pos)         /*!< 0x04000000 */
#define ETH_MMCRXIMR_RXLPIUSCIM             ETH_MMCRXIMR_RXLPIUSCIM_Msk                   /*!< MMC Receive LPI microsecond counter interrupt Mask */
#define ETH_MMCRXIMR_RXLPITRCIM_Pos         (27U)
#define ETH_MMCRXIMR_RXLPITRCIM_Msk         (0x1UL << ETH_MMCRXIMR_RXLPITRCIM_Pos)         /*!< 0x08000000 */
#define ETH_MMCRXIMR_RXLPITRCIM             ETH_MMCRXIMR_RXLPITRCIM_Msk                   /*!< MMC Receive LPI transition counter interrupt Mask */

/**********  Bit definition for ETH_MMC_TX_INTERRUPT_MASK register  ***********/
#define ETH_MMCTXIMR_TXSCOLGPIM_Pos         (14U)
#define ETH_MMCTXIMR_TXSCOLGPIM_Msk         (0x1UL << ETH_MMCTXIMR_TXSCOLGPIM_Pos)        /*!< 0x00004000 */
#define ETH_MMCTXIMR_TXSCOLGPIM             ETH_MMCTXIMR_TXSCOLGPIM_Msk                  /*!< MMC Transmit Single Collision Good Packet Counter Interrupt Mask */
#define ETH_MMCTXIMR_TXMCOLGPIM_Pos         (15U)
#define ETH_MMCTXIMR_TXMCOLGPIM_Msk         (0x1UL << ETH_MMCTXIMR_TXMCOLGPIM_Pos)        /*!< 0x00008000 */
#define ETH_MMCTXIMR_TXMCOLGPIM             ETH_MMCTXIMR_TXMCOLGPIM_Msk                  /*!< MMC Transmit Multiple Collision Good Packet Counter Interrupt Mask */
#define ETH_MMCTXIMR_TXGPKTIM_Pos           (21U)
#define ETH_MMCTXIMR_TXGPKTIM_Msk           (0x1UL << ETH_MMCTXIMR_TXGPKTIM_Pos)          /*!< 0x00200000 */
#define ETH_MMCTXIMR_TXGPKTIM               ETH_MMCTXIMR_TXGPKTIM_Msk                    /*!< MMC Transmit Good Packet Counter Interrupt Mask */
#define ETH_MMCTXIMR_TXLPIUSCIM_Pos         (26U)
#define ETH_MMCTXIMR_TXLPIUSCIM_Msk         (0x1UL << ETH_MMCTXIMR_TXLPIUSCIM_Pos)        /*!< 0x04000000 */
#define ETH_MMCTXIMR_TXLPIUSCIM             ETH_MMCTXIMR_TXLPIUSCIM_Msk                  /*!< MMC Transmit LPI microsecond counter interrupt Mask */
#define ETH_MMCTXIMR_TXLPITRCIM_Pos         (27U)
#define ETH_MMCTXIMR_TXLPITRCIM_Msk         (0x1UL << ETH_MMCTXIMR_TXLPITRCIM_Pos)        /*!< 0x08000000 */
#define ETH_MMCTXIMR_TXLPITRCIM             ETH_MMCTXIMR_TXLPITRCIM_Msk                  /*!< MMC Transmit LPI transition counter interrupt Mask */

/***********  Bit definition for ETH_MMC_TX_SINGLE_COLLISION_GOOD_PACKETS register  ************/
#define ETH_MMCTXSCGPR_TXSNGLCOLG_Pos       (0U)
#define ETH_MMCTXSCGPR_TXSNGLCOLG_Msk       (0xFFFFFFFFUL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCTXSCGPR_TXSNGLCOLG           ETH_MMCTXSCGPR_TXSNGLCOLG_Msk                  /*!< Tx Single Collision Good Packets */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_0         (0x1UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)        /*!< 0x00000001 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_1         (0x2UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)        /*!< 0x00000002 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_2         (0x4UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)        /*!< 0x00000004 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_3         (0x8UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)        /*!< 0x00000008 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_4         (0x10UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)       /*!< 0x00000010 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_5         (0x20UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)       /*!< 0x00000020 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_6         (0x40UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)       /*!< 0x00000040 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_7         (0x80UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)       /*!< 0x00000080 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_8         (0x100UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)      /*!< 0x00000100 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_9         (0x200UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)      /*!< 0x00000200 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_10        (0x400UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)      /*!< 0x00000400 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_11        (0x800UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)      /*!< 0x00000800 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_12        (0x1000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)     /*!< 0x00001000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_13        (0x2000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)     /*!< 0x00002000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_14        (0x4000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)     /*!< 0x00004000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_15        (0x8000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)     /*!< 0x00008000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_16        (0x10000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)    /*!< 0x00010000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_17        (0x20000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)    /*!< 0x00020000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_18        (0x40000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)    /*!< 0x00040000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_19        (0x80000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)    /*!< 0x00080000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_20        (0x100000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)   /*!< 0x00100000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_21        (0x200000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)   /*!< 0x00200000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_22        (0x400000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)   /*!< 0x00400000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_23        (0x800000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)   /*!< 0x00800000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_24        (0x1000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)  /*!< 0x01000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_25        (0x2000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)  /*!< 0x02000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_26        (0x4000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)  /*!< 0x04000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_27        (0x8000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos)  /*!< 0x08000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_28        (0x10000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos) /*!< 0x10000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_29        (0x20000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos) /*!< 0x20000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_30        (0x40000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos) /*!< 0x40000000 */
#define ETH_MMCTXSCGPR_TXSNGLCOLG_31        (0x80000000UL << ETH_MMCTXSCGPR_TXSNGLCOLG_Pos) /*!< 0x80000000 */

/***********  Bit definition for ETH_MMC_TX_MULTIPLE_COLLISION_GOOD_PACKETS register  ************/
#define ETH_MMCTXMCGPR_TXMULTCOLG_Pos       (0U)
#define ETH_MMCTXMCGPR_TXMULTCOLG_Msk       (0xFFFFFFFFUL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCTXMCGPR_TXMULTCOLG           ETH_MMCTXMCGPR_TXMULTCOLG_Msk                  /*!< Tx Multiple Collision Good Packets */
#define ETH_MMCTXMCGPR_TXMULTCOLG_0         (0x1UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)        /*!< 0x00000001 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_1         (0x2UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)        /*!< 0x00000002 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_2         (0x4UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)        /*!< 0x00000004 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_3         (0x8UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)        /*!< 0x00000008 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_4         (0x10UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)       /*!< 0x00000010 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_5         (0x20UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)       /*!< 0x00000020 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_6         (0x40UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)       /*!< 0x00000040 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_7         (0x80UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)       /*!< 0x00000080 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_8         (0x100UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)      /*!< 0x00000100 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_9         (0x200UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)      /*!< 0x00000200 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_10        (0x400UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)      /*!< 0x00000400 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_11        (0x800UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)      /*!< 0x00000800 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_12        (0x1000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)     /*!< 0x00001000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_13        (0x2000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)     /*!< 0x00002000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_14        (0x4000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)     /*!< 0x00004000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_15        (0x8000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)     /*!< 0x00008000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_16        (0x10000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)    /*!< 0x00010000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_17        (0x20000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)    /*!< 0x00020000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_18        (0x40000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)    /*!< 0x00040000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_19        (0x80000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)    /*!< 0x00080000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_20        (0x100000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)   /*!< 0x00100000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_21        (0x200000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)   /*!< 0x00200000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_22        (0x400000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)   /*!< 0x00400000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_23        (0x800000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)   /*!< 0x00800000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_24        (0x1000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)  /*!< 0x01000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_25        (0x2000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)  /*!< 0x02000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_26        (0x4000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)  /*!< 0x04000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_27        (0x8000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos)  /*!< 0x08000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_28        (0x10000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos) /*!< 0x10000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_29        (0x20000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos) /*!< 0x20000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_30        (0x40000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos) /*!< 0x40000000 */
#define ETH_MMCTXMCGPR_TXMULTCOLG_31        (0x80000000UL << ETH_MMCTXMCGPR_TXMULTCOLG_Pos) /*!< 0x80000000 */

/************  Bit definition for ETH_MMC_TX_PACKET_COUNT_GOOD register  *************/
#define ETH_MMCTXPCGR_TXPKTG_Pos            (0U)
#define ETH_MMCTXPCGR_TXPKTG_Msk            (0xFFFFFFFFUL << ETH_MMCTXPCGR_TXPKTG_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCTXPCGR_TXPKTG                ETH_MMCTXPCGR_TXPKTG_Msk                  /*!< Tx Packet Count Good */
#define ETH_MMCTXPCGR_TXPKTG_0              (0x1UL << ETH_MMCTXPCGR_TXPKTG_Pos)        /*!< 0x00000001 */
#define ETH_MMCTXPCGR_TXPKTG_1              (0x2UL << ETH_MMCTXPCGR_TXPKTG_Pos)        /*!< 0x00000002 */
#define ETH_MMCTXPCGR_TXPKTG_2              (0x4UL << ETH_MMCTXPCGR_TXPKTG_Pos)        /*!< 0x00000004 */
#define ETH_MMCTXPCGR_TXPKTG_3              (0x8UL << ETH_MMCTXPCGR_TXPKTG_Pos)        /*!< 0x00000008 */
#define ETH_MMCTXPCGR_TXPKTG_4              (0x10UL << ETH_MMCTXPCGR_TXPKTG_Pos)       /*!< 0x00000010 */
#define ETH_MMCTXPCGR_TXPKTG_5              (0x20UL << ETH_MMCTXPCGR_TXPKTG_Pos)       /*!< 0x00000020 */
#define ETH_MMCTXPCGR_TXPKTG_6              (0x40UL << ETH_MMCTXPCGR_TXPKTG_Pos)       /*!< 0x00000040 */
#define ETH_MMCTXPCGR_TXPKTG_7              (0x80UL << ETH_MMCTXPCGR_TXPKTG_Pos)       /*!< 0x00000080 */
#define ETH_MMCTXPCGR_TXPKTG_8              (0x100UL << ETH_MMCTXPCGR_TXPKTG_Pos)      /*!< 0x00000100 */
#define ETH_MMCTXPCGR_TXPKTG_9              (0x200UL << ETH_MMCTXPCGR_TXPKTG_Pos)      /*!< 0x00000200 */
#define ETH_MMCTXPCGR_TXPKTG_10             (0x400UL << ETH_MMCTXPCGR_TXPKTG_Pos)      /*!< 0x00000400 */
#define ETH_MMCTXPCGR_TXPKTG_11             (0x800UL << ETH_MMCTXPCGR_TXPKTG_Pos)      /*!< 0x00000800 */
#define ETH_MMCTXPCGR_TXPKTG_12             (0x1000UL << ETH_MMCTXPCGR_TXPKTG_Pos)     /*!< 0x00001000 */
#define ETH_MMCTXPCGR_TXPKTG_13             (0x2000UL << ETH_MMCTXPCGR_TXPKTG_Pos)     /*!< 0x00002000 */
#define ETH_MMCTXPCGR_TXPKTG_14             (0x4000UL << ETH_MMCTXPCGR_TXPKTG_Pos)     /*!< 0x00004000 */
#define ETH_MMCTXPCGR_TXPKTG_15             (0x8000UL << ETH_MMCTXPCGR_TXPKTG_Pos)     /*!< 0x00008000 */
#define ETH_MMCTXPCGR_TXPKTG_16             (0x10000UL << ETH_MMCTXPCGR_TXPKTG_Pos)    /*!< 0x00010000 */
#define ETH_MMCTXPCGR_TXPKTG_17             (0x20000UL << ETH_MMCTXPCGR_TXPKTG_Pos)    /*!< 0x00020000 */
#define ETH_MMCTXPCGR_TXPKTG_18             (0x40000UL << ETH_MMCTXPCGR_TXPKTG_Pos)    /*!< 0x00040000 */
#define ETH_MMCTXPCGR_TXPKTG_19             (0x80000UL << ETH_MMCTXPCGR_TXPKTG_Pos)    /*!< 0x00080000 */
#define ETH_MMCTXPCGR_TXPKTG_20             (0x100000UL << ETH_MMCTXPCGR_TXPKTG_Pos)   /*!< 0x00100000 */
#define ETH_MMCTXPCGR_TXPKTG_21             (0x200000UL << ETH_MMCTXPCGR_TXPKTG_Pos)   /*!< 0x00200000 */
#define ETH_MMCTXPCGR_TXPKTG_22             (0x400000UL << ETH_MMCTXPCGR_TXPKTG_Pos)   /*!< 0x00400000 */
#define ETH_MMCTXPCGR_TXPKTG_23             (0x800000UL << ETH_MMCTXPCGR_TXPKTG_Pos)   /*!< 0x00800000 */
#define ETH_MMCTXPCGR_TXPKTG_24             (0x1000000UL << ETH_MMCTXPCGR_TXPKTG_Pos)  /*!< 0x01000000 */
#define ETH_MMCTXPCGR_TXPKTG_25             (0x2000000UL << ETH_MMCTXPCGR_TXPKTG_Pos)  /*!< 0x02000000 */
#define ETH_MMCTXPCGR_TXPKTG_26             (0x4000000UL << ETH_MMCTXPCGR_TXPKTG_Pos)  /*!< 0x04000000 */
#define ETH_MMCTXPCGR_TXPKTG_27             (0x8000000UL << ETH_MMCTXPCGR_TXPKTG_Pos)  /*!< 0x08000000 */
#define ETH_MMCTXPCGR_TXPKTG_28             (0x10000000UL << ETH_MMCTXPCGR_TXPKTG_Pos) /*!< 0x10000000 */
#define ETH_MMCTXPCGR_TXPKTG_29             (0x20000000UL << ETH_MMCTXPCGR_TXPKTG_Pos) /*!< 0x20000000 */
#define ETH_MMCTXPCGR_TXPKTG_30             (0x40000000UL << ETH_MMCTXPCGR_TXPKTG_Pos) /*!< 0x40000000 */
#define ETH_MMCTXPCGR_TXPKTG_31             (0x80000000UL << ETH_MMCTXPCGR_TXPKTG_Pos) /*!< 0x80000000 */

/***********  Bit definition for ETH_MMC_RX_CRC_ERROR_PACKETS register  ***********/
#define ETH_MMCRXCRCEPR_RXCRCERR_Pos        (0U)
#define ETH_MMCRXCRCEPR_RXCRCERR_Msk        (0xFFFFFFFFUL << ETH_MMCRXCRCEPR_RXCRCERR_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCRXCRCEPR_RXCRCERR            ETH_MMCRXCRCEPR_RXCRCERR_Msk                  /*!< Rx CRC Error Packets */
#define ETH_MMCRXCRCEPR_RXCRCERR_0          (0x1UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)        /*!< 0x00000001 */
#define ETH_MMCRXCRCEPR_RXCRCERR_1          (0x2UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)        /*!< 0x00000002 */
#define ETH_MMCRXCRCEPR_RXCRCERR_2          (0x4UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)        /*!< 0x00000004 */
#define ETH_MMCRXCRCEPR_RXCRCERR_3          (0x8UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)        /*!< 0x00000008 */
#define ETH_MMCRXCRCEPR_RXCRCERR_4          (0x10UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)       /*!< 0x00000010 */
#define ETH_MMCRXCRCEPR_RXCRCERR_5          (0x20UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)       /*!< 0x00000020 */
#define ETH_MMCRXCRCEPR_RXCRCERR_6          (0x40UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)       /*!< 0x00000040 */
#define ETH_MMCRXCRCEPR_RXCRCERR_7          (0x80UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)       /*!< 0x00000080 */
#define ETH_MMCRXCRCEPR_RXCRCERR_8          (0x100UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)      /*!< 0x00000100 */
#define ETH_MMCRXCRCEPR_RXCRCERR_9          (0x200UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)      /*!< 0x00000200 */
#define ETH_MMCRXCRCEPR_RXCRCERR_10         (0x400UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)      /*!< 0x00000400 */
#define ETH_MMCRXCRCEPR_RXCRCERR_11         (0x800UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)      /*!< 0x00000800 */
#define ETH_MMCRXCRCEPR_RXCRCERR_12         (0x1000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)     /*!< 0x00001000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_13         (0x2000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)     /*!< 0x00002000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_14         (0x4000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)     /*!< 0x00004000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_15         (0x8000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)     /*!< 0x00008000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_16         (0x10000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)    /*!< 0x00010000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_17         (0x20000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)    /*!< 0x00020000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_18         (0x40000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)    /*!< 0x00040000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_19         (0x80000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)    /*!< 0x00080000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_20         (0x100000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)   /*!< 0x00100000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_21         (0x200000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)   /*!< 0x00200000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_22         (0x400000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)   /*!< 0x00400000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_23         (0x800000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)   /*!< 0x00800000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_24         (0x1000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)  /*!< 0x01000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_25         (0x2000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)  /*!< 0x02000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_26         (0x4000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)  /*!< 0x04000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_27         (0x8000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos)  /*!< 0x08000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_28         (0x10000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos) /*!< 0x10000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_29         (0x20000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos) /*!< 0x20000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_30         (0x40000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos) /*!< 0x40000000 */
#define ETH_MMCRXCRCEPR_RXCRCERR_31         (0x80000000UL << ETH_MMCRXCRCEPR_RXCRCERR_Pos) /*!< 0x80000000 */

/***********  Bit definition for ETH_MMC_RX_ALIGNMENT_ERROR_PACKETS register  ***********/
#define ETH_MMCRXAEPR_RXALGNERR_Pos         (0U)
#define ETH_MMCRXAEPR_RXALGNERR_Msk         (0xFFFFFFFFUL << ETH_MMCRXAEPR_RXALGNERR_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCRXAEPR_RXALGNERR             ETH_MMCRXAEPR_RXALGNERR_Msk                  /*!< Rx Alignment Error Packets */
#define ETH_MMCRXAEPR_RXALGNERR_0           (0x1UL << ETH_MMCRXAEPR_RXALGNERR_Pos)        /*!< 0x00000001 */
#define ETH_MMCRXAEPR_RXALGNERR_1           (0x2UL << ETH_MMCRXAEPR_RXALGNERR_Pos)        /*!< 0x00000002 */
#define ETH_MMCRXAEPR_RXALGNERR_2           (0x4UL << ETH_MMCRXAEPR_RXALGNERR_Pos)        /*!< 0x00000004 */
#define ETH_MMCRXAEPR_RXALGNERR_3           (0x8UL << ETH_MMCRXAEPR_RXALGNERR_Pos)        /*!< 0x00000008 */
#define ETH_MMCRXAEPR_RXALGNERR_4           (0x10UL << ETH_MMCRXAEPR_RXALGNERR_Pos)       /*!< 0x00000010 */
#define ETH_MMCRXAEPR_RXALGNERR_5           (0x20UL << ETH_MMCRXAEPR_RXALGNERR_Pos)       /*!< 0x00000020 */
#define ETH_MMCRXAEPR_RXALGNERR_6           (0x40UL << ETH_MMCRXAEPR_RXALGNERR_Pos)       /*!< 0x00000040 */
#define ETH_MMCRXAEPR_RXALGNERR_7           (0x80UL << ETH_MMCRXAEPR_RXALGNERR_Pos)       /*!< 0x00000080 */
#define ETH_MMCRXAEPR_RXALGNERR_8           (0x100UL << ETH_MMCRXAEPR_RXALGNERR_Pos)      /*!< 0x00000100 */
#define ETH_MMCRXAEPR_RXALGNERR_9           (0x200UL << ETH_MMCRXAEPR_RXALGNERR_Pos)      /*!< 0x00000200 */
#define ETH_MMCRXAEPR_RXALGNERR_10          (0x400UL << ETH_MMCRXAEPR_RXALGNERR_Pos)      /*!< 0x00000400 */
#define ETH_MMCRXAEPR_RXALGNERR_11          (0x800UL << ETH_MMCRXAEPR_RXALGNERR_Pos)      /*!< 0x00000800 */
#define ETH_MMCRXAEPR_RXALGNERR_12          (0x1000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)     /*!< 0x00001000 */
#define ETH_MMCRXAEPR_RXALGNERR_13          (0x2000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)     /*!< 0x00002000 */
#define ETH_MMCRXAEPR_RXALGNERR_14          (0x4000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)     /*!< 0x00004000 */
#define ETH_MMCRXAEPR_RXALGNERR_15          (0x8000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)     /*!< 0x00008000 */
#define ETH_MMCRXAEPR_RXALGNERR_16          (0x10000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)    /*!< 0x00010000 */
#define ETH_MMCRXAEPR_RXALGNERR_17          (0x20000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)    /*!< 0x00020000 */
#define ETH_MMCRXAEPR_RXALGNERR_18          (0x40000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)    /*!< 0x00040000 */
#define ETH_MMCRXAEPR_RXALGNERR_19          (0x80000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)    /*!< 0x00080000 */
#define ETH_MMCRXAEPR_RXALGNERR_20          (0x100000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)   /*!< 0x00100000 */
#define ETH_MMCRXAEPR_RXALGNERR_21          (0x200000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)   /*!< 0x00200000 */
#define ETH_MMCRXAEPR_RXALGNERR_22          (0x400000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)   /*!< 0x00400000 */
#define ETH_MMCRXAEPR_RXALGNERR_23          (0x800000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)   /*!< 0x00800000 */
#define ETH_MMCRXAEPR_RXALGNERR_24          (0x1000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)  /*!< 0x01000000 */
#define ETH_MMCRXAEPR_RXALGNERR_25          (0x2000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)  /*!< 0x02000000 */
#define ETH_MMCRXAEPR_RXALGNERR_26          (0x4000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)  /*!< 0x04000000 */
#define ETH_MMCRXAEPR_RXALGNERR_27          (0x8000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos)  /*!< 0x08000000 */
#define ETH_MMCRXAEPR_RXALGNERR_28          (0x10000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos) /*!< 0x10000000 */
#define ETH_MMCRXAEPR_RXALGNERR_29          (0x20000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos) /*!< 0x20000000 */
#define ETH_MMCRXAEPR_RXALGNERR_30          (0x40000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos) /*!< 0x40000000 */
#define ETH_MMCRXAEPR_RXALGNERR_31          (0x80000000UL << ETH_MMCRXAEPR_RXALGNERR_Pos) /*!< 0x80000000 */

/***********  Bit definition for ETH_MMC_RX_UNICAST_PACKETS_GOOD register  ************/
#define ETH_MMCRXUPGR_RXUCASTG_Pos          (0U)
#define ETH_MMCRXUPGR_RXUCASTG_Msk          (0xFFFFFFFFUL << ETH_MMCRXUPGR_RXUCASTG_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCRXUPGR_RXUCASTG              ETH_MMCRXUPGR_RXUCASTG_Msk                  /*!< Rx Unicast Packets Good */
#define ETH_MMCRXUPGR_RXUCASTG_0            (0x1UL << ETH_MMCRXUPGR_RXUCASTG_Pos)        /*!< 0x00000001 */
#define ETH_MMCRXUPGR_RXUCASTG_1            (0x2UL << ETH_MMCRXUPGR_RXUCASTG_Pos)        /*!< 0x00000002 */
#define ETH_MMCRXUPGR_RXUCASTG_2            (0x4UL << ETH_MMCRXUPGR_RXUCASTG_Pos)        /*!< 0x00000004 */
#define ETH_MMCRXUPGR_RXUCASTG_3            (0x8UL << ETH_MMCRXUPGR_RXUCASTG_Pos)        /*!< 0x00000008 */
#define ETH_MMCRXUPGR_RXUCASTG_4            (0x10UL << ETH_MMCRXUPGR_RXUCASTG_Pos)       /*!< 0x00000010 */
#define ETH_MMCRXUPGR_RXUCASTG_5            (0x20UL << ETH_MMCRXUPGR_RXUCASTG_Pos)       /*!< 0x00000020 */
#define ETH_MMCRXUPGR_RXUCASTG_6            (0x40UL << ETH_MMCRXUPGR_RXUCASTG_Pos)       /*!< 0x00000040 */
#define ETH_MMCRXUPGR_RXUCASTG_7            (0x80UL << ETH_MMCRXUPGR_RXUCASTG_Pos)       /*!< 0x00000080 */
#define ETH_MMCRXUPGR_RXUCASTG_8            (0x100UL << ETH_MMCRXUPGR_RXUCASTG_Pos)      /*!< 0x00000100 */
#define ETH_MMCRXUPGR_RXUCASTG_9            (0x200UL << ETH_MMCRXUPGR_RXUCASTG_Pos)      /*!< 0x00000200 */
#define ETH_MMCRXUPGR_RXUCASTG_10           (0x400UL << ETH_MMCRXUPGR_RXUCASTG_Pos)      /*!< 0x00000400 */
#define ETH_MMCRXUPGR_RXUCASTG_11           (0x800UL << ETH_MMCRXUPGR_RXUCASTG_Pos)      /*!< 0x00000800 */
#define ETH_MMCRXUPGR_RXUCASTG_12           (0x1000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)     /*!< 0x00001000 */
#define ETH_MMCRXUPGR_RXUCASTG_13           (0x2000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)     /*!< 0x00002000 */
#define ETH_MMCRXUPGR_RXUCASTG_14           (0x4000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)     /*!< 0x00004000 */
#define ETH_MMCRXUPGR_RXUCASTG_15           (0x8000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)     /*!< 0x00008000 */
#define ETH_MMCRXUPGR_RXUCASTG_16           (0x10000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)    /*!< 0x00010000 */
#define ETH_MMCRXUPGR_RXUCASTG_17           (0x20000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)    /*!< 0x00020000 */
#define ETH_MMCRXUPGR_RXUCASTG_18           (0x40000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)    /*!< 0x00040000 */
#define ETH_MMCRXUPGR_RXUCASTG_19           (0x80000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)    /*!< 0x00080000 */
#define ETH_MMCRXUPGR_RXUCASTG_20           (0x100000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)   /*!< 0x00100000 */
#define ETH_MMCRXUPGR_RXUCASTG_21           (0x200000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)   /*!< 0x00200000 */
#define ETH_MMCRXUPGR_RXUCASTG_22           (0x400000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)   /*!< 0x00400000 */
#define ETH_MMCRXUPGR_RXUCASTG_23           (0x800000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)   /*!< 0x00800000 */
#define ETH_MMCRXUPGR_RXUCASTG_24           (0x1000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)  /*!< 0x01000000 */
#define ETH_MMCRXUPGR_RXUCASTG_25           (0x2000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)  /*!< 0x02000000 */
#define ETH_MMCRXUPGR_RXUCASTG_26           (0x4000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)  /*!< 0x04000000 */
#define ETH_MMCRXUPGR_RXUCASTG_27           (0x8000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos)  /*!< 0x08000000 */
#define ETH_MMCRXUPGR_RXUCASTG_28           (0x10000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos) /*!< 0x10000000 */
#define ETH_MMCRXUPGR_RXUCASTG_29           (0x20000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos) /*!< 0x20000000 */
#define ETH_MMCRXUPGR_RXUCASTG_30           (0x40000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos) /*!< 0x40000000 */
#define ETH_MMCRXUPGR_RXUCASTG_31           (0x80000000UL << ETH_MMCRXUPGR_RXUCASTG_Pos) /*!< 0x80000000 */

/*************  Bit definition for ETH_MMC_TX_LPI_USEC_CNTR register  *************/
#define ETH_MMCTXLPIMSTR_TXLPIUSC_Pos       (0U)
#define ETH_MMCTXLPIMSTR_TXLPIUSC_Msk       (0xFFFFFFFFUL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCTXLPIMSTR_TXLPIUSC           ETH_MMCTXLPIMSTR_TXLPIUSC_Msk                  /*!< Tx LPI Microseconds Counter */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_0         (0x1UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)        /*!< 0x00000001 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_1         (0x2UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)        /*!< 0x00000002 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_2         (0x4UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)        /*!< 0x00000004 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_3         (0x8UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)        /*!< 0x00000008 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_4         (0x10UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)       /*!< 0x00000010 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_5         (0x20UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)       /*!< 0x00000020 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_6         (0x40UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)       /*!< 0x00000040 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_7         (0x80UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)       /*!< 0x00000080 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_8         (0x100UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)      /*!< 0x00000100 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_9         (0x200UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)      /*!< 0x00000200 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_10        (0x400UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)      /*!< 0x00000400 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_11        (0x800UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)      /*!< 0x00000800 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_12        (0x1000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)     /*!< 0x00001000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_13        (0x2000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)     /*!< 0x00002000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_14        (0x4000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)     /*!< 0x00004000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_15        (0x8000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)     /*!< 0x00008000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_16        (0x10000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)    /*!< 0x00010000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_17        (0x20000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)    /*!< 0x00020000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_18        (0x40000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)    /*!< 0x00040000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_19        (0x80000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)    /*!< 0x00080000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_20        (0x100000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)   /*!< 0x00100000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_21        (0x200000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)   /*!< 0x00200000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_22        (0x400000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)   /*!< 0x00400000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_23        (0x800000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)   /*!< 0x00800000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_24        (0x1000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)  /*!< 0x01000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_25        (0x2000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)  /*!< 0x02000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_26        (0x4000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)  /*!< 0x04000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_27        (0x8000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos)  /*!< 0x08000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_28        (0x10000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos) /*!< 0x10000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_29        (0x20000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos) /*!< 0x20000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_30        (0x40000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos) /*!< 0x40000000 */
#define ETH_MMCTXLPIMSTR_TXLPIUSC_31        (0x80000000UL << ETH_MMCTXLPIMSTR_TXLPIUSC_Pos) /*!< 0x80000000 */

/*************  Bit definition for ETH_MMC_TX_LPI_TRAN_CNTR register  *************/
#define ETH_MMCTXLPITCR_TXLPITRC_Pos        (0U)
#define ETH_MMCTXLPITCR_TXLPITRC_Msk        (0xFFFFFFFFUL << ETH_MMCTXLPITCR_TXLPITRC_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCTXLPITCR_TXLPITRC            ETH_MMCTXLPITCR_TXLPITRC_Msk                  /*!< Tx LPI Transition counter */
#define ETH_MMCTXLPITCR_TXLPITRC_0          (0x1UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)        /*!< 0x00000001 */
#define ETH_MMCTXLPITCR_TXLPITRC_1          (0x2UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)        /*!< 0x00000002 */
#define ETH_MMCTXLPITCR_TXLPITRC_2          (0x4UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)        /*!< 0x00000004 */
#define ETH_MMCTXLPITCR_TXLPITRC_3          (0x8UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)        /*!< 0x00000008 */
#define ETH_MMCTXLPITCR_TXLPITRC_4          (0x10UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)       /*!< 0x00000010 */
#define ETH_MMCTXLPITCR_TXLPITRC_5          (0x20UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)       /*!< 0x00000020 */
#define ETH_MMCTXLPITCR_TXLPITRC_6          (0x40UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)       /*!< 0x00000040 */
#define ETH_MMCTXLPITCR_TXLPITRC_7          (0x80UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)       /*!< 0x00000080 */
#define ETH_MMCTXLPITCR_TXLPITRC_8          (0x100UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)      /*!< 0x00000100 */
#define ETH_MMCTXLPITCR_TXLPITRC_9          (0x200UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)      /*!< 0x00000200 */
#define ETH_MMCTXLPITCR_TXLPITRC_10         (0x400UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)      /*!< 0x00000400 */
#define ETH_MMCTXLPITCR_TXLPITRC_11         (0x800UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)      /*!< 0x00000800 */
#define ETH_MMCTXLPITCR_TXLPITRC_12         (0x1000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)     /*!< 0x00001000 */
#define ETH_MMCTXLPITCR_TXLPITRC_13         (0x2000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)     /*!< 0x00002000 */
#define ETH_MMCTXLPITCR_TXLPITRC_14         (0x4000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)     /*!< 0x00004000 */
#define ETH_MMCTXLPITCR_TXLPITRC_15         (0x8000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)     /*!< 0x00008000 */
#define ETH_MMCTXLPITCR_TXLPITRC_16         (0x10000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)    /*!< 0x00010000 */
#define ETH_MMCTXLPITCR_TXLPITRC_17         (0x20000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)    /*!< 0x00020000 */
#define ETH_MMCTXLPITCR_TXLPITRC_18         (0x40000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)    /*!< 0x00040000 */
#define ETH_MMCTXLPITCR_TXLPITRC_19         (0x80000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)    /*!< 0x00080000 */
#define ETH_MMCTXLPITCR_TXLPITRC_20         (0x100000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)   /*!< 0x00100000 */
#define ETH_MMCTXLPITCR_TXLPITRC_21         (0x200000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)   /*!< 0x00200000 */
#define ETH_MMCTXLPITCR_TXLPITRC_22         (0x400000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)   /*!< 0x00400000 */
#define ETH_MMCTXLPITCR_TXLPITRC_23         (0x800000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)   /*!< 0x00800000 */
#define ETH_MMCTXLPITCR_TXLPITRC_24         (0x1000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)  /*!< 0x01000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_25         (0x2000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)  /*!< 0x02000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_26         (0x4000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)  /*!< 0x04000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_27         (0x8000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos)  /*!< 0x08000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_28         (0x10000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos) /*!< 0x10000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_29         (0x20000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos) /*!< 0x20000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_30         (0x40000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos) /*!< 0x40000000 */
#define ETH_MMCTXLPITCR_TXLPITRC_31         (0x80000000UL << ETH_MMCTXLPITCR_TXLPITRC_Pos) /*!< 0x80000000 */

/*************  Bit definition for ETH_MMC_RX_LPI_USEC_CNTR register  *************/
#define ETH_MMCRXLPIMSTR_RXLPIUSC_Pos       (0U)
#define ETH_MMCRXLPIMSTR_RXLPIUSC_Msk       (0xFFFFFFFFUL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCRXLPIMSTR_RXLPIUSC           ETH_MMCRXLPIMSTR_RXLPIUSC_Msk                  /*!< Rx LPI Microseconds Counter */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_0         (0x1UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)        /*!< 0x00000001 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_1         (0x2UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)        /*!< 0x00000002 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_2         (0x4UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)        /*!< 0x00000004 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_3         (0x8UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)        /*!< 0x00000008 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_4         (0x10UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)       /*!< 0x00000010 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_5         (0x20UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)       /*!< 0x00000020 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_6         (0x40UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)       /*!< 0x00000040 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_7         (0x80UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)       /*!< 0x00000080 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_8         (0x100UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)      /*!< 0x00000100 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_9         (0x200UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)      /*!< 0x00000200 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_10        (0x400UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)      /*!< 0x00000400 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_11        (0x800UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)      /*!< 0x00000800 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_12        (0x1000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)     /*!< 0x00001000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_13        (0x2000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)     /*!< 0x00002000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_14        (0x4000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)     /*!< 0x00004000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_15        (0x8000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)     /*!< 0x00008000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_16        (0x10000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)    /*!< 0x00010000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_17        (0x20000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)    /*!< 0x00020000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_18        (0x40000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)    /*!< 0x00040000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_19        (0x80000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)    /*!< 0x00080000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_20        (0x100000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)   /*!< 0x00100000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_21        (0x200000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)   /*!< 0x00200000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_22        (0x400000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)   /*!< 0x00400000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_23        (0x800000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)   /*!< 0x00800000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_24        (0x1000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)  /*!< 0x01000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_25        (0x2000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)  /*!< 0x02000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_26        (0x4000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)  /*!< 0x04000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_27        (0x8000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos)  /*!< 0x08000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_28        (0x10000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos) /*!< 0x10000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_29        (0x20000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos) /*!< 0x20000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_30        (0x40000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos) /*!< 0x40000000 */
#define ETH_MMCRXLPIMSTR_RXLPIUSC_31        (0x80000000UL << ETH_MMCRXLPIMSTR_RXLPIUSC_Pos) /*!< 0x80000000 */

/*************  Bit definition for ETH_MMC_RX_LPI_TRAN_CNTR register  *************/
#define ETH_MMCRXLPITCR_RXLPITRC_Pos        (0U)
#define ETH_MMCRXLPITCR_RXLPITRC_Msk        (0xFFFFFFFFUL << ETH_MMCRXLPITCR_RXLPITRC_Pos) /*!< 0xFFFFFFFF */
#define ETH_MMCRXLPITCR_RXLPITRC            ETH_MMCRXLPITCR_RXLPITRC_Msk                  /*!< Rx LPI Transition counter */
#define ETH_MMCRXLPITCR_RXLPITRC_0          (0x1UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)        /*!< 0x00000001 */
#define ETH_MMCRXLPITCR_RXLPITRC_1          (0x2UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)        /*!< 0x00000002 */
#define ETH_MMCRXLPITCR_RXLPITRC_2          (0x4UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)        /*!< 0x00000004 */
#define ETH_MMCRXLPITCR_RXLPITRC_3          (0x8UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)        /*!< 0x00000008 */
#define ETH_MMCRXLPITCR_RXLPITRC_4          (0x10UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)       /*!< 0x00000010 */
#define ETH_MMCRXLPITCR_RXLPITRC_5          (0x20UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)       /*!< 0x00000020 */
#define ETH_MMCRXLPITCR_RXLPITRC_6          (0x40UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)       /*!< 0x00000040 */
#define ETH_MMCRXLPITCR_RXLPITRC_7          (0x80UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)       /*!< 0x00000080 */
#define ETH_MMCRXLPITCR_RXLPITRC_8          (0x100UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)      /*!< 0x00000100 */
#define ETH_MMCRXLPITCR_RXLPITRC_9          (0x200UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)      /*!< 0x00000200 */
#define ETH_MMCRXLPITCR_RXLPITRC_10         (0x400UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)      /*!< 0x00000400 */
#define ETH_MMCRXLPITCR_RXLPITRC_11         (0x800UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)      /*!< 0x00000800 */
#define ETH_MMCRXLPITCR_RXLPITRC_12         (0x1000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)     /*!< 0x00001000 */
#define ETH_MMCRXLPITCR_RXLPITRC_13         (0x2000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)     /*!< 0x00002000 */
#define ETH_MMCRXLPITCR_RXLPITRC_14         (0x4000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)     /*!< 0x00004000 */
#define ETH_MMCRXLPITCR_RXLPITRC_15         (0x8000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)     /*!< 0x00008000 */
#define ETH_MMCRXLPITCR_RXLPITRC_16         (0x10000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)    /*!< 0x00010000 */
#define ETH_MMCRXLPITCR_RXLPITRC_17         (0x20000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)    /*!< 0x00020000 */
#define ETH_MMCRXLPITCR_RXLPITRC_18         (0x40000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)    /*!< 0x00040000 */
#define ETH_MMCRXLPITCR_RXLPITRC_19         (0x80000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)    /*!< 0x00080000 */
#define ETH_MMCRXLPITCR_RXLPITRC_20         (0x100000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)   /*!< 0x00100000 */
#define ETH_MMCRXLPITCR_RXLPITRC_21         (0x200000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)   /*!< 0x00200000 */
#define ETH_MMCRXLPITCR_RXLPITRC_22         (0x400000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)   /*!< 0x00400000 */
#define ETH_MMCRXLPITCR_RXLPITRC_23         (0x800000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)   /*!< 0x00800000 */
#define ETH_MMCRXLPITCR_RXLPITRC_24         (0x1000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)  /*!< 0x01000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_25         (0x2000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)  /*!< 0x02000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_26         (0x4000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)  /*!< 0x04000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_27         (0x8000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos)  /*!< 0x08000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_28         (0x10000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos) /*!< 0x10000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_29         (0x20000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos) /*!< 0x20000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_30         (0x40000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos) /*!< 0x40000000 */
#define ETH_MMCRXLPITCR_RXLPITRC_31         (0x80000000UL << ETH_MMCRXLPITCR_RXLPITRC_Pos) /*!< 0x80000000 */

/************  Bit definition for ETH_MACL3L4C0R register  *************/
#define ETH_MACL3L4C0R_L3PEN0_Pos           (0U)
#define ETH_MACL3L4C0R_L3PEN0_Msk           (0x1UL << ETH_MACL3L4C0R_L3PEN0_Pos)                 /*!< 0x00000001 */
#define ETH_MACL3L4C0R_L3PEN0               ETH_MACL3L4C0R_L3PEN0_Msk                           /*!< Layer 3 Protocol Enable */
#define ETH_MACL3L4C0R_L3SAM0_Pos           (2U)
#define ETH_MACL3L4C0R_L3SAM0_Msk           (0x1UL << ETH_MACL3L4C0R_L3SAM0_Pos)                 /*!< 0x00000004 */
#define ETH_MACL3L4C0R_L3SAM0               ETH_MACL3L4C0R_L3SAM0_Msk                           /*!< Layer 3 IP SA Match Enable */
#define ETH_MACL3L4C0R_L3SAIM0_Pos          (3U)
#define ETH_MACL3L4C0R_L3SAIM0_Msk          (0x1UL << ETH_MACL3L4C0R_L3SAIM0_Pos)                /*!< 0x00000008 */
#define ETH_MACL3L4C0R_L3SAIM0              ETH_MACL3L4C0R_L3SAIM0_Msk                          /*!< Layer 3 IP SA Inverse Match Enable */
#define ETH_MACL3L4C0R_L3DAM0_Pos           (4U)
#define ETH_MACL3L4C0R_L3DAM0_Msk           (0x1UL << ETH_MACL3L4C0R_L3DAM0_Pos)                 /*!< 0x00000010 */
#define ETH_MACL3L4C0R_L3DAM0               ETH_MACL3L4C0R_L3DAM0_Msk                           /*!< Layer 3 IP DA Match Enable */
#define ETH_MACL3L4C0R_L3DAIM0_Pos          (5U)
#define ETH_MACL3L4C0R_L3DAIM0_Msk          (0x1UL << ETH_MACL3L4C0R_L3DAIM0_Pos)                /*!< 0x00000020 */
#define ETH_MACL3L4C0R_L3DAIM0              ETH_MACL3L4C0R_L3DAIM0_Msk                          /*!< Layer 3 IP DA Inverse Match Enable */
#define ETH_MACL3L4C0R_L3HSBM0_Pos          (6U)
#define ETH_MACL3L4C0R_L3HSBM0_Msk          (0x1FUL << ETH_MACL3L4C0R_L3HSBM0_Pos)               /*!< 0x000007C0 */
#define ETH_MACL3L4C0R_L3HSBM0              ETH_MACL3L4C0R_L3HSBM0_Msk                          /*!< Layer 3 IP SA Higher Bits Match */
#define ETH_MACL3L4C0R_L3HSBM0_0            (0x1UL << ETH_MACL3L4C0R_L3HSBM0_Pos)                /*!< 0x00000040 */
#define ETH_MACL3L4C0R_L3HSBM0_1            (0x2UL << ETH_MACL3L4C0R_L3HSBM0_Pos)                /*!< 0x00000080 */
#define ETH_MACL3L4C0R_L3HSBM0_2            (0x4UL << ETH_MACL3L4C0R_L3HSBM0_Pos)                /*!< 0x00000100 */
#define ETH_MACL3L4C0R_L3HSBM0_3            (0x8UL << ETH_MACL3L4C0R_L3HSBM0_Pos)                /*!< 0x00000200 */
#define ETH_MACL3L4C0R_L3HSBM0_4            (0x10UL << ETH_MACL3L4C0R_L3HSBM0_Pos)               /*!< 0x00000400 */
#define ETH_MACL3L4C0R_L3HDBM0_Pos          (11U)
#define ETH_MACL3L4C0R_L3HDBM0_Msk          (0x1FUL << ETH_MACL3L4C0R_L3HDBM0_Pos)               /*!< 0x0000F800 */
#define ETH_MACL3L4C0R_L3HDBM0              ETH_MACL3L4C0R_L3HDBM0_Msk                          /*!< Layer 3 IP DA Higher Bits Match */
#define ETH_MACL3L4C0R_L3HDBM0_0            (0x1UL << ETH_MACL3L4C0R_L3HDBM0_Pos)                /*!< 0x00000800 */
#define ETH_MACL3L4C0R_L3HDBM0_1            (0x2UL << ETH_MACL3L4C0R_L3HDBM0_Pos)                /*!< 0x00001000 */
#define ETH_MACL3L4C0R_L3HDBM0_2            (0x4UL << ETH_MACL3L4C0R_L3HDBM0_Pos)                /*!< 0x00002000 */
#define ETH_MACL3L4C0R_L3HDBM0_3            (0x8UL << ETH_MACL3L4C0R_L3HDBM0_Pos)                /*!< 0x00004000 */
#define ETH_MACL3L4C0R_L3HDBM0_4            (0x10UL << ETH_MACL3L4C0R_L3HDBM0_Pos)               /*!< 0x00008000 */
#define ETH_MACL3L4C0R_L4PEN0_Pos           (16U)
#define ETH_MACL3L4C0R_L4PEN0_Msk           (0x1UL << ETH_MACL3L4C0R_L4PEN0_Pos)                 /*!< 0x00010000 */
#define ETH_MACL3L4C0R_L4PEN0               ETH_MACL3L4C0R_L4PEN0_Msk                           /*!< Layer 4 Protocol Enable */
#define ETH_MACL3L4C0R_L4SPM0_Pos           (18U)
#define ETH_MACL3L4C0R_L4SPM0_Msk           (0x1UL << ETH_MACL3L4C0R_L4SPM0_Pos)                 /*!< 0x00040000 */
#define ETH_MACL3L4C0R_L4SPM0               ETH_MACL3L4C0R_L4SPM0_Msk                           /*!< Layer 4 Source Port Match Enable */
#define ETH_MACL3L4C0R_L4SPIM0_Pos          (19U)
#define ETH_MACL3L4C0R_L4SPIM0_Msk          (0x1UL << ETH_MACL3L4C0R_L4SPIM0_Pos)                /*!< 0x00080000 */
#define ETH_MACL3L4C0R_L4SPIM0              ETH_MACL3L4C0R_L4SPIM0_Msk                          /*!< Layer 4 Source Port Inverse Match Enable */
#define ETH_MACL3L4C0R_L4DPM0_Pos           (20U)
#define ETH_MACL3L4C0R_L4DPM0_Msk           (0x1UL << ETH_MACL3L4C0R_L4DPM0_Pos)                 /*!< 0x00100000 */
#define ETH_MACL3L4C0R_L4DPM0               ETH_MACL3L4C0R_L4DPM0_Msk                           /*!< Layer 4 Destination Port Match Enable */
#define ETH_MACL3L4C0R_L4DPIM0_Pos          (21U)
#define ETH_MACL3L4C0R_L4DPIM0_Msk          (0x1UL << ETH_MACL3L4C0R_L4DPIM0_Pos)                /*!< 0x00200000 */
#define ETH_MACL3L4C0R_L4DPIM0              ETH_MACL3L4C0R_L4DPIM0_Msk                          /*!< Layer 4 Destination Port Inverse Match Enable */

/*************  Bit definition for ETH_MACL4A0R register  **************/
#define ETH_MACL4A0R_L4SP0_Pos              (0U)
#define ETH_MACL4A0R_L4SP0_Msk              (0xFFFFUL << ETH_MACL4A0R_L4SP0_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACL4A0R_L4SP0                  ETH_MACL4A0R_L4SP0_Msk                              /*!< Layer 4 Source Port Number Field */
#define ETH_MACL4A0R_L4SP0_0                (0x1UL << ETH_MACL4A0R_L4SP0_Pos)                    /*!< 0x00000001 */
#define ETH_MACL4A0R_L4SP0_1                (0x2UL << ETH_MACL4A0R_L4SP0_Pos)                    /*!< 0x00000002 */
#define ETH_MACL4A0R_L4SP0_2                (0x4UL << ETH_MACL4A0R_L4SP0_Pos)                    /*!< 0x00000004 */
#define ETH_MACL4A0R_L4SP0_3                (0x8UL << ETH_MACL4A0R_L4SP0_Pos)                    /*!< 0x00000008 */
#define ETH_MACL4A0R_L4SP0_4                (0x10UL << ETH_MACL4A0R_L4SP0_Pos)                   /*!< 0x00000010 */
#define ETH_MACL4A0R_L4SP0_5                (0x20UL << ETH_MACL4A0R_L4SP0_Pos)                   /*!< 0x00000020 */
#define ETH_MACL4A0R_L4SP0_6                (0x40UL << ETH_MACL4A0R_L4SP0_Pos)                   /*!< 0x00000040 */
#define ETH_MACL4A0R_L4SP0_7                (0x80UL << ETH_MACL4A0R_L4SP0_Pos)                   /*!< 0x00000080 */
#define ETH_MACL4A0R_L4SP0_8                (0x100UL << ETH_MACL4A0R_L4SP0_Pos)                  /*!< 0x00000100 */
#define ETH_MACL4A0R_L4SP0_9                (0x200UL << ETH_MACL4A0R_L4SP0_Pos)                  /*!< 0x00000200 */
#define ETH_MACL4A0R_L4SP0_10               (0x400UL << ETH_MACL4A0R_L4SP0_Pos)                  /*!< 0x00000400 */
#define ETH_MACL4A0R_L4SP0_11               (0x800UL << ETH_MACL4A0R_L4SP0_Pos)                  /*!< 0x00000800 */
#define ETH_MACL4A0R_L4SP0_12               (0x1000UL << ETH_MACL4A0R_L4SP0_Pos)                 /*!< 0x00001000 */
#define ETH_MACL4A0R_L4SP0_13               (0x2000UL << ETH_MACL4A0R_L4SP0_Pos)                 /*!< 0x00002000 */
#define ETH_MACL4A0R_L4SP0_14               (0x4000UL << ETH_MACL4A0R_L4SP0_Pos)                 /*!< 0x00004000 */
#define ETH_MACL4A0R_L4SP0_15               (0x8000UL << ETH_MACL4A0R_L4SP0_Pos)                 /*!< 0x00008000 */
#define ETH_MACL4A0R_L4DP0_Pos              (16U)
#define ETH_MACL4A0R_L4DP0_Msk              (0xFFFFUL << ETH_MACL4A0R_L4DP0_Pos)                 /*!< 0xFFFF0000 */
#define ETH_MACL4A0R_L4DP0                  ETH_MACL4A0R_L4DP0_Msk                              /*!< Layer 4 Destination Port Number Field */
#define ETH_MACL4A0R_L4DP0_0                (0x1UL << ETH_MACL4A0R_L4DP0_Pos)                    /*!< 0x00010000 */
#define ETH_MACL4A0R_L4DP0_1                (0x2UL << ETH_MACL4A0R_L4DP0_Pos)                    /*!< 0x00020000 */
#define ETH_MACL4A0R_L4DP0_2                (0x4UL << ETH_MACL4A0R_L4DP0_Pos)                    /*!< 0x00040000 */
#define ETH_MACL4A0R_L4DP0_3                (0x8UL << ETH_MACL4A0R_L4DP0_Pos)                    /*!< 0x00080000 */
#define ETH_MACL4A0R_L4DP0_4                (0x10UL << ETH_MACL4A0R_L4DP0_Pos)                   /*!< 0x00100000 */
#define ETH_MACL4A0R_L4DP0_5                (0x20UL << ETH_MACL4A0R_L4DP0_Pos)                   /*!< 0x00200000 */
#define ETH_MACL4A0R_L4DP0_6                (0x40UL << ETH_MACL4A0R_L4DP0_Pos)                   /*!< 0x00400000 */
#define ETH_MACL4A0R_L4DP0_7                (0x80UL << ETH_MACL4A0R_L4DP0_Pos)                   /*!< 0x00800000 */
#define ETH_MACL4A0R_L4DP0_8                (0x100UL << ETH_MACL4A0R_L4DP0_Pos)                  /*!< 0x01000000 */
#define ETH_MACL4A0R_L4DP0_9                (0x200UL << ETH_MACL4A0R_L4DP0_Pos)                  /*!< 0x02000000 */
#define ETH_MACL4A0R_L4DP0_10               (0x400UL << ETH_MACL4A0R_L4DP0_Pos)                  /*!< 0x04000000 */
#define ETH_MACL4A0R_L4DP0_11               (0x800UL << ETH_MACL4A0R_L4DP0_Pos)                  /*!< 0x08000000 */
#define ETH_MACL4A0R_L4DP0_12               (0x1000UL << ETH_MACL4A0R_L4DP0_Pos)                 /*!< 0x10000000 */
#define ETH_MACL4A0R_L4DP0_13               (0x2000UL << ETH_MACL4A0R_L4DP0_Pos)                 /*!< 0x20000000 */
#define ETH_MACL4A0R_L4DP0_14               (0x4000UL << ETH_MACL4A0R_L4DP0_Pos)                 /*!< 0x40000000 */
#define ETH_MACL4A0R_L4DP0_15               (0x8000UL << ETH_MACL4A0R_L4DP0_Pos)                 /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A00R register  *************/
#define ETH_MACL3A00R_L3A00_Pos             (0U)
#define ETH_MACL3A00R_L3A00_Msk             (0xFFFFFFFFUL << ETH_MACL3A00R_L3A00_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A00R_L3A00                 ETH_MACL3A00R_L3A00_Msk                             /*!< Layer 3 Address 0 Field */
#define ETH_MACL3A00R_L3A00_0               (0x1UL << ETH_MACL3A00R_L3A00_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A00R_L3A00_1               (0x2UL << ETH_MACL3A00R_L3A00_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A00R_L3A00_2               (0x4UL << ETH_MACL3A00R_L3A00_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A00R_L3A00_3               (0x8UL << ETH_MACL3A00R_L3A00_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A00R_L3A00_4               (0x10UL << ETH_MACL3A00R_L3A00_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A00R_L3A00_5               (0x20UL << ETH_MACL3A00R_L3A00_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A00R_L3A00_6               (0x40UL << ETH_MACL3A00R_L3A00_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A00R_L3A00_7               (0x80UL << ETH_MACL3A00R_L3A00_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A00R_L3A00_8               (0x100UL << ETH_MACL3A00R_L3A00_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A00R_L3A00_9               (0x200UL << ETH_MACL3A00R_L3A00_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A00R_L3A00_10              (0x400UL << ETH_MACL3A00R_L3A00_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A00R_L3A00_11              (0x800UL << ETH_MACL3A00R_L3A00_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A00R_L3A00_12              (0x1000UL << ETH_MACL3A00R_L3A00_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A00R_L3A00_13              (0x2000UL << ETH_MACL3A00R_L3A00_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A00R_L3A00_14              (0x4000UL << ETH_MACL3A00R_L3A00_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A00R_L3A00_15              (0x8000UL << ETH_MACL3A00R_L3A00_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A00R_L3A00_16              (0x10000UL << ETH_MACL3A00R_L3A00_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A00R_L3A00_17              (0x20000UL << ETH_MACL3A00R_L3A00_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A00R_L3A00_18              (0x40000UL << ETH_MACL3A00R_L3A00_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A00R_L3A00_19              (0x80000UL << ETH_MACL3A00R_L3A00_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A00R_L3A00_20              (0x100000UL << ETH_MACL3A00R_L3A00_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A00R_L3A00_21              (0x200000UL << ETH_MACL3A00R_L3A00_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A00R_L3A00_22              (0x400000UL << ETH_MACL3A00R_L3A00_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A00R_L3A00_23              (0x800000UL << ETH_MACL3A00R_L3A00_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A00R_L3A00_24              (0x1000000UL << ETH_MACL3A00R_L3A00_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A00R_L3A00_25              (0x2000000UL << ETH_MACL3A00R_L3A00_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A00R_L3A00_26              (0x4000000UL << ETH_MACL3A00R_L3A00_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A00R_L3A00_27              (0x8000000UL << ETH_MACL3A00R_L3A00_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A00R_L3A00_28              (0x10000000UL << ETH_MACL3A00R_L3A00_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A00R_L3A00_29              (0x20000000UL << ETH_MACL3A00R_L3A00_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A00R_L3A00_30              (0x40000000UL << ETH_MACL3A00R_L3A00_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A00R_L3A00_31              (0x80000000UL << ETH_MACL3A00R_L3A00_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A10R register  *************/
#define ETH_MACL3A10R_L3A10_Pos             (0U)
#define ETH_MACL3A10R_L3A10_Msk             (0xFFFFFFFFUL << ETH_MACL3A10R_L3A10_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A10R_L3A10                 ETH_MACL3A10R_L3A10_Msk                             /*!< Layer 3 Address 1 Field */
#define ETH_MACL3A10R_L3A10_0               (0x1UL << ETH_MACL3A10R_L3A10_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A10R_L3A10_1               (0x2UL << ETH_MACL3A10R_L3A10_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A10R_L3A10_2               (0x4UL << ETH_MACL3A10R_L3A10_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A10R_L3A10_3               (0x8UL << ETH_MACL3A10R_L3A10_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A10R_L3A10_4               (0x10UL << ETH_MACL3A10R_L3A10_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A10R_L3A10_5               (0x20UL << ETH_MACL3A10R_L3A10_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A10R_L3A10_6               (0x40UL << ETH_MACL3A10R_L3A10_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A10R_L3A10_7               (0x80UL << ETH_MACL3A10R_L3A10_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A10R_L3A10_8               (0x100UL << ETH_MACL3A10R_L3A10_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A10R_L3A10_9               (0x200UL << ETH_MACL3A10R_L3A10_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A10R_L3A10_10              (0x400UL << ETH_MACL3A10R_L3A10_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A10R_L3A10_11              (0x800UL << ETH_MACL3A10R_L3A10_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A10R_L3A10_12              (0x1000UL << ETH_MACL3A10R_L3A10_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A10R_L3A10_13              (0x2000UL << ETH_MACL3A10R_L3A10_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A10R_L3A10_14              (0x4000UL << ETH_MACL3A10R_L3A10_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A10R_L3A10_15              (0x8000UL << ETH_MACL3A10R_L3A10_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A10R_L3A10_16              (0x10000UL << ETH_MACL3A10R_L3A10_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A10R_L3A10_17              (0x20000UL << ETH_MACL3A10R_L3A10_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A10R_L3A10_18              (0x40000UL << ETH_MACL3A10R_L3A10_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A10R_L3A10_19              (0x80000UL << ETH_MACL3A10R_L3A10_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A10R_L3A10_20              (0x100000UL << ETH_MACL3A10R_L3A10_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A10R_L3A10_21              (0x200000UL << ETH_MACL3A10R_L3A10_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A10R_L3A10_22              (0x400000UL << ETH_MACL3A10R_L3A10_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A10R_L3A10_23              (0x800000UL << ETH_MACL3A10R_L3A10_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A10R_L3A10_24              (0x1000000UL << ETH_MACL3A10R_L3A10_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A10R_L3A10_25              (0x2000000UL << ETH_MACL3A10R_L3A10_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A10R_L3A10_26              (0x4000000UL << ETH_MACL3A10R_L3A10_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A10R_L3A10_27              (0x8000000UL << ETH_MACL3A10R_L3A10_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A10R_L3A10_28              (0x10000000UL << ETH_MACL3A10R_L3A10_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A10R_L3A10_29              (0x20000000UL << ETH_MACL3A10R_L3A10_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A10R_L3A10_30              (0x40000000UL << ETH_MACL3A10R_L3A10_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A10R_L3A10_31              (0x80000000UL << ETH_MACL3A10R_L3A10_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A20 register  **************/
#define ETH_MACL3A20_L3A20_Pos              (0U)
#define ETH_MACL3A20_L3A20_Msk              (0xFFFFFFFFUL << ETH_MACL3A20_L3A20_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACL3A20_L3A20                  ETH_MACL3A20_L3A20_Msk                              /*!< Layer 3 Address 2 Field */
#define ETH_MACL3A20_L3A20_0                (0x1UL << ETH_MACL3A20_L3A20_Pos)                    /*!< 0x00000001 */
#define ETH_MACL3A20_L3A20_1                (0x2UL << ETH_MACL3A20_L3A20_Pos)                    /*!< 0x00000002 */
#define ETH_MACL3A20_L3A20_2                (0x4UL << ETH_MACL3A20_L3A20_Pos)                    /*!< 0x00000004 */
#define ETH_MACL3A20_L3A20_3                (0x8UL << ETH_MACL3A20_L3A20_Pos)                    /*!< 0x00000008 */
#define ETH_MACL3A20_L3A20_4                (0x10UL << ETH_MACL3A20_L3A20_Pos)                   /*!< 0x00000010 */
#define ETH_MACL3A20_L3A20_5                (0x20UL << ETH_MACL3A20_L3A20_Pos)                   /*!< 0x00000020 */
#define ETH_MACL3A20_L3A20_6                (0x40UL << ETH_MACL3A20_L3A20_Pos)                   /*!< 0x00000040 */
#define ETH_MACL3A20_L3A20_7                (0x80UL << ETH_MACL3A20_L3A20_Pos)                   /*!< 0x00000080 */
#define ETH_MACL3A20_L3A20_8                (0x100UL << ETH_MACL3A20_L3A20_Pos)                  /*!< 0x00000100 */
#define ETH_MACL3A20_L3A20_9                (0x200UL << ETH_MACL3A20_L3A20_Pos)                  /*!< 0x00000200 */
#define ETH_MACL3A20_L3A20_10               (0x400UL << ETH_MACL3A20_L3A20_Pos)                  /*!< 0x00000400 */
#define ETH_MACL3A20_L3A20_11               (0x800UL << ETH_MACL3A20_L3A20_Pos)                  /*!< 0x00000800 */
#define ETH_MACL3A20_L3A20_12               (0x1000UL << ETH_MACL3A20_L3A20_Pos)                 /*!< 0x00001000 */
#define ETH_MACL3A20_L3A20_13               (0x2000UL << ETH_MACL3A20_L3A20_Pos)                 /*!< 0x00002000 */
#define ETH_MACL3A20_L3A20_14               (0x4000UL << ETH_MACL3A20_L3A20_Pos)                 /*!< 0x00004000 */
#define ETH_MACL3A20_L3A20_15               (0x8000UL << ETH_MACL3A20_L3A20_Pos)                 /*!< 0x00008000 */
#define ETH_MACL3A20_L3A20_16               (0x10000UL << ETH_MACL3A20_L3A20_Pos)                /*!< 0x00010000 */
#define ETH_MACL3A20_L3A20_17               (0x20000UL << ETH_MACL3A20_L3A20_Pos)                /*!< 0x00020000 */
#define ETH_MACL3A20_L3A20_18               (0x40000UL << ETH_MACL3A20_L3A20_Pos)                /*!< 0x00040000 */
#define ETH_MACL3A20_L3A20_19               (0x80000UL << ETH_MACL3A20_L3A20_Pos)                /*!< 0x00080000 */
#define ETH_MACL3A20_L3A20_20               (0x100000UL << ETH_MACL3A20_L3A20_Pos)               /*!< 0x00100000 */
#define ETH_MACL3A20_L3A20_21               (0x200000UL << ETH_MACL3A20_L3A20_Pos)               /*!< 0x00200000 */
#define ETH_MACL3A20_L3A20_22               (0x400000UL << ETH_MACL3A20_L3A20_Pos)               /*!< 0x00400000 */
#define ETH_MACL3A20_L3A20_23               (0x800000UL << ETH_MACL3A20_L3A20_Pos)               /*!< 0x00800000 */
#define ETH_MACL3A20_L3A20_24               (0x1000000UL << ETH_MACL3A20_L3A20_Pos)              /*!< 0x01000000 */
#define ETH_MACL3A20_L3A20_25               (0x2000000UL << ETH_MACL3A20_L3A20_Pos)              /*!< 0x02000000 */
#define ETH_MACL3A20_L3A20_26               (0x4000000UL << ETH_MACL3A20_L3A20_Pos)              /*!< 0x04000000 */
#define ETH_MACL3A20_L3A20_27               (0x8000000UL << ETH_MACL3A20_L3A20_Pos)              /*!< 0x08000000 */
#define ETH_MACL3A20_L3A20_28               (0x10000000UL << ETH_MACL3A20_L3A20_Pos)             /*!< 0x10000000 */
#define ETH_MACL3A20_L3A20_29               (0x20000000UL << ETH_MACL3A20_L3A20_Pos)             /*!< 0x20000000 */
#define ETH_MACL3A20_L3A20_30               (0x40000000UL << ETH_MACL3A20_L3A20_Pos)             /*!< 0x40000000 */
#define ETH_MACL3A20_L3A20_31               (0x80000000UL << ETH_MACL3A20_L3A20_Pos)             /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A30 register  **************/
#define ETH_MACL3A30_L3A30_Pos              (0U)
#define ETH_MACL3A30_L3A30_Msk              (0xFFFFFFFFUL << ETH_MACL3A30_L3A30_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACL3A30_L3A30                  ETH_MACL3A30_L3A30_Msk                              /*!< Layer 3 Address 3 Field */
#define ETH_MACL3A30_L3A30_0                (0x1UL << ETH_MACL3A30_L3A30_Pos)                    /*!< 0x00000001 */
#define ETH_MACL3A30_L3A30_1                (0x2UL << ETH_MACL3A30_L3A30_Pos)                    /*!< 0x00000002 */
#define ETH_MACL3A30_L3A30_2                (0x4UL << ETH_MACL3A30_L3A30_Pos)                    /*!< 0x00000004 */
#define ETH_MACL3A30_L3A30_3                (0x8UL << ETH_MACL3A30_L3A30_Pos)                    /*!< 0x00000008 */
#define ETH_MACL3A30_L3A30_4                (0x10UL << ETH_MACL3A30_L3A30_Pos)                   /*!< 0x00000010 */
#define ETH_MACL3A30_L3A30_5                (0x20UL << ETH_MACL3A30_L3A30_Pos)                   /*!< 0x00000020 */
#define ETH_MACL3A30_L3A30_6                (0x40UL << ETH_MACL3A30_L3A30_Pos)                   /*!< 0x00000040 */
#define ETH_MACL3A30_L3A30_7                (0x80UL << ETH_MACL3A30_L3A30_Pos)                   /*!< 0x00000080 */
#define ETH_MACL3A30_L3A30_8                (0x100UL << ETH_MACL3A30_L3A30_Pos)                  /*!< 0x00000100 */
#define ETH_MACL3A30_L3A30_9                (0x200UL << ETH_MACL3A30_L3A30_Pos)                  /*!< 0x00000200 */
#define ETH_MACL3A30_L3A30_10               (0x400UL << ETH_MACL3A30_L3A30_Pos)                  /*!< 0x00000400 */
#define ETH_MACL3A30_L3A30_11               (0x800UL << ETH_MACL3A30_L3A30_Pos)                  /*!< 0x00000800 */
#define ETH_MACL3A30_L3A30_12               (0x1000UL << ETH_MACL3A30_L3A30_Pos)                 /*!< 0x00001000 */
#define ETH_MACL3A30_L3A30_13               (0x2000UL << ETH_MACL3A30_L3A30_Pos)                 /*!< 0x00002000 */
#define ETH_MACL3A30_L3A30_14               (0x4000UL << ETH_MACL3A30_L3A30_Pos)                 /*!< 0x00004000 */
#define ETH_MACL3A30_L3A30_15               (0x8000UL << ETH_MACL3A30_L3A30_Pos)                 /*!< 0x00008000 */
#define ETH_MACL3A30_L3A30_16               (0x10000UL << ETH_MACL3A30_L3A30_Pos)                /*!< 0x00010000 */
#define ETH_MACL3A30_L3A30_17               (0x20000UL << ETH_MACL3A30_L3A30_Pos)                /*!< 0x00020000 */
#define ETH_MACL3A30_L3A30_18               (0x40000UL << ETH_MACL3A30_L3A30_Pos)                /*!< 0x00040000 */
#define ETH_MACL3A30_L3A30_19               (0x80000UL << ETH_MACL3A30_L3A30_Pos)                /*!< 0x00080000 */
#define ETH_MACL3A30_L3A30_20               (0x100000UL << ETH_MACL3A30_L3A30_Pos)               /*!< 0x00100000 */
#define ETH_MACL3A30_L3A30_21               (0x200000UL << ETH_MACL3A30_L3A30_Pos)               /*!< 0x00200000 */
#define ETH_MACL3A30_L3A30_22               (0x400000UL << ETH_MACL3A30_L3A30_Pos)               /*!< 0x00400000 */
#define ETH_MACL3A30_L3A30_23               (0x800000UL << ETH_MACL3A30_L3A30_Pos)               /*!< 0x00800000 */
#define ETH_MACL3A30_L3A30_24               (0x1000000UL << ETH_MACL3A30_L3A30_Pos)              /*!< 0x01000000 */
#define ETH_MACL3A30_L3A30_25               (0x2000000UL << ETH_MACL3A30_L3A30_Pos)              /*!< 0x02000000 */
#define ETH_MACL3A30_L3A30_26               (0x4000000UL << ETH_MACL3A30_L3A30_Pos)              /*!< 0x04000000 */
#define ETH_MACL3A30_L3A30_27               (0x8000000UL << ETH_MACL3A30_L3A30_Pos)              /*!< 0x08000000 */
#define ETH_MACL3A30_L3A30_28               (0x10000000UL << ETH_MACL3A30_L3A30_Pos)             /*!< 0x10000000 */
#define ETH_MACL3A30_L3A30_29               (0x20000000UL << ETH_MACL3A30_L3A30_Pos)             /*!< 0x20000000 */
#define ETH_MACL3A30_L3A30_30               (0x40000000UL << ETH_MACL3A30_L3A30_Pos)             /*!< 0x40000000 */
#define ETH_MACL3A30_L3A30_31               (0x80000000UL << ETH_MACL3A30_L3A30_Pos)             /*!< 0x80000000 */

/************  Bit definition for ETH_MACL3L4C1R register  *************/
#define ETH_MACL3L4C1R_L3PEN1_Pos           (0U)
#define ETH_MACL3L4C1R_L3PEN1_Msk           (0x1UL << ETH_MACL3L4C1R_L3PEN1_Pos)                 /*!< 0x00000001 */
#define ETH_MACL3L4C1R_L3PEN1               ETH_MACL3L4C1R_L3PEN1_Msk                           /*!< Layer 3 Protocol Enable */
#define ETH_MACL3L4C1R_L3SAM1_Pos           (2U)
#define ETH_MACL3L4C1R_L3SAM1_Msk           (0x1UL << ETH_MACL3L4C1R_L3SAM1_Pos)                 /*!< 0x00000004 */
#define ETH_MACL3L4C1R_L3SAM1               ETH_MACL3L4C1R_L3SAM1_Msk                           /*!< Layer 3 IP SA Match Enable */
#define ETH_MACL3L4C1R_L3SAIM1_Pos          (3U)
#define ETH_MACL3L4C1R_L3SAIM1_Msk          (0x1UL << ETH_MACL3L4C1R_L3SAIM1_Pos)                /*!< 0x00000008 */
#define ETH_MACL3L4C1R_L3SAIM1              ETH_MACL3L4C1R_L3SAIM1_Msk                          /*!< Layer 3 IP SA Inverse Match Enable */
#define ETH_MACL3L4C1R_L3DAM1_Pos           (4U)
#define ETH_MACL3L4C1R_L3DAM1_Msk           (0x1UL << ETH_MACL3L4C1R_L3DAM1_Pos)                 /*!< 0x00000010 */
#define ETH_MACL3L4C1R_L3DAM1               ETH_MACL3L4C1R_L3DAM1_Msk                           /*!< Layer 3 IP DA Match Enable */
#define ETH_MACL3L4C1R_L3DAIM1_Pos          (5U)
#define ETH_MACL3L4C1R_L3DAIM1_Msk          (0x1UL << ETH_MACL3L4C1R_L3DAIM1_Pos)                /*!< 0x00000020 */
#define ETH_MACL3L4C1R_L3DAIM1              ETH_MACL3L4C1R_L3DAIM1_Msk                          /*!< Layer 3 IP DA Inverse Match Enable */
#define ETH_MACL3L4C1R_L3HSBM1_Pos          (6U)
#define ETH_MACL3L4C1R_L3HSBM1_Msk          (0x1FUL << ETH_MACL3L4C1R_L3HSBM1_Pos)               /*!< 0x000007C0 */
#define ETH_MACL3L4C1R_L3HSBM1              ETH_MACL3L4C1R_L3HSBM1_Msk                          /*!< Layer 3 IP SA Higher Bits Match */
#define ETH_MACL3L4C1R_L3HSBM1_0            (0x1UL << ETH_MACL3L4C1R_L3HSBM1_Pos)                /*!< 0x00000040 */
#define ETH_MACL3L4C1R_L3HSBM1_1            (0x2UL << ETH_MACL3L4C1R_L3HSBM1_Pos)                /*!< 0x00000080 */
#define ETH_MACL3L4C1R_L3HSBM1_2            (0x4UL << ETH_MACL3L4C1R_L3HSBM1_Pos)                /*!< 0x00000100 */
#define ETH_MACL3L4C1R_L3HSBM1_3            (0x8UL << ETH_MACL3L4C1R_L3HSBM1_Pos)                /*!< 0x00000200 */
#define ETH_MACL3L4C1R_L3HSBM1_4            (0x10UL << ETH_MACL3L4C1R_L3HSBM1_Pos)               /*!< 0x00000400 */
#define ETH_MACL3L4C1R_L3HDBM1_Pos          (11U)
#define ETH_MACL3L4C1R_L3HDBM1_Msk          (0x1FUL << ETH_MACL3L4C1R_L3HDBM1_Pos)               /*!< 0x0000F800 */
#define ETH_MACL3L4C1R_L3HDBM1              ETH_MACL3L4C1R_L3HDBM1_Msk                          /*!< Layer 3 IP DA Higher Bits Match */
#define ETH_MACL3L4C1R_L3HDBM1_0            (0x1UL << ETH_MACL3L4C1R_L3HDBM1_Pos)                /*!< 0x00000800 */
#define ETH_MACL3L4C1R_L3HDBM1_1            (0x2UL << ETH_MACL3L4C1R_L3HDBM1_Pos)                /*!< 0x00001000 */
#define ETH_MACL3L4C1R_L3HDBM1_2            (0x4UL << ETH_MACL3L4C1R_L3HDBM1_Pos)                /*!< 0x00002000 */
#define ETH_MACL3L4C1R_L3HDBM1_3            (0x8UL << ETH_MACL3L4C1R_L3HDBM1_Pos)                /*!< 0x00004000 */
#define ETH_MACL3L4C1R_L3HDBM1_4            (0x10UL << ETH_MACL3L4C1R_L3HDBM1_Pos)               /*!< 0x00008000 */
#define ETH_MACL3L4C1R_L4PEN1_Pos           (16U)
#define ETH_MACL3L4C1R_L4PEN1_Msk           (0x1UL << ETH_MACL3L4C1R_L4PEN1_Pos)                 /*!< 0x00010000 */
#define ETH_MACL3L4C1R_L4PEN1               ETH_MACL3L4C1R_L4PEN1_Msk                           /*!< Layer 4 Protocol Enable */
#define ETH_MACL3L4C1R_L4SPM1_Pos           (18U)
#define ETH_MACL3L4C1R_L4SPM1_Msk           (0x1UL << ETH_MACL3L4C1R_L4SPM1_Pos)                 /*!< 0x00040000 */
#define ETH_MACL3L4C1R_L4SPM1               ETH_MACL3L4C1R_L4SPM1_Msk                           /*!< Layer 4 Source Port Match Enable */
#define ETH_MACL3L4C1R_L4SPIM1_Pos          (19U)
#define ETH_MACL3L4C1R_L4SPIM1_Msk          (0x1UL << ETH_MACL3L4C1R_L4SPIM1_Pos)                /*!< 0x00080000 */
#define ETH_MACL3L4C1R_L4SPIM1              ETH_MACL3L4C1R_L4SPIM1_Msk                          /*!< Layer 4 Source Port Inverse Match Enable */
#define ETH_MACL3L4C1R_L4DPM1_Pos           (20U)
#define ETH_MACL3L4C1R_L4DPM1_Msk           (0x1UL << ETH_MACL3L4C1R_L4DPM1_Pos)                 /*!< 0x00100000 */
#define ETH_MACL3L4C1R_L4DPM1               ETH_MACL3L4C1R_L4DPM1_Msk                           /*!< Layer 4 Destination Port Match Enable */
#define ETH_MACL3L4C1R_L4DPIM1_Pos          (21U)
#define ETH_MACL3L4C1R_L4DPIM1_Msk          (0x1UL << ETH_MACL3L4C1R_L4DPIM1_Pos)                /*!< 0x00200000 */
#define ETH_MACL3L4C1R_L4DPIM1              ETH_MACL3L4C1R_L4DPIM1_Msk                          /*!< Layer 4 Destination Port Inverse Match Enable */

/*************  Bit definition for ETH_MACL4A1R register  **************/
#define ETH_MACL4A1R_L4SP1_Pos              (0U)
#define ETH_MACL4A1R_L4SP1_Msk              (0xFFFFUL << ETH_MACL4A1R_L4SP1_Pos)                 /*!< 0x0000FFFF */
#define ETH_MACL4A1R_L4SP1                  ETH_MACL4A1R_L4SP1_Msk                              /*!< Layer 4 Source Port Number Field */
#define ETH_MACL4A1R_L4SP1_0                (0x1UL << ETH_MACL4A1R_L4SP1_Pos)                    /*!< 0x00000001 */
#define ETH_MACL4A1R_L4SP1_1                (0x2UL << ETH_MACL4A1R_L4SP1_Pos)                    /*!< 0x00000002 */
#define ETH_MACL4A1R_L4SP1_2                (0x4UL << ETH_MACL4A1R_L4SP1_Pos)                    /*!< 0x00000004 */
#define ETH_MACL4A1R_L4SP1_3                (0x8UL << ETH_MACL4A1R_L4SP1_Pos)                    /*!< 0x00000008 */
#define ETH_MACL4A1R_L4SP1_4                (0x10UL << ETH_MACL4A1R_L4SP1_Pos)                   /*!< 0x00000010 */
#define ETH_MACL4A1R_L4SP1_5                (0x20UL << ETH_MACL4A1R_L4SP1_Pos)                   /*!< 0x00000020 */
#define ETH_MACL4A1R_L4SP1_6                (0x40UL << ETH_MACL4A1R_L4SP1_Pos)                   /*!< 0x00000040 */
#define ETH_MACL4A1R_L4SP1_7                (0x80UL << ETH_MACL4A1R_L4SP1_Pos)                   /*!< 0x00000080 */
#define ETH_MACL4A1R_L4SP1_8                (0x100UL << ETH_MACL4A1R_L4SP1_Pos)                  /*!< 0x00000100 */
#define ETH_MACL4A1R_L4SP1_9                (0x200UL << ETH_MACL4A1R_L4SP1_Pos)                  /*!< 0x00000200 */
#define ETH_MACL4A1R_L4SP1_10               (0x400UL << ETH_MACL4A1R_L4SP1_Pos)                  /*!< 0x00000400 */
#define ETH_MACL4A1R_L4SP1_11               (0x800UL << ETH_MACL4A1R_L4SP1_Pos)                  /*!< 0x00000800 */
#define ETH_MACL4A1R_L4SP1_12               (0x1000UL << ETH_MACL4A1R_L4SP1_Pos)                 /*!< 0x00001000 */
#define ETH_MACL4A1R_L4SP1_13               (0x2000UL << ETH_MACL4A1R_L4SP1_Pos)                 /*!< 0x00002000 */
#define ETH_MACL4A1R_L4SP1_14               (0x4000UL << ETH_MACL4A1R_L4SP1_Pos)                 /*!< 0x00004000 */
#define ETH_MACL4A1R_L4SP1_15               (0x8000UL << ETH_MACL4A1R_L4SP1_Pos)                 /*!< 0x00008000 */
#define ETH_MACL4A1R_L4DP1_Pos              (16U)
#define ETH_MACL4A1R_L4DP1_Msk              (0xFFFFUL << ETH_MACL4A1R_L4DP1_Pos)                 /*!< 0xFFFF0000 */
#define ETH_MACL4A1R_L4DP1                  ETH_MACL4A1R_L4DP1_Msk                              /*!< Layer 4 Destination Port Number Field */
#define ETH_MACL4A1R_L4DP1_0                (0x1UL << ETH_MACL4A1R_L4DP1_Pos)                    /*!< 0x00010000 */
#define ETH_MACL4A1R_L4DP1_1                (0x2UL << ETH_MACL4A1R_L4DP1_Pos)                    /*!< 0x00020000 */
#define ETH_MACL4A1R_L4DP1_2                (0x4UL << ETH_MACL4A1R_L4DP1_Pos)                    /*!< 0x00040000 */
#define ETH_MACL4A1R_L4DP1_3                (0x8UL << ETH_MACL4A1R_L4DP1_Pos)                    /*!< 0x00080000 */
#define ETH_MACL4A1R_L4DP1_4                (0x10UL << ETH_MACL4A1R_L4DP1_Pos)                   /*!< 0x00100000 */
#define ETH_MACL4A1R_L4DP1_5                (0x20UL << ETH_MACL4A1R_L4DP1_Pos)                   /*!< 0x00200000 */
#define ETH_MACL4A1R_L4DP1_6                (0x40UL << ETH_MACL4A1R_L4DP1_Pos)                   /*!< 0x00400000 */
#define ETH_MACL4A1R_L4DP1_7                (0x80UL << ETH_MACL4A1R_L4DP1_Pos)                   /*!< 0x00800000 */
#define ETH_MACL4A1R_L4DP1_8                (0x100UL << ETH_MACL4A1R_L4DP1_Pos)                  /*!< 0x01000000 */
#define ETH_MACL4A1R_L4DP1_9                (0x200UL << ETH_MACL4A1R_L4DP1_Pos)                  /*!< 0x02000000 */
#define ETH_MACL4A1R_L4DP1_10               (0x400UL << ETH_MACL4A1R_L4DP1_Pos)                  /*!< 0x04000000 */
#define ETH_MACL4A1R_L4DP1_11               (0x800UL << ETH_MACL4A1R_L4DP1_Pos)                  /*!< 0x08000000 */
#define ETH_MACL4A1R_L4DP1_12               (0x1000UL << ETH_MACL4A1R_L4DP1_Pos)                 /*!< 0x10000000 */
#define ETH_MACL4A1R_L4DP1_13               (0x2000UL << ETH_MACL4A1R_L4DP1_Pos)                 /*!< 0x20000000 */
#define ETH_MACL4A1R_L4DP1_14               (0x4000UL << ETH_MACL4A1R_L4DP1_Pos)                 /*!< 0x40000000 */
#define ETH_MACL4A1R_L4DP1_15               (0x8000UL << ETH_MACL4A1R_L4DP1_Pos)                 /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A01R register  *************/
#define ETH_MACL3A01R_L3A01_Pos             (0U)
#define ETH_MACL3A01R_L3A01_Msk             (0xFFFFFFFFUL << ETH_MACL3A01R_L3A01_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A01R_L3A01                 ETH_MACL3A01R_L3A01_Msk                             /*!< Layer 3 Address 0 Field */
#define ETH_MACL3A01R_L3A01_0               (0x1UL << ETH_MACL3A01R_L3A01_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A01R_L3A01_1               (0x2UL << ETH_MACL3A01R_L3A01_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A01R_L3A01_2               (0x4UL << ETH_MACL3A01R_L3A01_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A01R_L3A01_3               (0x8UL << ETH_MACL3A01R_L3A01_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A01R_L3A01_4               (0x10UL << ETH_MACL3A01R_L3A01_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A01R_L3A01_5               (0x20UL << ETH_MACL3A01R_L3A01_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A01R_L3A01_6               (0x40UL << ETH_MACL3A01R_L3A01_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A01R_L3A01_7               (0x80UL << ETH_MACL3A01R_L3A01_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A01R_L3A01_8               (0x100UL << ETH_MACL3A01R_L3A01_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A01R_L3A01_9               (0x200UL << ETH_MACL3A01R_L3A01_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A01R_L3A01_10              (0x400UL << ETH_MACL3A01R_L3A01_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A01R_L3A01_11              (0x800UL << ETH_MACL3A01R_L3A01_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A01R_L3A01_12              (0x1000UL << ETH_MACL3A01R_L3A01_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A01R_L3A01_13              (0x2000UL << ETH_MACL3A01R_L3A01_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A01R_L3A01_14              (0x4000UL << ETH_MACL3A01R_L3A01_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A01R_L3A01_15              (0x8000UL << ETH_MACL3A01R_L3A01_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A01R_L3A01_16              (0x10000UL << ETH_MACL3A01R_L3A01_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A01R_L3A01_17              (0x20000UL << ETH_MACL3A01R_L3A01_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A01R_L3A01_18              (0x40000UL << ETH_MACL3A01R_L3A01_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A01R_L3A01_19              (0x80000UL << ETH_MACL3A01R_L3A01_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A01R_L3A01_20              (0x100000UL << ETH_MACL3A01R_L3A01_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A01R_L3A01_21              (0x200000UL << ETH_MACL3A01R_L3A01_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A01R_L3A01_22              (0x400000UL << ETH_MACL3A01R_L3A01_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A01R_L3A01_23              (0x800000UL << ETH_MACL3A01R_L3A01_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A01R_L3A01_24              (0x1000000UL << ETH_MACL3A01R_L3A01_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A01R_L3A01_25              (0x2000000UL << ETH_MACL3A01R_L3A01_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A01R_L3A01_26              (0x4000000UL << ETH_MACL3A01R_L3A01_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A01R_L3A01_27              (0x8000000UL << ETH_MACL3A01R_L3A01_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A01R_L3A01_28              (0x10000000UL << ETH_MACL3A01R_L3A01_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A01R_L3A01_29              (0x20000000UL << ETH_MACL3A01R_L3A01_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A01R_L3A01_30              (0x40000000UL << ETH_MACL3A01R_L3A01_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A01R_L3A01_31              (0x80000000UL << ETH_MACL3A01R_L3A01_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A11R register  *************/
#define ETH_MACL3A11R_L3A11_Pos             (0U)
#define ETH_MACL3A11R_L3A11_Msk             (0xFFFFFFFFUL << ETH_MACL3A11R_L3A11_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A11R_L3A11                 ETH_MACL3A11R_L3A11_Msk                             /*!< Layer 3 Address 1 Field */
#define ETH_MACL3A11R_L3A11_0               (0x1UL << ETH_MACL3A11R_L3A11_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A11R_L3A11_1               (0x2UL << ETH_MACL3A11R_L3A11_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A11R_L3A11_2               (0x4UL << ETH_MACL3A11R_L3A11_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A11R_L3A11_3               (0x8UL << ETH_MACL3A11R_L3A11_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A11R_L3A11_4               (0x10UL << ETH_MACL3A11R_L3A11_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A11R_L3A11_5               (0x20UL << ETH_MACL3A11R_L3A11_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A11R_L3A11_6               (0x40UL << ETH_MACL3A11R_L3A11_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A11R_L3A11_7               (0x80UL << ETH_MACL3A11R_L3A11_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A11R_L3A11_8               (0x100UL << ETH_MACL3A11R_L3A11_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A11R_L3A11_9               (0x200UL << ETH_MACL3A11R_L3A11_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A11R_L3A11_10              (0x400UL << ETH_MACL3A11R_L3A11_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A11R_L3A11_11              (0x800UL << ETH_MACL3A11R_L3A11_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A11R_L3A11_12              (0x1000UL << ETH_MACL3A11R_L3A11_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A11R_L3A11_13              (0x2000UL << ETH_MACL3A11R_L3A11_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A11R_L3A11_14              (0x4000UL << ETH_MACL3A11R_L3A11_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A11R_L3A11_15              (0x8000UL << ETH_MACL3A11R_L3A11_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A11R_L3A11_16              (0x10000UL << ETH_MACL3A11R_L3A11_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A11R_L3A11_17              (0x20000UL << ETH_MACL3A11R_L3A11_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A11R_L3A11_18              (0x40000UL << ETH_MACL3A11R_L3A11_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A11R_L3A11_19              (0x80000UL << ETH_MACL3A11R_L3A11_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A11R_L3A11_20              (0x100000UL << ETH_MACL3A11R_L3A11_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A11R_L3A11_21              (0x200000UL << ETH_MACL3A11R_L3A11_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A11R_L3A11_22              (0x400000UL << ETH_MACL3A11R_L3A11_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A11R_L3A11_23              (0x800000UL << ETH_MACL3A11R_L3A11_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A11R_L3A11_24              (0x1000000UL << ETH_MACL3A11R_L3A11_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A11R_L3A11_25              (0x2000000UL << ETH_MACL3A11R_L3A11_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A11R_L3A11_26              (0x4000000UL << ETH_MACL3A11R_L3A11_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A11R_L3A11_27              (0x8000000UL << ETH_MACL3A11R_L3A11_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A11R_L3A11_28              (0x10000000UL << ETH_MACL3A11R_L3A11_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A11R_L3A11_29              (0x20000000UL << ETH_MACL3A11R_L3A11_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A11R_L3A11_30              (0x40000000UL << ETH_MACL3A11R_L3A11_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A11R_L3A11_31              (0x80000000UL << ETH_MACL3A11R_L3A11_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A21R register  *************/
#define ETH_MACL3A21R_L3A21_Pos             (0U)
#define ETH_MACL3A21R_L3A21_Msk             (0xFFFFFFFFUL << ETH_MACL3A21R_L3A21_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A21R_L3A21                 ETH_MACL3A21R_L3A21_Msk                             /*!< Layer 3 Address 2 Field */
#define ETH_MACL3A21R_L3A21_0               (0x1UL << ETH_MACL3A21R_L3A21_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A21R_L3A21_1               (0x2UL << ETH_MACL3A21R_L3A21_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A21R_L3A21_2               (0x4UL << ETH_MACL3A21R_L3A21_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A21R_L3A21_3               (0x8UL << ETH_MACL3A21R_L3A21_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A21R_L3A21_4               (0x10UL << ETH_MACL3A21R_L3A21_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A21R_L3A21_5               (0x20UL << ETH_MACL3A21R_L3A21_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A21R_L3A21_6               (0x40UL << ETH_MACL3A21R_L3A21_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A21R_L3A21_7               (0x80UL << ETH_MACL3A21R_L3A21_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A21R_L3A21_8               (0x100UL << ETH_MACL3A21R_L3A21_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A21R_L3A21_9               (0x200UL << ETH_MACL3A21R_L3A21_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A21R_L3A21_10              (0x400UL << ETH_MACL3A21R_L3A21_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A21R_L3A21_11              (0x800UL << ETH_MACL3A21R_L3A21_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A21R_L3A21_12              (0x1000UL << ETH_MACL3A21R_L3A21_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A21R_L3A21_13              (0x2000UL << ETH_MACL3A21R_L3A21_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A21R_L3A21_14              (0x4000UL << ETH_MACL3A21R_L3A21_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A21R_L3A21_15              (0x8000UL << ETH_MACL3A21R_L3A21_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A21R_L3A21_16              (0x10000UL << ETH_MACL3A21R_L3A21_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A21R_L3A21_17              (0x20000UL << ETH_MACL3A21R_L3A21_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A21R_L3A21_18              (0x40000UL << ETH_MACL3A21R_L3A21_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A21R_L3A21_19              (0x80000UL << ETH_MACL3A21R_L3A21_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A21R_L3A21_20              (0x100000UL << ETH_MACL3A21R_L3A21_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A21R_L3A21_21              (0x200000UL << ETH_MACL3A21R_L3A21_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A21R_L3A21_22              (0x400000UL << ETH_MACL3A21R_L3A21_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A21R_L3A21_23              (0x800000UL << ETH_MACL3A21R_L3A21_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A21R_L3A21_24              (0x1000000UL << ETH_MACL3A21R_L3A21_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A21R_L3A21_25              (0x2000000UL << ETH_MACL3A21R_L3A21_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A21R_L3A21_26              (0x4000000UL << ETH_MACL3A21R_L3A21_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A21R_L3A21_27              (0x8000000UL << ETH_MACL3A21R_L3A21_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A21R_L3A21_28              (0x10000000UL << ETH_MACL3A21R_L3A21_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A21R_L3A21_29              (0x20000000UL << ETH_MACL3A21R_L3A21_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A21R_L3A21_30              (0x40000000UL << ETH_MACL3A21R_L3A21_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A21R_L3A21_31              (0x80000000UL << ETH_MACL3A21R_L3A21_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACL3A31R register  *************/
#define ETH_MACL3A31R_L3A31_Pos             (0U)
#define ETH_MACL3A31R_L3A31_Msk             (0xFFFFFFFFUL << ETH_MACL3A31R_L3A31_Pos)            /*!< 0xFFFFFFFF */
#define ETH_MACL3A31R_L3A31                 ETH_MACL3A31R_L3A31_Msk                             /*!< Layer 3 Address 3 Field */
#define ETH_MACL3A31R_L3A31_0               (0x1UL << ETH_MACL3A31R_L3A31_Pos)                   /*!< 0x00000001 */
#define ETH_MACL3A31R_L3A31_1               (0x2UL << ETH_MACL3A31R_L3A31_Pos)                   /*!< 0x00000002 */
#define ETH_MACL3A31R_L3A31_2               (0x4UL << ETH_MACL3A31R_L3A31_Pos)                   /*!< 0x00000004 */
#define ETH_MACL3A31R_L3A31_3               (0x8UL << ETH_MACL3A31R_L3A31_Pos)                   /*!< 0x00000008 */
#define ETH_MACL3A31R_L3A31_4               (0x10UL << ETH_MACL3A31R_L3A31_Pos)                  /*!< 0x00000010 */
#define ETH_MACL3A31R_L3A31_5               (0x20UL << ETH_MACL3A31R_L3A31_Pos)                  /*!< 0x00000020 */
#define ETH_MACL3A31R_L3A31_6               (0x40UL << ETH_MACL3A31R_L3A31_Pos)                  /*!< 0x00000040 */
#define ETH_MACL3A31R_L3A31_7               (0x80UL << ETH_MACL3A31R_L3A31_Pos)                  /*!< 0x00000080 */
#define ETH_MACL3A31R_L3A31_8               (0x100UL << ETH_MACL3A31R_L3A31_Pos)                 /*!< 0x00000100 */
#define ETH_MACL3A31R_L3A31_9               (0x200UL << ETH_MACL3A31R_L3A31_Pos)                 /*!< 0x00000200 */
#define ETH_MACL3A31R_L3A31_10              (0x400UL << ETH_MACL3A31R_L3A31_Pos)                 /*!< 0x00000400 */
#define ETH_MACL3A31R_L3A31_11              (0x800UL << ETH_MACL3A31R_L3A31_Pos)                 /*!< 0x00000800 */
#define ETH_MACL3A31R_L3A31_12              (0x1000UL << ETH_MACL3A31R_L3A31_Pos)                /*!< 0x00001000 */
#define ETH_MACL3A31R_L3A31_13              (0x2000UL << ETH_MACL3A31R_L3A31_Pos)                /*!< 0x00002000 */
#define ETH_MACL3A31R_L3A31_14              (0x4000UL << ETH_MACL3A31R_L3A31_Pos)                /*!< 0x00004000 */
#define ETH_MACL3A31R_L3A31_15              (0x8000UL << ETH_MACL3A31R_L3A31_Pos)                /*!< 0x00008000 */
#define ETH_MACL3A31R_L3A31_16              (0x10000UL << ETH_MACL3A31R_L3A31_Pos)               /*!< 0x00010000 */
#define ETH_MACL3A31R_L3A31_17              (0x20000UL << ETH_MACL3A31R_L3A31_Pos)               /*!< 0x00020000 */
#define ETH_MACL3A31R_L3A31_18              (0x40000UL << ETH_MACL3A31R_L3A31_Pos)               /*!< 0x00040000 */
#define ETH_MACL3A31R_L3A31_19              (0x80000UL << ETH_MACL3A31R_L3A31_Pos)               /*!< 0x00080000 */
#define ETH_MACL3A31R_L3A31_20              (0x100000UL << ETH_MACL3A31R_L3A31_Pos)              /*!< 0x00100000 */
#define ETH_MACL3A31R_L3A31_21              (0x200000UL << ETH_MACL3A31R_L3A31_Pos)              /*!< 0x00200000 */
#define ETH_MACL3A31R_L3A31_22              (0x400000UL << ETH_MACL3A31R_L3A31_Pos)              /*!< 0x00400000 */
#define ETH_MACL3A31R_L3A31_23              (0x800000UL << ETH_MACL3A31R_L3A31_Pos)              /*!< 0x00800000 */
#define ETH_MACL3A31R_L3A31_24              (0x1000000UL << ETH_MACL3A31R_L3A31_Pos)             /*!< 0x01000000 */
#define ETH_MACL3A31R_L3A31_25              (0x2000000UL << ETH_MACL3A31R_L3A31_Pos)             /*!< 0x02000000 */
#define ETH_MACL3A31R_L3A31_26              (0x4000000UL << ETH_MACL3A31R_L3A31_Pos)             /*!< 0x04000000 */
#define ETH_MACL3A31R_L3A31_27              (0x8000000UL << ETH_MACL3A31R_L3A31_Pos)             /*!< 0x08000000 */
#define ETH_MACL3A31R_L3A31_28              (0x10000000UL << ETH_MACL3A31R_L3A31_Pos)            /*!< 0x10000000 */
#define ETH_MACL3A31R_L3A31_29              (0x20000000UL << ETH_MACL3A31R_L3A31_Pos)            /*!< 0x20000000 */
#define ETH_MACL3A31R_L3A31_30              (0x40000000UL << ETH_MACL3A31R_L3A31_Pos)            /*!< 0x40000000 */
#define ETH_MACL3A31R_L3A31_31              (0x80000000UL << ETH_MACL3A31R_L3A31_Pos)            /*!< 0x80000000 */

/*************  Bit definition for ETH_MACARPAR register  **************/
#define ETH_MACARPAR_ARPPA_Pos              (0U)
#define ETH_MACARPAR_ARPPA_Msk              (0xFFFFFFFFUL << ETH_MACARPAR_ARPPA_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACARPAR_ARPPA                  ETH_MACARPAR_ARPPA_Msk                              /*!< ARP Protocol Address */
#define ETH_MACARPAR_ARPPA_0                (0x1UL << ETH_MACARPAR_ARPPA_Pos)                    /*!< 0x00000001 */
#define ETH_MACARPAR_ARPPA_1                (0x2UL << ETH_MACARPAR_ARPPA_Pos)                    /*!< 0x00000002 */
#define ETH_MACARPAR_ARPPA_2                (0x4UL << ETH_MACARPAR_ARPPA_Pos)                    /*!< 0x00000004 */
#define ETH_MACARPAR_ARPPA_3                (0x8UL << ETH_MACARPAR_ARPPA_Pos)                    /*!< 0x00000008 */
#define ETH_MACARPAR_ARPPA_4                (0x10UL << ETH_MACARPAR_ARPPA_Pos)                   /*!< 0x00000010 */
#define ETH_MACARPAR_ARPPA_5                (0x20UL << ETH_MACARPAR_ARPPA_Pos)                   /*!< 0x00000020 */
#define ETH_MACARPAR_ARPPA_6                (0x40UL << ETH_MACARPAR_ARPPA_Pos)                   /*!< 0x00000040 */
#define ETH_MACARPAR_ARPPA_7                (0x80UL << ETH_MACARPAR_ARPPA_Pos)                   /*!< 0x00000080 */
#define ETH_MACARPAR_ARPPA_8                (0x100UL << ETH_MACARPAR_ARPPA_Pos)                  /*!< 0x00000100 */
#define ETH_MACARPAR_ARPPA_9                (0x200UL << ETH_MACARPAR_ARPPA_Pos)                  /*!< 0x00000200 */
#define ETH_MACARPAR_ARPPA_10               (0x400UL << ETH_MACARPAR_ARPPA_Pos)                  /*!< 0x00000400 */
#define ETH_MACARPAR_ARPPA_11               (0x800UL << ETH_MACARPAR_ARPPA_Pos)                  /*!< 0x00000800 */
#define ETH_MACARPAR_ARPPA_12               (0x1000UL << ETH_MACARPAR_ARPPA_Pos)                 /*!< 0x00001000 */
#define ETH_MACARPAR_ARPPA_13               (0x2000UL << ETH_MACARPAR_ARPPA_Pos)                 /*!< 0x00002000 */
#define ETH_MACARPAR_ARPPA_14               (0x4000UL << ETH_MACARPAR_ARPPA_Pos)                 /*!< 0x00004000 */
#define ETH_MACARPAR_ARPPA_15               (0x8000UL << ETH_MACARPAR_ARPPA_Pos)                 /*!< 0x00008000 */
#define ETH_MACARPAR_ARPPA_16               (0x10000UL << ETH_MACARPAR_ARPPA_Pos)                /*!< 0x00010000 */
#define ETH_MACARPAR_ARPPA_17               (0x20000UL << ETH_MACARPAR_ARPPA_Pos)                /*!< 0x00020000 */
#define ETH_MACARPAR_ARPPA_18               (0x40000UL << ETH_MACARPAR_ARPPA_Pos)                /*!< 0x00040000 */
#define ETH_MACARPAR_ARPPA_19               (0x80000UL << ETH_MACARPAR_ARPPA_Pos)                /*!< 0x00080000 */
#define ETH_MACARPAR_ARPPA_20               (0x100000UL << ETH_MACARPAR_ARPPA_Pos)               /*!< 0x00100000 */
#define ETH_MACARPAR_ARPPA_21               (0x200000UL << ETH_MACARPAR_ARPPA_Pos)               /*!< 0x00200000 */
#define ETH_MACARPAR_ARPPA_22               (0x400000UL << ETH_MACARPAR_ARPPA_Pos)               /*!< 0x00400000 */
#define ETH_MACARPAR_ARPPA_23               (0x800000UL << ETH_MACARPAR_ARPPA_Pos)               /*!< 0x00800000 */
#define ETH_MACARPAR_ARPPA_24               (0x1000000UL << ETH_MACARPAR_ARPPA_Pos)              /*!< 0x01000000 */
#define ETH_MACARPAR_ARPPA_25               (0x2000000UL << ETH_MACARPAR_ARPPA_Pos)              /*!< 0x02000000 */
#define ETH_MACARPAR_ARPPA_26               (0x4000000UL << ETH_MACARPAR_ARPPA_Pos)              /*!< 0x04000000 */
#define ETH_MACARPAR_ARPPA_27               (0x8000000UL << ETH_MACARPAR_ARPPA_Pos)              /*!< 0x08000000 */
#define ETH_MACARPAR_ARPPA_28               (0x10000000UL << ETH_MACARPAR_ARPPA_Pos)             /*!< 0x10000000 */
#define ETH_MACARPAR_ARPPA_29               (0x20000000UL << ETH_MACARPAR_ARPPA_Pos)             /*!< 0x20000000 */
#define ETH_MACARPAR_ARPPA_30               (0x40000000UL << ETH_MACARPAR_ARPPA_Pos)             /*!< 0x40000000 */
#define ETH_MACARPAR_ARPPA_31               (0x80000000UL << ETH_MACARPAR_ARPPA_Pos)             /*!< 0x80000000 */

/**************  Bit definition for ETH_MACTSCR register  **************/
#define ETH_MACTSCR_TSENA_Pos               (0U)
#define ETH_MACTSCR_TSENA_Msk               (0x1UL << ETH_MACTSCR_TSENA_Pos)                     /*!< 0x00000001 */
#define ETH_MACTSCR_TSENA                   ETH_MACTSCR_TSENA_Msk                               /*!< Enable Timestamp */
#define ETH_MACTSCR_TSCFUPDT_Pos            (1U)
#define ETH_MACTSCR_TSCFUPDT_Msk            (0x1UL << ETH_MACTSCR_TSCFUPDT_Pos)                  /*!< 0x00000002 */
#define ETH_MACTSCR_TSCFUPDT                ETH_MACTSCR_TSCFUPDT_Msk                            /*!< Fine or Coarse Timestamp Update */
#define ETH_MACTSCR_TSINIT_Pos              (2U)
#define ETH_MACTSCR_TSINIT_Msk              (0x1UL << ETH_MACTSCR_TSINIT_Pos)                    /*!< 0x00000004 */
#define ETH_MACTSCR_TSINIT                  ETH_MACTSCR_TSINIT_Msk                              /*!< Initialize Timestamp */
#define ETH_MACTSCR_TSUPDT_Pos              (3U)
#define ETH_MACTSCR_TSUPDT_Msk              (0x1UL << ETH_MACTSCR_TSUPDT_Pos)                    /*!< 0x00000008 */
#define ETH_MACTSCR_TSUPDT                  ETH_MACTSCR_TSUPDT_Msk                              /*!< Update Timestamp */
#define ETH_MACTSCR_TSADDREG_Pos            (5U)
#define ETH_MACTSCR_TSADDREG_Msk            (0x1UL << ETH_MACTSCR_TSADDREG_Pos)                  /*!< 0x00000020 */
#define ETH_MACTSCR_TSADDREG                ETH_MACTSCR_TSADDREG_Msk                            /*!< Update Addend Register */
#define ETH_MACTSCR_PTGE_Pos                (6U)
#define ETH_MACTSCR_PTGE_Msk                (0x1UL << ETH_MACTSCR_PTGE_Pos)                  /*!< 0x00000020 */
#define ETH_MACTSCR_PTGE                    ETH_MACTSCR_PTGE_Msk                            /*!< Update Addend Register */
#define ETH_MACTSCR_TSENALL_Pos             (8U)
#define ETH_MACTSCR_TSENALL_Msk             (0x1UL << ETH_MACTSCR_TSENALL_Pos)                   /*!< 0x00000100 */
#define ETH_MACTSCR_TSENALL                 ETH_MACTSCR_TSENALL_Msk                             /*!< Enable Timestamp for All Packets */
#define ETH_MACTSCR_TSCTRLSSR_Pos           (9U)
#define ETH_MACTSCR_TSCTRLSSR_Msk           (0x1UL << ETH_MACTSCR_TSCTRLSSR_Pos)                 /*!< 0x00000200 */
#define ETH_MACTSCR_TSCTRLSSR               ETH_MACTSCR_TSCTRLSSR_Msk                           /*!< Timestamp Digital or Binary Rollover Control */
#define ETH_MACTSCR_TSVER2ENA_Pos           (10U)
#define ETH_MACTSCR_TSVER2ENA_Msk           (0x1UL << ETH_MACTSCR_TSVER2ENA_Pos)                 /*!< 0x00000400 */
#define ETH_MACTSCR_TSVER2ENA               ETH_MACTSCR_TSVER2ENA_Msk                           /*!< Enable PTP Packet Processing for Version 2 Format */
#define ETH_MACTSCR_TSIPENA_Pos             (11U)
#define ETH_MACTSCR_TSIPENA_Msk             (0x1UL << ETH_MACTSCR_TSIPENA_Pos)                   /*!< 0x00000800 */
#define ETH_MACTSCR_TSIPENA                 ETH_MACTSCR_TSIPENA_Msk                             /*!< Enable Processing of PTP over Ethernet Packets */
#define ETH_MACTSCR_TSIPV6ENA_Pos           (12U)
#define ETH_MACTSCR_TSIPV6ENA_Msk           (0x1UL << ETH_MACTSCR_TSIPV6ENA_Pos)                 /*!< 0x00001000 */
#define ETH_MACTSCR_TSIPV6ENA               ETH_MACTSCR_TSIPV6ENA_Msk                           /*!< Enable Processing of PTP Packets Sent over IPv6-UDP */
#define ETH_MACTSCR_TSIPV4ENA_Pos           (13U)
#define ETH_MACTSCR_TSIPV4ENA_Msk           (0x1UL << ETH_MACTSCR_TSIPV4ENA_Pos)                 /*!< 0x00002000 */
#define ETH_MACTSCR_TSIPV4ENA               ETH_MACTSCR_TSIPV4ENA_Msk                           /*!< Enable Processing of PTP Packets Sent over IPv4-UDP */
#define ETH_MACTSCR_TSEVNTENA_Pos           (14U)
#define ETH_MACTSCR_TSEVNTENA_Msk           (0x1UL << ETH_MACTSCR_TSEVNTENA_Pos)                 /*!< 0x00004000 */
#define ETH_MACTSCR_TSEVNTENA               ETH_MACTSCR_TSEVNTENA_Msk                           /*!< Enable Timestamp Snapshot for Event Messages */
#define ETH_MACTSCR_TSMSTRENA_Pos           (15U)
#define ETH_MACTSCR_TSMSTRENA_Msk           (0x1UL << ETH_MACTSCR_TSMSTRENA_Pos)                 /*!< 0x00008000 */
#define ETH_MACTSCR_TSMSTRENA               ETH_MACTSCR_TSMSTRENA_Msk                           /*!< Enable Snapshot for Messages Relevant to Master */
#define ETH_MACTSCR_SNAPTYPSEL_Pos          (16U)
#define ETH_MACTSCR_SNAPTYPSEL_Msk          (0x3UL << ETH_MACTSCR_SNAPTYPSEL_Pos)                /*!< 0x00030000 */
#define ETH_MACTSCR_SNAPTYPSEL              ETH_MACTSCR_SNAPTYPSEL_Msk                          /*!< Select PTP packets for Taking Snapshots */
#define ETH_MACTSCR_SNAPTYPSEL_0            (0x1UL << ETH_MACTSCR_SNAPTYPSEL_Pos)                /*!< 0x00010000 */
#define ETH_MACTSCR_SNAPTYPSEL_1            (0x2UL << ETH_MACTSCR_SNAPTYPSEL_Pos)                /*!< 0x00020000 */
#define ETH_MACTSCR_TSENMACADDR_Pos         (18U)
#define ETH_MACTSCR_TSENMACADDR_Msk         (0x1UL << ETH_MACTSCR_TSENMACADDR_Pos)               /*!< 0x00040000 */
#define ETH_MACTSCR_TSENMACADDR             ETH_MACTSCR_TSENMACADDR_Msk                         /*!< Enable MAC Address for PTP Packet Filtering */
#define ETH_MACTSCR_ESTI_Pos                (20U)
#define ETH_MACTSCR_ESTI_Msk                (0x1UL << ETH_MACTSCR_ESTI_Pos)                       /*!< 0x00080000 */
#define ETH_MACTSCR_ESTI                     ETH_MACTSCR_ESTI_Msk                                 /*!< Enable checksum correction during OST for PTP over UDP/IPv4 packets */
#define ETH_MACTSCR_TXTSSTSM_Pos            (24U)
#define ETH_MACTSCR_TXTSSTSM_Msk            (0x1UL << ETH_MACTSCR_TXTSSTSM_Pos)                  /*!< 0x01000000 */
#define ETH_MACTSCR_TXTSSTSM                ETH_MACTSCR_TXTSSTSM_Msk                            /*!< Transmit Timestamp Status Mode */
#define ETH_MACTSCR_AV8021ASMEN_Pos         (28U)
#define ETH_MACTSCR_AV8021ASMEN_Msk         (0x1UL << ETH_MACTSCR_AV8021ASMEN_Pos)               /*!< 0x10000000 */
#define ETH_MACTSCR_AV8021ASMEN             ETH_MACTSCR_AV8021ASMEN_Msk                         /*!< AV 802.1AS Mode Enable */

/**************  Bit definition for ETH_MACSSIR register  **************/
#define ETH_MACSSIR_SSINC_Pos               (16U)
#define ETH_MACSSIR_SSINC_Msk               (0xFFUL << ETH_MACSSIR_SSINC_Pos)                    /*!< 0x00FF0000 */
#define ETH_MACSSIR_SSINC                   ETH_MACSSIR_SSINC_Msk                               /*!< Sub-second Increment Value */
#define ETH_MACSSIR_SSINC_0                 (0x1UL << ETH_MACSSIR_SSINC_Pos)                     /*!< 0x00010000 */
#define ETH_MACSSIR_SSINC_1                 (0x2UL << ETH_MACSSIR_SSINC_Pos)                     /*!< 0x00020000 */
#define ETH_MACSSIR_SSINC_2                 (0x4UL << ETH_MACSSIR_SSINC_Pos)                     /*!< 0x00040000 */
#define ETH_MACSSIR_SSINC_3                 (0x8UL << ETH_MACSSIR_SSINC_Pos)                     /*!< 0x00080000 */
#define ETH_MACSSIR_SSINC_4                 (0x10UL << ETH_MACSSIR_SSINC_Pos)                    /*!< 0x00100000 */
#define ETH_MACSSIR_SSINC_5                 (0x20UL << ETH_MACSSIR_SSINC_Pos)                    /*!< 0x00200000 */
#define ETH_MACSSIR_SSINC_6                 (0x40UL << ETH_MACSSIR_SSINC_Pos)                    /*!< 0x00400000 */
#define ETH_MACSSIR_SSINC_7                 (0x80UL << ETH_MACSSIR_SSINC_Pos)                    /*!< 0x00800000 */

/**************  Bit definition for ETH_MACSTSR register  **************/
#define ETH_MACSTSR_TSS_Pos                 (0U)
#define ETH_MACSTSR_TSS_Msk                 (0xFFFFFFFFUL << ETH_MACSTSR_TSS_Pos)                /*!< 0xFFFFFFFF */
#define ETH_MACSTSR_TSS                     ETH_MACSTSR_TSS_Msk                                 /*!< Timestamp Second */
#define ETH_MACSTSR_TSS_0                   (0x1UL << ETH_MACSTSR_TSS_Pos)                       /*!< 0x00000001 */
#define ETH_MACSTSR_TSS_1                   (0x2UL << ETH_MACSTSR_TSS_Pos)                       /*!< 0x00000002 */
#define ETH_MACSTSR_TSS_2                   (0x4UL << ETH_MACSTSR_TSS_Pos)                       /*!< 0x00000004 */
#define ETH_MACSTSR_TSS_3                   (0x8UL << ETH_MACSTSR_TSS_Pos)                       /*!< 0x00000008 */
#define ETH_MACSTSR_TSS_4                   (0x10UL << ETH_MACSTSR_TSS_Pos)                      /*!< 0x00000010 */
#define ETH_MACSTSR_TSS_5                   (0x20UL << ETH_MACSTSR_TSS_Pos)                      /*!< 0x00000020 */
#define ETH_MACSTSR_TSS_6                   (0x40UL << ETH_MACSTSR_TSS_Pos)                      /*!< 0x00000040 */
#define ETH_MACSTSR_TSS_7                   (0x80UL << ETH_MACSTSR_TSS_Pos)                      /*!< 0x00000080 */
#define ETH_MACSTSR_TSS_8                   (0x100UL << ETH_MACSTSR_TSS_Pos)                     /*!< 0x00000100 */
#define ETH_MACSTSR_TSS_9                   (0x200UL << ETH_MACSTSR_TSS_Pos)                     /*!< 0x00000200 */
#define ETH_MACSTSR_TSS_10                  (0x400UL << ETH_MACSTSR_TSS_Pos)                     /*!< 0x00000400 */
#define ETH_MACSTSR_TSS_11                  (0x800UL << ETH_MACSTSR_TSS_Pos)                     /*!< 0x00000800 */
#define ETH_MACSTSR_TSS_12                  (0x1000UL << ETH_MACSTSR_TSS_Pos)                    /*!< 0x00001000 */
#define ETH_MACSTSR_TSS_13                  (0x2000UL << ETH_MACSTSR_TSS_Pos)                    /*!< 0x00002000 */
#define ETH_MACSTSR_TSS_14                  (0x4000UL << ETH_MACSTSR_TSS_Pos)                    /*!< 0x00004000 */
#define ETH_MACSTSR_TSS_15                  (0x8000UL << ETH_MACSTSR_TSS_Pos)                    /*!< 0x00008000 */
#define ETH_MACSTSR_TSS_16                  (0x10000UL << ETH_MACSTSR_TSS_Pos)                   /*!< 0x00010000 */
#define ETH_MACSTSR_TSS_17                  (0x20000UL << ETH_MACSTSR_TSS_Pos)                   /*!< 0x00020000 */
#define ETH_MACSTSR_TSS_18                  (0x40000UL << ETH_MACSTSR_TSS_Pos)                   /*!< 0x00040000 */
#define ETH_MACSTSR_TSS_19                  (0x80000UL << ETH_MACSTSR_TSS_Pos)                   /*!< 0x00080000 */
#define ETH_MACSTSR_TSS_20                  (0x100000UL << ETH_MACSTSR_TSS_Pos)                  /*!< 0x00100000 */
#define ETH_MACSTSR_TSS_21                  (0x200000UL << ETH_MACSTSR_TSS_Pos)                  /*!< 0x00200000 */
#define ETH_MACSTSR_TSS_22                  (0x400000UL << ETH_MACSTSR_TSS_Pos)                  /*!< 0x00400000 */
#define ETH_MACSTSR_TSS_23                  (0x800000UL << ETH_MACSTSR_TSS_Pos)                  /*!< 0x00800000 */
#define ETH_MACSTSR_TSS_24                  (0x1000000UL << ETH_MACSTSR_TSS_Pos)                 /*!< 0x01000000 */
#define ETH_MACSTSR_TSS_25                  (0x2000000UL << ETH_MACSTSR_TSS_Pos)                 /*!< 0x02000000 */
#define ETH_MACSTSR_TSS_26                  (0x4000000UL << ETH_MACSTSR_TSS_Pos)                 /*!< 0x04000000 */
#define ETH_MACSTSR_TSS_27                  (0x8000000UL << ETH_MACSTSR_TSS_Pos)                 /*!< 0x08000000 */
#define ETH_MACSTSR_TSS_28                  (0x10000000UL << ETH_MACSTSR_TSS_Pos)                /*!< 0x10000000 */
#define ETH_MACSTSR_TSS_29                  (0x20000000UL << ETH_MACSTSR_TSS_Pos)                /*!< 0x20000000 */
#define ETH_MACSTSR_TSS_30                  (0x40000000UL << ETH_MACSTSR_TSS_Pos)                /*!< 0x40000000 */
#define ETH_MACSTSR_TSS_31                  (0x80000000UL << ETH_MACSTSR_TSS_Pos)                /*!< 0x80000000 */

/**************  Bit definition for ETH_MACSTNR register  **************/
#define ETH_MACSTNR_TSSS_Pos                (0U)
#define ETH_MACSTNR_TSSS_Msk                (0x7FFFFFFFUL << ETH_MACSTNR_TSSS_Pos)               /*!< 0x7FFFFFFF */
#define ETH_MACSTNR_TSSS                    ETH_MACSTNR_TSSS_Msk                                /*!< Timestamp Sub-seconds */
#define ETH_MACSTNR_TSSS_0                  (0x1UL << ETH_MACSTNR_TSSS_Pos)                      /*!< 0x00000001 */
#define ETH_MACSTNR_TSSS_1                  (0x2UL << ETH_MACSTNR_TSSS_Pos)                      /*!< 0x00000002 */
#define ETH_MACSTNR_TSSS_2                  (0x4UL << ETH_MACSTNR_TSSS_Pos)                      /*!< 0x00000004 */
#define ETH_MACSTNR_TSSS_3                  (0x8UL << ETH_MACSTNR_TSSS_Pos)                      /*!< 0x00000008 */
#define ETH_MACSTNR_TSSS_4                  (0x10UL << ETH_MACSTNR_TSSS_Pos)                     /*!< 0x00000010 */
#define ETH_MACSTNR_TSSS_5                  (0x20UL << ETH_MACSTNR_TSSS_Pos)                     /*!< 0x00000020 */
#define ETH_MACSTNR_TSSS_6                  (0x40UL << ETH_MACSTNR_TSSS_Pos)                     /*!< 0x00000040 */
#define ETH_MACSTNR_TSSS_7                  (0x80UL << ETH_MACSTNR_TSSS_Pos)                     /*!< 0x00000080 */
#define ETH_MACSTNR_TSSS_8                  (0x100UL << ETH_MACSTNR_TSSS_Pos)                    /*!< 0x00000100 */
#define ETH_MACSTNR_TSSS_9                  (0x200UL << ETH_MACSTNR_TSSS_Pos)                    /*!< 0x00000200 */
#define ETH_MACSTNR_TSSS_10                 (0x400UL << ETH_MACSTNR_TSSS_Pos)                    /*!< 0x00000400 */
#define ETH_MACSTNR_TSSS_11                 (0x800UL << ETH_MACSTNR_TSSS_Pos)                    /*!< 0x00000800 */
#define ETH_MACSTNR_TSSS_12                 (0x1000UL << ETH_MACSTNR_TSSS_Pos)                   /*!< 0x00001000 */
#define ETH_MACSTNR_TSSS_13                 (0x2000UL << ETH_MACSTNR_TSSS_Pos)                   /*!< 0x00002000 */
#define ETH_MACSTNR_TSSS_14                 (0x4000UL << ETH_MACSTNR_TSSS_Pos)                   /*!< 0x00004000 */
#define ETH_MACSTNR_TSSS_15                 (0x8000UL << ETH_MACSTNR_TSSS_Pos)                   /*!< 0x00008000 */
#define ETH_MACSTNR_TSSS_16                 (0x10000UL << ETH_MACSTNR_TSSS_Pos)                  /*!< 0x00010000 */
#define ETH_MACSTNR_TSSS_17                 (0x20000UL << ETH_MACSTNR_TSSS_Pos)                  /*!< 0x00020000 */
#define ETH_MACSTNR_TSSS_18                 (0x40000UL << ETH_MACSTNR_TSSS_Pos)                  /*!< 0x00040000 */
#define ETH_MACSTNR_TSSS_19                 (0x80000UL << ETH_MACSTNR_TSSS_Pos)                  /*!< 0x00080000 */
#define ETH_MACSTNR_TSSS_20                 (0x100000UL << ETH_MACSTNR_TSSS_Pos)                 /*!< 0x00100000 */
#define ETH_MACSTNR_TSSS_21                 (0x200000UL << ETH_MACSTNR_TSSS_Pos)                 /*!< 0x00200000 */
#define ETH_MACSTNR_TSSS_22                 (0x400000UL << ETH_MACSTNR_TSSS_Pos)                 /*!< 0x00400000 */
#define ETH_MACSTNR_TSSS_23                 (0x800000UL << ETH_MACSTNR_TSSS_Pos)                 /*!< 0x00800000 */
#define ETH_MACSTNR_TSSS_24                 (0x1000000UL << ETH_MACSTNR_TSSS_Pos)                /*!< 0x01000000 */
#define ETH_MACSTNR_TSSS_25                 (0x2000000UL << ETH_MACSTNR_TSSS_Pos)                /*!< 0x02000000 */
#define ETH_MACSTNR_TSSS_26                 (0x4000000UL << ETH_MACSTNR_TSSS_Pos)                /*!< 0x04000000 */
#define ETH_MACSTNR_TSSS_27                 (0x8000000UL << ETH_MACSTNR_TSSS_Pos)                /*!< 0x08000000 */
#define ETH_MACSTNR_TSSS_28                 (0x10000000UL << ETH_MACSTNR_TSSS_Pos)               /*!< 0x10000000 */
#define ETH_MACSTNR_TSSS_29                 (0x20000000UL << ETH_MACSTNR_TSSS_Pos)               /*!< 0x20000000 */
#define ETH_MACSTNR_TSSS_30                 (0x40000000UL << ETH_MACSTNR_TSSS_Pos)               /*!< 0x40000000 */

/*************  Bit definition for ETH_MACSTSUR register  **************/
#define ETH_MACSTSUR_TSS_Pos                (0U)
#define ETH_MACSTSUR_TSS_Msk                (0xFFFFFFFFUL << ETH_MACSTSUR_TSS_Pos)               /*!< 0xFFFFFFFF */
#define ETH_MACSTSUR_TSS                    ETH_MACSTSUR_TSS_Msk                                /*!< Timestamp Seconds */
#define ETH_MACSTSUR_TSS_0                  (0x1UL << ETH_MACSTSUR_TSS_Pos)                      /*!< 0x00000001 */
#define ETH_MACSTSUR_TSS_1                  (0x2UL << ETH_MACSTSUR_TSS_Pos)                      /*!< 0x00000002 */
#define ETH_MACSTSUR_TSS_2                  (0x4UL << ETH_MACSTSUR_TSS_Pos)                      /*!< 0x00000004 */
#define ETH_MACSTSUR_TSS_3                  (0x8UL << ETH_MACSTSUR_TSS_Pos)                      /*!< 0x00000008 */
#define ETH_MACSTSUR_TSS_4                  (0x10UL << ETH_MACSTSUR_TSS_Pos)                     /*!< 0x00000010 */
#define ETH_MACSTSUR_TSS_5                  (0x20UL << ETH_MACSTSUR_TSS_Pos)                     /*!< 0x00000020 */
#define ETH_MACSTSUR_TSS_6                  (0x40UL << ETH_MACSTSUR_TSS_Pos)                     /*!< 0x00000040 */
#define ETH_MACSTSUR_TSS_7                  (0x80UL << ETH_MACSTSUR_TSS_Pos)                     /*!< 0x00000080 */
#define ETH_MACSTSUR_TSS_8                  (0x100UL << ETH_MACSTSUR_TSS_Pos)                    /*!< 0x00000100 */
#define ETH_MACSTSUR_TSS_9                  (0x200UL << ETH_MACSTSUR_TSS_Pos)                    /*!< 0x00000200 */
#define ETH_MACSTSUR_TSS_10                 (0x400UL << ETH_MACSTSUR_TSS_Pos)                    /*!< 0x00000400 */
#define ETH_MACSTSUR_TSS_11                 (0x800UL << ETH_MACSTSUR_TSS_Pos)                    /*!< 0x00000800 */
#define ETH_MACSTSUR_TSS_12                 (0x1000UL << ETH_MACSTSUR_TSS_Pos)                   /*!< 0x00001000 */
#define ETH_MACSTSUR_TSS_13                 (0x2000UL << ETH_MACSTSUR_TSS_Pos)                   /*!< 0x00002000 */
#define ETH_MACSTSUR_TSS_14                 (0x4000UL << ETH_MACSTSUR_TSS_Pos)                   /*!< 0x00004000 */
#define ETH_MACSTSUR_TSS_15                 (0x8000UL << ETH_MACSTSUR_TSS_Pos)                   /*!< 0x00008000 */
#define ETH_MACSTSUR_TSS_16                 (0x10000UL << ETH_MACSTSUR_TSS_Pos)                  /*!< 0x00010000 */
#define ETH_MACSTSUR_TSS_17                 (0x20000UL << ETH_MACSTSUR_TSS_Pos)                  /*!< 0x00020000 */
#define ETH_MACSTSUR_TSS_18                 (0x40000UL << ETH_MACSTSUR_TSS_Pos)                  /*!< 0x00040000 */
#define ETH_MACSTSUR_TSS_19                 (0x80000UL << ETH_MACSTSUR_TSS_Pos)                  /*!< 0x00080000 */
#define ETH_MACSTSUR_TSS_20                 (0x100000UL << ETH_MACSTSUR_TSS_Pos)                 /*!< 0x00100000 */
#define ETH_MACSTSUR_TSS_21                 (0x200000UL << ETH_MACSTSUR_TSS_Pos)                 /*!< 0x00200000 */
#define ETH_MACSTSUR_TSS_22                 (0x400000UL << ETH_MACSTSUR_TSS_Pos)                 /*!< 0x00400000 */
#define ETH_MACSTSUR_TSS_23                 (0x800000UL << ETH_MACSTSUR_TSS_Pos)                 /*!< 0x00800000 */
#define ETH_MACSTSUR_TSS_24                 (0x1000000UL << ETH_MACSTSUR_TSS_Pos)                /*!< 0x01000000 */
#define ETH_MACSTSUR_TSS_25                 (0x2000000UL << ETH_MACSTSUR_TSS_Pos)                /*!< 0x02000000 */
#define ETH_MACSTSUR_TSS_26                 (0x4000000UL << ETH_MACSTSUR_TSS_Pos)                /*!< 0x04000000 */
#define ETH_MACSTSUR_TSS_27                 (0x8000000UL << ETH_MACSTSUR_TSS_Pos)                /*!< 0x08000000 */
#define ETH_MACSTSUR_TSS_28                 (0x10000000UL << ETH_MACSTSUR_TSS_Pos)               /*!< 0x10000000 */
#define ETH_MACSTSUR_TSS_29                 (0x20000000UL << ETH_MACSTSUR_TSS_Pos)               /*!< 0x20000000 */
#define ETH_MACSTSUR_TSS_30                 (0x40000000UL << ETH_MACSTSUR_TSS_Pos)               /*!< 0x40000000 */
#define ETH_MACSTSUR_TSS_31                 (0x80000000UL << ETH_MACSTSUR_TSS_Pos)               /*!< 0x80000000 */

/*************  Bit definition for ETH_MACSTNUR register  **************/
#define ETH_MACSTNUR_TSSS_Pos               (0U)
#define ETH_MACSTNUR_TSSS_Msk               (0x7FFFFFFFUL << ETH_MACSTNUR_TSSS_Pos)              /*!< 0x7FFFFFFF */
#define ETH_MACSTNUR_TSSS                   ETH_MACSTNUR_TSSS_Msk                               /*!< Timestamp Sub-seconds */
#define ETH_MACSTNUR_TSSS_0                 (0x1UL << ETH_MACSTNUR_TSSS_Pos)                     /*!< 0x00000001 */
#define ETH_MACSTNUR_TSSS_1                 (0x2UL << ETH_MACSTNUR_TSSS_Pos)                     /*!< 0x00000002 */
#define ETH_MACSTNUR_TSSS_2                 (0x4UL << ETH_MACSTNUR_TSSS_Pos)                     /*!< 0x00000004 */
#define ETH_MACSTNUR_TSSS_3                 (0x8UL << ETH_MACSTNUR_TSSS_Pos)                     /*!< 0x00000008 */
#define ETH_MACSTNUR_TSSS_4                 (0x10UL << ETH_MACSTNUR_TSSS_Pos)                    /*!< 0x00000010 */
#define ETH_MACSTNUR_TSSS_5                 (0x20UL << ETH_MACSTNUR_TSSS_Pos)                    /*!< 0x00000020 */
#define ETH_MACSTNUR_TSSS_6                 (0x40UL << ETH_MACSTNUR_TSSS_Pos)                    /*!< 0x00000040 */
#define ETH_MACSTNUR_TSSS_7                 (0x80UL << ETH_MACSTNUR_TSSS_Pos)                    /*!< 0x00000080 */
#define ETH_MACSTNUR_TSSS_8                 (0x100UL << ETH_MACSTNUR_TSSS_Pos)                   /*!< 0x00000100 */
#define ETH_MACSTNUR_TSSS_9                 (0x200UL << ETH_MACSTNUR_TSSS_Pos)                   /*!< 0x00000200 */
#define ETH_MACSTNUR_TSSS_10                (0x400UL << ETH_MACSTNUR_TSSS_Pos)                   /*!< 0x00000400 */
#define ETH_MACSTNUR_TSSS_11                (0x800UL << ETH_MACSTNUR_TSSS_Pos)                   /*!< 0x00000800 */
#define ETH_MACSTNUR_TSSS_12                (0x1000UL << ETH_MACSTNUR_TSSS_Pos)                  /*!< 0x00001000 */
#define ETH_MACSTNUR_TSSS_13                (0x2000UL << ETH_MACSTNUR_TSSS_Pos)                  /*!< 0x00002000 */
#define ETH_MACSTNUR_TSSS_14                (0x4000UL << ETH_MACSTNUR_TSSS_Pos)                  /*!< 0x00004000 */
#define ETH_MACSTNUR_TSSS_15                (0x8000UL << ETH_MACSTNUR_TSSS_Pos)                  /*!< 0x00008000 */
#define ETH_MACSTNUR_TSSS_16                (0x10000UL << ETH_MACSTNUR_TSSS_Pos)                 /*!< 0x00010000 */
#define ETH_MACSTNUR_TSSS_17                (0x20000UL << ETH_MACSTNUR_TSSS_Pos)                 /*!< 0x00020000 */
#define ETH_MACSTNUR_TSSS_18                (0x40000UL << ETH_MACSTNUR_TSSS_Pos)                 /*!< 0x00040000 */
#define ETH_MACSTNUR_TSSS_19                (0x80000UL << ETH_MACSTNUR_TSSS_Pos)                 /*!< 0x00080000 */
#define ETH_MACSTNUR_TSSS_20                (0x100000UL << ETH_MACSTNUR_TSSS_Pos)                /*!< 0x00100000 */
#define ETH_MACSTNUR_TSSS_21                (0x200000UL << ETH_MACSTNUR_TSSS_Pos)                /*!< 0x00200000 */
#define ETH_MACSTNUR_TSSS_22                (0x400000UL << ETH_MACSTNUR_TSSS_Pos)                /*!< 0x00400000 */
#define ETH_MACSTNUR_TSSS_23                (0x800000UL << ETH_MACSTNUR_TSSS_Pos)                /*!< 0x00800000 */
#define ETH_MACSTNUR_TSSS_24                (0x1000000UL << ETH_MACSTNUR_TSSS_Pos)               /*!< 0x01000000 */
#define ETH_MACSTNUR_TSSS_25                (0x2000000UL << ETH_MACSTNUR_TSSS_Pos)               /*!< 0x02000000 */
#define ETH_MACSTNUR_TSSS_26                (0x4000000UL << ETH_MACSTNUR_TSSS_Pos)               /*!< 0x04000000 */
#define ETH_MACSTNUR_TSSS_27                (0x8000000UL << ETH_MACSTNUR_TSSS_Pos)               /*!< 0x08000000 */
#define ETH_MACSTNUR_TSSS_28                (0x10000000UL << ETH_MACSTNUR_TSSS_Pos)              /*!< 0x10000000 */
#define ETH_MACSTNUR_TSSS_29                (0x20000000UL << ETH_MACSTNUR_TSSS_Pos)              /*!< 0x20000000 */
#define ETH_MACSTNUR_TSSS_30                (0x40000000UL << ETH_MACSTNUR_TSSS_Pos)              /*!< 0x40000000 */
#define ETH_MACSTNUR_ADDSUB_Pos             (31U)
#define ETH_MACSTNUR_ADDSUB_Msk             (0x1UL << ETH_MACSTNUR_ADDSUB_Pos)                   /*!< 0x80000000 */
#define ETH_MACSTNUR_ADDSUB                 ETH_MACSTNUR_ADDSUB_Msk                             /*!< Add or Subtract Time */

/**************  Bit definition for ETH_MACTSAR register  **************/
#define ETH_MACTSAR_TSAR_Pos                (0U)
#define ETH_MACTSAR_TSAR_Msk                (0xFFFFFFFFUL << ETH_MACTSAR_TSAR_Pos)               /*!< 0xFFFFFFFF */
#define ETH_MACTSAR_TSAR                    ETH_MACTSAR_TSAR_Msk                                /*!< Timestamp Addend Register */
#define ETH_MACTSAR_TSAR_0                  (0x1UL << ETH_MACTSAR_TSAR_Pos)                      /*!< 0x00000001 */
#define ETH_MACTSAR_TSAR_1                  (0x2UL << ETH_MACTSAR_TSAR_Pos)                      /*!< 0x00000002 */
#define ETH_MACTSAR_TSAR_2                  (0x4UL << ETH_MACTSAR_TSAR_Pos)                      /*!< 0x00000004 */
#define ETH_MACTSAR_TSAR_3                  (0x8UL << ETH_MACTSAR_TSAR_Pos)                      /*!< 0x00000008 */
#define ETH_MACTSAR_TSAR_4                  (0x10UL << ETH_MACTSAR_TSAR_Pos)                     /*!< 0x00000010 */
#define ETH_MACTSAR_TSAR_5                  (0x20UL << ETH_MACTSAR_TSAR_Pos)                     /*!< 0x00000020 */
#define ETH_MACTSAR_TSAR_6                  (0x40UL << ETH_MACTSAR_TSAR_Pos)                     /*!< 0x00000040 */
#define ETH_MACTSAR_TSAR_7                  (0x80UL << ETH_MACTSAR_TSAR_Pos)                     /*!< 0x00000080 */
#define ETH_MACTSAR_TSAR_8                  (0x100UL << ETH_MACTSAR_TSAR_Pos)                    /*!< 0x00000100 */
#define ETH_MACTSAR_TSAR_9                  (0x200UL << ETH_MACTSAR_TSAR_Pos)                    /*!< 0x00000200 */
#define ETH_MACTSAR_TSAR_10                 (0x400UL << ETH_MACTSAR_TSAR_Pos)                    /*!< 0x00000400 */
#define ETH_MACTSAR_TSAR_11                 (0x800UL << ETH_MACTSAR_TSAR_Pos)                    /*!< 0x00000800 */
#define ETH_MACTSAR_TSAR_12                 (0x1000UL << ETH_MACTSAR_TSAR_Pos)                   /*!< 0x00001000 */
#define ETH_MACTSAR_TSAR_13                 (0x2000UL << ETH_MACTSAR_TSAR_Pos)                   /*!< 0x00002000 */
#define ETH_MACTSAR_TSAR_14                 (0x4000UL << ETH_MACTSAR_TSAR_Pos)                   /*!< 0x00004000 */
#define ETH_MACTSAR_TSAR_15                 (0x8000UL << ETH_MACTSAR_TSAR_Pos)                   /*!< 0x00008000 */
#define ETH_MACTSAR_TSAR_16                 (0x10000UL << ETH_MACTSAR_TSAR_Pos)                  /*!< 0x00010000 */
#define ETH_MACTSAR_TSAR_17                 (0x20000UL << ETH_MACTSAR_TSAR_Pos)                  /*!< 0x00020000 */
#define ETH_MACTSAR_TSAR_18                 (0x40000UL << ETH_MACTSAR_TSAR_Pos)                  /*!< 0x00040000 */
#define ETH_MACTSAR_TSAR_19                 (0x80000UL << ETH_MACTSAR_TSAR_Pos)                  /*!< 0x00080000 */
#define ETH_MACTSAR_TSAR_20                 (0x100000UL << ETH_MACTSAR_TSAR_Pos)                 /*!< 0x00100000 */
#define ETH_MACTSAR_TSAR_21                 (0x200000UL << ETH_MACTSAR_TSAR_Pos)                 /*!< 0x00200000 */
#define ETH_MACTSAR_TSAR_22                 (0x400000UL << ETH_MACTSAR_TSAR_Pos)                 /*!< 0x00400000 */
#define ETH_MACTSAR_TSAR_23                 (0x800000UL << ETH_MACTSAR_TSAR_Pos)                 /*!< 0x00800000 */
#define ETH_MACTSAR_TSAR_24                 (0x1000000UL << ETH_MACTSAR_TSAR_Pos)                /*!< 0x01000000 */
#define ETH_MACTSAR_TSAR_25                 (0x2000000UL << ETH_MACTSAR_TSAR_Pos)                /*!< 0x02000000 */
#define ETH_MACTSAR_TSAR_26                 (0x4000000UL << ETH_MACTSAR_TSAR_Pos)                /*!< 0x04000000 */
#define ETH_MACTSAR_TSAR_27                 (0x8000000UL << ETH_MACTSAR_TSAR_Pos)                /*!< 0x08000000 */
#define ETH_MACTSAR_TSAR_28                 (0x10000000UL << ETH_MACTSAR_TSAR_Pos)               /*!< 0x10000000 */
#define ETH_MACTSAR_TSAR_29                 (0x20000000UL << ETH_MACTSAR_TSAR_Pos)               /*!< 0x20000000 */
#define ETH_MACTSAR_TSAR_30                 (0x40000000UL << ETH_MACTSAR_TSAR_Pos)               /*!< 0x40000000 */
#define ETH_MACTSAR_TSAR_31                 (0x80000000UL << ETH_MACTSAR_TSAR_Pos)               /*!< 0x80000000 */

/**************  Bit definition for ETH_MACTSSR register  **************/
#define ETH_MACTSSR_TSSOVF_Pos              (0U)
#define ETH_MACTSSR_TSSOVF_Msk              (0x1UL << ETH_MACTSSR_TSSOVF_Pos)                    /*!< 0x00000001 */
#define ETH_MACTSSR_TSSOVF                  ETH_MACTSSR_TSSOVF_Msk                              /*!< Timestamp Seconds Overflow */
#define ETH_MACTSSR_TSTARGT0_Pos            (1U)
#define ETH_MACTSSR_TSTARGT0_Msk            (0x1UL << ETH_MACTSSR_TSTARGT0_Pos)                  /*!< 0x00000002 */
#define ETH_MACTSSR_TSTARGT0                ETH_MACTSSR_TSTARGT0_Msk                            /*!< Timestamp Target Time Reached */
#define ETH_MACTSSR_AUXTSTRIG_Pos           (2U)
#define ETH_MACTSSR_AUXTSTRIG_Msk           (0x1UL << ETH_MACTSSR_AUXTSTRIG_Pos)                 /*!< 0x00000004 */
#define ETH_MACTSSR_AUXTSTRIG               ETH_MACTSSR_AUXTSTRIG_Msk                           /*!< Auxiliary Timestamp Trigger Snapshot */
#define ETH_MACTSSR_TSTRGTERR0_Pos          (3U)
#define ETH_MACTSSR_TSTRGTERR0_Msk          (0x1UL << ETH_MACTSSR_TSTRGTERR0_Pos)                /*!< 0x00000008 */
#define ETH_MACTSSR_TSTRGTERR0              ETH_MACTSSR_TSTRGTERR0_Msk                          /*!< Timestamp Target Time Error */
#define ETH_MACTSSR_TXTSSIS_Pos             (15U)
#define ETH_MACTSSR_TXTSSIS_Msk             (0x1UL << ETH_MACTSSR_TXTSSIS_Pos)                   /*!< 0x00008000 */
#define ETH_MACTSSR_TXTSSIS                 ETH_MACTSSR_TXTSSIS_Msk                             /*!< Tx Timestamp Status Interrupt Status */
#define ETH_MACTSSR_ATSSTN_Pos              (16U)
#define ETH_MACTSSR_ATSSTN_Msk              (0xFUL << ETH_MACTSSR_ATSSTN_Pos)                    /*!< 0x000F0000 */
#define ETH_MACTSSR_ATSSTN                  ETH_MACTSSR_ATSSTN_Msk                              /*!< Auxiliary Timestamp Snapshot Trigger Identifier */
#define ETH_MACTSSR_ATSSTN_0                (0x1UL << ETH_MACTSSR_ATSSTN_Pos)                    /*!< 0x00010000 */
#define ETH_MACTSSR_ATSSTN_1                (0x2UL << ETH_MACTSSR_ATSSTN_Pos)                    /*!< 0x00020000 */
#define ETH_MACTSSR_ATSSTN_2                (0x4UL << ETH_MACTSSR_ATSSTN_Pos)                    /*!< 0x00040000 */
#define ETH_MACTSSR_ATSSTN_3                (0x8UL << ETH_MACTSSR_ATSSTN_Pos)                    /*!< 0x00080000 */
#define ETH_MACTSSR_ATSSTM_Pos              (24U)
#define ETH_MACTSSR_ATSSTM_Msk              (0x1UL << ETH_MACTSSR_ATSSTM_Pos)                    /*!< 0x01000000 */
#define ETH_MACTSSR_ATSSTM                  ETH_MACTSSR_ATSSTM_Msk                              /*!< Auxiliary Timestamp Snapshot Trigger Missed */
#define ETH_MACTSSR_ATSNS_Pos               (25U)
#define ETH_MACTSSR_ATSNS_Msk               (0x1FUL << ETH_MACTSSR_ATSNS_Pos)                    /*!< 0x3E000000 */
#define ETH_MACTSSR_ATSNS                   ETH_MACTSSR_ATSNS_Msk                               /*!< Number of Auxiliary Timestamp Snapshots */
#define ETH_MACTSSR_ATSNS_0                 (0x1UL << ETH_MACTSSR_ATSNS_Pos)                     /*!< 0x02000000 */
#define ETH_MACTSSR_ATSNS_1                 (0x2UL << ETH_MACTSSR_ATSNS_Pos)                     /*!< 0x04000000 */
#define ETH_MACTSSR_ATSNS_2                 (0x4UL << ETH_MACTSSR_ATSNS_Pos)                     /*!< 0x08000000 */
#define ETH_MACTSSR_ATSNS_3                 (0x8UL << ETH_MACTSSR_ATSNS_Pos)                     /*!< 0x10000000 */
#define ETH_MACTSSR_ATSNS_4                 (0x10UL << ETH_MACTSSR_ATSNS_Pos)                    /*!< 0x20000000 */

/************  Bit definition for ETH_MACTXTSSNR register  *************/
#define ETH_MACTXTSSNR_TXTSSLO_Pos          (0U)
#define ETH_MACTXTSSNR_TXTSSLO_Msk          (0x7FFFFFFFUL << ETH_MACTXTSSNR_TXTSSLO_Pos)         /*!< 0x7FFFFFFF */
#define ETH_MACTXTSSNR_TXTSSLO              ETH_MACTXTSSNR_TXTSSLO_Msk                          /*!< Transmit Timestamp Status Low */
#define ETH_MACTXTSSNR_TXTSSLO_0            (0x1UL << ETH_MACTXTSSNR_TXTSSLO_Pos)                /*!< 0x00000001 */
#define ETH_MACTXTSSNR_TXTSSLO_1            (0x2UL << ETH_MACTXTSSNR_TXTSSLO_Pos)                /*!< 0x00000002 */
#define ETH_MACTXTSSNR_TXTSSLO_2            (0x4UL << ETH_MACTXTSSNR_TXTSSLO_Pos)                /*!< 0x00000004 */
#define ETH_MACTXTSSNR_TXTSSLO_3            (0x8UL << ETH_MACTXTSSNR_TXTSSLO_Pos)                /*!< 0x00000008 */
#define ETH_MACTXTSSNR_TXTSSLO_4            (0x10UL << ETH_MACTXTSSNR_TXTSSLO_Pos)               /*!< 0x00000010 */
#define ETH_MACTXTSSNR_TXTSSLO_5            (0x20UL << ETH_MACTXTSSNR_TXTSSLO_Pos)               /*!< 0x00000020 */
#define ETH_MACTXTSSNR_TXTSSLO_6            (0x40UL << ETH_MACTXTSSNR_TXTSSLO_Pos)               /*!< 0x00000040 */
#define ETH_MACTXTSSNR_TXTSSLO_7            (0x80UL << ETH_MACTXTSSNR_TXTSSLO_Pos)               /*!< 0x00000080 */
#define ETH_MACTXTSSNR_TXTSSLO_8            (0x100UL << ETH_MACTXTSSNR_TXTSSLO_Pos)              /*!< 0x00000100 */
#define ETH_MACTXTSSNR_TXTSSLO_9            (0x200UL << ETH_MACTXTSSNR_TXTSSLO_Pos)              /*!< 0x00000200 */
#define ETH_MACTXTSSNR_TXTSSLO_10           (0x400UL << ETH_MACTXTSSNR_TXTSSLO_Pos)              /*!< 0x00000400 */
#define ETH_MACTXTSSNR_TXTSSLO_11           (0x800UL << ETH_MACTXTSSNR_TXTSSLO_Pos)              /*!< 0x00000800 */
#define ETH_MACTXTSSNR_TXTSSLO_12           (0x1000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)             /*!< 0x00001000 */
#define ETH_MACTXTSSNR_TXTSSLO_13           (0x2000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)             /*!< 0x00002000 */
#define ETH_MACTXTSSNR_TXTSSLO_14           (0x4000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)             /*!< 0x00004000 */
#define ETH_MACTXTSSNR_TXTSSLO_15           (0x8000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)             /*!< 0x00008000 */
#define ETH_MACTXTSSNR_TXTSSLO_16           (0x10000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)            /*!< 0x00010000 */
#define ETH_MACTXTSSNR_TXTSSLO_17           (0x20000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)            /*!< 0x00020000 */
#define ETH_MACTXTSSNR_TXTSSLO_18           (0x40000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)            /*!< 0x00040000 */
#define ETH_MACTXTSSNR_TXTSSLO_19           (0x80000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)            /*!< 0x00080000 */
#define ETH_MACTXTSSNR_TXTSSLO_20           (0x100000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)           /*!< 0x00100000 */
#define ETH_MACTXTSSNR_TXTSSLO_21           (0x200000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)           /*!< 0x00200000 */
#define ETH_MACTXTSSNR_TXTSSLO_22           (0x400000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)           /*!< 0x00400000 */
#define ETH_MACTXTSSNR_TXTSSLO_23           (0x800000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)           /*!< 0x00800000 */
#define ETH_MACTXTSSNR_TXTSSLO_24           (0x1000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)          /*!< 0x01000000 */
#define ETH_MACTXTSSNR_TXTSSLO_25           (0x2000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)          /*!< 0x02000000 */
#define ETH_MACTXTSSNR_TXTSSLO_26           (0x4000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)          /*!< 0x04000000 */
#define ETH_MACTXTSSNR_TXTSSLO_27           (0x8000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)          /*!< 0x08000000 */
#define ETH_MACTXTSSNR_TXTSSLO_28           (0x10000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)         /*!< 0x10000000 */
#define ETH_MACTXTSSNR_TXTSSLO_29           (0x20000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)         /*!< 0x20000000 */
#define ETH_MACTXTSSNR_TXTSSLO_30           (0x40000000UL << ETH_MACTXTSSNR_TXTSSLO_Pos)         /*!< 0x40000000 */
#define ETH_MACTXTSSNR_TXTSSMIS_Pos         (31U)
#define ETH_MACTXTSSNR_TXTSSMIS_Msk         (0x1UL << ETH_MACTXTSSNR_TXTSSMIS_Pos)               /*!< 0x80000000 */
#define ETH_MACTXTSSNR_TXTSSMIS             ETH_MACTXTSSNR_TXTSSMIS_Msk                         /*!< Transmit Timestamp Status Missed */

/************  Bit definition for ETH_MACTXTSSSR register  *************/
#define ETH_MACTXTSSSR_TXTSSHI_Pos          (0U)
#define ETH_MACTXTSSSR_TXTSSHI_Msk          (0xFFFFFFFFUL << ETH_MACTXTSSSR_TXTSSHI_Pos)         /*!< 0xFFFFFFFF */
#define ETH_MACTXTSSSR_TXTSSHI              ETH_MACTXTSSSR_TXTSSHI_Msk                          /*!< Transmit Timestamp Status High */
#define ETH_MACTXTSSSR_TXTSSHI_0            (0x1UL << ETH_MACTXTSSSR_TXTSSHI_Pos)                /*!< 0x00000001 */
#define ETH_MACTXTSSSR_TXTSSHI_1            (0x2UL << ETH_MACTXTSSSR_TXTSSHI_Pos)                /*!< 0x00000002 */
#define ETH_MACTXTSSSR_TXTSSHI_2            (0x4UL << ETH_MACTXTSSSR_TXTSSHI_Pos)                /*!< 0x00000004 */
#define ETH_MACTXTSSSR_TXTSSHI_3            (0x8UL << ETH_MACTXTSSSR_TXTSSHI_Pos)                /*!< 0x00000008 */
#define ETH_MACTXTSSSR_TXTSSHI_4            (0x10UL << ETH_MACTXTSSSR_TXTSSHI_Pos)               /*!< 0x00000010 */
#define ETH_MACTXTSSSR_TXTSSHI_5            (0x20UL << ETH_MACTXTSSSR_TXTSSHI_Pos)               /*!< 0x00000020 */
#define ETH_MACTXTSSSR_TXTSSHI_6            (0x40UL << ETH_MACTXTSSSR_TXTSSHI_Pos)               /*!< 0x00000040 */
#define ETH_MACTXTSSSR_TXTSSHI_7            (0x80UL << ETH_MACTXTSSSR_TXTSSHI_Pos)               /*!< 0x00000080 */
#define ETH_MACTXTSSSR_TXTSSHI_8            (0x100UL << ETH_MACTXTSSSR_TXTSSHI_Pos)              /*!< 0x00000100 */
#define ETH_MACTXTSSSR_TXTSSHI_9            (0x200UL << ETH_MACTXTSSSR_TXTSSHI_Pos)              /*!< 0x00000200 */
#define ETH_MACTXTSSSR_TXTSSHI_10           (0x400UL << ETH_MACTXTSSSR_TXTSSHI_Pos)              /*!< 0x00000400 */
#define ETH_MACTXTSSSR_TXTSSHI_11           (0x800UL << ETH_MACTXTSSSR_TXTSSHI_Pos)              /*!< 0x00000800 */
#define ETH_MACTXTSSSR_TXTSSHI_12           (0x1000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)             /*!< 0x00001000 */
#define ETH_MACTXTSSSR_TXTSSHI_13           (0x2000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)             /*!< 0x00002000 */
#define ETH_MACTXTSSSR_TXTSSHI_14           (0x4000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)             /*!< 0x00004000 */
#define ETH_MACTXTSSSR_TXTSSHI_15           (0x8000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)             /*!< 0x00008000 */
#define ETH_MACTXTSSSR_TXTSSHI_16           (0x10000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)            /*!< 0x00010000 */
#define ETH_MACTXTSSSR_TXTSSHI_17           (0x20000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)            /*!< 0x00020000 */
#define ETH_MACTXTSSSR_TXTSSHI_18           (0x40000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)            /*!< 0x00040000 */
#define ETH_MACTXTSSSR_TXTSSHI_19           (0x80000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)            /*!< 0x00080000 */
#define ETH_MACTXTSSSR_TXTSSHI_20           (0x100000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)           /*!< 0x00100000 */
#define ETH_MACTXTSSSR_TXTSSHI_21           (0x200000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)           /*!< 0x00200000 */
#define ETH_MACTXTSSSR_TXTSSHI_22           (0x400000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)           /*!< 0x00400000 */
#define ETH_MACTXTSSSR_TXTSSHI_23           (0x800000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)           /*!< 0x00800000 */
#define ETH_MACTXTSSSR_TXTSSHI_24           (0x1000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)          /*!< 0x01000000 */
#define ETH_MACTXTSSSR_TXTSSHI_25           (0x2000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)          /*!< 0x02000000 */
#define ETH_MACTXTSSSR_TXTSSHI_26           (0x4000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)          /*!< 0x04000000 */
#define ETH_MACTXTSSSR_TXTSSHI_27           (0x8000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)          /*!< 0x08000000 */
#define ETH_MACTXTSSSR_TXTSSHI_28           (0x10000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)         /*!< 0x10000000 */
#define ETH_MACTXTSSSR_TXTSSHI_29           (0x20000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)         /*!< 0x20000000 */
#define ETH_MACTXTSSSR_TXTSSHI_30           (0x40000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)         /*!< 0x40000000 */
#define ETH_MACTXTSSSR_TXTSSHI_31           (0x80000000UL << ETH_MACTXTSSSR_TXTSSHI_Pos)         /*!< 0x80000000 */

/**************  Bit definition for ETH_MACACR register  ***************/
#define ETH_MACACR_ATSFC_Pos                (0U)
#define ETH_MACACR_ATSFC_Msk                (0x1UL << ETH_MACACR_ATSFC_Pos)                      /*!< 0x00000001 */
#define ETH_MACACR_ATSFC                    ETH_MACACR_ATSFC_Msk                                /*!< Auxiliary Snapshot FIFO Clear */
#define ETH_MACACR_ATSEN0_Pos               (4U)
#define ETH_MACACR_ATSEN0_Msk               (0x1UL << ETH_MACACR_ATSEN0_Pos)                     /*!< 0x00000010 */
#define ETH_MACACR_ATSEN0                   ETH_MACACR_ATSEN0_Msk                               /*!< Auxiliary Snapshot 0 Enable */
#define ETH_MACACR_ATSEN1_Pos               (5U)
#define ETH_MACACR_ATSEN1_Msk               (0x1UL << ETH_MACACR_ATSEN1_Pos)                     /*!< 0x00000020 */
#define ETH_MACACR_ATSEN1                   ETH_MACACR_ATSEN1_Msk                               /*!< Auxiliary Snapshot 1 Enable */
#define ETH_MACACR_ATSEN2_Pos               (6U)
#define ETH_MACACR_ATSEN2_Msk               (0x1UL << ETH_MACACR_ATSEN2_Pos)                     /*!< 0x00000040 */
#define ETH_MACACR_ATSEN2                   ETH_MACACR_ATSEN2_Msk                               /*!< Auxiliary Snapshot 2 Enable */
#define ETH_MACACR_ATSEN3_Pos               (7U)
#define ETH_MACACR_ATSEN3_Msk               (0x1UL << ETH_MACACR_ATSEN3_Pos)                     /*!< 0x00000080 */
#define ETH_MACACR_ATSEN3                   ETH_MACACR_ATSEN3_Msk                               /*!< Auxiliary Snapshot 3 Enable */

/*************  Bit definition for ETH_MACATSNR register  **************/
#define ETH_MACATSNR_AUXTSLO_Pos            (0U)
#define ETH_MACATSNR_AUXTSLO_Msk            (0x7FFFFFFFUL << ETH_MACATSNR_AUXTSLO_Pos)           /*!< 0x7FFFFFFF */
#define ETH_MACATSNR_AUXTSLO                ETH_MACATSNR_AUXTSLO_Msk                            /*!< Auxiliary Timestamp */
#define ETH_MACATSNR_AUXTSLO_0              (0x1UL << ETH_MACATSNR_AUXTSLO_Pos)                  /*!< 0x00000001 */
#define ETH_MACATSNR_AUXTSLO_1              (0x2UL << ETH_MACATSNR_AUXTSLO_Pos)                  /*!< 0x00000002 */
#define ETH_MACATSNR_AUXTSLO_2              (0x4UL << ETH_MACATSNR_AUXTSLO_Pos)                  /*!< 0x00000004 */
#define ETH_MACATSNR_AUXTSLO_3              (0x8UL << ETH_MACATSNR_AUXTSLO_Pos)                  /*!< 0x00000008 */
#define ETH_MACATSNR_AUXTSLO_4              (0x10UL << ETH_MACATSNR_AUXTSLO_Pos)                 /*!< 0x00000010 */
#define ETH_MACATSNR_AUXTSLO_5              (0x20UL << ETH_MACATSNR_AUXTSLO_Pos)                 /*!< 0x00000020 */
#define ETH_MACATSNR_AUXTSLO_6              (0x40UL << ETH_MACATSNR_AUXTSLO_Pos)                 /*!< 0x00000040 */
#define ETH_MACATSNR_AUXTSLO_7              (0x80UL << ETH_MACATSNR_AUXTSLO_Pos)                 /*!< 0x00000080 */
#define ETH_MACATSNR_AUXTSLO_8              (0x100UL << ETH_MACATSNR_AUXTSLO_Pos)                /*!< 0x00000100 */
#define ETH_MACATSNR_AUXTSLO_9              (0x200UL << ETH_MACATSNR_AUXTSLO_Pos)                /*!< 0x00000200 */
#define ETH_MACATSNR_AUXTSLO_10             (0x400UL << ETH_MACATSNR_AUXTSLO_Pos)                /*!< 0x00000400 */
#define ETH_MACATSNR_AUXTSLO_11             (0x800UL << ETH_MACATSNR_AUXTSLO_Pos)                /*!< 0x00000800 */
#define ETH_MACATSNR_AUXTSLO_12             (0x1000UL << ETH_MACATSNR_AUXTSLO_Pos)               /*!< 0x00001000 */
#define ETH_MACATSNR_AUXTSLO_13             (0x2000UL << ETH_MACATSNR_AUXTSLO_Pos)               /*!< 0x00002000 */
#define ETH_MACATSNR_AUXTSLO_14             (0x4000UL << ETH_MACATSNR_AUXTSLO_Pos)               /*!< 0x00004000 */
#define ETH_MACATSNR_AUXTSLO_15             (0x8000UL << ETH_MACATSNR_AUXTSLO_Pos)               /*!< 0x00008000 */
#define ETH_MACATSNR_AUXTSLO_16             (0x10000UL << ETH_MACATSNR_AUXTSLO_Pos)              /*!< 0x00010000 */
#define ETH_MACATSNR_AUXTSLO_17             (0x20000UL << ETH_MACATSNR_AUXTSLO_Pos)              /*!< 0x00020000 */
#define ETH_MACATSNR_AUXTSLO_18             (0x40000UL << ETH_MACATSNR_AUXTSLO_Pos)              /*!< 0x00040000 */
#define ETH_MACATSNR_AUXTSLO_19             (0x80000UL << ETH_MACATSNR_AUXTSLO_Pos)              /*!< 0x00080000 */
#define ETH_MACATSNR_AUXTSLO_20             (0x100000UL << ETH_MACATSNR_AUXTSLO_Pos)             /*!< 0x00100000 */
#define ETH_MACATSNR_AUXTSLO_21             (0x200000UL << ETH_MACATSNR_AUXTSLO_Pos)             /*!< 0x00200000 */
#define ETH_MACATSNR_AUXTSLO_22             (0x400000UL << ETH_MACATSNR_AUXTSLO_Pos)             /*!< 0x00400000 */
#define ETH_MACATSNR_AUXTSLO_23             (0x800000UL << ETH_MACATSNR_AUXTSLO_Pos)             /*!< 0x00800000 */
#define ETH_MACATSNR_AUXTSLO_24             (0x1000000UL << ETH_MACATSNR_AUXTSLO_Pos)            /*!< 0x01000000 */
#define ETH_MACATSNR_AUXTSLO_25             (0x2000000UL << ETH_MACATSNR_AUXTSLO_Pos)            /*!< 0x02000000 */
#define ETH_MACATSNR_AUXTSLO_26             (0x4000000UL << ETH_MACATSNR_AUXTSLO_Pos)            /*!< 0x04000000 */
#define ETH_MACATSNR_AUXTSLO_27             (0x8000000UL << ETH_MACATSNR_AUXTSLO_Pos)            /*!< 0x08000000 */
#define ETH_MACATSNR_AUXTSLO_28             (0x10000000UL << ETH_MACATSNR_AUXTSLO_Pos)           /*!< 0x10000000 */
#define ETH_MACATSNR_AUXTSLO_29             (0x20000000UL << ETH_MACATSNR_AUXTSLO_Pos)           /*!< 0x20000000 */
#define ETH_MACATSNR_AUXTSLO_30             (0x40000000UL << ETH_MACATSNR_AUXTSLO_Pos)           /*!< 0x40000000 */

/*************  Bit definition for ETH_MACATSSR register  **************/
#define ETH_MACATSSR_AUXTSHI_Pos            (0U)
#define ETH_MACATSSR_AUXTSHI_Msk            (0xFFFFFFFFUL << ETH_MACATSSR_AUXTSHI_Pos)           /*!< 0xFFFFFFFF */
#define ETH_MACATSSR_AUXTSHI                ETH_MACATSSR_AUXTSHI_Msk                            /*!< Auxiliary Timestamp */
#define ETH_MACATSSR_AUXTSHI_0              (0x1UL << ETH_MACATSSR_AUXTSHI_Pos)                  /*!< 0x00000001 */
#define ETH_MACATSSR_AUXTSHI_1              (0x2UL << ETH_MACATSSR_AUXTSHI_Pos)                  /*!< 0x00000002 */
#define ETH_MACATSSR_AUXTSHI_2              (0x4UL << ETH_MACATSSR_AUXTSHI_Pos)                  /*!< 0x00000004 */
#define ETH_MACATSSR_AUXTSHI_3              (0x8UL << ETH_MACATSSR_AUXTSHI_Pos)                  /*!< 0x00000008 */
#define ETH_MACATSSR_AUXTSHI_4              (0x10UL << ETH_MACATSSR_AUXTSHI_Pos)                 /*!< 0x00000010 */
#define ETH_MACATSSR_AUXTSHI_5              (0x20UL << ETH_MACATSSR_AUXTSHI_Pos)                 /*!< 0x00000020 */
#define ETH_MACATSSR_AUXTSHI_6              (0x40UL << ETH_MACATSSR_AUXTSHI_Pos)                 /*!< 0x00000040 */
#define ETH_MACATSSR_AUXTSHI_7              (0x80UL << ETH_MACATSSR_AUXTSHI_Pos)                 /*!< 0x00000080 */
#define ETH_MACATSSR_AUXTSHI_8              (0x100UL << ETH_MACATSSR_AUXTSHI_Pos)                /*!< 0x00000100 */
#define ETH_MACATSSR_AUXTSHI_9              (0x200UL << ETH_MACATSSR_AUXTSHI_Pos)                /*!< 0x00000200 */
#define ETH_MACATSSR_AUXTSHI_10             (0x400UL << ETH_MACATSSR_AUXTSHI_Pos)                /*!< 0x00000400 */
#define ETH_MACATSSR_AUXTSHI_11             (0x800UL << ETH_MACATSSR_AUXTSHI_Pos)                /*!< 0x00000800 */
#define ETH_MACATSSR_AUXTSHI_12             (0x1000UL << ETH_MACATSSR_AUXTSHI_Pos)               /*!< 0x00001000 */
#define ETH_MACATSSR_AUXTSHI_13             (0x2000UL << ETH_MACATSSR_AUXTSHI_Pos)               /*!< 0x00002000 */
#define ETH_MACATSSR_AUXTSHI_14             (0x4000UL << ETH_MACATSSR_AUXTSHI_Pos)               /*!< 0x00004000 */
#define ETH_MACATSSR_AUXTSHI_15             (0x8000UL << ETH_MACATSSR_AUXTSHI_Pos)               /*!< 0x00008000 */
#define ETH_MACATSSR_AUXTSHI_16             (0x10000UL << ETH_MACATSSR_AUXTSHI_Pos)              /*!< 0x00010000 */
#define ETH_MACATSSR_AUXTSHI_17             (0x20000UL << ETH_MACATSSR_AUXTSHI_Pos)              /*!< 0x00020000 */
#define ETH_MACATSSR_AUXTSHI_18             (0x40000UL << ETH_MACATSSR_AUXTSHI_Pos)              /*!< 0x00040000 */
#define ETH_MACATSSR_AUXTSHI_19             (0x80000UL << ETH_MACATSSR_AUXTSHI_Pos)              /*!< 0x00080000 */
#define ETH_MACATSSR_AUXTSHI_20             (0x100000UL << ETH_MACATSSR_AUXTSHI_Pos)             /*!< 0x00100000 */
#define ETH_MACATSSR_AUXTSHI_21             (0x200000UL << ETH_MACATSSR_AUXTSHI_Pos)             /*!< 0x00200000 */
#define ETH_MACATSSR_AUXTSHI_22             (0x400000UL << ETH_MACATSSR_AUXTSHI_Pos)             /*!< 0x00400000 */
#define ETH_MACATSSR_AUXTSHI_23             (0x800000UL << ETH_MACATSSR_AUXTSHI_Pos)             /*!< 0x00800000 */
#define ETH_MACATSSR_AUXTSHI_24             (0x1000000UL << ETH_MACATSSR_AUXTSHI_Pos)            /*!< 0x01000000 */
#define ETH_MACATSSR_AUXTSHI_25             (0x2000000UL << ETH_MACATSSR_AUXTSHI_Pos)            /*!< 0x02000000 */
#define ETH_MACATSSR_AUXTSHI_26             (0x4000000UL << ETH_MACATSSR_AUXTSHI_Pos)            /*!< 0x04000000 */
#define ETH_MACATSSR_AUXTSHI_27             (0x8000000UL << ETH_MACATSSR_AUXTSHI_Pos)            /*!< 0x08000000 */
#define ETH_MACATSSR_AUXTSHI_28             (0x10000000UL << ETH_MACATSSR_AUXTSHI_Pos)           /*!< 0x10000000 */
#define ETH_MACATSSR_AUXTSHI_29             (0x20000000UL << ETH_MACATSSR_AUXTSHI_Pos)           /*!< 0x20000000 */
#define ETH_MACATSSR_AUXTSHI_30             (0x40000000UL << ETH_MACATSSR_AUXTSHI_Pos)           /*!< 0x40000000 */
#define ETH_MACATSSR_AUXTSHI_31             (0x80000000UL << ETH_MACATSSR_AUXTSHI_Pos)           /*!< 0x80000000 */

/*************  Bit definition for ETH_MACTSIACR register  *************/
#define ETH_MACTSIACR_OSTIAC_Pos            (0U)
#define ETH_MACTSIACR_OSTIAC_Msk            (0xFFFFFFFFUL << ETH_MACTSIACR_OSTIAC_Pos)           /*!< 0xFFFFFFFF */
#define ETH_MACTSIACR_OSTIAC                ETH_MACTSIACR_OSTIAC_Msk                            /*!< One-Step Timestamp Ingress Asymmetry Correction */
#define ETH_MACTSIACR_OSTIAC_0              (0x1UL << ETH_MACTSIACR_OSTIAC_Pos)                  /*!< 0x00000001 */
#define ETH_MACTSIACR_OSTIAC_1              (0x2UL << ETH_MACTSIACR_OSTIAC_Pos)                  /*!< 0x00000002 */
#define ETH_MACTSIACR_OSTIAC_2              (0x4UL << ETH_MACTSIACR_OSTIAC_Pos)                  /*!< 0x00000004 */
#define ETH_MACTSIACR_OSTIAC_3              (0x8UL << ETH_MACTSIACR_OSTIAC_Pos)                  /*!< 0x00000008 */
#define ETH_MACTSIACR_OSTIAC_4              (0x10UL << ETH_MACTSIACR_OSTIAC_Pos)                 /*!< 0x00000010 */
#define ETH_MACTSIACR_OSTIAC_5              (0x20UL << ETH_MACTSIACR_OSTIAC_Pos)                 /*!< 0x00000020 */
#define ETH_MACTSIACR_OSTIAC_6              (0x40UL << ETH_MACTSIACR_OSTIAC_Pos)                 /*!< 0x00000040 */
#define ETH_MACTSIACR_OSTIAC_7              (0x80UL << ETH_MACTSIACR_OSTIAC_Pos)                 /*!< 0x00000080 */
#define ETH_MACTSIACR_OSTIAC_8              (0x100UL << ETH_MACTSIACR_OSTIAC_Pos)                /*!< 0x00000100 */
#define ETH_MACTSIACR_OSTIAC_9              (0x200UL << ETH_MACTSIACR_OSTIAC_Pos)                /*!< 0x00000200 */
#define ETH_MACTSIACR_OSTIAC_10             (0x400UL << ETH_MACTSIACR_OSTIAC_Pos)                /*!< 0x00000400 */
#define ETH_MACTSIACR_OSTIAC_11             (0x800UL << ETH_MACTSIACR_OSTIAC_Pos)                /*!< 0x00000800 */
#define ETH_MACTSIACR_OSTIAC_12             (0x1000UL << ETH_MACTSIACR_OSTIAC_Pos)               /*!< 0x00001000 */
#define ETH_MACTSIACR_OSTIAC_13             (0x2000UL << ETH_MACTSIACR_OSTIAC_Pos)               /*!< 0x00002000 */
#define ETH_MACTSIACR_OSTIAC_14             (0x4000UL << ETH_MACTSIACR_OSTIAC_Pos)               /*!< 0x00004000 */
#define ETH_MACTSIACR_OSTIAC_15             (0x8000UL << ETH_MACTSIACR_OSTIAC_Pos)               /*!< 0x00008000 */
#define ETH_MACTSIACR_OSTIAC_16             (0x10000UL << ETH_MACTSIACR_OSTIAC_Pos)              /*!< 0x00010000 */
#define ETH_MACTSIACR_OSTIAC_17             (0x20000UL << ETH_MACTSIACR_OSTIAC_Pos)              /*!< 0x00020000 */
#define ETH_MACTSIACR_OSTIAC_18             (0x40000UL << ETH_MACTSIACR_OSTIAC_Pos)              /*!< 0x00040000 */
#define ETH_MACTSIACR_OSTIAC_19             (0x80000UL << ETH_MACTSIACR_OSTIAC_Pos)              /*!< 0x00080000 */
#define ETH_MACTSIACR_OSTIAC_20             (0x100000UL << ETH_MACTSIACR_OSTIAC_Pos)             /*!< 0x00100000 */
#define ETH_MACTSIACR_OSTIAC_21             (0x200000UL << ETH_MACTSIACR_OSTIAC_Pos)             /*!< 0x00200000 */
#define ETH_MACTSIACR_OSTIAC_22             (0x400000UL << ETH_MACTSIACR_OSTIAC_Pos)             /*!< 0x00400000 */
#define ETH_MACTSIACR_OSTIAC_23             (0x800000UL << ETH_MACTSIACR_OSTIAC_Pos)             /*!< 0x00800000 */
#define ETH_MACTSIACR_OSTIAC_24             (0x1000000UL << ETH_MACTSIACR_OSTIAC_Pos)            /*!< 0x01000000 */
#define ETH_MACTSIACR_OSTIAC_25             (0x2000000UL << ETH_MACTSIACR_OSTIAC_Pos)            /*!< 0x02000000 */
#define ETH_MACTSIACR_OSTIAC_26             (0x4000000UL << ETH_MACTSIACR_OSTIAC_Pos)            /*!< 0x04000000 */
#define ETH_MACTSIACR_OSTIAC_27             (0x8000000UL << ETH_MACTSIACR_OSTIAC_Pos)            /*!< 0x08000000 */
#define ETH_MACTSIACR_OSTIAC_28             (0x10000000UL << ETH_MACTSIACR_OSTIAC_Pos)           /*!< 0x10000000 */
#define ETH_MACTSIACR_OSTIAC_29             (0x20000000UL << ETH_MACTSIACR_OSTIAC_Pos)           /*!< 0x20000000 */
#define ETH_MACTSIACR_OSTIAC_30             (0x40000000UL << ETH_MACTSIACR_OSTIAC_Pos)           /*!< 0x40000000 */
#define ETH_MACTSIACR_OSTIAC_31             (0x80000000UL << ETH_MACTSIACR_OSTIAC_Pos)           /*!< 0x80000000 */

/*************  Bit definition for ETH_MACTSEACR register  *************/
#define ETH_MACTSEACR_OSTEAC_Pos            (0U)
#define ETH_MACTSEACR_OSTEAC_Msk            (0xFFFFFFFFUL << ETH_MACTSEACR_OSTEAC_Pos)           /*!< 0xFFFFFFFF */
#define ETH_MACTSEACR_OSTEAC                ETH_MACTSEACR_OSTEAC_Msk                            /*!< One-Step Timestamp Egress Asymmetry Correction */
#define ETH_MACTSEACR_OSTEAC_0              (0x1UL << ETH_MACTSEACR_OSTEAC_Pos)                  /*!< 0x00000001 */
#define ETH_MACTSEACR_OSTEAC_1              (0x2UL << ETH_MACTSEACR_OSTEAC_Pos)                  /*!< 0x00000002 */
#define ETH_MACTSEACR_OSTEAC_2              (0x4UL << ETH_MACTSEACR_OSTEAC_Pos)                  /*!< 0x00000004 */
#define ETH_MACTSEACR_OSTEAC_3              (0x8UL << ETH_MACTSEACR_OSTEAC_Pos)                  /*!< 0x00000008 */
#define ETH_MACTSEACR_OSTEAC_4              (0x10UL << ETH_MACTSEACR_OSTEAC_Pos)                 /*!< 0x00000010 */
#define ETH_MACTSEACR_OSTEAC_5              (0x20UL << ETH_MACTSEACR_OSTEAC_Pos)                 /*!< 0x00000020 */
#define ETH_MACTSEACR_OSTEAC_6              (0x40UL << ETH_MACTSEACR_OSTEAC_Pos)                 /*!< 0x00000040 */
#define ETH_MACTSEACR_OSTEAC_7              (0x80UL << ETH_MACTSEACR_OSTEAC_Pos)                 /*!< 0x00000080 */
#define ETH_MACTSEACR_OSTEAC_8              (0x100UL << ETH_MACTSEACR_OSTEAC_Pos)                /*!< 0x00000100 */
#define ETH_MACTSEACR_OSTEAC_9              (0x200UL << ETH_MACTSEACR_OSTEAC_Pos)                /*!< 0x00000200 */
#define ETH_MACTSEACR_OSTEAC_10             (0x400UL << ETH_MACTSEACR_OSTEAC_Pos)                /*!< 0x00000400 */
#define ETH_MACTSEACR_OSTEAC_11             (0x800UL << ETH_MACTSEACR_OSTEAC_Pos)                /*!< 0x00000800 */
#define ETH_MACTSEACR_OSTEAC_12             (0x1000UL << ETH_MACTSEACR_OSTEAC_Pos)               /*!< 0x00001000 */
#define ETH_MACTSEACR_OSTEAC_13             (0x2000UL << ETH_MACTSEACR_OSTEAC_Pos)               /*!< 0x00002000 */
#define ETH_MACTSEACR_OSTEAC_14             (0x4000UL << ETH_MACTSEACR_OSTEAC_Pos)               /*!< 0x00004000 */
#define ETH_MACTSEACR_OSTEAC_15             (0x8000UL << ETH_MACTSEACR_OSTEAC_Pos)               /*!< 0x00008000 */
#define ETH_MACTSEACR_OSTEAC_16             (0x10000UL << ETH_MACTSEACR_OSTEAC_Pos)              /*!< 0x00010000 */
#define ETH_MACTSEACR_OSTEAC_17             (0x20000UL << ETH_MACTSEACR_OSTEAC_Pos)              /*!< 0x00020000 */
#define ETH_MACTSEACR_OSTEAC_18             (0x40000UL << ETH_MACTSEACR_OSTEAC_Pos)              /*!< 0x00040000 */
#define ETH_MACTSEACR_OSTEAC_19             (0x80000UL << ETH_MACTSEACR_OSTEAC_Pos)              /*!< 0x00080000 */
#define ETH_MACTSEACR_OSTEAC_20             (0x100000UL << ETH_MACTSEACR_OSTEAC_Pos)             /*!< 0x00100000 */
#define ETH_MACTSEACR_OSTEAC_21             (0x200000UL << ETH_MACTSEACR_OSTEAC_Pos)             /*!< 0x00200000 */
#define ETH_MACTSEACR_OSTEAC_22             (0x400000UL << ETH_MACTSEACR_OSTEAC_Pos)             /*!< 0x00400000 */
#define ETH_MACTSEACR_OSTEAC_23             (0x800000UL << ETH_MACTSEACR_OSTEAC_Pos)             /*!< 0x00800000 */
#define ETH_MACTSEACR_OSTEAC_24             (0x1000000UL << ETH_MACTSEACR_OSTEAC_Pos)            /*!< 0x01000000 */
#define ETH_MACTSEACR_OSTEAC_25             (0x2000000UL << ETH_MACTSEACR_OSTEAC_Pos)            /*!< 0x02000000 */
#define ETH_MACTSEACR_OSTEAC_26             (0x4000000UL << ETH_MACTSEACR_OSTEAC_Pos)            /*!< 0x04000000 */
#define ETH_MACTSEACR_OSTEAC_27             (0x8000000UL << ETH_MACTSEACR_OSTEAC_Pos)            /*!< 0x08000000 */
#define ETH_MACTSEACR_OSTEAC_28             (0x10000000UL << ETH_MACTSEACR_OSTEAC_Pos)           /*!< 0x10000000 */
#define ETH_MACTSEACR_OSTEAC_29             (0x20000000UL << ETH_MACTSEACR_OSTEAC_Pos)           /*!< 0x20000000 */
#define ETH_MACTSEACR_OSTEAC_30             (0x40000000UL << ETH_MACTSEACR_OSTEAC_Pos)           /*!< 0x40000000 */
#define ETH_MACTSEACR_OSTEAC_31             (0x80000000UL << ETH_MACTSEACR_OSTEAC_Pos)           /*!< 0x80000000 */

/*************  Bit definition for ETH_MACTSICNR register  *************/
#define ETH_MACTSICNR_TSIC_Pos              (0U)
#define ETH_MACTSICNR_TSIC_Msk              (0xFFFFFFFFUL << ETH_MACTSICNR_TSIC_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACTSICNR_TSIC                  ETH_MACTSICNR_TSIC_Msk                              /*!< Timestamp Ingress Correction */
#define ETH_MACTSICNR_TSIC_0                (0x1UL << ETH_MACTSICNR_TSIC_Pos)                    /*!< 0x00000001 */
#define ETH_MACTSICNR_TSIC_1                (0x2UL << ETH_MACTSICNR_TSIC_Pos)                    /*!< 0x00000002 */
#define ETH_MACTSICNR_TSIC_2                (0x4UL << ETH_MACTSICNR_TSIC_Pos)                    /*!< 0x00000004 */
#define ETH_MACTSICNR_TSIC_3                (0x8UL << ETH_MACTSICNR_TSIC_Pos)                    /*!< 0x00000008 */
#define ETH_MACTSICNR_TSIC_4                (0x10UL << ETH_MACTSICNR_TSIC_Pos)                   /*!< 0x00000010 */
#define ETH_MACTSICNR_TSIC_5                (0x20UL << ETH_MACTSICNR_TSIC_Pos)                   /*!< 0x00000020 */
#define ETH_MACTSICNR_TSIC_6                (0x40UL << ETH_MACTSICNR_TSIC_Pos)                   /*!< 0x00000040 */
#define ETH_MACTSICNR_TSIC_7                (0x80UL << ETH_MACTSICNR_TSIC_Pos)                   /*!< 0x00000080 */
#define ETH_MACTSICNR_TSIC_8                (0x100UL << ETH_MACTSICNR_TSIC_Pos)                  /*!< 0x00000100 */
#define ETH_MACTSICNR_TSIC_9                (0x200UL << ETH_MACTSICNR_TSIC_Pos)                  /*!< 0x00000200 */
#define ETH_MACTSICNR_TSIC_10               (0x400UL << ETH_MACTSICNR_TSIC_Pos)                  /*!< 0x00000400 */
#define ETH_MACTSICNR_TSIC_11               (0x800UL << ETH_MACTSICNR_TSIC_Pos)                  /*!< 0x00000800 */
#define ETH_MACTSICNR_TSIC_12               (0x1000UL << ETH_MACTSICNR_TSIC_Pos)                 /*!< 0x00001000 */
#define ETH_MACTSICNR_TSIC_13               (0x2000UL << ETH_MACTSICNR_TSIC_Pos)                 /*!< 0x00002000 */
#define ETH_MACTSICNR_TSIC_14               (0x4000UL << ETH_MACTSICNR_TSIC_Pos)                 /*!< 0x00004000 */
#define ETH_MACTSICNR_TSIC_15               (0x8000UL << ETH_MACTSICNR_TSIC_Pos)                 /*!< 0x00008000 */
#define ETH_MACTSICNR_TSIC_16               (0x10000UL << ETH_MACTSICNR_TSIC_Pos)                /*!< 0x00010000 */
#define ETH_MACTSICNR_TSIC_17               (0x20000UL << ETH_MACTSICNR_TSIC_Pos)                /*!< 0x00020000 */
#define ETH_MACTSICNR_TSIC_18               (0x40000UL << ETH_MACTSICNR_TSIC_Pos)                /*!< 0x00040000 */
#define ETH_MACTSICNR_TSIC_19               (0x80000UL << ETH_MACTSICNR_TSIC_Pos)                /*!< 0x00080000 */
#define ETH_MACTSICNR_TSIC_20               (0x100000UL << ETH_MACTSICNR_TSIC_Pos)               /*!< 0x00100000 */
#define ETH_MACTSICNR_TSIC_21               (0x200000UL << ETH_MACTSICNR_TSIC_Pos)               /*!< 0x00200000 */
#define ETH_MACTSICNR_TSIC_22               (0x400000UL << ETH_MACTSICNR_TSIC_Pos)               /*!< 0x00400000 */
#define ETH_MACTSICNR_TSIC_23               (0x800000UL << ETH_MACTSICNR_TSIC_Pos)               /*!< 0x00800000 */
#define ETH_MACTSICNR_TSIC_24               (0x1000000UL << ETH_MACTSICNR_TSIC_Pos)              /*!< 0x01000000 */
#define ETH_MACTSICNR_TSIC_25               (0x2000000UL << ETH_MACTSICNR_TSIC_Pos)              /*!< 0x02000000 */
#define ETH_MACTSICNR_TSIC_26               (0x4000000UL << ETH_MACTSICNR_TSIC_Pos)              /*!< 0x04000000 */
#define ETH_MACTSICNR_TSIC_27               (0x8000000UL << ETH_MACTSICNR_TSIC_Pos)              /*!< 0x08000000 */
#define ETH_MACTSICNR_TSIC_28               (0x10000000UL << ETH_MACTSICNR_TSIC_Pos)             /*!< 0x10000000 */
#define ETH_MACTSICNR_TSIC_29               (0x20000000UL << ETH_MACTSICNR_TSIC_Pos)             /*!< 0x20000000 */
#define ETH_MACTSICNR_TSIC_30               (0x40000000UL << ETH_MACTSICNR_TSIC_Pos)             /*!< 0x40000000 */
#define ETH_MACTSICNR_TSIC_31               (0x80000000UL << ETH_MACTSICNR_TSIC_Pos)             /*!< 0x80000000 */

/*************  Bit definition for ETH_MACTSECNR register  *************/
#define ETH_MACTSECNR_TSEC_Pos              (0U)
#define ETH_MACTSECNR_TSEC_Msk              (0xFFFFFFFFUL << ETH_MACTSECNR_TSEC_Pos)             /*!< 0xFFFFFFFF */
#define ETH_MACTSECNR_TSEC                  ETH_MACTSECNR_TSEC_Msk                              /*!< Timestamp Egress Correction */
#define ETH_MACTSECNR_TSEC_0                (0x1UL << ETH_MACTSECNR_TSEC_Pos)                    /*!< 0x00000001 */
#define ETH_MACTSECNR_TSEC_1                (0x2UL << ETH_MACTSECNR_TSEC_Pos)                    /*!< 0x00000002 */
#define ETH_MACTSECNR_TSEC_2                (0x4UL << ETH_MACTSECNR_TSEC_Pos)                    /*!< 0x00000004 */
#define ETH_MACTSECNR_TSEC_3                (0x8UL << ETH_MACTSECNR_TSEC_Pos)                    /*!< 0x00000008 */
#define ETH_MACTSECNR_TSEC_4                (0x10UL << ETH_MACTSECNR_TSEC_Pos)                   /*!< 0x00000010 */
#define ETH_MACTSECNR_TSEC_5                (0x20UL << ETH_MACTSECNR_TSEC_Pos)                   /*!< 0x00000020 */
#define ETH_MACTSECNR_TSEC_6                (0x40UL << ETH_MACTSECNR_TSEC_Pos)                   /*!< 0x00000040 */
#define ETH_MACTSECNR_TSEC_7                (0x80UL << ETH_MACTSECNR_TSEC_Pos)                   /*!< 0x00000080 */
#define ETH_MACTSECNR_TSEC_8                (0x100UL << ETH_MACTSECNR_TSEC_Pos)                  /*!< 0x00000100 */
#define ETH_MACTSECNR_TSEC_9                (0x200UL << ETH_MACTSECNR_TSEC_Pos)                  /*!< 0x00000200 */
#define ETH_MACTSECNR_TSEC_10               (0x400UL << ETH_MACTSECNR_TSEC_Pos)                  /*!< 0x00000400 */
#define ETH_MACTSECNR_TSEC_11               (0x800UL << ETH_MACTSECNR_TSEC_Pos)                  /*!< 0x00000800 */
#define ETH_MACTSECNR_TSEC_12               (0x1000UL << ETH_MACTSECNR_TSEC_Pos)                 /*!< 0x00001000 */
#define ETH_MACTSECNR_TSEC_13               (0x2000UL << ETH_MACTSECNR_TSEC_Pos)                 /*!< 0x00002000 */
#define ETH_MACTSECNR_TSEC_14               (0x4000UL << ETH_MACTSECNR_TSEC_Pos)                 /*!< 0x00004000 */
#define ETH_MACTSECNR_TSEC_15               (0x8000UL << ETH_MACTSECNR_TSEC_Pos)                 /*!< 0x00008000 */
#define ETH_MACTSECNR_TSEC_16               (0x10000UL << ETH_MACTSECNR_TSEC_Pos)                /*!< 0x00010000 */
#define ETH_MACTSECNR_TSEC_17               (0x20000UL << ETH_MACTSECNR_TSEC_Pos)                /*!< 0x00020000 */
#define ETH_MACTSECNR_TSEC_18               (0x40000UL << ETH_MACTSECNR_TSEC_Pos)                /*!< 0x00040000 */
#define ETH_MACTSECNR_TSEC_19               (0x80000UL << ETH_MACTSECNR_TSEC_Pos)                /*!< 0x00080000 */
#define ETH_MACTSECNR_TSEC_20               (0x100000UL << ETH_MACTSECNR_TSEC_Pos)               /*!< 0x00100000 */
#define ETH_MACTSECNR_TSEC_21               (0x200000UL << ETH_MACTSECNR_TSEC_Pos)               /*!< 0x00200000 */
#define ETH_MACTSECNR_TSEC_22               (0x400000UL << ETH_MACTSECNR_TSEC_Pos)               /*!< 0x00400000 */
#define ETH_MACTSECNR_TSEC_23               (0x800000UL << ETH_MACTSECNR_TSEC_Pos)               /*!< 0x00800000 */
#define ETH_MACTSECNR_TSEC_24               (0x1000000UL << ETH_MACTSECNR_TSEC_Pos)              /*!< 0x01000000 */
#define ETH_MACTSECNR_TSEC_25               (0x2000000UL << ETH_MACTSECNR_TSEC_Pos)              /*!< 0x02000000 */
#define ETH_MACTSECNR_TSEC_26               (0x4000000UL << ETH_MACTSECNR_TSEC_Pos)              /*!< 0x04000000 */
#define ETH_MACTSECNR_TSEC_27               (0x8000000UL << ETH_MACTSECNR_TSEC_Pos)              /*!< 0x08000000 */
#define ETH_MACTSECNR_TSEC_28               (0x10000000UL << ETH_MACTSECNR_TSEC_Pos)             /*!< 0x10000000 */
#define ETH_MACTSECNR_TSEC_29               (0x20000000UL << ETH_MACTSECNR_TSEC_Pos)             /*!< 0x20000000 */
#define ETH_MACTSECNR_TSEC_30               (0x40000000UL << ETH_MACTSECNR_TSEC_Pos)             /*!< 0x40000000 */
#define ETH_MACTSECNR_TSEC_31               (0x80000000UL << ETH_MACTSECNR_TSEC_Pos)             /*!< 0x80000000 */

/*************  Bit definition for ETH_MACPPSCR register  **************/
#define ETH_MACPPSCR_PPSCTRL_Pos            (0U)
#define ETH_MACPPSCR_PPSCTRL_Msk            (0xFUL << ETH_MACPPSCR_PPSCTRL_Pos)                  /*!< 0x0000000F */
#define ETH_MACPPSCR_PPSCTRL                ETH_MACPPSCR_PPSCTRL_Msk                            /*!< PPS Output Frequency Control */
#define ETH_MACPPSCR_PPSCTRL_0              (0x1UL << ETH_MACPPSCR_PPSCTRL_Pos)                  /*!< 0x00000001 */
#define ETH_MACPPSCR_PPSCTRL_1              (0x2UL << ETH_MACPPSCR_PPSCTRL_Pos)                  /*!< 0x00000002 */
#define ETH_MACPPSCR_PPSCTRL_2              (0x4UL << ETH_MACPPSCR_PPSCTRL_Pos)                  /*!< 0x00000004 */
#define ETH_MACPPSCR_PPSCTRL_3              (0x8UL << ETH_MACPPSCR_PPSCTRL_Pos)                  /*!< 0x00000008 */
#define ETH_MACPPSCR_PPSEN0_Pos             (4U)
#define ETH_MACPPSCR_PPSEN0_Msk             (0x1UL << ETH_MACPPSCR_PPSEN0_Pos)                   /*!< 0x00000010 */
#define ETH_MACPPSCR_PPSEN0                 ETH_MACPPSCR_PPSEN0_Msk                             /*!< Flexible PPS Output Mode Enable */
#define ETH_MACPPSCR_TRGTMODSEL0_Pos        (5U)
#define ETH_MACPPSCR_TRGTMODSEL0_Msk        (0x3UL << ETH_MACPPSCR_TRGTMODSEL0_Pos)              /*!< 0x00000060 */
#define ETH_MACPPSCR_TRGTMODSEL0            ETH_MACPPSCR_TRGTMODSEL0_Msk                        /*!< Target Time Register Mode for PPS Output */
#define ETH_MACPPSCR_TRGTMODSEL0_0          (0x1UL << ETH_MACPPSCR_TRGTMODSEL0_Pos)              /*!< 0x00000020 */
#define ETH_MACPPSCR_TRGTMODSEL0_1          (0x2UL << ETH_MACPPSCR_TRGTMODSEL0_Pos)              /*!< 0x00000040 */
#define ETH_MACPPSCR_PPSCMD_Pos             (0U)
#define ETH_MACPPSCR_PPSCMD_Msk             (0xFUL << ETH_MACPPSCR_PPSCMD_Pos)                   /*!< 0x0000000F */
#define ETH_MACPPSCR_PPSCMD                 ETH_MACPPSCR_PPSCMD_Msk                             /*!< Flexible PPS Output (ptp_pps_o[0]) Control */
#define ETH_MACPPSCR_PPSCMD_0               (0x1UL << ETH_MACPPSCR_PPSCMD_Pos)                   /*!< 0x00000001 */
#define ETH_MACPPSCR_PPSCMD_1               (0x2UL << ETH_MACPPSCR_PPSCMD_Pos)                   /*!< 0x00000002 */
#define ETH_MACPPSCR_PPSCMD_2               (0x4UL << ETH_MACPPSCR_PPSCMD_Pos)                   /*!< 0x00000004 */
#define ETH_MACPPSCR_PPSCMD_3               (0x8UL << ETH_MACPPSCR_PPSCMD_Pos)                   /*!< 0x00000008 */

/************  Bit definition for ETH_MACPPSTTSR register  *************/
#define ETH_MACPPSTTSR_TSTRH0_Pos           (0U)
#define ETH_MACPPSTTSR_TSTRH0_Msk           (0xFFFFFFFFUL << ETH_MACPPSTTSR_TSTRH0_Pos)          /*!< 0xFFFFFFFF */
#define ETH_MACPPSTTSR_TSTRH0               ETH_MACPPSTTSR_TSTRH0_Msk                           /*!< PPS Target Time Seconds Register */
#define ETH_MACPPSTTSR_TSTRH0_0             (0x1UL << ETH_MACPPSTTSR_TSTRH0_Pos)                 /*!< 0x00000001 */
#define ETH_MACPPSTTSR_TSTRH0_1             (0x2UL << ETH_MACPPSTTSR_TSTRH0_Pos)                 /*!< 0x00000002 */
#define ETH_MACPPSTTSR_TSTRH0_2             (0x4UL << ETH_MACPPSTTSR_TSTRH0_Pos)                 /*!< 0x00000004 */
#define ETH_MACPPSTTSR_TSTRH0_3             (0x8UL << ETH_MACPPSTTSR_TSTRH0_Pos)                 /*!< 0x00000008 */
#define ETH_MACPPSTTSR_TSTRH0_4             (0x10UL << ETH_MACPPSTTSR_TSTRH0_Pos)                /*!< 0x00000010 */
#define ETH_MACPPSTTSR_TSTRH0_5             (0x20UL << ETH_MACPPSTTSR_TSTRH0_Pos)                /*!< 0x00000020 */
#define ETH_MACPPSTTSR_TSTRH0_6             (0x40UL << ETH_MACPPSTTSR_TSTRH0_Pos)                /*!< 0x00000040 */
#define ETH_MACPPSTTSR_TSTRH0_7             (0x80UL << ETH_MACPPSTTSR_TSTRH0_Pos)                /*!< 0x00000080 */
#define ETH_MACPPSTTSR_TSTRH0_8             (0x100UL << ETH_MACPPSTTSR_TSTRH0_Pos)               /*!< 0x00000100 */
#define ETH_MACPPSTTSR_TSTRH0_9             (0x200UL << ETH_MACPPSTTSR_TSTRH0_Pos)               /*!< 0x00000200 */
#define ETH_MACPPSTTSR_TSTRH0_10            (0x400UL << ETH_MACPPSTTSR_TSTRH0_Pos)               /*!< 0x00000400 */
#define ETH_MACPPSTTSR_TSTRH0_11            (0x800UL << ETH_MACPPSTTSR_TSTRH0_Pos)               /*!< 0x00000800 */
#define ETH_MACPPSTTSR_TSTRH0_12            (0x1000UL << ETH_MACPPSTTSR_TSTRH0_Pos)              /*!< 0x00001000 */
#define ETH_MACPPSTTSR_TSTRH0_13            (0x2000UL << ETH_MACPPSTTSR_TSTRH0_Pos)              /*!< 0x00002000 */
#define ETH_MACPPSTTSR_TSTRH0_14            (0x4000UL << ETH_MACPPSTTSR_TSTRH0_Pos)              /*!< 0x00004000 */
#define ETH_MACPPSTTSR_TSTRH0_15            (0x8000UL << ETH_MACPPSTTSR_TSTRH0_Pos)              /*!< 0x00008000 */
#define ETH_MACPPSTTSR_TSTRH0_16            (0x10000UL << ETH_MACPPSTTSR_TSTRH0_Pos)             /*!< 0x00010000 */
#define ETH_MACPPSTTSR_TSTRH0_17            (0x20000UL << ETH_MACPPSTTSR_TSTRH0_Pos)             /*!< 0x00020000 */
#define ETH_MACPPSTTSR_TSTRH0_18            (0x40000UL << ETH_MACPPSTTSR_TSTRH0_Pos)             /*!< 0x00040000 */
#define ETH_MACPPSTTSR_TSTRH0_19            (0x80000UL << ETH_MACPPSTTSR_TSTRH0_Pos)             /*!< 0x00080000 */
#define ETH_MACPPSTTSR_TSTRH0_20            (0x100000UL << ETH_MACPPSTTSR_TSTRH0_Pos)            /*!< 0x00100000 */
#define ETH_MACPPSTTSR_TSTRH0_21            (0x200000UL << ETH_MACPPSTTSR_TSTRH0_Pos)            /*!< 0x00200000 */
#define ETH_MACPPSTTSR_TSTRH0_22            (0x400000UL << ETH_MACPPSTTSR_TSTRH0_Pos)            /*!< 0x00400000 */
#define ETH_MACPPSTTSR_TSTRH0_23            (0x800000UL << ETH_MACPPSTTSR_TSTRH0_Pos)            /*!< 0x00800000 */
#define ETH_MACPPSTTSR_TSTRH0_24            (0x1000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)           /*!< 0x01000000 */
#define ETH_MACPPSTTSR_TSTRH0_25            (0x2000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)           /*!< 0x02000000 */
#define ETH_MACPPSTTSR_TSTRH0_26            (0x4000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)           /*!< 0x04000000 */
#define ETH_MACPPSTTSR_TSTRH0_27            (0x8000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)           /*!< 0x08000000 */
#define ETH_MACPPSTTSR_TSTRH0_28            (0x10000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)          /*!< 0x10000000 */
#define ETH_MACPPSTTSR_TSTRH0_29            (0x20000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)          /*!< 0x20000000 */
#define ETH_MACPPSTTSR_TSTRH0_30            (0x40000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)          /*!< 0x40000000 */
#define ETH_MACPPSTTSR_TSTRH0_31            (0x80000000UL << ETH_MACPPSTTSR_TSTRH0_Pos)          /*!< 0x80000000 */

/************  Bit definition for ETH_MACPPSTTNR register  *************/
#define ETH_MACPPSTTNR_TTSL0_Pos            (0U)
#define ETH_MACPPSTTNR_TTSL0_Msk            (0x7FFFFFFFUL << ETH_MACPPSTTNR_TTSL0_Pos)           /*!< 0x7FFFFFFF */
#define ETH_MACPPSTTNR_TTSL0                ETH_MACPPSTTNR_TTSL0_Msk                            /*!< Target Time Low for PPS Register */
#define ETH_MACPPSTTNR_TTSL0_0              (0x1UL << ETH_MACPPSTTNR_TTSL0_Pos)                  /*!< 0x00000001 */
#define ETH_MACPPSTTNR_TTSL0_1              (0x2UL << ETH_MACPPSTTNR_TTSL0_Pos)                  /*!< 0x00000002 */
#define ETH_MACPPSTTNR_TTSL0_2              (0x4UL << ETH_MACPPSTTNR_TTSL0_Pos)                  /*!< 0x00000004 */
#define ETH_MACPPSTTNR_TTSL0_3              (0x8UL << ETH_MACPPSTTNR_TTSL0_Pos)                  /*!< 0x00000008 */
#define ETH_MACPPSTTNR_TTSL0_4              (0x10UL << ETH_MACPPSTTNR_TTSL0_Pos)                 /*!< 0x00000010 */
#define ETH_MACPPSTTNR_TTSL0_5              (0x20UL << ETH_MACPPSTTNR_TTSL0_Pos)                 /*!< 0x00000020 */
#define ETH_MACPPSTTNR_TTSL0_6              (0x40UL << ETH_MACPPSTTNR_TTSL0_Pos)                 /*!< 0x00000040 */
#define ETH_MACPPSTTNR_TTSL0_7              (0x80UL << ETH_MACPPSTTNR_TTSL0_Pos)                 /*!< 0x00000080 */
#define ETH_MACPPSTTNR_TTSL0_8              (0x100UL << ETH_MACPPSTTNR_TTSL0_Pos)                /*!< 0x00000100 */
#define ETH_MACPPSTTNR_TTSL0_9              (0x200UL << ETH_MACPPSTTNR_TTSL0_Pos)                /*!< 0x00000200 */
#define ETH_MACPPSTTNR_TTSL0_10             (0x400UL << ETH_MACPPSTTNR_TTSL0_Pos)                /*!< 0x00000400 */
#define ETH_MACPPSTTNR_TTSL0_11             (0x800UL << ETH_MACPPSTTNR_TTSL0_Pos)                /*!< 0x00000800 */
#define ETH_MACPPSTTNR_TTSL0_12             (0x1000UL << ETH_MACPPSTTNR_TTSL0_Pos)               /*!< 0x00001000 */
#define ETH_MACPPSTTNR_TTSL0_13             (0x2000UL << ETH_MACPPSTTNR_TTSL0_Pos)               /*!< 0x00002000 */
#define ETH_MACPPSTTNR_TTSL0_14             (0x4000UL << ETH_MACPPSTTNR_TTSL0_Pos)               /*!< 0x00004000 */
#define ETH_MACPPSTTNR_TTSL0_15             (0x8000UL << ETH_MACPPSTTNR_TTSL0_Pos)               /*!< 0x00008000 */
#define ETH_MACPPSTTNR_TTSL0_16             (0x10000UL << ETH_MACPPSTTNR_TTSL0_Pos)              /*!< 0x00010000 */
#define ETH_MACPPSTTNR_TTSL0_17             (0x20000UL << ETH_MACPPSTTNR_TTSL0_Pos)              /*!< 0x00020000 */
#define ETH_MACPPSTTNR_TTSL0_18             (0x40000UL << ETH_MACPPSTTNR_TTSL0_Pos)              /*!< 0x00040000 */
#define ETH_MACPPSTTNR_TTSL0_19             (0x80000UL << ETH_MACPPSTTNR_TTSL0_Pos)              /*!< 0x00080000 */
#define ETH_MACPPSTTNR_TTSL0_20             (0x100000UL << ETH_MACPPSTTNR_TTSL0_Pos)             /*!< 0x00100000 */
#define ETH_MACPPSTTNR_TTSL0_21             (0x200000UL << ETH_MACPPSTTNR_TTSL0_Pos)             /*!< 0x00200000 */
#define ETH_MACPPSTTNR_TTSL0_22             (0x400000UL << ETH_MACPPSTTNR_TTSL0_Pos)             /*!< 0x00400000 */
#define ETH_MACPPSTTNR_TTSL0_23             (0x800000UL << ETH_MACPPSTTNR_TTSL0_Pos)             /*!< 0x00800000 */
#define ETH_MACPPSTTNR_TTSL0_24             (0x1000000UL << ETH_MACPPSTTNR_TTSL0_Pos)            /*!< 0x01000000 */
#define ETH_MACPPSTTNR_TTSL0_25             (0x2000000UL << ETH_MACPPSTTNR_TTSL0_Pos)            /*!< 0x02000000 */
#define ETH_MACPPSTTNR_TTSL0_26             (0x4000000UL << ETH_MACPPSTTNR_TTSL0_Pos)            /*!< 0x04000000 */
#define ETH_MACPPSTTNR_TTSL0_27             (0x8000000UL << ETH_MACPPSTTNR_TTSL0_Pos)            /*!< 0x08000000 */
#define ETH_MACPPSTTNR_TTSL0_28             (0x10000000UL << ETH_MACPPSTTNR_TTSL0_Pos)           /*!< 0x10000000 */
#define ETH_MACPPSTTNR_TTSL0_29             (0x20000000UL << ETH_MACPPSTTNR_TTSL0_Pos)           /*!< 0x20000000 */
#define ETH_MACPPSTTNR_TTSL0_30             (0x40000000UL << ETH_MACPPSTTNR_TTSL0_Pos)           /*!< 0x40000000 */
#define ETH_MACPPSTTNR_TRGTBUSY0_Pos        (31U)
#define ETH_MACPPSTTNR_TRGTBUSY0_Msk        (0x1UL << ETH_MACPPSTTNR_TRGTBUSY0_Pos)              /*!< 0x80000000 */
#define ETH_MACPPSTTNR_TRGTBUSY0            ETH_MACPPSTTNR_TRGTBUSY0_Msk                        /*!< PPS Target Time Register Busy */

/*************  Bit definition for ETH_MACPPSIR register  **************/
#define ETH_MACPPSIR_PPSINT0_Pos            (0U)
#define ETH_MACPPSIR_PPSINT0_Msk            (0xFFFFFFFFUL << ETH_MACPPSIR_PPSINT0_Pos)           /*!< 0xFFFFFFFF */
#define ETH_MACPPSIR_PPSINT0                ETH_MACPPSIR_PPSINT0_Msk                            /*!< PPS Output Signal Interval */
#define ETH_MACPPSIR_PPSINT0_0              (0x1UL << ETH_MACPPSIR_PPSINT0_Pos)                  /*!< 0x00000001 */
#define ETH_MACPPSIR_PPSINT0_1              (0x2UL << ETH_MACPPSIR_PPSINT0_Pos)                  /*!< 0x00000002 */
#define ETH_MACPPSIR_PPSINT0_2              (0x4UL << ETH_MACPPSIR_PPSINT0_Pos)                  /*!< 0x00000004 */
#define ETH_MACPPSIR_PPSINT0_3              (0x8UL << ETH_MACPPSIR_PPSINT0_Pos)                  /*!< 0x00000008 */
#define ETH_MACPPSIR_PPSINT0_4              (0x10UL << ETH_MACPPSIR_PPSINT0_Pos)                 /*!< 0x00000010 */
#define ETH_MACPPSIR_PPSINT0_5              (0x20UL << ETH_MACPPSIR_PPSINT0_Pos)                 /*!< 0x00000020 */
#define ETH_MACPPSIR_PPSINT0_6              (0x40UL << ETH_MACPPSIR_PPSINT0_Pos)                 /*!< 0x00000040 */
#define ETH_MACPPSIR_PPSINT0_7              (0x80UL << ETH_MACPPSIR_PPSINT0_Pos)                 /*!< 0x00000080 */
#define ETH_MACPPSIR_PPSINT0_8              (0x100UL << ETH_MACPPSIR_PPSINT0_Pos)                /*!< 0x00000100 */
#define ETH_MACPPSIR_PPSINT0_9              (0x200UL << ETH_MACPPSIR_PPSINT0_Pos)                /*!< 0x00000200 */
#define ETH_MACPPSIR_PPSINT0_10             (0x400UL << ETH_MACPPSIR_PPSINT0_Pos)                /*!< 0x00000400 */
#define ETH_MACPPSIR_PPSINT0_11             (0x800UL << ETH_MACPPSIR_PPSINT0_Pos)                /*!< 0x00000800 */
#define ETH_MACPPSIR_PPSINT0_12             (0x1000UL << ETH_MACPPSIR_PPSINT0_Pos)               /*!< 0x00001000 */
#define ETH_MACPPSIR_PPSINT0_13             (0x2000UL << ETH_MACPPSIR_PPSINT0_Pos)               /*!< 0x00002000 */
#define ETH_MACPPSIR_PPSINT0_14             (0x4000UL << ETH_MACPPSIR_PPSINT0_Pos)               /*!< 0x00004000 */
#define ETH_MACPPSIR_PPSINT0_15             (0x8000UL << ETH_MACPPSIR_PPSINT0_Pos)               /*!< 0x00008000 */
#define ETH_MACPPSIR_PPSINT0_16             (0x10000UL << ETH_MACPPSIR_PPSINT0_Pos)              /*!< 0x00010000 */
#define ETH_MACPPSIR_PPSINT0_17             (0x20000UL << ETH_MACPPSIR_PPSINT0_Pos)              /*!< 0x00020000 */
#define ETH_MACPPSIR_PPSINT0_18             (0x40000UL << ETH_MACPPSIR_PPSINT0_Pos)              /*!< 0x00040000 */
#define ETH_MACPPSIR_PPSINT0_19             (0x80000UL << ETH_MACPPSIR_PPSINT0_Pos)              /*!< 0x00080000 */
#define ETH_MACPPSIR_PPSINT0_20             (0x100000UL << ETH_MACPPSIR_PPSINT0_Pos)             /*!< 0x00100000 */
#define ETH_MACPPSIR_PPSINT0_21             (0x200000UL << ETH_MACPPSIR_PPSINT0_Pos)             /*!< 0x00200000 */
#define ETH_MACPPSIR_PPSINT0_22             (0x400000UL << ETH_MACPPSIR_PPSINT0_Pos)             /*!< 0x00400000 */
#define ETH_MACPPSIR_PPSINT0_23             (0x800000UL << ETH_MACPPSIR_PPSINT0_Pos)             /*!< 0x00800000 */
#define ETH_MACPPSIR_PPSINT0_24             (0x1000000UL << ETH_MACPPSIR_PPSINT0_Pos)            /*!< 0x01000000 */
#define ETH_MACPPSIR_PPSINT0_25             (0x2000000UL << ETH_MACPPSIR_PPSINT0_Pos)            /*!< 0x02000000 */
#define ETH_MACPPSIR_PPSINT0_26             (0x4000000UL << ETH_MACPPSIR_PPSINT0_Pos)            /*!< 0x04000000 */
#define ETH_MACPPSIR_PPSINT0_27             (0x8000000UL << ETH_MACPPSIR_PPSINT0_Pos)            /*!< 0x08000000 */
#define ETH_MACPPSIR_PPSINT0_28             (0x10000000UL << ETH_MACPPSIR_PPSINT0_Pos)           /*!< 0x10000000 */
#define ETH_MACPPSIR_PPSINT0_29             (0x20000000UL << ETH_MACPPSIR_PPSINT0_Pos)           /*!< 0x20000000 */
#define ETH_MACPPSIR_PPSINT0_30             (0x40000000UL << ETH_MACPPSIR_PPSINT0_Pos)           /*!< 0x40000000 */
#define ETH_MACPPSIR_PPSINT0_31             (0x80000000UL << ETH_MACPPSIR_PPSINT0_Pos)           /*!< 0x80000000 */

/*************  Bit definition for ETH_MACPPSWR register  **************/
#define ETH_MACPPSWR_PPSWIDTH0_Pos          (0U)
#define ETH_MACPPSWR_PPSWIDTH0_Msk          (0xFFFFFFFFUL << ETH_MACPPSWR_PPSWIDTH0_Pos)         /*!< 0xFFFFFFFF */
#define ETH_MACPPSWR_PPSWIDTH0              ETH_MACPPSWR_PPSWIDTH0_Msk                          /*!< PPS Output Signal Width */
#define ETH_MACPPSWR_PPSWIDTH0_0            (0x1UL << ETH_MACPPSWR_PPSWIDTH0_Pos)                /*!< 0x00000001 */
#define ETH_MACPPSWR_PPSWIDTH0_1            (0x2UL << ETH_MACPPSWR_PPSWIDTH0_Pos)                /*!< 0x00000002 */
#define ETH_MACPPSWR_PPSWIDTH0_2            (0x4UL << ETH_MACPPSWR_PPSWIDTH0_Pos)                /*!< 0x00000004 */
#define ETH_MACPPSWR_PPSWIDTH0_3            (0x8UL << ETH_MACPPSWR_PPSWIDTH0_Pos)                /*!< 0x00000008 */
#define ETH_MACPPSWR_PPSWIDTH0_4            (0x10UL << ETH_MACPPSWR_PPSWIDTH0_Pos)               /*!< 0x00000010 */
#define ETH_MACPPSWR_PPSWIDTH0_5            (0x20UL << ETH_MACPPSWR_PPSWIDTH0_Pos)               /*!< 0x00000020 */
#define ETH_MACPPSWR_PPSWIDTH0_6            (0x40UL << ETH_MACPPSWR_PPSWIDTH0_Pos)               /*!< 0x00000040 */
#define ETH_MACPPSWR_PPSWIDTH0_7            (0x80UL << ETH_MACPPSWR_PPSWIDTH0_Pos)               /*!< 0x00000080 */
#define ETH_MACPPSWR_PPSWIDTH0_8            (0x100UL << ETH_MACPPSWR_PPSWIDTH0_Pos)              /*!< 0x00000100 */
#define ETH_MACPPSWR_PPSWIDTH0_9            (0x200UL << ETH_MACPPSWR_PPSWIDTH0_Pos)              /*!< 0x00000200 */
#define ETH_MACPPSWR_PPSWIDTH0_10           (0x400UL << ETH_MACPPSWR_PPSWIDTH0_Pos)              /*!< 0x00000400 */
#define ETH_MACPPSWR_PPSWIDTH0_11           (0x800UL << ETH_MACPPSWR_PPSWIDTH0_Pos)              /*!< 0x00000800 */
#define ETH_MACPPSWR_PPSWIDTH0_12           (0x1000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)             /*!< 0x00001000 */
#define ETH_MACPPSWR_PPSWIDTH0_13           (0x2000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)             /*!< 0x00002000 */
#define ETH_MACPPSWR_PPSWIDTH0_14           (0x4000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)             /*!< 0x00004000 */
#define ETH_MACPPSWR_PPSWIDTH0_15           (0x8000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)             /*!< 0x00008000 */
#define ETH_MACPPSWR_PPSWIDTH0_16           (0x10000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)            /*!< 0x00010000 */
#define ETH_MACPPSWR_PPSWIDTH0_17           (0x20000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)            /*!< 0x00020000 */
#define ETH_MACPPSWR_PPSWIDTH0_18           (0x40000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)            /*!< 0x00040000 */
#define ETH_MACPPSWR_PPSWIDTH0_19           (0x80000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)            /*!< 0x00080000 */
#define ETH_MACPPSWR_PPSWIDTH0_20           (0x100000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)           /*!< 0x00100000 */
#define ETH_MACPPSWR_PPSWIDTH0_21           (0x200000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)           /*!< 0x00200000 */
#define ETH_MACPPSWR_PPSWIDTH0_22           (0x400000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)           /*!< 0x00400000 */
#define ETH_MACPPSWR_PPSWIDTH0_23           (0x800000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)           /*!< 0x00800000 */
#define ETH_MACPPSWR_PPSWIDTH0_24           (0x1000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)          /*!< 0x01000000 */
#define ETH_MACPPSWR_PPSWIDTH0_25           (0x2000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)          /*!< 0x02000000 */
#define ETH_MACPPSWR_PPSWIDTH0_26           (0x4000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)          /*!< 0x04000000 */
#define ETH_MACPPSWR_PPSWIDTH0_27           (0x8000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)          /*!< 0x08000000 */
#define ETH_MACPPSWR_PPSWIDTH0_28           (0x10000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)         /*!< 0x10000000 */
#define ETH_MACPPSWR_PPSWIDTH0_29           (0x20000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)         /*!< 0x20000000 */
#define ETH_MACPPSWR_PPSWIDTH0_30           (0x40000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)         /*!< 0x40000000 */
#define ETH_MACPPSWR_PPSWIDTH0_31           (0x80000000UL << ETH_MACPPSWR_PPSWIDTH0_Pos)         /*!< 0x80000000 */

/**************  Bit definition for ETH_MACPOCR register  **************/
#define ETH_MACPOCR_PTOEN_Pos               (0U)
#define ETH_MACPOCR_PTOEN_Msk               (0x1UL << ETH_MACPOCR_PTOEN_Pos)                     /*!< 0x00000001 */
#define ETH_MACPOCR_PTOEN                   ETH_MACPOCR_PTOEN_Msk                               /*!< PTP Offload Enable */
#define ETH_MACPOCR_ASYNCEN_Pos             (1U)
#define ETH_MACPOCR_ASYNCEN_Msk             (0x1UL << ETH_MACPOCR_ASYNCEN_Pos)                   /*!< 0x00000002 */
#define ETH_MACPOCR_ASYNCEN                 ETH_MACPOCR_ASYNCEN_Msk                             /*!< Automatic PTP SYNC message Enable */
#define ETH_MACPOCR_APDREQEN_Pos            (2U)
#define ETH_MACPOCR_APDREQEN_Msk            (0x1UL << ETH_MACPOCR_APDREQEN_Pos)                  /*!< 0x00000004 */
#define ETH_MACPOCR_APDREQEN                ETH_MACPOCR_APDREQEN_Msk                            /*!< Automatic PTP Pdelay_Req message Enable */
#define ETH_MACPOCR_ASYNCTRIG_Pos           (4U)
#define ETH_MACPOCR_ASYNCTRIG_Msk           (0x1UL << ETH_MACPOCR_ASYNCTRIG_Pos)                 /*!< 0x00000010 */
#define ETH_MACPOCR_ASYNCTRIG               ETH_MACPOCR_ASYNCTRIG_Msk                           /*!< Automatic PTP SYNC message Trigger */
#define ETH_MACPOCR_APDREQTRIG_Pos          (5U)
#define ETH_MACPOCR_APDREQTRIG_Msk          (0x1UL << ETH_MACPOCR_APDREQTRIG_Pos)                /*!< 0x00000020 */
#define ETH_MACPOCR_APDREQTRIG              ETH_MACPOCR_APDREQTRIG_Msk                          /*!< Automatic PTP Pdelay_Req message Trigger */
#define ETH_MACPOCR_DRRDIS_Pos              (6U)
#define ETH_MACPOCR_DRRDIS_Msk              (0x1UL << ETH_MACPOCR_DRRDIS_Pos)                    /*!< 0x00000040 */
#define ETH_MACPOCR_DRRDIS                  ETH_MACPOCR_DRRDIS_Msk                              /*!< Disable PTO Delay Request/Response response generation */
#define ETH_MACPOCR_DN_Pos                  (8U)
#define ETH_MACPOCR_DN_Msk                  (0xFFUL << ETH_MACPOCR_DN_Pos)                       /*!< 0x0000FF00 */
#define ETH_MACPOCR_DN                      ETH_MACPOCR_DN_Msk                                  /*!< Domain Number */
#define ETH_MACPOCR_DN_0                    (0x1UL << ETH_MACPOCR_DN_Pos)                        /*!< 0x00000100 */
#define ETH_MACPOCR_DN_1                    (0x2UL << ETH_MACPOCR_DN_Pos)                        /*!< 0x00000200 */
#define ETH_MACPOCR_DN_2                    (0x4UL << ETH_MACPOCR_DN_Pos)                        /*!< 0x00000400 */
#define ETH_MACPOCR_DN_3                    (0x8UL << ETH_MACPOCR_DN_Pos)                        /*!< 0x00000800 */
#define ETH_MACPOCR_DN_4                    (0x10UL << ETH_MACPOCR_DN_Pos)                       /*!< 0x00001000 */
#define ETH_MACPOCR_DN_5                    (0x20UL << ETH_MACPOCR_DN_Pos)                       /*!< 0x00002000 */
#define ETH_MACPOCR_DN_6                    (0x40UL << ETH_MACPOCR_DN_Pos)                       /*!< 0x00004000 */
#define ETH_MACPOCR_DN_7                    (0x80UL << ETH_MACPOCR_DN_Pos)                       /*!< 0x00008000 */

/*************  Bit definition for ETH_MACSPI0R register  **************/
#define ETH_MACSPI0R_SPI0_Pos               (0U)
#define ETH_MACSPI0R_SPI0_Msk               (0xFFFFFFFFUL << ETH_MACSPI0R_SPI0_Pos)              /*!< 0xFFFFFFFF */
#define ETH_MACSPI0R_SPI0                   ETH_MACSPI0R_SPI0_Msk                               /*!< Source Port Identity 0 */
#define ETH_MACSPI0R_SPI0_0                 (0x1UL << ETH_MACSPI0R_SPI0_Pos)                     /*!< 0x00000001 */
#define ETH_MACSPI0R_SPI0_1                 (0x2UL << ETH_MACSPI0R_SPI0_Pos)                     /*!< 0x00000002 */
#define ETH_MACSPI0R_SPI0_2                 (0x4UL << ETH_MACSPI0R_SPI0_Pos)                     /*!< 0x00000004 */
#define ETH_MACSPI0R_SPI0_3                 (0x8UL << ETH_MACSPI0R_SPI0_Pos)                     /*!< 0x00000008 */
#define ETH_MACSPI0R_SPI0_4                 (0x10UL << ETH_MACSPI0R_SPI0_Pos)                    /*!< 0x00000010 */
#define ETH_MACSPI0R_SPI0_5                 (0x20UL << ETH_MACSPI0R_SPI0_Pos)                    /*!< 0x00000020 */
#define ETH_MACSPI0R_SPI0_6                 (0x40UL << ETH_MACSPI0R_SPI0_Pos)                    /*!< 0x00000040 */
#define ETH_MACSPI0R_SPI0_7                 (0x80UL << ETH_MACSPI0R_SPI0_Pos)                    /*!< 0x00000080 */
#define ETH_MACSPI0R_SPI0_8                 (0x100UL << ETH_MACSPI0R_SPI0_Pos)                   /*!< 0x00000100 */
#define ETH_MACSPI0R_SPI0_9                 (0x200UL << ETH_MACSPI0R_SPI0_Pos)                   /*!< 0x00000200 */
#define ETH_MACSPI0R_SPI0_10                (0x400UL << ETH_MACSPI0R_SPI0_Pos)                   /*!< 0x00000400 */
#define ETH_MACSPI0R_SPI0_11                (0x800UL << ETH_MACSPI0R_SPI0_Pos)                   /*!< 0x00000800 */
#define ETH_MACSPI0R_SPI0_12                (0x1000UL << ETH_MACSPI0R_SPI0_Pos)                  /*!< 0x00001000 */
#define ETH_MACSPI0R_SPI0_13                (0x2000UL << ETH_MACSPI0R_SPI0_Pos)                  /*!< 0x00002000 */
#define ETH_MACSPI0R_SPI0_14                (0x4000UL << ETH_MACSPI0R_SPI0_Pos)                  /*!< 0x00004000 */
#define ETH_MACSPI0R_SPI0_15                (0x8000UL << ETH_MACSPI0R_SPI0_Pos)                  /*!< 0x00008000 */
#define ETH_MACSPI0R_SPI0_16                (0x10000UL << ETH_MACSPI0R_SPI0_Pos)                 /*!< 0x00010000 */
#define ETH_MACSPI0R_SPI0_17                (0x20000UL << ETH_MACSPI0R_SPI0_Pos)                 /*!< 0x00020000 */
#define ETH_MACSPI0R_SPI0_18                (0x40000UL << ETH_MACSPI0R_SPI0_Pos)                 /*!< 0x00040000 */
#define ETH_MACSPI0R_SPI0_19                (0x80000UL << ETH_MACSPI0R_SPI0_Pos)                 /*!< 0x00080000 */
#define ETH_MACSPI0R_SPI0_20                (0x100000UL << ETH_MACSPI0R_SPI0_Pos)                /*!< 0x00100000 */
#define ETH_MACSPI0R_SPI0_21                (0x200000UL << ETH_MACSPI0R_SPI0_Pos)                /*!< 0x00200000 */
#define ETH_MACSPI0R_SPI0_22                (0x400000UL << ETH_MACSPI0R_SPI0_Pos)                /*!< 0x00400000 */
#define ETH_MACSPI0R_SPI0_23                (0x800000UL << ETH_MACSPI0R_SPI0_Pos)                /*!< 0x00800000 */
#define ETH_MACSPI0R_SPI0_24                (0x1000000UL << ETH_MACSPI0R_SPI0_Pos)               /*!< 0x01000000 */
#define ETH_MACSPI0R_SPI0_25                (0x2000000UL << ETH_MACSPI0R_SPI0_Pos)               /*!< 0x02000000 */
#define ETH_MACSPI0R_SPI0_26                (0x4000000UL << ETH_MACSPI0R_SPI0_Pos)               /*!< 0x04000000 */
#define ETH_MACSPI0R_SPI0_27                (0x8000000UL << ETH_MACSPI0R_SPI0_Pos)               /*!< 0x08000000 */
#define ETH_MACSPI0R_SPI0_28                (0x10000000UL << ETH_MACSPI0R_SPI0_Pos)              /*!< 0x10000000 */
#define ETH_MACSPI0R_SPI0_29                (0x20000000UL << ETH_MACSPI0R_SPI0_Pos)              /*!< 0x20000000 */
#define ETH_MACSPI0R_SPI0_30                (0x40000000UL << ETH_MACSPI0R_SPI0_Pos)              /*!< 0x40000000 */
#define ETH_MACSPI0R_SPI0_31                (0x80000000UL << ETH_MACSPI0R_SPI0_Pos)              /*!< 0x80000000 */

/*************  Bit definition for ETH_MACSPI1R register  **************/
#define ETH_MACSPI1R_SPI1_Pos               (0U)
#define ETH_MACSPI1R_SPI1_Msk               (0xFFFFFFFFUL << ETH_MACSPI1R_SPI1_Pos)              /*!< 0xFFFFFFFF */
#define ETH_MACSPI1R_SPI1                   ETH_MACSPI1R_SPI1_Msk                               /*!< Source Port Identity 1 */
#define ETH_MACSPI1R_SPI1_0                 (0x1UL << ETH_MACSPI1R_SPI1_Pos)                     /*!< 0x00000001 */
#define ETH_MACSPI1R_SPI1_1                 (0x2UL << ETH_MACSPI1R_SPI1_Pos)                     /*!< 0x00000002 */
#define ETH_MACSPI1R_SPI1_2                 (0x4UL << ETH_MACSPI1R_SPI1_Pos)                     /*!< 0x00000004 */
#define ETH_MACSPI1R_SPI1_3                 (0x8UL << ETH_MACSPI1R_SPI1_Pos)                     /*!< 0x00000008 */
#define ETH_MACSPI1R_SPI1_4                 (0x10UL << ETH_MACSPI1R_SPI1_Pos)                    /*!< 0x00000010 */
#define ETH_MACSPI1R_SPI1_5                 (0x20UL << ETH_MACSPI1R_SPI1_Pos)                    /*!< 0x00000020 */
#define ETH_MACSPI1R_SPI1_6                 (0x40UL << ETH_MACSPI1R_SPI1_Pos)                    /*!< 0x00000040 */
#define ETH_MACSPI1R_SPI1_7                 (0x80UL << ETH_MACSPI1R_SPI1_Pos)                    /*!< 0x00000080 */
#define ETH_MACSPI1R_SPI1_8                 (0x100UL << ETH_MACSPI1R_SPI1_Pos)                   /*!< 0x00000100 */
#define ETH_MACSPI1R_SPI1_9                 (0x200UL << ETH_MACSPI1R_SPI1_Pos)                   /*!< 0x00000200 */
#define ETH_MACSPI1R_SPI1_10                (0x400UL << ETH_MACSPI1R_SPI1_Pos)                   /*!< 0x00000400 */
#define ETH_MACSPI1R_SPI1_11                (0x800UL << ETH_MACSPI1R_SPI1_Pos)                   /*!< 0x00000800 */
#define ETH_MACSPI1R_SPI1_12                (0x1000UL << ETH_MACSPI1R_SPI1_Pos)                  /*!< 0x00001000 */
#define ETH_MACSPI1R_SPI1_13                (0x2000UL << ETH_MACSPI1R_SPI1_Pos)                  /*!< 0x00002000 */
#define ETH_MACSPI1R_SPI1_14                (0x4000UL << ETH_MACSPI1R_SPI1_Pos)                  /*!< 0x00004000 */
#define ETH_MACSPI1R_SPI1_15                (0x8000UL << ETH_MACSPI1R_SPI1_Pos)                  /*!< 0x00008000 */
#define ETH_MACSPI1R_SPI1_16                (0x10000UL << ETH_MACSPI1R_SPI1_Pos)                 /*!< 0x00010000 */
#define ETH_MACSPI1R_SPI1_17                (0x20000UL << ETH_MACSPI1R_SPI1_Pos)                 /*!< 0x00020000 */
#define ETH_MACSPI1R_SPI1_18                (0x40000UL << ETH_MACSPI1R_SPI1_Pos)                 /*!< 0x00040000 */
#define ETH_MACSPI1R_SPI1_19                (0x80000UL << ETH_MACSPI1R_SPI1_Pos)                 /*!< 0x00080000 */
#define ETH_MACSPI1R_SPI1_20                (0x100000UL << ETH_MACSPI1R_SPI1_Pos)                /*!< 0x00100000 */
#define ETH_MACSPI1R_SPI1_21                (0x200000UL << ETH_MACSPI1R_SPI1_Pos)                /*!< 0x00200000 */
#define ETH_MACSPI1R_SPI1_22                (0x400000UL << ETH_MACSPI1R_SPI1_Pos)                /*!< 0x00400000 */
#define ETH_MACSPI1R_SPI1_23                (0x800000UL << ETH_MACSPI1R_SPI1_Pos)                /*!< 0x00800000 */
#define ETH_MACSPI1R_SPI1_24                (0x1000000UL << ETH_MACSPI1R_SPI1_Pos)               /*!< 0x01000000 */
#define ETH_MACSPI1R_SPI1_25                (0x2000000UL << ETH_MACSPI1R_SPI1_Pos)               /*!< 0x02000000 */
#define ETH_MACSPI1R_SPI1_26                (0x4000000UL << ETH_MACSPI1R_SPI1_Pos)               /*!< 0x04000000 */
#define ETH_MACSPI1R_SPI1_27                (0x8000000UL << ETH_MACSPI1R_SPI1_Pos)               /*!< 0x08000000 */
#define ETH_MACSPI1R_SPI1_28                (0x10000000UL << ETH_MACSPI1R_SPI1_Pos)              /*!< 0x10000000 */
#define ETH_MACSPI1R_SPI1_29                (0x20000000UL << ETH_MACSPI1R_SPI1_Pos)              /*!< 0x20000000 */
#define ETH_MACSPI1R_SPI1_30                (0x40000000UL << ETH_MACSPI1R_SPI1_Pos)              /*!< 0x40000000 */
#define ETH_MACSPI1R_SPI1_31                (0x80000000UL << ETH_MACSPI1R_SPI1_Pos)              /*!< 0x80000000 */

/*************  Bit definition for ETH_MACSPI2R register  **************/
#define ETH_MACSPI2R_SPI2_Pos               (0U)
#define ETH_MACSPI2R_SPI2_Msk               (0xFFFFUL << ETH_MACSPI2R_SPI2_Pos)                  /*!< 0x0000FFFF */
#define ETH_MACSPI2R_SPI2                   ETH_MACSPI2R_SPI2_Msk                               /*!< Source Port Identity 2 */
#define ETH_MACSPI2R_SPI2_0                 (0x1UL << ETH_MACSPI2R_SPI2_Pos)                     /*!< 0x00000001 */
#define ETH_MACSPI2R_SPI2_1                 (0x2UL << ETH_MACSPI2R_SPI2_Pos)                     /*!< 0x00000002 */
#define ETH_MACSPI2R_SPI2_2                 (0x4UL << ETH_MACSPI2R_SPI2_Pos)                     /*!< 0x00000004 */
#define ETH_MACSPI2R_SPI2_3                 (0x8UL << ETH_MACSPI2R_SPI2_Pos)                     /*!< 0x00000008 */
#define ETH_MACSPI2R_SPI2_4                 (0x10UL << ETH_MACSPI2R_SPI2_Pos)                    /*!< 0x00000010 */
#define ETH_MACSPI2R_SPI2_5                 (0x20UL << ETH_MACSPI2R_SPI2_Pos)                    /*!< 0x00000020 */
#define ETH_MACSPI2R_SPI2_6                 (0x40UL << ETH_MACSPI2R_SPI2_Pos)                    /*!< 0x00000040 */
#define ETH_MACSPI2R_SPI2_7                 (0x80UL << ETH_MACSPI2R_SPI2_Pos)                    /*!< 0x00000080 */
#define ETH_MACSPI2R_SPI2_8                 (0x100UL << ETH_MACSPI2R_SPI2_Pos)                   /*!< 0x00000100 */
#define ETH_MACSPI2R_SPI2_9                 (0x200UL << ETH_MACSPI2R_SPI2_Pos)                   /*!< 0x00000200 */
#define ETH_MACSPI2R_SPI2_10                (0x400UL << ETH_MACSPI2R_SPI2_Pos)                   /*!< 0x00000400 */
#define ETH_MACSPI2R_SPI2_11                (0x800UL << ETH_MACSPI2R_SPI2_Pos)                   /*!< 0x00000800 */
#define ETH_MACSPI2R_SPI2_12                (0x1000UL << ETH_MACSPI2R_SPI2_Pos)                  /*!< 0x00001000 */
#define ETH_MACSPI2R_SPI2_13                (0x2000UL << ETH_MACSPI2R_SPI2_Pos)                  /*!< 0x00002000 */
#define ETH_MACSPI2R_SPI2_14                (0x4000UL << ETH_MACSPI2R_SPI2_Pos)                  /*!< 0x00004000 */
#define ETH_MACSPI2R_SPI2_15                (0x8000UL << ETH_MACSPI2R_SPI2_Pos)                  /*!< 0x00008000 */

/**************  Bit definition for ETH_MACLMIR register  **************/
#define ETH_MACLMIR_LSI_Pos                 (0U)
#define ETH_MACLMIR_LSI_Msk                 (0xFFUL << ETH_MACLMIR_LSI_Pos)                      /*!< 0x000000FF */
#define ETH_MACLMIR_LSI                     ETH_MACLMIR_LSI_Msk                                 /*!< Log Sync Interval */
#define ETH_MACLMIR_LSI_0                   (0x1UL << ETH_MACLMIR_LSI_Pos)                       /*!< 0x00000001 */
#define ETH_MACLMIR_LSI_1                   (0x2UL << ETH_MACLMIR_LSI_Pos)                       /*!< 0x00000002 */
#define ETH_MACLMIR_LSI_2                   (0x4UL << ETH_MACLMIR_LSI_Pos)                       /*!< 0x00000004 */
#define ETH_MACLMIR_LSI_3                   (0x8UL << ETH_MACLMIR_LSI_Pos)                       /*!< 0x00000008 */
#define ETH_MACLMIR_LSI_4                   (0x10UL << ETH_MACLMIR_LSI_Pos)                      /*!< 0x00000010 */
#define ETH_MACLMIR_LSI_5                   (0x20UL << ETH_MACLMIR_LSI_Pos)                      /*!< 0x00000020 */
#define ETH_MACLMIR_LSI_6                   (0x40UL << ETH_MACLMIR_LSI_Pos)                      /*!< 0x00000040 */
#define ETH_MACLMIR_LSI_7                   (0x80UL << ETH_MACLMIR_LSI_Pos)                      /*!< 0x00000080 */
#define ETH_MACLMIR_DRSYNCR_Pos             (8U)
#define ETH_MACLMIR_DRSYNCR_Msk             (0x7UL << ETH_MACLMIR_DRSYNCR_Pos)                   /*!< 0x00000700 */
#define ETH_MACLMIR_DRSYNCR                 ETH_MACLMIR_DRSYNCR_Msk                             /*!< Delay_Req to SYNC Ratio */
#define ETH_MACLMIR_DRSYNCR_0               (0x1UL << ETH_MACLMIR_DRSYNCR_Pos)                   /*!< 0x00000100 */
#define ETH_MACLMIR_DRSYNCR_1               (0x2UL << ETH_MACLMIR_DRSYNCR_Pos)                   /*!< 0x00000200 */
#define ETH_MACLMIR_DRSYNCR_2               (0x4UL << ETH_MACLMIR_DRSYNCR_Pos)                   /*!< 0x00000400 */
#define ETH_MACLMIR_LMPDRI_Pos              (24U)
#define ETH_MACLMIR_LMPDRI_Msk              (0xFFUL << ETH_MACLMIR_LMPDRI_Pos)                   /*!< 0xFF000000 */
#define ETH_MACLMIR_LMPDRI                  ETH_MACLMIR_LMPDRI_Msk                              /*!< Log Min Pdelay_Req Interval */
#define ETH_MACLMIR_LMPDRI_0                (0x1UL << ETH_MACLMIR_LMPDRI_Pos)                    /*!< 0x01000000 */
#define ETH_MACLMIR_LMPDRI_1                (0x2UL << ETH_MACLMIR_LMPDRI_Pos)                    /*!< 0x02000000 */
#define ETH_MACLMIR_LMPDRI_2                (0x4UL << ETH_MACLMIR_LMPDRI_Pos)                    /*!< 0x04000000 */
#define ETH_MACLMIR_LMPDRI_3                (0x8UL << ETH_MACLMIR_LMPDRI_Pos)                    /*!< 0x08000000 */
#define ETH_MACLMIR_LMPDRI_4                (0x10UL << ETH_MACLMIR_LMPDRI_Pos)                   /*!< 0x10000000 */
#define ETH_MACLMIR_LMPDRI_5                (0x20UL << ETH_MACLMIR_LMPDRI_Pos)                   /*!< 0x20000000 */
#define ETH_MACLMIR_LMPDRI_6                (0x40UL << ETH_MACLMIR_LMPDRI_Pos)                   /*!< 0x40000000 */
#define ETH_MACLMIR_LMPDRI_7                (0x80UL << ETH_MACLMIR_LMPDRI_Pos)                   /*!< 0x80000000 */

/**************  Bit definition for ETH_MTLOMR register  ***************/
#define ETH_MTLOMR_DTXSTS_Pos               (1U)
#define ETH_MTLOMR_DTXSTS_Msk               (0x1UL << ETH_MTLOMR_DTXSTS_Pos)                     /*!< 0x00000002 */
#define ETH_MTLOMR_DTXSTS                   ETH_MTLOMR_DTXSTS_Msk                               /*!< Drop Transmit Status */
#define ETH_MTLOMR_RAA_Pos                  (2U)
#define ETH_MTLOMR_RAA_Msk                  (0x1UL << ETH_MTLOMR_RAA_Pos)                        /*!< 0x00000004 */
#define ETH_MTLOMR_RAA                      ETH_MTLOMR_RAA_Msk                                  /*!< Receive Arbitration Algorithm */
#define ETH_MTLOMR_SCHALG_Pos               (5U)
#define ETH_MTLOMR_SCHALG_Msk               (0x3UL << ETH_MTLOMR_SCHALG_Pos)                     /*!< 0x00000060 */
#define ETH_MTLOMR_SCHALG                   ETH_MTLOMR_SCHALG_Msk                               /*!< Tx Scheduling Algorithm */
#define ETH_MTLOMR_SCHALG_0                 (0x1UL << ETH_MTLOMR_SCHALG_Pos)                     /*!< 0x00000020 */
#define ETH_MTLOMR_SCHALG_1                 (0x2UL << ETH_MTLOMR_SCHALG_Pos)                     /*!< 0x00000040 */
#define ETH_MTLOMR_CNTPRST_Pos              (8U)
#define ETH_MTLOMR_CNTPRST_Msk              (0x1UL << ETH_MTLOMR_CNTPRST_Pos)                    /*!< 0x00000100 */
#define ETH_MTLOMR_CNTPRST                  ETH_MTLOMR_CNTPRST_Msk                              /*!< Counters Preset */
#define ETH_MTLOMR_CNTCLR_Pos               (9U)
#define ETH_MTLOMR_CNTCLR_Msk               (0x1UL << ETH_MTLOMR_CNTCLR_Pos)                     /*!< 0x00000200 */
#define ETH_MTLOMR_CNTCLR                   ETH_MTLOMR_CNTCLR_Msk                               /*!< Counters Reset */

/**************  Bit definition for ETH_MTLISR register  ***************/
#define ETH_MTLISR_Q0IS_Pos                 (0U)
#define ETH_MTLISR_Q0IS_Msk                 (0x1UL << ETH_MTLISR_Q0IS_Pos)                       /*!< 0x00000001 */
#define ETH_MTLISR_Q0IS                     ETH_MTLISR_Q0IS_Msk                                 /*!< Queue 0 interrupt status */
#define ETH_MTLISR_Q1IS_Pos                 (1U)
#define ETH_MTLISR_Q1IS_Msk                 (0x1UL << ETH_MTLISR_Q1IS_Pos)                       /*!< 0x00000002 */
#define ETH_MTLISR_Q1IS                     ETH_MTLISR_Q1IS_Msk                                 /*!< Queue 1 interrupt status */

/************  Bit definition for ETH_MTLTXQ0OMR register  *************/
#define ETH_MTLTXQ0OMR_FTQ_Pos              (0U)
#define ETH_MTLTXQ0OMR_FTQ_Msk              (0x1UL << ETH_MTLTXQ0OMR_FTQ_Pos)                    /*!< 0x00000001 */
#define ETH_MTLTXQ0OMR_FTQ                  ETH_MTLTXQ0OMR_FTQ_Msk                              /*!< Flush Transmit Queue */
#define ETH_MTLTXQ0OMR_TSF_Pos              (1U)
#define ETH_MTLTXQ0OMR_TSF_Msk              (0x1UL << ETH_MTLTXQ0OMR_TSF_Pos)                    /*!< 0x00000002 */
#define ETH_MTLTXQ0OMR_TSF                  ETH_MTLTXQ0OMR_TSF_Msk                              /*!< Transmit Store and Forward */
#define ETH_MTLTXQ0OMR_TXQEN_Pos            (2U)
#define ETH_MTLTXQ0OMR_TXQEN_Msk            (0x3UL << ETH_MTLTXQ0OMR_TXQEN_Pos)                  /*!< 0x0000000C */
#define ETH_MTLTXQ0OMR_TXQEN                ETH_MTLTXQ0OMR_TXQEN_Msk                            /*!< Transmit Queue Enable */
#define ETH_MTLTXQ0OMR_TXQEN_0              (0x1UL << ETH_MTLTXQ0OMR_TXQEN_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ0OMR_TXQEN_1              (0x2UL << ETH_MTLTXQ0OMR_TXQEN_Pos)                  /*!< 0x00000008 */
#define ETH_MTLTXQ0OMR_TTC_Pos              (4U)
#define ETH_MTLTXQ0OMR_TTC_Msk              (0x7UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000070 */
#define ETH_MTLTXQ0OMR_TTC                  ETH_MTLTXQ0OMR_TTC_Msk                              /*!< Transmit Threshold Control */
#define ETH_MTLTXQ0OMR_TTC_32BITS           (0x0UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000000 */
#define ETH_MTLTXQ0OMR_TTC_64BITS           (0x1UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000010 */
#define ETH_MTLTXQ0OMR_TTC_96BITS           (0x2UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000020 */
#define ETH_MTLTXQ0OMR_TTC_128BITS          (0x3UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000030 */
#define ETH_MTLTXQ0OMR_TTC_192BITS          (0x4UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000040 */
#define ETH_MTLTXQ0OMR_TTC_256BITS          (0x5UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000050 */
#define ETH_MTLTXQ0OMR_TTC_384BITS          (0x6UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000060 */
#define ETH_MTLTXQ0OMR_TTC_512BITS          (0x7UL << ETH_MTLTXQ0OMR_TTC_Pos)                    /*!< 0x00000070 */
#define ETH_MTLTXQ0OMR_TQS_Pos              (16U)
#define ETH_MTLTXQ0OMR_TQS_Msk              (0x1FFUL << ETH_MTLTXQ0OMR_TQS_Pos)                  /*!< 0x01FF0000 */
#define ETH_MTLTXQ0OMR_TQS                  ETH_MTLTXQ0OMR_TQS_Msk                              /*!< Transmit Queue Size */
#define ETH_MTLTXQ0OMR_TQS_0                (0x1UL << ETH_MTLTXQ0OMR_TQS_Pos)                    /*!< 0x00010000 */
#define ETH_MTLTXQ0OMR_TQS_1                (0x2UL << ETH_MTLTXQ0OMR_TQS_Pos)                    /*!< 0x00020000 */
#define ETH_MTLTXQ0OMR_TQS_2                (0x4UL << ETH_MTLTXQ0OMR_TQS_Pos)                    /*!< 0x00040000 */
#define ETH_MTLTXQ0OMR_TQS_3                (0x8UL << ETH_MTLTXQ0OMR_TQS_Pos)                    /*!< 0x00080000 */
#define ETH_MTLTXQ0OMR_TQS_4                (0x10UL << ETH_MTLTXQ0OMR_TQS_Pos)                   /*!< 0x00100000 */
#define ETH_MTLTXQ0OMR_TQS_5                (0x20UL << ETH_MTLTXQ0OMR_TQS_Pos)                   /*!< 0x00200000 */
#define ETH_MTLTXQ0OMR_TQS_6                (0x40UL << ETH_MTLTXQ0OMR_TQS_Pos)                   /*!< 0x00400000 */
#define ETH_MTLTXQ0OMR_TQS_7                (0x80UL << ETH_MTLTXQ0OMR_TQS_Pos)                   /*!< 0x00800000 */
#define ETH_MTLTXQ0OMR_TQS_8                (0x100UL << ETH_MTLTXQ0OMR_TQS_Pos)                  /*!< 0x01000000 */

/*************  Bit definition for ETH_MTLTXQ0UR register  *************/
#define ETH_MTLTXQ0UR_UFFRMCNT_Pos          (0U)
#define ETH_MTLTXQ0UR_UFFRMCNT_Msk          (0x7FFUL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)              /*!< 0x000007FF */
#define ETH_MTLTXQ0UR_UFFRMCNT              ETH_MTLTXQ0UR_UFFRMCNT_Msk                          /*!< Underflow Packet Counter */
#define ETH_MTLTXQ0UR_UFFRMCNT_0            (0x1UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)                /*!< 0x00000001 */
#define ETH_MTLTXQ0UR_UFFRMCNT_1            (0x2UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)                /*!< 0x00000002 */
#define ETH_MTLTXQ0UR_UFFRMCNT_2            (0x4UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)                /*!< 0x00000004 */
#define ETH_MTLTXQ0UR_UFFRMCNT_3            (0x8UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)                /*!< 0x00000008 */
#define ETH_MTLTXQ0UR_UFFRMCNT_4            (0x10UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)               /*!< 0x00000010 */
#define ETH_MTLTXQ0UR_UFFRMCNT_5            (0x20UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)               /*!< 0x00000020 */
#define ETH_MTLTXQ0UR_UFFRMCNT_6            (0x40UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)               /*!< 0x00000040 */
#define ETH_MTLTXQ0UR_UFFRMCNT_7            (0x80UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)               /*!< 0x00000080 */
#define ETH_MTLTXQ0UR_UFFRMCNT_8            (0x100UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)              /*!< 0x00000100 */
#define ETH_MTLTXQ0UR_UFFRMCNT_9            (0x200UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)              /*!< 0x00000200 */
#define ETH_MTLTXQ0UR_UFFRMCNT_10           (0x400UL << ETH_MTLTXQ0UR_UFFRMCNT_Pos)              /*!< 0x00000400 */
#define ETH_MTLTXQ0UR_UFCNTOVF_Pos          (11U)
#define ETH_MTLTXQ0UR_UFCNTOVF_Msk          (0x1UL << ETH_MTLTXQ0UR_UFCNTOVF_Pos)                /*!< 0x00000800 */
#define ETH_MTLTXQ0UR_UFCNTOVF              ETH_MTLTXQ0UR_UFCNTOVF_Msk                          /*!< Overflow Bit for Underflow Packet Counter */

/*************  Bit definition for ETH_MTLTXQ0DR register  *************/
#define ETH_MTLTXQ0DR_TXQPAUSED_Pos         (0U)
#define ETH_MTLTXQ0DR_TXQPAUSED_Msk         (0x1UL << ETH_MTLTXQ0DR_TXQPAUSED_Pos)               /*!< 0x00000001 */
#define ETH_MTLTXQ0DR_TXQPAUSED             ETH_MTLTXQ0DR_TXQPAUSED_Msk                         /*!< Transmit Queue in Pause */
#define ETH_MTLTXQ0DR_TRCSTS_Pos            (1U)
#define ETH_MTLTXQ0DR_TRCSTS_Msk            (0x3UL << ETH_MTLTXQ0DR_TRCSTS_Pos)                  /*!< 0x00000006 */
#define ETH_MTLTXQ0DR_TRCSTS                ETH_MTLTXQ0DR_TRCSTS_Msk                            /*!< MTL Tx Queue Read Controller Status */
#define ETH_MTLTXQ0DR_TRCSTS_0              (0x1UL << ETH_MTLTXQ0DR_TRCSTS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLTXQ0DR_TRCSTS_1              (0x2UL << ETH_MTLTXQ0DR_TRCSTS_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ0DR_TWCSTS_Pos            (3U)
#define ETH_MTLTXQ0DR_TWCSTS_Msk            (0x1UL << ETH_MTLTXQ0DR_TWCSTS_Pos)                  /*!< 0x00000008 */
#define ETH_MTLTXQ0DR_TWCSTS                ETH_MTLTXQ0DR_TWCSTS_Msk                            /*!< MTL Tx Queue Write Controller Status */
#define ETH_MTLTXQ0DR_TXQSTS_Pos            (4U)
#define ETH_MTLTXQ0DR_TXQSTS_Msk            (0x1UL << ETH_MTLTXQ0DR_TXQSTS_Pos)                  /*!< 0x00000010 */
#define ETH_MTLTXQ0DR_TXQSTS                ETH_MTLTXQ0DR_TXQSTS_Msk                            /*!< MTL Tx Queue Not Empty Status */
#define ETH_MTLTXQ0DR_TXSTSFSTS_Pos         (5U)
#define ETH_MTLTXQ0DR_TXSTSFSTS_Msk         (0x1UL << ETH_MTLTXQ0DR_TXSTSFSTS_Pos)               /*!< 0x00000020 */
#define ETH_MTLTXQ0DR_TXSTSFSTS             ETH_MTLTXQ0DR_TXSTSFSTS_Msk                         /*!< MTL Tx Status FIFO Full Status */
#define ETH_MTLTXQ0DR_PTXQ_Pos              (16U)
#define ETH_MTLTXQ0DR_PTXQ_Msk              (0x7UL << ETH_MTLTXQ0DR_PTXQ_Pos)                    /*!< 0x00070000 */
#define ETH_MTLTXQ0DR_PTXQ                  ETH_MTLTXQ0DR_PTXQ_Msk                              /*!< Number of Packets in the Transmit Queue */
#define ETH_MTLTXQ0DR_PTXQ_0                (0x1UL << ETH_MTLTXQ0DR_PTXQ_Pos)                    /*!< 0x00010000 */
#define ETH_MTLTXQ0DR_PTXQ_1                (0x2UL << ETH_MTLTXQ0DR_PTXQ_Pos)                    /*!< 0x00020000 */
#define ETH_MTLTXQ0DR_PTXQ_2                (0x4UL << ETH_MTLTXQ0DR_PTXQ_Pos)                    /*!< 0x00040000 */
#define ETH_MTLTXQ0DR_STXSTSF_Pos           (20U)
#define ETH_MTLTXQ0DR_STXSTSF_Msk           (0x7UL << ETH_MTLTXQ0DR_STXSTSF_Pos)                 /*!< 0x00700000 */
#define ETH_MTLTXQ0DR_STXSTSF               ETH_MTLTXQ0DR_STXSTSF_Msk                           /*!< Number of Status Words in Tx Status FIFO of Queue */
#define ETH_MTLTXQ0DR_STXSTSF_0             (0x1UL << ETH_MTLTXQ0DR_STXSTSF_Pos)                 /*!< 0x00100000 */
#define ETH_MTLTXQ0DR_STXSTSF_1             (0x2UL << ETH_MTLTXQ0DR_STXSTSF_Pos)                 /*!< 0x00200000 */
#define ETH_MTLTXQ0DR_STXSTSF_2             (0x4UL << ETH_MTLTXQ0DR_STXSTSF_Pos)                 /*!< 0x00400000 */

/************  Bit definition for ETH_MTLTXQ0ESR register  *************/
#define ETH_MTLTXQ0ESR_ABS_Pos              (0U)
#define ETH_MTLTXQ0ESR_ABS_Msk              (0xFFFFFFUL << ETH_MTLTXQ0ESR_ABS_Pos)               /*!< 0x00FFFFFF */
#define ETH_MTLTXQ0ESR_ABS                  ETH_MTLTXQ0ESR_ABS_Msk                              /*!< Average Bits per Slot */
#define ETH_MTLTXQ0ESR_ABS_0                (0x1UL << ETH_MTLTXQ0ESR_ABS_Pos)                    /*!< 0x00000001 */
#define ETH_MTLTXQ0ESR_ABS_1                (0x2UL << ETH_MTLTXQ0ESR_ABS_Pos)                    /*!< 0x00000002 */
#define ETH_MTLTXQ0ESR_ABS_2                (0x4UL << ETH_MTLTXQ0ESR_ABS_Pos)                    /*!< 0x00000004 */
#define ETH_MTLTXQ0ESR_ABS_3                (0x8UL << ETH_MTLTXQ0ESR_ABS_Pos)                    /*!< 0x00000008 */
#define ETH_MTLTXQ0ESR_ABS_4                (0x10UL << ETH_MTLTXQ0ESR_ABS_Pos)                   /*!< 0x00000010 */
#define ETH_MTLTXQ0ESR_ABS_5                (0x20UL << ETH_MTLTXQ0ESR_ABS_Pos)                   /*!< 0x00000020 */
#define ETH_MTLTXQ0ESR_ABS_6                (0x40UL << ETH_MTLTXQ0ESR_ABS_Pos)                   /*!< 0x00000040 */
#define ETH_MTLTXQ0ESR_ABS_7                (0x80UL << ETH_MTLTXQ0ESR_ABS_Pos)                   /*!< 0x00000080 */
#define ETH_MTLTXQ0ESR_ABS_8                (0x100UL << ETH_MTLTXQ0ESR_ABS_Pos)                  /*!< 0x00000100 */
#define ETH_MTLTXQ0ESR_ABS_9                (0x200UL << ETH_MTLTXQ0ESR_ABS_Pos)                  /*!< 0x00000200 */
#define ETH_MTLTXQ0ESR_ABS_10               (0x400UL << ETH_MTLTXQ0ESR_ABS_Pos)                  /*!< 0x00000400 */
#define ETH_MTLTXQ0ESR_ABS_11               (0x800UL << ETH_MTLTXQ0ESR_ABS_Pos)                  /*!< 0x00000800 */
#define ETH_MTLTXQ0ESR_ABS_12               (0x1000UL << ETH_MTLTXQ0ESR_ABS_Pos)                 /*!< 0x00001000 */
#define ETH_MTLTXQ0ESR_ABS_13               (0x2000UL << ETH_MTLTXQ0ESR_ABS_Pos)                 /*!< 0x00002000 */
#define ETH_MTLTXQ0ESR_ABS_14               (0x4000UL << ETH_MTLTXQ0ESR_ABS_Pos)                 /*!< 0x00004000 */
#define ETH_MTLTXQ0ESR_ABS_15               (0x8000UL << ETH_MTLTXQ0ESR_ABS_Pos)                 /*!< 0x00008000 */
#define ETH_MTLTXQ0ESR_ABS_16               (0x10000UL << ETH_MTLTXQ0ESR_ABS_Pos)                /*!< 0x00010000 */
#define ETH_MTLTXQ0ESR_ABS_17               (0x20000UL << ETH_MTLTXQ0ESR_ABS_Pos)                /*!< 0x00020000 */
#define ETH_MTLTXQ0ESR_ABS_18               (0x40000UL << ETH_MTLTXQ0ESR_ABS_Pos)                /*!< 0x00040000 */
#define ETH_MTLTXQ0ESR_ABS_19               (0x80000UL << ETH_MTLTXQ0ESR_ABS_Pos)                /*!< 0x00080000 */
#define ETH_MTLTXQ0ESR_ABS_20               (0x100000UL << ETH_MTLTXQ0ESR_ABS_Pos)               /*!< 0x00100000 */
#define ETH_MTLTXQ0ESR_ABS_21               (0x200000UL << ETH_MTLTXQ0ESR_ABS_Pos)               /*!< 0x00200000 */
#define ETH_MTLTXQ0ESR_ABS_22               (0x400000UL << ETH_MTLTXQ0ESR_ABS_Pos)               /*!< 0x00400000 */
#define ETH_MTLTXQ0ESR_ABS_23               (0x800000UL << ETH_MTLTXQ0ESR_ABS_Pos)               /*!< 0x00800000 */

/*************  Bit definition for ETH_MTLQ0ICSR register  *************/
#define ETH_MTLQ0ICSR_TXUNFIS_Pos           (0U)
#define ETH_MTLQ0ICSR_TXUNFIS_Msk           (0x1UL << ETH_MTLQ0ICSR_TXUNFIS_Pos)                 /*!< 0x00000001 */
#define ETH_MTLQ0ICSR_TXUNFIS               ETH_MTLQ0ICSR_TXUNFIS_Msk                           /*!< Transmit Queue Underflow Interrupt Status */
#define ETH_MTLQ0ICSR_ABPSIS_Pos            (1U)
#define ETH_MTLQ0ICSR_ABPSIS_Msk            (0x1UL << ETH_MTLQ0ICSR_ABPSIS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLQ0ICSR_ABPSIS                ETH_MTLQ0ICSR_ABPSIS_Msk                            /*!< Average Bits Per Slot Interrupt Status */
#define ETH_MTLQ0ICSR_TXUIE_Pos             (8U)
#define ETH_MTLQ0ICSR_TXUIE_Msk             (0x1UL << ETH_MTLQ0ICSR_TXUIE_Pos)                   /*!< 0x00000100 */
#define ETH_MTLQ0ICSR_TXUIE                 ETH_MTLQ0ICSR_TXUIE_Msk                             /*!< Transmit Queue Underflow Interrupt Enable */
#define ETH_MTLQ0ICSR_ABPSIE_Pos            (9U)
#define ETH_MTLQ0ICSR_ABPSIE_Msk            (0x1UL << ETH_MTLQ0ICSR_ABPSIE_Pos)                  /*!< 0x00000200 */
#define ETH_MTLQ0ICSR_ABPSIE                ETH_MTLQ0ICSR_ABPSIE_Msk                            /*!< Average Bits Per Slot Interrupt Enable */
#define ETH_MTLQ0ICSR_RXOVFIS_Pos           (16U)
#define ETH_MTLQ0ICSR_RXOVFIS_Msk           (0x1UL << ETH_MTLQ0ICSR_RXOVFIS_Pos)                 /*!< 0x00010000 */
#define ETH_MTLQ0ICSR_RXOVFIS               ETH_MTLQ0ICSR_RXOVFIS_Msk                           /*!< Receive Queue Overflow Interrupt Status */
#define ETH_MTLQ0ICSR_RXOIE_Pos             (24U)
#define ETH_MTLQ0ICSR_RXOIE_Msk             (0x1UL << ETH_MTLQ0ICSR_RXOIE_Pos)                   /*!< 0x01000000 */
#define ETH_MTLQ0ICSR_RXOIE                 ETH_MTLQ0ICSR_RXOIE_Msk                             /*!< Receive Queue Overflow Interrupt Enable */

/************  Bit definition for ETH_MTLRXQ0OMR register  *************/
#define ETH_MTLRXQ0OMR_RTC_Pos              (0U)
#define ETH_MTLRXQ0OMR_RTC_Msk              (0x3UL << ETH_MTLRXQ0OMR_RTC_Pos)                    /*!< 0x00000003 */
#define ETH_MTLRXQ0OMR_RTC                  ETH_MTLRXQ0OMR_RTC_Msk                              /*!< Receive Queue Threshold Control */
#define ETH_MTLRXQ0OMR_RTC_64BITS           (0x0UL << ETH_MTLRXQ0OMR_RTC_Pos)                    /*!< 0x00000000 */
#define ETH_MTLRXQ0OMR_RTC_32BITS           (0x1UL << ETH_MTLRXQ0OMR_RTC_Pos)                    /*!< 0x00000001 */
#define ETH_MTLRXQ0OMR_RTC_96BITS           (0x2UL << ETH_MTLRXQ0OMR_RTC_Pos)                    /*!< 0x00000002 */
#define ETH_MTLRXQ0OMR_RTC_128BITS          (0x3UL << ETH_MTLRXQ0OMR_RTC_Pos)                    /*!< 0x00000003 */
#define ETH_MTLRXQ0OMR_FUP_Pos              (3U)
#define ETH_MTLRXQ0OMR_FUP_Msk              (0x1UL << ETH_MTLRXQ0OMR_FUP_Pos)                    /*!< 0x00000008 */
#define ETH_MTLRXQ0OMR_FUP                  ETH_MTLRXQ0OMR_FUP_Msk                              /*!< Forward Undersized Good Packets */
#define ETH_MTLRXQ0OMR_FEP_Pos              (4U)
#define ETH_MTLRXQ0OMR_FEP_Msk              (0x1UL << ETH_MTLRXQ0OMR_FEP_Pos)                    /*!< 0x00000010 */
#define ETH_MTLRXQ0OMR_FEP                  ETH_MTLRXQ0OMR_FEP_Msk                              /*!< Forward Error Packets */
#define ETH_MTLRXQ0OMR_RSF_Pos              (5U)
#define ETH_MTLRXQ0OMR_RSF_Msk              (0x1UL << ETH_MTLRXQ0OMR_RSF_Pos)                    /*!< 0x00000020 */
#define ETH_MTLRXQ0OMR_RSF                  ETH_MTLRXQ0OMR_RSF_Msk                              /*!< Receive Queue Store and Forward */
#define ETH_MTLRXQ0OMR_DIS_TCP_EF_Pos       (6U)
#define ETH_MTLRXQ0OMR_DIS_TCP_EF_Msk       (0x1UL << ETH_MTLRXQ0OMR_DIS_TCP_EF_Pos)             /*!< 0x00000040 */
#define ETH_MTLRXQ0OMR_DIS_TCP_EF           ETH_MTLRXQ0OMR_DIS_TCP_EF_Msk                       /*!< Disable Dropping of TCP/IP Checksum Error Packets */
#define ETH_MTLRXQ0OMR_EHFC_Pos             (7U)
#define ETH_MTLRXQ0OMR_EHFC_Msk             (0x1UL << ETH_MTLRXQ0OMR_EHFC_Pos)                   /*!< 0x00000080 */
#define ETH_MTLRXQ0OMR_EHFC                 ETH_MTLRXQ0OMR_EHFC_Msk                             /*!< Enable Hardware Flow Control */
#define ETH_MTLRXQ0OMR_RFA_Pos              (8U)
#define ETH_MTLRXQ0OMR_RFA_Msk              (0x7UL << ETH_MTLRXQ0OMR_RFA_Pos)                    /*!< 0x00000700 */
#define ETH_MTLRXQ0OMR_RFA                  ETH_MTLRXQ0OMR_RFA_Msk                              /*!< Threshold for Activating Flow Control (in half-duplex and full-duplex */
#define ETH_MTLRXQ0OMR_RFA_0                (0x1UL << ETH_MTLRXQ0OMR_RFA_Pos)                    /*!< 0x00000100 */
#define ETH_MTLRXQ0OMR_RFA_1                (0x2UL << ETH_MTLRXQ0OMR_RFA_Pos)                    /*!< 0x00000200 */
#define ETH_MTLRXQ0OMR_RFA_2                (0x4UL << ETH_MTLRXQ0OMR_RFA_Pos)                    /*!< 0x00000400 */
#define ETH_MTLRXQ0OMR_RFD_Pos              (14U)
#define ETH_MTLRXQ0OMR_RFD_Msk              (0x7UL << ETH_MTLRXQ0OMR_RFD_Pos)                    /*!< 0x0001C000 */
#define ETH_MTLRXQ0OMR_RFD                  ETH_MTLRXQ0OMR_RFD_Msk                              /*!< Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) */
#define ETH_MTLRXQ0OMR_RFD_0                (0x1UL << ETH_MTLRXQ0OMR_RFD_Pos)                    /*!< 0x00004000 */
#define ETH_MTLRXQ0OMR_RFD_1                (0x2UL << ETH_MTLRXQ0OMR_RFD_Pos)                    /*!< 0x00008000 */
#define ETH_MTLRXQ0OMR_RFD_2                (0x4UL << ETH_MTLRXQ0OMR_RFD_Pos)                    /*!< 0x00010000 */
#define ETH_MTLRXQ0OMR_RQS_Pos              (20U)
#define ETH_MTLRXQ0OMR_RQS_Msk              (0xFUL << ETH_MTLRXQ0OMR_RQS_Pos)                    /*!< 0x00F00000 */
#define ETH_MTLRXQ0OMR_RQS                  ETH_MTLRXQ0OMR_RQS_Msk                              /*!< Receive Queue Size */
#define ETH_MTLRXQ0OMR_RQS_0                (0x1UL << ETH_MTLRXQ0OMR_RQS_Pos)                    /*!< 0x00100000 */
#define ETH_MTLRXQ0OMR_RQS_1                (0x2UL << ETH_MTLRXQ0OMR_RQS_Pos)                    /*!< 0x00200000 */
#define ETH_MTLRXQ0OMR_RQS_2                (0x4UL << ETH_MTLRXQ0OMR_RQS_Pos)                    /*!< 0x00400000 */
#define ETH_MTLRXQ0OMR_RQS_3                (0x8UL << ETH_MTLRXQ0OMR_RQS_Pos)                    /*!< 0x00800000 */

/***********  Bit definition for ETH_MTLRXQ0MPOCR register  ************/
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos      (0U)
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_Msk      (0x7FFUL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)          /*!< 0x000007FF */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT          ETH_MTLRXQ0MPOCR_OVFPKTCNT_Msk                      /*!< Overflow Packet Counter */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_0        (0x1UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000001 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_1        (0x2UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000002 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_2        (0x4UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000004 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_3        (0x8UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000008 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_4        (0x10UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000010 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_5        (0x20UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000020 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_6        (0x40UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000040 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_7        (0x80UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000080 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_8        (0x100UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000100 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_9        (0x200UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000200 */
#define ETH_MTLRXQ0MPOCR_OVFPKTCNT_10       (0x400UL << ETH_MTLRXQ0MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000400 */
#define ETH_MTLRXQ0MPOCR_OVFCNTOVF_Pos      (11U)
#define ETH_MTLRXQ0MPOCR_OVFCNTOVF_Msk      (0x1UL << ETH_MTLRXQ0MPOCR_OVFCNTOVF_Pos)            /*!< 0x00000800 */
#define ETH_MTLRXQ0MPOCR_OVFCNTOVF          ETH_MTLRXQ0MPOCR_OVFCNTOVF_Msk                      /*!< Overflow Counter Overflow Bit */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos      (16U)
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_Msk      (0x7FFUL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)          /*!< 0x07FF0000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT          ETH_MTLRXQ0MPOCR_MISPKTCNT_Msk                      /*!< Missed Packet Counter */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_0        (0x1UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)            /*!< 0x00010000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_1        (0x2UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)            /*!< 0x00020000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_2        (0x4UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)            /*!< 0x00040000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_3        (0x8UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)            /*!< 0x00080000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_4        (0x10UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)           /*!< 0x00100000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_5        (0x20UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)           /*!< 0x00200000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_6        (0x40UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)           /*!< 0x00400000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_7        (0x80UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)           /*!< 0x00800000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_8        (0x100UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)          /*!< 0x01000000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_9        (0x200UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)          /*!< 0x02000000 */
#define ETH_MTLRXQ0MPOCR_MISPKTCNT_10       (0x400UL << ETH_MTLRXQ0MPOCR_MISPKTCNT_Pos)          /*!< 0x04000000 */
#define ETH_MTLRXQ0MPOCR_MISCNTOVF_Pos      (27U)
#define ETH_MTLRXQ0MPOCR_MISCNTOVF_Msk      (0x1UL << ETH_MTLRXQ0MPOCR_MISCNTOVF_Pos)            /*!< 0x08000000 */
#define ETH_MTLRXQ0MPOCR_MISCNTOVF          ETH_MTLRXQ0MPOCR_MISCNTOVF_Msk                      /*!< Missed Packet Counter Overflow Bit */

/*************  Bit definition for ETH_MTLRXQ0DR register  *************/
#define ETH_MTLRXQ0DR_RWCSTS_Pos            (0U)
#define ETH_MTLRXQ0DR_RWCSTS_Msk            (0x1UL << ETH_MTLRXQ0DR_RWCSTS_Pos)                  /*!< 0x00000001 */
#define ETH_MTLRXQ0DR_RWCSTS                ETH_MTLRXQ0DR_RWCSTS_Msk                            /*!< MTL Rx Queue Write Controller Active Status */
#define ETH_MTLRXQ0DR_RRCSTS_Pos            (1U)
#define ETH_MTLRXQ0DR_RRCSTS_Msk            (0x3UL << ETH_MTLRXQ0DR_RRCSTS_Pos)                  /*!< 0x00000006 */
#define ETH_MTLRXQ0DR_RRCSTS                ETH_MTLRXQ0DR_RRCSTS_Msk                            /*!< MTL Rx Queue Read Controller State */
#define ETH_MTLRXQ0DR_RRCSTS_0              (0x1UL << ETH_MTLRXQ0DR_RRCSTS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLRXQ0DR_RRCSTS_1              (0x2UL << ETH_MTLRXQ0DR_RRCSTS_Pos)                  /*!< 0x00000004 */
#define ETH_MTLRXQ0DR_RXQSTS_Pos            (4U)
#define ETH_MTLRXQ0DR_RXQSTS_Msk            (0x3UL << ETH_MTLRXQ0DR_RXQSTS_Pos)                  /*!< 0x00000030 */
#define ETH_MTLRXQ0DR_RXQSTS                ETH_MTLRXQ0DR_RXQSTS_Msk                            /*!< MTL Rx Queue Fill-Level Status */
#define ETH_MTLRXQ0DR_RXQSTS_0              (0x1UL << ETH_MTLRXQ0DR_RXQSTS_Pos)                  /*!< 0x00000010 */
#define ETH_MTLRXQ0DR_RXQSTS_1              (0x2UL << ETH_MTLRXQ0DR_RXQSTS_Pos)                  /*!< 0x00000020 */
#define ETH_MTLRXQ0DR_PRXQ_Pos              (16U)
#define ETH_MTLRXQ0DR_PRXQ_Msk              (0x3FFFUL << ETH_MTLRXQ0DR_PRXQ_Pos)                 /*!< 0x3FFF0000 */
#define ETH_MTLRXQ0DR_PRXQ                  ETH_MTLRXQ0DR_PRXQ_Msk                              /*!< Number of Packets in Receive Queue */
#define ETH_MTLRXQ0DR_PRXQ_0                (0x1UL << ETH_MTLRXQ0DR_PRXQ_Pos)                    /*!< 0x00010000 */
#define ETH_MTLRXQ0DR_PRXQ_1                (0x2UL << ETH_MTLRXQ0DR_PRXQ_Pos)                    /*!< 0x00020000 */
#define ETH_MTLRXQ0DR_PRXQ_2                (0x4UL << ETH_MTLRXQ0DR_PRXQ_Pos)                    /*!< 0x00040000 */
#define ETH_MTLRXQ0DR_PRXQ_3                (0x8UL << ETH_MTLRXQ0DR_PRXQ_Pos)                    /*!< 0x00080000 */
#define ETH_MTLRXQ0DR_PRXQ_4                (0x10UL << ETH_MTLRXQ0DR_PRXQ_Pos)                   /*!< 0x00100000 */
#define ETH_MTLRXQ0DR_PRXQ_5                (0x20UL << ETH_MTLRXQ0DR_PRXQ_Pos)                   /*!< 0x00200000 */
#define ETH_MTLRXQ0DR_PRXQ_6                (0x40UL << ETH_MTLRXQ0DR_PRXQ_Pos)                   /*!< 0x00400000 */
#define ETH_MTLRXQ0DR_PRXQ_7                (0x80UL << ETH_MTLRXQ0DR_PRXQ_Pos)                   /*!< 0x00800000 */
#define ETH_MTLRXQ0DR_PRXQ_8                (0x100UL << ETH_MTLRXQ0DR_PRXQ_Pos)                  /*!< 0x01000000 */
#define ETH_MTLRXQ0DR_PRXQ_9                (0x200UL << ETH_MTLRXQ0DR_PRXQ_Pos)                  /*!< 0x02000000 */
#define ETH_MTLRXQ0DR_PRXQ_10               (0x400UL << ETH_MTLRXQ0DR_PRXQ_Pos)                  /*!< 0x04000000 */
#define ETH_MTLRXQ0DR_PRXQ_11               (0x800UL << ETH_MTLRXQ0DR_PRXQ_Pos)                  /*!< 0x08000000 */
#define ETH_MTLRXQ0DR_PRXQ_12               (0x1000UL << ETH_MTLRXQ0DR_PRXQ_Pos)                 /*!< 0x10000000 */
#define ETH_MTLRXQ0DR_PRXQ_13               (0x2000UL << ETH_MTLRXQ0DR_PRXQ_Pos)                 /*!< 0x20000000 */

/*************  Bit definition for ETH_MTLRXQ0CR register  *************/
#define ETH_MTLRXQ0CR_RXQ_WEGT_Pos          (0U)
#define ETH_MTLRXQ0CR_RXQ_WEGT_Msk          (0x7UL << ETH_MTLRXQ0CR_RXQ_WEGT_Pos)                /*!< 0x00000007 */
#define ETH_MTLRXQ0CR_RXQ_WEGT              ETH_MTLRXQ0CR_RXQ_WEGT_Msk                          /*!< Receive Queue Weight */
#define ETH_MTLRXQ0CR_RXQ_WEGT_0            (0x1UL << ETH_MTLRXQ0CR_RXQ_WEGT_Pos)                /*!< 0x00000001 */
#define ETH_MTLRXQ0CR_RXQ_WEGT_1            (0x2UL << ETH_MTLRXQ0CR_RXQ_WEGT_Pos)                /*!< 0x00000002 */
#define ETH_MTLRXQ0CR_RXQ_WEGT_2            (0x4UL << ETH_MTLRXQ0CR_RXQ_WEGT_Pos)                /*!< 0x00000004 */
#define ETH_MTLRXQ0CR_RXQ_FRM_ARBIT_Pos     (3U)
#define ETH_MTLRXQ0CR_RXQ_FRM_ARBIT_Msk     (0x1UL << ETH_MTLRXQ0CR_RXQ_FRM_ARBIT_Pos)           /*!< 0x00000008 */
#define ETH_MTLRXQ0CR_RXQ_FRM_ARBIT         ETH_MTLRXQ0CR_RXQ_FRM_ARBIT_Msk                     /*!< Receive Queue Packet Arbitration */

/************  Bit definition for ETH_MTLTXQ1OMR register  *************/
#define ETH_MTLTXQ1OMR_FTQ_Pos              (0U)
#define ETH_MTLTXQ1OMR_FTQ_Msk              (0x1UL << ETH_MTLTXQ1OMR_FTQ_Pos)                    /*!< 0x00000001 */
#define ETH_MTLTXQ1OMR_FTQ                  ETH_MTLTXQ1OMR_FTQ_Msk                              /*!< Flush Transmit Queue */
#define ETH_MTLTXQ1OMR_TSF_Pos              (1U)
#define ETH_MTLTXQ1OMR_TSF_Msk              (0x1UL << ETH_MTLTXQ1OMR_TSF_Pos)                    /*!< 0x00000002 */
#define ETH_MTLTXQ1OMR_TSF                  ETH_MTLTXQ1OMR_TSF_Msk                              /*!< Transmit Store and Forward */
#define ETH_MTLTXQ1OMR_TXQEN_Pos            (2U)
#define ETH_MTLTXQ1OMR_TXQEN_Msk            (0x3UL << ETH_MTLTXQ1OMR_TXQEN_Pos)                  /*!< 0x0000000C */
#define ETH_MTLTXQ1OMR_TXQEN                ETH_MTLTXQ1OMR_TXQEN_Msk                            /*!< Transmit Queue Enable */
#define ETH_MTLTXQ1OMR_TXQEN_0              (0x1UL << ETH_MTLTXQ1OMR_TXQEN_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ1OMR_TXQEN_1              (0x2UL << ETH_MTLTXQ1OMR_TXQEN_Pos)                  /*!< 0x00000008 */
#define ETH_MTLTXQ1OMR_TTC_Pos              (4U)
#define ETH_MTLTXQ1OMR_TTC_Msk              (0x7UL << ETH_MTLTXQ1OMR_TTC_Pos)                    /*!< 0x00000070 */
#define ETH_MTLTXQ1OMR_TTC                  ETH_MTLTXQ1OMR_TTC_Msk                              /*!< Transmit Threshold Control */
#define ETH_MTLTXQ1OMR_TTC_0                (0x1UL << ETH_MTLTXQ1OMR_TTC_Pos)                    /*!< 0x00000010 */
#define ETH_MTLTXQ1OMR_TTC_1                (0x2UL << ETH_MTLTXQ1OMR_TTC_Pos)                    /*!< 0x00000020 */
#define ETH_MTLTXQ1OMR_TTC_2                (0x4UL << ETH_MTLTXQ1OMR_TTC_Pos)                    /*!< 0x00000040 */
#define ETH_MTLTXQ1OMR_TQS_Pos              (16U)
#define ETH_MTLTXQ1OMR_TQS_Msk              (0x1FFUL << ETH_MTLTXQ1OMR_TQS_Pos)                  /*!< 0x01FF0000 */
#define ETH_MTLTXQ1OMR_TQS                  ETH_MTLTXQ1OMR_TQS_Msk                              /*!< Transmit Queue Size */
#define ETH_MTLTXQ1OMR_TQS_0                (0x1UL << ETH_MTLTXQ1OMR_TQS_Pos)                    /*!< 0x00010000 */
#define ETH_MTLTXQ1OMR_TQS_1                (0x2UL << ETH_MTLTXQ1OMR_TQS_Pos)                    /*!< 0x00020000 */
#define ETH_MTLTXQ1OMR_TQS_2                (0x4UL << ETH_MTLTXQ1OMR_TQS_Pos)                    /*!< 0x00040000 */
#define ETH_MTLTXQ1OMR_TQS_3                (0x8UL << ETH_MTLTXQ1OMR_TQS_Pos)                    /*!< 0x00080000 */
#define ETH_MTLTXQ1OMR_TQS_4                (0x10UL << ETH_MTLTXQ1OMR_TQS_Pos)                   /*!< 0x00100000 */
#define ETH_MTLTXQ1OMR_TQS_5                (0x20UL << ETH_MTLTXQ1OMR_TQS_Pos)                   /*!< 0x00200000 */
#define ETH_MTLTXQ1OMR_TQS_6                (0x40UL << ETH_MTLTXQ1OMR_TQS_Pos)                   /*!< 0x00400000 */
#define ETH_MTLTXQ1OMR_TQS_7                (0x80UL << ETH_MTLTXQ1OMR_TQS_Pos)                   /*!< 0x00800000 */
#define ETH_MTLTXQ1OMR_TQS_8                (0x100UL << ETH_MTLTXQ1OMR_TQS_Pos)                  /*!< 0x01000000 */

/*************  Bit definition for ETH_MTLTXQ1UR register  *************/
#define ETH_MTLTXQ1UR_UFFRMCNT_Pos          (0U)
#define ETH_MTLTXQ1UR_UFFRMCNT_Msk          (0x7FFUL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)              /*!< 0x000007FF */
#define ETH_MTLTXQ1UR_UFFRMCNT              ETH_MTLTXQ1UR_UFFRMCNT_Msk                          /*!< Underflow Packet Counter */
#define ETH_MTLTXQ1UR_UFFRMCNT_0            (0x1UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)                /*!< 0x00000001 */
#define ETH_MTLTXQ1UR_UFFRMCNT_1            (0x2UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)                /*!< 0x00000002 */
#define ETH_MTLTXQ1UR_UFFRMCNT_2            (0x4UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)                /*!< 0x00000004 */
#define ETH_MTLTXQ1UR_UFFRMCNT_3            (0x8UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)                /*!< 0x00000008 */
#define ETH_MTLTXQ1UR_UFFRMCNT_4            (0x10UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)               /*!< 0x00000010 */
#define ETH_MTLTXQ1UR_UFFRMCNT_5            (0x20UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)               /*!< 0x00000020 */
#define ETH_MTLTXQ1UR_UFFRMCNT_6            (0x40UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)               /*!< 0x00000040 */
#define ETH_MTLTXQ1UR_UFFRMCNT_7            (0x80UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)               /*!< 0x00000080 */
#define ETH_MTLTXQ1UR_UFFRMCNT_8            (0x100UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)              /*!< 0x00000100 */
#define ETH_MTLTXQ1UR_UFFRMCNT_9            (0x200UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)              /*!< 0x00000200 */
#define ETH_MTLTXQ1UR_UFFRMCNT_10           (0x400UL << ETH_MTLTXQ1UR_UFFRMCNT_Pos)              /*!< 0x00000400 */
#define ETH_MTLTXQ1UR_UFCNTOVF_Pos          (11U)
#define ETH_MTLTXQ1UR_UFCNTOVF_Msk          (0x1UL << ETH_MTLTXQ1UR_UFCNTOVF_Pos)                /*!< 0x00000800 */
#define ETH_MTLTXQ1UR_UFCNTOVF              ETH_MTLTXQ1UR_UFCNTOVF_Msk                          /*!< Overflow Bit for Underflow Packet Counter */

/*************  Bit definition for ETH_MTLTXQ1DR register  *************/
#define ETH_MTLTXQ1DR_TXQPAUSED_Pos         (0U)
#define ETH_MTLTXQ1DR_TXQPAUSED_Msk         (0x1UL << ETH_MTLTXQ1DR_TXQPAUSED_Pos)               /*!< 0x00000001 */
#define ETH_MTLTXQ1DR_TXQPAUSED             ETH_MTLTXQ1DR_TXQPAUSED_Msk                         /*!< Transmit Queue in Pause */
#define ETH_MTLTXQ1DR_TRCSTS_Pos            (1U)
#define ETH_MTLTXQ1DR_TRCSTS_Msk            (0x3UL << ETH_MTLTXQ1DR_TRCSTS_Pos)                  /*!< 0x00000006 */
#define ETH_MTLTXQ1DR_TRCSTS                ETH_MTLTXQ1DR_TRCSTS_Msk                            /*!< MTL Tx Queue Read Controller Status */
#define ETH_MTLTXQ1DR_TRCSTS_0              (0x1UL << ETH_MTLTXQ1DR_TRCSTS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLTXQ1DR_TRCSTS_1              (0x2UL << ETH_MTLTXQ1DR_TRCSTS_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ1DR_TWCSTS_Pos            (3U)
#define ETH_MTLTXQ1DR_TWCSTS_Msk            (0x1UL << ETH_MTLTXQ1DR_TWCSTS_Pos)                  /*!< 0x00000008 */
#define ETH_MTLTXQ1DR_TWCSTS                ETH_MTLTXQ1DR_TWCSTS_Msk                            /*!< MTL Tx Queue Write Controller Status */
#define ETH_MTLTXQ1DR_TXQSTS_Pos            (4U)
#define ETH_MTLTXQ1DR_TXQSTS_Msk            (0x1UL << ETH_MTLTXQ1DR_TXQSTS_Pos)                  /*!< 0x00000010 */
#define ETH_MTLTXQ1DR_TXQSTS                ETH_MTLTXQ1DR_TXQSTS_Msk                            /*!< MTL Tx Queue Not Empty Status */
#define ETH_MTLTXQ1DR_TXSTSFSTS_Pos         (5U)
#define ETH_MTLTXQ1DR_TXSTSFSTS_Msk         (0x1UL << ETH_MTLTXQ1DR_TXSTSFSTS_Pos)               /*!< 0x00000020 */
#define ETH_MTLTXQ1DR_TXSTSFSTS             ETH_MTLTXQ1DR_TXSTSFSTS_Msk                         /*!< MTL Tx Status FIFO Full Status */
#define ETH_MTLTXQ1DR_PTXQ_Pos              (16U)
#define ETH_MTLTXQ1DR_PTXQ_Msk              (0x7UL << ETH_MTLTXQ1DR_PTXQ_Pos)                    /*!< 0x00070000 */
#define ETH_MTLTXQ1DR_PTXQ                  ETH_MTLTXQ1DR_PTXQ_Msk                              /*!< Number of Packets in the Transmit Queue */
#define ETH_MTLTXQ1DR_PTXQ_0                (0x1UL << ETH_MTLTXQ1DR_PTXQ_Pos)                    /*!< 0x00010000 */
#define ETH_MTLTXQ1DR_PTXQ_1                (0x2UL << ETH_MTLTXQ1DR_PTXQ_Pos)                    /*!< 0x00020000 */
#define ETH_MTLTXQ1DR_PTXQ_2                (0x4UL << ETH_MTLTXQ1DR_PTXQ_Pos)                    /*!< 0x00040000 */
#define ETH_MTLTXQ1DR_STXSTSF_Pos           (20U)
#define ETH_MTLTXQ1DR_STXSTSF_Msk           (0x7UL << ETH_MTLTXQ1DR_STXSTSF_Pos)                 /*!< 0x00700000 */
#define ETH_MTLTXQ1DR_STXSTSF               ETH_MTLTXQ1DR_STXSTSF_Msk                           /*!< Number of Status Words in Tx Status FIFO of Queue */
#define ETH_MTLTXQ1DR_STXSTSF_0             (0x1UL << ETH_MTLTXQ1DR_STXSTSF_Pos)                 /*!< 0x00100000 */
#define ETH_MTLTXQ1DR_STXSTSF_1             (0x2UL << ETH_MTLTXQ1DR_STXSTSF_Pos)                 /*!< 0x00200000 */
#define ETH_MTLTXQ1DR_STXSTSF_2             (0x4UL << ETH_MTLTXQ1DR_STXSTSF_Pos)                 /*!< 0x00400000 */

/************  Bit definition for ETH_MTLTXQ1ECR register  *************/
#define ETH_MTLTXQ1ECR_AVALG_Pos            (2U)
#define ETH_MTLTXQ1ECR_AVALG_Msk            (0x1UL << ETH_MTLTXQ1ECR_AVALG_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ1ECR_AVALG                ETH_MTLTXQ1ECR_AVALG_Msk                            /*!< AV Algorithm */
#define ETH_MTLTXQ1ECR_CC_Pos               (3U)
#define ETH_MTLTXQ1ECR_CC_Msk               (0x1UL << ETH_MTLTXQ1ECR_CC_Pos)                     /*!< 0x00000008 */
#define ETH_MTLTXQ1ECR_CC                   ETH_MTLTXQ1ECR_CC_Msk                               /*!< Credit Control */
#define ETH_MTLTXQ1ECR_SLC_Pos              (4U)
#define ETH_MTLTXQ1ECR_SLC_Msk              (0x7UL << ETH_MTLTXQ1ECR_SLC_Pos)                    /*!< 0x00000070 */
#define ETH_MTLTXQ1ECR_SLC                  ETH_MTLTXQ1ECR_SLC_Msk                              /*!< Slot Count */
#define ETH_MTLTXQ1ECR_SLC_0                (0x1UL << ETH_MTLTXQ1ECR_SLC_Pos)                    /*!< 0x00000010 */
#define ETH_MTLTXQ1ECR_SLC_1                (0x2UL << ETH_MTLTXQ1ECR_SLC_Pos)                    /*!< 0x00000020 */
#define ETH_MTLTXQ1ECR_SLC_2                (0x4UL << ETH_MTLTXQ1ECR_SLC_Pos)                    /*!< 0x00000040 */

/************  Bit definition for ETH_MTLTXQ1ESR register  *************/
#define ETH_MTLTXQ1ESR_ABS_Pos              (0U)
#define ETH_MTLTXQ1ESR_ABS_Msk              (0xFFFFFFUL << ETH_MTLTXQ1ESR_ABS_Pos)               /*!< 0x00FFFFFF */
#define ETH_MTLTXQ1ESR_ABS                  ETH_MTLTXQ1ESR_ABS_Msk                              /*!< Average Bits per Slot */
#define ETH_MTLTXQ1ESR_ABS_0                (0x1UL << ETH_MTLTXQ1ESR_ABS_Pos)                    /*!< 0x00000001 */
#define ETH_MTLTXQ1ESR_ABS_1                (0x2UL << ETH_MTLTXQ1ESR_ABS_Pos)                    /*!< 0x00000002 */
#define ETH_MTLTXQ1ESR_ABS_2                (0x4UL << ETH_MTLTXQ1ESR_ABS_Pos)                    /*!< 0x00000004 */
#define ETH_MTLTXQ1ESR_ABS_3                (0x8UL << ETH_MTLTXQ1ESR_ABS_Pos)                    /*!< 0x00000008 */
#define ETH_MTLTXQ1ESR_ABS_4                (0x10UL << ETH_MTLTXQ1ESR_ABS_Pos)                   /*!< 0x00000010 */
#define ETH_MTLTXQ1ESR_ABS_5                (0x20UL << ETH_MTLTXQ1ESR_ABS_Pos)                   /*!< 0x00000020 */
#define ETH_MTLTXQ1ESR_ABS_6                (0x40UL << ETH_MTLTXQ1ESR_ABS_Pos)                   /*!< 0x00000040 */
#define ETH_MTLTXQ1ESR_ABS_7                (0x80UL << ETH_MTLTXQ1ESR_ABS_Pos)                   /*!< 0x00000080 */
#define ETH_MTLTXQ1ESR_ABS_8                (0x100UL << ETH_MTLTXQ1ESR_ABS_Pos)                  /*!< 0x00000100 */
#define ETH_MTLTXQ1ESR_ABS_9                (0x200UL << ETH_MTLTXQ1ESR_ABS_Pos)                  /*!< 0x00000200 */
#define ETH_MTLTXQ1ESR_ABS_10               (0x400UL << ETH_MTLTXQ1ESR_ABS_Pos)                  /*!< 0x00000400 */
#define ETH_MTLTXQ1ESR_ABS_11               (0x800UL << ETH_MTLTXQ1ESR_ABS_Pos)                  /*!< 0x00000800 */
#define ETH_MTLTXQ1ESR_ABS_12               (0x1000UL << ETH_MTLTXQ1ESR_ABS_Pos)                 /*!< 0x00001000 */
#define ETH_MTLTXQ1ESR_ABS_13               (0x2000UL << ETH_MTLTXQ1ESR_ABS_Pos)                 /*!< 0x00002000 */
#define ETH_MTLTXQ1ESR_ABS_14               (0x4000UL << ETH_MTLTXQ1ESR_ABS_Pos)                 /*!< 0x00004000 */
#define ETH_MTLTXQ1ESR_ABS_15               (0x8000UL << ETH_MTLTXQ1ESR_ABS_Pos)                 /*!< 0x00008000 */
#define ETH_MTLTXQ1ESR_ABS_16               (0x10000UL << ETH_MTLTXQ1ESR_ABS_Pos)                /*!< 0x00010000 */
#define ETH_MTLTXQ1ESR_ABS_17               (0x20000UL << ETH_MTLTXQ1ESR_ABS_Pos)                /*!< 0x00020000 */
#define ETH_MTLTXQ1ESR_ABS_18               (0x40000UL << ETH_MTLTXQ1ESR_ABS_Pos)                /*!< 0x00040000 */
#define ETH_MTLTXQ1ESR_ABS_19               (0x80000UL << ETH_MTLTXQ1ESR_ABS_Pos)                /*!< 0x00080000 */
#define ETH_MTLTXQ1ESR_ABS_20               (0x100000UL << ETH_MTLTXQ1ESR_ABS_Pos)               /*!< 0x00100000 */
#define ETH_MTLTXQ1ESR_ABS_21               (0x200000UL << ETH_MTLTXQ1ESR_ABS_Pos)               /*!< 0x00200000 */
#define ETH_MTLTXQ1ESR_ABS_22               (0x400000UL << ETH_MTLTXQ1ESR_ABS_Pos)               /*!< 0x00400000 */
#define ETH_MTLTXQ1ESR_ABS_23               (0x800000UL << ETH_MTLTXQ1ESR_ABS_Pos)               /*!< 0x00800000 */

/************  Bit definition for ETH_MTLTXQ1QWR register  *************/
#define ETH_MTLTXQ1QWR_ISCQW_Pos            (0U)
#define ETH_MTLTXQ1QWR_ISCQW_Msk            (0x1FFFFFUL << ETH_MTLTXQ1QWR_ISCQW_Pos)             /*!< 0x001FFFFF */
#define ETH_MTLTXQ1QWR_ISCQW                ETH_MTLTXQ1QWR_ISCQW_Msk                            /*!< idleSlopeCredit value for queue 1 */
#define ETH_MTLTXQ1QWR_ISCQW_0              (0x1UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                  /*!< 0x00000001 */
#define ETH_MTLTXQ1QWR_ISCQW_1              (0x2UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                  /*!< 0x00000002 */
#define ETH_MTLTXQ1QWR_ISCQW_2              (0x4UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                  /*!< 0x00000004 */
#define ETH_MTLTXQ1QWR_ISCQW_3              (0x8UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                  /*!< 0x00000008 */
#define ETH_MTLTXQ1QWR_ISCQW_4              (0x10UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                 /*!< 0x00000010 */
#define ETH_MTLTXQ1QWR_ISCQW_5              (0x20UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                 /*!< 0x00000020 */
#define ETH_MTLTXQ1QWR_ISCQW_6              (0x40UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                 /*!< 0x00000040 */
#define ETH_MTLTXQ1QWR_ISCQW_7              (0x80UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                 /*!< 0x00000080 */
#define ETH_MTLTXQ1QWR_ISCQW_8              (0x100UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                /*!< 0x00000100 */
#define ETH_MTLTXQ1QWR_ISCQW_9              (0x200UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                /*!< 0x00000200 */
#define ETH_MTLTXQ1QWR_ISCQW_10             (0x400UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                /*!< 0x00000400 */
#define ETH_MTLTXQ1QWR_ISCQW_11             (0x800UL << ETH_MTLTXQ1QWR_ISCQW_Pos)                /*!< 0x00000800 */
#define ETH_MTLTXQ1QWR_ISCQW_12             (0x1000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)               /*!< 0x00001000 */
#define ETH_MTLTXQ1QWR_ISCQW_13             (0x2000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)               /*!< 0x00002000 */
#define ETH_MTLTXQ1QWR_ISCQW_14             (0x4000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)               /*!< 0x00004000 */
#define ETH_MTLTXQ1QWR_ISCQW_15             (0x8000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)               /*!< 0x00008000 */
#define ETH_MTLTXQ1QWR_ISCQW_16             (0x10000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)              /*!< 0x00010000 */
#define ETH_MTLTXQ1QWR_ISCQW_17             (0x20000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)              /*!< 0x00020000 */
#define ETH_MTLTXQ1QWR_ISCQW_18             (0x40000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)              /*!< 0x00040000 */
#define ETH_MTLTXQ1QWR_ISCQW_19             (0x80000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)              /*!< 0x00080000 */
#define ETH_MTLTXQ1QWR_ISCQW_20             (0x100000UL << ETH_MTLTXQ1QWR_ISCQW_Pos)             /*!< 0x00100000 */

/************  Bit definition for ETH_MTLTXQ1SSCR register  ************/
#define ETH_MTLTXQ1SSCR_SSC_Pos             (0U)
#define ETH_MTLTXQ1SSCR_SSC_Msk             (0x3FFFUL << ETH_MTLTXQ1SSCR_SSC_Pos)                /*!< 0x00003FFF */
#define ETH_MTLTXQ1SSCR_SSC                 ETH_MTLTXQ1SSCR_SSC_Msk                             /*!< sendSlopeCredit Value */
#define ETH_MTLTXQ1SSCR_SSC_0               (0x1UL << ETH_MTLTXQ1SSCR_SSC_Pos)                   /*!< 0x00000001 */
#define ETH_MTLTXQ1SSCR_SSC_1               (0x2UL << ETH_MTLTXQ1SSCR_SSC_Pos)                   /*!< 0x00000002 */
#define ETH_MTLTXQ1SSCR_SSC_2               (0x4UL << ETH_MTLTXQ1SSCR_SSC_Pos)                   /*!< 0x00000004 */
#define ETH_MTLTXQ1SSCR_SSC_3               (0x8UL << ETH_MTLTXQ1SSCR_SSC_Pos)                   /*!< 0x00000008 */
#define ETH_MTLTXQ1SSCR_SSC_4               (0x10UL << ETH_MTLTXQ1SSCR_SSC_Pos)                  /*!< 0x00000010 */
#define ETH_MTLTXQ1SSCR_SSC_5               (0x20UL << ETH_MTLTXQ1SSCR_SSC_Pos)                  /*!< 0x00000020 */
#define ETH_MTLTXQ1SSCR_SSC_6               (0x40UL << ETH_MTLTXQ1SSCR_SSC_Pos)                  /*!< 0x00000040 */
#define ETH_MTLTXQ1SSCR_SSC_7               (0x80UL << ETH_MTLTXQ1SSCR_SSC_Pos)                  /*!< 0x00000080 */
#define ETH_MTLTXQ1SSCR_SSC_8               (0x100UL << ETH_MTLTXQ1SSCR_SSC_Pos)                 /*!< 0x00000100 */
#define ETH_MTLTXQ1SSCR_SSC_9               (0x200UL << ETH_MTLTXQ1SSCR_SSC_Pos)                 /*!< 0x00000200 */
#define ETH_MTLTXQ1SSCR_SSC_10              (0x400UL << ETH_MTLTXQ1SSCR_SSC_Pos)                 /*!< 0x00000400 */
#define ETH_MTLTXQ1SSCR_SSC_11              (0x800UL << ETH_MTLTXQ1SSCR_SSC_Pos)                 /*!< 0x00000800 */
#define ETH_MTLTXQ1SSCR_SSC_12              (0x1000UL << ETH_MTLTXQ1SSCR_SSC_Pos)                /*!< 0x00001000 */
#define ETH_MTLTXQ1SSCR_SSC_13              (0x2000UL << ETH_MTLTXQ1SSCR_SSC_Pos)                /*!< 0x00002000 */

/************  Bit definition for ETH_MTLTXQ1HCR register  *************/
#define ETH_MTLTXQ1HCR_HC_Pos               (0U)
#define ETH_MTLTXQ1HCR_HC_Msk               (0x1FFFFFFFUL << ETH_MTLTXQ1HCR_HC_Pos)              /*!< 0x1FFFFFFF */
#define ETH_MTLTXQ1HCR_HC                   ETH_MTLTXQ1HCR_HC_Msk                               /*!< hiCredit Value */
#define ETH_MTLTXQ1HCR_HC_0                 (0x1UL << ETH_MTLTXQ1HCR_HC_Pos)                     /*!< 0x00000001 */
#define ETH_MTLTXQ1HCR_HC_1                 (0x2UL << ETH_MTLTXQ1HCR_HC_Pos)                     /*!< 0x00000002 */
#define ETH_MTLTXQ1HCR_HC_2                 (0x4UL << ETH_MTLTXQ1HCR_HC_Pos)                     /*!< 0x00000004 */
#define ETH_MTLTXQ1HCR_HC_3                 (0x8UL << ETH_MTLTXQ1HCR_HC_Pos)                     /*!< 0x00000008 */
#define ETH_MTLTXQ1HCR_HC_4                 (0x10UL << ETH_MTLTXQ1HCR_HC_Pos)                    /*!< 0x00000010 */
#define ETH_MTLTXQ1HCR_HC_5                 (0x20UL << ETH_MTLTXQ1HCR_HC_Pos)                    /*!< 0x00000020 */
#define ETH_MTLTXQ1HCR_HC_6                 (0x40UL << ETH_MTLTXQ1HCR_HC_Pos)                    /*!< 0x00000040 */
#define ETH_MTLTXQ1HCR_HC_7                 (0x80UL << ETH_MTLTXQ1HCR_HC_Pos)                    /*!< 0x00000080 */
#define ETH_MTLTXQ1HCR_HC_8                 (0x100UL << ETH_MTLTXQ1HCR_HC_Pos)                   /*!< 0x00000100 */
#define ETH_MTLTXQ1HCR_HC_9                 (0x200UL << ETH_MTLTXQ1HCR_HC_Pos)                   /*!< 0x00000200 */
#define ETH_MTLTXQ1HCR_HC_10                (0x400UL << ETH_MTLTXQ1HCR_HC_Pos)                   /*!< 0x00000400 */
#define ETH_MTLTXQ1HCR_HC_11                (0x800UL << ETH_MTLTXQ1HCR_HC_Pos)                   /*!< 0x00000800 */
#define ETH_MTLTXQ1HCR_HC_12                (0x1000UL << ETH_MTLTXQ1HCR_HC_Pos)                  /*!< 0x00001000 */
#define ETH_MTLTXQ1HCR_HC_13                (0x2000UL << ETH_MTLTXQ1HCR_HC_Pos)                  /*!< 0x00002000 */
#define ETH_MTLTXQ1HCR_HC_14                (0x4000UL << ETH_MTLTXQ1HCR_HC_Pos)                  /*!< 0x00004000 */
#define ETH_MTLTXQ1HCR_HC_15                (0x8000UL << ETH_MTLTXQ1HCR_HC_Pos)                  /*!< 0x00008000 */
#define ETH_MTLTXQ1HCR_HC_16                (0x10000UL << ETH_MTLTXQ1HCR_HC_Pos)                 /*!< 0x00010000 */
#define ETH_MTLTXQ1HCR_HC_17                (0x20000UL << ETH_MTLTXQ1HCR_HC_Pos)                 /*!< 0x00020000 */
#define ETH_MTLTXQ1HCR_HC_18                (0x40000UL << ETH_MTLTXQ1HCR_HC_Pos)                 /*!< 0x00040000 */
#define ETH_MTLTXQ1HCR_HC_19                (0x80000UL << ETH_MTLTXQ1HCR_HC_Pos)                 /*!< 0x00080000 */
#define ETH_MTLTXQ1HCR_HC_20                (0x100000UL << ETH_MTLTXQ1HCR_HC_Pos)                /*!< 0x00100000 */
#define ETH_MTLTXQ1HCR_HC_21                (0x200000UL << ETH_MTLTXQ1HCR_HC_Pos)                /*!< 0x00200000 */
#define ETH_MTLTXQ1HCR_HC_22                (0x400000UL << ETH_MTLTXQ1HCR_HC_Pos)                /*!< 0x00400000 */
#define ETH_MTLTXQ1HCR_HC_23                (0x800000UL << ETH_MTLTXQ1HCR_HC_Pos)                /*!< 0x00800000 */
#define ETH_MTLTXQ1HCR_HC_24                (0x1000000UL << ETH_MTLTXQ1HCR_HC_Pos)               /*!< 0x01000000 */
#define ETH_MTLTXQ1HCR_HC_25                (0x2000000UL << ETH_MTLTXQ1HCR_HC_Pos)               /*!< 0x02000000 */
#define ETH_MTLTXQ1HCR_HC_26                (0x4000000UL << ETH_MTLTXQ1HCR_HC_Pos)               /*!< 0x04000000 */
#define ETH_MTLTXQ1HCR_HC_27                (0x8000000UL << ETH_MTLTXQ1HCR_HC_Pos)               /*!< 0x08000000 */
#define ETH_MTLTXQ1HCR_HC_28                (0x10000000UL << ETH_MTLTXQ1HCR_HC_Pos)              /*!< 0x10000000 */

/************  Bit definition for ETH_MTLTXQ1LCR register  *************/
#define ETH_MTLTXQ1LCR_LC_Pos               (0U)
#define ETH_MTLTXQ1LCR_LC_Msk               (0x1FFFFFFFUL << ETH_MTLTXQ1LCR_LC_Pos)              /*!< 0x1FFFFFFF */
#define ETH_MTLTXQ1LCR_LC                   ETH_MTLTXQ1LCR_LC_Msk                               /*!< loCredit Value */
#define ETH_MTLTXQ1LCR_LC_0                 (0x1UL << ETH_MTLTXQ1LCR_LC_Pos)                     /*!< 0x00000001 */
#define ETH_MTLTXQ1LCR_LC_1                 (0x2UL << ETH_MTLTXQ1LCR_LC_Pos)                     /*!< 0x00000002 */
#define ETH_MTLTXQ1LCR_LC_2                 (0x4UL << ETH_MTLTXQ1LCR_LC_Pos)                     /*!< 0x00000004 */
#define ETH_MTLTXQ1LCR_LC_3                 (0x8UL << ETH_MTLTXQ1LCR_LC_Pos)                     /*!< 0x00000008 */
#define ETH_MTLTXQ1LCR_LC_4                 (0x10UL << ETH_MTLTXQ1LCR_LC_Pos)                    /*!< 0x00000010 */
#define ETH_MTLTXQ1LCR_LC_5                 (0x20UL << ETH_MTLTXQ1LCR_LC_Pos)                    /*!< 0x00000020 */
#define ETH_MTLTXQ1LCR_LC_6                 (0x40UL << ETH_MTLTXQ1LCR_LC_Pos)                    /*!< 0x00000040 */
#define ETH_MTLTXQ1LCR_LC_7                 (0x80UL << ETH_MTLTXQ1LCR_LC_Pos)                    /*!< 0x00000080 */
#define ETH_MTLTXQ1LCR_LC_8                 (0x100UL << ETH_MTLTXQ1LCR_LC_Pos)                   /*!< 0x00000100 */
#define ETH_MTLTXQ1LCR_LC_9                 (0x200UL << ETH_MTLTXQ1LCR_LC_Pos)                   /*!< 0x00000200 */
#define ETH_MTLTXQ1LCR_LC_10                (0x400UL << ETH_MTLTXQ1LCR_LC_Pos)                   /*!< 0x00000400 */
#define ETH_MTLTXQ1LCR_LC_11                (0x800UL << ETH_MTLTXQ1LCR_LC_Pos)                   /*!< 0x00000800 */
#define ETH_MTLTXQ1LCR_LC_12                (0x1000UL << ETH_MTLTXQ1LCR_LC_Pos)                  /*!< 0x00001000 */
#define ETH_MTLTXQ1LCR_LC_13                (0x2000UL << ETH_MTLTXQ1LCR_LC_Pos)                  /*!< 0x00002000 */
#define ETH_MTLTXQ1LCR_LC_14                (0x4000UL << ETH_MTLTXQ1LCR_LC_Pos)                  /*!< 0x00004000 */
#define ETH_MTLTXQ1LCR_LC_15                (0x8000UL << ETH_MTLTXQ1LCR_LC_Pos)                  /*!< 0x00008000 */
#define ETH_MTLTXQ1LCR_LC_16                (0x10000UL << ETH_MTLTXQ1LCR_LC_Pos)                 /*!< 0x00010000 */
#define ETH_MTLTXQ1LCR_LC_17                (0x20000UL << ETH_MTLTXQ1LCR_LC_Pos)                 /*!< 0x00020000 */
#define ETH_MTLTXQ1LCR_LC_18                (0x40000UL << ETH_MTLTXQ1LCR_LC_Pos)                 /*!< 0x00040000 */
#define ETH_MTLTXQ1LCR_LC_19                (0x80000UL << ETH_MTLTXQ1LCR_LC_Pos)                 /*!< 0x00080000 */
#define ETH_MTLTXQ1LCR_LC_20                (0x100000UL << ETH_MTLTXQ1LCR_LC_Pos)                /*!< 0x00100000 */
#define ETH_MTLTXQ1LCR_LC_21                (0x200000UL << ETH_MTLTXQ1LCR_LC_Pos)                /*!< 0x00200000 */
#define ETH_MTLTXQ1LCR_LC_22                (0x400000UL << ETH_MTLTXQ1LCR_LC_Pos)                /*!< 0x00400000 */
#define ETH_MTLTXQ1LCR_LC_23                (0x800000UL << ETH_MTLTXQ1LCR_LC_Pos)                /*!< 0x00800000 */
#define ETH_MTLTXQ1LCR_LC_24                (0x1000000UL << ETH_MTLTXQ1LCR_LC_Pos)               /*!< 0x01000000 */
#define ETH_MTLTXQ1LCR_LC_25                (0x2000000UL << ETH_MTLTXQ1LCR_LC_Pos)               /*!< 0x02000000 */
#define ETH_MTLTXQ1LCR_LC_26                (0x4000000UL << ETH_MTLTXQ1LCR_LC_Pos)               /*!< 0x04000000 */
#define ETH_MTLTXQ1LCR_LC_27                (0x8000000UL << ETH_MTLTXQ1LCR_LC_Pos)               /*!< 0x08000000 */
#define ETH_MTLTXQ1LCR_LC_28                (0x10000000UL << ETH_MTLTXQ1LCR_LC_Pos)              /*!< 0x10000000 */

/*************  Bit definition for ETH_MTLQ1ICSR register  *************/
#define ETH_MTLQ1ICSR_TXUNFIS_Pos           (0U)
#define ETH_MTLQ1ICSR_TXUNFIS_Msk           (0x1UL << ETH_MTLQ1ICSR_TXUNFIS_Pos)                 /*!< 0x00000001 */
#define ETH_MTLQ1ICSR_TXUNFIS               ETH_MTLQ1ICSR_TXUNFIS_Msk                           /*!< Transmit Queue Underflow Interrupt Status */
#define ETH_MTLQ1ICSR_ABPSIS_Pos            (1U)
#define ETH_MTLQ1ICSR_ABPSIS_Msk            (0x1UL << ETH_MTLQ1ICSR_ABPSIS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLQ1ICSR_ABPSIS                ETH_MTLQ1ICSR_ABPSIS_Msk                            /*!< Average Bits Per Slot Interrupt Status */
#define ETH_MTLQ1ICSR_TXUIE_Pos             (8U)
#define ETH_MTLQ1ICSR_TXUIE_Msk             (0x1UL << ETH_MTLQ1ICSR_TXUIE_Pos)                   /*!< 0x00000100 */
#define ETH_MTLQ1ICSR_TXUIE                 ETH_MTLQ1ICSR_TXUIE_Msk                             /*!< Transmit Queue Underflow Interrupt Enable */
#define ETH_MTLQ1ICSR_ABPSIE_Pos            (9U)
#define ETH_MTLQ1ICSR_ABPSIE_Msk            (0x1UL << ETH_MTLQ1ICSR_ABPSIE_Pos)                  /*!< 0x00000200 */
#define ETH_MTLQ1ICSR_ABPSIE                ETH_MTLQ1ICSR_ABPSIE_Msk                            /*!< Average Bits Per Slot Interrupt Enable */
#define ETH_MTLQ1ICSR_RXOVFIS_Pos           (16U)
#define ETH_MTLQ1ICSR_RXOVFIS_Msk           (0x1UL << ETH_MTLQ1ICSR_RXOVFIS_Pos)                 /*!< 0x00010000 */
#define ETH_MTLQ1ICSR_RXOVFIS               ETH_MTLQ1ICSR_RXOVFIS_Msk                           /*!< Receive Queue Overflow Interrupt Status */
#define ETH_MTLQ1ICSR_RXOIE_Pos             (24U)
#define ETH_MTLQ1ICSR_RXOIE_Msk             (0x1UL << ETH_MTLQ1ICSR_RXOIE_Pos)                   /*!< 0x01000000 */
#define ETH_MTLQ1ICSR_RXOIE                 ETH_MTLQ1ICSR_RXOIE_Msk                             /*!< Receive Queue Overflow Interrupt Enable */

/************  Bit definition for ETH_MTLRXQ1OMR register  *************/
#define ETH_MTLRXQ1OMR_RTC_Pos              (0U)
#define ETH_MTLRXQ1OMR_RTC_Msk              (0x3UL << ETH_MTLRXQ1OMR_RTC_Pos)                    /*!< 0x00000003 */
#define ETH_MTLRXQ1OMR_RTC                  ETH_MTLRXQ1OMR_RTC_Msk                              /*!< Receive Queue Threshold Control */
#define ETH_MTLRXQ1OMR_RTC_0                (0x1UL << ETH_MTLRXQ1OMR_RTC_Pos)                    /*!< 0x00000001 */
#define ETH_MTLRXQ1OMR_RTC_1                (0x2UL << ETH_MTLRXQ1OMR_RTC_Pos)                    /*!< 0x00000002 */
#define ETH_MTLRXQ1OMR_FUP_Pos              (3U)
#define ETH_MTLRXQ1OMR_FUP_Msk              (0x1UL << ETH_MTLRXQ1OMR_FUP_Pos)                    /*!< 0x00000008 */
#define ETH_MTLRXQ1OMR_FUP                  ETH_MTLRXQ1OMR_FUP_Msk                              /*!< Forward Undersized Good Packets */
#define ETH_MTLRXQ1OMR_FEP_Pos              (4U)
#define ETH_MTLRXQ1OMR_FEP_Msk              (0x1UL << ETH_MTLRXQ1OMR_FEP_Pos)                    /*!< 0x00000010 */
#define ETH_MTLRXQ1OMR_FEP                  ETH_MTLRXQ1OMR_FEP_Msk                              /*!< Forward Error Packets */
#define ETH_MTLRXQ1OMR_RSF_Pos              (5U)
#define ETH_MTLRXQ1OMR_RSF_Msk              (0x1UL << ETH_MTLRXQ1OMR_RSF_Pos)                    /*!< 0x00000020 */
#define ETH_MTLRXQ1OMR_RSF                  ETH_MTLRXQ1OMR_RSF_Msk                              /*!< Receive Queue Store and Forward */
#define ETH_MTLRXQ1OMR_DIS_TCP_EF_Pos       (6U)
#define ETH_MTLRXQ1OMR_DIS_TCP_EF_Msk       (0x1UL << ETH_MTLRXQ1OMR_DIS_TCP_EF_Pos)             /*!< 0x00000040 */
#define ETH_MTLRXQ1OMR_DIS_TCP_EF           ETH_MTLRXQ1OMR_DIS_TCP_EF_Msk                       /*!< Disable Dropping of TCP/IP Checksum Error Packets */
#define ETH_MTLRXQ1OMR_EHFC_Pos             (7U)
#define ETH_MTLRXQ1OMR_EHFC_Msk             (0x1UL << ETH_MTLRXQ1OMR_EHFC_Pos)                   /*!< 0x00000080 */
#define ETH_MTLRXQ1OMR_EHFC                 ETH_MTLRXQ1OMR_EHFC_Msk                             /*!< Enable Hardware Flow Control */
#define ETH_MTLRXQ1OMR_RFA_Pos              (8U)
#define ETH_MTLRXQ1OMR_RFA_Msk              (0x7UL << ETH_MTLRXQ1OMR_RFA_Pos)                    /*!< 0x00000700 */
#define ETH_MTLRXQ1OMR_RFA                  ETH_MTLRXQ1OMR_RFA_Msk                              /*!< Threshold for Activating Flow Control (in half-duplex and full-duplex */
#define ETH_MTLRXQ1OMR_RFA_0                (0x1UL << ETH_MTLRXQ1OMR_RFA_Pos)                    /*!< 0x00000100 */
#define ETH_MTLRXQ1OMR_RFA_1                (0x2UL << ETH_MTLRXQ1OMR_RFA_Pos)                    /*!< 0x00000200 */
#define ETH_MTLRXQ1OMR_RFA_2                (0x4UL << ETH_MTLRXQ1OMR_RFA_Pos)                    /*!< 0x00000400 */
#define ETH_MTLRXQ1OMR_RFD_Pos              (14U)
#define ETH_MTLRXQ1OMR_RFD_Msk              (0x7UL << ETH_MTLRXQ1OMR_RFD_Pos)                    /*!< 0x0001C000 */
#define ETH_MTLRXQ1OMR_RFD                  ETH_MTLRXQ1OMR_RFD_Msk                              /*!< Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) */
#define ETH_MTLRXQ1OMR_RFD_0                (0x1UL << ETH_MTLRXQ1OMR_RFD_Pos)                    /*!< 0x00004000 */
#define ETH_MTLRXQ1OMR_RFD_1                (0x2UL << ETH_MTLRXQ1OMR_RFD_Pos)                    /*!< 0x00008000 */
#define ETH_MTLRXQ1OMR_RFD_2                (0x4UL << ETH_MTLRXQ1OMR_RFD_Pos)                    /*!< 0x00010000 */
#define ETH_MTLRXQ1OMR_RQS_Pos              (20U)
#define ETH_MTLRXQ1OMR_RQS_Msk              (0xFUL << ETH_MTLRXQ1OMR_RQS_Pos)                    /*!< 0x00F00000 */
#define ETH_MTLRXQ1OMR_RQS                  ETH_MTLRXQ1OMR_RQS_Msk                              /*!< Receive Queue Size */
#define ETH_MTLRXQ1OMR_RQS_0                (0x1UL << ETH_MTLRXQ1OMR_RQS_Pos)                    /*!< 0x00100000 */
#define ETH_MTLRXQ1OMR_RQS_1                (0x2UL << ETH_MTLRXQ1OMR_RQS_Pos)                    /*!< 0x00200000 */
#define ETH_MTLRXQ1OMR_RQS_2                (0x4UL << ETH_MTLRXQ1OMR_RQS_Pos)                    /*!< 0x00400000 */
#define ETH_MTLRXQ1OMR_RQS_3                (0x8UL << ETH_MTLRXQ1OMR_RQS_Pos)                    /*!< 0x00800000 */

/***********  Bit definition for ETH_MTLRXQ1MPOCR register  ************/
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos      (0U)
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_Msk      (0x7FFUL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)          /*!< 0x000007FF */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT          ETH_MTLRXQ1MPOCR_OVFPKTCNT_Msk                      /*!< Overflow Packet Counter */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_0        (0x1UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000001 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_1        (0x2UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000002 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_2        (0x4UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000004 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_3        (0x8UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)            /*!< 0x00000008 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_4        (0x10UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000010 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_5        (0x20UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000020 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_6        (0x40UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000040 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_7        (0x80UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)           /*!< 0x00000080 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_8        (0x100UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000100 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_9        (0x200UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000200 */
#define ETH_MTLRXQ1MPOCR_OVFPKTCNT_10       (0x400UL << ETH_MTLRXQ1MPOCR_OVFPKTCNT_Pos)          /*!< 0x00000400 */
#define ETH_MTLRXQ1MPOCR_OVFCNTOVF_Pos      (11U)
#define ETH_MTLRXQ1MPOCR_OVFCNTOVF_Msk      (0x1UL << ETH_MTLRXQ1MPOCR_OVFCNTOVF_Pos)            /*!< 0x00000800 */
#define ETH_MTLRXQ1MPOCR_OVFCNTOVF          ETH_MTLRXQ1MPOCR_OVFCNTOVF_Msk                      /*!< Overflow Counter Overflow Bit */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos      (16U)
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_Msk      (0x7FFUL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)          /*!< 0x07FF0000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT          ETH_MTLRXQ1MPOCR_MISPKTCNT_Msk                      /*!< Missed Packet Counter */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_0        (0x1UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)            /*!< 0x00010000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_1        (0x2UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)            /*!< 0x00020000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_2        (0x4UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)            /*!< 0x00040000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_3        (0x8UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)            /*!< 0x00080000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_4        (0x10UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)           /*!< 0x00100000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_5        (0x20UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)           /*!< 0x00200000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_6        (0x40UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)           /*!< 0x00400000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_7        (0x80UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)           /*!< 0x00800000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_8        (0x100UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)          /*!< 0x01000000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_9        (0x200UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)          /*!< 0x02000000 */
#define ETH_MTLRXQ1MPOCR_MISPKTCNT_10       (0x400UL << ETH_MTLRXQ1MPOCR_MISPKTCNT_Pos)          /*!< 0x04000000 */
#define ETH_MTLRXQ1MPOCR_MISCNTOVF_Pos      (27U)
#define ETH_MTLRXQ1MPOCR_MISCNTOVF_Msk      (0x1UL << ETH_MTLRXQ1MPOCR_MISCNTOVF_Pos)            /*!< 0x08000000 */
#define ETH_MTLRXQ1MPOCR_MISCNTOVF          ETH_MTLRXQ1MPOCR_MISCNTOVF_Msk                      /*!< Missed Packet Counter Overflow Bit */

/*************  Bit definition for ETH_MTLRXQ1DR register  *************/
#define ETH_MTLRXQ1DR_RWCSTS_Pos            (0U)
#define ETH_MTLRXQ1DR_RWCSTS_Msk            (0x1UL << ETH_MTLRXQ1DR_RWCSTS_Pos)                  /*!< 0x00000001 */
#define ETH_MTLRXQ1DR_RWCSTS                ETH_MTLRXQ1DR_RWCSTS_Msk                            /*!< MTL Rx Queue Write Controller Active Status */
#define ETH_MTLRXQ1DR_RRCSTS_Pos            (1U)
#define ETH_MTLRXQ1DR_RRCSTS_Msk            (0x3UL << ETH_MTLRXQ1DR_RRCSTS_Pos)                  /*!< 0x00000006 */
#define ETH_MTLRXQ1DR_RRCSTS                ETH_MTLRXQ1DR_RRCSTS_Msk                            /*!< MTL Rx Queue Read Controller State */
#define ETH_MTLRXQ1DR_RRCSTS_0              (0x1UL << ETH_MTLRXQ1DR_RRCSTS_Pos)                  /*!< 0x00000002 */
#define ETH_MTLRXQ1DR_RRCSTS_1              (0x2UL << ETH_MTLRXQ1DR_RRCSTS_Pos)                  /*!< 0x00000004 */
#define ETH_MTLRXQ1DR_RXQSTS_Pos            (4U)
#define ETH_MTLRXQ1DR_RXQSTS_Msk            (0x3UL << ETH_MTLRXQ1DR_RXQSTS_Pos)                  /*!< 0x00000030 */
#define ETH_MTLRXQ1DR_RXQSTS                ETH_MTLRXQ1DR_RXQSTS_Msk                            /*!< MTL Rx Queue Fill-Level Status */
#define ETH_MTLRXQ1DR_RXQSTS_0              (0x1UL << ETH_MTLRXQ1DR_RXQSTS_Pos)                  /*!< 0x00000010 */
#define ETH_MTLRXQ1DR_RXQSTS_1              (0x2UL << ETH_MTLRXQ1DR_RXQSTS_Pos)                  /*!< 0x00000020 */
#define ETH_MTLRXQ1DR_PRXQ_Pos              (16U)
#define ETH_MTLRXQ1DR_PRXQ_Msk              (0x3FFFUL << ETH_MTLRXQ1DR_PRXQ_Pos)                 /*!< 0x3FFF0000 */
#define ETH_MTLRXQ1DR_PRXQ                  ETH_MTLRXQ1DR_PRXQ_Msk                              /*!< Number of Packets in Receive Queue */
#define ETH_MTLRXQ1DR_PRXQ_0                (0x1UL << ETH_MTLRXQ1DR_PRXQ_Pos)                    /*!< 0x00010000 */
#define ETH_MTLRXQ1DR_PRXQ_1                (0x2UL << ETH_MTLRXQ1DR_PRXQ_Pos)                    /*!< 0x00020000 */
#define ETH_MTLRXQ1DR_PRXQ_2                (0x4UL << ETH_MTLRXQ1DR_PRXQ_Pos)                    /*!< 0x00040000 */
#define ETH_MTLRXQ1DR_PRXQ_3                (0x8UL << ETH_MTLRXQ1DR_PRXQ_Pos)                    /*!< 0x00080000 */
#define ETH_MTLRXQ1DR_PRXQ_4                (0x10UL << ETH_MTLRXQ1DR_PRXQ_Pos)                   /*!< 0x00100000 */
#define ETH_MTLRXQ1DR_PRXQ_5                (0x20UL << ETH_MTLRXQ1DR_PRXQ_Pos)                   /*!< 0x00200000 */
#define ETH_MTLRXQ1DR_PRXQ_6                (0x40UL << ETH_MTLRXQ1DR_PRXQ_Pos)                   /*!< 0x00400000 */
#define ETH_MTLRXQ1DR_PRXQ_7                (0x80UL << ETH_MTLRXQ1DR_PRXQ_Pos)                   /*!< 0x00800000 */
#define ETH_MTLRXQ1DR_PRXQ_8                (0x100UL << ETH_MTLRXQ1DR_PRXQ_Pos)                  /*!< 0x01000000 */
#define ETH_MTLRXQ1DR_PRXQ_9                (0x200UL << ETH_MTLRXQ1DR_PRXQ_Pos)                  /*!< 0x02000000 */
#define ETH_MTLRXQ1DR_PRXQ_10               (0x400UL << ETH_MTLRXQ1DR_PRXQ_Pos)                  /*!< 0x04000000 */
#define ETH_MTLRXQ1DR_PRXQ_11               (0x800UL << ETH_MTLRXQ1DR_PRXQ_Pos)                  /*!< 0x08000000 */
#define ETH_MTLRXQ1DR_PRXQ_12               (0x1000UL << ETH_MTLRXQ1DR_PRXQ_Pos)                 /*!< 0x10000000 */
#define ETH_MTLRXQ1DR_PRXQ_13               (0x2000UL << ETH_MTLRXQ1DR_PRXQ_Pos)                 /*!< 0x20000000 */

/*************  Bit definition for ETH_MTLRXQ1CR register  *************/
#define ETH_MTLRXQ1CR_RXQ_WEGT_Pos          (0U)
#define ETH_MTLRXQ1CR_RXQ_WEGT_Msk          (0x7UL << ETH_MTLRXQ1CR_RXQ_WEGT_Pos)                /*!< 0x00000007 */
#define ETH_MTLRXQ1CR_RXQ_WEGT              ETH_MTLRXQ1CR_RXQ_WEGT_Msk                          /*!< Receive Queue Weight */
#define ETH_MTLRXQ1CR_RXQ_WEGT_0            (0x1UL << ETH_MTLRXQ1CR_RXQ_WEGT_Pos)                /*!< 0x00000001 */
#define ETH_MTLRXQ1CR_RXQ_WEGT_1            (0x2UL << ETH_MTLRXQ1CR_RXQ_WEGT_Pos)                /*!< 0x00000002 */
#define ETH_MTLRXQ1CR_RXQ_WEGT_2            (0x4UL << ETH_MTLRXQ1CR_RXQ_WEGT_Pos)                /*!< 0x00000004 */
#define ETH_MTLRXQ1CR_RXQ_FRM_ARBIT_Pos     (3U)
#define ETH_MTLRXQ1CR_RXQ_FRM_ARBIT_Msk     (0x1UL << ETH_MTLRXQ1CR_RXQ_FRM_ARBIT_Pos)           /*!< 0x00000008 */
#define ETH_MTLRXQ1CR_RXQ_FRM_ARBIT         ETH_MTLRXQ1CR_RXQ_FRM_ARBIT_Msk                     /*!< Receive Queue Packet Arbitration */

/***************  Bit definition for ETH_DMAMR register  ***************/
#define ETH_DMAMR_SWR_Pos                   (0U)
#define ETH_DMAMR_SWR_Msk                   (0x1UL << ETH_DMAMR_SWR_Pos)                         /*!< 0x00000001 */
#define ETH_DMAMR_SWR                       ETH_DMAMR_SWR_Msk                                   /*!< Software Reset */
#define ETH_DMAMR_TAA_Pos                   (2U)
#define ETH_DMAMR_TAA_Msk                   (0x7UL << ETH_DMAMR_TAA_Pos)                         /*!< 0x0000001C */
#define ETH_DMAMR_TAA                       ETH_DMAMR_TAA_Msk                                   /*!< Transmit Arbitration Algorithm */
#define ETH_DMAMR_TAA_0                     (0x1UL << ETH_DMAMR_TAA_Pos)                         /*!< 0x00000004 */
#define ETH_DMAMR_TAA_1                     (0x2UL << ETH_DMAMR_TAA_Pos)                         /*!< 0x00000008 */
#define ETH_DMAMR_TAA_2                     (0x4UL << ETH_DMAMR_TAA_Pos)                         /*!< 0x00000010 */
#define ETH_DMAMR_DSPW_Pos                  (8)
#define ETH_DMAMR_DSPW_Msk                  (0x1UL << ETH_DMAMR_DSPW_Pos)                        /*!< 0x00000100 */
#define ETH_DMAMR_DSPW                      ETH_DMAMR_DSPW_Msk                                  /*!< Descriptor Posted Write */
#define ETH_DMAMR_TXPR_Pos                  (11U)
#define ETH_DMAMR_TXPR_Msk                  (0x1UL << ETH_DMAMR_TXPR_Pos)                        /*!< 0x00000800 */
#define ETH_DMAMR_TXPR                      ETH_DMAMR_TXPR_Msk                                  /*!< Transmit priority */
#define ETH_DMAMR_INTM_Pos                  (16U)
#define ETH_DMAMR_INTM_Msk                  (0x3UL << ETH_DMAMR_INTM_Pos)                        /*!< 0x00030000 */
#define ETH_DMAMR_INTM                      ETH_DMAMR_INTM_Msk                                  /*!< Interrupt Mode */
#define ETH_DMAMR_INTM_0                    (0x1UL << ETH_DMAMR_INTM_Pos)                        /*!< 0x00010000 */
#define ETH_DMAMR_INTM_1                    (0x2UL << ETH_DMAMR_INTM_Pos)                        /*!< 0x00020000 */

/**************  Bit definition for ETH_DMASBMR register  **************/
#define ETH_DMASBMR_FB_Pos                  (0U)
#define ETH_DMASBMR_FB_Msk                  (0x1UL << ETH_DMASBMR_FB_Pos)                        /*!< 0x00000001 */
#define ETH_DMASBMR_FB                      ETH_DMASBMR_FB_Msk                                  /*!< Fixed Burst Length */
#define ETH_DMASBMR_BLEN4_Pos               (1U)
#define ETH_DMASBMR_BLEN4_Msk               (0x1UL << ETH_DMASBMR_BLEN4_Pos)                     /*!< 0x00000002 */
#define ETH_DMASBMR_BLEN4                   ETH_DMASBMR_BLEN4_Msk                               /*!< AXI Burst Length 4 */
#define ETH_DMASBMR_BLEN8_Pos               (2U)
#define ETH_DMASBMR_BLEN8_Msk               (0x1UL << ETH_DMASBMR_BLEN8_Pos)                     /*!< 0x00000004 */
#define ETH_DMASBMR_BLEN8                   ETH_DMASBMR_BLEN8_Msk                               /*!< AXI Burst Length 8 */
#define ETH_DMASBMR_BLEN16_Pos              (3U)
#define ETH_DMASBMR_BLEN16_Msk              (0x1UL << ETH_DMASBMR_BLEN16_Pos)                    /*!< 0x00000008 */
#define ETH_DMASBMR_BLEN16                  ETH_DMASBMR_BLEN16_Msk                              /*!< AXI Burst Length 16 */
#define ETH_DMASBMR_BLEN32_Pos              (4U)
#define ETH_DMASBMR_BLEN32_Msk              (0x1UL << ETH_DMASBMR_BLEN32_Pos)                    /*!< 0x00000010 */
#define ETH_DMASBMR_BLEN32                  ETH_DMASBMR_BLEN32_Msk                              /*!< AXI Burst Length 32 */
#define ETH_DMASBMR_BLEN64_Pos              (5U)
#define ETH_DMASBMR_BLEN64_Msk              (0x1UL << ETH_DMASBMR_BLEN64_Pos)                    /*!< 0x00000020 */
#define ETH_DMASBMR_BLEN64                  ETH_DMASBMR_BLEN64_Msk                              /*!< AXI Burst Length 64 */
#define ETH_DMASBMR_BLEN128_Pos             (6U)
#define ETH_DMASBMR_BLEN128_Msk             (0x1UL << ETH_DMASBMR_BLEN128_Pos)                   /*!< 0x00000040 */
#define ETH_DMASBMR_BLEN128                 ETH_DMASBMR_BLEN128_Msk                             /*!< AXI Burst Length 128 */
#define ETH_DMASBMR_BLEN256_Pos             (7U)
#define ETH_DMASBMR_BLEN256_Msk             (0x1UL << ETH_DMASBMR_BLEN256_Pos)                   /*!< 0x00000080 */
#define ETH_DMASBMR_BLEN256                 ETH_DMASBMR_BLEN256_Msk                             /*!< AXI Burst Length 256 */
#define ETH_DMASBMR_AAL_Pos                 (12U)
#define ETH_DMASBMR_AAL_Msk                 (0x1UL << ETH_DMASBMR_AAL_Pos)                       /*!< 0x00001000 */
#define ETH_DMASBMR_AAL                     ETH_DMASBMR_AAL_Msk                                 /*!< Address-Aligned Beats */
#define ETH_DMASBMR_ONEKBBE_Pos             (13U)
#define ETH_DMASBMR_ONEKBBE_Msk             (0x1UL << ETH_DMASBMR_ONEKBBE_Pos)                   /*!< 0x00002000 */
#define ETH_DMASBMR_ONEKBBE                 ETH_DMASBMR_ONEKBBE_Msk                             /*!< 1 Kbyte Boundary Crossing Enable for the AXI Master */
#define ETH_DMASBMR_RD_OSR_LMT_Pos          (16U)
#define ETH_DMASBMR_RD_OSR_LMT_Msk          (0x3UL << ETH_DMASBMR_RD_OSR_LMT_Pos)                /*!< 0x00030000 */
#define ETH_DMASBMR_RD_OSR_LMT              ETH_DMASBMR_RD_OSR_LMT_Msk                          /*!< AXI Maximum Read Outstanding Request Limit */
#define ETH_DMASBMR_RD_OSR_LMT_0            (0x1UL << ETH_DMASBMR_RD_OSR_LMT_Pos)                /*!< 0x00010000 */
#define ETH_DMASBMR_RD_OSR_LMT_1            (0x2UL << ETH_DMASBMR_RD_OSR_LMT_Pos)                /*!< 0x00020000 */
#define ETH_DMASBMR_WR_OSR_LMT_Pos          (24U)
#define ETH_DMASBMR_WR_OSR_LMT_Msk          (0x3UL << ETH_DMASBMR_WR_OSR_LMT_Pos)                /*!< 0x03000000 */
#define ETH_DMASBMR_WR_OSR_LMT              ETH_DMASBMR_WR_OSR_LMT_Msk                          /*!< AXI Maximum Write Outstanding Request Limit */
#define ETH_DMASBMR_WR_OSR_LMT_0            (0x1UL << ETH_DMASBMR_WR_OSR_LMT_Pos)                /*!< 0x01000000 */
#define ETH_DMASBMR_WR_OSR_LMT_1            (0x2UL << ETH_DMASBMR_WR_OSR_LMT_Pos)                /*!< 0x02000000 */
#define ETH_DMASBMR_LPI_XIT_PKT_Pos         (30U)
#define ETH_DMASBMR_LPI_XIT_PKT_Msk         (0x1UL << ETH_DMASBMR_LPI_XIT_PKT_Pos)               /*!< 0x40000000 */
#define ETH_DMASBMR_LPI_XIT_PKT             ETH_DMASBMR_LPI_XIT_PKT_Msk                         /*!< Unlock on Magic Packet or Remote wakeup Packet */
#define ETH_DMASBMR_EN_LPI_Pos              (31U)
#define ETH_DMASBMR_EN_LPI_Msk              (0x1UL << ETH_DMASBMR_EN_LPI_Pos)                    /*!< 0x80000000 */
#define ETH_DMASBMR_EN_LPI                  ETH_DMASBMR_EN_LPI_Msk                              /*!< Enable Low Power Interface (LPI) */

/**************  Bit definition for ETH_DMAISR register  ***************/
#define ETH_DMAISR_DC0IS_Pos                (0U)
#define ETH_DMAISR_DC0IS_Msk                (0x1UL << ETH_DMAISR_DC0IS_Pos)                      /*!< 0x00000001 */
#define ETH_DMAISR_DC0IS                    ETH_DMAISR_DC0IS_Msk                                /*!< DMA Channel 0 Interrupt Status */
#define ETH_DMAISR_DC1IS_Pos                (1U)
#define ETH_DMAISR_DC1IS_Msk                (0x1UL << ETH_DMAISR_DC1IS_Pos)                      /*!< 0x00000002 */
#define ETH_DMAISR_DC1IS                    ETH_DMAISR_DC1IS_Msk                                /*!< DMA Channel 1 Interrupt Status */
#define ETH_DMAISR_MTLIS_Pos                (16U)
#define ETH_DMAISR_MTLIS_Msk                (0x1UL << ETH_DMAISR_MTLIS_Pos)                      /*!< 0x00010000 */
#define ETH_DMAISR_MTLIS                    ETH_DMAISR_MTLIS_Msk                                /*!< MTL Interrupt Status */
#define ETH_DMAISR_MACIS_Pos                (17U)
#define ETH_DMAISR_MACIS_Msk                (0x1UL << ETH_DMAISR_MACIS_Pos)                      /*!< 0x00020000 */
#define ETH_DMAISR_MACIS                    ETH_DMAISR_MACIS_Msk                                /*!< MAC Interrupt Status */

/**************  Bit definition for ETH_DMADSR register  ***************/
#define ETH_DMADSR_AXWHSTS_Pos              (0U)
#define ETH_DMADSR_AXWHSTS_Msk              (0x1UL << ETH_DMADSR_AXWHSTS_Pos)                    /*!< 0x00000001 */
#define ETH_DMADSR_AXWHSTS                  ETH_DMADSR_AXWHSTS_Msk                              /*!< AXI Master Write Channel */
#define ETH_DMADSR_AXRHSTS_Pos              (1U)
#define ETH_DMADSR_AXRHSTS_Msk              (0x1UL << ETH_DMADSR_AXRHSTS_Pos)                    /*!< 0x00000002 */
#define ETH_DMADSR_AXRHSTS                  ETH_DMADSR_AXRHSTS_Msk                              /*!< AXI Master Read Channel Status */
#define ETH_DMADSR_RPS0_Pos                 (8U)
#define ETH_DMADSR_RPS0_Msk                 (0xFUL << ETH_DMADSR_RPS0_Pos)                       /*!< 0x00000F00 */
#define ETH_DMADSR_RPS0                     ETH_DMADSR_RPS0_Msk                                 /*!< DMA Channel 0 Receive Process State */
#define ETH_DMADSR_RPS0_0                   (0x1UL << ETH_DMADSR_RPS0_Pos)                       /*!< 0x00000100 */
#define ETH_DMADSR_RPS0_1                   (0x2UL << ETH_DMADSR_RPS0_Pos)                       /*!< 0x00000200 */
#define ETH_DMADSR_RPS0_2                   (0x4UL << ETH_DMADSR_RPS0_Pos)                       /*!< 0x00000400 */
#define ETH_DMADSR_RPS0_3                   (0x8UL << ETH_DMADSR_RPS0_Pos)                       /*!< 0x00000800 */
#define ETH_DMADSR_TPS0_Pos                 (12U)
#define ETH_DMADSR_TPS0_Msk                 (0xFUL << ETH_DMADSR_TPS0_Pos)                       /*!< 0x0000F000 */
#define ETH_DMADSR_TPS0                     ETH_DMADSR_TPS0_Msk                                 /*!< DMA Channel 0 Transmit Process State */
#define ETH_DMADSR_TPS0_0                   (0x1UL << ETH_DMADSR_TPS0_Pos)                       /*!< 0x00001000 */
#define ETH_DMADSR_TPS0_1                   (0x2UL << ETH_DMADSR_TPS0_Pos)                       /*!< 0x00002000 */
#define ETH_DMADSR_TPS0_2                   (0x4UL << ETH_DMADSR_TPS0_Pos)                       /*!< 0x00004000 */
#define ETH_DMADSR_TPS0_3                   (0x8UL << ETH_DMADSR_TPS0_Pos)                       /*!< 0x00008000 */
#define ETH_DMADSR_RPS1_Pos                 (16U)
#define ETH_DMADSR_RPS1_Msk                 (0xFUL << ETH_DMADSR_RPS1_Pos)                       /*!< 0x000F0000 */
#define ETH_DMADSR_RPS1                     ETH_DMADSR_RPS1_Msk                                 /*!< DMA Channel 1 Receive Process State */
#define ETH_DMADSR_RPS1_0                   (0x1UL << ETH_DMADSR_RPS1_Pos)                       /*!< 0x00010000 */
#define ETH_DMADSR_RPS1_1                   (0x2UL << ETH_DMADSR_RPS1_Pos)                       /*!< 0x00020000 */
#define ETH_DMADSR_RPS1_2                   (0x4UL << ETH_DMADSR_RPS1_Pos)                       /*!< 0x00040000 */
#define ETH_DMADSR_RPS1_3                   (0x8UL << ETH_DMADSR_RPS1_Pos)                       /*!< 0x00080000 */
#define ETH_DMADSR_TPS1_Pos                 (20U)
#define ETH_DMADSR_TPS1_Msk                 (0xFUL << ETH_DMADSR_TPS1_Pos)                       /*!< 0x00F00000 */
#define ETH_DMADSR_TPS1                     ETH_DMADSR_TPS1_Msk                                 /*!< DMA Channel 1 Transmit Process State */
#define ETH_DMADSR_TPS1_0                   (0x1UL << ETH_DMADSR_TPS1_Pos)                       /*!< 0x00100000 */
#define ETH_DMADSR_TPS1_1                   (0x2UL << ETH_DMADSR_TPS1_Pos)                       /*!< 0x00200000 */
#define ETH_DMADSR_TPS1_2                   (0x4UL << ETH_DMADSR_TPS1_Pos)                       /*!< 0x00400000 */
#define ETH_DMADSR_TPS1_3                   (0x8UL << ETH_DMADSR_TPS1_Pos)                       /*!< 0x00800000 */

/************  Bit definition for ETH_DMAA4TXACR register  *************/
#define ETH_DMAA4TXACR_TDRC_Pos             (0U)
#define ETH_DMAA4TXACR_TDRC_Msk             (0xFUL << ETH_DMAA4TXACR_TDRC_Pos)                   /*!< 0x0000000F */
#define ETH_DMAA4TXACR_TDRC                 ETH_DMAA4TXACR_TDRC_Msk                             /*!< Transmit DMA Read Descriptor Cache Control */
#define ETH_DMAA4TXACR_TDRC_0               (0x1UL << ETH_DMAA4TXACR_TDRC_Pos)                   /*!< 0x00000001 */
#define ETH_DMAA4TXACR_TDRC_1               (0x2UL << ETH_DMAA4TXACR_TDRC_Pos)                   /*!< 0x00000002 */
#define ETH_DMAA4TXACR_TDRC_2               (0x4UL << ETH_DMAA4TXACR_TDRC_Pos)                   /*!< 0x00000004 */
#define ETH_DMAA4TXACR_TDRC_3               (0x8UL << ETH_DMAA4TXACR_TDRC_Pos)                   /*!< 0x00000008 */
#define ETH_DMAA4TXACR_TEC_Pos              (8U)
#define ETH_DMAA4TXACR_TEC_Msk              (0xFUL << ETH_DMAA4TXACR_TEC_Pos)                    /*!< 0x00000F00 */
#define ETH_DMAA4TXACR_TEC                  ETH_DMAA4TXACR_TEC_Msk                              /*!< Transmit DMA Extended Packet Buffer or TSO Payload Cache Control */
#define ETH_DMAA4TXACR_TEC_0                (0x1UL << ETH_DMAA4TXACR_TEC_Pos)                    /*!< 0x00000100 */
#define ETH_DMAA4TXACR_TEC_1                (0x2UL << ETH_DMAA4TXACR_TEC_Pos)                    /*!< 0x00000200 */
#define ETH_DMAA4TXACR_TEC_2                (0x4UL << ETH_DMAA4TXACR_TEC_Pos)                    /*!< 0x00000400 */
#define ETH_DMAA4TXACR_TEC_3                (0x8UL << ETH_DMAA4TXACR_TEC_Pos)                    /*!< 0x00000800 */
#define ETH_DMAA4TXACR_THC_Pos              (16U)
#define ETH_DMAA4TXACR_THC_Msk              (0xFUL << ETH_DMAA4TXACR_THC_Pos)                    /*!< 0x000F0000 */
#define ETH_DMAA4TXACR_THC                  ETH_DMAA4TXACR_THC_Msk                              /*!< Transmit DMA First Packet Buffer or TSO Header Cache Control */
#define ETH_DMAA4TXACR_THC_0                (0x1UL << ETH_DMAA4TXACR_THC_Pos)                    /*!< 0x00010000 */
#define ETH_DMAA4TXACR_THC_1                (0x2UL << ETH_DMAA4TXACR_THC_Pos)                    /*!< 0x00020000 */
#define ETH_DMAA4TXACR_THC_2                (0x4UL << ETH_DMAA4TXACR_THC_Pos)                    /*!< 0x00040000 */
#define ETH_DMAA4TXACR_THC_3                (0x8UL << ETH_DMAA4TXACR_THC_Pos)                    /*!< 0x00080000 */

/************  Bit definition for ETH_DMAA4RXACR register  *************/
#define ETH_DMAA4RXACR_RDWC_Pos             (0U)
#define ETH_DMAA4RXACR_RDWC_Msk             (0xFUL << ETH_DMAA4RXACR_RDWC_Pos)                   /*!< 0x0000000F */
#define ETH_DMAA4RXACR_RDWC                 ETH_DMAA4RXACR_RDWC_Msk                             /*!< Receive DMA Write Descriptor Cache Control */
#define ETH_DMAA4RXACR_RDWC_0               (0x1UL << ETH_DMAA4RXACR_RDWC_Pos)                   /*!< 0x00000001 */
#define ETH_DMAA4RXACR_RDWC_1               (0x2UL << ETH_DMAA4RXACR_RDWC_Pos)                   /*!< 0x00000002 */
#define ETH_DMAA4RXACR_RDWC_2               (0x4UL << ETH_DMAA4RXACR_RDWC_Pos)                   /*!< 0x00000004 */
#define ETH_DMAA4RXACR_RDWC_3               (0x8UL << ETH_DMAA4RXACR_RDWC_Pos)                   /*!< 0x00000008 */
#define ETH_DMAA4RXACR_RPC_Pos              (8U)
#define ETH_DMAA4RXACR_RPC_Msk              (0xFUL << ETH_DMAA4RXACR_RPC_Pos)                    /*!< 0x00000F00 */
#define ETH_DMAA4RXACR_RPC                  ETH_DMAA4RXACR_RPC_Msk                              /*!< Receive DMA Payload Cache Control */
#define ETH_DMAA4RXACR_RPC_0                (0x1UL << ETH_DMAA4RXACR_RPC_Pos)                    /*!< 0x00000100 */
#define ETH_DMAA4RXACR_RPC_1                (0x2UL << ETH_DMAA4RXACR_RPC_Pos)                    /*!< 0x00000200 */
#define ETH_DMAA4RXACR_RPC_2                (0x4UL << ETH_DMAA4RXACR_RPC_Pos)                    /*!< 0x00000400 */
#define ETH_DMAA4RXACR_RPC_3                (0x8UL << ETH_DMAA4RXACR_RPC_Pos)                    /*!< 0x00000800 */
#define ETH_DMAA4RXACR_RHC_Pos              (16U)
#define ETH_DMAA4RXACR_RHC_Msk              (0xFUL << ETH_DMAA4RXACR_RHC_Pos)                    /*!< 0x000F0000 */
#define ETH_DMAA4RXACR_RHC                  ETH_DMAA4RXACR_RHC_Msk                              /*!< Receive DMA Header Cache Control */
#define ETH_DMAA4RXACR_RHC_0                (0x1UL << ETH_DMAA4RXACR_RHC_Pos)                    /*!< 0x00010000 */
#define ETH_DMAA4RXACR_RHC_1                (0x2UL << ETH_DMAA4RXACR_RHC_Pos)                    /*!< 0x00020000 */
#define ETH_DMAA4RXACR_RHC_2                (0x4UL << ETH_DMAA4RXACR_RHC_Pos)                    /*!< 0x00040000 */
#define ETH_DMAA4RXACR_RHC_3                (0x8UL << ETH_DMAA4RXACR_RHC_Pos)                    /*!< 0x00080000 */
#define ETH_DMAA4RXACR_RDC_Pos              (24U)
#define ETH_DMAA4RXACR_RDC_Msk              (0xFUL << ETH_DMAA4RXACR_RDC_Pos)                    /*!< 0x0F000000 */
#define ETH_DMAA4RXACR_RDC                  ETH_DMAA4RXACR_RDC_Msk                              /*!< Receive DMA Buffer Cache Control */
#define ETH_DMAA4RXACR_RDC_0                (0x1UL << ETH_DMAA4RXACR_RDC_Pos)                    /*!< 0x01000000 */
#define ETH_DMAA4RXACR_RDC_1                (0x2UL << ETH_DMAA4RXACR_RDC_Pos)                    /*!< 0x02000000 */
#define ETH_DMAA4RXACR_RDC_2                (0x4UL << ETH_DMAA4RXACR_RDC_Pos)                    /*!< 0x04000000 */
#define ETH_DMAA4RXACR_RDC_3                (0x8UL << ETH_DMAA4RXACR_RDC_Pos)                    /*!< 0x08000000 */

/*************  Bit definition for ETH_DMAA4DACR register  *************/
#define ETH_DMAA4DACR_TDWC_Pos              (0U)
#define ETH_DMAA4DACR_TDWC_Msk              (0xFUL << ETH_DMAA4DACR_TDWC_Pos)                    /*!< 0x0000000F */
#define ETH_DMAA4DACR_TDWC                  ETH_DMAA4DACR_TDWC_Msk                              /*!< Transmit DMA Write Descriptor Cache control */
#define ETH_DMAA4DACR_TDWC_0                (0x1UL << ETH_DMAA4DACR_TDWC_Pos)                    /*!< 0x00000001 */
#define ETH_DMAA4DACR_TDWC_1                (0x2UL << ETH_DMAA4DACR_TDWC_Pos)                    /*!< 0x00000002 */
#define ETH_DMAA4DACR_TDWC_2                (0x4UL << ETH_DMAA4DACR_TDWC_Pos)                    /*!< 0x00000004 */
#define ETH_DMAA4DACR_TDWC_3                (0x8UL << ETH_DMAA4DACR_TDWC_Pos)                    /*!< 0x00000008 */
#define ETH_DMAA4DACR_TDWD_Pos              (4U)
#define ETH_DMAA4DACR_TDWD_Msk              (0x3UL << ETH_DMAA4DACR_TDWD_Pos)                    /*!< 0x00000030 */
#define ETH_DMAA4DACR_TDWD                  ETH_DMAA4DACR_TDWD_Msk                              /*!< Transmit DMA Write Descriptor Domain control */
#define ETH_DMAA4DACR_TDWD_0                (0x1UL << ETH_DMAA4DACR_TDWD_Pos)                    /*!< 0x00000010 */
#define ETH_DMAA4DACR_TDWD_1                (0x2UL << ETH_DMAA4DACR_TDWD_Pos)                    /*!< 0x00000020 */
#define ETH_DMAA4DACR_RDRC_Pos              (8U)
#define ETH_DMAA4DACR_RDRC_Msk              (0xFUL << ETH_DMAA4DACR_RDRC_Pos)                    /*!< 0x00000F00 */
#define ETH_DMAA4DACR_RDRC                  ETH_DMAA4DACR_RDRC_Msk                              /*!< Receive DMA Read Descriptor Cache control */
#define ETH_DMAA4DACR_RDRC_0                (0x1UL << ETH_DMAA4DACR_RDRC_Pos)                    /*!< 0x00000100 */
#define ETH_DMAA4DACR_RDRC_1                (0x2UL << ETH_DMAA4DACR_RDRC_Pos)                    /*!< 0x00000200 */
#define ETH_DMAA4DACR_RDRC_2                (0x4UL << ETH_DMAA4DACR_RDRC_Pos)                    /*!< 0x00000400 */
#define ETH_DMAA4DACR_RDRC_3                (0x8UL << ETH_DMAA4DACR_RDRC_Pos)                    /*!< 0x00000800 */

/**************  Bit definition for ETH_DMAC0CR register  **************/
#define ETH_DMAC0CR_MSS_Pos                 (0U)
#define ETH_DMAC0CR_MSS_Msk                 (0x3FFFUL << ETH_DMAC0CR_MSS_Pos)                    /*!< 0x00003FFF */
#define ETH_DMAC0CR_MSS                     ETH_DMAC0CR_MSS_Msk                                 /*!< Maximum Segment Size */
#define ETH_DMAC0CR_MSS_0                   (0x1UL << ETH_DMAC0CR_MSS_Pos)                       /*!< 0x00000001 */
#define ETH_DMAC0CR_MSS_1                   (0x2UL << ETH_DMAC0CR_MSS_Pos)                       /*!< 0x00000002 */
#define ETH_DMAC0CR_MSS_2                   (0x4UL << ETH_DMAC0CR_MSS_Pos)                       /*!< 0x00000004 */
#define ETH_DMAC0CR_MSS_3                   (0x8UL << ETH_DMAC0CR_MSS_Pos)                       /*!< 0x00000008 */
#define ETH_DMAC0CR_MSS_4                   (0x10UL << ETH_DMAC0CR_MSS_Pos)                      /*!< 0x00000010 */
#define ETH_DMAC0CR_MSS_5                   (0x20UL << ETH_DMAC0CR_MSS_Pos)                      /*!< 0x00000020 */
#define ETH_DMAC0CR_MSS_6                   (0x40UL << ETH_DMAC0CR_MSS_Pos)                      /*!< 0x00000040 */
#define ETH_DMAC0CR_MSS_7                   (0x80UL << ETH_DMAC0CR_MSS_Pos)                      /*!< 0x00000080 */
#define ETH_DMAC0CR_MSS_8                   (0x100UL << ETH_DMAC0CR_MSS_Pos)                     /*!< 0x00000100 */
#define ETH_DMAC0CR_MSS_9                   (0x200UL << ETH_DMAC0CR_MSS_Pos)                     /*!< 0x00000200 */
#define ETH_DMAC0CR_MSS_10                  (0x400UL << ETH_DMAC0CR_MSS_Pos)                     /*!< 0x00000400 */
#define ETH_DMAC0CR_MSS_11                  (0x800UL << ETH_DMAC0CR_MSS_Pos)                     /*!< 0x00000800 */
#define ETH_DMAC0CR_MSS_12                  (0x1000UL << ETH_DMAC0CR_MSS_Pos)                    /*!< 0x00001000 */
#define ETH_DMAC0CR_MSS_13                  (0x2000UL << ETH_DMAC0CR_MSS_Pos)                    /*!< 0x00002000 */
#define ETH_DMAC0CR_PBLX8_Pos               (16U)
#define ETH_DMAC0CR_PBLX8_Msk               (0x1UL << ETH_DMAC0CR_PBLX8_Pos)                     /*!< 0x00010000 */
#define ETH_DMAC0CR_PBLX8                   ETH_DMAC0CR_PBLX8_Msk                               /*!< 8xPBL mode */
#define ETH_DMAC0CR_DSL_Pos                 (18U)
#define ETH_DMAC0CR_DSL_Msk                 (0x7UL << ETH_DMAC0CR_DSL_Pos)                       /*!< 0x001C0000 */
#define ETH_DMAC0CR_DSL                     ETH_DMAC0CR_DSL_Msk                                 /*!< Descriptor Skip Length */
#define ETH_DMACCR_DSL_0BIT                 (0x0UL << ETH_DMAC0CR_DSL_Pos)                       /*!< 0x00000000 */
#define ETH_DMACCR_DSL_64BIT                (0x1UL << ETH_DMAC0CR_DSL_Pos)                       /*!< 0x00040000 */
#define ETH_DMACCR_DSL_128BIT               (0x2UL << ETH_DMAC0CR_DSL_Pos)                       /*!< 0x00080000 */
#define ETH_DMACCR_DSL_256BIT               (0x4UL << ETH_DMAC0CR_DSL_Pos)                       /*!< 0x00100000 */

/*************  Bit definition for ETH_DMAC0TXCR register  *************/
#define ETH_DMAC0TXCR_ST_Pos                (0U)
#define ETH_DMAC0TXCR_ST_Msk                (0x1UL << ETH_DMAC0TXCR_ST_Pos)                      /*!< 0x00000001 */
#define ETH_DMAC0TXCR_ST                    ETH_DMAC0TXCR_ST_Msk                                /*!< Start or Stop Transmission Command */
#define ETH_DMAC0TXCR_TCW_Pos               (1U)
#define ETH_DMAC0TXCR_TCW_Msk               (0x7UL << ETH_DMAC0TXCR_TCW_Pos)                     /*!< 0x0000000E */
#define ETH_DMAC0TXCR_TCW                   ETH_DMAC0TXCR_TCW_Msk                               /*!< Transmit Channel Weight */
#define ETH_DMAC0TXCR_TCW_0                 (0x1UL << ETH_DMAC0TXCR_TCW_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC0TXCR_TCW_1                 (0x2UL << ETH_DMAC0TXCR_TCW_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC0TXCR_TCW_2                 (0x4UL << ETH_DMAC0TXCR_TCW_Pos)                     /*!< 0x00000008 */
#define ETH_DMAC0TXCR_OSF_Pos               (4U)
#define ETH_DMAC0TXCR_OSF_Msk               (0x1UL << ETH_DMAC0TXCR_OSF_Pos)                     /*!< 0x00000010 */
#define ETH_DMAC0TXCR_OSF                   ETH_DMAC0TXCR_OSF_Msk                               /*!< Operate on Second Packet */
#define ETH_DMAC0TXCR_TSE_Pos               (12U)
#define ETH_DMAC0TXCR_TSE_Msk               (0x1UL << ETH_DMAC0TXCR_TSE_Pos)                     /*!< 0x00001000 */
#define ETH_DMAC0TXCR_TSE                   ETH_DMAC0TXCR_TSE_Msk                               /*!< TCP Segmentation Enabled */
#define ETH_DMAC0TXCR_IPBL_Pos              (15U)
#define ETH_DMAC0TXCR_IPBL_Msk              (0x1UL << ETH_DMAC0TXCR_IPBL_Pos)                   /*!< 0x00001000 */
#define ETH_DMAC0TXCR_IPBL                  ETH_DMAC0TXCR_IPBL_Msk                              /*!< TCP Segmentation Enabled */
#define ETH_DMAC0TXCR_TXPBL_Pos             (16U)
#define ETH_DMAC0TXCR_TXPBL_Msk             (0x3FUL << ETH_DMAC0TXCR_TXPBL_Pos)                  /*!< 0x003F0000 */
#define ETH_DMAC0TXCR_TXPBL                 ETH_DMAC0TXCR_TXPBL_Msk                             /*!< Transmit Programmable Burst Length */
#define ETH_DMAC0TXCR_TXPBL_1PBL            (0x1UL << ETH_DMAC0TXCR_TXPBL_Pos)                   /*!< 0x00010000 */
#define ETH_DMAC0TXCR_TXPBL_2PBL            (0x2UL << ETH_DMAC0TXCR_TXPBL_Pos)                   /*!< 0x00020000 */
#define ETH_DMAC0TXCR_TXPBL_4PBL            (0x4UL << ETH_DMAC0TXCR_TXPBL_Pos)                   /*!< 0x00040000 */
#define ETH_DMAC0TXCR_TXPBL_8PBL            (0x8UL << ETH_DMAC0TXCR_TXPBL_Pos)                   /*!< 0x00080000 */
#define ETH_DMAC0TXCR_TXPBL_16PBL           (0x10UL << ETH_DMAC0TXCR_TXPBL_Pos)                  /*!< 0x00100000 */
#define ETH_DMAC0TXCR_TXPBL_32PBL           (0x20UL << ETH_DMAC0TXCR_TXPBL_Pos)                  /*!< 0x00200000 */
#define ETH_DMAC0TXCR_TQOS_Pos              (24U)
#define ETH_DMAC0TXCR_TQOS_Msk              (0xFUL << ETH_DMAC0TXCR_TQOS_Pos)                    /*!< 0x0F000000 */
#define ETH_DMAC0TXCR_TQOS                  ETH_DMAC0TXCR_TQOS_Msk                              /*!< Transmit QOS. */
#define ETH_DMAC0TXCR_TQOS_0                (0x1UL << ETH_DMAC0TXCR_TQOS_Pos)                    /*!< 0x01000000 */
#define ETH_DMAC0TXCR_TQOS_1                (0x2UL << ETH_DMAC0TXCR_TQOS_Pos)                    /*!< 0x02000000 */
#define ETH_DMAC0TXCR_TQOS_2                (0x4UL << ETH_DMAC0TXCR_TQOS_Pos)                    /*!< 0x04000000 */
#define ETH_DMAC0TXCR_TQOS_3                (0x8UL << ETH_DMAC0TXCR_TQOS_Pos)                    /*!< 0x08000000 */

/*************  Bit definition for ETH_DMAC0RXCR register  *************/
#define ETH_DMAC0RXCR_SR_Pos                (0U)
#define ETH_DMAC0RXCR_SR_Msk                (0x1UL << ETH_DMAC0RXCR_SR_Pos)                      /*!< 0x00000001 */
#define ETH_DMAC0RXCR_SR                    ETH_DMAC0RXCR_SR_Msk                                /*!< Start or Stop Receive */
#define ETH_DMAC0RXCR_RBSZ_Pos              (1U)
#define ETH_DMAC0RXCR_RBSZ_Msk              (0x3FFFUL << ETH_DMAC0RXCR_RBSZ_Pos)                 /*!< 0x00007FFE */
#define ETH_DMAC0RXCR_RBSZ                  ETH_DMAC0RXCR_RBSZ_Msk                              /*!< Receive Buffer size */
#define ETH_DMAC0RXCR_RBSZ_0                (0x1UL << ETH_DMAC0RXCR_RBSZ_Pos)                    /*!< 0x00000002 */
#define ETH_DMAC0RXCR_RBSZ_1                (0x2UL << ETH_DMAC0RXCR_RBSZ_Pos)                    /*!< 0x00000004 */
#define ETH_DMAC0RXCR_RBSZ_2                (0x4UL << ETH_DMAC0RXCR_RBSZ_Pos)                    /*!< 0x00000008 */
#define ETH_DMAC0RXCR_RBSZ_3                (0x8UL << ETH_DMAC0RXCR_RBSZ_Pos)                    /*!< 0x00000010 */
#define ETH_DMAC0RXCR_RBSZ_4                (0x10UL << ETH_DMAC0RXCR_RBSZ_Pos)                   /*!< 0x00000020 */
#define ETH_DMAC0RXCR_RBSZ_5                (0x20UL << ETH_DMAC0RXCR_RBSZ_Pos)                   /*!< 0x00000040 */
#define ETH_DMAC0RXCR_RBSZ_6                (0x40UL << ETH_DMAC0RXCR_RBSZ_Pos)                   /*!< 0x00000080 */
#define ETH_DMAC0RXCR_RBSZ_7                (0x80UL << ETH_DMAC0RXCR_RBSZ_Pos)                   /*!< 0x00000100 */
#define ETH_DMAC0RXCR_RBSZ_8                (0x100UL << ETH_DMAC0RXCR_RBSZ_Pos)                  /*!< 0x00000200 */
#define ETH_DMAC0RXCR_RBSZ_9                (0x200UL << ETH_DMAC0RXCR_RBSZ_Pos)                  /*!< 0x00000400 */
#define ETH_DMAC0RXCR_RBSZ_10               (0x400UL << ETH_DMAC0RXCR_RBSZ_Pos)                  /*!< 0x00000800 */
#define ETH_DMAC0RXCR_RBSZ_11               (0x800UL << ETH_DMAC0RXCR_RBSZ_Pos)                  /*!< 0x00001000 */
#define ETH_DMAC0RXCR_RBSZ_12               (0x1000UL << ETH_DMAC0RXCR_RBSZ_Pos)                 /*!< 0x00002000 */
#define ETH_DMAC0RXCR_RBSZ_13               (0x2000UL << ETH_DMAC0RXCR_RBSZ_Pos)                 /*!< 0x00004000 */
#define ETH_DMAC0RXCR_RXPBL_Pos             (16U)
#define ETH_DMAC0RXCR_RXPBL_Msk             (0x3FUL << ETH_DMAC0RXCR_RXPBL_Pos)                  /*!< 0x003F0000 */
#define ETH_DMAC0RXCR_RXPBL                 ETH_DMAC0RXCR_RXPBL_Msk                             /*!< Receive Programmable Burst Length */
#define ETH_DMAC0RXCR_RXPBL_1PBL            (0x1UL << ETH_DMAC0RXCR_RXPBL_Pos)                   /*!< 0x00010000 */
#define ETH_DMAC0RXCR_RXPBL_2PBL            (0x2UL << ETH_DMAC0RXCR_RXPBL_Pos)                   /*!< 0x00020000 */
#define ETH_DMAC0RXCR_RXPBL_4PBL            (0x4UL << ETH_DMAC0RXCR_RXPBL_Pos)                   /*!< 0x00040000 */
#define ETH_DMAC0RXCR_RXPBL_8PBL            (0x8UL << ETH_DMAC0RXCR_RXPBL_Pos)                   /*!< 0x00080000 */
#define ETH_DMAC0RXCR_RXPBL_16PBL           (0x10UL << ETH_DMAC0RXCR_RXPBL_Pos)                  /*!< 0x00100000 */
#define ETH_DMAC0RXCR_RXPBL_32PBL           (0x20UL << ETH_DMAC0RXCR_RXPBL_Pos)                  /*!< 0x00200000 */
#define ETH_DMAC0RXCR_RQOS_Pos              (24U)
#define ETH_DMAC0RXCR_RQOS_Msk              (0xFUL << ETH_DMAC0RXCR_RQOS_Pos)                    /*!< 0x0F000000 */
#define ETH_DMAC0RXCR_RQOS                  ETH_DMAC0RXCR_RQOS_Msk                              /*!< Rx AXI4 QOS. */
#define ETH_DMAC0RXCR_RQOS_0                (0x1UL << ETH_DMAC0RXCR_RQOS_Pos)                    /*!< 0x01000000 */
#define ETH_DMAC0RXCR_RQOS_1                (0x2UL << ETH_DMAC0RXCR_RQOS_Pos)                    /*!< 0x02000000 */
#define ETH_DMAC0RXCR_RQOS_2                (0x4UL << ETH_DMAC0RXCR_RQOS_Pos)                    /*!< 0x04000000 */
#define ETH_DMAC0RXCR_RQOS_3                (0x8UL << ETH_DMAC0RXCR_RQOS_Pos)                    /*!< 0x08000000 */
#define ETH_DMAC0RXCR_RPF_Pos               (31U)
#define ETH_DMAC0RXCR_RPF_Msk               (0x1UL << ETH_DMAC0RXCR_RPF_Pos)                     /*!< 0x80000000 */
#define ETH_DMAC0RXCR_RPF                   ETH_DMAC0RXCR_RPF_Msk                               /*!< DMA Rx Channel0 Packet Flush */

/************  Bit definition for ETH_DMAC0TXDLAR register  ************/
#define ETH_DMAC0TXDLAR_TDESLA_Pos          (3U)
#define ETH_DMAC0TXDLAR_TDESLA_Msk          (0x1FFFFFFFUL << ETH_DMAC0TXDLAR_TDESLA_Pos)         /*!< 0xFFFFFFF8 */
#define ETH_DMAC0TXDLAR_TDESLA              ETH_DMAC0TXDLAR_TDESLA_Msk                          /*!< Start of Transmit List */
#define ETH_DMAC0TXDLAR_TDESLA_0            (0x1UL << ETH_DMAC0TXDLAR_TDESLA_Pos)                /*!< 0x00000008 */
#define ETH_DMAC0TXDLAR_TDESLA_1            (0x2UL << ETH_DMAC0TXDLAR_TDESLA_Pos)                /*!< 0x00000010 */
#define ETH_DMAC0TXDLAR_TDESLA_2            (0x4UL << ETH_DMAC0TXDLAR_TDESLA_Pos)                /*!< 0x00000020 */
#define ETH_DMAC0TXDLAR_TDESLA_3            (0x8UL << ETH_DMAC0TXDLAR_TDESLA_Pos)                /*!< 0x00000040 */
#define ETH_DMAC0TXDLAR_TDESLA_4            (0x10UL << ETH_DMAC0TXDLAR_TDESLA_Pos)               /*!< 0x00000080 */
#define ETH_DMAC0TXDLAR_TDESLA_5            (0x20UL << ETH_DMAC0TXDLAR_TDESLA_Pos)               /*!< 0x00000100 */
#define ETH_DMAC0TXDLAR_TDESLA_6            (0x40UL << ETH_DMAC0TXDLAR_TDESLA_Pos)               /*!< 0x00000200 */
#define ETH_DMAC0TXDLAR_TDESLA_7            (0x80UL << ETH_DMAC0TXDLAR_TDESLA_Pos)               /*!< 0x00000400 */
#define ETH_DMAC0TXDLAR_TDESLA_8            (0x100UL << ETH_DMAC0TXDLAR_TDESLA_Pos)              /*!< 0x00000800 */
#define ETH_DMAC0TXDLAR_TDESLA_9            (0x200UL << ETH_DMAC0TXDLAR_TDESLA_Pos)              /*!< 0x00001000 */
#define ETH_DMAC0TXDLAR_TDESLA_10           (0x400UL << ETH_DMAC0TXDLAR_TDESLA_Pos)              /*!< 0x00002000 */
#define ETH_DMAC0TXDLAR_TDESLA_11           (0x800UL << ETH_DMAC0TXDLAR_TDESLA_Pos)              /*!< 0x00004000 */
#define ETH_DMAC0TXDLAR_TDESLA_12           (0x1000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)             /*!< 0x00008000 */
#define ETH_DMAC0TXDLAR_TDESLA_13           (0x2000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)             /*!< 0x00010000 */
#define ETH_DMAC0TXDLAR_TDESLA_14           (0x4000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)             /*!< 0x00020000 */
#define ETH_DMAC0TXDLAR_TDESLA_15           (0x8000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)             /*!< 0x00040000 */
#define ETH_DMAC0TXDLAR_TDESLA_16           (0x10000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)            /*!< 0x00080000 */
#define ETH_DMAC0TXDLAR_TDESLA_17           (0x20000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)            /*!< 0x00100000 */
#define ETH_DMAC0TXDLAR_TDESLA_18           (0x40000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)            /*!< 0x00200000 */
#define ETH_DMAC0TXDLAR_TDESLA_19           (0x80000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)            /*!< 0x00400000 */
#define ETH_DMAC0TXDLAR_TDESLA_20           (0x100000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)           /*!< 0x00800000 */
#define ETH_DMAC0TXDLAR_TDESLA_21           (0x200000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)           /*!< 0x01000000 */
#define ETH_DMAC0TXDLAR_TDESLA_22           (0x400000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)           /*!< 0x02000000 */
#define ETH_DMAC0TXDLAR_TDESLA_23           (0x800000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)           /*!< 0x04000000 */
#define ETH_DMAC0TXDLAR_TDESLA_24           (0x1000000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)          /*!< 0x08000000 */
#define ETH_DMAC0TXDLAR_TDESLA_25           (0x2000000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)          /*!< 0x10000000 */
#define ETH_DMAC0TXDLAR_TDESLA_26           (0x4000000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)          /*!< 0x20000000 */
#define ETH_DMAC0TXDLAR_TDESLA_27           (0x8000000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)          /*!< 0x40000000 */
#define ETH_DMAC0TXDLAR_TDESLA_28           (0x10000000UL << ETH_DMAC0TXDLAR_TDESLA_Pos)         /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0RXDLAR register  ************/
#define ETH_DMAC0RXDLAR_RDESLA_Pos          (3U)
#define ETH_DMAC0RXDLAR_RDESLA_Msk          (0x1FFFFFFFUL << ETH_DMAC0RXDLAR_RDESLA_Pos)         /*!< 0xFFFFFFF8 */
#define ETH_DMAC0RXDLAR_RDESLA              ETH_DMAC0RXDLAR_RDESLA_Msk                          /*!< Start of Receive List */
#define ETH_DMAC0RXDLAR_RDESLA_0            (0x1UL << ETH_DMAC0RXDLAR_RDESLA_Pos)                /*!< 0x00000008 */
#define ETH_DMAC0RXDLAR_RDESLA_1            (0x2UL << ETH_DMAC0RXDLAR_RDESLA_Pos)                /*!< 0x00000010 */
#define ETH_DMAC0RXDLAR_RDESLA_2            (0x4UL << ETH_DMAC0RXDLAR_RDESLA_Pos)                /*!< 0x00000020 */
#define ETH_DMAC0RXDLAR_RDESLA_3            (0x8UL << ETH_DMAC0RXDLAR_RDESLA_Pos)                /*!< 0x00000040 */
#define ETH_DMAC0RXDLAR_RDESLA_4            (0x10UL << ETH_DMAC0RXDLAR_RDESLA_Pos)               /*!< 0x00000080 */
#define ETH_DMAC0RXDLAR_RDESLA_5            (0x20UL << ETH_DMAC0RXDLAR_RDESLA_Pos)               /*!< 0x00000100 */
#define ETH_DMAC0RXDLAR_RDESLA_6            (0x40UL << ETH_DMAC0RXDLAR_RDESLA_Pos)               /*!< 0x00000200 */
#define ETH_DMAC0RXDLAR_RDESLA_7            (0x80UL << ETH_DMAC0RXDLAR_RDESLA_Pos)               /*!< 0x00000400 */
#define ETH_DMAC0RXDLAR_RDESLA_8            (0x100UL << ETH_DMAC0RXDLAR_RDESLA_Pos)              /*!< 0x00000800 */
#define ETH_DMAC0RXDLAR_RDESLA_9            (0x200UL << ETH_DMAC0RXDLAR_RDESLA_Pos)              /*!< 0x00001000 */
#define ETH_DMAC0RXDLAR_RDESLA_10           (0x400UL << ETH_DMAC0RXDLAR_RDESLA_Pos)              /*!< 0x00002000 */
#define ETH_DMAC0RXDLAR_RDESLA_11           (0x800UL << ETH_DMAC0RXDLAR_RDESLA_Pos)              /*!< 0x00004000 */
#define ETH_DMAC0RXDLAR_RDESLA_12           (0x1000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)             /*!< 0x00008000 */
#define ETH_DMAC0RXDLAR_RDESLA_13           (0x2000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)             /*!< 0x00010000 */
#define ETH_DMAC0RXDLAR_RDESLA_14           (0x4000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)             /*!< 0x00020000 */
#define ETH_DMAC0RXDLAR_RDESLA_15           (0x8000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)             /*!< 0x00040000 */
#define ETH_DMAC0RXDLAR_RDESLA_16           (0x10000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)            /*!< 0x00080000 */
#define ETH_DMAC0RXDLAR_RDESLA_17           (0x20000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)            /*!< 0x00100000 */
#define ETH_DMAC0RXDLAR_RDESLA_18           (0x40000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)            /*!< 0x00200000 */
#define ETH_DMAC0RXDLAR_RDESLA_19           (0x80000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)            /*!< 0x00400000 */
#define ETH_DMAC0RXDLAR_RDESLA_20           (0x100000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)           /*!< 0x00800000 */
#define ETH_DMAC0RXDLAR_RDESLA_21           (0x200000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)           /*!< 0x01000000 */
#define ETH_DMAC0RXDLAR_RDESLA_22           (0x400000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)           /*!< 0x02000000 */
#define ETH_DMAC0RXDLAR_RDESLA_23           (0x800000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)           /*!< 0x04000000 */
#define ETH_DMAC0RXDLAR_RDESLA_24           (0x1000000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)          /*!< 0x08000000 */
#define ETH_DMAC0RXDLAR_RDESLA_25           (0x2000000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)          /*!< 0x10000000 */
#define ETH_DMAC0RXDLAR_RDESLA_26           (0x4000000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)          /*!< 0x20000000 */
#define ETH_DMAC0RXDLAR_RDESLA_27           (0x8000000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)          /*!< 0x40000000 */
#define ETH_DMAC0RXDLAR_RDESLA_28           (0x10000000UL << ETH_DMAC0RXDLAR_RDESLA_Pos)         /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0TXDTPR register  ************/
#define ETH_DMAC0TXDTPR_TDT_Pos             (3U)
#define ETH_DMAC0TXDTPR_TDT_Msk             (0x1FFFFFFFUL << ETH_DMAC0TXDTPR_TDT_Pos)            /*!< 0xFFFFFFF8 */
#define ETH_DMAC0TXDTPR_TDT                 ETH_DMAC0TXDTPR_TDT_Msk                             /*!< Transmit Descriptor Tail Pointer */
#define ETH_DMAC0TXDTPR_TDT_0               (0x1UL << ETH_DMAC0TXDTPR_TDT_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC0TXDTPR_TDT_1               (0x2UL << ETH_DMAC0TXDTPR_TDT_Pos)                   /*!< 0x00000010 */
#define ETH_DMAC0TXDTPR_TDT_2               (0x4UL << ETH_DMAC0TXDTPR_TDT_Pos)                   /*!< 0x00000020 */
#define ETH_DMAC0TXDTPR_TDT_3               (0x8UL << ETH_DMAC0TXDTPR_TDT_Pos)                   /*!< 0x00000040 */
#define ETH_DMAC0TXDTPR_TDT_4               (0x10UL << ETH_DMAC0TXDTPR_TDT_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC0TXDTPR_TDT_5               (0x20UL << ETH_DMAC0TXDTPR_TDT_Pos)                  /*!< 0x00000100 */
#define ETH_DMAC0TXDTPR_TDT_6               (0x40UL << ETH_DMAC0TXDTPR_TDT_Pos)                  /*!< 0x00000200 */
#define ETH_DMAC0TXDTPR_TDT_7               (0x80UL << ETH_DMAC0TXDTPR_TDT_Pos)                  /*!< 0x00000400 */
#define ETH_DMAC0TXDTPR_TDT_8               (0x100UL << ETH_DMAC0TXDTPR_TDT_Pos)                 /*!< 0x00000800 */
#define ETH_DMAC0TXDTPR_TDT_9               (0x200UL << ETH_DMAC0TXDTPR_TDT_Pos)                 /*!< 0x00001000 */
#define ETH_DMAC0TXDTPR_TDT_10              (0x400UL << ETH_DMAC0TXDTPR_TDT_Pos)                 /*!< 0x00002000 */
#define ETH_DMAC0TXDTPR_TDT_11              (0x800UL << ETH_DMAC0TXDTPR_TDT_Pos)                 /*!< 0x00004000 */
#define ETH_DMAC0TXDTPR_TDT_12              (0x1000UL << ETH_DMAC0TXDTPR_TDT_Pos)                /*!< 0x00008000 */
#define ETH_DMAC0TXDTPR_TDT_13              (0x2000UL << ETH_DMAC0TXDTPR_TDT_Pos)                /*!< 0x00010000 */
#define ETH_DMAC0TXDTPR_TDT_14              (0x4000UL << ETH_DMAC0TXDTPR_TDT_Pos)                /*!< 0x00020000 */
#define ETH_DMAC0TXDTPR_TDT_15              (0x8000UL << ETH_DMAC0TXDTPR_TDT_Pos)                /*!< 0x00040000 */
#define ETH_DMAC0TXDTPR_TDT_16              (0x10000UL << ETH_DMAC0TXDTPR_TDT_Pos)               /*!< 0x00080000 */
#define ETH_DMAC0TXDTPR_TDT_17              (0x20000UL << ETH_DMAC0TXDTPR_TDT_Pos)               /*!< 0x00100000 */
#define ETH_DMAC0TXDTPR_TDT_18              (0x40000UL << ETH_DMAC0TXDTPR_TDT_Pos)               /*!< 0x00200000 */
#define ETH_DMAC0TXDTPR_TDT_19              (0x80000UL << ETH_DMAC0TXDTPR_TDT_Pos)               /*!< 0x00400000 */
#define ETH_DMAC0TXDTPR_TDT_20              (0x100000UL << ETH_DMAC0TXDTPR_TDT_Pos)              /*!< 0x00800000 */
#define ETH_DMAC0TXDTPR_TDT_21              (0x200000UL << ETH_DMAC0TXDTPR_TDT_Pos)              /*!< 0x01000000 */
#define ETH_DMAC0TXDTPR_TDT_22              (0x400000UL << ETH_DMAC0TXDTPR_TDT_Pos)              /*!< 0x02000000 */
#define ETH_DMAC0TXDTPR_TDT_23              (0x800000UL << ETH_DMAC0TXDTPR_TDT_Pos)              /*!< 0x04000000 */
#define ETH_DMAC0TXDTPR_TDT_24              (0x1000000UL << ETH_DMAC0TXDTPR_TDT_Pos)             /*!< 0x08000000 */
#define ETH_DMAC0TXDTPR_TDT_25              (0x2000000UL << ETH_DMAC0TXDTPR_TDT_Pos)             /*!< 0x10000000 */
#define ETH_DMAC0TXDTPR_TDT_26              (0x4000000UL << ETH_DMAC0TXDTPR_TDT_Pos)             /*!< 0x20000000 */
#define ETH_DMAC0TXDTPR_TDT_27              (0x8000000UL << ETH_DMAC0TXDTPR_TDT_Pos)             /*!< 0x40000000 */
#define ETH_DMAC0TXDTPR_TDT_28              (0x10000000UL << ETH_DMAC0TXDTPR_TDT_Pos)            /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0RXDTPR register  ************/
#define ETH_DMAC0RXDTPR_RDT_Pos             (3U)
#define ETH_DMAC0RXDTPR_RDT_Msk             (0x1FFFFFFFUL << ETH_DMAC0RXDTPR_RDT_Pos)            /*!< 0xFFFFFFF8 */
#define ETH_DMAC0RXDTPR_RDT                 ETH_DMAC0RXDTPR_RDT_Msk                             /*!< Receive Descriptor Tail Pointer */
#define ETH_DMAC0RXDTPR_RDT_0               (0x1UL << ETH_DMAC0RXDTPR_RDT_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC0RXDTPR_RDT_1               (0x2UL << ETH_DMAC0RXDTPR_RDT_Pos)                   /*!< 0x00000010 */
#define ETH_DMAC0RXDTPR_RDT_2               (0x4UL << ETH_DMAC0RXDTPR_RDT_Pos)                   /*!< 0x00000020 */
#define ETH_DMAC0RXDTPR_RDT_3               (0x8UL << ETH_DMAC0RXDTPR_RDT_Pos)                   /*!< 0x00000040 */
#define ETH_DMAC0RXDTPR_RDT_4               (0x10UL << ETH_DMAC0RXDTPR_RDT_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC0RXDTPR_RDT_5               (0x20UL << ETH_DMAC0RXDTPR_RDT_Pos)                  /*!< 0x00000100 */
#define ETH_DMAC0RXDTPR_RDT_6               (0x40UL << ETH_DMAC0RXDTPR_RDT_Pos)                  /*!< 0x00000200 */
#define ETH_DMAC0RXDTPR_RDT_7               (0x80UL << ETH_DMAC0RXDTPR_RDT_Pos)                  /*!< 0x00000400 */
#define ETH_DMAC0RXDTPR_RDT_8               (0x100UL << ETH_DMAC0RXDTPR_RDT_Pos)                 /*!< 0x00000800 */
#define ETH_DMAC0RXDTPR_RDT_9               (0x200UL << ETH_DMAC0RXDTPR_RDT_Pos)                 /*!< 0x00001000 */
#define ETH_DMAC0RXDTPR_RDT_10              (0x400UL << ETH_DMAC0RXDTPR_RDT_Pos)                 /*!< 0x00002000 */
#define ETH_DMAC0RXDTPR_RDT_11              (0x800UL << ETH_DMAC0RXDTPR_RDT_Pos)                 /*!< 0x00004000 */
#define ETH_DMAC0RXDTPR_RDT_12              (0x1000UL << ETH_DMAC0RXDTPR_RDT_Pos)                /*!< 0x00008000 */
#define ETH_DMAC0RXDTPR_RDT_13              (0x2000UL << ETH_DMAC0RXDTPR_RDT_Pos)                /*!< 0x00010000 */
#define ETH_DMAC0RXDTPR_RDT_14              (0x4000UL << ETH_DMAC0RXDTPR_RDT_Pos)                /*!< 0x00020000 */
#define ETH_DMAC0RXDTPR_RDT_15              (0x8000UL << ETH_DMAC0RXDTPR_RDT_Pos)                /*!< 0x00040000 */
#define ETH_DMAC0RXDTPR_RDT_16              (0x10000UL << ETH_DMAC0RXDTPR_RDT_Pos)               /*!< 0x00080000 */
#define ETH_DMAC0RXDTPR_RDT_17              (0x20000UL << ETH_DMAC0RXDTPR_RDT_Pos)               /*!< 0x00100000 */
#define ETH_DMAC0RXDTPR_RDT_18              (0x40000UL << ETH_DMAC0RXDTPR_RDT_Pos)               /*!< 0x00200000 */
#define ETH_DMAC0RXDTPR_RDT_19              (0x80000UL << ETH_DMAC0RXDTPR_RDT_Pos)               /*!< 0x00400000 */
#define ETH_DMAC0RXDTPR_RDT_20              (0x100000UL << ETH_DMAC0RXDTPR_RDT_Pos)              /*!< 0x00800000 */
#define ETH_DMAC0RXDTPR_RDT_21              (0x200000UL << ETH_DMAC0RXDTPR_RDT_Pos)              /*!< 0x01000000 */
#define ETH_DMAC0RXDTPR_RDT_22              (0x400000UL << ETH_DMAC0RXDTPR_RDT_Pos)              /*!< 0x02000000 */
#define ETH_DMAC0RXDTPR_RDT_23              (0x800000UL << ETH_DMAC0RXDTPR_RDT_Pos)              /*!< 0x04000000 */
#define ETH_DMAC0RXDTPR_RDT_24              (0x1000000UL << ETH_DMAC0RXDTPR_RDT_Pos)             /*!< 0x08000000 */
#define ETH_DMAC0RXDTPR_RDT_25              (0x2000000UL << ETH_DMAC0RXDTPR_RDT_Pos)             /*!< 0x10000000 */
#define ETH_DMAC0RXDTPR_RDT_26              (0x4000000UL << ETH_DMAC0RXDTPR_RDT_Pos)             /*!< 0x20000000 */
#define ETH_DMAC0RXDTPR_RDT_27              (0x8000000UL << ETH_DMAC0RXDTPR_RDT_Pos)             /*!< 0x40000000 */
#define ETH_DMAC0RXDTPR_RDT_28              (0x10000000UL << ETH_DMAC0RXDTPR_RDT_Pos)            /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0TXRLR register  *************/
#define ETH_DMAC0TXRLR_TDRL_Pos             (0U)
#define ETH_DMAC0TXRLR_TDRL_Msk             (0x3FFUL << ETH_DMAC0TXRLR_TDRL_Pos)                 /*!< 0x000003FF */
#define ETH_DMAC0TXRLR_TDRL                 ETH_DMAC0TXRLR_TDRL_Msk                             /*!< Transmit Descriptor Ring Length */
#define ETH_DMAC0TXRLR_TDRL_0               (0x1UL << ETH_DMAC0TXRLR_TDRL_Pos)                   /*!< 0x00000001 */
#define ETH_DMAC0TXRLR_TDRL_1               (0x2UL << ETH_DMAC0TXRLR_TDRL_Pos)                   /*!< 0x00000002 */
#define ETH_DMAC0TXRLR_TDRL_2               (0x4UL << ETH_DMAC0TXRLR_TDRL_Pos)                   /*!< 0x00000004 */
#define ETH_DMAC0TXRLR_TDRL_3               (0x8UL << ETH_DMAC0TXRLR_TDRL_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC0TXRLR_TDRL_4               (0x10UL << ETH_DMAC0TXRLR_TDRL_Pos)                  /*!< 0x00000010 */
#define ETH_DMAC0TXRLR_TDRL_5               (0x20UL << ETH_DMAC0TXRLR_TDRL_Pos)                  /*!< 0x00000020 */
#define ETH_DMAC0TXRLR_TDRL_6               (0x40UL << ETH_DMAC0TXRLR_TDRL_Pos)                  /*!< 0x00000040 */
#define ETH_DMAC0TXRLR_TDRL_7               (0x80UL << ETH_DMAC0TXRLR_TDRL_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC0TXRLR_TDRL_8               (0x100UL << ETH_DMAC0TXRLR_TDRL_Pos)                 /*!< 0x00000100 */
#define ETH_DMAC0TXRLR_TDRL_9               (0x200UL << ETH_DMAC0TXRLR_TDRL_Pos)                 /*!< 0x00000200 */

/************  Bit definition for ETH_DMAC0RXRLR register  *************/
#define ETH_DMAC0RXRLR_RDRL_Pos             (0U)
#define ETH_DMAC0RXRLR_RDRL_Msk             (0x3FFUL << ETH_DMAC0RXRLR_RDRL_Pos)                 /*!< 0x000003FF */
#define ETH_DMAC0RXRLR_RDRL                 ETH_DMAC0RXRLR_RDRL_Msk                             /*!< Receive Descriptor Ring Length */
#define ETH_DMAC0RXRLR_RDRL_0               (0x1UL << ETH_DMAC0RXRLR_RDRL_Pos)                   /*!< 0x00000001 */
#define ETH_DMAC0RXRLR_RDRL_1               (0x2UL << ETH_DMAC0RXRLR_RDRL_Pos)                   /*!< 0x00000002 */
#define ETH_DMAC0RXRLR_RDRL_2               (0x4UL << ETH_DMAC0RXRLR_RDRL_Pos)                   /*!< 0x00000004 */
#define ETH_DMAC0RXRLR_RDRL_3               (0x8UL << ETH_DMAC0RXRLR_RDRL_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC0RXRLR_RDRL_4               (0x10UL << ETH_DMAC0RXRLR_RDRL_Pos)                  /*!< 0x00000010 */
#define ETH_DMAC0RXRLR_RDRL_5               (0x20UL << ETH_DMAC0RXRLR_RDRL_Pos)                  /*!< 0x00000020 */
#define ETH_DMAC0RXRLR_RDRL_6               (0x40UL << ETH_DMAC0RXRLR_RDRL_Pos)                  /*!< 0x00000040 */
#define ETH_DMAC0RXRLR_RDRL_7               (0x80UL << ETH_DMAC0RXRLR_RDRL_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC0RXRLR_RDRL_8               (0x100UL << ETH_DMAC0RXRLR_RDRL_Pos)                 /*!< 0x00000100 */
#define ETH_DMAC0RXRLR_RDRL_9               (0x200UL << ETH_DMAC0RXRLR_RDRL_Pos)                 /*!< 0x00000200 */

/*************  Bit definition for ETH_DMAC0IER register  **************/
#define ETH_DMAC0IER_TIE_Pos                (0U)
#define ETH_DMAC0IER_TIE_Msk                (0x1UL << ETH_DMAC0IER_TIE_Pos)                      /*!< 0x00000001 */
#define ETH_DMAC0IER_TIE                    ETH_DMAC0IER_TIE_Msk                                /*!< Transmit Interrupt Enable */
#define ETH_DMAC0IER_TXSE_Pos               (1U)
#define ETH_DMAC0IER_TXSE_Msk               (0x1UL << ETH_DMAC0IER_TXSE_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC0IER_TXSE                   ETH_DMAC0IER_TXSE_Msk                               /*!< Transmit Stopped Enable */
#define ETH_DMAC0IER_TBUE_Pos               (2U)
#define ETH_DMAC0IER_TBUE_Msk               (0x1UL << ETH_DMAC0IER_TBUE_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC0IER_TBUE                   ETH_DMAC0IER_TBUE_Msk                               /*!< Transmit Buffer Unavailable Enable */
#define ETH_DMAC0IER_RIE_Pos                (6U)
#define ETH_DMAC0IER_RIE_Msk                (0x1UL << ETH_DMAC0IER_RIE_Pos)                      /*!< 0x00000040 */
#define ETH_DMAC0IER_RIE                    ETH_DMAC0IER_RIE_Msk                                /*!< Receive Interrupt Enable */
#define ETH_DMAC0IER_RBUE_Pos               (7U)
#define ETH_DMAC0IER_RBUE_Msk               (0x1UL << ETH_DMAC0IER_RBUE_Pos)                     /*!< 0x00000080 */
#define ETH_DMAC0IER_RBUE                   ETH_DMAC0IER_RBUE_Msk                               /*!< Receive Buffer Unavailable Enable */
#define ETH_DMAC0IER_RSE_Pos                (8U)
#define ETH_DMAC0IER_RSE_Msk                (0x1UL << ETH_DMAC0IER_RSE_Pos)                      /*!< 0x00000100 */
#define ETH_DMAC0IER_RSE                    ETH_DMAC0IER_RSE_Msk                                /*!< Receive Stopped Enable */
#define ETH_DMAC0IER_RWTE_Pos               (9U)
#define ETH_DMAC0IER_RWTE_Msk               (0x1UL << ETH_DMAC0IER_RWTE_Pos)                     /*!< 0x00000200 */
#define ETH_DMAC0IER_RWTE                   ETH_DMAC0IER_RWTE_Msk                               /*!< Receive Watchdog Timeout Enable */
#define ETH_DMAC0IER_ETIE_Pos               (10U)
#define ETH_DMAC0IER_ETIE_Msk               (0x1UL << ETH_DMAC0IER_ETIE_Pos)                     /*!< 0x00000400 */
#define ETH_DMAC0IER_ETIE                   ETH_DMAC0IER_ETIE_Msk                               /*!< Early Transmit Interrupt Enable */
#define ETH_DMAC0IER_ERIE_Pos               (11U)
#define ETH_DMAC0IER_ERIE_Msk               (0x1UL << ETH_DMAC0IER_ERIE_Pos)                     /*!< 0x00000800 */
#define ETH_DMAC0IER_ERIE                   ETH_DMAC0IER_ERIE_Msk                               /*!< Early Receive Interrupt Enable */
#define ETH_DMAC0IER_FBEE_Pos               (12U)
#define ETH_DMAC0IER_FBEE_Msk               (0x1UL << ETH_DMAC0IER_FBEE_Pos)                     /*!< 0x00001000 */
#define ETH_DMAC0IER_FBEE                   ETH_DMAC0IER_FBEE_Msk                               /*!< Fatal Bus Error Enable */
#define ETH_DMAC0IER_CDEE_Pos               (13U)
#define ETH_DMAC0IER_CDEE_Msk               (0x1UL << ETH_DMAC0IER_CDEE_Pos)                     /*!< 0x00002000 */
#define ETH_DMAC0IER_CDEE                   ETH_DMAC0IER_CDEE_Msk                               /*!< Context Descriptor Error Enable */
#define ETH_DMAC0IER_AIE_Pos                (14U)
#define ETH_DMAC0IER_AIE_Msk                (0x1UL << ETH_DMAC0IER_AIE_Pos)                      /*!< 0x00004000 */
#define ETH_DMAC0IER_AIE                    ETH_DMAC0IER_AIE_Msk                                /*!< Abnormal Interrupt Summary Enable */
#define ETH_DMAC0IER_NIE_Pos                (15U)
#define ETH_DMAC0IER_NIE_Msk                (0x1UL << ETH_DMAC0IER_NIE_Pos)                      /*!< 0x00008000 */
#define ETH_DMAC0IER_NIE                    ETH_DMAC0IER_NIE_Msk                                /*!< Normal Interrupt Summary Enable */

/************  Bit definition for ETH_DMAC0RXIWTR register  ************/
#define ETH_DMAC0RXIWTR_RWT_Pos             (0U)
#define ETH_DMAC0RXIWTR_RWT_Msk             (0xFFUL << ETH_DMAC0RXIWTR_RWT_Pos)                  /*!< 0x000000FF */
#define ETH_DMAC0RXIWTR_RWT                 ETH_DMAC0RXIWTR_RWT_Msk                             /*!< Receive Interrupt Watchdog Timer Count */
#define ETH_DMAC0RXIWTR_RWT_0               (0x1UL << ETH_DMAC0RXIWTR_RWT_Pos)                   /*!< 0x00000001 */
#define ETH_DMAC0RXIWTR_RWT_1               (0x2UL << ETH_DMAC0RXIWTR_RWT_Pos)                   /*!< 0x00000002 */
#define ETH_DMAC0RXIWTR_RWT_2               (0x4UL << ETH_DMAC0RXIWTR_RWT_Pos)                   /*!< 0x00000004 */
#define ETH_DMAC0RXIWTR_RWT_3               (0x8UL << ETH_DMAC0RXIWTR_RWT_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC0RXIWTR_RWT_4               (0x10UL << ETH_DMAC0RXIWTR_RWT_Pos)                  /*!< 0x00000010 */
#define ETH_DMAC0RXIWTR_RWT_5               (0x20UL << ETH_DMAC0RXIWTR_RWT_Pos)                  /*!< 0x00000020 */
#define ETH_DMAC0RXIWTR_RWT_6               (0x40UL << ETH_DMAC0RXIWTR_RWT_Pos)                  /*!< 0x00000040 */
#define ETH_DMAC0RXIWTR_RWT_7               (0x80UL << ETH_DMAC0RXIWTR_RWT_Pos)                  /*!< 0x00000080 */

/************  Bit definition for ETH_DMAC0SFCSR register  *************/
#define ETH_DMAC0SFCSR_ESC_Pos              (0U)
#define ETH_DMAC0SFCSR_ESC_Msk              (0x1UL << ETH_DMAC0SFCSR_ESC_Pos)                    /*!< 0x00000001 */
#define ETH_DMAC0SFCSR_ESC                  ETH_DMAC0SFCSR_ESC_Msk                              /*!< Enable Slot Comparison */
#define ETH_DMAC0SFCSR_ASC_Pos              (1U)
#define ETH_DMAC0SFCSR_ASC_Msk              (0x1UL << ETH_DMAC0SFCSR_ASC_Pos)                    /*!< 0x00000002 */
#define ETH_DMAC0SFCSR_ASC                  ETH_DMAC0SFCSR_ASC_Msk                              /*!< Advance Slot Check */
#define ETH_DMAC0SFCSR_RSN_Pos              (16U)
#define ETH_DMAC0SFCSR_RSN_Msk              (0xFUL << ETH_DMAC0SFCSR_RSN_Pos)                    /*!< 0x000F0000 */
#define ETH_DMAC0SFCSR_RSN                  ETH_DMAC0SFCSR_RSN_Msk                              /*!< Reference Slot Number */
#define ETH_DMAC0SFCSR_RSN_0                (0x1UL << ETH_DMAC0SFCSR_RSN_Pos)                    /*!< 0x00010000 */
#define ETH_DMAC0SFCSR_RSN_1                (0x2UL << ETH_DMAC0SFCSR_RSN_Pos)                    /*!< 0x00020000 */
#define ETH_DMAC0SFCSR_RSN_2                (0x4UL << ETH_DMAC0SFCSR_RSN_Pos)                    /*!< 0x00040000 */
#define ETH_DMAC0SFCSR_RSN_3                (0x8UL << ETH_DMAC0SFCSR_RSN_Pos)                    /*!< 0x00080000 */

/************  Bit definition for ETH_DMAC0CATXDR register  ************/
#define ETH_DMAC0CATXDR_CURTDESAPTR_Pos     (0U)
#define ETH_DMAC0CATXDR_CURTDESAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC0CATXDR_CURTDESAPTR         ETH_DMAC0CATXDR_CURTDESAPTR_Msk                     /*!< Application Transmit Descriptor Address Pointer */
#define ETH_DMAC0CATXDR_CURTDESAPTR_0       (0x1UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_1       (0x2UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_2       (0x4UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_3       (0x8UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_4       (0x10UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_5       (0x20UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_6       (0x40UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_7       (0x80UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_8       (0x100UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_9       (0x200UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_10      (0x400UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_11      (0x800UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_12      (0x1000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_13      (0x2000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_14      (0x4000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_15      (0x8000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_16      (0x10000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_17      (0x20000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_18      (0x40000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_19      (0x80000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_20      (0x100000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_21      (0x200000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_22      (0x400000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_23      (0x800000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_24      (0x1000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_25      (0x2000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_26      (0x4000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_27      (0x8000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_28      (0x10000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_29      (0x20000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_30      (0x40000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC0CATXDR_CURTDESAPTR_31      (0x80000000UL << ETH_DMAC0CATXDR_CURTDESAPTR_Pos)    /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0CARXDR register  ************/
#define ETH_DMAC0CARXDR_CURRDESAPTR_Pos     (0U)
#define ETH_DMAC0CARXDR_CURRDESAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC0CARXDR_CURRDESAPTR         ETH_DMAC0CARXDR_CURRDESAPTR_Msk                     /*!< Application Receive Descriptor Address Pointer */
#define ETH_DMAC0CARXDR_CURRDESAPTR_0       (0x1UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_1       (0x2UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_2       (0x4UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_3       (0x8UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_4       (0x10UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_5       (0x20UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_6       (0x40UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_7       (0x80UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_8       (0x100UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_9       (0x200UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_10      (0x400UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_11      (0x800UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_12      (0x1000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_13      (0x2000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_14      (0x4000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_15      (0x8000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_16      (0x10000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_17      (0x20000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_18      (0x40000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_19      (0x80000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_20      (0x100000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_21      (0x200000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_22      (0x400000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_23      (0x800000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_24      (0x1000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_25      (0x2000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_26      (0x4000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_27      (0x8000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_28      (0x10000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_29      (0x20000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_30      (0x40000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC0CARXDR_CURRDESAPTR_31      (0x80000000UL << ETH_DMAC0CARXDR_CURRDESAPTR_Pos)    /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0CATXBR register  ************/
#define ETH_DMAC0CATXBR_CURTBUFAPTR_Pos     (0U)
#define ETH_DMAC0CATXBR_CURTBUFAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC0CATXBR_CURTBUFAPTR         ETH_DMAC0CATXBR_CURTBUFAPTR_Msk                     /*!< Application Transmit Buffer Address Pointer */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_0       (0x1UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_1       (0x2UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_2       (0x4UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_3       (0x8UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_4       (0x10UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_5       (0x20UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_6       (0x40UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_7       (0x80UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_8       (0x100UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_9       (0x200UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_10      (0x400UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_11      (0x800UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_12      (0x1000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_13      (0x2000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_14      (0x4000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_15      (0x8000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_16      (0x10000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_17      (0x20000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_18      (0x40000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_19      (0x80000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_20      (0x100000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_21      (0x200000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_22      (0x400000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_23      (0x800000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_24      (0x1000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_25      (0x2000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_26      (0x4000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_27      (0x8000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_28      (0x10000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_29      (0x20000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_30      (0x40000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC0CATXBR_CURTBUFAPTR_31      (0x80000000UL << ETH_DMAC0CATXBR_CURTBUFAPTR_Pos)    /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC0CARXBR register  ************/
#define ETH_DMAC0CARXBR_CURRBUFAPTR_Pos     (0U)
#define ETH_DMAC0CARXBR_CURRBUFAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC0CARXBR_CURRBUFAPTR         ETH_DMAC0CARXBR_CURRBUFAPTR_Msk                     /*!< Application Receive Buffer Address Pointer */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_0       (0x1UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_1       (0x2UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_2       (0x4UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_3       (0x8UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_4       (0x10UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_5       (0x20UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_6       (0x40UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_7       (0x80UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_8       (0x100UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_9       (0x200UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_10      (0x400UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_11      (0x800UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_12      (0x1000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_13      (0x2000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_14      (0x4000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_15      (0x8000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_16      (0x10000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_17      (0x20000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_18      (0x40000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_19      (0x80000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_20      (0x100000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_21      (0x200000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_22      (0x400000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_23      (0x800000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_24      (0x1000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_25      (0x2000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_26      (0x4000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_27      (0x8000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_28      (0x10000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_29      (0x20000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_30      (0x40000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC0CARXBR_CURRBUFAPTR_31      (0x80000000UL << ETH_DMAC0CARXBR_CURRBUFAPTR_Pos)    /*!< 0x80000000 */

/**************  Bit definition for ETH_DMAC0SR register  **************/
#define ETH_DMAC0SR_TI_Pos                  (0U)
#define ETH_DMAC0SR_TI_Msk                  (0x1UL << ETH_DMAC0SR_TI_Pos)                        /*!< 0x00000001 */
#define ETH_DMAC0SR_TI                      ETH_DMAC0SR_TI_Msk                                  /*!< Transmit Interrupt */
#define ETH_DMAC0SR_TPS_Pos                 (1U)
#define ETH_DMAC0SR_TPS_Msk                 (0x1UL << ETH_DMAC0SR_TPS_Pos)                       /*!< 0x00000002 */
#define ETH_DMAC0SR_TPS                     ETH_DMAC0SR_TPS_Msk                                 /*!< Transmit Process Stopped */
#define ETH_DMAC0SR_TBU_Pos                 (2U)
#define ETH_DMAC0SR_TBU_Msk                 (0x1UL << ETH_DMAC0SR_TBU_Pos)                       /*!< 0x00000004 */
#define ETH_DMAC0SR_TBU                     ETH_DMAC0SR_TBU_Msk                                 /*!< Transmit Buffer Unavailable */
#define ETH_DMAC0SR_RI_Pos                  (6U)
#define ETH_DMAC0SR_RI_Msk                  (0x1UL << ETH_DMAC0SR_RI_Pos)                        /*!< 0x00000040 */
#define ETH_DMAC0SR_RI                      ETH_DMAC0SR_RI_Msk                                  /*!< Receive Interrupt */
#define ETH_DMAC0SR_RBU_Pos                 (7U)
#define ETH_DMAC0SR_RBU_Msk                 (0x1UL << ETH_DMAC0SR_RBU_Pos)                       /*!< 0x00000080 */
#define ETH_DMAC0SR_RBU                     ETH_DMAC0SR_RBU_Msk                                 /*!< Receive Buffer Unavailable */
#define ETH_DMAC0SR_RPS_Pos                 (8U)
#define ETH_DMAC0SR_RPS_Msk                 (0x1UL << ETH_DMAC0SR_RPS_Pos)                       /*!< 0x00000100 */
#define ETH_DMAC0SR_RPS                     ETH_DMAC0SR_RPS_Msk                                 /*!< Receive Process Stopped */
#define ETH_DMAC0SR_RWT_Pos                 (9U)
#define ETH_DMAC0SR_RWT_Msk                 (0x1UL << ETH_DMAC0SR_RWT_Pos)                       /*!< 0x00000200 */
#define ETH_DMAC0SR_RWT                     ETH_DMAC0SR_RWT_Msk                                 /*!< Receive Watchdog Timeout */
#define ETH_DMAC0SR_ETI_Pos                 (10U)
#define ETH_DMAC0SR_ETI_Msk                 (0x1UL << ETH_DMAC0SR_ETI_Pos)                       /*!< 0x00000400 */
#define ETH_DMAC0SR_ETI                     ETH_DMAC0SR_ETI_Msk                                 /*!< Early Transmit Interrupt */
#define ETH_DMAC0SR_ERI_Pos                 (11U)
#define ETH_DMAC0SR_ERI_Msk                 (0x1UL << ETH_DMAC0SR_ERI_Pos)                       /*!< 0x00000800 */
#define ETH_DMAC0SR_ERI                     ETH_DMAC0SR_ERI_Msk                                 /*!< Early Receive Interrupt */
#define ETH_DMAC0SR_FBE_Pos                 (12U)
#define ETH_DMAC0SR_FBE_Msk                 (0x1UL << ETH_DMAC0SR_FBE_Pos)                       /*!< 0x00001000 */
#define ETH_DMAC0SR_FBE                     ETH_DMAC0SR_FBE_Msk                                 /*!< Fatal Bus Error */
#define ETH_DMAC0SR_CDE_Pos                 (13U)
#define ETH_DMAC0SR_CDE_Msk                 (0x1UL << ETH_DMAC0SR_CDE_Pos)                       /*!< 0x00002000 */
#define ETH_DMAC0SR_CDE                     ETH_DMAC0SR_CDE_Msk                                 /*!< Context Descriptor Error */
#define ETH_DMAC0SR_AIS_Pos                 (14U)
#define ETH_DMAC0SR_AIS_Msk                 (0x1UL << ETH_DMAC0SR_AIS_Pos)                       /*!< 0x00004000 */
#define ETH_DMAC0SR_AIS                     ETH_DMAC0SR_AIS_Msk                                 /*!< Abnormal Interrupt Summary */
#define ETH_DMAC0SR_NIS_Pos                 (15U)
#define ETH_DMAC0SR_NIS_Msk                 (0x1UL << ETH_DMAC0SR_NIS_Pos)                       /*!< 0x00008000 */
#define ETH_DMAC0SR_NIS                     ETH_DMAC0SR_NIS_Msk                                 /*!< Normal Interrupt Summary */
#define ETH_DMAC0SR_TEB_Pos                 (16U)
#define ETH_DMAC0SR_TEB_Msk                 (0x7UL << ETH_DMAC0SR_TEB_Pos)                       /*!< 0x00070000 */
#define ETH_DMAC0SR_TEB                     ETH_DMAC0SR_TEB_Msk                                 /*!< Tx DMA Error Bits */
#define ETH_DMAC0SR_TEB_0                   (0x1UL << ETH_DMAC0SR_TEB_Pos)                       /*!< 0x00010000 */
#define ETH_DMAC0SR_TEB_1                   (0x2UL << ETH_DMAC0SR_TEB_Pos)                       /*!< 0x00020000 */
#define ETH_DMAC0SR_TEB_2                   (0x4UL << ETH_DMAC0SR_TEB_Pos)                       /*!< 0x00040000 */
#define ETH_DMAC0SR_REB_Pos                 (19U)
#define ETH_DMAC0SR_REB_Msk                 (0x7UL << ETH_DMAC0SR_REB_Pos)                       /*!< 0x00380000 */
#define ETH_DMAC0SR_REB                     ETH_DMAC0SR_REB_Msk                                 /*!< Rx DMA Error Bits */
#define ETH_DMAC0SR_REB_0                   (0x1UL << ETH_DMAC0SR_REB_Pos)                       /*!< 0x00080000 */
#define ETH_DMAC0SR_REB_1                   (0x2UL << ETH_DMAC0SR_REB_Pos)                       /*!< 0x00100000 */
#define ETH_DMAC0SR_REB_2                   (0x4UL << ETH_DMAC0SR_REB_Pos)                       /*!< 0x00200000 */

/*************  Bit definition for ETH_DMAC0MFCR register  *************/
#define ETH_DMAC0MFCR_MFC_Pos               (0U)
#define ETH_DMAC0MFCR_MFC_Msk               (0x7FFUL << ETH_DMAC0MFCR_MFC_Pos)                   /*!< 0x000007FF */
#define ETH_DMAC0MFCR_MFC                   ETH_DMAC0MFCR_MFC_Msk                               /*!< Dropped Packet Counters */
#define ETH_DMAC0MFCR_MFC_0                 (0x1UL << ETH_DMAC0MFCR_MFC_Pos)                     /*!< 0x00000001 */
#define ETH_DMAC0MFCR_MFC_1                 (0x2UL << ETH_DMAC0MFCR_MFC_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC0MFCR_MFC_2                 (0x4UL << ETH_DMAC0MFCR_MFC_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC0MFCR_MFC_3                 (0x8UL << ETH_DMAC0MFCR_MFC_Pos)                     /*!< 0x00000008 */
#define ETH_DMAC0MFCR_MFC_4                 (0x10UL << ETH_DMAC0MFCR_MFC_Pos)                    /*!< 0x00000010 */
#define ETH_DMAC0MFCR_MFC_5                 (0x20UL << ETH_DMAC0MFCR_MFC_Pos)                    /*!< 0x00000020 */
#define ETH_DMAC0MFCR_MFC_6                 (0x40UL << ETH_DMAC0MFCR_MFC_Pos)                    /*!< 0x00000040 */
#define ETH_DMAC0MFCR_MFC_7                 (0x80UL << ETH_DMAC0MFCR_MFC_Pos)                    /*!< 0x00000080 */
#define ETH_DMAC0MFCR_MFC_8                 (0x100UL << ETH_DMAC0MFCR_MFC_Pos)                   /*!< 0x00000100 */
#define ETH_DMAC0MFCR_MFC_9                 (0x200UL << ETH_DMAC0MFCR_MFC_Pos)                   /*!< 0x00000200 */
#define ETH_DMAC0MFCR_MFC_10                (0x400UL << ETH_DMAC0MFCR_MFC_Pos)                   /*!< 0x00000400 */
#define ETH_DMAC0MFCR_MFCO_Pos              (15U)
#define ETH_DMAC0MFCR_MFCO_Msk              (0x1UL << ETH_DMAC0MFCR_MFCO_Pos)                    /*!< 0x00008000 */
#define ETH_DMAC0MFCR_MFCO                  ETH_DMAC0MFCR_MFCO_Msk                              /*!< Overflow status of the MFC Counter */

/**************  Bit definition for ETH_DMAC1CR register  **************/
#define ETH_DMAC1CR_MSS_Pos                 (0U)
#define ETH_DMAC1CR_MSS_Msk                 (0x3FFFUL << ETH_DMAC1CR_MSS_Pos)                    /*!< 0x00003FFF */
#define ETH_DMAC1CR_MSS                     ETH_DMAC1CR_MSS_Msk                                 /*!< Maximum Segment Size */
#define ETH_DMAC1CR_MSS_0                   (0x1UL << ETH_DMAC1CR_MSS_Pos)                       /*!< 0x00000001 */
#define ETH_DMAC1CR_MSS_1                   (0x2UL << ETH_DMAC1CR_MSS_Pos)                       /*!< 0x00000002 */
#define ETH_DMAC1CR_MSS_2                   (0x4UL << ETH_DMAC1CR_MSS_Pos)                       /*!< 0x00000004 */
#define ETH_DMAC1CR_MSS_3                   (0x8UL << ETH_DMAC1CR_MSS_Pos)                       /*!< 0x00000008 */
#define ETH_DMAC1CR_MSS_4                   (0x10UL << ETH_DMAC1CR_MSS_Pos)                      /*!< 0x00000010 */
#define ETH_DMAC1CR_MSS_5                   (0x20UL << ETH_DMAC1CR_MSS_Pos)                      /*!< 0x00000020 */
#define ETH_DMAC1CR_MSS_6                   (0x40UL << ETH_DMAC1CR_MSS_Pos)                      /*!< 0x00000040 */
#define ETH_DMAC1CR_MSS_7                   (0x80UL << ETH_DMAC1CR_MSS_Pos)                      /*!< 0x00000080 */
#define ETH_DMAC1CR_MSS_8                   (0x100UL << ETH_DMAC1CR_MSS_Pos)                     /*!< 0x00000100 */
#define ETH_DMAC1CR_MSS_9                   (0x200UL << ETH_DMAC1CR_MSS_Pos)                     /*!< 0x00000200 */
#define ETH_DMAC1CR_MSS_10                  (0x400UL << ETH_DMAC1CR_MSS_Pos)                     /*!< 0x00000400 */
#define ETH_DMAC1CR_MSS_11                  (0x800UL << ETH_DMAC1CR_MSS_Pos)                     /*!< 0x00000800 */
#define ETH_DMAC1CR_MSS_12                  (0x1000UL << ETH_DMAC1CR_MSS_Pos)                    /*!< 0x00001000 */
#define ETH_DMAC1CR_MSS_13                  (0x2000UL << ETH_DMAC1CR_MSS_Pos)                    /*!< 0x00002000 */
#define ETH_DMAC1CR_PBLX8_Pos               (16U)
#define ETH_DMAC1CR_PBLX8_Msk               (0x1UL << ETH_DMAC1CR_PBLX8_Pos)                     /*!< 0x00010000 */
#define ETH_DMAC1CR_PBLX8                   ETH_DMAC1CR_PBLX8_Msk                               /*!< 8xPBL mode */
#define ETH_DMAC1CR_DSL_Pos                 (18U)
#define ETH_DMAC1CR_DSL_Msk                 (0x7UL << ETH_DMAC1CR_DSL_Pos)                       /*!< 0x001C0000 */
#define ETH_DMAC1CR_DSL                     ETH_DMAC1CR_DSL_Msk                                 /*!< Descriptor Skip Length */
#define ETH_DMAC1CR_DSL_0                   (0x1UL << ETH_DMAC1CR_DSL_Pos)                       /*!< 0x00040000 */
#define ETH_DMAC1CR_DSL_1                   (0x2UL << ETH_DMAC1CR_DSL_Pos)                       /*!< 0x00080000 */
#define ETH_DMAC1CR_DSL_2                   (0x4UL << ETH_DMAC1CR_DSL_Pos)                       /*!< 0x00100000 */

/*************  Bit definition for ETH_DMAC1TXCR register  *************/
#define ETH_DMAC1TXCR_ST_Pos                (0U)
#define ETH_DMAC1TXCR_ST_Msk                (0x1UL << ETH_DMAC1TXCR_ST_Pos)                      /*!< 0x00000001 */
#define ETH_DMAC1TXCR_ST                    ETH_DMAC1TXCR_ST_Msk                                /*!< Start or Stop Transmission Command */
#define ETH_DMAC1TXCR_TCW_Pos               (1U)
#define ETH_DMAC1TXCR_TCW_Msk               (0x7UL << ETH_DMAC1TXCR_TCW_Pos)                     /*!< 0x0000000E */
#define ETH_DMAC1TXCR_TCW                   ETH_DMAC1TXCR_TCW_Msk                               /*!< Transmit Channel Weight */
#define ETH_DMAC1TXCR_TCW_0                 (0x1UL << ETH_DMAC1TXCR_TCW_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC1TXCR_TCW_1                 (0x2UL << ETH_DMAC1TXCR_TCW_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC1TXCR_TCW_2                 (0x4UL << ETH_DMAC1TXCR_TCW_Pos)                     /*!< 0x00000008 */
#define ETH_DMAC1TXCR_OSF_Pos               (4U)
#define ETH_DMAC1TXCR_OSF_Msk               (0x1UL << ETH_DMAC1TXCR_OSF_Pos)                     /*!< 0x00000010 */
#define ETH_DMAC1TXCR_OSF                   ETH_DMAC1TXCR_OSF_Msk                               /*!< Operate on Second Packet */
#define ETH_DMAC1TXCR_TSE_Pos               (12U)
#define ETH_DMAC1TXCR_TSE_Msk               (0x1UL << ETH_DMAC1TXCR_TSE_Pos)                     /*!< 0x00001000 */
#define ETH_DMAC1TXCR_TSE                   ETH_DMAC1TXCR_TSE_Msk                               /*!< TCP Segmentation Enabled */
#define ETH_DMAC1TXCR_TXPBL_Pos             (16U)
#define ETH_DMAC1TXCR_TXPBL_Msk             (0x3FUL << ETH_DMAC1TXCR_TXPBL_Pos)                  /*!< 0x003F0000 */
#define ETH_DMAC1TXCR_TXPBL                 ETH_DMAC1TXCR_TXPBL_Msk                             /*!< Transmit Programmable Burst Length */
#define ETH_DMAC1TXCR_TXPBL_0               (0x1UL << ETH_DMAC1TXCR_TXPBL_Pos)                   /*!< 0x00010000 */
#define ETH_DMAC1TXCR_TXPBL_1               (0x2UL << ETH_DMAC1TXCR_TXPBL_Pos)                   /*!< 0x00020000 */
#define ETH_DMAC1TXCR_TXPBL_2               (0x4UL << ETH_DMAC1TXCR_TXPBL_Pos)                   /*!< 0x00040000 */
#define ETH_DMAC1TXCR_TXPBL_3               (0x8UL << ETH_DMAC1TXCR_TXPBL_Pos)                   /*!< 0x00080000 */
#define ETH_DMAC1TXCR_TXPBL_4               (0x10UL << ETH_DMAC1TXCR_TXPBL_Pos)                  /*!< 0x00100000 */
#define ETH_DMAC1TXCR_TXPBL_5               (0x20UL << ETH_DMAC1TXCR_TXPBL_Pos)                  /*!< 0x00200000 */
#define ETH_DMAC1TXCR_TQOS_Pos              (24U)
#define ETH_DMAC1TXCR_TQOS_Msk              (0xFUL << ETH_DMAC1TXCR_TQOS_Pos)                    /*!< 0x0F000000 */
#define ETH_DMAC1TXCR_TQOS                  ETH_DMAC1TXCR_TQOS_Msk                              /*!< Transmit QOS. */
#define ETH_DMAC1TXCR_TQOS_0                (0x1UL << ETH_DMAC1TXCR_TQOS_Pos)                    /*!< 0x01000000 */
#define ETH_DMAC1TXCR_TQOS_1                (0x2UL << ETH_DMAC1TXCR_TQOS_Pos)                    /*!< 0x02000000 */
#define ETH_DMAC1TXCR_TQOS_2                (0x4UL << ETH_DMAC1TXCR_TQOS_Pos)                    /*!< 0x04000000 */
#define ETH_DMAC1TXCR_TQOS_3                (0x8UL << ETH_DMAC1TXCR_TQOS_Pos)                    /*!< 0x08000000 */

/************  Bit definition for ETH_DMAC1TXDLAR register  ************/
#define ETH_DMAC1TXDLAR_TDESLA_Pos          (3U)
#define ETH_DMAC1TXDLAR_TDESLA_Msk          (0x1FFFFFFFUL << ETH_DMAC1TXDLAR_TDESLA_Pos)         /*!< 0xFFFFFFF8 */
#define ETH_DMAC1TXDLAR_TDESLA              ETH_DMAC1TXDLAR_TDESLA_Msk                          /*!< Start of Transmit List */
#define ETH_DMAC1TXDLAR_TDESLA_0            (0x1UL << ETH_DMAC1TXDLAR_TDESLA_Pos)                /*!< 0x00000008 */
#define ETH_DMAC1TXDLAR_TDESLA_1            (0x2UL << ETH_DMAC1TXDLAR_TDESLA_Pos)                /*!< 0x00000010 */
#define ETH_DMAC1TXDLAR_TDESLA_2            (0x4UL << ETH_DMAC1TXDLAR_TDESLA_Pos)                /*!< 0x00000020 */
#define ETH_DMAC1TXDLAR_TDESLA_3            (0x8UL << ETH_DMAC1TXDLAR_TDESLA_Pos)                /*!< 0x00000040 */
#define ETH_DMAC1TXDLAR_TDESLA_4            (0x10UL << ETH_DMAC1TXDLAR_TDESLA_Pos)               /*!< 0x00000080 */
#define ETH_DMAC1TXDLAR_TDESLA_5            (0x20UL << ETH_DMAC1TXDLAR_TDESLA_Pos)               /*!< 0x00000100 */
#define ETH_DMAC1TXDLAR_TDESLA_6            (0x40UL << ETH_DMAC1TXDLAR_TDESLA_Pos)               /*!< 0x00000200 */
#define ETH_DMAC1TXDLAR_TDESLA_7            (0x80UL << ETH_DMAC1TXDLAR_TDESLA_Pos)               /*!< 0x00000400 */
#define ETH_DMAC1TXDLAR_TDESLA_8            (0x100UL << ETH_DMAC1TXDLAR_TDESLA_Pos)              /*!< 0x00000800 */
#define ETH_DMAC1TXDLAR_TDESLA_9            (0x200UL << ETH_DMAC1TXDLAR_TDESLA_Pos)              /*!< 0x00001000 */
#define ETH_DMAC1TXDLAR_TDESLA_10           (0x400UL << ETH_DMAC1TXDLAR_TDESLA_Pos)              /*!< 0x00002000 */
#define ETH_DMAC1TXDLAR_TDESLA_11           (0x800UL << ETH_DMAC1TXDLAR_TDESLA_Pos)              /*!< 0x00004000 */
#define ETH_DMAC1TXDLAR_TDESLA_12           (0x1000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)             /*!< 0x00008000 */
#define ETH_DMAC1TXDLAR_TDESLA_13           (0x2000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)             /*!< 0x00010000 */
#define ETH_DMAC1TXDLAR_TDESLA_14           (0x4000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)             /*!< 0x00020000 */
#define ETH_DMAC1TXDLAR_TDESLA_15           (0x8000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)             /*!< 0x00040000 */
#define ETH_DMAC1TXDLAR_TDESLA_16           (0x10000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)            /*!< 0x00080000 */
#define ETH_DMAC1TXDLAR_TDESLA_17           (0x20000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)            /*!< 0x00100000 */
#define ETH_DMAC1TXDLAR_TDESLA_18           (0x40000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)            /*!< 0x00200000 */
#define ETH_DMAC1TXDLAR_TDESLA_19           (0x80000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)            /*!< 0x00400000 */
#define ETH_DMAC1TXDLAR_TDESLA_20           (0x100000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)           /*!< 0x00800000 */
#define ETH_DMAC1TXDLAR_TDESLA_21           (0x200000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)           /*!< 0x01000000 */
#define ETH_DMAC1TXDLAR_TDESLA_22           (0x400000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)           /*!< 0x02000000 */
#define ETH_DMAC1TXDLAR_TDESLA_23           (0x800000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)           /*!< 0x04000000 */
#define ETH_DMAC1TXDLAR_TDESLA_24           (0x1000000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)          /*!< 0x08000000 */
#define ETH_DMAC1TXDLAR_TDESLA_25           (0x2000000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)          /*!< 0x10000000 */
#define ETH_DMAC1TXDLAR_TDESLA_26           (0x4000000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)          /*!< 0x20000000 */
#define ETH_DMAC1TXDLAR_TDESLA_27           (0x8000000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)          /*!< 0x40000000 */
#define ETH_DMAC1TXDLAR_TDESLA_28           (0x10000000UL << ETH_DMAC1TXDLAR_TDESLA_Pos)         /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC1TXDTPR register  ************/
#define ETH_DMAC1TXDTPR_TDT_Pos             (3U)
#define ETH_DMAC1TXDTPR_TDT_Msk             (0x1FFFFFFFUL << ETH_DMAC1TXDTPR_TDT_Pos)            /*!< 0xFFFFFFF8 */
#define ETH_DMAC1TXDTPR_TDT                 ETH_DMAC1TXDTPR_TDT_Msk                             /*!< Transmit Descriptor Tail Pointer */
#define ETH_DMAC1TXDTPR_TDT_0               (0x1UL << ETH_DMAC1TXDTPR_TDT_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC1TXDTPR_TDT_1               (0x2UL << ETH_DMAC1TXDTPR_TDT_Pos)                   /*!< 0x00000010 */
#define ETH_DMAC1TXDTPR_TDT_2               (0x4UL << ETH_DMAC1TXDTPR_TDT_Pos)                   /*!< 0x00000020 */
#define ETH_DMAC1TXDTPR_TDT_3               (0x8UL << ETH_DMAC1TXDTPR_TDT_Pos)                   /*!< 0x00000040 */
#define ETH_DMAC1TXDTPR_TDT_4               (0x10UL << ETH_DMAC1TXDTPR_TDT_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC1TXDTPR_TDT_5               (0x20UL << ETH_DMAC1TXDTPR_TDT_Pos)                  /*!< 0x00000100 */
#define ETH_DMAC1TXDTPR_TDT_6               (0x40UL << ETH_DMAC1TXDTPR_TDT_Pos)                  /*!< 0x00000200 */
#define ETH_DMAC1TXDTPR_TDT_7               (0x80UL << ETH_DMAC1TXDTPR_TDT_Pos)                  /*!< 0x00000400 */
#define ETH_DMAC1TXDTPR_TDT_8               (0x100UL << ETH_DMAC1TXDTPR_TDT_Pos)                 /*!< 0x00000800 */
#define ETH_DMAC1TXDTPR_TDT_9               (0x200UL << ETH_DMAC1TXDTPR_TDT_Pos)                 /*!< 0x00001000 */
#define ETH_DMAC1TXDTPR_TDT_10              (0x400UL << ETH_DMAC1TXDTPR_TDT_Pos)                 /*!< 0x00002000 */
#define ETH_DMAC1TXDTPR_TDT_11              (0x800UL << ETH_DMAC1TXDTPR_TDT_Pos)                 /*!< 0x00004000 */
#define ETH_DMAC1TXDTPR_TDT_12              (0x1000UL << ETH_DMAC1TXDTPR_TDT_Pos)                /*!< 0x00008000 */
#define ETH_DMAC1TXDTPR_TDT_13              (0x2000UL << ETH_DMAC1TXDTPR_TDT_Pos)                /*!< 0x00010000 */
#define ETH_DMAC1TXDTPR_TDT_14              (0x4000UL << ETH_DMAC1TXDTPR_TDT_Pos)                /*!< 0x00020000 */
#define ETH_DMAC1TXDTPR_TDT_15              (0x8000UL << ETH_DMAC1TXDTPR_TDT_Pos)                /*!< 0x00040000 */
#define ETH_DMAC1TXDTPR_TDT_16              (0x10000UL << ETH_DMAC1TXDTPR_TDT_Pos)               /*!< 0x00080000 */
#define ETH_DMAC1TXDTPR_TDT_17              (0x20000UL << ETH_DMAC1TXDTPR_TDT_Pos)               /*!< 0x00100000 */
#define ETH_DMAC1TXDTPR_TDT_18              (0x40000UL << ETH_DMAC1TXDTPR_TDT_Pos)               /*!< 0x00200000 */
#define ETH_DMAC1TXDTPR_TDT_19              (0x80000UL << ETH_DMAC1TXDTPR_TDT_Pos)               /*!< 0x00400000 */
#define ETH_DMAC1TXDTPR_TDT_20              (0x100000UL << ETH_DMAC1TXDTPR_TDT_Pos)              /*!< 0x00800000 */
#define ETH_DMAC1TXDTPR_TDT_21              (0x200000UL << ETH_DMAC1TXDTPR_TDT_Pos)              /*!< 0x01000000 */
#define ETH_DMAC1TXDTPR_TDT_22              (0x400000UL << ETH_DMAC1TXDTPR_TDT_Pos)              /*!< 0x02000000 */
#define ETH_DMAC1TXDTPR_TDT_23              (0x800000UL << ETH_DMAC1TXDTPR_TDT_Pos)              /*!< 0x04000000 */
#define ETH_DMAC1TXDTPR_TDT_24              (0x1000000UL << ETH_DMAC1TXDTPR_TDT_Pos)             /*!< 0x08000000 */
#define ETH_DMAC1TXDTPR_TDT_25              (0x2000000UL << ETH_DMAC1TXDTPR_TDT_Pos)             /*!< 0x10000000 */
#define ETH_DMAC1TXDTPR_TDT_26              (0x4000000UL << ETH_DMAC1TXDTPR_TDT_Pos)             /*!< 0x20000000 */
#define ETH_DMAC1TXDTPR_TDT_27              (0x8000000UL << ETH_DMAC1TXDTPR_TDT_Pos)             /*!< 0x40000000 */
#define ETH_DMAC1TXDTPR_TDT_28              (0x10000000UL << ETH_DMAC1TXDTPR_TDT_Pos)            /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC1TXRLR register  *************/
#define ETH_DMAC1TXRLR_TDRL_Pos             (0U)
#define ETH_DMAC1TXRLR_TDRL_Msk             (0x3FFUL << ETH_DMAC1TXRLR_TDRL_Pos)                 /*!< 0x000003FF */
#define ETH_DMAC1TXRLR_TDRL                 ETH_DMAC1TXRLR_TDRL_Msk                             /*!< Transmit Descriptor Ring Length */
#define ETH_DMAC1TXRLR_TDRL_0               (0x1UL << ETH_DMAC1TXRLR_TDRL_Pos)                   /*!< 0x00000001 */
#define ETH_DMAC1TXRLR_TDRL_1               (0x2UL << ETH_DMAC1TXRLR_TDRL_Pos)                   /*!< 0x00000002 */
#define ETH_DMAC1TXRLR_TDRL_2               (0x4UL << ETH_DMAC1TXRLR_TDRL_Pos)                   /*!< 0x00000004 */
#define ETH_DMAC1TXRLR_TDRL_3               (0x8UL << ETH_DMAC1TXRLR_TDRL_Pos)                   /*!< 0x00000008 */
#define ETH_DMAC1TXRLR_TDRL_4               (0x10UL << ETH_DMAC1TXRLR_TDRL_Pos)                  /*!< 0x00000010 */
#define ETH_DMAC1TXRLR_TDRL_5               (0x20UL << ETH_DMAC1TXRLR_TDRL_Pos)                  /*!< 0x00000020 */
#define ETH_DMAC1TXRLR_TDRL_6               (0x40UL << ETH_DMAC1TXRLR_TDRL_Pos)                  /*!< 0x00000040 */
#define ETH_DMAC1TXRLR_TDRL_7               (0x80UL << ETH_DMAC1TXRLR_TDRL_Pos)                  /*!< 0x00000080 */
#define ETH_DMAC1TXRLR_TDRL_8               (0x100UL << ETH_DMAC1TXRLR_TDRL_Pos)                 /*!< 0x00000100 */
#define ETH_DMAC1TXRLR_TDRL_9               (0x200UL << ETH_DMAC1TXRLR_TDRL_Pos)                 /*!< 0x00000200 */

/*************  Bit definition for ETH_DMAC1IER register  **************/
#define ETH_DMAC1IER_TIE_Pos                (0U)
#define ETH_DMAC1IER_TIE_Msk                (0x1UL << ETH_DMAC1IER_TIE_Pos)                      /*!< 0x00000001 */
#define ETH_DMAC1IER_TIE                    ETH_DMAC1IER_TIE_Msk                                /*!< Transmit Interrupt Enable */
#define ETH_DMAC1IER_TXSE_Pos               (1U)
#define ETH_DMAC1IER_TXSE_Msk               (0x1UL << ETH_DMAC1IER_TXSE_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC1IER_TXSE                   ETH_DMAC1IER_TXSE_Msk                               /*!< Transmit Stopped Enable */
#define ETH_DMAC1IER_TBUE_Pos               (2U)
#define ETH_DMAC1IER_TBUE_Msk               (0x1UL << ETH_DMAC1IER_TBUE_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC1IER_TBUE                   ETH_DMAC1IER_TBUE_Msk                               /*!< Transmit Buffer Unavailable Enable */
#define ETH_DMAC1IER_RIE_Pos                (6U)
#define ETH_DMAC1IER_RIE_Msk                (0x1UL << ETH_DMAC1IER_RIE_Pos)                      /*!< 0x00000040 */
#define ETH_DMAC1IER_RIE                    ETH_DMAC1IER_RIE_Msk                                /*!< Receive Interrupt Enable */
#define ETH_DMAC1IER_RBUE_Pos               (7U)
#define ETH_DMAC1IER_RBUE_Msk               (0x1UL << ETH_DMAC1IER_RBUE_Pos)                     /*!< 0x00000080 */
#define ETH_DMAC1IER_RBUE                   ETH_DMAC1IER_RBUE_Msk                               /*!< Receive Buffer Unavailable Enable */
#define ETH_DMAC1IER_RSE_Pos                (8U)
#define ETH_DMAC1IER_RSE_Msk                (0x1UL << ETH_DMAC1IER_RSE_Pos)                      /*!< 0x00000100 */
#define ETH_DMAC1IER_RSE                    ETH_DMAC1IER_RSE_Msk                                /*!< Receive Stopped Enable */
#define ETH_DMAC1IER_RWTE_Pos               (9U)
#define ETH_DMAC1IER_RWTE_Msk               (0x1UL << ETH_DMAC1IER_RWTE_Pos)                     /*!< 0x00000200 */
#define ETH_DMAC1IER_RWTE                   ETH_DMAC1IER_RWTE_Msk                               /*!< Receive Watchdog Timeout Enable */
#define ETH_DMAC1IER_ETIE_Pos               (10U)
#define ETH_DMAC1IER_ETIE_Msk               (0x1UL << ETH_DMAC1IER_ETIE_Pos)                     /*!< 0x00000400 */
#define ETH_DMAC1IER_ETIE                   ETH_DMAC1IER_ETIE_Msk                               /*!< Early Transmit Interrupt Enable */
#define ETH_DMAC1IER_ERIE_Pos               (11U)
#define ETH_DMAC1IER_ERIE_Msk               (0x1UL << ETH_DMAC1IER_ERIE_Pos)                     /*!< 0x00000800 */
#define ETH_DMAC1IER_ERIE                   ETH_DMAC1IER_ERIE_Msk                               /*!< Early Receive Interrupt Enable */
#define ETH_DMAC1IER_FBEE_Pos               (12U)
#define ETH_DMAC1IER_FBEE_Msk               (0x1UL << ETH_DMAC1IER_FBEE_Pos)                     /*!< 0x00001000 */
#define ETH_DMAC1IER_FBEE                   ETH_DMAC1IER_FBEE_Msk                               /*!< Fatal Bus Error Enable */
#define ETH_DMAC1IER_CDEE_Pos               (13U)
#define ETH_DMAC1IER_CDEE_Msk               (0x1UL << ETH_DMAC1IER_CDEE_Pos)                     /*!< 0x00002000 */
#define ETH_DMAC1IER_CDEE                   ETH_DMAC1IER_CDEE_Msk                               /*!< Context Descriptor Error Enable */
#define ETH_DMAC1IER_AIE_Pos                (14U)
#define ETH_DMAC1IER_AIE_Msk                (0x1UL << ETH_DMAC1IER_AIE_Pos)                      /*!< 0x00004000 */
#define ETH_DMAC1IER_AIE                    ETH_DMAC1IER_AIE_Msk                                /*!< Abnormal Interrupt Summary Enable */
#define ETH_DMAC1IER_NIE_Pos                (15U)
#define ETH_DMAC1IER_NIE_Msk                (0x1UL << ETH_DMAC1IER_NIE_Pos)                      /*!< 0x00008000 */
#define ETH_DMAC1IER_NIE                    ETH_DMAC1IER_NIE_Msk                                /*!< Normal Interrupt Summary Enable */

/************  Bit definition for ETH_DMAC1SFCSR register  *************/
#define ETH_DMAC1SFCSR_ESC_Pos              (0U)
#define ETH_DMAC1SFCSR_ESC_Msk              (0x1UL << ETH_DMAC1SFCSR_ESC_Pos)                    /*!< 0x00000001 */
#define ETH_DMAC1SFCSR_ESC                  ETH_DMAC1SFCSR_ESC_Msk                              /*!< Enable Slot Comparison */
#define ETH_DMAC1SFCSR_ASC_Pos              (1U)
#define ETH_DMAC1SFCSR_ASC_Msk              (0x1UL << ETH_DMAC1SFCSR_ASC_Pos)                    /*!< 0x00000002 */
#define ETH_DMAC1SFCSR_ASC                  ETH_DMAC1SFCSR_ASC_Msk                              /*!< Advance Slot Check */
#define ETH_DMAC1SFCSR_RSN_Pos              (16U)
#define ETH_DMAC1SFCSR_RSN_Msk              (0xFUL << ETH_DMAC1SFCSR_RSN_Pos)                    /*!< 0x000F0000 */
#define ETH_DMAC1SFCSR_RSN                  ETH_DMAC1SFCSR_RSN_Msk                              /*!< Reference Slot Number */
#define ETH_DMAC1SFCSR_RSN_0                (0x1UL << ETH_DMAC1SFCSR_RSN_Pos)                    /*!< 0x00010000 */
#define ETH_DMAC1SFCSR_RSN_1                (0x2UL << ETH_DMAC1SFCSR_RSN_Pos)                    /*!< 0x00020000 */
#define ETH_DMAC1SFCSR_RSN_2                (0x4UL << ETH_DMAC1SFCSR_RSN_Pos)                    /*!< 0x00040000 */
#define ETH_DMAC1SFCSR_RSN_3                (0x8UL << ETH_DMAC1SFCSR_RSN_Pos)                    /*!< 0x00080000 */

/************  Bit definition for ETH_DMAC1CATXDR register  ************/
#define ETH_DMAC1CATXDR_CURTDESAPTR_Pos     (0U)
#define ETH_DMAC1CATXDR_CURTDESAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC1CATXDR_CURTDESAPTR         ETH_DMAC1CATXDR_CURTDESAPTR_Msk                     /*!< Application Transmit Descriptor Address Pointer */
#define ETH_DMAC1CATXDR_CURTDESAPTR_0       (0x1UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_1       (0x2UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_2       (0x4UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_3       (0x8UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_4       (0x10UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_5       (0x20UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_6       (0x40UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_7       (0x80UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_8       (0x100UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_9       (0x200UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_10      (0x400UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_11      (0x800UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_12      (0x1000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_13      (0x2000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_14      (0x4000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_15      (0x8000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_16      (0x10000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_17      (0x20000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_18      (0x40000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_19      (0x80000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_20      (0x100000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_21      (0x200000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_22      (0x400000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_23      (0x800000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_24      (0x1000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_25      (0x2000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_26      (0x4000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_27      (0x8000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_28      (0x10000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_29      (0x20000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_30      (0x40000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC1CATXDR_CURTDESAPTR_31      (0x80000000UL << ETH_DMAC1CATXDR_CURTDESAPTR_Pos)    /*!< 0x80000000 */

/************  Bit definition for ETH_DMAC1CATXBR register  ************/
#define ETH_DMAC1CATXBR_CURTBUFAPTR_Pos     (0U)
#define ETH_DMAC1CATXBR_CURTBUFAPTR_Msk     (0xFFFFFFFFUL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)    /*!< 0xFFFFFFFF */
#define ETH_DMAC1CATXBR_CURTBUFAPTR         ETH_DMAC1CATXBR_CURTBUFAPTR_Msk                     /*!< Application Transmit Buffer Address Pointer */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_0       (0x1UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000001 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_1       (0x2UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000002 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_2       (0x4UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000004 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_3       (0x8UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)           /*!< 0x00000008 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_4       (0x10UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000010 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_5       (0x20UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000020 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_6       (0x40UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000040 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_7       (0x80UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)          /*!< 0x00000080 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_8       (0x100UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000100 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_9       (0x200UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000200 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_10      (0x400UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000400 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_11      (0x800UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)         /*!< 0x00000800 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_12      (0x1000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00001000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_13      (0x2000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00002000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_14      (0x4000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00004000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_15      (0x8000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)        /*!< 0x00008000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_16      (0x10000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00010000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_17      (0x20000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00020000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_18      (0x40000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00040000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_19      (0x80000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)       /*!< 0x00080000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_20      (0x100000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00100000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_21      (0x200000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00200000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_22      (0x400000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00400000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_23      (0x800000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)      /*!< 0x00800000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_24      (0x1000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)     /*!< 0x01000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_25      (0x2000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)     /*!< 0x02000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_26      (0x4000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)     /*!< 0x04000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_27      (0x8000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)     /*!< 0x08000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_28      (0x10000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)    /*!< 0x10000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_29      (0x20000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)    /*!< 0x20000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_30      (0x40000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)    /*!< 0x40000000 */
#define ETH_DMAC1CATXBR_CURTBUFAPTR_31      (0x80000000UL << ETH_DMAC1CATXBR_CURTBUFAPTR_Pos)    /*!< 0x80000000 */

/**************  Bit definition for ETH_DMAC1SR register  **************/
#define ETH_DMAC1SR_TI_Pos                  (0U)
#define ETH_DMAC1SR_TI_Msk                  (0x1UL << ETH_DMAC1SR_TI_Pos)                        /*!< 0x00000001 */
#define ETH_DMAC1SR_TI                      ETH_DMAC1SR_TI_Msk                                  /*!< Transmit Interrupt */
#define ETH_DMAC1SR_TPS_Pos                 (1U)
#define ETH_DMAC1SR_TPS_Msk                 (0x1UL << ETH_DMAC1SR_TPS_Pos)                       /*!< 0x00000002 */
#define ETH_DMAC1SR_TPS                     ETH_DMAC1SR_TPS_Msk                                 /*!< Transmit Process Stopped */
#define ETH_DMAC1SR_TBU_Pos                 (2U)
#define ETH_DMAC1SR_TBU_Msk                 (0x1UL << ETH_DMAC1SR_TBU_Pos)                       /*!< 0x00000004 */
#define ETH_DMAC1SR_TBU                     ETH_DMAC1SR_TBU_Msk                                 /*!< Transmit Buffer Unavailable */
#define ETH_DMAC1SR_RI_Pos                  (6U)
#define ETH_DMAC1SR_RI_Msk                  (0x1UL << ETH_DMAC1SR_RI_Pos)                        /*!< 0x00000040 */
#define ETH_DMAC1SR_RI                      ETH_DMAC1SR_RI_Msk                                  /*!< Receive Interrupt */
#define ETH_DMAC1SR_RBU_Pos                 (7U)
#define ETH_DMAC1SR_RBU_Msk                 (0x1UL << ETH_DMAC1SR_RBU_Pos)                       /*!< 0x00000080 */
#define ETH_DMAC1SR_RBU                     ETH_DMAC1SR_RBU_Msk                                 /*!< Receive Buffer Unavailable */
#define ETH_DMAC1SR_RPS_Pos                 (8U)
#define ETH_DMAC1SR_RPS_Msk                 (0x1UL << ETH_DMAC1SR_RPS_Pos)                       /*!< 0x00000100 */
#define ETH_DMAC1SR_RPS                     ETH_DMAC1SR_RPS_Msk                                 /*!< Receive Process Stopped */
#define ETH_DMAC1SR_RWT_Pos                 (9U)
#define ETH_DMAC1SR_RWT_Msk                 (0x1UL << ETH_DMAC1SR_RWT_Pos)                       /*!< 0x00000200 */
#define ETH_DMAC1SR_RWT                     ETH_DMAC1SR_RWT_Msk                                 /*!< Receive Watchdog Timeout */
#define ETH_DMAC1SR_ETI_Pos                 (10U)
#define ETH_DMAC1SR_ETI_Msk                 (0x1UL << ETH_DMAC1SR_ETI_Pos)                       /*!< 0x00000400 */
#define ETH_DMAC1SR_ETI                     ETH_DMAC1SR_ETI_Msk                                 /*!< Early Transmit Interrupt */
#define ETH_DMAC1SR_ERI_Pos                 (11U)
#define ETH_DMAC1SR_ERI_Msk                 (0x1UL << ETH_DMAC1SR_ERI_Pos)                       /*!< 0x00000800 */
#define ETH_DMAC1SR_ERI                     ETH_DMAC1SR_ERI_Msk                                 /*!< Early Receive Interrupt */
#define ETH_DMAC1SR_FBE_Pos                 (12U)
#define ETH_DMAC1SR_FBE_Msk                 (0x1UL << ETH_DMAC1SR_FBE_Pos)                       /*!< 0x00001000 */
#define ETH_DMAC1SR_FBE                     ETH_DMAC1SR_FBE_Msk                                 /*!< Fatal Bus Error */
#define ETH_DMAC1SR_CDE_Pos                 (13U)
#define ETH_DMAC1SR_CDE_Msk                 (0x1UL << ETH_DMAC1SR_CDE_Pos)                       /*!< 0x00002000 */
#define ETH_DMAC1SR_CDE                     ETH_DMAC1SR_CDE_Msk                                 /*!< Context Descriptor Error */
#define ETH_DMAC1SR_AIS_Pos                 (14U)
#define ETH_DMAC1SR_AIS_Msk                 (0x1UL << ETH_DMAC1SR_AIS_Pos)                       /*!< 0x00004000 */
#define ETH_DMAC1SR_AIS                     ETH_DMAC1SR_AIS_Msk                                 /*!< Abnormal Interrupt Summary */
#define ETH_DMAC1SR_NIS_Pos                 (15U)
#define ETH_DMAC1SR_NIS_Msk                 (0x1UL << ETH_DMAC1SR_NIS_Pos)                       /*!< 0x00008000 */
#define ETH_DMAC1SR_NIS                     ETH_DMAC1SR_NIS_Msk                                 /*!< Normal Interrupt Summary */
#define ETH_DMAC1SR_TEB_Pos                 (16U)
#define ETH_DMAC1SR_TEB_Msk                 (0x7UL << ETH_DMAC1SR_TEB_Pos)                       /*!< 0x00070000 */
#define ETH_DMAC1SR_TEB                     ETH_DMAC1SR_TEB_Msk                                 /*!< Tx DMA Error Bits */
#define ETH_DMAC1SR_TEB_0                   (0x1UL << ETH_DMAC1SR_TEB_Pos)                       /*!< 0x00010000 */
#define ETH_DMAC1SR_TEB_1                   (0x2UL << ETH_DMAC1SR_TEB_Pos)                       /*!< 0x00020000 */
#define ETH_DMAC1SR_TEB_2                   (0x4UL << ETH_DMAC1SR_TEB_Pos)                       /*!< 0x00040000 */
#define ETH_DMAC1SR_REB_Pos                 (19U)
#define ETH_DMAC1SR_REB_Msk                 (0x7UL << ETH_DMAC1SR_REB_Pos)                       /*!< 0x00380000 */
#define ETH_DMAC1SR_REB                     ETH_DMAC1SR_REB_Msk                                 /*!< Rx DMA Error Bits */
#define ETH_DMAC1SR_REB_0                   (0x1UL << ETH_DMAC1SR_REB_Pos)                       /*!< 0x00080000 */
#define ETH_DMAC1SR_REB_1                   (0x2UL << ETH_DMAC1SR_REB_Pos)                       /*!< 0x00100000 */
#define ETH_DMAC1SR_REB_2                   (0x4UL << ETH_DMAC1SR_REB_Pos)                       /*!< 0x00200000 */

/*************  Bit definition for ETH_DMAC1MFCR register  *************/
#define ETH_DMAC1MFCR_MFC_Pos               (0U)
#define ETH_DMAC1MFCR_MFC_Msk               (0x7FFUL << ETH_DMAC1MFCR_MFC_Pos)                   /*!< 0x000007FF */
#define ETH_DMAC1MFCR_MFC                   ETH_DMAC1MFCR_MFC_Msk                               /*!< Dropped Packet Counters */
#define ETH_DMAC1MFCR_MFC_0                 (0x1UL << ETH_DMAC1MFCR_MFC_Pos)                     /*!< 0x00000001 */
#define ETH_DMAC1MFCR_MFC_1                 (0x2UL << ETH_DMAC1MFCR_MFC_Pos)                     /*!< 0x00000002 */
#define ETH_DMAC1MFCR_MFC_2                 (0x4UL << ETH_DMAC1MFCR_MFC_Pos)                     /*!< 0x00000004 */
#define ETH_DMAC1MFCR_MFC_3                 (0x8UL << ETH_DMAC1MFCR_MFC_Pos)                     /*!< 0x00000008 */
#define ETH_DMAC1MFCR_MFC_4                 (0x10UL << ETH_DMAC1MFCR_MFC_Pos)                    /*!< 0x00000010 */
#define ETH_DMAC1MFCR_MFC_5                 (0x20UL << ETH_DMAC1MFCR_MFC_Pos)                    /*!< 0x00000020 */
#define ETH_DMAC1MFCR_MFC_6                 (0x40UL << ETH_DMAC1MFCR_MFC_Pos)                    /*!< 0x00000040 */
#define ETH_DMAC1MFCR_MFC_7                 (0x80UL << ETH_DMAC1MFCR_MFC_Pos)                    /*!< 0x00000080 */
#define ETH_DMAC1MFCR_MFC_8                 (0x100UL << ETH_DMAC1MFCR_MFC_Pos)                   /*!< 0x00000100 */
#define ETH_DMAC1MFCR_MFC_9                 (0x200UL << ETH_DMAC1MFCR_MFC_Pos)                   /*!< 0x00000200 */
#define ETH_DMAC1MFCR_MFC_10                (0x400UL << ETH_DMAC1MFCR_MFC_Pos)                   /*!< 0x00000400 */
#define ETH_DMAC1MFCR_MFCO_Pos              (15U)
#define ETH_DMAC1MFCR_MFCO_Msk              (0x1UL << ETH_DMAC1MFCR_MFCO_Pos)                    /*!< 0x00008000 */
#define ETH_DMAC1MFCR_MFCO                  ETH_DMAC1MFCR_MFCO_Msk                              /*!< Overflow status of the MFC Counter */

/******************************************************************************/
/*                                                                            */
/*                Ethernet ACM MSG Registers bits definitions                 */
/*                                                                            */
/******************************************************************************/

/******************  Bit definition for ETH_ACMMSG_MSGBUFDESC register  *******************/
#define ETH_ACMMSG_MSGBUFDESC_OFFSET_Pos    (0U)
#define ETH_ACMMSG_MSGBUFDESC_OFFSET_Msk    (0xFFFFUL << ETH_ACMMSG_MSGBUFDESC_OFFSET_Pos)         /*!< 0x0000FFFF */
#define ETH_ACMMSG_MSGBUFDESC_OFFSET        ETH_ACMMSG_MSGBUFDESC_OFFSET_Msk                      /*!< Buffer offset */
#define ETH_ACMMSG_MSGBUFDESC_RST_Pos       (19U)
#define ETH_ACMMSG_MSGBUFDESC_RST_Msk       (0x1UL << ETH_ACMMSG_MSGBUFDESC_RST_Pos)               /*!< 0x00080000 */
#define ETH_ACMMSG_MSGBUFDESC_RST           ETH_ACMMSG_MSGBUFDESC_RST_Msk                         /*!< Buffer reset */
#define ETH_ACMMSG_MSGBUFDESC_TYPE_Pos      (20U)
#define ETH_ACMMSG_MSGBUFDESC_TYPE_Msk      (0x1UL << ETH_ACMMSG_MSGBUFDESC_TYPE_Pos)              /*!< 0x00100000 */
#define ETH_ACMMSG_MSGBUFDESC_TYPE          ETH_ACMMSG_MSGBUFDESC_TYPE_Msk                        /*!< Buffer type */
#define ETH_ACMMSG_MSGBUFDESC_SUBSIZE_Pos   (21U)
#define ETH_ACMMSG_MSGBUFDESC_SUBSIZE_Msk   (0x1FFUL << ETH_ACMMSG_MSGBUFDESC_SUBSIZE_Pos)         /*!< 0x3FE00000 */
#define ETH_ACMMSG_MSGBUFDESC_SUBSIZE       ETH_ACMMSG_MSGBUFDESC_SUBSIZE_Msk                     /*!< Sub Buffer size */
#define ETH_ACMMSG_MSGBUFDESC_VALID_Pos     (31U)
#define ETH_ACMMSG_MSGBUFDESC_VALID_Msk     (0x1UL << ETH_ACMMSG_MSGBUFDESC_VALID_Pos)             /*!< 0x80000000 */
#define ETH_ACMMSG_MSGBUFDESC_VALID         ETH_ACMMSG_MSGBUFDESC_VALID_Msk                       /*!< Valid */

/******************  Bit definition for ETH_ACMMSG_LOCKCTRLLOW register  *******************/
#define ETH_ACMMSG_LOCKCTRLLOW_Pos          (0U)
#define ETH_ACMMSG_LOCKCTRLLOW_Msk          (0xFFFFFFFFUL << ETHH_ACMMSG_LOCKCTRLLOW_Pos)   /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_LOCKCTRLLOW              ETHH_ACMMSG_LOCKCTRLLOW_Msk                    /*!< Locking control low */
#define ETH_ACMMSG_LOCKCTRLLOW_0            (0x1UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_LOCKCTRLLOW_1            (0x2UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_LOCKCTRLLOW_2            (0x4UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_LOCKCTRLLOW_3            (0x8UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_LOCKCTRLLOW_4            (0x10UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_LOCKCTRLLOW_5            (0x20UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_LOCKCTRLLOW_6            (0x40UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_LOCKCTRLLOW_7            (0x80UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_LOCKCTRLLOW_8            (0x100UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_LOCKCTRLLOW_9            (0x200UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_LOCKCTRLLOW_10           (0x400UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_LOCKCTRLLOW_11           (0x800UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_LOCKCTRLLOW_12           (0x1000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_LOCKCTRLLOW_13           (0x2000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_LOCKCTRLLOW_14           (0x4000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_LOCKCTRLLOW_15           (0x8000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_LOCKCTRLLOW_16           (0x10000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_LOCKCTRLLOW_17           (0x20000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_LOCKCTRLLOW_18           (0x40000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_LOCKCTRLLOW_19           (0x80000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_LOCKCTRLLOW_20           (0x100000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_LOCKCTRLLOW_21           (0x200000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_LOCKCTRLLOW_22           (0x400000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_LOCKCTRLLOW_23           (0x800000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_LOCKCTRLLOW_24           (0x1000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_25           (0x2000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_26           (0x4000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_27           (0x8000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_28           (0x10000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_29           (0x20000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_30           (0x40000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_LOCKCTRLLOW_31           (0x80000000UL << ETH_ACMMSG_LOCKCTRLLOW_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_LOCKCTRLHIGH register  *******************/
#define ETH_ACMMSG_LOCKCTRLHIGH_Pos         (0U)
#define ETH_ACMMSG_LOCKCTRLHIGH_Msk         (0xFFFFFFFFUL << ETHH_ACMMSG_LOCKCTRLHIGH_Pos)   /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_LOCKCTRLHIGH             ETHH_ACMMSG_LOCKCTRLHIGH_Msk                    /*!< Locking control high */
#define ETH_ACMMSG_LOCKCTRLHIGH_0           (0x1UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_LOCKCTRLHIGH_1           (0x2UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_LOCKCTRLHIGH_2           (0x4UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_LOCKCTRLHIGH_3           (0x8UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_LOCKCTRLHIGH_4           (0x10UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_LOCKCTRLHIGH_5           (0x20UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_LOCKCTRLHIGH_6           (0x40UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_LOCKCTRLHIGH_7           (0x80UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_LOCKCTRLHIGH_8           (0x100UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_LOCKCTRLHIGH_9           (0x200UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_LOCKCTRLHIGH_10          (0x400UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_LOCKCTRLHIGH_11          (0x800UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_LOCKCTRLHIGH_12          (0x1000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_13          (0x2000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_14          (0x4000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_15          (0x8000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_16          (0x10000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_17          (0x20000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_18          (0x40000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_19          (0x80000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_20          (0x100000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_21          (0x200000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_22          (0x400000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_23          (0x800000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_24          (0x1000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_25          (0x2000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_26          (0x4000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_27          (0x8000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_28          (0x10000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_29          (0x20000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_30          (0x40000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_LOCKCTRLHIGH_31          (0x80000000UL << ETH_ACMMSG_LOCKCTRLHIGH_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_RESETCTRLLOW register  *******************/
#define ETH_ACMMSG_RESETCTRLLOW_Pos         (0U)
#define ETH_ACMMSG_RESETCTRLLOW_Msk         (0xFFFFFFFFUL << ETH_ACMMSG_RESETCTRLLOW_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_RESETCTRLLOW             ETH_ACMMSG_RESETCTRLLOW_Msk                     /*!< Reset control low */
#define ETH_ACMMSG_RESETCTRLLOW_0           (0x1UL << ETH_ACMMSG_RESETCTRLLOW_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_RESETCTRLLOW_1           (0x2UL << ETH_ACMMSG_RESETCTRLLOW_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_RESETCTRLLOW_2           (0x4UL << ETH_ACMMSG_RESETCTRLLOW_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_RESETCTRLLOW_3           (0x8UL << ETH_ACMMSG_RESETCTRLLOW_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_RESETCTRLLOW_4           (0x10UL << ETH_ACMMSG_RESETCTRLLOW_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_RESETCTRLLOW_5           (0x20UL << ETH_ACMMSG_RESETCTRLLOW_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_RESETCTRLLOW_6           (0x40UL << ETH_ACMMSG_RESETCTRLLOW_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_RESETCTRLLOW_7           (0x80UL << ETH_ACMMSG_RESETCTRLLOW_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_RESETCTRLLOW_8           (0x100UL << ETH_ACMMSG_RESETCTRLLOW_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_RESETCTRLLOW_9           (0x200UL << ETH_ACMMSG_RESETCTRLLOW_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_RESETCTRLLOW_10          (0x400UL << ETH_ACMMSG_RESETCTRLLOW_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_RESETCTRLLOW_11          (0x800UL << ETH_ACMMSG_RESETCTRLLOW_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_RESETCTRLLOW_12          (0x1000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_RESETCTRLLOW_13          (0x2000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_RESETCTRLLOW_14          (0x4000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_RESETCTRLLOW_15          (0x8000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_RESETCTRLLOW_16          (0x10000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_RESETCTRLLOW_17          (0x20000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_RESETCTRLLOW_18          (0x40000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_RESETCTRLLOW_19          (0x80000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_RESETCTRLLOW_20          (0x100000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_RESETCTRLLOW_21          (0x200000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_RESETCTRLLOW_22          (0x400000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_RESETCTRLLOW_23          (0x800000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_RESETCTRLLOW_24          (0x1000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_RESETCTRLLOW_25          (0x2000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_RESETCTRLLOW_26          (0x4000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_RESETCTRLLOW_27          (0x8000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_RESETCTRLLOW_28          (0x10000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_RESETCTRLLOW_29          (0x20000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_RESETCTRLLOW_30          (0x40000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_RESETCTRLLOW_31          (0x80000000UL << ETH_ACMMSG_RESETCTRLLOW_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_RESETCTRLHIGH register  *******************/
#define ETH_ACMMSG_RESETCTRLHIGH_Pos        (0U)
#define ETH_ACMMSG_RESETCTRLHIGH_Msk        (0xFFFFFFFFUL << ETH_ACMMSG_RESETCTRLHIGH_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_RESETCTRLHIGH            ETH_ACMMSG_RESETCTRLHIGH_Msk                     /*!< Reset control high */
#define ETH_ACMMSG_RESETCTRLHIGH_0          (0x1UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_RESETCTRLHIGH_1          (0x2UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_RESETCTRLHIGH_2          (0x4UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_RESETCTRLHIGH_3          (0x8UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_RESETCTRLHIGH_4          (0x10UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_RESETCTRLHIGH_5          (0x20UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_RESETCTRLHIGH_6          (0x40UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_RESETCTRLHIGH_7          (0x80UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_RESETCTRLHIGH_8          (0x100UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_RESETCTRLHIGH_9          (0x200UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_RESETCTRLHIGH_10         (0x400UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_RESETCTRLHIGH_11         (0x800UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_RESETCTRLHIGH_12         (0x1000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_RESETCTRLHIGH_13         (0x2000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_RESETCTRLHIGH_14         (0x4000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_RESETCTRLHIGH_15         (0x8000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_RESETCTRLHIGH_16         (0x10000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_RESETCTRLHIGH_17         (0x20000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_RESETCTRLHIGH_18         (0x40000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_RESETCTRLHIGH_19         (0x80000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_RESETCTRLHIGH_20         (0x100000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_RESETCTRLHIGH_21         (0x200000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_RESETCTRLHIGH_22         (0x400000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_RESETCTRLHIGH_23         (0x800000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_RESETCTRLHIGH_24         (0x1000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_25         (0x2000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_26         (0x4000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_27         (0x8000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_28         (0x10000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_29         (0x20000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_30         (0x40000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_RESETCTRLHIGH_31         (0x80000000UL << ETH_ACMMSG_RESETCTRLHIGH_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_IRQSTATUSLOW register  *******************/
#define ETH_ACMMSG_IRQSTATUSLOW_Pos         (0U)
#define ETH_ACMMSG_IRQSTATUSLOW_Msk         (0xFFFFFFFFUL << ETH_ACMMSG_IRQSTATUSLOW_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_IRQSTATUSLOW             ETH_ACMMSG_IRQSTATUSLOW_Msk                     /*!< IRQ Status low */
#define ETH_ACMMSG_IRQSTATUSLOW_0           (0x1UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_IRQSTATUSLOW_1           (0x2UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_IRQSTATUSLOW_2           (0x4UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_IRQSTATUSLOW_3           (0x8UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_IRQSTATUSLOW_4           (0x10UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_IRQSTATUSLOW_5           (0x20UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_IRQSTATUSLOW_6           (0x40UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_IRQSTATUSLOW_7           (0x80UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_IRQSTATUSLOW_8           (0x100UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_IRQSTATUSLOW_9           (0x200UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_IRQSTATUSLOW_10          (0x400UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_IRQSTATUSLOW_11          (0x800UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_IRQSTATUSLOW_12          (0x1000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_IRQSTATUSLOW_13          (0x2000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_IRQSTATUSLOW_14          (0x4000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_IRQSTATUSLOW_15          (0x8000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_IRQSTATUSLOW_16          (0x10000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_IRQSTATUSLOW_17          (0x20000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_IRQSTATUSLOW_18          (0x40000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_IRQSTATUSLOW_19          (0x80000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_IRQSTATUSLOW_20          (0x100000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_IRQSTATUSLOW_21          (0x200000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_IRQSTATUSLOW_22          (0x400000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_IRQSTATUSLOW_23          (0x800000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_IRQSTATUSLOW_24          (0x1000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_25          (0x2000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_26          (0x4000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_27          (0x8000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_28          (0x10000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_29          (0x20000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_30          (0x40000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_IRQSTATUSLOW_31          (0x80000000UL << ETH_ACMMSG_IRQSTATUSLOW_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_IRQSTATUSHIGH register  *******************/
#define ETH_ACMMSG_IRQSTATUSHIGH_Pos        (0U)
#define ETH_ACMMSG_IRQSTATUSHIGH_Msk        (0xFFFFFFFFUL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_IRQSTATUSHIGH            ETH_ACMMSG_IRQSTATUSHIGH_Msk                     /*!< IRQ Status high */
#define ETH_ACMMSG_IRQSTATUSHIGH_0          (0x1UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_IRQSTATUSHIGH_1          (0x2UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_IRQSTATUSHIGH_2          (0x4UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_IRQSTATUSHIGH_3          (0x8UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_IRQSTATUSHIGH_4          (0x10UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_IRQSTATUSHIGH_5          (0x20UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_IRQSTATUSHIGH_6          (0x40UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_IRQSTATUSHIGH_7          (0x80UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_IRQSTATUSHIGH_8          (0x100UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_IRQSTATUSHIGH_9          (0x200UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_IRQSTATUSHIGH_10         (0x400UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_IRQSTATUSHIGH_11         (0x800UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_IRQSTATUSHIGH_12         (0x1000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_13         (0x2000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_14         (0x4000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_15         (0x8000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_16         (0x10000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_17         (0x20000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_18         (0x40000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_19         (0x80000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_20         (0x100000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_21         (0x200000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_22         (0x400000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_23         (0x800000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_24         (0x1000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_25         (0x2000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_26         (0x4000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_27         (0x8000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_28         (0x10000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_29         (0x20000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_30         (0x40000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_IRQSTATUSHIGH_31         (0x80000000UL << ETH_ACMMSG_IRQSTATUSHIGH_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_IRQTESTLOW register  *******************/
#define ETH_ACMMSG_IRQTESTLOW_Pos           (0U)
#define ETH_ACMMSG_IRQTESTLOW_Msk           (0xFFFFFFFFUL << ETH_ACMMSG_IRQTESTLOW_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_IRQTESTLOW               ETH_ACMMSG_IRQTESTLOW_Msk                     /*!< IRQ Test low */
#define ETH_ACMMSG_IRQTESTLOW_0             (0x1UL << ETH_ACMMSG_IRQTESTLOW_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_IRQTESTLOW_1             (0x2UL << ETH_ACMMSG_IRQTESTLOW_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_IRQTESTLOW_2             (0x4UL << ETH_ACMMSG_IRQTESTLOW_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_IRQTESTLOW_3             (0x8UL << ETH_ACMMSG_IRQTESTLOW_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_IRQTESTLOW_4             (0x10UL << ETH_ACMMSG_IRQTESTLOW_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_IRQTESTLOW_5             (0x20UL << ETH_ACMMSG_IRQTESTLOW_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_IRQTESTLOW_6             (0x40UL << ETH_ACMMSG_IRQTESTLOW_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_IRQTESTLOW_7             (0x80UL << ETH_ACMMSG_IRQTESTLOW_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_IRQTESTLOW_8             (0x100UL << ETH_ACMMSG_IRQTESTLOW_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_IRQTESTLOW_9             (0x200UL << ETH_ACMMSG_IRQTESTLOW_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_IRQTESTLOW_10            (0x400UL << ETH_ACMMSG_IRQTESTLOW_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_IRQTESTLOW_11            (0x800UL << ETH_ACMMSG_IRQTESTLOW_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_IRQTESTLOW_12            (0x1000UL << ETH_ACMMSG_IRQTESTLOW_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_IRQTESTLOW_13            (0x2000UL << ETH_ACMMSG_IRQTESTLOW_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_IRQTESTLOW_14            (0x4000UL << ETH_ACMMSG_IRQTESTLOW_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_IRQTESTLOW_15            (0x8000UL << ETH_ACMMSG_IRQTESTLOW_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_IRQTESTLOW_16            (0x10000UL << ETH_ACMMSG_IRQTESTLOW_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_IRQTESTLOW_17            (0x20000UL << ETH_ACMMSG_IRQTESTLOW_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_IRQTESTLOW_18            (0x40000UL << ETH_ACMMSG_IRQTESTLOW_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_IRQTESTLOW_19            (0x80000UL << ETH_ACMMSG_IRQTESTLOW_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_IRQTESTLOW_20            (0x100000UL << ETH_ACMMSG_IRQTESTLOW_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_IRQTESTLOW_21            (0x200000UL << ETH_ACMMSG_IRQTESTLOW_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_IRQTESTLOW_22            (0x400000UL << ETH_ACMMSG_IRQTESTLOW_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_IRQTESTLOW_23            (0x800000UL << ETH_ACMMSG_IRQTESTLOW_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_IRQTESTLOW_24            (0x1000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_IRQTESTLOW_25            (0x2000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_IRQTESTLOW_26            (0x4000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_IRQTESTLOW_27            (0x8000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_IRQTESTLOW_28            (0x10000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_IRQTESTLOW_29            (0x20000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_IRQTESTLOW_30            (0x40000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_IRQTESTLOW_31            (0x80000000UL << ETH_ACMMSG_IRQTESTLOW_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_IRQTESTHIGH register  *******************/
#define ETH_ACMMSG_IRQTESTHIGH_Pos          (0U)
#define ETH_ACMMSG_IRQTESTHIGH_Msk          (0xFFFFFFFFUL << ETH_ACMMSG_IRQTESTHIGH_Pos)    /*!< 0xFFFFFFFF */
#define ETH_ACMMSG_IRQTESTHIGH              ETH_ACMMSG_IRQTESTHIGH_Msk                     /*!< IRQ Test high */
#define ETH_ACMMSG_IRQTESTHIGH_0            (0x1UL << ETH_ACMMSG_IRQTESTHIGH_Pos)           /*!< 0x00000001 */
#define ETH_ACMMSG_IRQTESTHIGH_1            (0x2UL << ETH_ACMMSG_IRQTESTHIGH_Pos)           /*!< 0x00000002 */
#define ETH_ACMMSG_IRQTESTHIGH_2            (0x4UL << ETH_ACMMSG_IRQTESTHIGH_Pos)           /*!< 0x00000004 */
#define ETH_ACMMSG_IRQTESTHIGH_3            (0x8UL << ETH_ACMMSG_IRQTESTHIGH_Pos)           /*!< 0x00000008 */
#define ETH_ACMMSG_IRQTESTHIGH_4            (0x10UL << ETH_ACMMSG_IRQTESTHIGH_Pos)          /*!< 0x00000010 */
#define ETH_ACMMSG_IRQTESTHIGH_5            (0x20UL << ETH_ACMMSG_IRQTESTHIGH_Pos)          /*!< 0x00000020 */
#define ETH_ACMMSG_IRQTESTHIGH_6            (0x40UL << ETH_ACMMSG_IRQTESTHIGH_Pos)          /*!< 0x00000040 */
#define ETH_ACMMSG_IRQTESTHIGH_7            (0x80UL << ETH_ACMMSG_IRQTESTHIGH_Pos)          /*!< 0x00000080 */
#define ETH_ACMMSG_IRQTESTHIGH_8            (0x100UL << ETH_ACMMSG_IRQTESTHIGH_Pos)         /*!< 0x00000100 */
#define ETH_ACMMSG_IRQTESTHIGH_9            (0x200UL << ETH_ACMMSG_IRQTESTHIGH_Pos)         /*!< 0x00000200 */
#define ETH_ACMMSG_IRQTESTHIGH_10           (0x400UL << ETH_ACMMSG_IRQTESTHIGH_Pos)         /*!< 0x00000400 */
#define ETH_ACMMSG_IRQTESTHIGH_11           (0x800UL << ETH_ACMMSG_IRQTESTHIGH_Pos)         /*!< 0x00000800 */
#define ETH_ACMMSG_IRQTESTHIGH_12           (0x1000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)        /*!< 0x00001000 */
#define ETH_ACMMSG_IRQTESTHIGH_13           (0x2000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)        /*!< 0x00002000 */
#define ETH_ACMMSG_IRQTESTHIGH_14           (0x4000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)        /*!< 0x00004000 */
#define ETH_ACMMSG_IRQTESTHIGH_15           (0x8000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)        /*!< 0x00008000 */
#define ETH_ACMMSG_IRQTESTHIGH_16           (0x10000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)       /*!< 0x00010000 */
#define ETH_ACMMSG_IRQTESTHIGH_17           (0x20000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)       /*!< 0x00020000 */
#define ETH_ACMMSG_IRQTESTHIGH_18           (0x40000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)       /*!< 0x00040000 */
#define ETH_ACMMSG_IRQTESTHIGH_19           (0x80000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)       /*!< 0x00080000 */
#define ETH_ACMMSG_IRQTESTHIGH_20           (0x100000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)      /*!< 0x00100000 */
#define ETH_ACMMSG_IRQTESTHIGH_21           (0x200000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)      /*!< 0x00200000 */
#define ETH_ACMMSG_IRQTESTHIGH_22           (0x400000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)      /*!< 0x00400000 */
#define ETH_ACMMSG_IRQTESTHIGH_23           (0x800000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)      /*!< 0x00800000 */
#define ETH_ACMMSG_IRQTESTHIGH_24           (0x1000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)     /*!< 0x01000000 */
#define ETH_ACMMSG_IRQTESTHIGH_25           (0x2000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)     /*!< 0x02000000 */
#define ETH_ACMMSG_IRQTESTHIGH_26           (0x4000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)     /*!< 0x04000000 */
#define ETH_ACMMSG_IRQTESTHIGH_27           (0x8000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)     /*!< 0x08000000 */
#define ETH_ACMMSG_IRQTESTHIGH_28           (0x10000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)    /*!< 0x10000000 */
#define ETH_ACMMSG_IRQTESTHIGH_29           (0x20000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)    /*!< 0x20000000 */
#define ETH_ACMMSG_IRQTESTHIGH_30           (0x40000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)    /*!< 0x40000000 */
#define ETH_ACMMSG_IRQTESTHIGH_31           (0x80000000UL << ETH_ACMMSG_IRQTESTHIGH_Pos)    /*!< 0x80000000 */

/******************  Bit definition for ETH_ACMMSG_MSGBUFSTATUS register  *******************/
#define ETH_ACMMSG_MSGBUFSTATUS_FCS_STATE_Pos    (0U)
#define ETH_ACMMSG_MSGBUFSTATUS_FCS_STATE_Msk    (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_FCS_STATE_Pos)         /*!< 0x00000001 */
#define ETH_ACMMSG_MSGBUFSTATUS_FCS_STATE        ETH_ACMMSG_MSGBUFSTATUS_FCS_STATE_Msk                   /*!< FCS state */
#define ETH_ACMMSG_MSGBUFSTATUS_DSCR_ERR_Pos     (1U)
#define ETH_ACMMSG_MSGBUFSTATUS_DSCR_ERR_Msk     (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_DSCR_ERR_Pos)          /*!< 0x00000002 */
#define ETH_ACMMSG_MSGBUFSTATUS_DSCR_ERR         ETH_ACMMSG_MSGBUFSTATUS_DSCR_ERR_Msk                    /*!< Descriptor error */
#define ETH_ACMMSG_MSGBUFSTATUS_OVERWRITTEN_Pos  (2U)
#define ETH_ACMMSG_MSGBUFSTATUS_OVERWRITTEN_Msk  (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_OVERWRITTEN_Pos)       /*!< 0x00000004 */
#define ETH_ACMMSG_MSGBUFSTATUS_OVERWRITTEN      ETH_ACMMSG_MSGBUFSTATUS_OVERWRITTEN_Msk                 /*!< Overwritten buffer */
#define ETH_ACMMSG_MSGBUFSTATUS_D_LOCKED_Pos     (20U)
#define ETH_ACMMSG_MSGBUFSTATUS_D_LOCKED_Msk     (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_D_LOCKED_Pos)          /*!< 0x00100000 */
#define ETH_ACMMSG_MSGBUFSTATUS_D_LOCKED         ETH_ACMMSG_MSGBUFSTATUS_D_LOCKED_Msk                    /*!< Dual locked */
#define ETH_ACMMSG_MSGBUFSTATUS_FRESH_Pos        (24U)
#define ETH_ACMMSG_MSGBUFSTATUS_FRESH_Msk        (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_FRESH_Pos)             /*!< 0x01000000 */
#define ETH_ACMMSG_MSGBUFSTATUS_FRESH            ETH_ACMMSG_MSGBUFSTATUS_FRESH_Msk                       /*!< Fresh */
#define ETH_ACMMSG_MSGBUFSTATUS_EMPTY_Pos        (28U)
#define ETH_ACMMSG_MSGBUFSTATUS_EMPTY_Msk        (0x1UL << ETH_ACMMSG_MSGBUFSTATUS_EMPTY_Pos)             /*!< 0x10000000 */
#define ETH_ACMMSG_MSGBUFSTATUS_EMPTY            ETH_ACMMSG_MSGBUFSTATUS_EMPTY_Msk                       /*!< Empty */

/******************************************************************************/
/*                                                                            */
/*                    External Interrupt/Event Controller                     */
/*                               EXTI1/EXTI2                                  */
/*                   c7amba_exti_v3-0_UserSpec_v3_0_0m.pdf                    */
/*                   register declared following documentation order          */
/******************************************************************************/

/******************  Bit definition for EXTI1_RTSR1 register  *******************/
#define EXTI1_RTSR1_RT0_Pos         (0U)
#define EXTI1_RTSR1_RT0_Msk         (0x1UL << EXTI1_RTSR1_RT0_Pos)                /*!< 0x00000001 */
#define EXTI1_RTSR1_RT0             EXTI1_RTSR1_RT0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI1_RTSR1_RT1_Pos         (1U)
#define EXTI1_RTSR1_RT1_Msk         (0x1UL << EXTI1_RTSR1_RT1_Pos)                /*!< 0x00000002 */
#define EXTI1_RTSR1_RT1             EXTI1_RTSR1_RT1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI1_RTSR1_RT2_Pos         (2U)
#define EXTI1_RTSR1_RT2_Msk         (0x1UL << EXTI1_RTSR1_RT2_Pos)                /*!< 0x00000004 */
#define EXTI1_RTSR1_RT2             EXTI1_RTSR1_RT2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI1_RTSR1_RT3_Pos         (3U)
#define EXTI1_RTSR1_RT3_Msk         (0x1UL << EXTI1_RTSR1_RT3_Pos)                /*!< 0x00000008 */
#define EXTI1_RTSR1_RT3             EXTI1_RTSR1_RT3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI1_RTSR1_RT4_Pos         (4U)
#define EXTI1_RTSR1_RT4_Msk         (0x1UL << EXTI1_RTSR1_RT4_Pos)                /*!< 0x00000010 */
#define EXTI1_RTSR1_RT4             EXTI1_RTSR1_RT4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI1_RTSR1_RT5_Pos         (5U)
#define EXTI1_RTSR1_RT5_Msk         (0x1UL << EXTI1_RTSR1_RT5_Pos)                /*!< 0x00000020 */
#define EXTI1_RTSR1_RT5             EXTI1_RTSR1_RT5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI1_RTSR1_RT6_Pos         (6U)
#define EXTI1_RTSR1_RT6_Msk         (0x1UL << EXTI1_RTSR1_RT6_Pos)                /*!< 0x00000040 */
#define EXTI1_RTSR1_RT6             EXTI1_RTSR1_RT6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI1_RTSR1_RT7_Pos         (7U)
#define EXTI1_RTSR1_RT7_Msk         (0x1UL << EXTI1_RTSR1_RT7_Pos)                /*!< 0x00000080 */
#define EXTI1_RTSR1_RT7             EXTI1_RTSR1_RT7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI1_RTSR1_RT8_Pos         (8U)
#define EXTI1_RTSR1_RT8_Msk         (0x1UL << EXTI1_RTSR1_RT8_Pos)                /*!< 0x00000100 */
#define EXTI1_RTSR1_RT8             EXTI1_RTSR1_RT8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI1_RTSR1_RT9_Pos         (9U)
#define EXTI1_RTSR1_RT9_Msk         (0x1UL << EXTI1_RTSR1_RT9_Pos)                /*!< 0x00000200 */
#define EXTI1_RTSR1_RT9             EXTI1_RTSR1_RT9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI1_RTSR1_RT10_Pos        (10U)
#define EXTI1_RTSR1_RT10_Msk        (0x1UL << EXTI1_RTSR1_RT10_Pos)               /*!< 0x00000400 */
#define EXTI1_RTSR1_RT10            EXTI1_RTSR1_RT10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI1_RTSR1_RT11_Pos        (11U)
#define EXTI1_RTSR1_RT11_Msk        (0x1UL << EXTI1_RTSR1_RT11_Pos)               /*!< 0x00000800 */
#define EXTI1_RTSR1_RT11            EXTI1_RTSR1_RT11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI1_RTSR1_RT12_Pos        (12U)
#define EXTI1_RTSR1_RT12_Msk        (0x1UL << EXTI1_RTSR1_RT12_Pos)               /*!< 0x00001000 */
#define EXTI1_RTSR1_RT12            EXTI1_RTSR1_RT12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI1_RTSR1_RT13_Pos        (13U)
#define EXTI1_RTSR1_RT13_Msk        (0x1UL << EXTI1_RTSR1_RT13_Pos)               /*!< 0x00002000 */
#define EXTI1_RTSR1_RT13            EXTI1_RTSR1_RT13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI1_RTSR1_RT14_Pos        (14U)
#define EXTI1_RTSR1_RT14_Msk        (0x1UL << EXTI1_RTSR1_RT14_Pos)               /*!< 0x00004000 */
#define EXTI1_RTSR1_RT14            EXTI1_RTSR1_RT14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI1_RTSR1_RT15_Pos        (15U)
#define EXTI1_RTSR1_RT15_Msk        (0x1UL << EXTI1_RTSR1_RT15_Pos)               /*!< 0x00008000 */
#define EXTI1_RTSR1_RT15            EXTI1_RTSR1_RT15_Msk                         /*!< Rising trigger event configuration bit of line 15 */
#define EXTI1_RTSR1_RT16_Pos        (16U)
#define EXTI1_RTSR1_RT16_Msk        (0x1UL << EXTI1_RTSR1_RT16_Pos)               /*!< 0x00010000 */
#define EXTI1_RTSR1_RT16            EXTI1_RTSR1_RT16_Msk                         /*!< Rising trigger event configuration bit of line 16 */
#define EXTI1_RTSR1_RT17_Pos        (17U)
#define EXTI1_RTSR1_RT17_Msk        (0x1UL << EXTI1_RTSR1_RT17_Pos)               /*!< 0x00020000 */
#define EXTI1_RTSR1_RT17            EXTI1_RTSR1_RT17_Msk                         /*!< Rising trigger event configuration bit of line 17 */
#define EXTI1_RTSR1_RT18_Pos        (18U)
#define EXTI1_RTSR1_RT18_Msk        (0x1UL << EXTI1_RTSR1_RT18_Pos)               /*!< 0x00040000 */
#define EXTI1_RTSR1_RT18            EXTI1_RTSR1_RT18_Msk                         /*!< Rising trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_FTSR1 register  *******************/
#define EXTI1_FTSR1_FT0_Pos         (0U)
#define EXTI1_FTSR1_FT0_Msk         (0x1UL << EXTI1_FTSR1_FT0_Pos)                /*!< 0x00000001 */
#define EXTI1_FTSR1_FT0             EXTI1_FTSR1_FT0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI1_FTSR1_FT1_Pos         (1U)
#define EXTI1_FTSR1_FT1_Msk         (0x1UL << EXTI1_FTSR1_FT1_Pos)                /*!< 0x00000002 */
#define EXTI1_FTSR1_FT1             EXTI1_FTSR1_FT1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI1_FTSR1_FT2_Pos         (2U)
#define EXTI1_FTSR1_FT2_Msk         (0x1UL << EXTI1_FTSR1_FT2_Pos)                /*!< 0x00000004 */
#define EXTI1_FTSR1_FT2             EXTI1_FTSR1_FT2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI1_FTSR1_FT3_Pos         (3U)
#define EXTI1_FTSR1_FT3_Msk         (0x1UL << EXTI1_FTSR1_FT3_Pos)                /*!< 0x00000008 */
#define EXTI1_FTSR1_FT3             EXTI1_FTSR1_FT3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI1_FTSR1_FT4_Pos         (4U)
#define EXTI1_FTSR1_FT4_Msk         (0x1UL << EXTI1_FTSR1_FT4_Pos)                /*!< 0x00000010 */
#define EXTI1_FTSR1_FT4             EXTI1_FTSR1_FT4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI1_FTSR1_FT5_Pos         (5U)
#define EXTI1_FTSR1_FT5_Msk         (0x1UL << EXTI1_FTSR1_FT5_Pos)                /*!< 0x00000020 */
#define EXTI1_FTSR1_FT5             EXTI1_FTSR1_FT5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI1_FTSR1_FT6_Pos         (6U)
#define EXTI1_FTSR1_FT6_Msk         (0x1UL << EXTI1_FTSR1_FT6_Pos)                /*!< 0x00000040 */
#define EXTI1_FTSR1_FT6             EXTI1_FTSR1_FT6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI1_FTSR1_FT7_Pos         (7U)
#define EXTI1_FTSR1_FT7_Msk         (0x1UL << EXTI1_FTSR1_FT7_Pos)                /*!< 0x00000080 */
#define EXTI1_FTSR1_FT7             EXTI1_FTSR1_FT7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI1_FTSR1_FT8_Pos         (8U)
#define EXTI1_FTSR1_FT8_Msk         (0x1UL << EXTI1_FTSR1_FT8_Pos)                /*!< 0x00000100 */
#define EXTI1_FTSR1_FT8             EXTI1_FTSR1_FT8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI1_FTSR1_FT9_Pos         (9U)
#define EXTI1_FTSR1_FT9_Msk         (0x1UL << EXTI1_FTSR1_FT9_Pos)                /*!< 0x00000200 */
#define EXTI1_FTSR1_FT9             EXTI1_FTSR1_FT9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI1_FTSR1_FT10_Pos        (10U)
#define EXTI1_FTSR1_FT10_Msk        (0x1UL << EXTI1_FTSR1_FT10_Pos)               /*!< 0x00000400 */
#define EXTI1_FTSR1_FT10            EXTI1_FTSR1_FT10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI1_FTSR1_FT11_Pos        (11U)
#define EXTI1_FTSR1_FT11_Msk        (0x1UL << EXTI1_FTSR1_FT11_Pos)               /*!< 0x00000800 */
#define EXTI1_FTSR1_FT11            EXTI1_FTSR1_FT11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI1_FTSR1_FT12_Pos        (12U)
#define EXTI1_FTSR1_FT12_Msk        (0x1UL << EXTI1_FTSR1_FT12_Pos)               /*!< 0x00001000 */
#define EXTI1_FTSR1_FT12            EXTI1_FTSR1_FT12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI1_FTSR1_FT13_Pos        (13U)
#define EXTI1_FTSR1_FT13_Msk        (0x1UL << EXTI1_FTSR1_FT13_Pos)               /*!< 0x00002000 */
#define EXTI1_FTSR1_FT13            EXTI1_FTSR1_FT13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI1_FTSR1_FT14_Pos        (14U)
#define EXTI1_FTSR1_FT14_Msk        (0x1UL << EXTI1_FTSR1_FT14_Pos)               /*!< 0x00004000 */
#define EXTI1_FTSR1_FT14            EXTI1_FTSR1_FT14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI1_FTSR1_FT15_Pos        (15U)
#define EXTI1_FTSR1_FT15_Msk        (0x1UL << EXTI1_FTSR1_FT15_Pos)               /*!< 0x00008000 */
#define EXTI1_FTSR1_FT15            EXTI1_FTSR1_FT15_Msk                         /*!< Falling trigger event configuration bit of line 15 */
#define EXTI1_FTSR1_FT16_Pos        (16U)
#define EXTI1_FTSR1_FT16_Msk        (0x1UL << EXTI1_FTSR1_FT16_Pos)               /*!< 0x00010000 */
#define EXTI1_FTSR1_FT16            EXTI1_FTSR1_FT16_Msk                         /*!< Falling trigger event configuration bit of line 16 */
#define EXTI1_FTSR1_FT17_Pos        (17U)
#define EXTI1_FTSR1_FT17_Msk        (0x1UL << EXTI1_FTSR1_FT17_Pos)               /*!< 0x00020000 */
#define EXTI1_FTSR1_FT17            EXTI1_FTSR1_FT17_Msk                         /*!< Falling trigger event configuration bit of line 17 */
#define EXTI1_FTSR1_FT18_Pos        (18U)
#define EXTI1_FTSR1_FT18_Msk        (0x1UL << EXTI1_FTSR1_FT18_Pos)               /*!< 0x00040000 */
#define EXTI1_FTSR1_FT18            EXTI1_FTSR1_FT18_Msk                         /*!< Falling trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_SWIER1 register  ******************/
#define EXTI1_SWIER1_SWI0_Pos     (0U)
#define EXTI1_SWIER1_SWI0_Msk     (0x1UL << EXTI1_SWIER1_SWI0_Pos)            /*!< 0x00000001 */
#define EXTI1_SWIER1_SWI0         EXTI1_SWIER1_SWI0_Msk                      /*!< Software Interrupt on line 0 */
#define EXTI1_SWIER1_SWI1_Pos     (1U)
#define EXTI1_SWIER1_SWI1_Msk     (0x1UL << EXTI1_SWIER1_SWI1_Pos)            /*!< 0x00000002 */
#define EXTI1_SWIER1_SWI1         EXTI1_SWIER1_SWI1_Msk                      /*!< Software Interrupt on line 1 */
#define EXTI1_SWIER1_SWI2_Pos     (2U)
#define EXTI1_SWIER1_SWI2_Msk     (0x1UL << EXTI1_SWIER1_SWI2_Pos)            /*!< 0x00000004 */
#define EXTI1_SWIER1_SWI2         EXTI1_SWIER1_SWI2_Msk                      /*!< Software Interrupt on line 2 */
#define EXTI1_SWIER1_SWI3_Pos     (3U)
#define EXTI1_SWIER1_SWI3_Msk     (0x1UL << EXTI1_SWIER1_SWI3_Pos)            /*!< 0x00000008 */
#define EXTI1_SWIER1_SWI3         EXTI1_SWIER1_SWI3_Msk                      /*!< Software Interrupt on line 3 */
#define EXTI1_SWIER1_SWI4_Pos     (4U)
#define EXTI1_SWIER1_SWI4_Msk     (0x1UL << EXTI1_SWIER1_SWI4_Pos)            /*!< 0x00000010 */
#define EXTI1_SWIER1_SWI4         EXTI1_SWIER1_SWI4_Msk                      /*!< Software Interrupt on line 4 */
#define EXTI1_SWIER1_SWI5_Pos     (5U)
#define EXTI1_SWIER1_SWI5_Msk     (0x1UL << EXTI1_SWIER1_SWI5_Pos)            /*!< 0x00000020 */
#define EXTI1_SWIER1_SWI5         EXTI1_SWIER1_SWI5_Msk                      /*!< Software Interrupt on line 5 */
#define EXTI1_SWIER1_SWI6_Pos     (6U)
#define EXTI1_SWIER1_SWI6_Msk     (0x1UL << EXTI1_SWIER1_SWI6_Pos)            /*!< 0x00000040 */
#define EXTI1_SWIER1_SWI6         EXTI1_SWIER1_SWI6_Msk                      /*!< Software Interrupt on line 6 */
#define EXTI1_SWIER1_SWI7_Pos     (7U)
#define EXTI1_SWIER1_SWI7_Msk     (0x1UL << EXTI1_SWIER1_SWI7_Pos)            /*!< 0x00000080 */
#define EXTI1_SWIER1_SWI7         EXTI1_SWIER1_SWI7_Msk                      /*!< Software Interrupt on line 7 */
#define EXTI1_SWIER1_SWI8_Pos     (8U)
#define EXTI1_SWIER1_SWI8_Msk     (0x1UL << EXTI1_SWIER1_SWI8_Pos)            /*!< 0x00000100 */
#define EXTI1_SWIER1_SWI8         EXTI1_SWIER1_SWI8_Msk                      /*!< Software Interrupt on line 8 */
#define EXTI1_SWIER1_SWI9_Pos     (9U)
#define EXTI1_SWIER1_SWI9_Msk     (0x1UL << EXTI1_SWIER1_SWI9_Pos)            /*!< 0x00000200 */
#define EXTI1_SWIER1_SWI9         EXTI1_SWIER1_SWI9_Msk                      /*!< Software Interrupt on line 9 */
#define EXTI1_SWIER1_SWI10_Pos    (10U)
#define EXTI1_SWIER1_SWI10_Msk    (0x1UL << EXTI1_SWIER1_SWI10_Pos)           /*!< 0x00000400 */
#define EXTI1_SWIER1_SWI10        EXTI1_SWIER1_SWI10_Msk                     /*!< Software Interrupt on line 10 */
#define EXTI1_SWIER1_SWI11_Pos    (11U)
#define EXTI1_SWIER1_SWI11_Msk    (0x1UL << EXTI1_SWIER1_SWI11_Pos)           /*!< 0x00000800 */
#define EXTI1_SWIER1_SWI11        EXTI1_SWIER1_SWI11_Msk                     /*!< Software Interrupt on line 11 */
#define EXTI1_SWIER1_SWI12_Pos    (12U)
#define EXTI1_SWIER1_SWI12_Msk    (0x1UL << EXTI1_SWIER1_SWI12_Pos)           /*!< 0x00001000 */
#define EXTI1_SWIER1_SWI12        EXTI1_SWIER1_SWI12_Msk                     /*!< Software Interrupt on line 12 */
#define EXTI1_SWIER1_SWI13_Pos    (13U)
#define EXTI1_SWIER1_SWI13_Msk    (0x1UL << EXTI1_SWIER1_SWI13_Pos)           /*!< 0x00002000 */
#define EXTI1_SWIER1_SWI13        EXTI1_SWIER1_SWI13_Msk                     /*!< Software Interrupt on line 13 */
#define EXTI1_SWIER1_SWI14_Pos    (14U)
#define EXTI1_SWIER1_SWI14_Msk    (0x1UL << EXTI1_SWIER1_SWI14_Pos)           /*!< 0x00004000 */
#define EXTI1_SWIER1_SWI14        EXTI1_SWIER1_SWI14_Msk                     /*!< Software Interrupt on line 14 */
#define EXTI1_SWIER1_SWI15_Pos    (15U)
#define EXTI1_SWIER1_SWI15_Msk    (0x1UL << EXTI1_SWIER1_SWI15_Pos)           /*!< 0x00008000 */
#define EXTI1_SWIER1_SWI15        EXTI1_SWIER1_SWI15_Msk                     /*!< Software Interrupt on line 15 */
#define EXTI1_SWIER1_SWI16_Pos    (16U)
#define EXTI1_SWIER1_SWI16_Msk    (0x1UL << EXTI1_SWIER1_SWI16_Pos)           /*!< 0x00010000 */
#define EXTI1_SWIER1_SWI16        EXTI1_SWIER1_SWI16_Msk                     /*!< Software Interrupt on line 16 */
#define EXTI1_SWIER1_SWI17_Pos    (17U)
#define EXTI1_SWIER1_SWI17_Msk    (0x1UL << EXTI1_SWIER1_SWI17_Pos)           /*!< 0x00020000 */
#define EXTI1_SWIER1_SWI17        EXTI1_SWIER1_SWI17_Msk                     /*!< Software Interrupt on line 17 */
#define EXTI1_SWIER1_SWI18_Pos    (18U)
#define EXTI1_SWIER1_SWI18_Msk    (0x1UL << EXTI1_SWIER1_SWI18_Pos)           /*!< 0x00040000 */
#define EXTI1_SWIER1_SWI18        EXTI1_SWIER1_SWI18_Msk                     /*!< Software Interrupt on line 18 */

/******************  Bit definition for EXTI1_RPR1 register  *******************/
#define EXTI1_RPR1_RPIF0_Pos         (0U)
#define EXTI1_RPR1_RPIF0_Msk         (0x1UL << EXTI1_RPR1_RPIF0_Pos)                /*!< 0x00000001 */
#define EXTI1_RPR1_RPIF0             EXTI1_RPR1_RPIF0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI1_RPR1_RPIF1_Pos         (1U)
#define EXTI1_RPR1_RPIF1_Msk         (0x1UL << EXTI1_RPR1_RPIF1_Pos)                /*!< 0x00000002 */
#define EXTI1_RPR1_RPIF1             EXTI1_RPR1_RPIF1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI1_RPR1_RPIF2_Pos         (2U)
#define EXTI1_RPR1_RPIF2_Msk         (0x1UL << EXTI1_RPR1_RPIF2_Pos)                /*!< 0x00000004 */
#define EXTI1_RPR1_RPIF2             EXTI1_RPR1_RPIF2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI1_RPR1_RPIF3_Pos         (3U)
#define EXTI1_RPR1_RPIF3_Msk         (0x1UL << EXTI1_RPR1_RPIF3_Pos)                /*!< 0x00000008 */
#define EXTI1_RPR1_RPIF3             EXTI1_RPR1_RPIF3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI1_RPR1_RPIF4_Pos         (4U)
#define EXTI1_RPR1_RPIF4_Msk         (0x1UL << EXTI1_RPR1_RPIF4_Pos)                /*!< 0x00000010 */
#define EXTI1_RPR1_RPIF4             EXTI1_RPR1_RPIF4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI1_RPR1_RPIF5_Pos         (5U)
#define EXTI1_RPR1_RPIF5_Msk         (0x1UL << EXTI1_RPR1_RPIF5_Pos)                /*!< 0x00000020 */
#define EXTI1_RPR1_RPIF5             EXTI1_RPR1_RPIF5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI1_RPR1_RPIF6_Pos         (6U)
#define EXTI1_RPR1_RPIF6_Msk         (0x1UL << EXTI1_RPR1_RPIF6_Pos)                /*!< 0x00000040 */
#define EXTI1_RPR1_RPIF6             EXTI1_RPR1_RPIF6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI1_RPR1_RPIF7_Pos         (7U)
#define EXTI1_RPR1_RPIF7_Msk         (0x1UL << EXTI1_RPR1_RPIF7_Pos)                /*!< 0x00000080 */
#define EXTI1_RPR1_RPIF7             EXTI1_RPR1_RPIF7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI1_RPR1_RPIF8_Pos         (8U)
#define EXTI1_RPR1_RPIF8_Msk         (0x1UL << EXTI1_RPR1_RPIF8_Pos)                /*!< 0x00000100 */
#define EXTI1_RPR1_RPIF8             EXTI1_RPR1_RPIF8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI1_RPR1_RPIF9_Pos         (9U)
#define EXTI1_RPR1_RPIF9_Msk         (0x1UL << EXTI1_RPR1_RPIF9_Pos)                /*!< 0x00000200 */
#define EXTI1_RPR1_RPIF9             EXTI1_RPR1_RPIF9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI1_RPR1_RPIF10_Pos        (10U)
#define EXTI1_RPR1_RPIF10_Msk        (0x1UL << EXTI1_RPR1_RPIF10_Pos)               /*!< 0x00000400 */
#define EXTI1_RPR1_RPIF10            EXTI1_RPR1_RPIF10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI1_RPR1_RPIF11_Pos        (11U)
#define EXTI1_RPR1_RPIF11_Msk        (0x1UL << EXTI1_RPR1_RPIF11_Pos)               /*!< 0x00000800 */
#define EXTI1_RPR1_RPIF11            EXTI1_RPR1_RPIF11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI1_RPR1_RPIF12_Pos        (12U)
#define EXTI1_RPR1_RPIF12_Msk        (0x1UL << EXTI1_RPR1_RPIF12_Pos)               /*!< 0x00001000 */
#define EXTI1_RPR1_RPIF12            EXTI1_RPR1_RPIF12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI1_RPR1_RPIF13_Pos        (13U)
#define EXTI1_RPR1_RPIF13_Msk        (0x1UL << EXTI1_RPR1_RPIF13_Pos)               /*!< 0x00002000 */
#define EXTI1_RPR1_RPIF13            EXTI1_RPR1_RPIF13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI1_RPR1_RPIF14_Pos        (14U)
#define EXTI1_RPR1_RPIF14_Msk        (0x1UL << EXTI1_RPR1_RPIF14_Pos)               /*!< 0x00004000 */
#define EXTI1_RPR1_RPIF14            EXTI1_RPR1_RPIF14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI1_RPR1_RPIF15_Pos        (15U)
#define EXTI1_RPR1_RPIF15_Msk        (0x1UL << EXTI1_RPR1_RPIF15_Pos)               /*!< 0x00008000 */
#define EXTI1_RPR1_RPIF15            EXTI1_RPR1_RPIF15_Msk                         /*!< Rising trigger event configuration bit of line 15 */
#define EXTI1_RPR1_RPIF16_Pos        (16U)
#define EXTI1_RPR1_RPIF16_Msk        (0x1UL << EXTI1_RPR1_RPIF16_Pos)               /*!< 0x00010000 */
#define EXTI1_RPR1_RPIF16            EXTI1_RPR1_RPIF16_Msk                         /*!< Rising trigger event configuration bit of line 16 */
#define EXTI1_RPR1_RPIF17_Pos        (17U)
#define EXTI1_RPR1_RPIF17_Msk        (0x1UL << EXTI1_RPR1_RPIF17_Pos)               /*!< 0x00020000 */
#define EXTI1_RPR1_RPIF17            EXTI1_RPR1_RPIF17_Msk                         /*!< Rising trigger event configuration bit of line 17 */
#define EXTI1_RPR1_RPIF18_Pos        (18U)
#define EXTI1_RPR1_RPIF18_Msk        (0x1UL << EXTI1_RPR1_RPIF18_Pos)               /*!< 0x00040000 */
#define EXTI1_RPR1_RPIF18            EXTI1_RPR1_RPIF18_Msk                         /*!< Rising trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_FPR1 register  *******************/
#define EXTI1_FPR1_FPIF0_Pos         (0U)
#define EXTI1_FPR1_FPIF0_Msk         (0x1UL << EXTI1_FPR1_FPIF0_Pos)                /*!< 0x00000001 */
#define EXTI1_FPR1_FPIF0             EXTI1_FPR1_FPIF0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI1_FPR1_FPIF1_Pos         (1U)
#define EXTI1_FPR1_FPIF1_Msk         (0x1UL << EXTI1_FPR1_FPIF1_Pos)                /*!< 0x00000002 */
#define EXTI1_FPR1_FPIF1             EXTI1_FPR1_FPIF1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI1_FPR1_FPIF2_Pos         (2U)
#define EXTI1_FPR1_FPIF2_Msk         (0x1UL << EXTI1_FPR1_FPIF2_Pos)                /*!< 0x00000004 */
#define EXTI1_FPR1_FPIF2             EXTI1_FPR1_FPIF2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI1_FPR1_FPIF3_Pos         (3U)
#define EXTI1_FPR1_FPIF3_Msk         (0x1UL << EXTI1_FPR1_FPIF3_Pos)                /*!< 0x00000008 */
#define EXTI1_FPR1_FPIF3             EXTI1_FPR1_FPIF3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI1_FPR1_FPIF4_Pos         (4U)
#define EXTI1_FPR1_FPIF4_Msk         (0x1UL << EXTI1_FPR1_FPIF4_Pos)                /*!< 0x00000010 */
#define EXTI1_FPR1_FPIF4             EXTI1_FPR1_FPIF4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI1_FPR1_FPIF5_Pos         (5U)
#define EXTI1_FPR1_FPIF5_Msk         (0x1UL << EXTI1_FPR1_FPIF5_Pos)                /*!< 0x00000020 */
#define EXTI1_FPR1_FPIF5             EXTI1_FPR1_FPIF5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI1_FPR1_FPIF6_Pos         (6U)
#define EXTI1_FPR1_FPIF6_Msk         (0x1UL << EXTI1_FPR1_FPIF6_Pos)                /*!< 0x00000040 */
#define EXTI1_FPR1_FPIF6             EXTI1_FPR1_FPIF6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI1_FPR1_FPIF7_Pos         (7U)
#define EXTI1_FPR1_FPIF7_Msk         (0x1UL << EXTI1_FPR1_FPIF7_Pos)                /*!< 0x00000080 */
#define EXTI1_FPR1_FPIF7             EXTI1_FPR1_FPIF7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI1_FPR1_FPIF8_Pos         (8U)
#define EXTI1_FPR1_FPIF8_Msk         (0x1UL << EXTI1_FPR1_FPIF8_Pos)                /*!< 0x00000100 */
#define EXTI1_FPR1_FPIF8             EXTI1_FPR1_FPIF8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI1_FPR1_FPIF9_Pos         (9U)
#define EXTI1_FPR1_FPIF9_Msk         (0x1UL << EXTI1_FPR1_FPIF9_Pos)                /*!< 0x00000200 */
#define EXTI1_FPR1_FPIF9             EXTI1_FPR1_FPIF9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI1_FPR1_FPIF10_Pos        (10U)
#define EXTI1_FPR1_FPIF10_Msk        (0x1UL << EXTI1_FPR1_FPIF10_Pos)               /*!< 0x00000400 */
#define EXTI1_FPR1_FPIF10            EXTI1_FPR1_FPIF10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI1_FPR1_FPIF11_Pos        (11U)
#define EXTI1_FPR1_FPIF11_Msk        (0x1UL << EXTI1_FPR1_FPIF11_Pos)               /*!< 0x00000800 */
#define EXTI1_FPR1_FPIF11            EXTI1_FPR1_FPIF11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI1_FPR1_FPIF12_Pos        (12U)
#define EXTI1_FPR1_FPIF12_Msk        (0x1UL << EXTI1_FPR1_FPIF12_Pos)               /*!< 0x00001000 */
#define EXTI1_FPR1_FPIF12            EXTI1_FPR1_FPIF12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI1_FPR1_FPIF13_Pos        (13U)
#define EXTI1_FPR1_FPIF13_Msk        (0x1UL << EXTI1_FPR1_FPIF13_Pos)               /*!< 0x00002000 */
#define EXTI1_FPR1_FPIF13            EXTI1_FPR1_FPIF13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI1_FPR1_FPIF14_Pos        (14U)
#define EXTI1_FPR1_FPIF14_Msk        (0x1UL << EXTI1_FPR1_FPIF14_Pos)               /*!< 0x00004000 */
#define EXTI1_FPR1_FPIF14            EXTI1_FPR1_FPIF14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI1_FPR1_FPIF15_Pos        (15U)
#define EXTI1_FPR1_FPIF15_Msk        (0x1UL << EXTI1_FPR1_FPIF15_Pos)               /*!< 0x00008000 */
#define EXTI1_FPR1_FPIF15            EXTI1_FPR1_FPIF15_Msk                         /*!< Falling trigger event configuration bit of line 15 */
#define EXTI1_FPR1_FPIF16_Pos        (16U)
#define EXTI1_FPR1_FPIF16_Msk        (0x1UL << EXTI1_FPR1_FPIF16_Pos)               /*!< 0x00010000 */
#define EXTI1_FPR1_FPIF16            EXTI1_FPR1_FPIF16_Msk                         /*!< Falling trigger event configuration bit of line 16 */
#define EXTI1_FPR1_FPIF17_Pos        (17U)
#define EXTI1_FPR1_FPIF17_Msk        (0x1UL << EXTI1_FPR1_FPIF17_Pos)               /*!< 0x00020000 */
#define EXTI1_FPR1_FPIF17            EXTI1_FPR1_FPIF17_Msk                         /*!< Falling trigger event configuration bit of line 17 */
#define EXTI1_FPR1_FPIF18_Pos        (18U)
#define EXTI1_FPR1_FPIF18_Msk        (0x1UL << EXTI1_FPR1_FPIF18_Pos)               /*!< 0x00040000 */
#define EXTI1_FPR1_FPIF18            EXTI1_FPR1_FPIF18_Msk                         /*!< Falling trigger event configuration bit of line 18 */


/******************  Bit definition for EXTI1_SECCFGR1  register  ******************/
#define EXTI1_SECCFGR1_SEC0_Pos  (0U)
#define EXTI1_SECCFGR1_SEC0_Msk  (0x1UL << EXTI1_SECCFGR1_SEC0_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR1_SEC0      EXTI1_SECCFGR1_SEC0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI1_SECCFGR1_SEC1_Pos  (1U)
#define EXTI1_SECCFGR1_SEC1_Msk  (0x1UL << EXTI1_SECCFGR1_SEC1_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR1_SEC1      EXTI1_SECCFGR1_SEC1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI1_SECCFGR1_SEC2_Pos  (2U)
#define EXTI1_SECCFGR1_SEC2_Msk  (0x1UL << EXTI1_SECCFGR1_SEC2_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR1_SEC2      EXTI1_SECCFGR1_SEC2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI1_SECCFGR1_SEC3_Pos  (3U)
#define EXTI1_SECCFGR1_SEC3_Msk  (0x1UL << EXTI1_SECCFGR1_SEC3_Pos)          /*!< 0x00000008 */
#define EXTI1_SECCFGR1_SEC3      EXTI1_SECCFGR1_SEC3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI1_SECCFGR1_SEC4_Pos  (4U)
#define EXTI1_SECCFGR1_SEC4_Msk  (0x1UL << EXTI1_SECCFGR1_SEC4_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR1_SEC4      EXTI1_SECCFGR1_SEC4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI1_SECCFGR1_SEC5_Pos  (5U)
#define EXTI1_SECCFGR1_SEC5_Msk  (0x1UL << EXTI1_SECCFGR1_SEC5_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR1_SEC5      EXTI1_SECCFGR1_SEC5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI1_SECCFGR1_SEC6_Pos  (6U)
#define EXTI1_SECCFGR1_SEC6_Msk  (0x1UL << EXTI1_SECCFGR1_SEC6_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR1_SEC6      EXTI1_SECCFGR1_SEC6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI1_SECCFGR1_SEC7_Pos  (7U)
#define EXTI1_SECCFGR1_SEC7_Msk  (0x1UL << EXTI1_SECCFGR1_SEC7_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR1_SEC7      EXTI1_SECCFGR1_SEC7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI1_SECCFGR1_SEC8_Pos  (8U)
#define EXTI1_SECCFGR1_SEC8_Msk  (0x1UL << EXTI1_SECCFGR1_SEC8_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR1_SEC8      EXTI1_SECCFGR1_SEC8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI1_SECCFGR1_SEC9_Pos  (9U)
#define EXTI1_SECCFGR1_SEC9_Msk  (0x1UL << EXTI1_SECCFGR1_SEC9_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR1_SEC9      EXTI1_SECCFGR1_SEC9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI1_SECCFGR1_SEC10_Pos (10U)
#define EXTI1_SECCFGR1_SEC10_Msk (0x1UL << EXTI1_SECCFGR1_SEC10_Pos)         /*!< 0x00000400 */
#define EXTI1_SECCFGR1_SEC10     EXTI1_SECCFGR1_SEC10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI1_SECCFGR1_SEC11_Pos (11U)
#define EXTI1_SECCFGR1_SEC11_Msk (0x1UL << EXTI1_SECCFGR1_SEC11_Pos)         /*!< 0x00000800 */
#define EXTI1_SECCFGR1_SEC11     EXTI1_SECCFGR1_SEC11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI1_SECCFGR1_SEC12_Pos (12U)
#define EXTI1_SECCFGR1_SEC12_Msk (0x1UL << EXTI1_SECCFGR1_SEC12_Pos)         /*!< 0x00001000 */
#define EXTI1_SECCFGR1_SEC12     EXTI1_SECCFGR1_SEC12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI1_SECCFGR1_SEC13_Pos (13U)
#define EXTI1_SECCFGR1_SEC13_Msk (0x1UL << EXTI1_SECCFGR1_SEC13_Pos)         /*!< 0x00002000 */
#define EXTI1_SECCFGR1_SEC13     EXTI1_SECCFGR1_SEC13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI1_SECCFGR1_SEC14_Pos (14U)
#define EXTI1_SECCFGR1_SEC14_Msk (0x1UL << EXTI1_SECCFGR1_SEC14_Pos)         /*!< 0x00004000 */
#define EXTI1_SECCFGR1_SEC14     EXTI1_SECCFGR1_SEC14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI1_SECCFGR1_SEC15_Pos (15U)
#define EXTI1_SECCFGR1_SEC15_Msk (0x1UL << EXTI1_SECCFGR1_SEC15_Pos)         /*!< 0x00008000 */
#define EXTI1_SECCFGR1_SEC15     EXTI1_SECCFGR1_SEC15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI1_SECCFGR1_SEC16_Pos (16U)
#define EXTI1_SECCFGR1_SEC16_Msk (0x1UL << EXTI1_SECCFGR1_SEC16_Pos)         /*!< 0x00010000 */
#define EXTI1_SECCFGR1_SEC16     EXTI1_SECCFGR1_SEC16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI1_SECCFGR1_SEC17_Pos (17U)
#define EXTI1_SECCFGR1_SEC17_Msk (0x1UL << EXTI1_SECCFGR1_SEC17_Pos)         /*!< 0x00020000 */
#define EXTI1_SECCFGR1_SEC17     EXTI1_SECCFGR1_SEC17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI1_SECCFGR1_SEC18_Pos (18U)
#define EXTI1_SECCFGR1_SEC18_Msk (0x1UL << EXTI1_SECCFGR1_SEC18_Pos)         /*!< 0x00040000 */
#define EXTI1_SECCFGR1_SEC18     EXTI1_SECCFGR1_SEC18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI1_SECCFGR1_SEC19_Pos (19U)
#define EXTI1_SECCFGR1_SEC19_Msk (0x1UL << EXTI1_SECCFGR1_SEC19_Pos)         /*!< 0x00080000 */
#define EXTI1_SECCFGR1_SEC19     EXTI1_SECCFGR1_SEC19_Msk                   /*!< SEC/PRIV enable on event input 19 */
/* no event input 20  */
#define EXTI1_SECCFGR1_SEC21_Pos (21U)
#define EXTI1_SECCFGR1_SEC21_Msk (0x1UL << EXTI1_SECCFGR1_SEC21_Pos)         /*!< 0x00200000 */
#define EXTI1_SECCFGR1_SEC21     EXTI1_SECCFGR1_SEC21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI1_SECCFGR1_SEC22_Pos (22U)
#define EXTI1_SECCFGR1_SEC22_Msk (0x1UL << EXTI1_SECCFGR1_SEC22_Pos)         /*!< 0x00400000 */
#define EXTI1_SECCFGR1_SEC22     EXTI1_SECCFGR1_SEC22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI1_SECCFGR1_SEC23_Pos (23U)
#define EXTI1_SECCFGR1_SEC23_Msk (0x1UL << EXTI1_SECCFGR1_SEC23_Pos)         /*!< 0x00800000 */
#define EXTI1_SECCFGR1_SEC23     EXTI1_SECCFGR1_SEC23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI1_SECCFGR1_SEC24_Pos (24U)
#define EXTI1_SECCFGR1_SEC24_Msk (0x1UL << EXTI1_SECCFGR1_SEC24_Pos)         /*!< 0x01000000 */
#define EXTI1_SECCFGR1_SEC24     EXTI1_SECCFGR1_SEC24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI1_SECCFGR1_SEC25_Pos (25U)
#define EXTI1_SECCFGR1_SEC25_Msk (0x1UL << EXTI1_SECCFGR1_SEC25_Pos)         /*!< 0x02000000 */
#define EXTI1_SECCFGR1_SEC25     EXTI1_SECCFGR1_SEC25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI1_SECCFGR1_SEC26_Pos (26U)
#define EXTI1_SECCFGR1_SEC26_Msk (0x1UL << EXTI1_SECCFGR1_SEC26_Pos)         /*!< 0x04000000 */
#define EXTI1_SECCFGR1_SEC26     EXTI1_SECCFGR1_SEC26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI1_SECCFGR1_SEC27_Pos (27U)
#define EXTI1_SECCFGR1_SEC27_Msk (0x1UL << EXTI1_SECCFGR1_SEC27_Pos)         /*!< 0x08000000 */
#define EXTI1_SECCFGR1_SEC27     EXTI1_SECCFGR1_SEC27_Msk                   /*!< SEC/PRIV enable on event input 27 */
#define EXTI1_SECCFGR1_SEC28_Pos (28U)
#define EXTI1_SECCFGR1_SEC28_Msk (0x1UL << EXTI1_SECCFGR1_SEC28_Pos)         /*!< 0x10000000 */
#define EXTI1_SECCFGR1_SEC28     EXTI1_SECCFGR1_SEC28_Msk                   /*!< SEC/PRIV enable on event input 28 */
#define EXTI1_SECCFGR1_SEC29_Pos (29U)
#define EXTI1_SECCFGR1_SEC29_Msk (0x1UL << EXTI1_SECCFGR1_SEC29_Pos)         /*!< 0x20000000 */
#define EXTI1_SECCFGR1_SEC29     EXTI1_SECCFGR1_SEC29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI1_SECCFGR1_SEC30_Pos (30U)
#define EXTI1_SECCFGR1_SEC30_Msk (0x1UL << EXTI1_SECCFGR1_SEC30_Pos)         /*!< 0x40000000 */
#define EXTI1_SECCFGR1_SEC30     EXTI1_SECCFGR1_SEC30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI1_SECCFGR1_SEC31_Pos (31U)
#define EXTI1_SECCFGR1_SEC31_Msk (0x1UL << EXTI1_SECCFGR1_SEC31_Pos)         /*!< 0x80000000 */
#define EXTI1_SECCFGR1_SEC31     EXTI1_SECCFGR1_SEC31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI1_PRIVCFGR1 register  ******************/
#define EXTI1_PRIVCFGR1_PRIV0_Pos  (0U)
#define EXTI1_PRIVCFGR1_PRIV0_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV0_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR1_PRIV0      EXTI1_PRIVCFGR1_PRIV0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI1_PRIVCFGR1_PRIV1_Pos  (1U)
#define EXTI1_PRIVCFGR1_PRIV1_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV1_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR1_PRIV1      EXTI1_PRIVCFGR1_PRIV1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI1_PRIVCFGR1_PRIV2_Pos  (2U)
#define EXTI1_PRIVCFGR1_PRIV2_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV2_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR1_PRIV2      EXTI1_PRIVCFGR1_PRIV2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI1_PRIVCFGR1_PRIV3_Pos  (3U)
#define EXTI1_PRIVCFGR1_PRIV3_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV3_Pos)          /*!< 0x00000008 */
#define EXTI1_PRIVCFGR1_PRIV3      EXTI1_PRIVCFGR1_PRIV3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI1_PRIVCFGR1_PRIV4_Pos  (4U)
#define EXTI1_PRIVCFGR1_PRIV4_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV4_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR1_PRIV4      EXTI1_PRIVCFGR1_PRIV4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI1_PRIVCFGR1_PRIV5_Pos  (5U)
#define EXTI1_PRIVCFGR1_PRIV5_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV5_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR1_PRIV5      EXTI1_PRIVCFGR1_PRIV5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI1_PRIVCFGR1_PRIV6_Pos  (6U)
#define EXTI1_PRIVCFGR1_PRIV6_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV6_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR1_PRIV6      EXTI1_PRIVCFGR1_PRIV6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI1_PRIVCFGR1_PRIV7_Pos  (7U)
#define EXTI1_PRIVCFGR1_PRIV7_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV7_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR1_PRIV7      EXTI1_PRIVCFGR1_PRIV7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI1_PRIVCFGR1_PRIV8_Pos  (8U)
#define EXTI1_PRIVCFGR1_PRIV8_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV8_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR1_PRIV8      EXTI1_PRIVCFGR1_PRIV8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI1_PRIVCFGR1_PRIV9_Pos  (9U)
#define EXTI1_PRIVCFGR1_PRIV9_Msk  (0x1UL << EXTI1_PRIVCFGR1_PRIV9_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR1_PRIV9      EXTI1_PRIVCFGR1_PRIV9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI1_PRIVCFGR1_PRIV10_Pos (10U)
#define EXTI1_PRIVCFGR1_PRIV10_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV10_Pos)         /*!< 0x00000400 */
#define EXTI1_PRIVCFGR1_PRIV10     EXTI1_PRIVCFGR1_PRIV10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI1_PRIVCFGR1_PRIV11_Pos (11U)
#define EXTI1_PRIVCFGR1_PRIV11_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV11_Pos)         /*!< 0x00000800 */
#define EXTI1_PRIVCFGR1_PRIV11     EXTI1_PRIVCFGR1_PRIV11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI1_PRIVCFGR1_PRIV12_Pos (12U)
#define EXTI1_PRIVCFGR1_PRIV12_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV12_Pos)         /*!< 0x00001000 */
#define EXTI1_PRIVCFGR1_PRIV12     EXTI1_PRIVCFGR1_PRIV12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI1_PRIVCFGR1_PRIV13_Pos (13U)
#define EXTI1_PRIVCFGR1_PRIV13_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV13_Pos)         /*!< 0x00002000 */
#define EXTI1_PRIVCFGR1_PRIV13     EXTI1_PRIVCFGR1_PRIV13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI1_PRIVCFGR1_PRIV14_Pos (14U)
#define EXTI1_PRIVCFGR1_PRIV14_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV14_Pos)         /*!< 0x00004000 */
#define EXTI1_PRIVCFGR1_PRIV14     EXTI1_PRIVCFGR1_PRIV14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI1_PRIVCFGR1_PRIV15_Pos (15U)
#define EXTI1_PRIVCFGR1_PRIV15_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV15_Pos)         /*!< 0x00008000 */
#define EXTI1_PRIVCFGR1_PRIV15     EXTI1_PRIVCFGR1_PRIV15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI1_PRIVCFGR1_PRIV16_Pos (16U)
#define EXTI1_PRIVCFGR1_PRIV16_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV16_Pos)         /*!< 0x00010000 */
#define EXTI1_PRIVCFGR1_PRIV16     EXTI1_PRIVCFGR1_PRIV16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI1_PRIVCFGR1_PRIV17_Pos (17U)
#define EXTI1_PRIVCFGR1_PRIV17_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV17_Pos)         /*!< 0x00020000 */
#define EXTI1_PRIVCFGR1_PRIV17     EXTI1_PRIVCFGR1_PRIV17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI1_PRIVCFGR1_PRIV18_Pos (18U)
#define EXTI1_PRIVCFGR1_PRIV18_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV18_Pos)         /*!< 0x00040000 */
#define EXTI1_PRIVCFGR1_PRIV18     EXTI1_PRIVCFGR1_PRIV18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI1_PRIVCFGR1_PRIV19_Pos (19U)
#define EXTI1_PRIVCFGR1_PRIV19_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV19_Pos)         /*!< 0x00080000 */
#define EXTI1_PRIVCFGR1_PRIV19     EXTI1_PRIVCFGR1_PRIV19_Msk                   /*!< SEC/PRIV enable on event input 19 */
/* no event input 20  */
#define EXTI1_PRIVCFGR1_PRIV21_Pos (21U)
#define EXTI1_PRIVCFGR1_PRIV21_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV21_Pos)         /*!< 0x00200000 */
#define EXTI1_PRIVCFGR1_PRIV21     EXTI1_PRIVCFGR1_PRIV21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI1_PRIVCFGR1_PRIV22_Pos (22U)
#define EXTI1_PRIVCFGR1_PRIV22_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV22_Pos)         /*!< 0x00400000 */
#define EXTI1_PRIVCFGR1_PRIV22     EXTI1_PRIVCFGR1_PRIV22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI1_PRIVCFGR1_PRIV23_Pos (23U)
#define EXTI1_PRIVCFGR1_PRIV23_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV23_Pos)         /*!< 0x00800000 */
#define EXTI1_PRIVCFGR1_PRIV23     EXTI1_PRIVCFGR1_PRIV23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI1_PRIVCFGR1_PRIV24_Pos (24U)
#define EXTI1_PRIVCFGR1_PRIV24_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV24_Pos)         /*!< 0x01000000 */
#define EXTI1_PRIVCFGR1_PRIV24     EXTI1_PRIVCFGR1_PRIV24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI1_PRIVCFGR1_PRIV25_Pos (25U)
#define EXTI1_PRIVCFGR1_PRIV25_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV25_Pos)         /*!< 0x02000000 */
#define EXTI1_PRIVCFGR1_PRIV25     EXTI1_PRIVCFGR1_PRIV25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI1_PRIVCFGR1_PRIV26_Pos (26U)
#define EXTI1_PRIVCFGR1_PRIV26_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV26_Pos)         /*!< 0x04000000 */
#define EXTI1_PRIVCFGR1_PRIV26     EXTI1_PRIVCFGR1_PRIV26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI1_PRIVCFGR1_PRIV27_Pos (27U)
#define EXTI1_PRIVCFGR1_PRIV27_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV27_Pos)         /*!< 0x08000000 */
#define EXTI1_PRIVCFGR1_PRIV27     EXTI1_PRIVCFGR1_PRIV27_Msk                   /*!< SEC/PRIV enable on event input 27 */
#define EXTI1_PRIVCFGR1_PRIV28_Pos (28U)
#define EXTI1_PRIVCFGR1_PRIV28_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV28_Pos)         /*!< 0x10000000 */
#define EXTI1_PRIVCFGR1_PRIV28     EXTI1_PRIVCFGR1_PRIV28_Msk                   /*!< SEC/PRIV enable on event input 28 */
#define EXTI1_PRIVCFGR1_PRIV29_Pos (29U)
#define EXTI1_PRIVCFGR1_PRIV29_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV29_Pos)         /*!< 0x20000000 */
#define EXTI1_PRIVCFGR1_PRIV29     EXTI1_PRIVCFGR1_PRIV29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI1_PRIVCFGR1_PRIV30_Pos (30U)
#define EXTI1_PRIVCFGR1_PRIV30_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV30_Pos)         /*!< 0x40000000 */
#define EXTI1_PRIVCFGR1_PRIV30     EXTI1_PRIVCFGR1_PRIV30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI1_PRIVCFGR1_PRIV31_Pos (31U)
#define EXTI1_PRIVCFGR1_PRIV31_Msk (0x1UL << EXTI1_PRIVCFGR1_PRIV31_Pos)         /*!< 0x80000000 */
#define EXTI1_PRIVCFGR1_PRIV31     EXTI1_PRIVCFGR1_PRIV31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI1_RTSR2 register  *******************/
#define EXTI1_RTSR2_RT43_Pos        (11U)
#define EXTI1_RTSR2_RT43_Msk        (0x1UL << EXTI1_RTSR2_RT43_Pos)               /*!< 0x00000800 */
#define EXTI1_RTSR2_RT43            EXTI1_RTSR2_RT43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_RTSR2_RT44_Pos        (12U)
#define EXTI1_RTSR2_RT44_Msk        (0x1UL << EXTI1_RTSR2_RT44_Pos)               /*!< 0x00001000 */
#define EXTI1_RTSR2_RT44            EXTI1_RTSR2_RT44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_RTSR2_RT45_Pos        (13U)
#define EXTI1_RTSR2_RT45_Msk        (0x1UL << EXTI1_RTSR2_RT45_Pos)               /*!< 0x00002000 */
#define EXTI1_RTSR2_RT45            EXTI1_RTSR2_RT45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_FTSR2 register  *******************/
#define EXTI1_FTSR2_FT43_Pos        (11U)
#define EXTI1_FTSR2_FT43_Msk        (0x1UL << EXTI1_FTSR2_FT43_Pos)               /*!< 0x00000800 */
#define EXTI1_FTSR2_FT43            EXTI1_FTSR2_FT43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_FTSR2_FT44_Pos        (12U)
#define EXTI1_FTSR2_FT44_Msk        (0x1UL << EXTI1_FTSR2_FT44_Pos)               /*!< 0x00001000 */
#define EXTI1_FTSR2_FT44            EXTI1_FTSR2_FT44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_FTSR2_FT45_Pos        (13U)
#define EXTI1_FTSR2_FT45_Msk        (0x1UL << EXTI1_FTSR2_FT45_Pos)               /*!< 0x00002000 */
#define EXTI1_FTSR2_FT45            EXTI1_FTSR2_FT45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_SWIER2 register  ******************/
#define EXTI1_SWIER2_SWI43_Pos    (11U)
#define EXTI1_SWIER2_SWI43_Msk    (0x1UL << EXTI1_SWIER2_SWI43_Pos)           /*!< 0x00000800 */
#define EXTI1_SWIER2_SWI43        EXTI1_SWIER2_SWI43_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI1_SWIER2_SWI44_Pos    (12U)
#define EXTI1_SWIER2_SWI44_Msk    (0x1UL << EXTI1_SWIER2_SWI44_Pos)           /*!< 0x00001000 */
#define EXTI1_SWIER2_SWI44        EXTI1_SWIER2_SWI44_Msk                     /*!< Software Interrupt on line 51 */
#define EXTI1_SWIER2_SWI45_Pos    (13U)
#define EXTI1_SWIER2_SWI45_Msk    (0x1UL << EXTI1_SWIER2_SWI45_Pos)           /*!< 0x00002000 */
#define EXTI1_SWIER2_SWI45        EXTI1_SWIER2_SWI45_Msk                     /*!< Software Interrupt on line 51 */

/******************  Bit definition for EXTI1_RPR2 register  *******************/
#define EXTI1_RPR2_RPIF43_Pos        (11U)
#define EXTI1_RPR2_RPIF43_Msk        (0x1UL << EXTI1_RPR2_RPIF43_Pos)               /*!< 0x00000800 */
#define EXTI1_RPR2_RPIF43            EXTI1_RPR2_RPIF43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_RPR2_RPIF44_Pos        (12U)
#define EXTI1_RPR2_RPIF44_Msk        (0x1UL << EXTI1_RPR2_RPIF44_Pos)               /*!< 0x00001000 */
#define EXTI1_RPR2_RPIF44            EXTI1_RPR2_RPIF44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_RPR2_RPIF45_Pos        (13U)
#define EXTI1_RPR2_RPIF45_Msk        (0x1UL << EXTI1_RPR2_RPIF45_Pos)               /*!< 0x00002000 */
#define EXTI1_RPR2_RPIF45            EXTI1_RPR2_RPIF45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_FPR2 register  *******************/
#define EXTI1_FPR2_FPIF43_Pos        (11U)
#define EXTI1_FPR2_FPIF43_Msk        (0x1UL << EXTI1_FPR2_FPIF43_Pos)               /*!< 0x00000800 */
#define EXTI1_FPR2_FPIF43            EXTI1_FPR2_FPIF43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_FPR2_FPIF44_Pos        (12U)
#define EXTI1_FPR2_FPIF44_Msk        (0x1UL << EXTI1_FPR2_FPIF44_Pos)               /*!< 0x00001000 */
#define EXTI1_FPR2_FPIF44            EXTI1_FPR2_FPIF44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_FPR2_FPIF45_Pos        (13U)
#define EXTI1_FPR2_FPIF45_Msk        (0x1UL << EXTI1_FPR2_FPIF45_Pos)               /*!< 0x00002000 */
#define EXTI1_FPR2_FPIF45            EXTI1_FPR2_FPIF45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_SECCFGR2  register  ******************/
#define EXTI1_SECCFGR2_SEC32_Pos  (0U)
#define EXTI1_SECCFGR2_SEC32_Msk  (0x1UL << EXTI1_SECCFGR2_SEC32_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR2_SEC32      EXTI1_SECCFGR2_SEC32_Msk                    /*!< SEC/PRIV enable on event input 32 */
#define EXTI1_SECCFGR2_SEC33_Pos  (1U)
#define EXTI1_SECCFGR2_SEC33_Msk  (0x1UL << EXTI1_SECCFGR2_SEC33_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR2_SEC33      EXTI1_SECCFGR2_SEC33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI1_SECCFGR2_SEC34_Pos  (2U)
#define EXTI1_SECCFGR2_SEC34_Msk  (0x1UL << EXTI1_SECCFGR2_SEC34_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR2_SEC34      EXTI1_SECCFGR2_SEC34_Msk                    /*!< SEC/PRIV enable on event input 34 */
/* no event input 35  */
#define EXTI1_SECCFGR2_SEC36_Pos  (4U)
#define EXTI1_SECCFGR2_SEC36_Msk  (0x1UL << EXTI1_SECCFGR2_SEC36_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR2_SEC36      EXTI1_SECCFGR2_SEC36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI1_SECCFGR2_SEC37_Pos  (5U)
#define EXTI1_SECCFGR2_SEC37_Msk  (0x1UL << EXTI1_SECCFGR2_SEC37_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR2_SEC37      EXTI1_SECCFGR2_SEC37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI1_SECCFGR2_SEC38_Pos  (6U)
#define EXTI1_SECCFGR2_SEC38_Msk  (0x1UL << EXTI1_SECCFGR2_SEC38_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR2_SEC38      EXTI1_SECCFGR2_SEC38_Msk                    /*!< SEC/PRIV enable on event input 38 */
#define EXTI1_SECCFGR2_SEC39_Pos  (7U)
#define EXTI1_SECCFGR2_SEC39_Msk  (0x1UL << EXTI1_SECCFGR2_SEC39_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR2_SEC39      EXTI1_SECCFGR2_SEC39_Msk                    /*!< SEC/PRIV enable on event input 39 */
#define EXTI1_SECCFGR2_SEC40_Pos  (8U)
#define EXTI1_SECCFGR2_SEC40_Msk  (0x1UL << EXTI1_SECCFGR2_SEC40_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR2_SEC40      EXTI1_SECCFGR2_SEC40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI1_SECCFGR2_SEC41_Pos  (9U)
#define EXTI1_SECCFGR2_SEC41_Msk  (0x1UL << EXTI1_SECCFGR2_SEC41_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR2_SEC41      EXTI1_SECCFGR2_SEC41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI1_SECCFGR2_SEC42_Pos (10U)
#define EXTI1_SECCFGR2_SEC42_Msk (0x1UL << EXTI1_SECCFGR2_SEC42_Pos)         /*!< 0x00000400 */
#define EXTI1_SECCFGR2_SEC42     EXTI1_SECCFGR2_SEC42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI1_SECCFGR2_SEC43_Pos (11U)
#define EXTI1_SECCFGR2_SEC43_Msk (0x1UL << EXTI1_SECCFGR2_SEC43_Pos)         /*!< 0x00000800 */
#define EXTI1_SECCFGR2_SEC43     EXTI1_SECCFGR2_SEC43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI1_SECCFGR2_SEC44_Pos (12U)
#define EXTI1_SECCFGR2_SEC44_Msk (0x1UL << EXTI1_SECCFGR2_SEC44_Pos)         /*!< 0x00001000 */
#define EXTI1_SECCFGR2_SEC44     EXTI1_SECCFGR2_SEC44_Msk                   /*!< SEC/PRIV enable on event input 44 */
#define EXTI1_SECCFGR2_SEC45_Pos (13U)
#define EXTI1_SECCFGR2_SEC45_Msk (0x1UL << EXTI1_SECCFGR2_SEC45_Pos)         /*!< 0x00002000 */
#define EXTI1_SECCFGR2_SEC45     EXTI1_SECCFGR2_SEC45_Msk                   /*!< SEC/PRIV enable on event input 45 */
#define EXTI1_SECCFGR2_SEC46_Pos (14U)
#define EXTI1_SECCFGR2_SEC46_Msk (0x1UL << EXTI1_SECCFGR2_SEC46_Pos)         /*!< 0x00004000 */
#define EXTI1_SECCFGR2_SEC46     EXTI1_SECCFGR2_SEC46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI1_SECCFGR2_SEC47_Pos (15U)
#define EXTI1_SECCFGR2_SEC47_Msk (0x1UL << EXTI1_SECCFGR2_SEC47_Pos)         /*!< 0x00008000 */
#define EXTI1_SECCFGR2_SEC47     EXTI1_SECCFGR2_SEC47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI1_SECCFGR2_SEC48_Pos (16U)
#define EXTI1_SECCFGR2_SEC48_Msk (0x1UL << EXTI1_SECCFGR2_SEC48_Pos)         /*!< 0x00010000 */
#define EXTI1_SECCFGR2_SEC48     EXTI1_SECCFGR2_SEC48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI1_SECCFGR2_SEC49_Pos (17U)
#define EXTI1_SECCFGR2_SEC49_Msk (0x1UL << EXTI1_SECCFGR2_SEC49_Pos)         /*!< 0x00020000 */
#define EXTI1_SECCFGR2_SEC49     EXTI1_SECCFGR2_SEC49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI1_SECCFGR2_SEC50_Pos (18U)
#define EXTI1_SECCFGR2_SEC50_Msk (0x1UL << EXTI1_SECCFGR2_SEC50_Pos)         /*!< 0x00040000 */
#define EXTI1_SECCFGR2_SEC50     EXTI1_SECCFGR2_SEC50_Msk                   /*!< SEC/PRIV enable on event input 50 */
/* no event input 51  */
#define EXTI1_SECCFGR2_SEC52_Pos (20U)
#define EXTI1_SECCFGR2_SEC52_Msk (0x1UL << EXTI1_SECCFGR2_SEC52_Pos)         /*!< 0x00080000 */
#define EXTI1_SECCFGR2_SEC52     EXTI1_SECCFGR2_SEC52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI1_SECCFGR2_SEC53_Pos (21U)
#define EXTI1_SECCFGR2_SEC53_Msk (0x1UL << EXTI1_SECCFGR2_SEC53_Pos)         /*!< 0x00200000 */
#define EXTI1_SECCFGR2_SEC53     EXTI1_SECCFGR2_SEC53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI1_SECCFGR2_SEC54_Pos (22U)
#define EXTI1_SECCFGR2_SEC54_Msk (0x1UL << EXTI1_SECCFGR2_SEC54_Pos)         /*!< 0x00400000 */
#define EXTI1_SECCFGR2_SEC54     EXTI1_SECCFGR2_SEC54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI1_SECCFGR2_SEC55_Pos (23U)
#define EXTI1_SECCFGR2_SEC55_Msk (0x1UL << EXTI1_SECCFGR2_SEC55_Pos)         /*!< 0x00800000 */
#define EXTI1_SECCFGR2_SEC55     EXTI1_SECCFGR2_SEC55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI1_SECCFGR2_SEC56_Pos (24U)
#define EXTI1_SECCFGR2_SEC56_Msk (0x1UL << EXTI1_SECCFGR2_SEC56_Pos)         /*!< 0x01000000 */
#define EXTI1_SECCFGR2_SEC56     EXTI1_SECCFGR2_SEC56_Msk                   /*!< SEC/PRIV enable on event input 56 */
#define EXTI1_SECCFGR2_SEC57_Pos (25U)
#define EXTI1_SECCFGR2_SEC57_Msk (0x1UL << EXTI1_SECCFGR2_SEC57_Pos)         /*!< 0x02000000 */
#define EXTI1_SECCFGR2_SEC57     EXTI1_SECCFGR2_SEC57_Msk                   /*!< SEC/PRIV enable on event input 57 */
/* no event input 58  */
#define EXTI1_SECCFGR2_SEC59_Pos (27U)
#define EXTI1_SECCFGR2_SEC59_Msk (0x1UL << EXTI1_SECCFGR2_SEC59_Pos)         /*!< 0x08000000 */
#define EXTI1_SECCFGR2_SEC59     EXTI1_SECCFGR2_SEC59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI1_SECCFGR2_SEC60_Pos (28U)
#define EXTI1_SECCFGR2_SEC60_Msk (0x1UL << EXTI1_SECCFGR2_SEC60_Pos)         /*!< 0x10000000 */
#define EXTI1_SECCFGR2_SEC60     EXTI1_SECCFGR2_SEC60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI1_SECCFGR2_SEC61_Pos (29U)
#define EXTI1_SECCFGR2_SEC61_Msk (0x1UL << EXTI1_SECCFGR2_SEC61_Pos)         /*!< 0x20000000 */
#define EXTI1_SECCFGR2_SEC61     EXTI1_SECCFGR2_SEC61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI1_SECCFGR2_SEC62_Pos (30U)
#define EXTI1_SECCFGR2_SEC62_Msk (0x1UL << EXTI1_SECCFGR2_SEC62_Pos)         /*!< 0x40000000 */
#define EXTI1_SECCFGR2_SEC62     EXTI1_SECCFGR2_SEC62_Msk                   /*!< SEC/PRIV enable on event input 62 */
/* no event input 63 */

/******************  Bit definition for EXTI1_PRIVCFGR2 register  ******************/
#define EXTI1_PRIVCFGR2_PRIV32_Pos  (0U)
#define EXTI1_PRIVCFGR2_PRIV32_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV32_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR2_PRIV32      EXTI1_PRIVCFGR2_PRIV32_Msk                    /*!< SEC/PRIV enable on event input 32 */
#define EXTI1_PRIVCFGR2_PRIV33_Pos  (1U)
#define EXTI1_PRIVCFGR2_PRIV33_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV33_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR2_PRIV33      EXTI1_PRIVCFGR2_PRIV33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI1_PRIVCFGR2_PRIV34_Pos  (2U)
#define EXTI1_PRIVCFGR2_PRIV34_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV34_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR2_PRIV34      EXTI1_PRIVCFGR2_PRIV34_Msk                    /*!< SEC/PRIV enable on event input 34 */
/* no event input 35  */
#define EXTI1_PRIVCFGR2_PRIV36_Pos  (4U)
#define EXTI1_PRIVCFGR2_PRIV36_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV36_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR2_PRIV36      EXTI1_PRIVCFGR2_PRIV36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI1_PRIVCFGR2_PRIV37_Pos  (5U)
#define EXTI1_PRIVCFGR2_PRIV37_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV37_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR2_PRIV37      EXTI1_PRIVCFGR2_PRIV37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI1_PRIVCFGR2_PRIV38_Pos  (6U)
#define EXTI1_PRIVCFGR2_PRIV38_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV38_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR2_PRIV38      EXTI1_PRIVCFGR2_PRIV38_Msk                    /*!< SEC/PRIV enable on event input 38 */
#define EXTI1_PRIVCFGR2_PRIV39_Pos  (7U)
#define EXTI1_PRIVCFGR2_PRIV39_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV39_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR2_PRIV39      EXTI1_PRIVCFGR2_PRIV39_Msk                    /*!< SEC/PRIV enable on event input 39 */
#define EXTI1_PRIVCFGR2_PRIV40_Pos  (8U)
#define EXTI1_PRIVCFGR2_PRIV40_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV40_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR2_PRIV40      EXTI1_PRIVCFGR2_PRIV40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI1_PRIVCFGR2_PRIV41_Pos  (9U)
#define EXTI1_PRIVCFGR2_PRIV41_Msk  (0x1UL << EXTI1_PRIVCFGR2_PRIV41_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR2_PRIV41      EXTI1_PRIVCFGR2_PRIV41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI1_PRIVCFGR2_PRIV42_Pos (10U)
#define EXTI1_PRIVCFGR2_PRIV42_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV42_Pos)         /*!< 0x00000400 */
#define EXTI1_PRIVCFGR2_PRIV42     EXTI1_PRIVCFGR2_PRIV42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI1_PRIVCFGR2_PRIV43_Pos (11U)
#define EXTI1_PRIVCFGR2_PRIV43_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV43_Pos)         /*!< 0x00000800 */
#define EXTI1_PRIVCFGR2_PRIV43     EXTI1_PRIVCFGR2_PRIV43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI1_PRIVCFGR2_PRIV44_Pos (12U)
#define EXTI1_PRIVCFGR2_PRIV44_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV44_Pos)         /*!< 0x00001000 */
#define EXTI1_PRIVCFGR2_PRIV44     EXTI1_PRIVCFGR2_PRIV44_Msk                   /*!< SEC/PRIV enable on event input 44 */
#define EXTI1_PRIVCFGR2_PRIV45_Pos (13U)
#define EXTI1_PRIVCFGR2_PRIV45_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV45_Pos)         /*!< 0x00002000 */
#define EXTI1_PRIVCFGR2_PRIV45     EXTI1_PRIVCFGR2_PRIV45_Msk                   /*!< SEC/PRIV enable on event input 45 */
#define EXTI1_PRIVCFGR2_PRIV46_Pos (14U)
#define EXTI1_PRIVCFGR2_PRIV46_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV46_Pos)         /*!< 0x00004000 */
#define EXTI1_PRIVCFGR2_PRIV46     EXTI1_PRIVCFGR2_PRIV46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI1_PRIVCFGR2_PRIV47_Pos (15U)
#define EXTI1_PRIVCFGR2_PRIV47_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV47_Pos)         /*!< 0x00008000 */
#define EXTI1_PRIVCFGR2_PRIV47     EXTI1_PRIVCFGR2_PRIV47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI1_PRIVCFGR2_PRIV48_Pos (16U)
#define EXTI1_PRIVCFGR2_PRIV48_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV48_Pos)         /*!< 0x00010000 */
#define EXTI1_PRIVCFGR2_PRIV48     EXTI1_PRIVCFGR2_PRIV48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI1_PRIVCFGR2_PRIV49_Pos (17U)
#define EXTI1_PRIVCFGR2_PRIV49_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV49_Pos)         /*!< 0x00020000 */
#define EXTI1_PRIVCFGR2_PRIV49     EXTI1_PRIVCFGR2_PRIV49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI1_PRIVCFGR2_PRIV50_Pos (18U)
#define EXTI1_PRIVCFGR2_PRIV50_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV50_Pos)         /*!< 0x00040000 */
#define EXTI1_PRIVCFGR2_PRIV50     EXTI1_PRIVCFGR2_PRIV50_Msk                   /*!< SEC/PRIV enable on event input 50 */
/* no event input 51  */
#define EXTI1_PRIVCFGR2_PRIV52_Pos (20U)
#define EXTI1_PRIVCFGR2_PRIV52_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV52_Pos)         /*!< 0x00080000 */
#define EXTI1_PRIVCFGR2_PRIV52     EXTI1_PRIVCFGR2_PRIV52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI1_PRIVCFGR2_PRIV53_Pos (21U)
#define EXTI1_PRIVCFGR2_PRIV53_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV53_Pos)         /*!< 0x00200000 */
#define EXTI1_PRIVCFGR2_PRIV53     EXTI1_PRIVCFGR2_PRIV53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI1_PRIVCFGR2_PRIV54_Pos (22U)
#define EXTI1_PRIVCFGR2_PRIV54_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV54_Pos)         /*!< 0x00400000 */
#define EXTI1_PRIVCFGR2_PRIV54     EXTI1_PRIVCFGR2_PRIV54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI1_PRIVCFGR2_PRIV55_Pos (23U)
#define EXTI1_PRIVCFGR2_PRIV55_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV55_Pos)         /*!< 0x00800000 */
#define EXTI1_PRIVCFGR2_PRIV55     EXTI1_PRIVCFGR2_PRIV55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI1_PRIVCFGR2_PRIV56_Pos (24U)
#define EXTI1_PRIVCFGR2_PRIV56_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV56_Pos)         /*!< 0x01000000 */
#define EXTI1_PRIVCFGR2_PRIV56     EXTI1_PRIVCFGR2_PRIV56_Msk                   /*!< SEC/PRIV enable on event input 56 */
#define EXTI1_PRIVCFGR2_PRIV57_Pos (25U)
#define EXTI1_PRIVCFGR2_PRIV57_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV57_Pos)         /*!< 0x02000000 */
#define EXTI1_PRIVCFGR2_PRIV57     EXTI1_PRIVCFGR2_PRIV57_Msk                   /*!< SEC/PRIV enable on event input 57 */
/* no event input 58  */
#define EXTI1_PRIVCFGR2_PRIV59_Pos (27U)
#define EXTI1_PRIVCFGR2_PRIV59_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV59_Pos)         /*!< 0x08000000 */
#define EXTI1_PRIVCFGR2_PRIV59     EXTI1_PRIVCFGR2_PRIV59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI1_PRIVCFGR2_PRIV60_Pos (28U)
#define EXTI1_PRIVCFGR2_PRIV60_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV60_Pos)         /*!< 0x10000000 */
#define EXTI1_PRIVCFGR2_PRIV60     EXTI1_PRIVCFGR2_PRIV60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI1_PRIVCFGR2_PRIV61_Pos (29U)
#define EXTI1_PRIVCFGR2_PRIV61_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV61_Pos)         /*!< 0x20000000 */
#define EXTI1_PRIVCFGR2_PRIV61     EXTI1_PRIVCFGR2_PRIV61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI1_PRIVCFGR2_PRIV62_Pos (30U)
#define EXTI1_PRIVCFGR2_PRIV62_Msk (0x1UL << EXTI1_PRIVCFGR2_PRIV62_Pos)         /*!< 0x40000000 */
#define EXTI1_PRIVCFGR2_PRIV62     EXTI1_PRIVCFGR2_PRIV62_Msk                   /*!< SEC/PRIV enable on event input 62 */
/* no event input 63 */

/******************  Bit definition for EXTI1_RTSR3 register  *******************/
#define EXTI1_RTSR3_RT64_Pos        (0U)
#define EXTI1_RTSR3_RT64_Msk        (0x1UL << EXTI1_RTSR3_RT64_Pos)               /*!< 0x00000001 */
#define EXTI1_RTSR3_RT64            EXTI1_RTSR3_RT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT65_Pos        (1U)
#define EXTI1_RTSR3_RT65_Msk        (0x1UL << EXTI1_RTSR3_RT65_Pos)               /*!< 0x00000002 */
#define EXTI1_RTSR3_RT65            EXTI1_RTSR3_RT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RTSR3_RT67_Pos        (3U)
#define EXTI1_RTSR3_RT67_Msk        (0x1UL << EXTI1_RTSR3_RT67_Pos)               /*!< 0x00000008 */
#define EXTI1_RTSR3_RT67            EXTI1_RTSR3_RT67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT73_Pos        (9U)
#define EXTI1_RTSR3_RT73_Msk        (0x1UL << EXTI1_RTSR3_RT73_Pos)               /*!< 0x00400000 */
#define EXTI1_RTSR3_RT73            EXTI1_RTSR3_RT73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RTSR3_RT83_Pos        (19U)
#define EXTI1_RTSR3_RT83_Msk        (0x1UL << EXTI1_RTSR3_RT83_Pos)               /*!< 0x00080000 */
#define EXTI1_RTSR3_RT83            EXTI1_RTSR3_RT83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT84_Pos        (20U)
#define EXTI1_RTSR3_RT84_Msk        (0x1UL << EXTI1_RTSR3_RT84_Pos)               /*!< 0x00100000 */
#define EXTI1_RTSR3_RT84            EXTI1_RTSR3_RT84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_FTSR3 register  *******************/
#define EXTI1_FTSR3_FT64_Pos        (0U)
#define EXTI1_FTSR3_FT64_Msk        (0x1UL << EXTI1_FTSR3_FT64_Pos)               /*!< 0x00000001 */
#define EXTI1_FTSR3_FT64            EXTI1_FTSR3_FT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT65_Pos        (1U)
#define EXTI1_FTSR3_FT65_Msk        (0x1UL << EXTI1_FTSR3_FT65_Pos)               /*!< 0x00000002 */
#define EXTI1_FTSR3_FT65            EXTI1_FTSR3_FT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FTSR3_FT67_Pos        (3U)
#define EXTI1_FTSR3_FT67_Msk        (0x1UL << EXTI1_FTSR3_FT67_Pos)               /*!< 0x00000008 */
#define EXTI1_FTSR3_FT67            EXTI1_FTSR3_FT67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT73_Pos        (9U)
#define EXTI1_FTSR3_FT73_Msk        (0x1UL << EXTI1_FTSR3_FT73_Pos)               /*!< 0x00400000 */
#define EXTI1_FTSR3_FT73            EXTI1_FTSR3_FT73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FTSR3_FT83_Pos        (19U)
#define EXTI1_FTSR3_FT83_Msk        (0x1UL << EXTI1_FTSR3_FT83_Pos)               /*!< 0x00080000 */
#define EXTI1_FTSR3_FT83            EXTI1_FTSR3_FT83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT84_Pos        (20U)
#define EXTI1_FTSR3_FT84_Msk        (0x1UL << EXTI1_FTSR3_FT84_Pos)               /*!< 0x00100000 */
#define EXTI1_FTSR3_FT84            EXTI1_FTSR3_FT84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_SWIER3 register  ******************/
#define EXTI1_SWIER3_SWI64_Pos    (0U)
#define EXTI1_SWIER3_SWI64_Msk    (0x1UL << EXTI1_SWIER3_SWI64_Pos)           /*!< 0x00000001 */
#define EXTI1_SWIER3_SWI64        EXTI1_SWIER3_SWI64_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI65_Pos    (1U)
#define EXTI1_SWIER3_SWI65_Msk    (0x1UL << EXTI1_SWIER3_SWI65_Pos)           /*!< 0x00000002 */
#define EXTI1_SWIER3_SWI65        EXTI1_SWIER3_SWI65_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI1_SWIER3_SWI67_Pos    (3U)
#define EXTI1_SWIER3_SWI67_Msk    (0x1UL << EXTI1_SWIER3_SWI67_Pos)           /*!< 0x00000008 */
#define EXTI1_SWIER3_SWI67        EXTI1_SWIER3_SWI67_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI73_Pos    (9U)
#define EXTI1_SWIER3_SWI73_Msk    (0x1UL << EXTI1_SWIER3_SWI73_Pos)           /*!< 0x00000200 */
#define EXTI1_SWIER3_SWI73        EXTI1_SWIER3_SWI73_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI1_SWIER3_SWI83_Pos    (19U)
#define EXTI1_SWIER3_SWI83_Msk    (0x1UL << EXTI1_SWIER3_SWI83_Pos)           /*!< 0x00200000 */
#define EXTI1_SWIER3_SWI83        EXTI1_SWIER3_SWI83_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI84_Pos    (20U)
#define EXTI1_SWIER3_SWI84_Msk    (0x1UL << EXTI1_SWIER3_SWI84_Pos)           /*!< 0x00400000 */
#define EXTI1_SWIER3_SWI84        EXTI1_SWIER3_SWI84_Msk                     /*!< Software Interrupt on line 86 */

/******************  Bit definition for EXTI1_RPR3 register  *******************/
#define EXTI1_RPR3_RPIF64_Pos        (0U)
#define EXTI1_RPR3_RPIF64_Msk        (0x1UL << EXTI1_RPR3_RPIF64_Pos)               /*!< 0x00000001 */
#define EXTI1_RPR3_RPIF64            EXTI1_RPR3_RPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF65_Pos        (1U)
#define EXTI1_RPR3_RPIF65_Msk        (0x1UL << EXTI1_RPR3_RPIF65_Pos)               /*!< 0x00000002 */
#define EXTI1_RPR3_RPIF65            EXTI1_RPR3_RPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RPR3_RPIF67_Pos        (3U)
#define EXTI1_RPR3_RPIF67_Msk        (0x1UL << EXTI1_RPR3_RPIF67_Pos)               /*!< 0x00000008 */
#define EXTI1_RPR3_RPIF67            EXTI1_RPR3_RPIF67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF73_Pos        (9U)
#define EXTI1_RPR3_RPIF73_Msk        (0x1UL << EXTI1_RPR3_RPIF73_Pos)               /*!< 0x00400000 */
#define EXTI1_RPR3_RPIF73            EXTI1_RPR3_RPIF73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RPR3_RPIF83_Pos        (19U)
#define EXTI1_RPR3_RPIF83_Msk        (0x1UL << EXTI1_RPR3_RPIF83_Pos)               /*!< 0x00080000 */
#define EXTI1_RPR3_RPIF83            EXTI1_RPR3_RPIF83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF84_Pos        (20U)
#define EXTI1_RPR3_RPIF84_Msk        (0x1UL << EXTI1_RPR3_RPIF84_Pos)               /*!< 0x00100000 */
#define EXTI1_RPR3_RPIF84            EXTI1_RPR3_RPIF84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_FPR3 register  *******************/
#define EXTI1_FPR3_FPIF64_Pos        (0U)
#define EXTI1_FPR3_FPIF64_Msk        (0x1UL << EXTI1_FPR3_FPIF64_Pos)               /*!< 0x00000001 */
#define EXTI1_FPR3_FPIF64            EXTI1_FPR3_FPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF65_Pos        (1U)
#define EXTI1_FPR3_FPIF65_Msk        (0x1UL << EXTI1_FPR3_FPIF65_Pos)               /*!< 0x00000002 */
#define EXTI1_FPR3_FPIF65            EXTI1_FPR3_FPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FPR3_FPIF67_Pos        (3U)
#define EXTI1_FPR3_FPIF67_Msk        (0x1UL << EXTI1_FPR3_FPIF67_Pos)               /*!< 0x00000008 */
#define EXTI1_FPR3_FPIF67            EXTI1_FPR3_FPIF67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF73_Pos        (9U)
#define EXTI1_FPR3_FPIF73_Msk        (0x1UL << EXTI1_FPR3_FPIF73_Pos)               /*!< 0x00400000 */
#define EXTI1_FPR3_FPIF73            EXTI1_FPR3_FPIF73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FPR3_FPIF83_Pos        (19U)
#define EXTI1_FPR3_FPIF83_Msk        (0x1UL << EXTI1_FPR3_FPIF83_Pos)               /*!< 0x00080000 */
#define EXTI1_FPR3_FPIF83            EXTI1_FPR3_FPIF83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF84_Pos        (20U)
#define EXTI1_FPR3_FPIF84_Msk        (0x1UL << EXTI1_FPR3_FPIF84_Pos)               /*!< 0x00100000 */
#define EXTI1_FPR3_FPIF84            EXTI1_FPR3_FPIF84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_SECCFGR3  register  ******************/
#define EXTI1_SECCFGR3_SEC64_Pos  (0U)
#define EXTI1_SECCFGR3_SEC64_Msk  (0x1UL << EXTI1_SECCFGR3_SEC64_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR3_SEC64      EXTI1_SECCFGR3_SEC64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI1_SECCFGR3_SEC65_Pos  (1U)
#define EXTI1_SECCFGR3_SEC65_Msk  (0x1UL << EXTI1_SECCFGR3_SEC65_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR3_SEC65      EXTI1_SECCFGR3_SEC65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI1_SECCFGR3_SEC66_Pos  (2U)
#define EXTI1_SECCFGR3_SEC66_Msk  (0x1UL << EXTI1_SECCFGR3_SEC66_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR3_SEC66      EXTI1_SECCFGR3_SEC66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI1_SECCFGR3_SEC67_Pos  (3U)
#define EXTI1_SECCFGR3_SEC67_Msk  (0x1UL << EXTI1_SECCFGR3_SEC67_Pos)          /*!< 0x00000008 */
#define EXTI1_SECCFGR3_SEC67      EXTI1_SECCFGR3_SEC67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI1_SECCFGR3_SEC68_Pos  (4U)
#define EXTI1_SECCFGR3_SEC68_Msk  (0x1UL << EXTI1_SECCFGR3_SEC68_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR3_SEC68      EXTI1_SECCFGR3_SEC68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI1_SECCFGR3_SEC69_Pos  (5U)
#define EXTI1_SECCFGR3_SEC69_Msk  (0x1UL << EXTI1_SECCFGR3_SEC69_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR3_SEC69      EXTI1_SECCFGR3_SEC69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI1_SECCFGR3_SEC70_Pos  (6U)
#define EXTI1_SECCFGR3_SEC70_Msk  (0x1UL << EXTI1_SECCFGR3_SEC70_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR3_SEC70      EXTI1_SECCFGR3_SEC70_Msk                    /*!< SEC/PRIV enable on event input 70 */
#define EXTI1_SECCFGR3_SEC71_Pos  (7U)
#define EXTI1_SECCFGR3_SEC71_Msk  (0x1UL << EXTI1_SECCFGR3_SEC71_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR3_SEC71      EXTI1_SECCFGR3_SEC71_Msk                    /*!< SEC/PRIV enable on event input 71 */
#define EXTI1_SECCFGR3_SEC72_Pos  (8U)
#define EXTI1_SECCFGR3_SEC72_Msk  (0x1UL << EXTI1_SECCFGR3_SEC72_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR3_SEC72      EXTI1_SECCFGR3_SEC72_Msk                    /*!< SEC/PRIV enable on event input 72 */
#define EXTI1_SECCFGR3_SEC73_Pos  (9U)
#define EXTI1_SECCFGR3_SEC73_Msk  (0x1UL << EXTI1_SECCFGR3_SEC73_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR3_SEC73      EXTI1_SECCFGR3_SEC73_Msk                    /*!< SEC/PRIV enable on event input 73 */
#define EXTI1_SECCFGR3_SEC74_Pos  (10U)
#define EXTI1_SECCFGR3_SEC74_Msk  (0x1UL << EXTI1_SECCFGR3_SEC74_Pos)           /*!< 0x00000400 */
#define EXTI1_SECCFGR3_SEC74      EXTI1_SECCFGR3_SEC74_Msk                     /*!< SEC/PRIV enable on event input 74 */
#define EXTI1_SECCFGR3_SEC75_Pos  (11U)
#define EXTI1_SECCFGR3_SEC75_Msk  (0x1UL << EXTI1_SECCFGR3_SEC75_Pos)           /*!< 0x00000800 */
#define EXTI1_SECCFGR3_SEC75      EXTI1_SECCFGR3_SEC75_Msk                     /*!< SEC/PRIV enable on event input 75 */
#define EXTI1_SECCFGR3_SEC76_Pos  (12U)
#define EXTI1_SECCFGR3_SEC76_Msk  (0x1UL << EXTI1_SECCFGR3_SEC76_Pos)           /*!< 0x00001000 */
#define EXTI1_SECCFGR3_SEC76      EXTI1_SECCFGR3_SEC76_Msk                     /*!< SEC/PRIV enable on event input 76 */
#define EXTI1_SECCFGR3_SEC77_Pos  (13U)
#define EXTI1_SECCFGR3_SEC77_Msk  (0x1UL << EXTI1_SECCFGR3_SEC77_Pos)           /*!< 0x00002000 */
#define EXTI1_SECCFGR3_SEC77      EXTI1_SECCFGR3_SEC77_Msk                     /*!< SEC/PRIV enable on event input 77 */
#define EXTI1_SECCFGR3_SEC78_Pos  (14U)
#define EXTI1_SECCFGR3_SEC78_Msk  (0x1UL << EXTI1_SECCFGR3_SEC78_Pos)           /*!< 0x00004000 */
#define EXTI1_SECCFGR3_SEC78      EXTI1_SECCFGR3_SEC78_Msk                     /*!< SEC/PRIV enable on event input 78 */
#define EXTI1_SECCFGR3_SEC79_Pos  (15U)
#define EXTI1_SECCFGR3_SEC79_Msk  (0x1UL << EXTI1_SECCFGR3_SEC79_Pos)           /*!< 0x00008000 */
#define EXTI1_SECCFGR3_SEC79      EXTI1_SECCFGR3_SEC79_Msk                     /*!< SEC/PRIV enable on event input 79 */
#define EXTI1_SECCFGR3_SEC80_Pos  (16U)
#define EXTI1_SECCFGR3_SEC80_Msk  (0x1UL << EXTI1_SECCFGR3_SEC80_Pos)           /*!< 0x00010000 */
#define EXTI1_SECCFGR3_SEC80      EXTI1_SECCFGR3_SEC80_Msk                     /*!< SEC/PRIV enable on event input 80 */
#define EXTI1_SECCFGR3_SEC81_Pos  (17U)
#define EXTI1_SECCFGR3_SEC81_Msk  (0x1UL << EXTI1_SECCFGR3_SEC81_Pos)           /*!< 0x00020000 */
#define EXTI1_SECCFGR3_SEC81      EXTI1_SECCFGR3_SEC81_Msk                     /*!< SEC/PRIV enable on event input 81 */
#define EXTI1_SECCFGR3_SEC82_Pos  (18U)
#define EXTI1_SECCFGR3_SEC82_Msk  (0x1UL << EXTI1_SECCFGR3_SEC82_Pos)           /*!< 0x00040000 */
#define EXTI1_SECCFGR3_SEC82      EXTI1_SECCFGR3_SEC82_Msk                     /*!< SEC/PRIV enable on event input 82 */
#define EXTI1_SECCFGR3_SEC83_Pos  (19U)
#define EXTI1_SECCFGR3_SEC83_Msk  (0x1UL << EXTI1_SECCFGR3_SEC83_Pos)           /*!< 0x00080000 */
#define EXTI1_SECCFGR3_SEC83      EXTI1_SECCFGR3_SEC83_Msk                     /*!< SEC/PRIV enable on event input 83 */
#define EXTI1_SECCFGR3_SEC84_Pos  (20U)
#define EXTI1_SECCFGR3_SEC84_Msk  (0x1UL << EXTI1_SECCFGR3_SEC84_Pos)           /*!< 0x00200000 */
#define EXTI1_SECCFGR3_SEC84      EXTI1_SECCFGR3_SEC84_Msk                     /*!< SEC/PRIV enable on event input 84 */
/* no event input 84 - 95 */

/******************  Bit definition for EXTI1_PRIVCFGR3 register  ******************/
#define EXTI1_PRIVCFGR3_PRIV64_Pos  (0U)
#define EXTI1_PRIVCFGR3_PRIV64_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV64_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR3_PRIV64      EXTI1_PRIVCFGR3_PRIV64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI1_PRIVCFGR3_PRIV65_Pos  (1U)
#define EXTI1_PRIVCFGR3_PRIV65_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV65_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR3_PRIV65      EXTI1_PRIVCFGR3_PRIV65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI1_PRIVCFGR3_PRIV66_Pos  (2U)
#define EXTI1_PRIVCFGR3_PRIV66_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV66_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR3_PRIV66      EXTI1_PRIVCFGR3_PRIV66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI1_PRIVCFGR3_PRIV67_Pos  (3U)
#define EXTI1_PRIVCFGR3_PRIV67_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV67_Pos)          /*!< 0x00000008 */
#define EXTI1_PRIVCFGR3_PRIV67      EXTI1_PRIVCFGR3_PRIV67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI1_PRIVCFGR3_PRIV68_Pos  (4U)
#define EXTI1_PRIVCFGR3_PRIV68_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV68_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR3_PRIV68      EXTI1_PRIVCFGR3_PRIV68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI1_PRIVCFGR3_PRIV69_Pos  (5U)
#define EXTI1_PRIVCFGR3_PRIV69_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV69_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR3_PRIV69      EXTI1_PRIVCFGR3_PRIV69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI1_PRIVCFGR3_PRIV70_Pos  (6U)
#define EXTI1_PRIVCFGR3_PRIV70_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV70_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR3_PRIV70      EXTI1_PRIVCFGR3_PRIV70_Msk                    /*!< SEC/PRIV enable on event input 70 */
#define EXTI1_PRIVCFGR3_PRIV71_Pos  (7U)
#define EXTI1_PRIVCFGR3_PRIV71_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV71_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR3_PRIV71      EXTI1_PRIVCFGR3_PRIV71_Msk                    /*!< SEC/PRIV enable on event input 71 */
#define EXTI1_PRIVCFGR3_PRIV72_Pos  (8U)
#define EXTI1_PRIVCFGR3_PRIV72_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV72_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR3_PRIV72      EXTI1_PRIVCFGR3_PRIV72_Msk                    /*!< SEC/PRIV enable on event input 72 */
#define EXTI1_PRIVCFGR3_PRIV73_Pos  (9U)
#define EXTI1_PRIVCFGR3_PRIV73_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV73_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR3_PRIV73      EXTI1_PRIVCFGR3_PRIV73_Msk                    /*!< SEC/PRIV enable on event input 73 */
#define EXTI1_PRIVCFGR3_PRIV74_Pos  (10U)
#define EXTI1_PRIVCFGR3_PRIV74_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV74_Pos)           /*!< 0x00000400 */
#define EXTI1_PRIVCFGR3_PRIV74      EXTI1_PRIVCFGR3_PRIV74_Msk                     /*!< SEC/PRIV enable on event input 74 */
#define EXTI1_PRIVCFGR3_PRIV75_Pos  (11U)
#define EXTI1_PRIVCFGR3_PRIV75_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV75_Pos)           /*!< 0x00000800 */
#define EXTI1_PRIVCFGR3_PRIV75      EXTI1_PRIVCFGR3_PRIV75_Msk                     /*!< SEC/PRIV enable on event input 75 */
#define EXTI1_PRIVCFGR3_PRIV76_Pos  (12U)
#define EXTI1_PRIVCFGR3_PRIV76_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV76_Pos)           /*!< 0x00001000 */
#define EXTI1_PRIVCFGR3_PRIV76      EXTI1_PRIVCFGR3_PRIV76_Msk                     /*!< SEC/PRIV enable on event input 76 */
#define EXTI1_PRIVCFGR3_PRIV77_Pos  (13U)
#define EXTI1_PRIVCFGR3_PRIV77_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV77_Pos)           /*!< 0x00002000 */
#define EXTI1_PRIVCFGR3_PRIV77      EXTI1_PRIVCFGR3_PRIV77_Msk                     /*!< SEC/PRIV enable on event input 77 */
#define EXTI1_PRIVCFGR3_PRIV78_Pos  (14U)
#define EXTI1_PRIVCFGR3_PRIV78_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV78_Pos)           /*!< 0x00004000 */
#define EXTI1_PRIVCFGR3_PRIV78      EXTI1_PRIVCFGR3_PRIV78_Msk                     /*!< SEC/PRIV enable on event input 78 */
#define EXTI1_PRIVCFGR3_PRIV79_Pos  (15U)
#define EXTI1_PRIVCFGR3_PRIV79_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV79_Pos)           /*!< 0x00008000 */
#define EXTI1_PRIVCFGR3_PRIV79      EXTI1_PRIVCFGR3_PRIV79_Msk                     /*!< SEC/PRIV enable on event input 79 */
#define EXTI1_PRIVCFGR3_PRIV80_Pos  (16U)
#define EXTI1_PRIVCFGR3_PRIV80_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV80_Pos)           /*!< 0x00010000 */
#define EXTI1_PRIVCFGR3_PRIV80      EXTI1_PRIVCFGR3_PRIV80_Msk                     /*!< SEC/PRIV enable on event input 80 */
#define EXTI1_PRIVCFGR3_PRIV81_Pos  (17U)
#define EXTI1_PRIVCFGR3_PRIV81_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV81_Pos)           /*!< 0x00020000 */
#define EXTI1_PRIVCFGR3_PRIV81      EXTI1_PRIVCFGR3_PRIV81_Msk                     /*!< SEC/PRIV enable on event input 81 */
#define EXTI1_PRIVCFGR3_PRIV82_Pos  (18U)
#define EXTI1_PRIVCFGR3_PRIV82_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV82_Pos)           /*!< 0x00040000 */
#define EXTI1_PRIVCFGR3_PRIV82      EXTI1_PRIVCFGR3_PRIV82_Msk                     /*!< SEC/PRIV enable on event input 82 */
#define EXTI1_PRIVCFGR3_PRIV83_Pos  (19U)
#define EXTI1_PRIVCFGR3_PRIV83_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV83_Pos)           /*!< 0x00080000 */
#define EXTI1_PRIVCFGR3_PRIV83      EXTI1_PRIVCFGR3_PRIV83_Msk                     /*!< SEC/PRIV enable on event input 83 */
#define EXTI1_PRIVCFGR3_PRIV84_Pos  (20U)
#define EXTI1_PRIVCFGR3_PRIV84_Msk  (0x1UL << EXTI1_PRIVCFGR3_PRIV84_Pos)           /*!< 0x00200000 */
#define EXTI1_PRIVCFGR3_PRIV84      EXTI1_PRIVCFGR3_PRIV84_Msk                     /*!< SEC/PRIV enable on event input 84 */
/* no event input 84 - 95 */

/* Edu: common definition for EXTI1 EXTI2 */
/*****************  Bit definition for EXTI_EXTICR1, EXTICR[0] register  ***************/
#define EXTI_EXTICR1_EXTI0_Pos        (0U)
#define EXTI_EXTICR1_EXTI0_Msk        (0xFFUL << EXTI_EXTICR1_EXTI0_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR1_EXTI0            EXTI_EXTICR1_EXTI0_Msk                   /*!<EXTI 0 configuration */
#define EXTI_EXTICR1_EXTI1_Pos        (8U)
#define EXTI_EXTICR1_EXTI1_Msk        (0xFFUL << EXTI_EXTICR1_EXTI1_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR1_EXTI1            EXTI_EXTICR1_EXTI1_Msk                   /*!<EXTI 1 configuration */
#define EXTI_EXTICR1_EXTI2_Pos        (16U)
#define EXTI_EXTICR1_EXTI2_Msk        (0xFFUL << EXTI_EXTICR1_EXTI2_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR1_EXTI2            EXTI_EXTICR1_EXTI2_Msk                   /*!<EXTI 2 configuration */
#define EXTI_EXTICR1_EXTI3_Pos        (24U)
#define EXTI_EXTICR1_EXTI3_Msk        (0xFFUL << EXTI_EXTICR1_EXTI3_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR1_EXTI3            EXTI_EXTICR1_EXTI3_Msk                   /*!<EXTI 3 configuration */
/**
  * @brief   EXTI0 configuration
  */
#define EXTI_EXTICR1_EXTI0_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PA[0] pin */
#define EXTI_EXTICR1_EXTI0_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PB[0] pin */
#define EXTI_EXTICR1_EXTI0_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PC[0] pin */
#define EXTI_EXTICR1_EXTI0_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PD[0] pin */
#define EXTI_EXTICR1_EXTI0_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PE[0] pin */
#define EXTI_EXTICR1_EXTI0_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PF[0] pin */
#define EXTI_EXTICR1_EXTI0_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PG[0] pin */
#define EXTI_EXTICR1_EXTI0_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PH[0] pin */
#define EXTI_EXTICR1_EXTI0_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PI[0] pin */
#define EXTI_EXTICR1_EXTI0_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PJ[0] pin */
#define EXTI_EXTICR1_EXTI0_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PK[0] pin */
#define EXTI_EXTICR1_EXTI0_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PZ[0] pin */

/**
  * @brief   EXTI1 configuration
  */
#define EXTI_EXTICR1_EXTI1_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PA[1] pin */
#define EXTI_EXTICR1_EXTI1_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PB[1] pin */
#define EXTI_EXTICR1_EXTI1_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PC[1] pin */
#define EXTI_EXTICR1_EXTI1_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PD[1] pin */
#define EXTI_EXTICR1_EXTI1_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PE[1] pin */
#define EXTI_EXTICR1_EXTI1_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PF[1] pin */
#define EXTI_EXTICR1_EXTI1_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PG[1] pin */
#define EXTI_EXTICR1_EXTI1_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PH[1] pin */
#define EXTI_EXTICR1_EXTI1_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PI[1] pin */
#define EXTI_EXTICR1_EXTI1_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PJ[1] pin */
#define EXTI_EXTICR1_EXTI1_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PK[1] pin */
#define EXTI_EXTICR1_EXTI1_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PZ[1] pin */


/**
  * @brief   EXTI2 configuration
  */
#define EXTI_EXTICR1_EXTI2_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PA[2] pin */
#define EXTI_EXTICR1_EXTI2_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PB[2] pin */
#define EXTI_EXTICR1_EXTI2_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PC[2] pin */
#define EXTI_EXTICR1_EXTI2_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PD[2] pin */
#define EXTI_EXTICR1_EXTI2_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PE[2] pin */
#define EXTI_EXTICR1_EXTI2_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PF[2] pin */
#define EXTI_EXTICR1_EXTI2_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PG[2] pin */
#define EXTI_EXTICR1_EXTI2_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PH[2] pin */
#define EXTI_EXTICR1_EXTI2_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PI[2] pin */
#define EXTI_EXTICR1_EXTI2_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PJ[2] pin */
#define EXTI_EXTICR1_EXTI2_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PK[2] pin */
#define EXTI_EXTICR1_EXTI2_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PZ[2] pin */

/**
  * @brief   EXTI3 configuration
  */
#define EXTI_EXTICR1_EXTI3_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PA[3] pin */
#define EXTI_EXTICR1_EXTI3_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PB[3] pin */
#define EXTI_EXTICR1_EXTI3_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PC[3] pin */
#define EXTI_EXTICR1_EXTI3_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PD[3] pin */
#define EXTI_EXTICR1_EXTI3_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PE[3] pin */
#define EXTI_EXTICR1_EXTI3_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PF[3] pin */
#define EXTI_EXTICR1_EXTI3_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PG[3] pin */
#define EXTI_EXTICR1_EXTI3_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PH[3] pin */
#define EXTI_EXTICR1_EXTI3_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PI[3] pin */
#define EXTI_EXTICR1_EXTI3_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PJ[3] pin */
#define EXTI_EXTICR1_EXTI3_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PK[3] pin */
#define EXTI_EXTICR1_EXTI3_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PZ[3] pin */

/*****************  Bit definition for EXTI_EXTICR2 register  ***************/
#define EXTI_EXTICR2_EXTI4_Pos        (0U)
#define EXTI_EXTICR2_EXTI4_Msk        (0xFFUL << EXTI_EXTICR2_EXTI4_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR2_EXTI4            EXTI_EXTICR2_EXTI4_Msk                   /*!<EXTI 4 configuration */
#define EXTI_EXTICR2_EXTI5_Pos        (8U)
#define EXTI_EXTICR2_EXTI5_Msk        (0xFFUL << EXTI_EXTICR2_EXTI5_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR2_EXTI5            EXTI_EXTICR2_EXTI5_Msk                   /*!<EXTI 5 configuration */
#define EXTI_EXTICR2_EXTI6_Pos        (16U)
#define EXTI_EXTICR2_EXTI6_Msk        (0xFFUL << EXTI_EXTICR2_EXTI6_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR2_EXTI6            EXTI_EXTICR2_EXTI6_Msk                   /*!<EXTI 6 configuration */
#define EXTI_EXTICR2_EXTI7_Pos        (24U)
#define EXTI_EXTICR2_EXTI7_Msk        (0xFFUL << EXTI_EXTICR2_EXTI7_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR2_EXTI7            EXTI_EXTICR2_EXTI7_Msk                   /*!<EXTI 7 configuration */

/**
  * @brief   EXTI4 configuration
  */
#define EXTI_EXTICR2_EXTI4_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PA[4] pin */
#define EXTI_EXTICR2_EXTI4_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PB[4] pin */
#define EXTI_EXTICR2_EXTI4_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PC[4] pin */
#define EXTI_EXTICR2_EXTI4_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PD[4] pin */
#define EXTI_EXTICR2_EXTI4_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PE[4] pin */
#define EXTI_EXTICR2_EXTI4_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PF[4] pin */
#define EXTI_EXTICR2_EXTI4_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PG[4] pin */
#define EXTI_EXTICR2_EXTI4_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PH[4] pin */
#define EXTI_EXTICR2_EXTI4_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PI[4] pin */
#define EXTI_EXTICR2_EXTI4_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PJ[4] pin */
#define EXTI_EXTICR2_EXTI4_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PK[4] pin */
#define EXTI_EXTICR2_EXTI4_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PZ[4] pin */

/**
  * @brief   EXTI5 configuration
  */
#define EXTI_EXTICR2_EXTI5_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PA[5] pin */
#define EXTI_EXTICR2_EXTI5_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PB[5] pin */
#define EXTI_EXTICR2_EXTI5_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PC[5] pin */
#define EXTI_EXTICR2_EXTI5_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PD[5] pin */
#define EXTI_EXTICR2_EXTI5_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PE[5] pin */
#define EXTI_EXTICR2_EXTI5_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PF[5] pin */
#define EXTI_EXTICR2_EXTI5_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PG[5] pin */
#define EXTI_EXTICR2_EXTI5_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PH[5] pin */
#define EXTI_EXTICR2_EXTI5_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PI[5] pin */
#define EXTI_EXTICR2_EXTI5_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PJ[5] pin */
#define EXTI_EXTICR2_EXTI5_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PK[5] pin */
#define EXTI_EXTICR2_EXTI5_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PZ[5] pin */

/**
  * @brief   EXTI6 configuration
  */
#define EXTI_EXTICR2_EXTI6_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PA[6] pin */
#define EXTI_EXTICR2_EXTI6_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PB[6] pin */
#define EXTI_EXTICR2_EXTI6_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PC[6] pin */
#define EXTI_EXTICR2_EXTI6_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PD[6] pin */
#define EXTI_EXTICR2_EXTI6_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PE[6] pin */
#define EXTI_EXTICR2_EXTI6_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PF[6] pin */
#define EXTI_EXTICR2_EXTI6_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PG[6] pin */
#define EXTI_EXTICR2_EXTI6_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PH[6] pin */
#define EXTI_EXTICR2_EXTI6_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PI[6] pin */
#define EXTI_EXTICR2_EXTI6_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PJ[6] pin */
#define EXTI_EXTICR2_EXTI6_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PK[6] pin */
#define EXTI_EXTICR2_EXTI6_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PZ[6] pin */

/**
  * @brief   EXTI7 configuration
  */
#define EXTI_EXTICR2_EXTI7_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PA[7] pin */
#define EXTI_EXTICR2_EXTI7_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PB[7] pin */
#define EXTI_EXTICR2_EXTI7_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PC[7] pin */
#define EXTI_EXTICR2_EXTI7_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PD[7] pin */
#define EXTI_EXTICR2_EXTI7_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PE[7] pin */
#define EXTI_EXTICR2_EXTI7_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PF[7] pin */
#define EXTI_EXTICR2_EXTI7_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PG[7] pin */
#define EXTI_EXTICR2_EXTI7_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PH[7] pin */
#define EXTI_EXTICR2_EXTI7_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PI[7] pin */
#define EXTI_EXTICR2_EXTI7_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PJ[7] pin */
#define EXTI_EXTICR2_EXTI7_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PK[7] pin */
#define EXTI_EXTICR2_EXTI7_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PZ[7] pin */

/*****************  Bit definition for EXTI_EXTICR3 register  ***************/
#define EXTI_EXTICR3_EXTI8_Pos        (0U)
#define EXTI_EXTICR3_EXTI8_Msk        (0xFFUL << EXTI_EXTICR3_EXTI8_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR3_EXTI8            EXTI_EXTICR3_EXTI8_Msk                   /*!<EXTI 8 configuration */
#define EXTI_EXTICR3_EXTI9_Pos        (8U)
#define EXTI_EXTICR3_EXTI9_Msk        (0xFFUL << EXTI_EXTICR3_EXTI9_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR3_EXTI9            EXTI_EXTICR3_EXTI9_Msk                   /*!<EXTI 9 configuration */
#define EXTI_EXTICR3_EXTI10_Pos       (16U)
#define EXTI_EXTICR3_EXTI10_Msk       (0xFFUL << EXTI_EXTICR3_EXTI10_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR3_EXTI10           EXTI_EXTICR3_EXTI10_Msk                  /*!<EXTI 10 configuration */
#define EXTI_EXTICR3_EXTI11_Pos       (24U)
#define EXTI_EXTICR3_EXTI11_Msk       (0xFFUL << EXTI_EXTICR3_EXTI11_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR3_EXTI11           EXTI_EXTICR3_EXTI11_Msk                  /*!<EXTI 11 configuration */

/**
  * @brief   EXTI8 configuration
  */
#define EXTI_EXTICR3_EXTI8_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PA[8] pin */
#define EXTI_EXTICR3_EXTI8_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PB[8] pin */
#define EXTI_EXTICR3_EXTI8_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PC[8] pin */
#define EXTI_EXTICR3_EXTI8_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PD[8] pin */
#define EXTI_EXTICR3_EXTI8_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PE[8] pin */
#define EXTI_EXTICR3_EXTI8_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PF[8] pin */
#define EXTI_EXTICR3_EXTI8_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PG[8] pin */
#define EXTI_EXTICR3_EXTI8_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PH[8] pin */
#define EXTI_EXTICR3_EXTI8_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PI[8] pin */
#define EXTI_EXTICR3_EXTI8_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PJ[8] pin */
/* No PK on EXTI8 */
#define EXTI_EXTICR3_EXTI8_PZ         ((0x0000000BU)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PZ[8] pin */

/**
  * @brief   EXTI9 configuration
  */
#define EXTI_EXTICR3_EXTI9_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PA[9] pin */
#define EXTI_EXTICR3_EXTI9_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PB[9] pin */
#define EXTI_EXTICR3_EXTI9_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PC[9] pin */
#define EXTI_EXTICR3_EXTI9_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PD[9] pin */
#define EXTI_EXTICR3_EXTI9_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PE[9] pin */
#define EXTI_EXTICR3_EXTI9_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PF[9] pin */
#define EXTI_EXTICR3_EXTI9_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PG[9] pin */
#define EXTI_EXTICR3_EXTI9_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PH[9] pin */
#define EXTI_EXTICR3_EXTI9_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PI[9] pin */
#define EXTI_EXTICR3_EXTI9_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PJ[9] pin */
/* No PK on EXTI9 */
#define EXTI_EXTICR3_EXTI9_PZ         ((0x0000000BU)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PZ[9] pin */

/**
  * @brief   EXTI10 configuration
  */
#define EXTI_EXTICR3_EXTI10_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PA[10] pin */
#define EXTI_EXTICR3_EXTI10_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PB[10] pin */
#define EXTI_EXTICR3_EXTI10_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PC[10] pin */
#define EXTI_EXTICR3_EXTI10_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PD[10] pin */
#define EXTI_EXTICR3_EXTI10_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PE[10] pin */
#define EXTI_EXTICR3_EXTI10_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PF[10] pin */
#define EXTI_EXTICR3_EXTI10_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PG[10] pin */
#define EXTI_EXTICR3_EXTI10_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PH[10] pin */
#define EXTI_EXTICR3_EXTI10_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PI[10] pin */
#define EXTI_EXTICR3_EXTI10_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PJ[10] pin */
/* No PK on EXTI10 */
/* No PZ on EXTI10 */

/**
  * @brief   EXTI11 configuration
  */
#define EXTI_EXTICR3_EXTI11_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PA[11] pin */
#define EXTI_EXTICR3_EXTI11_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PB[11] pin */
#define EXTI_EXTICR3_EXTI11_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PC[11] pin */
#define EXTI_EXTICR3_EXTI11_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PD[11] pin */
#define EXTI_EXTICR3_EXTI11_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PE[11] pin */
#define EXTI_EXTICR3_EXTI11_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PF[11] pin */
#define EXTI_EXTICR3_EXTI11_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PG[11] pin */
#define EXTI_EXTICR3_EXTI11_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PH[11] pin */
#define EXTI_EXTICR3_EXTI11_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PI[11] pin */
#define EXTI_EXTICR3_EXTI11_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PJ[11] pin */
/* No PK on EXTI11 */
/* No PZ on EXTI11 */

/*****************  Bit definition for EXTI_EXTICR4 register  ***************/
#define EXTI_EXTICR4_EXTI12_Pos       (0U)
#define EXTI_EXTICR4_EXTI12_Msk       (0xFFUL << EXTI_EXTICR4_EXTI12_Pos)       /*!< 0x000000FF */
#define EXTI_EXTICR4_EXTI12           EXTI_EXTICR4_EXTI12_Msk                  /*!<EXTI 12 configuration */
#define EXTI_EXTICR4_EXTI13_Pos       (8U)
#define EXTI_EXTICR4_EXTI13_Msk       (0xFFUL << EXTI_EXTICR4_EXTI13_Pos)       /*!< 0x0000FF00 */
#define EXTI_EXTICR4_EXTI13           EXTI_EXTICR4_EXTI13_Msk                  /*!<EXTI 13 configuration */
#define EXTI_EXTICR4_EXTI14_Pos       (16U)
#define EXTI_EXTICR4_EXTI14_Msk       (0xFFUL << EXTI_EXTICR4_EXTI14_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR4_EXTI14           EXTI_EXTICR4_EXTI14_Msk                  /*!<EXTI 14 configuration */
#define EXTI_EXTICR4_EXTI15_Pos       (24U)
#define EXTI_EXTICR4_EXTI15_Msk       (0xFFUL << EXTI_EXTICR4_EXTI15_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR4_EXTI15           EXTI_EXTICR4_EXTI15_Msk                  /*!<EXTI 15 configuration */

/**
  * @brief   EXTI12 configuration
  */
#define EXTI_EXTICR4_EXTI12_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PA[12] pin */
#define EXTI_EXTICR4_EXTI12_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PB[12] pin */
#define EXTI_EXTICR4_EXTI12_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PC[12] pin */
#define EXTI_EXTICR4_EXTI12_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PD[12] pin */
#define EXTI_EXTICR4_EXTI12_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PE[12] pin */
#define EXTI_EXTICR4_EXTI12_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PF[12] pin */
#define EXTI_EXTICR4_EXTI12_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PG[12] pin */
#define EXTI_EXTICR4_EXTI12_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PH[12] pin */
#define EXTI_EXTICR4_EXTI12_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PI[12] pin */
#define EXTI_EXTICR4_EXTI12_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PJ[12] pin */
/* No PK on EXTI12 */
/* No PZ on EXTI12 */

/**
  * @brief   EXTI13 configuration
  */
#define EXTI_EXTICR4_EXTI13_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PA[13] pin */
#define EXTI_EXTICR4_EXTI13_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PB[13] pin */
#define EXTI_EXTICR4_EXTI13_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PC[13] pin */
#define EXTI_EXTICR4_EXTI13_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PD[13] pin */
#define EXTI_EXTICR4_EXTI13_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PE[13] pin */
#define EXTI_EXTICR4_EXTI13_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PF[13] pin */
#define EXTI_EXTICR4_EXTI13_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PG[13] pin */
#define EXTI_EXTICR4_EXTI13_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PH[13] pin */
#define EXTI_EXTICR4_EXTI13_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PI[13] pin */
#define EXTI_EXTICR4_EXTI13_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PJ[13] pin */
/* No PK on EXTI13 */
/* No PZ on EXTI13 */

/**
  * @brief   EXTI14 configuration
  */
#define EXTI_EXTICR4_EXTI14_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PA[14] pin */
#define EXTI_EXTICR4_EXTI14_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PB[14] pin */
#define EXTI_EXTICR4_EXTI14_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PC[14] pin */
#define EXTI_EXTICR4_EXTI14_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PD[14] pin */
#define EXTI_EXTICR4_EXTI14_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PE[14] pin */
#define EXTI_EXTICR4_EXTI14_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PF[14] pin */
#define EXTI_EXTICR4_EXTI14_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PG[14] pin */
#define EXTI_EXTICR4_EXTI14_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PH[14] pin */
#define EXTI_EXTICR4_EXTI14_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PI[14] pin */
#define EXTI_EXTICR4_EXTI14_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PJ[14] pin */
/* No PK on EXTI14 */
/* No PZ on EXTI14 */

/**
  * @brief   EXTI15 configuration
  */
#define EXTI_EXTICR4_EXTI15_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PA[15] pin */
#define EXTI_EXTICR4_EXTI15_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PB[15] pin */
#define EXTI_EXTICR4_EXTI15_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PC[15] pin */
#define EXTI_EXTICR4_EXTI15_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PD[15] pin */
#define EXTI_EXTICR4_EXTI15_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PE[15] pin */
#define EXTI_EXTICR4_EXTI15_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PF[15] pin */
#define EXTI_EXTICR4_EXTI15_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PG[15] pin */
#define EXTI_EXTICR4_EXTI15_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PH[15] pin */
#define EXTI_EXTICR4_EXTI15_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PI[15] pin */
#define EXTI_EXTICR4_EXTI15_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PJ[15] pin */
/* No PK on EXTI15 */
/* No PZ on EXTI15 */

/******************  Bit definition for EXTI_LOCKR register  ***********************/
#define EXTI_LOCKR_GLOCK_Pos         (0U)
#define EXTI_LOCKR_GLOCK_Msk         (0x1UL << EXTI_LOCKR_GLOCK_Pos)
#define EXTI_LOCKR_GLOCK             EXTI_LOCKR_GLOCK_Msk                        /*!< global security locked */

/*******************  Bit definition for EXTI1 CmIMR1 register  *******************/
#define EXTI1_IMR1_IM0_Pos          (0U)
#define EXTI1_IMR1_IM0_Msk          (0x1UL << EXTI1_IMR1_IM0_Pos)                 /*!< 0x00000001 */
#define EXTI1_IMR1_IM0              EXTI1_IMR1_IM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI1_IMR1_IM1_Pos          (1U)
#define EXTI1_IMR1_IM1_Msk          (0x1UL << EXTI1_IMR1_IM1_Pos)                 /*!< 0x00000002 */
#define EXTI1_IMR1_IM1              EXTI1_IMR1_IM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI1_IMR1_IM2_Pos          (2U)
#define EXTI1_IMR1_IM2_Msk          (0x1UL << EXTI1_IMR1_IM2_Pos)                 /*!< 0x00000004 */
#define EXTI1_IMR1_IM2              EXTI1_IMR1_IM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI1_IMR1_IM3_Pos          (3U)
#define EXTI1_IMR1_IM3_Msk          (0x1UL << EXTI1_IMR1_IM3_Pos)                 /*!< 0x00000008 */
#define EXTI1_IMR1_IM3              EXTI1_IMR1_IM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI1_IMR1_IM4_Pos          (4U)
#define EXTI1_IMR1_IM4_Msk          (0x1UL << EXTI1_IMR1_IM4_Pos)                 /*!< 0x00000010 */
#define EXTI1_IMR1_IM4              EXTI1_IMR1_IM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI1_IMR1_IM5_Pos          (5U)
#define EXTI1_IMR1_IM5_Msk          (0x1UL << EXTI1_IMR1_IM5_Pos)                 /*!< 0x00000020 */
#define EXTI1_IMR1_IM5              EXTI1_IMR1_IM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI1_IMR1_IM6_Pos          (6U)
#define EXTI1_IMR1_IM6_Msk          (0x1UL << EXTI1_IMR1_IM6_Pos)                 /*!< 0x00000040 */
#define EXTI1_IMR1_IM6              EXTI1_IMR1_IM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI1_IMR1_IM7_Pos          (7U)
#define EXTI1_IMR1_IM7_Msk          (0x1UL << EXTI1_IMR1_IM7_Pos)                 /*!< 0x00000080 */
#define EXTI1_IMR1_IM7              EXTI1_IMR1_IM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI1_IMR1_IM8_Pos          (8U)
#define EXTI1_IMR1_IM8_Msk          (0x1UL << EXTI1_IMR1_IM8_Pos)                 /*!< 0x00000100 */
#define EXTI1_IMR1_IM8              EXTI1_IMR1_IM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI1_IMR1_IM9_Pos          (9U)
#define EXTI1_IMR1_IM9_Msk          (0x1UL << EXTI1_IMR1_IM9_Pos)                 /*!< 0x00000200 */
#define EXTI1_IMR1_IM9              EXTI1_IMR1_IM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI1_IMR1_IM10_Pos         (10U)
#define EXTI1_IMR1_IM10_Msk         (0x1UL << EXTI1_IMR1_IM10_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR1_IM10             EXTI1_IMR1_IM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI1_IMR1_IM11_Pos         (11U)
#define EXTI1_IMR1_IM11_Msk         (0x1UL << EXTI1_IMR1_IM11_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR1_IM11             EXTI1_IMR1_IM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI1_IMR1_IM12_Pos         (12U)
#define EXTI1_IMR1_IM12_Msk         (0x1UL << EXTI1_IMR1_IM12_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR1_IM12             EXTI1_IMR1_IM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI1_IMR1_IM13_Pos         (13U)
#define EXTI1_IMR1_IM13_Msk         (0x1UL << EXTI1_IMR1_IM13_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR1_IM13             EXTI1_IMR1_IM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI1_IMR1_IM14_Pos         (14U)
#define EXTI1_IMR1_IM14_Msk         (0x1UL << EXTI1_IMR1_IM14_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR1_IM14             EXTI1_IMR1_IM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI1_IMR1_IM15_Pos         (15U)
#define EXTI1_IMR1_IM15_Msk         (0x1UL << EXTI1_IMR1_IM15_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR1_IM15             EXTI1_IMR1_IM15_Msk                          /*!< Interrupt Mask on line 15 */
#define EXTI1_IMR1_IM16_Pos         (16U)
#define EXTI1_IMR1_IM16_Msk         (0x1UL << EXTI1_IMR1_IM16_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR1_IM16             EXTI1_IMR1_IM16_Msk                          /*!< Interrupt Mask on line 16 */
#define EXTI1_IMR1_IM17_Pos         (17U)
#define EXTI1_IMR1_IM17_Msk         (0x1UL << EXTI1_IMR1_IM17_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR1_IM17             EXTI1_IMR1_IM17_Msk                          /*!< Interrupt Mask on line 17 */
#define EXTI1_IMR1_IM18_Pos         (18U)
#define EXTI1_IMR1_IM18_Msk         (0x1UL << EXTI1_IMR1_IM18_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR1_IM18             EXTI1_IMR1_IM18_Msk                          /*!< Interrupt Mask on line 18 */
#define EXTI1_IMR1_IM19_Pos         (19U)
#define EXTI1_IMR1_IM19_Msk         (0x1UL << EXTI1_IMR1_IM19_Pos)                /*!< 0x00080000 */
#define EXTI1_IMR1_IM19             EXTI1_IMR1_IM19_Msk                          /*!< Interrupt Mask on line 19 */
/* No interrupt line 20 */
#define EXTI1_IMR1_IM21_Pos         (21U)
#define EXTI1_IMR1_IM21_Msk         (0x1UL << EXTI1_IMR1_IM21_Pos)                /*!< 0x00200000 */
#define EXTI1_IMR1_IM21             EXTI1_IMR1_IM21_Msk                          /*!< Interrupt Mask on line 21 */
#define EXTI1_IMR1_IM22_Pos         (22U)
#define EXTI1_IMR1_IM22_Msk         (0x1UL << EXTI1_IMR1_IM22_Pos)                /*!< 0x00400000 */
#define EXTI1_IMR1_IM22             EXTI1_IMR1_IM22_Msk                          /*!< Interrupt Mask on line 22 */
#define EXTI1_IMR1_IM23_Pos         (23U)
#define EXTI1_IMR1_IM23_Msk         (0x1UL << EXTI1_IMR1_IM23_Pos)                /*!< 0x00800000 */
#define EXTI1_IMR1_IM23             EXTI1_IMR1_IM23_Msk                          /*!< Interrupt Mask on line 23 */
#define EXTI1_IMR1_IM24_Pos         (24U)
#define EXTI1_IMR1_IM24_Msk         (0x1UL << EXTI1_IMR1_IM24_Pos)                /*!< 0x01000000 */
#define EXTI1_IMR1_IM24             EXTI1_IMR1_IM24_Msk                          /*!< Interrupt Mask on line 24 */
#define EXTI1_IMR1_IM25_Pos         (25U)
#define EXTI1_IMR1_IM25_Msk         (0x1UL << EXTI1_IMR1_IM25_Pos)                /*!< 0x02000000 */
#define EXTI1_IMR1_IM25             EXTI1_IMR1_IM25_Msk                          /*!< Interrupt Mask on line 25 */
#define EXTI1_IMR1_IM26_Pos         (26U)
#define EXTI1_IMR1_IM26_Msk         (0x1UL << EXTI1_IMR1_IM26_Pos)                /*!< 0x04000000 */
#define EXTI1_IMR1_IM26             EXTI1_IMR1_IM26_Msk                          /*!< Interrupt Mask on line 26 */
#define EXTI1_IMR1_IM27_Pos         (27U)
#define EXTI1_IMR1_IM27_Msk         (0x1UL << EXTI1_IMR1_IM27_Pos)                /*!< 0x08000000 */
#define EXTI1_IMR1_IM27             EXTI1_IMR1_IM27_Msk                          /*!< Interrupt Mask on line 27 */
#define EXTI1_IMR1_IM28_Pos         (28U)
#define EXTI1_IMR1_IM28_Msk         (0x1UL << EXTI1_IMR1_IM28_Pos)                /*!< 0x10000000 */
#define EXTI1_IMR1_IM28             EXTI1_IMR1_IM28_Msk                          /*!< Interrupt Mask on line 28 */
#define EXTI1_IMR1_IM29_Pos         (29U)
#define EXTI1_IMR1_IM29_Msk         (0x1UL << EXTI1_IMR1_IM29_Pos)                /*!< 0x20000000 */
#define EXTI1_IMR1_IM29             EXTI1_IMR1_IM29_Msk                          /*!< Interrupt Mask on line 29 */
#define EXTI1_IMR1_IM30_Pos         (30U)
#define EXTI1_IMR1_IM30_Msk         (0x1UL << EXTI1_IMR1_IM30_Pos)                /*!< 0x40000000 */
#define EXTI1_IMR1_IM30             EXTI1_IMR1_IM30_Msk                          /*!< Interrupt Mask on line 30 */
#define EXTI1_IMR1_IM31_Pos         (31U)
#define EXTI1_IMR1_IM31_Msk         (0x1UL << EXTI1_IMR1_IM31_Pos)                /*!< 0x80000000 */
#define EXTI1_IMR1_IM31             EXTI1_IMR1_IM31_Msk                          /*!< Interrupt Mask on line 31 */

/*******************  Bit definition for EXTI1_CmIMR2 register  *******************/
#define EXTI1_IMR2_IM32_Pos         (0U)
#define EXTI1_IMR2_IM32_Msk         (0x1UL << EXTI1_IMR2_IM32_Pos)                /*!< 0x00000001 */
#define EXTI1_IMR2_IM32             EXTI1_IMR2_IM32_Msk                          /*!< Interrupt Mask on line 32 */
#define EXTI1_IMR2_IM33_Pos         (1U)
#define EXTI1_IMR2_IM33_Msk         (0x1UL << EXTI1_IMR2_IM33_Pos)                /*!< 0x00000002 */
#define EXTI1_IMR2_IM33             EXTI1_IMR2_IM33_Msk                          /*!< Interrupt Mask on line 33 */
#define EXTI1_IMR2_IM34_Pos         (2U)
#define EXTI1_IMR2_IM34_Msk         (0x1UL << EXTI1_IMR2_IM34_Pos)                /*!< 0x00000004 */
#define EXTI1_IMR2_IM34             EXTI1_IMR2_IM34_Msk                          /*!< Interrupt Mask on line 34 */
/* No interrupt line 35 */
#define EXTI1_IMR2_IM36_Pos         (4U)
#define EXTI1_IMR2_IM36_Msk         (0x1UL << EXTI1_IMR2_IM36_Pos)                /*!< 0x00000010 */
#define EXTI1_IMR2_IM36             EXTI1_IMR2_IM36_Msk                          /*!< Interrupt Mask on line 36 */
#define EXTI1_IMR2_IM37_Pos         (5U)
#define EXTI1_IMR2_IM37_Msk         (0x1UL << EXTI1_IMR2_IM37_Pos)                /*!< 0x00000020 */
#define EXTI1_IMR2_IM37             EXTI1_IMR2_IM37_Msk                          /*!< Interrupt Mask on line 37 */
#define EXTI1_IMR2_IM38_Pos         (6U)
#define EXTI1_IMR2_IM38_Msk         (0x1UL << EXTI1_IMR2_IM38_Pos)                /*!< 0x00000040 */
#define EXTI1_IMR2_IM38             EXTI1_IMR2_IM38_Msk                          /*!< Interrupt Mask on line 38 */
#define EXTI1_IMR2_IM39_Pos         (7U)
#define EXTI1_IMR2_IM39_Msk         (0x1UL << EXTI1_IMR2_IM39_Pos)                /*!< 0x00000080 */
#define EXTI1_IMR2_IM39             EXTI1_IMR2_IM39_Msk                          /*!< Interrupt Mask on line 39 */
#define EXTI1_IMR2_IM40_Pos         (8U)
#define EXTI1_IMR2_IM40_Msk         (0x1UL << EXTI1_IMR2_IM40_Pos)                /*!< 0x00000100 */
#define EXTI1_IMR2_IM40             EXTI1_IMR2_IM40_Msk                          /*!< Interrupt Mask on line 40 */
#define EXTI1_IMR2_IM41_Pos         (9U)
#define EXTI1_IMR2_IM41_Msk         (0x1UL << EXTI1_IMR2_IM41_Pos)                /*!< 0x00000200 */
#define EXTI1_IMR2_IM41             EXTI1_IMR2_IM41_Msk                          /*!< Interrupt Mask on line 41 */
#define EXTI1_IMR2_IM42_Pos         (10U)
#define EXTI1_IMR2_IM42_Msk         (0x1UL << EXTI1_IMR2_IM42_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR2_IM42             EXTI1_IMR2_IM42_Msk                          /*!< Interrupt Mask on line 42 */
#define EXTI1_IMR2_IM43_Pos         (11U)
#define EXTI1_IMR2_IM43_Msk         (0x1UL << EXTI1_IMR2_IM43_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR2_IM43             EXTI1_IMR2_IM43_Msk                          /*!< Interrupt Mask on line 43 */
#define EXTI1_IMR2_IM44_Pos         (12U)
#define EXTI1_IMR2_IM44_Msk         (0x1UL << EXTI1_IMR2_IM44_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR2_IM44             EXTI1_IMR2_IM44_Msk                          /*!< Interrupt Mask on line 44 */
#define EXTI1_IMR2_IM45_Pos         (13U)
#define EXTI1_IMR2_IM45_Msk         (0x1UL << EXTI1_IMR2_IM45_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR2_IM45             EXTI1_IMR2_IM45_Msk                          /*!< Interrupt Mask on line 45 */
#define EXTI1_IMR2_IM46_Pos         (14U)
#define EXTI1_IMR2_IM46_Msk         (0x1UL << EXTI1_IMR2_IM46_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR2_IM46             EXTI1_IMR2_IM46_Msk                          /*!< Interrupt Mask on line 46 */
#define EXTI1_IMR2_IM47_Pos         (15U)
#define EXTI1_IMR2_IM47_Msk         (0x1UL << EXTI1_IMR2_IM47_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR2_IM47             EXTI1_IMR2_IM47_Msk                          /*!< Interrupt Mask on line 47 */
#define EXTI1_IMR2_IM48_Pos         (16U)
#define EXTI1_IMR2_IM48_Msk         (0x1UL << EXTI1_IMR2_IM48_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR2_IM48             EXTI1_IMR2_IM48_Msk                          /*!< Interrupt Mask on line 48 */
#define EXTI1_IMR2_IM49_Pos         (17U)
#define EXTI1_IMR2_IM49_Msk         (0x1UL << EXTI1_IMR2_IM49_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR2_IM49             EXTI1_IMR2_IM49_Msk                          /*!< Interrupt Mask on line 49 */
#define EXTI1_IMR2_IM50_Pos         (18U)
#define EXTI1_IMR2_IM50_Msk         (0x1UL << EXTI1_IMR2_IM50_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR2_IM50             EXTI1_IMR2_IM50_Msk                          /*!< Interrupt Mask on line 50 */
/* No interrupt line 51 */
#define EXTI1_IMR2_IM52_Pos         (20U)
#define EXTI1_IMR2_IM52_Msk         (0x1UL << EXTI1_IMR2_IM52_Pos)                /*!< 0x00100000 */
#define EXTI1_IMR2_IM52             EXTI1_IMR2_IM52_Msk                          /*!< Interrupt Mask on line 52 */
#define EXTI1_IMR2_IM53_Pos         (21U)
#define EXTI1_IMR2_IM53_Msk         (0x1UL << EXTI1_IMR2_IM53_Pos)                /*!< 0x00200000 */
#define EXTI1_IMR2_IM53             EXTI1_IMR2_IM53_Msk                          /*!< Interrupt Mask on line 53 */
#define EXTI1_IMR2_IM54_Pos         (22U)
#define EXTI1_IMR2_IM54_Msk         (0x1UL << EXTI1_IMR2_IM54_Pos)                /*!< 0x00400000 */
#define EXTI1_IMR2_IM54             EXTI1_IMR2_IM54_Msk                          /*!< Interrupt Mask on line 54 */
#define EXTI1_IMR2_IM55_Pos         (23U)
#define EXTI1_IMR2_IM55_Msk         (0x1UL << EXTI1_IMR2_IM55_Pos)                /*!< 0x00800000 */
#define EXTI1_IMR2_IM55             EXTI1_IMR2_IM55_Msk                          /*!< Interrupt Mask on line 55 */
#define EXTI1_IMR2_IM56_Pos         (24U)
#define EXTI1_IMR2_IM56_Msk         (0x1UL << EXTI1_IMR2_IM56_Pos)                /*!< 0x01000000 */
#define EXTI1_IMR2_IM56             EXTI1_IMR2_IM56_Msk                          /*!< Interrupt Mask on line 56 */
#define EXTI1_IMR2_IM57_Pos         (25U)
#define EXTI1_IMR2_IM57_Msk         (0x1UL << EXTI1_IMR2_IM57_Pos)                /*!< 0x02000000 */
#define EXTI1_IMR2_IM57             EXTI1_IMR2_IM57_Msk                          /*!< Interrupt Mask on line 57 */
/* No interrupt line 58 */
#define EXTI1_IMR2_IM59_Pos         (27U)
#define EXTI1_IMR2_IM59_Msk         (0x1UL << EXTI1_IMR2_IM59_Pos)                /*!< 0x08000000 */
#define EXTI1_IMR2_IM59             EXTI1_IMR2_IM59_Msk                          /*!< Interrupt Mask on line 59 */
#define EXTI1_IMR2_IM60_Pos         (28U)
#define EXTI1_IMR2_IM60_Msk         (0x1UL << EXTI1_IMR2_IM60_Pos)                /*!< 0x10000000 */
#define EXTI1_IMR2_IM60             EXTI1_IMR2_IM60_Msk                          /*!< Interrupt Mask on line 60 */
#define EXTI1_IMR2_IM61_Pos         (29U)
#define EXTI1_IMR2_IM61_Msk         (0x1UL << EXTI1_IMR2_IM61_Pos)                /*!< 0x20000000 */
#define EXTI1_IMR2_IM61             EXTI1_IMR2_IM61_Msk                          /*!< Interrupt Mask on line 61 */
#define EXTI1_IMR2_IM62_Pos         (30U)
#define EXTI1_IMR2_IM62_Msk         (0x1UL << EXTI1_IMR2_IM62_Pos)                /*!< 0x40000000 */
#define EXTI1_IMR2_IM62             EXTI1_IMR2_IM62_Msk                          /*!< Interrupt Mask on line 62 */
/* No interrupt line 63 */

/*******************  Bit definition for EXTI1_CmIMR3 register  *******************/
#define EXTI1_IMR3_IM64_Pos         (0U)
#define EXTI1_IMR3_IM64_Msk         (0x1UL << EXTI1_IMR3_IM64_Pos)                /*!< 0x00000001 */
#define EXTI1_IMR3_IM64             EXTI1_IMR3_IM64_Msk                          /*!< Interrupt Mask on line 64 */
#define EXTI1_IMR3_IM65_Pos         (1U)
#define EXTI1_IMR3_IM65_Msk         (0x1UL << EXTI1_IMR3_IM65_Pos)                /*!< 0x00000002 */
#define EXTI1_IMR3_IM65             EXTI1_IMR3_IM65_Msk                          /*!< Interrupt Mask on line 65 */
/* No interrupt line 66 */
#define EXTI1_IMR3_IM67_Pos         (3U)
#define EXTI1_IMR3_IM67_Msk         (0x1UL << EXTI1_IMR3_IM67_Pos)                /*!< 0x00000008 */
#define EXTI1_IMR3_IM67             EXTI1_IMR3_IM67_Msk                          /*!< Interrupt Mask on line 67 */
#define EXTI1_IMR3_IM68_Pos         (4U)
#define EXTI1_IMR3_IM68_Msk         (0x1UL << EXTI1_IMR3_IM68_Pos)                /*!< 0x00000010 */
#define EXTI1_IMR3_IM68             EXTI1_IMR3_IM68_Msk                          /*!< Interrupt Mask on line 68 */
/* No interrupt line 69 */
#define EXTI1_IMR3_IM70_Pos         (6U)
#define EXTI1_IMR3_IM70_Msk         (0x1UL << EXTI1_IMR3_IM70_Pos)                /*!< 0x00000040 */
#define EXTI1_IMR3_IM70             EXTI1_IMR3_IM70_Msk                          /*!< Interrupt Mask on line 70 */
/* No interrupt line 71 */
#define EXTI1_IMR3_IM72_Pos         (8U)
#define EXTI1_IMR3_IM72_Msk         (0x1UL << EXTI1_IMR3_IM72_Pos)                /*!< 0x00000100 */
#define EXTI1_IMR3_IM72             EXTI1_IMR3_IM72_Msk                          /*!< Interrupt Mask on line 72 */
#define EXTI1_IMR3_IM73_Pos         (9U)
#define EXTI1_IMR3_IM73_Msk         (0x1UL << EXTI1_IMR3_IM73_Pos)                /*!< 0x00000200 */
#define EXTI1_IMR3_IM73             EXTI1_IMR3_IM73_Msk                          /*!< Interrupt Mask on line 73 */
#define EXTI1_IMR3_IM74_Pos         (10U)
#define EXTI1_IMR3_IM74_Msk         (0x1UL << EXTI1_IMR3_IM74_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR3_IM74             EXTI1_IMR3_IM74_Msk                          /*!< Interrupt Mask on line 74 */
#define EXTI1_IMR3_IM75_Pos         (11U)
#define EXTI1_IMR3_IM75_Msk         (0x1UL << EXTI1_IMR3_IM75_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR3_IM75             EXTI1_IMR3_IM75_Msk                          /*!< Interrupt Mask on line 75 */
#define EXTI1_IMR3_IM76_Pos         (12U)
#define EXTI1_IMR3_IM76_Msk         (0x1UL << EXTI1_IMR3_IM76_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR3_IM76             EXTI1_IMR3_IM76_Msk                          /*!< Interrupt Mask on line 76 */
#define EXTI1_IMR3_IM77_Pos         (13U)
#define EXTI1_IMR3_IM77_Msk         (0x1UL << EXTI1_IMR3_IM77_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR3_IM77             EXTI1_IMR3_IM77_Msk                          /*!< Interrupt Mask on line 77 */
#define EXTI1_IMR3_IM78_Pos         (14U)
#define EXTI1_IMR3_IM78_Msk         (0x1UL << EXTI1_IMR3_IM78_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR3_IM78             EXTI1_IMR3_IM78_Msk                          /*!< Interrupt Mask on line 78 */
#define EXTI1_IMR3_IM79_Pos         (15U)
#define EXTI1_IMR3_IM79_Msk         (0x1UL << EXTI1_IMR3_IM79_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR3_IM79             EXTI1_IMR3_IM79_Msk                          /*!< Interrupt Mask on line 79 */
#define EXTI1_IMR3_IM80_Pos         (16U)
#define EXTI1_IMR3_IM80_Msk         (0x1UL << EXTI1_IMR3_IM80_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR3_IM80             EXTI1_IMR3_IM80_Msk                          /*!< Interrupt Mask on line 80 */
#define EXTI1_IMR3_IM81_Pos         (17U)
#define EXTI1_IMR3_IM81_Msk         (0x1UL << EXTI1_IMR3_IM81_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR3_IM81             EXTI1_IMR3_IM81_Msk                          /*!< Interrupt Mask on line 81 */
#define EXTI1_IMR3_IM82_Pos         (18U)
#define EXTI1_IMR3_IM82_Msk         (0x1UL << EXTI1_IMR3_IM82_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR3_IM82             EXTI1_IMR3_IM82_Msk                          /*!< Interrupt Mask on line 82 */
#define EXTI1_IMR3_IM83_Pos         (19U)
#define EXTI1_IMR3_IM83_Msk         (0x1UL << EXTI1_IMR3_IM83_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR3_IM83             EXTI1_IMR3_IM83_Msk                          /*!< Interrupt Mask on line 83 */
#define EXTI1_IMR3_IM84_Pos         (20U)
#define EXTI1_IMR3_IM84_Msk         (0x1UL << EXTI1_IMR3_IM84_Pos)                /*!< 0x00100000 */
#define EXTI1_IMR3_IM84             EXTI1_IMR3_IM84_Msk                          /*!< Interrupt Mask on line 84 */

/*******************  Bit definition for EXTI1_C2EMR3 register  *******************/
#define EXTI1_EMR3_EM65_Pos         (1U)
#define EXTI1_EMR3_EM65_Msk         (0x1UL << EXTI1_EMR3_EM65_Pos)                /*!< 0x00000002 */
#define EXTI1_EMR3_EM65             EXTI1_EMR3_EM65_Msk                          /*!< Interrupt Mask on line 65 */

/******************  Bit definition for EXTI_EnCIDCFGR register  *******************/
#define EXTI_EnCIDCFGR_CFEN_Pos      (0U)
#define EXTI_EnCIDCFGR_CFEN_Msk      (0x1UL << EXTI_EnCIDCFGR_CFEN_Pos)
#define EXTI_EnCIDCFGR_CFEN          EXTI_EnCIDCFGR_CFEN_Msk                     /*!< CID filtering enable*/
#define EXTI_EnCIDCFGR_CID_Pos       (4U)
#define EXTI_EnCIDCFGR_CID_Msk       (0x3UL << EXTI_EnCIDCFGR_CID_Pos)
#define EXTI_EnCIDCFGR_CID           EXTI_EnCIDCFGR_CID_Msk                     /*!< static CID value*/

/******************  Bit definition for EXTI_CmCIDCFGR register  *******************/
#define EXTI_CmCIDCFGR_CFEN_Pos      (0U)
#define EXTI_CmCIDCFGR_CFEN_Msk      (0x1UL << EXTI_CmCIDCFGR_CFEN_Pos)
#define EXTI_CmCIDCFGR_CFEN          EXTI_CmCIDCFGR_CFEN_Msk                     /*!< CID filtering enable*/
#define EXTI_CmCIDCFGR_CID_Pos       (4U)
#define EXTI_CmCIDCFGR_CID_Msk       (0x3UL << EXTI_CmCIDCFGR_CID_Pos)
#define EXTI_CmCIDCFGR_CID           EXTI_CmCIDCFGR_CID_Msk                     /*!< static CID value*/



/* EXTI2 */


/******************  Bit definition for EXTI2_RTSR1 register  *******************/
#define EXTI2_RTSR1_RT0_Pos         (0U)
#define EXTI2_RTSR1_RT0_Msk         (0x1UL << EXTI2_RTSR1_RT0_Pos)                /*!< 0x00000001 */
#define EXTI2_RTSR1_RT0             EXTI2_RTSR1_RT0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI2_RTSR1_RT1_Pos         (1U)
#define EXTI2_RTSR1_RT1_Msk         (0x1UL << EXTI2_RTSR1_RT1_Pos)                /*!< 0x00000002 */
#define EXTI2_RTSR1_RT1             EXTI2_RTSR1_RT1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI2_RTSR1_RT2_Pos         (2U)
#define EXTI2_RTSR1_RT2_Msk         (0x1UL << EXTI2_RTSR1_RT2_Pos)                /*!< 0x00000004 */
#define EXTI2_RTSR1_RT2             EXTI2_RTSR1_RT2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI2_RTSR1_RT3_Pos         (3U)
#define EXTI2_RTSR1_RT3_Msk         (0x1UL << EXTI2_RTSR1_RT3_Pos)                /*!< 0x00000008 */
#define EXTI2_RTSR1_RT3             EXTI2_RTSR1_RT3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI2_RTSR1_RT4_Pos         (4U)
#define EXTI2_RTSR1_RT4_Msk         (0x1UL << EXTI2_RTSR1_RT4_Pos)                /*!< 0x00000010 */
#define EXTI2_RTSR1_RT4             EXTI2_RTSR1_RT4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI2_RTSR1_RT5_Pos         (5U)
#define EXTI2_RTSR1_RT5_Msk         (0x1UL << EXTI2_RTSR1_RT5_Pos)                /*!< 0x00000020 */
#define EXTI2_RTSR1_RT5             EXTI2_RTSR1_RT5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI2_RTSR1_RT6_Pos         (6U)
#define EXTI2_RTSR1_RT6_Msk         (0x1UL << EXTI2_RTSR1_RT6_Pos)                /*!< 0x00000040 */
#define EXTI2_RTSR1_RT6             EXTI2_RTSR1_RT6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI2_RTSR1_RT7_Pos         (7U)
#define EXTI2_RTSR1_RT7_Msk         (0x1UL << EXTI2_RTSR1_RT7_Pos)                /*!< 0x00000080 */
#define EXTI2_RTSR1_RT7             EXTI2_RTSR1_RT7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI2_RTSR1_RT8_Pos         (8U)
#define EXTI2_RTSR1_RT8_Msk         (0x1UL << EXTI2_RTSR1_RT8_Pos)                /*!< 0x00000100 */
#define EXTI2_RTSR1_RT8             EXTI2_RTSR1_RT8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI2_RTSR1_RT9_Pos         (9U)
#define EXTI2_RTSR1_RT9_Msk         (0x1UL << EXTI2_RTSR1_RT9_Pos)                /*!< 0x00000200 */
#define EXTI2_RTSR1_RT9             EXTI2_RTSR1_RT9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI2_RTSR1_RT10_Pos        (10U)
#define EXTI2_RTSR1_RT10_Msk        (0x1UL << EXTI2_RTSR1_RT10_Pos)               /*!< 0x00000400 */
#define EXTI2_RTSR1_RT10            EXTI2_RTSR1_RT10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI2_RTSR1_RT11_Pos        (11U)
#define EXTI2_RTSR1_RT11_Msk        (0x1UL << EXTI2_RTSR1_RT11_Pos)               /*!< 0x00000800 */
#define EXTI2_RTSR1_RT11            EXTI2_RTSR1_RT11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI2_RTSR1_RT12_Pos        (12U)
#define EXTI2_RTSR1_RT12_Msk        (0x1UL << EXTI2_RTSR1_RT12_Pos)               /*!< 0x00001000 */
#define EXTI2_RTSR1_RT12            EXTI2_RTSR1_RT12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI2_RTSR1_RT13_Pos        (13U)
#define EXTI2_RTSR1_RT13_Msk        (0x1UL << EXTI2_RTSR1_RT13_Pos)               /*!< 0x00002000 */
#define EXTI2_RTSR1_RT13            EXTI2_RTSR1_RT13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI2_RTSR1_RT14_Pos        (14U)
#define EXTI2_RTSR1_RT14_Msk        (0x1UL << EXTI2_RTSR1_RT14_Pos)               /*!< 0x00004000 */
#define EXTI2_RTSR1_RT14            EXTI2_RTSR1_RT14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI2_RTSR1_RT15_Pos        (15U)
#define EXTI2_RTSR1_RT15_Msk        (0x1UL << EXTI2_RTSR1_RT15_Pos)               /*!< 0x00008000 */
#define EXTI2_RTSR1_RT15            EXTI2_RTSR1_RT15_Msk                         /*!< Rising trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_FTSR1 register  *******************/
#define EXTI2_FTSR1_FT0_Pos         (0U)
#define EXTI2_FTSR1_FT0_Msk         (0x1UL << EXTI2_FTSR1_FT0_Pos)                /*!< 0x00000001 */
#define EXTI2_FTSR1_FT0             EXTI2_FTSR1_FT0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI2_FTSR1_FT1_Pos         (1U)
#define EXTI2_FTSR1_FT1_Msk         (0x1UL << EXTI2_FTSR1_FT1_Pos)                /*!< 0x00000002 */
#define EXTI2_FTSR1_FT1             EXTI2_FTSR1_FT1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI2_FTSR1_FT2_Pos         (2U)
#define EXTI2_FTSR1_FT2_Msk         (0x1UL << EXTI2_FTSR1_FT2_Pos)                /*!< 0x00000004 */
#define EXTI2_FTSR1_FT2             EXTI2_FTSR1_FT2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI2_FTSR1_FT3_Pos         (3U)
#define EXTI2_FTSR1_FT3_Msk         (0x1UL << EXTI2_FTSR1_FT3_Pos)                /*!< 0x00000008 */
#define EXTI2_FTSR1_FT3             EXTI2_FTSR1_FT3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI2_FTSR1_FT4_Pos         (4U)
#define EXTI2_FTSR1_FT4_Msk         (0x1UL << EXTI2_FTSR1_FT4_Pos)                /*!< 0x00000010 */
#define EXTI2_FTSR1_FT4             EXTI2_FTSR1_FT4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI2_FTSR1_FT5_Pos         (5U)
#define EXTI2_FTSR1_FT5_Msk         (0x1UL << EXTI2_FTSR1_FT5_Pos)                /*!< 0x00000020 */
#define EXTI2_FTSR1_FT5             EXTI2_FTSR1_FT5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI2_FTSR1_FT6_Pos         (6U)
#define EXTI2_FTSR1_FT6_Msk         (0x1UL << EXTI2_FTSR1_FT6_Pos)                /*!< 0x00000040 */
#define EXTI2_FTSR1_FT6             EXTI2_FTSR1_FT6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI2_FTSR1_FT7_Pos         (7U)
#define EXTI2_FTSR1_FT7_Msk         (0x1UL << EXTI2_FTSR1_FT7_Pos)                /*!< 0x00000080 */
#define EXTI2_FTSR1_FT7             EXTI2_FTSR1_FT7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI2_FTSR1_FT8_Pos         (8U)
#define EXTI2_FTSR1_FT8_Msk         (0x1UL << EXTI2_FTSR1_FT8_Pos)                /*!< 0x00000100 */
#define EXTI2_FTSR1_FT8             EXTI2_FTSR1_FT8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI2_FTSR1_FT9_Pos         (9U)
#define EXTI2_FTSR1_FT9_Msk         (0x1UL << EXTI2_FTSR1_FT9_Pos)                /*!< 0x00000200 */
#define EXTI2_FTSR1_FT9             EXTI2_FTSR1_FT9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI2_FTSR1_FT10_Pos        (10U)
#define EXTI2_FTSR1_FT10_Msk        (0x1UL << EXTI2_FTSR1_FT10_Pos)               /*!< 0x00000400 */
#define EXTI2_FTSR1_FT10            EXTI2_FTSR1_FT10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI2_FTSR1_FT11_Pos        (11U)
#define EXTI2_FTSR1_FT11_Msk        (0x1UL << EXTI2_FTSR1_FT11_Pos)               /*!< 0x00000800 */
#define EXTI2_FTSR1_FT11            EXTI2_FTSR1_FT11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI2_FTSR1_FT12_Pos        (12U)
#define EXTI2_FTSR1_FT12_Msk        (0x1UL << EXTI2_FTSR1_FT12_Pos)               /*!< 0x00001000 */
#define EXTI2_FTSR1_FT12            EXTI2_FTSR1_FT12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI2_FTSR1_FT13_Pos        (13U)
#define EXTI2_FTSR1_FT13_Msk        (0x1UL << EXTI2_FTSR1_FT13_Pos)               /*!< 0x00002000 */
#define EXTI2_FTSR1_FT13            EXTI2_FTSR1_FT13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI2_FTSR1_FT14_Pos        (14U)
#define EXTI2_FTSR1_FT14_Msk        (0x1UL << EXTI2_FTSR1_FT14_Pos)               /*!< 0x00004000 */
#define EXTI2_FTSR1_FT14            EXTI2_FTSR1_FT14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI2_FTSR1_FT15_Pos        (15U)
#define EXTI2_FTSR1_FT15_Msk        (0x1UL << EXTI2_FTSR1_FT15_Pos)               /*!< 0x00008000 */
#define EXTI2_FTSR1_FT15            EXTI2_FTSR1_FT15_Msk                         /*!< Falling trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI12_SWIER1 register  ******************/
#define EXTI2_SWIER1_SWI0_Pos     (0U)
#define EXTI2_SWIER1_SWI0_Msk     (0x1UL << EXTI2_SWIER1_SWI0_Pos)            /*!< 0x00000001 */
#define EXTI2_SWIER1_SWI0         EXTI2_SWIER1_SWI0_Msk                      /*!< Software Interrupt on line 0 */
#define EXTI2_SWIER1_SWI1_Pos     (1U)
#define EXTI2_SWIER1_SWI1_Msk     (0x1UL << EXTI2_SWIER1_SWI1_Pos)            /*!< 0x00000002 */
#define EXTI2_SWIER1_SWI1         EXTI2_SWIER1_SWI1_Msk                      /*!< Software Interrupt on line 1 */
#define EXTI2_SWIER1_SWI2_Pos     (2U)
#define EXTI2_SWIER1_SWI2_Msk     (0x1UL << EXTI2_SWIER1_SWI2_Pos)            /*!< 0x00000004 */
#define EXTI2_SWIER1_SWI2         EXTI2_SWIER1_SWI2_Msk                      /*!< Software Interrupt on line 2 */
#define EXTI2_SWIER1_SWI3_Pos     (3U)
#define EXTI2_SWIER1_SWI3_Msk     (0x1UL << EXTI2_SWIER1_SWI3_Pos)            /*!< 0x00000008 */
#define EXTI2_SWIER1_SWI3         EXTI2_SWIER1_SWI3_Msk                      /*!< Software Interrupt on line 3 */
#define EXTI2_SWIER1_SWI4_Pos     (4U)
#define EXTI2_SWIER1_SWI4_Msk     (0x1UL << EXTI2_SWIER1_SWI4_Pos)            /*!< 0x00000010 */
#define EXTI2_SWIER1_SWI4         EXTI2_SWIER1_SWI4_Msk                      /*!< Software Interrupt on line 4 */
#define EXTI2_SWIER1_SWI5_Pos     (5U)
#define EXTI2_SWIER1_SWI5_Msk     (0x1UL << EXTI2_SWIER1_SWI5_Pos)            /*!< 0x00000020 */
#define EXTI2_SWIER1_SWI5         EXTI2_SWIER1_SWI5_Msk                      /*!< Software Interrupt on line 5 */
#define EXTI2_SWIER1_SWI6_Pos     (6U)
#define EXTI2_SWIER1_SWI6_Msk     (0x1UL << EXTI2_SWIER1_SWI6_Pos)            /*!< 0x00000040 */
#define EXTI2_SWIER1_SWI6         EXTI2_SWIER1_SWI6_Msk                      /*!< Software Interrupt on line 6 */
#define EXTI2_SWIER1_SWI7_Pos     (7U)
#define EXTI2_SWIER1_SWI7_Msk     (0x1UL << EXTI2_SWIER1_SWI7_Pos)            /*!< 0x00000080 */
#define EXTI2_SWIER1_SWI7         EXTI2_SWIER1_SWI7_Msk                      /*!< Software Interrupt on line 7 */
#define EXTI2_SWIER1_SWI8_Pos     (8U)
#define EXTI2_SWIER1_SWI8_Msk     (0x1UL << EXTI2_SWIER1_SWI8_Pos)            /*!< 0x00000100 */
#define EXTI2_SWIER1_SWI8         EXTI2_SWIER1_SWI8_Msk                      /*!< Software Interrupt on line 8 */
#define EXTI2_SWIER1_SWI9_Pos     (9U)
#define EXTI2_SWIER1_SWI9_Msk     (0x1UL << EXTI2_SWIER1_SWI9_Pos)            /*!< 0x00000200 */
#define EXTI2_SWIER1_SWI9         EXTI2_SWIER1_SWI9_Msk                      /*!< Software Interrupt on line 9 */
#define EXTI2_SWIER1_SWI10_Pos    (10U)
#define EXTI2_SWIER1_SWI10_Msk    (0x1UL << EXTI2_SWIER1_SWI10_Pos)           /*!< 0x00000400 */
#define EXTI2_SWIER1_SWI10        EXTI2_SWIER1_SWI10_Msk                     /*!< Software Interrupt on line 10 */
#define EXTI2_SWIER1_SWI11_Pos    (11U)
#define EXTI2_SWIER1_SWI11_Msk    (0x1UL << EXTI2_SWIER1_SWI11_Pos)           /*!< 0x00000800 */
#define EXTI2_SWIER1_SWI11        EXTI2_SWIER1_SWI11_Msk                     /*!< Software Interrupt on line 11 */
#define EXTI2_SWIER1_SWI12_Pos    (12U)
#define EXTI2_SWIER1_SWI12_Msk    (0x1UL << EXTI2_SWIER1_SWI12_Pos)           /*!< 0x00001000 */
#define EXTI2_SWIER1_SWI12        EXTI2_SWIER1_SWI12_Msk                     /*!< Software Interrupt on line 12 */
#define EXTI2_SWIER1_SWI13_Pos    (13U)
#define EXTI2_SWIER1_SWI13_Msk    (0x1UL << EXTI2_SWIER1_SWI13_Pos)           /*!< 0x00002000 */
#define EXTI2_SWIER1_SWI13        EXTI2_SWIER1_SWI13_Msk                     /*!< Software Interrupt on line 13 */
#define EXTI2_SWIER1_SWI14_Pos    (14U)
#define EXTI2_SWIER1_SWI14_Msk    (0x1UL << EXTI2_SWIER1_SWI14_Pos)           /*!< 0x00004000 */
#define EXTI2_SWIER1_SWI14        EXTI2_SWIER1_SWI14_Msk                     /*!< Software Interrupt on line 14 */
#define EXTI2_SWIER1_SWI15_Pos    (15U)
#define EXTI2_SWIER1_SWI15_Msk    (0x1UL << EXTI2_SWIER1_SWI15_Pos)           /*!< 0x00008000 */
#define EXTI2_SWIER1_SWI15        EXTI2_SWIER1_SWI15_Msk                     /*!< Software Interrupt on line 15 */

/******************  Bit definition for EXTI2_RPR1 register  *******************/
#define EXTI2_RPR1_RPIF0_Pos         (0U)
#define EXTI2_RPR1_RPIF0_Msk         (0x1UL << EXTI2_RPR1_RPIF0_Pos)                /*!< 0x00000001 */
#define EXTI2_RPR1_RPIF0             EXTI2_RPR1_RPIF0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI2_RPR1_RPIF1_Pos         (1U)
#define EXTI2_RPR1_RPIF1_Msk         (0x1UL << EXTI2_RPR1_RPIF1_Pos)                /*!< 0x00000002 */
#define EXTI2_RPR1_RPIF1             EXTI2_RPR1_RPIF1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI2_RPR1_RPIF2_Pos         (2U)
#define EXTI2_RPR1_RPIF2_Msk         (0x1UL << EXTI2_RPR1_RPIF2_Pos)                /*!< 0x00000004 */
#define EXTI2_RPR1_RPIF2             EXTI2_RPR1_RPIF2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI2_RPR1_RPIF3_Pos         (3U)
#define EXTI2_RPR1_RPIF3_Msk         (0x1UL << EXTI2_RPR1_RPIF3_Pos)                /*!< 0x00000008 */
#define EXTI2_RPR1_RPIF3             EXTI2_RPR1_RPIF3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI2_RPR1_RPIF4_Pos         (4U)
#define EXTI2_RPR1_RPIF4_Msk         (0x1UL << EXTI2_RPR1_RPIF4_Pos)                /*!< 0x00000010 */
#define EXTI2_RPR1_RPIF4             EXTI2_RPR1_RPIF4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI2_RPR1_RPIF5_Pos         (5U)
#define EXTI2_RPR1_RPIF5_Msk         (0x1UL << EXTI2_RPR1_RPIF5_Pos)                /*!< 0x00000020 */
#define EXTI2_RPR1_RPIF5             EXTI2_RPR1_RPIF5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI2_RPR1_RPIF6_Pos         (6U)
#define EXTI2_RPR1_RPIF6_Msk         (0x1UL << EXTI2_RPR1_RPIF6_Pos)                /*!< 0x00000040 */
#define EXTI2_RPR1_RPIF6             EXTI2_RPR1_RPIF6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI2_RPR1_RPIF7_Pos         (7U)
#define EXTI2_RPR1_RPIF7_Msk         (0x1UL << EXTI2_RPR1_RPIF7_Pos)                /*!< 0x00000080 */
#define EXTI2_RPR1_RPIF7             EXTI2_RPR1_RPIF7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI2_RPR1_RPIF8_Pos         (8U)
#define EXTI2_RPR1_RPIF8_Msk         (0x1UL << EXTI2_RPR1_RPIF8_Pos)                /*!< 0x00000100 */
#define EXTI2_RPR1_RPIF8             EXTI2_RPR1_RPIF8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI2_RPR1_RPIF9_Pos         (9U)
#define EXTI2_RPR1_RPIF9_Msk         (0x1UL << EXTI2_RPR1_RPIF9_Pos)                /*!< 0x00000200 */
#define EXTI2_RPR1_RPIF9             EXTI2_RPR1_RPIF9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI2_RPR1_RPIF10_Pos        (10U)
#define EXTI2_RPR1_RPIF10_Msk        (0x1UL << EXTI2_RPR1_RPIF10_Pos)               /*!< 0x00000400 */
#define EXTI2_RPR1_RPIF10            EXTI2_RPR1_RPIF10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI2_RPR1_RPIF11_Pos        (11U)
#define EXTI2_RPR1_RPIF11_Msk        (0x1UL << EXTI2_RPR1_RPIF11_Pos)               /*!< 0x00000800 */
#define EXTI2_RPR1_RPIF11            EXTI2_RPR1_RPIF11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI2_RPR1_RPIF12_Pos        (12U)
#define EXTI2_RPR1_RPIF12_Msk        (0x1UL << EXTI2_RPR1_RPIF12_Pos)               /*!< 0x00001000 */
#define EXTI2_RPR1_RPIF12            EXTI2_RPR1_RPIF12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI2_RPR1_RPIF13_Pos        (13U)
#define EXTI2_RPR1_RPIF13_Msk        (0x1UL << EXTI2_RPR1_RPIF13_Pos)               /*!< 0x00002000 */
#define EXTI2_RPR1_RPIF13            EXTI2_RPR1_RPIF13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI2_RPR1_RPIF14_Pos        (14U)
#define EXTI2_RPR1_RPIF14_Msk        (0x1UL << EXTI2_RPR1_RPIF14_Pos)               /*!< 0x00004000 */
#define EXTI2_RPR1_RPIF14            EXTI2_RPR1_RPIF14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI2_RPR1_RPIF15_Pos        (15U)
#define EXTI2_RPR1_RPIF15_Msk        (0x1UL << EXTI2_RPR1_RPIF15_Pos)               /*!< 0x00008000 */
#define EXTI2_RPR1_RPIF15            EXTI2_RPR1_RPIF15_Msk                         /*!< Rising trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_FTSR1 register  *******************/
#define EXTI2_FPR1_FPIF0_Pos         (0U)
#define EXTI2_FPR1_FPIF0_Msk         (0x1UL << EXTI2_FPR1_FPIF0_Pos)                /*!< 0x00000001 */
#define EXTI2_FPR1_FPIF0             EXTI2_FPR1_FPIF0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI2_FPR1_FPIF1_Pos         (1U)
#define EXTI2_FPR1_FPIF1_Msk         (0x1UL << EXTI2_FPR1_FPIF1_Pos)                /*!< 0x00000002 */
#define EXTI2_FPR1_FPIF1             EXTI2_FPR1_FPIF1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI2_FPR1_FPIF2_Pos         (2U)
#define EXTI2_FPR1_FPIF2_Msk         (0x1UL << EXTI2_FPR1_FPIF2_Pos)                /*!< 0x00000004 */
#define EXTI2_FPR1_FPIF2             EXTI2_FPR1_FPIF2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI2_FPR1_FPIF3_Pos         (3U)
#define EXTI2_FPR1_FPIF3_Msk         (0x1UL << EXTI2_FPR1_FPIF3_Pos)                /*!< 0x00000008 */
#define EXTI2_FPR1_FPIF3             EXTI2_FPR1_FPIF3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI2_FPR1_FPIF4_Pos         (4U)
#define EXTI2_FPR1_FPIF4_Msk         (0x1UL << EXTI2_FPR1_FPIF4_Pos)                /*!< 0x00000010 */
#define EXTI2_FPR1_FPIF4             EXTI2_FPR1_FPIF4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI2_FPR1_FPIF5_Pos         (5U)
#define EXTI2_FPR1_FPIF5_Msk         (0x1UL << EXTI2_FPR1_FPIF5_Pos)                /*!< 0x00000020 */
#define EXTI2_FPR1_FPIF5             EXTI2_FPR1_FPIF5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI2_FPR1_FPIF6_Pos         (6U)
#define EXTI2_FPR1_FPIF6_Msk         (0x1UL << EXTI2_FPR1_FPIF6_Pos)                /*!< 0x00000040 */
#define EXTI2_FPR1_FPIF6             EXTI2_FPR1_FPIF6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI2_FPR1_FPIF7_Pos         (7U)
#define EXTI2_FPR1_FPIF7_Msk         (0x1UL << EXTI2_FPR1_FPIF7_Pos)                /*!< 0x00000080 */
#define EXTI2_FPR1_FPIF7             EXTI2_FPR1_FPIF7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI2_FPR1_FPIF8_Pos         (8U)
#define EXTI2_FPR1_FPIF8_Msk         (0x1UL << EXTI2_FPR1_FPIF8_Pos)                /*!< 0x00000100 */
#define EXTI2_FPR1_FPIF8             EXTI2_FPR1_FPIF8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI2_FPR1_FPIF9_Pos         (9U)
#define EXTI2_FPR1_FPIF9_Msk         (0x1UL << EXTI2_FPR1_FPIF9_Pos)                /*!< 0x00000200 */
#define EXTI2_FPR1_FPIF9             EXTI2_FPR1_FPIF9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI2_FPR1_FPIF10_Pos        (10U)
#define EXTI2_FPR1_FPIF10_Msk        (0x1UL << EXTI2_FPR1_FPIF10_Pos)               /*!< 0x00000400 */
#define EXTI2_FPR1_FPIF10            EXTI2_FPR1_FPIF10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI2_FPR1_FPIF11_Pos        (11U)
#define EXTI2_FPR1_FPIF11_Msk        (0x1UL << EXTI2_FPR1_FPIF11_Pos)               /*!< 0x00000800 */
#define EXTI2_FPR1_FPIF11            EXTI2_FPR1_FPIF11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI2_FPR1_FPIF12_Pos        (12U)
#define EXTI2_FPR1_FPIF12_Msk        (0x1UL << EXTI2_FPR1_FPIF12_Pos)               /*!< 0x00001000 */
#define EXTI2_FPR1_FPIF12            EXTI2_FPR1_FPIF12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI2_FPR1_FPIF13_Pos        (13U)
#define EXTI2_FPR1_FPIF13_Msk        (0x1UL << EXTI2_FPR1_FPIF13_Pos)               /*!< 0x00002000 */
#define EXTI2_FPR1_FPIF13            EXTI2_FPR1_FPIF13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI2_FPR1_FPIF14_Pos        (14U)
#define EXTI2_FPR1_FPIF14_Msk        (0x1UL << EXTI2_FPR1_FPIF14_Pos)               /*!< 0x00004000 */
#define EXTI2_FPR1_FPIF14            EXTI2_FPR1_FPIF14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI2_FPR1_FPIF15_Pos        (15U)
#define EXTI2_FPR1_FPIF15_Msk        (0x1UL << EXTI2_FPR1_FPIF15_Pos)               /*!< 0x00008000 */
#define EXTI2_FPR1_FPIF15            EXTI2_FPR1_FPIF15_Msk                         /*!< Falling trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_SECCFGR1  register  ******************/
#define EXTI2_SECCFGR1_SEC0_Pos  (0U)
#define EXTI2_SECCFGR1_SEC0_Msk  (0x1UL << EXTI2_SECCFGR1_SEC0_Pos)          /*!< 0x00000001 */
#define EXTI2_SECCFGR1_SEC0      EXTI2_SECCFGR1_SEC0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI2_SECCFGR1_SEC1_Pos  (1U)
#define EXTI2_SECCFGR1_SEC1_Msk  (0x1UL << EXTI2_SECCFGR1_SEC1_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR1_SEC1      EXTI2_SECCFGR1_SEC1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI2_SECCFGR1_SEC2_Pos  (2U)
#define EXTI2_SECCFGR1_SEC2_Msk  (0x1UL << EXTI2_SECCFGR1_SEC2_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR1_SEC2      EXTI2_SECCFGR1_SEC2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI2_SECCFGR1_SEC3_Pos  (3U)
#define EXTI2_SECCFGR1_SEC3_Msk  (0x1UL << EXTI2_SECCFGR1_SEC3_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR1_SEC3      EXTI2_SECCFGR1_SEC3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI2_SECCFGR1_SEC4_Pos  (4U)
#define EXTI2_SECCFGR1_SEC4_Msk  (0x1UL << EXTI2_SECCFGR1_SEC4_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR1_SEC4      EXTI2_SECCFGR1_SEC4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI2_SECCFGR1_SEC5_Pos  (5U)
#define EXTI2_SECCFGR1_SEC5_Msk  (0x1UL << EXTI2_SECCFGR1_SEC5_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR1_SEC5      EXTI2_SECCFGR1_SEC5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI2_SECCFGR1_SEC6_Pos  (6U)
#define EXTI2_SECCFGR1_SEC6_Msk  (0x1UL << EXTI2_SECCFGR1_SEC6_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR1_SEC6      EXTI2_SECCFGR1_SEC6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI2_SECCFGR1_SEC7_Pos  (7U)
#define EXTI2_SECCFGR1_SEC7_Msk  (0x1UL << EXTI2_SECCFGR1_SEC7_Pos)          /*!< 0x00000080 */
#define EXTI2_SECCFGR1_SEC7      EXTI2_SECCFGR1_SEC7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI2_SECCFGR1_SEC8_Pos  (8U)
#define EXTI2_SECCFGR1_SEC8_Msk  (0x1UL << EXTI2_SECCFGR1_SEC8_Pos)          /*!< 0x00000100 */
#define EXTI2_SECCFGR1_SEC8      EXTI2_SECCFGR1_SEC8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI2_SECCFGR1_SEC9_Pos  (9U)
#define EXTI2_SECCFGR1_SEC9_Msk  (0x1UL << EXTI2_SECCFGR1_SEC9_Pos)          /*!< 0x00000200 */
#define EXTI2_SECCFGR1_SEC9      EXTI2_SECCFGR1_SEC9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI2_SECCFGR1_SEC10_Pos (10U)
#define EXTI2_SECCFGR1_SEC10_Msk (0x1UL << EXTI2_SECCFGR1_SEC10_Pos)         /*!< 0x00000400 */
#define EXTI2_SECCFGR1_SEC10     EXTI2_SECCFGR1_SEC10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI2_SECCFGR1_SEC11_Pos (11U)
#define EXTI2_SECCFGR1_SEC11_Msk (0x1UL << EXTI2_SECCFGR1_SEC11_Pos)         /*!< 0x00000800 */
#define EXTI2_SECCFGR1_SEC11     EXTI2_SECCFGR1_SEC11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI2_SECCFGR1_SEC12_Pos (12U)
#define EXTI2_SECCFGR1_SEC12_Msk (0x1UL << EXTI2_SECCFGR1_SEC12_Pos)         /*!< 0x00001000 */
#define EXTI2_SECCFGR1_SEC12     EXTI2_SECCFGR1_SEC12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI2_SECCFGR1_SEC13_Pos (13U)
#define EXTI2_SECCFGR1_SEC13_Msk (0x1UL << EXTI2_SECCFGR1_SEC13_Pos)         /*!< 0x00002000 */
#define EXTI2_SECCFGR1_SEC13     EXTI2_SECCFGR1_SEC13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI2_SECCFGR1_SEC14_Pos (14U)
#define EXTI2_SECCFGR1_SEC14_Msk (0x1UL << EXTI2_SECCFGR1_SEC14_Pos)         /*!< 0x00004000 */
#define EXTI2_SECCFGR1_SEC14     EXTI2_SECCFGR1_SEC14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI2_SECCFGR1_SEC15_Pos (15U)
#define EXTI2_SECCFGR1_SEC15_Msk (0x1UL << EXTI2_SECCFGR1_SEC15_Pos)         /*!< 0x00008000 */
#define EXTI2_SECCFGR1_SEC15     EXTI2_SECCFGR1_SEC15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI2_SECCFGR1_SEC16_Pos (16U)
#define EXTI2_SECCFGR1_SEC16_Msk (0x1UL << EXTI2_SECCFGR1_SEC16_Pos)         /*!< 0x00010000 */
#define EXTI2_SECCFGR1_SEC16     EXTI2_SECCFGR1_SEC16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI2_SECCFGR1_SEC17_Pos (17U)
#define EXTI2_SECCFGR1_SEC17_Msk (0x1UL << EXTI2_SECCFGR1_SEC17_Pos)         /*!< 0x00020000 */
#define EXTI2_SECCFGR1_SEC17     EXTI2_SECCFGR1_SEC17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI2_SECCFGR1_SEC18_Pos (18U)
#define EXTI2_SECCFGR1_SEC18_Msk (0x1UL << EXTI2_SECCFGR1_SEC18_Pos)         /*!< 0x00040000 */
#define EXTI2_SECCFGR1_SEC18     EXTI2_SECCFGR1_SEC18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI2_SECCFGR1_SEC19_Pos (19U)
#define EXTI2_SECCFGR1_SEC19_Msk (0x1UL << EXTI2_SECCFGR1_SEC19_Pos)         /*!< 0x00080000 */
#define EXTI2_SECCFGR1_SEC19     EXTI2_SECCFGR1_SEC19_Msk                   /*!< SEC/PRIV enable on event input 19 */
#define EXTI2_SECCFGR1_SEC20_Pos (20U)
#define EXTI2_SECCFGR1_SEC20_Msk (0x1UL << EXTI2_SECCFGR1_SEC20_Pos)         /*!< 0x00100000 */
#define EXTI2_SECCFGR1_SEC20     EXTI2_SECCFGR1_SEC20_Msk                   /*!< SEC/PRIV enable on event input 20 */
#define EXTI2_SECCFGR1_SEC21_Pos (21U)
#define EXTI2_SECCFGR1_SEC21_Msk (0x1UL << EXTI2_SECCFGR1_SEC21_Pos)         /*!< 0x00200000 */
#define EXTI2_SECCFGR1_SEC21     EXTI2_SECCFGR1_SEC21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI2_SECCFGR1_SEC22_Pos (22U)
#define EXTI2_SECCFGR1_SEC22_Msk (0x1UL << EXTI2_SECCFGR1_SEC22_Pos)         /*!< 0x00400000 */
#define EXTI2_SECCFGR1_SEC22     EXTI2_SECCFGR1_SEC22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI2_SECCFGR1_SEC23_Pos (23U)
#define EXTI2_SECCFGR1_SEC23_Msk (0x1UL << EXTI2_SECCFGR1_SEC23_Pos)         /*!< 0x00800000 */
#define EXTI2_SECCFGR1_SEC23     EXTI2_SECCFGR1_SEC23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI2_SECCFGR1_SEC24_Pos (24U)
#define EXTI2_SECCFGR1_SEC24_Msk (0x1UL << EXTI2_SECCFGR1_SEC24_Pos)         /*!< 0x01000000 */
#define EXTI2_SECCFGR1_SEC24     EXTI2_SECCFGR1_SEC24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI2_SECCFGR1_SEC25_Pos (25U)
#define EXTI2_SECCFGR1_SEC25_Msk (0x1UL << EXTI2_SECCFGR1_SEC25_Pos)         /*!< 0x02000000 */
#define EXTI2_SECCFGR1_SEC25     EXTI2_SECCFGR1_SEC25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI2_SECCFGR1_SEC26_Pos (26U)
#define EXTI2_SECCFGR1_SEC26_Msk (0x1UL << EXTI2_SECCFGR1_SEC26_Pos)         /*!< 0x04000000 */
#define EXTI2_SECCFGR1_SEC26     EXTI2_SECCFGR1_SEC26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI2_SECCFGR1_SEC27_Pos (27U)
#define EXTI2_SECCFGR1_SEC27_Msk (0x1UL << EXTI2_SECCFGR1_SEC27_Pos)         /*!< 0x08000000 */
#define EXTI2_SECCFGR1_SEC27     EXTI2_SECCFGR1_SEC27_Msk                   /*!< SEC/PRIV enable on event input 27 */
/* no event input 28  */
#define EXTI2_SECCFGR1_SEC29_Pos (29U)
#define EXTI2_SECCFGR1_SEC29_Msk (0x1UL << EXTI2_SECCFGR1_SEC29_Pos)         /*!< 0x20000000 */
#define EXTI2_SECCFGR1_SEC29     EXTI2_SECCFGR1_SEC29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI2_SECCFGR1_SEC30_Pos (30U)
#define EXTI2_SECCFGR1_SEC30_Msk (0x1UL << EXTI2_SECCFGR1_SEC30_Pos)         /*!< 0x40000000 */
#define EXTI2_SECCFGR1_SEC30     EXTI2_SECCFGR1_SEC30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI2_SECCFGR1_SEC31_Pos (31U)
#define EXTI2_SECCFGR1_SEC31_Msk (0x1UL << EXTI2_SECCFGR1_SEC31_Pos)         /*!< 0x80000000 */
#define EXTI2_SECCFGR1_SEC31     EXTI2_SECCFGR1_SEC31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI2_PRIVCFGR1 register  ******************/
#define EXTI2_PRIVCFGR1_PRIV0_Pos  (0U)
#define EXTI2_PRIVCFGR1_PRIV0_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV0_Pos)          /*!< 0x00000001 */
#define EXTI2_PRIVCFGR1_PRIV0      EXTI2_PRIVCFGR1_PRIV0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI2_PRIVCFGR1_PRIV1_Pos  (1U)
#define EXTI2_PRIVCFGR1_PRIV1_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV1_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR1_PRIV1      EXTI2_PRIVCFGR1_PRIV1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI2_PRIVCFGR1_PRIV2_Pos  (2U)
#define EXTI2_PRIVCFGR1_PRIV2_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV2_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR1_PRIV2      EXTI2_PRIVCFGR1_PRIV2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI2_PRIVCFGR1_PRIV3_Pos  (3U)
#define EXTI2_PRIVCFGR1_PRIV3_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV3_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR1_PRIV3      EXTI2_PRIVCFGR1_PRIV3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI2_PRIVCFGR1_PRIV4_Pos  (4U)
#define EXTI2_PRIVCFGR1_PRIV4_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV4_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR1_PRIV4      EXTI2_PRIVCFGR1_PRIV4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI2_PRIVCFGR1_PRIV5_Pos  (5U)
#define EXTI2_PRIVCFGR1_PRIV5_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV5_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR1_PRIV5      EXTI2_PRIVCFGR1_PRIV5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI2_PRIVCFGR1_PRIV6_Pos  (6U)
#define EXTI2_PRIVCFGR1_PRIV6_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV6_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR1_PRIV6      EXTI2_PRIVCFGR1_PRIV6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI2_PRIVCFGR1_PRIV7_Pos  (7U)
#define EXTI2_PRIVCFGR1_PRIV7_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV7_Pos)          /*!< 0x00000080 */
#define EXTI2_PRIVCFGR1_PRIV7      EXTI2_PRIVCFGR1_PRIV7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI2_PRIVCFGR1_PRIV8_Pos  (8U)
#define EXTI2_PRIVCFGR1_PRIV8_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV8_Pos)          /*!< 0x00000100 */
#define EXTI2_PRIVCFGR1_PRIV8      EXTI2_PRIVCFGR1_PRIV8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI2_PRIVCFGR1_PRIV9_Pos  (9U)
#define EXTI2_PRIVCFGR1_PRIV9_Msk  (0x1UL << EXTI2_PRIVCFGR1_PRIV9_Pos)          /*!< 0x00000200 */
#define EXTI2_PRIVCFGR1_PRIV9      EXTI2_PRIVCFGR1_PRIV9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI2_PRIVCFGR1_PRIV10_Pos (10U)
#define EXTI2_PRIVCFGR1_PRIV10_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV10_Pos)         /*!< 0x00000400 */
#define EXTI2_PRIVCFGR1_PRIV10     EXTI2_PRIVCFGR1_PRIV10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI2_PRIVCFGR1_PRIV11_Pos (11U)
#define EXTI2_PRIVCFGR1_PRIV11_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV11_Pos)         /*!< 0x00000800 */
#define EXTI2_PRIVCFGR1_PRIV11     EXTI2_PRIVCFGR1_PRIV11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI2_PRIVCFGR1_PRIV12_Pos (12U)
#define EXTI2_PRIVCFGR1_PRIV12_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV12_Pos)         /*!< 0x00001000 */
#define EXTI2_PRIVCFGR1_PRIV12     EXTI2_PRIVCFGR1_PRIV12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI2_PRIVCFGR1_PRIV13_Pos (13U)
#define EXTI2_PRIVCFGR1_PRIV13_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV13_Pos)         /*!< 0x00002000 */
#define EXTI2_PRIVCFGR1_PRIV13     EXTI2_PRIVCFGR1_PRIV13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI2_PRIVCFGR1_PRIV14_Pos (14U)
#define EXTI2_PRIVCFGR1_PRIV14_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV14_Pos)         /*!< 0x00004000 */
#define EXTI2_PRIVCFGR1_PRIV14     EXTI2_PRIVCFGR1_PRIV14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI2_PRIVCFGR1_PRIV15_Pos (15U)
#define EXTI2_PRIVCFGR1_PRIV15_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV15_Pos)         /*!< 0x00008000 */
#define EXTI2_PRIVCFGR1_PRIV15     EXTI2_PRIVCFGR1_PRIV15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI2_PRIVCFGR1_PRIV16_Pos (16U)
#define EXTI2_PRIVCFGR1_PRIV16_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV16_Pos)         /*!< 0x00010000 */
#define EXTI2_PRIVCFGR1_PRIV16     EXTI2_PRIVCFGR1_PRIV16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI2_PRIVCFGR1_PRIV17_Pos (17U)
#define EXTI2_PRIVCFGR1_PRIV17_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV17_Pos)         /*!< 0x00020000 */
#define EXTI2_PRIVCFGR1_PRIV17     EXTI2_PRIVCFGR1_PRIV17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI2_PRIVCFGR1_PRIV18_Pos (18U)
#define EXTI2_PRIVCFGR1_PRIV18_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV18_Pos)         /*!< 0x00040000 */
#define EXTI2_PRIVCFGR1_PRIV18     EXTI2_PRIVCFGR1_PRIV18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI2_PRIVCFGR1_PRIV19_Pos (19U)
#define EXTI2_PRIVCFGR1_PRIV19_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV19_Pos)         /*!< 0x00080000 */
#define EXTI2_PRIVCFGR1_PRIV19     EXTI2_PRIVCFGR1_PRIV19_Msk                   /*!< SEC/PRIV enable on event input 19 */
#define EXTI2_PRIVCFGR1_PRIV20_Pos (20U)
#define EXTI2_PRIVCFGR1_PRIV20_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV20_Pos)         /*!< 0x00100000 */
#define EXTI2_PRIVCFGR1_PRIV20     EXTI2_PRIVCFGR1_PRIV20_Msk                   /*!< SEC/PRIV enable on event input 20 */
#define EXTI2_PRIVCFGR1_PRIV21_Pos (21U)
#define EXTI2_PRIVCFGR1_PRIV21_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV21_Pos)         /*!< 0x00200000 */
#define EXTI2_PRIVCFGR1_PRIV21     EXTI2_PRIVCFGR1_PRIV21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI2_PRIVCFGR1_PRIV22_Pos (22U)
#define EXTI2_PRIVCFGR1_PRIV22_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV22_Pos)         /*!< 0x00400000 */
#define EXTI2_PRIVCFGR1_PRIV22     EXTI2_PRIVCFGR1_PRIV22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI2_PRIVCFGR1_PRIV23_Pos (23U)
#define EXTI2_PRIVCFGR1_PRIV23_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV23_Pos)         /*!< 0x00800000 */
#define EXTI2_PRIVCFGR1_PRIV23     EXTI2_PRIVCFGR1_PRIV23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI2_PRIVCFGR1_PRIV24_Pos (24U)
#define EXTI2_PRIVCFGR1_PRIV24_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV24_Pos)         /*!< 0x01000000 */
#define EXTI2_PRIVCFGR1_PRIV24     EXTI2_PRIVCFGR1_PRIV24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI2_PRIVCFGR1_PRIV25_Pos (25U)
#define EXTI2_PRIVCFGR1_PRIV25_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV25_Pos)         /*!< 0x02000000 */
#define EXTI2_PRIVCFGR1_PRIV25     EXTI2_PRIVCFGR1_PRIV25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI2_PRIVCFGR1_PRIV26_Pos (26U)
#define EXTI2_PRIVCFGR1_PRIV26_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV26_Pos)         /*!< 0x04000000 */
#define EXTI2_PRIVCFGR1_PRIV26     EXTI2_PRIVCFGR1_PRIV26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI2_PRIVCFGR1_PRIV27_Pos (27U)
#define EXTI2_PRIVCFGR1_PRIV27_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV27_Pos)         /*!< 0x08000000 */
#define EXTI2_PRIVCFGR1_PRIV27     EXTI2_PRIVCFGR1_PRIV27_Msk                   /*!< SEC/PRIV enable on event input 27 */
/* no event input 28  */
#define EXTI2_PRIVCFGR1_PRIV29_Pos (29U)
#define EXTI2_PRIVCFGR1_PRIV29_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV29_Pos)         /*!< 0x20000000 */
#define EXTI2_PRIVCFGR1_PRIV29     EXTI2_PRIVCFGR1_PRIV29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI2_PRIVCFGR1_PRIV30_Pos (30U)
#define EXTI2_PRIVCFGR1_PRIV30_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV30_Pos)         /*!< 0x40000000 */
#define EXTI2_PRIVCFGR1_PRIV30     EXTI2_PRIVCFGR1_PRIV30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI2_PRIVCFGR1_PRIV31_Pos (31U)
#define EXTI2_PRIVCFGR1_PRIV31_Msk (0x1UL << EXTI2_PRIVCFGR1_PRIV31_Pos)         /*!< 0x80000000 */
#define EXTI2_PRIVCFGR1_PRIV31     EXTI2_PRIVCFGR1_PRIV31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI2_RTSR2 register  *******************/
#define EXTI2_RTSR2_RT46_Pos        (14U)
#define EXTI2_RTSR2_RT46_Msk        (0x1UL << EXTI2_RTSR2_RT46_Pos)               /*!< 0x00004000 */
#define EXTI2_RTSR2_RT46            EXTI2_RTSR2_RT46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT47_Pos        (15U)
#define EXTI2_RTSR2_RT47_Msk        (0x1UL << EXTI2_RTSR2_RT47_Pos)               /*!< 0x00008000 */
#define EXTI2_RTSR2_RT47            EXTI2_RTSR2_RT47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT48_Pos        (16U)
#define EXTI2_RTSR2_RT48_Msk        (0x1UL << EXTI2_RTSR2_RT48_Pos)               /*!< 0x00010000 */
#define EXTI2_RTSR2_RT48            EXTI2_RTSR2_RT48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT49_Pos        (17U)
#define EXTI2_RTSR2_RT49_Msk        (0x1UL << EXTI2_RTSR2_RT49_Pos)               /*!< 0x00020000 */
#define EXTI2_RTSR2_RT49            EXTI2_RTSR2_RT49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT50_Pos        (18U)
#define EXTI2_RTSR2_RT50_Msk        (0x1UL << EXTI2_RTSR2_RT50_Pos)               /*!< 0x00040000 */
#define EXTI2_RTSR2_RT50            EXTI2_RTSR2_RT50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT51_Pos        (19U)
#define EXTI2_RTSR2_RT51_Msk        (0x1UL << EXTI2_RTSR2_RT51_Pos)               /*!< 0x00080000 */
#define EXTI2_RTSR2_RT51            EXTI2_RTSR2_RT51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_RTSR2_RT59_Pos        (27U)
#define EXTI2_RTSR2_RT59_Msk        (0x1UL << EXTI2_RTSR2_RT59_Pos)               /*!< 0x08000000 */
#define EXTI2_RTSR2_RT59            EXTI2_RTSR2_RT59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT60_Pos        (28U)
#define EXTI2_RTSR2_RT60_Msk        (0x1UL << EXTI2_RTSR2_RT60_Pos)               /*!< 0x10000000 */
#define EXTI2_RTSR2_RT60            EXTI2_RTSR2_RT60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT61_Pos        (29U)
#define EXTI2_RTSR2_RT61_Msk        (0x1UL << EXTI2_RTSR2_RT61_Pos)               /*!< 0x20000000 */
#define EXTI2_RTSR2_RT61            EXTI2_RTSR2_RT61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_FTSR2 register  *******************/
#define EXTI2_FTSR2_FT46_Pos        (14U)
#define EXTI2_FTSR2_FT46_Msk        (0x1UL << EXTI2_FTSR2_FT46_Pos)               /*!< 0x00004000 */
#define EXTI2_FTSR2_FT46            EXTI2_FTSR2_FT46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT47_Pos        (15U)
#define EXTI2_FTSR2_FT47_Msk        (0x1UL << EXTI2_FTSR2_FT47_Pos)               /*!< 0x00008000 */
#define EXTI2_FTSR2_FT47            EXTI2_FTSR2_FT47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT48_Pos        (16U)
#define EXTI2_FTSR2_FT48_Msk        (0x1UL << EXTI2_FTSR2_FT48_Pos)               /*!< 0x00010000 */
#define EXTI2_FTSR2_FT48            EXTI2_FTSR2_FT48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT49_Pos        (17U)
#define EXTI2_FTSR2_FT49_Msk        (0x1UL << EXTI2_FTSR2_FT49_Pos)               /*!< 0x00020000 */
#define EXTI2_FTSR2_FT49            EXTI2_FTSR2_FT49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT50_Pos        (18U)
#define EXTI2_FTSR2_FT50_Msk        (0x1UL << EXTI2_FTSR2_FT50_Pos)               /*!< 0x00040000 */
#define EXTI2_FTSR2_FT50            EXTI2_FTSR2_FT50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT51_Pos        (19U)
#define EXTI2_FTSR2_FT51_Msk        (0x1UL << EXTI2_FTSR2_FT51_Pos)               /*!< 0x00080000 */
#define EXTI2_FTSR2_FT51            EXTI2_FTSR2_FT51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_FTSR2_FT59_Pos        (27U)
#define EXTI2_FTSR2_FT59_Msk        (0x1UL << EXTI2_FTSR2_FT59_Pos)               /*!< 0x08000000 */
#define EXTI2_FTSR2_FT59            EXTI2_FTSR2_FT59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT60_Pos        (28U)
#define EXTI2_FTSR2_FT60_Msk        (0x1UL << EXTI2_FTSR2_FT60_Pos)               /*!< 0x10000000 */
#define EXTI2_FTSR2_FT60            EXTI2_FTSR2_FT60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT61_Pos        (29U)
#define EXTI2_FTSR2_FT61_Msk        (0x1UL << EXTI2_FTSR2_FT61_Pos)               /*!< 0x20000000 */
#define EXTI2_FTSR2_FT61            EXTI2_FTSR2_FT61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_SWIER2 register  ******************/
#define EXTI2_SWIER2_SWI46_Pos    (14U)
#define EXTI2_SWIER2_SWI46_Msk    (0x1UL << EXTI2_SWIER2_SWI46_Pos)           /*!< 0x00004000 */
#define EXTI2_SWIER2_SWI46        EXTI2_SWIER2_SWI46_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI47_Pos    (15U)
#define EXTI2_SWIER2_SWI47_Msk    (0x1UL << EXTI2_SWIER2_SWI47_Pos)           /*!< 0x00008000 */
#define EXTI2_SWIER2_SWI47        EXTI2_SWIER2_SWI47_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI48_Pos    (16U)
#define EXTI2_SWIER2_SWI48_Msk    (0x1UL << EXTI2_SWIER2_SWI48_Pos)           /*!< 0x00010000 */
#define EXTI2_SWIER2_SWI48        EXTI2_SWIER2_SWI48_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI49_Pos    (17U)
#define EXTI2_SWIER2_SWI49_Msk    (0x1UL << EXTI2_SWIER2_SWI49_Pos)           /*!< 0x00020000 */
#define EXTI2_SWIER2_SWI49        EXTI2_SWIER2_SWI49_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI50_Pos    (18U)
#define EXTI2_SWIER2_SWI50_Msk    (0x1UL << EXTI2_SWIER2_SWI50_Pos)           /*!< 0x00040000 */
#define EXTI2_SWIER2_SWI50        EXTI2_SWIER2_SWI50_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI51_Pos    (19U)
#define EXTI2_SWIER2_SWI51_Msk    (0x1UL << EXTI2_SWIER2_SWI51_Pos)           /*!< 0x00080000 */
#define EXTI2_SWIER2_SWI51        EXTI2_SWIER2_SWI51_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI59_Pos    (27U)
#define EXTI2_SWIER2_SWI59_Msk    (0x1UL << EXTI2_SWIER2_SWI59_Pos)           /*!< 0x08000000 */
#define EXTI2_SWIER2_SWI59        EXTI2_SWIER2_SWI59_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI60_Pos    (28U)
#define EXTI2_SWIER2_SWI60_Msk    (0x1UL << EXTI2_SWIER2_SWI60_Pos)           /*!< 0x10000000 */
#define EXTI2_SWIER2_SWI60        EXTI2_SWIER2_SWI60_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI61_Pos    (29U)
#define EXTI2_SWIER2_SWI61_Msk    (0x1UL << EXTI2_SWIER2_SWI61_Pos)           /*!< 0x20000000 */
#define EXTI2_SWIER2_SWI61        EXTI2_SWIER2_SWI61_Msk                     /*!< Software Interrupt on line 49 */

/******************  Bit definition for EXTI2_RPR2 register  *******************/
#define EXTI2_RPR2_RPIF46_Pos        (14U)
#define EXTI2_RPR2_RPIF46_Msk        (0x1UL << EXTI2_RPR2_RPIF46_Pos)               /*!< 0x00004000 */
#define EXTI2_RPR2_RPIF46            EXTI2_RPR2_RPIF46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF47_Pos        (15U)
#define EXTI2_RPR2_RPIF47_Msk        (0x1UL << EXTI2_RPR2_RPIF47_Pos)               /*!< 0x00008000 */
#define EXTI2_RPR2_RPIF47            EXTI2_RPR2_RPIF47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF48_Pos        (16U)
#define EXTI2_RPR2_RPIF48_Msk        (0x1UL << EXTI2_RPR2_RPIF48_Pos)               /*!< 0x00010000 */
#define EXTI2_RPR2_RPIF48            EXTI2_RPR2_RPIF48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF49_Pos        (17U)
#define EXTI2_RPR2_RPIF49_Msk        (0x1UL << EXTI2_RPR2_RPIF49_Pos)               /*!< 0x00020000 */
#define EXTI2_RPR2_RPIF49            EXTI2_RPR2_RPIF49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF50_Pos        (18U)
#define EXTI2_RPR2_RPIF50_Msk        (0x1UL << EXTI2_RPR2_RPIF50_Pos)               /*!< 0x00040000 */
#define EXTI2_RPR2_RPIF50            EXTI2_RPR2_RPIF50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF51_Pos        (19U)
#define EXTI2_RPR2_RPIF51_Msk        (0x1UL << EXTI2_RPR2_RPIF51_Pos)               /*!< 0x00080000 */
#define EXTI2_RPR2_RPIF51            EXTI2_RPR2_RPIF51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_RPR2_RPIF59_Pos        (27U)
#define EXTI2_RPR2_RPIF59_Msk        (0x1UL << EXTI2_RPR2_RPIF59_Pos)               /*!< 0x08000000 */
#define EXTI2_RPR2_RPIF59            EXTI2_RPR2_RPIF59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF60_Pos        (28U)
#define EXTI2_RPR2_RPIF60_Msk        (0x1UL << EXTI2_RPR2_RPIF60_Pos)               /*!< 0x10000000 */
#define EXTI2_RPR2_RPIF60            EXTI2_RPR2_RPIF60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF61_Pos        (29U)
#define EXTI2_RPR2_RPIF61_Msk        (0x1UL << EXTI2_RPR2_RPIF61_Pos)               /*!< 0x20000000 */
#define EXTI2_RPR2_RPIF61            EXTI2_RPR2_RPIF61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_FPR2 register  *******************/
#define EXTI2_FPR2_FPIF46_Pos        (14U)
#define EXTI2_FPR2_FPIF46_Msk        (0x1UL << EXTI2_FPR2_FPIF46_Pos)               /*!< 0x00004000 */
#define EXTI2_FPR2_FPIF46            EXTI2_FPR2_FPIF46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF47_Pos        (15U)
#define EXTI2_FPR2_FPIF47_Msk        (0x1UL << EXTI2_FPR2_FPIF47_Pos)               /*!< 0x00008000 */
#define EXTI2_FPR2_FPIF47            EXTI2_FPR2_FPIF47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF48_Pos        (16U)
#define EXTI2_FPR2_FPIF48_Msk        (0x1UL << EXTI2_FPR2_FPIF48_Pos)               /*!< 0x00010000 */
#define EXTI2_FPR2_FPIF48            EXTI2_FPR2_FPIF48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF49_Pos        (17U)
#define EXTI2_FPR2_FPIF49_Msk        (0x1UL << EXTI2_FPR2_FPIF49_Pos)               /*!< 0x00020000 */
#define EXTI2_FPR2_FPIF49            EXTI2_FPR2_FPIF49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF50_Pos        (18U)
#define EXTI2_FPR2_FPIF50_Msk        (0x1UL << EXTI2_FPR2_FPIF50_Pos)               /*!< 0x00040000 */
#define EXTI2_FPR2_FPIF50            EXTI2_FPR2_FPIF50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF51_Pos        (19U)
#define EXTI2_FPR2_FPIF51_Msk        (0x1UL << EXTI2_FPR2_FPIF51_Pos)               /*!< 0x00080000 */
#define EXTI2_FPR2_FPIF51            EXTI2_FPR2_FPIF51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_FPR2_FPIF59_Pos        (27U)
#define EXTI2_FPR2_FPIF59_Msk        (0x1UL << EXTI2_FPR2_FPIF59_Pos)               /*!< 0x08000000 */
#define EXTI2_FPR2_FPIF59            EXTI2_FPR2_FPIF59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF60_Pos        (28U)
#define EXTI2_FPR2_FPIF60_Msk        (0x1UL << EXTI2_FPR2_FPIF60_Pos)               /*!< 0x10000000 */
#define EXTI2_FPR2_FPIF60            EXTI2_FPR2_FPIF60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF61_Pos        (29U)
#define EXTI2_FPR2_FPIF61_Msk        (0x1UL << EXTI2_FPR2_FPIF61_Pos)               /*!< 0x20000000 */
#define EXTI2_FPR2_FPIF61            EXTI2_FPR2_FPIF61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_SECCFGR2  register  ******************/
/* no event input 32  */
#define EXTI2_SECCFGR2_SEC33_Pos  (1U)
#define EXTI2_SECCFGR2_SEC33_Msk  (0x1UL << EXTI2_SECCFGR2_SEC33_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR2_SEC33      EXTI2_SECCFGR2_SEC33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI2_SECCFGR2_SEC34_Pos  (2U)
#define EXTI2_SECCFGR2_SEC34_Msk  (0x1UL << EXTI2_SECCFGR2_SEC34_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR2_SEC34      EXTI2_SECCFGR2_SEC34_Msk                    /*!< SEC/PRIV enable on event input 34 */
#define EXTI2_SECCFGR2_SEC35_Pos  (3U)
#define EXTI2_SECCFGR2_SEC35_Msk  (0x1UL << EXTI2_SECCFGR2_SEC35_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR2_SEC35      EXTI2_SECCFGR2_SEC35_Msk                    /*!< SEC/PRIV enable on event input 3( */
#define EXTI2_SECCFGR2_SEC36_Pos  (4U)
#define EXTI2_SECCFGR2_SEC36_Msk  (0x1UL << EXTI2_SECCFGR2_SEC36_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR2_SEC36      EXTI2_SECCFGR2_SEC36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI2_SECCFGR2_SEC37_Pos  (5U)
#define EXTI2_SECCFGR2_SEC37_Msk  (0x1UL << EXTI2_SECCFGR2_SEC37_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR2_SEC37      EXTI2_SECCFGR2_SEC37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI2_SECCFGR2_SEC38_Pos  (6U)
#define EXTI2_SECCFGR2_SEC38_Msk  (0x1UL << EXTI2_SECCFGR2_SEC38_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR2_SEC38      EXTI2_SECCFGR2_SEC38_Msk                    /*!< SEC/PRIV enable on event input 38 */
/* no event input 39  */
#define EXTI2_SECCFGR2_SEC40_Pos  (8U)
#define EXTI2_SECCFGR2_SEC40_Msk  (0x1UL << EXTI2_SECCFGR2_SEC40_Pos)          /*!< 0x00000100 */
#define EXTI2_SECCFGR2_SEC40      EXTI2_SECCFGR2_SEC40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI2_SECCFGR2_SEC41_Pos  (9U)
#define EXTI2_SECCFGR2_SEC41_Msk  (0x1UL << EXTI2_SECCFGR2_SEC41_Pos)          /*!< 0x00000200 */
#define EXTI2_SECCFGR2_SEC41      EXTI2_SECCFGR2_SEC41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI2_SECCFGR2_SEC42_Pos  (10U)
#define EXTI2_SECCFGR2_SEC42_Msk  (0x1UL << EXTI2_SECCFGR2_SEC42_Pos)         /*!< 0x00000400 */
#define EXTI2_SECCFGR2_SEC42      EXTI2_SECCFGR2_SEC42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI2_SECCFGR2_SEC43_Pos  (11U)
#define EXTI2_SECCFGR2_SEC43_Msk  (0x1UL << EXTI2_SECCFGR2_SEC43_Pos)         /*!< 0x00000800 */
#define EXTI2_SECCFGR2_SEC43      EXTI2_SECCFGR2_SEC43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI2_SECCFGR2_SEC44_Pos  (12U)
#define EXTI2_SECCFGR2_SEC44_Msk  (0x1UL << EXTI2_SECCFGR2_SEC44_Pos)         /*!< 0x00001000 */
#define EXTI2_SECCFGR2_SEC44      EXTI2_SECCFGR2_SEC44_Msk                   /*!< SEC/PRIV enable on event input 45 */
/* no event input 45  */
#define EXTI2_SECCFGR2_SEC46_Pos  (14U)
#define EXTI2_SECCFGR2_SEC46_Msk  (0x1UL << EXTI2_SECCFGR2_SEC46_Pos)         /*!< 0x00004000 */
#define EXTI2_SECCFGR2_SEC46      EXTI2_SECCFGR2_SEC46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI2_SECCFGR2_SEC47_Pos  (15U)
#define EXTI2_SECCFGR2_SEC47_Msk   (0x1UL << EXTI2_SECCFGR2_SEC47_Pos)         /*!< 0x00008000 */
#define EXTI2_SECCFGR2_SEC47      EXTI2_SECCFGR2_SEC47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI2_SECCFGR2_SEC48_Pos  (16U)
#define EXTI2_SECCFGR2_SEC48_Msk  (0x1UL << EXTI2_SECCFGR2_SEC48_Pos)         /*!< 0x00010000 */
#define EXTI2_SECCFGR2_SEC48      EXTI2_SECCFGR2_SEC48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI2_SECCFGR2_SEC49_Pos  (17U)
#define EXTI2_SECCFGR2_SEC49_Msk  (0x1UL << EXTI2_SECCFGR2_SEC49_Pos)         /*!< 0x00020000 */
#define EXTI2_SECCFGR2_SEC49      EXTI2_SECCFGR2_SEC49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI2_SECCFGR2_SEC50_Pos  (18U)
#define EXTI2_SECCFGR2_SEC50_Msk  (0x1UL << EXTI2_SECCFGR2_SEC50_Pos)         /*!< 0x00040000 */
#define EXTI2_SECCFGR2_SEC50      EXTI2_SECCFGR2_SEC50_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_SECCFGR2_SEC51_Pos  (19U)
#define EXTI2_SECCFGR2_SEC51_Msk  (0x1UL << EXTI2_SECCFGR2_SEC51_Pos)         /*!< 0x00080000 */
#define EXTI2_SECCFGR2_SEC51      EXTI2_SECCFGR2_SEC51_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_SECCFGR2_SEC52_Pos  (20U)
#define EXTI2_SECCFGR2_SEC52_Msk  (0x1UL << EXTI2_SECCFGR2_SEC52_Pos)         /*!< 0x00100000 */
#define EXTI2_SECCFGR2_SEC52      EXTI2_SECCFGR2_SEC52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI2_SECCFGR2_SEC53_Pos  (21U)
#define EXTI2_SECCFGR2_SEC53_Msk  (0x1UL << EXTI2_SECCFGR2_SEC53_Pos)         /*!< 0x00200000 */
#define EXTI2_SECCFGR2_SEC53      EXTI2_SECCFGR2_SEC53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI2_SECCFGR2_SEC54_Pos  (22U)
#define EXTI2_SECCFGR2_SEC54_Msk  (0x1UL << EXTI2_SECCFGR2_SEC54_Pos)         /*!< 0x00400000 */
#define EXTI2_SECCFGR2_SEC54      EXTI2_SECCFGR2_SEC54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI2_SECCFGR2_SEC55_Pos  (23U)
#define EXTI2_SECCFGR2_SEC55_Msk  (0x1UL << EXTI2_SECCFGR2_SEC55_Pos)         /*!< 0x00800000 */
#define EXTI2_SECCFGR2_SEC55      EXTI2_SECCFGR2_SEC55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI2_SECCFGR2_SEC56_Pos  (24U)
#define EXTI2_SECCFGR2_SEC56_Msk  (0x1UL << EXTI2_SECCFGR2_SEC56_Pos)         /*!< 0x01000000 */
#define EXTI2_SECCFGR2_SEC56      EXTI2_SECCFGR2_SEC56_Msk                   /*!< SEC/PRIV enable on event input 56 */
/* no event input 57  */
/* no event input 58  */
#define EXTI2_SECCFGR2_SEC59_Pos  (27U)
#define EXTI2_SECCFGR2_SEC59_Msk  (0x1UL << EXTI2_SECCFGR2_SEC59_Pos)         /*!< 0x08000000 */
#define EXTI2_SECCFGR2_SEC59      EXTI2_SECCFGR2_SEC59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI2_SECCFGR2_SEC60_Pos  (28U)
#define EXTI2_SECCFGR2_SEC60_Msk  (0x1UL << EXTI2_SECCFGR2_SEC60_Pos)         /*!< 0x10000000 */
#define EXTI2_SECCFGR2_SEC60      EXTI2_SECCFGR2_SEC60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI2_SECCFGR2_SEC61_Pos  (29U)
#define EXTI2_SECCFGR2_SEC61_Msk  (0x1UL << EXTI2_SECCFGR2_SEC61_Pos)         /*!< 0x20000000 */
#define EXTI2_SECCFGR2_SEC61      EXTI2_SECCFGR2_SEC61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI2_SECCFGR2_SEC62_Pos  (30U)
#define EXTI2_SECCFGR2_SEC62_Msk  (0x1UL << EXTI2_SECCFGR2_SEC62_Pos)         /*!< 0x40000000 */
#define EXTI2_SECCFGR2_SEC62      EXTI2_SECCFGR2_SEC62_Msk                   /*!< SEC/PRIV enable on event input 62 */
#define EXTI2_SECCFGR2_SEC63_Pos  (31U)
#define EXTI2_SECCFGR2_SEC63_Msk  (0x1UL << EXTI2_SECCFGR2_SEC63_Pos)         /*!< 0x80000000 */
#define EXTI2_SECCFGR2_SEC63      EXTI2_SECCFGR2_SEC63_Msk                   /*!< SEC/PRIV enable on event input 63 */

/******************  Bit definition for EXTI2_PRIVCFGR2 register  ******************/
/* no event input 32  */
#define EXTI2_PRIVCFGR2_PRIV33_Pos  (1U)
#define EXTI2_PRIVCFGR2_PRIV33_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV33_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR2_PRIV33      EXTI2_PRIVCFGR2_PRIV33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI2_PRIVCFGR2_PRIV34_Pos  (2U)
#define EXTI2_PRIVCFGR2_PRIV34_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV34_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR2_PRIV34      EXTI2_PRIVCFGR2_PRIV34_Msk                    /*!< SEC/PRIV enable on event input 34 */
#define EXTI2_PRIVCFGR2_PRIV35_Pos  (3U)
#define EXTI2_PRIVCFGR2_PRIV35_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV35_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR2_PRIV35      EXTI2_PRIVCFGR2_PRIV35_Msk                    /*!< SEC/PRIV enable on event input 3( */
#define EXTI2_PRIVCFGR2_PRIV36_Pos  (4U)
#define EXTI2_PRIVCFGR2_PRIV36_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV36_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR2_PRIV36      EXTI2_PRIVCFGR2_PRIV36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI2_PRIVCFGR2_PRIV37_Pos  (5U)
#define EXTI2_PRIVCFGR2_PRIV37_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV37_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR2_PRIV37      EXTI2_PRIVCFGR2_PRIV37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI2_PRIVCFGR2_PRIV38_Pos  (6U)
#define EXTI2_PRIVCFGR2_PRIV38_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV38_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR2_PRIV38      EXTI2_PRIVCFGR2_PRIV38_Msk                    /*!< SEC/PRIV enable on event input 38 */
/* no event input 39  */
#define EXTI2_PRIVCFGR2_PRIV40_Pos  (8U)
#define EXTI2_PRIVCFGR2_PRIV40_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV40_Pos)          /*!< 0x00000100 */
#define EXTI2_PRIVCFGR2_PRIV40      EXTI2_PRIVCFGR2_PRIV40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI2_PRIVCFGR2_PRIV41_Pos  (9U)
#define EXTI2_PRIVCFGR2_PRIV41_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV41_Pos)          /*!< 0x00000200 */
#define EXTI2_PRIVCFGR2_PRIV41      EXTI2_PRIVCFGR2_PRIV41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI2_PRIVCFGR2_PRIV42_Pos  (10U)
#define EXTI2_PRIVCFGR2_PRIV42_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV42_Pos)         /*!< 0x00000400 */
#define EXTI2_PRIVCFGR2_PRIV42      EXTI2_PRIVCFGR2_PRIV42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI2_PRIVCFGR2_PRIV43_Pos  (11U)
#define EXTI2_PRIVCFGR2_PRIV43_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV43_Pos)         /*!< 0x00000800 */
#define EXTI2_PRIVCFGR2_PRIV43      EXTI2_PRIVCFGR2_PRIV43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI2_PRIVCFGR2_PRIV44_Pos  (12U)
#define EXTI2_PRIVCFGR2_PRIV44_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV44_Pos)         /*!< 0x00001000 */
#define EXTI2_PRIVCFGR2_PRIV44      EXTI2_PRIVCFGR2_PRIV44_Msk                   /*!< SEC/PRIV enable on event input 45 */
/* no event input 45  */
#define EXTI2_PRIVCFGR2_PRIV46_Pos  (14U)
#define EXTI2_PRIVCFGR2_PRIV46_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV46_Pos)         /*!< 0x00004000 */
#define EXTI2_PRIVCFGR2_PRIV46      EXTI2_PRIVCFGR2_PRIV46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI2_PRIVCFGR2_PRIV47_Pos  (15U)
#define EXTI2_PRIVCFGR2_PRIV47_Msk   (0x1UL << EXTI2_PRIVCFGR2_PRIV47_Pos)         /*!< 0x00008000 */
#define EXTI2_PRIVCFGR2_PRIV47      EXTI2_PRIVCFGR2_PRIV47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI2_PRIVCFGR2_PRIV48_Pos  (16U)
#define EXTI2_PRIVCFGR2_PRIV48_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV48_Pos)         /*!< 0x00010000 */
#define EXTI2_PRIVCFGR2_PRIV48      EXTI2_PRIVCFGR2_PRIV48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI2_PRIVCFGR2_PRIV49_Pos  (17U)
#define EXTI2_PRIVCFGR2_PRIV49_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV49_Pos)         /*!< 0x00020000 */
#define EXTI2_PRIVCFGR2_PRIV49      EXTI2_PRIVCFGR2_PRIV49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI2_PRIVCFGR2_PRIV50_Pos  (18U)
#define EXTI2_PRIVCFGR2_PRIV50_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV50_Pos)         /*!< 0x00040000 */
#define EXTI2_PRIVCFGR2_PRIV50      EXTI2_PRIVCFGR2_PRIV50_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_PRIVCFGR2_PRIV51_Pos  (19U)
#define EXTI2_PRIVCFGR2_PRIV51_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV51_Pos)         /*!< 0x00080000 */
#define EXTI2_PRIVCFGR2_PRIV51      EXTI2_PRIVCFGR2_PRIV51_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_PRIVCFGR2_PRIV52_Pos  (20U)
#define EXTI2_PRIVCFGR2_PRIV52_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV52_Pos)         /*!< 0x00100000 */
#define EXTI2_PRIVCFGR2_PRIV52      EXTI2_PRIVCFGR2_PRIV52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI2_PRIVCFGR2_PRIV53_Pos  (21U)
#define EXTI2_PRIVCFGR2_PRIV53_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV53_Pos)         /*!< 0x00200000 */
#define EXTI2_PRIVCFGR2_PRIV53      EXTI2_PRIVCFGR2_PRIV53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI2_PRIVCFGR2_PRIV54_Pos  (22U)
#define EXTI2_PRIVCFGR2_PRIV54_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV54_Pos)         /*!< 0x00400000 */
#define EXTI2_PRIVCFGR2_PRIV54      EXTI2_PRIVCFGR2_PRIV54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI2_PRIVCFGR2_PRIV55_Pos  (23U)
#define EXTI2_PRIVCFGR2_PRIV55_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV55_Pos)         /*!< 0x00800000 */
#define EXTI2_PRIVCFGR2_PRIV55      EXTI2_PRIVCFGR2_PRIV55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI2_PRIVCFGR2_PRIV56_Pos  (24U)
#define EXTI2_PRIVCFGR2_PRIV56_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV56_Pos)         /*!< 0x01000000 */
#define EXTI2_PRIVCFGR2_PRIV56      EXTI2_PRIVCFGR2_PRIV56_Msk                   /*!< SEC/PRIV enable on event input 56 */
/* no event input 57  */
/* no event input 58  */
#define EXTI2_PRIVCFGR2_PRIV59_Pos  (27U)
#define EXTI2_PRIVCFGR2_PRIV59_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV59_Pos)         /*!< 0x08000000 */
#define EXTI2_PRIVCFGR2_PRIV59      EXTI2_PRIVCFGR2_PRIV59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI2_PRIVCFGR2_PRIV60_Pos  (28U)
#define EXTI2_PRIVCFGR2_PRIV60_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV60_Pos)         /*!< 0x10000000 */
#define EXTI2_PRIVCFGR2_PRIV60      EXTI2_PRIVCFGR2_PRIV60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI2_PRIVCFGR2_PRIV61_Pos  (29U)
#define EXTI2_PRIVCFGR2_PRIV61_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV61_Pos)         /*!< 0x20000000 */
#define EXTI2_PRIVCFGR2_PRIV61      EXTI2_PRIVCFGR2_PRIV61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI2_PRIVCFGR2_PRIV62_Pos  (30U)
#define EXTI2_PRIVCFGR2_PRIV62_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV62_Pos)         /*!< 0x40000000 */
#define EXTI2_PRIVCFGR2_PRIV62      EXTI2_PRIVCFGR2_PRIV62_Msk                   /*!< SEC/PRIV enable on event input 62 */
#define EXTI2_PRIVCFGR2_PRIV63_Pos  (31U)
#define EXTI2_PRIVCFGR2_PRIV63_Msk  (0x1UL << EXTI2_PRIVCFGR2_PRIV63_Pos)         /*!< 0x80000000 */
#define EXTI2_PRIVCFGR2_PRIV63      EXTI2_PRIVCFGR2_PRIV63_Msk                   /*!< SEC/PRIV enable on event input 63 */

/******************  Bit definition for EXTI2_RTSR3 register  *******************/
#define EXTI2_RTSR3_RT64_Pos        (0U)
#define EXTI2_RTSR3_RT64_Msk        (0x1UL << EXTI2_RTSR3_RT64_Pos)               /*!< 0x00000001 */
#define EXTI2_RTSR3_RT64            EXTI2_RTSR3_RT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_RTSR3_RT65_Pos        (1U)
#define EXTI2_RTSR3_RT65_Msk        (0x1UL << EXTI2_RTSR3_RT65_Pos)               /*!< 0x00000002 */
#define EXTI2_RTSR3_RT65            EXTI2_RTSR3_RT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_RTSR3_RT66_Pos        (2U)
#define EXTI2_RTSR3_RT66_Msk        (0x1UL << EXTI2_RTSR3_RT66_Pos)               /*!< 0x00000004 */
#define EXTI2_RTSR3_RT66            EXTI2_RTSR3_RT66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_FTSR3 register  *******************/
#define EXTI2_FTSR3_FT64_Pos        (0U)
#define EXTI2_FTSR3_FT64_Msk        (0x1UL << EXTI2_FTSR3_FT64_Pos)               /*!< 0x00000001 */
#define EXTI2_FTSR3_FT64            EXTI2_FTSR3_FT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_FTSR3_FT65_Pos        (1U)
#define EXTI2_FTSR3_FT65_Msk        (0x1UL << EXTI2_FTSR3_FT65_Pos)               /*!< 0x00000002 */
#define EXTI2_FTSR3_FT65            EXTI2_FTSR3_FT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_FTSR3_FT66_Pos        (2U)
#define EXTI2_FTSR3_FT66_Msk        (0x1UL << EXTI2_FTSR3_FT66_Pos)               /*!< 0x00000004 */
#define EXTI2_FTSR3_FT66            EXTI2_FTSR3_FT66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_SWIER3 register  ******************/
#define EXTI2_SWIER3_SWI64_Pos    (0U)
#define EXTI2_SWIER3_SWI64_Msk    (0x1UL << EXTI2_SWIER3_SWI64_Pos)           /*!< 0x00000001 */
#define EXTI2_SWIER3_SWI64        EXTI2_SWIER3_SWI64_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI2_SWIER3_SWI65_Pos    (1U)
#define EXTI2_SWIER3_SWI65_Msk    (0x1UL << EXTI2_SWIER3_SWI65_Pos)           /*!< 0x00000002 */
#define EXTI2_SWIER3_SWI65        EXTI2_SWIER3_SWI65_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI2_SWIER3_SWI66_Pos    (2U)
#define EXTI2_SWIER3_SWI66_Msk    (0x1UL << EXTI2_SWIER3_SWI66_Pos)           /*!< 0x00000008 */
#define EXTI2_SWIER3_SWI66        EXTI2_SWIER3_SWI66_Msk                     /*!< Software Interrupt on line 85 */

/******************  Bit definition for EXTI2_RPR3 register  *******************/
#define EXTI2_RPR3_RPIF64_Pos        (0U)
#define EXTI2_RPR3_RPIF64_Msk        (0x1UL << EXTI2_RPR3_RPIF64_Pos)               /*!< 0x00000001 */
#define EXTI2_RPR3_RPIF64            EXTI2_RPR3_RPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_RPR3_RPIF65_Pos        (1U)
#define EXTI2_RPR3_RPIF65_Msk        (0x1UL << EXTI2_RPR3_RPIF65_Pos)               /*!< 0x00000002 */
#define EXTI2_RPR3_RPIF65            EXTI2_RPR3_RPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_RPR3_RPIF66_Pos        (2U)
#define EXTI2_RPR3_RPIF66_Msk        (0x1UL << EXTI2_RPR3_RPIF66_Pos)               /*!< 0x00000004 */
#define EXTI2_RPR3_RPIF66            EXTI2_RPR3_RPIF66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_FPR3 register  *******************/
#define EXTI2_FPR3_FPIF64_Pos        (0U)
#define EXTI2_FPR3_FPIF64_Msk        (0x1UL << EXTI2_FPR3_FPIF64_Pos)               /*!< 0x00000001 */
#define EXTI2_FPR3_FPIF64            EXTI2_FPR3_FPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_FPR3_FPIF65_Pos        (1U)
#define EXTI2_FPR3_FPIF65_Msk        (0x1UL << EXTI2_FPR3_FPIF65_Pos)               /*!< 0x00000002 */
#define EXTI2_FPR3_FPIF65            EXTI2_FPR3_FPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_FPR3_FPIF66_Pos        (2U)
#define EXTI2_FPR3_FPIF66_Msk        (0x1UL << EXTI2_FPR3_FPIF66_Pos)               /*!< 0x00000004 */
#define EXTI2_FPR3_FPIF66            EXTI2_FPR3_FPIF66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_SECCFGR3  register  ******************/
#define EXTI2_SECCFGR3_SEC64_Pos  (0U)
#define EXTI2_SECCFGR3_SEC64_Msk  (0x1UL << EXTI2_SECCFGR3_SEC64_Pos)          /*!< 0x00000001 */
#define EXTI2_SECCFGR3_SEC64      EXTI2_SECCFGR3_SEC64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI2_SECCFGR3_SEC65_Pos  (1U)
#define EXTI2_SECCFGR3_SEC65_Msk  (0x1UL << EXTI2_SECCFGR3_SEC65_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR3_SEC65      EXTI2_SECCFGR3_SEC65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI2_SECCFGR3_SEC66_Pos  (2U)
#define EXTI2_SECCFGR3_SEC66_Msk  (0x1UL << EXTI2_SECCFGR3_SEC66_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR3_SEC66      EXTI2_SECCFGR3_SEC66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI2_SECCFGR3_SEC67_Pos  (3U)
#define EXTI2_SECCFGR3_SEC67_Msk  (0x1UL << EXTI2_SECCFGR3_SEC67_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR3_SEC67      EXTI2_SECCFGR3_SEC67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI2_SECCFGR3_SEC68_Pos  (4U)
#define EXTI2_SECCFGR3_SEC68_Msk  (0x1UL << EXTI2_SECCFGR3_SEC68_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR3_SEC68      EXTI2_SECCFGR3_SEC68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI2_SECCFGR3_SEC69_Pos  (5U)
#define EXTI2_SECCFGR3_SEC69_Msk  (0x1UL << EXTI2_SECCFGR3_SEC69_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR3_SEC69      EXTI2_SECCFGR3_SEC69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI2_SECCFGR3_SEC70_Pos  (6U)
#define EXTI2_SECCFGR3_SEC70_Msk  (0x1UL << EXTI2_SECCFGR3_SEC70_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR3_SEC70      EXTI2_SECCFGR3_SEC70_Msk                    /*!< SEC/PRIV enable on event input 70 */
/* no event input 71 - 75 */
#define EXTI2_SECCFGR3_SEC76_Pos  (12U)
#define EXTI2_SECCFGR3_SEC76_Msk  (0x1UL << EXTI2_SECCFGR3_SEC76_Pos)           /*!< 0x00001000 */
#define EXTI2_SECCFGR3_SEC76      EXTI2_SECCFGR3_SEC76_Msk                     /*!< SEC/PRIV enable on event input 76 */
/* no event input 77 - 95 */

/******************  Bit definition for EXTI2_PRIVCFGR3 register  ******************/
#define EXTI2_PRIVCFGR3_PRIV64_Pos  (0U)
#define EXTI2_PRIVCFGR3_PRIV64_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV64_Pos)          /*!< 0x00000001 */
#define EXTI2_PRIVCFGR3_PRIV64      EXTI2_PRIVCFGR3_PRIV64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI2_PRIVCFGR3_PRIV65_Pos  (1U)
#define EXTI2_PRIVCFGR3_PRIV65_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV65_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR3_PRIV65      EXTI2_PRIVCFGR3_PRIV65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI2_PRIVCFGR3_PRIV66_Pos  (2U)
#define EXTI2_PRIVCFGR3_PRIV66_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV66_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR3_PRIV66      EXTI2_PRIVCFGR3_PRIV66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI2_PRIVCFGR3_PRIV67_Pos  (3U)
#define EXTI2_PRIVCFGR3_PRIV67_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV67_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR3_PRIV67      EXTI2_PRIVCFGR3_PRIV67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI2_PRIVCFGR3_PRIV68_Pos  (4U)
#define EXTI2_PRIVCFGR3_PRIV68_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV68_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR3_PRIV68      EXTI2_PRIVCFGR3_PRIV68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI2_PRIVCFGR3_PRIV69_Pos  (5U)
#define EXTI2_PRIVCFGR3_PRIV69_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV69_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR3_PRIV69      EXTI2_PRIVCFGR3_PRIV69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI2_PRIVCFGR3_PRIV70_Pos  (6U)
#define EXTI2_PRIVCFGR3_PRIV70_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV70_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR3_PRIV70      EXTI2_PRIVCFGR3_PRIV70_Msk                    /*!< SEC/PRIV enable on event input 70 */
/* no event input 71 - 75 */
#define EXTI2_PRIVCFGR3_PRIV76_Pos  (12U)
#define EXTI2_PRIVCFGR3_PRIV76_Msk  (0x1UL << EXTI2_PRIVCFGR3_PRIV76_Pos)           /*!< 0x00001000 */
#define EXTI2_PRIVCFGR3_PRIV76      EXTI2_PRIVCFGR3_PRIV76_Msk                     /*!< SEC/PRIV enable on event input 76 */
/* no event input 77 - 95 */

/*******************  Bit definition for EXTI2_CmIMR1 register  *******************/
#define EXTI2_IMR1_IM0_Pos          (0U)
#define EXTI2_IMR1_IM0_Msk          (0x1UL << EXTI2_IMR1_IM0_Pos)                 /*!< 0x00000001 */
#define EXTI2_IMR1_IM0              EXTI2_IMR1_IM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI2_IMR1_IM1_Pos          (1U)
#define EXTI2_IMR1_IM1_Msk          (0x1UL << EXTI2_IMR1_IM1_Pos)                 /*!< 0x00000002 */
#define EXTI2_IMR1_IM1              EXTI2_IMR1_IM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI2_IMR1_IM2_Pos          (2U)
#define EXTI2_IMR1_IM2_Msk          (0x1UL << EXTI2_IMR1_IM2_Pos)                 /*!< 0x00000004 */
#define EXTI2_IMR1_IM2              EXTI2_IMR1_IM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI2_IMR1_IM3_Pos          (3U)
#define EXTI2_IMR1_IM3_Msk          (0x1UL << EXTI2_IMR1_IM3_Pos)                 /*!< 0x00000008 */
#define EXTI2_IMR1_IM3              EXTI2_IMR1_IM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI2_IMR1_IM4_Pos          (4U)
#define EXTI2_IMR1_IM4_Msk          (0x1UL << EXTI2_IMR1_IM4_Pos)                 /*!< 0x00000010 */
#define EXTI2_IMR1_IM4              EXTI2_IMR1_IM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI2_IMR1_IM5_Pos          (5U)
#define EXTI2_IMR1_IM5_Msk          (0x1UL << EXTI2_IMR1_IM5_Pos)                 /*!< 0x00000020 */
#define EXTI2_IMR1_IM5              EXTI2_IMR1_IM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI2_IMR1_IM6_Pos          (6U)
#define EXTI2_IMR1_IM6_Msk          (0x1UL << EXTI2_IMR1_IM6_Pos)                 /*!< 0x00000040 */
#define EXTI2_IMR1_IM6              EXTI2_IMR1_IM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI2_IMR1_IM7_Pos          (7U)
#define EXTI2_IMR1_IM7_Msk          (0x1UL << EXTI2_IMR1_IM7_Pos)                 /*!< 0x00000080 */
#define EXTI2_IMR1_IM7              EXTI2_IMR1_IM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI2_IMR1_IM8_Pos          (8U)
#define EXTI2_IMR1_IM8_Msk          (0x1UL << EXTI2_IMR1_IM8_Pos)                 /*!< 0x00000100 */
#define EXTI2_IMR1_IM8              EXTI2_IMR1_IM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI2_IMR1_IM9_Pos          (9U)
#define EXTI2_IMR1_IM9_Msk          (0x1UL << EXTI2_IMR1_IM9_Pos)                 /*!< 0x00000200 */
#define EXTI2_IMR1_IM9              EXTI2_IMR1_IM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI2_IMR1_IM10_Pos         (10U)
#define EXTI2_IMR1_IM10_Msk         (0x1UL << EXTI2_IMR1_IM10_Pos)                /*!< 0x00000400 */
#define EXTI2_IMR1_IM10             EXTI2_IMR1_IM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI2_IMR1_IM11_Pos         (11U)
#define EXTI2_IMR1_IM11_Msk         (0x1UL << EXTI2_IMR1_IM11_Pos)                /*!< 0x00000800 */
#define EXTI2_IMR1_IM11             EXTI2_IMR1_IM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI2_IMR1_IM12_Pos         (12U)
#define EXTI2_IMR1_IM12_Msk         (0x1UL << EXTI2_IMR1_IM12_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR1_IM12             EXTI2_IMR1_IM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI2_IMR1_IM13_Pos         (13U)
#define EXTI2_IMR1_IM13_Msk         (0x1UL << EXTI2_IMR1_IM13_Pos)                /*!< 0x00002000 */
#define EXTI2_IMR1_IM13             EXTI2_IMR1_IM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI2_IMR1_IM14_Pos         (14U)
#define EXTI2_IMR1_IM14_Msk         (0x1UL << EXTI2_IMR1_IM14_Pos)                /*!< 0x00004000 */
#define EXTI2_IMR1_IM14             EXTI2_IMR1_IM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI2_IMR1_IM15_Pos         (15U)
#define EXTI2_IMR1_IM15_Msk         (0x1UL << EXTI2_IMR1_IM15_Pos)                /*!< 0x00008000 */
#define EXTI2_IMR1_IM15             EXTI2_IMR1_IM15_Msk                          /*!< Interrupt Mask on line 15 */
#define EXTI2_IMR1_IM16_Pos         (16U)
#define EXTI2_IMR1_IM16_Msk         (0x1UL << EXTI2_IMR1_IM16_Pos)                /*!< 0x00010000 */
#define EXTI2_IMR1_IM16             EXTI2_IMR1_IM16_Msk                          /*!< Interrupt Mask on line 16 */
#define EXTI2_IMR1_IM17_Pos         (17U)
#define EXTI2_IMR1_IM17_Msk         (0x1UL << EXTI2_IMR1_IM17_Pos)                /*!< 0x00020000 */
#define EXTI2_IMR1_IM17             EXTI2_IMR1_IM17_Msk                          /*!< Interrupt Mask on line 17 */
#define EXTI2_IMR1_IM18_Pos         (18U)
#define EXTI2_IMR1_IM18_Msk         (0x1UL << EXTI2_IMR1_IM18_Pos)                /*!< 0x00040000 */
#define EXTI2_IMR1_IM18             EXTI2_IMR1_IM18_Msk                          /*!< Interrupt Mask on line 18 */
#define EXTI2_IMR1_IM19_Pos         (19U)
#define EXTI2_IMR1_IM19_Msk         (0x1UL << EXTI2_IMR1_IM19_Pos)                /*!< 0x00080000 */
#define EXTI2_IMR1_IM19             EXTI2_IMR1_IM19_Msk                          /*!< Interrupt Mask on line 19 */
#define EXTI2_IMR1_IM20_Pos         (20U)
#define EXTI2_IMR1_IM20_Msk         (0x1UL << EXTI2_IMR1_IM20_Pos)                /*!< 0x00100000 */
#define EXTI2_IMR1_IM20             EXTI2_IMR1_IM20_Msk                          /*!< Interrupt Mask on line 20 */
#define EXTI2_IMR1_IM21_Pos         (21U)
#define EXTI2_IMR1_IM21_Msk         (0x1UL << EXTI2_IMR1_IM21_Pos)                /*!< 0x00200000 */
#define EXTI2_IMR1_IM21             EXTI2_IMR1_IM21_Msk                          /*!< Interrupt Mask on line 21 */
#define EXTI2_IMR1_IM22_Pos         (22U)
#define EXTI2_IMR1_IM22_Msk         (0x1UL << EXTI2_IMR1_IM22_Pos)                /*!< 0x00400000 */
#define EXTI2_IMR1_IM22             EXTI2_IMR1_IM22_Msk                          /*!< Interrupt Mask on line 22 */
#define EXTI2_IMR1_IM23_Pos         (23U)
#define EXTI2_IMR1_IM23_Msk         (0x1UL << EXTI2_IMR1_IM23_Pos)                /*!< 0x00800000 */
#define EXTI2_IMR1_IM23             EXTI2_IMR1_IM23_Msk                          /*!< Interrupt Mask on line 23 */
#define EXTI2_IMR1_IM24_Pos         (24U)
#define EXTI2_IMR1_IM24_Msk         (0x1UL << EXTI2_IMR1_IM24_Pos)                /*!< 0x01000000 */
#define EXTI2_IMR1_IM24             EXTI2_IMR1_IM24_Msk                          /*!< Interrupt Mask on line 24 */
#define EXTI2_IMR1_IM25_Pos         (25U)
#define EXTI2_IMR1_IM25_Msk         (0x1UL << EXTI2_IMR1_IM25_Pos)                /*!< 0x02000000 */
#define EXTI2_IMR1_IM25             EXTI2_IMR1_IM25_Msk                          /*!< Interrupt Mask on line 25 */
#define EXTI2_IMR1_IM26_Pos         (26U)
#define EXTI2_IMR1_IM26_Msk         (0x1UL << EXTI2_IMR1_IM26_Pos)                /*!< 0x04000000 */
#define EXTI2_IMR1_IM26             EXTI2_IMR1_IM26_Msk                          /*!< Interrupt Mask on line 26 */
#define EXTI2_IMR1_IM27_Pos         (27U)
#define EXTI2_IMR1_IM27_Msk         (0x1UL << EXTI2_IMR1_IM27_Pos)                /*!< 0x08000000 */
#define EXTI2_IMR1_IM27             EXTI2_IMR1_IM27_Msk                          /*!< Interrupt Mask on line 27 */
/* No interrupt line 28 */
#define EXTI2_IMR1_IM29_Pos         (29U)
#define EXTI2_IMR1_IM29_Msk         (0x1UL << EXTI2_IMR1_IM29_Pos)                /*!< 0x20000000 */
#define EXTI2_IMR1_IM29             EXTI2_IMR1_IM29_Msk                          /*!< Interrupt Mask on line 29 */
#define EXTI2_IMR1_IM30_Pos         (30U)
#define EXTI2_IMR1_IM30_Msk         (0x1UL << EXTI2_IMR1_IM30_Pos)                /*!< 0x40000000 */
#define EXTI2_IMR1_IM30             EXTI2_IMR1_IM30_Msk                          /*!< Interrupt Mask on line 30 */
#define EXTI2_IMR1_IM31_Pos         (31U)
#define EXTI2_IMR1_IM31_Msk         (0x1UL << EXTI2_IMR1_IM31_Pos)                /*!< 0x80000000 */
#define EXTI2_IMR1_IM31             EXTI2_IMR1_IM31_Msk                          /*!< Interrupt Mask on line 31 */

/*******************  Bit definition for EXTI2_CmEMR1 register  *******************/
#define EXTI2_EMR1_EM0_Pos          (0U)
#define EXTI2_EMR1_EM0_Msk          (0x1UL << EXTI2_EMR1_EM0_Pos)                 /*!< 0x00000001 */
#define EXTI2_EMR1_EM0              EXTI2_EMR1_EM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI2_EMR1_EM1_Pos          (1U)
#define EXTI2_EMR1_EM1_Msk          (0x1UL << EXTI2_EMR1_EM1_Pos)                 /*!< 0x00000002 */
#define EXTI2_EMR1_EM1              EXTI2_EMR1_EM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI2_EMR1_EM2_Pos          (2U)
#define EXTI2_EMR1_EM2_Msk          (0x1UL << EXTI2_EMR1_EM2_Pos)                 /*!< 0x00000004 */
#define EXTI2_EMR1_EM2              EXTI2_EMR1_EM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI2_EMR1_EM3_Pos          (3U)
#define EXTI2_EMR1_EM3_Msk          (0x1UL << EXTI2_EMR1_EM3_Pos)                 /*!< 0x00000008 */
#define EXTI2_EMR1_EM3              EXTI2_EMR1_EM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI2_EMR1_EM4_Pos          (4U)
#define EXTI2_EMR1_EM4_Msk          (0x1UL << EXTI2_EMR1_EM4_Pos)                 /*!< 0x00000010 */
#define EXTI2_EMR1_EM4              EXTI2_EMR1_EM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI2_EMR1_EM5_Pos          (5U)
#define EXTI2_EMR1_EM5_Msk          (0x1UL << EXTI2_EMR1_EM5_Pos)                 /*!< 0x00000020 */
#define EXTI2_EMR1_EM5              EXTI2_EMR1_EM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI2_EMR1_EM6_Pos          (6U)
#define EXTI2_EMR1_EM6_Msk          (0x1UL << EXTI2_EMR1_EM6_Pos)                 /*!< 0x00000040 */
#define EXTI2_EMR1_EM6              EXTI2_EMR1_EM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI2_EMR1_EM7_Pos          (7U)
#define EXTI2_EMR1_EM7_Msk          (0x1UL << EXTI2_EMR1_EM7_Pos)                 /*!< 0x00000080 */
#define EXTI2_EMR1_EM7              EXTI2_EMR1_EM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI2_EMR1_EM8_Pos          (8U)
#define EXTI2_EMR1_EM8_Msk          (0x1UL << EXTI2_EMR1_EM8_Pos)                 /*!< 0x00000100 */
#define EXTI2_EMR1_EM8              EXTI2_EMR1_EM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI2_EMR1_EM9_Pos          (9U)
#define EXTI2_EMR1_EM9_Msk          (0x1UL << EXTI2_EMR1_EM9_Pos)                 /*!< 0x00000200 */
#define EXTI2_EMR1_EM9              EXTI2_EMR1_EM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI2_EMR1_EM10_Pos         (10U)
#define EXTI2_EMR1_EM10_Msk         (0x1UL << EXTI2_EMR1_EM10_Pos)                /*!< 0x00000400 */
#define EXTI2_EMR1_EM10             EXTI2_EMR1_EM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI2_EMR1_EM11_Pos         (11U)
#define EXTI2_EMR1_EM11_Msk         (0x1UL << EXTI2_EMR1_EM11_Pos)                /*!< 0x00000800 */
#define EXTI2_EMR1_EM11             EXTI2_EMR1_EM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI2_EMR1_EM12_Pos         (12U)
#define EXTI2_EMR1_EM12_Msk         (0x1UL << EXTI2_EMR1_EM12_Pos)                /*!< 0x00001000 */
#define EXTI2_EMR1_EM12             EXTI2_EMR1_EM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI2_EMR1_EM13_Pos         (13U)
#define EXTI2_EMR1_EM13_Msk         (0x1UL << EXTI2_EMR1_EM13_Pos)                /*!< 0x00002000 */
#define EXTI2_EMR1_EM13             EXTI2_EMR1_EM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI2_EMR1_EM14_Pos         (14U)
#define EXTI2_EMR1_EM14_Msk         (0x1UL << EXTI2_EMR1_EM14_Pos)                /*!< 0x00004000 */
#define EXTI2_EMR1_EM14             EXTI2_EMR1_EM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI2_EMR1_EM15_Pos         (15U)
#define EXTI2_EMR1_EM15_Msk         (0x1UL << EXTI2_EMR1_EM15_Pos)                /*!< 0x00008000 */
#define EXTI2_EMR1_EM15             EXTI2_EMR1_EM15_Msk                          /*!< Interrupt Mask on line 15 */

/*******************  Bit definition for EXTI2_CmIMR2 register  *******************/
/* No interrupt line 32 */
#define EXTI2_IMR2_IM33_Pos         (1U)
#define EXTI2_IMR2_IM33_Msk         (0x1UL << EXTI2_IMR2_IM33_Pos)                /*!< 0x00000002 */
#define EXTI2_IMR2_IM33             EXTI2_IMR2_IM33_Msk                          /*!< Interrupt Mask on line 33 */
#define EXTI2_IMR2_IM34_Pos         (2U)
#define EXTI2_IMR2_IM34_Msk         (0x1UL << EXTI2_IMR2_IM34_Pos)                /*!< 0x00000004 */
#define EXTI2_IMR2_IM34             EXTI2_IMR2_IM34_Msk                          /*!< Interrupt Mask on line 34 */
#define EXTI2_IMR2_IM35_Pos         (3U)
#define EXTI2_IMR2_IM35_Msk         (0x1UL << EXTI2_IMR2_IM35_Pos)                /*!< 0x00000008 */
#define EXTI2_IMR2_IM35             EXTI2_IMR2_IM35_Msk                          /*!< Interrupt Mask on line 35 */
#define EXTI2_IMR2_IM36_Pos         (4U)
#define EXTI2_IMR2_IM36_Msk         (0x1UL << EXTI2_IMR2_IM36_Pos)                /*!< 0x00000010 */
#define EXTI2_IMR2_IM36             EXTI2_IMR2_IM36_Msk                          /*!< Interrupt Mask on line 36 */
#define EXTI2_IMR2_IM37_Pos         (5U)
#define EXTI2_IMR2_IM37_Msk         (0x1UL << EXTI2_IMR2_IM37_Pos)                /*!< 0x00000020 */
#define EXTI2_IMR2_IM37             EXTI2_IMR2_IM37_Msk                          /*!< Interrupt Mask on line 37 */
#define EXTI2_IMR2_IM38_Pos         (6U)
#define EXTI2_IMR2_IM38_Msk         (0x1UL << EXTI2_IMR2_IM38_Pos)                /*!< 0x00000040 */
#define EXTI2_IMR2_IM38             EXTI2_IMR2_IM38_Msk                          /*!< Interrupt Mask on line 38 */
/* No interrupt line 39 */
#define EXTI2_IMR2_IM40_Pos         (8U)
#define EXTI2_IMR2_IM40_Msk         (0x1UL << EXTI2_IMR2_IM40_Pos)                /*!< 0x00000100 */
#define EXTI2_IMR2_IM40             EXTI2_IMR2_IM40_Msk                          /*!< Interrupt Mask on line 40 */
#define EXTI2_IMR2_IM41_Pos         (9U)
#define EXTI2_IMR2_IM41_Msk         (0x1UL << EXTI2_IMR2_IM41_Pos)                /*!< 0x00000200 */
#define EXTI2_IMR2_IM41             EXTI2_IMR2_IM41_Msk                          /*!< Interrupt Mask on line 41 */
#define EXTI2_IMR2_IM42_Pos         (10U)
#define EXTI2_IMR2_IM42_Msk         (0x1UL << EXTI2_IMR2_IM42_Pos)                /*!< 0x00000400 */
#define EXTI2_IMR2_IM42             EXTI2_IMR2_IM42_Msk                          /*!< Interrupt Mask on line 42 */
#define EXTI2_IMR2_IM43_Pos         (11U)
#define EXTI2_IMR2_IM43_Msk         (0x1UL << EXTI2_IMR2_IM43_Pos)                /*!< 0x00000800 */
#define EXTI2_IMR2_IM43             EXTI2_IMR2_IM43_Msk                          /*!< Interrupt Mask on line 43 */
#define EXTI2_IMR2_IM44_Pos         (12U)
#define EXTI2_IMR2_IM44_Msk         (0x1UL << EXTI2_IMR2_IM44_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR2_IM44             EXTI2_IMR2_IM44_Msk                          /*!< Interrupt Mask on line 44 */
/* No interrupt line 45 */
#define EXTI2_IMR2_IM46_Pos         (14U)
#define EXTI2_IMR2_IM46_Msk         (0x1UL << EXTI2_IMR2_IM46_Pos)                /*!< 0x00004000 */
#define EXTI2_IMR2_IM46             EXTI2_IMR2_IM46_Msk                          /*!< Interrupt Mask on line 46 */
#define EXTI2_IMR2_IM47_Pos         (15U)
#define EXTI2_IMR2_IM47_Msk         (0x1UL << EXTI2_IMR2_IM47_Pos)                /*!< 0x00008000 */
#define EXTI2_IMR2_IM47             EXTI2_IMR2_IM47_Msk                          /*!< Interrupt Mask on line 47 */
#define EXTI2_IMR2_IM48_Pos         (16U)
#define EXTI2_IMR2_IM48_Msk         (0x1UL << EXTI2_IMR2_IM48_Pos)                /*!< 0x00010000 */
#define EXTI2_IMR2_IM48             EXTI2_IMR2_IM48_Msk                          /*!< Interrupt Mask on line 48 */
#define EXTI2_IMR2_IM49_Pos         (17U)
#define EXTI2_IMR2_IM49_Msk         (0x1UL << EXTI2_IMR2_IM49_Pos)                /*!< 0x00020000 */
#define EXTI2_IMR2_IM49             EXTI2_IMR2_IM49_Msk                          /*!< Interrupt Mask on line 49 */
#define EXTI2_IMR2_IM50_Pos         (18U)
#define EXTI2_IMR2_IM50_Msk         (0x1UL << EXTI2_IMR2_IM50_Pos)                /*!< 0x00040000 */
#define EXTI2_IMR2_IM50             EXTI2_IMR2_IM50_Msk                          /*!< Interrupt Mask on line 50 */
#define EXTI2_IMR2_IM51_Pos         (19U)
#define EXTI2_IMR2_IM51_Msk         (0x1UL << EXTI2_IMR2_IM51_Pos)                /*!< 0x00080000 */
#define EXTI2_IMR2_IM51             EXTI2_IMR2_IM51_Msk                          /*!< Interrupt Mask on line 51 */
#define EXTI2_IMR2_IM52_Pos         (20U)
#define EXTI2_IMR2_IM52_Msk         (0x1UL << EXTI2_IMR2_IM52_Pos)                /*!< 0x00100000 */
#define EXTI2_IMR2_IM52             EXTI2_IMR2_IM52_Msk                          /*!< Interrupt Mask on line 52 */
#define EXTI2_IMR2_IM53_Pos         (21U)
#define EXTI2_IMR2_IM53_Msk         (0x1UL << EXTI2_IMR2_IM53_Pos)                /*!< 0x00200000 */
#define EXTI2_IMR2_IM53             EXTI2_IMR2_IM53_Msk                          /*!< Interrupt Mask on line 53 */
#define EXTI2_IMR2_IM54_Pos         (22U)
#define EXTI2_IMR2_IM54_Msk         (0x1UL << EXTI2_IMR2_IM54_Pos)                /*!< 0x00400000 */
#define EXTI2_IMR2_IM54             EXTI2_IMR2_IM54_Msk                          /*!< Interrupt Mask on line 54 */
#define EXTI2_IMR2_IM55_Pos         (23U)
#define EXTI2_IMR2_IM55_Msk         (0x1UL << EXTI2_IMR2_IM55_Pos)                /*!< 0x00800000 */
#define EXTI2_IMR2_IM55             EXTI2_IMR2_IM55_Msk                          /*!< Interrupt Mask on line 55 */
#define EXTI2_IMR2_IM56_Pos         (24U)
#define EXTI2_IMR2_IM56_Msk         (0x1UL << EXTI2_IMR2_IM56_Pos)                /*!< 0x01000000 */
#define EXTI2_IMR2_IM56             EXTI2_IMR2_IM56_Msk                          /*!< Interrupt Mask on line 56 */
/* No interrupt line 57 */
/* No interrupt line 58 */
#define EXTI2_IMR2_IM59_Pos         (27U)
#define EXTI2_IMR2_IM59_Msk         (0x1UL << EXTI2_IMR2_IM59_Pos)                /*!< 0x08000000 */
#define EXTI2_IMR2_IM59             EXTI2_IMR2_IM59_Msk                          /*!< Interrupt Mask on line 59 */
#define EXTI2_IMR2_IM60_Pos         (28U)
#define EXTI2_IMR2_IM60_Msk         (0x1UL << EXTI2_IMR2_IM60_Pos)                /*!< 0x10000000 */
#define EXTI2_IMR2_IM60             EXTI2_IMR2_IM60_Msk                          /*!< Interrupt Mask on line 60 */
#define EXTI2_IMR2_IM61_Pos         (29U)
#define EXTI2_IMR2_IM61_Msk         (0x1UL << EXTI2_IMR2_IM61_Pos)                /*!< 0x20000000 */
#define EXTI2_IMR2_IM61             EXTI2_IMR2_IM61_Msk                          /*!< Interrupt Mask on line 61 */
#define EXTI2_IMR2_IM62_Pos         (30U)
#define EXTI2_IMR2_IM62_Msk         (0x1UL << EXTI2_IMR2_IM62_Pos)                /*!< 0x40000000 */
#define EXTI2_IMR2_IM62             EXTI2_IMR2_IM62_Msk                          /*!< Interrupt Mask on line 62 */
#define EXTI2_IMR2_IM63_Pos         (31U)
#define EXTI2_IMR2_IM63_Msk         (0x1UL << EXTI2_IMR2_IM63_Pos)                /*!< 0x80000000 */
#define EXTI2_IMR2_IM63             EXTI2_IMR2_IM63_Msk                          /*!< Interrupt Mask on line 63 */

/*******************  Bit definition for EXTI2_CmEMR2 register  *******************/
#define EXTI2_EMR2_EM59_Pos         (27U)
#define EXTI2_EMR2_EM59_Msk         (0x1UL << EXTI2_EMR2_EM59_Pos)                 /*!< 0x08000000 */
#define EXTI2_EMR2_EM59             EXTI2_EMR2_EM59_Msk                           /*!< Interrupt Mask on line 59 */
#define EXTI2_EMR2_EM60_Pos         (28U)
#define EXTI2_EMR2_EM60_Msk         (0x1UL << EXTI2_EMR2_EM60_Pos)                 /*!< 0100000000 */
#define EXTI2_EMR2_EM60             EXTI2_EMR2_EM60_Msk                           /*!< Interrupt Mask on line 60 */
#define EXTI2_EMR2_EM61_Pos         (29U)
#define EXTI2_EMR2_EM61_Msk         (0x1UL << EXTI2_EMR2_EM61_Pos)                 /*!< 0x20000000 */
#define EXTI2_EMR2_EM61             EXTI2_EMR2_EM61_Msk                           /*!< Interrupt Mask on line 61 */

/*******************  Bit definition for EXTI2_CmIMR3 register  *******************/
#define EXTI2_IMR3_IM64_Pos         (0U)
#define EXTI2_IMR3_IM64_Msk         (0x1UL << EXTI2_IMR3_IM64_Pos)                /*!< 0x00000001 */
#define EXTI2_IMR3_IM64             EXTI2_IMR3_IM64_Msk                          /*!< Interrupt Mask on line 64 */
#define EXTI2_IMR3_IM65_Pos         (1U)
#define EXTI2_IMR3_IM65_Msk         (0x1UL << EXTI2_IMR3_IM65_Pos)                /*!< 0x00000002 */
#define EXTI2_IMR3_IM65             EXTI2_IMR3_IM65_Msk                          /*!< Interrupt Mask on line 65 */
#define EXTI2_IMR3_IM66_Pos         (2U)
#define EXTI2_IMR3_IM66_Msk         (0x1UL << EXTI2_IMR3_IM66_Pos)                /*!< 0x00000004 */
#define EXTI2_IMR3_IM66             EXTI2_IMR3_IM66_Msk                          /*!< Interrupt Mask on line 66 */
#define EXTI2_IMR3_IM67_Pos         (3U)
#define EXTI2_IMR3_IM67_Msk         (0x1UL << EXTI2_IMR3_IM67_Pos)                /*!< 0x00000008 */
#define EXTI2_IMR3_IM67             EXTI2_IMR3_IM67_Msk                          /*!< Interrupt Mask on line 67 */
#define EXTI2_IMR3_IM68_Pos         (4U)
#define EXTI2_IMR3_IM68_Msk         (0x1UL << EXTI2_IMR3_IM68_Pos)                /*!< 0x00000010 */
#define EXTI2_IMR3_IM68             EXTI2_IMR3_IM68_Msk                          /*!< Interrupt Mask on line 68 */
#define EXTI2_IMR3_IM69_Pos         (5U)
#define EXTI2_IMR3_IM69_Msk         (0x1UL << EXTI2_IMR3_IM69_Pos)                /*!< 0x00000020 */
#define EXTI2_IMR3_IM69             EXTI2_IMR3_IM69_Msk                          /*!< Interrupt Mask on line 69 */
#define EXTI2_IMR3_IM70_Pos         (6U)
#define EXTI2_IMR3_IM70_Msk         (0x1UL << EXTI2_IMR3_IM70_Pos)                /*!< 0x00000040 */
#define EXTI2_IMR3_IM70             EXTI2_IMR3_IM70_Msk                          /*!< Interrupt Mask on line 70 */
/* No interrupt line 71 */
/* No interrupt line 72 */
/* No interrupt line 73 */
/* No interrupt line 74 */
/* No interrupt line 75 */
#define EXTI2_IMR3_IM76_Pos         (12U)
#define EXTI2_IMR3_IM76_Msk         (0x1UL << EXTI2_IMR3_IM76_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR3_IM76             EXTI2_IMR3_IM76_Msk                          /*!< Interrupt Mask on line 76 */





/******************************************************************************/
/*                                                                            */
/*                       Flexible Memory Controller                           */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for FMC_BCRx registers (x=1..4)  *********/
#define FMC_BCRx_MBKEN_Pos            (0U)
#define FMC_BCRx_MBKEN_Msk            (0x1UL << FMC_BCRx_MBKEN_Pos)           /*!< 0x00000001 */
#define FMC_BCRx_MBKEN                FMC_BCRx_MBKEN_Msk                     /*!< Memory bank enable bit. */
#define FMC_BCRx_MUXEN_Pos            (1U)
#define FMC_BCRx_MUXEN_Msk            (0x1UL << FMC_BCRx_MUXEN_Pos)           /*!< 0x00000002 */
#define FMC_BCRx_MUXEN                FMC_BCRx_MUXEN_Msk                     /*!< Address/data multiplexing enable bit. */
#define FMC_BCRx_MTYP_Pos             (2U)
#define FMC_BCRx_MTYP_Msk             (0x3UL << FMC_BCRx_MTYP_Pos)            /*!< 0x0000000C */
#define FMC_BCRx_MTYP                 FMC_BCRx_MTYP_Msk                      /*!< Memory type. */
#define FMC_BCRx_MWID_Pos             (4U)
#define FMC_BCRx_MWID_Msk             (0x3UL << FMC_BCRx_MWID_Pos)            /*!< 0x00000030 */
#define FMC_BCRx_MWID                 FMC_BCRx_MWID_Msk                      /*!< Memory data bus width. */
#define FMC_BCRx_FACCEN_Pos           (6U)
#define FMC_BCRx_FACCEN_Msk           (0x1UL << FMC_BCRx_FACCEN_Pos)          /*!< 0x00000040 */
#define FMC_BCRx_FACCEN               FMC_BCRx_FACCEN_Msk                    /*!< Flash memory access enable */
#define FMC_BCRx_BURSTEN_Pos          (8U)
#define FMC_BCRx_BURSTEN_Msk          (0x1UL << FMC_BCRx_BURSTEN_Pos)         /*!< 0x00000100 */
#define FMC_BCRx_BURSTEN              FMC_BCRx_BURSTEN_Msk                   /*!< Burst enable bit. */
#define FMC_BCRx_WAITPOL_Pos          (9U)
#define FMC_BCRx_WAITPOL_Msk          (0x1UL << FMC_BCRx_WAITPOL_Pos)         /*!< 0x00000200 */
#define FMC_BCRx_WAITPOL              FMC_BCRx_WAITPOL_Msk                   /*!< Wait signal polarity bit. */
#define FMC_BCRx_WAITCFG_Pos          (11U)
#define FMC_BCRx_WAITCFG_Msk          (0x1UL << FMC_BCRx_WAITCFG_Pos)         /*!< 0x00000800 */
#define FMC_BCRx_WAITCFG              FMC_BCRx_WAITCFG_Msk                   /*!< Wait timing configuration. */
#define FMC_BCRx_WREN_Pos             (12U)
#define FMC_BCRx_WREN_Msk             (0x1UL << FMC_BCRx_WREN_Pos)            /*!< 0x00001000 */
#define FMC_BCRx_WREN                 FMC_BCRx_WREN_Msk                      /*!< Write enable bit. */
#define FMC_BCRx_WAITEN_Pos           (13U)
#define FMC_BCRx_WAITEN_Msk           (0x1UL << FMC_BCRx_WAITEN_Pos)          /*!< 0x00002000 */
#define FMC_BCRx_WAITEN               FMC_BCRx_WAITEN_Msk                    /*!< Wait enable bit. */
#define FMC_BCRx_EXTMOD_Pos           (14U)
#define FMC_BCRx_EXTMOD_Msk           (0x1UL << FMC_BCRx_EXTMOD_Pos)          /*!< 0x00004000 */
#define FMC_BCRx_EXTMOD               FMC_BCRx_EXTMOD_Msk                    /*!< Extended mode enable. */
#define FMC_BCRx_ASYNCWAIT_Pos        (15U)
#define FMC_BCRx_ASYNCWAIT_Msk        (0x1UL << FMC_BCRx_ASYNCWAIT_Pos)       /*!< 0x00008000 */
#define FMC_BCRx_ASYNCWAIT            FMC_BCRx_ASYNCWAIT_Msk                 /*!< Wait signal during asynchronous transfers */
#define FMC_BCRx_CPSIZE_Pos           (16U)
#define FMC_BCRx_CPSIZE_Msk           (0x7UL << FMC_BCRx_CPSIZE_Pos)          /*!< 0x00070000 */
#define FMC_BCRx_CPSIZE               FMC_BCRx_CPSIZE_Msk                    /*!< CRAM Page size. */
#define FMC_BCRx_CPSIZE_0             (0x1UL << FMC_BCRx_CPSIZE_Pos)          /*!< 0x00010000 */
#define FMC_BCRx_CPSIZE_1             (0x2UL << FMC_BCRx_CPSIZE_Pos)          /*!< 0x00020000 */
#define FMC_BCRx_CPSIZE_2             (0x4UL << FMC_BCRx_CPSIZE_Pos)          /*!< 0x00040000 */
#define FMC_BCRx_CBURSTRW_Pos         (19U)
#define FMC_BCRx_CBURSTRW_Msk         (0x1UL << FMC_BCRx_CBURSTRW_Pos)        /*!< 0x00080000 */
#define FMC_BCRx_CBURSTRW             FMC_BCRx_CBURSTRW_Msk                  /*!< Write burst enable. */
#define FMC_BCRx_CSCOUNT0_Pos         (20U)
#define FMC_BCRx_CSCOUNT0_Msk         (0x1UL << FMC_BCRx_CSCOUNT0_Pos)        /*!< 0x00100000 */
#define FMC_BCRx_CSCOUNT0             FMC_BCRx_CSCOUNT0_Msk                  /*!< Chip Select (CS) counter */
#define FMC_BCRx_CSCOUNT1_Pos         (21U)
#define FMC_BCRx_CSCOUNT1_Msk         (0x1UL << FMC_BCRx_CSCOUNT1_Pos)        /*!< 0x00200000 */
#define FMC_BCRx_CSCOUNT1             FMC_BCRx_CSCOUNT1_Msk                  /*!< Chip Select (CS) counter */
#define FMC_BCRx_NBLSET_Pos           (22U)
#define FMC_BCRx_NBLSET_Msk           (0x3UL << FMC_BCRx_NBLSET_Pos)          /*!< 0x00C00000 */
#define FMC_BCRx_NBLSET               FMC_BCRx_NBLSET_Msk                    /*!< Byte lane (NBL) SETUP */

/******************  Bit definition for FMC_BTRx registers (x=1..4)  *********/
#define FMC_BTRx_ADDSET_Pos           (0U)
#define FMC_BTRx_ADDSET_Msk           (0xFUL << FMC_BTRx_ADDSET_Pos)          /*!< 0x0000000F */
#define FMC_BTRx_ADDSET               FMC_BTRx_ADDSET_Msk                    /*!< Address setup phase duration */
#define FMC_BTRx_ADDHLD_Pos           (4U)
#define FMC_BTRx_ADDHLD_Msk           (0xFUL << FMC_BTRx_ADDHLD_Pos)          /*!< 0x000000F0 */
#define FMC_BTRx_ADDHLD               FMC_BTRx_ADDHLD_Msk                    /*!< Address-hold phase duration */
#define FMC_BTRx_DATAST_Pos           (8U)
#define FMC_BTRx_DATAST_Msk           (0xFFUL << FMC_BTRx_DATAST_Pos)         /*!< 0x0000FF00 */
#define FMC_BTRx_DATAST               FMC_BTRx_DATAST_Msk                    /*!< Data-phase duration */
#define FMC_BTRx_BUSTURN_Pos          (16U)
#define FMC_BTRx_BUSTURN_Msk          (0xFUL << FMC_BTRx_BUSTURN_Pos)         /*!< 0x000F0000 */
#define FMC_BTRx_BUSTURN              FMC_BTRx_BUSTURN_Msk                   /*!< Bus turnaround phase duration */
#define FMC_BTRx_CLKDIV_Pos           (20U)
#define FMC_BTRx_CLKDIV_Msk           (0xFUL << FMC_BTRx_CLKDIV_Pos)          /*!< 0x00F00000 */
#define FMC_BTRx_CLKDIV               FMC_BTRx_CLKDIV_Msk                    /*!< Clock divide ratio (for FMC_CLK signal) */
#define FMC_BTRx_DATLAT_Pos           (24U)
#define FMC_BTRx_DATLAT_Msk           (0xFUL << FMC_BTRx_DATLAT_Pos)          /*!< 0x0F000000 */
#define FMC_BTRx_DATLAT               FMC_BTRx_DATLAT_Msk                    /*!< Data latency for synchronous memory (see note below bit descriptions) */
#define FMC_BTRx_ACCMOD_Pos           (28U)
#define FMC_BTRx_ACCMOD_Msk           (0x3UL << FMC_BTRx_ACCMOD_Pos)          /*!< 0x30000000 */
#define FMC_BTRx_ACCMOD               FMC_BTRx_ACCMOD_Msk                    /*!< Access mode */
#define FMC_BTRx_DATAHLD_Pos          (30U)
#define FMC_BTRx_DATAHLD_Msk          (0x3UL << FMC_BTRx_DATAHLD_Pos)         /*!< 0xC0000000 */
#define FMC_BTRx_DATAHLD              FMC_BTRx_DATAHLD_Msk                   /*!< Data Hold phase duration */

/*****************  Bit definition for FMC_CFGR register  *****************/
#define FMC_CFGR_CLKDIV_Pos           (16U)
#define FMC_CFGR_CLKDIV_Msk           (0xFUL << FMC_CFGR_CLKDIV_Pos)          /*!< 0x000F0000 */
#define FMC_CFGR_CLKDIV               FMC_CFGR_CLKDIV_Msk                    /*!< Clock divide ratio (for FMC_CLK signal) */
#define FMC_CFGR_CCLKEN_Pos           (20U)
#define FMC_CFGR_CCLKEN_Msk           (0x1UL << FMC_CFGR_CCLKEN_Pos)          /*!< 0x00100000 */
#define FMC_CFGR_CCLKEN               FMC_CFGR_CCLKEN_Msk                    /*!< Continuous clock enable */
#define FMC_CFGR_FMCEN_Pos            (31U)
#define FMC_CFGR_FMCEN_Msk            (0x1UL << FMC_CFGR_FMCEN_Pos)           /*!< 0x80000000 */
#define FMC_CFGR_FMCEN                FMC_CFGR_FMCEN_Msk                     /*!< FMC controller enable */

/*****************  Bit definition for FMC_PCR register  ******************/
#define FMC_PCR_PWAITEN_Pos           (1U)
#define FMC_PCR_PWAITEN_Msk           (0x1UL << FMC_PCR_PWAITEN_Pos)          /*!< 0x00000002 */
#define FMC_PCR_PWAITEN               FMC_PCR_PWAITEN_Msk                    /*!< Wait feature enable bit */
#define FMC_PCR_PBKEN_Pos             (2U)
#define FMC_PCR_PBKEN_Msk             (0x1UL << FMC_PCR_PBKEN_Pos)            /*!< 0x00000004 */
#define FMC_PCR_PBKEN                 FMC_PCR_PBKEN_Msk                      /*!< NAND Flash memory bank enable bit */
#define FMC_PCR_PWID_Pos              (4U)
#define FMC_PCR_PWID_Msk              (0x3UL << FMC_PCR_PWID_Pos)             /*!< 0x00000030 */
#define FMC_PCR_PWID                  FMC_PCR_PWID_Msk                       /*!< Data bus width */
#define FMC_PCR_ECCEN_Pos             (6U)
#define FMC_PCR_ECCEN_Msk             (0x1UL << FMC_PCR_ECCEN_Pos)            /*!< 0x00000040 */
#define FMC_PCR_ECCEN                 FMC_PCR_ECCEN_Msk                      /*!< ECC computation logic enable bit */
#define FMC_PCR_ECCALG_Pos            (8U)
#define FMC_PCR_ECCALG_Msk            (0x1UL << FMC_PCR_ECCALG_Pos)           /*!< 0x00000100 */
#define FMC_PCR_ECCALG                FMC_PCR_ECCALG_Msk                     /*!< ECC algorithm */
#define FMC_PCR_TCLR_Pos              (9U)
#define FMC_PCR_TCLR_Msk              (0xFUL << FMC_PCR_TCLR_Pos)             /*!< 0x00001E00 */
#define FMC_PCR_TCLR                  FMC_PCR_TCLR_Msk                       /*!< CLE to RE delay. */
#define FMC_PCR_TAR_Pos               (13U)
#define FMC_PCR_TAR_Msk               (0xFUL << FMC_PCR_TAR_Pos)              /*!< 0x0001E000 */
#define FMC_PCR_TAR                   FMC_PCR_TAR_Msk                        /*!< ALE to RE delay. */
#define FMC_PCR_ECCSS_Pos             (17U)
#define FMC_PCR_ECCSS_Msk             (0x7UL << FMC_PCR_ECCSS_Pos)            /*!< 0x000E0000 */
#define FMC_PCR_ECCSS                 FMC_PCR_ECCSS_Msk                      /*!< ECC sector size (used to access spare area) */
#define FMC_PCR_TCEH_Pos              (20U)
#define FMC_PCR_TCEH_Msk              (0xFUL << FMC_PCR_TCEH_Pos)             /*!< 0x00F00000 */
#define FMC_PCR_TCEH                  FMC_PCR_TCEH_Msk                       /*!< Chip select high timing */
#define FMC_PCR_BCHECC_Pos            (24U)
#define FMC_PCR_BCHECC_Msk            (0x1UL << FMC_PCR_BCHECC_Pos)           /*!< 0x01000000 */
#define FMC_PCR_BCHECC                FMC_PCR_BCHECC_Msk                     /*!< BCH error correction capability */
#define FMC_PCR_WEN_Pos               (25U)
#define FMC_PCR_WEN_Msk               (0x1UL << FMC_PCR_WEN_Pos)              /*!< 0x02000000 */
#define FMC_PCR_WEN                   FMC_PCR_WEN_Msk                        /*!< Write enable */

/******************  Bit definition for FMC_SR register  ******************/
#define FMC_SR_ISOST_Pos              (0U)
#define FMC_SR_ISOST_Msk              (0x3UL << FMC_SR_ISOST_Pos)             /*!< 0x00000003 */
#define FMC_SR_ISOST                  FMC_SR_ISOST_Msk                       /*!< FMC isolation state with respect to the AXI interface */
#define FMC_SR_PEF_Pos                (4U)
#define FMC_SR_PEF_Msk                (0x1UL << FMC_SR_PEF_Pos)               /*!< 0x00000010 */
#define FMC_SR_PEF                    FMC_SR_PEF_Msk                         /*!< Pipe Empty Flag */
#define FMC_SR_NWRF_Pos               (6U)
#define FMC_SR_NWRF_Msk               (0x1UL << FMC_SR_NWRF_Pos)              /*!< 0x00000040 */
#define FMC_SR_NWRF                   FMC_SR_NWRF_Msk                        /*!< NAND write request flag */

/*****************  Bit definition for FMC_PMEM register  *****************/
#define FMC_PMEM_MEMSET_Pos           (0U)
#define FMC_PMEM_MEMSET_Msk           (0xFFUL << FMC_PMEM_MEMSET_Pos)         /*!< 0x000000FF */
#define FMC_PMEM_MEMSET               FMC_PMEM_MEMSET_Msk                    /*!< Common memory setup time */
#define FMC_PMEM_MEMWAIT_Pos          (8U)
#define FMC_PMEM_MEMWAIT_Msk          (0xFFUL << FMC_PMEM_MEMWAIT_Pos)        /*!< 0x0000FF00 */
#define FMC_PMEM_MEMWAIT              FMC_PMEM_MEMWAIT_Msk                   /*!< Common memory wait time */
#define FMC_PMEM_MEMHOLD_Pos          (16U)
#define FMC_PMEM_MEMHOLD_Msk          (0xFFUL << FMC_PMEM_MEMHOLD_Pos)        /*!< 0x00FF0000 */
#define FMC_PMEM_MEMHOLD              FMC_PMEM_MEMHOLD_Msk                   /*!< Common memory hold time */
#define FMC_PMEM_MEMHIZ_Pos           (24U)
#define FMC_PMEM_MEMHIZ_Msk           (0xFFUL << FMC_PMEM_MEMHIZ_Pos)         /*!< 0xFF000000 */
#define FMC_PMEM_MEMHIZ               FMC_PMEM_MEMHIZ_Msk                    /*!< Common memory data bus Hi-Z time */

/*****************  Bit definition for FMC_PATT register  *****************/
#define FMC_PATT_ATTSET_Pos           (0U)
#define FMC_PATT_ATTSET_Msk           (0xFFUL << FMC_PATT_ATTSET_Pos)         /*!< 0x000000FF */
#define FMC_PATT_ATTSET               FMC_PATT_ATTSET_Msk                    /*!< Attribute memory setup time */
#define FMC_PATT_ATTWAIT_Pos          (8U)
#define FMC_PATT_ATTWAIT_Msk          (0xFFUL << FMC_PATT_ATTWAIT_Pos)        /*!< 0x0000FF00 */
#define FMC_PATT_ATTWAIT              FMC_PATT_ATTWAIT_Msk                   /*!< Attribute memory wait time */
#define FMC_PATT_ATTHOLD_Pos          (16U)
#define FMC_PATT_ATTHOLD_Msk          (0xFFUL << FMC_PATT_ATTHOLD_Pos)        /*!< 0x00FF0000 */
#define FMC_PATT_ATTHOLD              FMC_PATT_ATTHOLD_Msk                   /*!< Attribute memory hold time */
#define FMC_PATT_ATTHIZ_Pos           (24U)
#define FMC_PATT_ATTHIZ_Msk           (0xFFUL << FMC_PATT_ATTHIZ_Pos)         /*!< 0xFF000000 */
#define FMC_PATT_ATTHIZ               FMC_PATT_ATTHIZ_Msk                    /*!< Attribute memory data bus Hi-Z time */

/*****************  Bit definition for FMC_HPR register  ******************/
#define FMC_HPR_HPR_Pos               (0U)
#define FMC_HPR_HPR_Msk               (0xFFFFFFFFUL << FMC_HPR_HPR_Pos)       /*!< 0xFFFFFFFF */
#define FMC_HPR_HPR                   FMC_HPR_HPR_Msk                        /*!< Hamming parity result */

/****************  Bit definition for FMC_HECCR register  *****************/
#define FMC_HECCR_HECC_Pos            (0U)
#define FMC_HECCR_HECC_Msk            (0xFFFFFFFFUL << FMC_HECCR_HECC_Pos)    /*!< 0xFFFFFFFF */
#define FMC_HECCR_HECC                FMC_HECCR_HECC_Msk                     /*!< ECC result */

/****************  Bit definition for FMC_FMC_BWTRx register (x=1..4) *****/
#define FMC_BWTRx_ADDSET_Pos          (0U)
#define FMC_BWTRx_ADDSET_Msk          (0xFUL << FMC_BWTRx_ADDSET_Pos)         /*!< 0x0000000F */
#define FMC_BWTRx_ADDSET              FMC_BWTRx_ADDSET_Msk                   /*!< Address setup phase duration. */
#define FMC_BWTRx_ADDHLD_Pos          (4U)
#define FMC_BWTRx_ADDHLD_Msk          (0xFUL << FMC_BWTRx_ADDHLD_Pos)         /*!< 0x000000F0 */
#define FMC_BWTRx_ADDHLD              FMC_BWTRx_ADDHLD_Msk                   /*!< Address-hold phase duration. */
#define FMC_BWTRx_DATAST_Pos          (8U)
#define FMC_BWTRx_DATAST_Msk          (0xFFUL << FMC_BWTRx_DATAST_Pos)        /*!< 0x0000FF00 */
#define FMC_BWTRx_DATAST              FMC_BWTRx_DATAST_Msk                   /*!< Data-phase duration. */
#define FMC_BWTRx_BUSTURN_Pos         (16U)
#define FMC_BWTRx_BUSTURN_Msk         (0xFUL << FMC_BWTRx_BUSTURN_Pos)        /*!< 0x000F0000 */
#define FMC_BWTRx_BUSTURN             FMC_BWTRx_BUSTURN_Msk                  /*!< Bus turnaround phase duration */
#define FMC_BWTRx_ACCMOD_Pos          (28U)
#define FMC_BWTRx_ACCMOD_Msk          (0x3UL << FMC_BWTRx_ACCMOD_Pos)         /*!< 0x30000000 */
#define FMC_BWTRx_ACCMOD              FMC_BWTRx_ACCMOD_Msk                   /*!< Access mode. */
#define FMC_BWTRx_DATAHLD_Pos         (30U)
#define FMC_BWTRx_DATAHLD_Msk         (0x3UL << FMC_BWTRx_DATAHLD_Pos)        /*!< 0xC0000000 */
#define FMC_BWTRx_DATAHLD             FMC_BWTRx_DATAHLD_Msk                  /*!< Data Hold phase duration */

/*******************  Bit definition for FMC_IER register  ********************/
#define FMC_IER_IREE_Pos              (0U)
#define FMC_IER_IREE_Msk              (0x1UL << FMC_IER_IREE_Pos)             /*!< 0x00000001 */
#define FMC_IER_IREE                  FMC_IER_IREE_Msk                       /*!< Interrupt rising edge detection enable bit */
#define FMC_IER_IHLE_Pos              (1U)
#define FMC_IER_IHLE_Msk              (0x1UL << FMC_IER_IHLE_Pos)             /*!< 0x00000002 */
#define FMC_IER_IHLE                  FMC_IER_IHLE_Msk                       /*!< Interrupt high-level detection enable bit */
#define FMC_IER_IFEE_Pos              (2U)
#define FMC_IER_IFEE_Msk              (0x1UL << FMC_IER_IFEE_Pos)             /*!< 0x00000004 */
#define FMC_IER_IFEE                  FMC_IER_IFEE_Msk                       /*!< Interrupt falling edge detection enable bit */

/*******************  Bit definition for FMC_ISR register  ********************/
#define FMC_ISR_IREF_Pos              (0U)
#define FMC_ISR_IREF_Msk              (0x1UL << FMC_ISR_IREF_Pos)             /*!< 0x00000001 */
#define FMC_ISR_IREF                  FMC_ISR_IREF_Msk                       /*!< Interrupt rising edge flag */
#define FMC_ISR_IHLF_Pos              (1U)
#define FMC_ISR_IHLF_Msk              (0x1UL << FMC_ISR_IHLF_Pos)             /*!< 0x00000002 */
#define FMC_ISR_IHLF                  FMC_ISR_IHLF_Msk                       /*!< Interrupt high-level flag */
#define FMC_ISR_IFEF_Pos              (2U)
#define FMC_ISR_IFEF_Msk              (0x1UL << FMC_ISR_IFEF_Pos)             /*!< 0x00000004 */
#define FMC_ISR_IFEF                  FMC_ISR_IFEF_Msk                       /*!< Interrupt falling edge flag */

/*******************  Bit definition for FMC_ICR register  ********************/
#define FMC_ICR_CIREF_Pos             (0U)
#define FMC_ICR_CIREF_Msk             (0x1UL << FMC_ICR_CIREF_Pos)            /*!< 0x00000001 */
#define FMC_ICR_CIREF                 FMC_ICR_CIREF_Msk                      /*!< Clear Interrupt rising edge flag */
#define FMC_ICR_CIHLF_Pos             (1U)
#define FMC_ICR_CIHLF_Msk             (0x1UL << FMC_ICR_CIHLF_Pos)            /*!< 0x00000002 */
#define FMC_ICR_CIHLF                 FMC_ICR_CIHLF_Msk                      /*!< Clear Interrupt high-level flag */
#define FMC_ICR_CIFEF_Pos             (2U)
#define FMC_ICR_CIFEF_Msk             (0x1UL << FMC_ICR_CIFEF_Pos)            /*!< 0x00000004 */
#define FMC_ICR_CIFEF                 FMC_ICR_CIFEF_Msk                      /*!< Clear Interrupt falling edge flag */

/****************  Bit definition for FMC_CSQCR register  *****************/
#define FMC_CSQCR_CSQSTART_Pos        (0U)
#define FMC_CSQCR_CSQSTART_Msk        (0x1UL << FMC_CSQCR_CSQSTART_Pos)       /*!< 0x00000001 */
#define FMC_CSQCR_CSQSTART            FMC_CSQCR_CSQSTART_Msk                 /*!< Command Sequencer Enable */

/***************  Bit definition for FMC_CSQCFGR1 register  ***************/
#define FMC_CSQCFGR1_CMD2EN_Pos       (1U)
#define FMC_CSQCFGR1_CMD2EN_Msk       (0x1UL << FMC_CSQCFGR1_CMD2EN_Pos)      /*!< 0x00000002 */
#define FMC_CSQCFGR1_CMD2EN           FMC_CSQCFGR1_CMD2EN_Msk                /*!< Command cycle 2 Enable */
#define FMC_CSQCFGR1_DMADEN_Pos       (2U)
#define FMC_CSQCFGR1_DMADEN_Msk       (0x1UL << FMC_CSQCFGR1_DMADEN_Pos)      /*!< 0x00000004 */
#define FMC_CSQCFGR1_DMADEN           FMC_CSQCFGR1_DMADEN_Msk                /*!< Command sequencer DMA request data enable */
#define FMC_CSQCFGR1_ACYNBR_Pos       (4U)
#define FMC_CSQCFGR1_ACYNBR_Msk       (0x7UL << FMC_CSQCFGR1_ACYNBR_Pos)      /*!< 0x00000070 */
#define FMC_CSQCFGR1_ACYNBR           FMC_CSQCFGR1_ACYNBR_Msk                /*!< Address Cycle number */
#define FMC_CSQCFGR1_CMD1_Pos         (8U)
#define FMC_CSQCFGR1_CMD1_Msk         (0xFFUL << FMC_CSQCFGR1_CMD1_Pos)       /*!< 0x0000FF00 */
#define FMC_CSQCFGR1_CMD1             FMC_CSQCFGR1_CMD1_Msk                  /*!< Command 1 sequencer */
#define FMC_CSQCFGR1_CMD2_Pos         (16U)
#define FMC_CSQCFGR1_CMD2_Msk         (0xFFUL << FMC_CSQCFGR1_CMD2_Pos)       /*!< 0x00FF0000 */
#define FMC_CSQCFGR1_CMD2             FMC_CSQCFGR1_CMD2_Msk                  /*!< Command 2 sequencer */
#define FMC_CSQCFGR1_CMD1T_Pos        (24U)
#define FMC_CSQCFGR1_CMD1T_Msk        (0x1UL << FMC_CSQCFGR1_CMD1T_Pos)       /*!< 0x01000000 */
#define FMC_CSQCFGR1_CMD1T            FMC_CSQCFGR1_CMD1T_Msk                 /*!< Command 1 Sequencer timings */
#define FMC_CSQCFGR1_CMD2T_Pos        (25U)
#define FMC_CSQCFGR1_CMD2T_Msk        (0x1UL << FMC_CSQCFGR1_CMD2T_Pos)       /*!< 0x02000000 */
#define FMC_CSQCFGR1_CMD2T            FMC_CSQCFGR1_CMD2T_Msk                 /*!< Command 2 Sequencer timings */

/***************  Bit definition for FMC_CSQCFGR2 register  ***************/
#define FMC_CSQCFGR2_SQSDTEN_Pos      (0U)
#define FMC_CSQCFGR2_SQSDTEN_Msk      (0x1UL << FMC_CSQCFGR2_SQSDTEN_Pos)     /*!< 0x00000001 */
#define FMC_CSQCFGR2_SQSDTEN          FMC_CSQCFGR2_SQSDTEN_Msk               /*!< Sequencer spare data transfer enable */
#define FMC_CSQCFGR2_RCMD2EN_Pos      (1U)
#define FMC_CSQCFGR2_RCMD2EN_Msk      (0x1UL << FMC_CSQCFGR2_RCMD2EN_Pos)     /*!< 0x00000002 */
#define FMC_CSQCFGR2_RCMD2EN          FMC_CSQCFGR2_RCMD2EN_Msk               /*!< Random Command 2 sequencer enable */
#define FMC_CSQCFGR2_DMASEN_Pos       (2U)
#define FMC_CSQCFGR2_DMASEN_Msk       (0x1UL << FMC_CSQCFGR2_DMASEN_Pos)      /*!< 0x00000004 */
#define FMC_CSQCFGR2_DMASEN           FMC_CSQCFGR2_DMASEN_Msk                /*!< Command sequencer DMA request decoding status enable */
#define FMC_CSQCFGR2_RCMD1_Pos        (8U)
#define FMC_CSQCFGR2_RCMD1_Msk        (0xFFUL << FMC_CSQCFGR2_RCMD1_Pos)      /*!< 0x0000FF00 */
#define FMC_CSQCFGR2_RCMD1            FMC_CSQCFGR2_RCMD1_Msk                 /*!< Random Command 1 sequencer */
#define FMC_CSQCFGR2_RCMD2_Pos        (16U)
#define FMC_CSQCFGR2_RCMD2_Msk        (0xFFUL << FMC_CSQCFGR2_RCMD2_Pos)      /*!< 0x00FF0000 */
#define FMC_CSQCFGR2_RCMD2            FMC_CSQCFGR2_RCMD2_Msk                 /*!< Random Command 2 sequencer */
#define FMC_CSQCFGR2_RCMD1T_Pos       (24U)
#define FMC_CSQCFGR2_RCMD1T_Msk       (0x1UL << FMC_CSQCFGR2_RCMD1T_Pos)      /*!< 0x01000000 */
#define FMC_CSQCFGR2_RCMD1T           FMC_CSQCFGR2_RCMD1T_Msk                /*!< Command 1 sequencer timings */
#define FMC_CSQCFGR2_RCMD2T_Pos       (25U)
#define FMC_CSQCFGR2_RCMD2T_Msk       (0x1UL << FMC_CSQCFGR2_RCMD2T_Pos)      /*!< 0x02000000 */
#define FMC_CSQCFGR2_RCMD2T           FMC_CSQCFGR2_RCMD2T_Msk                /*!< Command 1 sequencer timings */

/***************  Bit definition for FMC_CSQCFGR3 register  ***************/
#define FMC_CSQCFGR3_SNBR_Pos         (8U)
#define FMC_CSQCFGR3_SNBR_Msk         (0x3FUL << FMC_CSQCFGR3_SNBR_Pos)       /*!< 0x00003F00 */
#define FMC_CSQCFGR3_SNBR             FMC_CSQCFGR3_SNBR_Msk                  /*!< Number of sectors to be read/written */
#define FMC_CSQCFGR3_AC1T_Pos         (16U)
#define FMC_CSQCFGR3_AC1T_Msk         (0x1UL << FMC_CSQCFGR3_AC1T_Pos)        /*!< 0x00010000 */
#define FMC_CSQCFGR3_AC1T             FMC_CSQCFGR3_AC1T_Msk                  /*!< Address cycle 1 sequencer timings */
#define FMC_CSQCFGR3_AC2T_Pos         (17U)
#define FMC_CSQCFGR3_AC2T_Msk         (0x1UL << FMC_CSQCFGR3_AC2T_Pos)        /*!< 0x00020000 */
#define FMC_CSQCFGR3_AC2T             FMC_CSQCFGR3_AC2T_Msk                  /*!< Address cycle 2 sequencer timings */
#define FMC_CSQCFGR3_AC3T_Pos         (18U)
#define FMC_CSQCFGR3_AC3T_Msk         (0x1UL << FMC_CSQCFGR3_AC3T_Pos)        /*!< 0x00040000 */
#define FMC_CSQCFGR3_AC3T             FMC_CSQCFGR3_AC3T_Msk                  /*!< Address cycle 3 sequencer timings */
#define FMC_CSQCFGR3_AC4T_Pos         (19U)
#define FMC_CSQCFGR3_AC4T_Msk         (0x1UL << FMC_CSQCFGR3_AC4T_Pos)        /*!< 0x00080000 */
#define FMC_CSQCFGR3_AC4T             FMC_CSQCFGR3_AC4T_Msk                  /*!< Address cycle 4sequencer timings */
#define FMC_CSQCFGR3_AC5T_Pos         (20U)
#define FMC_CSQCFGR3_AC5T_Msk         (0x1UL << FMC_CSQCFGR3_AC5T_Pos)        /*!< 0x00100000 */
#define FMC_CSQCFGR3_AC5T             FMC_CSQCFGR3_AC5T_Msk                  /*!< Address cycle 5 sequencer timings */
#define FMC_CSQCFGR3_SDT_Pos          (21U)
#define FMC_CSQCFGR3_SDT_Msk          (0x1UL << FMC_CSQCFGR3_SDT_Pos)         /*!< 0x00200000 */
#define FMC_CSQCFGR3_SDT              FMC_CSQCFGR3_SDT_Msk                   /*!< Spare data transfer sequencer timings */
#define FMC_CSQCFGR3_RAC1T_Pos        (22U)
#define FMC_CSQCFGR3_RAC1T_Msk        (0x1UL << FMC_CSQCFGR3_RAC1T_Pos)       /*!< 0x00400000 */
#define FMC_CSQCFGR3_RAC1T            FMC_CSQCFGR3_RAC1T_Msk                 /*!< Random Address cycle 1 sequencer timings */
#define FMC_CSQCFGR3_RAC2T_Pos        (23U)
#define FMC_CSQCFGR3_RAC2T_Msk        (0x1UL << FMC_CSQCFGR3_RAC2T_Pos)       /*!< 0x00800000 */
#define FMC_CSQCFGR3_RAC2T            FMC_CSQCFGR3_RAC2T_Msk                 /*!< Random Address cycle 2 sequencer timings */

/****************  Bit definition for FMC_CSQAR1 register  ****************/
#define FMC_CSQAR1_ADDC1_Pos          (0U)
#define FMC_CSQAR1_ADDC1_Msk          (0xFFUL << FMC_CSQAR1_ADDC1_Pos)        /*!< 0x000000FF */
#define FMC_CSQAR1_ADDC1              FMC_CSQAR1_ADDC1_Msk                   /*!< Address Cycle 1 */
#define FMC_CSQAR1_ADDC2_Pos          (8U)
#define FMC_CSQAR1_ADDC2_Msk          (0xFFUL << FMC_CSQAR1_ADDC2_Pos)        /*!< 0x0000FF00 */
#define FMC_CSQAR1_ADDC2              FMC_CSQAR1_ADDC2_Msk                   /*!< Address Cycle 2 */
#define FMC_CSQAR1_ADDC3_Pos          (16U)
#define FMC_CSQAR1_ADDC3_Msk          (0xFFUL << FMC_CSQAR1_ADDC3_Pos)        /*!< 0x00FF0000 */
#define FMC_CSQAR1_ADDC3              FMC_CSQAR1_ADDC3_Msk                   /*!< Address Cycle 3 */
#define FMC_CSQAR1_ADDC4_Pos          (24U)
#define FMC_CSQAR1_ADDC4_Msk          (0xFFUL << FMC_CSQAR1_ADDC4_Pos)        /*!< 0xFF000000 */
#define FMC_CSQAR1_ADDC4              FMC_CSQAR1_ADDC4_Msk                   /*!< Address Cycle 4 */

/****************  Bit definition for FMC_CSQAR2 register  ****************/
#define FMC_CSQAR2_ADDC5_Pos          (0U)
#define FMC_CSQAR2_ADDC5_Msk          (0xFFUL << FMC_CSQAR2_ADDC5_Pos)        /*!< 0x000000FF */
#define FMC_CSQAR2_ADDC5              FMC_CSQAR2_ADDC5_Msk                   /*!< Address Cycle 5 */
#define FMC_CSQAR2_NANDCEN0_Pos       (10U)
#define FMC_CSQAR2_NANDCEN0_Msk       (0x1UL << FMC_CSQAR2_NANDCEN0_Pos)      /*!< 0x00000400 */
#define FMC_CSQAR2_NANDCEN0           FMC_CSQAR2_NANDCEN0_Msk                /*!< NAND Flash chip enable number */
#define FMC_CSQAR2_NANDCEN1_Pos       (11U)
#define FMC_CSQAR2_NANDCEN1_Msk       (0x1UL << FMC_CSQAR2_NANDCEN1_Pos)      /*!< 0x00000800 */
#define FMC_CSQAR2_NANDCEN1           FMC_CSQAR2_NANDCEN1_Msk                /*!< NAND Flash chip enable number */
#define FMC_CSQAR2_SAO_Pos            (16U)
#define FMC_CSQAR2_SAO_Msk            (0xFFFFUL << FMC_CSQAR2_SAO_Pos)        /*!< 0xFFFF0000 */
#define FMC_CSQAR2_SAO                FMC_CSQAR2_SAO_Msk                     /*!< Spare Area Address Offset. */

/****************  Bit definition for FMC_CSQIER register  ****************/
#define FMC_CSQIER_TCIE_Pos           (0U)
#define FMC_CSQIER_TCIE_Msk           (0x1UL << FMC_CSQIER_TCIE_Pos)          /*!< 0x00000001 */
#define FMC_CSQIER_TCIE               FMC_CSQIER_TCIE_Msk                    /*!< Transfer Complete Interrupt enable */
#define FMC_CSQIER_SCIE_Pos           (1U)
#define FMC_CSQIER_SCIE_Msk           (0x1UL << FMC_CSQIER_SCIE_Pos)          /*!< 0x00000002 */
#define FMC_CSQIER_SCIE               FMC_CSQIER_SCIE_Msk                    /*!< Sector Complete interrupt enable */
#define FMC_CSQIER_SEIE_Pos           (2U)
#define FMC_CSQIER_SEIE_Msk           (0x1UL << FMC_CSQIER_SEIE_Pos)          /*!< 0x00000004 */
#define FMC_CSQIER_SEIE               FMC_CSQIER_SEIE_Msk                    /*!< Sector Error interrupt enable */
#define FMC_CSQIER_SUEIE_Pos          (3U)
#define FMC_CSQIER_SUEIE_Msk          (0x1UL << FMC_CSQIER_SUEIE_Pos)         /*!< 0x00000008 */
#define FMC_CSQIER_SUEIE              FMC_CSQIER_SUEIE_Msk                   /*!< Sector Uncorrectable Error interrupt enable */
#define FMC_CSQIER_CMDTCIE_Pos        (4U)
#define FMC_CSQIER_CMDTCIE_Msk        (0x1UL << FMC_CSQIER_CMDTCIE_Pos)       /*!< 0x00000010 */
#define FMC_CSQIER_CMDTCIE            FMC_CSQIER_CMDTCIE_Msk                 /*!< Command Transfer Complete interrupt enable */

/****************  Bit definition for FMC_CSQISR register  ****************/
#define FMC_CSQISR_TCF_Pos            (0U)
#define FMC_CSQISR_TCF_Msk            (0x1UL << FMC_CSQISR_TCF_Pos)           /*!< 0x00000001 */
#define FMC_CSQISR_TCF                FMC_CSQISR_TCF_Msk                     /*!< Transfer Complete flag */
#define FMC_CSQISR_SCF_Pos            (1U)
#define FMC_CSQISR_SCF_Msk            (0x1UL << FMC_CSQISR_SCF_Pos)           /*!< 0x00000002 */
#define FMC_CSQISR_SCF                FMC_CSQISR_SCF_Msk                     /*!< Sector Complete flag */
#define FMC_CSQISR_SEF_Pos            (2U)
#define FMC_CSQISR_SEF_Msk            (0x1UL << FMC_CSQISR_SEF_Pos)           /*!< 0x00000004 */
#define FMC_CSQISR_SEF                FMC_CSQISR_SEF_Msk                     /*!< Sector Error flag */
#define FMC_CSQISR_SUEF_Pos           (3U)
#define FMC_CSQISR_SUEF_Msk           (0x1UL << FMC_CSQISR_SUEF_Pos)          /*!< 0x00000008 */
#define FMC_CSQISR_SUEF               FMC_CSQISR_SUEF_Msk                    /*!< Sector Uncorrectable Error flag */
#define FMC_CSQISR_CMDTCF_Pos         (4U)
#define FMC_CSQISR_CMDTCF_Msk         (0x1UL << FMC_CSQISR_CMDTCF_Pos)        /*!< 0x00000010 */
#define FMC_CSQISR_CMDTCF             FMC_CSQISR_CMDTCF_Msk                  /*!< Command Transfer Complete flag */

/****************  Bit definition for FMC_CSQICR register  ****************/
#define FMC_CSQICR_CTCF_Pos           (0U)
#define FMC_CSQICR_CTCF_Msk           (0x1UL << FMC_CSQICR_CTCF_Pos)          /*!< 0x00000001 */
#define FMC_CSQICR_CTCF               FMC_CSQICR_CTCF_Msk                    /*!< Clear Transfer Complete flag */
#define FMC_CSQICR_CSCF_Pos           (1U)
#define FMC_CSQICR_CSCF_Msk           (0x1UL << FMC_CSQICR_CSCF_Pos)          /*!< 0x00000002 */
#define FMC_CSQICR_CSCF               FMC_CSQICR_CSCF_Msk                    /*!< Clear Sector Complete flag */
#define FMC_CSQICR_CSEF_Pos           (2U)
#define FMC_CSQICR_CSEF_Msk           (0x1UL << FMC_CSQICR_CSEF_Pos)          /*!< 0x00000004 */
#define FMC_CSQICR_CSEF               FMC_CSQICR_CSEF_Msk                    /*!< Clear Sector Error flag */
#define FMC_CSQICR_CSUEF_Pos          (3U)
#define FMC_CSQICR_CSUEF_Msk          (0x1UL << FMC_CSQICR_CSUEF_Pos)         /*!< 0x00000008 */
#define FMC_CSQICR_CSUEF              FMC_CSQICR_CSUEF_Msk                   /*!< Clear Sector uncorrectable Error flag */
#define FMC_CSQICR_CCMDTCF_Pos        (4U)
#define FMC_CSQICR_CCMDTCF_Msk        (0x1UL << FMC_CSQICR_CCMDTCF_Pos)       /*!< 0x00000010 */
#define FMC_CSQICR_CCMDTCF            FMC_CSQICR_CCMDTCF_Msk                 /*!< Clear Command Transfer Complete flag */

/***************  Bit definition for FMC_CSQEMSR register  ****************/
#define FMC_CSQEMSR_SEM_Pos           (0U)
#define FMC_CSQEMSR_SEM_Msk           (0xFFFFUL << FMC_CSQEMSR_SEM_Pos)       /*!< 0x0000FFFF */
#define FMC_CSQEMSR_SEM               FMC_CSQEMSR_SEM_Msk                    /*!< Sector Error mapping */

/****************  Bit definition for FMC_BCHIER register  ****************/
#define FMC_BCHIER_DUEIE_Pos          (0U)
#define FMC_BCHIER_DUEIE_Msk          (0x1UL << FMC_BCHIER_DUEIE_Pos)         /*!< 0x00000001 */
#define FMC_BCHIER_DUEIE              FMC_BCHIER_DUEIE_Msk                   /*!< Decoder Uncorrectable Errors Interrupt enable */
#define FMC_BCHIER_DERIE_Pos          (1U)
#define FMC_BCHIER_DERIE_Msk          (0x1UL << FMC_BCHIER_DERIE_Pos)         /*!< 0x00000002 */
#define FMC_BCHIER_DERIE              FMC_BCHIER_DERIE_Msk                   /*!< Decoder Error Ready Interrupt enable */
#define FMC_BCHIER_DEFIE_Pos          (2U)
#define FMC_BCHIER_DEFIE_Msk          (0x1UL << FMC_BCHIER_DEFIE_Pos)         /*!< 0x00000004 */
#define FMC_BCHIER_DEFIE              FMC_BCHIER_DEFIE_Msk                   /*!< Decoder Error Found Interrupt enable */
#define FMC_BCHIER_DSRIE_Pos          (3U)
#define FMC_BCHIER_DSRIE_Msk          (0x1UL << FMC_BCHIER_DSRIE_Pos)         /*!< 0x00000008 */
#define FMC_BCHIER_DSRIE              FMC_BCHIER_DSRIE_Msk                   /*!< Decoder Syndrome Ready Interrupt enable */
#define FMC_BCHIER_EPBRIE_Pos         (4U)
#define FMC_BCHIER_EPBRIE_Msk         (0x1UL << FMC_BCHIER_EPBRIE_Pos)        /*!< 0x00000010 */
#define FMC_BCHIER_EPBRIE             FMC_BCHIER_EPBRIE_Msk                  /*!< Decoder Parity Bits Ready Interrupt enable */

/****************  Bit definition for FMC_BCHISR register  ****************/
#define FMC_BCHISR_DUEF_Pos           (0U)
#define FMC_BCHISR_DUEF_Msk           (0x1UL << FMC_BCHISR_DUEF_Pos)          /*!< 0x00000001 */
#define FMC_BCHISR_DUEF               FMC_BCHISR_DUEF_Msk                    /*!< Decoder Uncorrectable Errors flag */
#define FMC_BCHISR_DERF_Pos           (1U)
#define FMC_BCHISR_DERF_Msk           (0x1UL << FMC_BCHISR_DERF_Pos)          /*!< 0x00000002 */
#define FMC_BCHISR_DERF               FMC_BCHISR_DERF_Msk                    /*!< Decoder Error Ready flag */
#define FMC_BCHISR_DEFF_Pos           (2U)
#define FMC_BCHISR_DEFF_Msk           (0x1UL << FMC_BCHISR_DEFF_Pos)          /*!< 0x00000004 */
#define FMC_BCHISR_DEFF               FMC_BCHISR_DEFF_Msk                    /*!< Decoder Error Found flag */
#define FMC_BCHISR_DSRF_Pos           (3U)
#define FMC_BCHISR_DSRF_Msk           (0x1UL << FMC_BCHISR_DSRF_Pos)          /*!< 0x00000008 */
#define FMC_BCHISR_DSRF               FMC_BCHISR_DSRF_Msk                    /*!< Decoder Syndrome Ready flag */
#define FMC_BCHISR_EPBRF_Pos          (4U)
#define FMC_BCHISR_EPBRF_Msk          (0x1UL << FMC_BCHISR_EPBRF_Pos)         /*!< 0x00000010 */
#define FMC_BCHISR_EPBRF              FMC_BCHISR_EPBRF_Msk                   /*!< Encoder Parity Bits Ready flag */

/****************  Bit definition for FMC_BCHICR register  ****************/
#define FMC_BCHICR_CDUEF_Pos          (0U)
#define FMC_BCHICR_CDUEF_Msk          (0x1UL << FMC_BCHICR_CDUEF_Pos)         /*!< 0x00000001 */
#define FMC_BCHICR_CDUEF              FMC_BCHICR_CDUEF_Msk                   /*!< Clear Decoder Uncorrectable Error flag */
#define FMC_BCHICR_CDERF_Pos          (1U)
#define FMC_BCHICR_CDERF_Msk          (0x1UL << FMC_BCHICR_CDERF_Pos)         /*!< 0x00000002 */
#define FMC_BCHICR_CDERF              FMC_BCHICR_CDERF_Msk                   /*!< Clear Decoder Error ready flag */
#define FMC_BCHICR_CDEFF_Pos          (2U)
#define FMC_BCHICR_CDEFF_Msk          (0x1UL << FMC_BCHICR_CDEFF_Pos)         /*!< 0x00000004 */
#define FMC_BCHICR_CDEFF              FMC_BCHICR_CDEFF_Msk                   /*!< Clear Decoder Error Found flag */
#define FMC_BCHICR_CDSRF_Pos          (3U)
#define FMC_BCHICR_CDSRF_Msk          (0x1UL << FMC_BCHICR_CDSRF_Pos)         /*!< 0x00000008 */
#define FMC_BCHICR_CDSRF              FMC_BCHICR_CDSRF_Msk                   /*!< Clear Decoder Syndrome Ready flag */
#define FMC_BCHICR_CEPBRF_Pos         (4U)
#define FMC_BCHICR_CEPBRF_Msk         (0x1UL << FMC_BCHICR_CEPBRF_Pos)        /*!< 0x00000010 */
#define FMC_BCHICR_CEPBRF             FMC_BCHICR_CEPBRF_Msk                  /*!< Clear Encoder Parity Bits Ready flag */

/***************  Bit definition for FMC_BCHPBR1 register  ****************/
#define FMC_BCHPBR1_BCHPB_Pos         (0U)
#define FMC_BCHPBR1_BCHPB_Msk         (0xFFFFFFFFUL << FMC_BCHPBR1_BCHPB_Pos) /*!< 0xFFFFFFFF */
#define FMC_BCHPBR1_BCHPB             FMC_BCHPBR1_BCHPB_Msk                  /*!< BCH parity bits */

/***************  Bit definition for FMC_BCHPBR2 register  ****************/
#define FMC_BCHPBR2_BCHPB_Pos         (0U)
#define FMC_BCHPBR2_BCHPB_Msk         (0xFFFFFFFFUL << FMC_BCHPBR2_BCHPB_Pos) /*!< 0xFFFFFFFF */
#define FMC_BCHPBR2_BCHPB             FMC_BCHPBR2_BCHPB_Msk                  /*!< BCH parity bits */

/***************  Bit definition for FMC_BCHPBR3 register  ****************/
#define FMC_BCHPBR3_BCHPB_Pos         (0U)
#define FMC_BCHPBR3_BCHPB_Msk         (0xFFFFFFFFUL << FMC_BCHPBR3_BCHPB_Pos) /*!< 0xFFFFFFFF */
#define FMC_BCHPBR3_BCHPB             FMC_BCHPBR3_BCHPB_Msk                  /*!< BCH parity bits */

/***************  Bit definition for FMC_BCHPBR4 register  ****************/
#define FMC_BCHPBR4_BCHPB_Pos         (0U)
#define FMC_BCHPBR4_BCHPB_Msk         (0xFFUL << FMC_BCHPBR4_BCHPB_Pos)       /*!< 0x000000FF */
#define FMC_BCHPBR4_BCHPB             FMC_BCHPBR4_BCHPB_Msk                  /*!< BCH parity bits */

/***************  Bit definition for FMC_BCHDSR0 register  ****************/
#define FMC_BCHDSR0_DUE_Pos           (0U)
#define FMC_BCHDSR0_DUE_Msk           (0x1UL << FMC_BCHDSR0_DUE_Pos)          /*!< 0x00000001 */
#define FMC_BCHDSR0_DUE               FMC_BCHDSR0_DUE_Msk                    /*!< Decoder uncorrectable error */
#define FMC_BCHDSR0_DEF_Pos           (1U)
#define FMC_BCHDSR0_DEF_Msk           (0x1UL << FMC_BCHDSR0_DEF_Pos)          /*!< 0x00000002 */
#define FMC_BCHDSR0_DEF               FMC_BCHDSR0_DEF_Msk                    /*!< Decoder error found */
#define FMC_BCHDSR0_DEN_Pos           (4U)
#define FMC_BCHDSR0_DEN_Msk           (0xFUL << FMC_BCHDSR0_DEN_Pos)          /*!< 0x000000F0 */
#define FMC_BCHDSR0_DEN               FMC_BCHDSR0_DEN_Msk                    /*!< Decoder error number */

/***************  Bit definition for FMC_BCHDSR1 register  ****************/
#define FMC_BCHDSR1_EBP1_Pos          (0U)
#define FMC_BCHDSR1_EBP1_Msk          (0x1FFFUL << FMC_BCHDSR1_EBP1_Pos)      /*!< 0x00001FFF */
#define FMC_BCHDSR1_EBP1              FMC_BCHDSR1_EBP1_Msk                   /*!< Error bit position for error number 1 */
#define FMC_BCHDSR1_EBP2_Pos          (16U)
#define FMC_BCHDSR1_EBP2_Msk          (0x1FFFUL << FMC_BCHDSR1_EBP2_Pos)      /*!< 0x1FFF0000 */
#define FMC_BCHDSR1_EBP2              FMC_BCHDSR1_EBP2_Msk                   /*!< Error bit position for error number 2 */

/***************  Bit definition for FMC_BCHDSR2 register  ****************/
#define FMC_BCHDSR2_EBP3_Pos          (0U)
#define FMC_BCHDSR2_EBP3_Msk          (0x1FFFUL << FMC_BCHDSR2_EBP3_Pos)      /*!< 0x00001FFF */
#define FMC_BCHDSR2_EBP3              FMC_BCHDSR2_EBP3_Msk                   /*!< Error bit position for error number 3 */
#define FMC_BCHDSR2_EBP4_Pos          (16U)
#define FMC_BCHDSR2_EBP4_Msk          (0x1FFFUL << FMC_BCHDSR2_EBP4_Pos)      /*!< 0x1FFF0000 */
#define FMC_BCHDSR2_EBP4              FMC_BCHDSR2_EBP4_Msk                   /*!< Error bit position for error number 4 */

/***************  Bit definition for FMC_BCHDSR3 register  ****************/
#define FMC_BCHDSR3_EBP5_Pos          (0U)
#define FMC_BCHDSR3_EBP5_Msk          (0x1FFFUL << FMC_BCHDSR3_EBP5_Pos)      /*!< 0x00001FFF */
#define FMC_BCHDSR3_EBP5              FMC_BCHDSR3_EBP5_Msk                   /*!< Error bit position for error number 5 */
#define FMC_BCHDSR3_EBP6_Pos          (16U)
#define FMC_BCHDSR3_EBP6_Msk          (0x1FFFUL << FMC_BCHDSR3_EBP6_Pos)      /*!< 0x1FFF0000 */
#define FMC_BCHDSR3_EBP6              FMC_BCHDSR3_EBP6_Msk                   /*!< Error bit position for error number 6 */

/***************  Bit definition for FMC_BCHDSR4 register  ****************/
#define FMC_BCHDSR4_EBP7_Pos          (0U)
#define FMC_BCHDSR4_EBP7_Msk          (0x1FFFUL << FMC_BCHDSR4_EBP7_Pos)      /*!< 0x00001FFF */
#define FMC_BCHDSR4_EBP7              FMC_BCHDSR4_EBP7_Msk                   /*!< Error bit position for error number 7 */
#define FMC_BCHDSR4_EBP8_Pos          (16U)
#define FMC_BCHDSR4_EBP8_Msk          (0x1FFFUL << FMC_BCHDSR4_EBP8_Pos)      /*!< 0x1FFF0000 */
#define FMC_BCHDSR4_EBP8              FMC_BCHDSR4_EBP8_Msk                   /*!< Error bit position for error number 8 */

/***************  Bit definition for FMC_SECCFGR register  ****************/
#define FMC_SECCFGR_SEC0_Pos          (0U)
#define FMC_SECCFGR_SEC0_Msk          (0x1UL << FMC_SECCFGR_SEC0_Pos)         /*!< 0x00000001 */
#define FMC_SECCFGR_SEC0              FMC_SECCFGR_SEC0_Msk                   /*!< Security state for FMC_CFGR common control register */
#define FMC_SECCFGR_SEC1_Pos          (1U)
#define FMC_SECCFGR_SEC1_Msk          (0x1UL << FMC_SECCFGR_SEC1_Pos)         /*!< 0x00000002 */
#define FMC_SECCFGR_SEC1              FMC_SECCFGR_SEC1_Msk                   /*!< Security state for NOR/PSRAM controller for Chip Select NE1 */
#define FMC_SECCFGR_SEC2_Pos          (2U)
#define FMC_SECCFGR_SEC2_Msk          (0x1UL << FMC_SECCFGR_SEC2_Pos)         /*!< 0x00000004 */
#define FMC_SECCFGR_SEC2              FMC_SECCFGR_SEC2_Msk                   /*!< Security state for NOR/PSRAM controller for Chip Select NE2 */
#define FMC_SECCFGR_SEC3_Pos          (3U)
#define FMC_SECCFGR_SEC3_Msk          (0x1UL << FMC_SECCFGR_SEC3_Pos)         /*!< 0x00000008 */
#define FMC_SECCFGR_SEC3              FMC_SECCFGR_SEC3_Msk                   /*!< Security state for NOR/PSRAM controller for Chip Select NE3 */
#define FMC_SECCFGR_SEC4_Pos          (4U)
#define FMC_SECCFGR_SEC4_Msk          (0x1UL << FMC_SECCFGR_SEC4_Pos)         /*!< 0x00000010 */
#define FMC_SECCFGR_SEC4              FMC_SECCFGR_SEC4_Msk                   /*!< Security state for NOR/PSRAM controller for Chip Select NE4 */
#define FMC_SECCFGR_SEC5_Pos          (5U)
#define FMC_SECCFGR_SEC5_Msk          (0x1UL << FMC_SECCFGR_SEC5_Pos)         /*!< 0x00000020 */
#define FMC_SECCFGR_SEC5              FMC_SECCFGR_SEC5_Msk                   /*!< Security configuration for NAND controller */

/***************  Bit definition for FMC_PRIVCFGR register  ***************/
#define FMC_PRIVCFGR_PRIV0_Pos        (0U)
#define FMC_PRIVCFGR_PRIV0_Msk        (0x1UL << FMC_PRIVCFGR_PRIV0_Pos)       /*!< 0x00000001 */
#define FMC_PRIVCFGR_PRIV0            FMC_PRIVCFGR_PRIV0_Msk                 /*!< Privileged state for common control: FMC_CFGR */
#define FMC_PRIVCFGR_PRIV1_Pos        (1U)
#define FMC_PRIVCFGR_PRIV1_Msk        (0x1UL << FMC_PRIVCFGR_PRIV1_Pos)       /*!< 0x00000002 */
#define FMC_PRIVCFGR_PRIV1            FMC_PRIVCFGR_PRIV1_Msk                 /*!< Privileged state for NOR/PSRAM controller for Chip Select NE1 */
#define FMC_PRIVCFGR_PRIV2_Pos        (2U)
#define FMC_PRIVCFGR_PRIV2_Msk        (0x1UL << FMC_PRIVCFGR_PRIV2_Pos)       /*!< 0x00000004 */
#define FMC_PRIVCFGR_PRIV2            FMC_PRIVCFGR_PRIV2_Msk                 /*!< Privileged state for NOR/PSRAM controller for Chip Select NE2 */
#define FMC_PRIVCFGR_PRIV3_Pos        (3U)
#define FMC_PRIVCFGR_PRIV3_Msk        (0x1UL << FMC_PRIVCFGR_PRIV3_Pos)       /*!< 0x00000008 */
#define FMC_PRIVCFGR_PRIV3            FMC_PRIVCFGR_PRIV3_Msk                 /*!< Privileged state for NOR/PSRAM controller for Chip Select NE3 */
#define FMC_PRIVCFGR_PRIV4_Pos        (4U)
#define FMC_PRIVCFGR_PRIV4_Msk        (0x1UL << FMC_PRIVCFGR_PRIV4_Pos)       /*!< 0x00000010 */
#define FMC_PRIVCFGR_PRIV4            FMC_PRIVCFGR_PRIV4_Msk                 /*!< Privileged state for NOR/PSRAM controller for Chip Select NE4 */
#define FMC_PRIVCFGR_PRIV5_Pos        (5U)
#define FMC_PRIVCFGR_PRIV5_Msk        (0x1UL << FMC_PRIVCFGR_PRIV5_Pos)       /*!< 0x00000020 */
#define FMC_PRIVCFGR_PRIV5            FMC_PRIVCFGR_PRIV5_Msk                 /*!< Privileged state for NAND controller */

/***************  Bit definition for FMC_RCFGLOCK register  ***************/
#define FMC_RCFGLOCK_LOCK0_Pos        (0U)
#define FMC_RCFGLOCK_LOCK0_Msk        (0x1UL << FMC_RCFGLOCK_LOCK0_Pos)       /*!< 0x00000001 */
#define FMC_RCFGLOCK_LOCK0            FMC_RCFGLOCK_LOCK0_Msk                 /*!< Lock FMC_CFGR until a global FMC reset */
#define FMC_RCFGLOCK_LOCK1_Pos        (1U)
#define FMC_RCFGLOCK_LOCK1_Msk        (0x1UL << FMC_RCFGLOCK_LOCK1_Pos)       /*!< 0x00000002 */
#define FMC_RCFGLOCK_LOCK1            FMC_RCFGLOCK_LOCK1_Msk                 /*!< Lock NOR/PSRAM controller for Chip Select NE1 until a global FMC reset */
#define FMC_RCFGLOCK_LOCK2_Pos        (2U)
#define FMC_RCFGLOCK_LOCK2_Msk        (0x1UL << FMC_RCFGLOCK_LOCK2_Pos)       /*!< 0x00000004 */
#define FMC_RCFGLOCK_LOCK2            FMC_RCFGLOCK_LOCK2_Msk                 /*!< Lock NOR/PSRAM controller for Chip Select NE2 until a global FMC reset */
#define FMC_RCFGLOCK_LOCK3_Pos        (3U)
#define FMC_RCFGLOCK_LOCK3_Msk        (0x1UL << FMC_RCFGLOCK_LOCK3_Pos)       /*!< 0x00000008 */
#define FMC_RCFGLOCK_LOCK3            FMC_RCFGLOCK_LOCK3_Msk                 /*!< Lock NOR/PSRAM controller for Chip Select NE3 until a global FMC reset */
#define FMC_RCFGLOCK_LOCK4_Pos        (4U)
#define FMC_RCFGLOCK_LOCK4_Msk        (0x1UL << FMC_RCFGLOCK_LOCK4_Pos)       /*!< 0x00000010 */
#define FMC_RCFGLOCK_LOCK4            FMC_RCFGLOCK_LOCK4_Msk                 /*!< Lock NOR/PSRAM controller for Chip Select NE4 until a global FMC reset */
#define FMC_RCFGLOCK_LOCK5_Pos        (5U)
#define FMC_RCFGLOCK_LOCK5_Msk        (0x1UL << FMC_RCFGLOCK_LOCK5_Pos)       /*!< 0x00000020 */
#define FMC_RCFGLOCK_LOCK5            FMC_RCFGLOCK_LOCK5_Msk                 /*!< Lock NAND controller until a global FMC reset */

/*****************  Bit definition for FMC_CIDCFGR0 register  *****************/
#define FMC_CIDCFGR0_CFEN_Pos         (0U)
#define FMC_CIDCFGR0_CFEN_Msk         (0x1UL << FMC_CIDCFGR0_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR0_CFEN             FMC_CIDCFGR0_CFEN_Msk                  /*!< CID filtering enable for resource x */
#define FMC_CIDCFGR0_SEMEN_Pos        (1U)
#define FMC_CIDCFGR0_SEMEN_Msk        (0x1UL << FMC_CIDCFGR0_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR0_SEMEN            FMC_CIDCFGR0_SEMEN_Msk                 /*!< Semaphore enable for resource x */
#define FMC_CIDCFGR0_SCID_Pos         (4U)
#define FMC_CIDCFGR0_SCID_Msk         (0x7UL << FMC_CIDCFGR0_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR0_SCID             FMC_CIDCFGR0_SCID_Msk                  /*!< Static CID for resource x */
#define FMC_CIDCFGR0_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR0_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR0_SEMWLC0          FMC_CIDCFGR0_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR0_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR0_SEMWLC1          FMC_CIDCFGR0_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR0_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR0_SEMWLC2          FMC_CIDCFGR0_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR0_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR0_SEMWLC3          FMC_CIDCFGR0_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR0_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR0_SEMWLC4          FMC_CIDCFGR0_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR0_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR0_SEMWLC5          FMC_CIDCFGR0_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR0_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR0_SEMWLC6          FMC_CIDCFGR0_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR0_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR0_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR0_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR0_SEMWLC7          FMC_CIDCFGR0_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource x in semaphore mode */

/******************  Bit definition for FMC_SEMCR0 register  ******************/
#define FMC_SEMCR0_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR0_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR0_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR0_SEM_MUTEX          FMC_SEMCR0_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of Resource x in semaphore mode */
#define FMC_SEMCR0_SEMCID_Pos         (4U)
#define FMC_SEMCR0_SEMCID_Msk         (0x7UL << FMC_SEMCR0_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR0_SEMCID             FMC_SEMCR0_SEMCID_Msk                  /*!< Current CID allocated to resource x in semaphore mode */

/*****************  Bit definition for FMC_CIDCFGR1 register  *****************/
#define FMC_CIDCFGR1_CFEN_Pos         (0U)
#define FMC_CIDCFGR1_CFEN_Msk         (0x1UL << FMC_CIDCFGR1_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR1_CFEN             FMC_CIDCFGR1_CFEN_Msk                  /*!< CID filtering enable for resource x */
#define FMC_CIDCFGR1_SEMEN_Pos        (1U)
#define FMC_CIDCFGR1_SEMEN_Msk        (0x1UL << FMC_CIDCFGR1_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR1_SEMEN            FMC_CIDCFGR1_SEMEN_Msk                 /*!< Semaphore enable for resource x */
#define FMC_CIDCFGR1_SCID_Pos         (4U)
#define FMC_CIDCFGR1_SCID_Msk         (0x7UL << FMC_CIDCFGR1_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR1_SCID             FMC_CIDCFGR1_SCID_Msk                  /*!< Static CID for resource x */
#define FMC_CIDCFGR1_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR1_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR1_SEMWLC0          FMC_CIDCFGR1_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR1_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR1_SEMWLC1          FMC_CIDCFGR1_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR1_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR1_SEMWLC2          FMC_CIDCFGR1_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR1_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR1_SEMWLC3          FMC_CIDCFGR1_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR1_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR1_SEMWLC4          FMC_CIDCFGR1_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR1_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR1_SEMWLC5          FMC_CIDCFGR1_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR1_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR1_SEMWLC6          FMC_CIDCFGR1_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR1_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR1_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR1_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR1_SEMWLC7          FMC_CIDCFGR1_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource x in semaphore mode */

/******************  Bit definition for FMC_SEMCR1 register  ******************/
#define FMC_SEMCR1_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR1_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR1_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR1_SEM_MUTEX          FMC_SEMCR1_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of Resource x in semaphore mode */
#define FMC_SEMCR1_SEMCID_Pos         (4U)
#define FMC_SEMCR1_SEMCID_Msk         (0x7UL << FMC_SEMCR1_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR1_SEMCID             FMC_SEMCR1_SEMCID_Msk                  /*!< Current CID allocated to resource x in semaphore mode */

/*****************  Bit definition for FMC_CIDCFGR2 register  *****************/
#define FMC_CIDCFGR2_CFEN_Pos         (0U)
#define FMC_CIDCFGR2_CFEN_Msk         (0x1UL << FMC_CIDCFGR2_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR2_CFEN             FMC_CIDCFGR2_CFEN_Msk                  /*!< CID filtering enable for resource x */
#define FMC_CIDCFGR2_SEMEN_Pos        (1U)
#define FMC_CIDCFGR2_SEMEN_Msk        (0x1UL << FMC_CIDCFGR2_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR2_SEMEN            FMC_CIDCFGR2_SEMEN_Msk                 /*!< Semaphore enable for resource x */
#define FMC_CIDCFGR2_SCID_Pos         (4U)
#define FMC_CIDCFGR2_SCID_Msk         (0x7UL << FMC_CIDCFGR2_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR2_SCID             FMC_CIDCFGR2_SCID_Msk                  /*!< Static CID for resource x */
#define FMC_CIDCFGR2_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR2_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR2_SEMWLC0          FMC_CIDCFGR2_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR2_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR2_SEMWLC1          FMC_CIDCFGR2_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR2_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR2_SEMWLC2          FMC_CIDCFGR2_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR2_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR2_SEMWLC3          FMC_CIDCFGR2_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR2_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR2_SEMWLC4          FMC_CIDCFGR2_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR2_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR2_SEMWLC5          FMC_CIDCFGR2_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR2_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR2_SEMWLC6          FMC_CIDCFGR2_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR2_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR2_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR2_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR2_SEMWLC7          FMC_CIDCFGR2_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource x in semaphore mode */

/******************  Bit definition for FMC_SEMCR2 register  ******************/
#define FMC_SEMCR2_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR2_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR2_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR2_SEM_MUTEX          FMC_SEMCR2_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of Resource x in semaphore mode */
#define FMC_SEMCR2_SEMCID_Pos         (4U)
#define FMC_SEMCR2_SEMCID_Msk         (0x7UL << FMC_SEMCR2_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR2_SEMCID             FMC_SEMCR2_SEMCID_Msk                  /*!< Current CID allocated to resource x in semaphore mode */

/*****************  Bit definition for FMC_CIDCFGR3 register  *****************/
#define FMC_CIDCFGR3_CFEN_Pos         (0U)
#define FMC_CIDCFGR3_CFEN_Msk         (0x1UL << FMC_CIDCFGR3_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR3_CFEN             FMC_CIDCFGR3_CFEN_Msk                  /*!< CID filtering enable for resource x */
#define FMC_CIDCFGR3_SEMEN_Pos        (1U)
#define FMC_CIDCFGR3_SEMEN_Msk        (0x1UL << FMC_CIDCFGR3_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR3_SEMEN            FMC_CIDCFGR3_SEMEN_Msk                 /*!< Semaphore enable for resource x */
#define FMC_CIDCFGR3_SCID_Pos         (4U)
#define FMC_CIDCFGR3_SCID_Msk         (0x7UL << FMC_CIDCFGR3_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR3_SCID             FMC_CIDCFGR3_SCID_Msk                  /*!< Static CID for resource x */
#define FMC_CIDCFGR3_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR3_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR3_SEMWLC0          FMC_CIDCFGR3_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR3_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR3_SEMWLC1          FMC_CIDCFGR3_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR3_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR3_SEMWLC2          FMC_CIDCFGR3_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR3_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR3_SEMWLC3          FMC_CIDCFGR3_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR3_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR3_SEMWLC4          FMC_CIDCFGR3_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR3_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR3_SEMWLC5          FMC_CIDCFGR3_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR3_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR3_SEMWLC6          FMC_CIDCFGR3_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR3_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR3_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR3_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR3_SEMWLC7          FMC_CIDCFGR3_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource x in semaphore mode */

/******************  Bit definition for FMC_SEMCR3 register  ******************/
#define FMC_SEMCR3_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR3_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR3_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR3_SEM_MUTEX          FMC_SEMCR3_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of Resource x in semaphore mode */
#define FMC_SEMCR3_SEMCID_Pos         (4U)
#define FMC_SEMCR3_SEMCID_Msk         (0x7UL << FMC_SEMCR3_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR3_SEMCID             FMC_SEMCR3_SEMCID_Msk                  /*!< Current CID allocated to resource x in semaphore mode */

/*****************  Bit definition for FMC_CIDCFGR4 register  *****************/
#define FMC_CIDCFGR4_CFEN_Pos         (0U)
#define FMC_CIDCFGR4_CFEN_Msk         (0x1UL << FMC_CIDCFGR4_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR4_CFEN             FMC_CIDCFGR4_CFEN_Msk                  /*!< CID filtering enable for resource x */
#define FMC_CIDCFGR4_SEMEN_Pos        (1U)
#define FMC_CIDCFGR4_SEMEN_Msk        (0x1UL << FMC_CIDCFGR4_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR4_SEMEN            FMC_CIDCFGR4_SEMEN_Msk                 /*!< Semaphore enable for resource x */
#define FMC_CIDCFGR4_SCID_Pos         (4U)
#define FMC_CIDCFGR4_SCID_Msk         (0x7UL << FMC_CIDCFGR4_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR4_SCID             FMC_CIDCFGR4_SCID_Msk                  /*!< Static CID for resource x */
#define FMC_CIDCFGR4_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR4_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR4_SEMWLC0          FMC_CIDCFGR4_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR4_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR4_SEMWLC1          FMC_CIDCFGR4_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR4_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR4_SEMWLC2          FMC_CIDCFGR4_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR4_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR4_SEMWLC3          FMC_CIDCFGR4_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR4_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR4_SEMWLC4          FMC_CIDCFGR4_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR4_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR4_SEMWLC5          FMC_CIDCFGR4_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR4_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR4_SEMWLC6          FMC_CIDCFGR4_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource x in semaphore mode */
#define FMC_CIDCFGR4_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR4_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR4_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR4_SEMWLC7          FMC_CIDCFGR4_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource x in semaphore mode */

/******************  Bit definition for FMC_SEMCR4 register  ******************/
#define FMC_SEMCR4_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR4_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR4_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR4_SEM_MUTEX          FMC_SEMCR4_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of Resource x in semaphore mode */
#define FMC_SEMCR4_SEMCID_Pos         (4U)
#define FMC_SEMCR4_SEMCID_Msk         (0x7UL << FMC_SEMCR4_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR4_SEMCID             FMC_SEMCR4_SEMCID_Msk                  /*!< Current CID allocated to resource x in semaphore mode */

/*****************  Bit definition for FMC_CIDCFGR5 register  *****************/
#define FMC_CIDCFGR5_CFEN_Pos         (0U)
#define FMC_CIDCFGR5_CFEN_Msk         (0x1UL << FMC_CIDCFGR5_CFEN_Pos)        /*!< 0x00000001 */
#define FMC_CIDCFGR5_CFEN             FMC_CIDCFGR5_CFEN_Msk                  /*!< CID filtering enable for resource 5 */
#define FMC_CIDCFGR5_SEMEN_Pos        (1U)
#define FMC_CIDCFGR5_SEMEN_Msk        (0x1UL << FMC_CIDCFGR5_SEMEN_Pos)       /*!< 0x00000002 */
#define FMC_CIDCFGR5_SEMEN            FMC_CIDCFGR5_SEMEN_Msk                 /*!< Semaphore enable for resource 5 */
#define FMC_CIDCFGR5_SCID_Pos         (4U)
#define FMC_CIDCFGR5_SCID_Msk         (0x7UL << FMC_CIDCFGR5_SCID_Pos)        /*!< 0x00000070 */
#define FMC_CIDCFGR5_SCID             FMC_CIDCFGR5_SCID_Msk                  /*!< Static CID for resource 5 */
#define FMC_CIDCFGR5_PRDEN_Pos        (14U)
#define FMC_CIDCFGR5_PRDEN_Msk        (0x1UL << FMC_CIDCFGR5_PRDEN_Pos)       /*!< 0x00004000 */
#define FMC_CIDCFGR5_PRDEN            FMC_CIDCFGR5_PRDEN_Msk                 /*!< Public read enable */
#define FMC_CIDCFGR5_SEMWLC0_Pos      (16U)
#define FMC_CIDCFGR5_SEMWLC0_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC0_Pos)     /*!< 0x00010000 */
#define FMC_CIDCFGR5_SEMWLC0          FMC_CIDCFGR5_SEMWLC0_Msk               /*!< white-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC1_Pos      (17U)
#define FMC_CIDCFGR5_SEMWLC1_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC1_Pos)     /*!< 0x00020000 */
#define FMC_CIDCFGR5_SEMWLC1          FMC_CIDCFGR5_SEMWLC1_Msk               /*!< white-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC2_Pos      (18U)
#define FMC_CIDCFGR5_SEMWLC2_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC2_Pos)     /*!< 0x00040000 */
#define FMC_CIDCFGR5_SEMWLC2          FMC_CIDCFGR5_SEMWLC2_Msk               /*!< white-listed CID in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC3_Pos      (19U)
#define FMC_CIDCFGR5_SEMWLC3_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC3_Pos)     /*!< 0x00080000 */
#define FMC_CIDCFGR5_SEMWLC3          FMC_CIDCFGR5_SEMWLC3_Msk               /*!< white-listed CID in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC4_Pos      (20U)
#define FMC_CIDCFGR5_SEMWLC4_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC4_Pos)     /*!< 0x00100000 */
#define FMC_CIDCFGR5_SEMWLC4          FMC_CIDCFGR5_SEMWLC4_Msk               /*!< white-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC5_Pos      (21U)
#define FMC_CIDCFGR5_SEMWLC5_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC5_Pos)     /*!< 0x00200000 */
#define FMC_CIDCFGR5_SEMWLC5          FMC_CIDCFGR5_SEMWLC5_Msk               /*!< white-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC6_Pos      (22U)
#define FMC_CIDCFGR5_SEMWLC6_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC6_Pos)     /*!< 0x00400000 */
#define FMC_CIDCFGR5_SEMWLC6          FMC_CIDCFGR5_SEMWLC6_Msk               /*!< white-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */
#define FMC_CIDCFGR5_SEMWLC7_Pos      (23U)
#define FMC_CIDCFGR5_SEMWLC7_Msk      (0x1UL << FMC_CIDCFGR5_SEMWLC7_Pos)     /*!< 0x00800000 */
#define FMC_CIDCFGR5_SEMWLC7          FMC_CIDCFGR5_SEMWLC7_Msk               /*!< White-listed CID0 in the CID allocation pool of resource 5 in semaphore mode */

/******************  Bit definition for FMC_SEMCR5 register  ******************/
#define FMC_SEMCR5_SEM_MUTEX_Pos      (0U)
#define FMC_SEMCR5_SEM_MUTEX_Msk      (0x1UL << FMC_SEMCR5_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define FMC_SEMCR5_SEM_MUTEX          FMC_SEMCR5_SEM_MUTEX_Msk               /*!< Mutex for the CID allocation of resource 5 in semaphore mode */
#define FMC_SEMCR5_SEMCID_Pos         (4U)
#define FMC_SEMCR5_SEMCID_Msk         (0x7UL << FMC_SEMCR5_SEMCID_Pos)        /*!< 0x00000070 */
#define FMC_SEMCR5_SEMCID             FMC_SEMCR5_SEMCID_Msk                  /*!< Current CID allocated to resource 5 in semaphore mode */

/*****************  Bit definition for FMC_HWCFGR3 register  ******************/
#define FMC_HWCFGR3_CID_WIDTH_Pos     (0U)
#define FMC_HWCFGR3_CID_WIDTH_Msk     (0xFUL << FMC_HWCFGR3_CID_WIDTH_Pos)    /*!< 0x0000000F */
#define FMC_HWCFGR3_CID_WIDTH         FMC_HWCFGR3_CID_WIDTH_Msk              /*!< CID bus width (width to reconsider) */

/***************  Bit definition for FMC_HWCFGR2 register  ****************/
#define FMC_HWCFGR2_RD_LN2DPTH_Pos    (0U)
#define FMC_HWCFGR2_RD_LN2DPTH_Msk    (0xFUL << FMC_HWCFGR2_RD_LN2DPTH_Pos)   /*!< 0x0000000F */
#define FMC_HWCFGR2_RD_LN2DPTH        FMC_HWCFGR2_RD_LN2DPTH_Msk             /*!< AXI read data FIFO depth */
#define FMC_HWCFGR2_NOR_BASE_Pos      (4U)
#define FMC_HWCFGR2_NOR_BASE_Msk      (0xFUL << FMC_HWCFGR2_NOR_BASE_Pos)     /*!< 0x000000F0 */
#define FMC_HWCFGR2_NOR_BASE          FMC_HWCFGR2_NOR_BASE_Msk               /*!< NOR base address */
#define FMC_HWCFGR2_SDRAM_RBASE_Pos   (8U)
#define FMC_HWCFGR2_SDRAM_RBASE_Msk   (0xFUL << FMC_HWCFGR2_SDRAM_RBASE_Pos)  /*!< 0x00000F00 */
#define FMC_HWCFGR2_SDRAM_RBASE       FMC_HWCFGR2_SDRAM_RBASE_Msk            /*!< SDRAM remap base address */
#define FMC_HWCFGR2_NAND_BASE_Pos     (12U)
#define FMC_HWCFGR2_NAND_BASE_Msk     (0xFUL << FMC_HWCFGR2_NAND_BASE_Pos)    /*!< 0x0000F000 */
#define FMC_HWCFGR2_NAND_BASE         FMC_HWCFGR2_NAND_BASE_Msk              /*!< NAND base address */
#define FMC_HWCFGR2_SDRAM1_BASE_Pos   (16U)
#define FMC_HWCFGR2_SDRAM1_BASE_Msk   (0xFUL << FMC_HWCFGR2_SDRAM1_BASE_Pos)  /*!< 0x000F0000 */
#define FMC_HWCFGR2_SDRAM1_BASE       FMC_HWCFGR2_SDRAM1_BASE_Msk            /*!< SDRAM Bank1 base address */
#define FMC_HWCFGR2_SDRAM2_BASE_Pos   (20U)
#define FMC_HWCFGR2_SDRAM2_BASE_Msk   (0xFUL << FMC_HWCFGR2_SDRAM2_BASE_Pos)  /*!< 0x00F00000 */
#define FMC_HWCFGR2_SDRAM2_BASE       FMC_HWCFGR2_SDRAM2_BASE_Msk            /*!< SDRAM Bank2 base address */
#define FMC_HWCFGR2_TRUSTZONE_Pos     (24U)
#define FMC_HWCFGR2_TRUSTZONE_Msk     (0x1UL << FMC_HWCFGR2_TRUSTZONE_Pos)    /*!< 0x01000000 */
#define FMC_HWCFGR2_TRUSTZONE         FMC_HWCFGR2_TRUSTZONE_Msk              /*!< Support for TrustZone */
#define FMC_HWCFGR2_MAX_CID_Pos       (28U)
#define FMC_HWCFGR2_MAX_CID_Msk       (0xFUL << FMC_HWCFGR2_MAX_CID_Pos)      /*!< 0xF0000000 */
#define FMC_HWCFGR2_MAX_CID           FMC_HWCFGR2_MAX_CID_Msk                /*!< Maximum compartment ID (also known as CID) */

/***************  Bit definition for FMC_HWCFGR1 register  ****************/
#define FMC_HWCFGR1_NAND_SEL_Pos      (0U)
#define FMC_HWCFGR1_NAND_SEL_Msk      (0x1UL << FMC_HWCFGR1_NAND_SEL_Pos)     /*!< 0x00000001 */
#define FMC_HWCFGR1_NAND_SEL          FMC_HWCFGR1_NAND_SEL_Msk               /*!< NAND Controller Selection */
#define FMC_HWCFGR1_NAND_ECC_Pos      (4U)
#define FMC_HWCFGR1_NAND_ECC_Msk      (0x1UL << FMC_HWCFGR1_NAND_ECC_Pos)     /*!< 0x00000010 */
#define FMC_HWCFGR1_NAND_ECC          FMC_HWCFGR1_NAND_ECC_Msk               /*!< NAND ECC */
#define FMC_HWCFGR1_SDRAM_SEL_Pos     (8U)
#define FMC_HWCFGR1_SDRAM_SEL_Msk     (0x1UL << FMC_HWCFGR1_SDRAM_SEL_Pos)    /*!< 0x00000100 */
#define FMC_HWCFGR1_SDRAM_SEL         FMC_HWCFGR1_SDRAM_SEL_Msk              /*!< SDRAM controller selection */
#define FMC_HWCFGR1_ID_SIZE_Pos       (12U)
#define FMC_HWCFGR1_ID_SIZE_Msk       (0xFUL << FMC_HWCFGR1_ID_SIZE_Pos)      /*!< 0x0000F000 */
#define FMC_HWCFGR1_ID_SIZE           FMC_HWCFGR1_ID_SIZE_Msk                /*!< AXI ID signals width */
#define FMC_HWCFGR1_WA_LN2DPTH_Pos    (16U)
#define FMC_HWCFGR1_WA_LN2DPTH_Msk    (0xFUL << FMC_HWCFGR1_WA_LN2DPTH_Pos)   /*!< 0x000F0000 */
#define FMC_HWCFGR1_WA_LN2DPTH        FMC_HWCFGR1_WA_LN2DPTH_Msk             /*!< AXI write address FIFO depth */
#define FMC_HWCFGR1_WD_LN2DPTH_Pos    (20U)
#define FMC_HWCFGR1_WD_LN2DPTH_Msk    (0xFUL << FMC_HWCFGR1_WD_LN2DPTH_Pos)   /*!< 0x00F00000 */
#define FMC_HWCFGR1_WD_LN2DPTH        FMC_HWCFGR1_WD_LN2DPTH_Msk             /*!< AXI write data FIFO depth */
#define FMC_HWCFGR1_WR_LN2DPTH_Pos    (24U)
#define FMC_HWCFGR1_WR_LN2DPTH_Msk    (0xFUL << FMC_HWCFGR1_WR_LN2DPTH_Pos)   /*!< 0x0F000000 */
#define FMC_HWCFGR1_WR_LN2DPTH        FMC_HWCFGR1_WR_LN2DPTH_Msk             /*!< AXI write response FIFO depth */
#define FMC_HWCFGR1_RA_LN2DPTH_Pos    (28U)
#define FMC_HWCFGR1_RA_LN2DPTH_Msk    (0xFUL << FMC_HWCFGR1_RA_LN2DPTH_Pos)   /*!< 0xF0000000 */
#define FMC_HWCFGR1_RA_LN2DPTH        FMC_HWCFGR1_RA_LN2DPTH_Msk             /*!< AXI read address FIFO depth */

/*****************  Bit definition for FMC_VERR register  *****************/
#define FMC_VERR_MINREV_Pos           (0U)
#define FMC_VERR_MINREV_Msk           (0xFUL << FMC_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define FMC_VERR_MINREV               FMC_VERR_MINREV_Msk                    /*!< Minor revision */
#define FMC_VERR_MAJREV_Pos           (4U)
#define FMC_VERR_MAJREV_Msk           (0xFUL << FMC_VERR_MAJREV_Pos)          /*!< 0x000000F0 */
#define FMC_VERR_MAJREV               FMC_VERR_MAJREV_Msk                    /*!< Major revision */

/****************  Bit definition for FMC_IPIDR register  *****************/
#define FMC_IPIDR_ID_Pos              (0U)
#define FMC_IPIDR_ID_Msk              (0xFFFFFFFFUL << FMC_IPIDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define FMC_IPIDR_ID                  FMC_IPIDR_ID_Msk                       /*!< FMC Identifier */

/*****************  Bit definition for FMC_SIDR register  *****************/
#define FMC_SIDR_SID_Pos              (0U)
#define FMC_SIDR_SID_Msk              (0xFFFFFFFFUL << FMC_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define FMC_SIDR_SID                  FMC_SIDR_SID_Msk                       /*!< Size Identification */

/******************************************************************************/
/*                                                                            */
/*                            General Purpose I/O                             */
/*                          c7amba_ioport4 Rev 1.0.2                          */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for GPIO_MODER register  ******************/
#define GPIO_MODER_MODE0_Pos           (0U)
#define GPIO_MODER_MODE0_Msk           (0x3UL << GPIO_MODER_MODE0_Pos)           /*!< 0x00000003 */
#define GPIO_MODER_MODE0               GPIO_MODER_MODE0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE1_Pos           (2U)
#define GPIO_MODER_MODE1_Msk           (0x3UL << GPIO_MODER_MODE1_Pos)           /*!< 0x0000000C */
#define GPIO_MODER_MODE1               GPIO_MODER_MODE1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE2_Pos           (4U)
#define GPIO_MODER_MODE2_Msk           (0x3UL << GPIO_MODER_MODE2_Pos)           /*!< 0x00000030 */
#define GPIO_MODER_MODE2               GPIO_MODER_MODE2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE3_Pos           (6U)
#define GPIO_MODER_MODE3_Msk           (0x3UL << GPIO_MODER_MODE3_Pos)           /*!< 0x000000C0 */
#define GPIO_MODER_MODE3               GPIO_MODER_MODE3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE4_Pos           (8U)
#define GPIO_MODER_MODE4_Msk           (0x3UL << GPIO_MODER_MODE4_Pos)           /*!< 0x00000300 */
#define GPIO_MODER_MODE4               GPIO_MODER_MODE4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE5_Pos           (10U)
#define GPIO_MODER_MODE5_Msk           (0x3UL << GPIO_MODER_MODE5_Pos)           /*!< 0x00000C00 */
#define GPIO_MODER_MODE5               GPIO_MODER_MODE5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE6_Pos           (12U)
#define GPIO_MODER_MODE6_Msk           (0x3UL << GPIO_MODER_MODE6_Pos)           /*!< 0x00003000 */
#define GPIO_MODER_MODE6               GPIO_MODER_MODE6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE7_Pos           (14U)
#define GPIO_MODER_MODE7_Msk           (0x3UL << GPIO_MODER_MODE7_Pos)           /*!< 0x0000C000 */
#define GPIO_MODER_MODE7               GPIO_MODER_MODE7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE8_Pos           (16U)
#define GPIO_MODER_MODE8_Msk           (0x3UL << GPIO_MODER_MODE8_Pos)           /*!< 0x00030000 */
#define GPIO_MODER_MODE8               GPIO_MODER_MODE8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE9_Pos           (18U)
#define GPIO_MODER_MODE9_Msk           (0x3UL << GPIO_MODER_MODE9_Pos)           /*!< 0x000C0000 */
#define GPIO_MODER_MODE9               GPIO_MODER_MODE9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE10_Pos          (20U)
#define GPIO_MODER_MODE10_Msk          (0x3UL << GPIO_MODER_MODE10_Pos)          /*!< 0x00300000 */
#define GPIO_MODER_MODE10              GPIO_MODER_MODE10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE11_Pos          (22U)
#define GPIO_MODER_MODE11_Msk          (0x3UL << GPIO_MODER_MODE11_Pos)          /*!< 0x00C00000 */
#define GPIO_MODER_MODE11              GPIO_MODER_MODE11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE12_Pos          (24U)
#define GPIO_MODER_MODE12_Msk          (0x3UL << GPIO_MODER_MODE12_Pos)          /*!< 0x03000000 */
#define GPIO_MODER_MODE12              GPIO_MODER_MODE12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE13_Pos          (26U)
#define GPIO_MODER_MODE13_Msk          (0x3UL << GPIO_MODER_MODE13_Pos)          /*!< 0x0C000000 */
#define GPIO_MODER_MODE13              GPIO_MODER_MODE13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE14_Pos          (28U)
#define GPIO_MODER_MODE14_Msk          (0x3UL << GPIO_MODER_MODE14_Pos)          /*!< 0x30000000 */
#define GPIO_MODER_MODE14              GPIO_MODER_MODE14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE15_Pos          (30U)
#define GPIO_MODER_MODE15_Msk          (0x3UL << GPIO_MODER_MODE15_Pos)          /*!< 0xC0000000 */
#define GPIO_MODER_MODE15              GPIO_MODER_MODE15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OTYPER register  ******************/
#define GPIO_OTYPER_OT0_Pos            (0U)
#define GPIO_OTYPER_OT0_Msk            (0x1UL << GPIO_OTYPER_OT0_Pos)            /*!< 0x00000001 */
#define GPIO_OTYPER_OT0                GPIO_OTYPER_OT0_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT1_Pos            (1U)
#define GPIO_OTYPER_OT1_Msk            (0x1UL << GPIO_OTYPER_OT1_Pos)            /*!< 0x00000002 */
#define GPIO_OTYPER_OT1                GPIO_OTYPER_OT1_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT2_Pos            (2U)
#define GPIO_OTYPER_OT2_Msk            (0x1UL << GPIO_OTYPER_OT2_Pos)            /*!< 0x00000004 */
#define GPIO_OTYPER_OT2                GPIO_OTYPER_OT2_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT3_Pos            (3U)
#define GPIO_OTYPER_OT3_Msk            (0x1UL << GPIO_OTYPER_OT3_Pos)            /*!< 0x00000008 */
#define GPIO_OTYPER_OT3                GPIO_OTYPER_OT3_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT4_Pos            (4U)
#define GPIO_OTYPER_OT4_Msk            (0x1UL << GPIO_OTYPER_OT4_Pos)            /*!< 0x00000010 */
#define GPIO_OTYPER_OT4                GPIO_OTYPER_OT4_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT5_Pos            (5U)
#define GPIO_OTYPER_OT5_Msk            (0x1UL << GPIO_OTYPER_OT5_Pos)            /*!< 0x00000020 */
#define GPIO_OTYPER_OT5                GPIO_OTYPER_OT5_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT6_Pos            (6U)
#define GPIO_OTYPER_OT6_Msk            (0x1UL << GPIO_OTYPER_OT6_Pos)            /*!< 0x00000040 */
#define GPIO_OTYPER_OT6                GPIO_OTYPER_OT6_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT7_Pos            (7U)
#define GPIO_OTYPER_OT7_Msk            (0x1UL << GPIO_OTYPER_OT7_Pos)            /*!< 0x00000080 */
#define GPIO_OTYPER_OT7                GPIO_OTYPER_OT7_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT8_Pos            (8U)
#define GPIO_OTYPER_OT8_Msk            (0x1UL << GPIO_OTYPER_OT8_Pos)            /*!< 0x00000100 */
#define GPIO_OTYPER_OT8                GPIO_OTYPER_OT8_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT9_Pos            (9U)
#define GPIO_OTYPER_OT9_Msk            (0x1UL << GPIO_OTYPER_OT9_Pos)            /*!< 0x00000200 */
#define GPIO_OTYPER_OT9                GPIO_OTYPER_OT9_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT10_Pos           (10U)
#define GPIO_OTYPER_OT10_Msk           (0x1UL << GPIO_OTYPER_OT10_Pos)           /*!< 0x00000400 */
#define GPIO_OTYPER_OT10               GPIO_OTYPER_OT10_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT11_Pos           (11U)
#define GPIO_OTYPER_OT11_Msk           (0x1UL << GPIO_OTYPER_OT11_Pos)           /*!< 0x00000800 */
#define GPIO_OTYPER_OT11               GPIO_OTYPER_OT11_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT12_Pos           (12U)
#define GPIO_OTYPER_OT12_Msk           (0x1UL << GPIO_OTYPER_OT12_Pos)           /*!< 0x00001000 */
#define GPIO_OTYPER_OT12               GPIO_OTYPER_OT12_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT13_Pos           (13U)
#define GPIO_OTYPER_OT13_Msk           (0x1UL << GPIO_OTYPER_OT13_Pos)           /*!< 0x00002000 */
#define GPIO_OTYPER_OT13               GPIO_OTYPER_OT13_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT14_Pos           (14U)
#define GPIO_OTYPER_OT14_Msk           (0x1UL << GPIO_OTYPER_OT14_Pos)           /*!< 0x00004000 */
#define GPIO_OTYPER_OT14               GPIO_OTYPER_OT14_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT15_Pos           (15U)
#define GPIO_OTYPER_OT15_Msk           (0x1UL << GPIO_OTYPER_OT15_Pos)           /*!< 0x00008000 */
#define GPIO_OTYPER_OT15               GPIO_OTYPER_OT15_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OSPEEDR register  *****************/
#define GPIO_OSPEEDR_OSPEED0_Pos       (0U)
#define GPIO_OSPEEDR_OSPEED0_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED0_Pos)       /*!< 0x00000003 */
#define GPIO_OSPEEDR_OSPEED0           GPIO_OSPEEDR_OSPEED0_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED1_Pos       (2U)
#define GPIO_OSPEEDR_OSPEED1_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED1_Pos)       /*!< 0x0000000C */
#define GPIO_OSPEEDR_OSPEED1           GPIO_OSPEEDR_OSPEED1_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED2_Pos       (4U)
#define GPIO_OSPEEDR_OSPEED2_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED2_Pos)       /*!< 0x00000030 */
#define GPIO_OSPEEDR_OSPEED2           GPIO_OSPEEDR_OSPEED2_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED3_Pos       (6U)
#define GPIO_OSPEEDR_OSPEED3_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED3_Pos)       /*!< 0x000000C0 */
#define GPIO_OSPEEDR_OSPEED3           GPIO_OSPEEDR_OSPEED3_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED4_Pos       (8U)
#define GPIO_OSPEEDR_OSPEED4_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED4_Pos)       /*!< 0x00000300 */
#define GPIO_OSPEEDR_OSPEED4           GPIO_OSPEEDR_OSPEED4_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED5_Pos       (10U)
#define GPIO_OSPEEDR_OSPEED5_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED5_Pos)       /*!< 0x00000C00 */
#define GPIO_OSPEEDR_OSPEED5           GPIO_OSPEEDR_OSPEED5_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED6_Pos       (12U)
#define GPIO_OSPEEDR_OSPEED6_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED6_Pos)       /*!< 0x00003000 */
#define GPIO_OSPEEDR_OSPEED6           GPIO_OSPEEDR_OSPEED6_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED7_Pos       (14U)
#define GPIO_OSPEEDR_OSPEED7_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED7_Pos)       /*!< 0x0000C000 */
#define GPIO_OSPEEDR_OSPEED7           GPIO_OSPEEDR_OSPEED7_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED8_Pos       (16U)
#define GPIO_OSPEEDR_OSPEED8_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED8_Pos)       /*!< 0x00030000 */
#define GPIO_OSPEEDR_OSPEED8           GPIO_OSPEEDR_OSPEED8_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED9_Pos       (18U)
#define GPIO_OSPEEDR_OSPEED9_Msk       (0x3UL << GPIO_OSPEEDR_OSPEED9_Pos)       /*!< 0x000C0000 */
#define GPIO_OSPEEDR_OSPEED9           GPIO_OSPEEDR_OSPEED9_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED10_Pos      (20U)
#define GPIO_OSPEEDR_OSPEED10_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED10_Pos)      /*!< 0x00300000 */
#define GPIO_OSPEEDR_OSPEED10          GPIO_OSPEEDR_OSPEED10_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED11_Pos      (22U)
#define GPIO_OSPEEDR_OSPEED11_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED11_Pos)      /*!< 0x00C00000 */
#define GPIO_OSPEEDR_OSPEED11          GPIO_OSPEEDR_OSPEED11_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED12_Pos      (24U)
#define GPIO_OSPEEDR_OSPEED12_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED12_Pos)      /*!< 0x03000000 */
#define GPIO_OSPEEDR_OSPEED12          GPIO_OSPEEDR_OSPEED12_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED13_Pos      (26U)
#define GPIO_OSPEEDR_OSPEED13_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED13_Pos)      /*!< 0x0C000000 */
#define GPIO_OSPEEDR_OSPEED13          GPIO_OSPEEDR_OSPEED13_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED14_Pos      (28U)
#define GPIO_OSPEEDR_OSPEED14_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED14_Pos)      /*!< 0x30000000 */
#define GPIO_OSPEEDR_OSPEED14          GPIO_OSPEEDR_OSPEED14_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED15_Pos      (30U)
#define GPIO_OSPEEDR_OSPEED15_Msk      (0x3UL << GPIO_OSPEEDR_OSPEED15_Pos)      /*!< 0xC0000000 */
#define GPIO_OSPEEDR_OSPEED15          GPIO_OSPEEDR_OSPEED15_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_PUPDR register  ******************/
#define GPIO_PUPDR_PUPD0_Pos           (0U)
#define GPIO_PUPDR_PUPD0_Msk           (0x3UL << GPIO_PUPDR_PUPD0_Pos)           /*!< 0x00000003 */
#define GPIO_PUPDR_PUPD0               GPIO_PUPDR_PUPD0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD1_Pos           (2U)
#define GPIO_PUPDR_PUPD1_Msk           (0x3UL << GPIO_PUPDR_PUPD1_Pos)           /*!< 0x0000000C */
#define GPIO_PUPDR_PUPD1               GPIO_PUPDR_PUPD1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD2_Pos           (4U)
#define GPIO_PUPDR_PUPD2_Msk           (0x3UL << GPIO_PUPDR_PUPD2_Pos)           /*!< 0x00000030 */
#define GPIO_PUPDR_PUPD2               GPIO_PUPDR_PUPD2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD3_Pos           (6U)
#define GPIO_PUPDR_PUPD3_Msk           (0x3UL << GPIO_PUPDR_PUPD3_Pos)           /*!< 0x000000C0 */
#define GPIO_PUPDR_PUPD3               GPIO_PUPDR_PUPD3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD4_Pos           (8U)
#define GPIO_PUPDR_PUPD4_Msk           (0x3UL << GPIO_PUPDR_PUPD4_Pos)           /*!< 0x00000300 */
#define GPIO_PUPDR_PUPD4               GPIO_PUPDR_PUPD4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD5_Pos           (10U)
#define GPIO_PUPDR_PUPD5_Msk           (0x3UL << GPIO_PUPDR_PUPD5_Pos)           /*!< 0x00000C00 */
#define GPIO_PUPDR_PUPD5               GPIO_PUPDR_PUPD5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD6_Pos           (12U)
#define GPIO_PUPDR_PUPD6_Msk           (0x3UL << GPIO_PUPDR_PUPD6_Pos)           /*!< 0x00003000 */
#define GPIO_PUPDR_PUPD6               GPIO_PUPDR_PUPD6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD7_Pos           (14U)
#define GPIO_PUPDR_PUPD7_Msk           (0x3UL << GPIO_PUPDR_PUPD7_Pos)           /*!< 0x0000C000 */
#define GPIO_PUPDR_PUPD7               GPIO_PUPDR_PUPD7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD8_Pos           (16U)
#define GPIO_PUPDR_PUPD8_Msk           (0x3UL << GPIO_PUPDR_PUPD8_Pos)           /*!< 0x00030000 */
#define GPIO_PUPDR_PUPD8               GPIO_PUPDR_PUPD8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD9_Pos           (18U)
#define GPIO_PUPDR_PUPD9_Msk           (0x3UL << GPIO_PUPDR_PUPD9_Pos)           /*!< 0x000C0000 */
#define GPIO_PUPDR_PUPD9               GPIO_PUPDR_PUPD9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD10_Pos          (20U)
#define GPIO_PUPDR_PUPD10_Msk          (0x3UL << GPIO_PUPDR_PUPD10_Pos)          /*!< 0x00300000 */
#define GPIO_PUPDR_PUPD10              GPIO_PUPDR_PUPD10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD11_Pos          (22U)
#define GPIO_PUPDR_PUPD11_Msk          (0x3UL << GPIO_PUPDR_PUPD11_Pos)          /*!< 0x00C00000 */
#define GPIO_PUPDR_PUPD11              GPIO_PUPDR_PUPD11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD12_Pos          (24U)
#define GPIO_PUPDR_PUPD12_Msk          (0x3UL << GPIO_PUPDR_PUPD12_Pos)          /*!< 0x03000000 */
#define GPIO_PUPDR_PUPD12              GPIO_PUPDR_PUPD12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD13_Pos          (26U)
#define GPIO_PUPDR_PUPD13_Msk          (0x3UL << GPIO_PUPDR_PUPD13_Pos)          /*!< 0x0C000000 */
#define GPIO_PUPDR_PUPD13              GPIO_PUPDR_PUPD13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD14_Pos          (28U)
#define GPIO_PUPDR_PUPD14_Msk          (0x3UL << GPIO_PUPDR_PUPD14_Pos)          /*!< 0x30000000 */
#define GPIO_PUPDR_PUPD14              GPIO_PUPDR_PUPD14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD15_Pos          (30U)
#define GPIO_PUPDR_PUPD15_Msk          (0x3UL << GPIO_PUPDR_PUPD15_Pos)          /*!< 0xC0000000 */
#define GPIO_PUPDR_PUPD15              GPIO_PUPDR_PUPD15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_IDR register  *******************/
#define GPIO_IDR_ID0_Pos               (0U)
#define GPIO_IDR_ID0_Msk               (0x1UL << GPIO_IDR_ID0_Pos)               /*!< 0x00000001 */
#define GPIO_IDR_ID0                   GPIO_IDR_ID0_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID1_Pos               (1U)
#define GPIO_IDR_ID1_Msk               (0x1UL << GPIO_IDR_ID1_Pos)               /*!< 0x00000002 */
#define GPIO_IDR_ID1                   GPIO_IDR_ID1_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID2_Pos               (2U)
#define GPIO_IDR_ID2_Msk               (0x1UL << GPIO_IDR_ID2_Pos)               /*!< 0x00000004 */
#define GPIO_IDR_ID2                   GPIO_IDR_ID2_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID3_Pos               (3U)
#define GPIO_IDR_ID3_Msk               (0x1UL << GPIO_IDR_ID3_Pos)               /*!< 0x00000008 */
#define GPIO_IDR_ID3                   GPIO_IDR_ID3_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID4_Pos               (4U)
#define GPIO_IDR_ID4_Msk               (0x1UL << GPIO_IDR_ID4_Pos)               /*!< 0x00000010 */
#define GPIO_IDR_ID4                   GPIO_IDR_ID4_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID5_Pos               (5U)
#define GPIO_IDR_ID5_Msk               (0x1UL << GPIO_IDR_ID5_Pos)               /*!< 0x00000020 */
#define GPIO_IDR_ID5                   GPIO_IDR_ID5_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID6_Pos               (6U)
#define GPIO_IDR_ID6_Msk               (0x1UL << GPIO_IDR_ID6_Pos)               /*!< 0x00000040 */
#define GPIO_IDR_ID6                   GPIO_IDR_ID6_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID7_Pos               (7U)
#define GPIO_IDR_ID7_Msk               (0x1UL << GPIO_IDR_ID7_Pos)               /*!< 0x00000080 */
#define GPIO_IDR_ID7                   GPIO_IDR_ID7_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID8_Pos               (8U)
#define GPIO_IDR_ID8_Msk               (0x1UL << GPIO_IDR_ID8_Pos)               /*!< 0x00000100 */
#define GPIO_IDR_ID8                   GPIO_IDR_ID8_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID9_Pos               (9U)
#define GPIO_IDR_ID9_Msk               (0x1UL << GPIO_IDR_ID9_Pos)               /*!< 0x00000200 */
#define GPIO_IDR_ID9                   GPIO_IDR_ID9_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID10_Pos              (10U)
#define GPIO_IDR_ID10_Msk              (0x1UL << GPIO_IDR_ID10_Pos)              /*!< 0x00000400 */
#define GPIO_IDR_ID10                  GPIO_IDR_ID10_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID11_Pos              (11U)
#define GPIO_IDR_ID11_Msk              (0x1UL << GPIO_IDR_ID11_Pos)              /*!< 0x00000800 */
#define GPIO_IDR_ID11                  GPIO_IDR_ID11_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID12_Pos              (12U)
#define GPIO_IDR_ID12_Msk              (0x1UL << GPIO_IDR_ID12_Pos)              /*!< 0x00001000 */
#define GPIO_IDR_ID12                  GPIO_IDR_ID12_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID13_Pos              (13U)
#define GPIO_IDR_ID13_Msk              (0x1UL << GPIO_IDR_ID13_Pos)              /*!< 0x00002000 */
#define GPIO_IDR_ID13                  GPIO_IDR_ID13_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID14_Pos              (14U)
#define GPIO_IDR_ID14_Msk              (0x1UL << GPIO_IDR_ID14_Pos)              /*!< 0x00004000 */
#define GPIO_IDR_ID14                  GPIO_IDR_ID14_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID15_Pos              (15U)
#define GPIO_IDR_ID15_Msk              (0x1UL << GPIO_IDR_ID15_Pos)              /*!< 0x00008000 */
#define GPIO_IDR_ID15                  GPIO_IDR_ID15_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */

/*******************  Bit definition for GPIO_ODR register  *******************/
#define GPIO_ODR_OD0_Pos               (0U)
#define GPIO_ODR_OD0_Msk               (0x1UL << GPIO_ODR_OD0_Pos)               /*!< 0x00000001 */
#define GPIO_ODR_OD0                   GPIO_ODR_OD0_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD1_Pos               (1U)
#define GPIO_ODR_OD1_Msk               (0x1UL << GPIO_ODR_OD1_Pos)               /*!< 0x00000002 */
#define GPIO_ODR_OD1                   GPIO_ODR_OD1_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD2_Pos               (2U)
#define GPIO_ODR_OD2_Msk               (0x1UL << GPIO_ODR_OD2_Pos)               /*!< 0x00000004 */
#define GPIO_ODR_OD2                   GPIO_ODR_OD2_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD3_Pos               (3U)
#define GPIO_ODR_OD3_Msk               (0x1UL << GPIO_ODR_OD3_Pos)               /*!< 0x00000008 */
#define GPIO_ODR_OD3                   GPIO_ODR_OD3_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD4_Pos               (4U)
#define GPIO_ODR_OD4_Msk               (0x1UL << GPIO_ODR_OD4_Pos)               /*!< 0x00000010 */
#define GPIO_ODR_OD4                   GPIO_ODR_OD4_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD5_Pos               (5U)
#define GPIO_ODR_OD5_Msk               (0x1UL << GPIO_ODR_OD5_Pos)               /*!< 0x00000020 */
#define GPIO_ODR_OD5                   GPIO_ODR_OD5_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD6_Pos               (6U)
#define GPIO_ODR_OD6_Msk               (0x1UL << GPIO_ODR_OD6_Pos)               /*!< 0x00000040 */
#define GPIO_ODR_OD6                   GPIO_ODR_OD6_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD7_Pos               (7U)
#define GPIO_ODR_OD7_Msk               (0x1UL << GPIO_ODR_OD7_Pos)               /*!< 0x00000080 */
#define GPIO_ODR_OD7                   GPIO_ODR_OD7_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD8_Pos               (8U)
#define GPIO_ODR_OD8_Msk               (0x1UL << GPIO_ODR_OD8_Pos)               /*!< 0x00000100 */
#define GPIO_ODR_OD8                   GPIO_ODR_OD8_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD9_Pos               (9U)
#define GPIO_ODR_OD9_Msk               (0x1UL << GPIO_ODR_OD9_Pos)               /*!< 0x00000200 */
#define GPIO_ODR_OD9                   GPIO_ODR_OD9_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD10_Pos              (10U)
#define GPIO_ODR_OD10_Msk              (0x1UL << GPIO_ODR_OD10_Pos)              /*!< 0x00000400 */
#define GPIO_ODR_OD10                  GPIO_ODR_OD10_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD11_Pos              (11U)
#define GPIO_ODR_OD11_Msk              (0x1UL << GPIO_ODR_OD11_Pos)              /*!< 0x00000800 */
#define GPIO_ODR_OD11                  GPIO_ODR_OD11_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD12_Pos              (12U)
#define GPIO_ODR_OD12_Msk              (0x1UL << GPIO_ODR_OD12_Pos)              /*!< 0x00001000 */
#define GPIO_ODR_OD12                  GPIO_ODR_OD12_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD13_Pos              (13U)
#define GPIO_ODR_OD13_Msk              (0x1UL << GPIO_ODR_OD13_Pos)              /*!< 0x00002000 */
#define GPIO_ODR_OD13                  GPIO_ODR_OD13_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD14_Pos              (14U)
#define GPIO_ODR_OD14_Msk              (0x1UL << GPIO_ODR_OD14_Pos)              /*!< 0x00004000 */
#define GPIO_ODR_OD14                  GPIO_ODR_OD14_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD15_Pos              (15U)
#define GPIO_ODR_OD15_Msk              (0x1UL << GPIO_ODR_OD15_Pos)              /*!< 0x00008000 */
#define GPIO_ODR_OD15                  GPIO_ODR_OD15_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_BSRR register  *******************/
#define GPIO_BSRR_BS0_Pos              (0U)
#define GPIO_BSRR_BS0_Msk              (0x1UL << GPIO_BSRR_BS0_Pos)              /*!< 0x00000001 */
#define GPIO_BSRR_BS0                  GPIO_BSRR_BS0_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS1_Pos              (1U)
#define GPIO_BSRR_BS1_Msk              (0x1UL << GPIO_BSRR_BS1_Pos)              /*!< 0x00000002 */
#define GPIO_BSRR_BS1                  GPIO_BSRR_BS1_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS2_Pos              (2U)
#define GPIO_BSRR_BS2_Msk              (0x1UL << GPIO_BSRR_BS2_Pos)              /*!< 0x00000004 */
#define GPIO_BSRR_BS2                  GPIO_BSRR_BS2_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS3_Pos              (3U)
#define GPIO_BSRR_BS3_Msk              (0x1UL << GPIO_BSRR_BS3_Pos)              /*!< 0x00000008 */
#define GPIO_BSRR_BS3                  GPIO_BSRR_BS3_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS4_Pos              (4U)
#define GPIO_BSRR_BS4_Msk              (0x1UL << GPIO_BSRR_BS4_Pos)              /*!< 0x00000010 */
#define GPIO_BSRR_BS4                  GPIO_BSRR_BS4_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS5_Pos              (5U)
#define GPIO_BSRR_BS5_Msk              (0x1UL << GPIO_BSRR_BS5_Pos)              /*!< 0x00000020 */
#define GPIO_BSRR_BS5                  GPIO_BSRR_BS5_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS6_Pos              (6U)
#define GPIO_BSRR_BS6_Msk              (0x1UL << GPIO_BSRR_BS6_Pos)              /*!< 0x00000040 */
#define GPIO_BSRR_BS6                  GPIO_BSRR_BS6_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS7_Pos              (7U)
#define GPIO_BSRR_BS7_Msk              (0x1UL << GPIO_BSRR_BS7_Pos)              /*!< 0x00000080 */
#define GPIO_BSRR_BS7                  GPIO_BSRR_BS7_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS8_Pos              (8U)
#define GPIO_BSRR_BS8_Msk              (0x1UL << GPIO_BSRR_BS8_Pos)              /*!< 0x00000100 */
#define GPIO_BSRR_BS8                  GPIO_BSRR_BS8_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS9_Pos              (9U)
#define GPIO_BSRR_BS9_Msk              (0x1UL << GPIO_BSRR_BS9_Pos)              /*!< 0x00000200 */
#define GPIO_BSRR_BS9                  GPIO_BSRR_BS9_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS10_Pos             (10U)
#define GPIO_BSRR_BS10_Msk             (0x1UL << GPIO_BSRR_BS10_Pos)             /*!< 0x00000400 */
#define GPIO_BSRR_BS10                 GPIO_BSRR_BS10_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS11_Pos             (11U)
#define GPIO_BSRR_BS11_Msk             (0x1UL << GPIO_BSRR_BS11_Pos)             /*!< 0x00000800 */
#define GPIO_BSRR_BS11                 GPIO_BSRR_BS11_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS12_Pos             (12U)
#define GPIO_BSRR_BS12_Msk             (0x1UL << GPIO_BSRR_BS12_Pos)             /*!< 0x00001000 */
#define GPIO_BSRR_BS12                 GPIO_BSRR_BS12_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS13_Pos             (13U)
#define GPIO_BSRR_BS13_Msk             (0x1UL << GPIO_BSRR_BS13_Pos)             /*!< 0x00002000 */
#define GPIO_BSRR_BS13                 GPIO_BSRR_BS13_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS14_Pos             (14U)
#define GPIO_BSRR_BS14_Msk             (0x1UL << GPIO_BSRR_BS14_Pos)             /*!< 0x00004000 */
#define GPIO_BSRR_BS14                 GPIO_BSRR_BS14_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS15_Pos             (15U)
#define GPIO_BSRR_BS15_Msk             (0x1UL << GPIO_BSRR_BS15_Pos)             /*!< 0x00008000 */
#define GPIO_BSRR_BS15                 GPIO_BSRR_BS15_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR0_Pos              (16U)
#define GPIO_BSRR_BR0_Msk              (0x1UL << GPIO_BSRR_BR0_Pos)              /*!< 0x00010000 */
#define GPIO_BSRR_BR0                  GPIO_BSRR_BR0_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR1_Pos              (17U)
#define GPIO_BSRR_BR1_Msk              (0x1UL << GPIO_BSRR_BR1_Pos)              /*!< 0x00020000 */
#define GPIO_BSRR_BR1                  GPIO_BSRR_BR1_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR2_Pos              (18U)
#define GPIO_BSRR_BR2_Msk              (0x1UL << GPIO_BSRR_BR2_Pos)              /*!< 0x00040000 */
#define GPIO_BSRR_BR2                  GPIO_BSRR_BR2_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR3_Pos              (19U)
#define GPIO_BSRR_BR3_Msk              (0x1UL << GPIO_BSRR_BR3_Pos)              /*!< 0x00080000 */
#define GPIO_BSRR_BR3                  GPIO_BSRR_BR3_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR4_Pos              (20U)
#define GPIO_BSRR_BR4_Msk              (0x1UL << GPIO_BSRR_BR4_Pos)              /*!< 0x00100000 */
#define GPIO_BSRR_BR4                  GPIO_BSRR_BR4_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR5_Pos              (21U)
#define GPIO_BSRR_BR5_Msk              (0x1UL << GPIO_BSRR_BR5_Pos)              /*!< 0x00200000 */
#define GPIO_BSRR_BR5                  GPIO_BSRR_BR5_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR6_Pos              (22U)
#define GPIO_BSRR_BR6_Msk              (0x1UL << GPIO_BSRR_BR6_Pos)              /*!< 0x00400000 */
#define GPIO_BSRR_BR6                  GPIO_BSRR_BR6_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR7_Pos              (23U)
#define GPIO_BSRR_BR7_Msk              (0x1UL << GPIO_BSRR_BR7_Pos)              /*!< 0x00800000 */
#define GPIO_BSRR_BR7                  GPIO_BSRR_BR7_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR8_Pos              (24U)
#define GPIO_BSRR_BR8_Msk              (0x1UL << GPIO_BSRR_BR8_Pos)              /*!< 0x01000000 */
#define GPIO_BSRR_BR8                  GPIO_BSRR_BR8_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR9_Pos              (25U)
#define GPIO_BSRR_BR9_Msk              (0x1UL << GPIO_BSRR_BR9_Pos)              /*!< 0x02000000 */
#define GPIO_BSRR_BR9                  GPIO_BSRR_BR9_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR10_Pos             (26U)
#define GPIO_BSRR_BR10_Msk             (0x1UL << GPIO_BSRR_BR10_Pos)             /*!< 0x04000000 */
#define GPIO_BSRR_BR10                 GPIO_BSRR_BR10_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR11_Pos             (27U)
#define GPIO_BSRR_BR11_Msk             (0x1UL << GPIO_BSRR_BR11_Pos)             /*!< 0x08000000 */
#define GPIO_BSRR_BR11                 GPIO_BSRR_BR11_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR12_Pos             (28U)
#define GPIO_BSRR_BR12_Msk             (0x1UL << GPIO_BSRR_BR12_Pos)             /*!< 0x10000000 */
#define GPIO_BSRR_BR12                 GPIO_BSRR_BR12_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR13_Pos             (29U)
#define GPIO_BSRR_BR13_Msk             (0x1UL << GPIO_BSRR_BR13_Pos)             /*!< 0x20000000 */
#define GPIO_BSRR_BR13                 GPIO_BSRR_BR13_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR14_Pos             (30U)
#define GPIO_BSRR_BR14_Msk             (0x1UL << GPIO_BSRR_BR14_Pos)             /*!< 0x40000000 */
#define GPIO_BSRR_BR14                 GPIO_BSRR_BR14_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR15_Pos             (31U)
#define GPIO_BSRR_BR15_Msk             (0x1UL << GPIO_BSRR_BR15_Pos)             /*!< 0x80000000 */
#define GPIO_BSRR_BR15                 GPIO_BSRR_BR15_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/******************  Bit definition for GPIO_LCKR register  *******************/
#define GPIO_LCKR_LCK0_Pos             (0U)
#define GPIO_LCKR_LCK0_Msk             (0x1UL << GPIO_LCKR_LCK0_Pos)             /*!< 0x00000001 */
#define GPIO_LCKR_LCK0                 GPIO_LCKR_LCK0_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK1_Pos             (1U)
#define GPIO_LCKR_LCK1_Msk             (0x1UL << GPIO_LCKR_LCK1_Pos)             /*!< 0x00000002 */
#define GPIO_LCKR_LCK1                 GPIO_LCKR_LCK1_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK2_Pos             (2U)
#define GPIO_LCKR_LCK2_Msk             (0x1UL << GPIO_LCKR_LCK2_Pos)             /*!< 0x00000004 */
#define GPIO_LCKR_LCK2                 GPIO_LCKR_LCK2_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK3_Pos             (3U)
#define GPIO_LCKR_LCK3_Msk             (0x1UL << GPIO_LCKR_LCK3_Pos)             /*!< 0x00000008 */
#define GPIO_LCKR_LCK3                 GPIO_LCKR_LCK3_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK4_Pos             (4U)
#define GPIO_LCKR_LCK4_Msk             (0x1UL << GPIO_LCKR_LCK4_Pos)             /*!< 0x00000010 */
#define GPIO_LCKR_LCK4                 GPIO_LCKR_LCK4_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK5_Pos             (5U)
#define GPIO_LCKR_LCK5_Msk             (0x1UL << GPIO_LCKR_LCK5_Pos)             /*!< 0x00000020 */
#define GPIO_LCKR_LCK5                 GPIO_LCKR_LCK5_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK6_Pos             (6U)
#define GPIO_LCKR_LCK6_Msk             (0x1UL << GPIO_LCKR_LCK6_Pos)             /*!< 0x00000040 */
#define GPIO_LCKR_LCK6                 GPIO_LCKR_LCK6_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK7_Pos             (7U)
#define GPIO_LCKR_LCK7_Msk             (0x1UL << GPIO_LCKR_LCK7_Pos)             /*!< 0x00000080 */
#define GPIO_LCKR_LCK7                 GPIO_LCKR_LCK7_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK8_Pos             (8U)
#define GPIO_LCKR_LCK8_Msk             (0x1UL << GPIO_LCKR_LCK8_Pos)             /*!< 0x00000100 */
#define GPIO_LCKR_LCK8                 GPIO_LCKR_LCK8_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK9_Pos             (9U)
#define GPIO_LCKR_LCK9_Msk             (0x1UL << GPIO_LCKR_LCK9_Pos)             /*!< 0x00000200 */
#define GPIO_LCKR_LCK9                 GPIO_LCKR_LCK9_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK10_Pos            (10U)
#define GPIO_LCKR_LCK10_Msk            (0x1UL << GPIO_LCKR_LCK10_Pos)            /*!< 0x00000400 */
#define GPIO_LCKR_LCK10                GPIO_LCKR_LCK10_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK11_Pos            (11U)
#define GPIO_LCKR_LCK11_Msk            (0x1UL << GPIO_LCKR_LCK11_Pos)            /*!< 0x00000800 */
#define GPIO_LCKR_LCK11                GPIO_LCKR_LCK11_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK12_Pos            (12U)
#define GPIO_LCKR_LCK12_Msk            (0x1UL << GPIO_LCKR_LCK12_Pos)            /*!< 0x00001000 */
#define GPIO_LCKR_LCK12                GPIO_LCKR_LCK12_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK13_Pos            (13U)
#define GPIO_LCKR_LCK13_Msk            (0x1UL << GPIO_LCKR_LCK13_Pos)            /*!< 0x00002000 */
#define GPIO_LCKR_LCK13                GPIO_LCKR_LCK13_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK14_Pos            (14U)
#define GPIO_LCKR_LCK14_Msk            (0x1UL << GPIO_LCKR_LCK14_Pos)            /*!< 0x00004000 */
#define GPIO_LCKR_LCK14                GPIO_LCKR_LCK14_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK15_Pos            (15U)
#define GPIO_LCKR_LCK15_Msk            (0x1UL << GPIO_LCKR_LCK15_Pos)            /*!< 0x00008000 */
#define GPIO_LCKR_LCK15                GPIO_LCKR_LCK15_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0Ã¢ÂÂ.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCKK_Pos             (16U)
#define GPIO_LCKR_LCKK_Msk             (0x1UL << GPIO_LCKR_LCKK_Pos)             /*!< 0x00010000 */
#define GPIO_LCKR_LCKK                 GPIO_LCKR_LCKK_Msk                       /*!< Lock key */

/******************  Bit definition for GPIO_AFRL register  *******************/
#define GPIO_AFRL_AFSEL0_Pos           (0U)
#define GPIO_AFRL_AFSEL0_Msk           (0xFUL << GPIO_AFRL_AFSEL0_Pos)           /*!< 0x0000000F */
#define GPIO_AFRL_AFSEL0               GPIO_AFRL_AFSEL0_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL1_Pos           (4U)
#define GPIO_AFRL_AFSEL1_Msk           (0xFUL << GPIO_AFRL_AFSEL1_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRL_AFSEL1               GPIO_AFRL_AFSEL1_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL2_Pos           (8U)
#define GPIO_AFRL_AFSEL2_Msk           (0xFUL << GPIO_AFRL_AFSEL2_Pos)           /*!< 0x00000F00 */
#define GPIO_AFRL_AFSEL2               GPIO_AFRL_AFSEL2_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL3_Pos           (12U)
#define GPIO_AFRL_AFSEL3_Msk           (0xFUL << GPIO_AFRL_AFSEL3_Pos)           /*!< 0x0000F000 */
#define GPIO_AFRL_AFSEL3               GPIO_AFRL_AFSEL3_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL4_Pos           (16U)
#define GPIO_AFRL_AFSEL4_Msk           (0xFUL << GPIO_AFRL_AFSEL4_Pos)           /*!< 0x000F0000 */
#define GPIO_AFRL_AFSEL4               GPIO_AFRL_AFSEL4_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL5_Pos           (20U)
#define GPIO_AFRL_AFSEL5_Msk           (0xFUL << GPIO_AFRL_AFSEL5_Pos)           /*!< 0x00F00000 */
#define GPIO_AFRL_AFSEL5               GPIO_AFRL_AFSEL5_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL6_Pos           (24U)
#define GPIO_AFRL_AFSEL6_Msk           (0xFUL << GPIO_AFRL_AFSEL6_Pos)           /*!< 0x0F000000 */
#define GPIO_AFRL_AFSEL6               GPIO_AFRL_AFSEL6_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL7_Pos           (28U)
#define GPIO_AFRL_AFSEL7_Msk           (0xFUL << GPIO_AFRL_AFSEL7_Pos)           /*!< 0xF0000000 */
#define GPIO_AFRL_AFSEL7               GPIO_AFRL_AFSEL7_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_AFRH register  *******************/
#define GPIO_AFRH_AFSEL8_Pos           (0U)
#define GPIO_AFRH_AFSEL8_Msk           (0xFUL << GPIO_AFRH_AFSEL8_Pos)           /*!< 0x0000000F */
#define GPIO_AFRH_AFSEL8               GPIO_AFRH_AFSEL8_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL9_Pos           (4U)
#define GPIO_AFRH_AFSEL9_Msk           (0xFUL << GPIO_AFRH_AFSEL9_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRH_AFSEL9               GPIO_AFRH_AFSEL9_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL10_Pos          (8U)
#define GPIO_AFRH_AFSEL10_Msk          (0xFUL << GPIO_AFRH_AFSEL10_Pos)          /*!< 0x00000F00 */
#define GPIO_AFRH_AFSEL10              GPIO_AFRH_AFSEL10_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL11_Pos          (12U)
#define GPIO_AFRH_AFSEL11_Msk          (0xFUL << GPIO_AFRH_AFSEL11_Pos)          /*!< 0x0000F000 */
#define GPIO_AFRH_AFSEL11              GPIO_AFRH_AFSEL11_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL12_Pos          (16U)
#define GPIO_AFRH_AFSEL12_Msk          (0xFUL << GPIO_AFRH_AFSEL12_Pos)          /*!< 0x000F0000 */
#define GPIO_AFRH_AFSEL12              GPIO_AFRH_AFSEL12_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL13_Pos          (20U)
#define GPIO_AFRH_AFSEL13_Msk          (0xFUL << GPIO_AFRH_AFSEL13_Pos)          /*!< 0x00F00000 */
#define GPIO_AFRH_AFSEL13              GPIO_AFRH_AFSEL13_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL14_Pos          (24U)
#define GPIO_AFRH_AFSEL14_Msk          (0xFUL << GPIO_AFRH_AFSEL14_Pos)          /*!< 0x0F000000 */
#define GPIO_AFRH_AFSEL14              GPIO_AFRH_AFSEL14_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL15_Pos          (28U)
#define GPIO_AFRH_AFSEL15_Msk          (0xFUL << GPIO_AFRH_AFSEL15_Pos)          /*!< 0xF0000000 */
#define GPIO_AFRH_AFSEL15              GPIO_AFRH_AFSEL15_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_BRR register  *******************/
#define GPIO_BRR_BR0_Pos               (0U)
#define GPIO_BRR_BR0_Msk               (0x1UL << GPIO_BRR_BR0_Pos)               /*!< 0x00000001 */
#define GPIO_BRR_BR0                   GPIO_BRR_BR0_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR1_Pos               (1U)
#define GPIO_BRR_BR1_Msk               (0x1UL << GPIO_BRR_BR1_Pos)               /*!< 0x00000002 */
#define GPIO_BRR_BR1                   GPIO_BRR_BR1_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR2_Pos               (2U)
#define GPIO_BRR_BR2_Msk               (0x1UL << GPIO_BRR_BR2_Pos)               /*!< 0x00000004 */
#define GPIO_BRR_BR2                   GPIO_BRR_BR2_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR3_Pos               (3U)
#define GPIO_BRR_BR3_Msk               (0x1UL << GPIO_BRR_BR3_Pos)               /*!< 0x00000008 */
#define GPIO_BRR_BR3                   GPIO_BRR_BR3_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR4_Pos               (4U)
#define GPIO_BRR_BR4_Msk               (0x1UL << GPIO_BRR_BR4_Pos)               /*!< 0x00000010 */
#define GPIO_BRR_BR4                   GPIO_BRR_BR4_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR5_Pos               (5U)
#define GPIO_BRR_BR5_Msk               (0x1UL << GPIO_BRR_BR5_Pos)               /*!< 0x00000020 */
#define GPIO_BRR_BR5                   GPIO_BRR_BR5_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR6_Pos               (6U)
#define GPIO_BRR_BR6_Msk               (0x1UL << GPIO_BRR_BR6_Pos)               /*!< 0x00000040 */
#define GPIO_BRR_BR6                   GPIO_BRR_BR6_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR7_Pos               (7U)
#define GPIO_BRR_BR7_Msk               (0x1UL << GPIO_BRR_BR7_Pos)               /*!< 0x00000080 */
#define GPIO_BRR_BR7                   GPIO_BRR_BR7_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR8_Pos               (8U)
#define GPIO_BRR_BR8_Msk               (0x1UL << GPIO_BRR_BR8_Pos)               /*!< 0x00000100 */
#define GPIO_BRR_BR8                   GPIO_BRR_BR8_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR9_Pos               (9U)
#define GPIO_BRR_BR9_Msk               (0x1UL << GPIO_BRR_BR9_Pos)               /*!< 0x00000200 */
#define GPIO_BRR_BR9                   GPIO_BRR_BR9_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR10_Pos              (10U)
#define GPIO_BRR_BR10_Msk              (0x1UL << GPIO_BRR_BR10_Pos)              /*!< 0x00000400 */
#define GPIO_BRR_BR10                  GPIO_BRR_BR10_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR11_Pos              (11U)
#define GPIO_BRR_BR11_Msk              (0x1UL << GPIO_BRR_BR11_Pos)              /*!< 0x00000800 */
#define GPIO_BRR_BR11                  GPIO_BRR_BR11_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR12_Pos              (12U)
#define GPIO_BRR_BR12_Msk              (0x1UL << GPIO_BRR_BR12_Pos)              /*!< 0x00001000 */
#define GPIO_BRR_BR12                  GPIO_BRR_BR12_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR13_Pos              (13U)
#define GPIO_BRR_BR13_Msk              (0x1UL << GPIO_BRR_BR13_Pos)              /*!< 0x00002000 */
#define GPIO_BRR_BR13                  GPIO_BRR_BR13_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR14_Pos              (14U)
#define GPIO_BRR_BR14_Msk              (0x1UL << GPIO_BRR_BR14_Pos)              /*!< 0x00004000 */
#define GPIO_BRR_BR14                  GPIO_BRR_BR14_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR15_Pos              (15U)
#define GPIO_BRR_BR15_Msk              (0x1UL << GPIO_BRR_BR15_Pos)              /*!< 0x00008000 */
#define GPIO_BRR_BR15                  GPIO_BRR_BR15_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/*******************  Bit definition for GPIO_OR register  ********************/

/*****************  Bit definition for GPIO_SECCFGR register  *****************/
#define GPIO_SECCFGR_SEC0_Pos          (0U)
#define GPIO_SECCFGR_SEC0_Msk          (0x1UL << GPIO_SECCFGR_SEC0_Pos)          /*!< 0x00000001 */
#define GPIO_SECCFGR_SEC0              GPIO_SECCFGR_SEC0_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC1_Pos          (1U)
#define GPIO_SECCFGR_SEC1_Msk          (0x1UL << GPIO_SECCFGR_SEC1_Pos)          /*!< 0x00000002 */
#define GPIO_SECCFGR_SEC1              GPIO_SECCFGR_SEC1_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC2_Pos          (2U)
#define GPIO_SECCFGR_SEC2_Msk          (0x1UL << GPIO_SECCFGR_SEC2_Pos)          /*!< 0x00000004 */
#define GPIO_SECCFGR_SEC2              GPIO_SECCFGR_SEC2_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC3_Pos          (3U)
#define GPIO_SECCFGR_SEC3_Msk          (0x1UL << GPIO_SECCFGR_SEC3_Pos)          /*!< 0x00000008 */
#define GPIO_SECCFGR_SEC3              GPIO_SECCFGR_SEC3_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC4_Pos          (4U)
#define GPIO_SECCFGR_SEC4_Msk          (0x1UL << GPIO_SECCFGR_SEC4_Pos)          /*!< 0x00000010 */
#define GPIO_SECCFGR_SEC4              GPIO_SECCFGR_SEC4_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC5_Pos          (5U)
#define GPIO_SECCFGR_SEC5_Msk          (0x1UL << GPIO_SECCFGR_SEC5_Pos)          /*!< 0x00000020 */
#define GPIO_SECCFGR_SEC5              GPIO_SECCFGR_SEC5_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC6_Pos          (6U)
#define GPIO_SECCFGR_SEC6_Msk          (0x1UL << GPIO_SECCFGR_SEC6_Pos)          /*!< 0x00000040 */
#define GPIO_SECCFGR_SEC6              GPIO_SECCFGR_SEC6_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC7_Pos          (7U)
#define GPIO_SECCFGR_SEC7_Msk          (0x1UL << GPIO_SECCFGR_SEC7_Pos)          /*!< 0x00000080 */
#define GPIO_SECCFGR_SEC7              GPIO_SECCFGR_SEC7_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC8_Pos          (8U)
#define GPIO_SECCFGR_SEC8_Msk          (0x1UL << GPIO_SECCFGR_SEC8_Pos)          /*!< 0x00000100 */
#define GPIO_SECCFGR_SEC8              GPIO_SECCFGR_SEC8_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC9_Pos          (9U)
#define GPIO_SECCFGR_SEC9_Msk          (0x1UL << GPIO_SECCFGR_SEC9_Pos)          /*!< 0x00000200 */
#define GPIO_SECCFGR_SEC9              GPIO_SECCFGR_SEC9_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC10_Pos         (10U)
#define GPIO_SECCFGR_SEC10_Msk         (0x1UL << GPIO_SECCFGR_SEC10_Pos)         /*!< 0x00000400 */
#define GPIO_SECCFGR_SEC10             GPIO_SECCFGR_SEC10_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC11_Pos         (11U)
#define GPIO_SECCFGR_SEC11_Msk         (0x1UL << GPIO_SECCFGR_SEC11_Pos)         /*!< 0x00000800 */
#define GPIO_SECCFGR_SEC11             GPIO_SECCFGR_SEC11_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC12_Pos         (12U)
#define GPIO_SECCFGR_SEC12_Msk         (0x1UL << GPIO_SECCFGR_SEC12_Pos)         /*!< 0x00001000 */
#define GPIO_SECCFGR_SEC12             GPIO_SECCFGR_SEC12_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC13_Pos         (13U)
#define GPIO_SECCFGR_SEC13_Msk         (0x1UL << GPIO_SECCFGR_SEC13_Pos)         /*!< 0x00002000 */
#define GPIO_SECCFGR_SEC13             GPIO_SECCFGR_SEC13_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC14_Pos         (14U)
#define GPIO_SECCFGR_SEC14_Msk         (0x1UL << GPIO_SECCFGR_SEC14_Pos)         /*!< 0x00004000 */
#define GPIO_SECCFGR_SEC14             GPIO_SECCFGR_SEC14_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC15_Pos         (15U)
#define GPIO_SECCFGR_SEC15_Msk         (0x1UL << GPIO_SECCFGR_SEC15_Pos)         /*!< 0x00008000 */
#define GPIO_SECCFGR_SEC15             GPIO_SECCFGR_SEC15_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_PRIVCFGR register  *****************/
#define GPIO_PRIVCFGR_PRIV0_Pos        (0U)
#define GPIO_PRIVCFGR_PRIV0_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV0_Pos)        /*!< 0x00000001 */
#define GPIO_PRIVCFGR_PRIV0            GPIO_PRIVCFGR_PRIV0_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV1_Pos        (1U)
#define GPIO_PRIVCFGR_PRIV1_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV1_Pos)        /*!< 0x00000002 */
#define GPIO_PRIVCFGR_PRIV1            GPIO_PRIVCFGR_PRIV1_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV2_Pos        (2U)
#define GPIO_PRIVCFGR_PRIV2_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV2_Pos)        /*!< 0x00000004 */
#define GPIO_PRIVCFGR_PRIV2            GPIO_PRIVCFGR_PRIV2_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV3_Pos        (3U)
#define GPIO_PRIVCFGR_PRIV3_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV3_Pos)        /*!< 0x00000008 */
#define GPIO_PRIVCFGR_PRIV3            GPIO_PRIVCFGR_PRIV3_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV4_Pos        (4U)
#define GPIO_PRIVCFGR_PRIV4_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV4_Pos)        /*!< 0x00000010 */
#define GPIO_PRIVCFGR_PRIV4            GPIO_PRIVCFGR_PRIV4_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV5_Pos        (5U)
#define GPIO_PRIVCFGR_PRIV5_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV5_Pos)        /*!< 0x00000020 */
#define GPIO_PRIVCFGR_PRIV5            GPIO_PRIVCFGR_PRIV5_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV6_Pos        (6U)
#define GPIO_PRIVCFGR_PRIV6_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV6_Pos)        /*!< 0x00000040 */
#define GPIO_PRIVCFGR_PRIV6            GPIO_PRIVCFGR_PRIV6_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV7_Pos        (7U)
#define GPIO_PRIVCFGR_PRIV7_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV7_Pos)        /*!< 0x00000080 */
#define GPIO_PRIVCFGR_PRIV7            GPIO_PRIVCFGR_PRIV7_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV8_Pos        (8U)
#define GPIO_PRIVCFGR_PRIV8_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV8_Pos)        /*!< 0x00000100 */
#define GPIO_PRIVCFGR_PRIV8            GPIO_PRIVCFGR_PRIV8_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV9_Pos        (9U)
#define GPIO_PRIVCFGR_PRIV9_Msk        (0x1UL << GPIO_PRIVCFGR_PRIV9_Pos)        /*!< 0x00000200 */
#define GPIO_PRIVCFGR_PRIV9            GPIO_PRIVCFGR_PRIV9_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV10_Pos       (10U)
#define GPIO_PRIVCFGR_PRIV10_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV10_Pos)       /*!< 0x00000400 */
#define GPIO_PRIVCFGR_PRIV10           GPIO_PRIVCFGR_PRIV10_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV11_Pos       (11U)
#define GPIO_PRIVCFGR_PRIV11_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV11_Pos)       /*!< 0x00000800 */
#define GPIO_PRIVCFGR_PRIV11           GPIO_PRIVCFGR_PRIV11_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV12_Pos       (12U)
#define GPIO_PRIVCFGR_PRIV12_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV12_Pos)       /*!< 0x00001000 */
#define GPIO_PRIVCFGR_PRIV12           GPIO_PRIVCFGR_PRIV12_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV13_Pos       (13U)
#define GPIO_PRIVCFGR_PRIV13_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV13_Pos)       /*!< 0x00002000 */
#define GPIO_PRIVCFGR_PRIV13           GPIO_PRIVCFGR_PRIV13_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV14_Pos       (14U)
#define GPIO_PRIVCFGR_PRIV14_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV14_Pos)       /*!< 0x00004000 */
#define GPIO_PRIVCFGR_PRIV14           GPIO_PRIVCFGR_PRIV14_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV15_Pos       (15U)
#define GPIO_PRIVCFGR_PRIV15_Msk       (0x1UL << GPIO_PRIVCFGR_PRIV15_Pos)       /*!< 0x00008000 */
#define GPIO_PRIVCFGR_PRIV15           GPIO_PRIVCFGR_PRIV15_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_RCFGLOCKR register  ****************/
#define GPIO_RCFGLOCKR_RLOCK0_Pos      (0U)
#define GPIO_RCFGLOCKR_RLOCK0_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK0_Pos)      /*!< 0x00000001 */
#define GPIO_RCFGLOCKR_RLOCK0          GPIO_RCFGLOCKR_RLOCK0_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK1_Pos      (1U)
#define GPIO_RCFGLOCKR_RLOCK1_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK1_Pos)      /*!< 0x00000002 */
#define GPIO_RCFGLOCKR_RLOCK1          GPIO_RCFGLOCKR_RLOCK1_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK2_Pos      (2U)
#define GPIO_RCFGLOCKR_RLOCK2_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK2_Pos)      /*!< 0x00000004 */
#define GPIO_RCFGLOCKR_RLOCK2          GPIO_RCFGLOCKR_RLOCK2_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK3_Pos      (3U)
#define GPIO_RCFGLOCKR_RLOCK3_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK3_Pos)      /*!< 0x00000008 */
#define GPIO_RCFGLOCKR_RLOCK3          GPIO_RCFGLOCKR_RLOCK3_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK4_Pos      (4U)
#define GPIO_RCFGLOCKR_RLOCK4_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK4_Pos)      /*!< 0x00000010 */
#define GPIO_RCFGLOCKR_RLOCK4          GPIO_RCFGLOCKR_RLOCK4_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK5_Pos      (5U)
#define GPIO_RCFGLOCKR_RLOCK5_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK5_Pos)      /*!< 0x00000020 */
#define GPIO_RCFGLOCKR_RLOCK5          GPIO_RCFGLOCKR_RLOCK5_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK6_Pos      (6U)
#define GPIO_RCFGLOCKR_RLOCK6_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK6_Pos)      /*!< 0x00000040 */
#define GPIO_RCFGLOCKR_RLOCK6          GPIO_RCFGLOCKR_RLOCK6_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK7_Pos      (7U)
#define GPIO_RCFGLOCKR_RLOCK7_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK7_Pos)      /*!< 0x00000080 */
#define GPIO_RCFGLOCKR_RLOCK7          GPIO_RCFGLOCKR_RLOCK7_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK8_Pos      (8U)
#define GPIO_RCFGLOCKR_RLOCK8_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK8_Pos)      /*!< 0x00000100 */
#define GPIO_RCFGLOCKR_RLOCK8          GPIO_RCFGLOCKR_RLOCK8_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK9_Pos      (9U)
#define GPIO_RCFGLOCKR_RLOCK9_Msk      (0x1UL << GPIO_RCFGLOCKR_RLOCK9_Pos)      /*!< 0x00000200 */
#define GPIO_RCFGLOCKR_RLOCK9          GPIO_RCFGLOCKR_RLOCK9_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK10_Pos     (10U)
#define GPIO_RCFGLOCKR_RLOCK10_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK10_Pos)     /*!< 0x00000400 */
#define GPIO_RCFGLOCKR_RLOCK10         GPIO_RCFGLOCKR_RLOCK10_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK11_Pos     (11U)
#define GPIO_RCFGLOCKR_RLOCK11_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK11_Pos)     /*!< 0x00000800 */
#define GPIO_RCFGLOCKR_RLOCK11         GPIO_RCFGLOCKR_RLOCK11_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK12_Pos     (12U)
#define GPIO_RCFGLOCKR_RLOCK12_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK12_Pos)     /*!< 0x00001000 */
#define GPIO_RCFGLOCKR_RLOCK12         GPIO_RCFGLOCKR_RLOCK12_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK13_Pos     (13U)
#define GPIO_RCFGLOCKR_RLOCK13_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK13_Pos)     /*!< 0x00002000 */
#define GPIO_RCFGLOCKR_RLOCK13         GPIO_RCFGLOCKR_RLOCK13_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK14_Pos     (14U)
#define GPIO_RCFGLOCKR_RLOCK14_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK14_Pos)     /*!< 0x00004000 */
#define GPIO_RCFGLOCKR_RLOCK14         GPIO_RCFGLOCKR_RLOCK14_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK15_Pos     (15U)
#define GPIO_RCFGLOCKR_RLOCK15_Msk     (0x1UL << GPIO_RCFGLOCKR_RLOCK15_Pos)     /*!< 0x00008000 */
#define GPIO_RCFGLOCKR_RLOCK15         GPIO_RCFGLOCKR_RLOCK15_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */

/*******************  Bit definition for GPIO_LKR register  *******************/
#define GPIO_LKR_LK0_Pos               (0U)
#define GPIO_LKR_LK0_Msk               (0x1UL << GPIO_LKR_LK0_Pos)               /*!< 0x00000001 */
#define GPIO_LKR_LK0                   GPIO_LKR_LK0_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK1_Pos               (1U)
#define GPIO_LKR_LK1_Msk               (0x1UL << GPIO_LKR_LK1_Pos)               /*!< 0x00000002 */
#define GPIO_LKR_LK1                   GPIO_LKR_LK1_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK2_Pos               (2U)
#define GPIO_LKR_LK2_Msk               (0x1UL << GPIO_LKR_LK2_Pos)               /*!< 0x00000004 */
#define GPIO_LKR_LK2                   GPIO_LKR_LK2_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK3_Pos               (3U)
#define GPIO_LKR_LK3_Msk               (0x1UL << GPIO_LKR_LK3_Pos)               /*!< 0x00000008 */
#define GPIO_LKR_LK3                   GPIO_LKR_LK3_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK4_Pos               (4U)
#define GPIO_LKR_LK4_Msk               (0x1UL << GPIO_LKR_LK4_Pos)               /*!< 0x00000010 */
#define GPIO_LKR_LK4                   GPIO_LKR_LK4_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK5_Pos               (5U)
#define GPIO_LKR_LK5_Msk               (0x1UL << GPIO_LKR_LK5_Pos)               /*!< 0x00000020 */
#define GPIO_LKR_LK5                   GPIO_LKR_LK5_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK6_Pos               (6U)
#define GPIO_LKR_LK6_Msk               (0x1UL << GPIO_LKR_LK6_Pos)               /*!< 0x00000040 */
#define GPIO_LKR_LK6                   GPIO_LKR_LK6_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK7_Pos               (7U)
#define GPIO_LKR_LK7_Msk               (0x1UL << GPIO_LKR_LK7_Pos)               /*!< 0x00000080 */
#define GPIO_LKR_LK7                   GPIO_LKR_LK7_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK8_Pos               (8U)
#define GPIO_LKR_LK8_Msk               (0x1UL << GPIO_LKR_LK8_Pos)               /*!< 0x00000100 */
#define GPIO_LKR_LK8                   GPIO_LKR_LK8_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK9_Pos               (9U)
#define GPIO_LKR_LK9_Msk               (0x1UL << GPIO_LKR_LK9_Pos)               /*!< 0x00000200 */
#define GPIO_LKR_LK9                   GPIO_LKR_LK9_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK10_Pos              (10U)
#define GPIO_LKR_LK10_Msk              (0x1UL << GPIO_LKR_LK10_Pos)              /*!< 0x00000400 */
#define GPIO_LKR_LK10                  GPIO_LKR_LK10_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK11_Pos              (11U)
#define GPIO_LKR_LK11_Msk              (0x1UL << GPIO_LKR_LK11_Pos)              /*!< 0x00000800 */
#define GPIO_LKR_LK11                  GPIO_LKR_LK11_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK12_Pos              (12U)
#define GPIO_LKR_LK12_Msk              (0x1UL << GPIO_LKR_LK12_Pos)              /*!< 0x00001000 */
#define GPIO_LKR_LK12                  GPIO_LKR_LK12_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK13_Pos              (13U)
#define GPIO_LKR_LK13_Msk              (0x1UL << GPIO_LKR_LK13_Pos)              /*!< 0x00002000 */
#define GPIO_LKR_LK13                  GPIO_LKR_LK13_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK14_Pos              (14U)
#define GPIO_LKR_LK14_Msk              (0x1UL << GPIO_LKR_LK14_Pos)              /*!< 0x00004000 */
#define GPIO_LKR_LK14                  GPIO_LKR_LK14_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK15_Pos              (15U)
#define GPIO_LKR_LK15_Msk              (0x1UL << GPIO_LKR_LK15_Pos)              /*!< 0x00008000 */
#define GPIO_LKR_LK15                  GPIO_LKR_LK15_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRL register  *****************/
#define GPIO_DELAYRL_DLY0_Pos        (0U)
#define GPIO_DELAYRL_DLY0_Msk        (0xFUL << GPIO_DELAYRL_DLY0_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRL_DLY0            GPIO_DELAYRL_DLY0_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY1_Pos        (4U)
#define GPIO_DELAYRL_DLY1_Msk        (0xFUL << GPIO_DELAYRL_DLY1_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRL_DLY1            GPIO_DELAYRL_DLY1_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY2_Pos        (8U)
#define GPIO_DELAYRL_DLY2_Msk        (0xFUL << GPIO_DELAYRL_DLY2_Pos)        /*!< 0x00000F00 */
#define GPIO_DELAYRL_DLY2            GPIO_DELAYRL_DLY2_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY3_Pos        (12U)
#define GPIO_DELAYRL_DLY3_Msk        (0xFUL << GPIO_DELAYRL_DLY3_Pos)        /*!< 0x0000F000 */
#define GPIO_DELAYRL_DLY3            GPIO_DELAYRL_DLY3_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY4_Pos        (16U)
#define GPIO_DELAYRL_DLY4_Msk        (0xFUL << GPIO_DELAYRL_DLY4_Pos)        /*!< 0x000F0000 */
#define GPIO_DELAYRL_DLY4            GPIO_DELAYRL_DLY4_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY5_Pos        (20U)
#define GPIO_DELAYRL_DLY5_Msk        (0xFUL << GPIO_DELAYRL_DLY5_Pos)        /*!< 0x00F00000 */
#define GPIO_DELAYRL_DLY5            GPIO_DELAYRL_DLY5_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY6_Pos        (24U)
#define GPIO_DELAYRL_DLY6_Msk        (0xFUL << GPIO_DELAYRL_DLY6_Pos)        /*!< 0x0F000000 */
#define GPIO_DELAYRL_DLY6            GPIO_DELAYRL_DLY6_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY7_Pos        (28U)
#define GPIO_DELAYRL_DLY7_Msk        (0xFUL << GPIO_DELAYRL_DLY7_Pos)        /*!< 0xF0000000 */
#define GPIO_DELAYRL_DLY7            GPIO_DELAYRL_DLY7_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRH register  *****************/
#define GPIO_DELAYRH_DLY8_Pos        (0U)
#define GPIO_DELAYRH_DLY8_Msk        (0xFUL << GPIO_DELAYRH_DLY8_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRH_DLY8            GPIO_DELAYRH_DLY8_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY9_Pos        (4U)
#define GPIO_DELAYRH_DLY9_Msk        (0xFUL << GPIO_DELAYRH_DLY9_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRH_DLY9            GPIO_DELAYRH_DLY9_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY10_Pos       (8U)
#define GPIO_DELAYRH_DLY10_Msk       (0xFUL << GPIO_DELAYRH_DLY10_Pos)       /*!< 0x00000F00 */
#define GPIO_DELAYRH_DLY10           GPIO_DELAYRH_DLY10_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY11_Pos       (12U)
#define GPIO_DELAYRH_DLY11_Msk       (0xFUL << GPIO_DELAYRH_DLY11_Pos)       /*!< 0x0000F000 */
#define GPIO_DELAYRH_DLY11           GPIO_DELAYRH_DLY11_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY12_Pos       (16U)
#define GPIO_DELAYRH_DLY12_Msk       (0xFUL << GPIO_DELAYRH_DLY12_Pos)       /*!< 0x000F0000 */
#define GPIO_DELAYRH_DLY12           GPIO_DELAYRH_DLY12_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY13_Pos       (20U)
#define GPIO_DELAYRH_DLY13_Msk       (0xFUL << GPIO_DELAYRH_DLY13_Pos)       /*!< 0x00F00000 */
#define GPIO_DELAYRH_DLY13           GPIO_DELAYRH_DLY13_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY14_Pos       (24U)
#define GPIO_DELAYRH_DLY14_Msk       (0xFUL << GPIO_DELAYRH_DLY14_Pos)       /*!< 0x0F000000 */
#define GPIO_DELAYRH_DLY14           GPIO_DELAYRH_DLY14_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY15_Pos       (28U)
#define GPIO_DELAYRH_DLY15_Msk       (0xFUL << GPIO_DELAYRH_DLY15_Pos)       /*!< 0xF0000000 */
#define GPIO_DELAYRH_DLY15           GPIO_DELAYRH_DLY15_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/****************  Bit definition for GPIO_PIOCFGRL register  *****************/
#define GPIO_ADVCFGRL_0_Pos      	(0U)
#define GPIO_ADVCFGRL_0_Msk    	  	(0xFUL << GPIO_ADVCFGRL_0_Pos)      /*!< 0x0000000F */
#define GPIO_ADVCFGRL_0          	GPIO_ADVCFGRL_0_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH0      (0x1UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000001 */
#define GPIO_ADVCFGRL_DE0           (0x2UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000002 */
#define GPIO_ADVCFGRL_INVCLK0       (0x4UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000004 */
#define GPIO_ADVCFGRL_RET0          (0x8UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000008 */
#define GPIO_ADVCFGRL_1_Pos      	(4U)
#define GPIO_ADVCFGRL_1_Msk      	(0xFUL << GPIO_ADVCFGRL_1_Pos)      /*!< 0x000000F0 */
#define GPIO_ADVCFGRL_1          	GPIO_ADVCFGRL_1_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH1      (0x1UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000010 */
#define GPIO_ADVCFGRL_DE1           (0x2UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000020 */
#define GPIO_ADVCFGRL_INVCLK1       (0x4UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000040 */
#define GPIO_ADVCFGRL_RET1          (0x8UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000080 */
#define GPIO_ADVCFGRL_2_Pos      	(8U)
#define GPIO_ADVCFGRL_2_Msk      	(0xFUL << GPIO_ADVCFGRL_2_Pos)      /*!< 0x00000F00 */
#define GPIO_ADVCFGRL_2          	GPIO_ADVCFGRL_2_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH2      (0x1UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000100 */
#define GPIO_ADVCFGRL_DE2           (0x2UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000200 */
#define GPIO_ADVCFGRL_INVCLK2       (0x4UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000400 */
#define GPIO_ADVCFGRL_RET2          (0x8UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000800 */
#define GPIO_ADVCFGRL_3_Pos      	(12U)
#define GPIO_ADVCFGRL_3_Msk      	(0xFUL << GPIO_ADVCFGRL_3_Pos)      /*!< 0x0000F000 */
#define GPIO_ADVCFGRL_3          	GPIO_ADVCFGRL_3_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH3      (0x1UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00001000 */
#define GPIO_ADVCFGRL_DE3           (0x2UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00002000 */
#define GPIO_ADVCFGRL_INVCLK3       (0x4UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00004000 */
#define GPIO_ADVCFGRL_RET3          (0x8UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00008000 */
#define GPIO_ADVCFGRL_4_Pos      	(16U)
#define GPIO_ADVCFGRL_4_Msk      	(0xFUL << GPIO_ADVCFGRL_4_Pos)      /*!< 0x000F0000 */
#define GPIO_ADVCFGRL_4          	GPIO_ADVCFGRL_4_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH4      (0x1UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00010000 */
#define GPIO_ADVCFGRL_DE4           (0x2UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00020000 */
#define GPIO_ADVCFGRL_INVCLK4       (0x4UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00040000 */
#define GPIO_ADVCFGRL_RET4          (0x8UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00080000 */
#define GPIO_ADVCFGRL_5_Pos      	(20U)
#define GPIO_ADVCFGRL_5_Msk      	(0xFUL << GPIO_ADVCFGRL_5_Pos)      /*!< 0x00F00000 */
#define GPIO_ADVCFGRL_5          	GPIO_ADVCFGRL_5_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH5      (0x1UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00100000 */
#define GPIO_ADVCFGRL_DE5           (0x2UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00200000 */
#define GPIO_ADVCFGRL_INVCLK5       (0x4UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00400000 */
#define GPIO_ADVCFGRL_RET5          (0x8UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00800000 */
#define GPIO_ADVCFGRL_6_Pos      	(24U)
#define GPIO_ADVCFGRL_6_Msk      	(0xFUL << GPIO_ADVCFGRL_6_Pos)      /*!< 0x0F000000 */
#define GPIO_ADVCFGRL_6          	GPIO_ADVCFGRL_6_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH6      (0x1UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x01000000 */
#define GPIO_ADVCFGRL_DE6           (0x2UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x02000000 */
#define GPIO_ADVCFGRL_INVCLK6       (0x4UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x04000000 */
#define GPIO_ADVCFGRL_RET6          (0x8UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x08000000 */
#define GPIO_ADVCFGRL_7_Pos      	(28U)
#define GPIO_ADVCFGRL_7_Msk      	(0xFUL << GPIO_ADVCFGRL_7_Pos)      /*!< 0xF0000000 */
#define GPIO_ADVCFGRL_7          	GPIO_ADVCFGRL_7_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH7      (0x1UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x10000000 */
#define GPIO_ADVCFGRL_DE7           (0x2UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x20000000 */
#define GPIO_ADVCFGRL_INVCLK7       (0x4UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x40000000 */
#define GPIO_ADVCFGRL_RET7          (0x8UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x80000000 */

/****************  Bit definition for GPIO_PIOCFGRH register  *****************/
#define GPIO_ADVCFGRH_8_Pos      	(0U)
#define GPIO_ADVCFGRH_8_Msk      	(0xFUL << GPIO_ADVCFGRH_8_Pos)      /*!< 0x0000000F */
#define GPIO_ADVCFGRH_8          	GPIO_ADVCFGRH_8_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH8      (0x1UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000001 */
#define GPIO_ADVCFGRH_DE8           (0x2UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000002 */
#define GPIO_ADVCFGRH_INVCLK8       (0x4UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000004 */
#define GPIO_ADVCFGRH_RET8          (0x8UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000008 */
#define GPIO_ADVCFGRH_9_Pos      	(4U)
#define GPIO_ADVCFGRH_9_Msk      	(0xFUL << GPIO_ADVCFGRH_9_Pos)      /*!< 0x000000F0 */
#define GPIO_ADVCFGRH_9          	GPIO_ADVCFGRH_9_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH9      (0x1UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000010 */
#define GPIO_ADVCFGRH_DE9           (0x2UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000020 */
#define GPIO_ADVCFGRH_INVCLK9       (0x4UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000040 */
#define GPIO_ADVCFGRH_RET9          (0x8UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000080 */
#define GPIO_ADVCFGRH_10_Pos     	(8U)
#define GPIO_ADVCFGRH_10_Msk     	(0xFUL << GPIO_ADVCFGRH_10_Pos)     /*!< 0x00000F00 */
#define GPIO_ADVCFGRH_10         	GPIO_ADVCFGRH_10_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH10     (0x1UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000100 */
#define GPIO_ADVCFGRH_DE10          (0x2UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000200 */
#define GPIO_ADVCFGRH_INVCLK10      (0x4UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000400 */
#define GPIO_ADVCFGRH_RET10         (0x8UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000800 */
#define GPIO_ADVCFGRH_11_Pos     	(12U)
#define GPIO_ADVCFGRH_11_Msk     	(0xFUL << GPIO_ADVCFGRH_11_Pos)     /*!< 0x0000F000 */
#define GPIO_ADVCFGRH_11         	GPIO_ADVCFGRH_11_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH11     (0x1UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00001000 */
#define GPIO_ADVCFGRH_DE11          (0x2UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00002000 */
#define GPIO_ADVCFGRH_INVCLK11      (0x4UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00004000 */
#define GPIO_ADVCFGRH_RET11         (0x8UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00008000 */
#define GPIO_ADVCFGRH_12_Pos    	(16U)
#define GPIO_ADVCFGRH_12_Msk     	(0xFUL << GPIO_ADVCFGRH_12_Pos)     /*!< 0x000F0000 */
#define GPIO_ADVCFGRH_12         	GPIO_ADVCFGRH_12_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH12     (0x1UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00010000 */
#define GPIO_ADVCFGRH_DE12          (0x2UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00020000 */
#define GPIO_ADVCFGRH_INVCLK12      (0x4UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00040000 */
#define GPIO_ADVCFGRH_RET12         (0x8UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00080000 */
#define GPIO_ADVCFGRH_13_Pos     	(20U)
#define GPIO_ADVCFGRH_13_Msk     	(0xFUL << GPIO_ADVCFGRH_13_Pos)     /*!< 0x00F00000 */
#define GPIO_ADVCFGRH_13         	GPIO_ADVCFGRH_13_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH13     (0x1UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00100000 */
#define GPIO_ADVCFGRH_DE13          (0x2UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00200000 */
#define GPIO_ADVCFGRH_INVCLK13      (0x4UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00400000 */
#define GPIO_ADVCFGRH_RET13         (0x8UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00800000 */
#define GPIO_ADVCFGRH_14_Pos     	(24U)
#define GPIO_ADVCFGRH_14_Msk     	(0xFUL << GPIO_ADVCFGRH_14_Pos)     /*!< 0x0F000000 */
#define GPIO_ADVCFGRH_14         	GPIO_ADVCFGRH_14_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH14     (0x1UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x01000000 */
#define GPIO_ADVCFGRH_DE14          (0x2UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x02000000 */
#define GPIO_ADVCFGRH_INVCLK14      (0x4UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x04000000 */
#define GPIO_ADVCFGRH_RET14         (0x8UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x08000000 */
#define GPIO_ADVCFGRH_15_Pos     	(28U)
#define GPIO_ADVCFGRH_15_Msk     	(0xFUL << GPIO_ADVCFGRH_15_Pos)     /*!< 0xF0000000 */
#define GPIO_ADVCFGRH_15         	GPIO_ADVCFGRH_15_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH15     (0x1UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x10000000 */
#define GPIO_ADVCFGRH_DE15          (0x2UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x20000000 */
#define GPIO_ADVCFGRH_INVCLK15      (0x4UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x40000000 */
#define GPIO_ADVCFGRH_RET15         (0x8UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x80000000 */

/****************  Bit definition for GPIO_CIDCFGR0 register  *****************/
#define GPIO_CIDCFGR0_CFEN_Pos         (0U)
#define GPIO_CIDCFGR0_CFEN_Msk         (0x1UL << GPIO_CIDCFGR0_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR0_CFEN             GPIO_CIDCFGR0_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR0_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR0_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR0_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR0_SEM_EN           GPIO_CIDCFGR0_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR0_SCID_Pos         (4U)
#define GPIO_CIDCFGR0_SCID_Msk         (0x3UL << GPIO_CIDCFGR0_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR0_SCID             GPIO_CIDCFGR0_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR0_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR0_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR0_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR0_SEMWLC0          GPIO_CIDCFGR0_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR0_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR0_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR0_SEMWLC1          GPIO_CIDCFGR0_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR0_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR0_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR0_SEMWLC2          GPIO_CIDCFGR0_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR0_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR0_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR0_SEMWLC3          GPIO_CIDCFGR0_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR0 register  ******************/
#define GPIO_SEMCR0_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR0_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR0_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR0_SEM_MUTEX          GPIO_SEMCR0_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR0_SEMCID_Pos         (4U)
#define GPIO_SEMCR0_SEMCID_Msk         (0x3UL << GPIO_SEMCR0_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR0_SEMCID             GPIO_SEMCR0_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR1 register  *****************/
#define GPIO_CIDCFGR1_CFEN_Pos         (0U)
#define GPIO_CIDCFGR1_CFEN_Msk         (0x1UL << GPIO_CIDCFGR1_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR1_CFEN             GPIO_CIDCFGR1_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR1_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR1_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR1_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR1_SEM_EN           GPIO_CIDCFGR1_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR1_SCID_Pos         (4U)
#define GPIO_CIDCFGR1_SCID_Msk         (0x3UL << GPIO_CIDCFGR1_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR1_SCID             GPIO_CIDCFGR1_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR1_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR1_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR1_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR1_SEMWLC0          GPIO_CIDCFGR1_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR1_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR1_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR1_SEMWLC1          GPIO_CIDCFGR1_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR1_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR1_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR1_SEMWLC2          GPIO_CIDCFGR1_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR1_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR1_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR1_SEMWLC3          GPIO_CIDCFGR1_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR1 register  ******************/
#define GPIO_SEMCR1_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR1_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR1_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR1_SEM_MUTEX          GPIO_SEMCR1_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR1_SEMCID_Pos         (4U)
#define GPIO_SEMCR1_SEMCID_Msk         (0x3UL << GPIO_SEMCR1_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR1_SEMCID             GPIO_SEMCR1_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR2 register  *****************/
#define GPIO_CIDCFGR2_CFEN_Pos         (0U)
#define GPIO_CIDCFGR2_CFEN_Msk         (0x1UL << GPIO_CIDCFGR2_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR2_CFEN             GPIO_CIDCFGR2_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR2_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR2_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR2_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR2_SEM_EN           GPIO_CIDCFGR2_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR2_SCID_Pos         (4U)
#define GPIO_CIDCFGR2_SCID_Msk         (0x3UL << GPIO_CIDCFGR2_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR2_SCID             GPIO_CIDCFGR2_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR2_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR2_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR2_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR2_SEMWLC0          GPIO_CIDCFGR2_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR2_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR2_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR2_SEMWLC1          GPIO_CIDCFGR2_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR2_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR2_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR2_SEMWLC2          GPIO_CIDCFGR2_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR2_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR2_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR2_SEMWLC3          GPIO_CIDCFGR2_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR2 register  ******************/
#define GPIO_SEMCR2_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR2_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR2_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR2_SEM_MUTEX          GPIO_SEMCR2_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR2_SEMCID_Pos         (4U)
#define GPIO_SEMCR2_SEMCID_Msk         (0x3UL << GPIO_SEMCR2_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR2_SEMCID             GPIO_SEMCR2_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR3 register  *****************/
#define GPIO_CIDCFGR3_CFEN_Pos         (0U)
#define GPIO_CIDCFGR3_CFEN_Msk         (0x1UL << GPIO_CIDCFGR3_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR3_CFEN             GPIO_CIDCFGR3_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR3_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR3_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR3_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR3_SEM_EN           GPIO_CIDCFGR3_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR3_SCID_Pos         (4U)
#define GPIO_CIDCFGR3_SCID_Msk         (0x3UL << GPIO_CIDCFGR3_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR3_SCID             GPIO_CIDCFGR3_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR3_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR3_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR3_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR3_SEMWLC0          GPIO_CIDCFGR3_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR3_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR3_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR3_SEMWLC1          GPIO_CIDCFGR3_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR3_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR3_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR3_SEMWLC2          GPIO_CIDCFGR3_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR3_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR3_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR3_SEMWLC3          GPIO_CIDCFGR3_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR3 register  ******************/
#define GPIO_SEMCR3_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR3_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR3_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR3_SEM_MUTEX          GPIO_SEMCR3_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR3_SEMCID_Pos         (4U)
#define GPIO_SEMCR3_SEMCID_Msk         (0x3UL << GPIO_SEMCR3_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR3_SEMCID             GPIO_SEMCR3_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR4 register  *****************/
#define GPIO_CIDCFGR4_CFEN_Pos         (0U)
#define GPIO_CIDCFGR4_CFEN_Msk         (0x1UL << GPIO_CIDCFGR4_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR4_CFEN             GPIO_CIDCFGR4_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR4_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR4_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR4_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR4_SEM_EN           GPIO_CIDCFGR4_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR4_SCID_Pos         (4U)
#define GPIO_CIDCFGR4_SCID_Msk         (0x3UL << GPIO_CIDCFGR4_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR4_SCID             GPIO_CIDCFGR4_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR4_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR4_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR4_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR4_SEMWLC0          GPIO_CIDCFGR4_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR4_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR4_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR4_SEMWLC1          GPIO_CIDCFGR4_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR4_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR4_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR4_SEMWLC2          GPIO_CIDCFGR4_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR4_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR4_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR4_SEMWLC3          GPIO_CIDCFGR4_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR4 register  ******************/
#define GPIO_SEMCR4_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR4_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR4_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR4_SEM_MUTEX          GPIO_SEMCR4_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR4_SEMCID_Pos         (4U)
#define GPIO_SEMCR4_SEMCID_Msk         (0x3UL << GPIO_SEMCR4_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR4_SEMCID             GPIO_SEMCR4_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR5 register  *****************/
#define GPIO_CIDCFGR5_CFEN_Pos         (0U)
#define GPIO_CIDCFGR5_CFEN_Msk         (0x1UL << GPIO_CIDCFGR5_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR5_CFEN             GPIO_CIDCFGR5_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR5_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR5_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR5_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR5_SEM_EN           GPIO_CIDCFGR5_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR5_SCID_Pos         (4U)
#define GPIO_CIDCFGR5_SCID_Msk         (0x3UL << GPIO_CIDCFGR5_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR5_SCID             GPIO_CIDCFGR5_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR5_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR5_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR5_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR5_SEMWLC0          GPIO_CIDCFGR5_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR5_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR5_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR5_SEMWLC1          GPIO_CIDCFGR5_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR5_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR5_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR5_SEMWLC2          GPIO_CIDCFGR5_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR5_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR5_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR5_SEMWLC3          GPIO_CIDCFGR5_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR5 register  ******************/
#define GPIO_SEMCR5_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR5_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR5_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR5_SEM_MUTEX          GPIO_SEMCR5_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR5_SEMCID_Pos         (4U)
#define GPIO_SEMCR5_SEMCID_Msk         (0x3UL << GPIO_SEMCR5_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR5_SEMCID             GPIO_SEMCR5_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR6 register  *****************/
#define GPIO_CIDCFGR6_CFEN_Pos         (0U)
#define GPIO_CIDCFGR6_CFEN_Msk         (0x1UL << GPIO_CIDCFGR6_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR6_CFEN             GPIO_CIDCFGR6_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR6_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR6_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR6_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR6_SEM_EN           GPIO_CIDCFGR6_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR6_SCID_Pos         (4U)
#define GPIO_CIDCFGR6_SCID_Msk         (0x3UL << GPIO_CIDCFGR6_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR6_SCID             GPIO_CIDCFGR6_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR6_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR6_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR6_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR6_SEMWLC0          GPIO_CIDCFGR6_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR6_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR6_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR6_SEMWLC1          GPIO_CIDCFGR6_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR6_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR6_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR6_SEMWLC2          GPIO_CIDCFGR6_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR6_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR6_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR6_SEMWLC3          GPIO_CIDCFGR6_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR6 register  ******************/
#define GPIO_SEMCR6_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR6_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR6_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR6_SEM_MUTEX          GPIO_SEMCR6_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR6_SEMCID_Pos         (4U)
#define GPIO_SEMCR6_SEMCID_Msk         (0x3UL << GPIO_SEMCR6_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR6_SEMCID             GPIO_SEMCR6_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR7 register  *****************/
#define GPIO_CIDCFGR7_CFEN_Pos         (0U)
#define GPIO_CIDCFGR7_CFEN_Msk         (0x1UL << GPIO_CIDCFGR7_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR7_CFEN             GPIO_CIDCFGR7_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR7_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR7_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR7_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR7_SEM_EN           GPIO_CIDCFGR7_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR7_SCID_Pos         (4U)
#define GPIO_CIDCFGR7_SCID_Msk         (0x3UL << GPIO_CIDCFGR7_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR7_SCID             GPIO_CIDCFGR7_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR7_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR7_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR7_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR7_SEMWLC0          GPIO_CIDCFGR7_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR7_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR7_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR7_SEMWLC1          GPIO_CIDCFGR7_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR7_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR7_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR7_SEMWLC2          GPIO_CIDCFGR7_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR7_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR7_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR7_SEMWLC3          GPIO_CIDCFGR7_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR7 register  ******************/
#define GPIO_SEMCR7_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR7_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR7_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR7_SEM_MUTEX          GPIO_SEMCR7_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR7_SEMCID_Pos         (4U)
#define GPIO_SEMCR7_SEMCID_Msk         (0x3UL << GPIO_SEMCR7_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR7_SEMCID             GPIO_SEMCR7_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR8 register  *****************/
#define GPIO_CIDCFGR8_CFEN_Pos         (0U)
#define GPIO_CIDCFGR8_CFEN_Msk         (0x1UL << GPIO_CIDCFGR8_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR8_CFEN             GPIO_CIDCFGR8_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR8_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR8_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR8_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR8_SEM_EN           GPIO_CIDCFGR8_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR8_SCID_Pos         (4U)
#define GPIO_CIDCFGR8_SCID_Msk         (0x3UL << GPIO_CIDCFGR8_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR8_SCID             GPIO_CIDCFGR8_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR8_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR8_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR8_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR8_SEMWLC0          GPIO_CIDCFGR8_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR8_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR8_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR8_SEMWLC1          GPIO_CIDCFGR8_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR8_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR8_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR8_SEMWLC2          GPIO_CIDCFGR8_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR8_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR8_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR8_SEMWLC3          GPIO_CIDCFGR8_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR8 register  ******************/
#define GPIO_SEMCR8_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR8_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR8_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR8_SEM_MUTEX          GPIO_SEMCR8_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR8_SEMCID_Pos         (4U)
#define GPIO_SEMCR8_SEMCID_Msk         (0x3UL << GPIO_SEMCR8_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR8_SEMCID             GPIO_SEMCR8_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR9 register  *****************/
#define GPIO_CIDCFGR9_CFEN_Pos         (0U)
#define GPIO_CIDCFGR9_CFEN_Msk         (0x1UL << GPIO_CIDCFGR9_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR9_CFEN             GPIO_CIDCFGR9_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR9_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR9_SEM_EN_Msk       (0x1UL << GPIO_CIDCFGR9_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR9_SEM_EN           GPIO_CIDCFGR9_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR9_SCID_Pos         (4U)
#define GPIO_CIDCFGR9_SCID_Msk         (0x3UL << GPIO_CIDCFGR9_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR9_SCID             GPIO_CIDCFGR9_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR9_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR9_SEMWLC0_Msk      (0x1UL << GPIO_CIDCFGR9_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR9_SEMWLC0          GPIO_CIDCFGR9_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR9_SEMWLC1_Msk      (0x1UL << GPIO_CIDCFGR9_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR9_SEMWLC1          GPIO_CIDCFGR9_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR9_SEMWLC2_Msk      (0x1UL << GPIO_CIDCFGR9_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR9_SEMWLC2          GPIO_CIDCFGR9_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR9_SEMWLC3_Msk      (0x1UL << GPIO_CIDCFGR9_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR9_SEMWLC3          GPIO_CIDCFGR9_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR9 register  ******************/
#define GPIO_SEMCR9_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR9_SEM_MUTEX_Msk      (0x1UL << GPIO_SEMCR9_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR9_SEM_MUTEX          GPIO_SEMCR9_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR9_SEMCID_Pos         (4U)
#define GPIO_SEMCR9_SEMCID_Msk         (0x3UL << GPIO_SEMCR9_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR9_SEMCID             GPIO_SEMCR9_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR10 register  ****************/
#define GPIO_CIDCFGR10_CFEN_Pos        (0U)
#define GPIO_CIDCFGR10_CFEN_Msk        (0x1UL << GPIO_CIDCFGR10_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR10_CFEN            GPIO_CIDCFGR10_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR10_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR10_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR10_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR10_SEM_EN          GPIO_CIDCFGR10_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR10_SCID_Pos        (4U)
#define GPIO_CIDCFGR10_SCID_Msk        (0x3UL << GPIO_CIDCFGR10_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR10_SCID            GPIO_CIDCFGR10_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR10_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR10_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR10_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR10_SEMWLC0         GPIO_CIDCFGR10_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR10_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR10_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR10_SEMWLC1         GPIO_CIDCFGR10_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR10_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR10_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR10_SEMWLC2         GPIO_CIDCFGR10_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR10_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR10_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR10_SEMWLC3         GPIO_CIDCFGR10_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR10 register  *****************/
#define GPIO_SEMCR10_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR10_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR10_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR10_SEM_MUTEX         GPIO_SEMCR10_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR10_SEMCID_Pos        (4U)
#define GPIO_SEMCR10_SEMCID_Msk        (0x3UL << GPIO_SEMCR10_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR10_SEMCID            GPIO_SEMCR10_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR11 register  ****************/
#define GPIO_CIDCFGR11_CFEN_Pos        (0U)
#define GPIO_CIDCFGR11_CFEN_Msk        (0x1UL << GPIO_CIDCFGR11_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR11_CFEN            GPIO_CIDCFGR11_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR11_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR11_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR11_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR11_SEM_EN          GPIO_CIDCFGR11_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR11_SCID_Pos        (4U)
#define GPIO_CIDCFGR11_SCID_Msk        (0x3UL << GPIO_CIDCFGR11_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR11_SCID            GPIO_CIDCFGR11_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR11_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR11_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR11_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR11_SEMWLC0         GPIO_CIDCFGR11_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR11_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR11_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR11_SEMWLC1         GPIO_CIDCFGR11_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR11_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR11_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR11_SEMWLC2         GPIO_CIDCFGR11_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR11_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR11_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR11_SEMWLC3         GPIO_CIDCFGR11_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR11 register  *****************/
#define GPIO_SEMCR11_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR11_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR11_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR11_SEM_MUTEX         GPIO_SEMCR11_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR11_SEMCID_Pos        (4U)
#define GPIO_SEMCR11_SEMCID_Msk        (0x3UL << GPIO_SEMCR11_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR11_SEMCID            GPIO_SEMCR11_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR12 register  ****************/
#define GPIO_CIDCFGR12_CFEN_Pos        (0U)
#define GPIO_CIDCFGR12_CFEN_Msk        (0x1UL << GPIO_CIDCFGR12_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR12_CFEN            GPIO_CIDCFGR12_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR12_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR12_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR12_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR12_SEM_EN          GPIO_CIDCFGR12_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR12_SCID_Pos        (4U)
#define GPIO_CIDCFGR12_SCID_Msk        (0x3UL << GPIO_CIDCFGR12_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR12_SCID            GPIO_CIDCFGR12_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR12_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR12_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR12_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR12_SEMWLC0         GPIO_CIDCFGR12_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR12_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR12_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR12_SEMWLC1         GPIO_CIDCFGR12_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR12_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR12_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR12_SEMWLC2         GPIO_CIDCFGR12_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR12_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR12_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR12_SEMWLC3         GPIO_CIDCFGR12_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR12 register  *****************/
#define GPIO_SEMCR12_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR12_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR12_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR12_SEM_MUTEX         GPIO_SEMCR12_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR12_SEMCID_Pos        (4U)
#define GPIO_SEMCR12_SEMCID_Msk        (0x3UL << GPIO_SEMCR12_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR12_SEMCID            GPIO_SEMCR12_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR13 register  ****************/
#define GPIO_CIDCFGR13_CFEN_Pos        (0U)
#define GPIO_CIDCFGR13_CFEN_Msk        (0x1UL << GPIO_CIDCFGR13_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR13_CFEN            GPIO_CIDCFGR13_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR13_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR13_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR13_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR13_SEM_EN          GPIO_CIDCFGR13_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR13_SCID_Pos        (4U)
#define GPIO_CIDCFGR13_SCID_Msk        (0x3UL << GPIO_CIDCFGR13_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR13_SCID            GPIO_CIDCFGR13_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR13_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR13_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR13_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR13_SEMWLC0         GPIO_CIDCFGR13_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR13_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR13_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR13_SEMWLC1         GPIO_CIDCFGR13_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR13_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR13_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR13_SEMWLC2         GPIO_CIDCFGR13_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR13_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR13_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR13_SEMWLC3         GPIO_CIDCFGR13_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR13 register  *****************/
#define GPIO_SEMCR13_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR13_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR13_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR13_SEM_MUTEX         GPIO_SEMCR13_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR13_SEMCID_Pos        (4U)
#define GPIO_SEMCR13_SEMCID_Msk        (0x3UL << GPIO_SEMCR13_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR13_SEMCID            GPIO_SEMCR13_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR14 register  ****************/
#define GPIO_CIDCFGR14_CFEN_Pos        (0U)
#define GPIO_CIDCFGR14_CFEN_Msk        (0x1UL << GPIO_CIDCFGR14_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR14_CFEN            GPIO_CIDCFGR14_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR14_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR14_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR14_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR14_SEM_EN          GPIO_CIDCFGR14_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR14_SCID_Pos        (4U)
#define GPIO_CIDCFGR14_SCID_Msk        (0x3UL << GPIO_CIDCFGR14_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR14_SCID            GPIO_CIDCFGR14_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR14_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR14_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR14_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR14_SEMWLC0         GPIO_CIDCFGR14_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR14_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR14_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR14_SEMWLC1         GPIO_CIDCFGR14_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR14_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR14_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR14_SEMWLC2         GPIO_CIDCFGR14_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR14_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR14_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR14_SEMWLC3         GPIO_CIDCFGR14_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR14 register  *****************/
#define GPIO_SEMCR14_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR14_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR14_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR14_SEM_MUTEX         GPIO_SEMCR14_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR14_SEMCID_Pos        (4U)
#define GPIO_SEMCR14_SEMCID_Msk        (0x3UL << GPIO_SEMCR14_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR14_SEMCID            GPIO_SEMCR14_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR15 register  ****************/
#define GPIO_CIDCFGR15_CFEN_Pos        (0U)
#define GPIO_CIDCFGR15_CFEN_Msk        (0x1UL << GPIO_CIDCFGR15_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR15_CFEN            GPIO_CIDCFGR15_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR15_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR15_SEM_EN_Msk      (0x1UL << GPIO_CIDCFGR15_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR15_SEM_EN          GPIO_CIDCFGR15_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR15_SCID_Pos        (4U)
#define GPIO_CIDCFGR15_SCID_Msk        (0x3UL << GPIO_CIDCFGR15_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR15_SCID            GPIO_CIDCFGR15_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR15_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR15_SEMWLC0_Msk     (0x1UL << GPIO_CIDCFGR15_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR15_SEMWLC0         GPIO_CIDCFGR15_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR15_SEMWLC1_Msk     (0x1UL << GPIO_CIDCFGR15_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR15_SEMWLC1         GPIO_CIDCFGR15_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR15_SEMWLC2_Msk     (0x1UL << GPIO_CIDCFGR15_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR15_SEMWLC2         GPIO_CIDCFGR15_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR15_SEMWLC3_Msk     (0x1UL << GPIO_CIDCFGR15_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR15_SEMWLC3         GPIO_CIDCFGR15_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR15 register  *****************/
#define GPIO_SEMCR15_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR15_SEM_MUTEX_Msk     (0x1UL << GPIO_SEMCR15_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR15_SEM_MUTEX         GPIO_SEMCR15_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR15_SEMCID_Pos        (4U)
#define GPIO_SEMCR15_SEMCID_Msk        (0x3UL << GPIO_SEMCR15_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR15_SEMCID            GPIO_SEMCR15_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_HWCFGR10 register  *****************/
#define GPIO_HWCFGR10_AHB_IOP_Pos      (0U)
#define GPIO_HWCFGR10_AHB_IOP_Msk      (0xFUL << GPIO_HWCFGR10_AHB_IOP_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR10_AHB_IOP          GPIO_HWCFGR10_AHB_IOP_Msk                /*!< Bus interface configuration */
#define GPIO_HWCFGR10_AFSIZE_CFG_Pos   (4U)
#define GPIO_HWCFGR10_AFSIZE_CFG_Msk   (0xFUL << GPIO_HWCFGR10_AFSIZE_CFG_Pos)   /*!< 0x000000F0 */
#define GPIO_HWCFGR10_AFSIZE_CFG       GPIO_HWCFGR10_AFSIZE_CFG_Msk             /*!< Number of AF available for each I/O */
#define GPIO_HWCFGR10_SPEED_CFG_Pos    (8U)
#define GPIO_HWCFGR10_SPEED_CFG_Msk    (0xFUL << GPIO_HWCFGR10_SPEED_CFG_Pos)    /*!< 0x00000F00 */
#define GPIO_HWCFGR10_SPEED_CFG        GPIO_HWCFGR10_SPEED_CFG_Msk              /*!< Number of speed lines for each I/O */
#define GPIO_HWCFGR10_LOCK_CFG_Pos     (12U)
#define GPIO_HWCFGR10_LOCK_CFG_Msk     (0xFUL << GPIO_HWCFGR10_LOCK_CFG_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR10_LOCK_CFG         GPIO_HWCFGR10_LOCK_CFG_Msk               /*!< Lock mechanism activation */
#define GPIO_HWCFGR10_SEC_CFG_Pos      (16U)
#define GPIO_HWCFGR10_SEC_CFG_Msk      (0xFUL << GPIO_HWCFGR10_SEC_CFG_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR10_SEC_CFG          GPIO_HWCFGR10_SEC_CFG_Msk                /*!< Security activation */
#define GPIO_HWCFGR10_OR_CFG_Pos       (20U)
#define GPIO_HWCFGR10_OR_CFG_Msk       (0xFUL << GPIO_HWCFGR10_OR_CFG_Pos)       /*!< 0x00F00000 */
#define GPIO_HWCFGR10_OR_CFG           GPIO_HWCFGR10_OR_CFG_Msk                 /*!< Option register configuration */

/*****************  Bit definition for GPIO_HWCFGR9 register  *****************/
#define GPIO_HWCFGR9_EN_IO_Pos         (0U)
#define GPIO_HWCFGR9_EN_IO_Msk         (0xFFFFUL << GPIO_HWCFGR9_EN_IO_Pos)      /*!< 0x0000FFFF */
#define GPIO_HWCFGR9_EN_IO             GPIO_HWCFGR9_EN_IO_Msk                   /*!< Presence granularity, each bit indicate the presence of the IO */

/*****************  Bit definition for GPIO_HWCFGR8 register  *****************/
#define GPIO_HWCFGR8_AF_PRIO8_Pos      (0U)
#define GPIO_HWCFGR8_AF_PRIO8_Msk      (0xFUL << GPIO_HWCFGR8_AF_PRIO8_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR8_AF_PRIO8          GPIO_HWCFGR8_AF_PRIO8_Msk                /*!< Indicate the priority AF for I/O8 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO9_Pos      (4U)
#define GPIO_HWCFGR8_AF_PRIO9_Msk      (0xFUL << GPIO_HWCFGR8_AF_PRIO9_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR8_AF_PRIO9          GPIO_HWCFGR8_AF_PRIO9_Msk                /*!< Indicate the priority AF for I/O9 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO10_Pos     (8U)
#define GPIO_HWCFGR8_AF_PRIO10_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO10_Pos)     /*!< 0x00000F00 */
#define GPIO_HWCFGR8_AF_PRIO10         GPIO_HWCFGR8_AF_PRIO10_Msk               /*!< Indicate the priority AF for I/O10 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO11_Pos     (12U)
#define GPIO_HWCFGR8_AF_PRIO11_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO11_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR8_AF_PRIO11         GPIO_HWCFGR8_AF_PRIO11_Msk               /*!< Indicate the priority AF for I/O11 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO12_Pos     (16U)
#define GPIO_HWCFGR8_AF_PRIO12_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO12_Pos)     /*!< 0x000F0000 */
#define GPIO_HWCFGR8_AF_PRIO12         GPIO_HWCFGR8_AF_PRIO12_Msk               /*!< Indicate the priority AF for I/O12 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO13_Pos     (20U)
#define GPIO_HWCFGR8_AF_PRIO13_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO13_Pos)     /*!< 0x00F00000 */
#define GPIO_HWCFGR8_AF_PRIO13         GPIO_HWCFGR8_AF_PRIO13_Msk               /*!< Indicate the priority AF for I/O13 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO14_Pos     (24U)
#define GPIO_HWCFGR8_AF_PRIO14_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO14_Pos)     /*!< 0x0F000000 */
#define GPIO_HWCFGR8_AF_PRIO14         GPIO_HWCFGR8_AF_PRIO14_Msk               /*!< Indicate the priority AF for I/O14 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO15_Pos     (28U)
#define GPIO_HWCFGR8_AF_PRIO15_Msk     (0xFUL << GPIO_HWCFGR8_AF_PRIO15_Pos)     /*!< 0xF0000000 */
#define GPIO_HWCFGR8_AF_PRIO15         GPIO_HWCFGR8_AF_PRIO15_Msk               /*!< Indicate the priority AF for I/O15 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR7 register  *****************/
#define GPIO_HWCFGR7_AF_PRIO0_Pos      (0U)
#define GPIO_HWCFGR7_AF_PRIO0_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO0_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR7_AF_PRIO0          GPIO_HWCFGR7_AF_PRIO0_Msk                /*!< Indicate the priority AF for I/O0 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO1_Pos      (4U)
#define GPIO_HWCFGR7_AF_PRIO1_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO1_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR7_AF_PRIO1          GPIO_HWCFGR7_AF_PRIO1_Msk                /*!< Indicate the priority AF for I/O1 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO2_Pos      (8U)
#define GPIO_HWCFGR7_AF_PRIO2_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO2_Pos)      /*!< 0x00000F00 */
#define GPIO_HWCFGR7_AF_PRIO2          GPIO_HWCFGR7_AF_PRIO2_Msk                /*!< Indicate the priority AF for I/O2 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO3_Pos      (12U)
#define GPIO_HWCFGR7_AF_PRIO3_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO3_Pos)      /*!< 0x0000F000 */
#define GPIO_HWCFGR7_AF_PRIO3          GPIO_HWCFGR7_AF_PRIO3_Msk                /*!< Indicate the priority AF for I/O3 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO4_Pos      (16U)
#define GPIO_HWCFGR7_AF_PRIO4_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO4_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR7_AF_PRIO4          GPIO_HWCFGR7_AF_PRIO4_Msk                /*!< Indicate the priority AF for I/O4 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO5_Pos      (20U)
#define GPIO_HWCFGR7_AF_PRIO5_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO5_Pos)      /*!< 0x00F00000 */
#define GPIO_HWCFGR7_AF_PRIO5          GPIO_HWCFGR7_AF_PRIO5_Msk                /*!< Indicate the priority AF for I/O5 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO6_Pos      (24U)
#define GPIO_HWCFGR7_AF_PRIO6_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO6_Pos)      /*!< 0x0F000000 */
#define GPIO_HWCFGR7_AF_PRIO6          GPIO_HWCFGR7_AF_PRIO6_Msk                /*!< Indicate the priority AF for I/O6 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO7_Pos      (28U)
#define GPIO_HWCFGR7_AF_PRIO7_Msk      (0xFUL << GPIO_HWCFGR7_AF_PRIO7_Pos)      /*!< 0xF0000000 */
#define GPIO_HWCFGR7_AF_PRIO7          GPIO_HWCFGR7_AF_PRIO7_Msk                /*!< Indicate the priority AF for I/O7 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR6 register  *****************/
#define GPIO_HWCFGR6_MODER_RES_Pos     (0U)
#define GPIO_HWCFGR6_MODER_RES_Msk     (0xFFFFFFFFUL << GPIO_HWCFGR6_MODER_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR6_MODER_RES         GPIO_HWCFGR6_MODER_RES_Msk               /*!< MODER register reset value */

/*****************  Bit definition for GPIO_HWCFGR5 register  *****************/
#define GPIO_HWCFGR5_PUPDR_RES_Pos     (0U)
#define GPIO_HWCFGR5_PUPDR_RES_Msk     (0xFFFFFFFFUL << GPIO_HWCFGR5_PUPDR_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR5_PUPDR_RES         GPIO_HWCFGR5_PUPDR_RES_Msk               /*!< Pull-up / pull-down register reset value */

/*****************  Bit definition for GPIO_HWCFGR4 register  *****************/
#define GPIO_HWCFGR4_OSPEED_RES_Pos    (0U)
#define GPIO_HWCFGR4_OSPEED_RES_Msk    (0xFFFFFFFFUL << GPIO_HWCFGR4_OSPEED_RES_Pos)   /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR4_OSPEED_RES        GPIO_HWCFGR4_OSPEED_RES_Msk              /*!< OSPEED register reset value */

/*****************  Bit definition for GPIO_HWCFGR3 register  *****************/
#define GPIO_HWCFGR3_ODR_RES_Pos       (0U)
#define GPIO_HWCFGR3_ODR_RES_Msk       (0xFFFFUL << GPIO_HWCFGR3_ODR_RES_Pos)    /*!< 0x0000FFFF */
#define GPIO_HWCFGR3_ODR_RES           GPIO_HWCFGR3_ODR_RES_Msk                 /*!< Output data register reset value */
#define GPIO_HWCFGR3_OTYPER_RES_Pos    (16U)
#define GPIO_HWCFGR3_OTYPER_RES_Msk    (0xFFFFUL << GPIO_HWCFGR3_OTYPER_RES_Pos) /*!< 0xFFFF0000 */
#define GPIO_HWCFGR3_OTYPER_RES        GPIO_HWCFGR3_OTYPER_RES_Msk              /*!< Output type register reset value */

/*****************  Bit definition for GPIO_HWCFGR2 register  *****************/
#define GPIO_HWCFGR2_AFRL_RES_Pos      (0U)
#define GPIO_HWCFGR2_AFRL_RES_Msk      (0xFFFFFFFFUL << GPIO_HWCFGR2_AFRL_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR2_AFRL_RES          GPIO_HWCFGR2_AFRL_RES_Msk                /*!< AF register low reset value */

/*****************  Bit definition for GPIO_HWCFGR1 register  *****************/
#define GPIO_HWCFGR1_AFRH_RES_Pos      (0U)
#define GPIO_HWCFGR1_AFRH_RES_Msk      (0xFFFFFFFFUL << GPIO_HWCFGR1_AFRH_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR1_AFRH_RES          GPIO_HWCFGR1_AFRH_RES_Msk                /*!< AF register high reset value */

/*****************  Bit definition for GPIO_HWCFGR0 register  *****************/
#define GPIO_HWCFGR0_OR_RES_Pos        (0U)
#define GPIO_HWCFGR0_OR_RES_Msk        (0xFFFFUL << GPIO_HWCFGR0_OR_RES_Pos)     /*!< 0x0000FFFF */
#define GPIO_HWCFGR0_OR_RES            GPIO_HWCFGR0_OR_RES_Msk                  /*!< Option register reset value */

/******************  Bit definition for GPIO_VERR register  *******************/
#define GPIO_VERR_MINREV_Pos           (0U)
#define GPIO_VERR_MINREV_Msk           (0xFUL << GPIO_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define GPIO_VERR_MINREV               GPIO_VERR_MINREV_Msk                     /*!< Minor revision */
#define GPIO_VERR_MAJREV_Pos           (4U)
#define GPIO_VERR_MAJREV_Msk           (0xFUL << GPIO_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define GPIO_VERR_MAJREV               GPIO_VERR_MAJREV_Msk                     /*!< Major revision */

/******************  Bit definition for GPIO_IPIDR register  ******************/
#define GPIO_IPIDR_IPID_Pos            (0U)
#define GPIO_IPIDR_IPID_Msk            (0xFFFFFFFFUL << GPIO_IPIDR_IPID_Pos)     /*!< 0xFFFFFFFF */
#define GPIO_IPIDR_IPID                GPIO_IPIDR_IPID_Msk                      /*!< IP identifier */

/******************  Bit definition for GPIO_SIDR register  *******************/
#define GPIO_SIDR_SID_Pos              (0U)
#define GPIO_SIDR_SID_Msk              (0xFFFFFFFFUL << GPIO_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define GPIO_SIDR_SID                  GPIO_SIDR_SID_Msk                        /*!< Size identifier */

/******************************************************************************/
/*                                                                            */
/*                                  (GICV2M)                                  */
/*                                                                            */
/******************************************************************************/
/*****************  Bit definition for GICV2M_TYPER register  *****************/
#define GICV2M_TYPER_NUMBER_OF_SPIS_Pos         (0U)
#define GICV2M_TYPER_NUMBER_OF_SPIS_Msk         (0x3FFUL << GICV2M_TYPER_NUMBER_OF_SPIS_Pos)      /*!< 0x000003FF */
#define GICV2M_TYPER_NUMBER_OF_SPIS             GICV2M_TYPER_NUMBER_OF_SPIS_Msk      /*!< Returns the number-1 of contiguous SPIs assigned to the frame */
#define GICV2M_TYPER_BASE_SPI_NUMBER_Pos        (16U)
#define GICV2M_TYPER_BASE_SPI_NUMBER_Msk        (0x3FFUL << GICV2M_TYPER_BASE_SPI_NUMBER_Pos)       /*!< 0x03FF0000 */
#define GICV2M_TYPER_BASE_SPI_NUMBER            GICV2M_TYPER_BASE_SPI_NUMBER_Msk     /*!< Returns the lowest SPI ID assigned to the frame */

/****************  Bit definition for GICV2M_SETSPI register  *****************/
#define GICV2M_SETSPI_SPI_NUM_Pos               (0U)
#define GICV2M_SETSPI_SPI_NUM_Msk               (0x3FFUL << GICV2M_SETSPI_SPI_NUM_Pos)/*!< 0x000003FF */
#define GICV2M_SETSPI_SPI_NUM                   GICV2M_SETSPI_SPI_NUM_Msk            /*!< On a write, an edge-triggered interrupt is generated to the GIC for an SPI with the ID identified b */

/***************  Bit definition for GICV2M_MISC_CTRL register  ***************/
#define GICV2M_MISC_CTRL_SPI_MERGED_Pos         (1U)
#define GICV2M_MISC_CTRL_SPI_MERGED_Msk         (0x1UL << GICV2M_MISC_CTRL_SPI_MERGED_Pos)    /*!< 0x00000002 */
#define GICV2M_MISC_CTRL_SPI_MERGED             GICV2M_MISC_CTRL_SPI_MERGED_Msk      /*!<  */

/*****************  Bit definition for GICV2M_IIDR register  ******************/
#define GICV2M_IIDR_IMPLEMENTER_Pos             (0U)
#define GICV2M_IIDR_IMPLEMENTER_Msk             (0xFFFUL << GICV2M_IIDR_IMPLEMENTER_Pos)  /*!< 0x00000FFF */
#define GICV2M_IIDR_IMPLEMENTER                 GICV2M_IIDR_IMPLEMENTER_Msk          /*!< JEP106 code of the company that implements the GICV2M */
#define GICV2M_IIDR_REVISION_Pos                (12U)
#define GICV2M_IIDR_REVISION_Msk                (0xFUL << GICV2M_IIDR_REVISION_Pos)   /*!< 0x0000F000 */
#define GICV2M_IIDR_REVISION                    GICV2M_IIDR_REVISION_Msk             /*!< Revision number for the component */
#define GICV2M_IIDR_ARCH_VERSION_Pos            (16U)
#define GICV2M_IIDR_ARCH_VERSION_Msk            (0xFUL << GICV2M_IIDR_ARCH_VERSION_Pos) /*!< 0x000F0000 */
#define GICV2M_IIDR_ARCH_VERSION                GICV2M_IIDR_ARCH_VERSION_Msk         /*!< GICV2M architecture version */
#define GICV2M_IIDR_PRODUCT_ID_Pos              (20U)
#define GICV2M_IIDR_PRODUCT_ID_Msk              (0xFFFUL << GICV2M_IIDR_PRODUCT_ID_Pos) /*!< 0xFFF00000 */
#define GICV2M_IIDR_PRODUCT_ID                  GICV2M_IIDR_PRODUCT_ID_Msk           /*!< Product identifier */

/******************************************************************************/
/*                                                                            */
/*                                    HASH                                    */
/*                                                                            */
/******************************************************************************/
/******************  c7amba_hash1@v3_0                     ********************/

/******************  Bits definition for HASH_CR register  ********************/
#define HASH_CR_INIT_Pos          (2U)
#define HASH_CR_INIT_Msk          (0x1UL << HASH_CR_INIT_Pos)                   /*!< 0x00000004 */
#define HASH_CR_INIT              HASH_CR_INIT_Msk                             /*!< Initialize message digest calculation */
#define HASH_CR_DMAE_Pos          (3U)
#define HASH_CR_DMAE_Msk          (0x1UL << HASH_CR_DMAE_Pos)                   /*!< 0x00000008 */
#define HASH_CR_DMAE              HASH_CR_DMAE_Msk                             /*!< DMA enable */
#define HASH_CR_DATATYPE_Pos      (4U)
#define HASH_CR_DATATYPE_Msk      (0x3UL << HASH_CR_DATATYPE_Pos)               /*!< 0x00000030 */
#define HASH_CR_DATATYPE          HASH_CR_DATATYPE_Msk                         /*!< Data type selection */
#define HASH_CR_DATATYPE_0        (0x1UL << HASH_CR_DATATYPE_Pos)               /*!< 0x00000010 */
#define HASH_CR_DATATYPE_1        (0x2UL << HASH_CR_DATATYPE_Pos)               /*!< 0x00000020 */
#define HASH_CR_MODE_Pos          (6U)                                         
#define HASH_CR_MODE_Msk          (0x1UL << HASH_CR_MODE_Pos)                   /*!< 0x00000040 */
#define HASH_CR_MODE              HASH_CR_MODE_Msk                             /*!< Mode selection */
#define HASH_CR_ALGO_0            (0x1UL << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_1            (0x2UL << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_2            (0x4UL << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO_3            (0x8UL << HASH_CR_ALGO_Pos)
#define HASH_CR_NBW_Pos           (8U)
#define HASH_CR_NBW_Msk           (0xFUL << HASH_CR_NBW_Pos)                    /*!< 0x00000F00 */
#define HASH_CR_NBW               HASH_CR_NBW_Msk                              /*!< Number of words already pushed */
#define HASH_CR_NBW_0             (0x1UL << HASH_CR_NBW_Pos)                    /*!< 0x00000100 */
#define HASH_CR_NBW_1             (0x2UL << HASH_CR_NBW_Pos)                    /*!< 0x00000200 */
#define HASH_CR_NBW_2             (0x4UL << HASH_CR_NBW_Pos)                    /*!< 0x00000400 */
#define HASH_CR_NBW_3             (0x8UL << HASH_CR_NBW_Pos)                    /*!< 0x00000800 */
#define HASH_CR_DINNE_Pos         (12U)
#define HASH_CR_DINNE_Msk         (0x1UL << HASH_CR_DINNE_Pos)                  /*!< 0x00001000 */
#define HASH_CR_DINNE             HASH_CR_DINNE_Msk                            /*!< DIN not empty */
#define HASH_CR_MDMAT_Pos         (13U)
#define HASH_CR_MDMAT_Msk         (0x1UL << HASH_CR_MDMAT_Pos)                 /*!< 0x00002000 */
#define HASH_CR_MDMAT             HASH_CR_MDMAT_Msk                            /*!< Multiple DMA transfers */
#define HASH_CR_LKEY_Pos          (16U)
#define HASH_CR_LKEY_Msk          (0x1UL << HASH_CR_LKEY_Pos)                   /*!< 0x00010000 */
#define HASH_CR_LKEY              HASH_CR_LKEY_Msk                             /*!< Long key selection */
#define HASH_CR_ALGO_Pos          (17U)
#define HASH_CR_ALGO_Msk          (0xFUL << HASH_CR_ALGO_Pos)
#define HASH_CR_ALGO              HASH_CR_ALGO_Msk                             /*!< Algorithm selection */

/*******************  Bit definition for HASH_DIN register  *******************/
#define HASH_DIN_DATAIN_Pos          (0U)
#define HASH_DIN_DATAIN_Msk          (0xFFFFFFFFUL << HASH_DIN_DATAIN_Pos)      /*!< 0xFFFFFFFF */
#define HASH_DIN_DATAIN              HASH_DIN_DATAIN_Msk                       /*!< Data input */

/******************  Bits definition for HASH_STR register  *******************/
#define HASH_STR_NBLW_Pos         (0U)
#define HASH_STR_NBLW_Msk         (0x1FUL << HASH_STR_NBLW_Pos)                 /*!< 0x0000001F */
#define HASH_STR_NBLW             HASH_STR_NBLW_Msk                            /*!< Number of valid bits in the last word */
#define HASH_STR_NBLW_0           (0x01UL << HASH_STR_NBLW_Pos)                 /*!< 0x00000001 */
#define HASH_STR_NBLW_1           (0x02UL << HASH_STR_NBLW_Pos)                 /*!< 0x00000002 */
#define HASH_STR_NBLW_2           (0x04UL << HASH_STR_NBLW_Pos)                 /*!< 0x00000004 */
#define HASH_STR_NBLW_3           (0x08UL << HASH_STR_NBLW_Pos)                 /*!< 0x00000008 */
#define HASH_STR_NBLW_4           (0x10UL << HASH_STR_NBLW_Pos)                 /*!< 0x00000010 */
#define HASH_STR_DCAL_Pos         (8U)
#define HASH_STR_DCAL_Msk         (0x1UL << HASH_STR_DCAL_Pos)                  /*!< 0x00000100 */
#define HASH_STR_DCAL             HASH_STR_DCAL_Msk                            /*!< Digest calculation */

/******************  Bits definition for HASH_IMR register  *******************/
#define HASH_IMR_DINIE_Pos        (0U)
#define HASH_IMR_DINIE_Msk        (0x1UL << HASH_IMR_DINIE_Pos)                 /*!< 0x00000001 */
#define HASH_IMR_DINIE            HASH_IMR_DINIE_Msk                           /*!< Data input interrupt enable */
#define HASH_IMR_DCIE_Pos         (1U)
#define HASH_IMR_DCIE_Msk         (0x1UL << HASH_IMR_DCIE_Pos)                  /*!< 0x00000002 */
#define HASH_IMR_DCIE             HASH_IMR_DCIE_Msk                            /*!< Digest calculation completion interrupt enable */

/******************  Bits definition for HASH_SR register  ********************/
#define HASH_SR_DINIS_Pos         (0U)
#define HASH_SR_DINIS_Msk         (0x1UL << HASH_SR_DINIS_Pos)                  /*!< 0x00000001 */
#define HASH_SR_DINIS             HASH_SR_DINIS_Msk                            /*!< Data input interrupt status */
#define HASH_SR_DCIS_Pos          (1U)
#define HASH_SR_DCIS_Msk          (0x1UL << HASH_SR_DCIS_Pos)                   /*!< 0x00000002 */
#define HASH_SR_DCIS              HASH_SR_DCIS_Msk                             /*!< Digest calculation completion interrupt status */
#define HASH_SR_DMAS_Pos          (2U)
#define HASH_SR_DMAS_Msk          (0x1UL << HASH_SR_DMAS_Pos)                   /*!< 0x00000004 */
#define HASH_SR_DMAS              HASH_SR_DMAS_Msk                             /*!< DMA Status */
#define HASH_SR_BUSY_Pos          (3U)
#define HASH_SR_BUSY_Msk          (0x1UL << HASH_SR_BUSY_Pos)                   /*!< 0x00000008 */
#define HASH_SR_BUSY              HASH_SR_BUSY_Msk                             /*!< Busy bit */
#define HASH_SR_NBWP_Pos          (9U)
#define HASH_SR_NBWP_Msk          (0x3FUL << HASH_SR_NBWP_Pos)                  /*!< 0x00007E00 */
#define HASH_SR_NBWP              HASH_SR_NBWP_Msk                             /*!< Number of words already pushed */
#define HASH_SR_DINNE_Pos         (15U)
#define HASH_SR_DINNE_Msk         (0x1UL << HASH_SR_DINNE_Pos)                  /*!< 0x00008000 */
#define HASH_SR_DINNE             HASH_SR_DINNE_Msk                            /*!< DIN not empty */
#define HASH_SR_NBWE_Pos          (16U)
#define HASH_SR_NBWE_Msk          (0x3FUL << HASH_SR_NBWE_Pos)                  /*!< 0x003F0000 */
#define HASH_SR_NBWE              HASH_SR_NBWE_Msk                             /*!< Number of words expected */

/**************  Bit definition for HASH_HWCFGR register  ***************/
#define HASH_HWCFGR_CFG1_Pos         (0U)
#define HASH_HWCFGR_CFG1_Msk         (0xFUL << HASH_HWCFGR_CFG1_Pos)            /*!< 0x0000000F */
#define HASH_HWCFGR_CFG1             HASH_HWCFGR_CFG1_Msk                      /*!< HW Generic 1 */
#define HASH_HWCFGR_CFG2_Pos         (4U)
#define HASH_HWCFGR_CFG2_Msk         (0xFUL << HASH_HWCFGR_CFG2_Pos)            /*!< 0x000000F0 */
#define HASH_HWCFGR_CFG2             HASH_HWCFGR_CFG2_Msk                      /*!< HW Generic 2 */
#define HASH_HWCFGR_CFG3_Pos         (8U)
#define HASH_HWCFGR_CFG3_Msk         (0xFUL << HASH_HWCFGR_CFG3_Pos)            /*!< 0x00000F00 */
#define HASH_HWCFGR_CFG3             HASH_HWCFGR_CFG3_Msk                      /*!< HW Generic 3 */
#define HASH_HWCFGR_CFG4_Pos         (12U)
#define HASH_HWCFGR_CFG4_Msk         (0xFUL << HASH_HWCFGR_CFG4_Pos)            /*!< 0x0000F000 */
#define HASH_HWCFGR_CFG4             HASH_HWCFGR_CFG4_Msk                      /*!< HW Generic 4 */
#define HASH_HWCFGR_CFG5_Pos         (16U)
#define HASH_HWCFGR_CFG5_Msk         (0xFUL << HASH_HWCFGR_CFG5_Pos)            /*!< 0x000F0000 */
#define HASH_HWCFGR_CFG5             HASH_HWCFGR_CFG5_Msk                      /*!< HW Generic 5 */

/***************  Bit definition for HASH_VERR register  ****************/
#define HASH_VERR_MINREV_Pos         (0U)
#define HASH_VERR_MINREV_Msk         (0xFUL << HASH_VERR_MINREV_Pos)            /*!< 0x0000000F */
#define HASH_VERR_MINREV             HASH_VERR_MINREV_Msk                      /*!< Minor revision */
#define HASH_VERR_MAJREV_Pos         (4U)
#define HASH_VERR_MAJREV_Msk         (0xFUL << HASH_VERR_MAJREV_Pos)            /*!< 0x000000F0 */
#define HASH_VERR_MAJREV             HASH_VERR_MAJREV_Msk                      /*!< Major revision */

/******************  Bit definition for HASH_IPIDR register  ******************/
#define HASH_IPIDR_ID_Pos            (0U)
#define HASH_IPIDR_ID_Msk            (0xFFFFFFFFUL << HASH_IPIDR_ID_Pos)        /*!< 0xFFFFFFFF */
#define HASH_IPIDR_ID                HASH_IPIDR_ID_Msk                         /*!< Identifier */

/******************  Bit definition for HASH_SIDR register  *******************/
#define HASH_SIDR_SID_Pos            (0U)
#define HASH_SIDR_SID_Msk            (0xFFFFFFFFUL << HASH_SIDR_SID_Pos)        /*!< 0xFFFFFFFF */
#define HASH_SIDR_SID                HASH_SIDR_SID_Msk                         /*!< Size identification code */

/******************************************************************************/
/*                                                                            */
/*                                    (HDP)                                   */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for HDP_CTRL register  *******************/
#define HDP_CTRL_EN_Pos             (0U)
#define HDP_CTRL_EN_Msk             (0x1UL << HDP_CTRL_EN_Pos)               /*!< 0x00000001 */
#define HDP_CTRL_EN                 HDP_CTRL_EN_Msk                         /*!< Enable HDP, valid if enabled in BSEC */

/*******************  Bit definition for HDP_MUX register  ********************/
#define HDP_MUX_MUX0_Pos          (0U)
#define HDP_MUX_MUX0_Msk          (0xFUL << HDP_MUX_MUX0_Pos)                /*!< 0x0000000F */
#define HDP_MUX_MUX0              HDP_MUX_MUX0_Msk                          /*!< Select the HDP0 output among the 16 available signals */
#define HDP_MUX_MUX0_0            (0x1UL << HDP_MUX_MUX0_Pos)                /*!< 0x00000001 */
#define HDP_MUX_MUX0_1            (0x2UL << HDP_MUX_MUX0_Pos)                /*!< 0x00000002 */
#define HDP_MUX_MUX0_2            (0x4UL << HDP_MUX_MUX0_Pos)                /*!< 0x00000004 */
#define HDP_MUX_MUX0_3            (0x8UL << HDP_MUX_MUX0_Pos)                /*!< 0x00000008 */
#define HDP_MUX_MUX1_Pos          (4U)
#define HDP_MUX_MUX1_Msk          (0xFUL << HDP_MUX_MUX1_Pos)                /*!< 0x000000F0 */
#define HDP_MUX_MUX1              HDP_MUX_MUX1_Msk                          /*!< Select the HDP1 output among the 16 available signals */
#define HDP_MUX_MUX1_0            (0x1UL << HDP_MUX_MUX1_Pos)                /*!< 0x00000010 */
#define HDP_MUX_MUX1_1            (0x2UL << HDP_MUX_MUX1_Pos)                /*!< 0x00000020 */
#define HDP_MUX_MUX1_2            (0x4UL << HDP_MUX_MUX1_Pos)                /*!< 0x00000040 */
#define HDP_MUX_MUX1_3            (0x8UL << HDP_MUX_MUX1_Pos)                /*!< 0x00000080 */
#define HDP_MUX_MUX2_Pos          (8U)
#define HDP_MUX_MUX2_Msk          (0xFUL << HDP_MUX_MUX2_Pos)                /*!< 0x00000F00 */
#define HDP_MUX_MUX2              HDP_MUX_MUX2_Msk                          /*!< Select the HDP2 output among the 16 available signals */
#define HDP_MUX_MUX2_0            (0x1UL << HDP_MUX_MUX2_Pos)                /*!< 0x00000100 */
#define HDP_MUX_MUX2_1            (0x2UL << HDP_MUX_MUX2_Pos)                /*!< 0x00000200 */
#define HDP_MUX_MUX2_2            (0x4UL << HDP_MUX_MUX2_Pos)                /*!< 0x00000400 */
#define HDP_MUX_MUX2_3            (0x8UL << HDP_MUX_MUX2_Pos)                /*!< 0x00000800 */
#define HDP_MUX_MUX3_Pos          (12U)
#define HDP_MUX_MUX3_Msk          (0xFUL << HDP_MUX_MUX3_Pos)                /*!< 0x0000F000 */
#define HDP_MUX_MUX3              HDP_MUX_MUX3_Msk                          /*!< Select the HDP3 output among the 16 available signals */
#define HDP_MUX_MUX3_0            (0x1UL << HDP_MUX_MUX3_Pos)                /*!< 0x00001000 */
#define HDP_MUX_MUX3_1            (0x2UL << HDP_MUX_MUX3_Pos)                /*!< 0x00002000 */
#define HDP_MUX_MUX3_2            (0x4UL << HDP_MUX_MUX3_Pos)                /*!< 0x00004000 */
#define HDP_MUX_MUX3_3            (0x8UL << HDP_MUX_MUX3_Pos)                /*!< 0x00008000 */
#define HDP_MUX_MUX4_Pos          (16U)
#define HDP_MUX_MUX4_Msk          (0xFUL << HDP_MUX_MUX4_Pos)                /*!< 0x000F0000 */
#define HDP_MUX_MUX4              HDP_MUX_MUX4_Msk                          /*!< Select the HDP4 output among the 16 available signals */
#define HDP_MUX_MUX4_0            (0x1UL << HDP_MUX_MUX4_Pos)                /*!< 0x00010000 */
#define HDP_MUX_MUX4_1            (0x2UL << HDP_MUX_MUX4_Pos)                /*!< 0x00020000 */
#define HDP_MUX_MUX4_2            (0x4UL << HDP_MUX_MUX4_Pos)                /*!< 0x00040000 */
#define HDP_MUX_MUX4_3            (0x8UL << HDP_MUX_MUX4_Pos)                /*!< 0x00080000 */
#define HDP_MUX_MUX5_Pos          (20U)
#define HDP_MUX_MUX5_Msk          (0xFUL << HDP_MUX_MUX5_Pos)                /*!< 0x00F00000 */
#define HDP_MUX_MUX5              HDP_MUX_MUX5_Msk                          /*!< Select the HDP5 output among the 16 available signals */
#define HDP_MUX_MUX5_0            (0x1UL << HDP_MUX_MUX5_Pos)                /*!< 0x00100000 */
#define HDP_MUX_MUX5_1            (0x2UL << HDP_MUX_MUX5_Pos)                /*!< 0x00200000 */
#define HDP_MUX_MUX5_2            (0x4UL << HDP_MUX_MUX5_Pos)                /*!< 0x00400000 */
#define HDP_MUX_MUX5_3            (0x8UL << HDP_MUX_MUX5_Pos)                /*!< 0x00800000 */
#define HDP_MUX_MUX6_Pos          (24U)
#define HDP_MUX_MUX6_Msk          (0xFUL << HDP_MUX_MUX6_Pos)                /*!< 0x0F000000 */
#define HDP_MUX_MUX6              HDP_MUX_MUX6_Msk                          /*!< Select the HDP6 output among the 16 available signals */
#define HDP_MUX_MUX6_0            (0x1UL << HDP_MUX_MUX6_Pos)                /*!< 0x01000000 */
#define HDP_MUX_MUX6_1            (0x2UL << HDP_MUX_MUX6_Pos)                /*!< 0x02000000 */
#define HDP_MUX_MUX6_2            (0x4UL << HDP_MUX_MUX6_Pos)                /*!< 0x04000000 */
#define HDP_MUX_MUX6_3            (0x8UL << HDP_MUX_MUX6_Pos)                /*!< 0x08000000 */
#define HDP_MUX_MUX7_Pos          (28U)
#define HDP_MUX_MUX7_Msk          (0xFUL << HDP_MUX_MUX7_Pos)                /*!< 0xF0000000 */
#define HDP_MUX_MUX7              HDP_MUX_MUX7_Msk                          /*!< Select the HDP7 output among the 16 available signals */
#define HDP_MUX_MUX7_0            (0x1UL << HDP_MUX_MUX7_Pos)                /*!< 0x10000000 */
#define HDP_MUX_MUX7_1            (0x2UL << HDP_MUX_MUX7_Pos)                /*!< 0x20000000 */
#define HDP_MUX_MUX7_2            (0x4UL << HDP_MUX_MUX7_Pos)                /*!< 0x40000000 */
#define HDP_MUX_MUX7_3            (0x8UL << HDP_MUX_MUX7_Pos)                /*!< 0x80000000 */

/*******************  Bit definition for HDP_VAL register  ********************/
#define HDP_VAL_HDPVAL_Pos          (0U)
#define HDP_VAL_HDPVAL_Msk          (0xFFUL << HDP_VAL_HDPVAL_Pos)           /*!< 0x000000FF */
#define HDP_VAL_HDPVAL              HDP_VAL_HDPVAL_Msk                      /*!< Value of the HDP signals */

/******************  Bit definition for HDP_GPOSET register  ******************/
#define HDP_GPOSET_HDPGPOSET_Pos    (0U)
#define HDP_GPOSET_HDPGPOSET_Msk    (0xFFUL << HDP_GPOSET_HDPGPOSET_Pos)     /*!< 0x000000FF */
#define HDP_GPOSET_HDPGPOSET        HDP_GPOSET_HDPGPOSET_Msk                /*!< When a bit is written to 1, the corresponding HDP GPO is set */

/******************  Bit definition for HDP_GPOCLR register  ******************/
#define HDP_GPOCLR_HDPGPOCLR_Pos    (0U)
#define HDP_GPOCLR_HDPGPOCLR_Msk    (0xFFUL << HDP_GPOCLR_HDPGPOCLR_Pos)     /*!< 0x000000FF */
#define HDP_GPOCLR_HDPGPOCLR        HDP_GPOCLR_HDPGPOCLR_Msk                /*!< When a bit is written to 1, the corresponding HDP GPO is cleared */

/******************  Bit definition for HDP_GPOVAL register  ******************/
#define HDP_GPOVAL_HDPGPOVAL_Pos    (0U)
#define HDP_GPOVAL_HDPGPOVAL_Msk    (0xFFUL << HDP_GPOVAL_HDPGPOVAL_Pos)     /*!< 0x000000FF */
#define HDP_GPOVAL_HDPGPOVAL        HDP_GPOVAL_HDPGPOVAL_Msk                /*!< When written, define the value of the HDP GPO */

/*******************  Bit definition for HDP_VERR register  *******************/
#define HDP_VERR_MINREV_Pos         (0U)
#define HDP_VERR_MINREV_Msk         (0xFUL << HDP_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define HDP_VERR_MINREV             HDP_VERR_MINREV_Msk                     /*!< HDP minor revision */
#define HDP_VERR_MAJREV_Pos         (4U)
#define HDP_VERR_MAJREV_Msk         (0xFUL << HDP_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define HDP_VERR_MAJREV             HDP_VERR_MAJREV_Msk                     /*!< HDP major revision */

/******************  Bit definition for HDP_IPIDR register  *******************/
#define HDP_IPIDR_ID_Pos            (0U)
#define HDP_IPIDR_ID_Msk            (0xFFFFFFFFUL << HDP_IPIDR_ID_Pos)        /*!< 0xFFFFFFFF */
#define HDP_IPIDR_ID                HDP_IPIDR_ID_Msk                         /*!< HDP identifier */

/*******************  Bit definition for HDP_SIDR register  *******************/
#define HDP_SIDR_SID_Pos            (0U)
#define HDP_SIDR_SID_Msk            (0xFFFFFFFFUL << HDP_SIDR_SID_Pos)        /*!< 0xFFFFFFFF */
#define HDP_SIDR_SID                HDP_SIDR_SID_Msk                         /*!< Size identifier */

/******************************************************************************/
/*                                                                            */
/*                            HW Semaphore (HSEM)                             */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for HSEM_R register  *********************/
#define HSEM_R_PROCID_Pos               (0U)
#define HSEM_R_PROCID_Msk               (0xFFUL << HSEM_R_PROCID_Pos)              /*!< 0x000000FF */
#define HSEM_R_PROCID                   HSEM_R_PROCID_Msk                         /*!< Semaphore PROCID. */
#define HSEM_R_LOCKID_Pos               (8U)
#define HSEM_R_LOCKID_Msk               (0xFUL << HSEM_R_LOCKID_Pos)               /*!< 0x00000F00 */
#define HSEM_R_LOCKID                   HSEM_R_LOCKID_Msk                         /*!< Semaphore LOCKID. */
#define HSEM_R_SEC_Pos                  (12U)
#define HSEM_R_SEC_Msk                  (0x1UL << HSEM_R_SEC_Pos)                  /*!< 0x00001000 */
#define HSEM_R_SEC                      HSEM_R_SEC_Msk                            /*!< Semaphore secure. */
#define HSEM_R_PRIV_Pos                 (13U)
#define HSEM_R_PRIV_Msk                 (0x1UL << HSEM_R_PRIV_Pos)                 /*!< 0x00002000 */
#define HSEM_R_PRIV                     HSEM_R_PRIV_Msk                           /*!< Semaphore privilege. */
#define HSEM_R_CFEN_Pos                 (30U)
#define HSEM_R_CFEN_Msk                 (0x1UL << HSEM_R_CFEN_Pos)                 /*!< 0x40000000 */
#define HSEM_R_CFEN                     HSEM_R_CFEN_Msk                           /*!< Semaphore CID filter indication. */
#define HSEM_R_LOCK_Pos                 (31U)
#define HSEM_R_LOCK_Msk                 (0x1UL << HSEM_R_LOCK_Pos)                 /*!< 0x80000000 */
#define HSEM_R_LOCK                     HSEM_R_LOCK_Msk                           /*!< Lock indication. */

/******************  Bit definition for HSEM_RLR register  ********************/
#define HSEM_RLR_PROCID_Pos             (0U)
#define HSEM_RLR_PROCID_Msk             (0xFFUL << HSEM_RLR_PROCID_Pos)            /*!< 0x000000FF */
#define HSEM_RLR_PROCID                 HSEM_RLR_PROCID_Msk                       /*!< Semaphore PROCID. */
#define HSEM_RLR_LOCKID_Pos             (8U)
#define HSEM_RLR_LOCKID_Msk             (0xFUL << HSEM_RLR_LOCKID_Pos)             /*!< 0x00000F00 */
#define HSEM_RLR_LOCKID                 HSEM_RLR_LOCKID_Msk                       /*!< Semaphore LOCKID. */
#define HSEM_RLR_SEC_Pos                (12U)
#define HSEM_RLR_SEC_Msk                (0x1UL << HSEM_RLR_SEC_Pos)                /*!< 0x00001000 */
#define HSEM_RLR_SEC                    HSEM_RLR_SEC_Msk                          /*!< Semaphore secure. */
#define HSEM_RLR_PRIV_Pos               (13U)
#define HSEM_RLR_PRIV_Msk               (0x1UL << HSEM_RLR_PRIV_Pos)               /*!< 0x00002000 */
#define HSEM_RLR_PRIV                   HSEM_RLR_PRIV_Msk                         /*!< Semaphore privilege. */
#define HSEM_RLR_CFEN_Pos               (30U)
#define HSEM_RLR_CFEN_Msk               (0x1UL << HSEM_RLR_CFEN_Pos)               /*!< 0x40000000 */
#define HSEM_RLR_CFEN                   HSEM_RLR_CFEN_Msk                         /*!< Semaphore CID filter indication. */
#define HSEM_RLR_LOCK_Pos               (31U)
#define HSEM_RLR_LOCK_Msk               (0x1UL << HSEM_RLR_LOCK_Pos)               /*!< 0x80000000 */
#define HSEM_RLR_LOCK                   HSEM_RLR_LOCK_Msk                         /*!< Lock indication. */

/******************  Bit definition for HSEM_C1IER register  ******************/
#define HSEM_C1IER_ISE_Pos              (0U)
#define HSEM_C1IER_ISE_Msk              (0xFFFFUL << HSEM_C1IER_ISE_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1IER_ISE                  HSEM_C1IER_ISE_Msk                        /*!< non-secure Interrupt(n) semaphore x enable bit. (x = 0 to 15) */

#define HSEM_C1IER_ISE0_Pos             (0U)
#define HSEM_C1IER_ISE0_Msk             (0x1UL << HSEM_C1IER_ISE0_Pos)               /*!< 0x00000001 */
#define HSEM_C1IER_ISE0                 HSEM_C1IER_ISE0_Msk                          /*!<semaphore 0 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE1_Pos             (1U)
#define HSEM_C1IER_ISE1_Msk             (0x1UL << HSEM_C1IER_ISE1_Pos)               /*!< 0x00000002 */
#define HSEM_C1IER_ISE1                 HSEM_C1IER_ISE1_Msk                          /*!<semaphore 1 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE2_Pos             (2U)
#define HSEM_C1IER_ISE2_Msk             (0x1UL << HSEM_C1IER_ISE2_Pos)               /*!< 0x00000004 */
#define HSEM_C1IER_ISE2                 HSEM_C1IER_ISE2_Msk                          /*!<semaphore 2 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE3_Pos             (3U)
#define HSEM_C1IER_ISE3_Msk             (0x1UL << HSEM_C1IER_ISE3_Pos)               /*!< 0x00000008 */
#define HSEM_C1IER_ISE3                 HSEM_C1IER_ISE3_Msk                          /*!<semaphore 3 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE4_Pos             (4U)
#define HSEM_C1IER_ISE4_Msk             (0x1UL << HSEM_C1IER_ISE4_Pos)               /*!< 0x00000010 */
#define HSEM_C1IER_ISE4                 HSEM_C1IER_ISE4_Msk                          /*!<semaphore 4 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE5_Pos             (5U)
#define HSEM_C1IER_ISE5_Msk             (0x1UL << HSEM_C1IER_ISE5_Pos)               /*!< 0x00000020 */
#define HSEM_C1IER_ISE5                 HSEM_C1IER_ISE5_Msk                          /*!<semaphore 5 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE6_Pos             (6U)
#define HSEM_C1IER_ISE6_Msk             (0x1UL << HSEM_C1IER_ISE6_Pos)               /*!< 0x00000040 */
#define HSEM_C1IER_ISE6                 HSEM_C1IER_ISE6_Msk                          /*!<semaphore 6 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE7_Pos             (7U)
#define HSEM_C1IER_ISE7_Msk             (0x1UL << HSEM_C1IER_ISE7_Pos)               /*!< 0x00000080 */
#define HSEM_C1IER_ISE7                 HSEM_C1IER_ISE7_Msk                          /*!<semaphore 7 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE8_Pos             (8U)
#define HSEM_C1IER_ISE8_Msk             (0x1UL << HSEM_C1IER_ISE8_Pos)               /*!< 0x00000100 */
#define HSEM_C1IER_ISE8                 HSEM_C1IER_ISE8_Msk                          /*!<semaphore 8 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE9_Pos             (9U)
#define HSEM_C1IER_ISE9_Msk             (0x1UL << HSEM_C1IER_ISE9_Pos)               /*!< 0x00000200 */
#define HSEM_C1IER_ISE9                 HSEM_C1IER_ISE9_Msk                          /*!<semaphore 9 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE10_Pos            (10U)
#define HSEM_C1IER_ISE10_Msk            (0x1UL << HSEM_C1IER_ISE10_Pos)              /*!< 0x00000400 */
#define HSEM_C1IER_ISE10                HSEM_C1IER_ISE10_Msk                         /*!<semaphore 10 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE11_Pos            (11U)
#define HSEM_C1IER_ISE11_Msk            (0x1UL << HSEM_C1IER_ISE11_Pos)              /*!< 0x00000800 */
#define HSEM_C1IER_ISE11                HSEM_C1IER_ISE11_Msk                         /*!<semaphore 11 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE12_Pos            (12U)
#define HSEM_C1IER_ISE12_Msk            (0x1UL << HSEM_C1IER_ISE12_Pos)              /*!< 0x00001000 */
#define HSEM_C1IER_ISE12                HSEM_C1IER_ISE12_Msk                         /*!<semaphore 12 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE13_Pos            (13U)
#define HSEM_C1IER_ISE13_Msk            (0x1UL << HSEM_C1IER_ISE13_Pos)              /*!< 0x00002000 */
#define HSEM_C1IER_ISE13                HSEM_C1IER_ISE13_Msk                         /*!<semaphore 13 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE14_Pos            (14U)
#define HSEM_C1IER_ISE14_Msk            (0x1UL << HSEM_C1IER_ISE14_Pos)              /*!< 0x00004000 */
#define HSEM_C1IER_ISE14                HSEM_C1IER_ISE14_Msk                         /*!<semaphore 14 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE15_Pos            (15U)
#define HSEM_C1IER_ISE15_Msk            (0x1UL << HSEM_C1IER_ISE15_Pos)              /*!< 0x00008000 */
#define HSEM_C1IER_ISE15                HSEM_C1IER_ISE15_Msk                         /*!<semaphore 15 interrupt 0 enable bit. */

/******************  Bit definition for HSEM_C1ICR register  ******************/
#define HSEM_C1ICR_ISC_Pos              (0U)
#define HSEM_C1ICR_ISC_Msk              (0xFFFFUL << HSEM_C1ICR_ISC_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1ICR_ISC                  HSEM_C1ICR_ISC_Msk                        /*!< non-secure Interrupt(n) semaphore x clear bit. (x = 0 to 15) */

/******************  Bit definition for HSEM_C1ISR register  ******************/
#define HSEM_C1ISR_ISF_Pos              (0U)
#define HSEM_C1ISR_ISF_Msk              (0xFFFFUL << HSEM_C1ISR_ISF_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1ISR_ISF                  HSEM_C1ISR_ISF_Msk                        /*!< non-secure Interrupt(n) semaphore x status bit before enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_C1MISR register  ******************/
#define HSEM_C1MISR_MISF_Pos            (0U)
#define HSEM_C1MISR_MISF_Msk            (0xFFFFUL << HSEM_C1MISR_MISF_Pos)         /*!< 0x0000FFFF */
#define HSEM_C1MISR_MISF                HSEM_C1MISR_MISF_Msk                      /*!< masked non-secure interrupt(n) semaphore x status bit after enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1IER register  ******************/
#define HSEM_SC1IER_SISE_Pos            (0U)
#define HSEM_SC1IER_SISE_Msk            (0xFFFFUL << HSEM_SC1IER_SISE_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1IER_SISE                HSEM_SC1IER_SISE_Msk                      /*!< Secure interrupt(n) semaphore x enable bit. (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1ICR register  ******************/
#define HSEM_SC1ICR_SISC_Pos            (0U)
#define HSEM_SC1ICR_SISC_Msk            (0xFFFFUL << HSEM_SC1ICR_SISC_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1ICR_SISC                HSEM_SC1ICR_SISC_Msk                      /*!< Secure interrupt(n) semaphore x clear bit. (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1ISR register  ******************/
#define HSEM_SC1ISR_SISF_Pos            (0U)
#define HSEM_SC1ISR_SISF_Msk            (0xFFFFUL << HSEM_SC1ISR_SISF_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1ISR_SISF                HSEM_SC1ISR_SISF_Msk                      /*!< Secure interrupt(n) semaphore x status bit before enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1MISR register  *****************/
#define HSEM_SC1MISR_SMISF_Pos          (0U)
#define HSEM_SC1MISR_SMISF_Msk          (0xFFFFUL << HSEM_SC1MISR_SMISF_Pos)       /*!< 0x0000FFFF */
#define HSEM_SC1MISR_SMISF              HSEM_SC1MISR_SMISF_Msk                    /*!< Secure masked interrupt(n) semaphore x status bit after enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SECCFGR register  *****************/
#define HSEM_SECCFGR_SEC_Pos            (0U)
#define HSEM_SECCFGR_SEC_Msk            (0xFFFFUL << HSEM_SECCFGR_SEC_Pos)         /*!< 0x0000FFFF */
#define HSEM_SECCFGR_SEC                HSEM_SECCFGR_SEC_Msk                      /*!< Semaphore x security attribute. (x = 0 to 15) */

/****************  Bit definition for HSEM_PRIVCFGR register  *****************/
#define HSEM_PRIVCFGR_PRIV_Pos          (0U)
#define HSEM_PRIVCFGR_PRIV_Msk          (0xFFFFUL << HSEM_PRIVCFGR_PRIV_Pos)       /*!< 0x0000FFFF */
#define HSEM_PRIVCFGR_PRIV              HSEM_PRIVCFGR_PRIV_Msk                    /*!< Semaphore x privilege attribute. (x = 0 to 15) */

/****************  Bit definition for HSEM_C1CIDCFGR register  ****************/
#define HSEM_C1CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C1CIDCFGR_CFEN_Msk         (0x1UL << HSEM_C1CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C1CIDCFGR_CFEN             HSEM_C1CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C1CIDCFGR_CID_Pos          (4U)
#define HSEM_C1CIDCFGR_CID_Msk          (0xFUL << HSEM_C1CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C1CIDCFGR_CID              HSEM_C1CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/****************  Bit definition for HSEM_C2CIDCFGR register  ****************/
#define HSEM_C2CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C2CIDCFGR_CFEN_Msk         (0x1UL << HSEM_C2CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C2CIDCFGR_CFEN             HSEM_C2CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C2CIDCFGR_CID_Pos          (4U)
#define HSEM_C2CIDCFGR_CID_Msk          (0xFUL << HSEM_C2CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C2CIDCFGR_CID              HSEM_C2CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/****************  Bit definition for HSEM_C3CIDCFGR register  ****************/
#define HSEM_C3CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C3CIDCFGR_CFEN_Msk         (0x1UL << HSEM_C3CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C3CIDCFGR_CFEN             HSEM_C3CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C3CIDCFGR_CID_Pos          (4U)
#define HSEM_C3CIDCFGR_CID_Msk          (0xFUL << HSEM_C3CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C3CIDCFGR_CID              HSEM_C3CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/*******************  Bit definition for HSEM_CR register  ********************/
#define HSEM_CR_CFEN_Pos                (0U)
#define HSEM_CR_CFEN_Msk                (0x1UL << HSEM_CR_CFEN_Pos)                /*!< 0x00000001 */
#define HSEM_CR_CFEN                    HSEM_CR_CFEN_Msk                          /*!< Semaphore CID filtered. */
#define HSEM_CR_LOCKID_Pos              (8U)
#define HSEM_CR_LOCKID_Msk              (0xFUL << HSEM_CR_LOCKID_Pos)              /*!< 0x00000F00 */
#define HSEM_CR_LOCKID                  HSEM_CR_LOCKID_Msk                        /*!< LOCKID of semaphores to be cleared. */
#define HSEM_CR_SEC_Pos                 (12U)
#define HSEM_CR_SEC_Msk                 (0x1UL << HSEM_CR_SEC_Pos)                 /*!< 0x00001000 */
#define HSEM_CR_SEC                     HSEM_CR_SEC_Msk                           /*!< SEC value of semaphores to be cleared. */
#define HSEM_CR_PRIV_Pos                (13U)
#define HSEM_CR_PRIV_Msk                (0x1UL << HSEM_CR_PRIV_Pos)                /*!< 0x00002000 */
#define HSEM_CR_PRIV                    HSEM_CR_PRIV_Msk                          /*!< PRIV value of semaphores to be cleared. */
#define HSEM_CR_KEY_Pos                 (16U)
#define HSEM_CR_KEY_Msk                 (0xFFFFUL << HSEM_CR_KEY_Pos)              /*!< 0xFFFF0000 */
#define HSEM_CR_KEY                     HSEM_CR_KEY_Msk                           /*!< Semaphore clear Key. */

/****************  Bit redefinition for legacy compatibility ******************/
#define HSEM_CR_COREID_Pos              HSEM_CR_LOCKID_Pos
#define HSEM_CR_COREID_Msk              HSEM_CR_LOCKID_Msk
#define HSEM_CR_COREID                  HSEM_CR_LOCKID

/******************  Bit definition for HSEM_KEYR register  *******************/
#define HSEM_KEYR_KEY_Pos               (16U)
#define HSEM_KEYR_KEY_Msk               (0xFFFFUL << HSEM_KEYR_KEY_Pos)            /*!< 0xFFFF0000 */
#define HSEM_KEYR_KEY                   HSEM_KEYR_KEY_Msk                         /*!< Semaphore Clear Key. */

/****************  Bit definition for HSEM_G0CIDCFGR register  ****************/
#define HSEM_G0CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G0CIDCFGR_CFEN_Msk         (0x1UL << HSEM_G0CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G0CIDCFGR_CFEN             HSEM_G0CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G0CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G0CIDCFGR_SEM_WLIST_C_Msk  (0x7UL << HSEM_G0CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G0CIDCFGR_SEM_WLIST_C      HSEM_G0CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G1CIDCFGR register  ****************/
#define HSEM_G1CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G1CIDCFGR_CFEN_Msk         (0x1UL << HSEM_G1CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G1CIDCFGR_CFEN             HSEM_G1CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G1CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G1CIDCFGR_SEM_WLIST_C_Msk  (0x7UL << HSEM_G1CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G1CIDCFGR_SEM_WLIST_C      HSEM_G1CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G2CIDCFGR register  ****************/
#define HSEM_G2CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G2CIDCFGR_CFEN_Msk         (0x1UL << HSEM_G2CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G2CIDCFGR_CFEN             HSEM_G2CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G2CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G2CIDCFGR_SEM_WLIST_C_Msk  (0x7UL << HSEM_G2CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G2CIDCFGR_SEM_WLIST_C      HSEM_G2CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G3CIDCFGR register  ****************/
#define HSEM_G3CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G3CIDCFGR_CFEN_Msk         (0x1UL << HSEM_G3CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G3CIDCFGR_CFEN             HSEM_G3CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G3CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G3CIDCFGR_SEM_WLIST_C_Msk  (0x7UL << HSEM_G3CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G3CIDCFGR_SEM_WLIST_C      HSEM_G3CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/*****************  Bit definition for HSEM_HWCFGR2 register  *****************/
#define HSEM_HWCFGR2_MASTERID1_Pos      (0U)
#define HSEM_HWCFGR2_MASTERID1_Msk      (0xFUL << HSEM_HWCFGR2_MASTERID1_Pos)      /*!< 0x0000000F */
#define HSEM_HWCFGR2_MASTERID1          HSEM_HWCFGR2_MASTERID1_Msk                /*!< Hardware configuration valid bus masters ID1 */
#define HSEM_HWCFGR2_MASTERID2_Pos      (4U)
#define HSEM_HWCFGR2_MASTERID2_Msk      (0xFUL << HSEM_HWCFGR2_MASTERID2_Pos)      /*!< 0x000000F0 */
#define HSEM_HWCFGR2_MASTERID2          HSEM_HWCFGR2_MASTERID2_Msk                /*!< Hardware configuration valid bus masters ID2 */
#define HSEM_HWCFGR2_MASTERID3_Pos      (8U)
#define HSEM_HWCFGR2_MASTERID3_Msk      (0xFUL << HSEM_HWCFGR2_MASTERID3_Pos)      /*!< 0x00000F00 */
#define HSEM_HWCFGR2_MASTERID3          HSEM_HWCFGR2_MASTERID3_Msk                /*!< Hardware configuration valid bus masters ID3 */
#define HSEM_HWCFGR2_MASTERID4_Pos      (12U)
#define HSEM_HWCFGR2_MASTERID4_Msk      (0xFUL << HSEM_HWCFGR2_MASTERID4_Pos)      /*!< 0x0000F000 */
#define HSEM_HWCFGR2_MASTERID4          HSEM_HWCFGR2_MASTERID4_Msk                /*!< Hardware configuration valid bus masters ID4 */

/*****************  Bit definition for HSEM_HWCFGR1 register  *****************/
#define HSEM_HWCFGR1_NBSEM_Pos          (0U)
#define HSEM_HWCFGR1_NBSEM_Msk          (0xFFUL << HSEM_HWCFGR1_NBSEM_Pos)         /*!< 0x000000FF */
#define HSEM_HWCFGR1_NBSEM              HSEM_HWCFGR1_NBSEM_Msk                    /*!< Hardware configuration number of semaphores */
#define HSEM_HWCFGR1_NBINT_Pos          (8U)
#define HSEM_HWCFGR1_NBINT_Msk          (0xFUL << HSEM_HWCFGR1_NBINT_Pos)          /*!< 0x00000F00 */
#define HSEM_HWCFGR1_NBINT              HSEM_HWCFGR1_NBINT_Msk                    /*!< Hardware configuration number of interrupts/supported number of master ID */
#define HSEM_HWCFGR1_CID_WIDTH_Pos      (12U)
#define HSEM_HWCFGR1_CID_WIDTH_Msk      (0xFUL << HSEM_HWCFGR1_CID_WIDTH_Pos)      /*!< 0x0000F000 */
#define HSEM_HWCFGR1_CID_WIDTH          HSEM_HWCFGR1_CID_WIDTH_Msk                /*!< Hardware Configuration compartment isolation bus width */
#define HSEM_HWCFGR1_SECEN_Pos          (16U)
#define HSEM_HWCFGR1_SECEN_Msk          (0x1UL << HSEM_HWCFGR1_SECEN_Pos)          /*!< 0x00010000 */
#define HSEM_HWCFGR1_SECEN              HSEM_HWCFGR1_SECEN_Msk                    /*!< Hardware Configuration security protection enable */
#define HSEM_HWCFGR1_PRIVEN_Pos         (17U)
#define HSEM_HWCFGR1_PRIVEN_Msk         (0x1UL << HSEM_HWCFGR1_PRIVEN_Pos)         /*!< 0x00020000 */
#define HSEM_HWCFGR1_PRIVEN             HSEM_HWCFGR1_PRIVEN_Msk                   /*!< Hardware Configuration privilege protection enable */
#define HSEM_HWCFGR1_CFEN_Pos           (18U)
#define HSEM_HWCFGR1_CFEN_Msk           (0x1UL << HSEM_HWCFGR1_CFEN_Pos)           /*!< 0x00040000 */
#define HSEM_HWCFGR1_CFEN               HSEM_HWCFGR1_CFEN_Msk                     /*!< Hardware Configuration compartment filtering enable */

/******************  Bit definition for HSEM_VERR register  *******************/
#define HSEM_VERR_MINREV_Pos            (0U)
#define HSEM_VERR_MINREV_Msk            (0xFUL << HSEM_VERR_MINREV_Pos)            /*!< 0x0000000F */
#define HSEM_VERR_MINREV                HSEM_VERR_MINREV_Msk                      /*!< IP minor revision number */
#define HSEM_VERR_MAJREV_Pos            (4U)
#define HSEM_VERR_MAJREV_Msk            (0xFUL << HSEM_VERR_MAJREV_Pos)            /*!< 0x000000F0 */
#define HSEM_VERR_MAJREV                HSEM_VERR_MAJREV_Msk                      /*!< IP major revision number */

/******************  Bit definition for HSEM_IPIDR register  ******************/
#define HSEM_IPIDR_IPID_Pos             (0U)
#define HSEM_IPIDR_IPID_Msk             (0xFFFFFFFFUL << HSEM_IPIDR_IPID_Pos)      /*!< 0xFFFFFFFF */
#define HSEM_IPIDR_IPID                 HSEM_IPIDR_IPID_Msk                       /*!< IP identification */

/******************  Bit definition for HSEM_SIDR register  *******************/
#define HSEM_SIDR_SID_Pos               (0U)
#define HSEM_SIDR_SID_Msk               (0xFFFFFFFFUL << HSEM_SIDR_SID_Pos)        /*!< 0xFFFFFFFF */
#define HSEM_SIDR_SID                   HSEM_SIDR_SID_Msk                         /*!< IP size identification */

/******************************************************************************/
/*                                                                            */
/*                      Inter-integrated Circuit Interface (I2C)              */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for I2C_CR1 register  *******************/
#define I2C_CR1_PE_Pos               (0U)
#define I2C_CR1_PE_Msk               (0x1UL << I2C_CR1_PE_Pos)                  /*!< 0x00000001 */
#define I2C_CR1_PE                   I2C_CR1_PE_Msk                            /*!< Peripheral enable */
#define I2C_CR1_TXIE_Pos             (1U)
#define I2C_CR1_TXIE_Msk             (0x1UL << I2C_CR1_TXIE_Pos)                /*!< 0x00000002 */
#define I2C_CR1_TXIE                 I2C_CR1_TXIE_Msk                          /*!< TX interrupt enable */
#define I2C_CR1_RXIE_Pos             (2U)
#define I2C_CR1_RXIE_Msk             (0x1UL << I2C_CR1_RXIE_Pos)                /*!< 0x00000004 */
#define I2C_CR1_RXIE                 I2C_CR1_RXIE_Msk                          /*!< RX interrupt enable */
#define I2C_CR1_ADDRIE_Pos           (3U)
#define I2C_CR1_ADDRIE_Msk           (0x1UL << I2C_CR1_ADDRIE_Pos)              /*!< 0x00000008 */
#define I2C_CR1_ADDRIE               I2C_CR1_ADDRIE_Msk                        /*!< Address match interrupt enable */
#define I2C_CR1_NACKIE_Pos           (4U)
#define I2C_CR1_NACKIE_Msk           (0x1UL << I2C_CR1_NACKIE_Pos)              /*!< 0x00000010 */
#define I2C_CR1_NACKIE               I2C_CR1_NACKIE_Msk                        /*!< NACK received interrupt enable */
#define I2C_CR1_STOPIE_Pos           (5U)
#define I2C_CR1_STOPIE_Msk           (0x1UL << I2C_CR1_STOPIE_Pos)              /*!< 0x00000020 */
#define I2C_CR1_STOPIE               I2C_CR1_STOPIE_Msk                        /*!< STOP detection interrupt enable */
#define I2C_CR1_TCIE_Pos             (6U)
#define I2C_CR1_TCIE_Msk             (0x1UL << I2C_CR1_TCIE_Pos)                /*!< 0x00000040 */
#define I2C_CR1_TCIE                 I2C_CR1_TCIE_Msk                          /*!< Transfer complete interrupt enable */
#define I2C_CR1_ERRIE_Pos            (7U)
#define I2C_CR1_ERRIE_Msk            (0x1UL << I2C_CR1_ERRIE_Pos)               /*!< 0x00000080 */
#define I2C_CR1_ERRIE                I2C_CR1_ERRIE_Msk                         /*!< Errors interrupt enable */
#define I2C_CR1_DNF_Pos              (8U)
#define I2C_CR1_DNF_Msk              (0xFUL << I2C_CR1_DNF_Pos)                 /*!< 0x00000F00 */
#define I2C_CR1_DNF                  I2C_CR1_DNF_Msk                           /*!< Digital noise filter */
#define I2C_CR1_ANFOFF_Pos           (12U)
#define I2C_CR1_ANFOFF_Msk           (0x1UL << I2C_CR1_ANFOFF_Pos)              /*!< 0x00001000 */
#define I2C_CR1_ANFOFF               I2C_CR1_ANFOFF_Msk                        /*!< Analog noise filter OFF */
#define I2C_CR1_SWRST_Pos            (13U)
#define I2C_CR1_SWRST_Msk            (0x1UL << I2C_CR1_SWRST_Pos)               /*!< 0x00002000 */
#define I2C_CR1_SWRST                I2C_CR1_SWRST_Msk                         /*!< Software reset */
#define I2C_CR1_TXDMAEN_Pos          (14U)
#define I2C_CR1_TXDMAEN_Msk          (0x1UL << I2C_CR1_TXDMAEN_Pos)             /*!< 0x00004000 */
#define I2C_CR1_TXDMAEN              I2C_CR1_TXDMAEN_Msk                       /*!< DMA transmission requests enable */
#define I2C_CR1_RXDMAEN_Pos          (15U)
#define I2C_CR1_RXDMAEN_Msk          (0x1UL << I2C_CR1_RXDMAEN_Pos)             /*!< 0x00008000 */
#define I2C_CR1_RXDMAEN              I2C_CR1_RXDMAEN_Msk                       /*!< DMA reception requests enable */
#define I2C_CR1_SBC_Pos              (16U)
#define I2C_CR1_SBC_Msk              (0x1UL << I2C_CR1_SBC_Pos)                 /*!< 0x00010000 */
#define I2C_CR1_SBC                  I2C_CR1_SBC_Msk                           /*!< Slave byte control */
#define I2C_CR1_NOSTRETCH_Pos        (17U)
#define I2C_CR1_NOSTRETCH_Msk        (0x1UL << I2C_CR1_NOSTRETCH_Pos)           /*!< 0x00020000 */
#define I2C_CR1_NOSTRETCH            I2C_CR1_NOSTRETCH_Msk                     /*!< Clock stretching disable */
#define I2C_CR1_WUPEN_Pos            (18U)
#define I2C_CR1_WUPEN_Msk            (0x1UL << I2C_CR1_WUPEN_Pos)               /*!< 0x00040000 */
#define I2C_CR1_WUPEN                I2C_CR1_WUPEN_Msk                         /*!< Wakeup from STOP enable */
#define I2C_CR1_GCEN_Pos             (19U)
#define I2C_CR1_GCEN_Msk             (0x1UL << I2C_CR1_GCEN_Pos)                /*!< 0x00080000 */
#define I2C_CR1_GCEN                 I2C_CR1_GCEN_Msk                          /*!< General call enable */
#define I2C_CR1_SMBHEN_Pos           (20U)
#define I2C_CR1_SMBHEN_Msk           (0x1UL << I2C_CR1_SMBHEN_Pos)              /*!< 0x00100000 */
#define I2C_CR1_SMBHEN               I2C_CR1_SMBHEN_Msk                        /*!< SMBus host address enable */
#define I2C_CR1_SMBDEN_Pos           (21U)
#define I2C_CR1_SMBDEN_Msk           (0x1UL << I2C_CR1_SMBDEN_Pos)              /*!< 0x00200000 */
#define I2C_CR1_SMBDEN               I2C_CR1_SMBDEN_Msk                        /*!< SMBus device default address enable */
#define I2C_CR1_ALERTEN_Pos          (22U)
#define I2C_CR1_ALERTEN_Msk          (0x1UL << I2C_CR1_ALERTEN_Pos)             /*!< 0x00400000 */
#define I2C_CR1_ALERTEN              I2C_CR1_ALERTEN_Msk                       /*!< SMBus alert enable */
#define I2C_CR1_PECEN_Pos            (23U)
#define I2C_CR1_PECEN_Msk            (0x1UL << I2C_CR1_PECEN_Pos)               /*!< 0x00800000 */
#define I2C_CR1_PECEN                I2C_CR1_PECEN_Msk                         /*!< PEC enable */
#define I2C_CR1_FMP_Pos              (24U)
#define I2C_CR1_FMP_Msk              (0x1UL << I2C_CR1_FMP_Pos)                 /*!< 0x01000000 */
#define I2C_CR1_FMP                  I2C_CR1_FMP_Msk                           /*!< Fast-mode Plus 20mA drive enable */
#define I2C_CR1_ADDRACLR_Pos         (30U)
#define I2C_CR1_ADDRACLR_Msk         (0x1UL << I2C_CR1_ADDRACLR_Pos)            /*!< 0x40000000 */
#define I2C_CR1_ADDRACLR             I2C_CR1_ADDRACLR_Msk                      /*!< Address match flag (ADDR) automatic clear */
#define I2C_CR1_STOPFACLR_Pos        (31U)
#define I2C_CR1_STOPFACLR_Msk        (0x1UL << I2C_CR1_STOPFACLR_Pos)           /*!< 0x80000000 */
#define I2C_CR1_STOPFACLR            I2C_CR1_STOPFACLR_Msk                     /*!< STOP detection flag (STOPF) automatic clear */

/******************  Bit definition for I2C_CR2 register  ********************/
#define I2C_CR2_SADD_Pos             (0U)
#define I2C_CR2_SADD_Msk             (0x3FFUL << I2C_CR2_SADD_Pos)              /*!< 0x000003FF */
#define I2C_CR2_SADD                 I2C_CR2_SADD_Msk                          /*!< Slave address (master mode) */
#define I2C_CR2_RD_WRN_Pos           (10U)
#define I2C_CR2_RD_WRN_Msk           (0x1UL << I2C_CR2_RD_WRN_Pos)              /*!< 0x00000400 */
#define I2C_CR2_RD_WRN               I2C_CR2_RD_WRN_Msk                        /*!< Transfer direction (master mode) */
#define I2C_CR2_ADD10_Pos            (11U)
#define I2C_CR2_ADD10_Msk            (0x1UL << I2C_CR2_ADD10_Pos)               /*!< 0x00000800 */
#define I2C_CR2_ADD10                I2C_CR2_ADD10_Msk                         /*!< 10-bit addressing mode (master mode) */
#define I2C_CR2_HEAD10R_Pos          (12U)
#define I2C_CR2_HEAD10R_Msk          (0x1UL << I2C_CR2_HEAD10R_Pos)             /*!< 0x00001000 */
#define I2C_CR2_HEAD10R              I2C_CR2_HEAD10R_Msk                       /*!< 10-bit address header only read direction (master mode) */
#define I2C_CR2_START_Pos            (13U)
#define I2C_CR2_START_Msk            (0x1UL << I2C_CR2_START_Pos)               /*!< 0x00002000 */
#define I2C_CR2_START                I2C_CR2_START_Msk                         /*!< START generation */
#define I2C_CR2_STOP_Pos             (14U)
#define I2C_CR2_STOP_Msk             (0x1UL << I2C_CR2_STOP_Pos)                /*!< 0x00004000 */
#define I2C_CR2_STOP                 I2C_CR2_STOP_Msk                          /*!< STOP generation (master mode) */
#define I2C_CR2_NACK_Pos             (15U)
#define I2C_CR2_NACK_Msk             (0x1UL << I2C_CR2_NACK_Pos)                /*!< 0x00008000 */
#define I2C_CR2_NACK                 I2C_CR2_NACK_Msk                          /*!< NACK generation (slave mode) */
#define I2C_CR2_NBYTES_Pos           (16U)
#define I2C_CR2_NBYTES_Msk           (0xFFUL << I2C_CR2_NBYTES_Pos)             /*!< 0x00FF0000 */
#define I2C_CR2_NBYTES               I2C_CR2_NBYTES_Msk                        /*!< Number of bytes */
#define I2C_CR2_RELOAD_Pos           (24U)
#define I2C_CR2_RELOAD_Msk           (0x1UL << I2C_CR2_RELOAD_Pos)              /*!< 0x01000000 */
#define I2C_CR2_RELOAD               I2C_CR2_RELOAD_Msk                        /*!< NBYTES reload mode */
#define I2C_CR2_AUTOEND_Pos          (25U)
#define I2C_CR2_AUTOEND_Msk          (0x1UL << I2C_CR2_AUTOEND_Pos)             /*!< 0x02000000 */
#define I2C_CR2_AUTOEND              I2C_CR2_AUTOEND_Msk                       /*!< Automatic end mode (master mode) */
#define I2C_CR2_PECBYTE_Pos          (26U)
#define I2C_CR2_PECBYTE_Msk          (0x1UL << I2C_CR2_PECBYTE_Pos)             /*!< 0x04000000 */
#define I2C_CR2_PECBYTE              I2C_CR2_PECBYTE_Msk                       /*!< Packet error checking byte */

/*******************  Bit definition for I2C_OAR1 register  ******************/
#define I2C_OAR1_OA1_Pos             (0U)
#define I2C_OAR1_OA1_Msk             (0x3FFUL << I2C_OAR1_OA1_Pos)              /*!< 0x000003FF */
#define I2C_OAR1_OA1                 I2C_OAR1_OA1_Msk                          /*!< Interface own address 1 */
#define I2C_OAR1_OA1MODE_Pos         (10U)
#define I2C_OAR1_OA1MODE_Msk         (0x1UL << I2C_OAR1_OA1MODE_Pos)            /*!< 0x00000400 */
#define I2C_OAR1_OA1MODE             I2C_OAR1_OA1MODE_Msk                      /*!< Own address 1 10-bit mode */
#define I2C_OAR1_OA1EN_Pos           (15U)
#define I2C_OAR1_OA1EN_Msk           (0x1UL << I2C_OAR1_OA1EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR1_OA1EN               I2C_OAR1_OA1EN_Msk                        /*!< Own address 1 enable */

/*******************  Bit definition for I2C_OAR2 register  ******************/
#define I2C_OAR2_OA2_Pos             (1U)
#define I2C_OAR2_OA2_Msk             (0x7FUL << I2C_OAR2_OA2_Pos)               /*!< 0x000000FE */
#define I2C_OAR2_OA2                 I2C_OAR2_OA2_Msk                          /*!< Interface own address 2 */
#define I2C_OAR2_OA2MSK_Pos          (8U)
#define I2C_OAR2_OA2MSK_Msk          (0x7UL << I2C_OAR2_OA2MSK_Pos)             /*!< 0x00000700 */
#define I2C_OAR2_OA2MSK              I2C_OAR2_OA2MSK_Msk                       /*!< Own address 2 masks */
#define I2C_OAR2_OA2NOMASK           0x00000000UL                              /*!< No mask */
#define I2C_OAR2_OA2MASK01_Msk       (0x1UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000100 */
#define I2C_OAR2_OA2MASK01           I2C_OAR2_OA2MASK01_Msk                    /*!< OA2[1] is masked, Only OA2[7:2] are compared */
#define I2C_OAR2_OA2MASK02_Msk       (0x2UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000200 */
#define I2C_OAR2_OA2MASK02           I2C_OAR2_OA2MASK02_Msk                    /*!< OA2[2:1] is masked, Only OA2[7:3] are compared */
#define I2C_OAR2_OA2MASK03_Msk       (0x3UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000300 */
#define I2C_OAR2_OA2MASK03           I2C_OAR2_OA2MASK03_Msk                    /*!< OA2[3:1] is masked, Only OA2[7:4] are compared */
#define I2C_OAR2_OA2MASK04_Msk       (0x4UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000400 */
#define I2C_OAR2_OA2MASK04           I2C_OAR2_OA2MASK04_Msk                    /*!< OA2[4:1] is masked, Only OA2[7:5] are compared */
#define I2C_OAR2_OA2MASK05_Msk       (0x5UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000500 */
#define I2C_OAR2_OA2MASK05           I2C_OAR2_OA2MASK05_Msk                    /*!< OA2[5:1] is masked, Only OA2[7:6] are compared */
#define I2C_OAR2_OA2MASK06_Msk       (0x6UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000600 */
#define I2C_OAR2_OA2MASK06           I2C_OAR2_OA2MASK06_Msk                    /*!< OA2[6:1] is masked, Only OA2[7] are compared */
#define I2C_OAR2_OA2MASK07_Msk       (0x7UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000700 */
#define I2C_OAR2_OA2MASK07           I2C_OAR2_OA2MASK07_Msk                    /*!< OA2[7:1] is masked, No comparison is done */
#define I2C_OAR2_OA2EN_Pos           (15U)
#define I2C_OAR2_OA2EN_Msk           (0x1UL << I2C_OAR2_OA2EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR2_OA2EN               I2C_OAR2_OA2EN_Msk                        /*!< Own address 2 enable */

/*******************  Bit definition for I2C_TIMINGR register *******************/
#define I2C_TIMINGR_SCLL_Pos         (0U)
#define I2C_TIMINGR_SCLL_Msk         (0xFFUL << I2C_TIMINGR_SCLL_Pos)           /*!< 0x000000FF */
#define I2C_TIMINGR_SCLL             I2C_TIMINGR_SCLL_Msk                      /*!< SCL low period (master mode) */
#define I2C_TIMINGR_SCLH_Pos         (8U)
#define I2C_TIMINGR_SCLH_Msk         (0xFFUL << I2C_TIMINGR_SCLH_Pos)           /*!< 0x0000FF00 */
#define I2C_TIMINGR_SCLH             I2C_TIMINGR_SCLH_Msk                      /*!< SCL high period (master mode) */
#define I2C_TIMINGR_SDADEL_Pos       (16U)
#define I2C_TIMINGR_SDADEL_Msk       (0xFUL << I2C_TIMINGR_SDADEL_Pos)          /*!< 0x000F0000 */
#define I2C_TIMINGR_SDADEL           I2C_TIMINGR_SDADEL_Msk                    /*!< Data hold time */
#define I2C_TIMINGR_SCLDEL_Pos       (20U)
#define I2C_TIMINGR_SCLDEL_Msk       (0xFUL << I2C_TIMINGR_SCLDEL_Pos)          /*!< 0x00F00000 */
#define I2C_TIMINGR_SCLDEL           I2C_TIMINGR_SCLDEL_Msk                    /*!< Data setup time */
#define I2C_TIMINGR_PRESC_Pos        (28U)
#define I2C_TIMINGR_PRESC_Msk        (0xFUL << I2C_TIMINGR_PRESC_Pos)           /*!< 0xF0000000 */
#define I2C_TIMINGR_PRESC            I2C_TIMINGR_PRESC_Msk                     /*!< Timings prescaler */

/******************* Bit definition for I2C_TIMEOUTR register *******************/
#define I2C_TIMEOUTR_TIMEOUTA_Pos    (0U)
#define I2C_TIMEOUTR_TIMEOUTA_Msk    (0xFFFUL << I2C_TIMEOUTR_TIMEOUTA_Pos)     /*!< 0x00000FFF */
#define I2C_TIMEOUTR_TIMEOUTA        I2C_TIMEOUTR_TIMEOUTA_Msk                 /*!< Bus timeout A */
#define I2C_TIMEOUTR_TIDLE_Pos       (12U)
#define I2C_TIMEOUTR_TIDLE_Msk       (0x1UL << I2C_TIMEOUTR_TIDLE_Pos)          /*!< 0x00001000 */
#define I2C_TIMEOUTR_TIDLE           I2C_TIMEOUTR_TIDLE_Msk                    /*!< Idle clock timeout detection */
#define I2C_TIMEOUTR_TIMOUTEN_Pos    (15U)
#define I2C_TIMEOUTR_TIMOUTEN_Msk    (0x1UL << I2C_TIMEOUTR_TIMOUTEN_Pos)       /*!< 0x00008000 */
#define I2C_TIMEOUTR_TIMOUTEN        I2C_TIMEOUTR_TIMOUTEN_Msk                 /*!< Clock timeout enable */
#define I2C_TIMEOUTR_TIMEOUTB_Pos    (16U)
#define I2C_TIMEOUTR_TIMEOUTB_Msk    (0xFFFUL << I2C_TIMEOUTR_TIMEOUTB_Pos)     /*!< 0x0FFF0000 */
#define I2C_TIMEOUTR_TIMEOUTB        I2C_TIMEOUTR_TIMEOUTB_Msk                 /*!< Bus timeout B*/
#define I2C_TIMEOUTR_TEXTEN_Pos      (31U)
#define I2C_TIMEOUTR_TEXTEN_Msk      (0x1UL << I2C_TIMEOUTR_TEXTEN_Pos)         /*!< 0x80000000 */
#define I2C_TIMEOUTR_TEXTEN          I2C_TIMEOUTR_TEXTEN_Msk                   /*!< Extended clock timeout enable */

/******************  Bit definition for I2C_ISR register  *********************/
#define I2C_ISR_TXE_Pos              (0U)
#define I2C_ISR_TXE_Msk              (0x1UL << I2C_ISR_TXE_Pos)                 /*!< 0x00000001 */
#define I2C_ISR_TXE                  I2C_ISR_TXE_Msk                           /*!< Transmit data register empty */
#define I2C_ISR_TXIS_Pos             (1U)
#define I2C_ISR_TXIS_Msk             (0x1UL << I2C_ISR_TXIS_Pos)                /*!< 0x00000002 */
#define I2C_ISR_TXIS                 I2C_ISR_TXIS_Msk                          /*!< Transmit interrupt status */
#define I2C_ISR_RXNE_Pos             (2U)
#define I2C_ISR_RXNE_Msk             (0x1UL << I2C_ISR_RXNE_Pos)                /*!< 0x00000004 */
#define I2C_ISR_RXNE                 I2C_ISR_RXNE_Msk                          /*!< Receive data register not empty */
#define I2C_ISR_ADDR_Pos             (3U)
#define I2C_ISR_ADDR_Msk             (0x1UL << I2C_ISR_ADDR_Pos)                /*!< 0x00000008 */
#define I2C_ISR_ADDR                 I2C_ISR_ADDR_Msk                          /*!< Address matched (slave mode)*/
#define I2C_ISR_NACKF_Pos            (4U)
#define I2C_ISR_NACKF_Msk            (0x1UL << I2C_ISR_NACKF_Pos)               /*!< 0x00000010 */
#define I2C_ISR_NACKF                I2C_ISR_NACKF_Msk                         /*!< NACK received flag */
#define I2C_ISR_STOPF_Pos            (5U)
#define I2C_ISR_STOPF_Msk            (0x1UL << I2C_ISR_STOPF_Pos)               /*!< 0x00000020 */
#define I2C_ISR_STOPF                I2C_ISR_STOPF_Msk                         /*!< STOP detection flag */
#define I2C_ISR_TC_Pos               (6U)
#define I2C_ISR_TC_Msk               (0x1UL << I2C_ISR_TC_Pos)                  /*!< 0x00000040 */
#define I2C_ISR_TC                   I2C_ISR_TC_Msk                            /*!< Transfer complete (master mode) */
#define I2C_ISR_TCR_Pos              (7U)
#define I2C_ISR_TCR_Msk              (0x1UL << I2C_ISR_TCR_Pos)                 /*!< 0x00000080 */
#define I2C_ISR_TCR                  I2C_ISR_TCR_Msk                           /*!< Transfer complete reload */
#define I2C_ISR_BERR_Pos             (8U)
#define I2C_ISR_BERR_Msk             (0x1UL << I2C_ISR_BERR_Pos)                /*!< 0x00000100 */
#define I2C_ISR_BERR                 I2C_ISR_BERR_Msk                          /*!< Bus error */
#define I2C_ISR_ARLO_Pos             (9U)
#define I2C_ISR_ARLO_Msk             (0x1UL << I2C_ISR_ARLO_Pos)                /*!< 0x00000200 */
#define I2C_ISR_ARLO                 I2C_ISR_ARLO_Msk                          /*!< Arbitration lost */
#define I2C_ISR_OVR_Pos              (10U)
#define I2C_ISR_OVR_Msk              (0x1UL << I2C_ISR_OVR_Pos)                 /*!< 0x00000400 */
#define I2C_ISR_OVR                  I2C_ISR_OVR_Msk                           /*!< Overrun/Underrun */
#define I2C_ISR_PECERR_Pos           (11U)
#define I2C_ISR_PECERR_Msk           (0x1UL << I2C_ISR_PECERR_Pos)              /*!< 0x00000800 */
#define I2C_ISR_PECERR               I2C_ISR_PECERR_Msk                        /*!< PEC error in reception */
#define I2C_ISR_TIMEOUT_Pos          (12U)
#define I2C_ISR_TIMEOUT_Msk          (0x1UL << I2C_ISR_TIMEOUT_Pos)             /*!< 0x00001000 */
#define I2C_ISR_TIMEOUT              I2C_ISR_TIMEOUT_Msk                       /*!< Timeout or Tlow detection flag */
#define I2C_ISR_ALERT_Pos            (13U)
#define I2C_ISR_ALERT_Msk            (0x1UL << I2C_ISR_ALERT_Pos)               /*!< 0x00002000 */
#define I2C_ISR_ALERT                I2C_ISR_ALERT_Msk                         /*!< SMBus alert */
#define I2C_ISR_BUSY_Pos             (15U)
#define I2C_ISR_BUSY_Msk             (0x1UL << I2C_ISR_BUSY_Pos)                /*!< 0x00008000 */
#define I2C_ISR_BUSY                 I2C_ISR_BUSY_Msk                          /*!< Bus busy */
#define I2C_ISR_DIR_Pos              (16U)
#define I2C_ISR_DIR_Msk              (0x1UL << I2C_ISR_DIR_Pos)                 /*!< 0x00010000 */
#define I2C_ISR_DIR                  I2C_ISR_DIR_Msk                           /*!< Transfer direction (slave mode) */
#define I2C_ISR_ADDCODE_Pos          (17U)
#define I2C_ISR_ADDCODE_Msk          (0x7FUL << I2C_ISR_ADDCODE_Pos)            /*!< 0x00FE0000 */
#define I2C_ISR_ADDCODE              I2C_ISR_ADDCODE_Msk                       /*!< Address match code (slave mode) */

/******************  Bit definition for I2C_ICR register  *********************/
#define I2C_ICR_ADDRCF_Pos           (3U)
#define I2C_ICR_ADDRCF_Msk           (0x1UL << I2C_ICR_ADDRCF_Pos)              /*!< 0x00000008 */
#define I2C_ICR_ADDRCF               I2C_ICR_ADDRCF_Msk                        /*!< Address matched clear flag */
#define I2C_ICR_NACKCF_Pos           (4U)
#define I2C_ICR_NACKCF_Msk           (0x1UL << I2C_ICR_NACKCF_Pos)              /*!< 0x00000010 */
#define I2C_ICR_NACKCF               I2C_ICR_NACKCF_Msk                        /*!< NACK clear flag */
#define I2C_ICR_STOPCF_Pos           (5U)
#define I2C_ICR_STOPCF_Msk           (0x1UL << I2C_ICR_STOPCF_Pos)              /*!< 0x00000020 */
#define I2C_ICR_STOPCF               I2C_ICR_STOPCF_Msk                        /*!< STOP detection clear flag */
#define I2C_ICR_BERRCF_Pos           (8U)
#define I2C_ICR_BERRCF_Msk           (0x1UL << I2C_ICR_BERRCF_Pos)              /*!< 0x00000100 */
#define I2C_ICR_BERRCF               I2C_ICR_BERRCF_Msk                        /*!< Bus error clear flag */
#define I2C_ICR_ARLOCF_Pos           (9U)
#define I2C_ICR_ARLOCF_Msk           (0x1UL << I2C_ICR_ARLOCF_Pos)              /*!< 0x00000200 */
#define I2C_ICR_ARLOCF               I2C_ICR_ARLOCF_Msk                        /*!< Arbitration lost clear flag */
#define I2C_ICR_OVRCF_Pos            (10U)
#define I2C_ICR_OVRCF_Msk            (0x1UL << I2C_ICR_OVRCF_Pos)               /*!< 0x00000400 */
#define I2C_ICR_OVRCF                I2C_ICR_OVRCF_Msk                         /*!< Overrun/Underrun clear flag */
#define I2C_ICR_PECCF_Pos            (11U)
#define I2C_ICR_PECCF_Msk            (0x1UL << I2C_ICR_PECCF_Pos)               /*!< 0x00000800 */
#define I2C_ICR_PECCF                I2C_ICR_PECCF_Msk                         /*!< PAC error clear flag */
#define I2C_ICR_TIMOUTCF_Pos         (12U)
#define I2C_ICR_TIMOUTCF_Msk         (0x1UL << I2C_ICR_TIMOUTCF_Pos)            /*!< 0x00001000 */
#define I2C_ICR_TIMOUTCF             I2C_ICR_TIMOUTCF_Msk                      /*!< Timeout clear flag */
#define I2C_ICR_ALERTCF_Pos          (13U)
#define I2C_ICR_ALERTCF_Msk          (0x1UL << I2C_ICR_ALERTCF_Pos)             /*!< 0x00002000 */
#define I2C_ICR_ALERTCF              I2C_ICR_ALERTCF_Msk                       /*!< Alert clear flag */

/******************  Bit definition for I2C_PECR register  *********************/
#define I2C_PECR_PEC_Pos             (0U)
#define I2C_PECR_PEC_Msk             (0xFFUL << I2C_PECR_PEC_Pos)               /*!< 0x000000FF */
#define I2C_PECR_PEC                 I2C_PECR_PEC_Msk                          /*!< PEC register */

/******************  Bit definition for I2C_RXDR register  *********************/
#define I2C_RXDR_RXDATA_Pos          (0U)
#define I2C_RXDR_RXDATA_Msk          (0xFFUL << I2C_RXDR_RXDATA_Pos)            /*!< 0x000000FF */
#define I2C_RXDR_RXDATA              I2C_RXDR_RXDATA_Msk                       /*!< 8-bit receive data */

/******************  Bit definition for I2C_TXDR register  *********************/
#define I2C_TXDR_TXDATA_Pos          (0U)
#define I2C_TXDR_TXDATA_Msk          (0xFFUL << I2C_TXDR_TXDATA_Pos)            /*!< 0x000000FF */
#define I2C_TXDR_TXDATA              I2C_TXDR_TXDATA_Msk                       /*!< 8-bit transmit data */

/******************  Bit definition for I2C_AUTOCR register  ********************/
#define I2C_AUTOCR_TCDMAEN_Pos              (6U)
#define I2C_AUTOCR_TCDMAEN_Msk              (0x1UL << I2C_AUTOCR_TCDMAEN_Pos)       /*!< 0x00000040 */
#define I2C_AUTOCR_TCDMAEN                  I2C_AUTOCR_TCDMAEN_Msk                  /*!< DMA request enable on Transfer Complete event */
#define I2C_AUTOCR_TCRDMAEN_Pos             (7U)
#define I2C_AUTOCR_TCRDMAEN_Msk             (0x1UL << I2C_AUTOCR_TCRDMAEN_Pos)      /*!< 0x00000080 */
#define I2C_AUTOCR_TCRDMAEN                 I2C_AUTOCR_TCRDMAEN_Msk                 /*!< DMA request enable on Transfer Complete Reload event */
#define I2C_AUTOCR_TRIGSEL_Pos              (16U)
#define I2C_AUTOCR_TRIGSEL_Msk              (0xFUL << I2C_AUTOCR_TRIGSEL_Pos)       /*!< 0x000F0000 */
#define I2C_AUTOCR_TRIGSEL                  I2C_AUTOCR_TRIGSEL_Msk                  /*!< Trigger selection */
#define I2C_AUTOCR_TRIGPOL_Pos              (20U)
#define I2C_AUTOCR_TRIGPOL_Msk              (0x1UL << I2C_AUTOCR_TRIGPOL_Pos)       /*!< 0x000100000 */
#define I2C_AUTOCR_TRIGPOL                  I2C_AUTOCR_TRIGPOL_Msk                  /*!< Trigger polarity */
#define I2C_AUTOCR_TRIGEN_Pos               (21U)
#define I2C_AUTOCR_TRIGEN_Msk               (0x1UL << I2C_AUTOCR_TRIGEN_Pos)        /*!< 0x000200000 */
#define I2C_AUTOCR_TRIGEN                   I2C_AUTOCR_TRIGEN_Msk                   /*!< Trigger enable */

/********************  Bit definition for I2C_VERR register***********************/
#define I2C_VERR_MINREV_Pos          (0U)
#define I2C_VERR_MINREV_Msk          (0xFUL << I2C_VERR_MINREV_Pos)             /*!< 0x0000000F */
#define I2C_VERR_MINREV              I2C_VERR_MINREV_Msk                       /*!< Minor Revision of the IP */
#define I2C_VERR_MAJREV_Pos          (4U)
#define I2C_VERR_MAJREV_Msk          (0xFUL << I2C_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define I2C_VERR_MAJREV              I2C_VERR_MAJREV_Msk                       /*!< Major Revision of the IP */

/********************  Bit definition for I2C_IPIDR register**********************/
#define I2C_IPIDR_ID_Pos             (0U)
#define I2C_IPIDR_ID_Msk             (0xFFFFFFFFUL << I2C_IPIDR_ID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_IPIDR_ID                 I2C_IPIDR_ID_Msk                          /*!< IP Identifier */

/********************  Bit definition for I2C_SIDR register**********************/
#define I2C_SIDR_SID_Pos             (0U)
#define I2C_SIDR_SID_Msk             (0xFFFFFFFFUL << I2C_SIDR_SID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_SIDR_SID                 I2C_SIDR_SID_Msk                          /*!< Size Identifier */

/******************************************************************************/
/*                                                                            */
/*                    Inter-integrated Circuit Interface (I3C)                */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for I3C_CR register  ********************/
#define I3C_CR_DCNT_Pos              (0U)
#define I3C_CR_DCNT_Msk              (0xFFFFUL << I3C_CR_DCNT_Pos)          /*!< 0x0000FFFF */
#define I3C_CR_DCNT                  I3C_CR_DCNT_Msk                       /*!< count of data to transfer during a read or write message, in bytes (whatever I3C is acting as contr */
#define I3C_CR_RNW_Pos               (16U)
#define I3C_CR_RNW_Msk               (0x1UL << I3C_CR_RNW_Pos)              /*!< 0x00010000 */
#define I3C_CR_RNW                   I3C_CR_RNW_Msk                        /*!< read / non-write message (when I3C is acting as controller) */
#define I3C_CR_CCC_Pos               (16U)
#define I3C_CR_CCC_Msk               (0xFFUL << I3C_CR_CCC_Pos)            /*!< 0x00FF0000 */
#define I3C_CR_CCC                   I3C_CR_CCC_Msk                        /*!< 8-Bit CCC code */
#define I3C_CR_ADD_Pos               (17U)
#define I3C_CR_ADD_Msk               (0x7FUL << I3C_CR_ADD_Pos)             /*!< 0x00FE0000 */
#define I3C_CR_ADD                   I3C_CR_ADD_Msk                        /*!< 7-bit I3C dynamic / I2C static target address (when I3C is acting as controller) */
#define I3C_CR_MTYPE_Pos             (27U)
#define I3C_CR_MTYPE_Msk             (0xFUL << I3C_CR_MTYPE_Pos)            /*!< 0x78000000 */
#define I3C_CR_MTYPE                 I3C_CR_MTYPE_Msk                      /*!< message type (whatever I3C is acting as controller/target) */
#define I3C_CR_MTYPE_0               (0x1UL << I3C_CR_MTYPE_Pos)           /*!< 0x08000000 */
#define I3C_CR_MTYPE_1               (0x2UL << I3C_CR_MTYPE_Pos)           /*!< 0x10000000 */
#define I3C_CR_MTYPE_2               (0x4UL << I3C_CR_MTYPE_Pos)           /*!< 0x20000000 */
#define I3C_CR_MTYPE_3               (0x8UL << I3C_CR_MTYPE_Pos)           /*!< 0x40000000 */
#define I3C_CR_MEND_Pos              (31U)
#define I3C_CR_MEND_Msk              (0x1UL << I3C_CR_MEND_Pos)             /*!< 0x80000000 */
#define I3C_CR_MEND                  I3C_CR_MEND_Msk                       /*!< message end type (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_CFGR register  *******************/
#define I3C_CFGR_EN_Pos              (0U)
#define I3C_CFGR_EN_Msk              (0x1UL << I3C_CFGR_EN_Pos)             /*!< 0x00000001 */
#define I3C_CFGR_EN                  I3C_CFGR_EN_Msk                       /*!< I3C enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_CRINIT_Pos          (1U)
#define I3C_CFGR_CRINIT_Msk          (0x1UL << I3C_CFGR_CRINIT_Pos)         /*!< 0x00000002 */
#define I3C_CFGR_CRINIT              I3C_CFGR_CRINIT_Msk                   /*!< initial controller/target role */
#define I3C_CFGR_NOARBH_Pos          (2U)
#define I3C_CFGR_NOARBH_Msk          (0x1UL << I3C_CFGR_NOARBH_Pos)         /*!< 0x00000004 */
#define I3C_CFGR_NOARBH              I3C_CFGR_NOARBH_Msk                   /*!< no arbitrable header after a START (when I3C is acting as a controller) */
#define I3C_CFGR_RSTPTRN_Pos         (3U)
#define I3C_CFGR_RSTPTRN_Msk         (0x1UL << I3C_CFGR_RSTPTRN_Pos)        /*!< 0x00000008 */
#define I3C_CFGR_RSTPTRN             I3C_CFGR_RSTPTRN_Msk                  /*!< HDR reset pattern enable (when I3C is acting as a controller) */
#define I3C_CFGR_EXITPTRN_Pos        (4U)
#define I3C_CFGR_EXITPTRN_Msk        (0x1UL << I3C_CFGR_EXITPTRN_Pos)       /*!< 0x00000010 */
#define I3C_CFGR_EXITPTRN            I3C_CFGR_EXITPTRN_Msk                 /*!< HDR Exit Pattern enable (when I3C is acting as a controller) */
#define I3C_CFGR_HKSDAEN_Pos         (5U)
#define I3C_CFGR_HKSDAEN_Msk         (0x1UL << I3C_CFGR_HKSDAEN_Pos)        /*!< 0x00000020 */
#define I3C_CFGR_HKSDAEN             I3C_CFGR_HKSDAEN_Msk                  /*!< High-keeper enable on SDA line (when I3C is acting as a controller) */
#define I3C_CFGR_HJACK_Pos           (7U)
#define I3C_CFGR_HJACK_Msk           (0x1UL << I3C_CFGR_HJACK_Pos)          /*!< 0x00000080 */
#define I3C_CFGR_HJACK               I3C_CFGR_HJACK_Msk                    /*!< Hot Join request acknowledge (when I3C is acting as a controller) */
#define I3C_CFGR_RXDMAEN_Pos         (8U)
#define I3C_CFGR_RXDMAEN_Msk         (0x1UL << I3C_CFGR_RXDMAEN_Pos)        /*!< 0x00000100 */
#define I3C_CFGR_RXDMAEN             I3C_CFGR_RXDMAEN_Msk                  /*!< RX-FIFO DMA request enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_RXFLUSH_Pos         (9U)
#define I3C_CFGR_RXFLUSH_Msk         (0x1UL << I3C_CFGR_RXFLUSH_Pos)        /*!< 0x00000200 */
#define I3C_CFGR_RXFLUSH             I3C_CFGR_RXFLUSH_Msk                  /*!< RX-FIFO flush (whatever I3C is acting as controller/target) */
#define I3C_CFGR_RXTHRES_Pos         (10U)
#define I3C_CFGR_RXTHRES_Msk         (0x1UL << I3C_CFGR_RXTHRES_Pos)        /*!< 0x00000400 */
#define I3C_CFGR_RXTHRES             I3C_CFGR_RXTHRES_Msk                  /*!< RX-FIFO threshold (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXDMAEN_Pos         (12U)
#define I3C_CFGR_TXDMAEN_Msk         (0x1UL << I3C_CFGR_TXDMAEN_Pos)        /*!< 0x00001000 */
#define I3C_CFGR_TXDMAEN             I3C_CFGR_TXDMAEN_Msk                  /*!< TX-FIFO DMA request enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXFLUSH_Pos         (13U)
#define I3C_CFGR_TXFLUSH_Msk         (0x1UL << I3C_CFGR_TXFLUSH_Pos)        /*!< 0x00002000 */
#define I3C_CFGR_TXFLUSH             I3C_CFGR_TXFLUSH_Msk                  /*!< TX-FIFO flush (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXTHRES_Pos         (14U)
#define I3C_CFGR_TXTHRES_Msk         (0x1UL << I3C_CFGR_TXTHRES_Pos)        /*!< 0x00004000 */
#define I3C_CFGR_TXTHRES             I3C_CFGR_TXTHRES_Msk                  /*!< TX-FIFO threshold (whatever I3C is acting as controller/target) */
#define I3C_CFGR_SDMAEN_Pos          (16U)
#define I3C_CFGR_SDMAEN_Msk          (0x1UL << I3C_CFGR_SDMAEN_Pos)         /*!< 0x00010000 */
#define I3C_CFGR_SDMAEN              I3C_CFGR_SDMAEN_Msk                   /*!< S-FIFO DMA request enable (when I3C is acting as controller) */
#define I3C_CFGR_SFLUSH_Pos          (17U)
#define I3C_CFGR_SFLUSH_Msk          (0x1UL << I3C_CFGR_SFLUSH_Pos)         /*!< 0x00020000 */
#define I3C_CFGR_SFLUSH              I3C_CFGR_SFLUSH_Msk                   /*!< S-FIFO flush (when I3C is acting as controller) */
#define I3C_CFGR_SMODE_Pos           (18U)
#define I3C_CFGR_SMODE_Msk           (0x1UL << I3C_CFGR_SMODE_Pos)          /*!< 0x00040000 */
#define I3C_CFGR_SMODE               I3C_CFGR_SMODE_Msk                    /*!< S-FIFO enable / status receive mode (when I3C is acting as controller) */
#define I3C_CFGR_TMODE_Pos           (19U)
#define I3C_CFGR_TMODE_Msk           (0x1UL << I3C_CFGR_TMODE_Pos)          /*!< 0x00080000 */
#define I3C_CFGR_TMODE               I3C_CFGR_TMODE_Msk                    /*!< transmit mode (when I3C is acting as controller) */
#define I3C_CFGR_CDMAEN_Pos          (20U)
#define I3C_CFGR_CDMAEN_Msk          (0x1UL << I3C_CFGR_CDMAEN_Pos)         /*!< 0x00100000 */
#define I3C_CFGR_CDMAEN              I3C_CFGR_CDMAEN_Msk                   /*!< C-FIFO DMA request enable (when I3C is acting as controller) */
#define I3C_CFGR_CFLUSH_Pos          (21U)
#define I3C_CFGR_CFLUSH_Msk          (0x1UL << I3C_CFGR_CFLUSH_Pos)         /*!< 0x00200000 */
#define I3C_CFGR_CFLUSH              I3C_CFGR_CFLUSH_Msk                   /*!< C-FIFO flush (when I3C is acting as controller) */
#define I3C_CFGR_FCFDIS_Pos          (23U)
#define I3C_CFGR_FCFDIS_Msk          (0x1UL << I3C_CFGR_FCFDIS_Pos)         /*!< 0x00800000 */
#define I3C_CFGR_FCFDIS              I3C_CFGR_FCFDIS_Msk                   /*!< FCF generation disable (when I3C acts as controller) */
#define I3C_CFGR_TSFSET_Pos          (30U)
#define I3C_CFGR_TSFSET_Msk          (0x1UL << I3C_CFGR_TSFSET_Pos)         /*!< 0x40000000 */
#define I3C_CFGR_TSFSET              I3C_CFGR_TSFSET_Msk                   /*!< frame transfer set (a */

/*******************  Bit definition for I3C_RDR register  ********************/
#define I3C_RDR_RDB0_Pos             (0U)
#define I3C_RDR_RDB0_Msk             (0xFFUL << I3C_RDR_RDB0_Pos)           /*!< 0x000000FF */
#define I3C_RDR_RDB0                 I3C_RDR_RDB0_Msk                      /*!< 8-bit received data on I3C bus */

/*******************  Bit definition for I3C_RDWR register  *******************/
#define I3C_RDWR_RDBx_Pos            (0U)
#define I3C_RDWR_RDBx_Msk            (0xFFFFFFFFUL << I3C_RDWR_RDBx_Pos)  /*!< 0xFFFFFFFF */
#define I3C_RDWR_RDBx                I3C_RDWR_RDBx_Msk                    /*!< 32-bit received data */
#define I3C_RDWR_RDB0_Pos            (0U)
#define I3C_RDWR_RDB0_Msk            (0xFFUL << I3C_RDWR_RDB0_Pos)          /*!< 0x000000FF */
#define I3C_RDWR_RDB0                I3C_RDWR_RDB0_Msk                     /*!< 8-bit received data (earliest byte on I3C bus) */
#define I3C_RDWR_RDB1_Pos            (8U)
#define I3C_RDWR_RDB1_Msk            (0xFFUL << I3C_RDWR_RDB1_Pos)          /*!< 0x0000FF00 */
#define I3C_RDWR_RDB1                I3C_RDWR_RDB1_Msk                     /*!< 8-bit received data (next byte after RDB0 on I3C bus) */
#define I3C_RDWR_RDB2_Pos            (16U)
#define I3C_RDWR_RDB2_Msk            (0xFFUL << I3C_RDWR_RDB2_Pos)          /*!< 0x00FF0000 */
#define I3C_RDWR_RDB2                I3C_RDWR_RDB2_Msk                     /*!< 8-bit received data (next byte after RDB1 on I3C bus) */
#define I3C_RDWR_RDB3_Pos            (24U)
#define I3C_RDWR_RDB3_Msk            (0xFFUL << I3C_RDWR_RDB3_Pos)          /*!< 0xFF000000 */
#define I3C_RDWR_RDB3                I3C_RDWR_RDB3_Msk                     /*!< 8-bit received data (latest byte on I3C bus) */

/*******************  Bit definition for I3C_TDR register  ********************/
#define I3C_TDR_TDB0_Pos             (0U)
#define I3C_TDR_TDB0_Msk             (0xFFUL << I3C_TDR_TDB0_Pos)           /*!< 0x000000FF */
#define I3C_TDR_TDB0                 I3C_TDR_TDB0_Msk                      /*!< 8-bit data to transmit on I3C bus */

/*******************  Bit definition for I3C_TDWR register  *******************/
#define I3C_TDWR_TDBx_Pos            (0U)
#define I3C_TDWR_TDBx_Msk            (0xFFFFFFFFUL << I3C_TDWR_TDBx_Pos)   /*!< 0xFFFFFFFF */
#define I3C_TDWR_TDBx                I3C_TDWR_TDBx_Msk                     /*!< 32-bit transmit data */
#define I3C_TDWR_TDB0_Pos            (0U)
#define I3C_TDWR_TDB0_Msk            (0xFFUL << I3C_TDWR_TDB0_Pos)          /*!< 0x000000FF */
#define I3C_TDWR_TDB0                I3C_TDWR_TDB0_Msk                     /*!< 8-bit transmit data (earliest byte on I3C bus) */
#define I3C_TDWR_TDB1_Pos            (8U)
#define I3C_TDWR_TDB1_Msk            (0xFFUL << I3C_TDWR_TDB1_Pos)          /*!< 0x0000FF00 */
#define I3C_TDWR_TDB1                I3C_TDWR_TDB1_Msk                     /*!< 8-bit transmit data (next byte after TDB0[7:0] on I3C bus) */
#define I3C_TDWR_TDB2_Pos            (16U)
#define I3C_TDWR_TDB2_Msk            (0xFFUL << I3C_TDWR_TDB2_Pos)          /*!< 0x00FF0000 */
#define I3C_TDWR_TDB2                I3C_TDWR_TDB2_Msk                     /*!< 8-bit transmit data (next byte after TDB1[7:0] on I3C bus) */
#define I3C_TDWR_TDB3_Pos            (24U)
#define I3C_TDWR_TDB3_Msk            (0xFFUL << I3C_TDWR_TDB3_Pos)          /*!< 0xFF000000 */
#define I3C_TDWR_TDB3                I3C_TDWR_TDB3_Msk                     /*!< 8-bit transmit data (latest byte on I3C bus) */

/******************  Bit definition for I3C_IBIDR register  *******************/
#define I3C_IBIDR_IBIDBx_Pos         (0U)
#define I3C_IBIDR_IBIDBx_Msk         (0xFFFFFFFFUL << I3C_IBIDR_IBIDBx_Pos)/*!< 0xFFFFFFFF */
#define I3C_IBIDR_IBIDBx             I3C_IBIDR_IBIDBx_Msk                  /*!< 32-bit IBI payload data */
#define I3C_IBIDR_IBIDB0_Pos         (0U)
#define I3C_IBIDR_IBIDB0_Msk         (0xFFUL << I3C_IBIDR_IBIDB0_Pos)       /*!< 0x000000FF */
#define I3C_IBIDR_IBIDB0             I3C_IBIDR_IBIDB0_Msk                  /*!< 8-bit IBI payload data (earliest byte on I3C bus, i */
#define I3C_IBIDR_IBIDB1_Pos         (8U)
#define I3C_IBIDR_IBIDB1_Msk         (0xFFUL << I3C_IBIDR_IBIDB1_Pos)       /*!< 0x0000FF00 */
#define I3C_IBIDR_IBIDB1             I3C_IBIDR_IBIDB1_Msk                  /*!< 8-bit IBI payload data (next byte on I3C bus after IBIDB0[7:0]) */
#define I3C_IBIDR_IBIDB2_Pos         (16U)
#define I3C_IBIDR_IBIDB2_Msk         (0xFFUL << I3C_IBIDR_IBIDB2_Pos)       /*!< 0x00FF0000 */
#define I3C_IBIDR_IBIDB2             I3C_IBIDR_IBIDB2_Msk                  /*!< 8-bit IBI payload data (next byte on I3C bus after IBIDB1[7:0]) */
#define I3C_IBIDR_IBIDB3_Pos         (24U)
#define I3C_IBIDR_IBIDB3_Msk         (0xFFUL << I3C_IBIDR_IBIDB3_Pos)       /*!< 0xFF000000 */
#define I3C_IBIDR_IBIDB3             I3C_IBIDR_IBIDB3_Msk                  /*!< 8-bit IBI payload data (latest byte on I3C bus) */

/******************  Bit definition for I3C_TGTTDR register  ******************/
#define I3C_TGTTDR_TGTTDCNT_Pos      (0U)
#define I3C_TGTTDR_TGTTDCNT_Msk      (0xFFFFUL << I3C_TGTTDR_TGTTDCNT_Pos)  /*!< 0x0000FFFF */
#define I3C_TGTTDR_TGTTDCNT          I3C_TGTTDR_TGTTDCNT_Msk               /*!< transmit data counter, in bytes (when I3C is configured as target) */
#define I3C_TGTTDR_PRELOAD_Pos       (16U)
#define I3C_TGTTDR_PRELOAD_Msk       (0x1UL << I3C_TGTTDR_PRELOAD_Pos)      /*!< 0x00010000 */
#define I3C_TGTTDR_PRELOAD           I3C_TGTTDR_PRELOAD_Msk                /*!< preload of the TX-FIFO (when I3C is configured as target) */

/********************  Bit definition for I3C_SR register  ********************/
#define I3C_SR_XDCNT_Pos             (0U)
#define I3C_SR_XDCNT_Msk             (0xFFFFUL << I3C_SR_XDCNT_Pos)         /*!< 0x0000FFFF */
#define I3C_SR_XDCNT                 I3C_SR_XDCNT_Msk                      /*!< data counter */
#define I3C_SR_ABT_Pos               (17U)
#define I3C_SR_ABT_Msk               (0x1UL << I3C_SR_ABT_Pos)              /*!< 0x00020000 */
#define I3C_SR_ABT                   I3C_SR_ABT_Msk                        /*!< a private read message is completed/aborted prematurely by the target (when the I3C is acting as co */
#define I3C_SR_DIR_Pos               (18U)
#define I3C_SR_DIR_Msk               (0x1UL << I3C_SR_DIR_Pos)              /*!< 0x00040000 */
#define I3C_SR_DIR                   I3C_SR_DIR_Msk                        /*!< message direction */
#define I3C_SR_MID_Pos               (24U)
#define I3C_SR_MID_Msk               (0xFFUL << I3C_SR_MID_Pos)             /*!< 0xFF000000 */
#define I3C_SR_MID                   I3C_SR_MID_Msk                        /*!< message identifier/counter of a given frame (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_SER register  ********************/
#define I3C_SER_CODERR_Pos           (0U)
#define I3C_SER_CODERR_Msk           (0xFUL << I3C_SER_CODERR_Pos)          /*!< 0x0000000F */
#define I3C_SER_CODERR               I3C_SER_CODERR_Msk                    /*!< protocol error code/type */
#define I3C_SER_CODERR_0             (0x1UL << I3C_SER_CODERR_Pos)         /*!< 0x00000001 */
#define I3C_SER_CODERR_1             (0x2UL << I3C_SER_CODERR_Pos)         /*!< 0x00000002 */
#define I3C_SER_CODERR_2             (0x4UL << I3C_SER_CODERR_Pos)         /*!< 0x00000004 */
#define I3C_SER_CODERR_3             (0x8UL << I3C_SER_CODERR_Pos)         /*!< 0x00000008 */
#define I3C_SER_PERR_Pos             (4U)
#define I3C_SER_PERR_Msk             (0x1UL << I3C_SER_PERR_Pos)            /*!< 0x00000010 */
#define I3C_SER_PERR                 I3C_SER_PERR_Msk                      /*!< protocol error */
#define I3C_SER_STALL_Pos            (5U)
#define I3C_SER_STALL_Msk            (0x1UL << I3C_SER_STALL_Pos)           /*!< 0x00000020 */
#define I3C_SER_STALL                I3C_SER_STALL_Msk                     /*!< SCL stall error (when the I3C is acting as target) */
#define I3C_SER_DOVR_Pos             (6U)
#define I3C_SER_DOVR_Msk             (0x1UL << I3C_SER_DOVR_Pos)            /*!< 0x00000040 */
#define I3C_SER_DOVR                 I3C_SER_DOVR_Msk                      /*!< RX-FIFO overrun or TX-FIFO underrun */
#define I3C_SER_COVR_Pos             (7U)
#define I3C_SER_COVR_Msk             (0x1UL << I3C_SER_COVR_Pos)            /*!< 0x00000080 */
#define I3C_SER_COVR                 I3C_SER_COVR_Msk                      /*!< C-FIFO underrun or S-FIFO overrun (when the I3C is acting as controller) */
#define I3C_SER_ANACK_Pos            (8U)
#define I3C_SER_ANACK_Msk            (0x1UL << I3C_SER_ANACK_Pos)           /*!< 0x00000100 */
#define I3C_SER_ANACK                I3C_SER_ANACK_Msk                     /*!< address not acknowledged (when the I3C is configured as controller) */
#define I3C_SER_DNACK_Pos            (9U)
#define I3C_SER_DNACK_Msk            (0x1UL << I3C_SER_DNACK_Pos)           /*!< 0x00000200 */
#define I3C_SER_DNACK                I3C_SER_DNACK_Msk                     /*!< data not acknowledged (when the I3C is acting as controller) */
#define I3C_SER_DERR_Pos             (10U)
#define I3C_SER_DERR_Msk             (0x1UL << I3C_SER_DERR_Pos)            /*!< 0x00000400 */
#define I3C_SER_DERR                 I3C_SER_DERR_Msk                      /*!< data error (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_RMR register  ********************/
#define I3C_RMR_IBIRDCNT_Pos         (0U)
#define I3C_RMR_IBIRDCNT_Msk         (0x7UL << I3C_RMR_IBIRDCNT_Pos)        /*!< 0x00000007 */
#define I3C_RMR_IBIRDCNT             I3C_RMR_IBIRDCNT_Msk                  /*!< IBI received payload data count (when the I3C is configured as controller) */
#define I3C_RMR_RCODE_Pos            (8U)
#define I3C_RMR_RCODE_Msk            (0xFFUL << I3C_RMR_RCODE_Pos)          /*!< 0x0000FF00 */
#define I3C_RMR_RCODE                I3C_RMR_RCODE_Msk                     /*!< received CCC code (when the I3C is configured as target) */
#define I3C_RMR_RADD_Pos             (17U)
#define I3C_RMR_RADD_Msk             (0x7FUL << I3C_RMR_RADD_Pos)           /*!< 0x00FE0000 */
#define I3C_RMR_RADD                 I3C_RMR_RADD_Msk                      /*!< received target address (when the I3C is configured as controller) */

/*******************  Bit definition for I3C_EVR register  ********************/
#define I3C_EVR_CFEF_Pos             (0U)
#define I3C_EVR_CFEF_Msk             (0x1UL << I3C_EVR_CFEF_Pos)            /*!< 0x00000001 */
#define I3C_EVR_CFEF                 I3C_EVR_CFEF_Msk                      /*!< C-FIFO empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_TXFEF_Pos            (1U)
#define I3C_EVR_TXFEF_Msk            (0x1UL << I3C_EVR_TXFEF_Pos)           /*!< 0x00000002 */
#define I3C_EVR_TXFEF                I3C_EVR_TXFEF_Msk                     /*!< TX-FIFO empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_CFNFF_Pos            (2U)
#define I3C_EVR_CFNFF_Msk            (0x1UL << I3C_EVR_CFNFF_Pos)           /*!< 0x00000004 */
#define I3C_EVR_CFNFF                I3C_EVR_CFNFF_Msk                     /*!< C-FIFO not full flag (when the I3C is acting as controller) */
#define I3C_EVR_SFNEF_Pos            (3U)
#define I3C_EVR_SFNEF_Msk            (0x1UL << I3C_EVR_SFNEF_Pos)           /*!< 0x00000008 */
#define I3C_EVR_SFNEF                I3C_EVR_SFNEF_Msk                     /*!< S-FIFO not empty flag (when the I3C is acting as controller) */
#define I3C_EVR_TXFNFF_Pos           (4U)
#define I3C_EVR_TXFNFF_Msk           (0x1UL << I3C_EVR_TXFNFF_Pos)          /*!< 0x00000010 */
#define I3C_EVR_TXFNFF               I3C_EVR_TXFNFF_Msk                    /*!< TX-FIFO not full flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXFNEF_Pos           (5U)
#define I3C_EVR_RXFNEF_Msk           (0x1UL << I3C_EVR_RXFNEF_Pos)          /*!< 0x00000020 */
#define I3C_EVR_RXFNEF               I3C_EVR_RXFNEF_Msk                    /*!< RX-FIFO not empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_TXLASTF_Pos          (6U)
#define I3C_EVR_TXLASTF_Msk          (0x1UL << I3C_EVR_TXLASTF_Pos)         /*!< 0x00000040 */
#define I3C_EVR_TXLASTF              I3C_EVR_TXLASTF_Msk                   /*!< last written data byte/word flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXLASTF_Pos          (7U)
#define I3C_EVR_RXLASTF_Msk          (0x1UL << I3C_EVR_RXLASTF_Pos)         /*!< 0x00000080 */
#define I3C_EVR_RXLASTF              I3C_EVR_RXLASTF_Msk                   /*!< last read data byte/word flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_FCF_Pos              (9U)
#define I3C_EVR_FCF_Msk              (0x1UL << I3C_EVR_FCF_Pos)             /*!< 0x00000200 */
#define I3C_EVR_FCF                  I3C_EVR_FCF_Msk                       /*!< frame complete flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXTGTENDF_Pos        (10U)
#define I3C_EVR_RXTGTENDF_Msk        (0x1UL << I3C_EVR_RXTGTENDF_Pos)       /*!< 0x00000400 */
#define I3C_EVR_RXTGTENDF            I3C_EVR_RXTGTENDF_Msk                 /*!< target-initiated read end flag (when the I3C is acting as controller) */
#define I3C_EVR_ERRF_Pos             (11U)
#define I3C_EVR_ERRF_Msk             (0x1UL << I3C_EVR_ERRF_Pos)            /*!< 0x00000800 */
#define I3C_EVR_ERRF                 I3C_EVR_ERRF_Msk                      /*!< flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_IBIF_Pos             (15U)
#define I3C_EVR_IBIF_Msk             (0x1UL << I3C_EVR_IBIF_Pos)            /*!< 0x00008000 */
#define I3C_EVR_IBIF                 I3C_EVR_IBIF_Msk                      /*!< IBI flag (when the I3C is acting as controller) */
#define I3C_EVR_IBIENDF_Pos          (16U)
#define I3C_EVR_IBIENDF_Msk          (0x1UL << I3C_EVR_IBIENDF_Pos)         /*!< 0x00010000 */
#define I3C_EVR_IBIENDF              I3C_EVR_IBIENDF_Msk                   /*!< IBI end flag (when the I3C is acting as target) */
#define I3C_EVR_CRF_Pos              (17U)
#define I3C_EVR_CRF_Msk              (0x1UL << I3C_EVR_CRF_Pos)             /*!< 0x00020000 */
#define I3C_EVR_CRF                  I3C_EVR_CRF_Msk                       /*!< controller-role request flag (when the I3C is acting as controller) */
#define I3C_EVR_CRUPDF_Pos           (18U)
#define I3C_EVR_CRUPDF_Msk           (0x1UL << I3C_EVR_CRUPDF_Pos)          /*!< 0x00040000 */
#define I3C_EVR_CRUPDF               I3C_EVR_CRUPDF_Msk                    /*!< controller-role update flag (when the I3C is acting as target) */
#define I3C_EVR_HJF_Pos              (19U)
#define I3C_EVR_HJF_Msk              (0x1UL << I3C_EVR_HJF_Pos)             /*!< 0x00080000 */
#define I3C_EVR_HJF                  I3C_EVR_HJF_Msk                       /*!< hot-join flag (when the I3C is acting as controller) */
#define I3C_EVR_WKPF_Pos             (21U)
#define I3C_EVR_WKPF_Msk             (0x1UL << I3C_EVR_WKPF_Pos)            /*!< 0x00200000 */
#define I3C_EVR_WKPF                 I3C_EVR_WKPF_Msk                      /*!< wakeup/missed start flag (when the I3C is acting as target) */
#define I3C_EVR_GETF_Pos             (22U)
#define I3C_EVR_GETF_Msk             (0x1UL << I3C_EVR_GETF_Pos)            /*!< 0x00400000 */
#define I3C_EVR_GETF                 I3C_EVR_GETF_Msk                      /*!< get flag (when the I3C is acting as target) */
#define I3C_EVR_STAF_Pos             (23U)
#define I3C_EVR_STAF_Msk             (0x1UL << I3C_EVR_STAF_Pos)            /*!< 0x00800000 */
#define I3C_EVR_STAF                 I3C_EVR_STAF_Msk                      /*!< get status flag (when the I3C is acting as target) */
#define I3C_EVR_DAUPDF_Pos           (24U)
#define I3C_EVR_DAUPDF_Msk           (0x1UL << I3C_EVR_DAUPDF_Pos)          /*!< 0x01000000 */
#define I3C_EVR_DAUPDF               I3C_EVR_DAUPDF_Msk                    /*!< dynamic address update flag (when the I3C is acting as target) */
#define I3C_EVR_MWLUPDF_Pos          (25U)
#define I3C_EVR_MWLUPDF_Msk          (0x1UL << I3C_EVR_MWLUPDF_Pos)         /*!< 0x02000000 */
#define I3C_EVR_MWLUPDF              I3C_EVR_MWLUPDF_Msk                   /*!< maximum write length update flag (when the I3C is acting as target) */
#define I3C_EVR_MRLUPDF_Pos          (26U)
#define I3C_EVR_MRLUPDF_Msk          (0x1UL << I3C_EVR_MRLUPDF_Pos)         /*!< 0x04000000 */
#define I3C_EVR_MRLUPDF              I3C_EVR_MRLUPDF_Msk                   /*!< maximum read length update flag (when the I3C is acting as target) */
#define I3C_EVR_RSTF_Pos             (27U)
#define I3C_EVR_RSTF_Msk             (0x1UL << I3C_EVR_RSTF_Pos)            /*!< 0x08000000 */
#define I3C_EVR_RSTF                 I3C_EVR_RSTF_Msk                      /*!< reset pattern flag (when the I3C is acting as target) */
#define I3C_EVR_ASUPDF_Pos           (28U)
#define I3C_EVR_ASUPDF_Msk           (0x1UL << I3C_EVR_ASUPDF_Pos)          /*!< 0x10000000 */
#define I3C_EVR_ASUPDF               I3C_EVR_ASUPDF_Msk                    /*!< activity state update flag (when the I3C is acting as target) */
#define I3C_EVR_INTUPDF_Pos          (29U)
#define I3C_EVR_INTUPDF_Msk          (0x1UL << I3C_EVR_INTUPDF_Pos)         /*!< 0x20000000 */
#define I3C_EVR_INTUPDF              I3C_EVR_INTUPDF_Msk                   /*!< interrupt/controller-role/hot-join update flag (when the I3C is acting as target) */
#define I3C_EVR_DEFF_Pos             (30U)
#define I3C_EVR_DEFF_Msk             (0x1UL << I3C_EVR_DEFF_Pos)            /*!< 0x40000000 */
#define I3C_EVR_DEFF                 I3C_EVR_DEFF_Msk                      /*!< DEFTGTS flag (when the I3C is acting as target) */
#define I3C_EVR_GRPF_Pos             (31U)
#define I3C_EVR_GRPF_Msk             (0x1UL << I3C_EVR_GRPF_Pos)            /*!< 0x80000000 */
#define I3C_EVR_GRPF                 I3C_EVR_GRPF_Msk                      /*!< group addressing flag (when the I3C is acting as target) */

/*******************  Bit definition for I3C_IER register  ********************/
#define I3C_IER_CFNFIE_Pos           (2U)
#define I3C_IER_CFNFIE_Msk           (0x1UL << I3C_IER_CFNFIE_Pos)          /*!< 0x00000004 */
#define I3C_IER_CFNFIE               I3C_IER_CFNFIE_Msk                    /*!< C-FIFO not full interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_SFNEIE_Pos           (3U)
#define I3C_IER_SFNEIE_Msk           (0x1UL << I3C_IER_SFNEIE_Pos)          /*!< 0x00000008 */
#define I3C_IER_SFNEIE               I3C_IER_SFNEIE_Msk                    /*!< S-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_TXFNFIE_Pos          (4U)
#define I3C_IER_TXFNFIE_Msk          (0x1UL << I3C_IER_TXFNFIE_Pos)         /*!< 0x00000010 */
#define I3C_IER_TXFNFIE              I3C_IER_TXFNFIE_Msk                   /*!< TX-FIFO not full interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_RXFNEIE_Pos          (5U)
#define I3C_IER_RXFNEIE_Msk          (0x1UL << I3C_IER_RXFNEIE_Pos)         /*!< 0x00000020 */
#define I3C_IER_RXFNEIE              I3C_IER_RXFNEIE_Msk                   /*!< RX-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_FCIE_Pos             (9U)
#define I3C_IER_FCIE_Msk             (0x1UL << I3C_IER_FCIE_Pos)            /*!< 0x00000200 */
#define I3C_IER_FCIE                 I3C_IER_FCIE_Msk                      /*!< frame complete interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_RXTGTENDIE_Pos       (10U)
#define I3C_IER_RXTGTENDIE_Msk       (0x1UL << I3C_IER_RXTGTENDIE_Pos)      /*!< 0x00000400 */
#define I3C_IER_RXTGTENDIE           I3C_IER_RXTGTENDIE_Msk                /*!< target-initiated read end interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_ERRIE_Pos            (11U)
#define I3C_IER_ERRIE_Msk            (0x1UL << I3C_IER_ERRIE_Pos)           /*!< 0x00000800 */
#define I3C_IER_ERRIE                I3C_IER_ERRIE_Msk                     /*!< error interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_IBIIE_Pos            (15U)
#define I3C_IER_IBIIE_Msk            (0x1UL << I3C_IER_IBIIE_Pos)           /*!< 0x00008000 */
#define I3C_IER_IBIIE                I3C_IER_IBIIE_Msk                     /*!< IBI request interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_IBIENDIE_Pos         (16U)
#define I3C_IER_IBIENDIE_Msk         (0x1UL << I3C_IER_IBIENDIE_Pos)        /*!< 0x00010000 */
#define I3C_IER_IBIENDIE             I3C_IER_IBIENDIE_Msk                  /*!< IBI end interrupt enable (when the I3C is acting as target) */
#define I3C_IER_CRIE_Pos             (17U)
#define I3C_IER_CRIE_Msk             (0x1UL << I3C_IER_CRIE_Pos)            /*!< 0x00020000 */
#define I3C_IER_CRIE                 I3C_IER_CRIE_Msk                      /*!< controller-role request interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_CRUPDIE_Pos          (18U)
#define I3C_IER_CRUPDIE_Msk          (0x1UL << I3C_IER_CRUPDIE_Pos)         /*!< 0x00040000 */
#define I3C_IER_CRUPDIE              I3C_IER_CRUPDIE_Msk                   /*!< controller-role update interrupt enable (when the I3C is acting as target) */
#define I3C_IER_HJIE_Pos             (19U)
#define I3C_IER_HJIE_Msk             (0x1UL << I3C_IER_HJIE_Pos)            /*!< 0x00080000 */
#define I3C_IER_HJIE                 I3C_IER_HJIE_Msk                      /*!< hot-join interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_WKPIE_Pos            (21U)
#define I3C_IER_WKPIE_Msk            (0x1UL << I3C_IER_WKPIE_Pos)           /*!< 0x00200000 */
#define I3C_IER_WKPIE                I3C_IER_WKPIE_Msk                     /*!< wakeup interrupt enable (when the I3C is acting as target) */
#define I3C_IER_GETIE_Pos            (22U)
#define I3C_IER_GETIE_Msk            (0x1UL << I3C_IER_GETIE_Pos)           /*!< 0x00400000 */
#define I3C_IER_GETIE                I3C_IER_GETIE_Msk                     /*!< GETxxx CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_STAIE_Pos            (23U)
#define I3C_IER_STAIE_Msk            (0x1UL << I3C_IER_STAIE_Pos)           /*!< 0x00800000 */
#define I3C_IER_STAIE                I3C_IER_STAIE_Msk                     /*!< GETSTATUS CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_DAUPDIE_Pos          (24U)
#define I3C_IER_DAUPDIE_Msk          (0x1UL << I3C_IER_DAUPDIE_Pos)         /*!< 0x01000000 */
#define I3C_IER_DAUPDIE              I3C_IER_DAUPDIE_Msk                   /*!< ENTDAA/RSTDAA/SETNEWDA CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_MWLUPDIE_Pos         (25U)
#define I3C_IER_MWLUPDIE_Msk         (0x1UL << I3C_IER_MWLUPDIE_Pos)        /*!< 0x02000000 */
#define I3C_IER_MWLUPDIE             I3C_IER_MWLUPDIE_Msk                  /*!< SETMWL CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_MRLUPDIE_Pos         (26U)
#define I3C_IER_MRLUPDIE_Msk         (0x1UL << I3C_IER_MRLUPDIE_Pos)        /*!< 0x04000000 */
#define I3C_IER_MRLUPDIE             I3C_IER_MRLUPDIE_Msk                  /*!< SETMRL CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_RSTIE_Pos            (27U)
#define I3C_IER_RSTIE_Msk            (0x1UL << I3C_IER_RSTIE_Pos)           /*!< 0x08000000 */
#define I3C_IER_RSTIE                I3C_IER_RSTIE_Msk                     /*!< reset pattern interrupt enable (when the I3C is acting as target) */
#define I3C_IER_ASUPDIE_Pos          (28U)
#define I3C_IER_ASUPDIE_Msk          (0x1UL << I3C_IER_ASUPDIE_Pos)         /*!< 0x10000000 */
#define I3C_IER_ASUPDIE              I3C_IER_ASUPDIE_Msk                   /*!< ENTASx CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_INTUPDIE_Pos         (29U)
#define I3C_IER_INTUPDIE_Msk         (0x1UL << I3C_IER_INTUPDIE_Pos)        /*!< 0x20000000 */
#define I3C_IER_INTUPDIE             I3C_IER_INTUPDIE_Msk                  /*!< ENEC/DISEC CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_DEFIE_Pos            (30U)
#define I3C_IER_DEFIE_Msk            (0x1UL << I3C_IER_DEFIE_Pos)           /*!< 0x40000000 */
#define I3C_IER_DEFIE                I3C_IER_DEFIE_Msk                     /*!< DEFTGTS CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_GRPIE_Pos            (31U)
#define I3C_IER_GRPIE_Msk            (0x1UL << I3C_IER_GRPIE_Pos)           /*!< 0x80000000 */
#define I3C_IER_GRPIE                I3C_IER_GRPIE_Msk                     /*!< DEFGRPA CCC interrupt enable (when the I3C is acting as target) */

/*******************  Bit definition for I3C_CEVR register  *******************/
#define I3C_CEVR_CFCF_Pos            (9U)
#define I3C_CEVR_CFCF_Msk            (0x1UL << I3C_CEVR_CFCF_Pos)           /*!< 0x00000200 */
#define I3C_CEVR_CFCF                I3C_CEVR_CFCF_Msk                     /*!< clear frame complete flag (whatever the I3C is acting as controller/target) */
#define I3C_CEVR_CRXTGTENDF_Pos      (10U)
#define I3C_CEVR_CRXTGTENDF_Msk      (0x1UL << I3C_CEVR_CRXTGTENDF_Pos)     /*!< 0x00000400 */
#define I3C_CEVR_CRXTGTENDF          I3C_CEVR_CRXTGTENDF_Msk               /*!< clear target-initiated read end flag (when the I3C is acting as controller) */
#define I3C_CEVR_CERRF_Pos           (11U)
#define I3C_CEVR_CERRF_Msk           (0x1UL << I3C_CEVR_CERRF_Pos)          /*!< 0x00000800 */
#define I3C_CEVR_CERRF               I3C_CEVR_CERRF_Msk                    /*!< clear error flag (whatever the I3C is acting as controller/target) */
#define I3C_CEVR_CIBIF_Pos           (15U)
#define I3C_CEVR_CIBIF_Msk           (0x1UL << I3C_CEVR_CIBIF_Pos)          /*!< 0x00008000 */
#define I3C_CEVR_CIBIF               I3C_CEVR_CIBIF_Msk                    /*!< clear IBI request flag (when the I3C is acting as controller) */
#define I3C_CEVR_CIBIENDF_Pos        (16U)
#define I3C_CEVR_CIBIENDF_Msk        (0x1UL << I3C_CEVR_CIBIENDF_Pos)       /*!< 0x00010000 */
#define I3C_CEVR_CIBIENDF            I3C_CEVR_CIBIENDF_Msk                 /*!< clear IBI end flag (when the I3C is acting as target) */
#define I3C_CEVR_CCRF_Pos            (17U)
#define I3C_CEVR_CCRF_Msk            (0x1UL << I3C_CEVR_CCRF_Pos)           /*!< 0x00020000 */
#define I3C_CEVR_CCRF                I3C_CEVR_CCRF_Msk                     /*!< clear controller-role request flag (when the I3C is acting as controller) */
#define I3C_CEVR_CCRUPDF_Pos         (18U)
#define I3C_CEVR_CCRUPDF_Msk         (0x1UL << I3C_CEVR_CCRUPDF_Pos)        /*!< 0x00040000 */
#define I3C_CEVR_CCRUPDF             I3C_CEVR_CCRUPDF_Msk                  /*!< clear controller-role update flag (when the I3C is acting as target) */
#define I3C_CEVR_CHJF_Pos            (19U)
#define I3C_CEVR_CHJF_Msk            (0x1UL << I3C_CEVR_CHJF_Pos)           /*!< 0x00080000 */
#define I3C_CEVR_CHJF                I3C_CEVR_CHJF_Msk                     /*!< clear hot-join flag (when the I3C is acting as controller) */
#define I3C_CEVR_CWKPF_Pos           (21U)
#define I3C_CEVR_CWKPF_Msk           (0x1UL << I3C_CEVR_CWKPF_Pos)          /*!< 0x00200000 */
#define I3C_CEVR_CWKPF               I3C_CEVR_CWKPF_Msk                    /*!< clear wakeup flag (when the I3C is acting as target) */
#define I3C_CEVR_CGETF_Pos           (22U)
#define I3C_CEVR_CGETF_Msk           (0x1UL << I3C_CEVR_CGETF_Pos)          /*!< 0x00400000 */
#define I3C_CEVR_CGETF               I3C_CEVR_CGETF_Msk                    /*!< clear GETxxx CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CSTAF_Pos           (23U)
#define I3C_CEVR_CSTAF_Msk           (0x1UL << I3C_CEVR_CSTAF_Pos)          /*!< 0x00800000 */
#define I3C_CEVR_CSTAF               I3C_CEVR_CSTAF_Msk                    /*!< clear GETSTATUS CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CDAUPDF_Pos         (24U)
#define I3C_CEVR_CDAUPDF_Msk         (0x1UL << I3C_CEVR_CDAUPDF_Pos)        /*!< 0x01000000 */
#define I3C_CEVR_CDAUPDF             I3C_CEVR_CDAUPDF_Msk                  /*!< clear ENTDAA/RSTDAA/SETNEWDA CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CMWLUPDF_Pos        (25U)
#define I3C_CEVR_CMWLUPDF_Msk        (0x1UL << I3C_CEVR_CMWLUPDF_Pos)       /*!< 0x02000000 */
#define I3C_CEVR_CMWLUPDF            I3C_CEVR_CMWLUPDF_Msk                 /*!< clear SETMWL CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CMRLUPDF_Pos        (26U)
#define I3C_CEVR_CMRLUPDF_Msk        (0x1UL << I3C_CEVR_CMRLUPDF_Pos)       /*!< 0x04000000 */
#define I3C_CEVR_CMRLUPDF            I3C_CEVR_CMRLUPDF_Msk                 /*!< clear SETMRL CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CRSTF_Pos           (27U)
#define I3C_CEVR_CRSTF_Msk           (0x1UL << I3C_CEVR_CRSTF_Pos)          /*!< 0x08000000 */
#define I3C_CEVR_CRSTF               I3C_CEVR_CRSTF_Msk                    /*!< clear reset pattern flag (when the I3C is acting as target) */
#define I3C_CEVR_CASUPDF_Pos         (28U)
#define I3C_CEVR_CASUPDF_Msk         (0x1UL << I3C_CEVR_CASUPDF_Pos)        /*!< 0x10000000 */
#define I3C_CEVR_CASUPDF             I3C_CEVR_CASUPDF_Msk                  /*!< clear ENTASx CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CINTUPDF_Pos        (29U)
#define I3C_CEVR_CINTUPDF_Msk        (0x1UL << I3C_CEVR_CINTUPDF_Pos)       /*!< 0x20000000 */
#define I3C_CEVR_CINTUPDF            I3C_CEVR_CINTUPDF_Msk                 /*!< clear ENEC/DISEC CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CDEFF_Pos           (30U)
#define I3C_CEVR_CDEFF_Msk           (0x1UL << I3C_CEVR_CDEFF_Pos)          /*!< 0x40000000 */
#define I3C_CEVR_CDEFF               I3C_CEVR_CDEFF_Msk                    /*!< clear DEFTGTS CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CGRPF_Pos           (31U)
#define I3C_CEVR_CGRPF_Msk           (0x1UL << I3C_CEVR_CGRPF_Pos)          /*!< 0x80000000 */
#define I3C_CEVR_CGRPF               I3C_CEVR_CGRPF_Msk                    /*!< clear DEFGRPA CCC flag (when the I3C is acting as target) */

/*******************  Bit definition for I3C_MISR register  *******************/
#define I3C_MISR_CFNFMIS_Pos          (2U)
#define I3C_MISR_CFNFMIS_Msk          (0x1UL << I3C_MISR_CFNFMIS_Pos)         /*!< 0x00000004 */
#define I3C_MISR_CFNFMIS              I3C_MISR_CFNFMIS_Msk                   /*!< C-FIFO not full masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_SFNEMIS_Pos          (3U)
#define I3C_MISR_SFNEMIS_Msk          (0x1UL << I3C_MISR_SFNEMIS_Pos)         /*!< 0x00000008 */
#define I3C_MISR_SFNEMIS              I3C_MISR_SFNEMIS_Msk                   /*!< S-FIFO not empty masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_TXFNFMIS_Pos         (4U)
#define I3C_MISR_TXFNFMIS_Msk         (0x1UL << I3C_MISR_TXFNFMIS_Pos)        /*!< 0x00000010 */
#define I3C_MISR_TXFNFMIS             I3C_MISR_TXFNFMIS_Msk                  /*!< TX-FIFO not full masked interrupt status (whatever the I3C acts as controller/target) */
#define I3C_MISR_RXFNEMIS_Pos         (5U)
#define I3C_MISR_RXFNEMIS_Msk         (0x1UL << I3C_MISR_RXFNEMIS_Pos)        /*!< 0x00000020 */
#define I3C_MISR_RXFNEMIS             I3C_MISR_RXFNEMIS_Msk                  /*!< RX-FIFO not empty masked interrupt status (whatever the I3C acts as controller/target) */
#define I3C_MISR_FCMIS_Pos            (9U)
#define I3C_MISR_FCMIS_Msk            (0x1UL << I3C_MISR_FCMIS_Pos)           /*!< 0x00000200 */
#define I3C_MISR_FCMIS                I3C_MISR_FCMIS_Msk                     /*!< frame complete masked interrupt status (whatever the I3C acts as controller/target) */
#define I3C_MISR_RXTGTENDMIS_Pos      (10U)
#define I3C_MISR_RXTGTENDMIS_Msk      (0x1UL << I3C_MISR_RXTGTENDMIS_Pos)     /*!< 0x00000400 */
#define I3C_MISR_RXTGTENDMIS          I3C_MISR_RXTGTENDMIS_Msk               /*!< target-initiated read end masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_ERRMIS_Pos           (11U)
#define I3C_MISR_ERRMIS_Msk           (0x1UL << I3C_MISR_ERRMIS_Pos)          /*!< 0x00000800 */
#define I3C_MISR_ERRMIS               I3C_MISR_ERRMIS_Msk                    /*!< error masked interrupt status (whatever the I3C acts as controller/target) */
#define I3C_MISR_IBIMIS_Pos           (15U)
#define I3C_MISR_IBIMIS_Msk           (0x1UL << I3C_MISR_IBIMIS_Pos)          /*!< 0x00008000 */
#define I3C_MISR_IBIMIS               I3C_MISR_IBIMIS_Msk                    /*!< IBI request masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_IBIENDMIS_Pos        (16U)
#define I3C_MISR_IBIENDMIS_Msk        (0x1UL << I3C_MISR_IBIENDMIS_Pos)       /*!< 0x00010000 */
#define I3C_MISR_IBIENDMIS            I3C_MISR_IBIENDMIS_Msk                 /*!< IBI end masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_CRMIS_Pos            (17U)
#define I3C_MISR_CRMIS_Msk            (0x1UL << I3C_MISR_CRMIS_Pos)           /*!< 0x00020000 */
#define I3C_MISR_CRMIS                I3C_MISR_CRMIS_Msk                     /*!< Controller-role request masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_CRUPDMIS_Pos         (18U)
#define I3C_MISR_CRUPDMIS_Msk         (0x1UL << I3C_MISR_CRUPDMIS_Pos)        /*!< 0x00040000 */
#define I3C_MISR_CRUPDMIS             I3C_MISR_CRUPDMIS_Msk                  /*!< Controller-role update masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_HJMIS_Pos            (19U)
#define I3C_MISR_HJMIS_Msk            (0x1UL << I3C_MISR_HJMIS_Pos)           /*!< 0x00080000 */
#define I3C_MISR_HJMIS                I3C_MISR_HJMIS_Msk                     /*!< Hot-join masked interrupt status (when the I3C acts as controller) */
#define I3C_MISR_WKPMIS_Pos           (21U)
#define I3C_MISR_WKPMIS_Msk           (0x1UL << I3C_MISR_WKPMIS_Pos)          /*!< 0x00200000 */
#define I3C_MISR_WKPMIS               I3C_MISR_WKPMIS_Msk                    /*!< Wake-up/missed start masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_GETMIS_Pos           (22U)
#define I3C_MISR_GETMIS_Msk           (0x1UL << I3C_MISR_GETMIS_Pos)          /*!< 0x00400000 */
#define I3C_MISR_GETMIS               I3C_MISR_GETMIS_Msk                    /*!< GETxxx CCC masked interrupt status, except GETSTATUS of format 1 (when the I3C acts as target) */
#define I3C_MISR_STAMIS_Pos           (23U)
#define I3C_MISR_STAMIS_Msk           (0x1UL << I3C_MISR_STAMIS_Pos)          /*!< 0x00800000 */
#define I3C_MISR_STAMIS               I3C_MISR_STAMIS_Msk                    /*!< format 1 GETSTATUS CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_DAUPDMIS_Pos         (24U)
#define I3C_MISR_DAUPDMIS_Msk         (0x1UL << I3C_MISR_DAUPDMIS_Pos)        /*!< 0x01000000 */
#define I3C_MISR_DAUPDMIS             I3C_MISR_DAUPDMIS_Msk                  /*!< ENTDAA/RSTDAA/SETNEWDA CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_MWLUPDMIS_Pos        (25U)
#define I3C_MISR_MWLUPDMIS_Msk        (0x1UL << I3C_MISR_MWLUPDMIS_Pos)       /*!< 0x02000000 */
#define I3C_MISR_MWLUPDMIS            I3C_MISR_MWLUPDMIS_Msk                 /*!< SETMWL CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_MRLUPDMIS_Pos        (26U)
#define I3C_MISR_MRLUPDMIS_Msk        (0x1UL << I3C_MISR_MRLUPDMIS_Pos)       /*!< 0x04000000 */
#define I3C_MISR_MRLUPDMIS            I3C_MISR_MRLUPDMIS_Msk                 /*!< SETMRL CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_RSTMIS_Pos           (27U)
#define I3C_MISR_RSTMIS_Msk           (0x1UL << I3C_MISR_RSTMIS_Pos)          /*!< 0x08000000 */
#define I3C_MISR_RSTMIS               I3C_MISR_RSTMIS_Msk                    /*!< reset pattern masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_ASUPDMIS_Pos         (28U)
#define I3C_MISR_ASUPDMIS_Msk         (0x1UL << I3C_MISR_ASUPDMIS_Pos)        /*!< 0x10000000 */
#define I3C_MISR_ASUPDMIS             I3C_MISR_ASUPDMIS_Msk                  /*!< ENTASx CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_INTUPDMIS_Pos        (29U)
#define I3C_MISR_INTUPDMIS_Msk        (0x1UL << I3C_MISR_INTUPDMIS_Pos)       /*!< 0x20000000 */
#define I3C_MISR_INTUPDMIS            I3C_MISR_INTUPDMIS_Msk                 /*!< ENEC/DISEC CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_DEFMIS_Pos           (30U)
#define I3C_MISR_DEFMIS_Msk           (0x1UL << I3C_MISR_DEFMIS_Pos)          /*!< 0x40000000 */
#define I3C_MISR_DEFMIS               I3C_MISR_DEFMIS_Msk                    /*!< DEFTGTS CCC masked interrupt status (when the I3C acts as target) */
#define I3C_MISR_GRPMIS_Pos           (31U)
#define I3C_MISR_GRPMIS_Msk           (0x1UL << I3C_MISR_GRPMIS_Pos)          /*!< 0x80000000 */
#define I3C_MISR_GRPMIS               I3C_MISR_GRPMIS_Msk                    /*!< DEFGRPA CCC masked interrupt status (when the I3C acts as target) */
/******************  Bit definition for I3C_DEVR0 register  *******************/
#define I3C_DEVR0_DAVAL_Pos          (0U)
#define I3C_DEVR0_DAVAL_Msk          (0x1UL << I3C_DEVR0_DAVAL_Pos)         /*!< 0x00000001 */
#define I3C_DEVR0_DAVAL              I3C_DEVR0_DAVAL_Msk                   /*!< dynamic address is valid (when the I3C is acting as target) */
#define I3C_DEVR0_DA_Pos             (1U)
#define I3C_DEVR0_DA_Msk             (0x7FUL << I3C_DEVR0_DA_Pos)           /*!< 0x000000FE */
#define I3C_DEVR0_DA                 I3C_DEVR0_DA_Msk                      /*!< 7-bit dynamic address */
#define I3C_DEVR0_IBIEN_Pos          (16U)
#define I3C_DEVR0_IBIEN_Msk          (0x1UL << I3C_DEVR0_IBIEN_Pos)         /*!< 0x00010000 */
#define I3C_DEVR0_IBIEN              I3C_DEVR0_IBIEN_Msk                   /*!< IBI request enable (when the I3C is acting as target) */
#define I3C_DEVR0_CREN_Pos           (17U)
#define I3C_DEVR0_CREN_Msk           (0x1UL << I3C_DEVR0_CREN_Pos)          /*!< 0x00020000 */
#define I3C_DEVR0_CREN               I3C_DEVR0_CREN_Msk                    /*!< controller-role request enable (when the I3C is acting as target) */
#define I3C_DEVR0_HJEN_Pos           (19U)
#define I3C_DEVR0_HJEN_Msk           (0x1UL << I3C_DEVR0_HJEN_Pos)          /*!< 0x00080000 */
#define I3C_DEVR0_HJEN               I3C_DEVR0_HJEN_Msk                    /*!< hot-join request enable (when the I3C is acting as target) */
#define I3C_DEVR0_AS_Pos             (20U)
#define I3C_DEVR0_AS_Msk             (0x3UL << I3C_DEVR0_AS_Pos)            /*!< 0x00300000 */
#define I3C_DEVR0_AS                 I3C_DEVR0_AS_Msk                      /*!< activity state (when the I3C is acting as target) */
#define I3C_DEVR0_AS_0               (0x1UL << I3C_DEVR0_AS_Pos)           /*!< 0x00100000 */
#define I3C_DEVR0_AS_1               (0x2UL << I3C_DEVR0_AS_Pos)           /*!< 0x00200000 */
#define I3C_DEVR0_RSTACT_Pos         (22U)
#define I3C_DEVR0_RSTACT_Msk         (0x3UL << I3C_DEVR0_RSTACT_Pos)        /*!< 0x00C00000 */
#define I3C_DEVR0_RSTACT             I3C_DEVR0_RSTACT_Msk                  /*!< reset action/level on received reset pattern (when the I3C is acting as target) */
#define I3C_DEVR0_RSTACT_0           (0x1UL << I3C_DEVR0_RSTACT_Pos)       /*!< 0x00400000 */
#define I3C_DEVR0_RSTACT_1           (0x2UL << I3C_DEVR0_RSTACT_Pos)       /*!< 0x00800000 */
#define I3C_DEVR0_RSTVAL_Pos         (24U)
#define I3C_DEVR0_RSTVAL_Msk         (0x1UL << I3C_DEVR0_RSTVAL_Pos)        /*!< 0x01000000 */
#define I3C_DEVR0_RSTVAL             I3C_DEVR0_RSTVAL_Msk                  /*!< reset action is valid (when the I3C is acting as target) */

/******************  Bit definition for I3C_DEVRX register  *******************/
#define I3C_DEVRX_DA_Pos             (1U)
#define I3C_DEVRX_DA_Msk             (0x7FUL << I3C_DEVRX_DA_Pos)           /*!< 0x000000FE */
#define I3C_DEVRX_DA                 I3C_DEVRX_DA_Msk                      /*!< assigned I3C dynamic address to target x (when the I3C is acting as controller) */
#define I3C_DEVRX_IBIACK_Pos         (16U)
#define I3C_DEVRX_IBIACK_Msk         (0x1UL << I3C_DEVRX_IBIACK_Pos)        /*!< 0x00010000 */
#define I3C_DEVRX_IBIACK             I3C_DEVRX_IBIACK_Msk                  /*!< IBI request acknowledge (when the I3C is acting as controller) */
#define I3C_DEVRX_CRACK_Pos          (17U)
#define I3C_DEVRX_CRACK_Msk          (0x1UL << I3C_DEVRX_CRACK_Pos)         /*!< 0x00020000 */
#define I3C_DEVRX_CRACK              I3C_DEVRX_CRACK_Msk                   /*!< controller-role request acknowledge (when the I3C is acting as controller) */
#define I3C_DEVRX_IBIDEN_Pos         (18U)
#define I3C_DEVRX_IBIDEN_Msk         (0x1UL << I3C_DEVRX_IBIDEN_Pos)        /*!< 0x00040000 */
#define I3C_DEVRX_IBIDEN             I3C_DEVRX_IBIDEN_Msk                  /*!< IBI data enable (when the I3C is acting as controller) */
#define I3C_DEVRX_SUSP_Pos           (19U)
#define I3C_DEVRX_SUSP_Msk           (0x1UL << I3C_DEVRX_SUSP_Pos)          /*!< 0x00080000 */
#define I3C_DEVRX_SUSP               I3C_DEVRX_SUSP_Msk                    /*!< suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) */
#define I3C_DEVRX_DIS_Pos            (31U)
#define I3C_DEVRX_DIS_Msk            (0x1UL << I3C_DEVRX_DIS_Pos)           /*!< 0x80000000 */
#define I3C_DEVRX_DIS                I3C_DEVRX_DIS_Msk                     /*!< DA[6:0] write disabled (when the I3C is acting as controller) */

/******************  Bit definition for I3C_MAXRLR register  ******************/
#define I3C_MAXRLR_MRL_Pos           (0U)
#define I3C_MAXRLR_MRL_Msk           (0xFFFFUL << I3C_MAXRLR_MRL_Pos)       /*!< 0x0000FFFF */
#define I3C_MAXRLR_MRL               I3C_MAXRLR_MRL_Msk                    /*!< maximum data read length (when I3C is acting as target) */
#define I3C_MAXRLR_IBIP_Pos          (16U)
#define I3C_MAXRLR_IBIP_Msk          (0x7UL << I3C_MAXRLR_IBIP_Pos)         /*!< 0x00070000 */
#define I3C_MAXRLR_IBIP              I3C_MAXRLR_IBIP_Msk                   /*!< IBI payload data size, in bytes (when I3C is acting as target) */
#define I3C_MAXRLR_IBIP_0            (0x1UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00010000 */
#define I3C_MAXRLR_IBIP_1            (0x2UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00020000 */
#define I3C_MAXRLR_IBIP_2            (0x4UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00040000 */

/******************  Bit definition for I3C_MAXWLR register  ******************/
#define I3C_MAXWLR_MWL_Pos           (0U)
#define I3C_MAXWLR_MWL_Msk           (0xFFFFUL << I3C_MAXWLR_MWL_Pos)       /*!< 0x0000FFFF */
#define I3C_MAXWLR_MWL               I3C_MAXWLR_MWL_Msk                    /*!< maximum data write length (when I3C is acting as target) */

/*****************  Bit definition for I3C_TIMINGR0 register  *****************/
#define I3C_TIMINGR0_SCLL_PP_Pos     (0U)
#define I3C_TIMINGR0_SCLL_PP_Msk     (0xFFUL << I3C_TIMINGR0_SCLL_PP_Pos)   /*!< 0x000000FF */
#define I3C_TIMINGR0_SCLL_PP         I3C_TIMINGR0_SCLL_PP_Msk              /*!< SCL low duration in I3C push-pull phases, in number of kernel clocks cycles: */
#define I3C_TIMINGR0_SCLH_I3C_Pos    (8U)
#define I3C_TIMINGR0_SCLH_I3C_Msk    (0xFFUL << I3C_TIMINGR0_SCLH_I3C_Pos)  /*!< 0x0000FF00 */
#define I3C_TIMINGR0_SCLH_I3C        I3C_TIMINGR0_SCLH_I3C_Msk             /*!< SCL high duration, used for I3C messages (both in push-pull and open-drain phases), in number of ke */
#define I3C_TIMINGR0_SCLL_OD_Pos     (16U)
#define I3C_TIMINGR0_SCLL_OD_Msk     (0xFFUL << I3C_TIMINGR0_SCLL_OD_Pos)   /*!< 0x00FF0000 */
#define I3C_TIMINGR0_SCLL_OD         I3C_TIMINGR0_SCLL_OD_Msk              /*!< SCL low duration in open-drain phases, used for legacy I2C commands and for I3C open-drain phases ( */
#define I3C_TIMINGR0_SCLH_I2C_Pos    (24U)
#define I3C_TIMINGR0_SCLH_I2C_Msk    (0xFFUL << I3C_TIMINGR0_SCLH_I2C_Pos)  /*!< 0xFF000000 */
#define I3C_TIMINGR0_SCLH_I2C        I3C_TIMINGR0_SCLH_I2C_Msk             /*!< SCL high duration, used for legacy I2C commands, in number of kernel clocks cycles: */

/*****************  Bit definition for I3C_TIMINGR1 register  *****************/
#define I3C_TIMINGR1_AVAL_Pos        (0U)
#define I3C_TIMINGR1_AVAL_Msk        (0xFFUL << I3C_TIMINGR1_AVAL_Pos)      /*!< 0x000000FF */
#define I3C_TIMINGR1_AVAL            I3C_TIMINGR1_AVAL_Msk                 /*!< number of kernel clock cycles, that is used whatever I3C is acting as controller or target, to set  */
#define I3C_TIMINGR1_ASNCR_Pos       (8U)
#define I3C_TIMINGR1_ASNCR_Msk       (0x3UL << I3C_TIMINGR1_ASNCR_Pos)      /*!< 0x00000300 */
#define I3C_TIMINGR1_ASNCR           I3C_TIMINGR1_ASNCR_Msk                /*!< activity state of the new controller (when I3C is acting as - active- controller) */
#define I3C_TIMINGR1_ASNCR_0         (0x1UL << I3C_TIMINGR1_ASNCR_Pos)     /*!< 0x00000100 */
#define I3C_TIMINGR1_ASNCR_1         (0x2UL << I3C_TIMINGR1_ASNCR_Pos)     /*!< 0x00000200 */
#define I3C_TIMINGR1_FREE_Pos        (16U)
#define I3C_TIMINGR1_FREE_Msk        (0x7FUL << I3C_TIMINGR1_FREE_Pos)      /*!< 0x007F0000 */
#define I3C_TIMINGR1_FREE            I3C_TIMINGR1_FREE_Msk                 /*!< number of kernel clocks cycles that is used to set some MIPI timings like bus free condition time ( */
#define I3C_TIMINGR1_SDA_HD_Pos      (28U)
#define I3C_TIMINGR1_SDA_HD_Msk      (0x3UL << I3C_TIMINGR1_SDA_HD_Pos)     /*!< 0x30000000 */
#define I3C_TIMINGR1_SDA_HD          I3C_TIMINGR1_SDA_HD_Msk               /*!< SDA hold time (when the I3C is acting as controller), in number of kernel clocks cycles (refer to M */
#define I3C_TIMINGR1_SDA_HD_0        (0x1UL << I3C_TIMINGR1_SDA_HD_Pos)    /*!< 0x10000000 */
#define I3C_TIMINGR1_SDA_HD_1        (0x2UL << I3C_TIMINGR1_SDA_HD_Pos)    /*!< 0x20000000 */

/*****************  Bit definition for I3C_TIMINGR2 register  *****************/
#define I3C_TIMINGR2_STALLT_Pos      (0U)
#define I3C_TIMINGR2_STALLT_Msk      (0x1UL << I3C_TIMINGR2_STALLT_Pos)     /*!< 0x00000001 */
#define I3C_TIMINGR2_STALLT          I3C_TIMINGR2_STALLT_Msk               /*!< Controller clock stall on T-bit phase of Data enable */
#define I3C_TIMINGR2_STALLD_Pos      (1U)
#define I3C_TIMINGR2_STALLD_Msk      (0x1UL << I3C_TIMINGR2_STALLD_Pos)     /*!< 0x00000002 */
#define I3C_TIMINGR2_STALLD          I3C_TIMINGR2_STALLD_Msk               /*!< controller clock stall on PAR phase of Data enable */
#define I3C_TIMINGR2_STALLC_Pos      (2U)
#define I3C_TIMINGR2_STALLC_Msk      (0x1UL << I3C_TIMINGR2_STALLC_Pos)     /*!< 0x00000004 */
#define I3C_TIMINGR2_STALLC          I3C_TIMINGR2_STALLC_Msk               /*!< controller clock stall on PAR phase of CCC enable */
#define I3C_TIMINGR2_STALLA_Pos      (3U)
#define I3C_TIMINGR2_STALLA_Msk      (0x1UL << I3C_TIMINGR2_STALLA_Pos)     /*!< 0x00000008 */
#define I3C_TIMINGR2_STALLA          I3C_TIMINGR2_STALLA_Msk               /*!< controller clock stall enable on ACK phase */
#define I3C_TIMINGR2_STALLR_Pos      (4U)
#define I3C_TIMINGR2_STALLR_Msk      (0x1UL << I3C_TIMINGR2_STALLR_Pos)     /*!< 0x00000010 */
#define I3C_TIMINGR2_STALLR          I3C_TIMINGR2_STALLR_Msk               /*!< Controller clock stall enable in the data ACK/NACK phase of a legacy I2C read message */
#define I3C_TIMINGR2_STALLS_Pos      (5U)
#define I3C_TIMINGR2_STALLS_Msk      (0x1UL << I3C_TIMINGR2_STALLS_Pos)     /*!< 0x00000020 */
#define I3C_TIMINGR2_STALLS          I3C_TIMINGR2_STALLS_Msk               /*!< Controller clock stall enable in the data ACK/NACK phase of a legacy I2C write message */
#define I3C_TIMINGR2_STALLL_Pos      (6U)
#define I3C_TIMINGR2_STALLL_Msk      (0x1UL << I3C_TIMINGR2_STALLL_Pos)     /*!< 0x00000040 */
#define I3C_TIMINGR2_STALLL          I3C_TIMINGR2_STALLL_Msk               /*!< Controller clock stall enable in the address ACK/NACK phase (before the ninth bit) of a legacy I2C  */
#define I3C_TIMINGR2_STALL_Pos       (8U)
#define I3C_TIMINGR2_STALL_Msk       (0xFFUL << I3C_TIMINGR2_STALL_Pos)     /*!< 0x0000FF00 */
#define I3C_TIMINGR2_STALL           I3C_TIMINGR2_STALL_Msk                /*!< controller clock stall time, in number of kernel clock cycles */

/*******************  Bit definition for I3C_BCR register  ********************/
#define I3C_BCR_BCR_Pos              (0U)
#define I3C_BCR_BCR_Msk              (0xFFUL << I3C_BCR_BCR_Pos)           /*!< 0x000000FF */
#define I3C_BCR_BCR                  I3C_BCR_BCR_Msk                       /*!< Bus Characteristics */
#define I3C_BCR_BCR0_Pos             (0U)
#define I3C_BCR_BCR0_Msk             (0x1UL << I3C_BCR_BCR0_Pos)           /*!< 0x00000001 */
#define I3C_BCR_BCR0                 I3C_BCR_BCR0_Msk                      /*!< Max Data Speed Limitation */
#define I3C_BCR_BCR1_Pos             (1U)
#define I3C_BCR_BCR1_Msk             (0x1UL << I3C_BCR_BCR1_Pos)           /*!< 0x00000002 */
#define I3C_BCR_BCR1                 I3C_BCR_BCR1_Msk                      /*!< IBI Request capable */
#define I3C_BCR_BCR2_Pos             (2U)
#define I3C_BCR_BCR2_Msk             (0x1UL << I3C_BCR_BCR2_Pos)           /*!< 0x00000004 */
#define I3C_BCR_BCR2                 I3C_BCR_BCR2_Msk                      /*!< IBI Payload additional Mandatory Data Byte */
#define I3C_BCR_BCR6_Pos             (6U)
#define I3C_BCR_BCR6_Msk             (0x1UL << I3C_BCR_BCR6_Pos)           /*!< 0x00000040 */
#define I3C_BCR_BCR6                 I3C_BCR_BCR6_Msk                      /*!< Device Role shared during Dynamic Address Assignment */

/*******************  Bit definition for I3C_DCR register  ********************/
#define I3C_DCR_DCR_Pos              (0U)
#define I3C_DCR_DCR_Msk              (0xFFUL << I3C_DCR_DCR_Pos)            /*!< 0x000000FF */
#define I3C_DCR_DCR                  I3C_DCR_DCR_Msk                       /*!< device characteristics ID */

/*****************  Bit definition for I3C_GETCAPR register  ******************/
#define I3C_GETCAPR_CAPPEND_Pos      (14U)
#define I3C_GETCAPR_CAPPEND_Msk      (0x1UL << I3C_GETCAPR_CAPPEND_Pos)     /*!< 0x00004000 */
#define I3C_GETCAPR_CAPPEND          I3C_GETCAPR_CAPPEND_Msk               /*!< IBI MDB support for pending read notification */

/******************  Bit definition for I3C_CRCAPR register  ******************/
#define I3C_CRCAPR_CAPDHOFF_Pos      (3U)
#define I3C_CRCAPR_CAPDHOFF_Msk      (0x1UL << I3C_CRCAPR_CAPDHOFF_Pos)     /*!< 0x00000008 */
#define I3C_CRCAPR_CAPDHOFF          I3C_CRCAPR_CAPDHOFF_Msk               /*!< delayed controller-role hand-off */
#define I3C_CRCAPR_CAPGRP_Pos        (9U)
#define I3C_CRCAPR_CAPGRP_Msk        (0x1UL << I3C_CRCAPR_CAPGRP_Pos)       /*!< 0x00000200 */
#define I3C_CRCAPR_CAPGRP            I3C_CRCAPR_CAPGRP_Msk                 /*!< group management support (when acting as controller) */

/*****************  Bit definition for I3C_GETMXDSR register  *****************/
#define I3C_GETMXDSR_HOFFAS_Pos      (0U)
#define I3C_GETMXDSR_HOFFAS_Msk      (0x3UL << I3C_GETMXDSR_HOFFAS_Pos)     /*!< 0x00000003 */
#define I3C_GETMXDSR_HOFFAS          I3C_GETMXDSR_HOFFAS_Msk               /*!< controller hand-off activity state */
#define I3C_GETMXDSR_HOFFAS_0        (0x1UL << I3C_GETMXDSR_HOFFAS_Pos)    /*!< 0x00000001 */
#define I3C_GETMXDSR_HOFFAS_1        (0x2UL << I3C_GETMXDSR_HOFFAS_Pos)    /*!< 0x00000002 */
#define I3C_GETMXDSR_FMT_Pos         (8U)
#define I3C_GETMXDSR_FMT_Msk         (0x3UL << I3C_GETMXDSR_FMT_Pos)        /*!< 0x00000300 */
#define I3C_GETMXDSR_FMT             I3C_GETMXDSR_FMT_Msk                  /*!< GETMXDS CCC format */
#define I3C_GETMXDSR_FMT_0           (0x1UL << I3C_GETMXDSR_FMT_Pos)       /*!< 0x00000100 */
#define I3C_GETMXDSR_FMT_1           (0x2UL << I3C_GETMXDSR_FMT_Pos)       /*!< 0x00000200 */
#define I3C_GETMXDSR_RDTURN_Pos      (16U)
#define I3C_GETMXDSR_RDTURN_Msk      (0xFFUL << I3C_GETMXDSR_RDTURN_Pos)    /*!< 0x00FF0000 */
#define I3C_GETMXDSR_RDTURN          I3C_GETMXDSR_RDTURN_Msk               /*!< programmed byte of the 3-byte MaxRdTurn (maximum read turnaround byte) */
#define I3C_GETMXDSR_TSCO_Pos        (24U)
#define I3C_GETMXDSR_TSCO_Msk        (0x1UL << I3C_GETMXDSR_TSCO_Pos)       /*!< 0x01000000 */
#define I3C_GETMXDSR_TSCO            I3C_GETMXDSR_TSCO_Msk                 /*!< clock-to-data turnaround time (tSCO) */

/******************  Bit definition for I3C_EPIDR register  *******************/
#define I3C_EPIDR_MIPIID_Pos         (12U)
#define I3C_EPIDR_MIPIID_Msk         (0xFUL << I3C_EPIDR_MIPIID_Pos)        /*!< 0x0000F000 */
#define I3C_EPIDR_MIPIID             I3C_EPIDR_MIPIID_Msk                  /*!< 4-bit MIPI Instance ID */
#define I3C_EPIDR_IDTSEL_Pos         (16U)
#define I3C_EPIDR_IDTSEL_Msk         (0x1UL << I3C_EPIDR_IDTSEL_Pos)        /*!< 0x00010000 */
#define I3C_EPIDR_IDTSEL             I3C_EPIDR_IDTSEL_Msk                  /*!< provisioned ID type selector */
#define I3C_EPIDR_MIPIMID_Pos        (17U)
#define I3C_EPIDR_MIPIMID_Msk        (0x7FFFUL << I3C_EPIDR_MIPIMID_Pos)    /*!< 0xFFFE0000 */
#define I3C_EPIDR_MIPIMID            I3C_EPIDR_MIPIMID_Msk                 /*!< 15-bit MIPI manufacturer ID */

/******************  Bit definition for I3C_HWCFGR register  ******************/
#define I3C_HWCFGR_CSIZE_Pos         (0U)
#define I3C_HWCFGR_CSIZE_Msk         (0xFUL << I3C_HWCFGR_CSIZE_Pos)        /*!< 0x0000000F */
#define I3C_HWCFGR_CSIZE             I3C_HWCFGR_CSIZE_Msk                  /*!< C-FIFO size, in multiple of (32-bit) words */
#define I3C_HWCFGR_SSIZE_Pos         (4U)
#define I3C_HWCFGR_SSIZE_Msk         (0xFUL << I3C_HWCFGR_SSIZE_Pos)        /*!< 0x000000F0 */
#define I3C_HWCFGR_SSIZE             I3C_HWCFGR_SSIZE_Msk                  /*!< S-FIFO size, in multiple of (32-bit) words */
#define I3C_HWCFGR_TSIZE_Pos         (8U)
#define I3C_HWCFGR_TSIZE_Msk         (0xFUL << I3C_HWCFGR_TSIZE_Pos)        /*!< 0x00000F00 */
#define I3C_HWCFGR_TSIZE             I3C_HWCFGR_TSIZE_Msk                  /*!< TX-FIFO size, in multiple of 4 bytes */
#define I3C_HWCFGR_RSIZE_Pos         (12U)
#define I3C_HWCFGR_RSIZE_Msk         (0xFUL << I3C_HWCFGR_RSIZE_Pos)        /*!< 0x0000F000 */
#define I3C_HWCFGR_RSIZE             I3C_HWCFGR_RSIZE_Msk                  /*!< RX-FIFO size, in multiple of 4 bytes */
#define I3C_HWCFGR_NBT_Pos           (16U)
#define I3C_HWCFGR_NBT_Msk           (0xFUL << I3C_HWCFGR_NBT_Pos)          /*!< 0x000F0000 */
#define I3C_HWCFGR_NBT               I3C_HWCFGR_NBT_Msk                    /*!< number of targets whose the IBI/controller-role request can be managed in parallel by this I3C IP,  */

/*******************  Bit definition for I3C_VERR register  *******************/
#define I3C_VERR_MINREV_Pos          (0U)
#define I3C_VERR_MINREV_Msk          (0xFUL << I3C_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define I3C_VERR_MINREV              I3C_VERR_MINREV_Msk                   /*!< minor IP revision */
#define I3C_VERR_MAJREV_Pos          (4U)
#define I3C_VERR_MAJREV_Msk          (0xFUL << I3C_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define I3C_VERR_MAJREV              I3C_VERR_MAJREV_Msk                   /*!< major IP revision */

/******************  Bit definition for I3C_IPIDR register  *******************/
#define I3C_IPIDR_ID_Pos             (0U)
#define I3C_IPIDR_ID_Msk             (0xFFFFFFFFUL << I3C_IPIDR_ID_Pos)     /*!< 0xFFFFFFFF */
#define I3C_IPIDR_ID                 I3C_IPIDR_ID_Msk                      /*!< IP identification */

/*******************  Bit definition for I3C_SIDR register  *******************/
#define I3C_SIDR_SID_Pos             (0U)
#define I3C_SIDR_SID_Msk             (0xFFFFFFFFUL << I3C_SIDR_SID_Pos)     /*!< 0xFFFFFFFF */
#define I3C_SIDR_SID                 I3C_SIDR_SID_Msk                      /*!< IP address space size identification */

/******************************************************************************/
/*                                                                            */
/*              Inter-Processor Communication Controller (IPCC)               */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for IPCC_C1CR register  *******************/
#define IPCC_C1CR_RXOIE_Pos           (0U)
#define IPCC_C1CR_RXOIE_Msk           (0x1UL << IPCC_C1CR_RXOIE_Pos)           /*!< 0x00000001 */
#define IPCC_C1CR_RXOIE               IPCC_C1CR_RXOIE_Msk                     /*!< Processor 1 Receive channel occupied non-secure interrupt enable */
#define IPCC_C1CR_SECRXOIE_Pos        (1U)
#define IPCC_C1CR_SECRXOIE_Msk        (0x1UL << IPCC_C1CR_SECRXOIE_Pos)        /*!< 0x00000002 */
#define IPCC_C1CR_SECRXOIE            IPCC_C1CR_SECRXOIE_Msk                  /*!< Processor 1 Receive channel occupied secure interrupt enable */
#define IPCC_C1CR_TXFIE_Pos           (16U)
#define IPCC_C1CR_TXFIE_Msk           (0x1UL << IPCC_C1CR_TXFIE_Pos)           /*!< 0x00010000 */
#define IPCC_C1CR_TXFIE               IPCC_C1CR_TXFIE_Msk                     /*!< Processor 1Transmit channel free non-secure interrupt enable */
#define IPCC_C1CR_SECTXFIE_Pos        (17U)
#define IPCC_C1CR_SECTXFIE_Msk        (0x1UL << IPCC_C1CR_SECTXFIE_Pos)        /*!< 0x00020000 */
#define IPCC_C1CR_SECTXFIE            IPCC_C1CR_SECTXFIE_Msk                  /*!< Processor 1Transmit channel free secure interrupt enable */

/******************  Bit definition for IPCC_C1MR register  *******************/
#define IPCC_C1MR_CH1OM_Pos           (0U)
#define IPCC_C1MR_CH1OM_Msk           (0x1UL << IPCC_C1MR_CH1OM_Pos)           /*!< 0x00000001 */
#define IPCC_C1MR_CH1OM               IPCC_C1MR_CH1OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH2OM_Pos           (1U)
#define IPCC_C1MR_CH2OM_Msk           (0x1UL << IPCC_C1MR_CH2OM_Pos)           /*!< 0x00000002 */
#define IPCC_C1MR_CH2OM               IPCC_C1MR_CH2OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH3OM_Pos           (2U)
#define IPCC_C1MR_CH3OM_Msk           (0x1UL << IPCC_C1MR_CH3OM_Pos)           /*!< 0x00000004 */
#define IPCC_C1MR_CH3OM               IPCC_C1MR_CH3OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH4OM_Pos           (3U)
#define IPCC_C1MR_CH4OM_Msk           (0x1UL << IPCC_C1MR_CH4OM_Pos)           /*!< 0x00000008 */
#define IPCC_C1MR_CH4OM               IPCC_C1MR_CH4OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH5OM_Pos           (4U)
#define IPCC_C1MR_CH5OM_Msk           (0x1UL << IPCC_C1MR_CH5OM_Pos)           /*!< 0x00000010 */
#define IPCC_C1MR_CH5OM               IPCC_C1MR_CH5OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH6OM_Pos           (5U)
#define IPCC_C1MR_CH6OM_Msk           (0x1UL << IPCC_C1MR_CH6OM_Pos)           /*!< 0x00000020 */
#define IPCC_C1MR_CH6OM               IPCC_C1MR_CH6OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH7OM_Pos           (6U)
#define IPCC_C1MR_CH7OM_Msk           (0x1UL << IPCC_C1MR_CH7OM_Pos)           /*!< 0x00000040 */
#define IPCC_C1MR_CH7OM               IPCC_C1MR_CH7OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH8OM_Pos           (7U)
#define IPCC_C1MR_CH8OM_Msk           (0x1UL << IPCC_C1MR_CH8OM_Pos)           /*!< 0x00000080 */
#define IPCC_C1MR_CH8OM               IPCC_C1MR_CH8OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH9OM_Pos           (8U)
#define IPCC_C1MR_CH9OM_Msk           (0x1UL << IPCC_C1MR_CH9OM_Pos)           /*!< 0x00000100 */
#define IPCC_C1MR_CH9OM               IPCC_C1MR_CH9OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH10OM_Pos          (9U)
#define IPCC_C1MR_CH10OM_Msk          (0x1UL << IPCC_C1MR_CH10OM_Pos)          /*!< 0x00000200 */
#define IPCC_C1MR_CH10OM              IPCC_C1MR_CH10OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH11OM_Pos          (10U)
#define IPCC_C1MR_CH11OM_Msk          (0x1UL << IPCC_C1MR_CH11OM_Pos)          /*!< 0x00000400 */
#define IPCC_C1MR_CH11OM              IPCC_C1MR_CH11OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH12OM_Pos          (11U)
#define IPCC_C1MR_CH12OM_Msk          (0x1UL << IPCC_C1MR_CH12OM_Pos)          /*!< 0x00000800 */
#define IPCC_C1MR_CH12OM              IPCC_C1MR_CH12OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH13OM_Pos          (12U)
#define IPCC_C1MR_CH13OM_Msk          (0x1UL << IPCC_C1MR_CH13OM_Pos)          /*!< 0x00001000 */
#define IPCC_C1MR_CH13OM              IPCC_C1MR_CH13OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH14OM_Pos          (13U)
#define IPCC_C1MR_CH14OM_Msk          (0x1UL << IPCC_C1MR_CH14OM_Pos)          /*!< 0x00002000 */
#define IPCC_C1MR_CH14OM              IPCC_C1MR_CH14OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH15OM_Pos          (14U)
#define IPCC_C1MR_CH15OM_Msk          (0x1UL << IPCC_C1MR_CH15OM_Pos)          /*!< 0x00004000 */
#define IPCC_C1MR_CH15OM              IPCC_C1MR_CH15OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH16OM_Pos          (15U)
#define IPCC_C1MR_CH16OM_Msk          (0x1UL << IPCC_C1MR_CH16OM_Pos)          /*!< 0x00008000 */
#define IPCC_C1MR_CH16OM              IPCC_C1MR_CH16OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH1FM_Pos           (16U)
#define IPCC_C1MR_CH1FM_Msk           (0x1UL << IPCC_C1MR_CH1FM_Pos)           /*!< 0x00010000 */
#define IPCC_C1MR_CH1FM               IPCC_C1MR_CH1FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH2FM_Pos           (17U)
#define IPCC_C1MR_CH2FM_Msk           (0x1UL << IPCC_C1MR_CH2FM_Pos)           /*!< 0x00020000 */
#define IPCC_C1MR_CH2FM               IPCC_C1MR_CH2FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH3FM_Pos           (18U)
#define IPCC_C1MR_CH3FM_Msk           (0x1UL << IPCC_C1MR_CH3FM_Pos)           /*!< 0x00040000 */
#define IPCC_C1MR_CH3FM               IPCC_C1MR_CH3FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH4FM_Pos           (19U)
#define IPCC_C1MR_CH4FM_Msk           (0x1UL << IPCC_C1MR_CH4FM_Pos)           /*!< 0x00080000 */
#define IPCC_C1MR_CH4FM               IPCC_C1MR_CH4FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH5FM_Pos           (20U)
#define IPCC_C1MR_CH5FM_Msk           (0x1UL << IPCC_C1MR_CH5FM_Pos)           /*!< 0x00100000 */
#define IPCC_C1MR_CH5FM               IPCC_C1MR_CH5FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH6FM_Pos           (21U)
#define IPCC_C1MR_CH6FM_Msk           (0x1UL << IPCC_C1MR_CH6FM_Pos)           /*!< 0x00200000 */
#define IPCC_C1MR_CH6FM               IPCC_C1MR_CH6FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH7FM_Pos           (22U)
#define IPCC_C1MR_CH7FM_Msk           (0x1UL << IPCC_C1MR_CH7FM_Pos)           /*!< 0x00400000 */
#define IPCC_C1MR_CH7FM               IPCC_C1MR_CH7FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH8FM_Pos           (23U)
#define IPCC_C1MR_CH8FM_Msk           (0x1UL << IPCC_C1MR_CH8FM_Pos)           /*!< 0x00800000 */
#define IPCC_C1MR_CH8FM               IPCC_C1MR_CH8FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH9FM_Pos           (24U)
#define IPCC_C1MR_CH9FM_Msk           (0x1UL << IPCC_C1MR_CH9FM_Pos)           /*!< 0x01000000 */
#define IPCC_C1MR_CH9FM               IPCC_C1MR_CH9FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH10FM_Pos          (25U)
#define IPCC_C1MR_CH10FM_Msk          (0x1UL << IPCC_C1MR_CH10FM_Pos)          /*!< 0x02000000 */
#define IPCC_C1MR_CH10FM              IPCC_C1MR_CH10FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH11FM_Pos          (26U)
#define IPCC_C1MR_CH11FM_Msk          (0x1UL << IPCC_C1MR_CH11FM_Pos)          /*!< 0x04000000 */
#define IPCC_C1MR_CH11FM              IPCC_C1MR_CH11FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH12FM_Pos          (27U)
#define IPCC_C1MR_CH12FM_Msk          (0x1UL << IPCC_C1MR_CH12FM_Pos)          /*!< 0x08000000 */
#define IPCC_C1MR_CH12FM              IPCC_C1MR_CH12FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH13FM_Pos          (28U)
#define IPCC_C1MR_CH13FM_Msk          (0x1UL << IPCC_C1MR_CH13FM_Pos)          /*!< 0x10000000 */
#define IPCC_C1MR_CH13FM              IPCC_C1MR_CH13FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH14FM_Pos          (29U)
#define IPCC_C1MR_CH14FM_Msk          (0x1UL << IPCC_C1MR_CH14FM_Pos)          /*!< 0x20000000 */
#define IPCC_C1MR_CH14FM              IPCC_C1MR_CH14FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH15FM_Pos          (30U)
#define IPCC_C1MR_CH15FM_Msk          (0x1UL << IPCC_C1MR_CH15FM_Pos)          /*!< 0x40000000 */
#define IPCC_C1MR_CH15FM              IPCC_C1MR_CH15FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH16FM_Pos          (31U)
#define IPCC_C1MR_CH16FM_Msk          (0x1UL << IPCC_C1MR_CH16FM_Pos)          /*!< 0x80000000 */
#define IPCC_C1MR_CH16FM              IPCC_C1MR_CH16FM_Msk                    /*!< Processor 1 transmit channel n status set */

/******************  Bit definition for IPCC_C1SCR register  ******************/
#define IPCC_C1SCR_CH1C_Pos           (0U)
#define IPCC_C1SCR_CH1C_Msk           (0x1UL << IPCC_C1SCR_CH1C_Pos)           /*!< 0x00000001 */
#define IPCC_C1SCR_CH1C               IPCC_C1SCR_CH1C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH2C_Pos           (1U)
#define IPCC_C1SCR_CH2C_Msk           (0x1UL << IPCC_C1SCR_CH2C_Pos)           /*!< 0x00000002 */
#define IPCC_C1SCR_CH2C               IPCC_C1SCR_CH2C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH3C_Pos           (2U)
#define IPCC_C1SCR_CH3C_Msk           (0x1UL << IPCC_C1SCR_CH3C_Pos)           /*!< 0x00000004 */
#define IPCC_C1SCR_CH3C               IPCC_C1SCR_CH3C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH4C_Pos           (3U)
#define IPCC_C1SCR_CH4C_Msk           (0x1UL << IPCC_C1SCR_CH4C_Pos)           /*!< 0x00000008 */
#define IPCC_C1SCR_CH4C               IPCC_C1SCR_CH4C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH5C_Pos           (4U)
#define IPCC_C1SCR_CH5C_Msk           (0x1UL << IPCC_C1SCR_CH5C_Pos)           /*!< 0x00000010 */
#define IPCC_C1SCR_CH5C               IPCC_C1SCR_CH5C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH6C_Pos           (5U)
#define IPCC_C1SCR_CH6C_Msk           (0x1UL << IPCC_C1SCR_CH6C_Pos)           /*!< 0x00000020 */
#define IPCC_C1SCR_CH6C               IPCC_C1SCR_CH6C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH7C_Pos           (6U)
#define IPCC_C1SCR_CH7C_Msk           (0x1UL << IPCC_C1SCR_CH7C_Pos)           /*!< 0x00000040 */
#define IPCC_C1SCR_CH7C               IPCC_C1SCR_CH7C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH8C_Pos           (7U)
#define IPCC_C1SCR_CH8C_Msk           (0x1UL << IPCC_C1SCR_CH8C_Pos)           /*!< 0x00000080 */
#define IPCC_C1SCR_CH8C               IPCC_C1SCR_CH8C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH9C_Pos           (8U)
#define IPCC_C1SCR_CH9C_Msk           (0x1UL << IPCC_C1SCR_CH9C_Pos)           /*!< 0x00000100 */
#define IPCC_C1SCR_CH9C               IPCC_C1SCR_CH9C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH10C_Pos          (9U)
#define IPCC_C1SCR_CH10C_Msk          (0x1UL << IPCC_C1SCR_CH10C_Pos)          /*!< 0x00000200 */
#define IPCC_C1SCR_CH10C              IPCC_C1SCR_CH10C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH11C_Pos          (10U)
#define IPCC_C1SCR_CH11C_Msk          (0x1UL << IPCC_C1SCR_CH11C_Pos)          /*!< 0x00000400 */
#define IPCC_C1SCR_CH11C              IPCC_C1SCR_CH11C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH12C_Pos          (11U)
#define IPCC_C1SCR_CH12C_Msk          (0x1UL << IPCC_C1SCR_CH12C_Pos)          /*!< 0x00000800 */
#define IPCC_C1SCR_CH12C              IPCC_C1SCR_CH12C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH13C_Pos          (12U)
#define IPCC_C1SCR_CH13C_Msk          (0x1UL << IPCC_C1SCR_CH13C_Pos)          /*!< 0x00001000 */
#define IPCC_C1SCR_CH13C              IPCC_C1SCR_CH13C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH14C_Pos          (13U)
#define IPCC_C1SCR_CH14C_Msk          (0x1UL << IPCC_C1SCR_CH14C_Pos)          /*!< 0x00002000 */
#define IPCC_C1SCR_CH14C              IPCC_C1SCR_CH14C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH15C_Pos          (14U)
#define IPCC_C1SCR_CH15C_Msk          (0x1UL << IPCC_C1SCR_CH15C_Pos)          /*!< 0x00004000 */
#define IPCC_C1SCR_CH15C              IPCC_C1SCR_CH15C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH16C_Pos          (15U)
#define IPCC_C1SCR_CH16C_Msk          (0x1UL << IPCC_C1SCR_CH16C_Pos)          /*!< 0x00008000 */
#define IPCC_C1SCR_CH16C              IPCC_C1SCR_CH16C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH1S_Pos           (16U)
#define IPCC_C1SCR_CH1S_Msk           (0x1UL << IPCC_C1SCR_CH1S_Pos)           /*!< 0x00010000 */
#define IPCC_C1SCR_CH1S               IPCC_C1SCR_CH1S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH2S_Pos           (17U)
#define IPCC_C1SCR_CH2S_Msk           (0x1UL << IPCC_C1SCR_CH2S_Pos)           /*!< 0x00020000 */
#define IPCC_C1SCR_CH2S               IPCC_C1SCR_CH2S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH3S_Pos           (18U)
#define IPCC_C1SCR_CH3S_Msk           (0x1UL << IPCC_C1SCR_CH3S_Pos)           /*!< 0x00040000 */
#define IPCC_C1SCR_CH3S               IPCC_C1SCR_CH3S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH4S_Pos           (19U)
#define IPCC_C1SCR_CH4S_Msk           (0x1UL << IPCC_C1SCR_CH4S_Pos)           /*!< 0x00080000 */
#define IPCC_C1SCR_CH4S               IPCC_C1SCR_CH4S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH5S_Pos           (20U)
#define IPCC_C1SCR_CH5S_Msk           (0x1UL << IPCC_C1SCR_CH5S_Pos)           /*!< 0x00100000 */
#define IPCC_C1SCR_CH5S               IPCC_C1SCR_CH5S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH6S_Pos           (21U)
#define IPCC_C1SCR_CH6S_Msk           (0x1UL << IPCC_C1SCR_CH6S_Pos)           /*!< 0x00200000 */
#define IPCC_C1SCR_CH6S               IPCC_C1SCR_CH6S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH7S_Pos           (22U)
#define IPCC_C1SCR_CH7S_Msk           (0x1UL << IPCC_C1SCR_CH7S_Pos)           /*!< 0x00400000 */
#define IPCC_C1SCR_CH7S               IPCC_C1SCR_CH7S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH8S_Pos           (23U)
#define IPCC_C1SCR_CH8S_Msk           (0x1UL << IPCC_C1SCR_CH8S_Pos)           /*!< 0x00800000 */
#define IPCC_C1SCR_CH8S               IPCC_C1SCR_CH8S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH9S_Pos           (24U)
#define IPCC_C1SCR_CH9S_Msk           (0x1UL << IPCC_C1SCR_CH9S_Pos)           /*!< 0x01000000 */
#define IPCC_C1SCR_CH9S               IPCC_C1SCR_CH9S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH10S_Pos          (25U)
#define IPCC_C1SCR_CH10S_Msk          (0x1UL << IPCC_C1SCR_CH10S_Pos)          /*!< 0x02000000 */
#define IPCC_C1SCR_CH10S              IPCC_C1SCR_CH10S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH11S_Pos          (26U)
#define IPCC_C1SCR_CH11S_Msk          (0x1UL << IPCC_C1SCR_CH11S_Pos)          /*!< 0x04000000 */
#define IPCC_C1SCR_CH11S              IPCC_C1SCR_CH11S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH12S_Pos          (27U)
#define IPCC_C1SCR_CH12S_Msk          (0x1UL << IPCC_C1SCR_CH12S_Pos)          /*!< 0x08000000 */
#define IPCC_C1SCR_CH12S              IPCC_C1SCR_CH12S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH13S_Pos          (28U)
#define IPCC_C1SCR_CH13S_Msk          (0x1UL << IPCC_C1SCR_CH13S_Pos)          /*!< 0x10000000 */
#define IPCC_C1SCR_CH13S              IPCC_C1SCR_CH13S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH14S_Pos          (29U)
#define IPCC_C1SCR_CH14S_Msk          (0x1UL << IPCC_C1SCR_CH14S_Pos)          /*!< 0x20000000 */
#define IPCC_C1SCR_CH14S              IPCC_C1SCR_CH14S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH15S_Pos          (30U)
#define IPCC_C1SCR_CH15S_Msk          (0x1UL << IPCC_C1SCR_CH15S_Pos)          /*!< 0x40000000 */
#define IPCC_C1SCR_CH15S              IPCC_C1SCR_CH15S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH16S_Pos          (31U)
#define IPCC_C1SCR_CH16S_Msk          (0x1UL << IPCC_C1SCR_CH16S_Pos)          /*!< 0x80000000 */
#define IPCC_C1SCR_CH16S              IPCC_C1SCR_CH16S_Msk                    /*!< Processor 1 transmit channel n status set */

/****************  Bit definition for IPCC_C1TOC2SR register  *****************/
#define IPCC_C1TOC2SR_CH1F_Pos        (0U)
#define IPCC_C1TOC2SR_CH1F_Msk        (0x1UL << IPCC_C1TOC2SR_CH1F_Pos)        /*!< 0x00000001 */
#define IPCC_C1TOC2SR_CH1F            IPCC_C1TOC2SR_CH1F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH2F_Pos        (1U)
#define IPCC_C1TOC2SR_CH2F_Msk        (0x1UL << IPCC_C1TOC2SR_CH2F_Pos)        /*!< 0x00000002 */
#define IPCC_C1TOC2SR_CH2F            IPCC_C1TOC2SR_CH2F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH3F_Pos        (2U)
#define IPCC_C1TOC2SR_CH3F_Msk        (0x1UL << IPCC_C1TOC2SR_CH3F_Pos)        /*!< 0x00000004 */
#define IPCC_C1TOC2SR_CH3F            IPCC_C1TOC2SR_CH3F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH4F_Pos        (3U)
#define IPCC_C1TOC2SR_CH4F_Msk        (0x1UL << IPCC_C1TOC2SR_CH4F_Pos)        /*!< 0x00000008 */
#define IPCC_C1TOC2SR_CH4F            IPCC_C1TOC2SR_CH4F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH5F_Pos        (4U)
#define IPCC_C1TOC2SR_CH5F_Msk        (0x1UL << IPCC_C1TOC2SR_CH5F_Pos)        /*!< 0x00000010 */
#define IPCC_C1TOC2SR_CH5F            IPCC_C1TOC2SR_CH5F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH6F_Pos        (5U)
#define IPCC_C1TOC2SR_CH6F_Msk        (0x1UL << IPCC_C1TOC2SR_CH6F_Pos)        /*!< 0x00000020 */
#define IPCC_C1TOC2SR_CH6F            IPCC_C1TOC2SR_CH6F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH7F_Pos        (6U)
#define IPCC_C1TOC2SR_CH7F_Msk        (0x1UL << IPCC_C1TOC2SR_CH7F_Pos)        /*!< 0x00000040 */
#define IPCC_C1TOC2SR_CH7F            IPCC_C1TOC2SR_CH7F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH8F_Pos        (7U)
#define IPCC_C1TOC2SR_CH8F_Msk        (0x1UL << IPCC_C1TOC2SR_CH8F_Pos)        /*!< 0x00000080 */
#define IPCC_C1TOC2SR_CH8F            IPCC_C1TOC2SR_CH8F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH9F_Pos        (8U)
#define IPCC_C1TOC2SR_CH9F_Msk        (0x1UL << IPCC_C1TOC2SR_CH9F_Pos)        /*!< 0x00000100 */
#define IPCC_C1TOC2SR_CH9F            IPCC_C1TOC2SR_CH9F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH10F_Pos       (9U)
#define IPCC_C1TOC2SR_CH10F_Msk       (0x1UL << IPCC_C1TOC2SR_CH10F_Pos)       /*!< 0x00000200 */
#define IPCC_C1TOC2SR_CH10F           IPCC_C1TOC2SR_CH10F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH11F_Pos       (10U)
#define IPCC_C1TOC2SR_CH11F_Msk       (0x1UL << IPCC_C1TOC2SR_CH11F_Pos)       /*!< 0x00000400 */
#define IPCC_C1TOC2SR_CH11F           IPCC_C1TOC2SR_CH11F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH12F_Pos       (11U)
#define IPCC_C1TOC2SR_CH12F_Msk       (0x1UL << IPCC_C1TOC2SR_CH12F_Pos)       /*!< 0x00000800 */
#define IPCC_C1TOC2SR_CH12F           IPCC_C1TOC2SR_CH12F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH13F_Pos       (12U)
#define IPCC_C1TOC2SR_CH13F_Msk       (0x1UL << IPCC_C1TOC2SR_CH13F_Pos)       /*!< 0x00001000 */
#define IPCC_C1TOC2SR_CH13F           IPCC_C1TOC2SR_CH13F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH14F_Pos       (13U)
#define IPCC_C1TOC2SR_CH14F_Msk       (0x1UL << IPCC_C1TOC2SR_CH14F_Pos)       /*!< 0x00002000 */
#define IPCC_C1TOC2SR_CH14F           IPCC_C1TOC2SR_CH14F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH15F_Pos       (14U)
#define IPCC_C1TOC2SR_CH15F_Msk       (0x1UL << IPCC_C1TOC2SR_CH15F_Pos)       /*!< 0x00004000 */
#define IPCC_C1TOC2SR_CH15F           IPCC_C1TOC2SR_CH15F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH16F_Pos       (15U)
#define IPCC_C1TOC2SR_CH16F_Msk       (0x1UL << IPCC_C1TOC2SR_CH16F_Pos)       /*!< 0x00008000 */
#define IPCC_C1TOC2SR_CH16F           IPCC_C1TOC2SR_CH16F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */

/******************  Bit definition for IPCC_C2CR register  *******************/
#define IPCC_C2CR_RXOIE_Pos           (0U)
#define IPCC_C2CR_RXOIE_Msk           (0x1UL << IPCC_C2CR_RXOIE_Pos)           /*!< 0x00000001 */
#define IPCC_C2CR_RXOIE               IPCC_C2CR_RXOIE_Msk                     /*!< Processor 2 non-secure Receive channel occupied interrupt enable */
#define IPCC_C2CR_SECRXOIE_Pos        (1U)
#define IPCC_C2CR_SECRXOIE_Msk        (0x1UL << IPCC_C2CR_SECRXOIE_Pos)        /*!< 0x00000002 */
#define IPCC_C2CR_SECRXOIE            IPCC_C2CR_SECRXOIE_Msk                  /*!< Processor 2 secure Receive channel occupied interrupt enable */
#define IPCC_C2CR_TXFIE_Pos           (16U)
#define IPCC_C2CR_TXFIE_Msk           (0x1UL << IPCC_C2CR_TXFIE_Pos)           /*!< 0x00010000 */
#define IPCC_C2CR_TXFIE               IPCC_C2CR_TXFIE_Msk                     /*!< Processor 2 non-secure Transmit channel free interrupt enable */
#define IPCC_C2CR_SECTXFIE_Pos        (17U)
#define IPCC_C2CR_SECTXFIE_Msk        (0x1UL << IPCC_C2CR_SECTXFIE_Pos)        /*!< 0x00020000 */
#define IPCC_C2CR_SECTXFIE            IPCC_C2CR_SECTXFIE_Msk                  /*!< Processor 2 secure Transmit channel free interrupt enable */

/******************  Bit definition for IPCC_C2MR register  *******************/
#define IPCC_C2MR_CH1OM_Pos           (0U)
#define IPCC_C2MR_CH1OM_Msk           (0x1UL << IPCC_C2MR_CH1OM_Pos)           /*!< 0x00000001 */
#define IPCC_C2MR_CH1OM               IPCC_C2MR_CH1OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH2OM_Pos           (1U)
#define IPCC_C2MR_CH2OM_Msk           (0x1UL << IPCC_C2MR_CH2OM_Pos)           /*!< 0x00000002 */
#define IPCC_C2MR_CH2OM               IPCC_C2MR_CH2OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH3OM_Pos           (2U)
#define IPCC_C2MR_CH3OM_Msk           (0x1UL << IPCC_C2MR_CH3OM_Pos)           /*!< 0x00000004 */
#define IPCC_C2MR_CH3OM               IPCC_C2MR_CH3OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH4OM_Pos           (3U)
#define IPCC_C2MR_CH4OM_Msk           (0x1UL << IPCC_C2MR_CH4OM_Pos)           /*!< 0x00000008 */
#define IPCC_C2MR_CH4OM               IPCC_C2MR_CH4OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH5OM_Pos           (4U)
#define IPCC_C2MR_CH5OM_Msk           (0x1UL << IPCC_C2MR_CH5OM_Pos)           /*!< 0x00000010 */
#define IPCC_C2MR_CH5OM               IPCC_C2MR_CH5OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH6OM_Pos           (5U)
#define IPCC_C2MR_CH6OM_Msk           (0x1UL << IPCC_C2MR_CH6OM_Pos)           /*!< 0x00000020 */
#define IPCC_C2MR_CH6OM               IPCC_C2MR_CH6OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH7OM_Pos           (6U)
#define IPCC_C2MR_CH7OM_Msk           (0x1UL << IPCC_C2MR_CH7OM_Pos)           /*!< 0x00000040 */
#define IPCC_C2MR_CH7OM               IPCC_C2MR_CH7OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH8OM_Pos           (7U)
#define IPCC_C2MR_CH8OM_Msk           (0x1UL << IPCC_C2MR_CH8OM_Pos)           /*!< 0x00000080 */
#define IPCC_C2MR_CH8OM               IPCC_C2MR_CH8OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH9OM_Pos           (8U)
#define IPCC_C2MR_CH9OM_Msk           (0x1UL << IPCC_C2MR_CH9OM_Pos)           /*!< 0x00000100 */
#define IPCC_C2MR_CH9OM               IPCC_C2MR_CH9OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH10OM_Pos          (9U)
#define IPCC_C2MR_CH10OM_Msk          (0x1UL << IPCC_C2MR_CH10OM_Pos)          /*!< 0x00000200 */
#define IPCC_C2MR_CH10OM              IPCC_C2MR_CH10OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH11OM_Pos          (10U)
#define IPCC_C2MR_CH11OM_Msk          (0x1UL << IPCC_C2MR_CH11OM_Pos)          /*!< 0x00000400 */
#define IPCC_C2MR_CH11OM              IPCC_C2MR_CH11OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH12OM_Pos          (11U)
#define IPCC_C2MR_CH12OM_Msk          (0x1UL << IPCC_C2MR_CH12OM_Pos)          /*!< 0x00000800 */
#define IPCC_C2MR_CH12OM              IPCC_C2MR_CH12OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH13OM_Pos          (12U)
#define IPCC_C2MR_CH13OM_Msk          (0x1UL << IPCC_C2MR_CH13OM_Pos)          /*!< 0x00001000 */
#define IPCC_C2MR_CH13OM              IPCC_C2MR_CH13OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH14OM_Pos          (13U)
#define IPCC_C2MR_CH14OM_Msk          (0x1UL << IPCC_C2MR_CH14OM_Pos)          /*!< 0x00002000 */
#define IPCC_C2MR_CH14OM              IPCC_C2MR_CH14OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH15OM_Pos          (14U)
#define IPCC_C2MR_CH15OM_Msk          (0x1UL << IPCC_C2MR_CH15OM_Pos)          /*!< 0x00004000 */
#define IPCC_C2MR_CH15OM              IPCC_C2MR_CH15OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH16OM_Pos          (15U)
#define IPCC_C2MR_CH16OM_Msk          (0x1UL << IPCC_C2MR_CH16OM_Pos)          /*!< 0x00008000 */
#define IPCC_C2MR_CH16OM              IPCC_C2MR_CH16OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH1FM_Pos           (16U)
#define IPCC_C2MR_CH1FM_Msk           (0x1UL << IPCC_C2MR_CH1FM_Pos)           /*!< 0x00010000 */
#define IPCC_C2MR_CH1FM               IPCC_C2MR_CH1FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH2FM_Pos           (17U)
#define IPCC_C2MR_CH2FM_Msk           (0x1UL << IPCC_C2MR_CH2FM_Pos)           /*!< 0x00020000 */
#define IPCC_C2MR_CH2FM               IPCC_C2MR_CH2FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH3FM_Pos           (18U)
#define IPCC_C2MR_CH3FM_Msk           (0x1UL << IPCC_C2MR_CH3FM_Pos)           /*!< 0x00040000 */
#define IPCC_C2MR_CH3FM               IPCC_C2MR_CH3FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH4FM_Pos           (19U)
#define IPCC_C2MR_CH4FM_Msk           (0x1UL << IPCC_C2MR_CH4FM_Pos)           /*!< 0x00080000 */
#define IPCC_C2MR_CH4FM               IPCC_C2MR_CH4FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH5FM_Pos           (20U)
#define IPCC_C2MR_CH5FM_Msk           (0x1UL << IPCC_C2MR_CH5FM_Pos)           /*!< 0x00100000 */
#define IPCC_C2MR_CH5FM               IPCC_C2MR_CH5FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH6FM_Pos           (21U)
#define IPCC_C2MR_CH6FM_Msk           (0x1UL << IPCC_C2MR_CH6FM_Pos)           /*!< 0x00200000 */
#define IPCC_C2MR_CH6FM               IPCC_C2MR_CH6FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH7FM_Pos           (22U)
#define IPCC_C2MR_CH7FM_Msk           (0x1UL << IPCC_C2MR_CH7FM_Pos)           /*!< 0x00400000 */
#define IPCC_C2MR_CH7FM               IPCC_C2MR_CH7FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH8FM_Pos           (23U)
#define IPCC_C2MR_CH8FM_Msk           (0x1UL << IPCC_C2MR_CH8FM_Pos)           /*!< 0x00800000 */
#define IPCC_C2MR_CH8FM               IPCC_C2MR_CH8FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH9FM_Pos           (24U)
#define IPCC_C2MR_CH9FM_Msk           (0x1UL << IPCC_C2MR_CH9FM_Pos)           /*!< 0x01000000 */
#define IPCC_C2MR_CH9FM               IPCC_C2MR_CH9FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH10FM_Pos          (25U)
#define IPCC_C2MR_CH10FM_Msk          (0x1UL << IPCC_C2MR_CH10FM_Pos)          /*!< 0x02000000 */
#define IPCC_C2MR_CH10FM              IPCC_C2MR_CH10FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH11FM_Pos          (26U)
#define IPCC_C2MR_CH11FM_Msk          (0x1UL << IPCC_C2MR_CH11FM_Pos)          /*!< 0x04000000 */
#define IPCC_C2MR_CH11FM              IPCC_C2MR_CH11FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH12FM_Pos          (27U)
#define IPCC_C2MR_CH12FM_Msk          (0x1UL << IPCC_C2MR_CH12FM_Pos)          /*!< 0x08000000 */
#define IPCC_C2MR_CH12FM              IPCC_C2MR_CH12FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH13FM_Pos          (28U)
#define IPCC_C2MR_CH13FM_Msk          (0x1UL << IPCC_C2MR_CH13FM_Pos)          /*!< 0x10000000 */
#define IPCC_C2MR_CH13FM              IPCC_C2MR_CH13FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH14FM_Pos          (29U)
#define IPCC_C2MR_CH14FM_Msk          (0x1UL << IPCC_C2MR_CH14FM_Pos)          /*!< 0x20000000 */
#define IPCC_C2MR_CH14FM              IPCC_C2MR_CH14FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH15FM_Pos          (30U)
#define IPCC_C2MR_CH15FM_Msk          (0x1UL << IPCC_C2MR_CH15FM_Pos)          /*!< 0x40000000 */
#define IPCC_C2MR_CH15FM              IPCC_C2MR_CH15FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH16FM_Pos          (31U)
#define IPCC_C2MR_CH16FM_Msk          (0x1UL << IPCC_C2MR_CH16FM_Pos)          /*!< 0x80000000 */
#define IPCC_C2MR_CH16FM              IPCC_C2MR_CH16FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */

/******************  Bit definition for IPCC_C2SCR register  ******************/
#define IPCC_C2SCR_CH1C_Pos           (0U)
#define IPCC_C2SCR_CH1C_Msk           (0x1UL << IPCC_C2SCR_CH1C_Pos)           /*!< 0x00000001 */
#define IPCC_C2SCR_CH1C               IPCC_C2SCR_CH1C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH2C_Pos           (1U)
#define IPCC_C2SCR_CH2C_Msk           (0x1UL << IPCC_C2SCR_CH2C_Pos)           /*!< 0x00000002 */
#define IPCC_C2SCR_CH2C               IPCC_C2SCR_CH2C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH3C_Pos           (2U)
#define IPCC_C2SCR_CH3C_Msk           (0x1UL << IPCC_C2SCR_CH3C_Pos)           /*!< 0x00000004 */
#define IPCC_C2SCR_CH3C               IPCC_C2SCR_CH3C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH4C_Pos           (3U)
#define IPCC_C2SCR_CH4C_Msk           (0x1UL << IPCC_C2SCR_CH4C_Pos)           /*!< 0x00000008 */
#define IPCC_C2SCR_CH4C               IPCC_C2SCR_CH4C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH5C_Pos           (4U)
#define IPCC_C2SCR_CH5C_Msk           (0x1UL << IPCC_C2SCR_CH5C_Pos)           /*!< 0x00000010 */
#define IPCC_C2SCR_CH5C               IPCC_C2SCR_CH5C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH6C_Pos           (5U)
#define IPCC_C2SCR_CH6C_Msk           (0x1UL << IPCC_C2SCR_CH6C_Pos)           /*!< 0x00000020 */
#define IPCC_C2SCR_CH6C               IPCC_C2SCR_CH6C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH7C_Pos           (6U)
#define IPCC_C2SCR_CH7C_Msk           (0x1UL << IPCC_C2SCR_CH7C_Pos)           /*!< 0x00000040 */
#define IPCC_C2SCR_CH7C               IPCC_C2SCR_CH7C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH8C_Pos           (7U)
#define IPCC_C2SCR_CH8C_Msk           (0x1UL << IPCC_C2SCR_CH8C_Pos)           /*!< 0x00000080 */
#define IPCC_C2SCR_CH8C               IPCC_C2SCR_CH8C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH9C_Pos           (8U)
#define IPCC_C2SCR_CH9C_Msk           (0x1UL << IPCC_C2SCR_CH9C_Pos)           /*!< 0x00000100 */
#define IPCC_C2SCR_CH9C               IPCC_C2SCR_CH9C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH10C_Pos          (9U)
#define IPCC_C2SCR_CH10C_Msk          (0x1UL << IPCC_C2SCR_CH10C_Pos)          /*!< 0x00000200 */
#define IPCC_C2SCR_CH10C              IPCC_C2SCR_CH10C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH11C_Pos          (10U)
#define IPCC_C2SCR_CH11C_Msk          (0x1UL << IPCC_C2SCR_CH11C_Pos)          /*!< 0x00000400 */
#define IPCC_C2SCR_CH11C              IPCC_C2SCR_CH11C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH12C_Pos          (11U)
#define IPCC_C2SCR_CH12C_Msk          (0x1UL << IPCC_C2SCR_CH12C_Pos)          /*!< 0x00000800 */
#define IPCC_C2SCR_CH12C              IPCC_C2SCR_CH12C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH13C_Pos          (12U)
#define IPCC_C2SCR_CH13C_Msk          (0x1UL << IPCC_C2SCR_CH13C_Pos)          /*!< 0x00001000 */
#define IPCC_C2SCR_CH13C              IPCC_C2SCR_CH13C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH14C_Pos          (13U)
#define IPCC_C2SCR_CH14C_Msk          (0x1UL << IPCC_C2SCR_CH14C_Pos)          /*!< 0x00002000 */
#define IPCC_C2SCR_CH14C              IPCC_C2SCR_CH14C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH15C_Pos          (14U)
#define IPCC_C2SCR_CH15C_Msk          (0x1UL << IPCC_C2SCR_CH15C_Pos)          /*!< 0x00004000 */
#define IPCC_C2SCR_CH15C              IPCC_C2SCR_CH15C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH16C_Pos          (15U)
#define IPCC_C2SCR_CH16C_Msk          (0x1UL << IPCC_C2SCR_CH16C_Pos)          /*!< 0x00008000 */
#define IPCC_C2SCR_CH16C              IPCC_C2SCR_CH16C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH1S_Pos           (16U)
#define IPCC_C2SCR_CH1S_Msk           (0x1UL << IPCC_C2SCR_CH1S_Pos)           /*!< 0x00010000 */
#define IPCC_C2SCR_CH1S               IPCC_C2SCR_CH1S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH2S_Pos           (17U)
#define IPCC_C2SCR_CH2S_Msk           (0x1UL << IPCC_C2SCR_CH2S_Pos)           /*!< 0x00020000 */
#define IPCC_C2SCR_CH2S               IPCC_C2SCR_CH2S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH3S_Pos           (18U)
#define IPCC_C2SCR_CH3S_Msk           (0x1UL << IPCC_C2SCR_CH3S_Pos)           /*!< 0x00040000 */
#define IPCC_C2SCR_CH3S               IPCC_C2SCR_CH3S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH4S_Pos           (19U)
#define IPCC_C2SCR_CH4S_Msk           (0x1UL << IPCC_C2SCR_CH4S_Pos)           /*!< 0x00080000 */
#define IPCC_C2SCR_CH4S               IPCC_C2SCR_CH4S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH5S_Pos           (20U)
#define IPCC_C2SCR_CH5S_Msk           (0x1UL << IPCC_C2SCR_CH5S_Pos)           /*!< 0x00100000 */
#define IPCC_C2SCR_CH5S               IPCC_C2SCR_CH5S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH6S_Pos           (21U)
#define IPCC_C2SCR_CH6S_Msk           (0x1UL << IPCC_C2SCR_CH6S_Pos)           /*!< 0x00200000 */
#define IPCC_C2SCR_CH6S               IPCC_C2SCR_CH6S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH7S_Pos           (22U)
#define IPCC_C2SCR_CH7S_Msk           (0x1UL << IPCC_C2SCR_CH7S_Pos)           /*!< 0x00400000 */
#define IPCC_C2SCR_CH7S               IPCC_C2SCR_CH7S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH8S_Pos           (23U)
#define IPCC_C2SCR_CH8S_Msk           (0x1UL << IPCC_C2SCR_CH8S_Pos)           /*!< 0x00800000 */
#define IPCC_C2SCR_CH8S               IPCC_C2SCR_CH8S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH9S_Pos           (24U)
#define IPCC_C2SCR_CH9S_Msk           (0x1UL << IPCC_C2SCR_CH9S_Pos)           /*!< 0x01000000 */
#define IPCC_C2SCR_CH9S               IPCC_C2SCR_CH9S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH10S_Pos          (25U)
#define IPCC_C2SCR_CH10S_Msk          (0x1UL << IPCC_C2SCR_CH10S_Pos)          /*!< 0x02000000 */
#define IPCC_C2SCR_CH10S              IPCC_C2SCR_CH10S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH11S_Pos          (26U)
#define IPCC_C2SCR_CH11S_Msk          (0x1UL << IPCC_C2SCR_CH11S_Pos)          /*!< 0x04000000 */
#define IPCC_C2SCR_CH11S              IPCC_C2SCR_CH11S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH12S_Pos          (27U)
#define IPCC_C2SCR_CH12S_Msk          (0x1UL << IPCC_C2SCR_CH12S_Pos)          /*!< 0x08000000 */
#define IPCC_C2SCR_CH12S              IPCC_C2SCR_CH12S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH13S_Pos          (28U)
#define IPCC_C2SCR_CH13S_Msk          (0x1UL << IPCC_C2SCR_CH13S_Pos)          /*!< 0x10000000 */
#define IPCC_C2SCR_CH13S              IPCC_C2SCR_CH13S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH14S_Pos          (29U)
#define IPCC_C2SCR_CH14S_Msk          (0x1UL << IPCC_C2SCR_CH14S_Pos)          /*!< 0x20000000 */
#define IPCC_C2SCR_CH14S              IPCC_C2SCR_CH14S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH15S_Pos          (30U)
#define IPCC_C2SCR_CH15S_Msk          (0x1UL << IPCC_C2SCR_CH15S_Pos)          /*!< 0x40000000 */
#define IPCC_C2SCR_CH15S              IPCC_C2SCR_CH15S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH16S_Pos          (31U)
#define IPCC_C2SCR_CH16S_Msk          (0x1UL << IPCC_C2SCR_CH16S_Pos)          /*!< 0x80000000 */
#define IPCC_C2SCR_CH16S              IPCC_C2SCR_CH16S_Msk                    /*!< Processor 2 transmit channel n status set */

/****************  Bit definition for IPCC_C2TOC1SR register  *****************/
#define IPCC_C2TOC1SR_CH1F_Pos        (0U)
#define IPCC_C2TOC1SR_CH1F_Msk        (0x1UL << IPCC_C2TOC1SR_CH1F_Pos)        /*!< 0x00000001 */
#define IPCC_C2TOC1SR_CH1F            IPCC_C2TOC1SR_CH1F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH2F_Pos        (1U)
#define IPCC_C2TOC1SR_CH2F_Msk        (0x1UL << IPCC_C2TOC1SR_CH2F_Pos)        /*!< 0x00000002 */
#define IPCC_C2TOC1SR_CH2F            IPCC_C2TOC1SR_CH2F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH3F_Pos        (2U)
#define IPCC_C2TOC1SR_CH3F_Msk        (0x1UL << IPCC_C2TOC1SR_CH3F_Pos)        /*!< 0x00000004 */
#define IPCC_C2TOC1SR_CH3F            IPCC_C2TOC1SR_CH3F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH4F_Pos        (3U)
#define IPCC_C2TOC1SR_CH4F_Msk        (0x1UL << IPCC_C2TOC1SR_CH4F_Pos)        /*!< 0x00000008 */
#define IPCC_C2TOC1SR_CH4F            IPCC_C2TOC1SR_CH4F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH5F_Pos        (4U)
#define IPCC_C2TOC1SR_CH5F_Msk        (0x1UL << IPCC_C2TOC1SR_CH5F_Pos)        /*!< 0x00000010 */
#define IPCC_C2TOC1SR_CH5F            IPCC_C2TOC1SR_CH5F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH6F_Pos        (5U)
#define IPCC_C2TOC1SR_CH6F_Msk        (0x1UL << IPCC_C2TOC1SR_CH6F_Pos)        /*!< 0x00000020 */
#define IPCC_C2TOC1SR_CH6F            IPCC_C2TOC1SR_CH6F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH7F_Pos        (6U)
#define IPCC_C2TOC1SR_CH7F_Msk        (0x1UL << IPCC_C2TOC1SR_CH7F_Pos)        /*!< 0x00000040 */
#define IPCC_C2TOC1SR_CH7F            IPCC_C2TOC1SR_CH7F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH8F_Pos        (7U)
#define IPCC_C2TOC1SR_CH8F_Msk        (0x1UL << IPCC_C2TOC1SR_CH8F_Pos)        /*!< 0x00000080 */
#define IPCC_C2TOC1SR_CH8F            IPCC_C2TOC1SR_CH8F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH9F_Pos        (8U)
#define IPCC_C2TOC1SR_CH9F_Msk        (0x1UL << IPCC_C2TOC1SR_CH9F_Pos)        /*!< 0x00000100 */
#define IPCC_C2TOC1SR_CH9F            IPCC_C2TOC1SR_CH9F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH10F_Pos       (9U)
#define IPCC_C2TOC1SR_CH10F_Msk       (0x1UL << IPCC_C2TOC1SR_CH10F_Pos)       /*!< 0x00000200 */
#define IPCC_C2TOC1SR_CH10F           IPCC_C2TOC1SR_CH10F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH11F_Pos       (10U)
#define IPCC_C2TOC1SR_CH11F_Msk       (0x1UL << IPCC_C2TOC1SR_CH11F_Pos)       /*!< 0x00000400 */
#define IPCC_C2TOC1SR_CH11F           IPCC_C2TOC1SR_CH11F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH12F_Pos       (11U)
#define IPCC_C2TOC1SR_CH12F_Msk       (0x1UL << IPCC_C2TOC1SR_CH12F_Pos)       /*!< 0x00000800 */
#define IPCC_C2TOC1SR_CH12F           IPCC_C2TOC1SR_CH12F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH13F_Pos       (12U)
#define IPCC_C2TOC1SR_CH13F_Msk       (0x1UL << IPCC_C2TOC1SR_CH13F_Pos)       /*!< 0x00001000 */
#define IPCC_C2TOC1SR_CH13F           IPCC_C2TOC1SR_CH13F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH14F_Pos       (13U)
#define IPCC_C2TOC1SR_CH14F_Msk       (0x1UL << IPCC_C2TOC1SR_CH14F_Pos)       /*!< 0x00002000 */
#define IPCC_C2TOC1SR_CH14F           IPCC_C2TOC1SR_CH14F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH15F_Pos       (14U)
#define IPCC_C2TOC1SR_CH15F_Msk       (0x1UL << IPCC_C2TOC1SR_CH15F_Pos)       /*!< 0x00004000 */
#define IPCC_C2TOC1SR_CH15F           IPCC_C2TOC1SR_CH15F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH16F_Pos       (15U)
#define IPCC_C2TOC1SR_CH16F_Msk       (0x1UL << IPCC_C2TOC1SR_CH16F_Pos)       /*!< 0x00008000 */
#define IPCC_C2TOC1SR_CH16F           IPCC_C2TOC1SR_CH16F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */

/****************  Bit definition for IPCC_C1SECCFGR register  ****************/
#define IPCC_C1SECCFGR_CH1SEC_Pos     (0U)
#define IPCC_C1SECCFGR_CH1SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH1SEC_Pos)     /*!< 0x00000001 */
#define IPCC_C1SECCFGR_CH1SEC         IPCC_C1SECCFGR_CH1SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH2SEC_Pos     (1U)
#define IPCC_C1SECCFGR_CH2SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH2SEC_Pos)     /*!< 0x00000002 */
#define IPCC_C1SECCFGR_CH2SEC         IPCC_C1SECCFGR_CH2SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH3SEC_Pos     (2U)
#define IPCC_C1SECCFGR_CH3SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH3SEC_Pos)     /*!< 0x00000004 */
#define IPCC_C1SECCFGR_CH3SEC         IPCC_C1SECCFGR_CH3SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH4SEC_Pos     (3U)
#define IPCC_C1SECCFGR_CH4SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH4SEC_Pos)     /*!< 0x00000008 */
#define IPCC_C1SECCFGR_CH4SEC         IPCC_C1SECCFGR_CH4SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH5SEC_Pos     (4U)
#define IPCC_C1SECCFGR_CH5SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH5SEC_Pos)     /*!< 0x00000010 */
#define IPCC_C1SECCFGR_CH5SEC         IPCC_C1SECCFGR_CH5SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH6SEC_Pos     (5U)
#define IPCC_C1SECCFGR_CH6SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH6SEC_Pos)     /*!< 0x00000020 */
#define IPCC_C1SECCFGR_CH6SEC         IPCC_C1SECCFGR_CH6SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH7SEC_Pos     (6U)
#define IPCC_C1SECCFGR_CH7SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH7SEC_Pos)     /*!< 0x00000040 */
#define IPCC_C1SECCFGR_CH7SEC         IPCC_C1SECCFGR_CH7SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH8SEC_Pos     (7U)
#define IPCC_C1SECCFGR_CH8SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH8SEC_Pos)     /*!< 0x00000080 */
#define IPCC_C1SECCFGR_CH8SEC         IPCC_C1SECCFGR_CH8SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH9SEC_Pos     (8U)
#define IPCC_C1SECCFGR_CH9SEC_Msk     (0x1UL << IPCC_C1SECCFGR_CH9SEC_Pos)     /*!< 0x00000100 */
#define IPCC_C1SECCFGR_CH9SEC         IPCC_C1SECCFGR_CH9SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH10SEC_Pos    (9U)
#define IPCC_C1SECCFGR_CH10SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH10SEC_Pos)    /*!< 0x00000200 */
#define IPCC_C1SECCFGR_CH10SEC        IPCC_C1SECCFGR_CH10SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH11SEC_Pos    (10U)
#define IPCC_C1SECCFGR_CH11SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH11SEC_Pos)    /*!< 0x00000400 */
#define IPCC_C1SECCFGR_CH11SEC        IPCC_C1SECCFGR_CH11SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH12SEC_Pos    (11U)
#define IPCC_C1SECCFGR_CH12SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH12SEC_Pos)    /*!< 0x00000800 */
#define IPCC_C1SECCFGR_CH12SEC        IPCC_C1SECCFGR_CH12SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH13SEC_Pos    (12U)
#define IPCC_C1SECCFGR_CH13SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH13SEC_Pos)    /*!< 0x00001000 */
#define IPCC_C1SECCFGR_CH13SEC        IPCC_C1SECCFGR_CH13SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH14SEC_Pos    (13U)
#define IPCC_C1SECCFGR_CH14SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH14SEC_Pos)    /*!< 0x00002000 */
#define IPCC_C1SECCFGR_CH14SEC        IPCC_C1SECCFGR_CH14SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH15SEC_Pos    (14U)
#define IPCC_C1SECCFGR_CH15SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH15SEC_Pos)    /*!< 0x00004000 */
#define IPCC_C1SECCFGR_CH15SEC        IPCC_C1SECCFGR_CH15SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH16SEC_Pos    (15U)
#define IPCC_C1SECCFGR_CH16SEC_Msk    (0x1UL << IPCC_C1SECCFGR_CH16SEC_Pos)    /*!< 0x00008000 */
#define IPCC_C1SECCFGR_CH16SEC        IPCC_C1SECCFGR_CH16SEC_Msk              /*!< processor 1 channel n security enable */

/***************  Bit definition for IPCC_C1PRIVCFGR register  ****************/
#define IPCC_C1PRIVCFGR_CH1PRIV_Pos   (0U)
#define IPCC_C1PRIVCFGR_CH1PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH1PRIV_Pos)   /*!< 0x00000001 */
#define IPCC_C1PRIVCFGR_CH1PRIV       IPCC_C1PRIVCFGR_CH1PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH2PRIV_Pos   (1U)
#define IPCC_C1PRIVCFGR_CH2PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH2PRIV_Pos)   /*!< 0x00000002 */
#define IPCC_C1PRIVCFGR_CH2PRIV       IPCC_C1PRIVCFGR_CH2PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH3PRIV_Pos   (2U)
#define IPCC_C1PRIVCFGR_CH3PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH3PRIV_Pos)   /*!< 0x00000004 */
#define IPCC_C1PRIVCFGR_CH3PRIV       IPCC_C1PRIVCFGR_CH3PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH4PRIV_Pos   (3U)
#define IPCC_C1PRIVCFGR_CH4PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH4PRIV_Pos)   /*!< 0x00000008 */
#define IPCC_C1PRIVCFGR_CH4PRIV       IPCC_C1PRIVCFGR_CH4PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH5PRIV_Pos   (4U)
#define IPCC_C1PRIVCFGR_CH5PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH5PRIV_Pos)   /*!< 0x00000010 */
#define IPCC_C1PRIVCFGR_CH5PRIV       IPCC_C1PRIVCFGR_CH5PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH6PRIV_Pos   (5U)
#define IPCC_C1PRIVCFGR_CH6PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH6PRIV_Pos)   /*!< 0x00000020 */
#define IPCC_C1PRIVCFGR_CH6PRIV       IPCC_C1PRIVCFGR_CH6PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH7PRIV_Pos   (6U)
#define IPCC_C1PRIVCFGR_CH7PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH7PRIV_Pos)   /*!< 0x00000040 */
#define IPCC_C1PRIVCFGR_CH7PRIV       IPCC_C1PRIVCFGR_CH7PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH8PRIV_Pos   (7U)
#define IPCC_C1PRIVCFGR_CH8PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH8PRIV_Pos)   /*!< 0x00000080 */
#define IPCC_C1PRIVCFGR_CH8PRIV       IPCC_C1PRIVCFGR_CH8PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH9PRIV_Pos   (8U)
#define IPCC_C1PRIVCFGR_CH9PRIV_Msk   (0x1UL << IPCC_C1PRIVCFGR_CH9PRIV_Pos)   /*!< 0x00000100 */
#define IPCC_C1PRIVCFGR_CH9PRIV       IPCC_C1PRIVCFGR_CH9PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH10PRIV_Pos  (9U)
#define IPCC_C1PRIVCFGR_CH10PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH10PRIV_Pos)  /*!< 0x00000200 */
#define IPCC_C1PRIVCFGR_CH10PRIV      IPCC_C1PRIVCFGR_CH10PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH11PRIV_Pos  (10U)
#define IPCC_C1PRIVCFGR_CH11PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH11PRIV_Pos)  /*!< 0x00000400 */
#define IPCC_C1PRIVCFGR_CH11PRIV      IPCC_C1PRIVCFGR_CH11PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH12PRIV_Pos  (11U)
#define IPCC_C1PRIVCFGR_CH12PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH12PRIV_Pos)  /*!< 0x00000800 */
#define IPCC_C1PRIVCFGR_CH12PRIV      IPCC_C1PRIVCFGR_CH12PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH13PRIV_Pos  (12U)
#define IPCC_C1PRIVCFGR_CH13PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH13PRIV_Pos)  /*!< 0x00001000 */
#define IPCC_C1PRIVCFGR_CH13PRIV      IPCC_C1PRIVCFGR_CH13PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH14PRIV_Pos  (13U)
#define IPCC_C1PRIVCFGR_CH14PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH14PRIV_Pos)  /*!< 0x00002000 */
#define IPCC_C1PRIVCFGR_CH14PRIV      IPCC_C1PRIVCFGR_CH14PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH15PRIV_Pos  (14U)
#define IPCC_C1PRIVCFGR_CH15PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH15PRIV_Pos)  /*!< 0x00004000 */
#define IPCC_C1PRIVCFGR_CH15PRIV      IPCC_C1PRIVCFGR_CH15PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH16PRIV_Pos  (15U)
#define IPCC_C1PRIVCFGR_CH16PRIV_Msk  (0x1UL << IPCC_C1PRIVCFGR_CH16PRIV_Pos)  /*!< 0x00008000 */
#define IPCC_C1PRIVCFGR_CH16PRIV      IPCC_C1PRIVCFGR_CH16PRIV_Msk            /*!< processor 1 channel n privilege enable */

/****************  Bit definition for IPCC_C1CIDCFGR register  ****************/
#define IPCC_C1CIDCFGR_CFEN_Pos       (0U)
#define IPCC_C1CIDCFGR_CFEN_Msk       (0x1UL << IPCC_C1CIDCFGR_CFEN_Pos)       /*!< 0x00000001 */
#define IPCC_C1CIDCFGR_CFEN           IPCC_C1CIDCFGR_CFEN_Msk                 /*!< CID filtering enabled for processor 1 */
#define IPCC_C1CIDCFGR_CID_Pos        (4U)
#define IPCC_C1CIDCFGR_CID_Msk        (0xFUL << IPCC_C1CIDCFGR_CID_Pos)        /*!< 0x000000F0 */
#define IPCC_C1CIDCFGR_CID            IPCC_C1CIDCFGR_CID_Msk                  /*!< processor 1 CID domain identification */

/****************  Bit definition for IPCC_C2SECCFGR register  ****************/
#define IPCC_C2SECCFGR_CH1SEC_Pos     (0U)
#define IPCC_C2SECCFGR_CH1SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH1SEC_Pos)     /*!< 0x00000001 */
#define IPCC_C2SECCFGR_CH1SEC         IPCC_C2SECCFGR_CH1SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH2SEC_Pos     (1U)
#define IPCC_C2SECCFGR_CH2SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH2SEC_Pos)     /*!< 0x00000002 */
#define IPCC_C2SECCFGR_CH2SEC         IPCC_C2SECCFGR_CH2SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH3SEC_Pos     (2U)
#define IPCC_C2SECCFGR_CH3SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH3SEC_Pos)     /*!< 0x00000004 */
#define IPCC_C2SECCFGR_CH3SEC         IPCC_C2SECCFGR_CH3SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH4SEC_Pos     (3U)
#define IPCC_C2SECCFGR_CH4SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH4SEC_Pos)     /*!< 0x00000008 */
#define IPCC_C2SECCFGR_CH4SEC         IPCC_C2SECCFGR_CH4SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH5SEC_Pos     (4U)
#define IPCC_C2SECCFGR_CH5SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH5SEC_Pos)     /*!< 0x00000010 */
#define IPCC_C2SECCFGR_CH5SEC         IPCC_C2SECCFGR_CH5SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH6SEC_Pos     (5U)
#define IPCC_C2SECCFGR_CH6SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH6SEC_Pos)     /*!< 0x00000020 */
#define IPCC_C2SECCFGR_CH6SEC         IPCC_C2SECCFGR_CH6SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH7SEC_Pos     (6U)
#define IPCC_C2SECCFGR_CH7SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH7SEC_Pos)     /*!< 0x00000040 */
#define IPCC_C2SECCFGR_CH7SEC         IPCC_C2SECCFGR_CH7SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH8SEC_Pos     (7U)
#define IPCC_C2SECCFGR_CH8SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH8SEC_Pos)     /*!< 0x00000080 */
#define IPCC_C2SECCFGR_CH8SEC         IPCC_C2SECCFGR_CH8SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH9SEC_Pos     (8U)
#define IPCC_C2SECCFGR_CH9SEC_Msk     (0x1UL << IPCC_C2SECCFGR_CH9SEC_Pos)     /*!< 0x00000100 */
#define IPCC_C2SECCFGR_CH9SEC         IPCC_C2SECCFGR_CH9SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH10SEC_Pos    (9U)
#define IPCC_C2SECCFGR_CH10SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH10SEC_Pos)    /*!< 0x00000200 */
#define IPCC_C2SECCFGR_CH10SEC        IPCC_C2SECCFGR_CH10SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH11SEC_Pos    (10U)
#define IPCC_C2SECCFGR_CH11SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH11SEC_Pos)    /*!< 0x00000400 */
#define IPCC_C2SECCFGR_CH11SEC        IPCC_C2SECCFGR_CH11SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH12SEC_Pos    (11U)
#define IPCC_C2SECCFGR_CH12SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH12SEC_Pos)    /*!< 0x00000800 */
#define IPCC_C2SECCFGR_CH12SEC        IPCC_C2SECCFGR_CH12SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH13SEC_Pos    (12U)
#define IPCC_C2SECCFGR_CH13SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH13SEC_Pos)    /*!< 0x00001000 */
#define IPCC_C2SECCFGR_CH13SEC        IPCC_C2SECCFGR_CH13SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH14SEC_Pos    (13U)
#define IPCC_C2SECCFGR_CH14SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH14SEC_Pos)    /*!< 0x00002000 */
#define IPCC_C2SECCFGR_CH14SEC        IPCC_C2SECCFGR_CH14SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH15SEC_Pos    (14U)
#define IPCC_C2SECCFGR_CH15SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH15SEC_Pos)    /*!< 0x00004000 */
#define IPCC_C2SECCFGR_CH15SEC        IPCC_C2SECCFGR_CH15SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH16SEC_Pos    (15U)
#define IPCC_C2SECCFGR_CH16SEC_Msk    (0x1UL << IPCC_C2SECCFGR_CH16SEC_Pos)    /*!< 0x00008000 */
#define IPCC_C2SECCFGR_CH16SEC        IPCC_C2SECCFGR_CH16SEC_Msk              /*!< processor 2 channel n security enable */

/***************  Bit definition for IPCC_C2PRIVCFGR register  ****************/
#define IPCC_C2PRIVCFGR_CH1PRIV_Pos   (0U)
#define IPCC_C2PRIVCFGR_CH1PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH1PRIV_Pos)   /*!< 0x00000001 */
#define IPCC_C2PRIVCFGR_CH1PRIV       IPCC_C2PRIVCFGR_CH1PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH2PRIV_Pos   (1U)
#define IPCC_C2PRIVCFGR_CH2PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH2PRIV_Pos)   /*!< 0x00000002 */
#define IPCC_C2PRIVCFGR_CH2PRIV       IPCC_C2PRIVCFGR_CH2PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH3PRIV_Pos   (2U)
#define IPCC_C2PRIVCFGR_CH3PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH3PRIV_Pos)   /*!< 0x00000004 */
#define IPCC_C2PRIVCFGR_CH3PRIV       IPCC_C2PRIVCFGR_CH3PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH4PRIV_Pos   (3U)
#define IPCC_C2PRIVCFGR_CH4PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH4PRIV_Pos)   /*!< 0x00000008 */
#define IPCC_C2PRIVCFGR_CH4PRIV       IPCC_C2PRIVCFGR_CH4PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH5PRIV_Pos   (4U)
#define IPCC_C2PRIVCFGR_CH5PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH5PRIV_Pos)   /*!< 0x00000010 */
#define IPCC_C2PRIVCFGR_CH5PRIV       IPCC_C2PRIVCFGR_CH5PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH6PRIV_Pos   (5U)
#define IPCC_C2PRIVCFGR_CH6PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH6PRIV_Pos)   /*!< 0x00000020 */
#define IPCC_C2PRIVCFGR_CH6PRIV       IPCC_C2PRIVCFGR_CH6PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH7PRIV_Pos   (6U)
#define IPCC_C2PRIVCFGR_CH7PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH7PRIV_Pos)   /*!< 0x00000040 */
#define IPCC_C2PRIVCFGR_CH7PRIV       IPCC_C2PRIVCFGR_CH7PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH8PRIV_Pos   (7U)
#define IPCC_C2PRIVCFGR_CH8PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH8PRIV_Pos)   /*!< 0x00000080 */
#define IPCC_C2PRIVCFGR_CH8PRIV       IPCC_C2PRIVCFGR_CH8PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH9PRIV_Pos   (8U)
#define IPCC_C2PRIVCFGR_CH9PRIV_Msk   (0x1UL << IPCC_C2PRIVCFGR_CH9PRIV_Pos)   /*!< 0x00000100 */
#define IPCC_C2PRIVCFGR_CH9PRIV       IPCC_C2PRIVCFGR_CH9PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH10PRIV_Pos  (9U)
#define IPCC_C2PRIVCFGR_CH10PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH10PRIV_Pos)  /*!< 0x00000200 */
#define IPCC_C2PRIVCFGR_CH10PRIV      IPCC_C2PRIVCFGR_CH10PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH11PRIV_Pos  (10U)
#define IPCC_C2PRIVCFGR_CH11PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH11PRIV_Pos)  /*!< 0x00000400 */
#define IPCC_C2PRIVCFGR_CH11PRIV      IPCC_C2PRIVCFGR_CH11PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH12PRIV_Pos  (11U)
#define IPCC_C2PRIVCFGR_CH12PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH12PRIV_Pos)  /*!< 0x00000800 */
#define IPCC_C2PRIVCFGR_CH12PRIV      IPCC_C2PRIVCFGR_CH12PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH13PRIV_Pos  (12U)
#define IPCC_C2PRIVCFGR_CH13PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH13PRIV_Pos)  /*!< 0x00001000 */
#define IPCC_C2PRIVCFGR_CH13PRIV      IPCC_C2PRIVCFGR_CH13PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH14PRIV_Pos  (13U)
#define IPCC_C2PRIVCFGR_CH14PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH14PRIV_Pos)  /*!< 0x00002000 */
#define IPCC_C2PRIVCFGR_CH14PRIV      IPCC_C2PRIVCFGR_CH14PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH15PRIV_Pos  (14U)
#define IPCC_C2PRIVCFGR_CH15PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH15PRIV_Pos)  /*!< 0x00004000 */
#define IPCC_C2PRIVCFGR_CH15PRIV      IPCC_C2PRIVCFGR_CH15PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH16PRIV_Pos  (15U)
#define IPCC_C2PRIVCFGR_CH16PRIV_Msk  (0x1UL << IPCC_C2PRIVCFGR_CH16PRIV_Pos)  /*!< 0x00008000 */
#define IPCC_C2PRIVCFGR_CH16PRIV      IPCC_C2PRIVCFGR_CH16PRIV_Msk            /*!< processor 2 channel n privilege enable */

/****************  Bit definition for IPCC_C2CIDCFGR register  ****************/
#define IPCC_C2CIDCFGR_CFEN_Pos       (0U)
#define IPCC_C2CIDCFGR_CFEN_Msk       (0x1UL << IPCC_C2CIDCFGR_CFEN_Pos)       /*!< 0x00000001 */
#define IPCC_C2CIDCFGR_CFEN           IPCC_C2CIDCFGR_CFEN_Msk                 /*!< CID filtering enabled for processor 2 */
#define IPCC_C2CIDCFGR_CID_Pos        (4U)
#define IPCC_C2CIDCFGR_CID_Msk        (0xFUL << IPCC_C2CIDCFGR_CID_Pos)        /*!< 0x000000F0 */
#define IPCC_C2CIDCFGR_CID            IPCC_C2CIDCFGR_CID_Msk                  /*!< processor 2 CID domain identification */

/*****************  Bit definition for IPCC_HWCFGR register  ******************/
#define IPCC_HWCFGR_CHANNELS_Pos      (0U)
#define IPCC_HWCFGR_CHANNELS_Msk      (0xFFUL << IPCC_HWCFGR_CHANNELS_Pos)     /*!< 0x000000FF */
#define IPCC_HWCFGR_CHANNELS          IPCC_HWCFGR_CHANNELS_Msk                /*!< Number of channels per CPU supported by the IP, range 1 to 16 */
#define IPCC_HWCFGR_SECCTRL_Pos       (8U)
#define IPCC_HWCFGR_SECCTRL_Msk       (0xFUL << IPCC_HWCFGR_SECCTRL_Pos)       /*!< 0x00000F00 */
#define IPCC_HWCFGR_SECCTRL           IPCC_HWCFGR_SECCTRL_Msk                 /*!< security options, range 1 to 16 */
#define IPCC_HWCFGR_OPTBITS_Pos       (16U)
#define IPCC_HWCFGR_OPTBITS_Msk       (0xFFUL << IPCC_HWCFGR_OPTBITS_Pos)      /*!< 0x00FF0000 */
#define IPCC_HWCFGR_OPTBITS           IPCC_HWCFGR_OPTBITS_Msk                 /*!< reserved for future use */
#define IPCC_HWCFGR_CIDWIDTH_Pos      (24U)
#define IPCC_HWCFGR_CIDWIDTH_Msk      (0xFUL << IPCC_HWCFGR_CIDWIDTH_Pos)      /*!< 0x0F000000 */
#define IPCC_HWCFGR_CIDWIDTH          IPCC_HWCFGR_CIDWIDTH_Msk                /*!< CID bit filed width range 0 to 12 */

/******************  Bit definition for IPCC_VERR register  *******************/
#define IPCC_VERR_MINREV_Pos          (0U)
#define IPCC_VERR_MINREV_Msk          (0xFUL << IPCC_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define IPCC_VERR_MINREV              IPCC_VERR_MINREV_Msk                    /*!< IP Minor Revision number */
#define IPCC_VERR_MAJREV_Pos          (4U)
#define IPCC_VERR_MAJREV_Msk          (0xFUL << IPCC_VERR_MAJREV_Pos)          /*!< 0x000000F0 */
#define IPCC_VERR_MAJREV              IPCC_VERR_MAJREV_Msk                    /*!< IP Major Revision number */

/******************  Bit definition for IPCC_IPIDR register  ******************/
#define IPCC_IPIDR_IPID_Pos           (0U)
#define IPCC_IPIDR_IPID_Msk           (0xFFFFFFFFUL << IPCC_IPIDR_IPID_Pos)    /*!< 0xFFFFFFFF */
#define IPCC_IPIDR_IPID               IPCC_IPIDR_IPID_Msk                     /*!< IP identification */

/******************  Bit definition for IPCC_SIDR register  *******************/
#define IPCC_SIDR_SID_Pos             (0U)
#define IPCC_SIDR_SID_Msk             (0xFFFFFFFFUL << IPCC_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define IPCC_SIDR_SID                 IPCC_SIDR_SID_Msk                       /*!< IP size identification */

/**********************  Bit definition for IPCC_C1CR register  ***************/
#define IPCC_CR_RXOIE_Pos         IPCC_C1CR_RXOIE_Pos
#define IPCC_CR_RXOIE_Msk         IPCC_C1CR_RXOIE_Msk
#define IPCC_CR_RXOIE             IPCC_C1CR_RXOIE
#define IPCC_CR_SECRXOIE_Pos      IPCC_C1CR_SECRXOIE_Pos
#define IPCC_CR_SECRXOIE_Msk      IPCC_C1CR_SECRXOIE_Msk
#define IPCC_CR_SECRXOIE          IPCC_C1CR_SECRXOIE
#define IPCC_CR_TXFIE_Pos         IPCC_C1CR_TXFIE_Pos
#define IPCC_CR_TXFIE_Msk         IPCC_C1CR_TXFIE_Msk
#define IPCC_CR_TXFIE             IPCC_C1CR_TXFIE
#define IPCC_CR_SECTXFIE_Pos      IPCC_C1CR_SECTXFIE_Pos
#define IPCC_CR_SECTXFIE_Msk      IPCC_C1CR_SECTXFIE_Msk
#define IPCC_CR_SECTXFIE          IPCC_C1CR_SECTXFIE

/**********************  Bit definition for IPCC_C1MR register  **************/
#define IPCC_MR_CH1OM_Pos         IPCC_C1MR_CH1OM_Pos
#define IPCC_MR_CH1OM_Msk         IPCC_C1MR_CH1OM_Msk
#define IPCC_MR_CH1OM             IPCC_C1MR_CH1OM
#define IPCC_MR_CH2OM_Pos         IPCC_C1MR_CH2OM_Pos
#define IPCC_MR_CH2OM_Msk         IPCC_C1MR_CH2OM_Msk
#define IPCC_MR_CH2OM             IPCC_C1MR_CH2OM
#define IPCC_MR_CH3OM_Pos         IPCC_C1MR_CH3OM_Pos
#define IPCC_MR_CH3OM_Msk         IPCC_C1MR_CH3OM_Msk
#define IPCC_MR_CH3OM             IPCC_C1MR_CH3OM
#define IPCC_MR_CH4OM_Pos         IPCC_C1MR_CH4OM_Pos
#define IPCC_MR_CH4OM_Msk         IPCC_C1MR_CH4OM_Msk
#define IPCC_MR_CH4OM             IPCC_C1MR_CH4OM
#define IPCC_MR_CH5OM_Pos         IPCC_C1MR_CH5OM_Pos
#define IPCC_MR_CH5OM_Msk         IPCC_C1MR_CH5OM_Msk
#define IPCC_MR_CH5OM             IPCC_C1MR_CH5OM
#define IPCC_MR_CH6OM_Pos         IPCC_C1MR_CH6OM_Pos
#define IPCC_MR_CH6OM_Msk         IPCC_C1MR_CH6OM_Msk
#define IPCC_MR_CH6OM             IPCC_C1MR_CH6OM
#define IPCC_MR_CH7OM_Pos         IPCC_C1MR_CH7OM_Pos
#define IPCC_MR_CH7OM_Msk         IPCC_C1MR_CH7OM_Msk
#define IPCC_MR_CH7OM             IPCC_C1MR_CH7OM
#define IPCC_MR_CH8OM_Pos         IPCC_C1MR_CH8OM_Pos
#define IPCC_MR_CH8OM_Msk         IPCC_C1MR_CH8OM_Msk
#define IPCC_MR_CH8OM             IPCC_C1MR_CH8OM
#define IPCC_MR_CH9OM_Pos         IPCC_C1MR_CH9OM_Pos
#define IPCC_MR_CH9OM_Msk         IPCC_C1MR_CH9OM_Msk
#define IPCC_MR_CH9OM             IPCC_C1MR_CH9OM
#define IPCC_MR_CH10OM_Pos        IPCC_C1MR_CH10OM_Pos
#define IPCC_MR_CH10OM_Msk        IPCC_C1MR_CH10OM_Msk
#define IPCC_MR_CH10OM            IPCC_C1MR_CH10OM
#define IPCC_MR_CH11OM_Pos        IPCC_C1MR_CH11OM_Pos
#define IPCC_MR_CH11OM_Msk        IPCC_C1MR_CH11OM_Msk
#define IPCC_MR_CH11OM            IPCC_C1MR_CH11OM
#define IPCC_MR_CH12OM_Pos        IPCC_C1MR_CH12OM_Pos
#define IPCC_MR_CH12OM_Msk        IPCC_C1MR_CH12OM_Msk
#define IPCC_MR_CH12OM            IPCC_C1MR_CH12OM
#define IPCC_MR_CH13OM_Pos        IPCC_C1MR_CH13OM_Pos
#define IPCC_MR_CH13OM_Msk        IPCC_C1MR_CH13OM_Msk
#define IPCC_MR_CH13OM            IPCC_C1MR_CH13OM
#define IPCC_MR_CH14OM_Pos        IPCC_C1MR_CH14OM_Pos
#define IPCC_MR_CH14OM_Msk        IPCC_C1MR_CH14OM_Msk
#define IPCC_MR_CH14OM            IPCC_C1MR_CH14OM
#define IPCC_MR_CH15OM_Pos        IPCC_C1MR_CH15OM_Pos
#define IPCC_MR_CH15OM_Msk        IPCC_C1MR_CH15OM_Msk
#define IPCC_MR_CH15OM            IPCC_C1MR_CH15OM
#define IPCC_MR_CH16OM_Pos        IPCC_C1MR_CH16OM_Pos
#define IPCC_MR_CH16OM_Msk        IPCC_C1MR_CH16OM_Msk
#define IPCC_MR_CH16OM            IPCC_C1MR_CH16OM

#define IPCC_MR_CH1FM_Pos         IPCC_C1MR_CH1FM_Pos
#define IPCC_MR_CH1FM_Msk         IPCC_C1MR_CH1FM_Msk
#define IPCC_MR_CH1FM             IPCC_C1MR_CH1FM
#define IPCC_MR_CH2FM_Pos         IPCC_C1MR_CH2FM_Pos
#define IPCC_MR_CH2FM_Msk         IPCC_C1MR_CH2FM_Msk
#define IPCC_MR_CH2FM             IPCC_C1MR_CH2FM
#define IPCC_MR_CH3FM_Pos         IPCC_C1MR_CH3FM_Pos
#define IPCC_MR_CH3FM_Msk         IPCC_C1MR_CH3FM_Msk
#define IPCC_MR_CH3FM             IPCC_C1MR_CH3FM
#define IPCC_MR_CH4FM_Pos         IPCC_C1MR_CH4FM_Pos
#define IPCC_MR_CH4FM_Msk         IPCC_C1MR_CH4FM_Msk
#define IPCC_MR_CH4FM             IPCC_C1MR_CH4FM
#define IPCC_MR_CH5FM_Pos         IPCC_C1MR_CH5FM_Pos
#define IPCC_MR_CH5FM_Msk         IPCC_C1MR_CH5FM_Msk
#define IPCC_MR_CH5FM             IPCC_C1MR_CH5FM
#define IPCC_MR_CH6FM_Pos         IPCC_C1MR_CH6FM_Pos
#define IPCC_MR_CH6FM_Msk         IPCC_C1MR_CH6FM_Msk
#define IPCC_MR_CH6FM             IPCC_C1MR_CH6FM
#define IPCC_MR_CH7FM_Pos         IPCC_C1MR_CH7FM_Pos
#define IPCC_MR_CH7FM_Msk         IPCC_C1MR_CH7FM_Msk
#define IPCC_MR_CH7FM             IPCC_C1MR_CH7FM
#define IPCC_MR_CH8FM_Pos         IPCC_C1MR_CH8FM_Pos
#define IPCC_MR_CH8FM_Msk         IPCC_C1MR_CH8FM_Msk
#define IPCC_MR_CH8FM             IPCC_C1MR_CH8FM
#define IPCC_MR_CH9FM_Pos         IPCC_C1MR_CH9FM_Pos
#define IPCC_MR_CH9FM_Msk         IPCC_C1MR_CH9FM_Msk
#define IPCC_MR_CH9FM             IPCC_C1MR_CH9FM
#define IPCC_MR_CH10FM_Pos        IPCC_C1MR_CH10FM_Pos
#define IPCC_MR_CH10FM_Msk        IPCC_C1MR_CH10FM_Msk
#define IPCC_MR_CH10FM            IPCC_C1MR_CH10FM
#define IPCC_MR_CH11FM_Pos        IPCC_C1MR_CH11FM_Pos
#define IPCC_MR_CH11FM_Msk        IPCC_C1MR_CH11FM_Msk
#define IPCC_MR_CH11FM            IPCC_C1MR_CH11FM
#define IPCC_MR_CH12FM_Pos        IPCC_C1MR_CH12FM_Pos
#define IPCC_MR_CH12FM_Msk        IPCC_C1MR_CH12FM_Msk
#define IPCC_MR_CH12FM            IPCC_C1MR_CH12FM
#define IPCC_MR_CH13FM_Pos        IPCC_C1MR_CH13FM_Pos
#define IPCC_MR_CH13FM_Msk        IPCC_C1MR_CH13FM_Msk
#define IPCC_MR_CH13FM            IPCC_C1MR_CH13FM
#define IPCC_MR_CH14FM_Pos        IPCC_C1MR_CH14FM_Pos
#define IPCC_MR_CH14FM_Msk        IPCC_C1MR_CH14FM_Msk
#define IPCC_MR_CH14FM            IPCC_C1MR_CH14FM
#define IPCC_MR_CH15FM_Pos        IPCC_C1MR_CH15FM_Pos
#define IPCC_MR_CH15FM_Msk        IPCC_C1MR_CH15FM_Msk
#define IPCC_MR_CH15FM            IPCC_C1MR_CH15FM
#define IPCC_MR_CH16FM_Pos        IPCC_C1MR_CH16FM_Pos
#define IPCC_MR_CH16FM_Msk        IPCC_C1MR_CH16FM_Msk
#define IPCC_MR_CH16FM            IPCC_C1MR_CH16FM

/**********************  Bit definition for IPCC_C1SCR register  ***************/
#define IPCC_SCR_CH1C_Pos         IPCC_C1SCR_CH1C_Pos
#define IPCC_SCR_CH1C_Msk         IPCC_C1SCR_CH1C_Msk
#define IPCC_SCR_CH1C             IPCC_C1SCR_CH1C
#define IPCC_SCR_CH2C_Pos         IPCC_C1SCR_CH2C_Pos
#define IPCC_SCR_CH2C_Msk         IPCC_C1SCR_CH2C_Msk
#define IPCC_SCR_CH2C             IPCC_C1SCR_CH2C
#define IPCC_SCR_CH3C_Pos         IPCC_C1SCR_CH3C_Pos
#define IPCC_SCR_CH3C_Msk         IPCC_C1SCR_CH3C_Msk
#define IPCC_SCR_CH3C             IPCC_C1SCR_CH3C
#define IPCC_SCR_CH4C_Pos         IPCC_C1SCR_CH4C_Pos
#define IPCC_SCR_CH4C_Msk         IPCC_C1SCR_CH4C_Msk
#define IPCC_SCR_CH4C             IPCC_C1SCR_CH4C
#define IPCC_SCR_CH5C_Pos         IPCC_C1SCR_CH5C_Pos
#define IPCC_SCR_CH5C_Msk         IPCC_C1SCR_CH5C_Msk
#define IPCC_SCR_CH5C             IPCC_C1SCR_CH5C
#define IPCC_SCR_CH6C_Pos         IPCC_C1SCR_CH6C_Pos
#define IPCC_SCR_CH6C_Msk         IPCC_C1SCR_CH6C_Msk
#define IPCC_SCR_CH6C             IPCC_C1SCR_CH6C
#define IPCC_SCR_CH7C_Pos         IPCC_C1SCR_CH7C_Pos
#define IPCC_SCR_CH7C_Msk         IPCC_C1SCR_CH7C_Msk
#define IPCC_SCR_CH7C             IPCC_C1SCR_CH7C
#define IPCC_SCR_CH8C_Pos         IPCC_C1SCR_CH8C_Pos
#define IPCC_SCR_CH8C_Msk         IPCC_C1SCR_CH8C_Msk
#define IPCC_SCR_CH8C             IPCC_C1SCR_CH8C
#define IPCC_SCR_CH9C_Pos         IPCC_C1SCR_CH9C_Pos
#define IPCC_SCR_CH9C_Msk         IPCC_C1SCR_CH9C_Msk
#define IPCC_SCR_CH9C             IPCC_C1SCR_CH9C
#define IPCC_SCR_CH10C_Pos        IPCC_C1SCR_CH10C_Pos
#define IPCC_SCR_CH10C_Msk        IPCC_C1SCR_CH10C_Msk
#define IPCC_SCR_CH10C            IPCC_C1SCR_CH10C
#define IPCC_SCR_CH11C_Pos        IPCC_C1SCR_CH11C_Pos
#define IPCC_SCR_CH11C_Msk        IPCC_C1SCR_CH11C_Msk
#define IPCC_SCR_CH11C            IPCC_C1SCR_CH11C
#define IPCC_SCR_CH12C_Pos        IPCC_C1SCR_CH12C_Pos
#define IPCC_SCR_CH12C_Msk        IPCC_C1SCR_CH12C_Msk
#define IPCC_SCR_CH12C            IPCC_C1SCR_CH12C
#define IPCC_SCR_CH13C_Pos        IPCC_C1SCR_CH13C_Pos
#define IPCC_SCR_CH13C_Msk        IPCC_C1SCR_CH13C_Msk
#define IPCC_SCR_CH13C            IPCC_C1SCR_CH13C
#define IPCC_SCR_CH14C_Pos        IPCC_C1SCR_CH14C_Pos
#define IPCC_SCR_CH14C_Msk        IPCC_C1SCR_CH14C_Msk
#define IPCC_SCR_CH14C            IPCC_C1SCR_CH14C
#define IPCC_SCR_CH15C_Pos        IPCC_C1SCR_CH15C_Pos
#define IPCC_SCR_CH15C_Msk        IPCC_C1SCR_CH15C_Msk
#define IPCC_SCR_CH15C            IPCC_C1SCR_CH15C
#define IPCC_SCR_CH16C_Pos        IPCC_C1SCR_CH16C_Pos
#define IPCC_SCR_CH16C_Msk        IPCC_C1SCR_CH16C_Msk
#define IPCC_SCR_CH16C            IPCC_C1SCR_CH16C

#define IPCC_SCR_CH1S_Pos         IPCC_C1SCR_CH1S_Pos
#define IPCC_SCR_CH1S_Msk         IPCC_C1SCR_CH1S_Msk
#define IPCC_SCR_CH1S             IPCC_C1SCR_CH1S
#define IPCC_SCR_CH2S_Pos         IPCC_C1SCR_CH2S_Pos
#define IPCC_SCR_CH2S_Msk         IPCC_C1SCR_CH2S_Msk
#define IPCC_SCR_CH2S             IPCC_C1SCR_CH2S
#define IPCC_SCR_CH3S_Pos         IPCC_C1SCR_CH3S_Pos
#define IPCC_SCR_CH3S_Msk         IPCC_C1SCR_CH3S_Msk
#define IPCC_SCR_CH3S             IPCC_C1SCR_CH3S
#define IPCC_SCR_CH4S_Pos         IPCC_C1SCR_CH4S_Pos
#define IPCC_SCR_CH4S_Msk         IPCC_C1SCR_CH4S_Msk
#define IPCC_SCR_CH4S             IPCC_C1SCR_CH4S
#define IPCC_SCR_CH5S_Pos         IPCC_C1SCR_CH5S_Pos
#define IPCC_SCR_CH5S_Msk         IPCC_C1SCR_CH5S_Msk
#define IPCC_SCR_CH5S             IPCC_C1SCR_CH5S
#define IPCC_SCR_CH6S_Pos         IPCC_C1SCR_CH6S_Pos
#define IPCC_SCR_CH6S_Msk         IPCC_C1SCR_CH6S_Msk
#define IPCC_SCR_CH6S             IPCC_C1SCR_CH6S

/**********************  Bit definition for IPCC_C1TOC2SR register  ***************/
#define IPCC_SR_CH1F_Pos          IPCC_C1TOC2SR_CH1F_Pos
#define IPCC_SR_CH1F_Msk          IPCC_C1TOC2SR_CH1F_Msk
#define IPCC_SR_CH1F              IPCC_C1TOC2SR_CH1F
#define IPCC_SR_CH2F_Pos          IPCC_C1TOC2SR_CH2F_Pos
#define IPCC_SR_CH2F_Msk          IPCC_C1TOC2SR_CH2F_Msk
#define IPCC_SR_CH2F              IPCC_C1TOC2SR_CH2F
#define IPCC_SR_CH3F_Pos          IPCC_C1TOC2SR_CH3F_Pos
#define IPCC_SR_CH3F_Msk          IPCC_C1TOC2SR_CH3F_Msk
#define IPCC_SR_CH3F              IPCC_C1TOC2SR_CH3F
#define IPCC_SR_CH4F_Pos          IPCC_C1TOC2SR_CH4F_Pos
#define IPCC_SR_CH4F_Msk          IPCC_C1TOC2SR_CH4F_Msk
#define IPCC_SR_CH4F              IPCC_C1TOC2SR_CH4F
#define IPCC_SR_CH5F_Pos          IPCC_C1TOC2SR_CH5F_Pos
#define IPCC_SR_CH5F_Msk          IPCC_C1TOC2SR_CH5F_Msk
#define IPCC_SR_CH5F              IPCC_C1TOC2SR_CH5F
#define IPCC_SR_CH6F_Pos          IPCC_C1TOC2SR_CH6F_Pos
#define IPCC_SR_CH6F_Msk          IPCC_C1TOC2SR_CH6F_Msk
#define IPCC_SR_CH6F              IPCC_C1TOC2SR_CH6F
#define IPCC_SR_CH7F_Pos          IPCC_C1TOC2SR_CH7F_Pos
#define IPCC_SR_CH7F_Msk          IPCC_C1TOC2SR_CH7F_Msk
#define IPCC_SR_CH7F              IPCC_C1TOC2SR_CH7F
#define IPCC_SR_CH8F_Pos          IPCC_C1TOC2SR_CH8F_Pos
#define IPCC_SR_CH8F_Msk          IPCC_C1TOC2SR_CH8F_Msk
#define IPCC_SR_CH8F              IPCC_C1TOC2SR_CH8F
#define IPCC_SR_CH9F_Pos          IPCC_C1TOC2SR_CH9F_Pos
#define IPCC_SR_CH9F_Msk          IPCC_C1TOC2SR_CH9F_Msk
#define IPCC_SR_CH9F              IPCC_C1TOC2SR_CH9F
#define IPCC_SR_CH10F_Pos         IPCC_C1TOC2SR_CH10F_Pos
#define IPCC_SR_CH10F_Msk         IPCC_C1TOC2SR_CH10F_Msk
#define IPCC_SR_CH10F             IPCC_C1TOC2SR_CH10F
#define IPCC_SR_CH11F_Pos         IPCC_C1TOC2SR_CH11F_Pos
#define IPCC_SR_CH11F_Msk         IPCC_C1TOC2SR_CH11F_Msk
#define IPCC_SR_CH11F             IPCC_C1TOC2SR_CH11F
#define IPCC_SR_CH12F_Pos         IPCC_C1TOC2SR_CH12F_Pos
#define IPCC_SR_CH12F_Msk         IPCC_C1TOC2SR_CH12F_Msk
#define IPCC_SR_CH12F             IPCC_C1TOC2SR_CH12F
#define IPCC_SR_CH13F_Pos         IPCC_C1TOC2SR_CH13F_Pos
#define IPCC_SR_CH13F_Msk         IPCC_C1TOC2SR_CH13F_Msk
#define IPCC_SR_CH13F             IPCC_C1TOC2SR_CH13F
#define IPCC_SR_CH14F_Pos         IPCC_C1TOC2SR_CH14F_Pos
#define IPCC_SR_CH14F_Msk         IPCC_C1TOC2SR_CH14F_Msk
#define IPCC_SR_CH14F             IPCC_C1TOC2SR_CH14F
#define IPCC_SR_CH15F_Pos         IPCC_C1TOC2SR_CH15F_Pos
#define IPCC_SR_CH15F_Msk         IPCC_C1TOC2SR_CH15F_Msk
#define IPCC_SR_CH15F             IPCC_C1TOC2SR_CH15F
#define IPCC_SR_CH16F_Pos         IPCC_C1TOC2SR_CH16F_Pos
#define IPCC_SR_CH16F_Msk         IPCC_C1TOC2SR_CH16F_Msk
#define IPCC_SR_CH16F             IPCC_C1TOC2SR_CH16F

/******************** Number of IPCC channels ******************************/
#define IPCC_CHANNEL_NUMBER       16U

/******************************************************************************/
/*                                                                            */
/*                        Independent Watchdog (IWDG)                         */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for IWDG_KR register  ********************/
#define IWDG_KR_KEY_Pos             (0U)
#define IWDG_KR_KEY_Msk             (0xFFFFUL << IWDG_KR_KEY_Pos)          /*!< 0x0000FFFF */
#define IWDG_KR_KEY                 IWDG_KR_KEY_Msk                       /*!< Key value (write only, read 0x0000) */

/*******************  Bit definition for IWDG_PR register  ********************/
#define IWDG_PR_PR_Pos              (0U)
#define IWDG_PR_PR_Msk              (0xFUL << IWDG_PR_PR_Pos)              /*!< 0x0000000F */
#define IWDG_PR_PR                  IWDG_PR_PR_Msk                        /*!< Prescaler divider */
#define IWDG_PR_PR_0                (0x1UL << IWDG_PR_PR_Pos)              /*!< 0x00000001 */
#define IWDG_PR_PR_1                (0x2UL << IWDG_PR_PR_Pos)              /*!< 0x00000002 */
#define IWDG_PR_PR_2                (0x4UL << IWDG_PR_PR_Pos)              /*!< 0x00000004 */
#define IWDG_PR_PR_3                (0x8UL << IWDG_PR_PR_Pos)              /*!< 0x00000008 */

/*******************  Bit definition for IWDG_RLR register  *******************/
#define IWDG_RLR_RL_Pos             (0U)
#define IWDG_RLR_RL_Msk             (0xFFFUL << IWDG_RLR_RL_Pos)           /*!< 0x00000FFF */
#define IWDG_RLR_RL                 IWDG_RLR_RL_Msk                       /*!< Watchdog counter reload value */

/*******************  Bit definition for IWDG_SR register  ********************/
#define IWDG_SR_PVU_Pos             (0U)
#define IWDG_SR_PVU_Msk             (0x1UL << IWDG_SR_PVU_Pos)             /*!< 0x00000001 */
#define IWDG_SR_PVU                 IWDG_SR_PVU_Msk                       /*!< Watchdog prescaler value update */
#define IWDG_SR_RVU_Pos             (1U)
#define IWDG_SR_RVU_Msk             (0x1UL << IWDG_SR_RVU_Pos)             /*!< 0x00000002 */
#define IWDG_SR_RVU                 IWDG_SR_RVU_Msk                       /*!< Watchdog counter reload value update */
#define IWDG_SR_WVU_Pos             (2U)
#define IWDG_SR_WVU_Msk             (0x1UL << IWDG_SR_WVU_Pos)             /*!< 0x00000004 */
#define IWDG_SR_WVU                 IWDG_SR_WVU_Msk                       /*!< Watchdog counter window value update */
#define IWDG_SR_EWU_Pos             (3U)
#define IWDG_SR_EWU_Msk             (0x1UL << IWDG_SR_EWU_Pos)             /*!< 0x00000008 */
#define IWDG_SR_EWU                 IWDG_SR_EWU_Msk                       /*!< Watchdog interrupt comparator value update */
#define IWDG_SR_ONF_Pos             (8U)
#define IWDG_SR_ONF_Msk             (0x1UL << IWDG_SR_ONF_Pos)             /*!< 0x00000100 */
#define IWDG_SR_ONF                 IWDG_SR_ONF_Msk                       /*!< Watchdog Enable status bit */
#define IWDG_SR_EWIF_Pos            (15U)
#define IWDG_SR_EWIF_Msk            (0x1UL << IWDG_SR_EWIF_Pos)            /*!< 0x00008000 */
#define IWDG_SR_EWIF                IWDG_SR_EWIF_Msk                      /*!< Watchdog Early Interrupt flag */

/******************  Bit definition for IWDG_WINR register  *******************/
#define IWDG_WINR_WIN_Pos           (0U)
#define IWDG_WINR_WIN_Msk           (0xFFFUL << IWDG_WINR_WIN_Pos)         /*!< 0x00000FFF */
#define IWDG_WINR_WIN               IWDG_WINR_WIN_Msk                     /*!< Watchdog counter window value */

/******************  Bit definition for IWDG_EWCR register  *******************/
#define IWDG_EWCR_EWIT_Pos          (0U)
#define IWDG_EWCR_EWIT_Msk          (0xFFFUL << IWDG_EWCR_EWIT_Pos)        /*!< 0x00000FFF */
#define IWDG_EWCR_EWIT              IWDG_EWCR_EWIT_Msk                    /*!< Watchdog counter window value */
#define IWDG_EWCR_EWIE_Pos          (15U)
#define IWDG_EWCR_EWIE_Msk          (0x1UL << IWDG_EWCR_EWIE_Pos)          /*!< 0x00008000 */
#define IWDG_EWCR_EWIE              IWDG_EWCR_EWIE_Msk                    /*!< Watchdog early interrupt enable */

/*******************  Bit definition for IWDG_ICR register  *******************/
#define IWDG_ICR_EWIC_Pos           (15U)
#define IWDG_ICR_EWIC_Msk           (0x1UL << IWDG_ICR_EWIC_Pos)           /*!< 0x00008000 */
#define IWDG_ICR_EWIC               IWDG_ICR_EWIC_Msk                     /*!< Watchdog early interrupt acknowledge */

/*****************  Bit definition for IWDG_HWCFGR register  ******************/
#define IWDG_HWCFGR_WINDOW_Pos      (0U)
#define IWDG_HWCFGR_WINDOW_Msk      (0xFUL << IWDG_HWCFGR_WINDOW_Pos)      /*!< 0x0000000F */
#define IWDG_HWCFGR_WINDOW          IWDG_HWCFGR_WINDOW_Msk                /*!< Support of Window function */
#define IWDG_HWCFGR_PR_DEFAULT_Pos  (4U)
#define IWDG_HWCFGR_PR_DEFAULT_Msk  (0xFUL << IWDG_HWCFGR_PR_DEFAULT_Pos)  /*!< 0x000000F0 */
#define IWDG_HWCFGR_PR_DEFAULT      IWDG_HWCFGR_PR_DEFAULT_Msk            /*!< Prescaler default value */

/******************  Bit definition for IWDG_VERR register  *******************/
#define IWDG_VERR_MINREV_Pos        (0U)
#define IWDG_VERR_MINREV_Msk        (0xFUL << IWDG_VERR_MINREV_Pos)        /*!< 0x0000000F */
#define IWDG_VERR_MINREV            IWDG_VERR_MINREV_Msk                  /*!< Minor revision */
#define IWDG_VERR_MAJREV_Pos        (4U)
#define IWDG_VERR_MAJREV_Msk        (0xFUL << IWDG_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define IWDG_VERR_MAJREV            IWDG_VERR_MAJREV_Msk                  /*!< Major revision */

/*******************  Bit definition for IWDG_IDR register  *******************/
#define IWDG_IDR_ID_Pos             (0U)
#define IWDG_IDR_ID_Msk             (0xFFFFFFFFUL << IWDG_IDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define IWDG_IDR_ID                 IWDG_IDR_ID_Msk                       /*!< IWDG identifier */

/******************  Bit definition for IWDG_SIDR register  *******************/
#define IWDG_SIDR_SID_Pos           (0U)
#define IWDG_SIDR_SID_Msk           (0xFFFFFFFFUL << IWDG_SIDR_SID_Pos)    /*!< 0xFFFFFFFF */
#define IWDG_SIDR_SID               IWDG_SIDR_SID_Msk                     /*!< IWDG size identifier */

/******************************************************************************/
/*                                                                            */
/*                          Low Power Timer (LPTIM)                           */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for LPTIM_ISR register  *******************/
#define LPTIM_ISR_CC1IF_Pos          (0U)
#define LPTIM_ISR_CC1IF_Msk          (0x1UL << LPTIM_ISR_CC1IF_Pos)           /*!< 0x00000001 */
#define LPTIM_ISR_CC1IF              LPTIM_ISR_CC1IF_Msk                     /*!< Capture/Compare 1 interrupt flag */
#define LPTIM_ISR_ARRM_Pos           (1U)
#define LPTIM_ISR_ARRM_Msk           (0x1UL << LPTIM_ISR_ARRM_Pos)            /*!< 0x00000002 */
#define LPTIM_ISR_ARRM               LPTIM_ISR_ARRM_Msk                      /*!< Autoreload match */
#define LPTIM_ISR_EXTTRIG_Pos        (2U)
#define LPTIM_ISR_EXTTRIG_Msk        (0x1UL << LPTIM_ISR_EXTTRIG_Pos)         /*!< 0x00000004 */
#define LPTIM_ISR_EXTTRIG            LPTIM_ISR_EXTTRIG_Msk                   /*!< External trigger edge event */
#define LPTIM_ISR_CMP1OK_Pos         (3U)
#define LPTIM_ISR_CMP1OK_Msk         (0x1UL << LPTIM_ISR_CMP1OK_Pos)          /*!< 0x00000008 */
#define LPTIM_ISR_CMP1OK             LPTIM_ISR_CMP1OK_Msk                    /*!< Compare register 1 update OK */
#define LPTIM_ISR_ARROK_Pos          (4U)
#define LPTIM_ISR_ARROK_Msk          (0x1UL << LPTIM_ISR_ARROK_Pos)           /*!< 0x00000010 */
#define LPTIM_ISR_ARROK              LPTIM_ISR_ARROK_Msk                     /*!< Autoreload register update OK */
#define LPTIM_ISR_UP_Pos             (5U)
#define LPTIM_ISR_UP_Msk             (0x1UL << LPTIM_ISR_UP_Pos)              /*!< 0x00000020 */
#define LPTIM_ISR_UP                 LPTIM_ISR_UP_Msk                        /*!< Counter direction change down to up */
#define LPTIM_ISR_DOWN_Pos           (6U)
#define LPTIM_ISR_DOWN_Msk           (0x1UL << LPTIM_ISR_DOWN_Pos)            /*!< 0x00000040 */
#define LPTIM_ISR_DOWN               LPTIM_ISR_DOWN_Msk                      /*!< Counter direction change up to down */
#define LPTIM_ISR_UE_Pos             (7U)
#define LPTIM_ISR_UE_Msk             (0x1UL << LPTIM_ISR_UE_Pos)              /*!< 0x00000080 */
#define LPTIM_ISR_UE                 LPTIM_ISR_UE_Msk                        /*!< LPTIM update event occurred */
#define LPTIM_ISR_REPOK_Pos          (8U)
#define LPTIM_ISR_REPOK_Msk          (0x1UL << LPTIM_ISR_REPOK_Pos)           /*!< 0x00000100 */
#define LPTIM_ISR_REPOK              LPTIM_ISR_REPOK_Msk                     /*!< Repetition register update OK */
#define LPTIM_ISR_CC2IF_Pos          (9U)
#define LPTIM_ISR_CC2IF_Msk          (0x1UL << LPTIM_ISR_CC2IF_Pos)           /*!< 0x00000200 */
#define LPTIM_ISR_CC2IF              LPTIM_ISR_CC2IF_Msk                     /*!< Capture/Compare 2 interrupt flag */
#define LPTIM_ISR_CC1OF_Pos          (12U)
#define LPTIM_ISR_CC1OF_Msk          (0x1UL << LPTIM_ISR_CC1OF_Pos)           /*!< 0x00001000 */
#define LPTIM_ISR_CC1OF              LPTIM_ISR_CC1OF_Msk                     /*!< Capture 1 over-capture flag */
#define LPTIM_ISR_CC2OF_Pos          (13U)
#define LPTIM_ISR_CC2OF_Msk          (0x1UL << LPTIM_ISR_CC2OF_Pos)           /*!< 0x00002000 */
#define LPTIM_ISR_CC2OF              LPTIM_ISR_CC2OF_Msk                     /*!< Capture 2 over-capture flag */
#define LPTIM_ISR_CMP2OK_Pos         (19U)
#define LPTIM_ISR_CMP2OK_Msk         (0x1UL << LPTIM_ISR_CMP2OK_Pos)          /*!< 0x00080000 */
#define LPTIM_ISR_CMP2OK             LPTIM_ISR_CMP2OK_Msk                    /*!< Compare register 2 update OK */
#define LPTIM_ISR_DIEROK_Pos         (24U)
#define LPTIM_ISR_DIEROK_Msk         (0x1UL << LPTIM_ISR_DIEROK_Pos)          /*!< 0x01000000 */
#define LPTIM_ISR_DIEROK             LPTIM_ISR_DIEROK_Msk                    /*!< Interrupt enable register update OK */

/******************  Bit definition for LPTIM_ICR register  *******************/
#define LPTIM_ICR_CC1CF_Pos          (0U)
#define LPTIM_ICR_CC1CF_Msk          (0x1UL << LPTIM_ICR_CC1CF_Pos)           /*!< 0x00000001 */
#define LPTIM_ICR_CC1CF              LPTIM_ICR_CC1CF_Msk                     /*!< Capture/compare 1 clear flag */
#define LPTIM_ICR_ARRMCF_Pos         (1U)
#define LPTIM_ICR_ARRMCF_Msk         (0x1UL << LPTIM_ICR_ARRMCF_Pos)          /*!< 0x00000002 */
#define LPTIM_ICR_ARRMCF             LPTIM_ICR_ARRMCF_Msk                    /*!< Autoreload match clear flag */
#define LPTIM_ICR_EXTTRIGCF_Pos      (2U)
#define LPTIM_ICR_EXTTRIGCF_Msk      (0x1UL << LPTIM_ICR_EXTTRIGCF_Pos)       /*!< 0x00000004 */
#define LPTIM_ICR_EXTTRIGCF          LPTIM_ICR_EXTTRIGCF_Msk                 /*!< External trigger valid edge clear flag */
#define LPTIM_ICR_CMP1OKCF_Pos       (3U)
#define LPTIM_ICR_CMP1OKCF_Msk       (0x1UL << LPTIM_ICR_CMP1OKCF_Pos)        /*!< 0x00000008 */
#define LPTIM_ICR_CMP1OKCF           LPTIM_ICR_CMP1OKCF_Msk                  /*!< Compare register 1 update OK clear flag */
#define LPTIM_ICR_ARROKCF_Pos        (4U)
#define LPTIM_ICR_ARROKCF_Msk        (0x1UL << LPTIM_ICR_ARROKCF_Pos)         /*!< 0x00000010 */
#define LPTIM_ICR_ARROKCF            LPTIM_ICR_ARROKCF_Msk                   /*!< Autoreload register update OK clear flag */
#define LPTIM_ICR_UPCF_Pos           (5U)
#define LPTIM_ICR_UPCF_Msk           (0x1UL << LPTIM_ICR_UPCF_Pos)            /*!< 0x00000020 */
#define LPTIM_ICR_UPCF               LPTIM_ICR_UPCF_Msk                      /*!< Direction change to UP clear flag */
#define LPTIM_ICR_DOWNCF_Pos         (6U)
#define LPTIM_ICR_DOWNCF_Msk         (0x1UL << LPTIM_ICR_DOWNCF_Pos)          /*!< 0x00000040 */
#define LPTIM_ICR_DOWNCF             LPTIM_ICR_DOWNCF_Msk                    /*!< Direction change to down clear flag */
#define LPTIM_ICR_UECF_Pos           (7U)
#define LPTIM_ICR_UECF_Msk           (0x1UL << LPTIM_ICR_UECF_Pos)            /*!< 0x00000080 */
#define LPTIM_ICR_UECF               LPTIM_ICR_UECF_Msk                      /*!< Update event clear flag */
#define LPTIM_ICR_REPOKCF_Pos        (8U)
#define LPTIM_ICR_REPOKCF_Msk        (0x1UL << LPTIM_ICR_REPOKCF_Pos)         /*!< 0x00000100 */
#define LPTIM_ICR_REPOKCF            LPTIM_ICR_REPOKCF_Msk                   /*!< Repetition register update OK clear flag */
#define LPTIM_ICR_CC2CF_Pos          (9U)
#define LPTIM_ICR_CC2CF_Msk          (0x1UL << LPTIM_ICR_CC2CF_Pos)           /*!< 0x00000200 */
#define LPTIM_ICR_CC2CF              LPTIM_ICR_CC2CF_Msk                     /*!< Capture/compare 2 clear flag */
#define LPTIM_ICR_CC1OCF_Pos         (12U)
#define LPTIM_ICR_CC1OCF_Msk         (0x1UL << LPTIM_ICR_CC1OCF_Pos)          /*!< 0x00001000 */
#define LPTIM_ICR_CC1OCF             LPTIM_ICR_CC1OCF_Msk                    /*!< Capture/compare 1 over-capture clear flag */
#define LPTIM_ICR_CC2OCF_Pos         (13U)
#define LPTIM_ICR_CC2OCF_Msk         (0x1UL << LPTIM_ICR_CC2OCF_Pos)          /*!< 0x00002000 */
#define LPTIM_ICR_CC2OCF             LPTIM_ICR_CC2OCF_Msk                    /*!< Capture/compare 2 over-capture clear flag */
#define LPTIM_ICR_CMP2OKCF_Pos       (19U)
#define LPTIM_ICR_CMP2OKCF_Msk       (0x1UL << LPTIM_ICR_CMP2OKCF_Pos)        /*!< 0x00080000 */
#define LPTIM_ICR_CMP2OKCF           LPTIM_ICR_CMP2OKCF_Msk                  /*!< Compare register 2 update OK clear flag */
#define LPTIM_ICR_DIEROKCF_Pos       (24U)
#define LPTIM_ICR_DIEROKCF_Msk       (0x1UL << LPTIM_ICR_DIEROKCF_Pos)        /*!< 0x01000000 */
#define LPTIM_ICR_DIEROKCF           LPTIM_ICR_DIEROKCF_Msk                  /*!< Interrupt enable register update OK clear flag */

/*****************  Bit definition for LPTIM_DIER register  *******************/
#define LPTIM_DIER_CC1IE_Pos         (0U)
#define LPTIM_DIER_CC1IE_Msk         (0x1UL << LPTIM_DIER_CC1IE_Pos)          /*!< 0x00000001 */
#define LPTIM_DIER_CC1IE             LPTIM_DIER_CC1IE_Msk                    /*!< Capture/compare 1 interrupt enable */
#define LPTIM_DIER_ARRMIE_Pos        (1U)
#define LPTIM_DIER_ARRMIE_Msk        (0x1UL << LPTIM_DIER_ARRMIE_Pos)         /*!< 0x00000002 */
#define LPTIM_DIER_ARRMIE            LPTIM_DIER_ARRMIE_Msk                   /*!< Autoreload match Interrupt Enable */
#define LPTIM_DIER_EXTTRIGIE_Pos     (2U)
#define LPTIM_DIER_EXTTRIGIE_Msk     (0x1UL << LPTIM_DIER_EXTTRIGIE_Pos)      /*!< 0x00000004 */
#define LPTIM_DIER_EXTTRIGIE         LPTIM_DIER_EXTTRIGIE_Msk                /*!< External trigger valid edge Interrupt Enable */
#define LPTIM_DIER_CMP1OKIE_Pos      (3U)
#define LPTIM_DIER_CMP1OKIE_Msk      (0x1UL << LPTIM_DIER_CMP1OKIE_Pos)       /*!< 0x00000008 */
#define LPTIM_DIER_CMP1OKIE          LPTIM_DIER_CMP1OKIE_Msk                 /*!< Compare register 1 update OK interrupt enable */
#define LPTIM_DIER_ARROKIE_Pos       (4U)
#define LPTIM_DIER_ARROKIE_Msk       (0x1UL << LPTIM_DIER_ARROKIE_Pos)        /*!< 0x00000010 */
#define LPTIM_DIER_ARROKIE           LPTIM_DIER_ARROKIE_Msk                  /*!< Autoreload register update OK Interrupt Enable */
#define LPTIM_DIER_UPIE_Pos          (5U)
#define LPTIM_DIER_UPIE_Msk          (0x1UL << LPTIM_DIER_UPIE_Pos)           /*!< 0x00000020 */
#define LPTIM_DIER_UPIE              LPTIM_DIER_UPIE_Msk                     /*!< Direction change to UP Interrupt Enable */
#define LPTIM_DIER_DOWNIE_Pos        (6U)
#define LPTIM_DIER_DOWNIE_Msk        (0x1UL << LPTIM_DIER_DOWNIE_Pos)         /*!< 0x00000040 */
#define LPTIM_DIER_DOWNIE            LPTIM_DIER_DOWNIE_Msk                   /*!< Direction change to down Interrupt Enable */
#define LPTIM_DIER_UEIE_Pos          (7U)
#define LPTIM_DIER_UEIE_Msk          (0x1UL << LPTIM_DIER_UEIE_Pos)           /*!< 0x00000080 */
#define LPTIM_DIER_UEIE              LPTIM_DIER_UEIE_Msk                     /*!< Update event interrupt enable */
#define LPTIM_DIER_REPOKIE_Pos       (8U)
#define LPTIM_DIER_REPOKIE_Msk       (0x1UL << LPTIM_DIER_REPOKIE_Pos)        /*!< 0x00000100 */
#define LPTIM_DIER_REPOKIE           LPTIM_DIER_REPOKIE_Msk                  /*!< Repetition register update OK interrupt Enable */
#define LPTIM_DIER_CC2IE_Pos         (9U)
#define LPTIM_DIER_CC2IE_Msk         (0x1UL << LPTIM_DIER_CC2IE_Pos)          /*!< 0x00000200 */
#define LPTIM_DIER_CC2IE             LPTIM_DIER_CC2IE_Msk                    /*!< Capture/compare 2 interrupt enable */
#define LPTIM_DIER_CC1OIE_Pos        (12U)
#define LPTIM_DIER_CC1OIE_Msk        (0x1UL << LPTIM_DIER_CC1OIE_Pos)         /*!< 0x00001000 */
#define LPTIM_DIER_CC1OIE            LPTIM_DIER_CC1OIE_Msk                   /*!< Capture/compare 1 over-capture interrupt enable */
#define LPTIM_DIER_CC2OIE_Pos        (13U)
#define LPTIM_DIER_CC2OIE_Msk        (0x1UL << LPTIM_DIER_CC2OIE_Pos)         /*!< 0x00002000 */
#define LPTIM_DIER_CC2OIE            LPTIM_DIER_CC2OIE_Msk                   /*!< Capture/compare 2 over-capture interrupt enable */
#define LPTIM_DIER_CC1DE_Pos         (16U)
#define LPTIM_DIER_CC1DE_Msk         (0x1UL << LPTIM_DIER_CC1DE_Pos)          /*!< 0x00010000 */
#define LPTIM_DIER_CC1DE             LPTIM_DIER_CC1DE_Msk                    /*!< Capture/compare 1 DMA request enable */
#define LPTIM_DIER_CMP2OKIE_Pos      (19U)
#define LPTIM_DIER_CMP2OKIE_Msk      (0x1UL << LPTIM_DIER_CMP2OKIE_Pos)       /*!< 0x00080000 */
#define LPTIM_DIER_CMP2OKIE          LPTIM_DIER_CMP2OKIE_Msk                 /*!< Compare register 2 update OK interrupt enable */
#define LPTIM_DIER_UEDE_Pos          (23U)
#define LPTIM_DIER_UEDE_Msk          (0x1UL << LPTIM_DIER_UEDE_Pos)           /*!< 0x00800000 */
#define LPTIM_DIER_UEDE              LPTIM_DIER_UEDE_Msk                     /*!< Update event DMA request enable */
#define LPTIM_DIER_CC2DE_Pos         (25U)
#define LPTIM_DIER_CC2DE_Msk         (0x1UL << LPTIM_DIER_CC2DE_Pos)          /*!< 0x02000000 */
#define LPTIM_DIER_CC2DE             LPTIM_DIER_CC2DE_Msk                    /*!< Capture/compare 2 DMA request enable */

/******************  Bit definition for LPTIM_CFGR register  ******************/
#define LPTIM_CFGR_CKSEL_Pos         (0U)
#define LPTIM_CFGR_CKSEL_Msk         (0x1UL << LPTIM_CFGR_CKSEL_Pos)          /*!< 0x00000001 */
#define LPTIM_CFGR_CKSEL             LPTIM_CFGR_CKSEL_Msk                    /*!< Clock selector */
#define LPTIM_CFGR_CKPOL_Pos         (1U)
#define LPTIM_CFGR_CKPOL_Msk         (0x3UL << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000006 */
#define LPTIM_CFGR_CKPOL             LPTIM_CFGR_CKPOL_Msk                    /*!< Clock Polarity */
#define LPTIM_CFGR_CKPOL_0           (0x1UL << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000002 */
#define LPTIM_CFGR_CKPOL_1           (0x2UL << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000004 */
#define LPTIM_CFGR_CKFLT_Pos         (3U)
#define LPTIM_CFGR_CKFLT_Msk         (0x3UL << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000018 */
#define LPTIM_CFGR_CKFLT             LPTIM_CFGR_CKFLT_Msk                    /*!< Configurable digital filter for external clock */
#define LPTIM_CFGR_CKFLT_0           (0x1UL << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000008 */
#define LPTIM_CFGR_CKFLT_1           (0x2UL << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000010 */
#define LPTIM_CFGR_TRGFLT_Pos        (6U)
#define LPTIM_CFGR_TRGFLT_Msk        (0x3UL << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x000000C0 */
#define LPTIM_CFGR_TRGFLT            LPTIM_CFGR_TRGFLT_Msk                   /*!< Configurable digital filter for trigger */
#define LPTIM_CFGR_TRGFLT_0          (0x1UL << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x00000040 */
#define LPTIM_CFGR_TRGFLT_1          (0x2UL << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x00000080 */
#define LPTIM_CFGR_PRESC_Pos         (9U)
#define LPTIM_CFGR_PRESC_Msk         (0x7UL << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000E00 */
#define LPTIM_CFGR_PRESC             LPTIM_CFGR_PRESC_Msk                    /*!< Clock prescaler */
#define LPTIM_CFGR_PRESC_0           (0x1UL << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000200 */
#define LPTIM_CFGR_PRESC_1           (0x2UL << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000400 */
#define LPTIM_CFGR_PRESC_2           (0x4UL << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000800 */
#define LPTIM_CFGR_TRIGSEL_Pos       (13U)
#define LPTIM_CFGR_TRIGSEL_Msk       (0x7UL << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x0000E000 */
#define LPTIM_CFGR_TRIGSEL           LPTIM_CFGR_TRIGSEL_Msk                  /*!< Trigger selector */
#define LPTIM_CFGR_TRIGSEL_0         (0x1UL << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00002000 */
#define LPTIM_CFGR_TRIGSEL_1         (0x2UL << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00004000 */
#define LPTIM_CFGR_TRIGSEL_2         (0x4UL << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00008000 */
#define LPTIM_CFGR_TRIGEN_Pos        (17U)
#define LPTIM_CFGR_TRIGEN_Msk        (0x3UL << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00060000 */
#define LPTIM_CFGR_TRIGEN            LPTIM_CFGR_TRIGEN_Msk                   /*!< Trigger enable and polarity */
#define LPTIM_CFGR_TRIGEN_0          (0x1UL << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00020000 */
#define LPTIM_CFGR_TRIGEN_1        (  0x2UL << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00040000 */
#define LPTIM_CFGR_TIMOUT_Pos        (19U)
#define LPTIM_CFGR_TIMOUT_Msk        (0x1UL << LPTIM_CFGR_TIMOUT_Pos)         /*!< 0x00080000 */
#define LPTIM_CFGR_TIMOUT            LPTIM_CFGR_TIMOUT_Msk                   /*!< Timeout enable */
#define LPTIM_CFGR_WAVE_Pos          (20U)
#define LPTIM_CFGR_WAVE_Msk          (0x1UL << LPTIM_CFGR_WAVE_Pos)           /*!< 0x00100000 */
#define LPTIM_CFGR_WAVE              LPTIM_CFGR_WAVE_Msk                     /*!< Waveform shape */
#define LPTIM_CFGR_WAVPOL_Pos        (21U)
#define LPTIM_CFGR_WAVPOL_Msk        (0x1UL << LPTIM_CFGR_WAVPOL_Pos)         /*!< 0x00200000 */
#define LPTIM_CFGR_WAVPOL            LPTIM_CFGR_WAVPOL_Msk                   /*!< Waveform shape polarity */
#define LPTIM_CFGR_PRELOAD_Pos       (22U)
#define LPTIM_CFGR_PRELOAD_Msk       (0x1UL << LPTIM_CFGR_PRELOAD_Pos)        /*!< 0x00400000 */
#define LPTIM_CFGR_PRELOAD           LPTIM_CFGR_PRELOAD_Msk                  /*!< Registers update mode */
#define LPTIM_CFGR_COUNTMODE_Pos     (23U)
#define LPTIM_CFGR_COUNTMODE_Msk     (0x1UL << LPTIM_CFGR_COUNTMODE_Pos)      /*!< 0x00800000 */
#define LPTIM_CFGR_COUNTMODE         LPTIM_CFGR_COUNTMODE_Msk                /*!< counter mode enabled */
#define LPTIM_CFGR_ENC_Pos           (24U)
#define LPTIM_CFGR_ENC_Msk           (0x1UL << LPTIM_CFGR_ENC_Pos)            /*!< 0x01000000 */
#define LPTIM_CFGR_ENC               LPTIM_CFGR_ENC_Msk                      /*!< Encoder mode enable */

/*******************  Bit definition for LPTIM_CR register  *******************/
#define LPTIM_CR_ENABLE_Pos          (0U)
#define LPTIM_CR_ENABLE_Msk          (0x1UL << LPTIM_CR_ENABLE_Pos)           /*!< 0x00000001 */
#define LPTIM_CR_ENABLE              LPTIM_CR_ENABLE_Msk                     /*!< LPTIM enable */
#define LPTIM_CR_SNGSTRT_Pos         (1U)
#define LPTIM_CR_SNGSTRT_Msk         (0x1UL << LPTIM_CR_SNGSTRT_Pos)          /*!< 0x00000002 */
#define LPTIM_CR_SNGSTRT             LPTIM_CR_SNGSTRT_Msk                    /*!< LPTIM start in Single mode */
#define LPTIM_CR_CNTSTRT_Pos         (2U)
#define LPTIM_CR_CNTSTRT_Msk         (0x1UL << LPTIM_CR_CNTSTRT_Pos)          /*!< 0x00000004 */
#define LPTIM_CR_CNTSTRT             LPTIM_CR_CNTSTRT_Msk                    /*!< Timer start in Continuous mode */
#define LPTIM_CR_COUNTRST_Pos        (3U)
#define LPTIM_CR_COUNTRST_Msk        (0x1UL << LPTIM_CR_COUNTRST_Pos)         /*!< 0x00000008 */
#define LPTIM_CR_COUNTRST            LPTIM_CR_COUNTRST_Msk                   /*!< Counter reset */
#define LPTIM_CR_RSTARE_Pos          (4U)
#define LPTIM_CR_RSTARE_Msk          (0x1UL << LPTIM_CR_RSTARE_Pos)           /*!< 0x00000010 */
#define LPTIM_CR_RSTARE              LPTIM_CR_RSTARE_Msk                     /*!< Reset after read enable */

/******************  Bit definition for LPTIM_CCR1 register  ******************/
#define LPTIM_CCR1_CCR1_Pos          (0U)
#define LPTIM_CCR1_CCR1_Msk          (0xFFFFUL << LPTIM_CCR1_CCR1_Pos)        /*!< 0x0000FFFF */
#define LPTIM_CCR1_CCR1              LPTIM_CCR1_CCR1_Msk                     /*!< Capture/compare 1 value */

/******************  Bit definition for LPTIM_ARR register  *******************/
#define LPTIM_ARR_ARR_Pos            (0U)
#define LPTIM_ARR_ARR_Msk            (0xFFFFUL << LPTIM_ARR_ARR_Pos)          /*!< 0x0000FFFF */
#define LPTIM_ARR_ARR                LPTIM_ARR_ARR_Msk                       /*!< Auto reload value */

/******************  Bit definition for LPTIM_CNT register  *******************/
#define LPTIM_CNT_CNT_Pos            (0U)
#define LPTIM_CNT_CNT_Msk            (0xFFFFUL << LPTIM_CNT_CNT_Pos)          /*!< 0x0000FFFF */
#define LPTIM_CNT_CNT                LPTIM_CNT_CNT_Msk                       /*!< Counter value */

/******************  Bit definition for LPTIM1_OR register  *******************/
#define LPTIM1_OR_OR_0_Pos            (0U)
#define LPTIM1_OR_OR_0_Msk            (0x1UL << LPTIM1_OR_OR_0_Pos)           /*!< 0x00000001 */
#define LPTIM1_OR_OR_0                LPTIM1_OR_OR_0_Msk                     /*!< Option register bit 0 */

/*****************  Bit definition for LPTIM_CFGR2 register  ******************/
#define LPTIM_CFGR2_IN1SEL_Pos       (0U)
#define LPTIM_CFGR2_IN1SEL_Msk       (0x3UL << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000003 */
#define LPTIM_CFGR2_IN1SEL           LPTIM_CFGR2_IN1SEL_Msk                  /*!< LPTIM input 1 selection */
#define LPTIM_CFGR2_IN1SEL_0         (0x1UL << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000001 */
#define LPTIM_CFGR2_IN1SEL_1         (0x2UL << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000002 */
#define LPTIM_CFGR2_IN2SEL_Pos       (4U)
#define LPTIM_CFGR2_IN2SEL_Msk       (0x3UL << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000030 */
#define LPTIM_CFGR2_IN2SEL           LPTIM_CFGR2_IN2SEL_Msk                  /*!< LPTIM input 2 selection */
#define LPTIM_CFGR2_IN2SEL_0         (0x1UL << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000010 */
#define LPTIM_CFGR2_IN2SEL_1         (0x2UL << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000020 */
#define LPTIM_CFGR2_IC1SEL_Pos       (16U)
#define LPTIM_CFGR2_IC1SEL_Msk       (0x3UL << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00030000 */
#define LPTIM_CFGR2_IC1SEL           LPTIM_CFGR2_IC1SEL_Msk                  /*!< LPTIM input capture 1 selection */
#define LPTIM_CFGR2_IC1SEL_0         (0x1UL << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00010000 */
#define LPTIM_CFGR2_IC1SEL_1         (0x2UL << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00020000 */
#define LPTIM_CFGR2_IC2SEL_Pos       (20U)
#define LPTIM_CFGR2_IC2SEL_Msk       (0x3UL << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00300000 */
#define LPTIM_CFGR2_IC2SEL           LPTIM_CFGR2_IC2SEL_Msk                  /*!< LPTIM input capture 2 selection */
#define LPTIM_CFGR2_IC2SEL_0         (0x1UL << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00100000 */
#define LPTIM_CFGR2_IC2SEL_1         (0x2UL << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00200000 */

/******************  Bit definition for LPTIM_RCR register  *******************/
#define LPTIM_RCR_REP_Pos            (0U)
#define LPTIM_RCR_REP_Msk            (0xFFUL << LPTIM_RCR_REP_Pos)            /*!< 0x000000FF */
#define LPTIM_RCR_REP                LPTIM_RCR_REP_Msk                       /*!< Repetition register value */

/*****************  Bit definition for LPTIM_CCMR1 register  ******************/
#define LPTIM_CCMR1_CC1SEL_Pos       (0U)
#define LPTIM_CCMR1_CC1SEL_Msk       (0x1UL << LPTIM_CCMR1_CC1SEL_Pos)        /*!< 0x00000001 */
#define LPTIM_CCMR1_CC1SEL           LPTIM_CCMR1_CC1SEL_Msk                  /*!< Capture/compare 1 selection */
#define LPTIM_CCMR1_CC1E_Pos         (1U)
#define LPTIM_CCMR1_CC1E_Msk         (0x1UL << LPTIM_CCMR1_CC1E_Pos)          /*!< 0x00000002 */
#define LPTIM_CCMR1_CC1E             LPTIM_CCMR1_CC1E_Msk                    /*!< Capture/compare 1 output enable */
#define LPTIM_CCMR1_CC1P_Pos         (2U)
#define LPTIM_CCMR1_CC1P_Msk         (0x3UL << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x0000000C */
#define LPTIM_CCMR1_CC1P             LPTIM_CCMR1_CC1P_Msk                    /*!< Capture/compare 1 output polarity */
#define LPTIM_CCMR1_CC1P_0           (0x1UL << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x00000004 */
#define LPTIM_CCMR1_CC1P_1           (0x2UL << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x00000008 */
#define LPTIM_CCMR1_IC1PSC_Pos       (8U)
#define LPTIM_CCMR1_IC1PSC_Msk       (0x3UL << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000300 */
#define LPTIM_CCMR1_IC1PSC           LPTIM_CCMR1_IC1PSC_Msk                  /*!< Input capture 1 prescaler */
#define LPTIM_CCMR1_IC1PSC_0         (0x1UL << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000100 */
#define LPTIM_CCMR1_IC1PSC_1         (0x2UL << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000200 */
#define LPTIM_CCMR1_IC1F_Pos         (12U)
#define LPTIM_CCMR1_IC1F_Msk         (0x3UL << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00003000 */
#define LPTIM_CCMR1_IC1F             LPTIM_CCMR1_IC1F_Msk                    /*!< Input capture 1 filter */
#define LPTIM_CCMR1_IC1F_0           (0x1UL << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00001000 */
#define LPTIM_CCMR1_IC1F_1           (0x2UL << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00002000 */
#define LPTIM_CCMR1_CC2SEL_Pos       (16U)
#define LPTIM_CCMR1_CC2SEL_Msk       (0x1UL << LPTIM_CCMR1_CC2SEL_Pos)        /*!< 0x00010000 */
#define LPTIM_CCMR1_CC2SEL           LPTIM_CCMR1_CC2SEL_Msk                  /*!< Capture/compare 2 selection */
#define LPTIM_CCMR1_CC2E_Pos         (17U)
#define LPTIM_CCMR1_CC2E_Msk         (0x1UL << LPTIM_CCMR1_CC2E_Pos)          /*!< 0x00020000 */
#define LPTIM_CCMR1_CC2E             LPTIM_CCMR1_CC2E_Msk                    /*!< Capture/compare 2 output enable */
#define LPTIM_CCMR1_CC2P_Pos         (18U)
#define LPTIM_CCMR1_CC2P_Msk         (0x3UL << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x000C0000 */
#define LPTIM_CCMR1_CC2P             LPTIM_CCMR1_CC2P_Msk                    /*!< Capture/compare 2 output polarity */
#define LPTIM_CCMR1_CC2P_0           (0x1UL << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x00040000 */
#define LPTIM_CCMR1_CC2P_1           (0x2UL << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x00080000 */
#define LPTIM_CCMR1_IC2PSC_Pos       (24U)
#define LPTIM_CCMR1_IC2PSC_Msk       (0x3UL << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x03000000 */
#define LPTIM_CCMR1_IC2PSC           LPTIM_CCMR1_IC2PSC_Msk                  /*!< Input capture 2 prescaler */
#define LPTIM_CCMR1_IC2PSC_0         (0x1UL << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x01000000 */
#define LPTIM_CCMR1_IC2PSC_1         (0x2UL << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x02000000 */
#define LPTIM_CCMR1_IC2F_Pos         (28U)
#define LPTIM_CCMR1_IC2F_Msk         (0x3UL << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x30000000 */
#define LPTIM_CCMR1_IC2F             LPTIM_CCMR1_IC2F_Msk                    /*!< Input capture 2 filter */
#define LPTIM_CCMR1_IC2F_0           (0x1UL << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x10000000 */
#define LPTIM_CCMR1_IC2F_1           (0x2UL << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x20000000 */

/******************  Bit definition for LPTIM_CCR2 register  ******************/
#define LPTIM_CCR2_CCR2_Pos          (0U)
#define LPTIM_CCR2_CCR2_Msk          (0xFFFFUL << LPTIM_CCR2_CCR2_Pos)        /*!< 0x0000FFFF */
#define LPTIM_CCR2_CCR2              LPTIM_CCR2_CCR2_Msk                     /*!< Capture/compare 2 value */

/****************  Bit definition for LPTIM_HWCFGR2 register  *****************/
#define LPTIM_HWCFGR2_CFG1_Pos       (0U)
#define LPTIM_HWCFGR2_CFG1_Msk       (0xFUL << LPTIM_HWCFGR2_CFG1_Pos)        /*!< 0x0000000F */
#define LPTIM_HWCFGR2_CFG1           LPTIM_HWCFGR2_CFG1_Msk                  /*!< peripheral hardware configuration 1 */
#define LPTIM_HWCFGR2_CFG2_Pos       (8U)
#define LPTIM_HWCFGR2_CFG2_Msk       (0xFFUL << LPTIM_HWCFGR2_CFG2_Pos)       /*!< 0x0000FF00 */
#define LPTIM_HWCFGR2_CFG2           LPTIM_HWCFGR2_CFG2_Msk                  /*!< peripheral hardware configuration 2 */
#define LPTIM_HWCFGR2_CFG3_Pos       (16U)
#define LPTIM_HWCFGR2_CFG3_Msk       (0x1UL << LPTIM_HWCFGR2_CFG3_Pos)        /*!< 0x00010000 */
#define LPTIM_HWCFGR2_CFG3           LPTIM_HWCFGR2_CFG3_Msk                  /*!< peripheral hardware configuration 3 */

/****************  Bit definition for LPTIM_HWCFGR1 register  *****************/
#define LPTIM_HWCFGR1_CFG1_Pos       (0U)
#define LPTIM_HWCFGR1_CFG1_Msk       (0xFFUL << LPTIM_HWCFGR1_CFG1_Pos)       /*!< 0x000000FF */
#define LPTIM_HWCFGR1_CFG1           LPTIM_HWCFGR1_CFG1_Msk                  /*!< peripheral hardware configuration 1 */
#define LPTIM_HWCFGR1_CFG2_Pos       (8U)
#define LPTIM_HWCFGR1_CFG2_Msk       (0xFFUL << LPTIM_HWCFGR1_CFG2_Pos)       /*!< 0x0000FF00 */
#define LPTIM_HWCFGR1_CFG2           LPTIM_HWCFGR1_CFG2_Msk                  /*!< peripheral hardware configuration 2 */
#define LPTIM_HWCFGR1_CFG3_Pos       (16U)
#define LPTIM_HWCFGR1_CFG3_Msk       (0xFUL << LPTIM_HWCFGR1_CFG3_Pos)        /*!< 0x000F0000 */
#define LPTIM_HWCFGR1_CFG3           LPTIM_HWCFGR1_CFG3_Msk                  /*!< peripheral hardware configuration 3 */
#define LPTIM_HWCFGR1_CFG4_Pos       (24U)
#define LPTIM_HWCFGR1_CFG4_Msk       (0xFFUL << LPTIM_HWCFGR1_CFG4_Pos)       /*!< 0xFF000000 */
#define LPTIM_HWCFGR1_CFG4           LPTIM_HWCFGR1_CFG4_Msk                  /*!< peripheral hardware configuration 4 */

/******************  Bit definition for LPTIM_VERR register  ******************/
#define LPTIM_VERR_MINREV_Pos        (0U)
#define LPTIM_VERR_MINREV_Msk        (0xFUL << LPTIM_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define LPTIM_VERR_MINREV            LPTIM_VERR_MINREV_Msk                   /*!< Minor revision */
#define LPTIM_VERR_MAJREV_Pos        (4U)
#define LPTIM_VERR_MAJREV_Msk        (0xFUL << LPTIM_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define LPTIM_VERR_MAJREV            LPTIM_VERR_MAJREV_Msk                   /*!< Major revision */

/******************  Bit definition for LPTIM_PIDR register  ******************/
#define LPTIM_PIDR_P_ID_Pos          (0U)
#define LPTIM_PIDR_P_ID_Msk          (0xFFFFFFFFUL << LPTIM_PIDR_P_ID_Pos)    /*!< 0xFFFFFFFF */
#define LPTIM_PIDR_P_ID              LPTIM_PIDR_P_ID_Msk                     /*!< Peripheral type identifier */

/******************  Bit definition for LPTIM_SIDR register  ******************/
#define LPTIM_SIDR_S_ID_Pos          (0U)
#define LPTIM_SIDR_S_ID_Msk          (0xFFFFFFFFUL << LPTIM_SIDR_S_ID_Pos)    /*!< 0xFFFFFFFF */
#define LPTIM_SIDR_S_ID              LPTIM_SIDR_S_ID_Msk                     /*!< Registers map size identifier */

/******************************************************************************/
/*                                                                            */
/*                      LCD-TFT Display Controller (LTDC)                     */
/*                                                                            */
/******************************************************************************/

/*******************  Bit definition for LTDC_IDR register  *******************/
#define LTDC_IDR_REV_Pos              (0U)
#define LTDC_IDR_REV_Msk              (0xFFUL << LTDC_IDR_REV_Pos)/*!< 0x000000FF */
#define LTDC_IDR_REV                  LTDC_IDR_REV_Msk           /*!< revision */
#define LTDC_IDR_MINVER_Pos           (8U)
#define LTDC_IDR_MINVER_Msk           (0xFFUL << LTDC_IDR_MINVER_Pos)   /*!< 0x0000FF00 */
#define LTDC_IDR_MINVER               LTDC_IDR_MINVER_Msk        /*!< minor version */
#define LTDC_IDR_MAJVER_Pos           (16U)
#define LTDC_IDR_MAJVER_Msk           (0xFFUL << LTDC_IDR_MAJVER_Pos)   /*!< 0x00FF0000 */
#define LTDC_IDR_MAJVER               LTDC_IDR_MAJVER_Msk        /*!< major version */

/*******************  Bit definition for LTDC_LCR register  *******************/
#define LTDC_LCR_LNBR_Pos             (0U)
#define LTDC_LCR_LNBR_Msk             (0xFFUL << LTDC_LCR_LNBR_Pos) /*!< 0x000000FF */
#define LTDC_LCR_LNBR                 LTDC_LCR_LNBR_Msk          /*!< number of layers */

/******************  Bit definition for LTDC_SSCR register  *******************/
#define LTDC_SSCR_VSH_Pos             (0U)
#define LTDC_SSCR_VSH_Msk             (0xFFFFUL << LTDC_SSCR_VSH_Pos)   /*!< 0x0000FFFF */
#define LTDC_SSCR_VSH                 LTDC_SSCR_VSH_Msk          /*!< vertical synchronization height (in units of horizontal scan line) */
#define LTDC_SSCR_HSW_Pos             (16U)
#define LTDC_SSCR_HSW_Msk             (0xFFFFUL << LTDC_SSCR_HSW_Pos)   /*!< 0xFFFF0000 */
#define LTDC_SSCR_HSW                 LTDC_SSCR_HSW_Msk          /*!< horizontal synchronization width (in units of pixel clock period) */

/******************  Bit definition for LTDC_BPCR register  *******************/
#define LTDC_BPCR_AVBP_Pos            (0U)
#define LTDC_BPCR_AVBP_Msk            (0xFFFFUL << LTDC_BPCR_AVBP_Pos)    /*!< 0x0000FFFF */
#define LTDC_BPCR_AVBP                LTDC_BPCR_AVBP_Msk         /*!< accumulated Vertical back porch (in units of horizontal scan line) */
#define LTDC_BPCR_AHBP_Pos            (16U)
#define LTDC_BPCR_AHBP_Msk            (0xFFFFUL << LTDC_BPCR_AHBP_Pos)    /*!< 0xFFFF0000 */
#define LTDC_BPCR_AHBP                LTDC_BPCR_AHBP_Msk         /*!< accumulated horizontal back porch (in units of pixel clock period) */

/******************  Bit definition for LTDC_AWCR register  *******************/
#define LTDC_AWCR_AAH_Pos             (0U)
#define LTDC_AWCR_AAH_Msk             (0xFFFFUL << LTDC_AWCR_AAH_Pos)   /*!< 0x0000FFFF */
#define LTDC_AWCR_AAH                 LTDC_AWCR_AAH_Msk          /*!< accumulated active height (in units of horizontal scan line) */
#define LTDC_AWCR_AAW_Pos             (16U)
#define LTDC_AWCR_AAW_Msk             (0xFFFFUL << LTDC_AWCR_AAW_Pos)   /*!< 0xFFFF0000 */
#define LTDC_AWCR_AAW                 LTDC_AWCR_AAW_Msk          /*!< accumulated active width (in units of pixel clock period) */

/******************  Bit definition for LTDC_TWCR register  *******************/
#define LTDC_TWCR_TOTALH_Pos          (0U)
#define LTDC_TWCR_TOTALH_Msk          (0xFFFFUL << LTDC_TWCR_TOTALH_Pos)      /*!< 0x0000FFFF */
#define LTDC_TWCR_TOTALH              LTDC_TWCR_TOTALH_Msk       /*!< total height (in units of horizontal scan line) */
#define LTDC_TWCR_TOTALW_Pos          (16U)
#define LTDC_TWCR_TOTALW_Msk          (0xFFFFUL << LTDC_TWCR_TOTALW_Pos)      /*!< 0xFFFF0000 */
#define LTDC_TWCR_TOTALW              LTDC_TWCR_TOTALW_Msk       /*!< total width (in units of pixel clock period) */

/*******************  Bit definition for LTDC_GCR register  *******************/
#define LTDC_GCR_LTDCEN_Pos           (0U)
#define LTDC_GCR_LTDCEN_Msk           (0x1UL << LTDC_GCR_LTDCEN_Pos)  /*!< 0x00000001 */
#define LTDC_GCR_LTDCEN               LTDC_GCR_LTDCEN_Msk        /*!< LTDC global enable */
#define LTDC_GCR_GAMEN_Pos            (1U)
#define LTDC_GCR_GAMEN_Msk            (0x1UL << LTDC_GCR_GAMEN_Pos) /*!< 0x00000002 */
#define LTDC_GCR_GAMEN                LTDC_GCR_GAMEN_Msk         /*!< Gamma correction enable */
#define LTDC_GCR_ROTEN_Pos            (2U)
#define LTDC_GCR_ROTEN_Msk            (0x1UL << LTDC_GCR_ROTEN_Pos) /*!< 0x00000004 */
#define LTDC_GCR_ROTEN                LTDC_GCR_ROTEN_Msk         /*!< Rotation enable */
#define LTDC_GCR_DBW_Pos              (4U)
#define LTDC_GCR_DBW_Msk              (0x7UL << LTDC_GCR_DBW_Pos) /*!< 0x00000070 */
#define LTDC_GCR_DBW                  LTDC_GCR_DBW_Msk           /*!< dither blue width */
#define LTDC_GCR_DGW_Pos              (8U)
#define LTDC_GCR_DGW_Msk              (0x7UL << LTDC_GCR_DGW_Pos) /*!< 0x00000700 */
#define LTDC_GCR_DGW                  LTDC_GCR_DGW_Msk           /*!< dither green width */
#define LTDC_GCR_DRW_Pos              (12U)
#define LTDC_GCR_DRW_Msk              (0x7UL << LTDC_GCR_DRW_Pos) /*!< 0x00007000 */
#define LTDC_GCR_DRW                  LTDC_GCR_DRW_Msk           /*!< dither red width */
#define LTDC_GCR_DEN_Pos              (16U)
#define LTDC_GCR_DEN_Msk              (0x1UL << LTDC_GCR_DEN_Pos) /*!< 0x00010000 */
#define LTDC_GCR_DEN                  LTDC_GCR_DEN_Msk           /*!< dither enable */
#define LTDC_GCR_BCKEN_Pos            (17U)
#define LTDC_GCR_BCKEN_Msk            (0x1UL << LTDC_GCR_BCKEN_Pos) /*!< 0x00020000 */
#define LTDC_GCR_BCKEN                LTDC_GCR_BCKEN_Msk         /*!< background layer enable*/
#define LTDC_GCR_CRCEN_Pos            (19U)
#define LTDC_GCR_CRCEN_Msk            (0x1UL << LTDC_GCR_CRCEN_Pos) /*!< 0x00080000 */
#define LTDC_GCR_CRCEN                LTDC_GCR_CRCEN_Msk         /*!< CRC enable */
#define LTDC_GCR_SFEN_Pos             (24U)
#define LTDC_GCR_SFEN_Msk             (0x1UL << LTDC_GCR_SFEN_Pos)/*!< 0x01000000 */
#define LTDC_GCR_SFEN                 LTDC_GCR_SFEN_Msk          /*!< single-frame mode: mode enable */
#define LTDC_GCR_SFSWTR_Pos           (25U)
#define LTDC_GCR_SFSWTR_Msk           (0x1UL << LTDC_GCR_SFSWTR_Pos)  /*!< 0x02000000 */
#define LTDC_GCR_SFSWTR               LTDC_GCR_SFSWTR_Msk        /*!< single-frame mode: software trigger */
#define LTDC_GCR_SFEXEN_Pos           (26U)
#define LTDC_GCR_SFEXEN_Msk           (0x1UL << LTDC_GCR_SFEXEN_Pos)  /*!< 0x04000000 */
#define LTDC_GCR_SFEXEN               LTDC_GCR_SFEXEN_Msk        /*!< single-frame mode: external trigger enable */
#define LTDC_GCR_PCPOL_Pos            (28U)
#define LTDC_GCR_PCPOL_Msk            (0x1UL << LTDC_GCR_PCPOL_Pos) /*!< 0x10000000 */
#define LTDC_GCR_PCPOL                LTDC_GCR_PCPOL_Msk         /*!< pixel clock polarity */
#define LTDC_GCR_DEPOL_Pos            (29U)
#define LTDC_GCR_DEPOL_Msk            (0x1UL << LTDC_GCR_DEPOL_Pos) /*!< 0x20000000 */
#define LTDC_GCR_DEPOL                LTDC_GCR_DEPOL_Msk         /*!< blanking (no data/pixel) polarity */
#define LTDC_GCR_VSPOL_Pos            (30U)
#define LTDC_GCR_VSPOL_Msk            (0x1UL << LTDC_GCR_VSPOL_Pos) /*!< 0x40000000 */
#define LTDC_GCR_VSPOL                LTDC_GCR_VSPOL_Msk         /*!< vertical synchronization polarity */
#define LTDC_GCR_HSPOL_Pos            (31U)
#define LTDC_GCR_HSPOL_Msk            (0x1UL << LTDC_GCR_HSPOL_Pos) /*!< 0x80000000 */
#define LTDC_GCR_HSPOL                LTDC_GCR_HSPOL_Msk         /*!< horizontal synchronization polarity */

/******************  Bit definition for LTDC_GC1R register  *******************/
#define LTDC_GC1R_WBCH_Pos            (0U)
#define LTDC_GC1R_WBCH_Msk            (0xFUL << LTDC_GC1R_WBCH_Pos) /*!< 0x0000000F */
#define LTDC_GC1R_WBCH                LTDC_GC1R_WBCH_Msk         /*!< width of blue channel output */
#define LTDC_GC1R_WGCH_Pos            (4U)
#define LTDC_GC1R_WGCH_Msk            (0xFUL << LTDC_GC1R_WGCH_Pos) /*!< 0x000000F0 */
#define LTDC_GC1R_WGCH                LTDC_GC1R_WGCH_Msk         /*!< width of green channel output */
#define LTDC_GC1R_WRCH_Pos            (8U)
#define LTDC_GC1R_WRCH_Msk            (0xFUL << LTDC_GC1R_WRCH_Pos) /*!< 0x00000F00 */
#define LTDC_GC1R_WRCH                LTDC_GC1R_WRCH_Msk         /*!< width of red channel output */
#define LTDC_GC1R_PRBA_Pos            (12U)
#define LTDC_GC1R_PRBA_Msk            (0x1UL << LTDC_GC1R_PRBA_Pos) /*!< 0x00001000 */
#define LTDC_GC1R_PRBA                LTDC_GC1R_PRBA_Msk         /*!< precise blending ability */
#define LTDC_GC1R_DT_Pos              (14U)
#define LTDC_GC1R_DT_Msk              (0x3UL << LTDC_GC1R_DT_Pos) /*!< 0x0000C000 */
#define LTDC_GC1R_DT                  LTDC_GC1R_DT_Msk           /*!< dithering technique implemented */
#define LTDC_GC1R_GCT_Pos             (17U)
#define LTDC_GC1R_GCT_Msk             (0x7UL << LTDC_GC1R_GCT_Pos)/*!< 0x000E0000 */
#define LTDC_GC1R_GCT                 LTDC_GC1R_GCT_Msk          /*!< gamma correction technique implemented */
#define LTDC_GC1R_SHRA_Pos            (21U)
#define LTDC_GC1R_SHRA_Msk            (0x1UL << LTDC_GC1R_SHRA_Pos) /*!< 0x00200000 */
#define LTDC_GC1R_SHRA                LTDC_GC1R_SHRA_Msk         /*!< shadow registers ability */
#define LTDC_GC1R_BCP_Pos             (22U)
#define LTDC_GC1R_BCP_Msk             (0x1UL << LTDC_GC1R_BCP_Pos)/*!< 0x00400000 */
#define LTDC_GC1R_BCP                 LTDC_GC1R_BCP_Msk          /*!< background color programmability (unique color blended as background) */
#define LTDC_GC1R_BBA_Pos             (23U)
#define LTDC_GC1R_BBA_Msk             (0x1UL << LTDC_GC1R_BBA_Pos)/*!< 0x00800000 */
#define LTDC_GC1R_BBA                 LTDC_GC1R_BBA_Msk          /*!< background blending ability */
#define LTDC_GC1R_LNIP_Pos            (24U)
#define LTDC_GC1R_LNIP_Msk            (0x1UL << LTDC_GC1R_LNIP_Pos) /*!< 0x01000000 */
#define LTDC_GC1R_LNIP                LTDC_GC1R_LNIP_Msk         /*!< line-IRQ: line position programmability */
#define LTDC_GC1R_TP_Pos              (25U)
#define LTDC_GC1R_TP_Msk              (0x1UL << LTDC_GC1R_TP_Pos) /*!< 0x02000000 */
#define LTDC_GC1R_TP                  LTDC_GC1R_TP_Msk           /*!< timing programmability */
#define LTDC_GC1R_SPP_Pos             (27U)
#define LTDC_GC1R_SPP_Msk             (0x1UL << LTDC_GC1R_SPP_Pos)/*!< 0x08000000 */
#define LTDC_GC1R_SPP                 LTDC_GC1R_SPP_Msk          /*!< sync polarity programmability */
#define LTDC_GC1R_DWP_Pos             (28U)
#define LTDC_GC1R_DWP_Msk             (0x1UL << LTDC_GC1R_DWP_Pos)/*!< 0x10000000 */
#define LTDC_GC1R_DWP                 LTDC_GC1R_DWP_Msk          /*!< dither width programmability */
#define LTDC_GC1R_STRA_Pos            (29U)
#define LTDC_GC1R_STRA_Msk            (0x1UL << LTDC_GC1R_STRA_Pos) /*!< 0x20000000 */
#define LTDC_GC1R_STRA                LTDC_GC1R_STRA_Msk         /*!< status register ability */
#define LTDC_GC1R_CRMA_Pos            (30U)
#define LTDC_GC1R_CRMA_Msk            (0x1UL << LTDC_GC1R_CRMA_Pos) /*!< 0x40000000 */
#define LTDC_GC1R_CRMA                LTDC_GC1R_CRMA_Msk         /*!< configuration reading mode ability */
#define LTDC_GC1R_BMA_Pos             (31U)
#define LTDC_GC1R_BMA_Msk             (0x1UL << LTDC_GC1R_BMA_Pos)/*!< 0x80000000 */
#define LTDC_GC1R_BMA                 LTDC_GC1R_BMA_Msk          /*!< blind mode ability */

/******************  Bit definition for LTDC_GC2R register  *******************/
#define LTDC_GC2R_BLA_Pos             (0U)
#define LTDC_GC2R_BLA_Msk             (0x1UL << LTDC_GC2R_BLA_Pos)/*!< 0x00000001 */
#define LTDC_GC2R_BLA                 LTDC_GC2R_BLA_Msk          /*!< background layer ability (pixels of background layer are read from memory) */
#define LTDC_GC2R_STSA_Pos            (1U)
#define LTDC_GC2R_STSA_Msk            (0x1UL << LTDC_GC2R_STSA_Pos) /*!< 0x00000002 */
#define LTDC_GC2R_STSA                LTDC_GC2R_STSA_Msk         /*!< slave timings synchronization ability */
#define LTDC_GC2R_DVA_Pos             (2U)
#define LTDC_GC2R_DVA_Msk             (0x1UL << LTDC_GC2R_DVA_Pos)/*!< 0x00000004 */
#define LTDC_GC2R_DVA                 LTDC_GC2R_DVA_Msk          /*!< dual-view ability */
#define LTDC_GC2R_DPA_Pos             (3U)
#define LTDC_GC2R_DPA_Msk             (0x1UL << LTDC_GC2R_DPA_Pos)/*!< 0x00000008 */
#define LTDC_GC2R_DPA                 LTDC_GC2R_DPA_Msk          /*!< secondary RGB output port ability */
#define LTDC_GC2R_BW_Pos              (4U)
#define LTDC_GC2R_BW_Msk              (0x7UL << LTDC_GC2R_BW_Pos) /*!< 0x00000070 */
#define LTDC_GC2R_BW                  LTDC_GC2R_BW_Msk           /*!< bus width (log2 of number of bytes) */
#define LTDC_GC2R_EDCA_Pos            (7U)
#define LTDC_GC2R_EDCA_Msk            (0x1UL << LTDC_GC2R_EDCA_Pos) /*!< 0x00000080 */
#define LTDC_GC2R_EDCA                LTDC_GC2R_EDCA_Msk         /*!< external display control ability */
#define LTDC_GC2R_OCA_Pos             (8U)
#define LTDC_GC2R_OCA_Msk             (0x1UL << LTDC_GC2R_OCA_Pos)/*!< 0x00000100 */
#define LTDC_GC2R_OCA                 LTDC_GC2R_OCA_Msk          /*!< output conversion ability (RGB to YCbCr) */
#define LTDC_GC2R_AXIIDA_Pos          (9U)
#define LTDC_GC2R_AXIIDA_Msk          (0x1UL << LTDC_GC2R_AXIIDA_Pos)   /*!< 0x00000200 */
#define LTDC_GC2R_AXIIDA              LTDC_GC2R_AXIIDA_Msk       /*!< AXIID ability */
#define LTDC_GC2R_ROTA_Pos            (10U)
#define LTDC_GC2R_ROTA_Msk            (0x1UL << LTDC_GC2R_ROTA_Pos) /*!< 0x00000400 */
#define LTDC_GC2R_ROTA                LTDC_GC2R_ROTA_Msk         /*!< rotation support ability */
#define LTDC_GC2R_SISA_Pos            (11U)
#define LTDC_GC2R_SISA_Msk            (0x1UL << LTDC_GC2R_SISA_Pos) /*!< 0x00000800 */
#define LTDC_GC2R_SISA                LTDC_GC2R_SISA_Msk         /*!< second interrupt set ability */
#define LTDC_GC2R_SFA_Pos             (12U)
#define LTDC_GC2R_SFA_Msk             (0x1UL << LTDC_GC2R_SFA_Pos)/*!< 0x00001000 */
#define LTDC_GC2R_SFA                 LTDC_GC2R_SFA_Msk          /*!< single frame mode ability */
#define LTDC_GC2R_CRCA_Pos            (13U)
#define LTDC_GC2R_CRCA_Msk            (0x1UL << LTDC_GC2R_CRCA_Pos) /*!< 0x00002000 */
#define LTDC_GC2R_CRCA                LTDC_GC2R_CRCA_Msk         /*!< CRC ability */
#define LTDC_GC2R_BOA_Pos             (15U)
#define LTDC_GC2R_BOA_Msk             (0x1UL << LTDC_GC2R_BOA_Pos)/*!< 0x00008000 */
#define LTDC_GC2R_BOA                 LTDC_GC2R_BOA_Msk          /*!< blending order ability */

/******************  Bit definition for LTDC_SRCR register  *******************/
#define LTDC_SRCR_IMR_Pos             (0U)
#define LTDC_SRCR_IMR_Msk             (0x1UL << LTDC_SRCR_IMR_Pos)/*!< 0x00000001 */
#define LTDC_SRCR_IMR                 LTDC_SRCR_IMR_Msk          /*!< immediate reload trigger */
#define LTDC_SRCR_VBR_Pos             (1U)
#define LTDC_SRCR_VBR_Msk             (0x1UL << LTDC_SRCR_VBR_Pos)/*!< 0x00000002 */
#define LTDC_SRCR_VBR                 LTDC_SRCR_VBR_Msk          /*!< vertical blanking reload request */

/******************  Bit definition for LTDC_GCCR register  *******************/
#define LTDC_GCCR_ADDR_Pos            (0U)
#define LTDC_GCCR_ADDR_Msk            (0xFFUL << LTDC_GCCR_ADDR_Pos)  /*!< 0x000000FF */
#define LTDC_GCCR_ADDR                LTDC_GCCR_ADDR_Msk         /*!< address of the R,G,B table where the COMP component is written */
#define LTDC_GCCR_COMP_Pos            (8U)
#define LTDC_GCCR_COMP_Msk            (0xFFUL << LTDC_GCCR_COMP_Pos)  /*!< 0x0000FF00 */
#define LTDC_GCCR_COMP                LTDC_GCCR_COMP_Msk         /*!< color component to be written, in either (or all) the R,G,B tables */
#define LTDC_GCCR_BEN_Pos             (16U)
#define LTDC_GCCR_BEN_Msk             (0x1UL << LTDC_GCCR_BEN_Pos)/*!< 0x00010000 */
#define LTDC_GCCR_BEN                 LTDC_GCCR_BEN_Msk          /*!< write trigger to the blue table */
#define LTDC_GCCR_GEN_Pos             (17U)
#define LTDC_GCCR_GEN_Msk             (0x1UL << LTDC_GCCR_GEN_Pos)/*!< 0x00020000 */
#define LTDC_GCCR_GEN                 LTDC_GCCR_GEN_Msk          /*!< write trigger to the green table */
#define LTDC_GCCR_REN_Pos             (18U)
#define LTDC_GCCR_REN_Msk             (0x1UL << LTDC_GCCR_REN_Pos)/*!< 0x00040000 */
#define LTDC_GCCR_REN                 LTDC_GCCR_REN_Msk          /*!< write trigger to the red table */

/******************  Bit definition for LTDC_BCCR register  *******************/
#define LTDC_BCCR_BCBLUE_Pos          (0U)
#define LTDC_BCCR_BCBLUE_Msk          (0xFFUL << LTDC_BCCR_BCBLUE_Pos)    /*!< 0x000000FF */
#define LTDC_BCCR_BCBLUE              LTDC_BCCR_BCBLUE_Msk       /*!< background color blue value */
#define LTDC_BCCR_BCGREEN_Pos         (8U)
#define LTDC_BCCR_BCGREEN_Msk         (0xFFUL << LTDC_BCCR_BCGREEN_Pos)     /*!< 0x0000FF00 */
#define LTDC_BCCR_BCGREEN             LTDC_BCCR_BCGREEN_Msk      /*!< background color green value */
#define LTDC_BCCR_BCRED_Pos           (16U)
#define LTDC_BCCR_BCRED_Msk           (0xFFUL << LTDC_BCCR_BCRED_Pos)   /*!< 0x00FF0000 */
#define LTDC_BCCR_BCRED               LTDC_BCCR_BCRED_Msk        /*!< background color red value */

/*******************  Bit definition for LTDC_IER register  *******************/
#define LTDC_IER_LIE_Pos              (0U)
#define LTDC_IER_LIE_Msk              (0x1UL << LTDC_IER_LIE_Pos) /*!< 0x00000001 */
#define LTDC_IER_LIE                  LTDC_IER_LIE_Msk           /*!< Line interrupt enable */
#define LTDC_IER_FUWIE_Pos            (1U)
#define LTDC_IER_FUWIE_Msk            (0x1UL << LTDC_IER_FUWIE_Pos) /*!< 0x00000002 */
#define LTDC_IER_FUWIE                LTDC_IER_FUWIE_Msk         /*!< FIFO underrun warning interrupt enable  */
#define LTDC_IER_TERRIE_Pos           (2U)
#define LTDC_IER_TERRIE_Msk           (0x1UL << LTDC_IER_TERRIE_Pos)  /*!< 0x00000004 */
#define LTDC_IER_TERRIE               LTDC_IER_TERRIE_Msk        /*!< Transfer Error interrupt enable */
#define LTDC_IER_RRIE_Pos             (3U)
#define LTDC_IER_RRIE_Msk             (0x1UL << LTDC_IER_RRIE_Pos)/*!< 0x00000008 */
#define LTDC_IER_RRIE                 LTDC_IER_RRIE_Msk          /*!< Register reload interrupt enable */
#define LTDC_IER_FUKIE_Pos            (6U)
#define LTDC_IER_FUKIE_Msk            (0x1UL << LTDC_IER_FUKIE_Pos)/*!< 0x00000040 */
#define LTDC_IER_FUKIE                LTDC_IER_FUKIE_Msk         /*!< FIFO underrun killing interrupt enable  */
#define LTDC_IER_CRCIE_Pos            (7U)
#define LTDC_IER_CRCIE_Msk            (0x1UL << LTDC_IER_CRCIE_Pos) /*!< 0x00000080 */
#define LTDC_IER_CRCIE                LTDC_IER_CRCIE_Msk         /*!< CRC error interrupt enable */
#define LTDC_IER_FURIE_Pos            (8U)
#define LTDC_IER_FURIE_Msk            (0x1UL << LTDC_IER_FURIE_Pos) /*!< 0x00000100 */
#define LTDC_IER_FURIE                LTDC_IER_FURIE_Msk         /*!< FIFO underrun error at rotation interrupt enable */

/*******************  Bit definition for LTDC_ISR register  *******************/
#define LTDC_ISR_LIF_Pos              (0U)
#define LTDC_ISR_LIF_Msk              (0x1UL << LTDC_ISR_LIF_Pos) /*!< 0x00000001 */
#define LTDC_ISR_LIF                  LTDC_ISR_LIF_Msk           /*!< Line interrupt flag */
#define LTDC_ISR_FUWIF_Pos            (1U)
#define LTDC_ISR_FUWIF_Msk            (0x1UL << LTDC_ISR_FUWIF_Pos) /*!< 0x00000002 */
#define LTDC_ISR_FUWIF                LTDC_ISR_FUWIF_Msk         /*!< FIFO underrun warning interrupt flag */
#define LTDC_ISR_TERRIF_Pos           (2U)
#define LTDC_ISR_TERRIF_Msk           (0x1UL << LTDC_ISR_TERRIF_Pos)  /*!< 0x00000004 */
#define LTDC_ISR_TERRIF               LTDC_ISR_TERRIF_Msk        /*!< Transfer error interrupt flag */
#define LTDC_ISR_RRIF_Pos             (3U)
#define LTDC_ISR_RRIF_Msk             (0x1UL << LTDC_ISR_RRIF_Pos)/*!< 0x00000008 */
#define LTDC_ISR_RRIF                 LTDC_ISR_RRIF_Msk          /*!< Register reload interrupt flag */
#define LTDC_ISR_FUKIF_Pos            (6U)
#define LTDC_ISR_FUKIF_Msk            (0x1UL << LTDC_ISR_FUKIF_Pos)/*!< 0x00000040 */
#define LTDC_ISR_FUKIF                LTDC_ISR_FUKIF_Msk         /*!< FIFO underrun killing interrupt flag */
#define LTDC_ISR_CRCIF_Pos            (7U)
#define LTDC_ISR_CRCIF_Msk            (0x1UL << LTDC_ISR_CRCIF_Pos) /*!< 0x00000080 */
#define LTDC_ISR_CRCIF                LTDC_ISR_CRCIF_Msk         /*!< CRC error interrupt flag */
#define LTDC_ISR_FURIF_Pos            (8U)
#define LTDC_ISR_FURIF_Msk            (0x1UL << LTDC_ISR_FURIF_Pos) /*!< 0x00000100 */
#define LTDC_ISR_FURIF                LTDC_ISR_FURIF_Msk         /*!< FIFO underrun error at rotation interrupt flag */

/*******************  Bit definition for LTDC_ICR register  *******************/
#define LTDC_ICR_CLIF_Pos             (0U)
#define LTDC_ICR_CLIF_Msk             (0x1UL << LTDC_ICR_CLIF_Pos)/*!< 0x00000001 */
#define LTDC_ICR_CLIF                 LTDC_ICR_CLIF_Msk          /*!< clears the line interrupt flag */
#define LTDC_ICR_CFUWIF_Pos           (1U)
#define LTDC_ICR_CFUWIF_Msk           (0x1UL << LTDC_ICR_CFUWIF_Pos)  /*!< 0x00000002 */
#define LTDC_ICR_CFUWIF               LTDC_ICR_CFUWIF_Msk        /*!< clears the FIFO underrun warning interrupt flag */
#define LTDC_ICR_CTERRIF_Pos          (2U)
#define LTDC_ICR_CTERRIF_Msk          (0x1UL << LTDC_ICR_CTERRIF_Pos)   /*!< 0x00000004 */
#define LTDC_ICR_CTERRIF              LTDC_ICR_CTERRIF_Msk       /*!< clears the transfer error interrupt flag */
#define LTDC_ICR_CRRIF_Pos            (3U)
#define LTDC_ICR_CRRIF_Msk            (0x1UL << LTDC_ICR_CRRIF_Pos) /*!< 0x00000008 */
#define LTDC_ICR_CRRIF                LTDC_ICR_CRRIF_Msk         /*!< clears register reload interrupt flag */
#define LTDC_ICR_CFUKIF_Pos           (6U)
#define LTDC_ICR_CFUKIF_Msk           (0x1UL << LTDC_ICR_CFUKIF_Pos) /*!< 0x00000040 */
#define LTDC_ICR_CFUKIF               LTDC_ICR_CFUKIF_Msk        /*!< clears the FIFO underrun killing interrupt flag */
#define LTDC_ICR_CCRCIF_Pos           (7U)
#define LTDC_ICR_CCRCIF_Msk           (0x1UL << LTDC_ICR_CCRCIF_Pos)  /*!< 0x00000080 */
#define LTDC_ICR_CCRCIF               LTDC_ICR_CCRCIF_Msk        /*!< clears the CRC error interrupt flag */
#define LTDC_ICR_CFURIF_Pos           (8U)
#define LTDC_ICR_CFURIF_Msk           (0x1UL << LTDC_ICR_CFURIF_Pos)  /*!< 0x00000100 */
#define LTDC_ICR_CFURIF               LTDC_ICR_CFURIF_Msk        /*!< clears FIFO underrun error at rotation interrupt flag */

/******************  Bit definition for LTDC_LIPCR register  ******************/
#define LTDC_LIPCR_LIPOS_Pos          (0U)
#define LTDC_LIPCR_LIPOS_Msk          (0xFFFFUL << LTDC_LIPCR_LIPOS_Pos)      /*!< 0x0000FFFF */
#define LTDC_LIPCR_LIPOS              LTDC_LIPCR_LIPOS_Msk       /*!< line interrupt position */

/******************  Bit definition for LTDC_CPSR register  *******************/
#define LTDC_CPSR_CYPOS_Pos           (0U)
#define LTDC_CPSR_CYPOS_Msk           (0xFFFFUL << LTDC_CPSR_CYPOS_Pos)     /*!< 0x0000FFFF */
#define LTDC_CPSR_CYPOS               LTDC_CPSR_CYPOS_Msk        /*!< current Y position  */
#define LTDC_CPSR_CXPOS_Pos           (16U)
#define LTDC_CPSR_CXPOS_Msk           (0xFFFFUL << LTDC_CPSR_CXPOS_Pos)     /*!< 0xFFFF0000 */
#define LTDC_CPSR_CXPOS               LTDC_CPSR_CXPOS_Msk        /*!< current X position  */

/******************  Bit definition for LTDC_CDSR register  *******************/
#define LTDC_CDSR_VDES_Pos            (0U)
#define LTDC_CDSR_VDES_Msk            (0x1UL << LTDC_CDSR_VDES_Pos) /*!< 0x00000001 */
#define LTDC_CDSR_VDES                LTDC_CDSR_VDES_Msk         /*!< vertical data enable display status */
#define LTDC_CDSR_HDES_Pos            (1U)
#define LTDC_CDSR_HDES_Msk            (0x1UL << LTDC_CDSR_HDES_Pos) /*!< 0x00000002 */
#define LTDC_CDSR_HDES                LTDC_CDSR_HDES_Msk         /*!< horizontal data enable display status */
#define LTDC_CDSR_VSYNCS_Pos          (2U)
#define LTDC_CDSR_VSYNCS_Msk          (0x1UL << LTDC_CDSR_VSYNCS_Pos)   /*!< 0x00000004 */
#define LTDC_CDSR_VSYNCS              LTDC_CDSR_VSYNCS_Msk       /*!< vertical synchronization display status */
#define LTDC_CDSR_HSYNCS_Pos          (3U)
#define LTDC_CDSR_HSYNCS_Msk          (0x1UL << LTDC_CDSR_HSYNCS_Pos)   /*!< 0x00000008 */
#define LTDC_CDSR_HSYNCS              LTDC_CDSR_HSYNCS_Msk       /*!< horizontal synchronization display status */

/******************  Bit definition for LTDC_EDCR register  *******************/
#define LTDC_EDCR_OCYEN_Pos           (25U)
#define LTDC_EDCR_OCYEN_Msk           (0x1UL << LTDC_EDCR_OCYEN_Pos)  /*!< 0x02000000 */
#define LTDC_EDCR_OCYEN               LTDC_EDCR_OCYEN_Msk        /*!< output conversion to YCbCr 422 enable */
#define LTDC_EDCR_OCYSEL_Pos          (26U)
#define LTDC_EDCR_OCYSEL_Msk          (0x1UL << LTDC_EDCR_OCYSEL_Pos)   /*!< 0x04000000 */
#define LTDC_EDCR_OCYSEL              LTDC_EDCR_OCYSEL_Msk       /*!< output conversion to YCbCr 422 */
#define LTDC_EDCR_OCYCO_Pos           (27U)
#define LTDC_EDCR_OCYCO_Msk           (0x1UL << LTDC_EDCR_OCYCO_Pos)  /*!< 0x08000000 */
#define LTDC_EDCR_OCYCO               LTDC_EDCR_OCYCO_Msk        /*!< output conversion to YCbCr 422 */

/******************  Bit definition for LTDC_IER2 register  *******************/
#define LTDC_IER2_LIE_Pos             (0U)
#define LTDC_IER2_LIE_Msk             (0x1UL << LTDC_IER2_LIE_Pos)/*!< 0x00000001 */
#define LTDC_IER2_LIE                 LTDC_IER2_LIE_Msk          /*!< Line interrupt enable */
#define LTDC_IER2_FUWIE_Pos           (1U)
#define LTDC_IER2_FUWIE_Msk           (0x1UL << LTDC_IER2_FUWIE_Pos)  /*!< 0x00000002 */
#define LTDC_IER2_FUWIE               LTDC_IER2_FUWIE_Msk        /*!< FIFO underrun warning interrupt enable  */
#define LTDC_IER2_TERRIE_Pos          (2U)
#define LTDC_IER2_TERRIE_Msk          (0x1UL << LTDC_IER2_TERRIE_Pos)   /*!< 0x00000004 */
#define LTDC_IER2_TERRIE              LTDC_IER2_TERRIE_Msk       /*!< Transfer error interrupt enable */
#define LTDC_IER2_RRIE_Pos            (3U)
#define LTDC_IER2_RRIE_Msk            (0x1UL << LTDC_IER2_RRIE_Pos) /*!< 0x00000008 */
#define LTDC_IER2_RRIE                LTDC_IER2_RRIE_Msk         /*!< Register reload interrupt enable */
#define LTDC_IER2_FUKIE_Pos           (6U)
#define LTDC_IER2_FUKIE_Msk           (0x1UL << LTDC_IER2_FUKIE_Pos) /*!< 0x00000040 */
#define LTDC_IER2_FUKIE               LTDC_IER2_FUKIE_Msk        /*!< FIFO underrun killing error interrupt enable  */
#define LTDC_IER2_CRCIE_Pos           (7U)
#define LTDC_IER2_CRCIE_Msk           (0x1UL << LTDC_IER2_CRCIE_Pos)  /*!< 0x00000080 */
#define LTDC_IER2_CRCIE               LTDC_IER2_CRCIE_Msk        /*!< CRC error interrupt enable */
#define LTDC_IER2_FURIE_Pos           (8U)
#define LTDC_IER2_FURIE_Msk           (0x1UL << LTDC_IER2_FURIE_Pos)  /*!< 0x00000100 */
#define LTDC_IER2_FURIE               LTDC_IER2_FURIE_Msk        /*!< FIFO underrun error at rotation interrupt enable */

/******************  Bit definition for LTDC_ISR2 register  *******************/
#define LTDC_ISR2_LIF_Pos             (0U)
#define LTDC_ISR2_LIF_Msk             (0x1UL << LTDC_ISR2_LIF_Pos)/*!< 0x00000001 */
#define LTDC_ISR2_LIF                 LTDC_ISR2_LIF_Msk          /*!< Line interrupt flag */
#define LTDC_ISR2_FUWIF_Pos           (1U)
#define LTDC_ISR2_FUWIF_Msk           (0x1UL << LTDC_ISR2_FUWIF_Pos)  /*!< 0x00000002 */
#define LTDC_ISR2_FUWIF               LTDC_ISR2_FUWIF_Msk        /*!< FIFO underrun warning interrupt flag */
#define LTDC_ISR2_TERRIF_Pos          (2U)
#define LTDC_ISR2_TERRIF_Msk          (0x1UL << LTDC_ISR2_TERRIF_Pos)   /*!< 0x00000004 */
#define LTDC_ISR2_TERRIF              LTDC_ISR2_TERRIF_Msk       /*!< Transfer error interrupt flag */
#define LTDC_ISR2_RRIF_Pos            (3U)
#define LTDC_ISR2_RRIF_Msk            (0x1UL << LTDC_ISR2_RRIF_Pos) /*!< 0x00000008 */
#define LTDC_ISR2_RRIF                LTDC_ISR2_RRIF_Msk         /*!< Register reload interrupt flag */
#define LTDC_ISR2_FUKIF_Pos           (6U)
#define LTDC_ISR2_FUKIF_Msk           (0x1UL << LTDC_ISR2_FUKIF_Pos) /*!< 0x00000040 */
#define LTDC_ISR2_FUKIF               LTDC_ISR2_FKUIF_Msk        /*!< FIFO underrun killing error interrupt flag */
#define LTDC_ISR2_CRCIF_Pos           (7U)
#define LTDC_ISR2_CRCIF_Msk           (0x1UL << LTDC_ISR2_CRCIF_Pos)  /*!< 0x00000080 */
#define LTDC_ISR2_CRCIF               LTDC_ISR2_CRCIF_Msk        /*!< CRC Error interrupt flag */
#define LTDC_ISR2_FURIF_Pos           (8U)
#define LTDC_ISR2_FURIF_Msk           (0x1UL << LTDC_ISR2_FURIF_Pos)  /*!< 0x00000100 */
#define LTDC_ISR2_FURIF               LTDC_ISR2_FURIF_Msk        /*!< FIFO underrun error at rotation interrupt flag */

/******************  Bit definition for LTDC_ICR2 register  *******************/
#define LTDC_ICR2_CLIF_Pos            (0U)
#define LTDC_ICR2_CLIF_Msk            (0x1UL << LTDC_ICR2_CLIF_Pos) /*!< 0x00000001 */
#define LTDC_ICR2_CLIF                LTDC_ICR2_CLIF_Msk         /*!< clears the Line interrupt flag */
#define LTDC_ICR2_CFUWIF_Pos          (1U)
#define LTDC_ICR2_CFUWIF_Msk          (0x1UL << LTDC_ICR2_CFUWIF_Pos)   /*!< 0x00000002 */
#define LTDC_ICR2_CFUWIF              LTDC_ICR2_CFUWIF_Msk       /*!< clears the FIFO underrun warning interrupt flag */
#define LTDC_ICR2_CTERRIF_Pos         (2U)
#define LTDC_ICR2_CTERRIF_Msk         (0x1UL << LTDC_ICR2_CTERRIF_Pos)    /*!< 0x00000004 */
#define LTDC_ICR2_CTERRIF             LTDC_ICR2_CTERRIF_Msk      /*!< clears the Transfer Error interrupt flag */
#define LTDC_ICR2_CRRIF_Pos           (3U)
#define LTDC_ICR2_CRRIF_Msk           (0x1UL << LTDC_ICR2_CRRIF_Pos)  /*!< 0x00000008 */
#define LTDC_ICR2_CRRIF               LTDC_ICR2_CRRIF_Msk        /*!< clears register reload interrupt flag */
#define LTDC_ICR2_CFUKIF_Pos          (6U)
#define LTDC_ICR2_CFUKIF_Msk          (0x1UL << LTDC_ICR2_CFUKIF_Pos) /*!< 0x00000040 */
#define LTDC_ICR2_CFUKIF              LTDC_ICR2_CFUKIF_Msk       /*!< clears the FIFO underrun killing error interrupt flag */
#define LTDC_ICR2_CCRCIF_Pos          (7U)
#define LTDC_ICR2_CCRCIF_Msk          (0x1UL << LTDC_ICR2_CCRCIF_Pos)   /*!< 0x00000080 */
#define LTDC_ICR2_CCRCIF              LTDC_ICR2_CCRCIF_Msk       /*!< clears the CRC error interrupt flag */
#define LTDC_ICR2_CFURIF_Pos          (8U)
#define LTDC_ICR2_CFURIF_Msk          (0x1UL << LTDC_ICR2_CFURIF_Pos)   /*!< 0x00000100 */
#define LTDC_ICR2_CFURIF              LTDC_ICR2_CFURIF_Msk       /*!< clears FIFO underrun error at rotation interrupt flag */

/******************  Bit definition for LTDC_CPSR2 register  ******************/
#define LTDC_CPSR2_CYPOS_Pos          (0U)
#define LTDC_CPSR2_CYPOS_Msk          (0xFFFFUL << LTDC_CPSR2_CYPOS_Pos)      /*!< 0x0000FFFF */
#define LTDC_CPSR2_CYPOS              LTDC_CPSR2_CYPOS_Msk       /*!< current Y position  */
#define LTDC_CPSR2_CXPOS_Pos          (16U)
#define LTDC_CPSR2_CXPOS_Msk          (0xFFFFUL << LTDC_CPSR2_CXPOS_Pos)      /*!< 0xFFFF0000 */
#define LTDC_CPSR2_CXPOS              LTDC_CPSR2_CXPOS_Msk       /*!< current X position  */

/******************  Bit definition for LTDC_ECRCR register  ******************/
#define LTDC_ECRCR_ECRC_Pos           (0U)
#define LTDC_ECRCR_ECRC_Msk           (0xFFFFUL << LTDC_ECRCR_ECRC_Pos)     /*!< 0x0000FFFF */
#define LTDC_ECRCR_ECRC               LTDC_ECRCR_ECRC_Msk        /*!< expected CRC of frame */

/******************  Bit definition for LTDC_CCRCR register  ******************/
#define LTDC_CCRCR_CCRC_Pos           (0U)
#define LTDC_CCRCR_CCRC_Msk           (0xFFFFUL << LTDC_CCRCR_CCRC_Pos)     /*!< 0x0000FFFF */
#define LTDC_CCRCR_CCRC               LTDC_CCRCR_CCRC_Msk        /*!< computed CRC of frame */


/******************  Bit definition for LTDC_FUTR register  *******************/
#define LTDC_FUTR_THRE_Pos            (0U)
#define LTDC_FUTR_THRE_Msk            (0xFFFFUL << LTDC_FUTR_THRE_Pos)    /*!< 0x0000FFFF */
#define LTDC_FUTR_THRE                LTDC_FUTR_THRE_Msk         /*!< threshold to trigger a FIFO underrun interrupt (per FIFO word, 64 bits) */

/******************  Bit definition for LTDC_LxC0R register  ******************/
#define LTDC_LxC0R_CKTA_Pos           (0U)
#define LTDC_LxC0R_CKTA_Msk           (0x1UL << LTDC_LxC0R_CKTA_Pos)  /*!< 0x00000001 */
#define LTDC_LxC0R_CKTA               LTDC_LxC0R_CKTA_Msk        /*!< color key transparency ability */
#define LTDC_LxC0R_CFBDA_Pos          (1U)
#define LTDC_LxC0R_CFBDA_Msk          (0x1UL << LTDC_LxC0R_CFBDA_Pos)   /*!< 0x00000002 */
#define LTDC_LxC0R_CFBDA              LTDC_LxC0R_CFBDA_Msk       /*!< color frame buffer duplication ability */
#define LTDC_LxC0R_CFBPA_Pos          (2U)
#define LTDC_LxC0R_CFBPA_Msk          (0x1UL << LTDC_LxC0R_CFBPA_Pos)   /*!< 0x00000004 */
#define LTDC_LxC0R_CFBPA              LTDC_LxC0R_CFBPA_Msk       /*!< color frame buffer pitch ability */
#define LTDC_LxC0R_APA_Pos            (3U)
#define LTDC_LxC0R_APA_Msk            (0x1UL << LTDC_LxC0R_APA_Pos) /*!< 0x00000008 */
#define LTDC_LxC0R_APA                LTDC_LxC0R_APA_Msk         /*!< alpha plane ability */
#define LTDC_LxC0R_DCP_Pos            (4U)
#define LTDC_LxC0R_DCP_Msk            (0x1UL << LTDC_LxC0R_DCP_Pos) /*!< 0x00000010 */
#define LTDC_LxC0R_DCP                LTDC_LxC0R_DCP_Msk         /*!< default color programmability */
#define LTDC_LxC0R_WINA_Pos           (5U)
#define LTDC_LxC0R_WINA_Msk           (0x1UL << LTDC_LxC0R_WINA_Pos)  /*!< 0x00000020 */
#define LTDC_LxC0R_WINA               LTDC_LxC0R_WINA_Msk        /*!< windowing ability */
#define LTDC_LxC0R_CLUTA_Pos          (6U)
#define LTDC_LxC0R_CLUTA_Msk          (0x1UL << LTDC_LxC0R_CLUTA_Pos)   /*!< 0x00000040 */
#define LTDC_LxC0R_CLUTA              LTDC_LxC0R_CLUTA_Msk       /*!< CLUT ability */
#define LTDC_LxC0R_CKRA_Pos           (7U)
#define LTDC_LxC0R_CKRA_Msk           (0x1UL << LTDC_LxC0R_CKRA_Pos)  /*!< 0x00000080 */
#define LTDC_LxC0R_CKRA               LTDC_LxC0R_CKRA_Msk        /*!< color key replace ability */
#define LTDC_LxC0R_F21_Pos            (8U)
#define LTDC_LxC0R_F21_Msk            (0x1UL << LTDC_LxC0R_F21_Pos) /*!< 0x00000100 */
#define LTDC_LxC0R_F21                LTDC_LxC0R_F21_Msk         /*!< blending factor 2, ability for: 1 */
#define LTDC_LxC0R_F20_Pos            (9U)
#define LTDC_LxC0R_F20_Msk            (0x1UL << LTDC_LxC0R_F20_Pos) /*!< 0x00000200 */
#define LTDC_LxC0R_F20                LTDC_LxC0R_F20_Msk         /*!< blending factor 2, ability for: 0 */
#define LTDC_LxC0R_F2P_Pos            (10U)
#define LTDC_LxC0R_F2P_Msk            (0x1UL << LTDC_LxC0R_F2P_Pos) /*!< 0x00000400 */
#define LTDC_LxC0R_F2P                LTDC_LxC0R_F2P_Msk         /*!< blending factor 2, ability for: pixel_alpha */
#define LTDC_LxC0R_F21P_Pos           (11U)
#define LTDC_LxC0R_F21P_Msk           (0x1UL << LTDC_LxC0R_F21P_Pos)  /*!< 0x00000800 */
#define LTDC_LxC0R_F21P               LTDC_LxC0R_F21P_Msk        /*!< blending factor 2, ability for: 1 */
#define LTDC_LxC0R_F2C_Pos            (12U)
#define LTDC_LxC0R_F2C_Msk            (0x1UL << LTDC_LxC0R_F2C_Pos) /*!< 0x00001000 */
#define LTDC_LxC0R_F2C                LTDC_LxC0R_F2C_Msk         /*!< blending factor 2, ability for: constant_alpha */
#define LTDC_LxC0R_F21C_Pos           (13U)
#define LTDC_LxC0R_F21C_Msk           (0x1UL << LTDC_LxC0R_F21C_Pos)  /*!< 0x00002000 */
#define LTDC_LxC0R_F21C               LTDC_LxC0R_F21C_Msk        /*!< blending factor 2, ability for: 1 */
#define LTDC_LxC0R_F2PC_Pos           (14U)
#define LTDC_LxC0R_F2PC_Msk           (0x1UL << LTDC_LxC0R_F2PC_Pos)  /*!< 0x00004000 */
#define LTDC_LxC0R_F2PC               LTDC_LxC0R_F2PC_Msk        /*!< blending factor 2, ability for: pixel_alpha * constant_alpha */
#define LTDC_LxC0R_F21PC_Pos          (15U)
#define LTDC_LxC0R_F21PC_Msk          (0x1UL << LTDC_LxC0R_F21PC_Pos)   /*!< 0x00008000 */
#define LTDC_LxC0R_F21PC              LTDC_LxC0R_F21PC_Msk       /*!< blending factor 2, ability for: 1 */
#define LTDC_LxC0R_F11_Pos            (16U)
#define LTDC_LxC0R_F11_Msk            (0x1UL << LTDC_LxC0R_F11_Pos) /*!< 0x00010000 */
#define LTDC_LxC0R_F11                LTDC_LxC0R_F11_Msk         /*!< blending factor 1, ability for: 1 */
#define LTDC_LxC0R_F10_Pos            (17U)
#define LTDC_LxC0R_F10_Msk            (0x1UL << LTDC_LxC0R_F10_Pos) /*!< 0x00020000 */
#define LTDC_LxC0R_F10                LTDC_LxC0R_F10_Msk         /*!< blending factor 1,ability for: 0 */
#define LTDC_LxC0R_F1P_Pos            (18U)
#define LTDC_LxC0R_F1P_Msk            (0x1UL << LTDC_LxC0R_F1P_Pos) /*!< 0x00040000 */
#define LTDC_LxC0R_F1P                LTDC_LxC0R_F1P_Msk         /*!< blending factor 1, ability for: pixel_alpha */
#define LTDC_LxC0R_F11P_Pos           (19U)
#define LTDC_LxC0R_F11P_Msk           (0x1UL << LTDC_LxC0R_F11P_Pos)  /*!< 0x00080000 */
#define LTDC_LxC0R_F11P               LTDC_LxC0R_F11P_Msk        /*!< blending factor 1, ability for: 1 */
#define LTDC_LxC0R_F1C_Pos            (20U)
#define LTDC_LxC0R_F1C_Msk            (0x1UL << LTDC_LxC0R_F1C_Pos) /*!< 0x00100000 */
#define LTDC_LxC0R_F1C                LTDC_LxC0R_F1C_Msk         /*!< blending factor 1, ability for: constant_alpha */
#define LTDC_LxC0R_F11C_Pos           (21U)
#define LTDC_LxC0R_F11C_Msk           (0x1UL << LTDC_LxC0R_F11C_Pos)  /*!< 0x00200000 */
#define LTDC_LxC0R_F11C               LTDC_LxC0R_F11C_Msk        /*!< blending factor 1, ability for: 1 */
#define LTDC_LxC0R_F1PC_Pos           (22U)
#define LTDC_LxC0R_F1PC_Msk           (0x1UL << LTDC_LxC0R_F1PC_Pos)  /*!< 0x00400000 */
#define LTDC_LxC0R_F1PC               LTDC_LxC0R_F1PC_Msk        /*!< blending factor 1, ability for: pixel_alpha * constant_alpha */
#define LTDC_LxC0R_F11PC_Pos          (23U)
#define LTDC_LxC0R_F11PC_Msk          (0x1UL << LTDC_LxC0R_F11PC_Pos)   /*!< 0x00800000 */
#define LTDC_LxC0R_F11PC              LTDC_LxC0R_F11PC_Msk       /*!< blending factor 1, ability for: 1 */
#define LTDC_LxC0R_P88_Pos            (24U)
#define LTDC_LxC0R_P88_Msk            (0x1UL << LTDC_LxC0R_P88_Pos) /*!< 0x01000000 */
#define LTDC_LxC0R_P88                LTDC_LxC0R_P88_Msk         /*!< pixel format, ability for: AL88 */
#define LTDC_LxC0R_P44_Pos            (25U)
#define LTDC_LxC0R_P44_Msk            (0x1UL << LTDC_LxC0R_P44_Pos) /*!< 0x02000000 */
#define LTDC_LxC0R_P44                LTDC_LxC0R_P44_Msk         /*!< pixel format, ability for: AL44 */
#define LTDC_LxC0R_P8_Pos             (26U)
#define LTDC_LxC0R_P8_Msk             (0x1UL << LTDC_LxC0R_P8_Pos)/*!< 0x04000000 */
#define LTDC_LxC0R_P8                 LTDC_LxC0R_P8_Msk          /*!< pixel format, ability for: L8 */
#define LTDC_LxC0R_P4444_Pos          (27U)
#define LTDC_LxC0R_P4444_Msk          (0x1UL << LTDC_LxC0R_P4444_Pos)   /*!< 0x08000000 */
#define LTDC_LxC0R_P4444              LTDC_LxC0R_P4444_Msk       /*!< pixel format, ability for: ARGB4444 */
#define LTDC_LxC0R_P1555_Pos          (28U)
#define LTDC_LxC0R_P1555_Msk          (0x1UL << LTDC_LxC0R_P1555_Pos)   /*!< 0x10000000 */
#define LTDC_LxC0R_P1555              LTDC_LxC0R_P1555_Msk       /*!< pixel format, ability for: ARGB1555 */
#define LTDC_LxC0R_P565_Pos           (29U)
#define LTDC_LxC0R_P565_Msk           (0x1UL << LTDC_LxC0R_P565_Pos)  /*!< 0x20000000 */
#define LTDC_LxC0R_P565               LTDC_LxC0R_P565_Msk        /*!< pixel format, ability for: RGB565 */
#define LTDC_LxC0R_P888_Pos           (30U)
#define LTDC_LxC0R_P888_Msk           (0x1UL << LTDC_LxC0R_P888_Pos)  /*!< 0x40000000 */
#define LTDC_LxC0R_P888               LTDC_LxC0R_P888_Msk        /*!< pixel format, ability for: RGB888 */
#define LTDC_LxC0R_P8888_Pos          (31U)
#define LTDC_LxC0R_P8888_Msk          (0x1UL << LTDC_LxC0R_P8888_Pos)   /*!< 0x80000000 */
#define LTDC_LxC0R_P8888              LTDC_LxC0R_P8888_Msk       /*!< pixel format, ability for: ARGB8888 */

/******************  Bit definition for LTDC_LxC1R register  ******************/
#define LTDC_LxC1R_YIA_Pos            (0U)
#define LTDC_LxC1R_YIA_Msk            (0x1UL << LTDC_LxC1R_YIA_Pos) /*!< 0x00000001 */
#define LTDC_LxC1R_YIA                LTDC_LxC1R_YIA_Msk         /*!< YCbCr 422 interleaved ability for that layer */
#define LTDC_LxC1R_YSPA_Pos           (1U)
#define LTDC_LxC1R_YSPA_Msk           (0x1UL << LTDC_LxC1R_YSPA_Pos)  /*!< 0x00000002 */
#define LTDC_LxC1R_YSPA               LTDC_LxC1R_YSPA_Msk        /*!< YCbCr 420 semi-planar ability for that layer */
#define LTDC_LxC1R_YFPA_Pos           (2U)
#define LTDC_LxC1R_YFPA_Msk           (0x1UL << LTDC_LxC1R_YFPA_Pos)  /*!< 0x00000004 */
#define LTDC_LxC1R_YFPA               LTDC_LxC1R_YFPA_Msk        /*!< YCbCr 420 full-planar ability for that layer */
#define LTDC_LxC1R_SCA_Pos            (31U)
#define LTDC_LxC1R_SCA_Msk            (0x1UL << LTDC_LxC1R_SCA_Pos) /*!< 0x80000000 */
#define LTDC_LxC1R_SCA                LTDC_LxC1R_SCA_Msk         /*!< scaling ability for that layer */

/******************  Bit definition for LTDC_LxRCR register  ******************/
#define LTDC_LxRCR_IMR_Pos            (0U)
#define LTDC_LxRCR_IMR_Msk            (0x1UL << LTDC_LxRCR_IMR_Pos) /*!< 0x00000001 */
#define LTDC_LxRCR_IMR                LTDC_LxRCR_IMR_Msk         /*!< immediate reload trigger */
#define LTDC_LxRCR_VBR_Pos            (1U)
#define LTDC_LxRCR_VBR_Msk            (0x1UL << LTDC_LxRCR_VBR_Pos) /*!< 0x00000002 */
#define LTDC_LxRCR_VBR                LTDC_LxRCR_VBR_Msk         /*!< vertical blanking reload request */
#define LTDC_LxRCR_GRMSK_Pos          (2U)
#define LTDC_LxRCR_GRMSK_Msk          (0x1UL << LTDC_LxRCR_GRMSK_Pos)   /*!< 0x00000004 */
#define LTDC_LxRCR_GRMSK              LTDC_LxRCR_GRMSK_Msk       /*!< shadow reload control, global (centralized) reload masked */

/******************  Bit definition for LTDC_LxCR register  *******************/
#define LTDC_LxCR_LEN_Pos             (0U)
#define LTDC_LxCR_LEN_Msk             (0x1UL << LTDC_LxCR_LEN_Pos)/*!< 0x00000001 */
#define LTDC_LxCR_LEN                 LTDC_LxCR_LEN_Msk          /*!< layer enable */
#define LTDC_LxCR_CKEN_Pos            (1U)
#define LTDC_LxCR_CKEN_Msk            (0x1UL << LTDC_LxCR_CKEN_Pos) /*!< 0x00000002 */
#define LTDC_LxCR_CKEN                LTDC_LxCR_CKEN_Msk         /*!< color keying enable */
#define LTDC_LxCR_VPDEN_Pos           (2U)
#define LTDC_LxCR_VPDEN_Msk           (0x1UL << LTDC_LxCR_VPDEN_Pos)  /*!< 0x00000004 */
#define LTDC_LxCR_VPDEN               LTDC_LxCR_VPDEN_Msk        /*!< vertical pixel duplication enable */
#define LTDC_LxCR_HPDEN_Pos           (3U)
#define LTDC_LxCR_HPDEN_Msk           (0x1UL << LTDC_LxCR_HPDEN_Pos)  /*!< 0x00000008 */
#define LTDC_LxCR_HPDEN               LTDC_LxCR_HPDEN_Msk        /*!< horizontal pixel duplication enable */
#define LTDC_LxCR_CLUTEN_Pos          (4U)
#define LTDC_LxCR_CLUTEN_Msk          (0x1UL << LTDC_LxCR_CLUTEN_Pos)   /*!< 0x00000010 */
#define LTDC_LxCR_CLUTEN              LTDC_LxCR_CLUTEN_Msk       /*!< color look-up table enable */
#define LTDC_LxCR_HMEN_Pos            (8U)
#define LTDC_LxCR_HMEN_Msk            (0x1UL << LTDC_LxCR_HMEN_Pos) /*!< 0x00000100 */
#define LTDC_LxCR_HMEN                LTDC_LxCR_HMEN_Msk         /*!< horizontal mirroring enable */
#define LTDC_LxCR_DCBEN_Pos           (9U)
#define LTDC_LxCR_DCBEN_Msk           (0x1UL << LTDC_LxCR_DCBEN_Pos)  /*!< 0x00000200 */
#define LTDC_LxCR_DCBEN               LTDC_LxCR_DCBEN_Msk        /*!< default color blending enable */
#define LTDC_LxCR_SCEN_Pos            (10U)
#define LTDC_LxCR_SCEN_Msk            (0x1UL << LTDC_LxCR_SCEN_Pos) /*!< 0x00000400 */
#define LTDC_LxCR_SCEN                LTDC_LxCR_SCEN_Msk         /*!< scaler enable */

/*****************  Bit definition for LTDC_LxWHPCR register  *****************/
#define LTDC_LxWHPCR_WHSTPOS_Pos      (0U)
#define LTDC_LxWHPCR_WHSTPOS_Msk      (0xFFFFUL << LTDC_LxWHPCR_WHSTPOS_Pos)          /*!< 0x0000FFFF */
#define LTDC_LxWHPCR_WHSTPOS          LTDC_LxWHPCR_WHSTPOS_Msk   /*!< window horizontal start position */
#define LTDC_LxWHPCR_WHSPPOS_Pos      (16U)
#define LTDC_LxWHPCR_WHSPPOS_Msk      (0xFFFFUL << LTDC_LxWHPCR_WHSPPOS_Pos)          /*!< 0xFFFF0000 */
#define LTDC_LxWHPCR_WHSPPOS          LTDC_LxWHPCR_WHSPPOS_Msk   /*!< window horizontal stop position */

/*****************  Bit definition for LTDC_LxWVPCR register  *****************/
#define LTDC_LxWVPCR_WVSTPOS_Pos      (0U)
#define LTDC_LxWVPCR_WVSTPOS_Msk      (0xFFFFUL << LTDC_LxWVPCR_WVSTPOS_Pos)          /*!< 0x0000FFFF */
#define LTDC_LxWVPCR_WVSTPOS          LTDC_LxWVPCR_WVSTPOS_Msk   /*!< window vertical start position */
#define LTDC_LxWVPCR_WVSPPOS_Pos      (16U)
#define LTDC_LxWVPCR_WVSPPOS_Msk      (0xFFFFUL << LTDC_LxWVPCR_WVSPPOS_Pos)          /*!< 0xFFFF0000 */
#define LTDC_LxWVPCR_WVSPPOS          LTDC_LxWVPCR_WVSPPOS_Msk   /*!< window vertical stop position */

/*****************  Bit definition for LTDC_LxCKCR register  ******************/
#define LTDC_LxCKCR_CKBLUE_Pos        (0U)
#define LTDC_LxCKCR_CKBLUE_Msk        (0xFFUL << LTDC_LxCKCR_CKBLUE_Pos)      /*!< 0x000000FF */
#define LTDC_LxCKCR_CKBLUE            LTDC_LxCKCR_CKBLUE_Msk     /*!< color key blue value */
#define LTDC_LxCKCR_CKGREEN_Pos       (8U)
#define LTDC_LxCKCR_CKGREEN_Msk       (0xFFUL << LTDC_LxCKCR_CKGREEN_Pos)       /*!< 0x0000FF00 */
#define LTDC_LxCKCR_CKGREEN           LTDC_LxCKCR_CKGREEN_Msk    /*!< color key green value */
#define LTDC_LxCKCR_CKRED_Pos         (16U)
#define LTDC_LxCKCR_CKRED_Msk         (0xFFUL << LTDC_LxCKCR_CKRED_Pos)     /*!< 0x00FF0000 */
#define LTDC_LxCKCR_CKRED             LTDC_LxCKCR_CKRED_Msk      /*!< color key red value */

/*****************  Bit definition for LTDC_LxPFCR register  ******************/
#define LTDC_LxPFCR_PF_Pos            (0U)
#define LTDC_LxPFCR_PF_Msk            (0x7UL << LTDC_LxPFCR_PF_Pos) /*!< 0x00000007 */
#define LTDC_LxPFCR_PF                LTDC_LxPFCR_PF_Msk         /*!< pixel format */

/*****************  Bit definition for LTDC_LxCACR register  ******************/
#define LTDC_LxCACR_CONSTA_Pos        (0U)
#define LTDC_LxCACR_CONSTA_Msk        (0xFFUL << LTDC_LxCACR_CONSTA_Pos)      /*!< 0x000000FF */
#define LTDC_LxCACR_CONSTA            LTDC_LxCACR_CONSTA_Msk     /*!< constant alpha */

/*****************  Bit definition for LTDC_LxDCCR register  ******************/
#define LTDC_LxDCCR_DCBLUE_Pos        (0U)
#define LTDC_LxDCCR_DCBLUE_Msk        (0xFFUL << LTDC_LxDCCR_DCBLUE_Pos)      /*!< 0x000000FF */
#define LTDC_LxDCCR_DCBLUE            LTDC_LxDCCR_DCBLUE_Msk     /*!< default color blue */
#define LTDC_LxDCCR_DCGREEN_Pos       (8U)
#define LTDC_LxDCCR_DCGREEN_Msk       (0xFFUL << LTDC_LxDCCR_DCGREEN_Pos)       /*!< 0x0000FF00 */
#define LTDC_LxDCCR_DCGREEN           LTDC_LxDCCR_DCGREEN_Msk    /*!< default color green */
#define LTDC_LxDCCR_DCRED_Pos         (16U)
#define LTDC_LxDCCR_DCRED_Msk         (0xFFUL << LTDC_LxDCCR_DCRED_Pos)     /*!< 0x00FF0000 */
#define LTDC_LxDCCR_DCRED             LTDC_LxDCCR_DCRED_Msk      /*!< default color red */
#define LTDC_LxDCCR_DCALPHA_Pos       (24U)
#define LTDC_LxDCCR_DCALPHA_Msk       (0xFFUL << LTDC_LxDCCR_DCALPHA_Pos)       /*!< 0xFF000000 */
#define LTDC_LxDCCR_DCALPHA           LTDC_LxDCCR_DCALPHA_Msk    /*!< default color alpha */

/*****************  Bit definition for LTDC_LxBFCR register  ******************/
#define LTDC_LxBFCR_BF2_Pos           (0U)
#define LTDC_LxBFCR_BF2_Msk           (0x7UL << LTDC_LxBFCR_BF2_Pos)  /*!< 0x00000007 */
#define LTDC_LxBFCR_BF2               LTDC_LxBFCR_BF2_Msk        /*!< blending factor 2  */
#define LTDC_LxBFCR_BF1_Pos           (8U)
#define LTDC_LxBFCR_BF1_Msk           (0x7UL << LTDC_LxBFCR_BF1_Pos)  /*!< 0x00000700 */
#define LTDC_LxBFCR_BF1               LTDC_LxBFCR_BF1_Msk        /*!< blending factor 1 */
#define LTDC_LxBFCR_BOR_Pos           (16U)
#define LTDC_LxBFCR_BOR_Msk           (0x7UL << LTDC_LxBFCR_BOR_Pos)  /*!< 0x00070000 */
#define LTDC_LxBFCR_BOR               LTDC_LxBFCR_BOR_Msk        /*!< blending order */

/*****************  Bit definition for LTDC_LxBLCR register  ******************/
#define LTDC_LxBLCR_BL_Pos            (0U)
#define LTDC_LxBLCR_BL_Msk            (0xFFUL << LTDC_LxBLCR_BL_Pos)  /*!< 0x000000FF */
#define LTDC_LxBLCR_BL                LTDC_LxBLCR_BL_Msk         /*!< burst length */

/******************  Bit definition for LTDC_LxPCR register  ******************/
#define LTDC_LxPCR_VPDEN_Pos          (1U)
#define LTDC_LxPCR_VPDEN_Msk          (0x1UL << LTDC_LxPCR_VPDEN_Pos)   /*!< 0x00000002 */
#define LTDC_LxPCR_VPDEN              LTDC_LxPCR_VPDEN_Msk       /*!< Vertical pixel duplication enable */
#define LTDC_LxPCR_HPDEN_Pos          (2U)
#define LTDC_LxPCR_HPDEN_Msk          (0x1UL << LTDC_LxPCR_HPDEN_Pos)   /*!< 0x00000004 */
#define LTDC_LxPCR_HPDEN              LTDC_LxPCR_HPDEN_Msk       /*!< Horizontal pixel duplication enable */
#define LTDC_LxPCR_YCEN_Pos           (3U)
#define LTDC_LxPCR_YCEN_Msk           (0x1UL << LTDC_LxPCR_YCEN_Pos)  /*!< 0x00000008 */
#define LTDC_LxPCR_YCEN               LTDC_LxPCR_YCEN_Msk        /*!< YCbCr-to-RGB conversion enable */
#define LTDC_LxPCR_YCM_Pos            (4U)
#define LTDC_LxPCR_YCM_Msk            (0x3UL << LTDC_LxPCR_YCM_Pos) /*!< 0x00000030 */
#define LTDC_LxPCR_YCM                LTDC_LxPCR_YCM_Msk         /*!< YCbCr conversion mode */
#define LTDC_LxPCR_YF_Pos             (6U)
#define LTDC_LxPCR_YF_Msk             (0x1UL << LTDC_LxPCR_YF_Pos)/*!< 0x00000040 */
#define LTDC_LxPCR_YF                 LTDC_LxPCR_YF_Msk          /*!< Y component first */
#define LTDC_LxPCR_CBF_Pos            (7U)
#define LTDC_LxPCR_CBF_Msk            (0x1UL << LTDC_LxPCR_CBF_Pos) /*!< 0x00000080 */
#define LTDC_LxPCR_CBF                LTDC_LxPCR_CBF_Msk         /*!< Cb component first */
#define LTDC_LxPCR_OF_Pos             (8U)
#define LTDC_LxPCR_OF_Msk             (0x1UL << LTDC_LxPCR_OF_Pos)/*!< 0x00000100 */
#define LTDC_LxPCR_OF                 LTDC_LxPCR_OF_Msk          /*!< Odd pixel first */
#define LTDC_LxPCR_YREN_Pos           (9U)
#define LTDC_LxPCR_YREN_Msk           (0x1UL << LTDC_LxPCR_YREN_Pos)  /*!< 0x00000200 */
#define LTDC_LxPCR_YREN               LTDC_LxPCR_YREN_Msk        /*!< Y rescale enable for the color dynamic range */

/*****************  Bit definition for LTDC_LxCFBAR register  *****************/
#define LTDC_LxCFBAR_CFBADD_Pos       (0U)
#define LTDC_LxCFBAR_CFBADD_Msk       (0xFFFFFFFFUL << LTDC_LxCFBAR_CFBADD_Pos)             /*!< 0xFFFFFFFF */
#define LTDC_LxCFBAR_CFBADD           LTDC_LxCFBAR_CFBADD_Msk    /*!< color frame buffer start address */

/*****************  Bit definition for LTDC_LxCFBLR register  *****************/
#define LTDC_LxCFBLR_CFBLL_Pos        (0U)
#define LTDC_LxCFBLR_CFBLL_Msk        (0xFFFFUL << LTDC_LxCFBLR_CFBLL_Pos)        /*!< 0x0000FFFF */
#define LTDC_LxCFBLR_CFBLL            LTDC_LxCFBLR_CFBLL_Msk     /*!< color frame buffer line length */
#define LTDC_LxCFBLR_CFBP_Pos         (16U)
#define LTDC_LxCFBLR_CFBP_Msk         (0xFFFFUL << LTDC_LxCFBLR_CFBP_Pos)       /*!< 0xFFFF0000 */
#define LTDC_LxCFBLR_CFBP             LTDC_LxCFBLR_CFBP_Msk      /*!< color frame buffer pitch in bytes */

/****************  Bit definition for LTDC_LxCFBLNR register  *****************/
#define LTDC_LxCFBLNR_CFBLNBR_Pos     (0U)
#define LTDC_LxCFBLNR_CFBLNBR_Msk     (0xFFFFUL << LTDC_LxCFBLNR_CFBLNBR_Pos)           /*!< 0x0000FFFF */
#define LTDC_LxCFBLNR_CFBLNBR         LTDC_LxCFBLNR_CFBLNBR_Msk  /*!< frame buffer line number  */

/****************  Bit definition for LTDC_LxAFBA0R register  *****************/
#define LTDC_LxAFBA0R_AFBADD0_Pos     (0U)
#define LTDC_LxAFBA0R_AFBADD0_Msk     (0xFFFFFFFFUL << LTDC_LxAFBA0R_AFBADD0_Pos)               /*!< 0xFFFFFFFF */
#define LTDC_LxAFBA0R_AFBADD0         LTDC_LxAFBA0R_AFBADD0_Msk  /*!< frame buffer start address */

/****************  Bit definition for LTDC_LxAFBA1R register  *****************/
#define LTDC_LxAFBA1R_AFBADD1_Pos     (0U)
#define LTDC_LxAFBA1R_AFBADD1_Msk     (0xFFFFFFFFUL << LTDC_LxAFBA1R_AFBADD1_Pos)               /*!< 0xFFFFFFFF */
#define LTDC_LxAFBA1R_AFBADD1         LTDC_LxAFBA1R_AFBADD1_Msk  /*!< auxiliary frame buffer start address */

/*****************  Bit definition for LTDC_LxAFBLR register  *****************/
#define LTDC_LxAFBLR_AFBLL_Pos        (0U)
#define LTDC_LxAFBLR_AFBLL_Msk        (0xFFFFUL << LTDC_LxAFBLR_AFBLL_Pos)        /*!< 0x0000FFFF */
#define LTDC_LxAFBLR_AFBLL            LTDC_LxAFBLR_AFBLL_Msk     /*!< auxiliary frame buffer line length */
#define LTDC_LxAFBLR_AFBP_Pos         (16U)
#define LTDC_LxAFBLR_AFBP_Msk         (0xFFFFUL << LTDC_LxAFBLR_AFBP_Pos)       /*!< 0xFFFF0000 */
#define LTDC_LxAFBLR_AFBP             LTDC_LxAFBLR_AFBP_Msk      /*!< auxiliary frame buffer pitch in bytes */

/****************  Bit definition for LTDC_LxAFBLNR register  *****************/
#define LTDC_LxAFBLNR_AFBLNBR_Pos     (0U)
#define LTDC_LxAFBLNR_AFBLNBR_Msk     (0xFFFFUL << LTDC_LxAFBLNR_AFBLNBR_Pos)           /*!< 0x0000FFFF */
#define LTDC_LxAFBLNR_AFBLNBR         LTDC_LxAFBLNR_AFBLNBR_Msk  /*!< auxiliary frame buffer line number  */

/****************  Bit definition for LTDC_LxCLUTWR register  *****************/
#define LTDC_LxCLUTWR_BLUE_Pos        (0U)
#define LTDC_LxCLUTWR_BLUE_Msk        (0xFFUL << LTDC_LxCLUTWR_BLUE_Pos)      /*!< 0x000000FF */
#define LTDC_LxCLUTWR_BLUE            LTDC_LxCLUTWR_BLUE_Msk     /*!< blue value */
#define LTDC_LxCLUTWR_GREEN_Pos       (8U)
#define LTDC_LxCLUTWR_GREEN_Msk       (0xFFUL << LTDC_LxCLUTWR_GREEN_Pos)       /*!< 0x0000FF00 */
#define LTDC_LxCLUTWR_GREEN           LTDC_LxCLUTWR_GREEN_Msk    /*!< green value */
#define LTDC_LxCLUTWR_RED_Pos         (16U)
#define LTDC_LxCLUTWR_RED_Msk         (0xFFUL << LTDC_LxCLUTWR_RED_Pos)     /*!< 0x00FF0000 */
#define LTDC_LxCLUTWR_RED             LTDC_LxCLUTWR_RED_Msk      /*!< red value */
#define LTDC_LxCLUTWR_CLUTADD_Pos     (24U)
#define LTDC_LxCLUTWR_CLUTADD_Msk     (0xFFUL << LTDC_LxCLUTWR_CLUTADD_Pos)         /*!< 0xFF000000 */
#define LTDC_LxCLUTWR_CLUTADD         LTDC_LxCLUTWR_CLUTADD_Msk  /*!< CLUT address */

/*****************  Bit definition for LTDC_LxSISR register  ******************/
#define LTDC_LxSISR_SIH_Pos           (0U)
#define LTDC_LxSISR_SIH_Msk           (0xFFFUL << LTDC_LxSISR_SIH_Pos)    /*!< 0x00000FFF */
#define LTDC_LxSISR_SIH               LTDC_LxSISR_SIH_Msk        /*!< scaler horizontal input size (input width) */
#define LTDC_LxSISR_SIV_Pos           (16U)
#define LTDC_LxSISR_SIV_Msk           (0xFFFUL << LTDC_LxSISR_SIV_Pos)    /*!< 0x0FFF0000 */
#define LTDC_LxSISR_SIV               LTDC_LxSISR_SIV_Msk        /*!< scaler vertical input size (input height) */

/*****************  Bit definition for LTDC_LxSOSR register  ******************/
#define LTDC_LxSOSR_SOH_Pos           (0U)
#define LTDC_LxSOSR_SOH_Msk           (0xFFFUL << LTDC_LxSOSR_SOH_Pos)    /*!< 0x00000FFF */
#define LTDC_LxSOSR_SOH               LTDC_LxSOSR_SOH_Msk        /*!< scaler horizontal output size (output width) */
#define LTDC_LxSOSR_SOV_Pos           (16U)
#define LTDC_LxSOSR_SOV_Msk           (0xFFFUL << LTDC_LxSOSR_SOV_Pos)    /*!< 0x0FFF0000 */
#define LTDC_LxSOSR_SOV               LTDC_LxSOSR_SOV_Msk        /*!< scaler vertical output size (output height) */

/*****************  Bit definition for LTDC_LxSVSFR register  *****************/
#define LTDC_LxSVSFR_SVF_Pos          (0U)
#define LTDC_LxSVSFR_SVF_Msk          (0xFFFFUL << LTDC_LxSVSFR_SVF_Pos)      /*!< 0x0000FFFF */
#define LTDC_LxSVSFR_SVF              LTDC_LxSVSFR_SVF_Msk       /*!< scaler vertical scaling factor */

/*****************  Bit definition for LTDC_LxSVSPR register  *****************/
#define LTDC_LxSVSPR_SVP_Pos          (0U)
#define LTDC_LxSVSPR_SVP_Msk          (0xFFFFUL << LTDC_LxSVSPR_SVP_Pos)      /*!< 0x0000FFFF */
#define LTDC_LxSVSPR_SVP              LTDC_LxSVSPR_SVP_Msk       /*!< scaler vertical scaling factor */

/*****************  Bit definition for LTDC_LxSHSFR register  *****************/
#define LTDC_LxSHSFR_SHF_Pos          (0U)
#define LTDC_LxSHSFR_SHF_Msk          (0xFFFFUL << LTDC_LxSHSFR_SHF_Pos)      /*!< 0x0000FFFF */
#define LTDC_LxSHSFR_SHF              LTDC_LxSHSFR_SHF_Msk       /*!< scaler horizontal scaling factor */

/*****************  Bit definition for LTDC_LxSHSPR register  *****************/
#define LTDC_LxSHSPR_SHP_Pos          (0U)
#define LTDC_LxSHSPR_SHP_Msk          (0xFFFFUL << LTDC_LxSHSPR_SHP_Pos)      /*!< 0x0000FFFF */
#define LTDC_LxSHSPR_SHP              LTDC_LxSHSPR_SHP_Msk       /*!< scaler horizontal scaling phase */

/*****************  Bit definition for LTDC_LxCYR0R register  *****************/
#define LTDC_LxCYR0R_CR2R_Pos         (0U)
#define LTDC_LxCYR0R_CR2R_Msk         (0x3FFUL << LTDC_LxCYR0R_CR2R_Pos)      /*!< 0x000003FF */
#define LTDC_LxCYR0R_CR2R             LTDC_LxCYR0R_CR2R_Msk      /*!< Cr-to-Red coefficient, with bits 9:8 as positive integer and 7:0 as decimals */
#define LTDC_LxCYR0R_CB2B_Pos         (16U)
#define LTDC_LxCYR0R_CB2B_Msk         (0x3FFUL << LTDC_LxCYR0R_CB2B_Pos)      /*!< 0x03FF0000 */
#define LTDC_LxCYR0R_CB2B             LTDC_LxCYR0R_CB2B_Msk      /*!< Cb-to-Blue coefficient, with bits 9:8 as positive integer and 7:0 as decimals */

/*****************  Bit definition for LTDC_LxCYR1R register  *****************/
#define LTDC_LxCYR1R_CR2G_Pos         (0U)
#define LTDC_LxCYR1R_CR2G_Msk         (0x3FFUL << LTDC_LxCYR1R_CR2G_Pos)      /*!< 0x000003FF */
#define LTDC_LxCYR1R_CR2G             LTDC_LxCYR1R_CR2G_Msk      /*!< Cr-to-Green coefficient, with bits 9:8 as positive integer and 7:0 as decimals */
#define LTDC_LxCYR1R_CB2G_Pos         (16U)
#define LTDC_LxCYR1R_CB2G_Msk         (0x3FFUL << LTDC_LxCYR1R_CB2G_Pos)      /*!< 0x03FF0000 */
#define LTDC_LxCYR1R_CB2G             LTDC_LxCYR1R_CB2G_Msk      /*!< Cb-to-Green coefficient, with bits 9:8 as positive integer and 7:0 as decimals */

/******************************************************************************/
/*                                                                            */
/*                                 MDF/ADF                                    */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for MDF/ADF_GCR register  ********************/
#define MDF_GCR_TRGO_Pos                    (0U)
#define MDF_GCR_TRGO_Msk                    (0x1UL << MDF_GCR_TRGO_Pos)             /*!< 0x00000001 */
#define MDF_GCR_TRGO                        MDF_GCR_TRGO_Msk                        /*!<Trigger output control */
#define MDF_GCR_ILVNB_Pos                   (4U)
#define MDF_GCR_ILVNB_Msk                   (0xFUL << MDF_GCR_ILVNB_Pos)            /*!< 0x000000F0 */
#define MDF_GCR_ILVNB                       MDF_GCR_ILVNB_Msk                       /*!< Interleaved Number */

/*******************  Bit definition for MDF/ADF_CKGCR register  ********************/
#define MDF_CKGCR_CKDEN_Pos                 (0U)
#define MDF_CKGCR_CKDEN_Msk                 (0x1UL << MDF_CKGCR_CKDEN_Pos)          /*!< 0x00000001 */
#define MDF_CKGCR_CKDEN                     MDF_CKGCR_CKDEN_Msk                     /*!<CKGEN diveders enable */
#define MDF_CKGCR_CCK0EN_Pos                (1U)
#define MDF_CKGCR_CCK0EN_Msk                (0x1UL << MDF_CKGCR_CCK0EN_Pos)         /*!< 0x00000002 */
#define MDF_CKGCR_CCK0EN                    MDF_CKGCR_CCK0EN_Msk                    /*!<CCK0 clock enable */
#define MDF_CKGCR_CCK1EN_Pos                (2U)
#define MDF_CKGCR_CCK1EN_Msk                (0x1UL << MDF_CKGCR_CCK1EN_Pos)         /*!< 0x00000004 */
#define MDF_CKGCR_CCK1EN                    MDF_CKGCR_CCK1EN_Msk                    /*!<CCK1 clock enable */
#define MDF_CKGCR_CKGMOD_Pos                (4U)
#define MDF_CKGCR_CKGMOD_Msk                (0x1UL << MDF_CKGCR_CKGMOD_Pos)         /*!< 0x00000010 */
#define MDF_CKGCR_CKGMOD                    MDF_CKGCR_CKGMOD_Msk                    /*!<Clock genartor mode */
#define MDF_CKGCR_CCK0DIR_Pos               (5U)
#define MDF_CKGCR_CCK0DIR_Msk               (0x1UL << MDF_CKGCR_CCK0DIR_Pos)        /*!< 0x00000020 */
#define MDF_CKGCR_CCK0DIR                   MDF_CKGCR_CCK0DIR_Msk                   /*!<CCK0 clock direction */
#define MDF_CKGCR_CCK1DIR_Pos               (6U)
#define MDF_CKGCR_CCK1DIR_Msk               (0x1UL << MDF_CKGCR_CCK1DIR_Pos)        /*!< 0x00000040 */
#define MDF_CKGCR_CCK1DIR                   MDF_CKGCR_CCK1DIR_Msk                   /*!<CCK1 clock direction */
#define MDF_CKGCR_TRGSENS_Pos               (8U)
#define MDF_CKGCR_TRGSENS_Msk               (0x1UL << MDF_CKGCR_TRGSENS_Pos)        /*!< 0x00000100 */
#define MDF_CKGCR_TRGSENS                   MDF_CKGCR_TRGSENS_Msk                   /*!<CKGEN trigger sensitivity selection */
#define MDF_CKGCR_TRGSRC_Pos                (12U)
#define MDF_CKGCR_TRGSRC_Msk                (0xFUL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x0000F000 */
#define MDF_CKGCR_TRGSRC                    MDF_CKGCR_TRGSRC_Msk                    /*!<Digital Filter trigger signal selection */
#define MDF_CKGCR_TRGSRC_0                  (0x1UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00001000 */
#define MDF_CKGCR_TRGSRC_1                  (0x2UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00002000 */
#define MDF_CKGCR_TRGSRC_2                  (0x4UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00004000 */
#define MDF_CKGCR_TRGSRC_3                  (0x8UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00008000 */
#define MDF_CKGCR_CCKDIV_Pos                (16U)
#define MDF_CKGCR_CCKDIV_Msk                (0xFUL << MDF_CKGCR_CCKDIV_Pos)         /*!< 0x000F0000 */
#define MDF_CKGCR_CCKDIV                    MDF_CKGCR_CCKDIV_Msk                    /*!<Divider to controle the MDF_CCK clock */
#define MDF_CKGCR_PROCDIV_Pos               (24U)
#define MDF_CKGCR_PROCDIV_Msk               (0x7FUL << MDF_CKGCR_PROCDIV_Pos)       /*!< 0x7F000000 */
#define MDF_CKGCR_PROCDIV                   MDF_CKGCR_PROCDIV_Msk                   /*!<Divider to controle the serial interface clock */
#define MDF_CKGCR_CCKACTIVE_Pos             (31U)
#define MDF_CKGCR_CCKACTIVE_Msk             (0x1UL << MDF_CKGCR_CCKACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_CKGCR_CCKACTIVE                 MDF_CKGCR_CCKACTIVE_Msk                 /*!<Clock generator active flag */

/*******************  Bit definition for MDF/ADF_OR register  ********************/
#define MDF_OR_OPTION_Pos                   (0U)
#define MDF_OR_OPTION_Msk                   (0xFFFFFFFFUL << MDF_OR_OPTION_Pos)     /*!< 0xFFFFFFFF */
#define MDF_OR_OPTION                       MDF_OR_OPTION_Msk                       /*!<Option Controle Bits */

/*******************  Bit definition for MDF/ADF_SITFxCR register  ********************/
#define MDF_SITFCR_SITFEN_Pos               (0U)
#define MDF_SITFCR_SITFEN_Msk               (0x1UL << MDF_SITFCR_SITFEN_Pos)        /*!< 0x00000001 */
#define MDF_SITFCR_SITFEN                   MDF_SITFCR_SITFEN_Msk                   /*!<Serial interface enable */
#define MDF_SITFCR_SCKSRC_Pos               (1U)
#define MDF_SITFCR_SCKSRC_Msk               (0x3UL << MDF_SITFCR_SCKSRC_Pos)        /*!< 0x00000006 */
#define MDF_SITFCR_SCKSRC                   MDF_SITFCR_SCKSRC_Msk                   /*!<Serial clock source */
#define MDF_SITFCR_SCKSRC_0                 (0x1UL << MDF_SITFCR_SCKSRC_Pos)
#define MDF_SITFCR_SCKSRC_1                 (0x2UL << MDF_SITFCR_SCKSRC_Pos)
#define MDF_SITFCR_SITFMOD_Pos              (4U)
#define MDF_SITFCR_SITFMOD_Msk              (0x3UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000030 */
#define MDF_SITFCR_SITFMOD                  MDF_SITFCR_SITFMOD_Msk                  /*!<Serial interface type */
#define MDF_SITFCR_SITFMOD_0                (0x1UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000010 */
#define MDF_SITFCR_SITFMOD_1                (0x2UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000020 */
#define MDF_SITFCR_STH_Pos                  (8U)
#define MDF_SITFCR_STH_Msk                  (0x1FUL << MDF_SITFCR_STH_Pos)          /*!< 0x00001F00 */
#define MDF_SITFCR_STH                      MDF_SITFCR_STH_Msk                      /*!<Manchester Symbol threshold / SPI threshold */
#define MDF_SITFCR_SITFACTIVE_Pos           (31U)
#define MDF_SITFCR_SITFACTIVE_Msk           (0x1UL << MDF_SITFCR_SITFACTIVE_Pos)    /*!< 0x80000000 */
#define MDF_SITFCR_SITFACTIVE               MDF_SITFCR_SITFACTIVE_Msk               /*!<Serial interface active flag */

/*******************  Bit definition for MDF/ADF_BSMXxCR register  ********************/
#define MDF_BSMXCR_BSSEL_Pos                (0U)
#define MDF_BSMXCR_BSSEL_Msk                (0x1FUL << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x0000001F */
#define MDF_BSMXCR_BSSEL                    MDF_BSMXCR_BSSEL_Msk                    /*!<Bit Streal selection */
#define MDF_BSMXCR_BSSEL_0                  (0x1UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000001 */
#define MDF_BSMXCR_BSSEL_1                  (0x2UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000002 */
#define MDF_BSMXCR_BSSEL_2                  (0x4UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000004 */
#define MDF_BSMXCR_BSSEL_3                  (0x8UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000008 */
#define MDF_BSMXCR_BSSEL_4                  (0x10UL  << MDF_BSMXCR_BSSEL_Pos)       /*!< 0x00000010 */
#define MDF_BSMXCR_BSMXACTIVATE_Pos         (31U)
#define MDF_BSMXCR_BSMXACTIVATE_Msk         (0x1UL << MDF_BSMXCR_BSMXACTIVATE_Pos)  /*!< 0x80000000 */
#define MDF_BSMXCR_BSMXACTIVATE             MDF_BSMXCR_BSMXACTIVATE_Msk             /*!<Bit Streal activation flag */

/*******************  Bit definition for MDF/ADF_DFLTxCR register  ********************/
#define MDF_DFLTCR_DFLTEN_Pos               (0U)
#define MDF_DFLTCR_DFLTEN_Msk               (0x1UL << MDF_DFLTCR_DFLTEN_Pos)        /*!< 0x00000001 */
#define MDF_DFLTCR_DFLTEN                   MDF_DFLTCR_DFLTEN_Msk                   /*!<Digital filter enable */
#define MDF_DFLTCR_DMAEN_Pos                (1U)
#define MDF_DFLTCR_DMAEN_Msk                (0x1UL << MDF_DFLTCR_DMAEN_Pos)         /*!< 0x00000002 */
#define MDF_DFLTCR_DMAEN                    MDF_DFLTCR_DMAEN_Msk                    /*!<DMA request enable */
#define MDF_DFLTCR_FTH_Pos                  (2U)
#define MDF_DFLTCR_FTH_Msk                  (0x1UL << MDF_DFLTCR_FTH_Pos)           /*!< 0x00000004 */
#define MDF_DFLTCR_FTH                      MDF_DFLTCR_FTH_Msk                      /*!<RXFIFO Threshold selection */
#define MDF_DFLTCR_ACQMOD_Pos               (4U)
#define MDF_DFLTCR_ACQMOD_Msk               (0x7UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_ACQMOD                   MDF_DFLTCR_ACQMOD_Msk                   /*!<Digital filter trigger mode */
#define MDF_DFLTCR_ACQMOD_0                 (0x1UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000010 */
#define MDF_DFLTCR_ACQMOD_1                 (0x2UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000020 */
#define MDF_DFLTCR_ACQMOD_2                 (0x4UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000040 */
#define MDF_DFLTCR_TRGSENS_Pos              (8U)
#define MDF_DFLTCR_TRGSENS_Msk              (0x1UL << MDF_DFLTCR_TRGSENS_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_TRGSENS                  MDF_DFLTCR_TRGSENS_Msk                  /*!<Digital filter trigger sensitivity selection */
#define MDF_DFLTCR_TRGSRC_Pos               (12U)
#define MDF_DFLTCR_TRGSRC_Msk               (0xFUL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_TRGSRC                   MDF_DFLTCR_TRGSRC_Msk                   /*!<Digital filter trigger signal selection */
#define MDF_DFLTCR_TRGSRC_0                 (0x1UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00001000 */
#define MDF_DFLTCR_TRGSRC_1                 (0x2UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00002000 */
#define MDF_DFLTCR_TRGSRC_2                 (0x4UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00004000 */
#define MDF_DFLTCR_TRGSRC_3                 (0x8UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00008000 */
#define MDF_DFLTCR_SNPSFMT_Pos              (16U)
#define MDF_DFLTCR_SNPSFMT_Msk              (0x1UL << MDF_DFLTCR_SNPSFMT_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_SNPSFMT                  MDF_DFLTCR_SNPSFMT_Msk                  /*!<SnapShot Data format */
#define MDF_DFLTCR_NBDIS_Pos                (20U)
#define MDF_DFLTCR_NBDIS_Msk                (0xFFUL << MDF_DFLTCR_NBDIS_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_NBDIS                    MDF_DFLTCR_NBDIS_Msk                    /*!<Number of samples to be discard */
#define MDF_DFLTCR_DFLTRUN_Pos              (30U)
#define MDF_DFLTCR_DFLTRUN_Msk              (0x1UL << MDF_DFLTCR_DFLTRUN_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_DFLTRUN                  MDF_DFLTCR_DFLTRUN_Msk                  /*!<Digital filter run status flag */
#define MDF_DFLTCR_DFLTACTIVE_Pos           (31U)
#define MDF_DFLTCR_DFLTACTIVE_Msk           (0x1UL << MDF_DFLTCR_DFLTACTIVE_Pos)    /*!< 0x00000004 */
#define MDF_DFLTCR_DFLTACTIVE               MDF_DFLTCR_DFLTACTIVE_Msk               /*!<Digital filter active flag */

/*******************  Bit definition for MDF/ADF_DFLTxCICR register  ********************/
#define MDF_DFLTCICR_DATSRC_Pos             (0U)
#define MDF_DFLTCICR_DATSRC_Msk             (0x3UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000003 */
#define MDF_DFLTCICR_DATSRC                 MDF_DFLTCICR_DATSRC_Msk                 /*!<Source Data for the digital filter */
#define MDF_DFLTCICR_DATSRC_0               (0x1UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000001 */
#define MDF_DFLTCICR_DATSRC_1               (0x2UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000002 */
#define MDF_DFLTCICR_CICMOD_Pos             (4U)
#define MDF_DFLTCICR_CICMOD_Msk             (0x7UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000070 */
#define MDF_DFLTCICR_CICMOD                 MDF_DFLTCICR_CICMOD_Msk                 /*!<Select the CIC Mode*/
#define MDF_DFLTCICR_CICMOD_0               (0x1UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000010 */
#define MDF_DFLTCICR_CICMOD_1               (0x2UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000020 */
#define MDF_DFLTCICR_CICMOD_2               (0x4UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000030 */
#define MDF_DFLTCICR_MCICD_Pos              (8U)
#define MDF_DFLTCICR_MCICD_Msk              (0x1FFUL << MDF_DFLTCICR_MCICD_Pos)     /*!< 0x0001FF00 */
#define MDF_DFLTCICR_MCICD                  MDF_DFLTCICR_MCICD_Msk                  /*!<CIC decimation ratio selection*/
#define MDF_DFLTCICR_SCALE_Pos              (20U)
#define MDF_DFLTCICR_SCALE_Msk              (0x3FUL << MDF_DFLTCICR_SCALE_Pos)      /*!< 0x03F00000 */
#define MDF_DFLTCICR_SCALE                  MDF_DFLTCICR_SCALE_Msk                  /*!<Scaling factor selection*/

/*******************  Bit definition for MDF/ADF_DFLTxRSFR register  ********************/
#define MDF_DFLTRSFR_RSFLTBYP_Pos           (0U)
#define MDF_DFLTRSFR_RSFLTBYP_Msk           (0x1UL << MDF_DFLTRSFR_RSFLTBYP_Pos)    /*!< 0x00000001 */
#define MDF_DFLTRSFR_RSFLTBYP               MDF_DFLTRSFR_RSFLTBYP_Msk               /*!<Reshape filter bypass*/
#define MDF_DFLTRSFR_RSFLTD_Pos             (4U)
#define MDF_DFLTRSFR_RSFLTD_Msk             (0x1UL << MDF_DFLTRSFR_RSFLTD_Pos)      /*!< 0x00000010 */
#define MDF_DFLTRSFR_RSFLTD                 MDF_DFLTRSFR_RSFLTD_Msk                 /*!<Reshape filter decimation ratio*/
#define MDF_DFLTRSFR_HPFBYP_Pos             (7U)
#define MDF_DFLTRSFR_HPFBYP_Msk             (0x1UL << MDF_DFLTRSFR_HPFBYP_Pos)      /*!< 0x00000080 */
#define MDF_DFLTRSFR_HPFBYP                 MDF_DFLTRSFR_HPFBYP_Msk                 /*!<High-pass filter bypass*/
#define MDF_DFLTRSFR_HPFC_Pos               (8U)
#define MDF_DFLTRSFR_HPFC_Msk               (0x3UL << MDF_DFLTRSFR_HPFC_Pos)        /*!< 0x00000080 */
#define MDF_DFLTRSFR_HPFC                   MDF_DFLTRSFR_HPFC_Msk                   /*!<High-pass filter cut-off frequency*/
#define MDF_DFLTRSFR_HPFC_0                 (0x1UL << MDF_DFLTRSFR_HPFC_Pos)
#define MDF_DFLTRSFR_HPFC_1                 (0x2UL << MDF_DFLTRSFR_HPFC_Pos)

/*******************  Bit definition for MDF/ADF_DFLTxINTR register  ********************/
#define MDF_DFLTINTR_INTDIV_Pos             (0U)
#define MDF_DFLTINTR_INTDIV_Msk             (0x3UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000003 */
#define MDF_DFLTINTR_INTDIV                 MDF_DFLTINTR_INTDIV_Msk                 /*!<Integrator output dividion*/
#define MDF_DFLTINTR_INTDIV_0               (0x1UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000001 */
#define MDF_DFLTINTR_INTDIV_1               (0x2UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000002 */
#define MDF_DFLTINTR_INTVAL_Pos             (4U)
#define MDF_DFLTINTR_INTVAL_Msk             (0x7FUL << MDF_DFLTINTR_INTVAL_Pos)     /*!< 0x000007F0 */
#define MDF_DFLTINTR_INTVAL                 MDF_DFLTINTR_INTVAL_Msk                 /*!<Integrator value selection*/

/*******************  Bit definition for MDF/ADF_OLDxCR register  ********************/
#define MDF_OLDCR_OLDEN_Pos                 (0U)
#define MDF_OLDCR_OLDEN_Msk                 (0x1UL << MDF_OLDCR_OLDEN_Pos)          /*!< 0x00000001 */
#define MDF_OLDCR_OLDEN                     MDF_OLDCR_OLDEN_Msk                     /*!<OLD enable*/
#define MDF_OLDCR_THINB_Pos                 (1U)
#define MDF_OLDCR_THINB_Msk                 (0x1UL << MDF_OLDCR_THINB_Pos)          /*!< 0x00000002 */
#define MDF_OLDCR_THINB                     MDF_OLDCR_THINB_Msk                     /*!<OLD theshold in band*/
#define MDF_OLDCR_BKOLD_Pos                 (4U)
#define MDF_OLDCR_BKOLD_Msk                 (0xFUL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x000000F0 */
#define MDF_OLDCR_BKOLD                     MDF_OLDCR_BKOLD_Msk                     /*!<Bteak signal assignement for OLD*/
#define MDF_OLDCR_BKOLD_0                   (0x1UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000010 */
#define MDF_OLDCR_BKOLD_1                   (0x2UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000020 */
#define MDF_OLDCR_BKOLD_2                   (0x4UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000040 */
#define MDF_OLDCR_BKOLD_3                   (0x8UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000080 */
#define MDF_OLDCR_ACICN_Pos                 (12U)
#define MDF_OLDCR_ACICN_Msk                 (0x3UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00003000 */
#define MDF_OLDCR_ACICN                     MDF_OLDCR_ACICN_Msk                     /*!<OLD CIC order selection*/
#define MDF_OLDCR_ACICN_0                   (0x1UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00001000 */
#define MDF_OLDCR_ACICN_1                   (0x2UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00002000 */
#define MDF_OLDCR_ACICD_Pos                 (17U)
#define MDF_OLDCR_ACICD_Msk                 (0x1FUL << MDF_OLDCR_ACICD_Pos)         /*!< 0x003E0000 */
#define MDF_OLDCR_ACICD                     MDF_OLDCR_ACICD_Msk                     /*!<OLD CIC decimation ratio selection*/
#define MDF_OLDCR_OLDACTIVE_Pos             (31U)
#define MDF_OLDCR_OLDACTIVE_Msk             (0x1UL << MDF_OLDCR_OLDACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_OLDCR_OLDACTIVE                 MDF_OLDCR_OLDACTIVE_Msk                 /*!<OLD active flag*/

/*******************  Bit definition for MDF/ADF_OLDxTHLR register  ********************/
#define MDF_OLDTHLR_OLDTHL_Pos              (0U)
#define MDF_OLDTHLR_OLDTHL_Msk              (0x3FFFFFFUL << MDF_OLDTHLR_OLDTHL_Pos) /*!< 0x03FFFFFF */
#define MDF_OLDTHLR_OLDTHL                  MDF_OLDTHLR_OLDTHL_Msk                  /*!<OLD Low theshold value*/

/*******************  Bit definition for MDF/ADF_OLDxTHHR register  ********************/
#define MDF_OLDTHHR_OLDTHH_Pos              (0U)
#define MDF_OLDTHHR_OLDTHH_Msk              (0x3FFFFFFUL << MDF_OLDTHHR_OLDTHH_Pos) /*!< 0x03FFFFFF */
#define MDF_OLDTHHR_OLDTHH                  MDF_OLDTHHR_OLDTHH_Msk                  /*!<OLD High theshold value*/

/*******************  Bit definition for MDF/ADF_DLYxCR register  ********************/
#define MDF_DLYCR_SKPDLY_Pos                (0U)
#define MDF_DLYCR_SKPDLY_Msk                (0x7FUL << MDF_DLYCR_SKPDLY_Pos)        /*!< 0x0000007F */
#define MDF_DLYCR_SKPDLY                    MDF_DLYCR_SKPDLY_Msk                    /*!<Delay to apply to a bitstream*/
#define MDF_DLYCR_SKPBF_Pos                 (31U)
#define MDF_DLYCR_SKPBF_Msk                 (0x1UL << MDF_DLYCR_SKPBF_Pos)          /*!< 0x80000000 */
#define MDF_DLYCR_SKPBF                     MDF_DLYCR_SKPBF_Msk                     /*!<DSkip Busy Flag*/

/*******************  Bit definition for MDF/ADF_SCDxCR register  ********************/
#define MDF_SCDCR_SCDEN_Pos                 (0U)
#define MDF_SCDCR_SCDEN_Msk                 (0x1UL << MDF_SCDCR_SCDEN_Pos)          /*!< 0x00000001 */
#define MDF_SCDCR_SCDEN                     MDF_SCDCR_SCDEN_Msk                     /*!<Short circuit detector enable*/
#define MDF_SCDCR_BKSCD_Pos                 (4U)
#define MDF_SCDCR_BKSCD_Msk                 (0xFUL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x000000F0 */
#define MDF_SCDCR_BKSCD                     MDF_SCDCR_BKSCD_Msk                     /*!<Break signal assignement to short circuit detector */
#define MDF_SCDCR_BKSCD_0                   (0x1UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000010 */
#define MDF_SCDCR_BKSCD_1                   (0x2UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000020 */
#define MDF_SCDCR_BKSCD_2                   (0x4UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000040 */
#define MDF_SCDCR_BKSCD_3                   (0x8UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000080 */
#define MDF_SCDCR_SCDT_Pos                  (12U)
#define MDF_SCDCR_SCDT_Msk                  (0xFFUL << MDF_SCDCR_SCDT_Pos)          /*!< 0x00000FF00 */
#define MDF_SCDCR_SCDT                      MDF_SCDCR_SCDT_Msk                      /*!<Short circuit detector threshold*/
#define MDF_SCDCR_SCDACTIVE_Pos             (31U)
#define MDF_SCDCR_SCDACTIVE_Msk             (0x1UL << MDF_SCDCR_SCDACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_SCDCR_SCDACTIVE                 MDF_SCDCR_SCDACTIVE_Msk                 /*!<Short circuit detector active flag*/

/*******************  Bit definition for MDF/ADF_DFLTIER register  ********************/
#define MDF_DFLTIER_FTHIE_Pos               (0U)
#define MDF_DFLTIER_FTHIE_Msk               (0x1UL << MDF_DFLTIER_FTHIE_Pos)        /*!< 0x00000001 */
#define MDF_DFLTIER_FTHIE                   MDF_DFLTIER_FTHIE_Msk                   /*!<RXFIFO threshold interrupt enable*/
#define MDF_DFLTIER_DOVRIE_Pos              (1U)
#define MDF_DFLTIER_DOVRIE_Msk              (0x1UL << MDF_DFLTIER_DOVRIE_Pos)       /*!< 0x00000002 */
#define MDF_DFLTIER_DOVRIE                  MDF_DFLTIER_DOVRIE_Msk                  /*!<Data overflow interrupt enable*/
#define MDF_DFLTIER_SSDRIE_Pos              (2U)
#define MDF_DFLTIER_SSDRIE_Msk              (0x1UL << MDF_DFLTIER_SSDRIE_Pos)       /*!< 0x00000004 */
#define MDF_DFLTIER_SSDRIE                  MDF_DFLTIER_SSDRIE_Msk                  /*!<Snapshot data ready interrupt enable*/
#define MDF_DFLTIER_OLDIE_Pos               (4U)
#define MDF_DFLTIER_OLDIE_Msk               (0x1UL << MDF_DFLTIER_OLDIE_Pos)        /*!< 0x00000010 */
#define MDF_DFLTIER_OLDIE                   MDF_DFLTIER_OLDIE_Msk                   /*!<OLD interrupt enable*/
#define MDF_DFLTIER_SSOVRIE_Pos             (7U)
#define MDF_DFLTIER_SSOVRIE_Msk             (0x1UL << MDF_DFLTIER_SSOVRIE_Pos)      /*!< 0x00000080 */
#define MDF_DFLTIER_SSOVRIE                 MDF_DFLTIER_SSOVRIE_Msk                 /*!<Snapshot overrun interrupt enable*/
#define MDF_DFLTIER_SCDIE_Pos               (8U)
#define MDF_DFLTIER_SCDIE_Msk               (0x1UL << MDF_DFLTIER_SCDIE_Pos)        /*!< 0x00000100 */
#define MDF_DFLTIER_SCDIE                   MDF_DFLTIER_SCDIE_Msk                   /*!<Short circuit dtector interrupt enable*/
#define MDF_DFLTIER_SATIE_Pos               (9U)
#define MDF_DFLTIER_SATIE_Msk               (0x1UL << MDF_DFLTIER_SATIE_Pos)        /*!< 0x00000200 */
#define MDF_DFLTIER_SATIE                   MDF_DFLTIER_SATIE_Msk                   /*!<Saturation detection interrupt enable*/
#define MDF_DFLTIER_CKABIE_Pos              (10U)
#define MDF_DFLTIER_CKABIE_Msk              (0x1UL << MDF_DFLTIER_CKABIE_Pos)       /*!< 0x00000400 */
#define MDF_DFLTIER_CKABIE                  MDF_DFLTIER_CKABIE_Msk                  /*!<Clock absence detection interrupt enable*/
#define MDF_DFLTIER_RFOVRIE_Pos             (11U)
#define MDF_DFLTIER_RFOVRIE_Msk             (0x1UL << MDF_DFLTIER_RFOVRIE_Pos)      /*!< 0x00000800 */
#define MDF_DFLTIER_RFOVRIE                 MDF_DFLTIER_RFOVRIE_Msk                 /*!<reshape filter overrun interrupt enable*/
#define MDF_DFLTIER_SDDETIE_Pos             (12U)
#define MDF_DFLTIER_SDDETIE_Msk             (0x1UL << MDF_DFLTIER_SDDETIE_Pos)      /*!< 0x00001000 */
#define MDF_DFLTIER_SDDETIE                 MDF_DFLTIER_SDDETIE_Msk                 /*!<SAD interrupt enable*/
#define MDF_DFLTIER_SDLVLIE_Pos             (13U)
#define MDF_DFLTIER_SDLVLIE_Msk             (0x1UL << MDF_DFLTIER_SDLVLIE_Pos)      /*!< 0x00002000 */
#define MDF_DFLTIER_SDLVLIE                 MDF_DFLTIER_SDLVLIE_Msk                 /*!<Sound level value ready interrupt enable*/

/*******************  Bit definition for MDF/ADF_DFLTISR register  ********************/
#define MDF_DFLTISR_FTHF_Pos                (0U)
#define MDF_DFLTISR_FTHF_Msk                (0x1UL << MDF_DFLTISR_FTHF_Pos)         /*!< 0x00000001 */
#define MDF_DFLTISR_FTHF                    MDF_DFLTISR_FTHF_Msk                    /*!<RXFIFO threshold interrupt flag*/
#define MDF_DFLTISR_DOVRF_Pos               (1U)
#define MDF_DFLTISR_DOVRF_Msk               (0x1UL << MDF_DFLTISR_DOVRF_Pos)        /*!< 0x00000002 */
#define MDF_DFLTISR_DOVRF                   MDF_DFLTISR_DOVRF_Msk                   /*!<Data overflow interrupt flag*/
#define MDF_DFLTISR_SSDRF_Pos               (2U)
#define MDF_DFLTISR_SSDRF_Msk               (0x1UL << MDF_DFLTISR_SSDRF_Pos)        /*!< 0x00000004 */
#define MDF_DFLTISR_SSDRF                   MDF_DFLTISR_SSDRF_Msk                   /*!<Snapshot data ready interrupt flag*/
#define MDF_DFLTISR_RXNEF_Pos               (3U)
#define MDF_DFLTISR_RXNEF_Msk               (0x1UL << MDF_DFLTISR_RXNEF_Pos)        /*!< 0x00000008 */
#define MDF_DFLTISR_RXNEF                   MDF_DFLTISR_RXNEF_Msk                   /*!<Snapshot data ready interrupt flag*/
#define MDF_DFLTISR_OLDF_Pos                (4U)
#define MDF_DFLTISR_OLDF_Msk                (0x1UL << MDF_DFLTISR_OLDF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_OLDF                    MDF_DFLTISR_OLDF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_THLF_Pos                (5U)
#define MDF_DFLTISR_THLF_Msk                (0x1UL << MDF_DFLTISR_THLF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_THLF                    MDF_DFLTISR_THLF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_THHF_Pos                (6U)
#define MDF_DFLTISR_THHF_Msk                (0x1UL << MDF_DFLTISR_THHF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_THHF                    MDF_DFLTISR_THHF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_SSOVRF_Pos              (7U)
#define MDF_DFLTISR_SSOVRF_Msk              (0x1UL << MDF_DFLTISR_SSOVRF_Pos)      /*!< 0x00000080 */
#define MDF_DFLTISR_SSOVRF                  MDF_DFLTISR_SSOVRF_Msk                  /*!<Snapshot overrun interrupt flag*/
#define MDF_DFLTISR_SCDF_Pos                (8U)
#define MDF_DFLTISR_SCDF_Msk                (0x1UL << MDF_DFLTISR_SCDF_Pos)         /*!< 0x00000100 */
#define MDF_DFLTISR_SCDF                    MDF_DFLTISR_SCDF_Msk                    /*!<Short circuit dtector interrupt flag*/
#define MDF_DFLTISR_SATF_Pos                (9U)
#define MDF_DFLTISR_SATF_Msk                (0x1UL << MDF_DFLTISR_SATF_Pos)         /*!< 0x00000200 */
#define MDF_DFLTISR_SATF                    MDF_DFLTISR_SATF_Msk                    /*!<Saturation detection interrupt flag*/
#define MDF_DFLTISR_CKABF_Pos               (10U)
#define MDF_DFLTISR_CKABF_Msk               (0x1UL << MDF_DFLTISR_CKABF_Pos)        /*!< 0x00000400 */
#define MDF_DFLTISR_CKABF                   MDF_DFLTISR_CKABF_Msk                   /*!<Clock absence detection interrupt flag*/
#define MDF_DFLTISR_RFOVRF_Pos              (11U)
#define MDF_DFLTISR_RFOVRF_Msk              (0x1UL << MDF_DFLTISR_RFOVRF_Pos)       /*!< 0x00000800 */
#define MDF_DFLTISR_RFOVRF                  MDF_DFLTISR_RFOVRF_Msk                  /*!<reshape filter overrun interrupt flag*/
#define MDF_DFLTISR_SDDETF_Pos              (12U)
#define MDF_DFLTISR_SDDETF_Msk              (0x1UL << MDF_DFLTISR_SDDETF_Pos)        /*!< 0x00001000 */
#define MDF_DFLTISR_SDDETF                  MDF_DFLTISR_SDDETF_Msk                  /*!<SAD interrupt flag*/
#define MDF_DFLTISR_SDLVLF_Pos              (13U)
#define MDF_DFLTISR_SDLVLF_Msk              (0x1UL << MDF_DFLTISR_SDLVLF_Pos)       /*!< 0x00002000 */
#define MDF_DFLTISR_SDLVLF                  MDF_DFLTISR_SDLVLF_Msk                  /*!<Sound level value ready interrupt flag*/

/*******************  Bit definition for MDF/ADF_OECCR register  ********************/
#define MDF_OECCR_OFFSET_Pos                (0U)
#define MDF_OECCR_OFFSET_Msk                (0x3FFFFFFUL << MDF_OECCR_OFFSET_Pos)   /*!< 0x03FFFFFF */
#define MDF_OECCR_OFFSET                    MDF_OECCR_OFFSET_Msk                    /*!<Short circuit detector enable*/

/*******************  Bit definition for MDF/ADF_SADCR register  ********************/
#define MDF_SADCR_SADEN_Pos                 (0U)
#define MDF_SADCR_SADEN_Msk                 (0x1UL << MDF_SADCR_SADEN_Pos)          /*!< 0x00000001 */
#define MDF_SADCR_SADEN                     MDF_SADCR_SADEN_Msk                     /*!<SAD enable*/
#define MDF_SADCR_DATCAP_Pos                (1U)
#define MDF_SADCR_DATCAP_Msk                (0x3UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000003 */
#define MDF_SADCR_DATCAP                    MDF_SADCR_DATCAP_Msk                    /*!<SAD data capture mode*/
#define MDF_SADCR_DATCAP_0                  (0x1UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000002 */
#define MDF_SADCR_DATCAP_1                  (0x2UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000004 */
#define MDF_SADCR_DETCFG_Pos                (3U)
#define MDF_SADCR_DETCFG_Msk                (0x1UL << MDF_SADCR_DETCFG_Pos)         /*!< 0x00000008 */
#define MDF_SADCR_DETCFG                    MDF_SADCR_DETCFG_Msk                    /*!<SAD trigger event configuration*/
#define MDF_SADCR_SADST_Pos                 (4U)
#define MDF_SADCR_SADST_Msk                 (0x3UL << MDF_SADCR_SADST_Pos)          /*!< 0x00000030 */
#define MDF_SADCR_SADST                     MDF_SADCR_SADST_Msk                     /*!<SAD state*/
#define MDF_SADCR_HYSTEN_Pos                (7U)
#define MDF_SADCR_HYSTEN_Msk                (0x1UL << MDF_SADCR_HYSTEN_Pos)         /*!< 0x00000080 */
#define MDF_SADCR_HYSTEN                    MDF_SADCR_HYSTEN_Msk                    /*!<Hysteresis enable*/
#define MDF_SADCR_FRSIZE_Pos                (8U)
#define MDF_SADCR_FRSIZE_Msk                (0x7UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000700 */
#define MDF_SADCR_FRSIZE                    MDF_SADCR_FRSIZE_Msk                    /*!<Frame size*/
#define MDF_SADCR_FRSIZE_0                  (0x1UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000100 */
#define MDF_SADCR_FRSIZE_1                  (0x2UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000200 */
#define MDF_SADCR_FRSIZE_2                  (0x4UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000300 */
#define MDF_SADCR_SADMOD_Pos                (12U)
#define MDF_SADCR_SADMOD_Msk                (0x3UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00003000 */
#define MDF_SADCR_SADMOD                    MDF_SADCR_SADMOD_Msk                    /*!<SAD working mode*/
#define MDF_SADCR_SADMOD_0                  (0x1UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00001000 */
#define MDF_SADCR_SADMOD_1                  (0x2UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00002000 */
#define MDF_SADCR_SADACTIVE_Pos             (31U)
#define MDF_SADCR_SADACTIVE_Msk             (0x1UL << MDF_SADCR_SADACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_SADCR_SADACTIVE                 MDF_SADCR_SADACTIVE_Msk                 /*!<SAD active flag*/

/*******************  Bit definition for MDF/ADF_SADCFGR register  ********************/
#define MDF_SADCFGR_SNTHR_Pos               (0U)
#define MDF_SADCFGR_SNTHR_Msk               (0xFUL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x0000000F */
#define MDF_SADCFGR_SNTHR                   MDF_SADCFGR_SNTHR_Msk                   /*!<Signal to noise threshold*/
#define MDF_SADCFGR_SNTHR_0                 (0x1UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000001 */
#define MDF_SADCFGR_SNTHR_1                 (0x2UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000002 */
#define MDF_SADCFGR_SNTHR_2                 (0x4UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000004 */
#define MDF_SADCFGR_SNTHR_3                 (0x8UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000008 */
#define MDF_SADCFGR_ANSLP_Pos               (4U)
#define MDF_SADCFGR_ANSLP_Msk               (0x7UL << MDF_SADCFGR_ANSLP_Pos)        /*!< 0x00000070 */
#define MDF_SADCFGR_ANSLP                   MDF_SADCFGR_ANSLP_Msk                   /*!<Ambiant noise slope control*/
#define MDF_SADCFGR_LFRNB_Pos               (8U)
#define MDF_SADCFGR_LFRNB_Msk               (0x7UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000700 */
#define MDF_SADCFGR_LFRNB                   MDF_SADCFGR_LFRNB_Msk                   /*!<Number of learning frames*/
#define MDF_SADCFGR_LFRNB_0                 (0x1UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000100 */
#define MDF_SADCFGR_LFRNB_1                 (0x2UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000200 */
#define MDF_SADCFGR_LFRNB_2                 (0x4UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000400 */
#define MDF_SADCFGR_HGOVR_Pos               (12U)
#define MDF_SADCFGR_HGOVR_Msk               (0x7UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00007000 */
#define MDF_SADCFGR_HGOVR                   MDF_SADCFGR_HGOVR_Msk                   /*!<Hangover time window*/
#define MDF_SADCFGR_HGOVR_0                 (0x1UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00001000 */
#define MDF_SADCFGR_HGOVR_1                 (0x2UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00002000 */
#define MDF_SADCFGR_HGOVR_2                 (0x4UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00004000 */
#define MDF_SADCFGR_ANMIN_Pos               (16U)
#define MDF_SADCFGR_ANMIN_Msk               (0x1FFFUL << MDF_SADCFGR_ANMIN_Pos)     /*!< 0x1FFF0000 */
#define MDF_SADCFGR_ANMIN                   MDF_SADCFGR_ANMIN_Msk                   /*!<Hangover time window*/

/*******************  Bit definition for MDF/ADF_SADSDLVR register  ********************/
#define MDF_SADSDLVR_SDLVL_Pos              (0U)
#define MDF_SADSDLVR_SDLVL_Msk              (0x7FFFUL << MDF_SADSDLVR_SDLVL_Pos)    /*!< 0x00007FFF */
#define MDF_SADSDLVR_SDLVL                  MDF_SADSDLVR_SDLVL_Msk                  /*!<Short term sound level*/

/*******************  Bit definition for MDF/ADF_SADANLVR register  ********************/
#define MDF_SADANLVR_ANLVL_Pos              (0U)
#define MDF_SADANLVR_ANLVL_Msk              (0x7FFFUL << MDF_SADANLVR_ANLVL_Pos)    /*!< 0x00007FFF */
#define MDF_SADANLVR_ANLVL                  MDF_SADANLVR_ANLVL_Msk                  /*!<Ambiant noise level estimation*/

/*******************  Bit definition for MDF/ADF_SNPSDR register  ********************/
#define MDF_SNPSDR_MCICDC_Pos               (0U)
#define MDF_SNPSDR_MCICDC_Msk               (0x1FFUL << MDF_SNPSDR_MCICDC_Pos)      /*!< 0x000001FF */
#define MDF_SNPSDR_MCICDC                   MDF_SNPSDR_MCICDC_Msk                   /*!<MCIC decimation counter*/
#define MDF_SNPSDR_EXTSDR_Pos               (9U)
#define MDF_SNPSDR_EXTSDR_Msk               (0x7FUL << MDF_SNPSDR_EXTSDR_Pos)       /*!< 0x0000FE00 */
#define MDF_SNPSDR_EXTSDR                   MDF_SNPSDR_EXTSDR_Msk                   /*!<Extended data size*/
#define MDF_SNPSDR_SDR_Pos                  (16U)
#define MDF_SNPSDR_SDR_Msk                  (0xFFFFUL << MDF_SNPSDR_SDR_Pos)        /*!< 0xFFFF0000 */
#define MDF_SNPSDR_SDR                      MDF_SNPSDR_SDR_Msk                      /*!<Extended data size*/

/*******************  Bit definition for MDF/ADF_DFLTDR register  ********************/
#define MDF_DFLTDR_DR_Pos                   (8U)
#define MDF_DFLTDR_DR_Msk                   (0xFFFFFFUL << MDF_DFLTDR_DR_Pos)       /*!< 0xFFFFFF00 */
#define MDF_DFLTDR_DR                       MDF_DFLTDR_DR_Msk                       /*!<MCIC decimation counter*/

/******************************************************************************/
/*                                                                            */
/*                                    OCTOSPI                                 */
/*                                                                            */
/******************************************************************************/
/*****************  Bit definition for OCTOSPI_CR register  *******************/
#define OCTOSPI_CR_EN_Pos              (0U)
#define OCTOSPI_CR_EN_Msk              (0x1UL << OCTOSPI_CR_EN_Pos)             /*!< 0x00000001 */
#define OCTOSPI_CR_EN                  OCTOSPI_CR_EN_Msk                       /*!< Enable */
#define OCTOSPI_CR_ABORT_Pos           (1U)
#define OCTOSPI_CR_ABORT_Msk           (0x1UL << OCTOSPI_CR_ABORT_Pos)          /*!< 0x00000002 */
#define OCTOSPI_CR_ABORT               OCTOSPI_CR_ABORT_Msk                    /*!< Abort request */
#define OCTOSPI_CR_DMAEN_Pos           (2U)
#define OCTOSPI_CR_DMAEN_Msk           (0x1UL << OCTOSPI_CR_DMAEN_Pos)          /*!< 0x00000004 */
#define OCTOSPI_CR_DMAEN               OCTOSPI_CR_DMAEN_Msk                    /*!< DMA Enable */
#define OCTOSPI_CR_TCEN_Pos            (3U)
#define OCTOSPI_CR_TCEN_Msk            (0x1UL << OCTOSPI_CR_TCEN_Pos)           /*!< 0x00000008 */
#define OCTOSPI_CR_TCEN                OCTOSPI_CR_TCEN_Msk                     /*!< Timeout Counter Enable */
#define OCTOSPI_CR_DMM_Pos             (6U)
#define OCTOSPI_CR_DMM_Msk             (0x1UL << OCTOSPI_CR_DMM_Pos)            /*!< 0x00000040 */
#define OCTOSPI_CR_DMM                 OCTOSPI_CR_DMM_Msk                      /*!< Dual-Quad Mode */
#define OCTOSPI_CR_MSEL_Pos            (7U)
#define OCTOSPI_CR_MSEL_Msk            (0x1UL << OCTOSPI_CR_MSEL_Pos)           /*!< 0x00000080 */
#define OCTOSPI_CR_MSEL                OCTOSPI_CR_MSEL_Msk                     /*!< Flash Select */
#define OCTOSPI_CR_FTHRES_Pos          (8U)
#define OCTOSPI_CR_FTHRES_Msk          (0x1FUL << OCTOSPI_CR_FTHRES_Pos)        /*!< 0x00001F00 */
#define OCTOSPI_CR_FTHRES              OCTOSPI_CR_FTHRES_Msk                   /*!< FIFO Threshold Level */
#define OCTOSPI_CR_TEIE_Pos            (16U)
#define OCTOSPI_CR_TEIE_Msk            (0x1UL << OCTOSPI_CR_TEIE_Pos)           /*!< 0x00010000 */
#define OCTOSPI_CR_TEIE                OCTOSPI_CR_TEIE_Msk                     /*!< Transfer Error Interrupt Enable */
#define OCTOSPI_CR_TCIE_Pos            (17U)
#define OCTOSPI_CR_TCIE_Msk            (0x1UL << OCTOSPI_CR_TCIE_Pos)           /*!< 0x00020000 */
#define OCTOSPI_CR_TCIE                OCTOSPI_CR_TCIE_Msk                     /*!< Transfer Complete Interrupt Enable */
#define OCTOSPI_CR_FTIE_Pos            (18U)
#define OCTOSPI_CR_FTIE_Msk            (0x1UL << OCTOSPI_CR_FTIE_Pos)           /*!< 0x00040000 */
#define OCTOSPI_CR_FTIE                OCTOSPI_CR_FTIE_Msk                     /*!< FIFO Threshold Interrupt Enable */
#define OCTOSPI_CR_SMIE_Pos            (19U)
#define OCTOSPI_CR_SMIE_Msk            (0x1UL << OCTOSPI_CR_SMIE_Pos)           /*!< 0x00080000 */
#define OCTOSPI_CR_SMIE                OCTOSPI_CR_SMIE_Msk                     /*!< Status Match Interrupt Enable */
#define OCTOSPI_CR_TOIE_Pos            (20U)
#define OCTOSPI_CR_TOIE_Msk            (0x1UL << OCTOSPI_CR_TOIE_Pos)           /*!< 0x00100000 */
#define OCTOSPI_CR_TOIE                OCTOSPI_CR_TOIE_Msk                     /*!< TimeOut Interrupt Enable */
#define OCTOSPI_CR_APMS_Pos            (22U)
#define OCTOSPI_CR_APMS_Msk            (0x1UL << OCTOSPI_CR_APMS_Pos)           /*!< 0x00400000 */
#define OCTOSPI_CR_APMS                OCTOSPI_CR_APMS_Msk                     /*!< Automatic Poll Mode Stop */
#define OCTOSPI_CR_PMM_Pos             (23U)
#define OCTOSPI_CR_PMM_Msk             (0x1UL << OCTOSPI_CR_PMM_Pos)            /*!< 0x00800000 */
#define OCTOSPI_CR_PMM                 OCTOSPI_CR_PMM_Msk                      /*!< Polling Match Mode */
#define OCTOSPI_CR_CSSEL_Pos           (24U)
#define OCTOSPI_CR_CSSEL_Msk           (0x1UL << OCTOSPI_CR_CSSEL_Pos)          /*!< 0x01000000 */
#define OCTOSPI_CR_CSSEL               OCTOSPI_CR_CSSEL_Msk                    /*!< Chip select selection */
#define OCTOSPI_CR_FMODE_Pos           (28U)
#define OCTOSPI_CR_FMODE_Msk           (0x3UL << OCTOSPI_CR_FMODE_Pos)          /*!< 0x30000000 */
#define OCTOSPI_CR_FMODE               OCTOSPI_CR_FMODE_Msk                    /*!< Functional Mode */
#define OCTOSPI_CR_FMODE_0             (0x1UL << OCTOSPI_CR_FMODE_Pos)          /*!< 0x10000000 */
#define OCTOSPI_CR_FMODE_1             (0x2UL << OCTOSPI_CR_FMODE_Pos)          /*!< 0x20000000 */

/****************  Bit definition for OCTOSPI_DCR1 register  ******************/
#define OCTOSPI_DCR1_CKMODE_Pos        (0U)
#define OCTOSPI_DCR1_CKMODE_Msk        (0x1UL << OCTOSPI_DCR1_CKMODE_Pos)       /*!< 0x00000001 */
#define OCTOSPI_DCR1_CKMODE            OCTOSPI_DCR1_CKMODE_Msk                 /*!< Mode 0 / Mode 3 */
#define OCTOSPI_DCR1_FRCK_Pos          (1U)
#define OCTOSPI_DCR1_FRCK_Msk          (0x1UL << OCTOSPI_DCR1_FRCK_Pos)         /*!< 0x00000002 */
#define OCTOSPI_DCR1_FRCK              OCTOSPI_DCR1_FRCK_Msk                   /*!< Free Running Clock */
#define OCTOSPI_DCR1_DLYBYP_Pos        (3U)
#define OCTOSPI_DCR1_DLYBYP_Msk        (0x1UL << OCTOSPI_DCR1_DLYBYP_Pos)       /*!< 0x00000008 */
#define OCTOSPI_DCR1_DLYBYP            OCTOSPI_DCR1_DLYBYP_Msk                 /*!< Delay Block */
#define OCTOSPI_DCR1_CSHT_Pos          (8U)
#define OCTOSPI_DCR1_CSHT_Msk          (0x7UL << OCTOSPI_DCR1_CSHT_Pos)         /*!< 0x00000700 */
#define OCTOSPI_DCR1_CSHT              OCTOSPI_DCR1_CSHT_Msk                   /*!< Chip Select High Time */
#define OCTOSPI_DCR1_DEVSIZE_Pos       (16U)
#define OCTOSPI_DCR1_DEVSIZE_Msk       (0x1FUL << OCTOSPI_DCR1_DEVSIZE_Pos)     /*!< 0x001F0000 */
#define OCTOSPI_DCR1_DEVSIZE           OCTOSPI_DCR1_DEVSIZE_Msk                /*!< Device Size */
#define OCTOSPI_DCR1_MTYP_Pos          (24U)
#define OCTOSPI_DCR1_MTYP_Msk          (0x7UL << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x07000000 */
#define OCTOSPI_DCR1_MTYP              OCTOSPI_DCR1_MTYP_Msk                   /*!< Memory Type */
#define OCTOSPI_DCR1_MTYP_0            (0x1UL << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x01000000 */
#define OCTOSPI_DCR1_MTYP_1            (0x2UL << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x02000000 */
#define OCTOSPI_DCR1_MTYP_2            (0x4UL << OCTOSPI_DCR1_MTYP_Pos)         /*!< 0x04000000 */

/****************  Bit definition for OCTOSPI_DCR2 register  ******************/
#define OCTOSPI_DCR2_PRESCALER_Pos     (0U)
#define OCTOSPI_DCR2_PRESCALER_Msk     (0xFFUL << OCTOSPI_DCR2_PRESCALER_Pos)   /*!< 0x000000FF */
#define OCTOSPI_DCR2_PRESCALER         OCTOSPI_DCR2_PRESCALER_Msk              /*!< Clock prescaler */
#define OCTOSPI_DCR2_WRAPSIZE_Pos      (16U)
#define OCTOSPI_DCR2_WRAPSIZE_Msk      (0x7UL << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00070000 */
#define OCTOSPI_DCR2_WRAPSIZE          OCTOSPI_DCR2_WRAPSIZE_Msk               /*!< Wrap Size */
#define OCTOSPI_DCR2_WRAPSIZE_0        (0x1UL << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00010000 */
#define OCTOSPI_DCR2_WRAPSIZE_1        (0x2UL << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00020000 */
#define OCTOSPI_DCR2_WRAPSIZE_2        (0x4UL << OCTOSPI_DCR2_WRAPSIZE_Pos)     /*!< 0x00040000 */

/****************  Bit definition for OCTOSPI_DCR3 register  ******************/
#define OCTOSPI_DCR3_CSBOUND_Pos       (16U)
#define OCTOSPI_DCR3_CSBOUND_Msk       (0x1FUL << OCTOSPI_DCR3_CSBOUND_Pos)     /*!< 0x001F0000 */
#define OCTOSPI_DCR3_CSBOUND           OCTOSPI_DCR3_CSBOUND_Msk                /*!< Maximum transfer */
#define OCTOSPI_DCR3_MAXTRAN_Pos       (0U)
#define OCTOSPI_DCR3_MAXTRAN_Msk       (0xFFUL << OCTOSPI_DCR3_MAXTRAN_Pos)     /*!< 0x000000FF */
#define OCTOSPI_DCR3_MAXTRAN           OCTOSPI_DCR3_MAXTRAN_Msk                /*!< Maximum transfer */

/****************  Bit definition for OCTOSPI_DCR4 register  ******************/
#define OCTOSPI_DCR4_REFRESH_Pos       (0U)
#define OCTOSPI_DCR4_REFRESH_Msk       (0xFFFFFFFFUL << OCTOSPI_DCR4_REFRESH_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_DCR4_REFRESH           OCTOSPI_DCR4_REFRESH_Msk                /*!< Refresh rate */

/*****************  Bit definition for OCTOSPI_SR register  *******************/
#define OCTOSPI_SR_TEF_Pos             (0U)
#define OCTOSPI_SR_TEF_Msk             (0x1UL << OCTOSPI_SR_TEF_Pos)            /*!< 0x00000001 */
#define OCTOSPI_SR_TEF                 OCTOSPI_SR_TEF_Msk                      /*!< Transfer Error Flag */
#define OCTOSPI_SR_TCF_Pos             (1U)
#define OCTOSPI_SR_TCF_Msk             (0x1UL << OCTOSPI_SR_TCF_Pos)            /*!< 0x00000002 */
#define OCTOSPI_SR_TCF                 OCTOSPI_SR_TCF_Msk                      /*!< Transfer Complete Flag */
#define OCTOSPI_SR_FTF_Pos             (2U)
#define OCTOSPI_SR_FTF_Msk             (0x1UL << OCTOSPI_SR_FTF_Pos)            /*!< 0x00000004 */
#define OCTOSPI_SR_FTF                 OCTOSPI_SR_FTF_Msk                      /*!< FIFO Threshold Flag */
#define OCTOSPI_SR_SMF_Pos             (3U)
#define OCTOSPI_SR_SMF_Msk             (0x1UL << OCTOSPI_SR_SMF_Pos)            /*!< 0x00000008 */
#define OCTOSPI_SR_SMF                 OCTOSPI_SR_SMF_Msk                      /*!< Status Match Flag */
#define OCTOSPI_SR_TOF_Pos             (4U)
#define OCTOSPI_SR_TOF_Msk             (0x1UL << OCTOSPI_SR_TOF_Pos)            /*!< 0x00000010 */
#define OCTOSPI_SR_TOF                 OCTOSPI_SR_TOF_Msk                      /*!< Timeout Flag */
#define OCTOSPI_SR_BUSY_Pos            (5U)
#define OCTOSPI_SR_BUSY_Msk            (0x1UL << OCTOSPI_SR_BUSY_Pos)           /*!< 0x00000020 */
#define OCTOSPI_SR_BUSY                OCTOSPI_SR_BUSY_Msk                     /*!< Busy */
#define OCTOSPI_SR_FLEVEL_Pos          (8U)
#define OCTOSPI_SR_FLEVEL_Msk          (0x3FUL << OCTOSPI_SR_FLEVEL_Pos)        /*!< 0x00003F00 */
#define OCTOSPI_SR_FLEVEL              OCTOSPI_SR_FLEVEL_Msk                   /*!< FIFO Level */

/****************  Bit definition for OCTOSPI_FCR register  *******************/
#define OCTOSPI_FCR_CTEF_Pos           (0U)
#define OCTOSPI_FCR_CTEF_Msk           (0x1UL << OCTOSPI_FCR_CTEF_Pos)          /*!< 0x00000001 */
#define OCTOSPI_FCR_CTEF               OCTOSPI_FCR_CTEF_Msk                    /*!< Clear Transfer Error Flag */
#define OCTOSPI_FCR_CTCF_Pos           (1U)
#define OCTOSPI_FCR_CTCF_Msk           (0x1UL << OCTOSPI_FCR_CTCF_Pos)          /*!< 0x00000002 */
#define OCTOSPI_FCR_CTCF               OCTOSPI_FCR_CTCF_Msk                    /*!< Clear Transfer Complete Flag */
#define OCTOSPI_FCR_CSMF_Pos           (3U)
#define OCTOSPI_FCR_CSMF_Msk           (0x1UL << OCTOSPI_FCR_CSMF_Pos)          /*!< 0x00000008 */
#define OCTOSPI_FCR_CSMF               OCTOSPI_FCR_CSMF_Msk                    /*!< Clear Status Match Flag */
#define OCTOSPI_FCR_CTOF_Pos           (4U)
#define OCTOSPI_FCR_CTOF_Msk           (0x1UL << OCTOSPI_FCR_CTOF_Pos)          /*!< 0x00000010 */
#define OCTOSPI_FCR_CTOF               OCTOSPI_FCR_CTOF_Msk                    /*!< Clear Timeout Flag */

/****************  Bit definition for OCTOSPI_DLR register  *******************/
#define OCTOSPI_DLR_DL_Pos             (0U)
#define OCTOSPI_DLR_DL_Msk             (0xFFFFFFFFUL << OCTOSPI_DLR_DL_Pos)     /*!< 0xFFFFFFFF */
#define OCTOSPI_DLR_DL                 OCTOSPI_DLR_DL_Msk                      /*!< Data Length */

/*****************  Bit definition for OCTOSPI_AR register  *******************/
#define OCTOSPI_AR_ADDRESS_Pos         (0U)
#define OCTOSPI_AR_ADDRESS_Msk         (0xFFFFFFFFUL << OCTOSPI_AR_ADDRESS_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_AR_ADDRESS             OCTOSPI_AR_ADDRESS_Msk                  /*!< Address */

/*****************  Bit definition for OCTOSPI_DR register  *******************/
#define OCTOSPI_DR_DATA_Pos            (0U)
#define OCTOSPI_DR_DATA_Msk            (0xFFFFFFFFUL << OCTOSPI_DR_DATA_Pos)    /*!< 0xFFFFFFFF */
#define OCTOSPI_DR_DATA                OCTOSPI_DR_DATA_Msk                     /*!< Data */

/***************  Bit definition for OCTOSPI_PSMKR register  ******************/
#define OCTOSPI_PSMKR_MASK_Pos         (0U)
#define OCTOSPI_PSMKR_MASK_Msk         (0xFFFFFFFFUL << OCTOSPI_PSMKR_MASK_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_PSMKR_MASK             OCTOSPI_PSMKR_MASK_Msk                  /*!< Status mask */

/***************  Bit definition for OCTOSPI_PSMAR register  ******************/
#define OCTOSPI_PSMAR_MATCH_Pos        (0U)
#define OCTOSPI_PSMAR_MATCH_Msk        (0xFFFFFFFFUL << OCTOSPI_PSMAR_MATCH_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_PSMAR_MATCH            OCTOSPI_PSMAR_MATCH_Msk                 /*!< Status match */

/****************  Bit definition for OCTOSPI_PIR register  *******************/
#define OCTOSPI_PIR_INTERVAL_Pos       (0U)
#define OCTOSPI_PIR_INTERVAL_Msk       (0xFFFFUL << OCTOSPI_PIR_INTERVAL_Pos)   /*!< 0x0000FFFF */
#define OCTOSPI_PIR_INTERVAL           OCTOSPI_PIR_INTERVAL_Msk                /*!< Polling Interval */

/****************  Bit definition for OCTOSPI_CCR register  *******************/
#define OCTOSPI_CCR_IMODE_Pos          (0U)
#define OCTOSPI_CCR_IMODE_Msk          (0x7UL << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000007 */
#define OCTOSPI_CCR_IMODE              OCTOSPI_CCR_IMODE_Msk                   /*!< Instruction Mode */
#define OCTOSPI_CCR_IMODE_0            (0x1UL << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000001 */
#define OCTOSPI_CCR_IMODE_1            (0x2UL << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000002 */
#define OCTOSPI_CCR_IMODE_2            (0x4UL << OCTOSPI_CCR_IMODE_Pos)         /*!< 0x00000004 */
#define OCTOSPI_CCR_IDTR_Pos           (3U)
#define OCTOSPI_CCR_IDTR_Msk           (0x1UL << OCTOSPI_CCR_IDTR_Pos)          /*!< 0x00000008 */
#define OCTOSPI_CCR_IDTR               OCTOSPI_CCR_IDTR_Msk                    /*!< Instruction Double Transfer Rate */
#define OCTOSPI_CCR_ISIZE_Pos          (4U)
#define OCTOSPI_CCR_ISIZE_Msk          (0x3UL << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000030 */
#define OCTOSPI_CCR_ISIZE              OCTOSPI_CCR_ISIZE_Msk                   /*!< Instruction Size */
#define OCTOSPI_CCR_ISIZE_0            (0x1UL << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000010 */
#define OCTOSPI_CCR_ISIZE_1            (0x2UL << OCTOSPI_CCR_ISIZE_Pos)         /*!< 0x00000020 */
#define OCTOSPI_CCR_ADMODE_Pos         (8U)
#define OCTOSPI_CCR_ADMODE_Msk         (0x7UL << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000700 */
#define OCTOSPI_CCR_ADMODE             OCTOSPI_CCR_ADMODE_Msk                  /*!< Address Mode */
#define OCTOSPI_CCR_ADMODE_0           (0x1UL << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000100 */
#define OCTOSPI_CCR_ADMODE_1           (0x2UL << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000200 */
#define OCTOSPI_CCR_ADMODE_2           (0x4UL << OCTOSPI_CCR_ADMODE_Pos)        /*!< 0x00000400 */
#define OCTOSPI_CCR_ADDTR_Pos          (11U)
#define OCTOSPI_CCR_ADDTR_Msk          (0x1UL << OCTOSPI_CCR_ADDTR_Pos)         /*!< 0x00000800 */
#define OCTOSPI_CCR_ADDTR              OCTOSPI_CCR_ADDTR_Msk                   /*!< Address Double Transfer Rate */
#define OCTOSPI_CCR_ADSIZE_Pos         (12U)
#define OCTOSPI_CCR_ADSIZE_Msk         (0x3UL << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00003000 */
#define OCTOSPI_CCR_ADSIZE             OCTOSPI_CCR_ADSIZE_Msk                  /*!< Address Size */
#define OCTOSPI_CCR_ADSIZE_0           (0x1UL << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00001000 */
#define OCTOSPI_CCR_ADSIZE_1           (0x2UL << OCTOSPI_CCR_ADSIZE_Pos)        /*!< 0x00002000 */
#define OCTOSPI_CCR_ABMODE_Pos         (16U)
#define OCTOSPI_CCR_ABMODE_Msk         (0x7UL << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00070000 */
#define OCTOSPI_CCR_ABMODE             OCTOSPI_CCR_ABMODE_Msk                  /*!< Alternate Bytes Mode */
#define OCTOSPI_CCR_ABMODE_0           (0x1UL << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00010000 */
#define OCTOSPI_CCR_ABMODE_1           (0x2UL << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00020000 */
#define OCTOSPI_CCR_ABMODE_2           (0x4UL << OCTOSPI_CCR_ABMODE_Pos)        /*!< 0x00040000 */
#define OCTOSPI_CCR_ABDTR_Pos          (19U)
#define OCTOSPI_CCR_ABDTR_Msk          (0x1UL << OCTOSPI_CCR_ABDTR_Pos)         /*!< 0x00080000 */
#define OCTOSPI_CCR_ABDTR              OCTOSPI_CCR_ABDTR_Msk                   /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_CCR_ABSIZE_Pos         (20U)
#define OCTOSPI_CCR_ABSIZE_Msk         (0x3UL << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00300000 */
#define OCTOSPI_CCR_ABSIZE             OCTOSPI_CCR_ABSIZE_Msk                  /*!< Alternate Bytes Size */
#define OCTOSPI_CCR_ABSIZE_0           (0x1UL << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00100000 */
#define OCTOSPI_CCR_ABSIZE_1           (0x2UL << OCTOSPI_CCR_ABSIZE_Pos)        /*!< 0x00200000 */
#define OCTOSPI_CCR_DMODE_Pos          (24U)
#define OCTOSPI_CCR_DMODE_Msk          (0x7UL << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x07000000 */
#define OCTOSPI_CCR_DMODE              OCTOSPI_CCR_DMODE_Msk                   /*!< Data Mode */
#define OCTOSPI_CCR_DMODE_0            (0x1UL << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x01000000 */
#define OCTOSPI_CCR_DMODE_1            (0x2UL << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x02000000 */
#define OCTOSPI_CCR_DMODE_2            (0x4UL << OCTOSPI_CCR_DMODE_Pos)         /*!< 0x04000000 */
#define OCTOSPI_CCR_DDTR_Pos           (27U)
#define OCTOSPI_CCR_DDTR_Msk           (0x1UL << OCTOSPI_CCR_DDTR_Pos)          /*!< 0x08000000 */
#define OCTOSPI_CCR_DDTR               OCTOSPI_CCR_DDTR_Msk                    /*!< Data Double Transfer Rate */
#define OCTOSPI_CCR_DQSE_Pos           (29U)
#define OCTOSPI_CCR_DQSE_Msk           (0x1UL << OCTOSPI_CCR_DQSE_Pos)          /*!< 0x20000000 */
#define OCTOSPI_CCR_DQSE               OCTOSPI_CCR_DQSE_Msk                    /*!< DQS Enable */
#define OCTOSPI_CCR_SIOO_Pos           (31U)
#define OCTOSPI_CCR_SIOO_Msk           (0x1UL << OCTOSPI_CCR_SIOO_Pos)          /*!< 0x80000000 */
#define OCTOSPI_CCR_SIOO               OCTOSPI_CCR_SIOO_Msk                    /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_TCR register  *******************/
#define OCTOSPI_TCR_DCYC_Pos           (0U)
#define OCTOSPI_TCR_DCYC_Msk           (0x1FUL << OCTOSPI_TCR_DCYC_Pos)         /*!< 0x0000001F */
#define OCTOSPI_TCR_DCYC               OCTOSPI_TCR_DCYC_Msk                    /*!< Number of Dummy Cycles */
#define OCTOSPI_TCR_DHQC_Pos           (28U)
#define OCTOSPI_TCR_DHQC_Msk           (0x1UL << OCTOSPI_TCR_DHQC_Pos)          /*!< 0x10000000 */
#define OCTOSPI_TCR_DHQC               OCTOSPI_TCR_DHQC_Msk                    /*!< Delay Hold Quarter Cycle */
#define OCTOSPI_TCR_SSHIFT_Pos         (30U)
#define OCTOSPI_TCR_SSHIFT_Msk         (0x1UL << OCTOSPI_TCR_SSHIFT_Pos)        /*!< 0x40000000 */
#define OCTOSPI_TCR_SSHIFT             OCTOSPI_TCR_SSHIFT_Msk                  /*!< Sample Shift */

/*****************  Bit definition for OCTOSPI_IR register  *******************/
#define OCTOSPI_IR_INSTRUCTION_Pos     (0U)
#define OCTOSPI_IR_INSTRUCTION_Msk     (0xFFFFFFFFUL << OCTOSPI_IR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_IR_INSTRUCTION         OCTOSPI_IR_INSTRUCTION_Msk              /*!< Instruction */

/****************  Bit definition for OCTOSPI_ABR register  *******************/
#define OCTOSPI_ABR_ALTERNATE_Pos      (0U)
#define OCTOSPI_ABR_ALTERNATE_Msk      (0xFFFFFFFFUL << OCTOSPI_ABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_ABR_ALTERNATE          OCTOSPI_ABR_ALTERNATE_Msk               /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_LPTR register  ******************/
#define OCTOSPI_LPTR_TIMEOUT_Pos       (0U)
#define OCTOSPI_LPTR_TIMEOUT_Msk       (0xFFFFUL << OCTOSPI_LPTR_TIMEOUT_Pos)   /*!< 0x0000FFFF */
#define OCTOSPI_LPTR_TIMEOUT           OCTOSPI_LPTR_TIMEOUT_Msk                /*!< Timeout period */

/****************  Bit definition for OCTOSPI_WPCCR register  *******************/
#define OCTOSPI_WPCCR_IMODE_Pos        (0U)
#define OCTOSPI_WPCCR_IMODE_Msk        (0x7UL << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000007 */
#define OCTOSPI_WPCCR_IMODE            OCTOSPI_WPCCR_IMODE_Msk                 /*!< Instruction Mode */
#define OCTOSPI_WPCCR_IMODE_0          (0x1UL << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000001 */
#define OCTOSPI_WPCCR_IMODE_1          (0x2UL << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000002 */
#define OCTOSPI_WPCCR_IMODE_2          (0x4UL << OCTOSPI_WPCCR_IMODE_Pos)       /*!< 0x00000004 */
#define OCTOSPI_WPCCR_IDTR_Pos         (3U)
#define OCTOSPI_WPCCR_IDTR_Msk         (0x1UL << OCTOSPI_WPCCR_IDTR_Pos)        /*!< 0x00000008 */
#define OCTOSPI_WPCCR_IDTR             OCTOSPI_WPCCR_IDTR_Msk                  /*!< Instruction Double Transfer Rate */
#define OCTOSPI_WPCCR_ISIZE_Pos        (4U)
#define OCTOSPI_WPCCR_ISIZE_Msk        (0x3UL << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000030 */
#define OCTOSPI_WPCCR_ISIZE            OCTOSPI_WPCCR_ISIZE_Msk                 /*!< Instruction Size */
#define OCTOSPI_WPCCR_ISIZE_0          (0x1UL << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000010 */
#define OCTOSPI_WPCCR_ISIZE_1          (0x2UL << OCTOSPI_WPCCR_ISIZE_Pos)       /*!< 0x00000020 */
#define OCTOSPI_WPCCR_ADMODE_Pos       (8U)
#define OCTOSPI_WPCCR_ADMODE_Msk       (0x7UL << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000700 */
#define OCTOSPI_WPCCR_ADMODE           OCTOSPI_WPCCR_ADMODE_Msk                /*!< Address Mode */
#define OCTOSPI_WPCCR_ADMODE_0         (0x1UL << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000100 */
#define OCTOSPI_WPCCR_ADMODE_1         (0x2UL << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000200 */
#define OCTOSPI_WPCCR_ADMODE_2         (0x4UL << OCTOSPI_WPCCR_ADMODE_Pos)      /*!< 0x00000400 */
#define OCTOSPI_WPCCR_ADDTR_Pos        (11U)
#define OCTOSPI_WPCCR_ADDTR_Msk        (0x1UL << OCTOSPI_WPCCR_ADDTR_Pos)       /*!< 0x00000800 */
#define OCTOSPI_WPCCR_ADDTR            OCTOSPI_WPCCR_ADDTR_Msk                 /*!< Address Double Transfer Rate */
#define OCTOSPI_WPCCR_ADSIZE_Pos       (12U)
#define OCTOSPI_WPCCR_ADSIZE_Msk       (0x3UL << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00003000 */
#define OCTOSPI_WPCCR_ADSIZE           OCTOSPI_WPCCR_ADSIZE_Msk                /*!< Address Size */
#define OCTOSPI_WPCCR_ADSIZE_0         (0x1UL << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00001000 */
#define OCTOSPI_WPCCR_ADSIZE_1         (0x2UL << OCTOSPI_WPCCR_ADSIZE_Pos)      /*!< 0x00002000 */
#define OCTOSPI_WPCCR_ABMODE_Pos       (16U)
#define OCTOSPI_WPCCR_ABMODE_Msk       (0x7UL << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00070000 */
#define OCTOSPI_WPCCR_ABMODE           OCTOSPI_WPCCR_ABMODE_Msk                /*!< Alternate Bytes Mode */
#define OCTOSPI_WPCCR_ABMODE_0         (0x1UL << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00010000 */
#define OCTOSPI_WPCCR_ABMODE_1         (0x2UL << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00020000 */
#define OCTOSPI_WPCCR_ABMODE_2         (0x4UL << OCTOSPI_WPCCR_ABMODE_Pos)      /*!< 0x00040000 */
#define OCTOSPI_WPCCR_ABDTR_Pos        (19U)
#define OCTOSPI_WPCCR_ABDTR_Msk        (0x1UL << OCTOSPI_WPCCR_ABDTR_Pos)       /*!< 0x00080000 */
#define OCTOSPI_WPCCR_ABDTR            OCTOSPI_WPCCR_ABDTR_Msk                 /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_WPCCR_ABSIZE_Pos       (20U)
#define OCTOSPI_WPCCR_ABSIZE_Msk       (0x3UL << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00300000 */
#define OCTOSPI_WPCCR_ABSIZE           OCTOSPI_WPCCR_ABSIZE_Msk                /*!< Alternate Bytes Size */
#define OCTOSPI_WPCCR_ABSIZE_0         (0x1UL << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00100000 */
#define OCTOSPI_WPCCR_ABSIZE_1         (0x2UL << OCTOSPI_WPCCR_ABSIZE_Pos)      /*!< 0x00200000 */
#define OCTOSPI_WPCCR_DMODE_Pos        (24U)
#define OCTOSPI_WPCCR_DMODE_Msk        (0x7UL << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x07000000 */
#define OCTOSPI_WPCCR_DMODE            OCTOSPI_WPCCR_DMODE_Msk                 /*!< Data Mode */
#define OCTOSPI_WPCCR_DMODE_0          (0x1UL << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x01000000 */
#define OCTOSPI_WPCCR_DMODE_1          (0x2UL << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x02000000 */
#define OCTOSPI_WPCCR_DMODE_2          (0x4UL << OCTOSPI_WPCCR_DMODE_Pos)       /*!< 0x04000000 */
#define OCTOSPI_WPCCR_DDTR_Pos         (27U)
#define OCTOSPI_WPCCR_DDTR_Msk         (0x1UL << OCTOSPI_WPCCR_DDTR_Pos)        /*!< 0x08000000 */
#define OCTOSPI_WPCCR_DDTR             OCTOSPI_WPCCR_DDTR_Msk                  /*!< Data Double Transfer Rate */
#define OCTOSPI_WPCCR_DQSE_Pos         (29U)
#define OCTOSPI_WPCCR_DQSE_Msk         (0x1UL << OCTOSPI_WPCCR_DQSE_Pos)        /*!< 0x20000000 */
#define OCTOSPI_WPCCR_DQSE             OCTOSPI_WPCCR_DQSE_Msk                  /*!< DQS Enable */
#define OCTOSPI_WPCCR_SIOO_Pos         (31U)
#define OCTOSPI_WPCCR_SIOO_Msk         (0x1UL << OCTOSPI_WPCCR_SIOO_Pos)        /*!< 0x80000000 */
#define OCTOSPI_WPCCR_SIOO             OCTOSPI_WPCCR_SIOO_Msk                  /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_WPTCR register  *******************/
#define OCTOSPI_WPTCR_DCYC_Pos         (0U)
#define OCTOSPI_WPTCR_DCYC_Msk         (0x1FUL << OCTOSPI_WPTCR_DCYC_Pos)       /*!< 0x0000001F */
#define OCTOSPI_WPTCR_DCYC             OCTOSPI_WPTCR_DCYC_Msk                  /*!< Number of Dummy Cycles */
#define OCTOSPI_WPTCR_DHQC_Pos         (28U)
#define OCTOSPI_WPTCR_DHQC_Msk         (0x1UL << OCTOSPI_WPTCR_DHQC_Pos)        /*!< 0x10000000 */
#define OCTOSPI_WPTCR_DHQC             OCTOSPI_WPTCR_DHQC_Msk                  /*!< Delay Hold Quarter Cycle */
#define OCTOSPI_WPTCR_SSHIFT_Pos       (30U)
#define OCTOSPI_WPTCR_SSHIFT_Msk       (0x1UL << OCTOSPI_WPTCR_SSHIFT_Pos)      /*!< 0x40000000 */
#define OCTOSPI_WPTCR_SSHIFT           OCTOSPI_WPTCR_SSHIFT_Msk                /*!< Sample Shift */

/*****************  Bit definition for OCTOSPI_WPIR register  *******************/
#define OCTOSPI_WPIR_INSTRUCTION_Pos   (0U)
#define OCTOSPI_WPIR_INSTRUCTION_Msk   (0xFFFFFFFFUL << OCTOSPI_WPIR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WPIR_INSTRUCTION       OCTOSPI_WPIR_INSTRUCTION_Msk            /*!< Instruction */

/****************  Bit definition for OCTOSPI_WPABR register  *******************/
#define OCTOSPI_WPABR_ALTERNATE_Pos    (0U)
#define OCTOSPI_WPABR_ALTERNATE_Msk    (0xFFFFFFFFUL << OCTOSPI_WPABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WPABR_ALTERNATE        OCTOSPI_WPABR_ALTERNATE_Msk             /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_WCCR register  ******************/
#define OCTOSPI_WCCR_IMODE_Pos         (0U)
#define OCTOSPI_WCCR_IMODE_Msk         (0x7UL << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000007 */
#define OCTOSPI_WCCR_IMODE             OCTOSPI_WCCR_IMODE_Msk                  /*!< Instruction Mode */
#define OCTOSPI_WCCR_IMODE_0           (0x1UL << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000001 */
#define OCTOSPI_WCCR_IMODE_1           (0x2UL << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000002 */
#define OCTOSPI_WCCR_IMODE_2           (0x4UL << OCTOSPI_WCCR_IMODE_Pos)        /*!< 0x00000004 */
#define OCTOSPI_WCCR_IDTR_Pos          (3U)
#define OCTOSPI_WCCR_IDTR_Msk          (0x1UL << OCTOSPI_WCCR_IDTR_Pos)         /*!< 0x00000008 */
#define OCTOSPI_WCCR_IDTR              OCTOSPI_WCCR_IDTR_Msk                   /*!< Instruction Double Transfer Rate */
#define OCTOSPI_WCCR_ISIZE_Pos         (4U)
#define OCTOSPI_WCCR_ISIZE_Msk         (0x3UL << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000030 */
#define OCTOSPI_WCCR_ISIZE             OCTOSPI_WCCR_ISIZE_Msk                  /*!< Instruction Size */
#define OCTOSPI_WCCR_ISIZE_0           (0x1UL << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000010 */
#define OCTOSPI_WCCR_ISIZE_1           (0x2UL << OCTOSPI_WCCR_ISIZE_Pos)        /*!< 0x00000020 */
#define OCTOSPI_WCCR_ADMODE_Pos        (8U)
#define OCTOSPI_WCCR_ADMODE_Msk        (0x7UL << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000700 */
#define OCTOSPI_WCCR_ADMODE            OCTOSPI_WCCR_ADMODE_Msk                 /*!< Address Mode */
#define OCTOSPI_WCCR_ADMODE_0          (0x1UL << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000100 */
#define OCTOSPI_WCCR_ADMODE_1          (0x2UL << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000200 */
#define OCTOSPI_WCCR_ADMODE_2          (0x4UL << OCTOSPI_WCCR_ADMODE_Pos)       /*!< 0x00000400 */
#define OCTOSPI_WCCR_ADDTR_Pos         (11U)
#define OCTOSPI_WCCR_ADDTR_Msk         (0x1UL << OCTOSPI_WCCR_ADDTR_Pos)        /*!< 0x00000800 */
#define OCTOSPI_WCCR_ADDTR             OCTOSPI_WCCR_ADDTR_Msk                  /*!< Address Double Transfer Rate */
#define OCTOSPI_WCCR_ADSIZE_Pos        (12U)
#define OCTOSPI_WCCR_ADSIZE_Msk        (0x3UL << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00003000 */
#define OCTOSPI_WCCR_ADSIZE            OCTOSPI_WCCR_ADSIZE_Msk                 /*!< Address Size */
#define OCTOSPI_WCCR_ADSIZE_0          (0x1UL << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00001000 */
#define OCTOSPI_WCCR_ADSIZE_1          (0x2UL << OCTOSPI_WCCR_ADSIZE_Pos)       /*!< 0x00002000 */
#define OCTOSPI_WCCR_ABMODE_Pos        (16U)
#define OCTOSPI_WCCR_ABMODE_Msk        (0x7UL << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00070000 */
#define OCTOSPI_WCCR_ABMODE            OCTOSPI_WCCR_ABMODE_Msk                 /*!< Alternate Bytes Mode */
#define OCTOSPI_WCCR_ABMODE_0          (0x1UL << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00010000 */
#define OCTOSPI_WCCR_ABMODE_1          (0x2UL << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00020000 */
#define OCTOSPI_WCCR_ABMODE_2          (0x4UL << OCTOSPI_WCCR_ABMODE_Pos)       /*!< 0x00040000 */
#define OCTOSPI_WCCR_ABDTR_Pos         (19U)
#define OCTOSPI_WCCR_ABDTR_Msk         (0x1UL << OCTOSPI_WCCR_ABDTR_Pos)        /*!< 0x00080000 */
#define OCTOSPI_WCCR_ABDTR             OCTOSPI_WCCR_ABDTR_Msk                  /*!< Alternate Bytes Double Transfer Rate */
#define OCTOSPI_WCCR_ABSIZE_Pos        (20U)
#define OCTOSPI_WCCR_ABSIZE_Msk        (0x3UL << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00300000 */
#define OCTOSPI_WCCR_ABSIZE            OCTOSPI_WCCR_ABSIZE_Msk                 /*!< Alternate Bytes Size */
#define OCTOSPI_WCCR_ABSIZE_0          (0x1UL << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00100000 */
#define OCTOSPI_WCCR_ABSIZE_1          (0x2UL << OCTOSPI_WCCR_ABSIZE_Pos)       /*!< 0x00200000 */
#define OCTOSPI_WCCR_DMODE_Pos         (24U)
#define OCTOSPI_WCCR_DMODE_Msk         (0x7UL << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x07000000 */
#define OCTOSPI_WCCR_DMODE             OCTOSPI_WCCR_DMODE_Msk                  /*!< Data Mode */
#define OCTOSPI_WCCR_DMODE_0           (0x1UL << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x01000000 */
#define OCTOSPI_WCCR_DMODE_1           (0x2UL << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x02000000 */
#define OCTOSPI_WCCR_DMODE_2           (0x4UL << OCTOSPI_WCCR_DMODE_Pos)        /*!< 0x04000000 */
#define OCTOSPI_WCCR_DDTR_Pos          (27U)
#define OCTOSPI_WCCR_DDTR_Msk          (0x1UL << OCTOSPI_WCCR_DDTR_Pos)         /*!< 0x08000000 */
#define OCTOSPI_WCCR_DDTR              OCTOSPI_WCCR_DDTR_Msk                   /*!< Data Double Transfer Rate */
#define OCTOSPI_WCCR_DQSE_Pos          (29U)
#define OCTOSPI_WCCR_DQSE_Msk          (0x1UL << OCTOSPI_WCCR_DQSE_Pos)         /*!< 0x20000000 */
#define OCTOSPI_WCCR_DQSE              OCTOSPI_WCCR_DQSE_Msk                   /*!< DQS Enable */
#define OCTOSPI_WCCR_SIOO_Pos          (31U)
#define OCTOSPI_WCCR_SIOO_Msk          (0x1UL << OCTOSPI_WCCR_SIOO_Pos)         /*!< 0x80000000 */
#define OCTOSPI_WCCR_SIOO              OCTOSPI_WCCR_SIOO_Msk                   /*!< Send Instruction Only Once Mode */

/****************  Bit definition for OCTOSPI_WTCR register  ******************/
#define OCTOSPI_WTCR_DCYC_Pos          (0U)
#define OCTOSPI_WTCR_DCYC_Msk          (0x1FUL << OCTOSPI_WTCR_DCYC_Pos)        /*!< 0x0000001F */
#define OCTOSPI_WTCR_DCYC              OCTOSPI_WTCR_DCYC_Msk                   /*!< Number of Dummy Cycles */

/****************  Bit definition for OCTOSPI_WIR register  *******************/
#define OCTOSPI_WIR_INSTRUCTION_Pos    (0U)
#define OCTOSPI_WIR_INSTRUCTION_Msk    (0xFFFFFFFFUL << OCTOSPI_WIR_INSTRUCTION_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WIR_INSTRUCTION        OCTOSPI_WIR_INSTRUCTION_Msk             /*!< Instruction */

/****************  Bit definition for OCTOSPI_WABR register  ******************/
#define OCTOSPI_WABR_ALTERNATE_Pos     (0U)
#define OCTOSPI_WABR_ALTERNATE_Msk     (0xFFFFFFFFUL << OCTOSPI_WABR_ALTERNATE_Pos) /*!< 0xFFFFFFFF */
#define OCTOSPI_WABR_ALTERNATE         OCTOSPI_WABR_ALTERNATE_Msk              /*!< Alternate Bytes */

/****************  Bit definition for OCTOSPI_HLCR register  ******************/
#define OCTOSPI_HLCR_LM_Pos            (0U)
#define OCTOSPI_HLCR_LM_Msk            (0x1UL << OCTOSPI_HLCR_LM_Pos)           /*!< 0x00000001 */
#define OCTOSPI_HLCR_LM                OCTOSPI_HLCR_LM_Msk                     /*!< Latency Mode */
#define OCTOSPI_HLCR_WZL_Pos           (1U)
#define OCTOSPI_HLCR_WZL_Msk           (0x1UL << OCTOSPI_HLCR_WZL_Pos)          /*!< 0x00000002 */
#define OCTOSPI_HLCR_WZL               OCTOSPI_HLCR_WZL_Msk                    /*!< Write Zero Latency */
#define OCTOSPI_HLCR_TACC_Pos          (8U)
#define OCTOSPI_HLCR_TACC_Msk          (0xFFUL << OCTOSPI_HLCR_TACC_Pos)        /*!< 0x0000FF00 */
#define OCTOSPI_HLCR_TACC              OCTOSPI_HLCR_TACC_Msk                   /*!< Access Time */
#define OCTOSPI_HLCR_TRWR_Pos          (16U)
#define OCTOSPI_HLCR_TRWR_Msk          (0xFFUL << OCTOSPI_HLCR_TRWR_Pos)        /*!< 0x00FF0000 */
#define OCTOSPI_HLCR_TRWR              OCTOSPI_HLCR_TRWR_Msk                   /*!< Read Write Recovery Time */

/***************  Bit definition for OCTOSPI_HWCFGR2 register  ****************/
#define OCTOSPI_HWCFGR2_FRCK_Pos         (0U)
#define OCTOSPI_HWCFGR2_FRCK_Msk         (0xFUL << OCTOSPI_HWCFGR2_FRCK_Pos)            /*!< 0x0000000F */
#define OCTOSPI_HWCFGR2_FRCK             OCTOSPI_HWCFGR2_FRCK_Msk                      /*!< Free running clock */
#define OCTOSPI_HWCFGR2_RDFT_Pos         (4U)
#define OCTOSPI_HWCFGR2_RDFT_Msk         (0xFUL << OCTOSPI_HWCFGR2_RDFT_Pos)            /*!< 0x000000F0 */
#define OCTOSPI_HWCFGR2_RDFT             OCTOSPI_HWCFGR2_RDFT_Msk                      /*!< Reduced features */
#define OCTOSPI_HWCFGR2_ARBM_Pos         (8U)
#define OCTOSPI_HWCFGR2_ARBM_Msk         (0xFUL << OCTOSPI_HWCFGR2_ARBM_Pos)            /*!< 0x00000F00 */
#define OCTOSPI_HWCFGR2_ARBM             OCTOSPI_HWCFGR2_ARBM_Msk                      /*!< Arbitration configuration */
#define OCTOSPI_HWCFGR2_MEM16_Pos        (12U)
#define OCTOSPI_HWCFGR2_MEM16_Msk        (0xFUL << OCTOSPI_HWCFGR2_MEM16_Pos)           /*!< 0x0000F000 */
#define OCTOSPI_HWCFGR2_MEM16            OCTOSPI_HWCFGR2_MEM16_Msk                     /*!< Size of the SPI memory supported */
#define OCTOSPI_HWCFGR2_HSINT_Pos        (16U)
#define OCTOSPI_HWCFGR2_HSINT_Msk        (0xFUL << OCTOSPI_HWCFGR2_HSINT_Pos)           /*!< 0x000F0000 */
#define OCTOSPI_HWCFGR2_HSINT            OCTOSPI_HWCFGR2_HSINT_Msk                     /*!< High-speed interface */

/****************  Bit definition for OCTOSPI_HWCFGR register  ****************/
#define OCTOSPI_HWCFGR_AXI_Pos           (0U)
#define OCTOSPI_HWCFGR_AXI_Msk           (0xFUL << OCTOSPI_HWCFGR_AXI_Pos)              /*!< 0x0000000F */
#define OCTOSPI_HWCFGR_AXI               OCTOSPI_HWCFGR_AXI_Msk                        /*!< OCTOSPI interface */
#define OCTOSPI_HWCFGR_FIFO_Pos          (4U)
#define OCTOSPI_HWCFGR_FIFO_Msk          (0xFFUL << OCTOSPI_HWCFGR_FIFO_Pos)            /*!< 0x00000FF0 */
#define OCTOSPI_HWCFGR_FIFO              OCTOSPI_HWCFGR_FIFO_Msk                       /*!< FIFO depth */
#define OCTOSPI_HWCFGR_PRES_Pos          (12U)
#define OCTOSPI_HWCFGR_PRES_Msk          (0xFFUL << OCTOSPI_HWCFGR_PRES_Pos)            /*!< 0x000FF000 */
#define OCTOSPI_HWCFGR_PRES              OCTOSPI_HWCFGR_PRES_Msk                       /*!< Prescaler */
#define OCTOSPI_HWCFGR_IDL_Pos           (20U)
#define OCTOSPI_HWCFGR_IDL_Msk           (0xFUL << OCTOSPI_HWCFGR_IDL_Pos)              /*!< 0x00F00000 */
#define OCTOSPI_HWCFGR_IDL               OCTOSPI_HWCFGR_IDL_Msk                        /*!< ID Length */
#define OCTOSPI_HWCFGR_MMW_Pos           (24U)
#define OCTOSPI_HWCFGR_MMW_Msk           (0xFUL << OCTOSPI_HWCFGR_MMW_Pos)              /*!< 0x0F000000 */
#define OCTOSPI_HWCFGR_MMW               OCTOSPI_HWCFGR_MMW_Msk                        /*!< Memory-mapped write */
#define OCTOSPI_HWCFGR_CSSRV_Pos         (28U)
#define OCTOSPI_HWCFGR_CSSRV_Msk         (0xFUL << OCTOSPI_HWCFGR_CSSRV_Pos)            /*!< 0xF0000000 */
#define OCTOSPI_HWCFGR_CSSRV             OCTOSPI_HWCFGR_CSSRV_Msk                      /*!< CSSEL reset value */

/****************  Bit definition for OCTOSPI_VER register  *******************/
#define OCTOSPI_VER_VER_Pos            (0U)
#define OCTOSPI_VER_VER_Msk            (0xFFUL << OCTOSPI_VER_VER_Pos)          /*!< 0x000000FF */
#define OCTOSPI_VER_VER                OCTOSPI_VER_VER_Msk                     /*!< Version */

/*****************  Bit definition for OCTOSPI_ID register  *******************/
#define OCTOSPI_ID_ID_Pos              (0U)
#define OCTOSPI_ID_ID_Msk              (0xFFFFFFFFUL << OCTOSPI_ID_ID_Pos)      /*!< 0xFFFFFFFF */
#define OCTOSPI_ID_ID                  OCTOSPI_ID_ID_Msk                       /*!< Identification */

/****************  Bit definition for OCTOSPI_MID register  *******************/
#define OCTOSPI_MID_MID_Pos            (0U)
#define OCTOSPI_MID_MID_Msk            (0xFFFFFFFFUL << OCTOSPI_MID_MID_Pos)    /*!< 0xFFFFFFFF */
#define OCTOSPI_MID_MID                OCTOSPI_MID_MID_Msk                     /*!< Magic ID */




/******************************************************************************/
/*                                                                            */
/*                Parallel Synchronous Slave Interface (PSSI )                */
/*                                                                            */
/******************************************************************************/

/********************  Bit definition for PSSI_CR register  *******************/
#define PSSI_CR_OUTEN_Pos               (31U)
#define PSSI_CR_OUTEN_Msk               (0x1UL << PSSI_CR_OUTEN_Pos)           /*!< 0x80000000 */
#define PSSI_CR_OUTEN                   PSSI_CR_OUTEN_Msk                      /*!< Data direction selection */
#define PSSI_CR_DMAEN_Pos               (30U)
#define PSSI_CR_DMAEN_Msk               (0x1UL << PSSI_CR_DMAEN_Pos)           /*!< 0x40000000 */
#define PSSI_CR_DMAEN                   PSSI_CR_DMAEN_Msk                      /*!< DMA enable */
#define PSSI_CR_DERDYCFG_Pos            (18U)
#define PSSI_CR_DERDYCFG_Msk            (0x7UL << PSSI_CR_DERDYCFG_Pos)        /*!< 0x001C0000 */
#define PSSI_CR_DERDYCFG                PSSI_CR_DERDYCFG_Msk                   /*!< Data enable and ready configuration */
#define PSSI_CR_ENABLE_Pos              (14U)
#define PSSI_CR_ENABLE_Msk              (0x1UL << PSSI_CR_ENABLE_Pos)          /*!< 0x00004000 */
#define PSSI_CR_ENABLE                  PSSI_CR_ENABLE_Msk                     /*!< PSSI enable */
#define PSSI_CR_EDM_Pos                 (10U)
#define PSSI_CR_EDM_Msk                 (0x3UL << PSSI_CR_EDM_Pos)             /*!< 0x00000C00 */
#define PSSI_CR_EDM                     PSSI_CR_EDM_Msk                        /*!< Extended data mode */
#define PSSI_CR_RDYPOL_Pos              (8U)
#define PSSI_CR_RDYPOL_Msk              (0x1UL << PSSI_CR_RDYPOL_Pos)          /*!< 0x00000C00 */
#define PSSI_CR_RDYPOL                  PSSI_CR_RDYPOL_Msk                     /*!< Ready polarity */
#define PSSI_CR_DEPOL_Pos               (6U)
#define PSSI_CR_DEPOL_Msk               (0x1UL << PSSI_CR_DEPOL_Pos)           /*!< 0x00000C00 */
#define PSSI_CR_DEPOL                   PSSI_CR_DEPOL_Msk                      /*!<  Data enable polarity */
#define PSSI_CR_CKPOL_Pos               (5U)
#define PSSI_CR_CKPOL_Msk               (0x1UL << PSSI_CR_CKPOL_Pos)           /*!< 0x00000C00 */
#define PSSI_CR_CKPOL                   PSSI_CR_CKPOL_Msk                      /*!< Parallel data clock polarity */
/********************  Bit definition for PSSI_SR register  *******************/
#define PSSI_SR_RTT1B_Pos               (3U)
#define PSSI_SR_RTT1B_Msk               (0x1UL << PSSI_SR_RTT1B_Pos)           /*!< 0x00000008 */
#define PSSI_SR_RTT1B                   PSSI_SR_RTT1B_Msk                      /*!< Ready to transfer one byte */
#define PSSI_SR_RTT4B_Pos               (2U)
#define PSSI_SR_RTT4B_Msk               (0x1UL << PSSI_SR_RTT4B_Pos)           /*!< 0x00000004 */
#define PSSI_SR_RTT4B                   PSSI_SR_RTT4B_Msk                      /*!< Ready to transfer four bytes */
/********************  Bit definition for PSSI_RIS register  *******************/
#define PSSI_RIS_OVR_RIS_Pos            (1U)
#define PSSI_RIS_OVR_RIS_Msk            (0x1UL << PSSI_RIS_OVR_RIS_Pos)        /*!< 0x00000002 */
#define PSSI_RIS_OVR_RIS                PSSI_RIS_OVR_RIS_Msk                   /*!< Data buffer overrun/underrun raw interrupt status */
/********************  Bit definition for PSSI_IER register  *******************/
#define PSSI_IER_OVR_IE_Pos             (1U)
#define PSSI_IER_OVR_IE_Msk             (0x1UL << PSSI_IER_OVR_IE_Pos)         /*!< 0x00000002 */
#define PSSI_IER_OVR_IE                 PSSI_IER_OVR_IE_Msk                    /*!< Data buffer overrun/underrun interrupt enable */
/********************  Bit definition for PSSI_MIS register  *******************/
#define PSSI_MIS_OVR_MIS_Pos            (1U)
#define PSSI_MIS_OVR_MIS_Msk            (0x1UL << PSSI_MIS_OVR_MIS_Pos)        /*!< 0x00000002 */
#define PSSI_MIS_OVR_MIS                PSSI_MIS_OVR_MIS_Msk                   /*!< Data buffer overrun/underrun masked interrupt status */
/********************  Bit definition for PSSI_ICR register  *******************/
#define PSSI_ICR_OVR_ISC_Pos            (1U)
#define PSSI_ICR_OVR_ISC_Msk            (0x1UL << PSSI_ICR_OVR_ISC_Pos)        /*!< 0x00000002 */
#define PSSI_ICR_OVR_ISC                PSSI_ICR_OVR_ISC_Msk                   /*!< Data buffer overrun/underrun interrupt status clear */
/********************  Bit definition for PSSI_DR register  *******************/
#define PSSI_DR_DR_Pos                  (0U)
#define PSSI_DR_DR_Msk                  (0xFFFFFFFFUL << PSSI_DR_DR_Pos)       /*!< 0xFFFFFFF */
#define PSSI_DR_DR                      PSSI_DR_DR_Msk                         /*!< Data register  */

/******************************************************************************/
/*                                                                            */
/*                                    (PWR)                                   */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for PWR_CR1 register  ********************/
#define PWR_CR1_VDDIO3VMEN_Pos                 (0U)
#define PWR_CR1_VDDIO3VMEN_Msk                 (0x1UL << PWR_CR1_VDDIO3VMEN_Pos)
#define PWR_CR1_VDDIO3VMEN                     PWR_CR1_VDDIO3VMEN_Msk
#define PWR_CR1_USB33VMEN_Pos                  (2U)
#define PWR_CR1_USB33VMEN_Msk                  (0x1UL << PWR_CR1_USB33VMEN_Pos)
#define PWR_CR1_USB33VMEN                      PWR_CR1_USB33VMEN_Msk
#define PWR_CR1_AVMEN_Pos                      (4U)
#define PWR_CR1_AVMEN_Msk                      (0x1UL << PWR_CR1_AVMEN_Pos)
#define PWR_CR1_AVMEN                          PWR_CR1_AVMEN_Msk
#define PWR_CR1_VDDIO3SV_Pos                   (8U)
#define PWR_CR1_VDDIO3SV_Msk                   (0x1UL << PWR_CR1_VDDIO3SV_Pos)
#define PWR_CR1_VDDIO3SV                       PWR_CR1_VDDIO3SV_Msk
#define PWR_CR1_USB33SV_Pos                    (10U)
#define PWR_CR1_USB33SV_Msk                    (0x1UL << PWR_CR1_USB33SV_Pos)           
#define PWR_CR1_USB33SV                        PWR_CR1_USB33SV_Msk                        
#define PWR_CR1_ASV_Pos                        (12U)
#define PWR_CR1_ASV_Msk                        (0x1UL << PWR_CR1_ASV_Pos)
#define PWR_CR1_ASV                            PWR_CR1_ASV_Msk
#define PWR_CR1_VDDIO3RDY_Pos                  (16U)
#define PWR_CR1_VDDIO3RDY_Msk                  (0x1UL << PWR_CR1_VDDIO3RDY_Pos)
#define PWR_CR1_VDDIO3RDY                      PWR_CR1_VDDIO3RDY_Msk
#define PWR_CR1_USB33RDY_Pos                   (18U)
#define PWR_CR1_USB33RDY_Msk                   (0x1UL << PWR_CR1_USB33RDY_Pos)
#define PWR_CR1_USB33RDY                       PWR_CR1_USB33RDY_Msk
#define PWR_CR1_UCPDRDY_Pos                    (19U)
#define PWR_CR1_UCPDRDY_Msk                    (0x1UL << PWR_CR1_UCPDRDY_Pos)
#define PWR_CR1_UCPDRDY                         PWR_CR1_UCPDRDY_Msk
#define PWR_CR1_ARDY_Pos                       (20U)
#define PWR_CR1_ARDY_Msk                       (0x1UL << PWR_CR1_ARDY_Pos)
#define PWR_CR1_ARDY                           PWR_CR1_ARDY_Msk
#define PWR_CR1_VDDIOVRSEL_Pos                 (24U)
#define PWR_CR1_VDDIOVRSEL_Msk                 (0x1UL << PWR_CR1_VDDIOVRSEL_Pos)
#define PWR_CR1_VDDIOVRSEL                     PWR_CR1_VDDIOVRSEL_Msk
#define PWR_CR1_VDDIO3VRSEL_Pos                (25U)
#define PWR_CR1_VDDIO3VRSEL_Msk                (0x1UL << PWR_CR1_VDDIO3VRSEL_Pos)
#define PWR_CR1_VDDIO3VRSEL                    PWR_CR1_VDDIO3VRSEL_Msk
#define PWR_CR1_GPVMO_Pos                      (31U)
#define PWR_CR1_GPVMO_Msk                      (0x1UL << PWR_CR1_GPVMO_Pos)
#define PWR_CR1_GPVMO                          PWR_CR1_GPVMO_Msk

/* Bit fields for PWR_CR2 register */
#define PWR_CR2_MONEN_Pos                      (0U)
#define PWR_CR2_MONEN_Msk                      (0x1UL << PWR_CR2_MONEN_Pos)
#define PWR_CR2_MONEN                          PWR_CR2_MONEN_Msk  /*!< VBAT and temperature monitoring enableWhen set, the VBAT supply and temperature monitoring is enabled.- 0: VBAT and temperature monitoring disabled.- 1: VBAT and temperature monitoring enabled. */
#define PWR_CR2_VBATL_Pos                      (8U)
#define PWR_CR2_VBATL_Msk                      (0x1UL << PWR_CR2_VBATL_Pos)
#define PWR_CR2_VBATL                          PWR_CR2_VBATL_Msk  /*!< Monitored VBAT level above low threshold- 0: VBAT level above low threshold level, or Monitor disabled.- 1: VBAT level equal or below low threshold level. */
#define PWR_CR2_VBATH_Pos                      (9U)
#define PWR_CR2_VBATH_Msk                      (0x1UL << PWR_CR2_VBATH_Pos)
#define PWR_CR2_VBATH                          PWR_CR2_VBATH_Msk  /*!< Monitored VBAT level above high threshold- 0: VBAT level below high threshold level, or Monitor disabled.- 1: VBAT level equal or above high threshold level. */
#define PWR_CR2_TEMPL_Pos                      (10U)
#define PWR_CR2_TEMPL_Msk                      (0x1UL << PWR_CR2_TEMPL_Pos)
#define PWR_CR2_TEMPL                          PWR_CR2_TEMPL_Msk  /*!< Monitored temperature level above low threshold- 0: Temperature above low threshold level, or Monitor disabled.- 1: Temperature equal or below low threshold level. */
#define PWR_CR2_TEMPH_Pos                      (11U)
#define PWR_CR2_TEMPH_Msk                      (0x1UL << PWR_CR2_TEMPH_Pos)
#define PWR_CR2_TEMPH                          PWR_CR2_TEMPH_Msk  /*!< Monitored temperature level above high threshold- 0: Temperature below high threshold level, or Monitor disabled.- 1: Temperature equal or above high threshold level. */

/* Bit fields for PWR_CR3 register */
#define PWR_CR3_PVDEN_Pos                      (0U)
#define PWR_CR3_PVDEN_Msk                      (0x1UL << PWR_CR3_PVDEN_Pos)
#define PWR_CR3_PVDEN                          PWR_CR3_PVDEN_Msk  /*!< Programmable Voltage detector enable.This bit is read only when the SYSCFG register bit PVDL is set. (When PVDL is set, there will be no bus errors generated when writing this register).- 0: Programmable Voltage detector disabled.- 1: Programmable Voltage detector enabled. */
#define PWR_CR3_PVDO_Pos                       (8U)
#define PWR_CR3_PVDO_Msk                       (0x1UL << PWR_CR3_PVDO_Pos)
#define PWR_CR3_PVDO                           PWR_CR3_PVDO_Msk  /*!< Programmable Voltage Detect OutputThis bit is set and cleared by hardware. It is valid only if PVD is enabled by the PVDEN bit.- 0: VDD or voltage level on PVD_IN is equal or higher than the PVD threshold selected with the PLS[2:0] bits.- 1: VDD or voltage level on PVD_IN is lower than the PVD threshold selected with the PLS[2:0] bits.The PVD is disabled in Standby mode and after a system reset. For this reason, this bit is equal to 0 after Standby and system reset. */



/* Bit fields for PWR_CR7 register */
#define PWR_CR7_VDDIO2VMEN_Pos                 (0U)
#define PWR_CR7_VDDIO2VMEN_Msk                 (0x1UL << PWR_CR7_VDDIO2VMEN_Pos)
#define PWR_CR7_VDDIO2VMEN                     PWR_CR7_VDDIO2VMEN_Msk
#define PWR_CR7_VDDIO2SV_Pos                   (8U)
#define PWR_CR7_VDDIO2SV_Msk                   (0x1UL << PWR_CR7_VDDIO2SV_Pos)
#define PWR_CR7_VDDIO2SV                       PWR_CR7_VDDIO2SV_Msk
#define PWR_CR7_VDDIO2RDY_Pos                  (16U)
#define PWR_CR7_VDDIO2RDY_Msk                  (0x1UL << PWR_CR7_VDDIO2RDY_Pos)
#define PWR_CR7_VDDIO2RDY                      PWR_CR7_VDDIO2RDY_Msk
#define PWR_CR7_VDDIO2VRSEL_Pos                (24U)
#define PWR_CR7_VDDIO2VRSEL_Msk                (0x1UL << PWR_CR7_VDDIO2VRSEL_Pos)
#define PWR_CR7_VDDIO2VRSEL                    PWR_CR7_VDDIO2VRSEL_Msk
#define PWR_CR7_VDDIO2VRSTBY_Pos               (25U)
#define PWR_CR7_VDDIO2VRSTBY_Msk               (0x1UL << PWR_CR7_VDDIO2VRSTBY_Pos)
#define PWR_CR7_VDDIO2VRSTBY                   PWR_CR7_VDDIO2VRSTBY_Msk

/* Bit fields for PWR_CR8 register */
#define PWR_CR8_VDDIO1VMEN_Pos                 (0U)
#define PWR_CR8_VDDIO1VMEN_Msk                 (0x1UL << PWR_CR8_VDDIO1VMEN_Pos)
#define PWR_CR8_VDDIO1VMEN                     PWR_CR8_VDDIO1VMEN_Msk
#define PWR_CR8_VDDIO1SV_Pos                   (8U)
#define PWR_CR8_VDDIO1SV_Msk                   (0x1UL << PWR_CR8_VDDIO1SV_Pos)
#define PWR_CR8_VDDIO1SV                       PWR_CR8_VDDIO1SV_Msk
#define PWR_CR8_VDDIO1RDY_Pos                  (16U)
#define PWR_CR8_VDDIO1RDY_Msk                  (0x1UL << PWR_CR8_VDDIO1RDY_Pos)
#define PWR_CR8_VDDIO1RDY                      PWR_CR8_VDDIO1RDY_Msk
#define PWR_CR8_VDDIO1VRSEL_Pos                (24U)
#define PWR_CR8_VDDIO1VRSEL_Msk                (0x1UL << PWR_CR8_VDDIO1VRSEL_Pos)
#define PWR_CR8_VDDIO1VRSEL                    PWR_CR8_VDDIO1VRSEL_Msk
#define PWR_CR8_VDDIO1VRSTBY_Pos               (25U)
#define PWR_CR8_VDDIO1VRSTBY_Msk               (0x1UL << PWR_CR8_VDDIO1VRSTBY_Pos)
#define PWR_CR8_VDDIO1VRSTBY                   PWR_CR8_VDDIO1VRSTBY_Msk

/* Bit fields for PWR_CR9 register */
#define PWR_CR9_BKPRBSEN_Pos                   (0U)
#define PWR_CR9_BKPRBSEN_Msk                   (0x1UL << PWR_CR9_BKPRBSEN_Pos)
#define PWR_CR9_BKPRBSEN                       PWR_CR9_BKPRBSEN_Msk  /*!< Backup RAM backup supply enable (used to maintain BKP RAM content in Standby and VBAT modes).When set, the backup ram is supplied from backup regulator in Standby and VBAT modes.When reset, The backup ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 0: BKPSRAM Backup supply disable.- 1: BKPSRAM Backup supply enable. */

/* Bit fields for PWR_CR10 register */
#define PWR_CR10_RETRBSEN_Pos                  (0U)
#define PWR_CR10_RETRBSEN_Msk                  (0x3UL << PWR_CR10_RETRBSEN_Pos)
#define PWR_CR10_RETRBSEN                      PWR_CR10_RETRBSEN_Msk  /*!< Retention RAM backup supply enable (used to maintain RET RAM content in Standby and VBAT modes).When set, the retention ram is supplied from backup regulator in Standby and VBAT modes. When reset, the retention ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 00: RETRAM Backup supply disable.- 01: RETRAM Backup supply enable in Standby and VBAT modes.- 10: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode).- 11: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode). */

/* Bit fields for PWR_CR11 register */
#define PWR_CR11_DDRRETDIS_Pos                 (0U)
#define PWR_CR11_DDRRETDIS_Msk                 (0x1UL << PWR_CR11_DDRRETDIS_Pos)
#define PWR_CR11_DDRRETDIS                     PWR_CR11_DDRRETDIS_Msk





/* Bit fields for PWR_BDCR register */
#define PWR_BDCR_DBP_Pos                    (0U)
#define PWR_BDCR_DBP_Msk                    (0x1UL << PWR_BDCR_DBP_Pos)
#define PWR_BDCR_DBP                        PWR_BDCR_DBP_Msk  /*!< Disable backup domains write protection.In reset state, all registers in backup domains is protected against parasitic write access from D1 and D2 domains. This bit must be set to enable write access to these registers.- 0: Write access to backup domains disabled- 1: Write access to backup domains enabled */


/* Bit fields for PWR_CPU1CR register */
#define PWR_CPU1CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU1CR_PDDS_D2_Msk                 (0x1UL << PWR_CPU1CR_PDDS_D2_Pos)
#define PWR_CPU1CR_PDDS_D2                     PWR_CPU1CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the D2 / system.- 0: Keep Stop mode when CPU1 enters to CStop.- 1: Allow Standby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_PDDS_D1_Pos                 (1U)
#define PWR_CPU1CR_PDDS_D1_Msk                 (0x1UL << PWR_CPU1CR_PDDS_D1_Pos)
#define PWR_CPU1CR_PDDS_D1                     PWR_CPU1CR_PDDS_D1_Msk  /*!< D1 domain Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the system.- 0: Keep DStop mode when CPU1 enters to CStop.- 1: Allow DStandby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_VBF_Pos                     (4U)
#define PWR_CPU1CR_VBF_Msk                     (0x1UL << PWR_CPU1CR_VBF_Pos)
#define PWR_CPU1CR_VBF                         PWR_CPU1CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU1CR_STOPF_Pos                   (5U)
#define PWR_CPU1CR_STOPF_Msk                   (0x1UL << PWR_CPU1CR_STOPF_Pos)
#define PWR_CPU1CR_STOPF                       PWR_CPU1CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU1 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU1CR_SBF_Pos                     (6U)
#define PWR_CPU1CR_SBF_Msk                     (0x1UL << PWR_CPU1CR_SBF_Pos)
#define PWR_CPU1CR_SBF                         PWR_CPU1CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 and CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode.- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU1CR_SBF_D1_Pos                  (7U)
#define PWR_CPU1CR_SBF_D1_Msk                  (0x1UL << PWR_CPU1CR_SBF_D1_Pos)
#define PWR_CPU1CR_SBF_D1                      PWR_CPU1CR_SBF_D1_Msk  /*!< D1 DStandby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: D1 domain has not been in DStandby mode.- 1: D1 domain has been in DStandby mode. */
#define PWR_CPU1CR_CSSF_Pos                    (9U)
#define PWR_CPU1CR_CSSF_Msk                    (0x1UL << PWR_CPU1CR_CSSF_Pos)
#define PWR_CPU1CR_CSSF                        PWR_CPU1CR_CSSF_Msk  /*!< Clear CPU1 STOPF, SBF_D1/_D3, SBF, VBF flags and CPU2 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU1 flags (STOPF, SBF_D1/_D3, SBF, and VBF) and CPU2 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU1CR_STANDBYWFIL2_Pos            (15U)
#define PWR_CPU1CR_STANDBYWFIL2_Msk            (0x1UL << PWR_CPU1CR_STANDBYWFIL2_Pos)
#define PWR_CPU1CR_STANDBYWFIL2                PWR_CPU1CR_STANDBYWFIL2_Msk  /*!< CPU1 system idle indication.This bit is set and reset by HW based on the CPU1 operation mode.- 0: CPU1 system active.- 1: CPU1 system idle. */
#define PWR_CPU1CR_LPDS_D1_Pos                 (16U)
#define PWR_CPU1CR_LPDS_D1_Msk                 (0x1UL << PWR_CPU1CR_LPDS_D1_Pos)
#define PWR_CPU1CR_LPDS_D1                     PWR_CPU1CR_LPDS_D1_Msk  /*!< Low power Deepsleep Stop mode selection for the D1 domain (DStop2).This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode.- 1: low-power stop mode selected, external regulator may enter low power mode. Further low power mode selection is provided by LVDS_D1. */
#define PWR_CPU1CR_LVDS_D1_Pos                 (17U)
#define PWR_CPU1CR_LVDS_D1_Msk                 (0x1UL << PWR_CPU1CR_LVDS_D1_Pos)
#define PWR_CPU1CR_LVDS_D1                     PWR_CPU1CR_LVDS_D1_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D1 domain (DStop3).This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D1 and will change the VDDCPU domain supply reset level.- 0: LP-Stop mode VDDCPU domain supply reset level at same level as Run mode. The VDDCPU domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCPU domain supply reset level at lower level than Run mode. Allows to lower VDDCPU domain supply in LPLV-Stop mode (see datasheet for voltage levels). */

/* Bit fields for PWR_CPU2CR register */
#define PWR_CPU2CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU2CR_PDDS_D2_Msk                 (0x1UL << PWR_CPU2CR_PDDS_D2_Pos)
#define PWR_CPU2CR_PDDS_D2                     PWR_CPU2CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU2 to define the Deepsleep mode for the system / D2.- 0: Keep Stop mode when CPU2 enters to CStop.- 1: Allow Standby mode when CPU2 enters to CStop. */
#define PWR_CPU2CR_VBF_Pos                     (4U)
#define PWR_CPU2CR_VBF_Msk                     (0x1UL << PWR_CPU2CR_VBF_Pos)
#define PWR_CPU2CR_VBF                         PWR_CPU2CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU2CR_STOPF_Pos                   (5U)
#define PWR_CPU2CR_STOPF_Msk                   (0x1UL << PWR_CPU2CR_STOPF_Pos)
#define PWR_CPU2CR_STOPF                       PWR_CPU2CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU2 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU2CR_SBF_Pos                     (6U)
#define PWR_CPU2CR_SBF_Msk                     (0x1UL << PWR_CPU2CR_SBF_Pos)
#define PWR_CPU2CR_SBF                         PWR_CPU2CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 and CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU2CR_SBF_D2_Pos                  (7U)
#define PWR_CPU2CR_SBF_D2_Msk                  (0x1UL << PWR_CPU2CR_SBF_D2_Pos)
#define PWR_CPU2CR_SBF_D2                      PWR_CPU2CR_SBF_D2_Msk  /*!< D2 Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: D2 domain has not been in Standby mode.- 1: D2 domain has been in Standby mode. */
#define PWR_CPU2CR_CSSF_Pos                    (9U)
#define PWR_CPU2CR_CSSF_Msk                    (0x1UL << PWR_CPU2CR_CSSF_Pos)
#define PWR_CPU2CR_CSSF                        PWR_CPU2CR_CSSF_Msk  /*!< Clear CPU2 STOPF, SBF_D2, SBF_D3, SBF, VBF flags and CPU1 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU2 flags (STOPF, SBF_D2, SBF_D3, SBF and VBF) and CPU1 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU2CR_DEEPSLEEP_Pos               (15U)
#define PWR_CPU2CR_DEEPSLEEP_Msk               (0x1UL << PWR_CPU2CR_DEEPSLEEP_Pos)
#define PWR_CPU2CR_DEEPSLEEP                   PWR_CPU2CR_DEEPSLEEP_Msk  /*!< CPU2 system idle indication.This bit is set and reset by HW based on the CPU2 operation mode.- 0: CPU2 system active.- 1: CPU2 system idle. */
#define PWR_CPU2CR_LPDS_D2_Pos                 (16U)
#define PWR_CPU2CR_LPDS_D2_Msk                 (0x1UL << PWR_CPU2CR_LPDS_D2_Pos)
#define PWR_CPU2CR_LPDS_D2                     PWR_CPU2CR_LPDS_D2_Msk  /*!< Low power Deepsleep Stop mode selection for the D2 domain / System.This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode (pwr_lp=1)- 1: low-power stop mode selected, external regulator may enter low power mode (pwr_lp =0). Further low power mode selection is provided by LVDS_D2. */
#define PWR_CPU2CR_LVDS_D2_Pos                 (17U)
#define PWR_CPU2CR_LVDS_D2_Msk                 (0x1UL << PWR_CPU2CR_LVDS_D2_Pos)
#define PWR_CPU2CR_LVDS_D2                     PWR_CPU2CR_LVDS_D2_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D2 domain / System.This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D2 and will change the VDDCORE domain supply reset level.- 0: LP-Stop mode VDDCORE domain supply reset level at same level as Run mode. The VDDCORE domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCORE domain supply reset level at lower level than Run mode. Allows to lower VDDCORE domain supply in LPLV-Stop mode (see datasheet for voltage levels). */


/* Bit fields for PWR_D1CR register */
#define PWR_D1CR_LPCFG_D1_Pos                  (0U)
#define PWR_D1CR_LPCFG_D1_Msk                  (0x1UL << PWR_D1CR_LPCFG_D1_Pos)
#define PWR_D1CR_LPCFG_D1                      PWR_D1CR_LPCFG_D1_Msk  /*!< PWR_CPU_ON pin configuration.- 0: PWR_CPU_ON pin signals DStandby mode (PWR_CPU_ON =1 in DRun, DStop1/2/3, and 0 in DStandby). (pwr_cpu_on)- 1: PWR_CPU_ON pin signals DStandby &amp;amp; DStop2/3 modes (PWR_CPU_ON = 1 in DRun, DStop1, and 0 in DStop2/3 and DStandby). (pwr_cpu_onlp) */
#define PWR_D1CR_POPL_D1_Pos                   (8U)
#define PWR_D1CR_POPL_D1_Msk                   (0x1fUL << PWR_D1CR_POPL_D1_Pos)
#define PWR_D1CR_POPL_D1                       PWR_D1CR_POPL_D1_Msk  /*!< pwr_cpu_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_cpu_on low pulse in DStandby mode. (There is no impact on the DSTOP2/3 modes).The LSI oscillator is automatically enabled when needed by the POPL_D1 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */

/* Bit fields for PWR_D2CR register */
#define PWR_D2CR_LPCFG_D2_Pos                  (0U)
#define PWR_D2CR_LPCFG_D2_Msk                  (0x1UL << PWR_D2CR_LPCFG_D2_Pos)
#define PWR_D2CR_LPCFG_D2                      PWR_D2CR_LPCFG_D2_Msk  /*!< PWR_ON pin configuration.- 0: PWR_ON pin signals Standby modes (PWR_ON =1 in Run, Stop1/2, LP-Stop1/2, LPLV-Stop1/2, and 0 in Standby1/2). (pwr_on)- 1: PWR_ON pin signals Standby &amp;amp; LP-Stop, LPLV-Stop modes (PWR_ CPU_ON = 1 in Run, Stop1/2, and 0 in LP-Stop1/2, LPLV-Stop1/2 and Standby1/2). (pwr_onlp) */
#define PWR_D2CR_POPL_D2_Pos                   (8U)
#define PWR_D2CR_POPL_D2_Msk                   (0x1fUL << PWR_D2CR_POPL_D2_Pos)
#define PWR_D2CR_POPL_D2                       PWR_D2CR_POPL_D2_Msk  /*!< pwr_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_on low pulse in Standby mode. (There is no impact on the LP-Stop and LPLV-Stop modes).The LSI oscillator is automatically enabled when needed by the POPL_D2 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */
#define PWR_D2CR_LPLVDLY_D2_Pos                (16U)
#define PWR_D2CR_LPLVDLY_D2_Msk                (0x7UL << PWR_D2CR_LPLVDLY_D2_Pos)
#define PWR_D2CR_LPLVDLY_D2                    PWR_D2CR_LPLVDLY_D2_Msk
#define PWR_D2CR_PODH_D2_Pos                   (24U)
#define PWR_D2CR_PODH_D2_Msk                   (0xFUL << PWR_D2CR_PODH_D2_Pos)
#define PWR_D2CR_PODH_D2                       PWR_D2CR_PODH_D2_Msk


/* Bit fields for PWR_WKUPCR1 register */
#define PWR_WKUPCR1_WKUPC_Pos                  (0U)
#define PWR_WKUPCR1_WKUPC_Msk                  (0x1UL << PWR_WKUPCR1_WKUPC_Pos)
#define PWR_WKUPCR1_WKUPC                      PWR_WKUPCR1_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR1_WKUPP_Pos                  (8U)
#define PWR_WKUPCR1_WKUPP_Msk                  (0x1UL << PWR_WKUPCR1_WKUPP_Pos)
#define PWR_WKUPCR1_WKUPP                      PWR_WKUPCR1_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR1_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR1_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR1_WKUPPUPD_Pos)
#define PWR_WKUPCR1_WKUPPUPD                   PWR_WKUPCR1_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR1_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR1_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR1_WKUPENCPU1_Pos)
#define PWR_WKUPCR1_WKUPENCPU1                 PWR_WKUPCR1_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR1_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR1_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR1_WKUPENCPU2_Pos)
#define PWR_WKUPCR1_WKUPENCPU2                 PWR_WKUPCR1_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR1_WKUPF_Pos                  (31U)
#define PWR_WKUPCR1_WKUPF_Msk                  (0x1UL << PWR_WKUPCR1_WKUPF_Pos)
#define PWR_WKUPCR1_WKUPF                      PWR_WKUPCR1_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR2 register */
#define PWR_WKUPCR2_WKUPC_Pos                  (0U)
#define PWR_WKUPCR2_WKUPC_Msk                  (0x1UL << PWR_WKUPCR2_WKUPC_Pos)
#define PWR_WKUPCR2_WKUPC                      PWR_WKUPCR2_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR2_WKUPP_Pos                  (8U)
#define PWR_WKUPCR2_WKUPP_Msk                  (0x1UL << PWR_WKUPCR2_WKUPP_Pos)
#define PWR_WKUPCR2_WKUPP                      PWR_WKUPCR2_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR2_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR2_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR2_WKUPPUPD_Pos)
#define PWR_WKUPCR2_WKUPPUPD                   PWR_WKUPCR2_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR2_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR2_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR2_WKUPENCPU1_Pos)
#define PWR_WKUPCR2_WKUPENCPU1                 PWR_WKUPCR2_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR2_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR2_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR2_WKUPENCPU2_Pos)
#define PWR_WKUPCR2_WKUPENCPU2                 PWR_WKUPCR2_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR2_WKUPF_Pos                  (31U)
#define PWR_WKUPCR2_WKUPF_Msk                  (0x1UL << PWR_WKUPCR2_WKUPF_Pos)
#define PWR_WKUPCR2_WKUPF                      PWR_WKUPCR2_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR3 register */
#define PWR_WKUPCR3_WKUPC_Pos                  (0U)
#define PWR_WKUPCR3_WKUPC_Msk                  (0x1UL << PWR_WKUPCR3_WKUPC_Pos)
#define PWR_WKUPCR3_WKUPC                      PWR_WKUPCR3_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR3_WKUPP_Pos                  (8U)
#define PWR_WKUPCR3_WKUPP_Msk                  (0x1UL << PWR_WKUPCR3_WKUPP_Pos)
#define PWR_WKUPCR3_WKUPP                      PWR_WKUPCR3_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR3_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR3_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR3_WKUPPUPD_Pos)
#define PWR_WKUPCR3_WKUPPUPD                   PWR_WKUPCR3_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR3_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR3_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR3_WKUPENCPU1_Pos)
#define PWR_WKUPCR3_WKUPENCPU1                 PWR_WKUPCR3_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR3_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR3_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR3_WKUPENCPU2_Pos)
#define PWR_WKUPCR3_WKUPENCPU2                 PWR_WKUPCR3_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR3_WKUPF_Pos                  (31U)
#define PWR_WKUPCR3_WKUPF_Msk                  (0x1UL << PWR_WKUPCR3_WKUPF_Pos)
#define PWR_WKUPCR3_WKUPF                      PWR_WKUPCR3_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR4 register */
#define PWR_WKUPCR4_WKUPC_Pos                  (0U)
#define PWR_WKUPCR4_WKUPC_Msk                  (0x1UL << PWR_WKUPCR4_WKUPC_Pos)
#define PWR_WKUPCR4_WKUPC                      PWR_WKUPCR4_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR4_WKUPP_Pos                  (8U)
#define PWR_WKUPCR4_WKUPP_Msk                  (0x1UL << PWR_WKUPCR4_WKUPP_Pos)
#define PWR_WKUPCR4_WKUPP                      PWR_WKUPCR4_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR4_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR4_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR4_WKUPPUPD_Pos)
#define PWR_WKUPCR4_WKUPPUPD                   PWR_WKUPCR4_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR4_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR4_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR4_WKUPENCPU1_Pos)
#define PWR_WKUPCR4_WKUPENCPU1                 PWR_WKUPCR4_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR4_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR4_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR4_WKUPENCPU2_Pos)
#define PWR_WKUPCR4_WKUPENCPU2                 PWR_WKUPCR4_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR4_WKUPF_Pos                  (31U)
#define PWR_WKUPCR4_WKUPF_Msk                  (0x1UL << PWR_WKUPCR4_WKUPF_Pos)
#define PWR_WKUPCR4_WKUPF                      PWR_WKUPCR4_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR5 register */
#define PWR_WKUPCR5_WKUPC_Pos                  (0U)
#define PWR_WKUPCR5_WKUPC_Msk                  (0x1UL << PWR_WKUPCR5_WKUPC_Pos)
#define PWR_WKUPCR5_WKUPC                      PWR_WKUPCR5_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR5_WKUPP_Pos                  (8U)
#define PWR_WKUPCR5_WKUPP_Msk                  (0x1UL << PWR_WKUPCR5_WKUPP_Pos)
#define PWR_WKUPCR5_WKUPP                      PWR_WKUPCR5_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR5_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR5_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR5_WKUPPUPD_Pos)
#define PWR_WKUPCR5_WKUPPUPD                   PWR_WKUPCR5_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR5_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR5_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR5_WKUPENCPU1_Pos)
#define PWR_WKUPCR5_WKUPENCPU1                 PWR_WKUPCR5_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR5_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR5_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR5_WKUPENCPU2_Pos)
#define PWR_WKUPCR5_WKUPENCPU2                 PWR_WKUPCR5_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR5_WKUPF_Pos                  (31U)
#define PWR_WKUPCR5_WKUPF_Msk                  (0x1UL << PWR_WKUPCR5_WKUPF_Pos)
#define PWR_WKUPCR5_WKUPF                      PWR_WKUPCR5_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR6 register */
#define PWR_WKUPCR6_WKUPC_Pos                  (0U)
#define PWR_WKUPCR6_WKUPC_Msk                  (0x1UL << PWR_WKUPCR6_WKUPC_Pos)
#define PWR_WKUPCR6_WKUPC                      PWR_WKUPCR6_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR6_WKUPP_Pos                  (8U)
#define PWR_WKUPCR6_WKUPP_Msk                  (0x1UL << PWR_WKUPCR6_WKUPP_Pos)
#define PWR_WKUPCR6_WKUPP                      PWR_WKUPCR6_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR6_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR6_WKUPPUPD_Msk               (0x3UL << PWR_WKUPCR6_WKUPPUPD_Pos)
#define PWR_WKUPCR6_WKUPPUPD                   PWR_WKUPCR6_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR6_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR6_WKUPENCPU1_Msk             (0x1UL << PWR_WKUPCR6_WKUPENCPU1_Pos)
#define PWR_WKUPCR6_WKUPENCPU1                 PWR_WKUPCR6_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR6_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR6_WKUPENCPU2_Msk             (0x1UL << PWR_WKUPCR6_WKUPENCPU2_Pos)
#define PWR_WKUPCR6_WKUPENCPU2                 PWR_WKUPCR6_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR6_WKUPF_Pos                  (31U)
#define PWR_WKUPCR6_WKUPF_Msk                  (0x1UL << PWR_WKUPCR6_WKUPF_Pos)
#define PWR_WKUPCR6_WKUPF                      PWR_WKUPCR6_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */


/* Bit fields for PWR_RSECCFGR register */
#define PWR_RSECCFGR_RSEC0_Pos                 (0U)
#define PWR_RSECCFGR_RSEC0_Msk                 (0x1UL << PWR_RSECCFGR_RSEC0_Pos)
#define PWR_RSECCFGR_RSEC0                     PWR_RSECCFGR_RSEC0_Msk  /*!< Secure attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the secure mode for the local resource x.- 0: The local resource number x is non-secure. Secure access is also possible.- 1: The local resource number x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_RPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RSECCFGR_RSEC1_Pos                 (1U)
#define PWR_RSECCFGR_RSEC1_Msk                 (0x1UL << PWR_RSECCFGR_RSEC1_Pos)
#define PWR_RSECCFGR_RSEC1                     PWR_RSECCFGR_RSEC1_Msk  /*!< Secure attribute reference for the local resource number x (x = 1)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC2_Pos                 (2U)
#define PWR_RSECCFGR_RSEC2_Msk                 (0x1UL << PWR_RSECCFGR_RSEC2_Pos)
#define PWR_RSECCFGR_RSEC2                     PWR_RSECCFGR_RSEC2_Msk  /*!< Secure attribute reference for the local resource number x (x = 2)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC3_Pos                 (3U)
#define PWR_RSECCFGR_RSEC3_Msk                 (0x1UL << PWR_RSECCFGR_RSEC3_Pos)
#define PWR_RSECCFGR_RSEC3                     PWR_RSECCFGR_RSEC3_Msk  /*!< Secure attribute reference for the local resource number x (x = 3)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC4_Pos                 (4U)
#define PWR_RSECCFGR_RSEC4_Msk                 (0x1UL << PWR_RSECCFGR_RSEC4_Pos)
#define PWR_RSECCFGR_RSEC4                     PWR_RSECCFGR_RSEC4_Msk  /*!< Secure attribute reference for the local resource number x (x = 4)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC5_Pos                 (5U)
#define PWR_RSECCFGR_RSEC5_Msk                 (0x1UL << PWR_RSECCFGR_RSEC5_Pos)
#define PWR_RSECCFGR_RSEC5                     PWR_RSECCFGR_RSEC5_Msk  /*!< Secure attribute reference for the local resource number x (x = 5)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC6_Pos                 (6U)
#define PWR_RSECCFGR_RSEC6_Msk                 (0x1UL << PWR_RSECCFGR_RSEC6_Pos)
#define PWR_RSECCFGR_RSEC6                     PWR_RSECCFGR_RSEC6_Msk  /*!< Secure attribute reference for the local resource number x (x = 6)See RSEC0 for details. */

/* Bit fields for PWR_RPRIVCFGR register */
#define PWR_RPRIVCFGR_RPRIV0_Pos               (0U)
#define PWR_RPRIVCFGR_RPRIV0_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV0_Pos)
#define PWR_RPRIVCFGR_RPRIV0                   PWR_RPRIVCFGR_RPRIV0_Msk  /*!< Privileged attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the privileged mode for the local resource x.- 0: The local resource number x is unprivileged. Secure access is also possible.- 1: The local resource number x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_RSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RPRIVCFGR_RPRIV1_Pos               (1U)
#define PWR_RPRIVCFGR_RPRIV1_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV1_Pos)
#define PWR_RPRIVCFGR_RPRIV1                   PWR_RPRIVCFGR_RPRIV1_Msk  /*!< Privileged attribute reference for the local resource number x (x = 1)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV2_Pos               (2U)
#define PWR_RPRIVCFGR_RPRIV2_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV2_Pos)
#define PWR_RPRIVCFGR_RPRIV2                   PWR_RPRIVCFGR_RPRIV2_Msk  /*!< Privileged attribute reference for the local resource number x (x = 2)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV3_Pos               (3U)
#define PWR_RPRIVCFGR_RPRIV3_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV3_Pos)
#define PWR_RPRIVCFGR_RPRIV3                   PWR_RPRIVCFGR_RPRIV3_Msk  /*!< Privileged attribute reference for the local resource number x (x = 3)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV4_Pos               (4U)
#define PWR_RPRIVCFGR_RPRIV4_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV4_Pos)
#define PWR_RPRIVCFGR_RPRIV4                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 4)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV5_Pos               (5U)
#define PWR_RPRIVCFGR_RPRIV5_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV5_Pos)
#define PWR_RPRIVCFGR_RPRIV5                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 5)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV6_Pos               (6U)
#define PWR_RPRIVCFGR_RPRIV6_Msk               (0x1UL << PWR_RPRIVCFGR_RPRIV6_Pos)
#define PWR_RPRIVCFGR_RPRIV6                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 6)See RPRIV0 for details. */

/* Bit fields for PWR_R0CIDCFGR register */
#define PWR_R0CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R0CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R0CIDCFGR_CFEN_Pos)
#define PWR_R0CIDCFGR_CFEN                     PWR_R0CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R0CIDCFGR_SCID_Pos                 (4U)
#define PWR_R0CIDCFGR_SCID_Msk                 (0x7UL << PWR_R0CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R0CIDCFGR_SCID                     PWR_R0CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */
										       
/* Bit fields for PWR_R1CIDCFGR register */
#define PWR_R1CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R1CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R1CIDCFGR_CFEN_Pos)
#define PWR_R1CIDCFGR_CFEN                     PWR_R1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R1CIDCFGR_SCID_Pos                 (4U)
#define PWR_R1CIDCFGR_SCID_Msk                 (0x7UL << PWR_R1CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R1CIDCFGR_SCID                     PWR_R1CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R2CIDCFGR register */
#define PWR_R2CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R2CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R2CIDCFGR_CFEN_Pos)
#define PWR_R2CIDCFGR_CFEN                     PWR_R2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R2CIDCFGR_SCID_Pos                 (4U)
#define PWR_R2CIDCFGR_SCID_Msk                 (0x7UL << PWR_R2CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R2CIDCFGR_SCID                     PWR_R2CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R3CIDCFGR register */
#define PWR_R3CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R3CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R3CIDCFGR_CFEN_Pos)
#define PWR_R3CIDCFGR_CFEN                     PWR_R3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R3CIDCFGR_SCID_Pos                 (4U)
#define PWR_R3CIDCFGR_SCID_Msk                 (0x7UL << PWR_R3CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R3CIDCFGR_SCID                     PWR_R3CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R4CIDCFGR register */
#define PWR_R4CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R4CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R4CIDCFGR_CFEN_Pos)
#define PWR_R4CIDCFGR_CFEN                     PWR_R4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R4CIDCFGR_SCID_Pos                 (4U)
#define PWR_R4CIDCFGR_SCID_Msk                 (0x7UL << PWR_R4CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R4CIDCFGR_SCID                     PWR_R4CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R5CIDCFGR register */
#define PWR_R5CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R5CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R5CIDCFGR_CFEN_Pos)
#define PWR_R5CIDCFGR_CFEN                     PWR_R5CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R5CIDCFGR_SCID_Pos                 (4U)
#define PWR_R5CIDCFGR_SCID_Msk                 (0x7UL << PWR_R5CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R5CIDCFGR_SCID                     PWR_R5CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R6CIDCFGR register */
#define PWR_R6CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R6CIDCFGR_CFEN_Msk                 (0x1UL << PWR_R6CIDCFGR_CFEN_Pos)
#define PWR_R6CIDCFGR_CFEN                     PWR_R6CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R6CIDCFGR_SCID_Pos                 (4U)
#define PWR_R6CIDCFGR_SCID_Msk                 (0x7UL << PWR_R6CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R6CIDCFGR_SCID                     PWR_R6CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_WIOSECCFGR register */
#define PWR_WIOSECCFGR_WIOSEC1_Pos             (0U)
#define PWR_WIOSECCFGR_WIOSEC1_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC1_Pos)
#define PWR_WIOSECCFGR_WIOSEC1                 PWR_WIOSECCFGR_WIOSEC1_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the secure mode for the wakeup IO x.- 0: The wakeup IO x is non-secure. Secure access is also possible.- 1: The wakeup IO x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_WIOPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOSECCFGR_WIOSEC2_Pos             (1U)
#define PWR_WIOSECCFGR_WIOSEC2_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC2_Pos)
#define PWR_WIOSECCFGR_WIOSEC2                 PWR_WIOSECCFGR_WIOSEC2_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 2)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC3_Pos             (2U)
#define PWR_WIOSECCFGR_WIOSEC3_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC3_Pos)
#define PWR_WIOSECCFGR_WIOSEC3                 PWR_WIOSECCFGR_WIOSEC3_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 3)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC4_Pos             (3U)
#define PWR_WIOSECCFGR_WIOSEC4_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC4_Pos)
#define PWR_WIOSECCFGR_WIOSEC4                 PWR_WIOSECCFGR_WIOSEC4_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 4)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC5_Pos             (4U)
#define PWR_WIOSECCFGR_WIOSEC5_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC5_Pos)
#define PWR_WIOSECCFGR_WIOSEC5                 PWR_WIOSECCFGR_WIOSEC5_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 5)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC6_Pos             (5U)
#define PWR_WIOSECCFGR_WIOSEC6_Msk             (0x1UL << PWR_WIOSECCFGR_WIOSEC6_Pos)
#define PWR_WIOSECCFGR_WIOSEC6                 PWR_WIOSECCFGR_WIOSEC6_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 6)See WIOSEC1 for details. */

/* Bit fields for PWR_WIOPRIVCFGR register */
#define PWR_WIOPRIVCFGR_WIOPRIV1_Pos           (0U)
#define PWR_WIOPRIVCFGR_WIOPRIV1_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV1_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV1               PWR_WIOPRIVCFGR_WIOPRIV1_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the privileged mode for the Wakeup IO x.- 0: The Wakeup IO x is unprivileged. Privileged access is also possible.- 1: The Wakeup IO x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_WIOSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOPRIVCFGR_WIOPRIV2_Pos           (1U)
#define PWR_WIOPRIVCFGR_WIOPRIV2_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV2_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV2               PWR_WIOPRIVCFGR_WIOPRIV2_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 2)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV3_Pos           (2U)
#define PWR_WIOPRIVCFGR_WIOPRIV3_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV3_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV3               PWR_WIOPRIVCFGR_WIOPRIV3_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 3)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV4_Pos           (3U)
#define PWR_WIOPRIVCFGR_WIOPRIV4_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV4_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV4               PWR_WIOPRIVCFGR_WIOPRIV4_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 4)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV5_Pos           (4U)
#define PWR_WIOPRIVCFGR_WIOPRIV5_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV5_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV5               PWR_WIOPRIVCFGR_WIOPRIV5_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 5)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV6_Pos           (5U)
#define PWR_WIOPRIVCFGR_WIOPRIV6_Msk           (0x1UL << PWR_WIOPRIVCFGR_WIOPRIV6_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV6               PWR_WIOPRIVCFGR_WIOPRIV6_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 6)See WIOPRIV1 for details. */

/* Bit fields for PWR_WIO1CIDCFGR register */
#define PWR_WIO1CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO1CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO1CIDCFGR_CFEN_Pos)
#define PWR_WIO1CIDCFGR_CFEN                   PWR_WIO1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO1CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO1CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO1CIDCFGR_SEM_EN_Pos)
#define PWR_WIO1CIDCFGR_SEM_EN                 PWR_WIO1CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO1CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO1CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO1CIDCFGR_SCID_Pos)
#define PWR_WIO1CIDCFGR_SCID                   PWR_WIO1CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO1CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO1CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC0                PWR_WIO1CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO1CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC1                PWR_WIO1CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO1CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC2                PWR_WIO1CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO1CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC3                PWR_WIO1CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO1CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC4                PWR_WIO1CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO1CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC5                PWR_WIO1CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO1CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC6                PWR_WIO1CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO1CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO1CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC7                PWR_WIO1CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO1SEMCR register */
#define PWR_WIO1SEMCR_SEMCID_CID1       (RIF_CID_CPU1_CA35 << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CID2       (RIF_CID_CPU2_CM33 << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CID3       (RIF_CID_CPU3_CM0  << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CURRENT    PWR_WIO1SEMCR_SEMCID_CID1

#define PWR_WIO1SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO1SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO1SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO1SEMCR_SEM_MUTEX                PWR_WIO1SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO1SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO1SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID                   PWR_WIO1SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO2CIDCFGR register */
#define PWR_WIO2CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO2CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO2CIDCFGR_CFEN_Pos)
#define PWR_WIO2CIDCFGR_CFEN                   PWR_WIO2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO2CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO2CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO2CIDCFGR_SEM_EN_Pos)
#define PWR_WIO2CIDCFGR_SEM_EN                 PWR_WIO2CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO2CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO2CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO2CIDCFGR_SCID_Pos)
#define PWR_WIO2CIDCFGR_SCID                   PWR_WIO2CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO2CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO2CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC0                PWR_WIO2CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO2CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC1                PWR_WIO2CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO2CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC2                PWR_WIO2CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO2CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC3                PWR_WIO2CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO2CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC4                PWR_WIO2CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO2CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC5                PWR_WIO2CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO2CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC6                PWR_WIO2CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO2CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO2CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC7                PWR_WIO2CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO2SEMCR register */
#define PWR_WIO2SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO2SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO2SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO2SEMCR_SEM_MUTEX                PWR_WIO2SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO2SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO2SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO2SEMCR_SEMCID_Pos)
#define PWR_WIO2SEMCR_SEMCID                   PWR_WIO2SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO3CIDCFGR register */
#define PWR_WIO3CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO3CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO3CIDCFGR_CFEN_Pos)
#define PWR_WIO3CIDCFGR_CFEN                   PWR_WIO3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO3CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO3CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO3CIDCFGR_SEM_EN_Pos)
#define PWR_WIO3CIDCFGR_SEM_EN                 PWR_WIO3CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO3CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO3CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO3CIDCFGR_SCID_Pos)
#define PWR_WIO3CIDCFGR_SCID                   PWR_WIO3CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO3CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO3CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC0                PWR_WIO3CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO3CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC1                PWR_WIO3CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO3CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC2                PWR_WIO3CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO3CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC3                PWR_WIO3CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO3CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC4                PWR_WIO3CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO3CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC5                PWR_WIO3CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO3CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC6                PWR_WIO3CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO3CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO3CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC7                PWR_WIO3CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO3SEMCR register */
#define PWR_WIO3SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO3SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO3SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO3SEMCR_SEM_MUTEX                PWR_WIO3SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO3SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO3SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO3SEMCR_SEMCID_Pos)
#define PWR_WIO3SEMCR_SEMCID                   PWR_WIO3SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO4CIDCFGR register */
#define PWR_WIO4CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO4CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO4CIDCFGR_CFEN_Pos)
#define PWR_WIO4CIDCFGR_CFEN                   PWR_WIO4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO4CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO4CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO4CIDCFGR_SEM_EN_Pos)
#define PWR_WIO4CIDCFGR_SEM_EN                 PWR_WIO4CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO4CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO4CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO4CIDCFGR_SCID_Pos)
#define PWR_WIO4CIDCFGR_SCID                   PWR_WIO4CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO4CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO4CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC0                PWR_WIO4CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO4CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC1                PWR_WIO4CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO4CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC2                PWR_WIO4CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO4CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC3                PWR_WIO4CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO4CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC4                PWR_WIO4CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO4CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC5                PWR_WIO4CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO4CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC6                PWR_WIO4CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO4CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO4CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC7                PWR_WIO4CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO4SEMCR register */
#define PWR_WIO4SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO4SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO4SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO4SEMCR_SEM_MUTEX                PWR_WIO4SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO4SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO4SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO4SEMCR_SEMCID_Pos)
#define PWR_WIO4SEMCR_SEMCID                   PWR_WIO4SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO5CIDCFGR register */
#define PWR_WIO5CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO5CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO5CIDCFGR_CFEN_Pos)
#define PWR_WIO5CIDCFGR_CFEN                   PWR_WIO5CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO5CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO5CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO5CIDCFGR_SEM_EN_Pos)
#define PWR_WIO5CIDCFGR_SEM_EN                 PWR_WIO5CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO5CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO5CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO5CIDCFGR_SCID_Pos)
#define PWR_WIO5CIDCFGR_SCID                   PWR_WIO5CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO5CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO5CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC0                PWR_WIO5CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO5CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC1                PWR_WIO5CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO5CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC2                PWR_WIO5CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO5CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC3                PWR_WIO5CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO5CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC4                PWR_WIO5CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO5CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC5                PWR_WIO5CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO5CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC6                PWR_WIO5CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO5CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO5CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC7                PWR_WIO5CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO5SEMCR register */
#define PWR_WIO5SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO5SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO5SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO5SEMCR_SEM_MUTEX                PWR_WIO5SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO5SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO5SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO5SEMCR_SEMCID_Pos)
#define PWR_WIO5SEMCR_SEMCID                   PWR_WIO5SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO6CIDCFGR register */
#define PWR_WIO6CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO6CIDCFGR_CFEN_Msk               (0x1UL << PWR_WIO6CIDCFGR_CFEN_Pos)
#define PWR_WIO6CIDCFGR_CFEN                   PWR_WIO6CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO6CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO6CIDCFGR_SEM_EN_Msk             (0x1UL << PWR_WIO6CIDCFGR_SEM_EN_Pos)
#define PWR_WIO6CIDCFGR_SEM_EN                 PWR_WIO6CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO6CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO6CIDCFGR_SCID_Msk               (0x7UL << PWR_WIO6CIDCFGR_SCID_Pos)
#define PWR_WIO6CIDCFGR_SCID                   PWR_WIO6CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO6CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO6CIDCFGR_SEMWLC0_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC0                PWR_WIO6CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO6CIDCFGR_SEMWLC1_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC1                PWR_WIO6CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO6CIDCFGR_SEMWLC2_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC2                PWR_WIO6CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO6CIDCFGR_SEMWLC3_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC3                PWR_WIO6CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO6CIDCFGR_SEMWLC4_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC4                PWR_WIO6CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO6CIDCFGR_SEMWLC5_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC5                PWR_WIO6CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO6CIDCFGR_SEMWLC6_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC6                PWR_WIO6CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO6CIDCFGR_SEMWLC7_Msk            (0x1UL << PWR_WIO6CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC7                PWR_WIO6CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO6SEMCR register */
#define PWR_WIO6SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO6SEMCR_SEM_MUTEX_Msk            (0x1UL << PWR_WIO6SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO6SEMCR_SEM_MUTEX                PWR_WIO6SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO6SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO6SEMCR_SEMCID_Msk               (0x7UL << PWR_WIO6SEMCR_SEMCID_Pos)
#define PWR_WIO6SEMCR_SEMCID                   PWR_WIO6SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_CPU1D1SR register */
#define PWR_CPU1D1SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU1D1SR_HOLD_BOOT_Msk             (0x1UL << PWR_CPU1D1SR_HOLD_BOOT_Pos)
#define PWR_CPU1D1SR_HOLD_BOOT                 PWR_CPU1D1SR_HOLD_BOOT_Msk  /*!< CPU1 HOLD_BOOT status flag.Set by hardware to indicate when the CPU1 is in HOLD_BOOT state.- 0: CPU1 is allowed to boot.- 1: CPU1 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU1D1SR_CSTATE_Pos                (2U)
#define PWR_CPU1D1SR_CSTATE_Msk                (0x3UL << PWR_CPU1D1SR_CSTATE_Pos)
#define PWR_CPU1D1SR_CSTATE                    PWR_CPU1D1SR_CSTATE_Msk  /*!< CPU1 cluster state status.Set by hardware to indicate when the CPU1 is in CRun, CSleep or CStop modes.- 00: CPU1 is in reset (Hold_boot or Wfben).- 01: CPU1 is in CRun state.- 10: CPU1 is in CSleep state.- 11: CPU1 is in CStop state. */
#define PWR_CPU1D1SR_DSTATE_Pos                (8U)
#define PWR_CPU1D1SR_DSTATE_Msk                (0x7UL << PWR_CPU1D1SR_DSTATE_Pos)
#define PWR_CPU1D1SR_DSTATE                    PWR_CPU1D1SR_DSTATE_Msk  /*!< D1 domain state status.Set by hardware to indicate when the D1 domain is in DRun, DStop1/2/3 or DStandby mode.- 000: DRun- 001: DStop1- 010: DStop2- 011: DStop3- 100: DStandby */

/* Bit fields for PWR_CPU2D2SR register */
#define PWR_CPU2D2SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU2D2SR_HOLD_BOOT_Msk             (0x1UL << PWR_CPU2D2SR_HOLD_BOOT_Pos)
#define PWR_CPU2D2SR_HOLD_BOOT                 PWR_CPU2D2SR_HOLD_BOOT_Msk  /*!< CPU2 HOLD_BOOT status flag.Set by hardware to indicate when the CPU2 is in HOLD_BOOT state.- 0: CPU2 is allowed to boot.- 1: CPU2 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_WFBEN_Pos                 (1U)
#define PWR_CPU2D2SR_WFBEN_Msk                 (0x1UL << PWR_CPU2D2SR_WFBEN_Pos)
#define PWR_CPU2D2SR_WFBEN                     PWR_CPU2D2SR_WFBEN_Msk  /*!< CPU2 Wait for boot enable status flag.Set by hardware to indicate when the CPU2 is in wait for boot enable state. Only applicable in Wakeup event mode.- 0: CPU2 is not in wait for boot enable state. Set at Ã¢ÂÂ0Ã¢ÂÂ in legacy boot mode.- 1: CPU2 is in wait for boot enable state. It will start once an event assign to him will be raised.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_CSTATE_Pos                (2U)
#define PWR_CPU2D2SR_CSTATE_Msk                (0x3UL << PWR_CPU2D2SR_CSTATE_Pos)
#define PWR_CPU2D2SR_CSTATE                    PWR_CPU2D2SR_CSTATE_Msk  /*!< CPU2 cluster state status flag.Set by hardware to indicate when the CPU2 is in CRun, CSleep or CStop states.- 00: CPU2 is in reset (Hold_boot or Wfben).- 01: CPU2 is in CRun state.- 10: CPU2 is in CSleep state.- 11: CPU2 is in CStop state. */
#define PWR_CPU2D2SR_DSTATE_Pos                (8U)
#define PWR_CPU2D2SR_DSTATE_Msk                (0x7UL << PWR_CPU2D2SR_DSTATE_Pos)
#define PWR_CPU2D2SR_DSTATE                    PWR_CPU2D2SR_DSTATE_Msk  /*!< System / D2 state status.Set by hardware to indicate when the system / D2 domain is in Run, Stop, LP-Stop, LPLV-Stop, Standby and VBAT modes.- 000: Run- 001: Stop- 010: LP-Stop- 011: LPLV-Stop- 100: Standby- 101: VBAT */


/* Bit fields for PWR_VERR register */
#define PWR_VERR_MINREV_Pos                    (0U)
#define PWR_VERR_MINREV_Msk                    (0xfUL << PWR_VERR_MINREV_Pos)
#define PWR_VERR_MINREV                        PWR_VERR_MINREV_Msk  /*!< Minor revision number. */
#define PWR_VERR_MAJREV_Pos                    (4U)
#define PWR_VERR_MAJREV_Msk                    (0xfUL << PWR_VERR_MAJREV_Pos)
#define PWR_VERR_MAJREV                        PWR_VERR_MAJREV_Msk  /*!< Major revision number. */

/* Bit fields for PWR_IPIDR register */
#define PWR_IPIDR_ID_Pos                       (0U)
#define PWR_IPIDR_ID_Msk                       (0xffffffffUL << PWR_IPIDR_ID_Pos)
#define PWR_IPIDR_ID                           PWR_IPIDR_ID_Msk  /*!< Identifier of the PWR */

/* Bit fields for PWR_SIDR register */
#define PWR_SIDR_SID_Pos                       (0U)
#define PWR_SIDR_SID_Msk                       (0xffffffffUL << PWR_SIDR_SID_Pos)
#define PWR_SIDR_SID                           PWR_SIDR_SID_Msk  /*!< Decoding space is 1 KB */

/******************************************************************************/
/*                                                                            */
/*                      SRAMs configuration controller                        */
/*                                                                            */
/******************************************************************************/
/****************  Bit definition for RAMCFG_*RAM_CR registers  ***************/
#define RAMCFG_CR_ECCE_Pos                  (0U)
#define RAMCFG_CR_ECCE_Msk                  (0x1UL << RAMCFG_CR_ECCE_Pos)           /*!< 0x00000001 */
#define RAMCFG_CR_ECCE                      RAMCFG_CR_ECCE_Msk                      /*!< ECC Enable */
#define RAMCFG_CR_ALE_Pos                   (4U)
#define RAMCFG_CR_ALE_Msk                   (0x1UL << RAMCFG_CR_ALE_Pos)            /*!< 0x00000010 */
#define RAMCFG_CR_ALE                       RAMCFG_CR_ALE_Msk                       /*!< Address Latch Enable */
#define RAMCFG_CR_SRAMER_Pos                (8U)
#define RAMCFG_CR_SRAMER_Msk                (0x1UL << RAMCFG_CR_SRAMER_Pos)         /*!< 0x00000100 */
#define RAMCFG_CR_SRAMER                    RAMCFG_CR_SRAMER_Msk                    /*!< SRAM Erase */
#define RAMCFG_CR_SRAMHWERDIS_Pos           (12U)
#define RAMCFG_CR_SRAMHWERDIS_Msk           (0x1UL << RAMCFG_CR_SRAMHWERDIS_Pos)    /*!< 0x00001000 */
#define RAMCFG_CR_SRAMHWERDIS               RAMCFG_CR_SRAMHWERDIS_Msk               /*!< SRAM Hardware Erase Disable */

/***************  Bit definition for RAMCFG_*RAM_IER registers  ***************/
#define RAMCFG_IER_SEIE_Pos                 (0U)
#define RAMCFG_IER_SEIE_Msk                 (0x1UL << RAMCFG_IER_SEIE_Pos)          /*!< 0x00000001 */
#define RAMCFG_IER_SEIE                     RAMCFG_IER_SEIE_Msk                     /*!< ECC Single Error Interrupt Enable */
#define RAMCFG_IER_DEIE_Pos                 (1U)
#define RAMCFG_IER_DEIE_Msk                 (0x1UL << RAMCFG_IER_DEIE_Pos)          /*!< 0x00000002 */
#define RAMCFG_IER_DEIE                     RAMCFG_IER_DEIE_Msk                     /*!< ECC Double Error Interrupt Enable */

/****************  Bit definition for RAMCFG_*RAM_ISR registers  **************/
#define RAMCFG_ISR_SEC_Pos                  (0U)
#define RAMCFG_ISR_SEC_Msk                  (0x1UL << RAMCFG_ISR_SEC_Pos)           /*!< 0x00000001 */
#define RAMCFG_ISR_SEC                      RAMCFG_ISR_SEC_Msk                      /*!< ECC Single Error Corrected */
#define RAMCFG_ISR_DED_Pos                  (1U)
#define RAMCFG_ISR_DED_Msk                  (0x1UL << RAMCFG_ISR_DED_Pos)           /*!< 0x00000002 */
#define RAMCFG_ISR_DED                      RAMCFG_ISR_DED_Msk                      /*!< ECC Double Error Detected */
#define RAMCFG_ISR_SRAMBUSY_Pos             (8U)
#define RAMCFG_ISR_SRAMBUSY_Msk             (0x1UL << RAMCFG_ISR_SRAMBUSY_Pos)      /*!< 0x00000100 */
#define RAMCFG_ISR_SRAMBUSY                 RAMCFG_ISR_SRAMBUSY_Msk                 /*!< SRAM busy with erase operation */

/***************  Bit definition for RAMCFG_RETRAM.SEAR register  *************/
#define RAMCFG_SEAR_ESEA_Pos                (0U)
#define RAMCFG_RETRAM_SEAR_ESEA_Msk         (0x7FFFUL << RAMCFG_SEAR_ESEA_Pos)      /*!< 0x00007FFF */
#define RAMCFG_RETRAM_SEAR_ESEA             RAMCFG_RETRAM_SEAR_ESEA_Msk             /*!< ECC Single Error Address */
/**************  Bit definition for RAMCFG_BKPSRAM.SEAR register  *************/
#define RAMCFG_BKPSRAM_SEAR_ESEA_Msk        (0x7FFUL << RAMCFG_SEAR_ESEA_Pos)       /*!< 0x000007FF */
#define RAMCFG_BKPSRAM_SEAR_ESEA            RAMCFG_BKPSRAM_SEAR_ESEA_Msk            /*!< ECC Single Error Address */

/***************  Bit definition for RAMCFG_RETRAM.DEAR register  *************/
#define RAMCFG_DEAR_EDEA_Pos                (0U)
#define RAMCFG_RETRAM_DEAR_EDEA_Msk         (0x7FFFUL << RAMCFG_DEAR_EDEA_Pos)      /*!< 0x00007FFF */
#define RAMCFG_RETRAM_DEAR_EDEA             RAMCFG_RETRAM_DEAR_EDEA_Msk             /*!< ECC Double Error Address */
/**************  Bit definition for RAMCFG_BKPSRAM.SEAR register  *************/
#define RAMCFG_BKPSRAM_DEAR_EDEA_Msk        (0x7FFUL << RAMCFG_DEAR_EDEA_Pos)       /*!< 0x000007FF */
#define RAMCFG_BKPSRAM_DEAR_EDEA            RAMCFG_BKPSRAM_DEAR_EDEA_Msk            /*!< ECC Double Error Address */

/****************  Bit definition for RAMCFG_*RAM_ICR registers  **************/
#define RAMCFG_ICR_CSEC_Pos                 (0U)
#define RAMCFG_ICR_CSEC_Msk                 (0x1UL << RAMCFG_ICR_CSEC_Pos)          /*!< 0x00000001 */
#define RAMCFG_ICR_CSEC                     RAMCFG_ICR_CSEC_Msk                     /*!< Clear ECC Single Error Corrected */
#define RAMCFG_ICR_CDED_Pos                 (1U)
#define RAMCFG_ICR_CDED_Msk                 (0x1UL << RAMCFG_ICR_CDED_Pos)          /*!< 0x00000002 */
#define RAMCFG_ICR_CDED                     RAMCFG_ICR_CDED_Msk                     /*!< Clear ECC Double Error Detected */

/**************  Bit definition for RAMCFG_*RAM_ECCKEYR registers  ************/
#define RAMCFG_ECCKEYR_ECCKEY_Pos           (0U)
#define RAMCFG_ECCKEYR_ECCKEY_Msk           (0xFFUL << RAMCFG_ECCKEYR_ECCKEY_Pos)   /*!< 0x000000FF */
#define RAMCFG_ECCKEYR_ECCKEY               RAMCFG_ECCKEYR_ECCKEY_Msk               /*!< ECC Write Protection Key */

/**************  Bit definition for RAMCFG_*RAM_ERKEYR registers  *************/
#define RAMCFG_ERKEYR_ERASEKEY_Pos          (0U)
#define RAMCFG_ERKEYR_ERASEKEY_Msk          (0xFFUL << RAMCFG_ERKEYR_ERASEKEY_Pos)  /*!< 0x000000FF */
#define RAMCFG_ERKEYR_ERASEKEY              RAMCFG_ERKEYR_ERASEKEY_Msk              /*!< Erase Write Protection Key */

/***************  Bit definition for RAMCFG_*RAM_CCR1 registers  **************/
#define RAMCFG_CCR1_CRCC_Pos                (0U)
#define RAMCFG_CCR1_CRCC_Msk                (0x3UL << RAMCFG_CCR1_CRCC_Pos)         /*!< 0x00000003 */
#define RAMCFG_CCR1_CRCC                    RAMCFG_CCR1_CRCC_Msk                    /*!< CRC configuration */
#define RAMCFG_CCR1_CRCBS_Pos               (4U)
#define RAMCFG_CCR1_CRCBS_Msk               (0x7UL << RAMCFG_CCR1_CRCBS_Pos)        /*!< 0x00000070 */
#define RAMCFG_CCR1_CRCBS                   RAMCFG_CCR1_CRCBS_Msk                   /*!< CRC Buffer Size */

/***************  Bit definition for RAMCFG_*RAM_CCR2 registers  **************/
#define RAMCFG_CCR2_CRCCS_Pos               (0U)
#define RAMCFG_CCR2_CRCCS_Msk               (0x1UL << RAMCFG_CCR2_CRCCS_Pos)        /*!< 0x00000001 */
#define RAMCFG_CCR2_CRCCS                   RAMCFG_CCR2_CRCCS_Msk                   /*!< CRC computation start */
#define RAMCFG_CCR2_CRCFC_Pos               (31U)
#define RAMCFG_CCR2_CRCFC_Msk               (0x1UL << RAMCFG_CCR2_CRCFC_Pos)        /*!< 0x80000000 */
#define RAMCFG_CCR2_CRCFC                   RAMCFG_CCR2_CRCFC_Msk                   /*!< CRC flags clear */

/****************  Bit definition for RAMCFG_*_CRSR registers  ****************/
#define RAMCFG_CRSR_CRCRS_Pos               (0U)
#define RAMCFG_CRSR_CRCRS_Msk               (0xFFFFFFFFUL << RAMCFG_CRSR_CRCRS_Pos) /*!< 0xFFFFFFFF */
#define RAMCFG_CRSR_CRCRS                   RAMCFG_CRSR_CRCRS_Msk                   /*!< CRC reference signature */

/*****************  Bit definition for RAMCFG_*_CSR registers  ****************/
#define RAMCFG_CSR_CRCEOC_Pos               (0U)
#define RAMCFG_CSR_CRCEOC_Msk               (0x1UL << RAMCFG_CSR_CRCEOC_Pos)        /*!< 0x00000001 */
#define RAMCFG_CSR_CRCEOC                   RAMCFG_CSR_CRCEOC_Msk                   /*!< CRC End Of Computation flag */
#define RAMCFG_CSR_CRCSCS_Pos               (1U)
#define RAMCFG_CSR_CRCSCS_Msk               (0x1UL << RAMCFG_CSR_CRCSCS_Pos)        /*!< 0x00000002 */
#define RAMCFG_CSR_CRCSCS                   RAMCFG_CSR_CRCSCS_Msk                   /*!< CRC Signature Check Status flag */

/****************  Bit definition for RAMCFG_*_CCSR registers  ****************/
#define RAMCFG_CCSR_CRCCS_Pos               (0U)
#define RAMCFG_CCSR_CRCCS_Msk               (0xFFFFFFFFUL << RAMCFG_CCSR_CRCCS_Pos) /*!< 0xFFFFFFFF */
#define RAMCFG_CCSR_CRCCS                   RAMCFG_CCSR_CRCCS_Msk                   /*!< CRC calculated signature */

/*******************************************************/
/*           Reset and Clock Control (RCC)             */
/* Reference document :                                */
/*     Chapter #20 "Reset and clock control (RCC)"     */
/*     RM0506 - Reference Manual - STM32MP21xx         */
/*     advanced ARM-based 32/64-bit MPUs               */
/*******************************************************/
/* Bit fields for RCC_SECCFGR0 register */
#define RCC_SECCFGR0_SEC_Pos                     (0U)
#define RCC_SECCFGR0_SEC_Msk                     (0xFFFFFFFFUL << RCC_SECCFGR0_SEC_Pos)               /*!< 0xFFFFFFFF */
#define RCC_SECCFGR0_SEC                         RCC_SECCFGR0_SEC_Msk                              /*!< Secure attribute reference for local resource number x (x = 31 to 0) */

/* Bit fields for RCC_SECCFGR1 register */
#define RCC_SECCFGR1_SEC_Pos                     (0U)
#define RCC_SECCFGR1_SEC_Msk                     (0xFFFFFFFFUL << RCC_SECCFGR1_SEC_Pos)               /*!< 0xFFFFFFFF */
#define RCC_SECCFGR1_SEC                         RCC_SECCFGR1_SEC_Msk                              /*!< Secure attribute reference for the local resource number x (x = 63 to 32) */

/* Bit fields for RCC_SECCFGR2 register */
#define RCC_SECCFGR2_SEC_Pos                       (0U)
#define RCC_SECCFGR2_SEC_Msk                       (0xFFFFFFFFUL << RCC_SECCFGR2_SEC_Pos)               /*!< 0xFFFFFFFF */
#define RCC_SECCFGR2_SEC                           RCC_SECCFGR2_SEC_Msk                              /*!< Secure attribute reference for the local resource number x (x = 95 to 64) */
												   
/* Bit fields for RCC_SECCFGR3 register */         
#define RCC_SECCFGR3_SEC_Pos                       (0U)
#define RCC_SECCFGR3_SEC_Msk                       (0x3FFFFUL << RCC_SECCFGR3_SEC_Pos)                  /*!< 0x0003FFFF */
#define RCC_SECCFGR3_SEC                           RCC_SECCFGR3_SEC_Msk                              /*!< Secure attribute reference for the local resource number x (x = 113 to 96) */
												   
/* Bit fields for RCC_PRIVCFGR0 register */        
#define RCC_PRIVCFGR0_PRIV_Pos                     (0U)
#define RCC_PRIVCFGR0_PRIV_Msk                     (0xFFFFFFFFUL << RCC_PRIVCFGR0_PRIV_Pos)             /*!< 0xFFFFFFFF */
#define RCC_PRIVCFGR0_PRIV                         RCC_PRIVCFGR0_PRIV_Msk                            /*!< Privileged attribute reference for local resource number x (x = 31 to 0) */
												   
/* Bit fields for RCC_PRIVCFGR1 register */        
#define RCC_PRIVCFGR1_PRIV_Pos                     (0U)
#define RCC_PRIVCFGR1_PRIV_Msk                     (0xFFFFFFFFUL << RCC_PRIVCFGR1_PRIV_Pos)             /*!< 0xFFFFFFFF */
#define RCC_PRIVCFGR1_PRIV                         RCC_PRIVCFGR1_PRIV_Msk                            /*!< Privileged attribute reference for the local resource number x (x = 63 to 32) */
												   
/* Bit fields for RCC_PRIVCFGR2 register */        
#define RCC_PRIVCFGR2_PRIV_Pos                     (0U)
#define RCC_PRIVCFGR2_PRIV_Msk                     (0xFFFFFFFFUL << RCC_PRIVCFGR2_PRIV_Pos)             /*!< 0xFFFFFFFF */
#define RCC_PRIVCFGR2_PRIV                         RCC_PRIVCFGR2_PRIV_Msk                            /*!< Privileged attribute reference for the local resource number x (x = 95 to 64) */

/* Bit fields for RCC_PRIVCFGR3 register */
#define RCC_PRIVCFGR3_PRIV_Pos                     (0U)
#define RCC_PRIVCFGR3_PRIV_Msk                     (0x3FFFFUL << RCC_PRIVCFGR3_PRIV_Pos)                /*!< 0x0003FFFF */
#define RCC_PRIVCFGR3_PRIV                         RCC_PRIVCFGR3_PRIV_Msk                            /*!< Privileged attribute reference for the local resource number x (x = 113 to 96) */

/* Bit fields for RCC_RCFGLOCKR0 register */
#define RCC_RCFGLOCKR0_RLOCK_Pos                   (0U)
#define RCC_RCFGLOCKR0_RLOCK_Msk                   (0xFFFFFFFFUL << RCC_RCFGLOCKR0_RLOCK_Pos)           /*!< 0xFFFFFFFF */
#define RCC_RCFGLOCKR0_RLOCK                       RCC_RCFGLOCKR0_RLOCK_Msk                          /*!< RCC local resource number x lock (x = 31 to 0) */

/* Bit fields for RCC_RCFGLOCKR1 register */
#define RCC_RCFGLOCKR1_RLOCK_Pos                   (0U)
#define RCC_RCFGLOCKR1_RLOCK_Msk                   (0xFFFFFFFFUL << RCC_RCFGLOCKR1_RLOCK_Pos)           /*!< 0xFFFFFFFF */
#define RCC_RCFGLOCKR1_RLOCK                       RCC_RCFGLOCKR1_RLOCK_Msk                          /*!< RCC local resource number x lock (x = 63 to 32) */

/* Bit fields for RCC_RCFGLOCKR2 register */
#define RCC_RCFGLOCKR2_RLOCK_Pos                   (0U)
#define RCC_RCFGLOCKR2_RLOCK_Msk                   (0xFFFFFFFFUL << RCC_RCFGLOCKR2_RLOCK_Pos)           /*!< 0xFFFFFFFF */
#define RCC_RCFGLOCKR2_RLOCK                       RCC_RCFGLOCKR2_RLOCK_Msk                          /*!< RCC local resource number x lock (x = 95 to 64) */

/* Bit fields for RCC_RCFGLOCKR3 register */
#define RCC_RCFGLOCKR3_RLOCK_Pos                   (0U)
#define RCC_RCFGLOCKR3_RLOCK_Msk                   (0x3FFFFUL << RCC_RCFGLOCKR3_RLOCK_Pos)              /*!< 0x0003FFFF */
#define RCC_RCFGLOCKR3_RLOCK                       RCC_RCFGLOCKR3_RLOCK_Msk                          /*!< RCC local resource number x lock (x = 113 to 96) */

/* Bit fields for RCC_RxCIDCFGR registers (x in [0;113] */
#define RCC_RxCIDCFGR_CFEN_Pos                     (0U)
#define RCC_RxCIDCFGR_CFEN_Msk                     (0x1UL << RCC_RxCIDCFGR_CFEN_Pos)                    /*!< 0x00000001 */
#define RCC_RxCIDCFGR_CFEN                         RCC_RxCIDCFGR_CFEN_Msk                            /*!< Static CID filter enable */
#define RCC_RxCIDCFGR_SEM_EN_Pos                   (1U)
#define RCC_RxCIDCFGR_SEM_EN_Msk                   (0x1UL << RCC_RxCIDCFGR_SEM_EN_Pos)                  /*!< 0x00000002 */
#define RCC_RxCIDCFGR_SEM_EN                       RCC_RxCIDCFGR_SEM_EN_Msk                          /*!< Semaphore enable */
#define RCC_RxCIDCFGR_SCID_Pos                     (4U)
#define RCC_RxCIDCFGR_SCID_Msk                     (0x7UL << RCC_RxCIDCFGR_SCID_Pos)                    /*!< 0x00000070 */
#define RCC_RxCIDCFGR_SCID                         RCC_RxCIDCFGR_SCID_Msk                            /*!< Static compartment ID */
#define RCC_RxCIDCFGR_SEMWLC_Pos                   (16U)
#define RCC_RxCIDCFGR_SEMWLC_Msk                   (0xFFUL << RCC_RxCIDCFGR_SEMWLC_Pos)                 /*!< 0x00FF0000 */
#define RCC_RxCIDCFGR_SEMWLC                       RCC_RxCIDCFGR_SEMWLC_Msk                          /*!< Semaphore white-list for compartment y (y = 7 to 0) */

/* Bit fields for RCC_RxSEMCR register  ******************/
#define RCC_RxSEMCR_SEM_MUTEX_Pos                  (0U)
#define RCC_RxSEMCR_SEM_MUTEX_Msk                  (0x1UL << RCC_RxSEMCR_SEM_MUTEX_Pos)                 /*!< 0x00000001 */
#define RCC_RxSEMCR_SEM_MUTEX                      RCC_RxSEMCR_SEM_MUTEX_Msk                         /*!< Semaphore mutex */
#define RCC_RxSEMCR_SEMCID_Pos                     (4U)
#define RCC_RxSEMCR_SEMCID_Msk                     (0x7UL << RCC_RxSEMCR_SEMCID_Pos)                    /*!< 0x00000070 */
#define RCC_RxSEMCR_SEMCID                         RCC_RxSEMCR_SEMCID_Msk                            /*!< Semaphore compartment ID */


/* Bit fields for RCC_GRSTCSETR register */
#define RCC_GRSTCSETR_SYSRST_Pos                   (0U)
#define RCC_GRSTCSETR_SYSRST_Msk                   (0x1UL << RCC_GRSTCSETR_SYSRST_Pos)                  /*!< 0x00000001 */
#define RCC_GRSTCSETR_SYSRST                     RCC_GRSTCSETR_SYSRST_Msk                          /*!< System reset */

/* Bit fields for RCC_C1RSTCSETR register */
#define RCC_C1RSTCSETR_C1RST_Pos                   (0U)
#define RCC_C1RSTCSETR_C1RST_Msk                   (0x1UL << RCC_C1RSTCSETR_C1RST_Pos)                  /*!< 0x00000001 */
#define RCC_C1RSTCSETR_C1RST                     RCC_C1RSTCSETR_C1RST_Msk                          /*!< CPU1 reset */

/* Bit fields for RCC_C2RSTCSETR register */
#define RCC_C2RSTCSETR_C2RST_Pos                   (0U)
#define RCC_C2RSTCSETR_C2RST_Msk                   (0x1UL << RCC_C2RSTCSETR_C2RST_Pos)                  /*!< 0x00000001 */
#define RCC_C2RSTCSETR_C2RST                       RCC_C2RSTCSETR_C2RST_Msk                          /*!< CPU2 reset */

/* Bit fields for RCC_HWRSTSCLRR register */
#define RCC_HWRSTSCLRR_PORRSTF_Pos                 (0U)
#define RCC_HWRSTSCLRR_PORRSTF_Msk                 (0x1UL << RCC_HWRSTSCLRR_PORRSTF_Pos)                /*!< 0x00000001 */
#define RCC_HWRSTSCLRR_PORRSTF                     RCC_HWRSTSCLRR_PORRSTF_Msk                        /*!< POR/PDR reset flag */
#define RCC_HWRSTSCLRR_BORRSTF_Pos                 (1U)
#define RCC_HWRSTSCLRR_BORRSTF_Msk                 (0x1UL << RCC_HWRSTSCLRR_BORRSTF_Pos)                /*!< 0x00000002 */
#define RCC_HWRSTSCLRR_BORRSTF                     RCC_HWRSTSCLRR_BORRSTF_Msk                        /*!< BOR reset flag */
#define RCC_HWRSTSCLRR_PADRSTF_Pos                 (2U)
#define RCC_HWRSTSCLRR_PADRSTF_Msk                 (0x1UL << RCC_HWRSTSCLRR_PADRSTF_Pos)                /*!< 0x00000004 */
#define RCC_HWRSTSCLRR_PADRSTF                     RCC_HWRSTSCLRR_PADRSTF_Msk                        /*!< NRST reset flag */
#define RCC_HWRSTSCLRR_HCSSRSTF_Pos                (3U)
#define RCC_HWRSTSCLRR_HCSSRSTF_Msk                (0x1UL << RCC_HWRSTSCLRR_HCSSRSTF_Pos)               /*!< 0x00000008 */
#define RCC_HWRSTSCLRR_HCSSRSTF                    RCC_HWRSTSCLRR_HCSSRSTF_Msk                       /*!< HSE CSS reset flag */
#define RCC_HWRSTSCLRR_VCORERSTF_Pos               (4U)
#define RCC_HWRSTSCLRR_VCORERSTF_Msk               (0x1UL << RCC_HWRSTSCLRR_VCORERSTF_Pos)              /*!< 0x00000010 */
#define RCC_HWRSTSCLRR_VCORERSTF                   RCC_HWRSTSCLRR_VCORERSTF_Msk                      /*!< VDDCORE reset flag */
#define RCC_HWRSTSCLRR_SYSC1RSTF_Pos               (5U)
#define RCC_HWRSTSCLRR_SYSC1RSTF_Msk               (0x1UL << RCC_HWRSTSCLRR_SYSC1RSTF_Pos)              /*!< 0x00000020 */
#define RCC_HWRSTSCLRR_SYSC1RSTF                   RCC_HWRSTSCLRR_SYSC1RSTF_Msk                      /*!< CPU1 system reset flag */
#define RCC_HWRSTSCLRR_SYSC2RSTF_Pos               (6U)
#define RCC_HWRSTSCLRR_SYSC2RSTF_Msk               (0x1UL << RCC_HWRSTSCLRR_SYSC2RSTF_Pos)              /*!< 0x00000040 */
#define RCC_HWRSTSCLRR_SYSC2RSTF                   RCC_HWRSTSCLRR_SYSC2RSTF_Msk                      /*!< CPU2 system reset flag */
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Pos            (7U)
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF_Msk            (0x1UL << RCC_HWRSTSCLRR_IWDG1SYSRSTF_Pos)           /*!< 0x00000080 */
#define RCC_HWRSTSCLRR_IWDG1SYSRSTF                RCC_HWRSTSCLRR_IWDG1SYSRSTF_Msk                   /*!< IWDG1 system reset flag */
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Pos            (8U)
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF_Msk            (0x1UL << RCC_HWRSTSCLRR_IWDG2SYSRSTF_Pos)           /*!< 0x00000100 */
#define RCC_HWRSTSCLRR_IWDG2SYSRSTF                RCC_HWRSTSCLRR_IWDG2SYSRSTF_Msk                   /*!< IWDG2 system reset flag */
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Pos            (9U)
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF_Msk            (0x1UL << RCC_HWRSTSCLRR_IWDG3SYSRSTF_Pos)           /*!< 0x00000200 */
#define RCC_HWRSTSCLRR_IWDG3SYSRSTF                RCC_HWRSTSCLRR_IWDG3SYSRSTF_Msk                   /*!< IWDG3 system reset flag */
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Pos            (10U)
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF_Msk            (0x1UL << RCC_HWRSTSCLRR_IWDG4SYSRSTF_Pos)           /*!< 0x00000400 */
#define RCC_HWRSTSCLRR_IWDG4SYSRSTF                RCC_HWRSTSCLRR_IWDG4SYSRSTF_Msk                   /*!< IWDG4 system reset flag */
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Pos           (12U)
#define RCC_HWRSTSCLRR_RETCRCERRRSTF_Msk           (0x1UL << RCC_HWRSTSCLRR_RETCRCERRRSTF_Pos)          /*!< 0x00001000 */
#define RCC_HWRSTSCLRR_RETCRCERRRSTF               RCC_HWRSTSCLRR_RETCRCERRRSTF_Msk                    /*!< RETRAM CRC error reset flag */
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Pos       (13U)
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Msk       (0x1UL << RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Pos)      /*!< 0x00002000 */
#define RCC_HWRSTSCLRR_RETECCFAILCRCRSTF           RCC_HWRSTSCLRR_RETECCFAILCRCRSTF_Msk                /*!< RETRAM ECC failure reset flag during the CRC computation phase */
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Pos      (14U)
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Msk      (0x1UL << RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Pos)     /*!< 0x00004000 */
#define RCC_HWRSTSCLRR_RETECCFAILRESTRSTF          RCC_HWRSTSCLRR_RETECCFAILRESTRSTF_Msk               /*!< RETRAM ECC failure reset flag during system restoration phase */

/***************  Bit fields for RCC_C1HWRSTSCLRR register  ***************/
#define RCC_C1HWRSTSCLRR_VCPURSTF_Pos              (0U)
#define RCC_C1HWRSTSCLRR_VCPURSTF_Msk              (0x1UL << RCC_C1HWRSTSCLRR_VCPURSTF_Pos)             /*!< 0x00000001 */
#define RCC_C1HWRSTSCLRR_VCPURSTF                  RCC_C1HWRSTSCLRR_VCPURSTF_Msk                     /*!< VDDCPU reset flag */
#define RCC_C1HWRSTSCLRR_C1RSTF_Pos                (1U)
#define RCC_C1HWRSTSCLRR_C1RSTF_Msk                (0x1UL << RCC_C1HWRSTSCLRR_C1RSTF_Pos)               /*!< 0x00000002 */
#define RCC_C1HWRSTSCLRR_C1RSTF                    RCC_C1HWRSTSCLRR_C1RSTF_Msk                       /*!< CPU1 reset flag */
                  
/***************  Bit fields for RCC_C2HWRSTSCLRR register  ***************/
#define RCC_C2HWRSTSCLRR_C2RSTF_Pos                (0U)
#define RCC_C2HWRSTSCLRR_C2RSTF_Msk                (0x1UL << RCC_C2HWRSTSCLRR_C2RSTF_Pos)               /*!< 0x00000001 */
#define RCC_C2HWRSTSCLRR_C2RSTF                    RCC_C2HWRSTSCLRR_C2RSTF_Msk                       /*!< CPU2 reset flag */

/**************  Bit fields for RCC_C1BOOTRSTSSETR register  **************/
#define RCC_C1BOOTRSTSSETR_PORRSTF_Pos             (0U)
#define RCC_C1BOOTRSTSSETR_PORRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSSETR_PORRSTF_Pos)            /*!< 0x00000001 */
#define RCC_C1BOOTRSTSSETR_PORRSTF                 RCC_C1BOOTRSTSSETR_PORRSTF_Msk                    /*!< POR/PDR reset flag */
#define RCC_C1BOOTRSTSSETR_BORRSTF_Pos             (1U)
#define RCC_C1BOOTRSTSSETR_BORRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSSETR_BORRSTF_Pos)            /*!< 0x00000002 */
#define RCC_C1BOOTRSTSSETR_BORRSTF                 RCC_C1BOOTRSTSSETR_BORRSTF_Msk                    /*!< BOR reset flag */
#define RCC_C1BOOTRSTSSETR_PADRSTF_Pos             (2U)
#define RCC_C1BOOTRSTSSETR_PADRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSSETR_PADRSTF_Pos)            /*!< 0x00000004 */
#define RCC_C1BOOTRSTSSETR_PADRSTF                 RCC_C1BOOTRSTSSETR_PADRSTF_Msk                    /*!< NRST reset flag */
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Pos            (3U)
#define RCC_C1BOOTRSTSSETR_HCSSRSTF_Msk            (0x1UL << RCC_C1BOOTRSTSSETR_HCSSRSTF_Pos)           /*!< 0x00000008 */
#define RCC_C1BOOTRSTSSETR_HCSSRSTF                RCC_C1BOOTRSTSSETR_HCSSRSTF_Msk                   /*!< HSE CSS reset flag */
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Pos           (4U)
#define RCC_C1BOOTRSTSSETR_VCORERSTF_Msk           (0x1UL << RCC_C1BOOTRSTSSETR_VCORERSTF_Pos)          /*!< 0x00000010 */
#define RCC_C1BOOTRSTSSETR_VCORERSTF               RCC_C1BOOTRSTSSETR_VCORERSTF_Msk                    /*!< VDDCORE reset flag */
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Pos            (5U)
#define RCC_C1BOOTRSTSSETR_VCPURSTF_Msk            (0x1UL << RCC_C1BOOTRSTSSETR_VCPURSTF_Pos)           /*!< 0x00000020 */
#define RCC_C1BOOTRSTSSETR_VCPURSTF                RCC_C1BOOTRSTSSETR_VCPURSTF_Msk                   /*!< VDDCPU reset flag */
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Pos           (6U)
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF_Msk           (0x1UL << RCC_C1BOOTRSTSSETR_SYSC1RSTF_Pos)          /*!< 0x00000040 */
#define RCC_C1BOOTRSTSSETR_SYSC1RSTF               RCC_C1BOOTRSTSSETR_SYSC1RSTF_Msk                    /*!< CPU1 system reset flag */
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Pos           (7U)
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF_Msk           (0x1UL << RCC_C1BOOTRSTSSETR_SYSC2RSTF_Pos)          /*!< 0x00000080 */
#define RCC_C1BOOTRSTSSETR_SYSC2RSTF               RCC_C1BOOTRSTSSETR_SYSC2RSTF_Msk                    /*!< CPU2 system reset flag */
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Pos        (8U)
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Pos)       /*!< 0x00000100 */
#define RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF            RCC_C1BOOTRSTSSETR_IWDG1SYSRSTF_Msk                 /*!< IWDG1 system reset flag */
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Pos        (9U)
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Pos)       /*!< 0x00000200 */
#define RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF            RCC_C1BOOTRSTSSETR_IWDG2SYSRSTF_Msk                 /*!< IWDG2 system reset flag */
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Pos        (10U)
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Pos)       /*!< 0x00000400 */
#define RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF            RCC_C1BOOTRSTSSETR_IWDG3SYSRSTF_Msk                 /*!< IWDG3 system reset flag */
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Pos        (11U)
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Pos)       /*!< 0x00000800 */
#define RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF            RCC_C1BOOTRSTSSETR_IWDG4SYSRSTF_Msk                 /*!< IWDG4 system reset flag */
#define RCC_C1BOOTRSTSSETR_C1RSTF_Pos              (13U)
#define RCC_C1BOOTRSTSSETR_C1RSTF_Msk              (0x1UL << RCC_C1BOOTRSTSSETR_C1RSTF_Pos)             /*!< 0x00002000 */
#define RCC_C1BOOTRSTSSETR_C1RSTF                  RCC_C1BOOTRSTSSETR_C1RSTF_Msk                     /*!< CPU1 reset flag */
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Pos       (17U)
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Msk       (0x1UL << RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Pos)      /*!< 0x00020000 */
#define RCC_C1BOOTRSTSSETR_RETCRCERRRSTF           RCC_C1BOOTRSTSSETR_RETCRCERRRSTF_Msk                /*!< RETRAM CRC error reset flag */
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos   (18U)
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk   (0x1UL << RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos)  /*!< 0x00040000 */
#define RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF       RCC_C1BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk            /*!< RETRAM ECC failure reset flag during the CRC computation phase */
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos  (19U)
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk  (0x1UL << RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos) /*!< 0x00080000 */
#define RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF      RCC_C1BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk           /*!< RETRAM ECC failure reset flag during system restoration phase */
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Pos          (20U)
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF_Msk          (0x1UL << RCC_C1BOOTRSTSSETR_STBYC1RSTF_Pos)         /*!< 0x00100000 */
#define RCC_C1BOOTRSTSSETR_STBYC1RSTF              RCC_C1BOOTRSTSSETR_STBYC1RSTF_Msk                   /*!< CPU1 system Standby reset flag */
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Pos          (22U)
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF_Msk          (0x1UL << RCC_C1BOOTRSTSSETR_D1STBYRSTF_Pos)         /*!< 0x00400000 */
#define RCC_C1BOOTRSTSSETR_D1STBYRSTF              RCC_C1BOOTRSTSSETR_D1STBYRSTF_Msk                   /*!< D1 DStandby reset flag */
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Pos          (23U)
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF_Msk          (0x1UL << RCC_C1BOOTRSTSSETR_D2STBYRSTF_Pos)         /*!< 0x00800000 */
#define RCC_C1BOOTRSTSSETR_D2STBYRSTF              RCC_C1BOOTRSTSSETR_D2STBYRSTF_Msk                   /*!< D2 DStandby reset flag */

/**************  Bit fields for RCC_C1BOOTRSTSCLRR register  **************/
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Pos             (0U)
#define RCC_C1BOOTRSTSCLRR_PORRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSCLRR_PORRSTF_Pos)            /*!< 0x00000001 */
#define RCC_C1BOOTRSTSCLRR_PORRSTF                 RCC_C1BOOTRSTSCLRR_PORRSTF_Msk                    /*!< POR/PDR reset flag */
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Pos             (1U)
#define RCC_C1BOOTRSTSCLRR_BORRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSCLRR_BORRSTF_Pos)            /*!< 0x00000002 */
#define RCC_C1BOOTRSTSCLRR_BORRSTF                 RCC_C1BOOTRSTSCLRR_BORRSTF_Msk                    /*!< BOR reset flag */
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Pos             (2U)
#define RCC_C1BOOTRSTSCLRR_PADRSTF_Msk             (0x1UL << RCC_C1BOOTRSTSCLRR_PADRSTF_Pos)            /*!< 0x00000004 */
#define RCC_C1BOOTRSTSCLRR_PADRSTF                 RCC_C1BOOTRSTSCLRR_PADRSTF_Msk                    /*!< NRST reset flag */
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Pos            (3U)
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF_Msk            (0x1UL << RCC_C1BOOTRSTSCLRR_HCSSRSTF_Pos)           /*!< 0x00000008 */
#define RCC_C1BOOTRSTSCLRR_HCSSRSTF                RCC_C1BOOTRSTSCLRR_HCSSRSTF_Msk                   /*!< HSE CSS reset flag */
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Pos           (4U)
#define RCC_C1BOOTRSTSCLRR_VCORERSTF_Msk           (0x1UL << RCC_C1BOOTRSTSCLRR_VCORERSTF_Pos)          /*!< 0x00000010 */
#define RCC_C1BOOTRSTSCLRR_VCORERSTF               RCC_C1BOOTRSTSCLRR_VCORERSTF_Msk                    /*!< VDDCORE reset flag */
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Pos            (5U)
#define RCC_C1BOOTRSTSCLRR_VCPURSTF_Msk            (0x1UL << RCC_C1BOOTRSTSCLRR_VCPURSTF_Pos)           /*!< 0x00000020 */
#define RCC_C1BOOTRSTSCLRR_VCPURSTF                RCC_C1BOOTRSTSCLRR_VCPURSTF_Msk                   /*!< VDDCPU reset flag */
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Pos           (6U)
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Msk           (0x1UL << RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Pos)          /*!< 0x00000040 */
#define RCC_C1BOOTRSTSCLRR_SYSC1RSTF               RCC_C1BOOTRSTSCLRR_SYSC1RSTF_Msk                    /*!< CPU1 system reset flag */
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Pos           (7U)
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Msk           (0x1UL << RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Pos)          /*!< 0x00000080 */
#define RCC_C1BOOTRSTSCLRR_SYSC2RSTF               RCC_C1BOOTRSTSCLRR_SYSC2RSTF_Msk                    /*!< CPU2 system reset flag */
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Pos        (8U)
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Pos)       /*!< 0x00000100 */
#define RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF            RCC_C1BOOTRSTSCLRR_IWDG1SYSRSTF_Msk                 /*!< IWDG1 system reset flag */
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Pos        (9U)
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Pos)       /*!< 0x00000200 */
#define RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF            RCC_C1BOOTRSTSCLRR_IWDG2SYSRSTF_Msk                 /*!< IWDG2 system reset flag */
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Pos        (10U)
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Pos)       /*!< 0x00000400 */
#define RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF            RCC_C1BOOTRSTSCLRR_IWDG3SYSRSTF_Msk                 /*!< IWDG3 system reset flag */
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Pos        (11U)
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Msk        (0x1UL << RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Pos)       /*!< 0x00000800 */
#define RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF            RCC_C1BOOTRSTSCLRR_IWDG4SYSRSTF_Msk                 /*!< IWDG4 system reset flag */
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Pos              (13U)
#define RCC_C1BOOTRSTSCLRR_C1RSTF_Msk              (0x1UL << RCC_C1BOOTRSTSCLRR_C1RSTF_Pos)             /*!< 0x00002000 */
#define RCC_C1BOOTRSTSCLRR_C1RSTF                  RCC_C1BOOTRSTSCLRR_C1RSTF_Msk                     /*!< CPU1 reset flag */
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Pos       (17U)
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Msk       (0x1UL << RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Pos)      /*!< 0x00020000 */
#define RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF           RCC_C1BOOTRSTSCLRR_RETCRCERRRSTF_Msk                /*!< RETRAM CRC error reset flag */
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos   (18U)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk   (0x1UL << RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos)  /*!< 0x00040000 */
#define RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF       RCC_C1BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk            /*!< RETRAM ECC failure reset flag during the CRC computation phase */
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos  (19U)
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk  (0x1UL << RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos) /*!< 0x00080000 */
#define RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF      RCC_C1BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk           /*!< RETRAM ECC failure reset flag during system restoration phase */
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Pos          (20U)
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Msk          (0x1UL << RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Pos)         /*!< 0x00100000 */
#define RCC_C1BOOTRSTSCLRR_STBYC1RSTF              RCC_C1BOOTRSTSCLRR_STBYC1RSTF_Msk                   /*!< CPU1 system Standby reset flag */
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Pos          (22U)
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Msk          (0x1UL << RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Pos)         /*!< 0x00400000 */
#define RCC_C1BOOTRSTSCLRR_D1STBYRSTF              RCC_C1BOOTRSTSCLRR_D1STBYRSTF_Msk                   /*!< D1 DStandby reset flag */
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Pos          (23U)
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Msk          (0x1UL << RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Pos)         /*!< 0x00800000 */
#define RCC_C1BOOTRSTSCLRR_D2STBYRSTF              RCC_C1BOOTRSTSCLRR_D2STBYRSTF_Msk                   /*!< D2 DStandby reset flag */

/**************  Bit fields for RCC_C2BOOTRSTSSETR register  **************/
#define RCC_C2BOOTRSTSSETR_PORRSTF_Pos             (0U)
#define RCC_C2BOOTRSTSSETR_PORRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSSETR_PORRSTF_Pos)            /*!< 0x00000001 */
#define RCC_C2BOOTRSTSSETR_PORRSTF                 RCC_C2BOOTRSTSSETR_PORRSTF_Msk                    /*!< POR/PDR reset flag */
#define RCC_C2BOOTRSTSSETR_BORRSTF_Pos             (1U)
#define RCC_C2BOOTRSTSSETR_BORRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSSETR_BORRSTF_Pos)            /*!< 0x00000002 */
#define RCC_C2BOOTRSTSSETR_BORRSTF                 RCC_C2BOOTRSTSSETR_BORRSTF_Msk                    /*!< BOR reset flag */
#define RCC_C2BOOTRSTSSETR_PADRSTF_Pos             (2U)
#define RCC_C2BOOTRSTSSETR_PADRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSSETR_PADRSTF_Pos)            /*!< 0x00000004 */
#define RCC_C2BOOTRSTSSETR_PADRSTF                 RCC_C2BOOTRSTSSETR_PADRSTF_Msk                    /*!< NRST reset flag */
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Pos            (3U)
#define RCC_C2BOOTRSTSSETR_HCSSRSTF_Msk            (0x1UL << RCC_C2BOOTRSTSSETR_HCSSRSTF_Pos)           /*!< 0x00000008 */
#define RCC_C2BOOTRSTSSETR_HCSSRSTF                RCC_C2BOOTRSTSSETR_HCSSRSTF_Msk                   /*!< HSE CSS reset flag */
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Pos           (4U)
#define RCC_C2BOOTRSTSSETR_VCORERSTF_Msk           (0x1UL << RCC_C2BOOTRSTSSETR_VCORERSTF_Pos)          /*!< 0x00000010 */
#define RCC_C2BOOTRSTSSETR_VCORERSTF               RCC_C2BOOTRSTSSETR_VCORERSTF_Msk                    /*!< VDDCORE reset flag */
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Pos           (6U)
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF_Msk           (0x1UL << RCC_C2BOOTRSTSSETR_SYSC1RSTF_Pos)          /*!< 0x00000040 */
#define RCC_C2BOOTRSTSSETR_SYSC1RSTF               RCC_C2BOOTRSTSSETR_SYSC1RSTF_Msk                    /*!< CPU1 system reset flag */
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Pos           (7U)
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF_Msk           (0x1UL << RCC_C2BOOTRSTSSETR_SYSC2RSTF_Pos)          /*!< 0x00000080 */
#define RCC_C2BOOTRSTSSETR_SYSC2RSTF               RCC_C2BOOTRSTSSETR_SYSC2RSTF_Msk                    /*!< CPU2 system reset flag */
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Pos        (8U)
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Pos)       /*!< 0x00000100 */
#define RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF            RCC_C2BOOTRSTSSETR_IWDG1SYSRSTF_Msk                 /*!< IWDG1 system reset flag */
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Pos        (9U)
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Pos)       /*!< 0x00000200 */
#define RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF            RCC_C2BOOTRSTSSETR_IWDG2SYSRSTF_Msk                 /*!< IWDG2 system reset flag */
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Pos        (10U)
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Pos)       /*!< 0x00000400 */
#define RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF            RCC_C2BOOTRSTSSETR_IWDG3SYSRSTF_Msk                 /*!< IWDG3 system reset flag */
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Pos        (11U)
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Pos)       /*!< 0x00000800 */
#define RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF            RCC_C2BOOTRSTSSETR_IWDG4SYSRSTF_Msk                 /*!< IWDG4 system reset flag */
#define RCC_C2BOOTRSTSSETR_C2RSTF_Pos              (14U)
#define RCC_C2BOOTRSTSSETR_C2RSTF_Msk              (0x1UL << RCC_C2BOOTRSTSSETR_C2RSTF_Pos)             /*!< 0x00004000 */
#define RCC_C2BOOTRSTSSETR_C2RSTF                  RCC_C2BOOTRSTSSETR_C2RSTF_Msk                     /*!< CPU2 reset flag */
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Pos       (17U)
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Msk       (0x1UL << RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Pos)      /*!< 0x00020000 */
#define RCC_C2BOOTRSTSSETR_RETCRCERRRSTF           RCC_C2BOOTRSTSSETR_RETCRCERRRSTF_Msk                /*!< RETRAM CRC error reset flag */
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos   (18U)
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk   (0x1UL << RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Pos)  /*!< 0x00040000 */
#define RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF       RCC_C2BOOTRSTSSETR_RETECCFAILCRCRSTF_Msk            /*!< RETRAM ECC failure reset flag during the CRC computation phase */
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos  (19U)
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk  (0x1UL << RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Pos) /*!< 0x00080000 */
#define RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF      RCC_C2BOOTRSTSSETR_RETECCFAILRESTRSTF_Msk           /*!< RETRAM ECC failure reset flag during system restoration phase */
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Pos          (21U)
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF_Msk          (0x1UL << RCC_C2BOOTRSTSSETR_STBYC2RSTF_Pos)         /*!< 0x00200000 */
#define RCC_C2BOOTRSTSSETR_STBYC2RSTF              RCC_C2BOOTRSTSSETR_STBYC2RSTF_Msk                   /*!< CPU2 system Standby reset flag */
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Pos          (23U)
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF_Msk          (0x1UL << RCC_C2BOOTRSTSSETR_D2STBYRSTF_Pos)         /*!< 0x00800000 */
#define RCC_C2BOOTRSTSSETR_D2STBYRSTF              RCC_C2BOOTRSTSSETR_D2STBYRSTF_Msk                   /*!< D2 DStandby reset flag */

/**************  Bit fields for RCC_C2BOOTRSTSCLRR register  **************/
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Pos             (0U)
#define RCC_C2BOOTRSTSCLRR_PORRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSCLRR_PORRSTF_Pos)            /*!< 0x00000001 */
#define RCC_C2BOOTRSTSCLRR_PORRSTF                 RCC_C2BOOTRSTSCLRR_PORRSTF_Msk                    /*!< POR/PDR reset flag */
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Pos             (1U)
#define RCC_C2BOOTRSTSCLRR_BORRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSCLRR_BORRSTF_Pos)            /*!< 0x00000002 */
#define RCC_C2BOOTRSTSCLRR_BORRSTF                 RCC_C2BOOTRSTSCLRR_BORRSTF_Msk                    /*!< BOR reset flag */
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Pos             (2U)
#define RCC_C2BOOTRSTSCLRR_PADRSTF_Msk             (0x1UL << RCC_C2BOOTRSTSCLRR_PADRSTF_Pos)            /*!< 0x00000004 */
#define RCC_C2BOOTRSTSCLRR_PADRSTF                 RCC_C2BOOTRSTSCLRR_PADRSTF_Msk                    /*!< NRST reset flag */
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Pos            (3U)
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF_Msk            (0x1UL << RCC_C2BOOTRSTSCLRR_HCSSRSTF_Pos)           /*!< 0x00000008 */
#define RCC_C2BOOTRSTSCLRR_HCSSRSTF                RCC_C2BOOTRSTSCLRR_HCSSRSTF_Msk                   /*!< HSE CSS reset flag */
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Pos           (4U)
#define RCC_C2BOOTRSTSCLRR_VCORERSTF_Msk           (0x1UL << RCC_C2BOOTRSTSCLRR_VCORERSTF_Pos)          /*!< 0x00000010 */
#define RCC_C2BOOTRSTSCLRR_VCORERSTF               RCC_C2BOOTRSTSCLRR_VCORERSTF_Msk                    /*!< VDDCORE reset flag */
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Pos           (6U)
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Msk           (0x1UL << RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Pos)          /*!< 0x00000040 */
#define RCC_C2BOOTRSTSCLRR_SYSC1RSTF               RCC_C2BOOTRSTSCLRR_SYSC1RSTF_Msk                    /*!< CPU1 system reset flag */
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Pos           (7U)
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Msk           (0x1UL << RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Pos)          /*!< 0x00000080 */
#define RCC_C2BOOTRSTSCLRR_SYSC2RSTF               RCC_C2BOOTRSTSCLRR_SYSC2RSTF_Msk                    /*!< CPU2 system reset flag */
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Pos        (8U)
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Pos)       /*!< 0x00000100 */
#define RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF            RCC_C2BOOTRSTSCLRR_IWDG1SYSRSTF_Msk                 /*!< IWDG1 system reset flag */
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Pos        (9U)
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Pos)       /*!< 0x00000200 */
#define RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF            RCC_C2BOOTRSTSCLRR_IWDG2SYSRSTF_Msk                 /*!< IWDG2 reset flag */
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Pos        (10U)
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Pos)       /*!< 0x00000400 */
#define RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF            RCC_C2BOOTRSTSCLRR_IWDG3SYSRSTF_Msk                 /*!< IWDG3 reset flag */
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Pos        (11U)
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Msk        (0x1UL << RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Pos)       /*!< 0x00000800 */
#define RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF            RCC_C2BOOTRSTSCLRR_IWDG4SYSRSTF_Msk                 /*!< IWDG4 reset flag */
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Pos              (14U)
#define RCC_C2BOOTRSTSCLRR_C2RSTF_Msk              (0x1UL << RCC_C2BOOTRSTSCLRR_C2RSTF_Pos)             /*!< 0x00004000 */
#define RCC_C2BOOTRSTSCLRR_C2RSTF                  RCC_C2BOOTRSTSCLRR_C2RSTF_Msk                     /*!< CPU2 reset flag */
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Pos       (17U)
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Msk       (0x1UL << RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Pos)      /*!< 0x00020000 */
#define RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF           RCC_C2BOOTRSTSCLRR_RETCRCERRRSTF_Msk                /*!< RETRAM CRC error reset flag */
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos   (18U)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk   (0x1UL << RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Pos)  /*!< 0x00040000 */
#define RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF       RCC_C2BOOTRSTSCLRR_RETECCFAILCRCRSTF_Msk            /*!< RETRAM ECC failure reset flag during the CRC computation phase */
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos  (19U)
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk  (0x1UL << RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Pos) /*!< 0x00080000 */
#define RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF      RCC_C2BOOTRSTSCLRR_RETECCFAILRESTRSTF_Msk           /*!< RETRAM ECC failure reset flag during system restoration phase */
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Pos          (21U)
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Msk          (0x1UL << RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Pos)         /*!< 0x00200000 */
#define RCC_C2BOOTRSTSCLRR_STBYC2RSTF              RCC_C2BOOTRSTSCLRR_STBYC2RSTF_Msk                   /*!< CPU2 system Standby reset flag */
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Pos          (23U)
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Msk          (0x1UL << RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Pos)         /*!< 0x00800000 */
#define RCC_C2BOOTRSTSCLRR_D2STBYRSTF              RCC_C2BOOTRSTSCLRR_D2STBYRSTF_Msk                   /*!< D2 DStandby reset flag */

/* Bit fields for RCC_C1SREQSETR register */
#define RCC_C1SREQSETR_STPREQ_P0_Pos               (0U)
#define RCC_C1SREQSETR_STPREQ_P0_Msk               (0x1UL << RCC_C1SREQSETR_STPREQ_P0_Pos)              /*!< 0x00000001 */
#define RCC_C1SREQSETR_STPREQ_P0                   RCC_C1SREQSETR_STPREQ_P0_Msk                      /*!< Stop request for CPU1 processor core 0 */
#define RCC_C1SREQSETR_ESLPREQ_Pos                 (16U)
#define RCC_C1SREQSETR_ESLPREQ_Msk                 (0x1UL << RCC_C1SREQSETR_ESLPREQ_Pos)                /*!< 0x00010000 */
#define RCC_C1SREQSETR_ESLPREQ                   RCC_C1SREQSETR_ESLPREQ_Msk                        /*!< Enhanced CSleep request for CPU1 subsystem */

/* Bit fields for RCC_C1SREQCLRR register */
#define RCC_C1SREQCLRR_STPREQ_P0_Pos               (0U)
#define RCC_C1SREQCLRR_STPREQ_P0_Msk               (0x1UL << RCC_C1SREQCLRR_STPREQ_P0_Pos)              /*!< 0x00000001 */
#define RCC_C1SREQCLRR_STPREQ_P0                   RCC_C1SREQCLRR_STPREQ_P0_Msk                      /*!< Stop request for CPU1 processor core 0 */
#define RCC_C1SREQCLRR_ESLPREQ_Pos                 (16U)
#define RCC_C1SREQCLRR_ESLPREQ_Msk                 (0x1UL << RCC_C1SREQCLRR_ESLPREQ_Pos)                /*!< 0x00010000 */
#define RCC_C1SREQCLRR_ESLPREQ                   RCC_C1SREQCLRR_ESLPREQ_Msk                        /*!< Enhanced CSleep request for CPU1 subsystem */

/* Bit fields for RCC_CPUBOOTCR register */
#define RCC_CPUBOOTCR_BOOT_CPU2_Pos                (0U)
#define RCC_CPUBOOTCR_BOOT_CPU2_Msk                (0x1UL << RCC_CPUBOOTCR_BOOT_CPU2_Pos)               /*!< 0x00000001 */
#define RCC_CPUBOOTCR_BOOT_CPU2                    RCC_CPUBOOTCR_BOOT_CPU2_Msk                       /*!< CPU2 to boot */
#define RCC_CPUBOOTCR_BOOT_CPU1_Pos                (1U)
#define RCC_CPUBOOTCR_BOOT_CPU1_Msk                (0x1UL << RCC_CPUBOOTCR_BOOT_CPU1_Pos)               /*!< 0x00000002 */
#define RCC_CPUBOOTCR_BOOT_CPU1                    RCC_CPUBOOTCR_BOOT_CPU1_Msk                       /*!< CPU1 boot */

/* Bit fields for RCC_STBYBOOTCR register */
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Pos             (1U)
#define RCC_STBYBOOTCR_CPU_BEN_SEL_Msk             (0x1UL << RCC_STBYBOOTCR_CPU_BEN_SEL_Pos)            /*!< 0x00000002 */
#define RCC_STBYBOOTCR_CPU_BEN_SEL                 RCC_STBYBOOTCR_CPU_BEN_SEL_Msk                    /*!< CPU boot select */
#define RCC_STBYBOOTCR_COLD_CPU2_Pos               (2U)
#define RCC_STBYBOOTCR_COLD_CPU2_Msk               (0x1UL << RCC_STBYBOOTCR_COLD_CPU2_Pos)              /*!< 0x00000004 */
#define RCC_STBYBOOTCR_COLD_CPU2                   RCC_STBYBOOTCR_COLD_CPU2_Msk                      /*!< CPU2 cold boot */
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Pos             (4U)
#define RCC_STBYBOOTCR_CPU2_HW_BEN_Msk             (0x1UL << RCC_STBYBOOTCR_CPU2_HW_BEN_Pos)            /*!< 0x00000010 */
#define RCC_STBYBOOTCR_CPU2_HW_BEN                 RCC_STBYBOOTCR_CPU2_HW_BEN_Msk                    /*!< CPU2 hardware boot enable */
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Pos             (5U)
#define RCC_STBYBOOTCR_CPU1_HW_BEN_Msk             (0x1UL << RCC_STBYBOOTCR_CPU1_HW_BEN_Pos)            /*!< 0x00000020 */
#define RCC_STBYBOOTCR_CPU1_HW_BEN                 RCC_STBYBOOTCR_CPU1_HW_BEN_Msk                    /*!< CPU1 hardware boot enable */
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Pos        (8U)
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Msk        (0x1UL << RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Pos)       /*!< 0x00000100 */
#define RCC_STBYBOOTCR_RET_CRCERR_RSTEN            RCC_STBYBOOTCR_RET_CRCERR_RSTEN_Msk                 /*!< RETRAM CRC error system reset enable */

/* Bit fields for RCC_LEGBOOTCR register */
#define RCC_LEGBOOTCR_LEGACY_BEN_Pos               (0U)
#define RCC_LEGBOOTCR_LEGACY_BEN_Msk               (0x1UL << RCC_LEGBOOTCR_LEGACY_BEN_Pos)              /*!< 0x00000001 */
#define RCC_LEGBOOTCR_LEGACY_BEN                   RCC_LEGBOOTCR_LEGACY_BEN_Msk                      /*!< Enable of the legacy selection mode to choose the first CPU to boot */

/* Bit fields for RCC_BDCR register */
#define RCC_BDCR_LSEON_Pos                       (0U)
#define RCC_BDCR_LSEON_Msk                       (0x1UL << RCC_BDCR_LSEON_Pos)                      /*!< 0x00000001 */
#define RCC_BDCR_LSEON                           RCC_BDCR_LSEON_Msk                                /*!< LSE oscillator enable */
#define RCC_BDCR_LSEBYP_Pos                      (1U)
#define RCC_BDCR_LSEBYP_Msk                      (0x1UL << RCC_BDCR_LSEBYP_Pos)                     /*!< 0x00000002 */
#define RCC_BDCR_LSEBYP                          RCC_BDCR_LSEBYP_Msk                               /*!< LSE oscillator bypass */
#define RCC_BDCR_LSERDY_Pos                      (2U)
#define RCC_BDCR_LSERDY_Msk                      (0x1UL << RCC_BDCR_LSERDY_Pos)                     /*!< 0x00000004 */
#define RCC_BDCR_LSERDY                          RCC_BDCR_LSERDY_Msk                               /*!< LSE oscillator ready */
#define RCC_BDCR_LSEDIGBYP_Pos                   (3U)
#define RCC_BDCR_LSEDIGBYP_Msk                   (0x1UL << RCC_BDCR_LSEDIGBYP_Pos)                    /*!< 0x00000008 */
#define RCC_BDCR_LSEDIGBYP                       RCC_BDCR_LSEDIGBYP_Msk                            /*!< LSE digital bypass */
#define RCC_BDCR_LSEDRV_Pos                      (4U)
#define RCC_BDCR_LSEDRV_Msk                      (0x3UL << RCC_BDCR_LSEDRV_Pos)                     /*!< 0x00000030 */
#define RCC_BDCR_LSEDRV                          RCC_BDCR_LSEDRV_Msk                               /*!< LSE oscillator driving capability */
#define RCC_BDCR_LSECSSON_Pos                    (6U)
#define RCC_BDCR_LSECSSON_Msk                    (0x1UL << RCC_BDCR_LSECSSON_Pos)                   /*!< 0x00000040 */
#define RCC_BDCR_LSECSSON                        RCC_BDCR_LSECSSON_Msk                             /*!< LSE CSS enable */
#define RCC_BDCR_LSEGFON_Pos                     (7U)
#define RCC_BDCR_LSEGFON_Msk                     (0x1UL << RCC_BDCR_LSEGFON_Pos)                    /*!< 0x00000080 */
#define RCC_BDCR_LSEGFON                         RCC_BDCR_LSEGFON_Msk                              /*!< LSE clock glitch filter enable */
#define RCC_BDCR_LSECSSD_Pos                     (8U)
#define RCC_BDCR_LSECSSD_Msk                     (0x1UL << RCC_BDCR_LSECSSD_Pos)                    /*!< 0x00000100 */
#define RCC_BDCR_LSECSSD                         RCC_BDCR_LSECSSD_Msk                              /*!< LSE CSS failure detection */
#define RCC_BDCR_RTCSRC_Pos                      (16U)
#define RCC_BDCR_RTCSRC_Msk                      (0x3UL << RCC_BDCR_RTCSRC_Pos)                     /*!< 0x00030000 */
#define RCC_BDCR_RTCSRC                          RCC_BDCR_RTCSRC_Msk                               /*!< RTC clock source selection */
#define RCC_BDCR_RTCCKEN_Pos                     (20U)
#define RCC_BDCR_RTCCKEN_Msk                     (0x1UL << RCC_BDCR_RTCCKEN_Pos)                    /*!< 0x00100000 */
#define RCC_BDCR_RTCCKEN                         RCC_BDCR_RTCCKEN_Msk                              /*!< RTC clock enable */
#define RCC_BDCR_VSWRST_Pos                      (31U)
#define RCC_BDCR_VSWRST_Msk                      (0x1UL << RCC_BDCR_VSWRST_Pos)                     /*!< 0x80000000 */
#define RCC_BDCR_VSWRST                          RCC_BDCR_VSWRST_Msk                               /*!< VSW domain software reset */

/* Bit fields for RCC_RDCR register */
#define RCC_RDCR_MRD_Pos                         (16U)
#define RCC_RDCR_MRD_Msk                         (0x1FUL << RCC_RDCR_MRD_Pos)                       /*!< 0x001F0000 */
#define RCC_RDCR_MRD                             RCC_RDCR_MRD_Msk                                  /*!< Minimum reset duration */
#define RCC_RDCR_EADLY_Pos                       (24U)
#define RCC_RDCR_EADLY_Msk                       (0xFUL << RCC_RDCR_EADLY_Pos)                      /*!< 0x0F000000 */
#define RCC_RDCR_EADLY                           RCC_RDCR_EADLY_Msk                                /*!< External access delays */

/* Bit fields for RCC_C1MSRDCR register */
#define RCC_C1MSRDCR_C1MSRD_Pos                    (0U)
#define RCC_C1MSRDCR_C1MSRD_Msk                    (0x1FUL << RCC_C1MSRDCR_C1MSRD_Pos)                  /*!< 0x0000001F */
#define RCC_C1MSRDCR_C1MSRD                        RCC_C1MSRDCR_C1MSRD_Msk                           /*!< Minimum Standby reset duration */
#define RCC_C1MSRDCR_C1MSRST_Pos                   (8U)
#define RCC_C1MSRDCR_C1MSRST_Msk                   (0x1UL << RCC_C1MSRDCR_C1MSRST_Pos)                  /*!< 0x00000100 */
#define RCC_C1MSRDCR_C1MSRST                       RCC_C1MSRDCR_C1MSRST_Msk                          /*!< Trigger low-level pulse on NRSTC1MS pin */

/* Bit fields for RCC_PWRLPDLYCR register */
#define RCC_PWRLPDLYCR_PWRLP_DLY_Pos               (0U)
#define RCC_PWRLPDLYCR_PWRLP_DLY_Msk               (0x3FFFFFUL << RCC_PWRLPDLYCR_PWRLP_DLY_Pos)         /*!< 0x003FFFFF */
#define RCC_PWRLPDLYCR_PWRLP_DLY                   RCC_PWRLPDLYCR_PWRLP_DLY_Msk                      /*!< PWR_LP delay value */
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Pos              (24U)
#define RCC_PWRLPDLYCR_CPU2TMPSKP_Msk              (0x1UL << RCC_PWRLPDLYCR_CPU2TMPSKP_Pos)             /*!< 0x01000000 */
#define RCC_PWRLPDLYCR_CPU2TMPSKP                  RCC_PWRLPDLYCR_CPU2TMPSKP_Msk                     /*!< Skip of PWR_LP delay for CPU2 */

/* Bit fields for RCC_C1CIESETR register */
#define RCC_C1CIESETR_LSIRDYIE_Pos                 (0U)
#define RCC_C1CIESETR_LSIRDYIE_Msk                 (0x1UL << RCC_C1CIESETR_LSIRDYIE_Pos)                /*!< 0x00000001 */
#define RCC_C1CIESETR_LSIRDYIE                     RCC_C1CIESETR_LSIRDYIE_Msk                        /*!< LSI ready interrupt enable */
#define RCC_C1CIESETR_LSERDYIE_Pos                 (1U)
#define RCC_C1CIESETR_LSERDYIE_Msk                 (0x1UL << RCC_C1CIESETR_LSERDYIE_Pos)                /*!< 0x00000002 */
#define RCC_C1CIESETR_LSERDYIE                     RCC_C1CIESETR_LSERDYIE_Msk                        /*!< LSE ready interrupt enable */
#define RCC_C1CIESETR_HSIRDYIE_Pos                 (2U)
#define RCC_C1CIESETR_HSIRDYIE_Msk                 (0x1UL << RCC_C1CIESETR_HSIRDYIE_Pos)                /*!< 0x00000004 */
#define RCC_C1CIESETR_HSIRDYIE                     RCC_C1CIESETR_HSIRDYIE_Msk                        /*!< HSI ready interrupt enable */
#define RCC_C1CIESETR_HSERDYIE_Pos                 (3U)
#define RCC_C1CIESETR_HSERDYIE_Msk                 (0x1UL << RCC_C1CIESETR_HSERDYIE_Pos)                /*!< 0x00000008 */
#define RCC_C1CIESETR_HSERDYIE                     RCC_C1CIESETR_HSERDYIE_Msk                        /*!< HSE ready interrupt enable */
#define RCC_C1CIESETR_MSIRDYIE_Pos                 (4U)
#define RCC_C1CIESETR_MSIRDYIE_Msk                 (0x1UL << RCC_C1CIESETR_MSIRDYIE_Pos)                /*!< 0x00000010 */
#define RCC_C1CIESETR_MSIRDYIE                     RCC_C1CIESETR_MSIRDYIE_Msk                        /*!< MSI ready interrupt enable */
#define RCC_C1CIESETR_PLL1RDYIE_Pos                (5U)
#define RCC_C1CIESETR_PLL1RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL1RDYIE_Pos)               /*!< 0x00000020 */
#define RCC_C1CIESETR_PLL1RDYIE                    RCC_C1CIESETR_PLL1RDYIE_Msk                       /*!< PLL1 ready interrupt enable */
#define RCC_C1CIESETR_PLL2RDYIE_Pos                (6U)
#define RCC_C1CIESETR_PLL2RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL2RDYIE_Pos)               /*!< 0x00000040 */
#define RCC_C1CIESETR_PLL2RDYIE                    RCC_C1CIESETR_PLL2RDYIE_Msk                       /*!< PLL2 ready interrupt enable */
#define RCC_C1CIESETR_PLL4RDYIE_Pos                (8U)
#define RCC_C1CIESETR_PLL4RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL4RDYIE_Pos)               /*!< 0x00000100 */
#define RCC_C1CIESETR_PLL4RDYIE                    RCC_C1CIESETR_PLL4RDYIE_Msk                       /*!< PLL4 ready interrupt enable */
#define RCC_C1CIESETR_PLL5RDYIE_Pos                (9U)
#define RCC_C1CIESETR_PLL5RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL5RDYIE_Pos)               /*!< 0x00000200 */
#define RCC_C1CIESETR_PLL5RDYIE                    RCC_C1CIESETR_PLL5RDYIE_Msk                       /*!< PLL5 ready interrupt enable */
#define RCC_C1CIESETR_PLL6RDYIE_Pos                (10U)
#define RCC_C1CIESETR_PLL6RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL6RDYIE_Pos)               /*!< 0x00000400 */
#define RCC_C1CIESETR_PLL6RDYIE                    RCC_C1CIESETR_PLL6RDYIE_Msk                       /*!< PLL6 ready interrupt enable */
#define RCC_C1CIESETR_PLL7RDYIE_Pos                (11U)
#define RCC_C1CIESETR_PLL7RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL7RDYIE_Pos)               /*!< 0x00000800 */
#define RCC_C1CIESETR_PLL7RDYIE                    RCC_C1CIESETR_PLL7RDYIE_Msk                       /*!< PLL7 ready interrupt enable */
#define RCC_C1CIESETR_PLL8RDYIE_Pos                (12U)
#define RCC_C1CIESETR_PLL8RDYIE_Msk                (0x1UL << RCC_C1CIESETR_PLL8RDYIE_Pos)               /*!< 0x00001000 */
#define RCC_C1CIESETR_PLL8RDYIE                    RCC_C1CIESETR_PLL8RDYIE_Msk                       /*!< PLL8 ready interrupt enable */
#define RCC_C1CIESETR_LSECSSIE_Pos                 (16U)
#define RCC_C1CIESETR_LSECSSIE_Msk                 (0x1UL << RCC_C1CIESETR_LSECSSIE_Pos)                /*!< 0x00010000 */
#define RCC_C1CIESETR_LSECSSIE                     RCC_C1CIESETR_LSECSSIE_Msk                        /*!< LSE clock security system interrupt enable */
#define RCC_C1CIESETR_WKUPIE_Pos                   (20U)
#define RCC_C1CIESETR_WKUPIE_Msk                   (0x1UL << RCC_C1CIESETR_WKUPIE_Pos)                  /*!< 0x00100000 */
#define RCC_C1CIESETR_WKUPIE                       RCC_C1CIESETR_WKUPIE_Msk                          /*!< CPU1 wake-up from CStop interrupt enable */

/* Bit fields for RCC_C1CIFCLRR register */
#define RCC_C1CIFCLRR_LSIRDYF_Pos                  (0U)
#define RCC_C1CIFCLRR_LSIRDYF_Msk                  (0x1UL << RCC_C1CIFCLRR_LSIRDYF_Pos)                 /*!< 0x00000001 */
#define RCC_C1CIFCLRR_LSIRDYF                      RCC_C1CIFCLRR_LSIRDYF_Msk                         /*!< LSI ready interrupt flag */
#define RCC_C1CIFCLRR_LSERDYF_Pos                  (1U)
#define RCC_C1CIFCLRR_LSERDYF_Msk                  (0x1UL << RCC_C1CIFCLRR_LSERDYF_Pos)                 /*!< 0x00000002 */
#define RCC_C1CIFCLRR_LSERDYF                      RCC_C1CIFCLRR_LSERDYF_Msk                         /*!< LSE ready interrupt flag */
#define RCC_C1CIFCLRR_HSIRDYF_Pos                  (2U)
#define RCC_C1CIFCLRR_HSIRDYF_Msk                  (0x1UL << RCC_C1CIFCLRR_HSIRDYF_Pos)                 /*!< 0x00000004 */
#define RCC_C1CIFCLRR_HSIRDYF                      RCC_C1CIFCLRR_HSIRDYF_Msk                         /*!< HSI ready interrupt flag */
#define RCC_C1CIFCLRR_HSERDYF_Pos                  (3U)
#define RCC_C1CIFCLRR_HSERDYF_Msk                  (0x1UL << RCC_C1CIFCLRR_HSERDYF_Pos)                 /*!< 0x00000008 */
#define RCC_C1CIFCLRR_HSERDYF                      RCC_C1CIFCLRR_HSERDYF_Msk                         /*!< HSE ready interrupt flag */
#define RCC_C1CIFCLRR_MSIRDYF_Pos                  (4U)
#define RCC_C1CIFCLRR_MSIRDYF_Msk                  (0x1UL << RCC_C1CIFCLRR_MSIRDYF_Pos)                 /*!< 0x00000010 */
#define RCC_C1CIFCLRR_MSIRDYF                      RCC_C1CIFCLRR_MSIRDYF_Msk                         /*!< MSI ready interrupt flag */
#define RCC_C1CIFCLRR_PLL1RDYF_Pos                 (5U)
#define RCC_C1CIFCLRR_PLL1RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL1RDYF_Pos)                /*!< 0x00000020 */
#define RCC_C1CIFCLRR_PLL1RDYF                     RCC_C1CIFCLRR_PLL1RDYF_Msk                        /*!< PLL1 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL2RDYF_Pos                 (6U)
#define RCC_C1CIFCLRR_PLL2RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL2RDYF_Pos)                /*!< 0x00000040 */
#define RCC_C1CIFCLRR_PLL2RDYF                     RCC_C1CIFCLRR_PLL2RDYF_Msk                        /*!< PLL2 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL4RDYF_Pos                 (8U)
#define RCC_C1CIFCLRR_PLL4RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL4RDYF_Pos)                /*!< 0x00000100 */
#define RCC_C1CIFCLRR_PLL4RDYF                     RCC_C1CIFCLRR_PLL4RDYF_Msk                        /*!< PLL4 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL5RDYF_Pos                 (9U)
#define RCC_C1CIFCLRR_PLL5RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL5RDYF_Pos)                /*!< 0x00000200 */
#define RCC_C1CIFCLRR_PLL5RDYF                     RCC_C1CIFCLRR_PLL5RDYF_Msk                        /*!< PLL5 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL6RDYF_Pos                 (10U)
#define RCC_C1CIFCLRR_PLL6RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL6RDYF_Pos)                /*!< 0x00000400 */
#define RCC_C1CIFCLRR_PLL6RDYF                     RCC_C1CIFCLRR_PLL6RDYF_Msk                        /*!< PLL6 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL7RDYF_Pos                 (11U)
#define RCC_C1CIFCLRR_PLL7RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL7RDYF_Pos)                /*!< 0x00000800 */
#define RCC_C1CIFCLRR_PLL7RDYF                     RCC_C1CIFCLRR_PLL7RDYF_Msk                        /*!< PLL7 ready interrupt flag */
#define RCC_C1CIFCLRR_PLL8RDYF_Pos                 (12U)
#define RCC_C1CIFCLRR_PLL8RDYF_Msk                 (0x1UL << RCC_C1CIFCLRR_PLL8RDYF_Pos)                /*!< 0x00001000 */
#define RCC_C1CIFCLRR_PLL8RDYF                     RCC_C1CIFCLRR_PLL8RDYF_Msk                        /*!< PLL8 ready interrupt flag */
#define RCC_C1CIFCLRR_LSECSSF_Pos                  (16U)
#define RCC_C1CIFCLRR_LSECSSF_Msk                  (0x1UL << RCC_C1CIFCLRR_LSECSSF_Pos)                 /*!< 0x00010000 */
#define RCC_C1CIFCLRR_LSECSSF                      RCC_C1CIFCLRR_LSECSSF_Msk                         /*!< LSE CSS interrupt flag */
#define RCC_C1CIFCLRR_WKUPF_Pos                    (20U)
#define RCC_C1CIFCLRR_WKUPF_Msk                    (0x1UL << RCC_C1CIFCLRR_WKUPF_Pos)                   /*!< 0x00100000 */
#define RCC_C1CIFCLRR_WKUPF                        RCC_C1CIFCLRR_WKUPF_Msk                           /*!< CPU1 wake-up from CStop interrupt flag */

/* Bit fields for RCC_C2CIESETR register */
#define RCC_C2CIESETR_LSIRDYIE_Pos                 (0U)
#define RCC_C2CIESETR_LSIRDYIE_Msk                 (0x1UL << RCC_C2CIESETR_LSIRDYIE_Pos)                /*!< 0x00000001 */
#define RCC_C2CIESETR_LSIRDYIE                     RCC_C2CIESETR_LSIRDYIE_Msk                        /*!< LSI ready interrupt enable */
#define RCC_C2CIESETR_LSERDYIE_Pos                 (1U)
#define RCC_C2CIESETR_LSERDYIE_Msk                 (0x1UL << RCC_C2CIESETR_LSERDYIE_Pos)                /*!< 0x00000002 */
#define RCC_C2CIESETR_LSERDYIE                     RCC_C2CIESETR_LSERDYIE_Msk                        /*!< LSE ready interrupt enable */
#define RCC_C2CIESETR_HSIRDYIE_Pos                 (2U)
#define RCC_C2CIESETR_HSIRDYIE_Msk                 (0x1UL << RCC_C2CIESETR_HSIRDYIE_Pos)                /*!< 0x00000004 */
#define RCC_C2CIESETR_HSIRDYIE                     RCC_C2CIESETR_HSIRDYIE_Msk                        /*!< HSI ready interrupt enable */
#define RCC_C2CIESETR_HSERDYIE_Pos                 (3U)
#define RCC_C2CIESETR_HSERDYIE_Msk                 (0x1UL << RCC_C2CIESETR_HSERDYIE_Pos)                /*!< 0x00000008 */
#define RCC_C2CIESETR_HSERDYIE                     RCC_C2CIESETR_HSERDYIE_Msk                        /*!< HSE ready interrupt enable */
#define RCC_C2CIESETR_MSIRDYIE_Pos                 (4U)
#define RCC_C2CIESETR_MSIRDYIE_Msk                 (0x1UL << RCC_C2CIESETR_MSIRDYIE_Pos)                /*!< 0x00000010 */
#define RCC_C2CIESETR_MSIRDYIE                     RCC_C2CIESETR_MSIRDYIE_Msk                        /*!< MSI ready interrupt enable */
#define RCC_C2CIESETR_PLL1RDYIE_Pos                (5U)
#define RCC_C2CIESETR_PLL1RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL1RDYIE_Pos)               /*!< 0x00000020 */
#define RCC_C2CIESETR_PLL1RDYIE                    RCC_C2CIESETR_PLL1RDYIE_Msk                       /*!< PLL1 ready interrupt enable */
#define RCC_C2CIESETR_PLL2RDYIE_Pos                (6U)
#define RCC_C2CIESETR_PLL2RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL2RDYIE_Pos)               /*!< 0x00000040 */
#define RCC_C2CIESETR_PLL2RDYIE                    RCC_C2CIESETR_PLL2RDYIE_Msk                       /*!< PLL2 ready interrupt enable */
#define RCC_C2CIESETR_PLL4RDYIE_Pos                (8U)
#define RCC_C2CIESETR_PLL4RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL4RDYIE_Pos)               /*!< 0x00000100 */
#define RCC_C2CIESETR_PLL4RDYIE                    RCC_C2CIESETR_PLL4RDYIE_Msk                       /*!< PLL4 ready interrupt enable */
#define RCC_C2CIESETR_PLL5RDYIE_Pos                (9U)
#define RCC_C2CIESETR_PLL5RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL5RDYIE_Pos)               /*!< 0x00000200 */
#define RCC_C2CIESETR_PLL5RDYIE                    RCC_C2CIESETR_PLL5RDYIE_Msk                       /*!< PLL5 ready interrupt enable */
#define RCC_C2CIESETR_PLL6RDYIE_Pos                (10U)
#define RCC_C2CIESETR_PLL6RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL6RDYIE_Pos)               /*!< 0x00000400 */
#define RCC_C2CIESETR_PLL6RDYIE                    RCC_C2CIESETR_PLL6RDYIE_Msk                       /*!< PLL6 ready interrupt enable */
#define RCC_C2CIESETR_PLL7RDYIE_Pos                (11U)
#define RCC_C2CIESETR_PLL7RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL7RDYIE_Pos)               /*!< 0x00000800 */
#define RCC_C2CIESETR_PLL7RDYIE                    RCC_C2CIESETR_PLL7RDYIE_Msk                       /*!< PLL7 ready interrupt enable */
#define RCC_C2CIESETR_PLL8RDYIE_Pos                (12U)
#define RCC_C2CIESETR_PLL8RDYIE_Msk                (0x1UL << RCC_C2CIESETR_PLL8RDYIE_Pos)               /*!< 0x00001000 */
#define RCC_C2CIESETR_PLL8RDYIE                    RCC_C2CIESETR_PLL8RDYIE_Msk                       /*!< PLL8 ready interrupt enable */
#define RCC_C2CIESETR_LSECSSIE_Pos                 (16U)
#define RCC_C2CIESETR_LSECSSIE_Msk                 (0x1UL << RCC_C2CIESETR_LSECSSIE_Pos)                /*!< 0x00010000 */
#define RCC_C2CIESETR_LSECSSIE                     RCC_C2CIESETR_LSECSSIE_Msk                        /*!< LSE CSS interrupt enable */
#define RCC_C2CIESETR_WKUPIE_Pos                   (20U)
#define RCC_C2CIESETR_WKUPIE_Msk                   (0x1UL << RCC_C2CIESETR_WKUPIE_Pos)                  /*!< 0x00100000 */
#define RCC_C2CIESETR_WKUPIE                       RCC_C2CIESETR_WKUPIE_Msk                          /*!< CPU2 wake-up from CStop Interrupt Enable */

/* Bit fields for RCC_C2CIFCLRR register */
#define RCC_C2CIFCLRR_LSIRDYF_Pos                  (0U)
#define RCC_C2CIFCLRR_LSIRDYF_Msk                  (0x1UL << RCC_C2CIFCLRR_LSIRDYF_Pos)                 /*!< 0x00000001 */
#define RCC_C2CIFCLRR_LSIRDYF                      RCC_C2CIFCLRR_LSIRDYF_Msk                         /*!< LSI ready interrupt flag */
#define RCC_C2CIFCLRR_LSERDYF_Pos                  (1U)
#define RCC_C2CIFCLRR_LSERDYF_Msk                  (0x1UL << RCC_C2CIFCLRR_LSERDYF_Pos)                 /*!< 0x00000002 */
#define RCC_C2CIFCLRR_LSERDYF                      RCC_C2CIFCLRR_LSERDYF_Msk                         /*!< LSE ready interrupt flag */
#define RCC_C2CIFCLRR_HSIRDYF_Pos                  (2U)
#define RCC_C2CIFCLRR_HSIRDYF_Msk                  (0x1UL << RCC_C2CIFCLRR_HSIRDYF_Pos)                 /*!< 0x00000004 */
#define RCC_C2CIFCLRR_HSIRDYF                      RCC_C2CIFCLRR_HSIRDYF_Msk                         /*!< HSI ready interrupt flag */
#define RCC_C2CIFCLRR_HSERDYF_Pos                  (3U)
#define RCC_C2CIFCLRR_HSERDYF_Msk                  (0x1UL << RCC_C2CIFCLRR_HSERDYF_Pos)                 /*!< 0x00000008 */
#define RCC_C2CIFCLRR_HSERDYF                      RCC_C2CIFCLRR_HSERDYF_Msk                         /*!< HSE ready interrupt flag */
#define RCC_C2CIFCLRR_MSIRDYF_Pos                  (4U)
#define RCC_C2CIFCLRR_MSIRDYF_Msk                  (0x1UL << RCC_C2CIFCLRR_MSIRDYF_Pos)                 /*!< 0x00000010 */
#define RCC_C2CIFCLRR_MSIRDYF                      RCC_C2CIFCLRR_MSIRDYF_Msk                         /*!< MSI ready interrupt flag */
#define RCC_C2CIFCLRR_PLL1RDYF_Pos                 (5U)
#define RCC_C2CIFCLRR_PLL1RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL1RDYF_Pos)                /*!< 0x00000020 */
#define RCC_C2CIFCLRR_PLL1RDYF                     RCC_C2CIFCLRR_PLL1RDYF_Msk                        /*!< PLL1 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL2RDYF_Pos                 (6U)
#define RCC_C2CIFCLRR_PLL2RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL2RDYF_Pos)                /*!< 0x00000040 */
#define RCC_C2CIFCLRR_PLL2RDYF                     RCC_C2CIFCLRR_PLL2RDYF_Msk                        /*!< PLL2 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL4RDYF_Pos                 (8U)
#define RCC_C2CIFCLRR_PLL4RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL4RDYF_Pos)                /*!< 0x00000100 */
#define RCC_C2CIFCLRR_PLL4RDYF                     RCC_C2CIFCLRR_PLL4RDYF_Msk                        /*!< PLL4 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL5RDYF_Pos                 (9U)
#define RCC_C2CIFCLRR_PLL5RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL5RDYF_Pos)                /*!< 0x00000200 */
#define RCC_C2CIFCLRR_PLL5RDYF                     RCC_C2CIFCLRR_PLL5RDYF_Msk                        /*!< PLL5 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL6RDYF_Pos                 (10U)
#define RCC_C2CIFCLRR_PLL6RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL6RDYF_Pos)                /*!< 0x00000400 */
#define RCC_C2CIFCLRR_PLL6RDYF                     RCC_C2CIFCLRR_PLL6RDYF_Msk                        /*!< PLL6 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL7RDYF_Pos                 (11U)
#define RCC_C2CIFCLRR_PLL7RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL7RDYF_Pos)                /*!< 0x00000800 */
#define RCC_C2CIFCLRR_PLL7RDYF                     RCC_C2CIFCLRR_PLL7RDYF_Msk                        /*!< PLL7 ready interrupt flag */
#define RCC_C2CIFCLRR_PLL8RDYF_Pos                 (12U)
#define RCC_C2CIFCLRR_PLL8RDYF_Msk                 (0x1UL << RCC_C2CIFCLRR_PLL8RDYF_Pos)                /*!< 0x00001000 */
#define RCC_C2CIFCLRR_PLL8RDYF                     RCC_C2CIFCLRR_PLL8RDYF_Msk                        /*!< PLL8 ready interrupt flag */
#define RCC_C2CIFCLRR_LSECSSF_Pos                  (16U)
#define RCC_C2CIFCLRR_LSECSSF_Msk                  (0x1UL << RCC_C2CIFCLRR_LSECSSF_Pos)                 /*!< 0x00010000 */
#define RCC_C2CIFCLRR_LSECSSF                      RCC_C2CIFCLRR_LSECSSF_Msk                         /*!< LSE clock security system interrupt flag */
#define RCC_C2CIFCLRR_WKUPF_Pos                    (20U)
#define RCC_C2CIFCLRR_WKUPF_Msk                    (0x1UL << RCC_C2CIFCLRR_WKUPF_Pos)                   /*!< 0x00100000 */
#define RCC_C2CIFCLRR_WKUPF                        RCC_C2CIFCLRR_WKUPF_Msk                           /*!< CPU2 wake-up from CStop interrupt flag */

/***************  Bit fields for RCC_IWDGC1FZSETR register  ***************/
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Pos              (0U)
#define RCC_IWDGC1FZSETR_FZ_IWDG1_Msk              (0x1UL << RCC_IWDGC1FZSETR_FZ_IWDG1_Pos)             /*!< 0x00000001 */
#define RCC_IWDGC1FZSETR_FZ_IWDG1                  RCC_IWDGC1FZSETR_FZ_IWDG1_Msk                     /*!< Freeze of IWDG1 clock */
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Pos              (1U)
#define RCC_IWDGC1FZSETR_FZ_IWDG2_Msk              (0x1UL << RCC_IWDGC1FZSETR_FZ_IWDG2_Pos)             /*!< 0x00000002 */
#define RCC_IWDGC1FZSETR_FZ_IWDG2                  RCC_IWDGC1FZSETR_FZ_IWDG2_Msk                     /*!< Freeze of IWDG2 clock */

/***************  Bit fields for RCC_IWDGC1FZCLRR register  ***************/
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Pos              (0U)
#define RCC_IWDGC1FZCLRR_FZ_IWDG1_Msk              (0x1UL << RCC_IWDGC1FZCLRR_FZ_IWDG1_Pos)             /*!< 0x00000001 */
#define RCC_IWDGC1FZCLRR_FZ_IWDG1                  RCC_IWDGC1FZCLRR_FZ_IWDG1_Msk                     /*!< Unfreeze IWDG1 clock */
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Pos              (1U)
#define RCC_IWDGC1FZCLRR_FZ_IWDG2_Msk              (0x1UL << RCC_IWDGC1FZCLRR_FZ_IWDG2_Pos)             /*!< 0x00000002 */
#define RCC_IWDGC1FZCLRR_FZ_IWDG2                  RCC_IWDGC1FZCLRR_FZ_IWDG2_Msk                     /*!< Unfreeze IWDG2 clock */

/**************  Bit fields for RCC_IWDGC1CFGSETR register  ***************/
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Pos       (0U)
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Pos)      /*!< 0x00000001 */
#define RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN           RCC_IWDGC1CFGSETR_IWDG1_SYSRSTEN_Msk                /*!< Enable of IWDG1 timeout event to reset the application */
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Pos       (2U)
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Pos)      /*!< 0x00000004 */
#define RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN           RCC_IWDGC1CFGSETR_IWDG2_SYSRSTEN_Msk                /*!< Enable of IWDG2 timeout event to reset the application */
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Pos         (18U)
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST_Msk         (0x1UL << RCC_IWDGC1CFGSETR_IWDG2_KERRST_Pos)        /*!< 0x00040000 */
#define RCC_IWDGC1CFGSETR_IWDG2_KERRST             RCC_IWDGC1CFGSETR_IWDG2_KERRST_Msk                  /*!< IWDG2 kernel reset */

/**************  Bit fields for RCC_IWDGC1CFGCLRR register  ***************/
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Pos       (0U)
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Pos)      /*!< 0x00000001 */
#define RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN           RCC_IWDGC1CFGCLRR_IWDG1_SYSRSTEN_Msk                /*!< Clear of IWDG1 timeout event to reset the application */
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Pos       (2U)
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Pos)      /*!< 0x00000004 */
#define RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN           RCC_IWDGC1CFGCLRR_IWDG2_SYSRSTEN_Msk                /*!< Clear of IWDG2 timeout event to reset the application */
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Pos         (18U)
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Msk         (0x1UL << RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Pos)        /*!< 0x00040000 */
#define RCC_IWDGC1CFGCLRR_IWDG2_KERRST             RCC_IWDGC1CFGCLRR_IWDG2_KERRST_Msk                  /*!< IWDG2 kernel reset */

/***************  Bit fields for RCC_IWDGC2FZSETR register  ***************/
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Pos              (0U)
#define RCC_IWDGC2FZSETR_FZ_IWDG3_Msk              (0x1UL << RCC_IWDGC2FZSETR_FZ_IWDG3_Pos)             /*!< 0x00000001 */
#define RCC_IWDGC2FZSETR_FZ_IWDG3                  RCC_IWDGC2FZSETR_FZ_IWDG3_Msk                     /*!< Freeze of IWDG3 clock */
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Pos              (1U)
#define RCC_IWDGC2FZSETR_FZ_IWDG4_Msk              (0x1UL << RCC_IWDGC2FZSETR_FZ_IWDG4_Pos)             /*!< 0x00000002 */
#define RCC_IWDGC2FZSETR_FZ_IWDG4                  RCC_IWDGC2FZSETR_FZ_IWDG4_Msk                     /*!< Freeze of IWDG4 clock */

/***************  Bit fields for RCC_IWDGC2FZCLRR register  ***************/
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Pos              (0U)
#define RCC_IWDGC2FZCLRR_FZ_IWDG3_Msk              (0x1UL << RCC_IWDGC2FZCLRR_FZ_IWDG3_Pos)             /*!< 0x00000001 */
#define RCC_IWDGC2FZCLRR_FZ_IWDG3                  RCC_IWDGC2FZCLRR_FZ_IWDG3_Msk                     /*!< Unfreeze of IWDG3 clock */
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Pos              (1U)
#define RCC_IWDGC2FZCLRR_FZ_IWDG4_Msk              (0x1UL << RCC_IWDGC2FZCLRR_FZ_IWDG4_Pos)             /*!< 0x00000002 */
#define RCC_IWDGC2FZCLRR_FZ_IWDG4                  RCC_IWDGC2FZCLRR_FZ_IWDG4_Msk                     /*!< Unfreeze of IWDG4 clock */

/**************  Bit fields for RCC_IWDGC2CFGSETR register  ***************/
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Pos       (0U)
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Pos)      /*!< 0x00000001 */
#define RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN           RCC_IWDGC2CFGSETR_IWDG3_SYSRSTEN_Msk                /*!< Enable of IWDG3 timeout event to reset the application */
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Pos       (2U)
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Pos)      /*!< 0x00000004 */
#define RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN           RCC_IWDGC2CFGSETR_IWDG4_SYSRSTEN_Msk                /*!< Enable of IWDG4 timeout event to reset the application */
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Pos         (18U)
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST_Msk         (0x1UL << RCC_IWDGC2CFGSETR_IWDG4_KERRST_Pos)        /*!< 0x00040000 */
#define RCC_IWDGC2CFGSETR_IWDG4_KERRST             RCC_IWDGC2CFGSETR_IWDG4_KERRST_Msk                  /*!< IWDG4 kernel reset */

/**************  Bit fields for RCC_IWDGC2CFGCLRR register  ***************/
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Pos       (0U)
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Pos)      /*!< 0x00000001 */
#define RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN           RCC_IWDGC2CFGCLRR_IWDG3_SYSRSTEN_Msk                /*!< Clear of IWDG3 timeout event to reset the application */
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Pos       (2U)
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Msk       (0x1UL << RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Pos)      /*!< 0x00000004 */
#define RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN           RCC_IWDGC2CFGCLRR_IWDG4_SYSRSTEN_Msk                /*!< Clear of IWDG4 timeout event to reset the application */
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Pos         (18U)
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Msk         (0x1UL << RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Pos)        /*!< 0x00040000 */
#define RCC_IWDGC2CFGCLRR_IWDG4_KERRST             RCC_IWDGC2CFGCLRR_IWDG4_KERRST_Msk                  /*!< IWDG4 kernel reset */

/* Bit fields for RCC_MCO1CFGR register */
#define RCC_MCO1CFGR_MCO1SEL_Pos                   (0U)
#define RCC_MCO1CFGR_MCO1SEL_Msk                   (0x1UL << RCC_MCO1CFGR_MCO1SEL_Pos)                  /*!< 0x00000001 */
#define RCC_MCO1CFGR_MCO1SEL                       RCC_MCO1CFGR_MCO1SEL_Msk                          /*!< MCO1 clock output selection */
#define RCC_MCO1CFGR_MCO1ON_Pos                    (8U)
#define RCC_MCO1CFGR_MCO1ON_Msk                    (0x1UL << RCC_MCO1CFGR_MCO1ON_Pos)                   /*!< 0x00000100 */
#define RCC_MCO1CFGR_MCO1ON                        RCC_MCO1CFGR_MCO1ON_Msk                           /*!< Control of MCO1 output */

/* Bit fields for RCC_MCO2CFGR register */
#define RCC_MCO2CFGR_MCO2SEL_Pos                   (0U)
#define RCC_MCO2CFGR_MCO2SEL_Msk                   (0x1UL << RCC_MCO2CFGR_MCO2SEL_Pos)                  /*!< 0x00000001 */
#define RCC_MCO2CFGR_MCO2SEL                       RCC_MCO2CFGR_MCO2SEL_Msk                          /*!< MCO2 clock output selection */
#define RCC_MCO2CFGR_MCO2ON_Pos                    (8U)
#define RCC_MCO2CFGR_MCO2ON_Msk                    (0x1UL << RCC_MCO2CFGR_MCO2ON_Pos)                   /*!< 0x00000100 */
#define RCC_MCO2CFGR_MCO2ON                        RCC_MCO2CFGR_MCO2ON_Msk                           /*!< Control of the MCO2 output */

/* Bit fields for RCC_OCENSETR register */
#define RCC_OCENSETR_HSION_Pos                     (0U)
#define RCC_OCENSETR_HSION_Msk                     (0x1UL << RCC_OCENSETR_HSION_Pos)                    /*!< 0x00000001 */
#define RCC_OCENSETR_HSION                         RCC_OCENSETR_HSION_Msk                            /*!< HSION bit set */
#define RCC_OCENSETR_HSIKERON_Pos                  (1U)
#define RCC_OCENSETR_HSIKERON_Msk                  (0x1UL << RCC_OCENSETR_HSIKERON_Pos)                 /*!< 0x00000002 */
#define RCC_OCENSETR_HSIKERON                      RCC_OCENSETR_HSIKERON_Msk                         /*!< HSIKERON bit set */
#define RCC_OCENSETR_MSION_Pos                     (2U)
#define RCC_OCENSETR_MSION_Msk                     (0x1UL << RCC_OCENSETR_MSION_Pos)                    /*!< 0x00000004 */
#define RCC_OCENSETR_MSION                         RCC_OCENSETR_MSION_Msk                            /*!< MSION bit set */
#define RCC_OCENSETR_MSIKERON_Pos                  (3U)
#define RCC_OCENSETR_MSIKERON_Msk                  (0x1UL << RCC_OCENSETR_MSIKERON_Pos)                 /*!< 0x00000008 */
#define RCC_OCENSETR_MSIKERON                      RCC_OCENSETR_MSIKERON_Msk                         /*!< MSIKERON bit set */
#define RCC_OCENSETR_HSEDIV2ON_Pos                 (5U)
#define RCC_OCENSETR_HSEDIV2ON_Msk                 (0x1UL << RCC_OCENSETR_HSEDIV2ON_Pos)                /*!< 0x00000020 */
#define RCC_OCENSETR_HSEDIV2ON                     RCC_OCENSETR_HSEDIV2ON_Msk                        /*!< HSEDIV2ON bit set */
#define RCC_OCENSETR_HSEDIV2BYP_Pos                (6U)
#define RCC_OCENSETR_HSEDIV2BYP_Msk                (0x1UL << RCC_OCENSETR_HSEDIV2BYP_Pos)               /*!< 0x00000040 */
#define RCC_OCENSETR_HSEDIV2BYP                    RCC_OCENSETR_HSEDIV2BYP_Msk                       /*!< HSEDIV2BYP bit set */
#define RCC_OCENSETR_HSEDIGBYP_Pos                 (7U)
#define RCC_OCENSETR_HSEDIGBYP_Msk                 (0x1UL << RCC_OCENSETR_HSEDIGBYP_Pos)                /*!< 0x00000080 */
#define RCC_OCENSETR_HSEDIGBYP                     RCC_OCENSETR_HSEDIGBYP_Msk                        /*!< HSEDIGBYP bit set */
#define RCC_OCENSETR_HSEON_Pos                     (8U)
#define RCC_OCENSETR_HSEON_Msk                     (0x1UL << RCC_OCENSETR_HSEON_Pos)                    /*!< 0x00000100 */
#define RCC_OCENSETR_HSEON                         RCC_OCENSETR_HSEON_Msk                            /*!< HSEON bit set */
#define RCC_OCENSETR_HSEKERON_Pos                  (9U)
#define RCC_OCENSETR_HSEKERON_Msk                  (0x1UL << RCC_OCENSETR_HSEKERON_Pos)                 /*!< 0x00000200 */
#define RCC_OCENSETR_HSEKERON                      RCC_OCENSETR_HSEKERON_Msk                         /*!< HSEKERON bit set */
#define RCC_OCENSETR_HSEBYP_Pos                    (10U)
#define RCC_OCENSETR_HSEBYP_Msk                    (0x1UL << RCC_OCENSETR_HSEBYP_Pos)                   /*!< 0x00000400 */
#define RCC_OCENSETR_HSEBYP                        RCC_OCENSETR_HSEBYP_Msk                           /*!< HSEBYP bit set */
#define RCC_OCENSETR_HSECSSON_Pos                  (11U)
#define RCC_OCENSETR_HSECSSON_Msk                  (0x1UL << RCC_OCENSETR_HSECSSON_Pos)                 /*!< 0x00000800 */
#define RCC_OCENSETR_HSECSSON                      RCC_OCENSETR_HSECSSON_Msk                         /*!< HSECSSON bit set */

/* Bit fields for RCC_OCENCLRR register */
#define RCC_OCENCLRR_HSION_Pos                     (0U)
#define RCC_OCENCLRR_HSION_Msk                     (0x1UL << RCC_OCENCLRR_HSION_Pos)                    /*!< 0x00000001 */
#define RCC_OCENCLRR_HSION                         RCC_OCENCLRR_HSION_Msk                            /*!< HSION bit clear */
#define RCC_OCENCLRR_HSIKERON_Pos                  (1U)
#define RCC_OCENCLRR_HSIKERON_Msk                  (0x1UL << RCC_OCENCLRR_HSIKERON_Pos)                 /*!< 0x00000002 */
#define RCC_OCENCLRR_HSIKERON                      RCC_OCENCLRR_HSIKERON_Msk                         /*!< HSIKERON bit clear */
#define RCC_OCENCLRR_MSION_Pos                     (2U)
#define RCC_OCENCLRR_MSION_Msk                     (0x1UL << RCC_OCENCLRR_MSION_Pos)                    /*!< 0x00000004 */
#define RCC_OCENCLRR_MSION                         RCC_OCENCLRR_MSION_Msk                            /*!< MSION bit clear */
#define RCC_OCENCLRR_MSIKERON_Pos                  (3U)
#define RCC_OCENCLRR_MSIKERON_Msk                  (0x1UL << RCC_OCENCLRR_MSIKERON_Pos)                 /*!< 0x00000008 */
#define RCC_OCENCLRR_MSIKERON                      RCC_OCENCLRR_MSIKERON_Msk                         /*!< MSIKERON bit clear */
#define RCC_OCENCLRR_HSEDIV2ON_Pos                 (5U)
#define RCC_OCENCLRR_HSEDIV2ON_Msk                 (0x1UL << RCC_OCENCLRR_HSEDIV2ON_Pos)                /*!< 0x00000020 */
#define RCC_OCENCLRR_HSEDIV2ON                     RCC_OCENCLRR_HSEDIV2ON_Msk                        /*!< HSEDIV2ON bit clear */
#define RCC_OCENCLRR_HSEDIV2BYP_Pos                (6U)
#define RCC_OCENCLRR_HSEDIV2BYP_Msk                (0x1UL << RCC_OCENCLRR_HSEDIV2BYP_Pos)               /*!< 0x00000040 */
#define RCC_OCENCLRR_HSEDIV2BYP                    RCC_OCENCLRR_HSEDIV2BYP_Msk                       /*!< HSEDIV2BYP bit clear */
#define RCC_OCENCLRR_HSEDIGBYP_Pos                 (7U)
#define RCC_OCENCLRR_HSEDIGBYP_Msk                 (0x1UL << RCC_OCENCLRR_HSEDIGBYP_Pos)                /*!< 0x00000080 */
#define RCC_OCENCLRR_HSEDIGBYP                     RCC_OCENCLRR_HSEDIGBYP_Msk                        /*!< HSEDIGBYP bit clear */
#define RCC_OCENCLRR_HSEON_Pos                     (8U)
#define RCC_OCENCLRR_HSEON_Msk                     (0x1UL << RCC_OCENCLRR_HSEON_Pos)                    /*!< 0x00000100 */
#define RCC_OCENCLRR_HSEON                         RCC_OCENCLRR_HSEON_Msk                            /*!< HSEON bit clear */
#define RCC_OCENCLRR_HSEKERON_Pos                  (9U)
#define RCC_OCENCLRR_HSEKERON_Msk                  (0x1UL << RCC_OCENCLRR_HSEKERON_Pos)                 /*!< 0x00000200 */
#define RCC_OCENCLRR_HSEKERON                      RCC_OCENCLRR_HSEKERON_Msk                         /*!< HSEKERON bit clear */
#define RCC_OCENCLRR_HSEBYP_Pos                    (10U)
#define RCC_OCENCLRR_HSEBYP_Msk                    (0x1UL << RCC_OCENCLRR_HSEBYP_Pos)                   /*!< 0x00000400 */
#define RCC_OCENCLRR_HSEBYP                        RCC_OCENCLRR_HSEBYP_Msk                           /*!< HSEBYP bit clear */

/******************  Bit fields for RCC_OCRDYR register  ******************/
#define RCC_OCRDYR_HSIRDY_Pos                    (0U)
#define RCC_OCRDYR_HSIRDY_Msk                    (0x1UL << RCC_OCRDYR_HSIRDY_Pos)                   /*!< 0x00000001 */
#define RCC_OCRDYR_HSIRDY                        RCC_OCRDYR_HSIRDY_Msk                             /*!< HSI clock ready flag */
#define RCC_OCRDYR_MSIRDY_Pos                    (2U)
#define RCC_OCRDYR_MSIRDY_Msk                    (0x1UL << RCC_OCRDYR_MSIRDY_Pos)                   /*!< 0x00000004 */
#define RCC_OCRDYR_MSIRDY                        RCC_OCRDYR_MSIRDY_Msk                             /*!< MSI clock ready flag */
#define RCC_OCRDYR_HSERDY_Pos                    (8U)
#define RCC_OCRDYR_HSERDY_Msk                    (0x1UL << RCC_OCRDYR_HSERDY_Pos)                   /*!< 0x00000100 */
#define RCC_OCRDYR_HSERDY                        RCC_OCRDYR_HSERDY_Msk                             /*!< HSE clock ready flag */
#define RCC_OCRDYR_CKREST_Pos                    (25U)
#define RCC_OCRDYR_CKREST_Msk                    (0x1UL << RCC_OCRDYR_CKREST_Pos)                   /*!< 0x02000000 */
#define RCC_OCRDYR_CKREST                        RCC_OCRDYR_CKREST_Msk                             /*!< Clock restore state machine status */

/* Bit fields for RCC_HSICFGR register  ******************/
#define RCC_HSICFGR_HSITRIM_Pos                    (8U)
#define RCC_HSICFGR_HSITRIM_Msk                    (0x7FUL << RCC_HSICFGR_HSITRIM_Pos)                  /*!< 0x00007F00 */
#define RCC_HSICFGR_HSITRIM                        RCC_HSICFGR_HSITRIM_Msk                           /*!< HSI clock trimming */
#define RCC_HSICFGR_HSICAL_Pos                     (16U)
#define RCC_HSICFGR_HSICAL_Msk                     (0x1FFUL << RCC_HSICFGR_HSICAL_Pos)                  /*!< 0x01FF0000 */
#define RCC_HSICFGR_HSICAL                         RCC_HSICFGR_HSICAL_Msk                            /*!< HSI clock calibration */

/* Bit fields for RCC_MSICFGR register  ******************/
#define RCC_MSICFGR_MSITRIM_Pos                    (8U)
#define RCC_MSICFGR_MSITRIM_Msk                    (0x1FUL << RCC_MSICFGR_MSITRIM_Pos)                  /*!< 0x00001F00 */
#define RCC_MSICFGR_MSITRIM                        RCC_MSICFGR_MSITRIM_Msk                           /*!< MSI clock trimming */
#define RCC_MSICFGR_MSICAL_Pos                     (16U)
#define RCC_MSICFGR_MSICAL_Msk                     (0xFFUL << RCC_MSICFGR_MSICAL_Pos)                   /*!< 0x00FF0000 */
#define RCC_MSICFGR_MSICAL                         RCC_MSICFGR_MSICAL_Msk                            /*!< MSI clock calibration */

/******************  Bit fields for RCC_LSICR register */
#define RCC_LSICR_LSION_Pos                      (0U)
#define RCC_LSICR_LSION_Msk                      (0x1UL << RCC_LSICR_LSION_Pos)                     /*!< 0x00000001 */
#define RCC_LSICR_LSION                          RCC_LSICR_LSION_Msk                               /*!< LSI oscillator enabled */
#define RCC_LSICR_LSIRDY_Pos                     (1U)
#define RCC_LSICR_LSIRDY_Msk                     (0x1UL << RCC_LSICR_LSIRDY_Pos)                    /*!< 0x00000002 */
#define RCC_LSICR_LSIRDY                         RCC_LSICR_LSIRDY_Msk                              /*!< LSI oscillator ready */

/* Bit fields for RCC_RTCDIVR register  ******************/
#define RCC_RTCDIVR_RTCDIV_Pos                   (0U)
#define RCC_RTCDIVR_RTCDIV_Msk                   (0x3FUL << RCC_RTCDIVR_RTCDIV_Pos)                   /*!< 0x0000003F */
#define RCC_RTCDIVR_RTCDIV                       RCC_RTCDIVR_RTCDIV_Msk                            /*!< HSE division factor for RTC clock */

/* Bit fields for RCC_APB1DIVR register */
#define RCC_APB1DIVR_APB1DIV_Pos                   (0U)
#define RCC_APB1DIVR_APB1DIV_Msk                   (0x7UL << RCC_APB1DIVR_APB1DIV_Pos)                  /*!< 0x00000007 */
#define RCC_APB1DIVR_APB1DIV                       RCC_APB1DIVR_APB1DIV_Msk                          /*!< APB1 clock divider */
#define RCC_APB1DIVR_APB1DIVRDY_Pos                (31U)
#define RCC_APB1DIVR_APB1DIVRDY_Msk                (0x1UL << RCC_APB1DIVR_APB1DIVRDY_Pos)               /*!< 0x80000000 */
#define RCC_APB1DIVR_APB1DIVRDY                    RCC_APB1DIVR_APB1DIVRDY_Msk                       /*!< APB1 clock prescaler status */

/* Bit fields for RCC_APB2DIVR register */
#define RCC_APB2DIVR_APB2DIV_Pos                   (0U)
#define RCC_APB2DIVR_APB2DIV_Msk                   (0x7UL << RCC_APB2DIVR_APB2DIV_Pos)                  /*!< 0x00000007 */
#define RCC_APB2DIVR_APB2DIV                       RCC_APB2DIVR_APB2DIV_Msk                          /*!< APB2 clock divider */
#define RCC_APB2DIVR_APB2DIVRDY_Pos                (31U)
#define RCC_APB2DIVR_APB2DIVRDY_Msk                (0x1UL << RCC_APB2DIVR_APB2DIVRDY_Pos)               /*!< 0x80000000 */
#define RCC_APB2DIVR_APB2DIVRDY                    RCC_APB2DIVR_APB2DIVRDY_Msk                       /*!< APB2 clock prescaler status */

/* Bit fields for RCC_APB3DIVR register */
#define RCC_APB3DIVR_APB3DIV_Pos                   (0U)
#define RCC_APB3DIVR_APB3DIV_Msk                   (0x7UL << RCC_APB3DIVR_APB3DIV_Pos)                  /*!< 0x00000007 */
#define RCC_APB3DIVR_APB3DIV                       RCC_APB3DIVR_APB3DIV_Msk                          /*!< APB3 clock divider */
#define RCC_APB3DIVR_APB3DIVRDY_Pos                (31U)
#define RCC_APB3DIVR_APB3DIVRDY_Msk                (0x1UL << RCC_APB3DIVR_APB3DIVRDY_Pos)               /*!< 0x80000000 */
#define RCC_APB3DIVR_APB3DIVRDY                    RCC_APB3DIVR_APB3DIVRDY_Msk                       /*!< APB3 clock prescaler status */

/* Bit fields for RCC_APB4DIVR register */
#define RCC_APB4DIVR_APB4DIV_Pos                   (0U)
#define RCC_APB4DIVR_APB4DIV_Msk                   (0x7UL << RCC_APB4DIVR_APB4DIV_Pos)                  /*!< 0x00000007 */
#define RCC_APB4DIVR_APB4DIV                       RCC_APB4DIVR_APB4DIV_Msk                          /*!< APB4 clock divider */
#define RCC_APB4DIVR_APB4DIVRDY_Pos                (31U)
#define RCC_APB4DIVR_APB4DIVRDY_Msk                (0x1UL << RCC_APB4DIVR_APB4DIVRDY_Pos)               /*!< 0x80000000 */
#define RCC_APB4DIVR_APB4DIVRDY                    RCC_APB4DIVR_APB4DIVRDY_Msk                       /*!< APB4 clock divider status */

/* Bit fields for RCC_APB5DIVR register */
#define RCC_APB5DIVR_APB5DIV_Pos                   (0U)
#define RCC_APB5DIVR_APB5DIV_Msk                   (0x7UL << RCC_APB5DIVR_APB5DIV_Pos)                  /*!< 0x00000007 */
#define RCC_APB5DIVR_APB5DIV                       RCC_APB5DIVR_APB5DIV_Msk                          /*!< APB5 clock divider */
#define RCC_APB5DIVR_APB5DIVRDY_Pos                (31U)
#define RCC_APB5DIVR_APB5DIVRDY_Msk                (0x1UL << RCC_APB5DIVR_APB5DIVRDY_Pos)               /*!< 0x80000000 */
#define RCC_APB5DIVR_APB5DIVRDY                    RCC_APB5DIVR_APB5DIVRDY_Msk                       /*!< APB5 clock divider status */

/* Bit fields for RCC_APBDBGDIVR register */
#define RCC_APBDBGDIVR_APBDBGDIV_Pos               (0U)
#define RCC_APBDBGDIVR_APBDBGDIV_Msk               (0x7UL << RCC_APBDBGDIVR_APBDBGDIV_Pos)              /*!< 0x00000007 */
#define RCC_APBDBGDIVR_APBDBGDIV                   RCC_APBDBGDIVR_APBDBGDIV_Msk                      /*!< APBDBG clock divider */
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Pos            (31U)
#define RCC_APBDBGDIVR_APBDBGDIVRDY_Msk            (0x1UL << RCC_APBDBGDIVR_APBDBGDIVRDY_Pos)           /*!< 0x80000000 */
#define RCC_APBDBGDIVR_APBDBGDIVRDY                RCC_APBDBGDIVR_APBDBGDIVRDY_Msk                   /*!< APBDBG clock divider status */

/* Bit fields for RCC_TIMG1PRER register */
#define RCC_TIMG1PRER_TIMG1PRE_Pos                 (0U)
#define RCC_TIMG1PRER_TIMG1PRE_Msk                 (0x1UL << RCC_TIMG1PRER_TIMG1PRE_Pos)                /*!< 0x00000001 */
#define RCC_TIMG1PRER_TIMG1PRE                     RCC_TIMG1PRER_TIMG1PRE_Msk                        /*!< Clock prescaler selection for timers of group 1 */
#define RCC_TIMG1PRER_TIMG1PRERDY_Pos              (31U)
#define RCC_TIMG1PRER_TIMG1PRERDY_Msk              (0x1UL << RCC_TIMG1PRER_TIMG1PRERDY_Pos)             /*!< 0x80000000 */
#define RCC_TIMG1PRER_TIMG1PRERDY                  RCC_TIMG1PRER_TIMG1PRERDY_Msk                     /*!< Clock prescaler status for timers of group 1 */

/* Bit fields for RCC_TIMG2PRER register */
#define RCC_TIMG2PRER_TIMG2PRE_Pos                 (0U)
#define RCC_TIMG2PRER_TIMG2PRE_Msk                 (0x1UL << RCC_TIMG2PRER_TIMG2PRE_Pos)                /*!< 0x00000001 */
#define RCC_TIMG2PRER_TIMG2PRE                     RCC_TIMG2PRER_TIMG2PRE_Msk                        /*!< Clock prescaler selection for timers of group 2 */
#define RCC_TIMG2PRER_TIMG2PRERDY_Pos              (31U)
#define RCC_TIMG2PRER_TIMG2PRERDY_Msk              (0x1UL << RCC_TIMG2PRER_TIMG2PRERDY_Pos)             /*!< 0x80000000 */
#define RCC_TIMG2PRER_TIMG2PRERDY                  RCC_TIMG2PRER_TIMG2PRERDY_Msk                     /*!< Clock prescaler status for timers of group 2 */

/* Bit fields for RCC_LSMCUDIVR register */
#define RCC_LSMCUDIVR_LSMCUDIV_Pos                 (0U)
#define RCC_LSMCUDIVR_LSMCUDIV_Msk                 (0x1UL << RCC_LSMCUDIVR_LSMCUDIV_Pos)                /*!< 0x00000001 */
#define RCC_LSMCUDIVR_LSMCUDIV                     RCC_LSMCUDIVR_LSMCUDIV_Msk                        /*!< LSMCU clock divider */
#define RCC_LSMCUDIVR_LSMCUDIVRDY_Pos              (31U)
#define RCC_LSMCUDIVR_LSMCUDIVRDY_Msk              (0x1UL << RCC_LSMCUDIVR_LSMCUDIVRDY_Pos)             /*!< 0x80000000 */
#define RCC_LSMCUDIVR_LSMCUDIVRDY                  RCC_LSMCUDIVR_LSMCUDIVRDY_Msk                     /*!< LSMCU clock divider status */

/* Bit fields for RCC_DDRCPCFGR register */
#define RCC_DDRCPCFGR_DDRCPRST_Pos                 (0U)
#define RCC_DDRCPCFGR_DDRCPRST_Msk                 (0x1UL << RCC_DDRCPCFGR_DDRCPRST_Pos)                /*!< 0x00000001 */
#define RCC_DDRCPCFGR_DDRCPRST                     RCC_DDRCPCFGR_DDRCPRST_Msk                        /*!< DDRC AXI port reset */
#define RCC_DDRCPCFGR_DDRCPEN_Pos                  (1U)
#define RCC_DDRCPCFGR_DDRCPEN_Msk                  (0x1UL << RCC_DDRCPCFGR_DDRCPEN_Pos)                 /*!< 0x00000002 */
#define RCC_DDRCPCFGR_DDRCPEN                      RCC_DDRCPCFGR_DDRCPEN_Msk                         /*!< DDRC AXI port clock enable */
#define RCC_DDRCPCFGR_DDRCPLPEN_Pos                (2U)
#define RCC_DDRCPCFGR_DDRCPLPEN_Msk                (0x1UL << RCC_DDRCPCFGR_DDRCPLPEN_Pos)               /*!< 0x00000004 */
#define RCC_DDRCPCFGR_DDRCPLPEN                    RCC_DDRCPCFGR_DDRCPLPEN_Msk                       /*!< DDRC AXI port clock enable during CSleep */

/***************  Bit fields for RCC_DDRCAPBCFGR register */
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Pos             (0U)
#define RCC_DDRCAPBCFGR_DDRCAPBRST_Msk             (0x1UL << RCC_DDRCAPBCFGR_DDRCAPBRST_Pos)            /*!< 0x00000001 */
#define RCC_DDRCAPBCFGR_DDRCAPBRST                 RCC_DDRCAPBCFGR_DDRCAPBRST_Msk                    /*!< DDRC APB reset */
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Pos              (1U)
#define RCC_DDRCAPBCFGR_DDRCAPBEN_Msk              (0x1UL << RCC_DDRCAPBCFGR_DDRCAPBEN_Pos)             /*!< 0x00000002 */
#define RCC_DDRCAPBCFGR_DDRCAPBEN                  RCC_DDRCAPBCFGR_DDRCAPBEN_Msk                     /*!< DDRC APB clock enable */
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Pos            (2U)
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN_Msk            (0x1UL << RCC_DDRCAPBCFGR_DDRCAPBLPEN_Pos)           /*!< 0x00000004 */
#define RCC_DDRCAPBCFGR_DDRCAPBLPEN                RCC_DDRCAPBCFGR_DDRCAPBLPEN_Msk                   /*!< DDRC APB clock enable during CSleep */

/**************  Bit fields for RCC_DDRPHYCAPBCFGR register  **************/
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Pos       (0U)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Msk       (0x1UL << RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Pos)      /*!< 0x00000001 */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST           RCC_DDRPHYCAPBCFGR_DDRPHYCAPBRST_Msk                /*!< DDRPHYC APB reset */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Pos        (1U)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Msk        (0x1UL << RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Pos)       /*!< 0x00000002 */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN            RCC_DDRPHYCAPBCFGR_DDRPHYCAPBEN_Msk                 /*!< DDRPHYC APB clock enable */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Pos      (2U)
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Msk      (0x1UL << RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Pos)     /*!< 0x00000004 */
#define RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN          RCC_DDRPHYCAPBCFGR_DDRPHYCAPBLPEN_Msk               /*!< DDRPHYC APB clock enable during CSleep */

/***************  Bit fields for RCC_DDRPHYCCFGR register */
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Pos              (1U)
#define RCC_DDRPHYCCFGR_DDRPHYCEN_Msk              (0x1UL << RCC_DDRPHYCCFGR_DDRPHYCEN_Pos)             /*!< 0x00000002 */
#define RCC_DDRPHYCCFGR_DDRPHYCEN                  RCC_DDRPHYCCFGR_DDRPHYCEN_Msk                     /*!< DDRPHYC kernel clock enable */

/* Bit fields for RCC_DDRCFGR register  ******************/
#define RCC_DDRCFGR_DDRCFGRST_Pos                  (0U)
#define RCC_DDRCFGR_DDRCFGRST_Msk                  (0x1UL << RCC_DDRCFGR_DDRCFGRST_Pos)                 /*!< 0x00000001 */
#define RCC_DDRCFGR_DDRCFGRST                      RCC_DDRCFGR_DDRCFGRST_Msk                         /*!< DDR APB configuration reset */
#define RCC_DDRCFGR_DDRCFGEN_Pos                   (1U)
#define RCC_DDRCFGR_DDRCFGEN_Msk                   (0x1UL << RCC_DDRCFGR_DDRCFGEN_Pos)                  /*!< 0x00000002 */
#define RCC_DDRCFGR_DDRCFGEN                       RCC_DDRCFGR_DDRCFGEN_Msk                          /*!< DDR APB configuration clock enable */
#define RCC_DDRCFGR_DDRCFGLPEN_Pos                 (2U)
#define RCC_DDRCFGR_DDRCFGLPEN_Msk                 (0x1UL << RCC_DDRCFGR_DDRCFGLPEN_Pos)                /*!< 0x00000004 */
#define RCC_DDRCFGR_DDRCFGLPEN                     RCC_DDRCFGR_DDRCFGLPEN_Msk                        /*!< DDR APB configuration clock enable during CSleep */

/* Bit fields for RCC_DDRITFCFGR register */
#define RCC_DDRITFCFGR_DDRRST_Pos                  (0U)
#define RCC_DDRITFCFGR_DDRRST_Msk                  (0x1UL << RCC_DDRITFCFGR_DDRRST_Pos)                 /*!< 0x00000001 */
#define RCC_DDRITFCFGR_DDRRST                      RCC_DDRITFCFGR_DDRRST_Msk                         /*!< DDR core and PHY reset */
#define RCC_DDRITFCFGR_DDRCKMOD_Pos                (4U)
#define RCC_DDRITFCFGR_DDRCKMOD_Msk                (0x3UL << RCC_DDRITFCFGR_DDRCKMOD_Pos)               /*!< 0x00000030 */
#define RCC_DDRITFCFGR_DDRCKMOD                    RCC_DDRITFCFGR_DDRCKMOD_Msk                       /*!< RCC mode for DDR clock control */
#define RCC_DDRITFCFGR_DDRSHR_Pos                  (8U)
#define RCC_DDRITFCFGR_DDRSHR_Msk                  (0x1UL << RCC_DDRITFCFGR_DDRSHR_Pos)                 /*!< 0x00000100 */
#define RCC_DDRITFCFGR_DDRSHR                      RCC_DDRITFCFGR_DDRSHR_Msk                         /*!< DDR peripheral mode */
#define RCC_DDRITFCFGR_DDRPHYDLP_Pos               (16U)
#define RCC_DDRITFCFGR_DDRPHYDLP_Msk               (0x1UL << RCC_DDRITFCFGR_DDRPHYDLP_Pos)              /*!< 0x00010000 */
#define RCC_DDRITFCFGR_DDRPHYDLP                   RCC_DDRITFCFGR_DDRPHYDLP_Msk                      /*!< DDRPHY deep low-power mode (LP2 or LP3) */

/* Bit fields for RCC_SYSRAMCFGR register */
#define RCC_SYSRAMCFGR_SYSRAMEN_Pos                (1U)
#define RCC_SYSRAMCFGR_SYSRAMEN_Msk                (0x1UL << RCC_SYSRAMCFGR_SYSRAMEN_Pos)               /*!< 0x00000002 */
#define RCC_SYSRAMCFGR_SYSRAMEN                    RCC_SYSRAMCFGR_SYSRAMEN_Msk                       /*!< SYSRAM clock enable */
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Pos              (2U)
#define RCC_SYSRAMCFGR_SYSRAMLPEN_Msk              (0x1UL << RCC_SYSRAMCFGR_SYSRAMLPEN_Pos)             /*!< 0x00000004 */
#define RCC_SYSRAMCFGR_SYSRAMLPEN                  RCC_SYSRAMCFGR_SYSRAMLPEN_Msk                     /*!< SYSRAM clock enable during CSleep */

/* Bit fields for RCC_SRAM1CFGR register */
#define RCC_SRAM1CFGR_SRAM1EN_Pos                  (1U)
#define RCC_SRAM1CFGR_SRAM1EN_Msk                  (0x1UL << RCC_SRAM1CFGR_SRAM1EN_Pos)                 /*!< 0x00000002 */
#define RCC_SRAM1CFGR_SRAM1EN                      RCC_SRAM1CFGR_SRAM1EN_Msk                         /*!< SRAM1 clock enable */
#define RCC_SRAM1CFGR_SRAM1LPEN_Pos                (2U)
#define RCC_SRAM1CFGR_SRAM1LPEN_Msk                (0x1UL << RCC_SRAM1CFGR_SRAM1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_SRAM1CFGR_SRAM1LPEN                    RCC_SRAM1CFGR_SRAM1LPEN_Msk                       /*!< SRAM1 clock enable during CSleep */

/* Bit fields for RCC_RETRAMCFGR register */
#define RCC_RETRAMCFGR_RETRAMEN_Pos                (1U)
#define RCC_RETRAMCFGR_RETRAMEN_Msk                (0x1UL << RCC_RETRAMCFGR_RETRAMEN_Pos)               /*!< 0x00000002 */
#define RCC_RETRAMCFGR_RETRAMEN                    RCC_RETRAMCFGR_RETRAMEN_Msk                       /*!< RETRAM clock enable */
#define RCC_RETRAMCFGR_RETRAMLPEN_Pos              (2U)
#define RCC_RETRAMCFGR_RETRAMLPEN_Msk              (0x1UL << RCC_RETRAMCFGR_RETRAMLPEN_Pos)             /*!< 0x00000004 */
#define RCC_RETRAMCFGR_RETRAMLPEN                  RCC_RETRAMCFGR_RETRAMLPEN_Msk                     /*!< RETRAM clock enable during CSleep */

/***************  Bit fields for RCC_BKPSRAMCFGR register */
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Pos              (1U)
#define RCC_BKPSRAMCFGR_BKPSRAMEN_Msk              (0x1UL << RCC_BKPSRAMCFGR_BKPSRAMEN_Pos)             /*!< 0x00000002 */
#define RCC_BKPSRAMCFGR_BKPSRAMEN                  RCC_BKPSRAMCFGR_BKPSRAMEN_Msk                     /*!< BKPSRAM clock enable */
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Pos            (2U)
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN_Msk            (0x1UL << RCC_BKPSRAMCFGR_BKPSRAMLPEN_Pos)           /*!< 0x00000004 */
#define RCC_BKPSRAMCFGR_BKPSRAMLPEN                RCC_BKPSRAMCFGR_BKPSRAMLPEN_Msk                   /*!< BKPSRAM clock enable during CSleep */

/* Bit fields for RCC_OSPI1CFGR register */
#define RCC_OSPI1CFGR_OSPI1RST_Pos                 (0U)
#define RCC_OSPI1CFGR_OSPI1RST_Msk                 (0x1UL << RCC_OSPI1CFGR_OSPI1RST_Pos)                /*!< 0x00000001 */
#define RCC_OSPI1CFGR_OSPI1RST                     RCC_OSPI1CFGR_OSPI1RST_Msk                        /*!< OCTOSPI1 reset */
#define RCC_OSPI1CFGR_OSPI1EN_Pos                  (1U)
#define RCC_OSPI1CFGR_OSPI1EN_Msk                  (0x1UL << RCC_OSPI1CFGR_OSPI1EN_Pos)                 /*!< 0x00000002 */
#define RCC_OSPI1CFGR_OSPI1EN                      RCC_OSPI1CFGR_OSPI1EN_Msk                         /*!< OCTOSPI1 and OTFDEC1 clock enable */
#define RCC_OSPI1CFGR_OSPI1LPEN_Pos                (2U)
#define RCC_OSPI1CFGR_OSPI1LPEN_Msk                (0x1UL << RCC_OSPI1CFGR_OSPI1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_OSPI1CFGR_OSPI1LPEN                    RCC_OSPI1CFGR_OSPI1LPEN_Msk                       /*!< OCTOSPI1, OTFDEC1 and OCTOSPI1 delay (DLYBOSPI1) clock enable duringï¿½CSleep */
#define RCC_OSPI1CFGR_OTFDEC1RST_Pos               (8U)
#define RCC_OSPI1CFGR_OTFDEC1RST_Msk               (0x1UL << RCC_OSPI1CFGR_OTFDEC1RST_Pos)              /*!< 0x00000100 */
#define RCC_OSPI1CFGR_OTFDEC1RST                   RCC_OSPI1CFGR_OTFDEC1RST_Msk                      /*!< OTFDEC1 reset */
#define RCC_OSPI1CFGR_OSPI1DLLRST_Pos              (16U)
#define RCC_OSPI1CFGR_OSPI1DLLRST_Msk              (0x1UL << RCC_OSPI1CFGR_OSPI1DLLRST_Pos)             /*!< 0x00010000 */
#define RCC_OSPI1CFGR_OSPI1DLLRST                  RCC_OSPI1CFGR_OSPI1DLLRST_Msk                     /*!< OCTOSPI1 DLL reset */

/* Bit fields for RCC_FMCCFGR register  ******************/
#define RCC_FMCCFGR_FMCRST_Pos                     (0U)
#define RCC_FMCCFGR_FMCRST_Msk                     (0x1UL << RCC_FMCCFGR_FMCRST_Pos)                    /*!< 0x00000001 */
#define RCC_FMCCFGR_FMCRST                         RCC_FMCCFGR_FMCRST_Msk                            /*!< FMC reset */
#define RCC_FMCCFGR_FMCEN_Pos                      (1U)
#define RCC_FMCCFGR_FMCEN_Msk                      (0x1UL << RCC_FMCCFGR_FMCEN_Pos)                   /*!< 0x00000002 */
#define RCC_FMCCFGR_FMCEN                          RCC_FMCCFGR_FMCEN_Msk                             /*!< FMC clock enable */
#define RCC_FMCCFGR_FMCLPEN_Pos                    (2U)
#define RCC_FMCCFGR_FMCLPEN_Msk                    (0x1UL << RCC_FMCCFGR_FMCLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_FMCCFGR_FMCLPEN                        RCC_FMCCFGR_FMCLPEN_Msk                           /*!< FMC clock enable during CSleep */

/* Bit fields for RCC_DBGCFGR register  ******************/
#define RCC_DBGCFGR_DBGEN_Pos                      (8U)
#define RCC_DBGCFGR_DBGEN_Msk                      (0x1UL << RCC_DBGCFGR_DBGEN_Pos)                   /*!< 0x00000100 */
#define RCC_DBGCFGR_DBGEN                          RCC_DBGCFGR_DBGEN_Msk                             /*!< Debug function clock enable */
#define RCC_DBGCFGR_TRACEEN_Pos                    (9U)
#define RCC_DBGCFGR_TRACEEN_Msk                    (0x1UL << RCC_DBGCFGR_TRACEEN_Pos)                   /*!< 0x00000200 */
#define RCC_DBGCFGR_TRACEEN                        RCC_DBGCFGR_TRACEEN_Msk                           /*!< Clock enable for trace port interface */
#define RCC_DBGCFGR_DBGMCUEN_Pos                   (10U)
#define RCC_DBGCFGR_DBGMCUEN_Msk                   (0x1UL << RCC_DBGCFGR_DBGMCUEN_Pos)                  /*!< 0x00000400 */
#define RCC_DBGCFGR_DBGMCUEN                       RCC_DBGCFGR_DBGMCUEN_Msk                          /*!< Clock enable for dbgmcu */
#define RCC_DBGCFGR_DBGRST_Pos                     (12U)
#define RCC_DBGCFGR_DBGRST_Msk                     (0x1UL << RCC_DBGCFGR_DBGRST_Pos)                    /*!< 0x00001000 */
#define RCC_DBGCFGR_DBGRST                         RCC_DBGCFGR_DBGRST_Msk                            /*!< Debug function reset */

/* Bit fields for RCC_STMCFGR register  ******************/
#define RCC_STMCFGR_STMEN_Pos                      (1U)
#define RCC_STMCFGR_STMEN_Msk                      (0x1UL << RCC_STMCFGR_STMEN_Pos)                   /*!< 0x00000002 */
#define RCC_STMCFGR_STMEN                          RCC_STMCFGR_STMEN_Msk                             /*!< STM clock enable */
#define RCC_STMCFGR_STMLPEN_Pos                    (2U)
#define RCC_STMCFGR_STMLPEN_Msk                    (0x1UL << RCC_STMCFGR_STMLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_STMCFGR_STMLPEN                        RCC_STMCFGR_STMLPEN_Msk                           /*!< STM clock enable during CSleep */

/* Bit fields for RCC_ETRCFGR register  ******************/
#define RCC_ETRCFGR_ETREN_Pos                      (1U)
#define RCC_ETRCFGR_ETREN_Msk                      (0x1UL << RCC_ETRCFGR_ETREN_Pos)                   /*!< 0x00000002 */
#define RCC_ETRCFGR_ETREN                          RCC_ETRCFGR_ETREN_Msk                             /*!< ETR clocks enable */
#define RCC_ETRCFGR_ETRLPEN_Pos                    (2U)
#define RCC_ETRCFGR_ETRLPEN_Msk                    (0x1UL << RCC_ETRCFGR_ETRLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_ETRCFGR_ETRLPEN                        RCC_ETRCFGR_ETRLPEN_Msk                           /*!< ETR clock enable during CSleep */

/* Bit fields for RCC_GPIOACFGR register */
#define RCC_GPIOACFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOACFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOACFGR_GPIOxRST_Pos)
#define RCC_GPIOACFGR_GPIOxRST                       RCC_GPIOACFGR_GPIOxRST_Msk
#define RCC_GPIOACFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOACFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOACFGR_GPIOxEN_Pos)
#define RCC_GPIOACFGR_GPIOxEN                        RCC_GPIOACFGR_GPIOxEN_Msk
#define RCC_GPIOACFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOACFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOACFGR_GPIOxLPEN_Pos)
#define RCC_GPIOACFGR_GPIOxLPEN                      RCC_GPIOACFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOBCFGR register */
#define RCC_GPIOBCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOBCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOBCFGR_GPIOxRST_Pos)
#define RCC_GPIOBCFGR_GPIOxRST                       RCC_GPIOBCFGR_GPIOxRST_Msk
#define RCC_GPIOBCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOBCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOBCFGR_GPIOxEN_Pos)
#define RCC_GPIOBCFGR_GPIOxEN                        RCC_GPIOBCFGR_GPIOxEN_Msk
#define RCC_GPIOBCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOBCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOBCFGR_GPIOxLPEN_Pos)
#define RCC_GPIOBCFGR_GPIOxLPEN                      RCC_GPIOBCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOCCFGR register */
#define RCC_GPIOCCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOCCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOCCFGR_GPIOxRST_Pos)
#define RCC_GPIOCCFGR_GPIOxRST                       RCC_GPIOCCFGR_GPIOxRST_Msk
#define RCC_GPIOCCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOCCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOCCFGR_GPIOxEN_Pos)
#define RCC_GPIOCCFGR_GPIOxEN                        RCC_GPIOCCFGR_GPIOxEN_Msk
#define RCC_GPIOCCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOCCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOCCFGR_GPIOxLPEN_Pos)
#define RCC_GPIOCCFGR_GPIOxLPEN                      RCC_GPIOCCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIODCFGR register */
#define RCC_GPIODCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIODCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIODCFGR_GPIOxRST_Pos)
#define RCC_GPIODCFGR_GPIOxRST                       RCC_GPIODCFGR_GPIOxRST_Msk
#define RCC_GPIODCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIODCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIODCFGR_GPIOxEN_Pos)
#define RCC_GPIODCFGR_GPIOxEN                        RCC_GPIODCFGR_GPIOxEN_Msk
#define RCC_GPIODCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIODCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIODCFGR_GPIOxLPEN_Pos)
#define RCC_GPIODCFGR_GPIOxLPEN                      RCC_GPIODCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOECFGR register */
#define RCC_GPIOECFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOECFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOECFGR_GPIOxRST_Pos)
#define RCC_GPIOECFGR_GPIOxRST                       RCC_GPIOECFGR_GPIOxRST_Msk
#define RCC_GPIOECFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOECFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOECFGR_GPIOxEN_Pos)
#define RCC_GPIOECFGR_GPIOxEN                        RCC_GPIOECFGR_GPIOxEN_Msk
#define RCC_GPIOECFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOECFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOECFGR_GPIOxLPEN_Pos)
#define RCC_GPIOECFGR_GPIOxLPEN                      RCC_GPIOECFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOFCFGR register */
#define RCC_GPIOFCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOFCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOFCFGR_GPIOxRST_Pos)
#define RCC_GPIOFCFGR_GPIOxRST                       RCC_GPIOFCFGR_GPIOxRST_Msk
#define RCC_GPIOFCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOFCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOFCFGR_GPIOxEN_Pos)
#define RCC_GPIOFCFGR_GPIOxEN                        RCC_GPIOFCFGR_GPIOxEN_Msk
#define RCC_GPIOFCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOFCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOFCFGR_GPIOxLPEN_Pos)
#define RCC_GPIOFCFGR_GPIOxLPEN                      RCC_GPIOFCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOGCFGR register */
#define RCC_GPIOGCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOGCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOGCFGR_GPIOxRST_Pos)
#define RCC_GPIOGCFGR_GPIOxRST                       RCC_GPIOGCFGR_GPIOxRST_Msk
#define RCC_GPIOGCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOGCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOGCFGR_GPIOxEN_Pos)
#define RCC_GPIOGCFGR_GPIOxEN                        RCC_GPIOGCFGR_GPIOxEN_Msk
#define RCC_GPIOGCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOGCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOGCFGR_GPIOxLPEN_Pos)
#define RCC_GPIOGCFGR_GPIOxLPEN                      RCC_GPIOGCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOHCFGR register */
#define RCC_GPIOHCFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOHCFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOHCFGR_GPIOxRST_Pos)
#define RCC_GPIOHCFGR_GPIOxRST                       RCC_GPIOHCFGR_GPIOxRST_Msk
#define RCC_GPIOHCFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOHCFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOHCFGR_GPIOxEN_Pos)
#define RCC_GPIOHCFGR_GPIOxEN                        RCC_GPIOHCFGR_GPIOxEN_Msk
#define RCC_GPIOHCFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOHCFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOHCFGR_GPIOxLPEN_Pos)
#define RCC_GPIOHCFGR_GPIOxLPEN                      RCC_GPIOHCFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOICFGR register */
#define RCC_GPIOICFGR_GPIOxRST_Pos                   (0U)
#define RCC_GPIOICFGR_GPIOxRST_Msk                   (0x1UL << RCC_GPIOICFGR_GPIOxRST_Pos)
#define RCC_GPIOICFGR_GPIOxRST                       RCC_GPIOICFGR_GPIOxRST_Msk
#define RCC_GPIOICFGR_GPIOxEN_Pos                    (1U)
#define RCC_GPIOICFGR_GPIOxEN_Msk                    (0x1UL << RCC_GPIOICFGR_GPIOxEN_Pos)
#define RCC_GPIOICFGR_GPIOxEN                        RCC_GPIOICFGR_GPIOxEN_Msk
#define RCC_GPIOICFGR_GPIOxLPEN_Pos                  (2U)
#define RCC_GPIOICFGR_GPIOxLPEN_Msk                  (0x1UL << RCC_GPIOICFGR_GPIOxLPEN_Pos)
#define RCC_GPIOICFGR_GPIOxLPEN                      RCC_GPIOICFGR_GPIOxLPEN_Msk

/* Bit fields for RCC_GPIOZCFGR register */
#define RCC_GPIOZCFGR_GPIOZRST_Pos                 (0U)
#define RCC_GPIOZCFGR_GPIOZRST_Msk                 (0x1UL << RCC_GPIOZCFGR_GPIOZRST_Pos)                /*!< 0x00000001 */
#define RCC_GPIOZCFGR_GPIOZRST                     RCC_GPIOZCFGR_GPIOZRST_Msk                        /*!< GPIOZ reset */
#define RCC_GPIOZCFGR_GPIOZEN_Pos                  (1U)
#define RCC_GPIOZCFGR_GPIOZEN_Msk                  (0x1UL << RCC_GPIOZCFGR_GPIOZEN_Pos)                 /*!< 0x00000002 */
#define RCC_GPIOZCFGR_GPIOZEN                      RCC_GPIOZCFGR_GPIOZEN_Msk                         /*!< GPIOZ clock enable */
#define RCC_GPIOZCFGR_GPIOZLPEN_Pos                (2U)
#define RCC_GPIOZCFGR_GPIOZLPEN_Msk                (0x1UL << RCC_GPIOZCFGR_GPIOZLPEN_Pos)               /*!< 0x00000004 */
#define RCC_GPIOZCFGR_GPIOZLPEN                    RCC_GPIOZCFGR_GPIOZLPEN_Msk                       /*!< GPIOZ clock enable during CSleep */

/* Bit fields for RCC_HPDMA1CFGR register */
#define RCC_HPDMA1CFGR_HPDMA1RST_Pos               (0U)
#define RCC_HPDMA1CFGR_HPDMA1RST_Msk               (0x1UL << RCC_HPDMA1CFGR_HPDMA1RST_Pos)              /*!< 0x00000001 */
#define RCC_HPDMA1CFGR_HPDMA1RST                   RCC_HPDMA1CFGR_HPDMA1RST_Msk                      /*!< HPDMA1 reset */
#define RCC_HPDMA1CFGR_HPDMA1EN_Pos                (1U)
#define RCC_HPDMA1CFGR_HPDMA1EN_Msk                (0x1UL << RCC_HPDMA1CFGR_HPDMA1EN_Pos)               /*!< 0x00000002 */
#define RCC_HPDMA1CFGR_HPDMA1EN                    RCC_HPDMA1CFGR_HPDMA1EN_Msk                       /*!< HPDMA1 clock enable */
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Pos              (2U)
#define RCC_HPDMA1CFGR_HPDMA1LPEN_Msk              (0x1UL << RCC_HPDMA1CFGR_HPDMA1LPEN_Pos)             /*!< 0x00000004 */
#define RCC_HPDMA1CFGR_HPDMA1LPEN                  RCC_HPDMA1CFGR_HPDMA1LPEN_Msk                     /*!< HPDMA1 clock enable during CSleep */

/* Bit fields for RCC_HPDMA2CFGR register */
#define RCC_HPDMA2CFGR_HPDMA2RST_Pos               (0U)
#define RCC_HPDMA2CFGR_HPDMA2RST_Msk               (0x1UL << RCC_HPDMA2CFGR_HPDMA2RST_Pos)              /*!< 0x00000001 */
#define RCC_HPDMA2CFGR_HPDMA2RST                   RCC_HPDMA2CFGR_HPDMA2RST_Msk                      /*!< HPDMA2 reset */
#define RCC_HPDMA2CFGR_HPDMA2EN_Pos                (1U)
#define RCC_HPDMA2CFGR_HPDMA2EN_Msk                (0x1UL << RCC_HPDMA2CFGR_HPDMA2EN_Pos)               /*!< 0x00000002 */
#define RCC_HPDMA2CFGR_HPDMA2EN                    RCC_HPDMA2CFGR_HPDMA2EN_Msk                       /*!< HPDMA2 clock enable */
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Pos              (2U)
#define RCC_HPDMA2CFGR_HPDMA2LPEN_Msk              (0x1UL << RCC_HPDMA2CFGR_HPDMA2LPEN_Pos)             /*!< 0x00000004 */
#define RCC_HPDMA2CFGR_HPDMA2LPEN                  RCC_HPDMA2CFGR_HPDMA2LPEN_Msk                     /*!< HPDMA2 clock enable during CSleep */

/* Bit fields for RCC_HPDMA3CFGR register */
#define RCC_HPDMA3CFGR_HPDMA3RST_Pos               (0U)
#define RCC_HPDMA3CFGR_HPDMA3RST_Msk               (0x1UL << RCC_HPDMA3CFGR_HPDMA3RST_Pos)              /*!< 0x00000001 */
#define RCC_HPDMA3CFGR_HPDMA3RST                   RCC_HPDMA3CFGR_HPDMA3RST_Msk                      /*!< HPDMA3 reset */
#define RCC_HPDMA3CFGR_HPDMA3EN_Pos                (1U)
#define RCC_HPDMA3CFGR_HPDMA3EN_Msk                (0x1UL << RCC_HPDMA3CFGR_HPDMA3EN_Pos)               /*!< 0x00000002 */
#define RCC_HPDMA3CFGR_HPDMA3EN                    RCC_HPDMA3CFGR_HPDMA3EN_Msk                       /*!< HPDMA3 clock enable */
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Pos              (2U)
#define RCC_HPDMA3CFGR_HPDMA3LPEN_Msk              (0x1UL << RCC_HPDMA3CFGR_HPDMA3LPEN_Pos)             /*!< 0x00000004 */
#define RCC_HPDMA3CFGR_HPDMA3LPEN                  RCC_HPDMA3CFGR_HPDMA3LPEN_Msk                     /*!< HPDMA3 clock enable during CSleep */

/* Bit fields for RCC_IPCC1CFGR register */
#define RCC_IPCC1CFGR_IPCC1RST_Pos                 (0U)
#define RCC_IPCC1CFGR_IPCC1RST_Msk                 (0x1UL << RCC_IPCC1CFGR_IPCC1RST_Pos)                /*!< 0x00000001 */
#define RCC_IPCC1CFGR_IPCC1RST                     RCC_IPCC1CFGR_IPCC1RST_Msk                        /*!< IPCC1 reset */
#define RCC_IPCC1CFGR_IPCC1EN_Pos                  (1U)
#define RCC_IPCC1CFGR_IPCC1EN_Msk                  (0x1UL << RCC_IPCC1CFGR_IPCC1EN_Pos)                 /*!< 0x00000002 */
#define RCC_IPCC1CFGR_IPCC1EN                      RCC_IPCC1CFGR_IPCC1EN_Msk                         /*!< IPCC1 clock enable */
#define RCC_IPCC1CFGR_IPCC1LPEN_Pos                (2U)
#define RCC_IPCC1CFGR_IPCC1LPEN_Msk                (0x1UL << RCC_IPCC1CFGR_IPCC1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_IPCC1CFGR_IPCC1LPEN                    RCC_IPCC1CFGR_IPCC1LPEN_Msk                       /*!< IPCC1 clock enable during CSleep */

/* Bit fields for RCC_RTCCFGR register  ******************/
#define RCC_RTCCFGR_RTCEN_Pos                      (1U)
#define RCC_RTCCFGR_RTCEN_Msk                      (0x1UL << RCC_RTCCFGR_RTCEN_Pos)                   /*!< 0x00000002 */
#define RCC_RTCCFGR_RTCEN                          RCC_RTCCFGR_RTCEN_Msk                             /*!< RTC bus clock enable */
#define RCC_RTCCFGR_RTCLPEN_Pos                    (2U)
#define RCC_RTCCFGR_RTCLPEN_Msk                    (0x1UL << RCC_RTCCFGR_RTCLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_RTCCFGR_RTCLPEN                        RCC_RTCCFGR_RTCLPEN_Msk                           /*!< RTC bus clock enable during CSleep */

/***************  Bit fields for RCC_SYSCPU1CFGR register */
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Pos              (1U)
#define RCC_SYSCPU1CFGR_SYSCPU1EN_Msk              (0x1UL << RCC_SYSCPU1CFGR_SYSCPU1EN_Pos)             /*!< 0x00000002 */
#define RCC_SYSCPU1CFGR_SYSCPU1EN                  RCC_SYSCPU1CFGR_SYSCPU1EN_Msk                     /*!< CPU1 system configuration clock enable */
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Pos            (2U)
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN_Msk            (0x1UL << RCC_SYSCPU1CFGR_SYSCPU1LPEN_Pos)           /*!< 0x00000004 */
#define RCC_SYSCPU1CFGR_SYSCPU1LPEN                RCC_SYSCPU1CFGR_SYSCPU1LPEN_Msk                   /*!< CPU1 system configuration clock enable during CSleep */

/* Bit fields for RCC_BSECCFGR register */
#define RCC_BSECCFGR_BSECEN_Pos                    (1U)
#define RCC_BSECCFGR_BSECEN_Msk                    (0x1UL << RCC_BSECCFGR_BSECEN_Pos)                   /*!< 0x00000002 */
#define RCC_BSECCFGR_BSECEN                        RCC_BSECCFGR_BSECEN_Msk                           /*!< BSEC clock enable */
#define RCC_BSECCFGR_BSECLPEN_Pos                  (2U)
#define RCC_BSECCFGR_BSECLPEN_Msk                  (0x1UL << RCC_BSECCFGR_BSECLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_BSECCFGR_BSECLPEN                      RCC_BSECCFGR_BSECLPEN_Msk                         /*!< BSEC clock enable during CSleep */

/* Bit fields for RCC_PLL2CFGR1 register */
#define RCC_PLL2CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL2CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL2CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL2CFGR1_SSMODRST                     RCC_PLL2CFGR1_SSMODRST_Msk                        /*!< PLLx spread-spectrum modulator reset */
#define RCC_PLL2CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL2CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL2CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL2CFGR1_PLLEN                        RCC_PLL2CFGR1_PLLEN_Msk                           /*!< PLLx enable */
#define RCC_PLL2CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL2CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL2CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL2CFGR1_PLLRDY                       RCC_PLL2CFGR1_PLLRDY_Msk                          /*!< PLLx clock ready flag */
#define RCC_PLL2CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL2CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL2CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL2CFGR1_CKREFST                      RCC_PLL2CFGR1_CKREFST_Msk                         /*!< PLLx reference clock state */

/* Bit fields for RCC_PLL2CFGR2 register */
#define RCC_PLL2CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL2CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL2CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL2CFGR2_FREFDIV                      RCC_PLL2CFGR2_FREFDIV_Msk                         /*!< PLLx reference input clock divide frequency ratio */
#define RCC_PLL2CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL2CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL2CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL2CFGR2_FBDIV                        RCC_PLL2CFGR2_FBDIV_Msk                           /*!< PLLx VCO multiplication factor */

/* Bit fields for RCC_PLL2CFGR3 register */
#define RCC_PLL2CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL2CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL2CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL2CFGR3_FRACIN                       RCC_PLL2CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLx VCO multiplication factor */
#define RCC_PLL2CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL2CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL2CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL2CFGR3_DOWNSPREAD                   RCC_PLL2CFGR3_DOWNSPREAD_Msk                      /*!< PLLx VCO frequency modulation mode */
#define RCC_PLL2CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL2CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL2CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL2CFGR3_DACEN                        RCC_PLL2CFGR3_DACEN_Msk                           /*!< PLLx noise canceling DAC enable in fractional mode */
#define RCC_PLL2CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL2CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL2CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL2CFGR3_SSCGDIS                      RCC_PLL2CFGR3_SSCGDIS_Msk                         /*!< PLLx spread-spectrum modulator enable */

/* Bit fields for RCC_PLL2CFGR4 register */
#define RCC_PLL2CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL2CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL2CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL2CFGR4_DSMEN                        RCC_PLL2CFGR4_DSMEN_Msk                           /*!< PLLx delta-sigma modulator enable */
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL2CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL2CFGR4_FOUTPOSTDIVEN                RCC_PLL2CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLx output and post divider enable */
#define RCC_PLL2CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL2CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL2CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL2CFGR4_BYPASS                       RCC_PLL2CFGR4_BYPASS_Msk                          /*!< PLLx FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL2CFGR5 register */
#define RCC_PLL2CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL2CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL2CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL2CFGR5_DIVVAL                       RCC_PLL2CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLx */
#define RCC_PLL2CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL2CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL2CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL2CFGR5_SPREAD                       RCC_PLL2CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLx */

/* Bit fields for RCC_PLL2CFGR6 register */
#define RCC_PLL2CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL2CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL2CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL2CFGR6_POSTDIV1                     RCC_PLL2CFGR6_POSTDIV1_Msk                        /*!< PLLx VCO frequency divide level 1 */

/* Bit fields for RCC_PLL2CFGR7 register */
#define RCC_PLL2CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL2CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL2CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL2CFGR7_POSTDIV2                     RCC_PLL2CFGR7_POSTDIV2_Msk                        /*!< PLLx VCO frequency divide level 2 */

/* Bit fields for RCC_HSIFMONCR register */
#define RCC_HSIFMONCR_HSIREF_Pos                   (0U)
#define RCC_HSIFMONCR_HSIREF_Msk                   (0x7FFUL << RCC_HSIFMONCR_HSIREF_Pos)                /*!< 0x000007FF */
#define RCC_HSIFMONCR_HSIREF                       RCC_HSIFMONCR_HSIREF_Msk                          /*!< HSI clock count reference value */
#define RCC_HSIFMONCR_HSIMONEN_Pos                 (15U)
#define RCC_HSIFMONCR_HSIMONEN_Msk                 (0x1UL << RCC_HSIFMONCR_HSIMONEN_Pos)                /*!< 0x00008000 */
#define RCC_HSIFMONCR_HSIMONEN                     RCC_HSIFMONCR_HSIMONEN_Msk                        /*!< HSI clock period monitor enable */
#define RCC_HSIFMONCR_HSIDEV_Pos                   (16U)
#define RCC_HSIFMONCR_HSIDEV_Msk                   (0x3FUL << RCC_HSIFMONCR_HSIDEV_Pos)                 /*!< 0x003F0000 */
#define RCC_HSIFMONCR_HSIDEV                       RCC_HSIFMONCR_HSIDEV_Msk                          /*!< HSI clock count deviation value */
#define RCC_HSIFMONCR_HSIMONIE_Pos                 (30U)
#define RCC_HSIFMONCR_HSIMONIE_Msk                 (0x1UL << RCC_HSIFMONCR_HSIMONIE_Pos)                /*!< 0x40000000 */
#define RCC_HSIFMONCR_HSIMONIE                     RCC_HSIFMONCR_HSIMONIE_Msk                        /*!< HSI clock period monitor interrupt enable */
#define RCC_HSIFMONCR_HSIMONF_Pos                  (31U)
#define RCC_HSIFMONCR_HSIMONF_Msk                  (0x1UL << RCC_HSIFMONCR_HSIMONF_Pos)                 /*!< 0x80000000 */
#define RCC_HSIFMONCR_HSIMONF                      RCC_HSIFMONCR_HSIMONF_Msk                         /*!< HSI clock period monitor interrupt flag */

/* Bit fields for RCC_HSIFVALR register */
#define RCC_HSIFVALR_HSIVAL_Pos                    (0U)
#define RCC_HSIFVALR_HSIVAL_Msk                    (0x7FFUL << RCC_HSIFVALR_HSIVAL_Pos)                 /*!< 0x000007FF */
#define RCC_HSIFVALR_HSIVAL                        RCC_HSIFVALR_HSIVAL_Msk                           /*!< HSI clock-cycle counter value */

/* Bit fields for RCC_MSIFMONCR register */
#define RCC_MSIFMONCR_MSIREF_Pos                   (0U)
#define RCC_MSIFMONCR_MSIREF_Msk                   (0x1FFUL << RCC_MSIFMONCR_MSIREF_Pos)                /*!< 0x000001FF */
#define RCC_MSIFMONCR_MSIREF                       RCC_MSIFMONCR_MSIREF_Msk                          /*!< MSI clock count reference value */
#define RCC_MSIFMONCR_MSIMONEN_Pos                 (15U)
#define RCC_MSIFMONCR_MSIMONEN_Msk                 (0x1UL << RCC_MSIFMONCR_MSIMONEN_Pos)                /*!< 0x00008000 */
#define RCC_MSIFMONCR_MSIMONEN                     RCC_MSIFMONCR_MSIMONEN_Msk                        /*!< MSI clock period monitor enable */
#define RCC_MSIFMONCR_MSIDEV_Pos                   (16U)
#define RCC_MSIFMONCR_MSIDEV_Msk                   (0x1FUL << RCC_MSIFMONCR_MSIDEV_Pos)                 /*!< 0x001F0000 */
#define RCC_MSIFMONCR_MSIDEV                       RCC_MSIFMONCR_MSIDEV_Msk                          /*!< MSI clock count deviation value */
#define RCC_MSIFMONCR_MSIMONIE_Pos                 (30U)
#define RCC_MSIFMONCR_MSIMONIE_Msk                 (0x1UL << RCC_MSIFMONCR_MSIMONIE_Pos)                /*!< 0x40000000 */
#define RCC_MSIFMONCR_MSIMONIE                     RCC_MSIFMONCR_MSIMONIE_Msk                        /*!< MSI clock period monitor interrupt enable */
#define RCC_MSIFMONCR_MSIMONF_Pos                  (31U)
#define RCC_MSIFMONCR_MSIMONF_Msk                  (0x1UL << RCC_MSIFMONCR_MSIMONF_Pos)                 /*!< 0x80000000 */
#define RCC_MSIFMONCR_MSIMONF                      RCC_MSIFMONCR_MSIMONF_Msk                         /*!< MSI clock period monitor interrupt flag */

/* Bit fields for RCC_MSIFVALR register */
#define RCC_MSIFVALR_MSIVAL_Pos                    (0U)
#define RCC_MSIFVALR_MSIVAL_Msk                    (0x1FFUL << RCC_MSIFVALR_MSIVAL_Pos)                 /*!< 0x000001FF */
#define RCC_MSIFVALR_MSIVAL                        RCC_MSIFVALR_MSIVAL_Msk                           /*!< MSI clock-cycle counter value */

/* Bit fields for RCC_TIM1CFGR register */
#define RCC_TIM1CFGR_TIM1RST_Pos                   (0U)
#define RCC_TIM1CFGR_TIM1RST_Msk                   (0x1UL << RCC_TIM1CFGR_TIM1RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM1CFGR_TIM1RST                       RCC_TIM1CFGR_TIM1RST_Msk                          /*!< TIM1 reset */
#define RCC_TIM1CFGR_TIM1EN_Pos                    (1U)
#define RCC_TIM1CFGR_TIM1EN_Msk                    (0x1UL << RCC_TIM1CFGR_TIM1EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM1CFGR_TIM1EN                        RCC_TIM1CFGR_TIM1EN_Msk                           /*!< TIM1 clock enable */
#define RCC_TIM1CFGR_TIM1LPEN_Pos                  (2U)
#define RCC_TIM1CFGR_TIM1LPEN_Msk                  (0x1UL << RCC_TIM1CFGR_TIM1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM1CFGR_TIM1LPEN                      RCC_TIM1CFGR_TIM1LPEN_Msk                         /*!< TIM1 clock enable during CSleep */

/* Bit fields for RCC_TIM2CFGR register */
#define RCC_TIM2CFGR_TIM2RST_Pos                   (0U)
#define RCC_TIM2CFGR_TIM2RST_Msk                   (0x1UL << RCC_TIM2CFGR_TIM2RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM2CFGR_TIM2RST                       RCC_TIM2CFGR_TIM2RST_Msk                          /*!< TIM2 reset */
#define RCC_TIM2CFGR_TIM2EN_Pos                    (1U)
#define RCC_TIM2CFGR_TIM2EN_Msk                    (0x1UL << RCC_TIM2CFGR_TIM2EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM2CFGR_TIM2EN                        RCC_TIM2CFGR_TIM2EN_Msk                           /*!< TIM2 clock enable */
#define RCC_TIM2CFGR_TIM2LPEN_Pos                  (2U)
#define RCC_TIM2CFGR_TIM2LPEN_Msk                  (0x1UL << RCC_TIM2CFGR_TIM2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM2CFGR_TIM2LPEN                      RCC_TIM2CFGR_TIM2LPEN_Msk                         /*!< TIM2 clock enable during CSleep */

/* Bit fields for RCC_TIM3CFGR register */
#define RCC_TIM3CFGR_TIM3RST_Pos                   (0U)
#define RCC_TIM3CFGR_TIM3RST_Msk                   (0x1UL << RCC_TIM3CFGR_TIM3RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM3CFGR_TIM3RST                       RCC_TIM3CFGR_TIM3RST_Msk                          /*!< TIM3 reset */
#define RCC_TIM3CFGR_TIM3EN_Pos                    (1U)
#define RCC_TIM3CFGR_TIM3EN_Msk                    (0x1UL << RCC_TIM3CFGR_TIM3EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM3CFGR_TIM3EN                        RCC_TIM3CFGR_TIM3EN_Msk                           /*!< TIM3 clock enable */
#define RCC_TIM3CFGR_TIM3LPEN_Pos                  (2U)
#define RCC_TIM3CFGR_TIM3LPEN_Msk                  (0x1UL << RCC_TIM3CFGR_TIM3LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM3CFGR_TIM3LPEN                      RCC_TIM3CFGR_TIM3LPEN_Msk                         /*!< TIM3 clock enable during CSleep */

/* Bit fields for RCC_TIM4CFGR register */
#define RCC_TIM4CFGR_TIM4RST_Pos                   (0U)
#define RCC_TIM4CFGR_TIM4RST_Msk                   (0x1UL << RCC_TIM4CFGR_TIM4RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM4CFGR_TIM4RST                       RCC_TIM4CFGR_TIM4RST_Msk                          /*!< TIM4 reset */
#define RCC_TIM4CFGR_TIM4EN_Pos                    (1U)
#define RCC_TIM4CFGR_TIM4EN_Msk                    (0x1UL << RCC_TIM4CFGR_TIM4EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM4CFGR_TIM4EN                        RCC_TIM4CFGR_TIM4EN_Msk                           /*!< TIM4 clock enable */
#define RCC_TIM4CFGR_TIM4LPEN_Pos                  (2U)
#define RCC_TIM4CFGR_TIM4LPEN_Msk                  (0x1UL << RCC_TIM4CFGR_TIM4LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM4CFGR_TIM4LPEN                      RCC_TIM4CFGR_TIM4LPEN_Msk                         /*!< TIM4 clock enable during CSleep */

/* Bit fields for RCC_TIM5CFGR register */
#define RCC_TIM5CFGR_TIM5RST_Pos                   (0U)
#define RCC_TIM5CFGR_TIM5RST_Msk                   (0x1UL << RCC_TIM5CFGR_TIM5RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM5CFGR_TIM5RST                       RCC_TIM5CFGR_TIM5RST_Msk                          /*!< TIM5 reset */
#define RCC_TIM5CFGR_TIM5EN_Pos                    (1U)
#define RCC_TIM5CFGR_TIM5EN_Msk                    (0x1UL << RCC_TIM5CFGR_TIM5EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM5CFGR_TIM5EN                        RCC_TIM5CFGR_TIM5EN_Msk                           /*!< TIM5 clock enable */
#define RCC_TIM5CFGR_TIM5LPEN_Pos                  (2U)
#define RCC_TIM5CFGR_TIM5LPEN_Msk                  (0x1UL << RCC_TIM5CFGR_TIM5LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM5CFGR_TIM5LPEN                      RCC_TIM5CFGR_TIM5LPEN_Msk                         /*!< TIM5 clock enable during CSleep */

/* Bit fields for RCC_TIM6CFGR register */
#define RCC_TIM6CFGR_TIM6RST_Pos                   (0U)
#define RCC_TIM6CFGR_TIM6RST_Msk                   (0x1UL << RCC_TIM6CFGR_TIM6RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM6CFGR_TIM6RST                       RCC_TIM6CFGR_TIM6RST_Msk                          /*!< TIM6 reset */
#define RCC_TIM6CFGR_TIM6EN_Pos                    (1U)
#define RCC_TIM6CFGR_TIM6EN_Msk                    (0x1UL << RCC_TIM6CFGR_TIM6EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM6CFGR_TIM6EN                        RCC_TIM6CFGR_TIM6EN_Msk                           /*!< TIM6 clock enable */
#define RCC_TIM6CFGR_TIM6LPEN_Pos                  (2U)
#define RCC_TIM6CFGR_TIM6LPEN_Msk                  (0x1UL << RCC_TIM6CFGR_TIM6LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM6CFGR_TIM6LPEN                      RCC_TIM6CFGR_TIM6LPEN_Msk                         /*!< TIM6 clock enable during CSleep */

/* Bit fields for RCC_TIM7CFGR register */
#define RCC_TIM7CFGR_TIM7RST_Pos                   (0U)
#define RCC_TIM7CFGR_TIM7RST_Msk                   (0x1UL << RCC_TIM7CFGR_TIM7RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM7CFGR_TIM7RST                       RCC_TIM7CFGR_TIM7RST_Msk                          /*!< TIM7 reset */
#define RCC_TIM7CFGR_TIM7EN_Pos                    (1U)
#define RCC_TIM7CFGR_TIM7EN_Msk                    (0x1UL << RCC_TIM7CFGR_TIM7EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM7CFGR_TIM7EN                        RCC_TIM7CFGR_TIM7EN_Msk                           /*!< TIM7 clock enable */
#define RCC_TIM7CFGR_TIM7LPEN_Pos                  (2U)
#define RCC_TIM7CFGR_TIM7LPEN_Msk                  (0x1UL << RCC_TIM7CFGR_TIM7LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM7CFGR_TIM7LPEN                      RCC_TIM7CFGR_TIM7LPEN_Msk                         /*!< TIM7 clock enable during CSleep */

/* Bit fields for RCC_TIM8CFGR register */
#define RCC_TIM8CFGR_TIM8RST_Pos                   (0U)
#define RCC_TIM8CFGR_TIM8RST_Msk                   (0x1UL << RCC_TIM8CFGR_TIM8RST_Pos)                  /*!< 0x00000001 */
#define RCC_TIM8CFGR_TIM8RST                       RCC_TIM8CFGR_TIM8RST_Msk                          /*!< TIM8 reset */
#define RCC_TIM8CFGR_TIM8EN_Pos                    (1U)
#define RCC_TIM8CFGR_TIM8EN_Msk                    (0x1UL << RCC_TIM8CFGR_TIM8EN_Pos)                   /*!< 0x00000002 */
#define RCC_TIM8CFGR_TIM8EN                        RCC_TIM8CFGR_TIM8EN_Msk                           /*!< TIM8 clock enable */
#define RCC_TIM8CFGR_TIM8LPEN_Pos                  (2U)
#define RCC_TIM8CFGR_TIM8LPEN_Msk                  (0x1UL << RCC_TIM8CFGR_TIM8LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_TIM8CFGR_TIM8LPEN                      RCC_TIM8CFGR_TIM8LPEN_Msk                         /*!< TIM8 clock enable during CSleep */

/* Bit fields for RCC_TIM10CFGR register */
#define RCC_TIM10CFGR_TIM10RST_Pos                 (0U)
#define RCC_TIM10CFGR_TIM10RST_Msk                 (0x1UL << RCC_TIM10CFGR_TIM10RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM10CFGR_TIM10RST                     RCC_TIM10CFGR_TIM10RST_Msk                        /*!< TIM10 reset */
#define RCC_TIM10CFGR_TIM10EN_Pos                  (1U)
#define RCC_TIM10CFGR_TIM10EN_Msk                  (0x1UL << RCC_TIM10CFGR_TIM10EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM10CFGR_TIM10EN                      RCC_TIM10CFGR_TIM10EN_Msk                         /*!< TIM10 clock enable */
#define RCC_TIM10CFGR_TIM10LPEN_Pos                (2U)
#define RCC_TIM10CFGR_TIM10LPEN_Msk                (0x1UL << RCC_TIM10CFGR_TIM10LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM10CFGR_TIM10LPEN                    RCC_TIM10CFGR_TIM10LPEN_Msk                       /*!< TIM10 clock enable during CSleep */

/* Bit fields for RCC_TIM11CFGR register */
#define RCC_TIM11CFGR_TIM11RST_Pos                 (0U)
#define RCC_TIM11CFGR_TIM11RST_Msk                 (0x1UL << RCC_TIM11CFGR_TIM11RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM11CFGR_TIM11RST                     RCC_TIM11CFGR_TIM11RST_Msk                        /*!< TIM11 reset */
#define RCC_TIM11CFGR_TIM11EN_Pos                  (1U)
#define RCC_TIM11CFGR_TIM11EN_Msk                  (0x1UL << RCC_TIM11CFGR_TIM11EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM11CFGR_TIM11EN                      RCC_TIM11CFGR_TIM11EN_Msk                         /*!< TIM11 clock enable */
#define RCC_TIM11CFGR_TIM11LPEN_Pos                (2U)
#define RCC_TIM11CFGR_TIM11LPEN_Msk                (0x1UL << RCC_TIM11CFGR_TIM11LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM11CFGR_TIM11LPEN                    RCC_TIM11CFGR_TIM11LPEN_Msk                       /*!< TIM11 clock enable during CSleep */

/* Bit fields for RCC_TIM12CFGR register */
#define RCC_TIM12CFGR_TIM12RST_Pos                 (0U)
#define RCC_TIM12CFGR_TIM12RST_Msk                 (0x1UL << RCC_TIM12CFGR_TIM12RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM12CFGR_TIM12RST                     RCC_TIM12CFGR_TIM12RST_Msk                        /*!< TIM12 reset */
#define RCC_TIM12CFGR_TIM12EN_Pos                  (1U)
#define RCC_TIM12CFGR_TIM12EN_Msk                  (0x1UL << RCC_TIM12CFGR_TIM12EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM12CFGR_TIM12EN                      RCC_TIM12CFGR_TIM12EN_Msk                         /*!< TIM12 clock enable */
#define RCC_TIM12CFGR_TIM12LPEN_Pos                (2U)
#define RCC_TIM12CFGR_TIM12LPEN_Msk                (0x1UL << RCC_TIM12CFGR_TIM12LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM12CFGR_TIM12LPEN                    RCC_TIM12CFGR_TIM12LPEN_Msk                       /*!< TIM12 clock enable during CSleep */

/* Bit fields for RCC_TIM13CFGR register */
#define RCC_TIM13CFGR_TIM13RST_Pos                 (0U)
#define RCC_TIM13CFGR_TIM13RST_Msk                 (0x1UL << RCC_TIM13CFGR_TIM13RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM13CFGR_TIM13RST                     RCC_TIM13CFGR_TIM13RST_Msk                        /*!< TIM13 reset */
#define RCC_TIM13CFGR_TIM13EN_Pos                  (1U)
#define RCC_TIM13CFGR_TIM13EN_Msk                  (0x1UL << RCC_TIM13CFGR_TIM13EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM13CFGR_TIM13EN                      RCC_TIM13CFGR_TIM13EN_Msk                         /*!< TIM13 clock enable */
#define RCC_TIM13CFGR_TIM13LPEN_Pos                (2U)
#define RCC_TIM13CFGR_TIM13LPEN_Msk                (0x1UL << RCC_TIM13CFGR_TIM13LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM13CFGR_TIM13LPEN                    RCC_TIM13CFGR_TIM13LPEN_Msk                       /*!< TIM13 clock enable during CSleep */

/* Bit fields for RCC_TIM14CFGR register */
#define RCC_TIM14CFGR_TIM14RST_Pos                 (0U)
#define RCC_TIM14CFGR_TIM14RST_Msk                 (0x1UL << RCC_TIM14CFGR_TIM14RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM14CFGR_TIM14RST                     RCC_TIM14CFGR_TIM14RST_Msk                        /*!< TIM14 reset */
#define RCC_TIM14CFGR_TIM14EN_Pos                  (1U)
#define RCC_TIM14CFGR_TIM14EN_Msk                  (0x1UL << RCC_TIM14CFGR_TIM14EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM14CFGR_TIM14EN                      RCC_TIM14CFGR_TIM14EN_Msk                         /*!< TIM14 clock enable */
#define RCC_TIM14CFGR_TIM14LPEN_Pos                (2U)
#define RCC_TIM14CFGR_TIM14LPEN_Msk                (0x1UL << RCC_TIM14CFGR_TIM14LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM14CFGR_TIM14LPEN                    RCC_TIM14CFGR_TIM14LPEN_Msk                       /*!< TIM14 clock enable during CSleep */

/* Bit fields for RCC_TIM15CFGR register */
#define RCC_TIM15CFGR_TIM15RST_Pos                 (0U)
#define RCC_TIM15CFGR_TIM15RST_Msk                 (0x1UL << RCC_TIM15CFGR_TIM15RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM15CFGR_TIM15RST                     RCC_TIM15CFGR_TIM15RST_Msk                        /*!< TIM15 reset */
#define RCC_TIM15CFGR_TIM15EN_Pos                  (1U)
#define RCC_TIM15CFGR_TIM15EN_Msk                  (0x1UL << RCC_TIM15CFGR_TIM15EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM15CFGR_TIM15EN                      RCC_TIM15CFGR_TIM15EN_Msk                         /*!< TIM15 clock enable */
#define RCC_TIM15CFGR_TIM15LPEN_Pos                (2U)
#define RCC_TIM15CFGR_TIM15LPEN_Msk                (0x1UL << RCC_TIM15CFGR_TIM15LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM15CFGR_TIM15LPEN                    RCC_TIM15CFGR_TIM15LPEN_Msk                       /*!< TIM15 clock enable during CSleep */

/* Bit fields for RCC_TIM16CFGR register */
#define RCC_TIM16CFGR_TIM16RST_Pos                 (0U)
#define RCC_TIM16CFGR_TIM16RST_Msk                 (0x1UL << RCC_TIM16CFGR_TIM16RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM16CFGR_TIM16RST                     RCC_TIM16CFGR_TIM16RST_Msk                        /*!< TIM16 reset */
#define RCC_TIM16CFGR_TIM16EN_Pos                  (1U)
#define RCC_TIM16CFGR_TIM16EN_Msk                  (0x1UL << RCC_TIM16CFGR_TIM16EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM16CFGR_TIM16EN                      RCC_TIM16CFGR_TIM16EN_Msk                         /*!< TIM16 clock enable */
#define RCC_TIM16CFGR_TIM16LPEN_Pos                (2U)
#define RCC_TIM16CFGR_TIM16LPEN_Msk                (0x1UL << RCC_TIM16CFGR_TIM16LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM16CFGR_TIM16LPEN                    RCC_TIM16CFGR_TIM16LPEN_Msk                       /*!< TIM16 clock enable during CSleep */

/* Bit fields for RCC_TIM17CFGR register */
#define RCC_TIM17CFGR_TIM17RST_Pos                 (0U)
#define RCC_TIM17CFGR_TIM17RST_Msk                 (0x1UL << RCC_TIM17CFGR_TIM17RST_Pos)                /*!< 0x00000001 */
#define RCC_TIM17CFGR_TIM17RST                     RCC_TIM17CFGR_TIM17RST_Msk                        /*!< TIM17 reset */
#define RCC_TIM17CFGR_TIM17EN_Pos                  (1U)
#define RCC_TIM17CFGR_TIM17EN_Msk                  (0x1UL << RCC_TIM17CFGR_TIM17EN_Pos)                 /*!< 0x00000002 */
#define RCC_TIM17CFGR_TIM17EN                      RCC_TIM17CFGR_TIM17EN_Msk                         /*!< TIM17 clock enable */
#define RCC_TIM17CFGR_TIM17LPEN_Pos                (2U)
#define RCC_TIM17CFGR_TIM17LPEN_Msk                (0x1UL << RCC_TIM17CFGR_TIM17LPEN_Pos)               /*!< 0x00000004 */
#define RCC_TIM17CFGR_TIM17LPEN                    RCC_TIM17CFGR_TIM17LPEN_Msk                       /*!< TIM17 clock enable during CSleep */

/* Bit fields for RCC_LPTIM1CFGR register */
#define RCC_LPTIM1CFGR_LPTIM1RST_Pos               (0U)
#define RCC_LPTIM1CFGR_LPTIM1RST_Msk               (0x1UL << RCC_LPTIM1CFGR_LPTIM1RST_Pos)              /*!< 0x00000001 */
#define RCC_LPTIM1CFGR_LPTIM1RST                   RCC_LPTIM1CFGR_LPTIM1RST_Msk                      /*!< LPTIM1 reset */
#define RCC_LPTIM1CFGR_LPTIM1EN_Pos                (1U)
#define RCC_LPTIM1CFGR_LPTIM1EN_Msk                (0x1UL << RCC_LPTIM1CFGR_LPTIM1EN_Pos)               /*!< 0x00000002 */
#define RCC_LPTIM1CFGR_LPTIM1EN                    RCC_LPTIM1CFGR_LPTIM1EN_Msk                       /*!< LPTIM1 clock enable */
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Pos              (2U)
#define RCC_LPTIM1CFGR_LPTIM1LPEN_Msk              (0x1UL << RCC_LPTIM1CFGR_LPTIM1LPEN_Pos)             /*!< 0x00000004 */
#define RCC_LPTIM1CFGR_LPTIM1LPEN                  RCC_LPTIM1CFGR_LPTIM1LPEN_Msk                     /*!< LPTIM1 clock enable during CSleep */

/* Bit fields for RCC_LPTIM2CFGR register */
#define RCC_LPTIM2CFGR_LPTIM2RST_Pos               (0U)
#define RCC_LPTIM2CFGR_LPTIM2RST_Msk               (0x1UL << RCC_LPTIM2CFGR_LPTIM2RST_Pos)              /*!< 0x00000001 */
#define RCC_LPTIM2CFGR_LPTIM2RST                   RCC_LPTIM2CFGR_LPTIM2RST_Msk                      /*!< LPTIM2 reset */
#define RCC_LPTIM2CFGR_LPTIM2EN_Pos                (1U)
#define RCC_LPTIM2CFGR_LPTIM2EN_Msk                (0x1UL << RCC_LPTIM2CFGR_LPTIM2EN_Pos)               /*!< 0x00000002 */
#define RCC_LPTIM2CFGR_LPTIM2EN                    RCC_LPTIM2CFGR_LPTIM2EN_Msk                       /*!< LPTIM2 clock enable */
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Pos              (2U)
#define RCC_LPTIM2CFGR_LPTIM2LPEN_Msk              (0x1UL << RCC_LPTIM2CFGR_LPTIM2LPEN_Pos)             /*!< 0x00000004 */
#define RCC_LPTIM2CFGR_LPTIM2LPEN                  RCC_LPTIM2CFGR_LPTIM2LPEN_Msk                     /*!< LPTIM2 clock enable during CSleep */

/* Bit fields for RCC_LPTIM3CFGR register */
#define RCC_LPTIM3CFGR_LPTIM3RST_Pos               (0U)
#define RCC_LPTIM3CFGR_LPTIM3RST_Msk               (0x1UL << RCC_LPTIM3CFGR_LPTIM3RST_Pos)              /*!< 0x00000001 */
#define RCC_LPTIM3CFGR_LPTIM3RST                   RCC_LPTIM3CFGR_LPTIM3RST_Msk                      /*!< LPTIM3 reset */
#define RCC_LPTIM3CFGR_LPTIM3EN_Pos                (1U)
#define RCC_LPTIM3CFGR_LPTIM3EN_Msk                (0x1UL << RCC_LPTIM3CFGR_LPTIM3EN_Pos)               /*!< 0x00000002 */
#define RCC_LPTIM3CFGR_LPTIM3EN                    RCC_LPTIM3CFGR_LPTIM3EN_Msk                       /*!< LPTIM3 clock enable */
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Pos              (2U)
#define RCC_LPTIM3CFGR_LPTIM3LPEN_Msk              (0x1UL << RCC_LPTIM3CFGR_LPTIM3LPEN_Pos)             /*!< 0x00000004 */
#define RCC_LPTIM3CFGR_LPTIM3LPEN                  RCC_LPTIM3CFGR_LPTIM3LPEN_Msk                     /*!< LPTIM3 clock enable during CSleep */

/* Bit fields for RCC_LPTIM4CFGR register */
#define RCC_LPTIM4CFGR_LPTIM4RST_Pos               (0U)
#define RCC_LPTIM4CFGR_LPTIM4RST_Msk               (0x1UL << RCC_LPTIM4CFGR_LPTIM4RST_Pos)              /*!< 0x00000001 */
#define RCC_LPTIM4CFGR_LPTIM4RST                   RCC_LPTIM4CFGR_LPTIM4RST_Msk                      /*!< LPTIM4 reset */
#define RCC_LPTIM4CFGR_LPTIM4EN_Pos                (1U)
#define RCC_LPTIM4CFGR_LPTIM4EN_Msk                (0x1UL << RCC_LPTIM4CFGR_LPTIM4EN_Pos)               /*!< 0x00000002 */
#define RCC_LPTIM4CFGR_LPTIM4EN                    RCC_LPTIM4CFGR_LPTIM4EN_Msk                       /*!< LPTIM4 clock enable */
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Pos              (2U)
#define RCC_LPTIM4CFGR_LPTIM4LPEN_Msk              (0x1UL << RCC_LPTIM4CFGR_LPTIM4LPEN_Pos)             /*!< 0x00000004 */
#define RCC_LPTIM4CFGR_LPTIM4LPEN                  RCC_LPTIM4CFGR_LPTIM4LPEN_Msk                     /*!< LPTIM4 clock enable during CSleep */

/* Bit fields for RCC_LPTIM5CFGR register */
#define RCC_LPTIM5CFGR_LPTIM5RST_Pos               (0U)
#define RCC_LPTIM5CFGR_LPTIM5RST_Msk               (0x1UL << RCC_LPTIM5CFGR_LPTIM5RST_Pos)              /*!< 0x00000001 */
#define RCC_LPTIM5CFGR_LPTIM5RST                   RCC_LPTIM5CFGR_LPTIM5RST_Msk                      /*!< LPTIM5 reset */
#define RCC_LPTIM5CFGR_LPTIM5EN_Pos                (1U)
#define RCC_LPTIM5CFGR_LPTIM5EN_Msk                (0x1UL << RCC_LPTIM5CFGR_LPTIM5EN_Pos)               /*!< 0x00000002 */
#define RCC_LPTIM5CFGR_LPTIM5EN                    RCC_LPTIM5CFGR_LPTIM5EN_Msk                       /*!< LPTIM5 clock enable */
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Pos              (2U)
#define RCC_LPTIM5CFGR_LPTIM5LPEN_Msk              (0x1UL << RCC_LPTIM5CFGR_LPTIM5LPEN_Pos)             /*!< 0x00000004 */
#define RCC_LPTIM5CFGR_LPTIM5LPEN                  RCC_LPTIM5CFGR_LPTIM5LPEN_Msk                     /*!< LPTIM5 clock enable during CSleep */

/* Bit fields for RCC_SPI1CFGR register */
#define RCC_SPI1CFGR_SPI1RST_Pos                   (0U)
#define RCC_SPI1CFGR_SPI1RST_Msk                   (0x1UL << RCC_SPI1CFGR_SPI1RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI1CFGR_SPI1RST                       RCC_SPI1CFGR_SPI1RST_Msk                          /*!< SPI1 reset */
#define RCC_SPI1CFGR_SPI1EN_Pos                    (1U)
#define RCC_SPI1CFGR_SPI1EN_Msk                    (0x1UL << RCC_SPI1CFGR_SPI1EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI1CFGR_SPI1EN                        RCC_SPI1CFGR_SPI1EN_Msk                           /*!< SPI1 clock enable */
#define RCC_SPI1CFGR_SPI1LPEN_Pos                  (2U)
#define RCC_SPI1CFGR_SPI1LPEN_Msk                  (0x1UL << RCC_SPI1CFGR_SPI1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI1CFGR_SPI1LPEN                      RCC_SPI1CFGR_SPI1LPEN_Msk                         /*!< SPI1 clock enable during CSleep */

/* Bit fields for RCC_SPI2CFGR register */
#define RCC_SPI2CFGR_SPI2RST_Pos                   (0U)
#define RCC_SPI2CFGR_SPI2RST_Msk                   (0x1UL << RCC_SPI2CFGR_SPI2RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI2CFGR_SPI2RST                       RCC_SPI2CFGR_SPI2RST_Msk                          /*!< SPI2 reset */
#define RCC_SPI2CFGR_SPI2EN_Pos                    (1U)
#define RCC_SPI2CFGR_SPI2EN_Msk                    (0x1UL << RCC_SPI2CFGR_SPI2EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI2CFGR_SPI2EN                        RCC_SPI2CFGR_SPI2EN_Msk                           /*!< SPI2 clock enable */
#define RCC_SPI2CFGR_SPI2LPEN_Pos                  (2U)
#define RCC_SPI2CFGR_SPI2LPEN_Msk                  (0x1UL << RCC_SPI2CFGR_SPI2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI2CFGR_SPI2LPEN                      RCC_SPI2CFGR_SPI2LPEN_Msk                         /*!< SPI2 clock enable during CSleep */

/* Bit fields for RCC_SPI3CFGR register */
#define RCC_SPI3CFGR_SPI3RST_Pos                   (0U)
#define RCC_SPI3CFGR_SPI3RST_Msk                   (0x1UL << RCC_SPI3CFGR_SPI3RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI3CFGR_SPI3RST                       RCC_SPI3CFGR_SPI3RST_Msk                          /*!< SPI3 reset */
#define RCC_SPI3CFGR_SPI3EN_Pos                    (1U)
#define RCC_SPI3CFGR_SPI3EN_Msk                    (0x1UL << RCC_SPI3CFGR_SPI3EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI3CFGR_SPI3EN                        RCC_SPI3CFGR_SPI3EN_Msk                           /*!< SPI3 clock enable */
#define RCC_SPI3CFGR_SPI3LPEN_Pos                  (2U)
#define RCC_SPI3CFGR_SPI3LPEN_Msk                  (0x1UL << RCC_SPI3CFGR_SPI3LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI3CFGR_SPI3LPEN                      RCC_SPI3CFGR_SPI3LPEN_Msk                         /*!< SPI3 clock enable during CSleep */

/* Bit fields for RCC_SPI4CFGR register */
#define RCC_SPI4CFGR_SPI4RST_Pos                   (0U)
#define RCC_SPI4CFGR_SPI4RST_Msk                   (0x1UL << RCC_SPI4CFGR_SPI4RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI4CFGR_SPI4RST                       RCC_SPI4CFGR_SPI4RST_Msk                          /*!< SPI4 reset */
#define RCC_SPI4CFGR_SPI4EN_Pos                    (1U)
#define RCC_SPI4CFGR_SPI4EN_Msk                    (0x1UL << RCC_SPI4CFGR_SPI4EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI4CFGR_SPI4EN                        RCC_SPI4CFGR_SPI4EN_Msk                           /*!< SPI4 clock enable */
#define RCC_SPI4CFGR_SPI4LPEN_Pos                  (2U)
#define RCC_SPI4CFGR_SPI4LPEN_Msk                  (0x1UL << RCC_SPI4CFGR_SPI4LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI4CFGR_SPI4LPEN                      RCC_SPI4CFGR_SPI4LPEN_Msk                         /*!< SPI4 clock enable during CSleep */

/* Bit fields for RCC_SPI5CFGR register */
#define RCC_SPI5CFGR_SPI5RST_Pos                   (0U)
#define RCC_SPI5CFGR_SPI5RST_Msk                   (0x1UL << RCC_SPI5CFGR_SPI5RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI5CFGR_SPI5RST                       RCC_SPI5CFGR_SPI5RST_Msk                          /*!< SPI5 reset */
#define RCC_SPI5CFGR_SPI5EN_Pos                    (1U)
#define RCC_SPI5CFGR_SPI5EN_Msk                    (0x1UL << RCC_SPI5CFGR_SPI5EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI5CFGR_SPI5EN                        RCC_SPI5CFGR_SPI5EN_Msk                           /*!< SPI5 clock enable */
#define RCC_SPI5CFGR_SPI5LPEN_Pos                  (2U)
#define RCC_SPI5CFGR_SPI5LPEN_Msk                  (0x1UL << RCC_SPI5CFGR_SPI5LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI5CFGR_SPI5LPEN                      RCC_SPI5CFGR_SPI5LPEN_Msk                         /*!< SPI5 clock enable during CSleep */

/* Bit fields for RCC_SPI6CFGR register */
#define RCC_SPI6CFGR_SPI6RST_Pos                   (0U)
#define RCC_SPI6CFGR_SPI6RST_Msk                   (0x1UL << RCC_SPI6CFGR_SPI6RST_Pos)                  /*!< 0x00000001 */
#define RCC_SPI6CFGR_SPI6RST                       RCC_SPI6CFGR_SPI6RST_Msk                          /*!< SPI6 reset */
#define RCC_SPI6CFGR_SPI6EN_Pos                    (1U)
#define RCC_SPI6CFGR_SPI6EN_Msk                    (0x1UL << RCC_SPI6CFGR_SPI6EN_Pos)                   /*!< 0x00000002 */
#define RCC_SPI6CFGR_SPI6EN                        RCC_SPI6CFGR_SPI6EN_Msk                           /*!< SPI6 clock enable */
#define RCC_SPI6CFGR_SPI6LPEN_Pos                  (2U)
#define RCC_SPI6CFGR_SPI6LPEN_Msk                  (0x1UL << RCC_SPI6CFGR_SPI6LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SPI6CFGR_SPI6LPEN                      RCC_SPI6CFGR_SPI6LPEN_Msk                         /*!< SPI6 clock enable during CSleep */

/***************  Bit fields for RCC_SPDIFRXCFGR register */
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Pos             (0U)
#define RCC_SPDIFRXCFGR_SPDIFRXRST_Msk             (0x1UL << RCC_SPDIFRXCFGR_SPDIFRXRST_Pos)            /*!< 0x00000001 */
#define RCC_SPDIFRXCFGR_SPDIFRXRST                 RCC_SPDIFRXCFGR_SPDIFRXRST_Msk                    /*!< SPDIFRX reset */
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Pos              (1U)
#define RCC_SPDIFRXCFGR_SPDIFRXEN_Msk              (0x1UL << RCC_SPDIFRXCFGR_SPDIFRXEN_Pos)             /*!< 0x00000002 */
#define RCC_SPDIFRXCFGR_SPDIFRXEN                  RCC_SPDIFRXCFGR_SPDIFRXEN_Msk                     /*!< SPDIFRX clock enable */
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Pos            (2U)
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN_Msk            (0x1UL << RCC_SPDIFRXCFGR_SPDIFRXLPEN_Pos)           /*!< 0x00000004 */
#define RCC_SPDIFRXCFGR_SPDIFRXLPEN                RCC_SPDIFRXCFGR_SPDIFRXLPEN_Msk                   /*!< SPDIFRX clock enable during CSleep */

/* Bit fields for RCC_USART1CFGR register */
#define RCC_USART1CFGR_USART1RST_Pos               (0U)
#define RCC_USART1CFGR_USART1RST_Msk               (0x1UL << RCC_USART1CFGR_USART1RST_Pos)              /*!< 0x00000001 */
#define RCC_USART1CFGR_USART1RST                   RCC_USART1CFGR_USART1RST_Msk                      /*!< USART1 reset */
#define RCC_USART1CFGR_USART1EN_Pos                (1U)
#define RCC_USART1CFGR_USART1EN_Msk                (0x1UL << RCC_USART1CFGR_USART1EN_Pos)               /*!< 0x00000002 */
#define RCC_USART1CFGR_USART1EN                    RCC_USART1CFGR_USART1EN_Msk                       /*!< USART1 clock enable */
#define RCC_USART1CFGR_USART1LPEN_Pos              (2U)
#define RCC_USART1CFGR_USART1LPEN_Msk              (0x1UL << RCC_USART1CFGR_USART1LPEN_Pos)             /*!< 0x00000004 */
#define RCC_USART1CFGR_USART1LPEN                  RCC_USART1CFGR_USART1LPEN_Msk                     /*!< USART1 clock enable during CSleep */

/* Bit fields for RCC_USART2CFGR register */
#define RCC_USART2CFGR_USART2RST_Pos               (0U)
#define RCC_USART2CFGR_USART2RST_Msk               (0x1UL << RCC_USART2CFGR_USART2RST_Pos)              /*!< 0x00000001 */
#define RCC_USART2CFGR_USART2RST                   RCC_USART2CFGR_USART2RST_Msk                      /*!< USART2 reset */
#define RCC_USART2CFGR_USART2EN_Pos                (1U)
#define RCC_USART2CFGR_USART2EN_Msk                (0x1UL << RCC_USART2CFGR_USART2EN_Pos)               /*!< 0x00000002 */
#define RCC_USART2CFGR_USART2EN                    RCC_USART2CFGR_USART2EN_Msk                       /*!< USART2 clock enable */
#define RCC_USART2CFGR_USART2LPEN_Pos              (2U)
#define RCC_USART2CFGR_USART2LPEN_Msk              (0x1UL << RCC_USART2CFGR_USART2LPEN_Pos)             /*!< 0x00000004 */
#define RCC_USART2CFGR_USART2LPEN                  RCC_USART2CFGR_USART2LPEN_Msk                     /*!< USART2 clock enable during CSleep */

/* Bit fields for RCC_USART3CFGR register */
#define RCC_USART3CFGR_USART3RST_Pos               (0U)
#define RCC_USART3CFGR_USART3RST_Msk               (0x1UL << RCC_USART3CFGR_USART3RST_Pos)              /*!< 0x00000001 */
#define RCC_USART3CFGR_USART3RST                   RCC_USART3CFGR_USART3RST_Msk                      /*!< USART3 reset */
#define RCC_USART3CFGR_USART3EN_Pos                (1U)
#define RCC_USART3CFGR_USART3EN_Msk                (0x1UL << RCC_USART3CFGR_USART3EN_Pos)               /*!< 0x00000002 */
#define RCC_USART3CFGR_USART3EN                    RCC_USART3CFGR_USART3EN_Msk                       /*!< USART3 clock enable */
#define RCC_USART3CFGR_USART3LPEN_Pos              (2U)
#define RCC_USART3CFGR_USART3LPEN_Msk              (0x1UL << RCC_USART3CFGR_USART3LPEN_Pos)             /*!< 0x00000004 */
#define RCC_USART3CFGR_USART3LPEN                  RCC_USART3CFGR_USART3LPEN_Msk                     /*!< USART3 clock enable during CSleep */

/* Bit fields for RCC_UART4CFGR register */
#define RCC_UART4CFGR_UART4RST_Pos                 (0U)
#define RCC_UART4CFGR_UART4RST_Msk                 (0x1UL << RCC_UART4CFGR_UART4RST_Pos)                /*!< 0x00000001 */
#define RCC_UART4CFGR_UART4RST                     RCC_UART4CFGR_UART4RST_Msk                        /*!< UART4 reset */
#define RCC_UART4CFGR_UART4EN_Pos                  (1U)
#define RCC_UART4CFGR_UART4EN_Msk                  (0x1UL << RCC_UART4CFGR_UART4EN_Pos)                 /*!< 0x00000002 */
#define RCC_UART4CFGR_UART4EN                      RCC_UART4CFGR_UART4EN_Msk                         /*!< UART4 clock enable */
#define RCC_UART4CFGR_UART4LPEN_Pos                (2U)
#define RCC_UART4CFGR_UART4LPEN_Msk                (0x1UL << RCC_UART4CFGR_UART4LPEN_Pos)               /*!< 0x00000004 */
#define RCC_UART4CFGR_UART4LPEN                    RCC_UART4CFGR_UART4LPEN_Msk                       /*!< UART4 clock enable during CSleep */

/* Bit fields for RCC_UART5CFGR register */
#define RCC_UART5CFGR_UART5RST_Pos                 (0U)
#define RCC_UART5CFGR_UART5RST_Msk                 (0x1UL << RCC_UART5CFGR_UART5RST_Pos)                /*!< 0x00000001 */
#define RCC_UART5CFGR_UART5RST                     RCC_UART5CFGR_UART5RST_Msk                        /*!< UART5 reset */
#define RCC_UART5CFGR_UART5EN_Pos                  (1U)
#define RCC_UART5CFGR_UART5EN_Msk                  (0x1UL << RCC_UART5CFGR_UART5EN_Pos)                 /*!< 0x00000002 */
#define RCC_UART5CFGR_UART5EN                      RCC_UART5CFGR_UART5EN_Msk                         /*!< UART5 clock enable */
#define RCC_UART5CFGR_UART5LPEN_Pos                (2U)
#define RCC_UART5CFGR_UART5LPEN_Msk                (0x1UL << RCC_UART5CFGR_UART5LPEN_Pos)               /*!< 0x00000004 */
#define RCC_UART5CFGR_UART5LPEN                    RCC_UART5CFGR_UART5LPEN_Msk                       /*!< UART5 clock enable during CSleep */

/* Bit fields for RCC_USART6CFGR register */
#define RCC_USART6CFGR_USART6RST_Pos               (0U)
#define RCC_USART6CFGR_USART6RST_Msk               (0x1UL << RCC_USART6CFGR_USART6RST_Pos)              /*!< 0x00000001 */
#define RCC_USART6CFGR_USART6RST                   RCC_USART6CFGR_USART6RST_Msk                      /*!< USART6 reset */
#define RCC_USART6CFGR_USART6EN_Pos                (1U)
#define RCC_USART6CFGR_USART6EN_Msk                (0x1UL << RCC_USART6CFGR_USART6EN_Pos)               /*!< 0x00000002 */
#define RCC_USART6CFGR_USART6EN                    RCC_USART6CFGR_USART6EN_Msk                       /*!< USART6 clock enable */
#define RCC_USART6CFGR_USART6LPEN_Pos              (2U)
#define RCC_USART6CFGR_USART6LPEN_Msk              (0x1UL << RCC_USART6CFGR_USART6LPEN_Pos)             /*!< 0x00000004 */
#define RCC_USART6CFGR_USART6LPEN                  RCC_USART6CFGR_USART6LPEN_Msk                     /*!< USART6 clock enable during CSleep */

/* Bit fields for RCC_UART7CFGR register */
#define RCC_UART7CFGR_UART7RST_Pos                 (0U)
#define RCC_UART7CFGR_UART7RST_Msk                 (0x1UL << RCC_UART7CFGR_UART7RST_Pos)                /*!< 0x00000001 */
#define RCC_UART7CFGR_UART7RST                     RCC_UART7CFGR_UART7RST_Msk                        /*!< UART7 reset */
#define RCC_UART7CFGR_UART7EN_Pos                  (1U)
#define RCC_UART7CFGR_UART7EN_Msk                  (0x1UL << RCC_UART7CFGR_UART7EN_Pos)                 /*!< 0x00000002 */
#define RCC_UART7CFGR_UART7EN                      RCC_UART7CFGR_UART7EN_Msk                         /*!< UART7 clock enable */
#define RCC_UART7CFGR_UART7LPEN_Pos                (2U)
#define RCC_UART7CFGR_UART7LPEN_Msk                (0x1UL << RCC_UART7CFGR_UART7LPEN_Pos)               /*!< 0x00000004 */
#define RCC_UART7CFGR_UART7LPEN                    RCC_UART7CFGR_UART7LPEN_Msk                       /*!< UART7 clock enable during CSleep */

/***************  Bit fields for RCC_LPUART1CFGR register */
#define RCC_LPUART1CFGR_LPUART1RST_Pos             (0U)
#define RCC_LPUART1CFGR_LPUART1RST_Msk             (0x1UL << RCC_LPUART1CFGR_LPUART1RST_Pos)            /*!< 0x00000001 */
#define RCC_LPUART1CFGR_LPUART1RST                 RCC_LPUART1CFGR_LPUART1RST_Msk                    /*!< LPUART1 reset */
#define RCC_LPUART1CFGR_LPUART1EN_Pos              (1U)
#define RCC_LPUART1CFGR_LPUART1EN_Msk              (0x1UL << RCC_LPUART1CFGR_LPUART1EN_Pos)             /*!< 0x00000002 */
#define RCC_LPUART1CFGR_LPUART1EN                  RCC_LPUART1CFGR_LPUART1EN_Msk                     /*!< LPUART1 clock enable */
#define RCC_LPUART1CFGR_LPUART1LPEN_Pos            (2U)
#define RCC_LPUART1CFGR_LPUART1LPEN_Msk            (0x1UL << RCC_LPUART1CFGR_LPUART1LPEN_Pos)           /*!< 0x00000004 */
#define RCC_LPUART1CFGR_LPUART1LPEN                RCC_LPUART1CFGR_LPUART1LPEN_Msk                   /*!< LPUART1 clock enable during CSleep */

/* Bit fields for RCC_I2C1CFGR register */
#define RCC_I2C1CFGR_I2C1RST_Pos                   (0U)
#define RCC_I2C1CFGR_I2C1RST_Msk                   (0x1UL << RCC_I2C1CFGR_I2C1RST_Pos)                  /*!< 0x00000001 */
#define RCC_I2C1CFGR_I2C1RST                       RCC_I2C1CFGR_I2C1RST_Msk                          /*!< I2C1 reset */
#define RCC_I2C1CFGR_I2C1EN_Pos                    (1U)
#define RCC_I2C1CFGR_I2C1EN_Msk                    (0x1UL << RCC_I2C1CFGR_I2C1EN_Pos)                   /*!< 0x00000002 */
#define RCC_I2C1CFGR_I2C1EN                        RCC_I2C1CFGR_I2C1EN_Msk                           /*!< I2C1 clock enable */
#define RCC_I2C1CFGR_I2C1LPEN_Pos                  (2U)
#define RCC_I2C1CFGR_I2C1LPEN_Msk                  (0x1UL << RCC_I2C1CFGR_I2C1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I2C1CFGR_I2C1LPEN                      RCC_I2C1CFGR_I2C1LPEN_Msk                         /*!< I2C1 clock enable during CSleep */

/* Bit fields for RCC_I2C2CFGR register */
#define RCC_I2C2CFGR_I2C2RST_Pos                   (0U)
#define RCC_I2C2CFGR_I2C2RST_Msk                   (0x1UL << RCC_I2C2CFGR_I2C2RST_Pos)                  /*!< 0x00000001 */
#define RCC_I2C2CFGR_I2C2RST                       RCC_I2C2CFGR_I2C2RST_Msk                          /*!< I2C2 reset */
#define RCC_I2C2CFGR_I2C2EN_Pos                    (1U)
#define RCC_I2C2CFGR_I2C2EN_Msk                    (0x1UL << RCC_I2C2CFGR_I2C2EN_Pos)                   /*!< 0x00000002 */
#define RCC_I2C2CFGR_I2C2EN                        RCC_I2C2CFGR_I2C2EN_Msk                           /*!< I2C2 clock enable */
#define RCC_I2C2CFGR_I2C2LPEN_Pos                  (2U)
#define RCC_I2C2CFGR_I2C2LPEN_Msk                  (0x1UL << RCC_I2C2CFGR_I2C2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I2C2CFGR_I2C2LPEN                      RCC_I2C2CFGR_I2C2LPEN_Msk                         /*!< I2C2 clock enable during CSleep */

/* Bit fields for RCC_I2C3CFGR register */
#define RCC_I2C3CFGR_I2C3RST_Pos                   (0U)
#define RCC_I2C3CFGR_I2C3RST_Msk                   (0x1UL << RCC_I2C3CFGR_I2C3RST_Pos)                  /*!< 0x00000001 */
#define RCC_I2C3CFGR_I2C3RST                       RCC_I2C3CFGR_I2C3RST_Msk                          /*!< I2C3 reset */
#define RCC_I2C3CFGR_I2C3EN_Pos                    (1U)
#define RCC_I2C3CFGR_I2C3EN_Msk                    (0x1UL << RCC_I2C3CFGR_I2C3EN_Pos)                   /*!< 0x00000002 */
#define RCC_I2C3CFGR_I2C3EN                        RCC_I2C3CFGR_I2C3EN_Msk                           /*!< I2C3 clock enable */
#define RCC_I2C3CFGR_I2C3LPEN_Pos                  (2U)
#define RCC_I2C3CFGR_I2C3LPEN_Msk                  (0x1UL << RCC_I2C3CFGR_I2C3LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I2C3CFGR_I2C3LPEN                      RCC_I2C3CFGR_I2C3LPEN_Msk                         /*!< I2C3 clock enable during CSleep */

/* Bit fields for RCC_SAI1CFGR register */
#define RCC_SAI1CFGR_SAI1RST_Pos                   (0U)
#define RCC_SAI1CFGR_SAI1RST_Msk                   (0x1UL << RCC_SAI1CFGR_SAI1RST_Pos)                  /*!< 0x00000001 */
#define RCC_SAI1CFGR_SAI1RST                       RCC_SAI1CFGR_SAI1RST_Msk                          /*!< SAI1 reset */
#define RCC_SAI1CFGR_SAI1EN_Pos                    (1U)
#define RCC_SAI1CFGR_SAI1EN_Msk                    (0x1UL << RCC_SAI1CFGR_SAI1EN_Pos)                   /*!< 0x00000002 */
#define RCC_SAI1CFGR_SAI1EN                        RCC_SAI1CFGR_SAI1EN_Msk                           /*!< SAI1 clock enable */
#define RCC_SAI1CFGR_SAI1LPEN_Pos                  (2U)
#define RCC_SAI1CFGR_SAI1LPEN_Msk                  (0x1UL << RCC_SAI1CFGR_SAI1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SAI1CFGR_SAI1LPEN                      RCC_SAI1CFGR_SAI1LPEN_Msk                         /*!< SAI1 clock enable during CSleep */

/* Bit fields for RCC_SAI2CFGR register */
#define RCC_SAI2CFGR_SAI2RST_Pos                   (0U)
#define RCC_SAI2CFGR_SAI2RST_Msk                   (0x1UL << RCC_SAI2CFGR_SAI2RST_Pos)                  /*!< 0x00000001 */
#define RCC_SAI2CFGR_SAI2RST                       RCC_SAI2CFGR_SAI2RST_Msk                          /*!< SAI2 reset */
#define RCC_SAI2CFGR_SAI2EN_Pos                    (1U)
#define RCC_SAI2CFGR_SAI2EN_Msk                    (0x1UL << RCC_SAI2CFGR_SAI2EN_Pos)                   /*!< 0x00000002 */
#define RCC_SAI2CFGR_SAI2EN                        RCC_SAI2CFGR_SAI2EN_Msk                           /*!< SAI2 clock enable */
#define RCC_SAI2CFGR_SAI2LPEN_Pos                  (2U)
#define RCC_SAI2CFGR_SAI2LPEN_Msk                  (0x1UL << RCC_SAI2CFGR_SAI2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SAI2CFGR_SAI2LPEN                      RCC_SAI2CFGR_SAI2LPEN_Msk                         /*!< SAI2 clock enable during CSleep */

/* Bit fields for RCC_SAI3CFGR register */
#define RCC_SAI3CFGR_SAI3RST_Pos                   (0U)
#define RCC_SAI3CFGR_SAI3RST_Msk                   (0x1UL << RCC_SAI3CFGR_SAI3RST_Pos)                  /*!< 0x00000001 */
#define RCC_SAI3CFGR_SAI3RST                       RCC_SAI3CFGR_SAI3RST_Msk                          /*!< SAI3 reset */
#define RCC_SAI3CFGR_SAI3EN_Pos                    (1U)
#define RCC_SAI3CFGR_SAI3EN_Msk                    (0x1UL << RCC_SAI3CFGR_SAI3EN_Pos)                   /*!< 0x00000002 */
#define RCC_SAI3CFGR_SAI3EN                        RCC_SAI3CFGR_SAI3EN_Msk                           /*!< SAI3 clock enable */
#define RCC_SAI3CFGR_SAI3LPEN_Pos                  (2U)
#define RCC_SAI3CFGR_SAI3LPEN_Msk                  (0x1UL << RCC_SAI3CFGR_SAI3LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SAI3CFGR_SAI3LPEN                      RCC_SAI3CFGR_SAI3LPEN_Msk                         /*!< SAI3 clock enable during CSleep */

/* Bit fields for RCC_SAI4CFGR register */
#define RCC_SAI4CFGR_SAI4RST_Pos                   (0U)
#define RCC_SAI4CFGR_SAI4RST_Msk                   (0x1UL << RCC_SAI4CFGR_SAI4RST_Pos)                  /*!< 0x00000001 */
#define RCC_SAI4CFGR_SAI4RST                       RCC_SAI4CFGR_SAI4RST_Msk                          /*!< SAI4 reset */
#define RCC_SAI4CFGR_SAI4EN_Pos                    (1U)
#define RCC_SAI4CFGR_SAI4EN_Msk                    (0x1UL << RCC_SAI4CFGR_SAI4EN_Pos)                   /*!< 0x00000002 */
#define RCC_SAI4CFGR_SAI4EN                        RCC_SAI4CFGR_SAI4EN_Msk                           /*!< SAI4 clock enable */
#define RCC_SAI4CFGR_SAI4LPEN_Pos                  (2U)
#define RCC_SAI4CFGR_SAI4LPEN_Msk                  (0x1UL << RCC_SAI4CFGR_SAI4LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SAI4CFGR_SAI4LPEN                      RCC_SAI4CFGR_SAI4LPEN_Msk                         /*!< SAI4 clock enable during CSleep */

/* Bit fields for RCC_MDF1CFGR register */
#define RCC_MDF1CFGR_MDF1RST_Pos                   (0U)
#define RCC_MDF1CFGR_MDF1RST_Msk                   (0x1UL << RCC_MDF1CFGR_MDF1RST_Pos)                  /*!< 0x00000001 */
#define RCC_MDF1CFGR_MDF1RST                       RCC_MDF1CFGR_MDF1RST_Msk                          /*!< MDF1 reset */
#define RCC_MDF1CFGR_MDF1EN_Pos                    (1U)
#define RCC_MDF1CFGR_MDF1EN_Msk                    (0x1UL << RCC_MDF1CFGR_MDF1EN_Pos)                   /*!< 0x00000002 */
#define RCC_MDF1CFGR_MDF1EN                        RCC_MDF1CFGR_MDF1EN_Msk                           /*!< MDF1 clock enable */
#define RCC_MDF1CFGR_MDF1LPEN_Pos                  (2U)
#define RCC_MDF1CFGR_MDF1LPEN_Msk                  (0x1UL << RCC_MDF1CFGR_MDF1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_MDF1CFGR_MDF1LPEN                      RCC_MDF1CFGR_MDF1LPEN_Msk                         /*!< MDF1 clock enable during CSleep */

/* Bit fields for RCC_FDCANCFGR register */
#define RCC_FDCANCFGR_FDCANRST_Pos                 (0U)
#define RCC_FDCANCFGR_FDCANRST_Msk                 (0x1UL << RCC_FDCANCFGR_FDCANRST_Pos)                /*!< 0x00000001 */
#define RCC_FDCANCFGR_FDCANRST                     RCC_FDCANCFGR_FDCANRST_Msk                        /*!< FDCAN reset */
#define RCC_FDCANCFGR_FDCANEN_Pos                  (1U)
#define RCC_FDCANCFGR_FDCANEN_Msk                  (0x1UL << RCC_FDCANCFGR_FDCANEN_Pos)                 /*!< 0x00000002 */
#define RCC_FDCANCFGR_FDCANEN                      RCC_FDCANCFGR_FDCANEN_Msk                         /*!< FDCAN clock enable */
#define RCC_FDCANCFGR_FDCANLPEN_Pos                (2U)
#define RCC_FDCANCFGR_FDCANLPEN_Msk                (0x1UL << RCC_FDCANCFGR_FDCANLPEN_Pos)               /*!< 0x00000004 */
#define RCC_FDCANCFGR_FDCANLPEN                    RCC_FDCANCFGR_FDCANLPEN_Msk                       /*!< FDCAN clock enable during CSleep */

/* Bit fields for RCC_HDPCFGR register  ******************/
#define RCC_HDPCFGR_HDPRST_Pos                   (0U)
#define RCC_HDPCFGR_HDPRST_Msk                   (0x1UL << RCC_HDPCFGR_HDPRST_Pos)                    /*!< 0x00000001 */
#define RCC_HDPCFGR_HDPRST                       RCC_HDPCFGR_HDPRST_Msk                            /*!< HDP reset */
#define RCC_HDPCFGR_HDPEN_Pos                    (1U)
#define RCC_HDPCFGR_HDPEN_Msk                    (0x1UL << RCC_HDPCFGR_HDPEN_Pos)                   /*!< 0x00000002 */
#define RCC_HDPCFGR_HDPEN                        RCC_HDPCFGR_HDPEN_Msk                             /*!< HDP clock enable */

/* Bit fields for RCC_ADC1CFGR register */
#define RCC_ADC1CFGR_ADC1RST_Pos                   (0U)
#define RCC_ADC1CFGR_ADC1RST_Msk                   (0x1UL << RCC_ADC1CFGR_ADC1RST_Pos)                  /*!< 0x00000001 */
#define RCC_ADC1CFGR_ADC1RST                       RCC_ADC1CFGR_ADC1RST_Msk                          /*!< ADC1 reset */
#define RCC_ADC1CFGR_ADC1EN_Pos                    (1U)
#define RCC_ADC1CFGR_ADC1EN_Msk                    (0x1UL << RCC_ADC1CFGR_ADC1EN_Pos)                   /*!< 0x00000002 */
#define RCC_ADC1CFGR_ADC1EN                        RCC_ADC1CFGR_ADC1EN_Msk                           /*!< ADC1 clock enable */
#define RCC_ADC1CFGR_ADC1LPEN_Pos                  (2U)
#define RCC_ADC1CFGR_ADC1LPEN_Msk                  (0x1UL << RCC_ADC1CFGR_ADC1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_ADC1CFGR_ADC1LPEN                      RCC_ADC1CFGR_ADC1LPEN_Msk                         /*!< ADC1 clock enable during CSleep */
#define RCC_ADC1CFGR_ADC1KERSEL_Pos                (12U)
#define RCC_ADC1CFGR_ADC1KERSEL_Msk                (0x1UL << RCC_ADC1CFGR_ADC1KERSEL_Pos)               /*!< 0x00001000 */
#define RCC_ADC1CFGR_ADC1KERSEL                    RCC_ADC1CFGR_ADC1KERSEL_Msk                       /*!< ADC1 kernel clock source select */

/* Bit fields for RCC_ADC2CFGR register */
#define RCC_ADC2CFGR_ADC2RST_Pos                   (0U)
#define RCC_ADC2CFGR_ADC2RST_Msk                   (0x1UL << RCC_ADC2CFGR_ADC2RST_Pos)                  /*!< 0x00000001 */
#define RCC_ADC2CFGR_ADC2RST                       RCC_ADC2CFGR_ADC2RST_Msk                          /*!< ADC2 reset */
#define RCC_ADC2CFGR_ADC2EN_Pos                    (1U)
#define RCC_ADC2CFGR_ADC2EN_Msk                    (0x1UL << RCC_ADC2CFGR_ADC2EN_Pos)                   /*!< 0x00000002 */
#define RCC_ADC2CFGR_ADC2EN                        RCC_ADC2CFGR_ADC2EN_Msk                           /*!< ADC2 clock enable */
#define RCC_ADC2CFGR_ADC2LPEN_Pos                  (2U)
#define RCC_ADC2CFGR_ADC2LPEN_Msk                  (0x1UL << RCC_ADC2CFGR_ADC2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_ADC2CFGR_ADC2LPEN                      RCC_ADC2CFGR_ADC2LPEN_Msk                         /*!< ADC2 clock enable during CSleep */
#define RCC_ADC2CFGR_ADC2KERSEL_Pos                (12U)
#define RCC_ADC2CFGR_ADC2KERSEL_Msk                (0x3UL << RCC_ADC2CFGR_ADC2KERSEL_Pos)               /*!< 0x00003000 */
#define RCC_ADC2CFGR_ADC2KERSEL                    RCC_ADC2CFGR_ADC2KERSEL_Msk                       /*!< ADC2 kernel clock source select */

/* Bit fields for RCC_ETH1CFGR register */
#define RCC_ETH1CFGR_ETH1RST_Pos                   (0U)
#define RCC_ETH1CFGR_ETH1RST_Msk                   (0x1UL << RCC_ETH1CFGR_ETH1RST_Pos)                  /*!< 0x00000001 */
#define RCC_ETH1CFGR_ETH1RST                       RCC_ETH1CFGR_ETH1RST_Msk                          /*!< Ethernet 1 reset */
#define RCC_ETH1CFGR_ETH1MACEN_Pos                 (1U)
#define RCC_ETH1CFGR_ETH1MACEN_Msk                 (0x1UL << RCC_ETH1CFGR_ETH1MACEN_Pos)                /*!< 0x00000002 */
#define RCC_ETH1CFGR_ETH1MACEN                     RCC_ETH1CFGR_ETH1MACEN_Msk                        /*!< Ethernet 1 bus clock enable */
#define RCC_ETH1CFGR_ETH1MACLPEN_Pos               (2U)
#define RCC_ETH1CFGR_ETH1MACLPEN_Msk               (0x1UL << RCC_ETH1CFGR_ETH1MACLPEN_Pos)              /*!< 0x00000004 */
#define RCC_ETH1CFGR_ETH1MACLPEN                   RCC_ETH1CFGR_ETH1MACLPEN_Msk                      /*!< Ethernet 1 bus clock enable during CSleep */
#define RCC_ETH1CFGR_ETH1STPEN_Pos                 (4U)
#define RCC_ETH1CFGR_ETH1STPEN_Msk                 (0x1UL << RCC_ETH1CFGR_ETH1STPEN_Pos)                /*!< 0x00000010 */
#define RCC_ETH1CFGR_ETH1STPEN                     RCC_ETH1CFGR_ETH1STPEN_Msk                        /*!< Ethernet 1 kernel clocks enable during CStop */
#define RCC_ETH1CFGR_ETH1EN_Pos                    (5U)
#define RCC_ETH1CFGR_ETH1EN_Msk                    (0x1UL << RCC_ETH1CFGR_ETH1EN_Pos)                   /*!< 0x00000020 */
#define RCC_ETH1CFGR_ETH1EN                        RCC_ETH1CFGR_ETH1EN_Msk                           /*!< Ethernet 1 kernel clock enable */
#define RCC_ETH1CFGR_ETH1LPEN_Pos                  (6U)
#define RCC_ETH1CFGR_ETH1LPEN_Msk                  (0x1UL << RCC_ETH1CFGR_ETH1LPEN_Pos)                 /*!< 0x00000040 */
#define RCC_ETH1CFGR_ETH1LPEN                      RCC_ETH1CFGR_ETH1LPEN_Msk                         /*!< Ethernet 1 kernel clock enable during CSleep */
#define RCC_ETH1CFGR_ETH1TXEN_Pos                  (8U)
#define RCC_ETH1CFGR_ETH1TXEN_Msk                  (0x1UL << RCC_ETH1CFGR_ETH1TXEN_Pos)                 /*!< 0x00000100 */
#define RCC_ETH1CFGR_ETH1TXEN                      RCC_ETH1CFGR_ETH1TXEN_Msk                         /*!< Ethernet 1 transmission clock enable */
#define RCC_ETH1CFGR_ETH1TXLPEN_Pos                (9U)
#define RCC_ETH1CFGR_ETH1TXLPEN_Msk                (0x1UL << RCC_ETH1CFGR_ETH1TXLPEN_Pos)               /*!< 0x00000200 */
#define RCC_ETH1CFGR_ETH1TXLPEN                    RCC_ETH1CFGR_ETH1TXLPEN_Msk                       /*!< Ethernet 1 transmission clock enable during CSleep */
#define RCC_ETH1CFGR_ETH1RXEN_Pos                  (10U)
#define RCC_ETH1CFGR_ETH1RXEN_Msk                  (0x1UL << RCC_ETH1CFGR_ETH1RXEN_Pos)                 /*!< 0x00000400 */
#define RCC_ETH1CFGR_ETH1RXEN                      RCC_ETH1CFGR_ETH1RXEN_Msk                         /*!< Ethernet 1 reception clock enable */
#define RCC_ETH1CFGR_ETH1RXLPEN_Pos                (11U)
#define RCC_ETH1CFGR_ETH1RXLPEN_Msk                (0x1UL << RCC_ETH1CFGR_ETH1RXLPEN_Pos)               /*!< 0x00000800 */
#define RCC_ETH1CFGR_ETH1RXLPEN                    RCC_ETH1CFGR_ETH1RXLPEN_Msk                       /*!< Ethernet 1 reception clock enable during CSleep */

/* Bit fields for RCC_ETH2CFGR register */
#define RCC_ETH2CFGR_ETH2RST_Pos                   (0U)
#define RCC_ETH2CFGR_ETH2RST_Msk                   (0x1UL << RCC_ETH2CFGR_ETH2RST_Pos)                  /*!< 0x00000001 */
#define RCC_ETH2CFGR_ETH2RST                       RCC_ETH2CFGR_ETH2RST_Msk                          /*!< Ethernet 2 reset */
#define RCC_ETH2CFGR_ETH2MACEN_Pos                 (1U)
#define RCC_ETH2CFGR_ETH2MACEN_Msk                 (0x1UL << RCC_ETH2CFGR_ETH2MACEN_Pos)                /*!< 0x00000002 */
#define RCC_ETH2CFGR_ETH2MACEN                     RCC_ETH2CFGR_ETH2MACEN_Msk                        /*!< Ethernet 2 bus clock enable */
#define RCC_ETH2CFGR_ETH2MACLPEN_Pos               (2U)
#define RCC_ETH2CFGR_ETH2MACLPEN_Msk               (0x1UL << RCC_ETH2CFGR_ETH2MACLPEN_Pos)              /*!< 0x00000004 */
#define RCC_ETH2CFGR_ETH2MACLPEN                   RCC_ETH2CFGR_ETH2MACLPEN_Msk                      /*!< Ethernet 2 bus clock enable during CSleep */
#define RCC_ETH2CFGR_ETH2STPEN_Pos                 (4U)
#define RCC_ETH2CFGR_ETH2STPEN_Msk                 (0x1UL << RCC_ETH2CFGR_ETH2STPEN_Pos)                /*!< 0x00000010 */
#define RCC_ETH2CFGR_ETH2STPEN                     RCC_ETH2CFGR_ETH2STPEN_Msk                        /*!< Ethernet 2 kernel clocks enable during CStop */
#define RCC_ETH2CFGR_ETH2EN_Pos                    (5U)
#define RCC_ETH2CFGR_ETH2EN_Msk                    (0x1UL << RCC_ETH2CFGR_ETH2EN_Pos)                   /*!< 0x00000020 */
#define RCC_ETH2CFGR_ETH2EN                        RCC_ETH2CFGR_ETH2EN_Msk                           /*!< Ethernet 2 kernel clocks enable */
#define RCC_ETH2CFGR_ETH2LPEN_Pos                  (6U)
#define RCC_ETH2CFGR_ETH2LPEN_Msk                  (0x1UL << RCC_ETH2CFGR_ETH2LPEN_Pos)                 /*!< 0x00000040 */
#define RCC_ETH2CFGR_ETH2LPEN                      RCC_ETH2CFGR_ETH2LPEN_Msk                         /*!< Ethernet 2 kernel clocks enable during CSleep */
#define RCC_ETH2CFGR_ETH2TXEN_Pos                  (8U)
#define RCC_ETH2CFGR_ETH2TXEN_Msk                  (0x1UL << RCC_ETH2CFGR_ETH2TXEN_Pos)                 /*!< 0x00000100 */
#define RCC_ETH2CFGR_ETH2TXEN                      RCC_ETH2CFGR_ETH2TXEN_Msk                         /*!< Ethernet 2 transmission clock enable */
#define RCC_ETH2CFGR_ETH2TXLPEN_Pos                (9U)
#define RCC_ETH2CFGR_ETH2TXLPEN_Msk                (0x1UL << RCC_ETH2CFGR_ETH2TXLPEN_Pos)               /*!< 0x00000200 */
#define RCC_ETH2CFGR_ETH2TXLPEN                    RCC_ETH2CFGR_ETH2TXLPEN_Msk                       /*!< Ethernet 2 transmission clock enable during CSleep mode */
#define RCC_ETH2CFGR_ETH2RXEN_Pos                  (10U)
#define RCC_ETH2CFGR_ETH2RXEN_Msk                  (0x1UL << RCC_ETH2CFGR_ETH2RXEN_Pos)                 /*!< 0x00000400 */
#define RCC_ETH2CFGR_ETH2RXEN                      RCC_ETH2CFGR_ETH2RXEN_Msk                         /*!< Ethernet 2 reception clock enable */
#define RCC_ETH2CFGR_ETH2RXLPEN_Pos                (11U)
#define RCC_ETH2CFGR_ETH2RXLPEN_Msk                (0x1UL << RCC_ETH2CFGR_ETH2RXLPEN_Pos)               /*!< 0x00000800 */
#define RCC_ETH2CFGR_ETH2RXLPEN                    RCC_ETH2CFGR_ETH2RXLPEN_Msk                       /*!< Ethernet 2 reception clock enable during CSleep */

/* Bit fields for RCC_USBHCFGR register */
#define RCC_USBHCFGR_USBHRST_Pos                   (0U)
#define RCC_USBHCFGR_USBHRST_Msk                   (0x1UL << RCC_USBHCFGR_USBHRST_Pos)                  /*!< 0x00000001 */
#define RCC_USBHCFGR_USBHRST                       RCC_USBHCFGR_USBHRST_Msk                          /*!< USBH reset */
#define RCC_USBHCFGR_USBHEN_Pos                    (1U)
#define RCC_USBHCFGR_USBHEN_Msk                    (0x1UL << RCC_USBHCFGR_USBHEN_Pos)                   /*!< 0x00000002 */
#define RCC_USBHCFGR_USBHEN                        RCC_USBHCFGR_USBHEN_Msk                           /*!< USBH peripheral clock enable */
#define RCC_USBHCFGR_USBHLPEN_Pos                  (2U)
#define RCC_USBHCFGR_USBHLPEN_Msk                  (0x1UL << RCC_USBHCFGR_USBHLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_USBHCFGR_USBHLPEN                      RCC_USBHCFGR_USBHLPEN_Msk                         /*!< USBH clock enable during CSleep */
#define RCC_USBHCFGR_USBHSTPEN_Pos                 (4U)
#define RCC_USBHCFGR_USBHSTPEN_Msk                 (0x1UL << RCC_USBHCFGR_USBHSTPEN_Pos)                /*!< 0x00000010 */
#define RCC_USBHCFGR_USBHSTPEN                     RCC_USBHCFGR_USBHSTPEN_Msk                        /*!< USBH clock enable during CStop */

/***************  Bit fields for RCC_USB2PHY1CFGR register  ***************/
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Pos           (0U)
#define RCC_USB2PHY1CFGR_USB2PHY1RST_Msk           (0x1UL << RCC_USB2PHY1CFGR_USB2PHY1RST_Pos)          /*!< 0x00000001 */
#define RCC_USB2PHY1CFGR_USB2PHY1RST               RCC_USB2PHY1CFGR_USB2PHY1RST_Msk                    /*!< USB2PHY1 reset */
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Pos            (1U)
#define RCC_USB2PHY1CFGR_USB2PHY1EN_Msk            (0x1UL << RCC_USB2PHY1CFGR_USB2PHY1EN_Pos)           /*!< 0x00000002 */
#define RCC_USB2PHY1CFGR_USB2PHY1EN                RCC_USB2PHY1CFGR_USB2PHY1EN_Msk                   /*!< USB2PHY1 clock enable */
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Pos          (2U)
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN_Msk          (0x1UL << RCC_USB2PHY1CFGR_USB2PHY1LPEN_Pos)         /*!< 0x00000004 */
#define RCC_USB2PHY1CFGR_USB2PHY1LPEN              RCC_USB2PHY1CFGR_USB2PHY1LPEN_Msk                   /*!< USB2PHY1 clock enable during CSleep */
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN_Pos         (4U)
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN_Msk         (0x1UL << RCC_USB2PHY1CFGR_USB2PHY1STPEN_Pos)        /*!< 0x00000010 */
#define RCC_USB2PHY1CFGR_USB2PHY1STPEN             RCC_USB2PHY1CFGR_USB2PHY1STPEN_Msk                  /*!< USB2PHY1 reference clock enable during CStop */
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Pos      (15U)
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Msk      (0x1UL << RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Pos)     /*!< 0x00008000 */
#define RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL          RCC_USB2PHY1CFGR_USB2PHY1CKREFSEL_Msk               /*!< USB2PHY1 reference clock selection */

/* Bit fields for RCC_OTGCFGR register */
#define RCC_OTGCFGR_OTGRST_Pos                    (0U)
#define RCC_OTGCFGR_OTGRST_Msk                    (0x1UL << RCC_OTGCFGR_OTGRST_Pos)                /*!< 0x00000001 */
#define RCC_OTGCFGR_OTGRST                         RCC_OTGCFGR_OTGRST_Msk                        /*!< OTG reset */
#define RCC_OTGCFGR_OTGEN_Pos                     (1U)
#define RCC_OTGCFGR_OTGEN_Msk                     (0x1UL << RCC_OTGCFGR_OTGEN_Pos)                 /*!< 0x00000002 */
#define RCC_OTGCFGR_OTGEN                         RCC_OTGCFGR_OTGEN_Msk                         /*!< OTG peripheral clock enable */
#define RCC_OTGCFGR_OTGLPEN_Pos                    (2U)
#define RCC_OTGCFGR_OTGLPEN_Msk                   (0x1UL << RCC_OTGCFGR_OTGLPEN_Pos)               /*!< 0x00000004 */
#define RCC_OTGCFGR_OTGLPEN                        RCC_OTGCFGR_OTGLPEN_Msk                       /*!< OTG clock enable during CSleep */
               

/***************  Bit fields for RCC_USB2PHY2CFGR register  ***************/
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Pos           (0U)
#define RCC_USB2PHY2CFGR_USB2PHY2RST_Msk           (0x1UL << RCC_USB2PHY2CFGR_USB2PHY2RST_Pos)          /*!< 0x00000001 */
#define RCC_USB2PHY2CFGR_USB2PHY2RST               RCC_USB2PHY2CFGR_USB2PHY2RST_Msk                    /*!< USB2PHY2 reset */
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Pos            (1U)
#define RCC_USB2PHY2CFGR_USB2PHY2EN_Msk            (0x1UL << RCC_USB2PHY2CFGR_USB2PHY2EN_Pos)           /*!< 0x00000002 */
#define RCC_USB2PHY2CFGR_USB2PHY2EN                RCC_USB2PHY2CFGR_USB2PHY2EN_Msk                   /*!< USB2PHY2 clock enable */
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Pos          (2U)
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN_Msk          (0x1UL << RCC_USB2PHY2CFGR_USB2PHY2LPEN_Pos)         /*!< 0x00000004 */
#define RCC_USB2PHY2CFGR_USB2PHY2LPEN              RCC_USB2PHY2CFGR_USB2PHY2LPEN_Msk                   /*!< USB2PHY2 clock enable during CSleep */
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN_Pos         (4U)
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN_Msk         (0x1UL << RCC_USB2PHY2CFGR_USB2PHY2STPEN_Pos)        /*!< 0x00000010 */
#define RCC_USB2PHY2CFGR_USB2PHY2STPEN             RCC_USB2PHY2CFGR_USB2PHY2STPEN_Msk                  /*!< USB2PHY2 reference clock enable during CStop */
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Pos      (15U)
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Msk      (0x1UL << RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Pos)     /*!< 0x00008000 */
#define RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL          RCC_USB2PHY2CFGR_USB2PHY2CKREFSEL_Msk               /*!< USB2PHY2 reference clock select */

/* Bit fields for RCC_STGENCFGR register */
#define RCC_STGENCFGR_STGENEN_Pos                  (1U)
#define RCC_STGENCFGR_STGENEN_Msk                  (0x1UL << RCC_STGENCFGR_STGENEN_Pos)                 /*!< 0x00000002 */
#define RCC_STGENCFGR_STGENEN                      RCC_STGENCFGR_STGENEN_Msk                         /*!< STGENRW and STGENRO clock enable */
#define RCC_STGENCFGR_STGENLPEN_Pos                (2U)
#define RCC_STGENCFGR_STGENLPEN_Msk                (0x1UL << RCC_STGENCFGR_STGENLPEN_Pos)               /*!< 0x00000004 */
#define RCC_STGENCFGR_STGENLPEN                    RCC_STGENCFGR_STGENLPEN_Msk                       /*!< STGENRW and STGENRO clock enable during CSleep */
#define RCC_STGENCFGR_STGENSTPEN_Pos               (4U)
#define RCC_STGENCFGR_STGENSTPEN_Msk               (0x1UL << RCC_STGENCFGR_STGENSTPEN_Pos)              /*!< 0x00000010 */
#define RCC_STGENCFGR_STGENSTPEN                   RCC_STGENCFGR_STGENSTPEN_Msk                      /*!< STGENRW and STGENRO kernel clock enable during CStop */

/* Bit fields for RCC_SDMMC1CFGR register */
#define RCC_SDMMC1CFGR_SDMMC1RST_Pos               (0U)
#define RCC_SDMMC1CFGR_SDMMC1RST_Msk               (0x1UL << RCC_SDMMC1CFGR_SDMMC1RST_Pos)              /*!< 0x00000001 */
#define RCC_SDMMC1CFGR_SDMMC1RST                   RCC_SDMMC1CFGR_SDMMC1RST_Msk                      /*!< SDMMC1 reset */
#define RCC_SDMMC1CFGR_SDMMC1EN_Pos                (1U)
#define RCC_SDMMC1CFGR_SDMMC1EN_Msk                (0x1UL << RCC_SDMMC1CFGR_SDMMC1EN_Pos)               /*!< 0x00000002 */
#define RCC_SDMMC1CFGR_SDMMC1EN                    RCC_SDMMC1CFGR_SDMMC1EN_Msk                       /*!< SDMMC1 clock enable */
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Pos              (2U)
#define RCC_SDMMC1CFGR_SDMMC1LPEN_Msk              (0x1UL << RCC_SDMMC1CFGR_SDMMC1LPEN_Pos)             /*!< 0x00000004 */
#define RCC_SDMMC1CFGR_SDMMC1LPEN                  RCC_SDMMC1CFGR_SDMMC1LPEN_Msk                     /*!< SDMMC1 clock enable during CSleep */
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Pos            (16U)
#define RCC_SDMMC1CFGR_SDMMC1DLLRST_Msk            (0x1UL << RCC_SDMMC1CFGR_SDMMC1DLLRST_Pos)           /*!< 0x00010000 */
#define RCC_SDMMC1CFGR_SDMMC1DLLRST                RCC_SDMMC1CFGR_SDMMC1DLLRST_Msk                   /*!< SDMMC1 DLL reset */

/* Bit fields for RCC_SDMMC2CFGR register */
#define RCC_SDMMC2CFGR_SDMMC2RST_Pos               (0U)
#define RCC_SDMMC2CFGR_SDMMC2RST_Msk               (0x1UL << RCC_SDMMC2CFGR_SDMMC2RST_Pos)              /*!< 0x00000001 */
#define RCC_SDMMC2CFGR_SDMMC2RST                   RCC_SDMMC2CFGR_SDMMC2RST_Msk                      /*!< SDMMC2 reset */
#define RCC_SDMMC2CFGR_SDMMC2EN_Pos                (1U)
#define RCC_SDMMC2CFGR_SDMMC2EN_Msk                (0x1UL << RCC_SDMMC2CFGR_SDMMC2EN_Pos)               /*!< 0x00000002 */
#define RCC_SDMMC2CFGR_SDMMC2EN                    RCC_SDMMC2CFGR_SDMMC2EN_Msk                       /*!< SDMMC2 clock enable */
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Pos              (2U)
#define RCC_SDMMC2CFGR_SDMMC2LPEN_Msk              (0x1UL << RCC_SDMMC2CFGR_SDMMC2LPEN_Pos)             /*!< 0x00000004 */
#define RCC_SDMMC2CFGR_SDMMC2LPEN                  RCC_SDMMC2CFGR_SDMMC2LPEN_Msk                     /*!< SDMMC2 clock enable during CSleep */
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Pos            (16U)
#define RCC_SDMMC2CFGR_SDMMC2DLLRST_Msk            (0x1UL << RCC_SDMMC2CFGR_SDMMC2DLLRST_Pos)           /*!< 0x00010000 */
#define RCC_SDMMC2CFGR_SDMMC2DLLRST                RCC_SDMMC2CFGR_SDMMC2DLLRST_Msk                   /*!< SDMMC2 DLL reset */

/* Bit fields for RCC_SDMMC3CFGR register */
#define RCC_SDMMC3CFGR_SDMMC3RST_Pos               (0U)
#define RCC_SDMMC3CFGR_SDMMC3RST_Msk               (0x1UL << RCC_SDMMC3CFGR_SDMMC3RST_Pos)              /*!< 0x00000001 */
#define RCC_SDMMC3CFGR_SDMMC3RST                   RCC_SDMMC3CFGR_SDMMC3RST_Msk                      /*!< SDMMC3 block reset */
#define RCC_SDMMC3CFGR_SDMMC3EN_Pos                (1U)
#define RCC_SDMMC3CFGR_SDMMC3EN_Msk                (0x1UL << RCC_SDMMC3CFGR_SDMMC3EN_Pos)               /*!< 0x00000002 */
#define RCC_SDMMC3CFGR_SDMMC3EN                    RCC_SDMMC3CFGR_SDMMC3EN_Msk                       /*!< SDMMC3 clock enable */
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Pos              (2U)
#define RCC_SDMMC3CFGR_SDMMC3LPEN_Msk              (0x1UL << RCC_SDMMC3CFGR_SDMMC3LPEN_Pos)             /*!< 0x00000004 */
#define RCC_SDMMC3CFGR_SDMMC3LPEN                  RCC_SDMMC3CFGR_SDMMC3LPEN_Msk                     /*!< SDMMC3 clock enable during CSleep */
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Pos            (16U)
#define RCC_SDMMC3CFGR_SDMMC3DLLRST_Msk            (0x1UL << RCC_SDMMC3CFGR_SDMMC3DLLRST_Pos)           /*!< 0x00010000 */
#define RCC_SDMMC3CFGR_SDMMC3DLLRST                RCC_SDMMC3CFGR_SDMMC3DLLRST_Msk                   /*!< SDMMC3 DLL reset */

/* Bit fields for RCC_LTDCCFGR register */
#define RCC_LTDCCFGR_LTDCRST_Pos                   (0U)
#define RCC_LTDCCFGR_LTDCRST_Msk                   (0x1UL << RCC_LTDCCFGR_LTDCRST_Pos)                  /*!< 0x00000001 */
#define RCC_LTDCCFGR_LTDCRST                       RCC_LTDCCFGR_LTDCRST_Msk                          /*!< LTDC reset */
#define RCC_LTDCCFGR_LTDCEN_Pos                    (1U)
#define RCC_LTDCCFGR_LTDCEN_Msk                    (0x1UL << RCC_LTDCCFGR_LTDCEN_Pos)                   /*!< 0x00000002 */
#define RCC_LTDCCFGR_LTDCEN                        RCC_LTDCCFGR_LTDCEN_Msk                           /*!< LTDC peripheral clock enable */
#define RCC_LTDCCFGR_LTDCLPEN_Pos                  (2U)
#define RCC_LTDCCFGR_LTDCLPEN_Msk                  (0x1UL << RCC_LTDCCFGR_LTDCLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_LTDCCFGR_LTDCLPEN                      RCC_LTDCCFGR_LTDCLPEN_Msk                         /*!< LTDC clock enable during CSleep */


/* Bit fields for RCC_DCMIPPCFGR register */
#define RCC_DCMIPPCFGR_DCMIPPRST_Pos               (0U)
#define RCC_DCMIPPCFGR_DCMIPPRST_Msk               (0x1UL << RCC_DCMIPPCFGR_DCMIPPRST_Pos)              /*!< 0x00000001 */
#define RCC_DCMIPPCFGR_DCMIPPRST                   RCC_DCMIPPCFGR_DCMIPPRST_Msk                      /*!< DCMIPP reset */
#define RCC_DCMIPPCFGR_DCMIPPEN_Pos                (1U)
#define RCC_DCMIPPCFGR_DCMIPPEN_Msk                (0x1UL << RCC_DCMIPPCFGR_DCMIPPEN_Pos)               /*!< 0x00000002 */
#define RCC_DCMIPPCFGR_DCMIPPEN                    RCC_DCMIPPCFGR_DCMIPPEN_Msk                       /*!< DCMIPP clock enable */
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Pos              (2U)
#define RCC_DCMIPPCFGR_DCMIPPLPEN_Msk              (0x1UL << RCC_DCMIPPCFGR_DCMIPPLPEN_Pos)             /*!< 0x00000004 */
#define RCC_DCMIPPCFGR_DCMIPPLPEN                  RCC_DCMIPPCFGR_DCMIPPLPEN_Msk                     /*!< DCMIPP clock enable during CSleep */

/***************  Bit fields for RCC_DCMIPSSICFGR register  ***************/
#define RCC_DCMIPSSICFGR_DCMIPSSIRST_Pos           (0U)
#define RCC_DCMIPSSICFGR_DCMIPSSIRST_Msk           (0x1UL << RCC_DCMIPSSICFGR_DCMIPSSIRST_Pos)          /*!< 0x00000001 */
#define RCC_DCMIPSSICFGR_DCMIPSSIRST               RCC_DCMIPSSICFGR_DCMIPSSIRST_Msk                    /*!< DCMIPSSI reset */
#define RCC_DCMIPSSICFGR_DCMIPSSIEN_Pos            (1U)
#define RCC_DCMIPSSICFGR_DCMIPSSIEN_Msk            (0x1UL << RCC_DCMIPSSICFGR_DCMIPSSIEN_Pos)           /*!< 0x00000002 */
#define RCC_DCMIPSSICFGR_DCMIPSSIEN                RCC_DCMIPSSICFGR_DCMIPSSIEN_Msk                   /*!< DCMIPSSI clock enable */
#define RCC_DCMIPSSICFGR_DCMIPSSILPEN_Pos          (2U)
#define RCC_DCMIPSSICFGR_DCMIPSSILPEN_Msk          (0x1UL << RCC_DCMIPSSICFGR_DCMIPSSILPEN_Pos)         /*!< 0x00000004 */
#define RCC_DCMIPSSICFGR_DCMIPSSILPEN              RCC_DCMIPSSICFGR_DCMIPSSILPEN_Msk                   /*!< DCMIPSSI clock enable during CSleep */

/* Bit fields for RCC_RNG1CFGR register */
#define RCC_RNG1CFGR_RNG1RST_Pos                   (0U)
#define RCC_RNG1CFGR_RNG1RST_Msk                   (0x1UL << RCC_RNG1CFGR_RNG1RST_Pos)                  /*!< 0x00000001 */
#define RCC_RNG1CFGR_RNG1RST                       RCC_RNG1CFGR_RNG1RST_Msk                          /*!< RNG1 reset */
#define RCC_RNG1CFGR_RNG1EN_Pos                    (1U)
#define RCC_RNG1CFGR_RNG1EN_Msk                    (0x1UL << RCC_RNG1CFGR_RNG1EN_Pos)                   /*!< 0x00000002 */
#define RCC_RNG1CFGR_RNG1EN                        RCC_RNG1CFGR_RNG1EN_Msk                           /*!< RNG1 clock enable */
#define RCC_RNG1CFGR_RNG1LPEN_Pos                  (2U)
#define RCC_RNG1CFGR_RNG1LPEN_Msk                  (0x1UL << RCC_RNG1CFGR_RNG1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_RNG1CFGR_RNG1LPEN                      RCC_RNG1CFGR_RNG1LPEN_Msk                         /*!< RNG1 clock enable during CSleep */

/* Bit fields for RCC_RNG2CFGR register */
#define RCC_RNG2CFGR_RNG2RST_Pos                   (0U)
#define RCC_RNG2CFGR_RNG2RST_Msk                   (0x1UL << RCC_RNG2CFGR_RNG2RST_Pos)                  /*!< 0x00000001 */
#define RCC_RNG2CFGR_RNG2RST                       RCC_RNG2CFGR_RNG2RST_Msk                          /*!< RNG2 reset */
#define RCC_RNG2CFGR_RNG2EN_Pos                    (1U)
#define RCC_RNG2CFGR_RNG2EN_Msk                    (0x1UL << RCC_RNG2CFGR_RNG2EN_Pos)                   /*!< 0x00000002 */
#define RCC_RNG2CFGR_RNG2EN                        RCC_RNG2CFGR_RNG2EN_Msk                           /*!< RNG2 clock enable */
#define RCC_RNG2CFGR_RNG2LPEN_Pos                  (2U)
#define RCC_RNG2CFGR_RNG2LPEN_Msk                  (0x1UL << RCC_RNG2CFGR_RNG2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_RNG2CFGR_RNG2LPEN                      RCC_RNG2CFGR_RNG2LPEN_Msk                         /*!< RNG2 clock enable during CSleep */

/* Bit fields for RCC_PKACFGR register  ******************/
#define RCC_PKACFGR_PKARST_Pos                   (0U)
#define RCC_PKACFGR_PKARST_Msk                   (0x1UL << RCC_PKACFGR_PKARST_Pos)                    /*!< 0x00000001 */
#define RCC_PKACFGR_PKARST                       RCC_PKACFGR_PKARST_Msk                            /*!< PKA reset */
#define RCC_PKACFGR_PKAEN_Pos                    (1U)
#define RCC_PKACFGR_PKAEN_Msk                    (0x1UL << RCC_PKACFGR_PKAEN_Pos)                   /*!< 0x00000002 */
#define RCC_PKACFGR_PKAEN                        RCC_PKACFGR_PKAEN_Msk                             /*!< PKA clock enable */
#define RCC_PKACFGR_PKALPEN_Pos                  (2U)
#define RCC_PKACFGR_PKALPEN_Msk                  (0x1UL << RCC_PKACFGR_PKALPEN_Pos)                   /*!< 0x00000004 */
#define RCC_PKACFGR_PKALPEN                      RCC_PKACFGR_PKALPEN_Msk                           /*!< PKA clock enable during CSleep */

/* Bit fields for RCC_SAESCFGR register */
#define RCC_SAESCFGR_SAESRST_Pos                   (0U)
#define RCC_SAESCFGR_SAESRST_Msk                   (0x1UL << RCC_SAESCFGR_SAESRST_Pos)                  /*!< 0x00000001 */
#define RCC_SAESCFGR_SAESRST                       RCC_SAESCFGR_SAESRST_Msk                          /*!< SAES reset */
#define RCC_SAESCFGR_SAESEN_Pos                    (1U)
#define RCC_SAESCFGR_SAESEN_Msk                    (0x1UL << RCC_SAESCFGR_SAESEN_Pos)                   /*!< 0x00000002 */
#define RCC_SAESCFGR_SAESEN                        RCC_SAESCFGR_SAESEN_Msk                           /*!< SAES clock enable */
#define RCC_SAESCFGR_SAESLPEN_Pos                  (2U)
#define RCC_SAESCFGR_SAESLPEN_Msk                  (0x1UL << RCC_SAESCFGR_SAESLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SAESCFGR_SAESLPEN                      RCC_SAESCFGR_SAESLPEN_Msk                         /*!< SAES clock enable during CSleep */

/* Bit fields for RCC_HASH1CFGR register */
#define RCC_HASH1CFGR_HASH1RST_Pos                 (0U)
#define RCC_HASH1CFGR_HASH1RST_Msk                 (0x1UL << RCC_HASH1CFGR_HASH1RST_Pos)                /*!< 0x00000001 */
#define RCC_HASH1CFGR_HASH1RST                     RCC_HASH1CFGR_HASH1RST_Msk                        /*!< HASH1 reset */
#define RCC_HASH1CFGR_HASH1EN_Pos                  (1U)
#define RCC_HASH1CFGR_HASH1EN_Msk                  (0x1UL << RCC_HASH1CFGR_HASH1EN_Pos)                 /*!< 0x00000002 */
#define RCC_HASH1CFGR_HASH1EN                      RCC_HASH1CFGR_HASH1EN_Msk                         /*!< HASH1 clock enable */
#define RCC_HASH1CFGR_HASH1LPEN_Pos                (2U)
#define RCC_HASH1CFGR_HASH1LPEN_Msk                (0x1UL << RCC_HASH1CFGR_HASH1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_HASH1CFGR_HASH1LPEN                    RCC_HASH1CFGR_HASH1LPEN_Msk                       /*!< HASH1 clock enable during CSleep */

/* Bit fields for RCC_HASH2CFGR register */
#define RCC_HASH2CFGR_HASH2RST_Pos                 (0U)
#define RCC_HASH2CFGR_HASH2RST_Msk                 (0x1UL << RCC_HASH2CFGR_HASH2RST_Pos)                /*!< 0x00000001 */
#define RCC_HASH2CFGR_HASH2RST                     RCC_HASH2CFGR_HASH2RST_Msk                        /*!< HASH2 reset */
#define RCC_HASH2CFGR_HASH2EN_Pos                  (1U)
#define RCC_HASH2CFGR_HASH2EN_Msk                  (0x1UL << RCC_HASH2CFGR_HASH2EN_Pos)                 /*!< 0x00000002 */
#define RCC_HASH2CFGR_HASH2EN                      RCC_HASH2CFGR_HASH2EN_Msk                         /*!< HASH2 clock enable */
#define RCC_HASH2CFGR_HASH2LPEN_Pos                (2U)
#define RCC_HASH2CFGR_HASH2LPEN_Msk                (0x1UL << RCC_HASH2CFGR_HASH2LPEN_Pos)               /*!< 0x00000004 */
#define RCC_HASH2CFGR_HASH2LPEN                    RCC_HASH2CFGR_HASH2LPEN_Msk                       /*!< HASH2 clock enable during CSleep */

/* Bit fields for RCC_CRYP1CFGR register */
#define RCC_CRYP1CFGR_CRYP1RST_Pos                 (0U)
#define RCC_CRYP1CFGR_CRYP1RST_Msk                 (0x1UL << RCC_CRYP1CFGR_CRYP1RST_Pos)                /*!< 0x00000001 */
#define RCC_CRYP1CFGR_CRYP1RST                     RCC_CRYP1CFGR_CRYP1RST_Msk                        /*!< CRYP1 reset */
#define RCC_CRYP1CFGR_CRYP1EN_Pos                  (1U)
#define RCC_CRYP1CFGR_CRYP1EN_Msk                  (0x1UL << RCC_CRYP1CFGR_CRYP1EN_Pos)                 /*!< 0x00000002 */
#define RCC_CRYP1CFGR_CRYP1EN                      RCC_CRYP1CFGR_CRYP1EN_Msk                         /*!< CRYP1 clock enable */
#define RCC_CRYP1CFGR_CRYP1LPEN_Pos                (2U)
#define RCC_CRYP1CFGR_CRYP1LPEN_Msk                (0x1UL << RCC_CRYP1CFGR_CRYP1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_CRYP1CFGR_CRYP1LPEN                    RCC_CRYP1CFGR_CRYP1LPEN_Msk                       /*!< CRYP1 clock enable during CSleep */

/* Bit fields for RCC_CRYP2CFGR register */
#define RCC_CRYP2CFGR_CRYP2RST_Pos                 (0U)
#define RCC_CRYP2CFGR_CRYP2RST_Msk                 (0x1UL << RCC_CRYP2CFGR_CRYP2RST_Pos)                /*!< 0x00000001 */
#define RCC_CRYP2CFGR_CRYP2RST                     RCC_CRYP2CFGR_CRYP2RST_Msk                        /*!< CRYP2 reset */
#define RCC_CRYP2CFGR_CRYP2EN_Pos                  (1U)
#define RCC_CRYP2CFGR_CRYP2EN_Msk                  (0x1UL << RCC_CRYP2CFGR_CRYP2EN_Pos)                 /*!< 0x00000002 */
#define RCC_CRYP2CFGR_CRYP2EN                      RCC_CRYP2CFGR_CRYP2EN_Msk                         /*!< CRYP2 clock enable */
#define RCC_CRYP2CFGR_CRYP2LPEN_Pos                (2U)
#define RCC_CRYP2CFGR_CRYP2LPEN_Msk                (0x1UL << RCC_CRYP2CFGR_CRYP2LPEN_Pos)               /*!< 0x00000004 */
#define RCC_CRYP2CFGR_CRYP2LPEN                    RCC_CRYP2CFGR_CRYP2LPEN_Msk                       /*!< CRYP2 clock enable during CSleep */

/* Bit fields for RCC_IWDG1CFGR register */
#define RCC_IWDG1CFGR_IWDG1EN_Pos                  (1U)
#define RCC_IWDG1CFGR_IWDG1EN_Msk                  (0x1UL << RCC_IWDG1CFGR_IWDG1EN_Pos)                 /*!< 0x00000002 */
#define RCC_IWDG1CFGR_IWDG1EN                      RCC_IWDG1CFGR_IWDG1EN_Msk                         /*!< IWDG1 bus clock enable */
#define RCC_IWDG1CFGR_IWDG1LPEN_Pos                (2U)
#define RCC_IWDG1CFGR_IWDG1LPEN_Msk                (0x1UL << RCC_IWDG1CFGR_IWDG1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_IWDG1CFGR_IWDG1LPEN                    RCC_IWDG1CFGR_IWDG1LPEN_Msk                       /*!< IWDG1 bus clock enable during CSleep */

/* Bit fields for RCC_IWDG2CFGR register */
#define RCC_IWDG2CFGR_IWDG2EN_Pos                  (1U)
#define RCC_IWDG2CFGR_IWDG2EN_Msk                  (0x1UL << RCC_IWDG2CFGR_IWDG2EN_Pos)                 /*!< 0x00000002 */
#define RCC_IWDG2CFGR_IWDG2EN                      RCC_IWDG2CFGR_IWDG2EN_Msk                         /*!< IWDG2 bus clock enable */
#define RCC_IWDG2CFGR_IWDG2LPEN_Pos                (2U)
#define RCC_IWDG2CFGR_IWDG2LPEN_Msk                (0x1UL << RCC_IWDG2CFGR_IWDG2LPEN_Pos)               /*!< 0x00000004 */
#define RCC_IWDG2CFGR_IWDG2LPEN                    RCC_IWDG2CFGR_IWDG2LPEN_Msk                       /*!< IWDG2 bus clock enable during CSleep */

/* Bit fields for RCC_IWDG3CFGR register */
#define RCC_IWDG3CFGR_IWDG3EN_Pos                  (1U)
#define RCC_IWDG3CFGR_IWDG3EN_Msk                  (0x1UL << RCC_IWDG3CFGR_IWDG3EN_Pos)                 /*!< 0x00000002 */
#define RCC_IWDG3CFGR_IWDG3EN                      RCC_IWDG3CFGR_IWDG3EN_Msk                         /*!< IWDG3 bus clock enable */
#define RCC_IWDG3CFGR_IWDG3LPEN_Pos                (2U)
#define RCC_IWDG3CFGR_IWDG3LPEN_Msk                (0x1UL << RCC_IWDG3CFGR_IWDG3LPEN_Pos)               /*!< 0x00000004 */
#define RCC_IWDG3CFGR_IWDG3LPEN                    RCC_IWDG3CFGR_IWDG3LPEN_Msk                       /*!< IWDG3 bus clock enable during CSleep */

/* Bit fields for RCC_IWDG4CFGR register */
#define RCC_IWDG4CFGR_IWDG4EN_Pos                  (1U)
#define RCC_IWDG4CFGR_IWDG4EN_Msk                  (0x1UL << RCC_IWDG4CFGR_IWDG4EN_Pos)                 /*!< 0x00000002 */
#define RCC_IWDG4CFGR_IWDG4EN                      RCC_IWDG4CFGR_IWDG4EN_Msk                         /*!< IWDG4 bus clock enable */
#define RCC_IWDG4CFGR_IWDG4LPEN_Pos                (2U)
#define RCC_IWDG4CFGR_IWDG4LPEN_Msk                (0x1UL << RCC_IWDG4CFGR_IWDG4LPEN_Pos)               /*!< 0x00000004 */
#define RCC_IWDG4CFGR_IWDG4LPEN                    RCC_IWDG4CFGR_IWDG4LPEN_Msk                       /*!< IWDG4 bus clock enable during CSleep */

/* Bit fields for RCC_WWDG1CFGR register */
#define RCC_WWDG1CFGR_WWDG1RST_Pos                 (0U)
#define RCC_WWDG1CFGR_WWDG1RST_Msk                 (0x1UL << RCC_WWDG1CFGR_WWDG1RST_Pos)                /*!< 0x00000001 */
#define RCC_WWDG1CFGR_WWDG1RST                     RCC_WWDG1CFGR_WWDG1RST_Msk                        /*!< WWDG1 reset */
#define RCC_WWDG1CFGR_WWDG1EN_Pos                  (1U)
#define RCC_WWDG1CFGR_WWDG1EN_Msk                  (0x1UL << RCC_WWDG1CFGR_WWDG1EN_Pos)                 /*!< 0x00000002 */
#define RCC_WWDG1CFGR_WWDG1EN                      RCC_WWDG1CFGR_WWDG1EN_Msk                         /*!< WWDG1 bus clock enable */
#define RCC_WWDG1CFGR_WWDG1LPEN_Pos                (2U)
#define RCC_WWDG1CFGR_WWDG1LPEN_Msk                (0x1UL << RCC_WWDG1CFGR_WWDG1LPEN_Pos)               /*!< 0x00000004 */
#define RCC_WWDG1CFGR_WWDG1LPEN                    RCC_WWDG1CFGR_WWDG1LPEN_Msk                       /*!< WWDG1 bus clock enable during CSleep */

/* Bit fields for RCC_VREFCFGR register */
#define RCC_VREFCFGR_VREFRST_Pos                   (0U)
#define RCC_VREFCFGR_VREFRST_Msk                   (0x1UL << RCC_VREFCFGR_VREFRST_Pos)                  /*!< 0x00000001 */
#define RCC_VREFCFGR_VREFRST                       RCC_VREFCFGR_VREFRST_Msk                          /*!< VREF reset */
#define RCC_VREFCFGR_VREFEN_Pos                    (1U)
#define RCC_VREFCFGR_VREFEN_Msk                    (0x1UL << RCC_VREFCFGR_VREFEN_Pos)                   /*!< 0x00000002 */
#define RCC_VREFCFGR_VREFEN                        RCC_VREFCFGR_VREFEN_Msk                           /*!< VREF clock enable */
#define RCC_VREFCFGR_VREFLPEN_Pos                  (2U)
#define RCC_VREFCFGR_VREFLPEN_Msk                  (0x1UL << RCC_VREFCFGR_VREFLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_VREFCFGR_VREFLPEN                      RCC_VREFCFGR_VREFLPEN_Msk                         /*!< VREF clock enable during CSleep */

/* Bit fields for RCC_DTSCFGR register  ******************/
#define RCC_DTSCFGR_DTSRST_Pos                     (0U)
#define RCC_DTSCFGR_DTSRST_Msk                     (0x1UL << RCC_DTSCFGR_DTSRST_Pos)                    /*!< 0x00000001 */
#define RCC_DTSCFGR_DTSRST                         RCC_DTSCFGR_DTSRST_Msk                            /*!< DTS reset */
#define RCC_DTSCFGR_DTSEN_Pos                      (1U)
#define RCC_DTSCFGR_DTSEN_Msk                      (0x1UL << RCC_DTSCFGR_DTSEN_Pos)                   /*!< 0x00000002 */
#define RCC_DTSCFGR_DTSEN                          RCC_DTSCFGR_DTSEN_Msk                             /*!< DTS clock enable */
#define RCC_DTSCFGR_DTSLPEN_Pos                    (2U)
#define RCC_DTSCFGR_DTSLPEN_Msk                    (0x1UL << RCC_DTSCFGR_DTSLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_DTSCFGR_DTSLPEN                        RCC_DTSCFGR_DTSLPEN_Msk                           /*!< DTS clock enable during CSleep */
#define RCC_DTSCFGR_DTSKERSEL_Pos                  (12U)
#define RCC_DTSCFGR_DTSKERSEL_Msk                  (0x3UL << RCC_DTSCFGR_DTSKERSEL_Pos)                 /*!< 0x00003000 */
#define RCC_DTSCFGR_DTSKERSEL                      RCC_DTSCFGR_DTSKERSEL_Msk                         /*!< DTS kernel clock selection */

/* Bit fields for RCC_CRCCFGR register  ******************/
#define RCC_CRCCFGR_CRCRST_Pos                     (0U)
#define RCC_CRCCFGR_CRCRST_Msk                     (0x1UL << RCC_CRCCFGR_CRCRST_Pos)                    /*!< 0x00000001 */
#define RCC_CRCCFGR_CRCRST                         RCC_CRCCFGR_CRCRST_Msk                            /*!< CRC reset */
#define RCC_CRCCFGR_CRCEN_Pos                      (1U)
#define RCC_CRCCFGR_CRCEN_Msk                      (0x1UL << RCC_CRCCFGR_CRCEN_Pos)                   /*!< 0x00000002 */
#define RCC_CRCCFGR_CRCEN                          RCC_CRCCFGR_CRCEN_Msk                             /*!< CRC clock enable */
#define RCC_CRCCFGR_CRCLPEN_Pos                    (2U)
#define RCC_CRCCFGR_CRCLPEN_Msk                    (0x1UL << RCC_CRCCFGR_CRCLPEN_Pos)                   /*!< 0x00000004 */
#define RCC_CRCCFGR_CRCLPEN                        RCC_CRCCFGR_CRCLPEN_Msk                           /*!< CRC clock enable during CSleep */

/* Bit fields for RCC_SERCCFGR register */
#define RCC_SERCCFGR_SERCRST_Pos                   (0U)
#define RCC_SERCCFGR_SERCRST_Msk                   (0x1UL << RCC_SERCCFGR_SERCRST_Pos)                  /*!< 0x00000001 */
#define RCC_SERCCFGR_SERCRST                     RCC_SERCCFGR_SERCRST_Msk                          /*!< SERC reset */
#define RCC_SERCCFGR_SERCEN_Pos                    (1U)
#define RCC_SERCCFGR_SERCEN_Msk                    (0x1UL << RCC_SERCCFGR_SERCEN_Pos)                   /*!< 0x00000002 */
#define RCC_SERCCFGR_SERCEN                      RCC_SERCCFGR_SERCEN_Msk                           /*!< SERC clocks enable */
#define RCC_SERCCFGR_SERCLPEN_Pos                  (2U)
#define RCC_SERCCFGR_SERCLPEN_Msk                  (0x1UL << RCC_SERCCFGR_SERCLPEN_Pos)                 /*!< 0x00000004 */
#define RCC_SERCCFGR_SERCLPEN                    RCC_SERCCFGR_SERCLPEN_Msk                         /*!< SERC clock enable during CSleep */

/***************  Bit fields for RCC_DDRPERFMCFGR register  ***************/
#define RCC_DDRPERFMCFGR_DDRPERFMRST_Pos           (0U)
#define RCC_DDRPERFMCFGR_DDRPERFMRST_Msk           (0x1UL << RCC_DDRPERFMCFGR_DDRPERFMRST_Pos)          /*!< 0x00000001 */
#define RCC_DDRPERFMCFGR_DDRPERFMRST               RCC_DDRPERFMCFGR_DDRPERFMRST_Msk                    /*!< DDRPERFM reset */
#define RCC_DDRPERFMCFGR_DDRPERFMEN_Pos            (1U)
#define RCC_DDRPERFMCFGR_DDRPERFMEN_Msk            (0x1UL << RCC_DDRPERFMCFGR_DDRPERFMEN_Pos)           /*!< 0x00000002 */
#define RCC_DDRPERFMCFGR_DDRPERFMEN                RCC_DDRPERFMCFGR_DDRPERFMEN_Msk                   /*!< DDRPERFM clock enable */
#define RCC_DDRPERFMCFGR_DDRPERFMLPEN_Pos          (2U)
#define RCC_DDRPERFMCFGR_DDRPERFMLPEN_Msk          (0x1UL << RCC_DDRPERFMCFGR_DDRPERFMLPEN_Pos)         /*!< 0x00000004 */
#define RCC_DDRPERFMCFGR_DDRPERFMLPEN              RCC_DDRPERFMCFGR_DDRPERFMLPEN_Msk                   /*!< DDRPERFM clock enable during CSleep */

/* Bit fields for RCC_I3C1CFGR register */
#define RCC_I3C1CFGR_I3C1RST_Pos                   (0U)
#define RCC_I3C1CFGR_I3C1RST_Msk                   (0x1UL << RCC_I3C1CFGR_I3C1RST_Pos)                  /*!< 0x00000001 */
#define RCC_I3C1CFGR_I3C1RST                       RCC_I3C1CFGR_I3C1RST_Msk                          /*!< I3C1 reset */
#define RCC_I3C1CFGR_I3C1EN_Pos                    (1U)
#define RCC_I3C1CFGR_I3C1EN_Msk                    (0x1UL << RCC_I3C1CFGR_I3C1EN_Pos)                   /*!< 0x00000002 */
#define RCC_I3C1CFGR_I3C1EN                        RCC_I3C1CFGR_I3C1EN_Msk                           /*!< I3C1 clock enable */
#define RCC_I3C1CFGR_I3C1LPEN_Pos                  (2U)
#define RCC_I3C1CFGR_I3C1LPEN_Msk                  (0x1UL << RCC_I3C1CFGR_I3C1LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I3C1CFGR_I3C1LPEN                      RCC_I3C1CFGR_I3C1LPEN_Msk                         /*!< I3C1 clock enable during CSleep */

/* Bit fields for RCC_I3C2CFGR register */
#define RCC_I3C2CFGR_I3C2RST_Pos                   (0U)
#define RCC_I3C2CFGR_I3C2RST_Msk                   (0x1UL << RCC_I3C2CFGR_I3C2RST_Pos)                  /*!< 0x00000001 */
#define RCC_I3C2CFGR_I3C2RST                       RCC_I3C2CFGR_I3C2RST_Msk                          /*!< I3C2 reset */
#define RCC_I3C2CFGR_I3C2EN_Pos                    (1U)
#define RCC_I3C2CFGR_I3C2EN_Msk                    (0x1UL << RCC_I3C2CFGR_I3C2EN_Pos)                   /*!< 0x00000002 */
#define RCC_I3C2CFGR_I3C2EN                        RCC_I3C2CFGR_I3C2EN_Msk                           /*!< I3C2 clock enable */
#define RCC_I3C2CFGR_I3C2LPEN_Pos                  (2U)
#define RCC_I3C2CFGR_I3C2LPEN_Msk                  (0x1UL << RCC_I3C2CFGR_I3C2LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I3C2CFGR_I3C2LPEN                      RCC_I3C2CFGR_I3C2LPEN_Msk                         /*!< I3C2 clock enable during CSleep */

/* Bit fields for RCC_I3C3CFGR register */
#define RCC_I3C3CFGR_I3C3RST_Pos                   (0U)
#define RCC_I3C3CFGR_I3C3RST_Msk                   (0x1UL << RCC_I3C3CFGR_I3C3RST_Pos)                  /*!< 0x00000001 */
#define RCC_I3C3CFGR_I3C3RST                       RCC_I3C3CFGR_I3C3RST_Msk                          /*!< I3C3 reset */
#define RCC_I3C3CFGR_I3C3EN_Pos                    (1U)
#define RCC_I3C3CFGR_I3C3EN_Msk                    (0x1UL << RCC_I3C3CFGR_I3C3EN_Pos)                   /*!< 0x00000002 */
#define RCC_I3C3CFGR_I3C3EN                        RCC_I3C3CFGR_I3C3EN_Msk                           /*!< I3C3 clock enable */
#define RCC_I3C3CFGR_I3C3LPEN_Pos                  (2U)
#define RCC_I3C3CFGR_I3C3LPEN_Msk                  (0x1UL << RCC_I3C3CFGR_I3C3LPEN_Pos)                 /*!< 0x00000004 */
#define RCC_I3C3CFGR_I3C3LPEN                      RCC_I3C3CFGR_I3C3LPEN_Msk                         /*!< I3C3 clock enable during CSleep */

/* Bit fields for RCC_MUXSELCFGR register */
#define RCC_MUXSELCFGR_MUXSEL0_Pos                 (0U)
#define RCC_MUXSELCFGR_MUXSEL0_Msk                 (0x7UL << RCC_MUXSELCFGR_MUXSEL0_Pos)                /*!< 0x00000007 */
#define RCC_MUXSELCFGR_MUXSEL0                     RCC_MUXSELCFGR_MUXSEL0_Msk                        /*!< PLL4 reference clock selection */
#define RCC_MUXSELCFGR_MUXSEL1_Pos                 (4U)
#define RCC_MUXSELCFGR_MUXSEL1_Msk                 (0x7UL << RCC_MUXSELCFGR_MUXSEL1_Pos)                /*!< 0x00000070 */
#define RCC_MUXSELCFGR_MUXSEL1                     RCC_MUXSELCFGR_MUXSEL1_Msk                        /*!< PLL5 reference clock selection */
#define RCC_MUXSELCFGR_MUXSEL2_Pos                 (8U)
#define RCC_MUXSELCFGR_MUXSEL2_Msk                 (0x7UL << RCC_MUXSELCFGR_MUXSEL2_Pos)                /*!< 0x00000700 */
#define RCC_MUXSELCFGR_MUXSEL2                     RCC_MUXSELCFGR_MUXSEL2_Msk                        /*!< PLL6 reference clock selection */
#define RCC_MUXSELCFGR_MUXSEL3_Pos                 (12U)
#define RCC_MUXSELCFGR_MUXSEL3_Msk                 (0x7UL << RCC_MUXSELCFGR_MUXSEL3_Pos)                /*!< 0x00007000 */
#define RCC_MUXSELCFGR_MUXSEL3                     RCC_MUXSELCFGR_MUXSEL3_Msk                        /*!< PLL7 reference clock selection */
#define RCC_MUXSELCFGR_MUXSEL4_Pos                 (16U)
#define RCC_MUXSELCFGR_MUXSEL4_Msk                 (0x7UL << RCC_MUXSELCFGR_MUXSEL4_Pos)                /*!< 0x00070000 */
#define RCC_MUXSELCFGR_MUXSEL4                     RCC_MUXSELCFGR_MUXSEL4_Msk                        /*!< PLL8 reference clock selection */
#define RCC_MUXSELCFGR_MUXSEL5_Pos                 (20U)
#define RCC_MUXSELCFGR_MUXSEL5_Msk                 (0x3UL << RCC_MUXSELCFGR_MUXSEL5_Pos)                /*!< 0x00300000 */
#define RCC_MUXSELCFGR_MUXSEL5                     RCC_MUXSELCFGR_MUXSEL5_Msk                        /*!< PLL1 reference clock selection (ck_pll1_ref) */
#define RCC_MUXSELCFGR_MUXSEL6_Pos                 (24U)
#define RCC_MUXSELCFGR_MUXSEL6_Msk                 (0x3UL << RCC_MUXSELCFGR_MUXSEL6_Pos)                /*!< 0x03000000 */
#define RCC_MUXSELCFGR_MUXSEL6                     RCC_MUXSELCFGR_MUXSEL6_Msk                        /*!< PLL2 reference clock selection (ck_pll2_ref) */

/* Bit fields for RCC_XBARxCFGR registers : x in [0;63] */
#define RCC_XBARxCFGR_XBARxSEL_Pos                   0
#define RCC_XBARxCFGR_XBARxSEL_Msk                   (0xFUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_0                     (0x0UL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_1                     (0x1UL << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_2                     (0x2UL << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_3                     (0x3UL << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_4                     (0x4UL << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_5                     (0x5UL << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_6                     (0x6UL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_7                     (0x7UL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_8                     (0x8UL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_9                     (0x9UL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_A                     (0xAUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_B                     (0xBUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_C                     (0xCUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_D                     (0xDUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxSEL_E                     (0xEUL  << RCC_XBARxCFGR_XBARxSEL_Pos)
#define RCC_XBARxCFGR_XBARxEN_Pos                    6
#define RCC_XBARxCFGR_XBARxEN_Msk                    (0x1UL << RCC_XBARxCFGR_XBARxEN_Pos)
#define RCC_XBARxCFGR_XBARxEN                        (0x1UL << 6)
#define RCC_XBARxCFGR_XBARxSTS_Pos                   7
#define RCC_XBARxCFGR_XBARxSTS_Msk                   (0x1UL << RCC_XBARxCFGR_XBARxSTS_Pos)
#define RCC_XBARxCFGR_XBARxSTS                       (0x1UL << 7)

/* Bit fields for RCC_PREDIVxCFGR registers : x in [0;63] */
#define RCC_PREDIVxCFGR_PREDIVx_Pos                  0
#define RCC_PREDIVxCFGR_PREDIVx_Msk                  (0x3FFUL  << RCC_PREDIVxCFGR_PREDIVx_Pos)
#define RCC_PREDIVxCFGR_PREDIVx_DIV1                 (0x000UL  << RCC_PREDIVxCFGR_PREDIVx_Pos)
#define RCC_PREDIVxCFGR_PREDIVx_DIV2                 (0x001UL  << RCC_PREDIVxCFGR_PREDIVx_Pos)
#define RCC_PREDIVxCFGR_PREDIVx_DIV4                 (0x003UL  << RCC_PREDIVxCFGR_PREDIVx_Pos)
#define RCC_PREDIVxCFGR_PREDIVx_DIV1024              (0x3FFUL  << RCC_PREDIVxCFGR_PREDIVx_Pos)

/* Bit fields for RCC_PREDIVSR1 register */
#define RCC_PREDIVSR1_PREDIVSTS_Pos                (0U)
#define RCC_PREDIVSR1_PREDIVSTS_Msk                (0xFFFFFFFFUL << RCC_PREDIVSR1_PREDIVSTS_Pos)        /*!< 0xFFFFFFFF */
#define RCC_PREDIVSR1_PREDIVSTS                    RCC_PREDIVSR1_PREDIVSTS_Msk                       /*!< Predivider channel[31:0] output status */

/* Bit fields for RCC_PREDIVSR2 register */
#define RCC_PREDIVSR2_PREDIVSTS_Pos                (0U)
#define RCC_PREDIVSR2_PREDIVSTS_Msk                (0xFFFFFFFFUL << RCC_PREDIVSR2_PREDIVSTS_Pos)        /*!< 0xFFFFFFFF */
#define RCC_PREDIVSR2_PREDIVSTS                    RCC_PREDIVSR2_PREDIVSTS_Msk                       /*!< Predivider channel[63:32] output status */

/***************  Bit fields for RCC_FINDIVxCFGR register */
#define RCC_FINDIVxCFGR_FINDIVx_Pos                (0U)
#define RCC_FINDIVxCFGR_FINDIVx_Msk                (0x3FUL << RCC_FINDIVxCFGR_FINDIVx_Pos)              /*!< 0x0000003F */
#define RCC_FINDIVxCFGR_FINDIVx                    RCC_FINDIVxCFGR_FINDIVx_Msk                       /*!< Channel 0 divider ratio */
#define RCC_FINDIVxCFGR_FINDIVxEN_Pos              (6U)
#define RCC_FINDIVxCFGR_FINDIVxEN_Msk              (0x1UL << RCC_FINDIVxCFGR_FINDIVxEN_Pos)             /*!< 0x00000040 */
#define RCC_FINDIVxCFGR_FINDIVxEN                  RCC_FINDIVxCFGR_FINDIVxEN_Msk                     /*!< Final divider channel 0 output enable */

/* Bit fields for RCC_FINDIVSR1 register */
#define RCC_FINDIVSR1_FINDIVSTS_Pos                (0U)
#define RCC_FINDIVSR1_FINDIVSTS_Msk                (0xFFFFFFFFUL << RCC_FINDIVSR1_FINDIVSTS_Pos)        /*!< 0xFFFFFFFF */
#define RCC_FINDIVSR1_FINDIVSTS                    RCC_FINDIVSR1_FINDIVSTS_Msk                       /*!< Final divider channel[31:0] output status */

/* Bit fields for RCC_FINDIVSR2 register */
#define RCC_FINDIVSR2_FINDIVSTS_Pos                (0U)
#define RCC_FINDIVSR2_FINDIVSTS_Msk                (0xFFFFFFFFUL << RCC_FINDIVSR2_FINDIVSTS_Pos)        /*!< 0xFFFFFFFF */
#define RCC_FINDIVSR2_FINDIVSTS                    RCC_FINDIVSR2_FINDIVSTS_Msk                       /*!< Final divider channel[63:32] output status */

/**************  Bit fields for RCC_FCALCOBS0CFGR register  ***************/
#define RCC_FCALCOBS0CFGR_CKINTSEL_Pos             (0U)
#define RCC_FCALCOBS0CFGR_CKINTSEL_Msk             (0xFFUL << RCC_FCALCOBS0CFGR_CKINTSEL_Pos)           /*!< 0x000000FF */
#define RCC_FCALCOBS0CFGR_CKINTSEL                 RCC_FCALCOBS0CFGR_CKINTSEL_Msk                    /*!< Internal clock selector for clock frequency calculator and observation clock 0 */
#define RCC_FCALCOBS0CFGR_CKEXTSEL_Pos             (8U)
#define RCC_FCALCOBS0CFGR_CKEXTSEL_Msk             (0x7UL << RCC_FCALCOBS0CFGR_CKEXTSEL_Pos)            /*!< 0x00000700 */
#define RCC_FCALCOBS0CFGR_CKEXTSEL                 RCC_FCALCOBS0CFGR_CKEXTSEL_Msk                    /*!< External clock selector for clock frequency calculator and */
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Pos        (15U)
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Msk        (0x1UL << RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Pos)       /*!< 0x00008000 */
#define RCC_FCALCOBS0CFGR_FCALCCKEXTSEL            RCC_FCALCOBS0CFGR_FCALCCKEXTSEL_Msk                 /*!< External clock source for clock frequency calculator input clock */
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Pos          (16U)
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Msk          (0x1UL << RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Pos)         /*!< 0x00010000 */
#define RCC_FCALCOBS0CFGR_CKOBSEXTSEL              RCC_FCALCOBS0CFGR_CKOBSEXTSEL_Msk                   /*!< External clock source for observation clock 0 */
#define RCC_FCALCOBS0CFGR_FCALCCKINV_Pos           (17U)
#define RCC_FCALCOBS0CFGR_FCALCCKINV_Msk           (0x1UL << RCC_FCALCOBS0CFGR_FCALCCKINV_Pos)          /*!< 0x00020000 */
#define RCC_FCALCOBS0CFGR_FCALCCKINV               RCC_FCALCOBS0CFGR_FCALCCKINV_Msk                    /*!< Clock frequency calculator input clock inverter */
#define RCC_FCALCOBS0CFGR_CKOBSINV_Pos             (18U)
#define RCC_FCALCOBS0CFGR_CKOBSINV_Msk             (0x1UL << RCC_FCALCOBS0CFGR_CKOBSINV_Pos)            /*!< 0x00040000 */
#define RCC_FCALCOBS0CFGR_CKOBSINV                 RCC_FCALCOBS0CFGR_CKOBSINV_Msk                    /*!< Observation clock 0 inverter */
#define RCC_FCALCOBS0CFGR_CKOBSDIV_Pos             (22U)
#define RCC_FCALCOBS0CFGR_CKOBSDIV_Msk             (0x7UL << RCC_FCALCOBS0CFGR_CKOBSDIV_Pos)            /*!< 0x01C00000 */
#define RCC_FCALCOBS0CFGR_CKOBSDIV                 RCC_FCALCOBS0CFGR_CKOBSDIV_Msk                    /*!< Observation clock 0 divide ratio */
#define RCC_FCALCOBS0CFGR_FCALCCKEN_Pos            (25U)
#define RCC_FCALCOBS0CFGR_FCALCCKEN_Msk            (0x1UL << RCC_FCALCOBS0CFGR_FCALCCKEN_Pos)           /*!< 0x02000000 */
#define RCC_FCALCOBS0CFGR_FCALCCKEN                RCC_FCALCOBS0CFGR_FCALCCKEN_Msk                   /*!< Clock frequency calculator input clock enable */
#define RCC_FCALCOBS0CFGR_CKOBSEN_Pos              (26U)
#define RCC_FCALCOBS0CFGR_CKOBSEN_Msk              (0x1UL << RCC_FCALCOBS0CFGR_CKOBSEN_Pos)             /*!< 0x04000000 */
#define RCC_FCALCOBS0CFGR_CKOBSEN                  RCC_FCALCOBS0CFGR_CKOBSEN_Msk                     /*!< Observation clock 0 output enable */

/**************  Bit fields for RCC_FCALCOBS1CFGR register  ***************/
#define RCC_FCALCOBS1CFGR_CKINTSEL_Pos             (0U)
#define RCC_FCALCOBS1CFGR_CKINTSEL_Msk             (0xFFUL << RCC_FCALCOBS1CFGR_CKINTSEL_Pos)           /*!< 0x000000FF */
#define RCC_FCALCOBS1CFGR_CKINTSEL                 RCC_FCALCOBS1CFGR_CKINTSEL_Msk                    /*!< Internal clock selector for observation clock 1 */
#define RCC_FCALCOBS1CFGR_CKEXTSEL_Pos             (8U)
#define RCC_FCALCOBS1CFGR_CKEXTSEL_Msk             (0x7UL << RCC_FCALCOBS1CFGR_CKEXTSEL_Pos)            /*!< 0x00000700 */
#define RCC_FCALCOBS1CFGR_CKEXTSEL                 RCC_FCALCOBS1CFGR_CKEXTSEL_Msk                    /*!< External clock for observation clock 1 */
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Pos          (16U)
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Msk          (0x1UL << RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Pos)         /*!< 0x00010000 */
#define RCC_FCALCOBS1CFGR_CKOBSEXTSEL              RCC_FCALCOBS1CFGR_CKOBSEXTSEL_Msk                   /*!< External clock source for the observation clock 1 */
#define RCC_FCALCOBS1CFGR_CKOBSINV_Pos             (18U)
#define RCC_FCALCOBS1CFGR_CKOBSINV_Msk             (0x1UL << RCC_FCALCOBS1CFGR_CKOBSINV_Pos)            /*!< 0x00040000 */
#define RCC_FCALCOBS1CFGR_CKOBSINV                 RCC_FCALCOBS1CFGR_CKOBSINV_Msk                    /*!< Observation clock 1 inverter */
#define RCC_FCALCOBS1CFGR_CKOBSDIV_Pos             (22U)
#define RCC_FCALCOBS1CFGR_CKOBSDIV_Msk             (0x7UL << RCC_FCALCOBS1CFGR_CKOBSDIV_Pos)            /*!< 0x01C00000 */
#define RCC_FCALCOBS1CFGR_CKOBSDIV                 RCC_FCALCOBS1CFGR_CKOBSDIV_Msk                    /*!< Observation clock 1 divide ratio */
#define RCC_FCALCOBS1CFGR_CKOBSEN_Pos              (26U)
#define RCC_FCALCOBS1CFGR_CKOBSEN_Msk              (0x1UL << RCC_FCALCOBS1CFGR_CKOBSEN_Pos)             /*!< 0x04000000 */
#define RCC_FCALCOBS1CFGR_CKOBSEN                  RCC_FCALCOBS1CFGR_CKOBSEN_Msk                     /*!< Observation clock 1 output enable */
#define RCC_FCALCOBS1CFGR_FCALCRSTN_Pos            (27U)
#define RCC_FCALCOBS1CFGR_FCALCRSTN_Msk            (0x1UL << RCC_FCALCOBS1CFGR_FCALCRSTN_Pos)           /*!< 0x08000000 */
#define RCC_FCALCOBS1CFGR_FCALCRSTN                RCC_FCALCOBS1CFGR_FCALCRSTN_Msk                   /*!< Clock frequency calculator reset */

/***************  Bit fields for RCC_FCALCREFCFGR register  ***************/
#define RCC_FCALCREFCFGR_FCALCREFCKSEL_Pos         (0U)
#define RCC_FCALCREFCFGR_FCALCREFCKSEL_Msk         (0x7UL << RCC_FCALCREFCFGR_FCALCREFCKSEL_Pos)        /*!< 0x00000007 */
#define RCC_FCALCREFCFGR_FCALCREFCKSEL             RCC_FCALCREFCFGR_FCALCREFCKSEL_Msk                  /*!< Reference clock selection used by clock frequency calculator */

/* Bit fields for RCC_FCALCCR1 register */
#define RCC_FCALCCR1_FCALCRUN_Pos                  (0U)
#define RCC_FCALCCR1_FCALCRUN_Msk                  (0x1UL << RCC_FCALCCR1_FCALCRUN_Pos)                 /*!< 0x00000001 */
#define RCC_FCALCCR1_FCALCRUN                      RCC_FCALCCR1_FCALCRUN_Msk                         /*!< Clock frequency calculator run */

/* Bit fields for RCC_FCALCCR2 register */
#define RCC_FCALCCR2_FCALCMD_Pos                   (3U)
#define RCC_FCALCCR2_FCALCMD_Msk                   (0x3UL << RCC_FCALCCR2_FCALCMD_Pos)                  /*!< 0x00000018 */
#define RCC_FCALCCR2_FCALCMD                       RCC_FCALCCR2_FCALCMD_Msk                          /*!< Clock frequency calculation method */
#define RCC_FCALCCR2_FCALCTWC_Pos                  (11U)
#define RCC_FCALCCR2_FCALCTWC_Msk                  (0xFUL << RCC_FCALCCR2_FCALCTWC_Pos)                 /*!< 0x00007800 */
#define RCC_FCALCCR2_FCALCTWC                      RCC_FCALCCR2_FCALCTWC_Msk                         /*!< Time window code for clock frequency calculation */
#define RCC_FCALCCR2_FCALCTYP_Pos                  (17U)
#define RCC_FCALCCR2_FCALCTYP_Msk                  (0x1FUL << RCC_FCALCCR2_FCALCTYP_Pos)                /*!< 0x003E0000 */
#define RCC_FCALCCR2_FCALCTYP                      RCC_FCALCCR2_FCALCTYP_Msk                         /*!< Clock frequency calculation type selection */

/* Bit fields for RCC_FCALCSR register  ******************/
#define RCC_FCALCSR_FVAL_Pos                     (0U)
#define RCC_FCALCSR_FVAL_Msk                     (0x1FFFFUL << RCC_FCALCSR_FVAL_Pos)                  /*!< 0x0001FFFF */
#define RCC_FCALCSR_FVAL                         RCC_FCALCSR_FVAL_Msk                              /*!< Clock frequency calculation value */
#define RCC_FCALCSR_FCALCSTS_Pos                 (19U)
#define RCC_FCALCSR_FCALCSTS_Msk                 (0x1UL << RCC_FCALCSR_FCALCSTS_Pos)                  /*!< 0x00080000 */
#define RCC_FCALCSR_FCALCSTS                     RCC_FCALCSR_FCALCSTS_Msk                          /*!< Clock frequency calculation status */

/* Bit fields for RCC_PLL4CFGR1 register */
#define RCC_PLL4CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL4CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL4CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL4CFGR1_SSMODRST                     RCC_PLL4CFGR1_SSMODRST_Msk                        /*!< PLLy spread-spectrum modulator reset */
#define RCC_PLL4CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL4CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL4CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL4CFGR1_PLLEN                        RCC_PLL4CFGR1_PLLEN_Msk                           /*!< PLLy enable */
#define RCC_PLL4CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL4CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL4CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL4CFGR1_PLLRDY                       RCC_PLL4CFGR1_PLLRDY_Msk                          /*!< PLLy clock ready flag */
#define RCC_PLL4CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL4CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL4CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL4CFGR1_CKREFST                      RCC_PLL4CFGR1_CKREFST_Msk                         /*!< PLLy reference clock state */

/* Bit fields for RCC_PLL4CFGR2 register */
#define RCC_PLL4CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL4CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL4CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL4CFGR2_FREFDIV                      RCC_PLL4CFGR2_FREFDIV_Msk                         /*!< PLLy reference input clock divide frequency ratio */
#define RCC_PLL4CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL4CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL4CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL4CFGR2_FBDIV                        RCC_PLL4CFGR2_FBDIV_Msk                           /*!< PLLy VCO multiplication factor */

/* Bit fields for RCC_PLL4CFGR3 register */
#define RCC_PLL4CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL4CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL4CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL4CFGR3_FRACIN                       RCC_PLL4CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLy VCO multiplication factor */
#define RCC_PLL4CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL4CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL4CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL4CFGR3_DOWNSPREAD                   RCC_PLL4CFGR3_DOWNSPREAD_Msk                      /*!< PLLy VCO frequency modulation mode */
#define RCC_PLL4CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL4CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL4CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL4CFGR3_DACEN                        RCC_PLL4CFGR3_DACEN_Msk                           /*!< PLLy noise canceling DAC enable in fractional mode */
#define RCC_PLL4CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL4CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL4CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL4CFGR3_SSCGDIS                      RCC_PLL4CFGR3_SSCGDIS_Msk                         /*!< PLLy spread-spectrum modulator disable */

/* Bit fields for RCC_PLL4CFGR4 register */
#define RCC_PLL4CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL4CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL4CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL4CFGR4_DSMEN                        RCC_PLL4CFGR4_DSMEN_Msk                           /*!< PLLy delta-sigma modulator enable */
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL4CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL4CFGR4_FOUTPOSTDIVEN                RCC_PLL4CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLy output and post dividers enable */
#define RCC_PLL4CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL4CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL4CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL4CFGR4_BYPASS                       RCC_PLL4CFGR4_BYPASS_Msk                          /*!< PLLy FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL4CFGR5 register */
#define RCC_PLL4CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL4CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL4CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL4CFGR5_DIVVAL                       RCC_PLL4CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLy */
#define RCC_PLL4CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL4CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL4CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL4CFGR5_SPREAD                       RCC_PLL4CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLy */

/* Bit fields for RCC_PLL4CFGR6 register */
#define RCC_PLL4CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL4CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL4CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL4CFGR6_POSTDIV1                     RCC_PLL4CFGR6_POSTDIV1_Msk                        /*!< PLLy VCO frequency divide level 1 */

/* Bit fields for RCC_PLL4CFGR7 register */
#define RCC_PLL4CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL4CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL4CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL4CFGR7_POSTDIV2                     RCC_PLL4CFGR7_POSTDIV2_Msk                        /*!< PLLy VCO frequency divide level 2 */

/* Bit fields for RCC_PLL5CFGR1 register */
#define RCC_PLL5CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL5CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL5CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL5CFGR1_SSMODRST                     RCC_PLL5CFGR1_SSMODRST_Msk                        /*!< PLLy spread-spectrum modulator reset */
#define RCC_PLL5CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL5CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL5CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL5CFGR1_PLLEN                        RCC_PLL5CFGR1_PLLEN_Msk                           /*!< PLLy enable */
#define RCC_PLL5CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL5CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL5CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL5CFGR1_PLLRDY                       RCC_PLL5CFGR1_PLLRDY_Msk                          /*!< PLLy clock ready flag */
#define RCC_PLL5CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL5CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL5CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL5CFGR1_CKREFST                      RCC_PLL5CFGR1_CKREFST_Msk                         /*!< PLLy reference clock state */

/* Bit fields for RCC_PLL5CFGR2 register */
#define RCC_PLL5CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL5CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL5CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL5CFGR2_FREFDIV                      RCC_PLL5CFGR2_FREFDIV_Msk                         /*!< PLLy reference input clock divide frequency ratio */
#define RCC_PLL5CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL5CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL5CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL5CFGR2_FBDIV                        RCC_PLL5CFGR2_FBDIV_Msk                           /*!< PLLy VCO multiplication factor */

/* Bit fields for RCC_PLL5CFGR3 register */
#define RCC_PLL5CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL5CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL5CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL5CFGR3_FRACIN                       RCC_PLL5CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLy VCO multiplication factor */
#define RCC_PLL5CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL5CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL5CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL5CFGR3_DOWNSPREAD                   RCC_PLL5CFGR3_DOWNSPREAD_Msk                      /*!< PLLy VCO frequency modulation mode */
#define RCC_PLL5CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL5CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL5CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL5CFGR3_DACEN                        RCC_PLL5CFGR3_DACEN_Msk                           /*!< PLLy noise canceling DAC enable in fractional mode */
#define RCC_PLL5CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL5CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL5CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL5CFGR3_SSCGDIS                      RCC_PLL5CFGR3_SSCGDIS_Msk                         /*!< PLLy spread-spectrum modulator disable */

/* Bit fields for RCC_PLL5CFGR4 register */
#define RCC_PLL5CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL5CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL5CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL5CFGR4_DSMEN                        RCC_PLL5CFGR4_DSMEN_Msk                           /*!< PLLy delta-sigma modulator enable */
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL5CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL5CFGR4_FOUTPOSTDIVEN                RCC_PLL5CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLy output and post dividers enable */
#define RCC_PLL5CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL5CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL5CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL5CFGR4_BYPASS                       RCC_PLL5CFGR4_BYPASS_Msk                          /*!< PLLy FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL5CFGR5 register */
#define RCC_PLL5CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL5CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL5CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL5CFGR5_DIVVAL                       RCC_PLL5CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLy */
#define RCC_PLL5CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL5CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL5CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL5CFGR5_SPREAD                       RCC_PLL5CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLy */

/* Bit fields for RCC_PLL5CFGR6 register */
#define RCC_PLL5CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL5CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL5CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL5CFGR6_POSTDIV1                     RCC_PLL5CFGR6_POSTDIV1_Msk                        /*!< PLLy VCO frequency divide level 1 */

/* Bit fields for RCC_PLL5CFGR7 register */
#define RCC_PLL5CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL5CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL5CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL5CFGR7_POSTDIV2                     RCC_PLL5CFGR7_POSTDIV2_Msk                        /*!< PLLy VCO frequency divide level 2 */

/* Bit fields for RCC_PLL6CFGR1 register */
#define RCC_PLL6CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL6CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL6CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL6CFGR1_SSMODRST                     RCC_PLL6CFGR1_SSMODRST_Msk                        /*!< PLLy spread-spectrum modulator reset */
#define RCC_PLL6CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL6CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL6CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL6CFGR1_PLLEN                        RCC_PLL6CFGR1_PLLEN_Msk                           /*!< PLLy enable */
#define RCC_PLL6CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL6CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL6CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL6CFGR1_PLLRDY                       RCC_PLL6CFGR1_PLLRDY_Msk                          /*!< PLLy clock ready flag */
#define RCC_PLL6CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL6CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL6CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL6CFGR1_CKREFST                      RCC_PLL6CFGR1_CKREFST_Msk                         /*!< PLLy reference clock state */

/* Bit fields for RCC_PLL6CFGR2 register */
#define RCC_PLL6CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL6CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL6CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL6CFGR2_FREFDIV                      RCC_PLL6CFGR2_FREFDIV_Msk                         /*!< PLLy reference input clock divide frequency ratio */
#define RCC_PLL6CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL6CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL6CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL6CFGR2_FBDIV                        RCC_PLL6CFGR2_FBDIV_Msk                           /*!< PLLy VCO multiplication factor */

/* Bit fields for RCC_PLL6CFGR3 register */
#define RCC_PLL6CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL6CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL6CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL6CFGR3_FRACIN                       RCC_PLL6CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLy VCO multiplication factor */
#define RCC_PLL6CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL6CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL6CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL6CFGR3_DOWNSPREAD                   RCC_PLL6CFGR3_DOWNSPREAD_Msk                      /*!< PLLy VCO frequency modulation mode */
#define RCC_PLL6CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL6CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL6CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL6CFGR3_DACEN                        RCC_PLL6CFGR3_DACEN_Msk                           /*!< PLLy noise canceling DAC enable in fractional mode */
#define RCC_PLL6CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL6CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL6CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL6CFGR3_SSCGDIS                      RCC_PLL6CFGR3_SSCGDIS_Msk                         /*!< PLLy spread-spectrum modulator disable */

/* Bit fields for RCC_PLL6CFGR4 register */
#define RCC_PLL6CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL6CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL6CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL6CFGR4_DSMEN                        RCC_PLL6CFGR4_DSMEN_Msk                           /*!< PLLy delta-sigma modulator enable */
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL6CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL6CFGR4_FOUTPOSTDIVEN                RCC_PLL6CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLy output and post dividers enable */
#define RCC_PLL6CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL6CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL6CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL6CFGR4_BYPASS                       RCC_PLL6CFGR4_BYPASS_Msk                          /*!< PLLy FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL6CFGR5 register */
#define RCC_PLL6CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL6CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL6CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL6CFGR5_DIVVAL                       RCC_PLL6CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLy */
#define RCC_PLL6CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL6CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL6CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL6CFGR5_SPREAD                       RCC_PLL6CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLy */

/* Bit fields for RCC_PLL6CFGR6 register */
#define RCC_PLL6CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL6CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL6CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL6CFGR6_POSTDIV1                     RCC_PLL6CFGR6_POSTDIV1_Msk                        /*!< PLLy VCO frequency divide level 1 */

/* Bit fields for RCC_PLL6CFGR7 register */
#define RCC_PLL6CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL6CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL6CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL6CFGR7_POSTDIV2                     RCC_PLL6CFGR7_POSTDIV2_Msk                        /*!< PLLy VCO frequency divide level 2 */

/* Bit fields for RCC_PLL7CFGR1 register */
#define RCC_PLL7CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL7CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL7CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL7CFGR1_SSMODRST                     RCC_PLL7CFGR1_SSMODRST_Msk                        /*!< PLLy spread-spectrum modulator reset */
#define RCC_PLL7CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL7CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL7CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL7CFGR1_PLLEN                        RCC_PLL7CFGR1_PLLEN_Msk                           /*!< PLLy enable */
#define RCC_PLL7CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL7CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL7CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL7CFGR1_PLLRDY                       RCC_PLL7CFGR1_PLLRDY_Msk                          /*!< PLLy clock ready flag */
#define RCC_PLL7CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL7CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL7CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL7CFGR1_CKREFST                      RCC_PLL7CFGR1_CKREFST_Msk                         /*!< PLLy reference clock state */

/* Bit fields for RCC_PLL7CFGR2 register */
#define RCC_PLL7CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL7CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL7CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL7CFGR2_FREFDIV                      RCC_PLL7CFGR2_FREFDIV_Msk                         /*!< PLLy reference input clock divide frequency ratio */
#define RCC_PLL7CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL7CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL7CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL7CFGR2_FBDIV                        RCC_PLL7CFGR2_FBDIV_Msk                           /*!< PLLy VCO multiplication factor */

/* Bit fields for RCC_PLL7CFGR3 register */
#define RCC_PLL7CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL7CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL7CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL7CFGR3_FRACIN                       RCC_PLL7CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLy VCO multiplication factor */
#define RCC_PLL7CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL7CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL7CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL7CFGR3_DOWNSPREAD                   RCC_PLL7CFGR3_DOWNSPREAD_Msk                      /*!< PLLy VCO frequency modulation mode */
#define RCC_PLL7CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL7CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL7CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL7CFGR3_DACEN                        RCC_PLL7CFGR3_DACEN_Msk                           /*!< PLLy noise canceling DAC enable in fractional mode */
#define RCC_PLL7CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL7CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL7CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL7CFGR3_SSCGDIS                      RCC_PLL7CFGR3_SSCGDIS_Msk                         /*!< PLLy spread-spectrum modulator disable */

/* Bit fields for RCC_PLL7CFGR4 register */
#define RCC_PLL7CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL7CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL7CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL7CFGR4_DSMEN                        RCC_PLL7CFGR4_DSMEN_Msk                           /*!< PLLy delta-sigma modulator enable */
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL7CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL7CFGR4_FOUTPOSTDIVEN                RCC_PLL7CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLy output and post dividers enable */
#define RCC_PLL7CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL7CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL7CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL7CFGR4_BYPASS                       RCC_PLL7CFGR4_BYPASS_Msk                          /*!< PLLy FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL7CFGR5 register */
#define RCC_PLL7CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL7CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL7CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL7CFGR5_DIVVAL                       RCC_PLL7CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLy */
#define RCC_PLL7CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL7CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL7CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL7CFGR5_SPREAD                       RCC_PLL7CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLy */

/* Bit fields for RCC_PLL7CFGR6 register */
#define RCC_PLL7CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL7CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL7CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL7CFGR6_POSTDIV1                     RCC_PLL7CFGR6_POSTDIV1_Msk                        /*!< PLLy VCO frequency divide level 1 */

/* Bit fields for RCC_PLL7CFGR7 register */
#define RCC_PLL7CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL7CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL7CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL7CFGR7_POSTDIV2                     RCC_PLL7CFGR7_POSTDIV2_Msk                        /*!< PLLy VCO frequency divide level 2 */

/* Bit fields for RCC_PLL8CFGR1 register */
#define RCC_PLL8CFGR1_SSMODRST_Pos                 (0U)
#define RCC_PLL8CFGR1_SSMODRST_Msk                 (0x1UL << RCC_PLL8CFGR1_SSMODRST_Pos)                /*!< 0x00000001 */
#define RCC_PLL8CFGR1_SSMODRST                     RCC_PLL8CFGR1_SSMODRST_Msk                        /*!< PLLy spread-spectrum modulator reset */
#define RCC_PLL8CFGR1_PLLEN_Pos                    (8U)
#define RCC_PLL8CFGR1_PLLEN_Msk                    (0x1UL << RCC_PLL8CFGR1_PLLEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL8CFGR1_PLLEN                        RCC_PLL8CFGR1_PLLEN_Msk                           /*!< PLLy enable */
#define RCC_PLL8CFGR1_PLLRDY_Pos                   (24U)
#define RCC_PLL8CFGR1_PLLRDY_Msk                   (0x1UL << RCC_PLL8CFGR1_PLLRDY_Pos)                  /*!< 0x01000000 */
#define RCC_PLL8CFGR1_PLLRDY                       RCC_PLL8CFGR1_PLLRDY_Msk                          /*!< PLLy clock ready flag */
#define RCC_PLL8CFGR1_CKREFST_Pos                  (28U)
#define RCC_PLL8CFGR1_CKREFST_Msk                  (0x1UL << RCC_PLL8CFGR1_CKREFST_Pos)                 /*!< 0x10000000 */
#define RCC_PLL8CFGR1_CKREFST                      RCC_PLL8CFGR1_CKREFST_Msk                         /*!< PLLy reference clock state */

/* Bit fields for RCC_PLL8CFGR2 register */
#define RCC_PLL8CFGR2_FREFDIV_Pos                  (0U)
#define RCC_PLL8CFGR2_FREFDIV_Msk                  (0x3FUL << RCC_PLL8CFGR2_FREFDIV_Pos)                /*!< 0x0000003F */
#define RCC_PLL8CFGR2_FREFDIV                      RCC_PLL8CFGR2_FREFDIV_Msk                         /*!< PLLy reference input clock divide frequency ratio */
#define RCC_PLL8CFGR2_FBDIV_Pos                    (16U)
#define RCC_PLL8CFGR2_FBDIV_Msk                    (0xFFFUL << RCC_PLL8CFGR2_FBDIV_Pos)                 /*!< 0x0FFF0000 */
#define RCC_PLL8CFGR2_FBDIV                        RCC_PLL8CFGR2_FBDIV_Msk                           /*!< PLLy VCO multiplication factor */

/* Bit fields for RCC_PLL8CFGR3 register */
#define RCC_PLL8CFGR3_FRACIN_Pos                   (0U)
#define RCC_PLL8CFGR3_FRACIN_Msk                   (0xFFFFFFUL << RCC_PLL8CFGR3_FRACIN_Pos)             /*!< 0x00FFFFFF */
#define RCC_PLL8CFGR3_FRACIN                       RCC_PLL8CFGR3_FRACIN_Msk                          /*!< Fractional part of PLLy VCO multiplication factor */
#define RCC_PLL8CFGR3_DOWNSPREAD_Pos               (24U)
#define RCC_PLL8CFGR3_DOWNSPREAD_Msk               (0x1UL << RCC_PLL8CFGR3_DOWNSPREAD_Pos)              /*!< 0x01000000 */
#define RCC_PLL8CFGR3_DOWNSPREAD                   RCC_PLL8CFGR3_DOWNSPREAD_Msk                      /*!< PLLy VCO frequency modulation mode */
#define RCC_PLL8CFGR3_DACEN_Pos                    (25U)
#define RCC_PLL8CFGR3_DACEN_Msk                    (0x1UL << RCC_PLL8CFGR3_DACEN_Pos)                   /*!< 0x02000000 */
#define RCC_PLL8CFGR3_DACEN                        RCC_PLL8CFGR3_DACEN_Msk                           /*!< PLLy noise canceling DAC enable in fractional mode */
#define RCC_PLL8CFGR3_SSCGDIS_Pos                  (26U)
#define RCC_PLL8CFGR3_SSCGDIS_Msk                  (0x1UL << RCC_PLL8CFGR3_SSCGDIS_Pos)                 /*!< 0x04000000 */
#define RCC_PLL8CFGR3_SSCGDIS                      RCC_PLL8CFGR3_SSCGDIS_Msk                         /*!< PLLy spread-spectrum modulator disable */

/* Bit fields for RCC_PLL8CFGR4 register */
#define RCC_PLL8CFGR4_DSMEN_Pos                    (8U)
#define RCC_PLL8CFGR4_DSMEN_Msk                    (0x1UL << RCC_PLL8CFGR4_DSMEN_Pos)                   /*!< 0x00000100 */
#define RCC_PLL8CFGR4_DSMEN                        RCC_PLL8CFGR4_DSMEN_Msk                           /*!< PLLy delta-sigma modulator enable */
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Pos            (9U)
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN_Msk            (0x1UL << RCC_PLL8CFGR4_FOUTPOSTDIVEN_Pos)           /*!< 0x00000200 */
#define RCC_PLL8CFGR4_FOUTPOSTDIVEN                RCC_PLL8CFGR4_FOUTPOSTDIVEN_Msk                   /*!< PLLy output and post dividers enable */
#define RCC_PLL8CFGR4_BYPASS_Pos                   (10U)
#define RCC_PLL8CFGR4_BYPASS_Msk                   (0x1UL << RCC_PLL8CFGR4_BYPASS_Pos)                  /*!< 0x00000400 */
#define RCC_PLL8CFGR4_BYPASS                       RCC_PLL8CFGR4_BYPASS_Msk                          /*!< PLLy FOUTPOSTDIV bypass */

/* Bit fields for RCC_PLL8CFGR5 register */
#define RCC_PLL8CFGR5_DIVVAL_Pos                   (0U)
#define RCC_PLL8CFGR5_DIVVAL_Msk                   (0xFUL << RCC_PLL8CFGR5_DIVVAL_Pos)                  /*!< 0x0000000F */
#define RCC_PLL8CFGR5_DIVVAL                       RCC_PLL8CFGR5_DIVVAL_Msk                          /*!< Modulation frequency adjustment for PLLy */
#define RCC_PLL8CFGR5_SPREAD_Pos                   (16U)
#define RCC_PLL8CFGR5_SPREAD_Msk                   (0x1FUL << RCC_PLL8CFGR5_SPREAD_Pos)                 /*!< 0x001F0000 */
#define RCC_PLL8CFGR5_SPREAD                       RCC_PLL8CFGR5_SPREAD_Msk                          /*!< Modulation depth adjustment for PLLy */

/* Bit fields for RCC_PLL8CFGR6 register */
#define RCC_PLL8CFGR6_POSTDIV1_Pos                 (0U)
#define RCC_PLL8CFGR6_POSTDIV1_Msk                 (0x7UL << RCC_PLL8CFGR6_POSTDIV1_Pos)                /*!< 0x00000007 */
#define RCC_PLL8CFGR6_POSTDIV1                     RCC_PLL8CFGR6_POSTDIV1_Msk                        /*!< PLLy VCO frequency divide level 1 */

/* Bit fields for RCC_PLL8CFGR7 register */
#define RCC_PLL8CFGR7_POSTDIV2_Pos                 (0U)
#define RCC_PLL8CFGR7_POSTDIV2_Msk                 (0x7UL << RCC_PLL8CFGR7_POSTDIV2_Pos)                /*!< 0x00000007 */
#define RCC_PLL8CFGR7_POSTDIV2                     RCC_PLL8CFGR7_POSTDIV2_Msk                        /*!< PLLy VCO frequency divide level 2 */

/* Bit fields for RCC_VERR register */
#define RCC_VERR_MINREV_Pos                      (0U)
#define RCC_VERR_MINREV_Msk                      (0xFUL << RCC_VERR_MINREV_Pos)                     /*!< 0x0000000F */
#define RCC_VERR_MINREV                          RCC_VERR_MINREV_Msk                               /*!< Minor RCC revision */
#define RCC_VERR_MAJREV_Pos                      (4U)
#define RCC_VERR_MAJREV_Msk                      (0xFUL << RCC_VERR_MAJREV_Pos)                     /*!< 0x000000F0 */
#define RCC_VERR_MAJREV                          RCC_VERR_MAJREV_Msk                               /*!< Major RCC revision */

/* Bit fields for RCC_IDR register */
#define RCC_IDR_ID_Pos                           (0U)
#define RCC_IDR_ID_Msk                           (0xFFFFFFFFUL << RCC_IDR_ID_Pos)                   /*!< 0xFFFFFFFF */
#define RCC_IDR_ID                               RCC_IDR_ID_Msk                                    /*!< RCC identifier */

/* Bit fields for RCC_SIDR register */
#define RCC_SIDR_SID_Pos                         (0U)
#define RCC_SIDR_SID_Msk                         (0xFFFFFFFFUL << RCC_SIDR_SID_Pos)                   /*!< 0xFFFFFFFF */
#define RCC_SIDR_SID                             RCC_SIDR_SID_Msk                                  /*!< RCC decoding space (64 Kbytes) */

/* Some Macros for RCC */
#define RCC_DERIVATIVE1_FLEXGEN_CHANNEL_MAPPING  (1U)
#define RCC_DERIVATIVE1_LOCAL_RESOURCES_MAPPING  (1U)
#define RCC_DERIVATIVE1_CK_IN                    (1U)

/******************************************************************************/
/*                                                                            */
/*                                    RIF                                     */
/*                            (RIF User Spec Rev 1.0.14)                      */
/******************************************************************************/
#define  RIF_CID_CPU1_CA35 0x1U
#define  RIF_CID_CPU2_CM33 0x2U

/*******************  Bits definition for RISC_CR register ********************/
#define RISC_CR_GLOCK_Pos             (0U)
#define RISC_CR_GLOCK_Msk             (0x1UL << RISC_CR_GLOCK_Pos)               /*!< 0x00000001 */
#define RISC_CR_GLOCK                 RISC_CR_GLOCK_Msk

/*******************  Bits definition for RISC_SECCFGR0 register **************/
#define RISC_SECCFGR0_SEC0_Pos        (0U)
#define RISC_SECCFGR0_SEC0_Msk        (0x1UL << RISC_SECCFGR0_SEC0_Pos)          /*!< 0x00000001 */
#define RISC_SECCFGR0_SEC0            RISC_SECCFGR0_SEC0_Msk
#define RISC_SECCFGR0_SEC1_Pos        (1U)
#define RISC_SECCFGR0_SEC1_Msk        (0x1UL << RISC_SECCFGR0_SEC1_Pos)          /*!< 0x00000002 */
#define RISC_SECCFGR0_SEC1            RISC_SECCFGR0_SEC1_Msk
#define RISC_SECCFGR0_SEC2_Pos        (2U)
#define RISC_SECCFGR0_SEC2_Msk        (0x1UL << RISC_SECCFGR0_SEC2_Pos)          /*!< 0x00000004 */
#define RISC_SECCFGR0_SEC2            RISC_SECCFGR0_SEC2_Msk
#define RISC_SECCFGR0_SEC3_Pos        (3U)
#define RISC_SECCFGR0_SEC3_Msk        (0x1UL << RISC_SECCFGR0_SEC3_Pos)          /*!< 0x00000008 */
#define RISC_SECCFGR0_SEC3            RISC_SECCFGR0_SEC3_Msk
#define RISC_SECCFGR0_SEC4_Pos        (4U)
#define RISC_SECCFGR0_SEC4_Msk        (0x1UL << RISC_SECCFGR0_SEC4_Pos)          /*!< 0x00000010 */
#define RISC_SECCFGR0_SEC4            RISC_SECCFGR0_SEC4_Msk
#define RISC_SECCFGR0_SEC5_Pos        (5U)
#define RISC_SECCFGR0_SEC5_Msk        (0x1UL << RISC_SECCFGR0_SEC5_Pos)          /*!< 0x00000020 */
#define RISC_SECCFGR0_SEC5            RISC_SECCFGR0_SEC5_Msk
#define RISC_SECCFGR0_SEC6_Pos        (6U)
#define RISC_SECCFGR0_SEC6_Msk        (0x1UL << RISC_SECCFGR0_SEC6_Pos)          /*!< 0x00000040 */
#define RISC_SECCFGR0_SEC6            RISC_SECCFGR0_SEC6_Msk
#define RISC_SECCFGR0_SEC7_Pos        (7U)
#define RISC_SECCFGR0_SEC7_Msk        (0x1UL << RISC_SECCFGR0_SEC7_Pos)          /*!< 0x00000080 */
#define RISC_SECCFGR0_SEC7            RISC_SECCFGR0_SEC7_Msk
#define RISC_SECCFGR0_SEC8_Pos        (8U)
#define RISC_SECCFGR0_SEC8_Msk        (0x1UL << RISC_SECCFGR0_SEC8_Pos)          /*!< 0x00000100 */
#define RISC_SECCFGR0_SEC8            RISC_SECCFGR0_SEC8_Msk
#define RISC_SECCFGR0_SEC9_Pos        (9U)
#define RISC_SECCFGR0_SEC9_Msk        (0x1UL << RISC_SECCFGR0_SEC9_Pos)          /*!< 0x00000200 */
#define RISC_SECCFGR0_SEC9            RISC_SECCFGR0_SEC9_Msk
#define RISC_SECCFGR0_SEC10_Pos       (10U)
#define RISC_SECCFGR0_SEC10_Msk       (0x1UL << RISC_SECCFGR0_SEC10_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR0_SEC10           RISC_SECCFGR0_SEC10_Msk
#define RISC_SECCFGR0_SEC11_Pos       (11U)
#define RISC_SECCFGR0_SEC11_Msk       (0x1UL << RISC_SECCFGR0_SEC11_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR0_SEC11           RISC_SECCFGR0_SEC11_Msk
#define RISC_SECCFGR0_SEC12_Pos       (12U)
#define RISC_SECCFGR0_SEC12_Msk       (0x1UL << RISC_SECCFGR0_SEC12_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR0_SEC12           RISC_SECCFGR0_SEC12_Msk
#define RISC_SECCFGR0_SEC13_Pos       (13U)
#define RISC_SECCFGR0_SEC13_Msk       (0x1UL << RISC_SECCFGR0_SEC13_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR0_SEC13           RISC_SECCFGR0_SEC13_Msk
#define RISC_SECCFGR0_SEC14_Pos       (14U)
#define RISC_SECCFGR0_SEC14_Msk       (0x1UL << RISC_SECCFGR0_SEC14_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR0_SEC14           RISC_SECCFGR0_SEC14_Msk
#define RISC_SECCFGR0_SEC15_Pos       (15U)
#define RISC_SECCFGR0_SEC15_Msk       (0x1UL << RISC_SECCFGR0_SEC15_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR0_SEC15           RISC_SECCFGR0_SEC15_Msk
#define RISC_SECCFGR0_SEC16_Pos       (16U)
#define RISC_SECCFGR0_SEC16_Msk       (0x1UL << RISC_SECCFGR0_SEC16_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR0_SEC16           RISC_SECCFGR0_SEC16_Msk
#define RISC_SECCFGR0_SEC17_Pos       (17U)
#define RISC_SECCFGR0_SEC17_Msk       (0x1UL << RISC_SECCFGR0_SEC17_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR0_SEC17           RISC_SECCFGR0_SEC17_Msk
#define RISC_SECCFGR0_SEC18_Pos       (18U)
#define RISC_SECCFGR0_SEC18_Msk       (0x1UL << RISC_SECCFGR0_SEC18_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR0_SEC18           RISC_SECCFGR0_SEC18_Msk
#define RISC_SECCFGR0_SEC19_Pos       (19U)
#define RISC_SECCFGR0_SEC19_Msk       (0x1UL << RISC_SECCFGR0_SEC19_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR0_SEC19           RISC_SECCFGR0_SEC19_Msk
#define RISC_SECCFGR0_SEC20_Pos       (20U)
#define RISC_SECCFGR0_SEC20_Msk       (0x1UL << RISC_SECCFGR0_SEC20_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR0_SEC20           RISC_SECCFGR0_SEC20_Msk
#define RISC_SECCFGR0_SEC21_Pos       (21U)
#define RISC_SECCFGR0_SEC21_Msk       (0x1UL << RISC_SECCFGR0_SEC21_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR0_SEC21           RISC_SECCFGR0_SEC21_Msk
#define RISC_SECCFGR0_SEC22_Pos       (22U)
#define RISC_SECCFGR0_SEC22_Msk       (0x1UL << RISC_SECCFGR0_SEC22_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR0_SEC22           RISC_SECCFGR0_SEC22_Msk
#define RISC_SECCFGR0_SEC23_Pos       (23U)
#define RISC_SECCFGR0_SEC23_Msk       (0x1UL << RISC_SECCFGR0_SEC23_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR0_SEC23           RISC_SECCFGR0_SEC23_Msk
#define RISC_SECCFGR0_SEC24_Pos       (24U)
#define RISC_SECCFGR0_SEC24_Msk       (0x1UL << RISC_SECCFGR0_SEC24_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR0_SEC24           RISC_SECCFGR0_SEC24_Msk
#define RISC_SECCFGR0_SEC25_Pos       (25U)
#define RISC_SECCFGR0_SEC25_Msk       (0x1UL << RISC_SECCFGR0_SEC25_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR0_SEC25           RISC_SECCFGR0_SEC25_Msk
#define RISC_SECCFGR0_SEC26_Pos       (26U)
#define RISC_SECCFGR0_SEC26_Msk       (0x1UL << RISC_SECCFGR0_SEC26_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR0_SEC26           RISC_SECCFGR0_SEC26_Msk
#define RISC_SECCFGR0_SEC27_Pos       (27U)
#define RISC_SECCFGR0_SEC27_Msk       (0x1UL << RISC_SECCFGR0_SEC27_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR0_SEC27           RISC_SECCFGR0_SEC27_Msk
#define RISC_SECCFGR0_SEC28_Pos       (28U)
#define RISC_SECCFGR0_SEC28_Msk       (0x1UL << RISC_SECCFGR0_SEC28_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR0_SEC28           RISC_SECCFGR0_SEC28_Msk
#define RISC_SECCFGR0_SEC29_Pos       (29U)
#define RISC_SECCFGR0_SEC29_Msk       (0x1UL << RISC_SECCFGR0_SEC29_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR0_SEC29           RISC_SECCFGR0_SEC29_Msk
#define RISC_SECCFGR0_SEC30_Pos       (30U)
#define RISC_SECCFGR0_SEC30_Msk       (0x1UL << RISC_SECCFGR0_SEC30_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR0_SEC30           RISC_SECCFGR0_SEC30_Msk
#define RISC_SECCFGR0_SEC31_Pos       (31U)
#define RISC_SECCFGR0_SEC31_Msk       (0x1UL << RISC_SECCFGR0_SEC31_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR0_SEC31           RISC_SECCFGR0_SEC31_Msk

/*******************  Bits definition for RISC_SECCFGR1 register **************/
#define RISC_SECCFGR1_SEC32_Pos       (0U)
#define RISC_SECCFGR1_SEC32_Msk       (0x1UL << RISC_SECCFGR1_SEC32_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR1_SEC32           RISC_SECCFGR1_SEC32_Msk
#define RISC_SECCFGR1_SEC33_Pos       (1U)
#define RISC_SECCFGR1_SEC33_Msk       (0x1UL << RISC_SECCFGR1_SEC33_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR1_SEC33           RISC_SECCFGR1_SEC33_Msk
#define RISC_SECCFGR1_SEC34_Pos       (2U)
#define RISC_SECCFGR1_SEC34_Msk       (0x1UL << RISC_SECCFGR1_SEC34_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR1_SEC34           RISC_SECCFGR1_SEC34_Msk
#define RISC_SECCFGR1_SEC35_Pos       (3U)
#define RISC_SECCFGR1_SEC35_Msk       (0x1UL << RISC_SECCFGR1_SEC35_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR1_SEC35           RISC_SECCFGR1_SEC35_Msk
#define RISC_SECCFGR1_SEC36_Pos       (4U)
#define RISC_SECCFGR1_SEC36_Msk       (0x1UL << RISC_SECCFGR1_SEC36_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR1_SEC36           RISC_SECCFGR1_SEC36_Msk
#define RISC_SECCFGR1_SEC37_Pos       (5U)
#define RISC_SECCFGR1_SEC37_Msk       (0x1UL << RISC_SECCFGR1_SEC37_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR1_SEC37           RISC_SECCFGR1_SEC37_Msk
#define RISC_SECCFGR1_SEC38_Pos       (6U)
#define RISC_SECCFGR1_SEC38_Msk       (0x1UL << RISC_SECCFGR1_SEC38_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR1_SEC38           RISC_SECCFGR1_SEC38_Msk
#define RISC_SECCFGR1_SEC39_Pos       (7U)
#define RISC_SECCFGR1_SEC39_Msk       (0x1UL << RISC_SECCFGR1_SEC39_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR1_SEC39           RISC_SECCFGR1_SEC39_Msk
#define RISC_SECCFGR1_SEC40_Pos       (8U)
#define RISC_SECCFGR1_SEC40_Msk       (0x1UL << RISC_SECCFGR1_SEC40_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR1_SEC40           RISC_SECCFGR1_SEC40_Msk
#define RISC_SECCFGR1_SEC41_Pos       (9U)
#define RISC_SECCFGR1_SEC41_Msk       (0x1UL << RISC_SECCFGR1_SEC41_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR1_SEC41           RISC_SECCFGR1_SEC41_Msk
#define RISC_SECCFGR1_SEC42_Pos       (10U)
#define RISC_SECCFGR1_SEC42_Msk       (0x1UL << RISC_SECCFGR1_SEC42_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR1_SEC42           RISC_SECCFGR1_SEC42_Msk
#define RISC_SECCFGR1_SEC43_Pos       (11U)
#define RISC_SECCFGR1_SEC43_Msk       (0x1UL << RISC_SECCFGR1_SEC43_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR1_SEC43           RISC_SECCFGR1_SEC43_Msk
#define RISC_SECCFGR1_SEC44_Pos       (12U)
#define RISC_SECCFGR1_SEC44_Msk       (0x1UL << RISC_SECCFGR1_SEC44_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR1_SEC44           RISC_SECCFGR1_SEC44_Msk
#define RISC_SECCFGR1_SEC45_Pos       (13U)
#define RISC_SECCFGR1_SEC45_Msk       (0x1UL << RISC_SECCFGR1_SEC45_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR1_SEC45           RISC_SECCFGR1_SEC45_Msk
#define RISC_SECCFGR1_SEC46_Pos       (14U)
#define RISC_SECCFGR1_SEC46_Msk       (0x1UL << RISC_SECCFGR1_SEC46_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR1_SEC46           RISC_SECCFGR1_SEC46_Msk
#define RISC_SECCFGR1_SEC47_Pos       (15U)
#define RISC_SECCFGR1_SEC47_Msk       (0x1UL << RISC_SECCFGR1_SEC47_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR1_SEC47           RISC_SECCFGR1_SEC47_Msk
#define RISC_SECCFGR1_SEC48_Pos       (16U)
#define RISC_SECCFGR1_SEC48_Msk       (0x1UL << RISC_SECCFGR1_SEC48_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR1_SEC48           RISC_SECCFGR1_SEC48_Msk
#define RISC_SECCFGR1_SEC49_Pos       (17U)
#define RISC_SECCFGR1_SEC49_Msk       (0x1UL << RISC_SECCFGR1_SEC49_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR1_SEC49           RISC_SECCFGR1_SEC49_Msk
#define RISC_SECCFGR1_SEC50_Pos       (18U)
#define RISC_SECCFGR1_SEC50_Msk       (0x1UL << RISC_SECCFGR1_SEC50_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR1_SEC50           RISC_SECCFGR1_SEC50_Msk
#define RISC_SECCFGR1_SEC51_Pos       (19U)
#define RISC_SECCFGR1_SEC51_Msk       (0x1UL << RISC_SECCFGR1_SEC51_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR1_SEC51           RISC_SECCFGR1_SEC51_Msk
#define RISC_SECCFGR1_SEC52_Pos       (20U)
#define RISC_SECCFGR1_SEC52_Msk       (0x1UL << RISC_SECCFGR1_SEC52_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR1_SEC52           RISC_SECCFGR1_SEC52_Msk
#define RISC_SECCFGR1_SEC53_Pos       (21U)
#define RISC_SECCFGR1_SEC53_Msk       (0x1UL << RISC_SECCFGR1_SEC53_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR1_SEC53           RISC_SECCFGR1_SEC53_Msk
#define RISC_SECCFGR1_SEC54_Pos       (22U)
#define RISC_SECCFGR1_SEC54_Msk       (0x1UL << RISC_SECCFGR1_SEC54_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR1_SEC54           RISC_SECCFGR1_SEC54_Msk
#define RISC_SECCFGR1_SEC55_Pos       (23U)
#define RISC_SECCFGR1_SEC55_Msk       (0x1UL << RISC_SECCFGR1_SEC55_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR1_SEC55           RISC_SECCFGR1_SEC55_Msk
#define RISC_SECCFGR1_SEC56_Pos       (24U)
#define RISC_SECCFGR1_SEC56_Msk       (0x1UL << RISC_SECCFGR1_SEC56_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR1_SEC56           RISC_SECCFGR1_SEC56_Msk
#define RISC_SECCFGR1_SEC57_Pos       (25U)
#define RISC_SECCFGR1_SEC57_Msk       (0x1UL << RISC_SECCFGR1_SEC57_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR1_SEC57           RISC_SECCFGR1_SEC57_Msk
#define RISC_SECCFGR1_SEC58_Pos       (26U)
#define RISC_SECCFGR1_SEC58_Msk       (0x1UL << RISC_SECCFGR1_SEC58_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR1_SEC58           RISC_SECCFGR1_SEC58_Msk
#define RISC_SECCFGR1_SEC59_Pos       (27U)
#define RISC_SECCFGR1_SEC59_Msk       (0x1UL << RISC_SECCFGR1_SEC59_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR1_SEC59           RISC_SECCFGR1_SEC59_Msk
#define RISC_SECCFGR1_SEC60_Pos       (28U)
#define RISC_SECCFGR1_SEC60_Msk       (0x1UL << RISC_SECCFGR1_SEC60_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR1_SEC60           RISC_SECCFGR1_SEC60_Msk
#define RISC_SECCFGR1_SEC61_Pos       (29U)
#define RISC_SECCFGR1_SEC61_Msk       (0x1UL << RISC_SECCFGR1_SEC61_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR1_SEC61           RISC_SECCFGR1_SEC61_Msk
#define RISC_SECCFGR1_SEC62_Pos       (30U)
#define RISC_SECCFGR1_SEC62_Msk       (0x1UL << RISC_SECCFGR1_SEC62_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR1_SEC62           RISC_SECCFGR1_SEC62_Msk
#define RISC_SECCFGR1_SEC63_Pos       (31U)
#define RISC_SECCFGR1_SEC63_Msk       (0x1UL << RISC_SECCFGR1_SEC63_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR1_SEC63           RISC_SECCFGR1_SEC63_Msk

/*******************  Bits definition for RISC_SECCFGR2 register **************/
#define RISC_SECCFGR2_SEC64_Pos       (0U)
#define RISC_SECCFGR2_SEC64_Msk       (0x1UL << RISC_SECCFGR2_SEC64_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR2_SEC64           RISC_SECCFGR2_SEC64_Msk
#define RISC_SECCFGR2_SEC65_Pos       (1U)
#define RISC_SECCFGR2_SEC65_Msk       (0x1UL << RISC_SECCFGR2_SEC65_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR2_SEC65           RISC_SECCFGR2_SEC65_Msk
#define RISC_SECCFGR2_SEC66_Pos       (2U)
#define RISC_SECCFGR2_SEC66_Msk       (0x1UL << RISC_SECCFGR2_SEC66_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR2_SEC66           RISC_SECCFGR2_SEC66_Msk
#define RISC_SECCFGR2_SEC67_Pos       (3U)
#define RISC_SECCFGR2_SEC67_Msk       (0x1UL << RISC_SECCFGR2_SEC67_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR2_SEC67           RISC_SECCFGR2_SEC67_Msk
#define RISC_SECCFGR2_SEC68_Pos       (4U)
#define RISC_SECCFGR2_SEC68_Msk       (0x1UL << RISC_SECCFGR2_SEC68_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR2_SEC68           RISC_SECCFGR2_SEC68_Msk
#define RISC_SECCFGR2_SEC69_Pos       (5U)
#define RISC_SECCFGR2_SEC69_Msk       (0x1UL << RISC_SECCFGR2_SEC69_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR2_SEC69           RISC_SECCFGR2_SEC69_Msk
#define RISC_SECCFGR2_SEC70_Pos       (6U)
#define RISC_SECCFGR2_SEC70_Msk       (0x1UL << RISC_SECCFGR2_SEC70_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR2_SEC70           RISC_SECCFGR2_SEC70_Msk
#define RISC_SECCFGR2_SEC71_Pos       (7U)
#define RISC_SECCFGR2_SEC71_Msk       (0x1UL << RISC_SECCFGR2_SEC71_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR2_SEC71            RISC_SECCFGR2_SEC71_Msk
#define RISC_SECCFGR2_SEC72_Pos       (8U)
#define RISC_SECCFGR2_SEC72_Msk       (0x1UL << RISC_SECCFGR2_SEC72_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR2_SEC72           RISC_SECCFGR2_SEC72_Msk
#define RISC_SECCFGR2_SEC73_Pos       (9U)
#define RISC_SECCFGR2_SEC73_Msk       (0x1UL << RISC_SECCFGR2_SEC73_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR2_SEC73           RISC_SECCFGR2_SEC73_Msk
#define RISC_SECCFGR2_SEC74_Pos       (10U)
#define RISC_SECCFGR2_SEC74_Msk       (0x1UL << RISC_SECCFGR2_SEC74_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR2_SEC74           RISC_SECCFGR2_SEC74_Msk
#define RISC_SECCFGR2_SEC75_Pos       (11U)
#define RISC_SECCFGR2_SEC75_Msk       (0x1UL << RISC_SECCFGR2_SEC75_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR2_SEC75           RISC_SECCFGR2_SEC75_Msk
#define RISC_SECCFGR2_SEC76_Pos       (12U)
#define RISC_SECCFGR2_SEC76_Msk       (0x1UL << RISC_SECCFGR2_SEC76_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR2_SEC76           RISC_SECCFGR2_SEC76_Msk
#define RISC_SECCFGR2_SEC77_Pos       (13U)
#define RISC_SECCFGR2_SEC77_Msk       (0x1UL << RISC_SECCFGR2_SEC77_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR2_SEC77           RISC_SECCFGR2_SEC77_Msk
#define RISC_SECCFGR2_SEC78_Pos       (14U)
#define RISC_SECCFGR2_SEC78_Msk       (0x1UL << RISC_SECCFGR2_SEC78_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR2_SEC78           RISC_SECCFGR2_SEC78_Msk
#define RISC_SECCFGR2_SEC79_Pos       (15U)
#define RISC_SECCFGR2_SEC79_Msk       (0x1UL << RISC_SECCFGR2_SEC79_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR2_SEC79           RISC_SECCFGR2_SEC79_Msk
#define RISC_SECCFGR2_SEC80_Pos       (16U)
#define RISC_SECCFGR2_SEC80_Msk       (0x1UL << RISC_SECCFGR2_SEC80_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR2_SEC80           RISC_SECCFGR2_SEC80_Msk
#define RISC_SECCFGR2_SEC81_Pos       (17U)
#define RISC_SECCFGR2_SEC81_Msk       (0x1UL << RISC_SECCFGR2_SEC81_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR2_SEC81           RISC_SECCFGR2_SEC81_Msk
#define RISC_SECCFGR2_SEC82_Pos       (18U)
#define RISC_SECCFGR2_SEC82_Msk       (0x1UL << RISC_SECCFGR2_SEC82_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR2_SEC82           RISC_SECCFGR2_SEC82_Msk
#define RISC_SECCFGR2_SEC83_Pos       (19U)
#define RISC_SECCFGR2_SEC83_Msk       (0x1UL << RISC_SECCFGR2_SEC83_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR2_SEC83           RISC_SECCFGR2_SEC83_Msk
#define RISC_SECCFGR2_SEC84_Pos       (20U)
#define RISC_SECCFGR2_SEC84_Msk       (0x1UL << RISC_SECCFGR2_SEC84_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR2_SEC84           RISC_SECCFGR2_SEC84_Msk
#define RISC_SECCFGR2_SEC85_Pos       (21U)
#define RISC_SECCFGR2_SEC85_Msk       (0x1UL << RISC_SECCFGR2_SEC85_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR2_SEC85           RISC_SECCFGR2_SEC85_Msk
#define RISC_SECCFGR2_SEC86_Pos       (22U)
#define RISC_SECCFGR2_SEC86_Msk       (0x1UL << RISC_SECCFGR2_SEC86_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR2_SEC86           RISC_SECCFGR2_SEC86_Msk
#define RISC_SECCFGR2_SEC87_Pos       (23U)
#define RISC_SECCFGR2_SEC87_Msk       (0x1UL << RISC_SECCFGR2_SEC87_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR2_SEC87           RISC_SECCFGR2_SEC87_Msk
#define RISC_SECCFGR2_SEC88_Pos       (24U)
#define RISC_SECCFGR2_SEC88_Msk       (0x1UL << RISC_SECCFGR2_SEC88_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR2_SEC88           RISC_SECCFGR2_SEC88_Msk
#define RISC_SECCFGR2_SEC89_Pos       (25U)
#define RISC_SECCFGR2_SEC89_Msk       (0x1UL << RISC_SECCFGR2_SEC89_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR2_SEC89           RISC_SECCFGR2_SEC89_Msk
#define RISC_SECCFGR2_SEC90_Pos       (26U)
#define RISC_SECCFGR2_SEC90_Msk       (0x1UL << RISC_SECCFGR2_SEC90_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR2_SEC90           RISC_SECCFGR2_SEC90_Msk
#define RISC_SECCFGR2_SEC91_Pos       (27U)
#define RISC_SECCFGR2_SEC91_Msk       (0x1UL << RISC_SECCFGR2_SEC91_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR2_SEC91           RISC_SECCFGR2_SEC91_Msk
#define RISC_SECCFGR2_SEC92_Pos       (28U)
#define RISC_SECCFGR2_SEC92_Msk       (0x1UL << RISC_SECCFGR2_SEC92_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR2_SEC92           RISC_SECCFGR2_SEC92_Msk
#define RISC_SECCFGR2_SEC93_Pos       (29U)
#define RISC_SECCFGR2_SEC93_Msk       (0x1UL << RISC_SECCFGR2_SEC93_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR2_SEC93           RISC_SECCFGR2_SEC93_Msk
#define RISC_SECCFGR2_SEC94_Pos       (30U)
#define RISC_SECCFGR2_SEC94_Msk       (0x1UL << RISC_SECCFGR2_SEC94_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR2_SEC94           RISC_SECCFGR2_SEC94_Msk
#define RISC_SECCFGR2_SEC95_Pos       (31U)
#define RISC_SECCFGR2_SEC95_Msk       (0x1UL << RISC_SECCFGR2_SEC95_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR2_SEC95           RISC_SECCFGR2_SEC95_Msk

/*******************  Bits definition for RISC_SECCFGR3 register **************/
#define RISC_SECCFGR3_SEC96_Pos       (0U)
#define RISC_SECCFGR3_SEC96_Msk       (0x1UL << RISC_SECCFGR3_SEC96_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR3_SEC96           RISC_SECCFGR3_SEC96_Msk
#define RISC_SECCFGR3_SEC97_Pos       (1U)
#define RISC_SECCFGR3_SEC97_Msk       (0x1UL << RISC_SECCFGR3_SEC97_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR3_SEC97           RISC_SECCFGR3_SEC97_Msk
#define RISC_SECCFGR3_SEC98_Pos       (2U)
#define RISC_SECCFGR3_SEC98_Msk       (0x1UL << RISC_SECCFGR3_SEC98_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR3_SEC98           RISC_SECCFGR3_SEC98_Msk
#define RISC_SECCFGR3_SEC99_Pos       (3U)
#define RISC_SECCFGR3_SEC99_Msk       (0x1UL << RISC_SECCFGR3_SEC99_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR3_SEC99           RISC_SECCFGR3_SEC99_Msk
#define RISC_SECCFGR3_SEC100_Pos      (4U)
#define RISC_SECCFGR3_SEC100_Msk      (0x1UL << RISC_SECCFGR3_SEC100_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR3_SEC100          RISC_SECCFGR3_SEC100_Msk
#define RISC_SECCFGR3_SEC101_Pos      (5U)
#define RISC_SECCFGR3_SEC101_Msk      (0x1UL << RISC_SECCFGR3_SEC101_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR3_SEC101          RISC_SECCFGR3_SEC101_Msk
#define RISC_SECCFGR3_SEC102_Pos      (6U)
#define RISC_SECCFGR3_SEC102_Msk      (0x1UL << RISC_SECCFGR3_SEC102_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR3_SEC102          RISC_SECCFGR3_SEC102_Msk
#define RISC_SECCFGR3_SEC103_Pos      (7U)
#define RISC_SECCFGR3_SEC103_Msk      (0x1UL << RISC_SECCFGR3_SEC103_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR3_SEC103          RISC_SECCFGR3_SEC103_Msk
#define RISC_SECCFGR3_SEC104_Pos      (8U)
#define RISC_SECCFGR3_SEC104_Msk      (0x1UL << RISC_SECCFGR3_SEC104_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR3_SEC104          RISC_SECCFGR3_SEC104_Msk
#define RISC_SECCFGR3_SEC105_Pos      (9U)
#define RISC_SECCFGR3_SEC105_Msk      (0x1UL << RISC_SECCFGR3_SEC105_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR3_SEC105          RISC_SECCFGR3_SEC105_Msk
#define RISC_SECCFGR3_SEC106_Pos      (10U)
#define RISC_SECCFGR3_SEC106_Msk      (0x1UL << RISC_SECCFGR3_SEC106_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR3_SEC106          RISC_SECCFGR3_SEC106_Msk
#define RISC_SECCFGR3_SEC107_Pos      (11U)
#define RISC_SECCFGR3_SEC107_Msk      (0x1UL << RISC_SECCFGR3_SEC107_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR3_SEC107          RISC_SECCFGR3_SEC107_Msk
#define RISC_SECCFGR3_SEC108_Pos      (12U)
#define RISC_SECCFGR3_SEC108_Msk      (0x1UL << RISC_SECCFGR3_SEC108_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR3_SEC108          RISC_SECCFGR3_SEC108_Msk
#define RISC_SECCFGR3_SEC109_Pos      (13U)
#define RISC_SECCFGR3_SEC109_Msk      (0x1UL << RISC_SECCFGR3_SEC109_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR3_SEC109          RISC_SECCFGR3_SEC109_Msk
#define RISC_SECCFGR3_SEC110_Pos      (14U)
#define RISC_SECCFGR3_SEC110_Msk      (0x1UL << RISC_SECCFGR3_SEC110_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR3_SEC110          RISC_SECCFGR3_SEC110_Msk
#define RISC_SECCFGR3_SEC111_Pos      (15U)
#define RISC_SECCFGR3_SEC111_Msk      (0x1UL << RISC_SECCFGR3_SEC111_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR3_SEC111          RISC_SECCFGR3_SEC111_Msk
#define RISC_SECCFGR3_SEC112_Pos      (16U)
#define RISC_SECCFGR3_SEC112_Msk      (0x1UL << RISC_SECCFGR3_SEC112_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR3_SEC112          RISC_SECCFGR3_SEC112_Msk
#define RISC_SECCFGR3_SEC113_Pos      (17U)
#define RISC_SECCFGR3_SEC113_Msk      (0x1UL << RISC_SECCFGR3_SEC113_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR3_SEC113          RISC_SECCFGR3_SEC113_Msk
#define RISC_SECCFGR3_SEC114_Pos      (18U)
#define RISC_SECCFGR3_SEC114_Msk      (0x1UL << RISC_SECCFGR3_SEC114_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR3_SEC114          RISC_SECCFGR3_SEC114_Msk
#define RISC_SECCFGR3_SEC115_Pos      (19U)
#define RISC_SECCFGR3_SEC115_Msk      (0x1UL << RISC_SECCFGR3_SEC115_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR3_SEC115          RISC_SECCFGR3_SEC115_Msk
#define RISC_SECCFGR3_SEC116_Pos      (20U)
#define RISC_SECCFGR3_SEC116_Msk      (0x1UL << RISC_SECCFGR3_SEC116_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR3_SEC116          RISC_SECCFGR3_SEC116_Msk
#define RISC_SECCFGR3_SEC117_Pos      (21U)
#define RISC_SECCFGR3_SEC117_Msk      (0x1UL << RISC_SECCFGR3_SEC117_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR3_SEC117          RISC_SECCFGR3_SEC117_Msk
#define RISC_SECCFGR3_SEC118_Pos      (22U)
#define RISC_SECCFGR3_SEC118_Msk      (0x1UL << RISC_SECCFGR3_SEC118_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR3_SEC118          RISC_SECCFGR3_SEC118_Msk
#define RISC_SECCFGR3_SEC119_Pos      (23U)
#define RISC_SECCFGR3_SEC119_Msk      (0x1UL << RISC_SECCFGR3_SEC119_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR3_SEC119          RISC_SECCFGR3_SEC119_Msk
#define RISC_SECCFGR3_SEC120_Pos      (24U)
#define RISC_SECCFGR3_SEC120_Msk      (0x1UL << RISC_SECCFGR3_SEC120_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR3_SEC120          RISC_SECCFGR3_SEC120_Msk
#define RISC_SECCFGR3_SEC121_Pos      (25U)
#define RISC_SECCFGR3_SEC121_Msk      (0x1UL << RISC_SECCFGR3_SEC121_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR3_SEC121          RISC_SECCFGR3_SEC121_Msk
#define RISC_SECCFGR3_SEC122_Pos      (26U)
#define RISC_SECCFGR3_SEC122_Msk      (0x1UL << RISC_SECCFGR3_SEC122_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR3_SEC122          RISC_SECCFGR3_SEC122_Msk
#define RISC_SECCFGR3_SEC123_Pos      (27U)
#define RISC_SECCFGR3_SEC123_Msk      (0x1UL << RISC_SECCFGR3_SEC123_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR3_SEC123          RISC_SECCFGR3_SEC123_Msk
#define RISC_SECCFGR3_SEC124_Pos      (28U)
#define RISC_SECCFGR3_SEC124_Msk      (0x1UL << RISC_SECCFGR3_SEC124_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR3_SEC124          RISC_SECCFGR3_SEC124_Msk
#define RISC_SECCFGR3_SEC125_Pos      (29U)
#define RISC_SECCFGR3_SEC125_Msk      (0x1UL << RISC_SECCFGR3_SEC125_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR3_SEC125          RISC_SECCFGR3_SEC125_Msk
#define RISC_SECCFGR3_SEC126_Pos      (30U)
#define RISC_SECCFGR3_SEC126_Msk      (0x1UL << RISC_SECCFGR3_SEC126_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR3_SEC126          RISC_SECCFGR3_SEC126_Msk
#define RISC_SECCFGR3_SEC127_Pos      (31U)
#define RISC_SECCFGR3_SEC127_Msk      (0x1UL << RISC_SECCFGR3_SEC127_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR3_SEC127          RISC_SECCFGR3_SEC127_Msk

/*******************  Bits definition for RISC_SECCFGR4 register **************/
#define RISC_SECCFGR4_SEC128_Pos      (0U)
#define RISC_SECCFGR4_SEC128_Msk      (0x1UL << RISC_SECCFGR4_SEC128_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR4_SEC128          RISC_SECCFGR4_SEC128_Msk
#define RISC_SECCFGR4_SEC129_Pos      (1U)
#define RISC_SECCFGR4_SEC129_Msk      (0x1UL << RISC_SECCFGR4_SEC129_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR4_SEC129          RISC_SECCFGR4_SEC129_Msk
#define RISC_SECCFGR4_SEC130_Pos      (2U)
#define RISC_SECCFGR4_SEC130_Msk      (0x1UL << RISC_SECCFGR4_SEC130_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR4_SEC130          RISC_SECCFGR4_SEC130_Msk
#define RISC_SECCFGR4_SEC131_Pos      (3U)
#define RISC_SECCFGR4_SEC131_Msk      (0x1UL << RISC_SECCFGR4_SEC131_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR4_SEC131          RISC_SECCFGR4_SEC131_Msk
#define RISC_SECCFGR4_SEC132_Pos      (4U)
#define RISC_SECCFGR4_SEC132_Msk      (0x1UL << RISC_SECCFGR4_SEC132_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR4_SEC132          RISC_SECCFGR4_SEC132_Msk
#define RISC_SECCFGR4_SEC133_Pos      (5U)
#define RISC_SECCFGR4_SEC133_Msk      (0x1UL << RISC_SECCFGR4_SEC133_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR4_SEC133          RISC_SECCFGR4_SEC133_Msk
#define RISC_SECCFGR4_SEC134_Pos      (6U)
#define RISC_SECCFGR4_SEC134_Msk      (0x1UL << RISC_SECCFGR4_SEC134_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR4_SEC134          RISC_SECCFGR4_SEC134_Msk
#define RISC_SECCFGR4_SEC135_Pos      (7U)
#define RISC_SECCFGR4_SEC135_Msk      (0x1UL << RISC_SECCFGR4_SEC135_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR4_SEC135          RISC_SECCFGR4_SEC135_Msk
#define RISC_SECCFGR4_SEC136_Pos      (8U)
#define RISC_SECCFGR4_SEC136_Msk      (0x1UL << RISC_SECCFGR4_SEC136_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR4_SEC136          RISC_SECCFGR4_SEC136_Msk
#define RISC_SECCFGR4_SEC137_Pos      (9U)
#define RISC_SECCFGR4_SEC137_Msk      (0x1UL << RISC_SECCFGR4_SEC137_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR4_SEC137          RISC_SECCFGR4_SEC137_Msk
#define RISC_SECCFGR4_SEC138_Pos      (10U)
#define RISC_SECCFGR4_SEC138_Msk      (0x1UL << RISC_SECCFGR4_SEC138_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR4_SEC138          RISC_SECCFGR4_SEC138_Msk
#define RISC_SECCFGR4_SEC139_Pos      (11U)
#define RISC_SECCFGR4_SEC139_Msk      (0x1UL << RISC_SECCFGR4_SEC139_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR4_SEC139          RISC_SECCFGR4_SEC139_Msk
#define RISC_SECCFGR4_SEC140_Pos      (12U)
#define RISC_SECCFGR4_SEC140_Msk      (0x1UL << RISC_SECCFGR4_SEC140_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR4_SEC140          RISC_SECCFGR4_SEC140_Msk
#define RISC_SECCFGR4_SEC141_Pos      (13U)
#define RISC_SECCFGR4_SEC141_Msk      (0x1UL << RISC_SECCFGR4_SEC141_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR4_SEC141          RISC_SECCFGR4_SEC141_Msk
#define RISC_SECCFGR4_SEC142_Pos      (14U)
#define RISC_SECCFGR4_SEC142_Msk      (0x1UL << RISC_SECCFGR4_SEC142_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR4_SEC142          RISC_SECCFGR4_SEC142_Msk
#define RISC_SECCFGR4_SEC143_Pos      (15U)
#define RISC_SECCFGR4_SEC143_Msk      (0x1UL << RISC_SECCFGR4_SEC143_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR4_SEC143          RISC_SECCFGR4_SEC143_Msk
#define RISC_SECCFGR4_SEC144_Pos      (16U)
#define RISC_SECCFGR4_SEC144_Msk      (0x1UL << RISC_SECCFGR4_SEC144_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR4_SEC144          RISC_SECCFGR4_SEC144_Msk
#define RISC_SECCFGR4_SEC145_Pos      (17U)
#define RISC_SECCFGR4_SEC145_Msk      (0x1UL << RISC_SECCFGR4_SEC145_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR4_SEC145          RISC_SECCFGR4_SEC145_Msk
#define RISC_SECCFGR4_SEC146_Pos      (18U)
#define RISC_SECCFGR4_SEC146_Msk      (0x1UL << RISC_SECCFGR4_SEC146_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR4_SEC146          RISC_SECCFGR4_SEC146_Msk
#define RISC_SECCFGR4_SEC147_Pos      (19U)
#define RISC_SECCFGR4_SEC147_Msk      (0x1UL << RISC_SECCFGR4_SEC147_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR4_SEC147          RISC_SECCFGR4_SEC147_Msk
#define RISC_SECCFGR4_SEC148_Pos      (20U)
#define RISC_SECCFGR4_SEC148_Msk      (0x1UL << RISC_SECCFGR4_SEC148_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR4_SEC148          RISC_SECCFGR4_SEC148_Msk
#define RISC_SECCFGR4_SEC149_Pos      (21U)
#define RISC_SECCFGR4_SEC149_Msk      (0x1UL << RISC_SECCFGR4_SEC149_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR4_SEC149          RISC_SECCFGR4_SEC149_Msk
#define RISC_SECCFGR4_SEC150_Pos      (22U)
#define RISC_SECCFGR4_SEC150_Msk      (0x1UL << RISC_SECCFGR4_SEC150_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR4_SEC150          RISC_SECCFGR4_SEC150_Msk
#define RISC_SECCFGR4_SEC151_Pos      (23U)
#define RISC_SECCFGR4_SEC151_Msk      (0x1UL << RISC_SECCFGR4_SEC151_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR4_SEC151          RISC_SECCFGR4_SEC151_Msk
#define RISC_SECCFGR4_SEC152_Pos      (24U)
#define RISC_SECCFGR4_SEC152_Msk      (0x1UL << RISC_SECCFGR4_SEC152_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR4_SEC152          RISC_SECCFGR4_SEC152_Msk
#define RISC_SECCFGR4_SEC153_Pos      (25U)
#define RISC_SECCFGR4_SEC153_Msk      (0x1UL << RISC_SECCFGR4_SEC153_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR4_SEC153          RISC_SECCFGR4_SEC153_Msk
#define RISC_SECCFGR4_SEC154_Pos      (26U)
#define RISC_SECCFGR4_SEC154_Msk      (0x1UL << RISC_SECCFGR4_SEC154_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR4_SEC154          RISC_SECCFGR4_SEC154_Msk
#define RISC_SECCFGR4_SEC155_Pos      (27U)
#define RISC_SECCFGR4_SEC155_Msk      (0x1UL << RISC_SECCFGR4_SEC155_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR4_SEC155          RISC_SECCFGR4_SEC155_Msk
#define RISC_SECCFGR4_SEC156_Pos      (28U)
#define RISC_SECCFGR4_SEC156_Msk      (0x1UL << RISC_SECCFGR4_SEC156_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR4_SEC156          RISC_SECCFGR4_SEC156_Msk
#define RISC_SECCFGR4_SEC157_Pos      (29U)
#define RISC_SECCFGR4_SEC157_Msk      (0x1UL << RISC_SECCFGR4_SEC157_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR4_SEC157          RISC_SECCFGR4_SEC157_Msk
#define RISC_SECCFGR4_SEC158_Pos      (30U)
#define RISC_SECCFGR4_SEC158_Msk      (0x1UL << RISC_SECCFGR4_SEC158_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR4_SEC158          RISC_SECCFGR4_SEC158_Msk
#define RISC_SECCFGR4_SEC159_Pos      (31U)
#define RISC_SECCFGR4_SEC159_Msk      (0x1UL << RISC_SECCFGR4_SEC159_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR4_SEC159          RISC_SECCFGR4_SEC159_Msk

/*******************  Bits definition for RISC_SECCFGR5 register **************/
#define RISC_SECCFGR5_SEC160_Pos      (0U)
#define RISC_SECCFGR5_SEC160_Msk      (0x1UL << RISC_SECCFGR5_SEC160_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR5_SEC160          RISC_SECCFGR5_SEC160_Msk
#define RISC_SECCFGR5_SEC161_Pos      (1U)
#define RISC_SECCFGR5_SEC161_Msk      (0x1UL << RISC_SECCFGR5_SEC161_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR5_SEC161          RISC_SECCFGR5_SEC161_Msk
#define RISC_SECCFGR5_SEC162_Pos      (2U)
#define RISC_SECCFGR5_SEC162_Msk      (0x1UL << RISC_SECCFGR5_SEC162_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR5_SEC162          RISC_SECCFGR5_SEC162_Msk
#define RISC_SECCFGR5_SEC163_Pos      (3U)
#define RISC_SECCFGR5_SEC163_Msk      (0x1UL << RISC_SECCFGR5_SEC163_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR5_SEC163          RISC_SECCFGR5_SEC163_Msk
#define RISC_SECCFGR5_SEC164_Pos      (4U)
#define RISC_SECCFGR5_SEC164_Msk      (0x1UL << RISC_SECCFGR5_SEC164_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR5_SEC164          RISC_SECCFGR5_SEC164_Msk
#define RISC_SECCFGR5_SEC165_Pos      (5U)
#define RISC_SECCFGR5_SEC165_Msk      (0x1UL << RISC_SECCFGR5_SEC165_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR5_SEC165          RISC_SECCFGR5_SEC165_Msk
#define RISC_SECCFGR5_SEC166_Pos      (6U)
#define RISC_SECCFGR5_SEC166_Msk      (0x1UL << RISC_SECCFGR5_SEC166_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR5_SEC166          RISC_SECCFGR5_SEC166_Msk
#define RISC_SECCFGR5_SEC167_Pos      (7U)
#define RISC_SECCFGR5_SEC167_Msk      (0x1UL << RISC_SECCFGR5_SEC167_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR5_SEC167          RISC_SECCFGR5_SEC167_Msk
#define RISC_SECCFGR5_SEC168_Pos      (8U)
#define RISC_SECCFGR5_SEC168_Msk      (0x1UL << RISC_SECCFGR5_SEC168_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR5_SEC168          RISC_SECCFGR5_SEC168_Msk
#define RISC_SECCFGR5_SEC169_Pos      (9U)
#define RISC_SECCFGR5_SEC169_Msk      (0x1UL << RISC_SECCFGR5_SEC169_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR5_SEC169          RISC_SECCFGR5_SEC169_Msk
#define RISC_SECCFGR5_SEC170_Pos      (10U)
#define RISC_SECCFGR5_SEC170_Msk      (0x1UL << RISC_SECCFGR5_SEC170_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR5_SEC170          RISC_SECCFGR5_SEC170_Msk
#define RISC_SECCFGR5_SEC171_Pos      (11U)
#define RISC_SECCFGR5_SEC171_Msk      (0x1UL << RISC_SECCFGR5_SEC171_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR5_SEC171          RISC_SECCFGR5_SEC171_Msk
#define RISC_SECCFGR5_SEC172_Pos      (12U)
#define RISC_SECCFGR5_SEC172_Msk      (0x1UL << RISC_SECCFGR5_SEC172_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR5_SEC172          RISC_SECCFGR5_SEC172_Msk
#define RISC_SECCFGR5_SEC173_Pos      (13U)
#define RISC_SECCFGR5_SEC173_Msk      (0x1UL << RISC_SECCFGR5_SEC173_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR5_SEC173          RISC_SECCFGR5_SEC173_Msk
#define RISC_SECCFGR5_SEC174_Pos      (14U)
#define RISC_SECCFGR5_SEC174_Msk      (0x1UL << RISC_SECCFGR5_SEC174_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR5_SEC174          RISC_SECCFGR5_SEC174_Msk
#define RISC_SECCFGR5_SEC175_Pos      (15U)
#define RISC_SECCFGR5_SEC175_Msk      (0x1UL << RISC_SECCFGR5_SEC175_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR5_SEC175          RISC_SECCFGR5_SEC175_Msk
#define RISC_SECCFGR5_SEC176_Pos      (16U)
#define RISC_SECCFGR5_SEC176_Msk      (0x1UL << RISC_SECCFGR5_SEC176_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR5_SEC176          RISC_SECCFGR5_SEC176_Msk
#define RISC_SECCFGR5_SEC177_Pos      (17U)
#define RISC_SECCFGR5_SEC177_Msk      (0x1UL << RISC_SECCFGR5_SEC177_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR5_SEC177          RISC_SECCFGR5_SEC177_Msk
#define RISC_SECCFGR5_SEC178_Pos      (18U)
#define RISC_SECCFGR5_SEC178_Msk      (0x1UL << RISC_SECCFGR5_SEC178_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR5_SEC178          RISC_SECCFGR5_SEC178_Msk
#define RISC_SECCFGR5_SEC179_Pos      (19U)
#define RISC_SECCFGR5_SEC179_Msk      (0x1UL << RISC_SECCFGR5_SEC179_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR5_SEC179          RISC_SECCFGR5_SEC179_Msk
#define RISC_SECCFGR5_SEC180_Pos      (20U)
#define RISC_SECCFGR5_SEC180_Msk      (0x1UL << RISC_SECCFGR5_SEC180_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR5_SEC180          RISC_SECCFGR5_SEC180_Msk
#define RISC_SECCFGR5_SEC181_Pos      (21U)
#define RISC_SECCFGR5_SEC181_Msk      (0x1UL << RISC_SECCFGR5_SEC181_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR5_SEC181          RISC_SECCFGR5_SEC181_Msk
#define RISC_SECCFGR5_SEC182_Pos      (22U)
#define RISC_SECCFGR5_SEC182_Msk      (0x1UL << RISC_SECCFGR5_SEC182_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR5_SEC182          RISC_SECCFGR5_SEC182_Msk
#define RISC_SECCFGR5_SEC183_Pos      (23U)
#define RISC_SECCFGR5_SEC183_Msk      (0x1UL << RISC_SECCFGR5_SEC183_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR5_SEC183          RISC_SECCFGR5_SEC183_Msk
#define RISC_SECCFGR5_SEC184_Pos      (24U)
#define RISC_SECCFGR5_SEC184_Msk      (0x1UL << RISC_SECCFGR5_SEC184_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR5_SEC184          RISC_SECCFGR5_SEC184_Msk
#define RISC_SECCFGR5_SEC185_Pos      (25U)
#define RISC_SECCFGR5_SEC185_Msk      (0x1UL << RISC_SECCFGR5_SEC185_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR5_SEC185          RISC_SECCFGR5_SEC185_Msk
#define RISC_SECCFGR5_SEC186_Pos      (26U)
#define RISC_SECCFGR5_SEC186_Msk      (0x1UL << RISC_SECCFGR5_SEC186_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR5_SEC186          RISC_SECCFGR5_SEC186_Msk
#define RISC_SECCFGR5_SEC187_Pos      (27U)
#define RISC_SECCFGR5_SEC187_Msk      (0x1UL << RISC_SECCFGR5_SEC187_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR5_SEC187          RISC_SECCFGR5_SEC187_Msk
#define RISC_SECCFGR5_SEC188_Pos      (28U)
#define RISC_SECCFGR5_SEC188_Msk      (0x1UL << RISC_SECCFGR5_SEC188_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR5_SEC188          RISC_SECCFGR5_SEC188_Msk
#define RISC_SECCFGR5_SEC189_Pos      (29U)
#define RISC_SECCFGR5_SEC189_Msk      (0x1UL << RISC_SECCFGR5_SEC189_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR5_SEC189          RISC_SECCFGR5_SEC189_Msk
#define RISC_SECCFGR5_SEC190_Pos      (30U)
#define RISC_SECCFGR5_SEC190_Msk      (0x1UL << RISC_SECCFGR5_SEC190_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR5_SEC190          RISC_SECCFGR5_SEC190_Msk
#define RISC_SECCFGR5_SEC191_Pos      (31U)
#define RISC_SECCFGR5_SEC191_Msk      (0x1UL << RISC_SECCFGR5_SEC191_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR5_SEC191          RISC_SECCFGR5_SEC191_Msk

/*******************  Bits definition for RISC_PRIVCFGR0 register *************/
#define RISC_PRIVCFGR0_PRIV0_Pos      (0U)
#define RISC_PRIVCFGR0_PRIV0_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV0_Pos)        /*!< 0x00000001 */
#define RISC_PRIVCFGR0_PRIV0          RISC_PRIVCFGR0_PRIV0_Msk
#define RISC_PRIVCFGR0_PRIV1_Pos      (1U)
#define RISC_PRIVCFGR0_PRIV1_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV1_Pos)        /*!< 0x00000002 */
#define RISC_PRIVCFGR0_PRIV1          RISC_PRIVCFGR0_PRIV1_Msk
#define RISC_PRIVCFGR0_PRIV2_Pos      (2U)
#define RISC_PRIVCFGR0_PRIV2_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV2_Pos)        /*!< 0x00000004 */
#define RISC_PRIVCFGR0_PRIV2          RISC_PRIVCFGR0_PRIV2_Msk
#define RISC_PRIVCFGR0_PRIV3_Pos      (3U)
#define RISC_PRIVCFGR0_PRIV3_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV3_Pos)        /*!< 0x00000008 */
#define RISC_PRIVCFGR0_PRIV3          RISC_PRIVCFGR0_PRIV3_Msk
#define RISC_PRIVCFGR0_PRIV4_Pos      (4U)
#define RISC_PRIVCFGR0_PRIV4_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV4_Pos)        /*!< 0x00000010 */
#define RISC_PRIVCFGR0_PRIV4          RISC_PRIVCFGR0_PRIV4_Msk
#define RISC_PRIVCFGR0_PRIV5_Pos      (5U)
#define RISC_PRIVCFGR0_PRIV5_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV5_Pos)        /*!< 0x00000020 */
#define RISC_PRIVCFGR0_PRIV5          RISC_PRIVCFGR0_PRIV5_Msk
#define RISC_PRIVCFGR0_PRIV6_Pos      (6U)
#define RISC_PRIVCFGR0_PRIV6_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV6_Pos)        /*!< 0x00000040 */
#define RISC_PRIVCFGR0_PRIV6          RISC_PRIVCFGR0_PRIV6_Msk
#define RISC_PRIVCFGR0_PRIV7_Pos      (7U)
#define RISC_PRIVCFGR0_PRIV7_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV7_Pos)        /*!< 0x00000080 */
#define RISC_PRIVCFGR0_PRIV7          RISC_PRIVCFGR0_PRIV7_Msk
#define RISC_PRIVCFGR0_PRIV8_Pos      (8U)
#define RISC_PRIVCFGR0_PRIV8_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV8_Pos)        /*!< 0x00000100 */
#define RISC_PRIVCFGR0_PRIV8          RISC_PRIVCFGR0_PRIV8_Msk
#define RISC_PRIVCFGR0_PRIV9_Pos      (9U)
#define RISC_PRIVCFGR0_PRIV9_Msk      (0x1UL << RISC_PRIVCFGR0_PRIV9_Pos)        /*!< 0x00000200 */
#define RISC_PRIVCFGR0_PRIV9          RISC_PRIVCFGR0_PRIV9_Msk
#define RISC_PRIVCFGR0_PRIV10_Pos     (10U)
#define RISC_PRIVCFGR0_PRIV10_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV10_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR0_PRIV10         RISC_PRIVCFGR0_PRIV10_Msk
#define RISC_PRIVCFGR0_PRIV11_Pos     (11U)
#define RISC_PRIVCFGR0_PRIV11_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV11_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR0_PRIV11         RISC_PRIVCFGR0_PRIV11_Msk
#define RISC_PRIVCFGR0_PRIV12_Pos     (12U)
#define RISC_PRIVCFGR0_PRIV12_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV12_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR0_PRIV12         RISC_PRIVCFGR0_PRIV12_Msk
#define RISC_PRIVCFGR0_PRIV13_Pos     (13U)
#define RISC_PRIVCFGR0_PRIV13_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV13_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR0_PRIV13         RISC_PRIVCFGR0_PRIV13_Msk
#define RISC_PRIVCFGR0_PRIV14_Pos     (14U)
#define RISC_PRIVCFGR0_PRIV14_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV14_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR0_PRIV14         RISC_PRIVCFGR0_PRIV14_Msk
#define RISC_PRIVCFGR0_PRIV15_Pos     (15U)
#define RISC_PRIVCFGR0_PRIV15_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV15_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR0_PRIV15         RISC_PRIVCFGR0_PRIV15_Msk
#define RISC_PRIVCFGR0_PRIV16_Pos     (16U)
#define RISC_PRIVCFGR0_PRIV16_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV16_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR0_PRIV16         RISC_PRIVCFGR0_PRIV16_Msk
#define RISC_PRIVCFGR0_PRIV17_Pos     (17U)
#define RISC_PRIVCFGR0_PRIV17_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV17_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR0_PRIV17         RISC_PRIVCFGR0_PRIV17_Msk
#define RISC_PRIVCFGR0_PRIV18_Pos     (18U)
#define RISC_PRIVCFGR0_PRIV18_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV18_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR0_PRIV18         RISC_PRIVCFGR0_PRIV18_Msk
#define RISC_PRIVCFGR0_PRIV19_Pos     (19U)
#define RISC_PRIVCFGR0_PRIV19_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV19_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR0_PRIV19         RISC_PRIVCFGR0_PRIV19_Msk
#define RISC_PRIVCFGR0_PRIV20_Pos     (20U)
#define RISC_PRIVCFGR0_PRIV20_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV20_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR0_PRIV20         RISC_PRIVCFGR0_PRIV20_Msk
#define RISC_PRIVCFGR0_PRIV21_Pos     (21U)
#define RISC_PRIVCFGR0_PRIV21_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV21_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR0_PRIV21         RISC_PRIVCFGR0_PRIV21_Msk
#define RISC_PRIVCFGR0_PRIV22_Pos     (22U)
#define RISC_PRIVCFGR0_PRIV22_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV22_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR0_PRIV22         RISC_PRIVCFGR0_PRIV22_Msk
#define RISC_PRIVCFGR0_PRIV23_Pos     (23U)
#define RISC_PRIVCFGR0_PRIV23_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV23_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR0_PRIV23         RISC_PRIVCFGR0_PRIV23_Msk
#define RISC_PRIVCFGR0_PRIV24_Pos     (24U)
#define RISC_PRIVCFGR0_PRIV24_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV24_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR0_PRIV24         RISC_PRIVCFGR0_PRIV24_Msk
#define RISC_PRIVCFGR0_PRIV25_Pos     (25U)
#define RISC_PRIVCFGR0_PRIV25_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV25_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR0_PRIV25         RISC_PRIVCFGR0_PRIV25_Msk
#define RISC_PRIVCFGR0_PRIV26_Pos     (26U)
#define RISC_PRIVCFGR0_PRIV26_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV26_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR0_PRIV26         RISC_PRIVCFGR0_PRIV26_Msk
#define RISC_PRIVCFGR0_PRIV27_Pos     (27U)
#define RISC_PRIVCFGR0_PRIV27_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV27_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR0_PRIV27         RISC_PRIVCFGR0_PRIV27_Msk
#define RISC_PRIVCFGR0_PRIV28_Pos     (28U)
#define RISC_PRIVCFGR0_PRIV28_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV28_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR0_PRIV28         RISC_PRIVCFGR0_PRIV28_Msk
#define RISC_PRIVCFGR0_PRIV29_Pos     (29U)
#define RISC_PRIVCFGR0_PRIV29_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV29_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR0_PRIV29         RISC_PRIVCFGR0_PRIV29_Msk
#define RISC_PRIVCFGR0_PRIV30_Pos     (30U)
#define RISC_PRIVCFGR0_PRIV30_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV30_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR0_PRIV30         RISC_PRIVCFGR0_PRIV30_Msk
#define RISC_PRIVCFGR0_PRIV31_Pos     (31U)
#define RISC_PRIVCFGR0_PRIV31_Msk     (0x1UL << RISC_PRIVCFGR0_PRIV31_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR0_PRIV31         RISC_PRIVCFGR0_PRIV31_Msk

/*******************  Bits definition for RISC_PRIVCFGR1 register *************/
#define RISC_PRIVCFGR1_PRIV32_Pos     (0U)
#define RISC_PRIVCFGR1_PRIV32_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV32_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR1_PRIV32         RISC_PRIVCFGR1_PRIV32_Msk
#define RISC_PRIVCFGR1_PRIV33_Pos     (1U)
#define RISC_PRIVCFGR1_PRIV33_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV33_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR1_PRIV33         RISC_PRIVCFGR1_PRIV33_Msk
#define RISC_PRIVCFGR1_PRIV34_Pos     (2U)
#define RISC_PRIVCFGR1_PRIV34_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV34_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR1_PRIV34         RISC_PRIVCFGR1_PRIV34_Msk
#define RISC_PRIVCFGR1_PRIV35_Pos     (3U)
#define RISC_PRIVCFGR1_PRIV35_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV35_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR1_PRIV35         RISC_PRIVCFGR1_PRIV35_Msk
#define RISC_PRIVCFGR1_PRIV36_Pos     (4U)
#define RISC_PRIVCFGR1_PRIV36_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV36_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR1_PRIV36         RISC_PRIVCFGR1_PRIV36_Msk
#define RISC_PRIVCFGR1_PRIV37_Pos     (5U)
#define RISC_PRIVCFGR1_PRIV37_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV37_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR1_PRIV37         RISC_PRIVCFGR1_PRIV37_Msk
#define RISC_PRIVCFGR1_PRIV38_Pos     (6U)
#define RISC_PRIVCFGR1_PRIV38_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV38_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR1_PRIV38         RISC_PRIVCFGR1_PRIV38_Msk
#define RISC_PRIVCFGR1_PRIV39_Pos     (7U)
#define RISC_PRIVCFGR1_PRIV39_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV39_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR1_PRIV39         RISC_PRIVCFGR1_PRIV39_Msk
#define RISC_PRIVCFGR1_PRIV40_Pos     (8U)
#define RISC_PRIVCFGR1_PRIV40_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV40_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR1_PRIV40         RISC_PRIVCFGR1_PRIV40_Msk
#define RISC_PRIVCFGR1_PRIV41_Pos     (9U)
#define RISC_PRIVCFGR1_PRIV41_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV41_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR1_PRIV41         RISC_PRIVCFGR1_PRIV41_Msk
#define RISC_PRIVCFGR1_PRIV42_Pos     (10U)
#define RISC_PRIVCFGR1_PRIV42_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV42_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR1_PRIV42         RISC_PRIVCFGR1_PRIV42_Msk
#define RISC_PRIVCFGR1_PRIV43_Pos     (11U)
#define RISC_PRIVCFGR1_PRIV43_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV43_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR1_PRIV43         RISC_PRIVCFGR1_PRIV43_Msk
#define RISC_PRIVCFGR1_PRIV44_Pos     (12U)
#define RISC_PRIVCFGR1_PRIV44_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV44_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR1_PRIV44         RISC_PRIVCFGR1_PRIV44_Msk
#define RISC_PRIVCFGR1_PRIV45_Pos     (13U)
#define RISC_PRIVCFGR1_PRIV45_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV45_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR1_PRIV45         RISC_PRIVCFGR1_PRIV45_Msk
#define RISC_PRIVCFGR1_PRIV46_Pos     (14U)
#define RISC_PRIVCFGR1_PRIV46_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV46_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR1_PRIV46         RISC_PRIVCFGR1_PRIV46_Msk
#define RISC_PRIVCFGR1_PRIV47_Pos     (15U)
#define RISC_PRIVCFGR1_PRIV47_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV47_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR1_PRIV47         RISC_PRIVCFGR1_PRIV47_Msk
#define RISC_PRIVCFGR1_PRIV48_Pos     (16U)
#define RISC_PRIVCFGR1_PRIV48_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV48_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR1_PRIV48         RISC_PRIVCFGR1_PRIV48_Msk
#define RISC_PRIVCFGR1_PRIV49_Pos     (17U)
#define RISC_PRIVCFGR1_PRIV49_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV49_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR1_PRIV49         RISC_PRIVCFGR1_PRIV49_Msk
#define RISC_PRIVCFGR1_PRIV50_Pos     (18U)
#define RISC_PRIVCFGR1_PRIV50_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV50_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR1_PRIV50         RISC_PRIVCFGR1_PRIV50_Msk
#define RISC_PRIVCFGR1_PRIV51_Pos     (19U)
#define RISC_PRIVCFGR1_PRIV51_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV51_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR1_PRIV51         RISC_PRIVCFGR1_PRIV51_Msk
#define RISC_PRIVCFGR1_PRIV52_Pos     (20U)
#define RISC_PRIVCFGR1_PRIV52_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV52_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR1_PRIV52         RISC_PRIVCFGR1_PRIV52_Msk
#define RISC_PRIVCFGR1_PRIV53_Pos     (21U)
#define RISC_PRIVCFGR1_PRIV53_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV53_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR1_PRIV53         RISC_PRIVCFGR1_PRIV53_Msk
#define RISC_PRIVCFGR1_PRIV54_Pos     (22U)
#define RISC_PRIVCFGR1_PRIV54_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV54_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR1_PRIV54         RISC_PRIVCFGR1_PRIV54_Msk
#define RISC_PRIVCFGR1_PRIV55_Pos     (23U)
#define RISC_PRIVCFGR1_PRIV55_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV55_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR1_PRIV55         RISC_PRIVCFGR1_PRIV55_Msk
#define RISC_PRIVCFGR1_PRIV56_Pos     (24U)
#define RISC_PRIVCFGR1_PRIV56_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV56_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR1_PRIV56         RISC_PRIVCFGR1_PRIV56_Msk
#define RISC_PRIVCFGR1_PRIV57_Pos     (25U)
#define RISC_PRIVCFGR1_PRIV57_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV57_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR1_PRIV57         RISC_PRIVCFGR1_PRIV57_Msk
#define RISC_PRIVCFGR1_PRIV58_Pos     (26U)
#define RISC_PRIVCFGR1_PRIV58_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV58_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR1_PRIV58         RISC_PRIVCFGR1_PRIV58_Msk
#define RISC_PRIVCFGR1_PRIV59_Pos     (27U)
#define RISC_PRIVCFGR1_PRIV59_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV59_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR1_PRIV59         RISC_PRIVCFGR1_PRIV59_Msk
#define RISC_PRIVCFGR1_PRIV60_Pos     (28U)
#define RISC_PRIVCFGR1_PRIV60_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV60_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR1_PRIV60         RISC_PRIVCFGR1_PRIV60_Msk
#define RISC_PRIVCFGR1_PRIV61_Pos     (29U)
#define RISC_PRIVCFGR1_PRIV61_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV61_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR1_PRIV61         RISC_PRIVCFGR1_PRIV61_Msk
#define RISC_PRIVCFGR1_PRIV62_Pos     (30U)
#define RISC_PRIVCFGR1_PRIV62_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV62_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR1_PRIV62         RISC_PRIVCFGR1_PRIV62_Msk
#define RISC_PRIVCFGR1_PRIV63_Pos     (31U)
#define RISC_PRIVCFGR1_PRIV63_Msk     (0x1UL << RISC_PRIVCFGR1_PRIV63_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR1_PRIV63         RISC_PRIVCFGR1_PRIV63_Msk

/*******************  Bits definition for RISC_PRIVCFGR2 register *************/
#define RISC_PRIVCFGR2_PRIV64_Pos     (0U)
#define RISC_PRIVCFGR2_PRIV64_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV64_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR2_PRIV64         RISC_PRIVCFGR2_PRIV64_Msk
#define RISC_PRIVCFGR2_PRIV65_Pos     (1U)
#define RISC_PRIVCFGR2_PRIV65_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV65_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR2_PRIV65         RISC_PRIVCFGR2_PRIV65_Msk
#define RISC_PRIVCFGR2_PRIV66_Pos     (2U)
#define RISC_PRIVCFGR2_PRIV66_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV66_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR2_PRIV66         RISC_PRIVCFGR2_PRIV66_Msk
#define RISC_PRIVCFGR2_PRIV67_Pos     (3U)
#define RISC_PRIVCFGR2_PRIV67_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV67_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR2_PRIV67         RISC_PRIVCFGR2_PRIV67_Msk
#define RISC_PRIVCFGR2_PRIV68_Pos     (4U)
#define RISC_PRIVCFGR2_PRIV68_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV68_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR2_PRIV68         RISC_PRIVCFGR2_PRIV68_Msk
#define RISC_PRIVCFGR2_PRIV69_Pos     (5U)
#define RISC_PRIVCFGR2_PRIV69_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV69_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR2_PRIV69         RISC_PRIVCFGR2_PRIV69_Msk
#define RISC_PRIVCFGR2_PRIV70_Pos     (6U)
#define RISC_PRIVCFGR2_PRIV70_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV70_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR2_PRIV70         RISC_PRIVCFGR2_PRIV70_Msk
#define RISC_PRIVCFGR2_PRIV71_Pos     (7U)
#define RISC_PRIVCFGR2_PRIV71_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV71_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR2_PRIV71          RISC_PRIVCFGR2_PRIV71_Msk
#define RISC_PRIVCFGR2_PRIV72_Pos     (8U)
#define RISC_PRIVCFGR2_PRIV72_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV72_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR2_PRIV72         RISC_PRIVCFGR2_PRIV72_Msk
#define RISC_PRIVCFGR2_PRIV73_Pos     (9U)
#define RISC_PRIVCFGR2_PRIV73_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV73_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR2_PRIV73         RISC_PRIVCFGR2_PRIV73_Msk
#define RISC_PRIVCFGR2_PRIV74_Pos     (10U)
#define RISC_PRIVCFGR2_PRIV74_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV74_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR2_PRIV74         RISC_PRIVCFGR2_PRIV74_Msk
#define RISC_PRIVCFGR2_PRIV75_Pos     (11U)
#define RISC_PRIVCFGR2_PRIV75_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV75_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR2_PRIV75         RISC_PRIVCFGR2_PRIV75_Msk
#define RISC_PRIVCFGR2_PRIV76_Pos     (12U)
#define RISC_PRIVCFGR2_PRIV76_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV76_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR2_PRIV76         RISC_PRIVCFGR2_PRIV76_Msk
#define RISC_PRIVCFGR2_PRIV77_Pos     (13U)
#define RISC_PRIVCFGR2_PRIV77_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV77_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR2_PRIV77         RISC_PRIVCFGR2_PRIV77_Msk
#define RISC_PRIVCFGR2_PRIV78_Pos     (14U)
#define RISC_PRIVCFGR2_PRIV78_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV78_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR2_PRIV78         RISC_PRIVCFGR2_PRIV78_Msk
#define RISC_PRIVCFGR2_PRIV79_Pos     (15U)
#define RISC_PRIVCFGR2_PRIV79_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV79_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR2_PRIV79         RISC_PRIVCFGR2_PRIV79_Msk
#define RISC_PRIVCFGR2_PRIV80_Pos     (16U)
#define RISC_PRIVCFGR2_PRIV80_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV80_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR2_PRIV80         RISC_PRIVCFGR2_PRIV80_Msk
#define RISC_PRIVCFGR2_PRIV81_Pos     (17U)
#define RISC_PRIVCFGR2_PRIV81_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV81_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR2_PRIV81         RISC_PRIVCFGR2_PRIV81_Msk
#define RISC_PRIVCFGR2_PRIV82_Pos     (18U)
#define RISC_PRIVCFGR2_PRIV82_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV82_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR2_PRIV82         RISC_PRIVCFGR2_PRIV82_Msk
#define RISC_PRIVCFGR2_PRIV83_Pos     (19U)
#define RISC_PRIVCFGR2_PRIV83_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV83_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR2_PRIV83         RISC_PRIVCFGR2_PRIV83_Msk
#define RISC_PRIVCFGR2_PRIV84_Pos     (20U)
#define RISC_PRIVCFGR2_PRIV84_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV84_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR2_PRIV84         RISC_PRIVCFGR2_PRIV84_Msk
#define RISC_PRIVCFGR2_PRIV85_Pos     (21U)
#define RISC_PRIVCFGR2_PRIV85_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV85_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR2_PRIV85         RISC_PRIVCFGR2_PRIV85_Msk
#define RISC_PRIVCFGR2_PRIV86_Pos     (22U)
#define RISC_PRIVCFGR2_PRIV86_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV86_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR2_PRIV86         RISC_PRIVCFGR2_PRIV86_Msk
#define RISC_PRIVCFGR2_PRIV87_Pos     (23U)
#define RISC_PRIVCFGR2_PRIV87_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV87_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR2_PRIV87         RISC_PRIVCFGR2_PRIV87_Msk
#define RISC_PRIVCFGR2_PRIV88_Pos     (24U)
#define RISC_PRIVCFGR2_PRIV88_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV88_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR2_PRIV88         RISC_PRIVCFGR2_PRIV88_Msk
#define RISC_PRIVCFGR2_PRIV89_Pos     (25U)
#define RISC_PRIVCFGR2_PRIV89_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV89_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR2_PRIV89         RISC_PRIVCFGR2_PRIV89_Msk
#define RISC_PRIVCFGR2_PRIV90_Pos     (26U)
#define RISC_PRIVCFGR2_PRIV90_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV90_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR2_PRIV90         RISC_PRIVCFGR2_PRIV90_Msk
#define RISC_PRIVCFGR2_PRIV91_Pos     (27U)
#define RISC_PRIVCFGR2_PRIV91_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV91_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR2_PRIV91         RISC_PRIVCFGR2_PRIV91_Msk
#define RISC_PRIVCFGR2_PRIV92_Pos     (28U)
#define RISC_PRIVCFGR2_PRIV92_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV92_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR2_PRIV92         RISC_PRIVCFGR2_PRIV92_Msk
#define RISC_PRIVCFGR2_PRIV93_Pos     (29U)
#define RISC_PRIVCFGR2_PRIV93_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV93_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR2_PRIV93         RISC_PRIVCFGR2_PRIV93_Msk
#define RISC_PRIVCFGR2_PRIV94_Pos     (30U)
#define RISC_PRIVCFGR2_PRIV94_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV94_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR2_PRIV94         RISC_PRIVCFGR2_PRIV94_Msk
#define RISC_PRIVCFGR2_PRIV95_Pos     (31U)
#define RISC_PRIVCFGR2_PRIV95_Msk     (0x1UL << RISC_PRIVCFGR2_PRIV95_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR2_PRIV95         RISC_PRIVCFGR2_PRIV95_Msk

/*******************  Bits definition for RISC_PRIVCFGR3 register *************/
#define RISC_PRIVCFGR3_PRIV96_Pos     (0U)
#define RISC_PRIVCFGR3_PRIV96_Msk     (0x1UL << RISC_PRIVCFGR3_PRIV96_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR3_PRIV96         RISC_PRIVCFGR3_PRIV96_Msk
#define RISC_PRIVCFGR3_PRIV97_Pos     (1U)
#define RISC_PRIVCFGR3_PRIV97_Msk     (0x1UL << RISC_PRIVCFGR3_PRIV97_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR3_PRIV97         RISC_PRIVCFGR3_PRIV97_Msk
#define RISC_PRIVCFGR3_PRIV98_Pos     (2U)
#define RISC_PRIVCFGR3_PRIV98_Msk     (0x1UL << RISC_PRIVCFGR3_PRIV98_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR3_PRIV98         RISC_PRIVCFGR3_PRIV98_Msk
#define RISC_PRIVCFGR3_PRIV99_Pos     (3U)
#define RISC_PRIVCFGR3_PRIV99_Msk     (0x1UL << RISC_PRIVCFGR3_PRIV99_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR3_PRIV99         RISC_PRIVCFGR3_PRIV99_Msk
#define RISC_PRIVCFGR3_PRIV100_Pos    (4U)
#define RISC_PRIVCFGR3_PRIV100_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV100_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR3_PRIV100        RISC_PRIVCFGR3_PRIV100_Msk
#define RISC_PRIVCFGR3_PRIV101_Pos    (5U)
#define RISC_PRIVCFGR3_PRIV101_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV101_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR3_PRIV101        RISC_PRIVCFGR3_PRIV101_Msk
#define RISC_PRIVCFGR3_PRIV102_Pos    (6U)
#define RISC_PRIVCFGR3_PRIV102_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV102_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR3_PRIV102        RISC_PRIVCFGR3_PRIV102_Msk
#define RISC_PRIVCFGR3_PRIV103_Pos    (7U)
#define RISC_PRIVCFGR3_PRIV103_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV103_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR3_PRIV103        RISC_PRIVCFGR3_PRIV103_Msk
#define RISC_PRIVCFGR3_PRIV104_Pos    (8U)
#define RISC_PRIVCFGR3_PRIV104_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV104_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR3_PRIV104        RISC_PRIVCFGR3_PRIV104_Msk
#define RISC_PRIVCFGR3_PRIV105_Pos    (9U)
#define RISC_PRIVCFGR3_PRIV105_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV105_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR3_PRIV105        RISC_PRIVCFGR3_PRIV105_Msk
#define RISC_PRIVCFGR3_PRIV106_Pos    (10U)
#define RISC_PRIVCFGR3_PRIV106_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV106_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR3_PRIV106        RISC_PRIVCFGR3_PRIV106_Msk
#define RISC_PRIVCFGR3_PRIV107_Pos    (11U)
#define RISC_PRIVCFGR3_PRIV107_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV107_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR3_PRIV107        RISC_PRIVCFGR3_PRIV107_Msk
#define RISC_PRIVCFGR3_PRIV108_Pos    (12U)
#define RISC_PRIVCFGR3_PRIV108_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV108_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR3_PRIV108        RISC_PRIVCFGR3_PRIV108_Msk
#define RISC_PRIVCFGR3_PRIV109_Pos    (13U)
#define RISC_PRIVCFGR3_PRIV109_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV109_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR3_PRIV109        RISC_PRIVCFGR3_PRIV109_Msk
#define RISC_PRIVCFGR3_PRIV110_Pos    (14U)
#define RISC_PRIVCFGR3_PRIV110_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV110_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR3_PRIV110        RISC_PRIVCFGR3_PRIV110_Msk
#define RISC_PRIVCFGR3_PRIV111_Pos    (15U)
#define RISC_PRIVCFGR3_PRIV111_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV111_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR3_PRIV111        RISC_PRIVCFGR3_PRIV111_Msk
#define RISC_PRIVCFGR3_PRIV112_Pos    (16U)
#define RISC_PRIVCFGR3_PRIV112_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV112_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR3_PRIV112        RISC_PRIVCFGR3_PRIV112_Msk
#define RISC_PRIVCFGR3_PRIV113_Pos    (17U)
#define RISC_PRIVCFGR3_PRIV113_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV113_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR3_PRIV113        RISC_PRIVCFGR3_PRIV113_Msk
#define RISC_PRIVCFGR3_PRIV114_Pos    (18U)
#define RISC_PRIVCFGR3_PRIV114_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV114_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR3_PRIV114        RISC_PRIVCFGR3_PRIV114_Msk
#define RISC_PRIVCFGR3_PRIV115_Pos    (19U)
#define RISC_PRIVCFGR3_PRIV115_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV115_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR3_PRIV115        RISC_PRIVCFGR3_PRIV115_Msk
#define RISC_PRIVCFGR3_PRIV116_Pos    (20U)
#define RISC_PRIVCFGR3_PRIV116_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV116_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR3_PRIV116        RISC_PRIVCFGR3_PRIV116_Msk
#define RISC_PRIVCFGR3_PRIV117_Pos    (21U)
#define RISC_PRIVCFGR3_PRIV117_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV117_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR3_PRIV117        RISC_PRIVCFGR3_PRIV117_Msk
#define RISC_PRIVCFGR3_PRIV118_Pos    (22U)
#define RISC_PRIVCFGR3_PRIV118_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV118_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR3_PRIV118        RISC_PRIVCFGR3_PRIV118_Msk
#define RISC_PRIVCFGR3_PRIV119_Pos    (23U)
#define RISC_PRIVCFGR3_PRIV119_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV119_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR3_PRIV119        RISC_PRIVCFGR3_PRIV119_Msk
#define RISC_PRIVCFGR3_PRIV120_Pos    (24U)
#define RISC_PRIVCFGR3_PRIV120_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV120_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR3_PRIV120        RISC_PRIVCFGR3_PRIV120_Msk
#define RISC_PRIVCFGR3_PRIV121_Pos    (25U)
#define RISC_PRIVCFGR3_PRIV121_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV121_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR3_PRIV121        RISC_PRIVCFGR3_PRIV121_Msk
#define RISC_PRIVCFGR3_PRIV122_Pos    (26U)
#define RISC_PRIVCFGR3_PRIV122_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV122_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR3_PRIV122        RISC_PRIVCFGR3_PRIV122_Msk
#define RISC_PRIVCFGR3_PRIV123_Pos    (27U)
#define RISC_PRIVCFGR3_PRIV123_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV123_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR3_PRIV123        RISC_PRIVCFGR3_PRIV123_Msk
#define RISC_PRIVCFGR3_PRIV124_Pos    (28U)
#define RISC_PRIVCFGR3_PRIV124_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV124_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR3_PRIV124        RISC_PRIVCFGR3_PRIV124_Msk
#define RISC_PRIVCFGR3_PRIV125_Pos    (29U)
#define RISC_PRIVCFGR3_PRIV125_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV125_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR3_PRIV125        RISC_PRIVCFGR3_PRIV125_Msk
#define RISC_PRIVCFGR3_PRIV126_Pos    (30U)
#define RISC_PRIVCFGR3_PRIV126_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV126_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR3_PRIV126        RISC_PRIVCFGR3_PRIV126_Msk
#define RISC_PRIVCFGR3_PRIV127_Pos    (31U)
#define RISC_PRIVCFGR3_PRIV127_Msk    (0x1UL << RISC_PRIVCFGR3_PRIV127_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR3_PRIV127        RISC_PRIVCFGR3_PRIV127_Msk

/*******************  Bits definition for RISC_PRIVCFGR4 register *************/
#define RISC_PRIVCFGR4_PRIV128_Pos    (0U)
#define RISC_PRIVCFGR4_PRIV128_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV128_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR4_PRIV128        RISC_PRIVCFGR4_PRIV128_Msk
#define RISC_PRIVCFGR4_PRIV129_Pos    (1U)
#define RISC_PRIVCFGR4_PRIV129_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV129_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR4_PRIV129        RISC_PRIVCFGR4_PRIV129_Msk
#define RISC_PRIVCFGR4_PRIV130_Pos    (2U)
#define RISC_PRIVCFGR4_PRIV130_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV130_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR4_PRIV130        RISC_PRIVCFGR4_PRIV130_Msk
#define RISC_PRIVCFGR4_PRIV131_Pos    (3U)
#define RISC_PRIVCFGR4_PRIV131_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV131_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR4_PRIV131        RISC_PRIVCFGR4_PRIV131_Msk
#define RISC_PRIVCFGR4_PRIV132_Pos    (4U)
#define RISC_PRIVCFGR4_PRIV132_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV132_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR4_PRIV132        RISC_PRIVCFGR4_PRIV132_Msk
#define RISC_PRIVCFGR4_PRIV133_Pos    (5U)
#define RISC_PRIVCFGR4_PRIV133_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV133_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR4_PRIV133        RISC_PRIVCFGR4_PRIV133_Msk
#define RISC_PRIVCFGR4_PRIV134_Pos    (6U)
#define RISC_PRIVCFGR4_PRIV134_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV134_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR4_PRIV134        RISC_PRIVCFGR4_PRIV134_Msk
#define RISC_PRIVCFGR4_PRIV135_Pos    (7U)
#define RISC_PRIVCFGR4_PRIV135_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV135_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR4_PRIV135        RISC_PRIVCFGR4_PRIV135_Msk
#define RISC_PRIVCFGR4_PRIV136_Pos    (8U)
#define RISC_PRIVCFGR4_PRIV136_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV136_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR4_PRIV136        RISC_PRIVCFGR4_PRIV136_Msk
#define RISC_PRIVCFGR4_PRIV137_Pos    (9U)
#define RISC_PRIVCFGR4_PRIV137_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV137_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR4_PRIV137        RISC_PRIVCFGR4_PRIV137_Msk
#define RISC_PRIVCFGR4_PRIV138_Pos    (10U)
#define RISC_PRIVCFGR4_PRIV138_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV138_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR4_PRIV138        RISC_PRIVCFGR4_PRIV138_Msk
#define RISC_PRIVCFGR4_PRIV139_Pos    (11U)
#define RISC_PRIVCFGR4_PRIV139_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV139_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR4_PRIV139        RISC_PRIVCFGR4_PRIV139_Msk
#define RISC_PRIVCFGR4_PRIV140_Pos    (12U)
#define RISC_PRIVCFGR4_PRIV140_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV140_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR4_PRIV140        RISC_PRIVCFGR4_PRIV140_Msk
#define RISC_PRIVCFGR4_PRIV141_Pos    (13U)
#define RISC_PRIVCFGR4_PRIV141_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV141_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR4_PRIV141        RISC_PRIVCFGR4_PRIV141_Msk
#define RISC_PRIVCFGR4_PRIV142_Pos    (14U)
#define RISC_PRIVCFGR4_PRIV142_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV142_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR4_PRIV142        RISC_PRIVCFGR4_PRIV142_Msk
#define RISC_PRIVCFGR4_PRIV143_Pos    (15U)
#define RISC_PRIVCFGR4_PRIV143_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV143_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR4_PRIV143        RISC_PRIVCFGR4_PRIV143_Msk
#define RISC_PRIVCFGR4_PRIV144_Pos    (16U)
#define RISC_PRIVCFGR4_PRIV144_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV144_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR4_PRIV144        RISC_PRIVCFGR4_PRIV144_Msk
#define RISC_PRIVCFGR4_PRIV145_Pos    (17U)
#define RISC_PRIVCFGR4_PRIV145_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV145_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR4_PRIV145        RISC_PRIVCFGR4_PRIV145_Msk
#define RISC_PRIVCFGR4_PRIV146_Pos    (18U)
#define RISC_PRIVCFGR4_PRIV146_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV146_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR4_PRIV146        RISC_PRIVCFGR4_PRIV146_Msk
#define RISC_PRIVCFGR4_PRIV147_Pos    (19U)
#define RISC_PRIVCFGR4_PRIV147_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV147_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR4_PRIV147        RISC_PRIVCFGR4_PRIV147_Msk
#define RISC_PRIVCFGR4_PRIV148_Pos    (20U)
#define RISC_PRIVCFGR4_PRIV148_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV148_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR4_PRIV148        RISC_PRIVCFGR4_PRIV148_Msk
#define RISC_PRIVCFGR4_PRIV149_Pos    (21U)
#define RISC_PRIVCFGR4_PRIV149_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV149_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR4_PRIV149        RISC_PRIVCFGR4_PRIV149_Msk
#define RISC_PRIVCFGR4_PRIV150_Pos    (22U)
#define RISC_PRIVCFGR4_PRIV150_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV150_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR4_PRIV150        RISC_PRIVCFGR4_PRIV150_Msk
#define RISC_PRIVCFGR4_PRIV151_Pos    (23U)
#define RISC_PRIVCFGR4_PRIV151_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV151_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR4_PRIV151        RISC_PRIVCFGR4_PRIV151_Msk
#define RISC_PRIVCFGR4_PRIV152_Pos    (24U)
#define RISC_PRIVCFGR4_PRIV152_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV152_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR4_PRIV152        RISC_PRIVCFGR4_PRIV152_Msk
#define RISC_PRIVCFGR4_PRIV153_Pos    (25U)
#define RISC_PRIVCFGR4_PRIV153_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV153_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR4_PRIV153        RISC_PRIVCFGR4_PRIV153_Msk
#define RISC_PRIVCFGR4_PRIV154_Pos    (26U)
#define RISC_PRIVCFGR4_PRIV154_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV154_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR4_PRIV154        RISC_PRIVCFGR4_PRIV154_Msk
#define RISC_PRIVCFGR4_PRIV155_Pos    (27U)
#define RISC_PRIVCFGR4_PRIV155_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV155_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR4_PRIV155        RISC_PRIVCFGR4_PRIV155_Msk
#define RISC_PRIVCFGR4_PRIV156_Pos    (28U)
#define RISC_PRIVCFGR4_PRIV156_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV156_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR4_PRIV156        RISC_PRIVCFGR4_PRIV156_Msk
#define RISC_PRIVCFGR4_PRIV157_Pos    (29U)
#define RISC_PRIVCFGR4_PRIV157_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV157_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR4_PRIV157        RISC_PRIVCFGR4_PRIV157_Msk
#define RISC_PRIVCFGR4_PRIV158_Pos    (30U)
#define RISC_PRIVCFGR4_PRIV158_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV158_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR4_PRIV158        RISC_PRIVCFGR4_PRIV158_Msk
#define RISC_PRIVCFGR4_PRIV159_Pos    (31U)
#define RISC_PRIVCFGR4_PRIV159_Msk    (0x1UL << RISC_PRIVCFGR4_PRIV159_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR4_PRIV159        RISC_PRIVCFGR4_PRIV159_Msk

/*******************  Bits definition for RISC_PRIVCFGR5 register *************/
#define RISC_PRIVCFGR5_PRIV160_Pos    (0U)
#define RISC_PRIVCFGR5_PRIV160_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV160_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR5_PRIV160        RISC_PRIVCFGR5_PRIV160_Msk
#define RISC_PRIVCFGR5_PRIV161_Pos    (1U)
#define RISC_PRIVCFGR5_PRIV161_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV161_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR5_PRIV161        RISC_PRIVCFGR5_PRIV161_Msk
#define RISC_PRIVCFGR5_PRIV162_Pos    (2U)
#define RISC_PRIVCFGR5_PRIV162_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV162_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR5_PRIV162        RISC_PRIVCFGR5_PRIV162_Msk
#define RISC_PRIVCFGR5_PRIV163_Pos    (3U)
#define RISC_PRIVCFGR5_PRIV163_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV163_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR5_PRIV163        RISC_PRIVCFGR5_PRIV163_Msk
#define RISC_PRIVCFGR5_PRIV164_Pos    (4U)
#define RISC_PRIVCFGR5_PRIV164_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV164_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR5_PRIV164        RISC_PRIVCFGR5_PRIV164_Msk
#define RISC_PRIVCFGR5_PRIV165_Pos    (5U)
#define RISC_PRIVCFGR5_PRIV165_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV165_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR5_PRIV165        RISC_PRIVCFGR5_PRIV165_Msk
#define RISC_PRIVCFGR5_PRIV166_Pos    (6U)
#define RISC_PRIVCFGR5_PRIV166_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV166_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR5_PRIV166        RISC_PRIVCFGR5_PRIV166_Msk
#define RISC_PRIVCFGR5_PRIV167_Pos    (7U)
#define RISC_PRIVCFGR5_PRIV167_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV167_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR5_PRIV167        RISC_PRIVCFGR5_PRIV167_Msk
#define RISC_PRIVCFGR5_PRIV168_Pos    (8U)
#define RISC_PRIVCFGR5_PRIV168_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV168_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR5_PRIV168        RISC_PRIVCFGR5_PRIV168_Msk
#define RISC_PRIVCFGR5_PRIV169_Pos    (9U)
#define RISC_PRIVCFGR5_PRIV169_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV169_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR5_PRIV169        RISC_PRIVCFGR5_PRIV169_Msk
#define RISC_PRIVCFGR5_PRIV170_Pos    (10U)
#define RISC_PRIVCFGR5_PRIV170_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV170_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR5_PRIV170        RISC_PRIVCFGR5_PRIV170_Msk
#define RISC_PRIVCFGR5_PRIV171_Pos    (11U)
#define RISC_PRIVCFGR5_PRIV171_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV171_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR5_PRIV171        RISC_PRIVCFGR5_PRIV171_Msk
#define RISC_PRIVCFGR5_PRIV172_Pos    (12U)
#define RISC_PRIVCFGR5_PRIV172_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV172_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR5_PRIV172        RISC_PRIVCFGR5_PRIV172_Msk
#define RISC_PRIVCFGR5_PRIV173_Pos    (13U)
#define RISC_PRIVCFGR5_PRIV173_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV173_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR5_PRIV173        RISC_PRIVCFGR5_PRIV173_Msk
#define RISC_PRIVCFGR5_PRIV174_Pos    (14U)
#define RISC_PRIVCFGR5_PRIV174_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV174_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR5_PRIV174        RISC_PRIVCFGR5_PRIV174_Msk
#define RISC_PRIVCFGR5_PRIV175_Pos    (15U)
#define RISC_PRIVCFGR5_PRIV175_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV175_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR5_PRIV175        RISC_PRIVCFGR5_PRIV175_Msk
#define RISC_PRIVCFGR5_PRIV176_Pos    (16U)
#define RISC_PRIVCFGR5_PRIV176_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV176_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR5_PRIV176        RISC_PRIVCFGR5_PRIV176_Msk
#define RISC_PRIVCFGR5_PRIV177_Pos    (17U)
#define RISC_PRIVCFGR5_PRIV177_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV177_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR5_PRIV177        RISC_PRIVCFGR5_PRIV177_Msk
#define RISC_PRIVCFGR5_PRIV178_Pos    (18U)
#define RISC_PRIVCFGR5_PRIV178_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV178_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR5_PRIV178        RISC_PRIVCFGR5_PRIV178_Msk
#define RISC_PRIVCFGR5_PRIV179_Pos    (19U)
#define RISC_PRIVCFGR5_PRIV179_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV179_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR5_PRIV179        RISC_PRIVCFGR5_PRIV179_Msk
#define RISC_PRIVCFGR5_PRIV180_Pos    (20U)
#define RISC_PRIVCFGR5_PRIV180_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV180_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR5_PRIV180        RISC_PRIVCFGR5_PRIV180_Msk
#define RISC_PRIVCFGR5_PRIV181_Pos    (21U)
#define RISC_PRIVCFGR5_PRIV181_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV181_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR5_PRIV181        RISC_PRIVCFGR5_PRIV181_Msk
#define RISC_PRIVCFGR5_PRIV182_Pos    (22U)
#define RISC_PRIVCFGR5_PRIV182_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV182_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR5_PRIV182        RISC_PRIVCFGR5_PRIV182_Msk
#define RISC_PRIVCFGR5_PRIV183_Pos    (23U)
#define RISC_PRIVCFGR5_PRIV183_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV183_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR5_PRIV183        RISC_PRIVCFGR5_PRIV183_Msk
#define RISC_PRIVCFGR5_PRIV184_Pos    (24U)
#define RISC_PRIVCFGR5_PRIV184_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV184_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR5_PRIV184        RISC_PRIVCFGR5_PRIV184_Msk
#define RISC_PRIVCFGR5_PRIV185_Pos    (25U)
#define RISC_PRIVCFGR5_PRIV185_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV185_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR5_PRIV185        RISC_PRIVCFGR5_PRIV185_Msk
#define RISC_PRIVCFGR5_PRIV186_Pos    (26U)
#define RISC_PRIVCFGR5_PRIV186_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV186_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR5_PRIV186        RISC_PRIVCFGR5_PRIV186_Msk
#define RISC_PRIVCFGR5_PRIV187_Pos    (27U)
#define RISC_PRIVCFGR5_PRIV187_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV187_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR5_PRIV187        RISC_PRIVCFGR5_PRIV187_Msk
#define RISC_PRIVCFGR5_PRIV188_Pos    (28U)
#define RISC_PRIVCFGR5_PRIV188_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV188_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR5_PRIV188        RISC_PRIVCFGR5_PRIV188_Msk
#define RISC_PRIVCFGR5_PRIV189_Pos    (29U)
#define RISC_PRIVCFGR5_PRIV189_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV189_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR5_PRIV189        RISC_PRIVCFGR5_PRIV189_Msk
#define RISC_PRIVCFGR5_PRIV190_Pos    (30U)
#define RISC_PRIVCFGR5_PRIV190_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV190_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR5_PRIV190        RISC_PRIVCFGR5_PRIV190_Msk
#define RISC_PRIVCFGR5_PRIV191_Pos    (31U)
#define RISC_PRIVCFGR5_PRIV191_Msk    (0x1UL << RISC_PRIVCFGR5_PRIV191_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR5_PRIV191        RISC_PRIVCFGR5_PRIV191_Msk

/*******************  Bits definition for RISC_RCFGLOCKR0 register *************/
#define RISC_RCFGLOCKR0_RLOCK0_Pos     (0U)
#define RISC_RCFGLOCKR0_RLOCK0_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISC_RCFGLOCKR0_RLOCK0         RISC_RCFGLOCKR0_RLOCK0_Msk
#define RISC_RCFGLOCKR0_RLOCK1_Pos     (1U)
#define RISC_RCFGLOCKR0_RLOCK1_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISC_RCFGLOCKR0_RLOCK1         RISC_RCFGLOCKR0_RLOCK1_Msk
#define RISC_RCFGLOCKR0_RLOCK2_Pos     (2U)
#define RISC_RCFGLOCKR0_RLOCK2_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISC_RCFGLOCKR0_RLOCK2         RISC_RCFGLOCKR0_RLOCK2_Msk
#define RISC_RCFGLOCKR0_RLOCK3_Pos     (3U)
#define RISC_RCFGLOCKR0_RLOCK3_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISC_RCFGLOCKR0_RLOCK3         RISC_RCFGLOCKR0_RLOCK3_Msk
#define RISC_RCFGLOCKR0_RLOCK4_Pos     (4U)
#define RISC_RCFGLOCKR0_RLOCK4_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISC_RCFGLOCKR0_RLOCK4         RISC_RCFGLOCKR0_RLOCK4_Msk
#define RISC_RCFGLOCKR0_RLOCK5_Pos     (5U)
#define RISC_RCFGLOCKR0_RLOCK5_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISC_RCFGLOCKR0_RLOCK5         RISC_RCFGLOCKR0_RLOCK5_Msk
#define RISC_RCFGLOCKR0_RLOCK6_Pos     (6U)
#define RISC_RCFGLOCKR0_RLOCK6_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISC_RCFGLOCKR0_RLOCK6         RISC_RCFGLOCKR0_RLOCK6_Msk
#define RISC_RCFGLOCKR0_RLOCK7_Pos     (7U)
#define RISC_RCFGLOCKR0_RLOCK7_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISC_RCFGLOCKR0_RLOCK7         RISC_RCFGLOCKR0_RLOCK7_Msk
#define RISC_RCFGLOCKR0_RLOCK8_Pos     (8U)
#define RISC_RCFGLOCKR0_RLOCK8_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISC_RCFGLOCKR0_RLOCK8         RISC_RCFGLOCKR0_RLOCK8_Msk
#define RISC_RCFGLOCKR0_RLOCK9_Pos     (9U)
#define RISC_RCFGLOCKR0_RLOCK9_Msk     (0x1UL << RISC_RCFGLOCKR0_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISC_RCFGLOCKR0_RLOCK9         RISC_RCFGLOCKR0_RLOCK9_Msk
#define RISC_RCFGLOCKR0_RLOCK10_Pos    (10U)
#define RISC_RCFGLOCKR0_RLOCK10_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR0_RLOCK10        RISC_RCFGLOCKR0_RLOCK10_Msk
#define RISC_RCFGLOCKR0_RLOCK11_Pos    (11U)
#define RISC_RCFGLOCKR0_RLOCK11_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR0_RLOCK11        RISC_RCFGLOCKR0_RLOCK11_Msk
#define RISC_RCFGLOCKR0_RLOCK12_Pos    (12U)
#define RISC_RCFGLOCKR0_RLOCK12_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR0_RLOCK12        RISC_RCFGLOCKR0_RLOCK12_Msk
#define RISC_RCFGLOCKR0_RLOCK13_Pos    (13U)
#define RISC_RCFGLOCKR0_RLOCK13_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR0_RLOCK13        RISC_RCFGLOCKR0_RLOCK13_Msk
#define RISC_RCFGLOCKR0_RLOCK14_Pos    (14U)
#define RISC_RCFGLOCKR0_RLOCK14_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR0_RLOCK14        RISC_RCFGLOCKR0_RLOCK14_Msk
#define RISC_RCFGLOCKR0_RLOCK15_Pos    (15U)
#define RISC_RCFGLOCKR0_RLOCK15_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR0_RLOCK15        RISC_RCFGLOCKR0_RLOCK15_Msk
#define RISC_RCFGLOCKR0_RLOCK16_Pos    (16U)
#define RISC_RCFGLOCKR0_RLOCK16_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR0_RLOCK16        RISC_RCFGLOCKR0_RLOCK16_Msk
#define RISC_RCFGLOCKR0_RLOCK17_Pos    (17U)
#define RISC_RCFGLOCKR0_RLOCK17_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR0_RLOCK17        RISC_RCFGLOCKR0_RLOCK17_Msk
#define RISC_RCFGLOCKR0_RLOCK18_Pos    (18U)
#define RISC_RCFGLOCKR0_RLOCK18_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR0_RLOCK18        RISC_RCFGLOCKR0_RLOCK18_Msk
#define RISC_RCFGLOCKR0_RLOCK19_Pos    (19U)
#define RISC_RCFGLOCKR0_RLOCK19_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR0_RLOCK19        RISC_RCFGLOCKR0_RLOCK19_Msk
#define RISC_RCFGLOCKR0_RLOCK20_Pos    (20U)
#define RISC_RCFGLOCKR0_RLOCK20_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR0_RLOCK20        RISC_RCFGLOCKR0_RLOCK20_Msk
#define RISC_RCFGLOCKR0_RLOCK21_Pos    (21U)
#define RISC_RCFGLOCKR0_RLOCK21_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR0_RLOCK21        RISC_RCFGLOCKR0_RLOCK21_Msk
#define RISC_RCFGLOCKR0_RLOCK22_Pos    (22U)
#define RISC_RCFGLOCKR0_RLOCK22_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR0_RLOCK22        RISC_RCFGLOCKR0_RLOCK22_Msk
#define RISC_RCFGLOCKR0_RLOCK23_Pos    (23U)
#define RISC_RCFGLOCKR0_RLOCK23_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR0_RLOCK23        RISC_RCFGLOCKR0_RLOCK23_Msk
#define RISC_RCFGLOCKR0_RLOCK24_Pos    (24U)
#define RISC_RCFGLOCKR0_RLOCK24_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR0_RLOCK24        RISC_RCFGLOCKR0_RLOCK24_Msk
#define RISC_RCFGLOCKR0_RLOCK25_Pos    (25U)
#define RISC_RCFGLOCKR0_RLOCK25_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR0_RLOCK25        RISC_RCFGLOCKR0_RLOCK25_Msk
#define RISC_RCFGLOCKR0_RLOCK26_Pos    (26U)
#define RISC_RCFGLOCKR0_RLOCK26_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR0_RLOCK26        RISC_RCFGLOCKR0_RLOCK26_Msk
#define RISC_RCFGLOCKR0_RLOCK27_Pos    (27U)
#define RISC_RCFGLOCKR0_RLOCK27_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR0_RLOCK27        RISC_RCFGLOCKR0_RLOCK27_Msk
#define RISC_RCFGLOCKR0_RLOCK28_Pos    (28U)
#define RISC_RCFGLOCKR0_RLOCK28_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR0_RLOCK28        RISC_RCFGLOCKR0_RLOCK28_Msk
#define RISC_RCFGLOCKR0_RLOCK29_Pos    (29U)
#define RISC_RCFGLOCKR0_RLOCK29_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR0_RLOCK29        RISC_RCFGLOCKR0_RLOCK29_Msk
#define RISC_RCFGLOCKR0_RLOCK30_Pos    (30U)
#define RISC_RCFGLOCKR0_RLOCK30_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR0_RLOCK30        RISC_RCFGLOCKR0_RLOCK30_Msk
#define RISC_RCFGLOCKR0_RLOCK31_Pos    (31U)
#define RISC_RCFGLOCKR0_RLOCK31_Msk    (0x1UL << RISC_RCFGLOCKR0_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR0_RLOCK31        RISC_RCFGLOCKR0_RLOCK31_Msk

/*******************  Bits definition for RISC_RCFGLOCKR1 register *************/
#define RISC_RCFGLOCKR1_RLOCK32_Pos    (0U)
#define RISC_RCFGLOCKR1_RLOCK32_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK32_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR1_RLOCK32        RISC_RCFGLOCKR1_RLOCK32_Msk
#define RISC_RCFGLOCKR1_RLOCK33_Pos    (1U)
#define RISC_RCFGLOCKR1_RLOCK33_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK33_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR1_RLOCK33        RISC_RCFGLOCKR1_RLOCK33_Msk
#define RISC_RCFGLOCKR1_RLOCK34_Pos    (2U)
#define RISC_RCFGLOCKR1_RLOCK34_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK34_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR1_RLOCK34        RISC_RCFGLOCKR1_RLOCK34_Msk
#define RISC_RCFGLOCKR1_RLOCK35_Pos    (3U)
#define RISC_RCFGLOCKR1_RLOCK35_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK35_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR1_RLOCK35        RISC_RCFGLOCKR1_RLOCK35_Msk
#define RISC_RCFGLOCKR1_RLOCK36_Pos    (4U)
#define RISC_RCFGLOCKR1_RLOCK36_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK36_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCKR1_RLOCK36        RISC_RCFGLOCKR1_RLOCK36_Msk
#define RISC_RCFGLOCKR1_RLOCK37_Pos    (5U)
#define RISC_RCFGLOCKR1_RLOCK37_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK37_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCKR1_RLOCK37        RISC_RCFGLOCKR1_RLOCK37_Msk
#define RISC_RCFGLOCKR1_RLOCK38_Pos    (6U)
#define RISC_RCFGLOCKR1_RLOCK38_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK38_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCKR1_RLOCK38        RISC_RCFGLOCKR1_RLOCK38_Msk
#define RISC_RCFGLOCKR1_RLOCK39_Pos    (7U)
#define RISC_RCFGLOCKR1_RLOCK39_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK39_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCKR1_RLOCK39        RISC_RCFGLOCKR1_RLOCK39_Msk
#define RISC_RCFGLOCKR1_RLOCK40_Pos    (8U)
#define RISC_RCFGLOCKR1_RLOCK40_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK40_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCKR1_RLOCK40        RISC_RCFGLOCKR1_RLOCK40_Msk
#define RISC_RCFGLOCKR1_RLOCK41_Pos    (9U)
#define RISC_RCFGLOCKR1_RLOCK41_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK41_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCKR1_RLOCK41        RISC_RCFGLOCKR1_RLOCK41_Msk
#define RISC_RCFGLOCKR1_RLOCK42_Pos    (10U)
#define RISC_RCFGLOCKR1_RLOCK42_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK42_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR1_RLOCK42        RISC_RCFGLOCKR1_RLOCK42_Msk
#define RISC_RCFGLOCKR1_RLOCK43_Pos    (11U)
#define RISC_RCFGLOCKR1_RLOCK43_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK43_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR1_RLOCK43        RISC_RCFGLOCKR1_RLOCK43_Msk
#define RISC_RCFGLOCKR1_RLOCK44_Pos    (12U)
#define RISC_RCFGLOCKR1_RLOCK44_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK44_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR1_RLOCK44        RISC_RCFGLOCKR1_RLOCK44_Msk
#define RISC_RCFGLOCKR1_RLOCK45_Pos    (13U)
#define RISC_RCFGLOCKR1_RLOCK45_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK45_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR1_RLOCK45        RISC_RCFGLOCKR1_RLOCK45_Msk
#define RISC_RCFGLOCKR1_RLOCK46_Pos    (14U)
#define RISC_RCFGLOCKR1_RLOCK46_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK46_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR1_RLOCK46        RISC_RCFGLOCKR1_RLOCK46_Msk
#define RISC_RCFGLOCKR1_RLOCK47_Pos    (15U)
#define RISC_RCFGLOCKR1_RLOCK47_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK47_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR1_RLOCK47        RISC_RCFGLOCKR1_RLOCK47_Msk
#define RISC_RCFGLOCKR1_RLOCK48_Pos    (16U)
#define RISC_RCFGLOCKR1_RLOCK48_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK48_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR1_RLOCK48        RISC_RCFGLOCKR1_RLOCK48_Msk
#define RISC_RCFGLOCKR1_RLOCK49_Pos    (17U)
#define RISC_RCFGLOCKR1_RLOCK49_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK49_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR1_RLOCK49        RISC_RCFGLOCKR1_RLOCK49_Msk
#define RISC_RCFGLOCKR1_RLOCK50_Pos    (18U)
#define RISC_RCFGLOCKR1_RLOCK50_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK50_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR1_RLOCK50        RISC_RCFGLOCKR1_RLOCK50_Msk
#define RISC_RCFGLOCKR1_RLOCK51_Pos    (19U)
#define RISC_RCFGLOCKR1_RLOCK51_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK51_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR1_RLOCK51        RISC_RCFGLOCKR1_RLOCK51_Msk
#define RISC_RCFGLOCKR1_RLOCK52_Pos    (20U)
#define RISC_RCFGLOCKR1_RLOCK52_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK52_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR1_RLOCK52        RISC_RCFGLOCKR1_RLOCK52_Msk
#define RISC_RCFGLOCKR1_RLOCK53_Pos    (21U)
#define RISC_RCFGLOCKR1_RLOCK53_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK53_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR1_RLOCK53        RISC_RCFGLOCKR1_RLOCK53_Msk
#define RISC_RCFGLOCKR1_RLOCK54_Pos    (22U)
#define RISC_RCFGLOCKR1_RLOCK54_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK54_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR1_RLOCK54        RISC_RCFGLOCKR1_RLOCK54_Msk
#define RISC_RCFGLOCKR1_RLOCK55_Pos    (23U)
#define RISC_RCFGLOCKR1_RLOCK55_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK55_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR1_RLOCK55        RISC_RCFGLOCKR1_RLOCK55_Msk
#define RISC_RCFGLOCKR1_RLOCK56_Pos    (24U)
#define RISC_RCFGLOCKR1_RLOCK56_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK56_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR1_RLOCK56        RISC_RCFGLOCKR1_RLOCK56_Msk
#define RISC_RCFGLOCKR1_RLOCK57_Pos    (25U)
#define RISC_RCFGLOCKR1_RLOCK57_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK57_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR1_RLOCK57        RISC_RCFGLOCKR1_RLOCK57_Msk
#define RISC_RCFGLOCKR1_RLOCK58_Pos    (26U)
#define RISC_RCFGLOCKR1_RLOCK58_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK58_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR1_RLOCK58        RISC_RCFGLOCKR1_RLOCK58_Msk
#define RISC_RCFGLOCKR1_RLOCK59_Pos    (27U)
#define RISC_RCFGLOCKR1_RLOCK59_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK59_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR1_RLOCK59        RISC_RCFGLOCKR1_RLOCK59_Msk
#define RISC_RCFGLOCKR1_RLOCK60_Pos    (28U)
#define RISC_RCFGLOCKR1_RLOCK60_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK60_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR1_RLOCK60        RISC_RCFGLOCKR1_RLOCK60_Msk
#define RISC_RCFGLOCKR1_RLOCK61_Pos    (29U)
#define RISC_RCFGLOCKR1_RLOCK61_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK61_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR1_RLOCK61        RISC_RCFGLOCKR1_RLOCK61_Msk
#define RISC_RCFGLOCKR1_RLOCK62_Pos    (30U)
#define RISC_RCFGLOCKR1_RLOCK62_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK62_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR1_RLOCK62        RISC_RCFGLOCKR1_RLOCK62_Msk
#define RISC_RCFGLOCKR1_RLOCK63_Pos    (31U)
#define RISC_RCFGLOCKR1_RLOCK63_Msk    (0x1UL << RISC_RCFGLOCKR1_RLOCK63_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR1_RLOCK63        RISC_RCFGLOCKR1_RLOCK63_Msk

/*******************  Bits definition for RISC_RCFGLOCKR2 register *************/
#define RISC_RCFGLOCKR2_RLOCK64_Pos    (0U)
#define RISC_RCFGLOCKR2_RLOCK64_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK64_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR2_RLOCK64        RISC_RCFGLOCKR2_RLOCK64_Msk
#define RISC_RCFGLOCKR2_RLOCK65_Pos    (1U)
#define RISC_RCFGLOCKR2_RLOCK65_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK65_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR2_RLOCK65        RISC_RCFGLOCKR2_RLOCK65_Msk
#define RISC_RCFGLOCKR2_RLOCK66_Pos    (2U)
#define RISC_RCFGLOCKR2_RLOCK66_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK66_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR2_RLOCK66        RISC_RCFGLOCKR2_RLOCK66_Msk
#define RISC_RCFGLOCKR2_RLOCK67_Pos    (3U)
#define RISC_RCFGLOCKR2_RLOCK67_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK67_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR2_RLOCK67        RISC_RCFGLOCKR2_RLOCK67_Msk
#define RISC_RCFGLOCKR2_RLOCK68_Pos    (4U)
#define RISC_RCFGLOCKR2_RLOCK68_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK68_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCKR2_RLOCK68        RISC_RCFGLOCKR2_RLOCK68_Msk
#define RISC_RCFGLOCKR2_RLOCK69_Pos    (5U)
#define RISC_RCFGLOCKR2_RLOCK69_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK69_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCKR2_RLOCK69        RISC_RCFGLOCKR2_RLOCK69_Msk
#define RISC_RCFGLOCKR2_RLOCK70_Pos    (6U)
#define RISC_RCFGLOCKR2_RLOCK70_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK70_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCKR2_RLOCK70        RISC_RCFGLOCKR2_RLOCK70_Msk
#define RISC_RCFGLOCKR2_RLOCK71_Pos    (7U)
#define RISC_RCFGLOCKR2_RLOCK71_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK71_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCKR2_RLOCK71        RISC_RCFGLOCKR2_RLOCK71_Msk
#define RISC_RCFGLOCKR2_RLOCK72_Pos    (8U)
#define RISC_RCFGLOCKR2_RLOCK72_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK72_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCKR2_RLOCK72        RISC_RCFGLOCKR2_RLOCK72_Msk
#define RISC_RCFGLOCKR2_RLOCK73_Pos    (9U)
#define RISC_RCFGLOCKR2_RLOCK73_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK73_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCKR2_RLOCK73        RISC_RCFGLOCKR2_RLOCK73_Msk
#define RISC_RCFGLOCKR2_RLOCK74_Pos    (10U)
#define RISC_RCFGLOCKR2_RLOCK74_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK74_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR2_RLOCK74        RISC_RCFGLOCKR2_RLOCK74_Msk
#define RISC_RCFGLOCKR2_RLOCK75_Pos    (11U)
#define RISC_RCFGLOCKR2_RLOCK75_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK75_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR2_RLOCK75        RISC_RCFGLOCKR2_RLOCK75_Msk
#define RISC_RCFGLOCKR2_RLOCK76_Pos    (12U)
#define RISC_RCFGLOCKR2_RLOCK76_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK76_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR2_RLOCK76        RISC_RCFGLOCKR2_RLOCK76_Msk
#define RISC_RCFGLOCKR2_RLOCK77_Pos    (13U)
#define RISC_RCFGLOCKR2_RLOCK77_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK77_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR2_RLOCK77        RISC_RCFGLOCKR2_RLOCK77_Msk
#define RISC_RCFGLOCKR2_RLOCK78_Pos    (14U)
#define RISC_RCFGLOCKR2_RLOCK78_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK78_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR2_RLOCK78        RISC_RCFGLOCKR2_RLOCK78_Msk
#define RISC_RCFGLOCKR2_RLOCK79_Pos    (15U)
#define RISC_RCFGLOCKR2_RLOCK79_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK79_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR2_RLOCK79        RISC_RCFGLOCKR2_RLOCK79_Msk
#define RISC_RCFGLOCKR2_RLOCK80_Pos    (16U)
#define RISC_RCFGLOCKR2_RLOCK80_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK80_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR2_RLOCK80        RISC_RCFGLOCKR2_RLOCK80_Msk
#define RISC_RCFGLOCKR2_RLOCK81_Pos    (17U)
#define RISC_RCFGLOCKR2_RLOCK81_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK81_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR2_RLOCK81        RISC_RCFGLOCKR2_RLOCK81_Msk
#define RISC_RCFGLOCKR2_RLOCK82_Pos    (18U)
#define RISC_RCFGLOCKR2_RLOCK82_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK82_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR2_RLOCK82        RISC_RCFGLOCKR2_RLOCK82_Msk
#define RISC_RCFGLOCKR2_RLOCK83_Pos    (19U)
#define RISC_RCFGLOCKR2_RLOCK83_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK83_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR2_RLOCK83        RISC_RCFGLOCKR2_RLOCK83_Msk
#define RISC_RCFGLOCKR2_RLOCK84_Pos    (20U)
#define RISC_RCFGLOCKR2_RLOCK84_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK84_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR2_RLOCK84        RISC_RCFGLOCKR2_RLOCK84_Msk
#define RISC_RCFGLOCKR2_RLOCK85_Pos    (21U)
#define RISC_RCFGLOCKR2_RLOCK85_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK85_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR2_RLOCK85        RISC_RCFGLOCKR2_RLOCK85_Msk
#define RISC_RCFGLOCKR2_RLOCK86_Pos    (22U)
#define RISC_RCFGLOCKR2_RLOCK86_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK86_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR2_RLOCK86        RISC_RCFGLOCKR2_RLOCK86_Msk
#define RISC_RCFGLOCKR2_RLOCK87_Pos    (23U)
#define RISC_RCFGLOCKR2_RLOCK87_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK87_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR2_RLOCK87        RISC_RCFGLOCKR2_RLOCK87_Msk
#define RISC_RCFGLOCKR2_RLOCK88_Pos    (24U)
#define RISC_RCFGLOCKR2_RLOCK88_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK88_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR2_RLOCK88        RISC_RCFGLOCKR2_RLOCK88_Msk
#define RISC_RCFGLOCKR2_RLOCK89_Pos    (25U)
#define RISC_RCFGLOCKR2_RLOCK89_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK89_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR2_RLOCK89        RISC_RCFGLOCKR2_RLOCK89_Msk
#define RISC_RCFGLOCKR2_RLOCK90_Pos    (26U)
#define RISC_RCFGLOCKR2_RLOCK90_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK90_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR2_RLOCK90        RISC_RCFGLOCKR2_RLOCK90_Msk
#define RISC_RCFGLOCKR2_RLOCK91_Pos    (27U)
#define RISC_RCFGLOCKR2_RLOCK91_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK91_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR2_RLOCK91        RISC_RCFGLOCKR2_RLOCK91_Msk
#define RISC_RCFGLOCKR2_RLOCK92_Pos    (28U)
#define RISC_RCFGLOCKR2_RLOCK92_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK92_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR2_RLOCK92        RISC_RCFGLOCKR2_RLOCK92_Msk
#define RISC_RCFGLOCKR2_RLOCK93_Pos    (29U)
#define RISC_RCFGLOCKR2_RLOCK93_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK93_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR2_RLOCK93        RISC_RCFGLOCKR2_RLOCK93_Msk
#define RISC_RCFGLOCKR2_RLOCK94_Pos    (30U)
#define RISC_RCFGLOCKR2_RLOCK94_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK94_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR2_RLOCK94        RISC_RCFGLOCKR2_RLOCK94_Msk
#define RISC_RCFGLOCKR2_RLOCK95_Pos    (31U)
#define RISC_RCFGLOCKR2_RLOCK95_Msk    (0x1UL << RISC_RCFGLOCKR2_RLOCK95_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR2_RLOCK95        RISC_RCFGLOCKR2_RLOCK95_Msk

/*******************  Bits definition for RISC_RCFGLOCKR3 register *************/
#define RISC_RCFGLOCKR3_RLOCK96_Pos    (0U)
#define RISC_RCFGLOCKR3_RLOCK96_Msk    (0x1UL << RISC_RCFGLOCKR3_RLOCK96_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR3_RLOCK96        RISC_RCFGLOCKR3_RLOCK0_Msk
#define RISC_RCFGLOCKR3_RLOCK97_Pos    (1U)
#define RISC_RCFGLOCKR3_RLOCK97_Msk    (0x1UL << RISC_RCFGLOCKR3_RLOCK97_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR3_RLOCK97        RISC_RCFGLOCKR3_RLOCK97_Msk
#define RISC_RCFGLOCKR3_RLOCK98_Pos    (2U)
#define RISC_RCFGLOCKR3_RLOCK98_Msk    (0x1UL << RISC_RCFGLOCKR3_RLOCK98_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR3_RLOCK98        RISC_RCFGLOCKR3_RLOCK98_Msk
#define RISC_RCFGLOCKR3_RLOCK99_Pos    (3U)
#define RISC_RCFGLOCKR3_RLOCK99_Msk    (0x1UL << RISC_RCFGLOCKR3_RLOCK99_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR3_RLOCK99        RISC_RCFGLOCKR3_RLOCK99_Msk
#define RISC_RCFGLOCKR3_RLOCK100_Pos   (4U)
#define RISC_RCFGLOCKR3_RLOCK100_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK100_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR3_RLOCK100       RISC_RCFGLOCKR3_RLOCK100_Msk
#define RISC_RCFGLOCKR3_RLOCK101_Pos   (5U)
#define RISC_RCFGLOCKR3_RLOCK101_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK101_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR3_RLOCK101        RISC_RCFGLOCKR3_RLOCK101_Msk
#define RISC_RCFGLOCKR3_RLOCK102_Pos   (6U)
#define RISC_RCFGLOCKR3_RLOCK102_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK102_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR3_RLOCK102       RISC_RCFGLOCKR3_RLOCK102_Msk
#define RISC_RCFGLOCKR3_RLOCK103_Pos   (7U)
#define RISC_RCFGLOCKR3_RLOCK103_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK103_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR3_RLOCK103       RISC_RCFGLOCKR3_RLOCK103_Msk
#define RISC_RCFGLOCKR3_RLOCK104_Pos   (8U)
#define RISC_RCFGLOCKR3_RLOCK104_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK104_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR3_RLOCK104       RISC_RCFGLOCKR3_RLOCK104_Msk
#define RISC_RCFGLOCKR3_RLOCK105_Pos   (9U)
#define RISC_RCFGLOCKR3_RLOCK105_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK105_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR3_RLOCK105       RISC_RCFGLOCKR3_RLOCK105_Msk
#define RISC_RCFGLOCKR3_RLOCK106_Pos   (10U)
#define RISC_RCFGLOCKR3_RLOCK106_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK106_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR3_RLOCK106       RISC_RCFGLOCKR3_RLOCK106_Msk
#define RISC_RCFGLOCKR3_RLOCK107_Pos   (11U)
#define RISC_RCFGLOCKR3_RLOCK107_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK107_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR3_RLOCK107       RISC_RCFGLOCKR3_RLOCK107_Msk
#define RISC_RCFGLOCKR3_RLOCK108_Pos   (12U)
#define RISC_RCFGLOCKR3_RLOCK108_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK108_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR3_RLOCK108       RISC_RCFGLOCKR3_RLOCK108_Msk
#define RISC_RCFGLOCKR3_RLOCK109_Pos   (13U)
#define RISC_RCFGLOCKR3_RLOCK109_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK109_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR3_RLOCK109       RISC_RCFGLOCKR3_RLOCK109_Msk
#define RISC_RCFGLOCKR3_RLOCK110_Pos   (14U)
#define RISC_RCFGLOCKR3_RLOCK110_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK110_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR3_RLOCK110       RISC_RCFGLOCKR3_RLOCK110_Msk
#define RISC_RCFGLOCKR3_RLOCK111_Pos   (15U)
#define RISC_RCFGLOCKR3_RLOCK111_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK111_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR3_RLOCK111       RISC_RCFGLOCKR3_RLOCK111_Msk
#define RISC_RCFGLOCKR3_RLOCK112_Pos   (16U)
#define RISC_RCFGLOCKR3_RLOCK112_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK112_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR3_RLOCK112       RISC_RCFGLOCKR3_RLOCK112_Msk
#define RISC_RCFGLOCKR3_RLOCK113_Pos   (17U)
#define RISC_RCFGLOCKR3_RLOCK113_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK113_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR3_RLOCK113       RISC_RCFGLOCKR3_RLOCK113_Msk
#define RISC_RCFGLOCKR3_RLOCK114_Pos   (18U)
#define RISC_RCFGLOCKR3_RLOCK114_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK114_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR3_RLOCK114       RISC_RCFGLOCKR3_RLOCK114_Msk
#define RISC_RCFGLOCKR3_RLOCK115_Pos   (19U)
#define RISC_RCFGLOCKR3_RLOCK115_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK115_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR3_RLOCK115       RISC_RCFGLOCKR3_RLOCK115_Msk
#define RISC_RCFGLOCKR3_RLOCK116_Pos   (20U)
#define RISC_RCFGLOCKR3_RLOCK116_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK116_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR3_RLOCK116       RISC_RCFGLOCKR3_RLOCK116_Msk
#define RISC_RCFGLOCKR3_RLOCK117_Pos   (21U)
#define RISC_RCFGLOCKR3_RLOCK117_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK117_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR3_RLOCK117       RISC_RCFGLOCKR3_RLOCK117_Msk
#define RISC_RCFGLOCKR3_RLOCK118_Pos   (22U)
#define RISC_RCFGLOCKR3_RLOCK118_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK118_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR3_RLOCK118       RISC_RCFGLOCKR3_RLOCK118_Msk
#define RISC_RCFGLOCKR3_RLOCK119_Pos   (23U)
#define RISC_RCFGLOCKR3_RLOCK119_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK119_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR3_RLOCK119       RISC_RCFGLOCKR3_RLOCK119_Msk
#define RISC_RCFGLOCKR3_RLOCK120_Pos   (24U)
#define RISC_RCFGLOCKR3_RLOCK120_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK120_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR3_RLOCK120       RISC_RCFGLOCKR3_RLOCK120_Msk
#define RISC_RCFGLOCKR3_RLOCK121_Pos   (25U)
#define RISC_RCFGLOCKR3_RLOCK121_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK121_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR3_RLOCK121       RISC_RCFGLOCKR3_RLOCK121_Msk
#define RISC_RCFGLOCKR3_RLOCK122_Pos   (26U)
#define RISC_RCFGLOCKR3_RLOCK122_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK122_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR3_RLOCK122       RISC_RCFGLOCKR3_RLOCK122_Msk
#define RISC_RCFGLOCKR3_RLOCK123_Pos   (27U)
#define RISC_RCFGLOCKR3_RLOCK123_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK123_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR3_RLOCK123       RISC_RCFGLOCKR3_RLOCK123_Msk
#define RISC_RCFGLOCKR3_RLOCK124_Pos   (28U)
#define RISC_RCFGLOCKR3_RLOCK124_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK124_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR3_RLOCK124       RISC_RCFGLOCKR3_RLOCK124_Msk
#define RISC_RCFGLOCKR3_RLOCK125_Pos   (29U)
#define RISC_RCFGLOCKR3_RLOCK125_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK125_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR3_RLOCK125       RISC_RCFGLOCKR3_RLOCK125_Msk
#define RISC_RCFGLOCKR3_RLOCK126_Pos   (30U)
#define RISC_RCFGLOCKR3_RLOCK126_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK126_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR3_RLOCK126       RISC_RCFGLOCKR3_RLOCK126_Msk
#define RISC_RCFGLOCKR3_RLOCK127_Pos   (31U)
#define RISC_RCFGLOCKR3_RLOCK127_Msk   (0x1UL << RISC_RCFGLOCKR3_RLOCK127_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR3_RLOCK127       RISC_RCFGLOCKR3_RLOCK127_Msk

/*******************  Bits definition for RISC_RCFGLOCKR4 register *************/
#define RISC_RCFGLOCKR4_RLOCK128_Pos   (0U)
#define RISC_RCFGLOCKR4_RLOCK128_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK128_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCKR4_RLOCK128       RISC_RCFGLOCKR4_RLOCK128_Msk
#define RISC_RCFGLOCKR4_RLOCK129_Pos   (1U)
#define RISC_RCFGLOCKR4_RLOCK129_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK129_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCKR4_RLOCK129       RISC_RCFGLOCKR4_RLOCK129_Msk
#define RISC_RCFGLOCKR4_RLOCK130_Pos   (2U)
#define RISC_RCFGLOCKR4_RLOCK130_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK130_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCKR4_RLOCK130       RISC_RCFGLOCKR4_RLOCK130_Msk
#define RISC_RCFGLOCKR4_RLOCK131_Pos   (3U)
#define RISC_RCFGLOCKR4_RLOCK131_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK131_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCKR4_RLOCK131       RISC_RCFGLOCKR4_RLOCK131_Msk
#define RISC_RCFGLOCKR4_RLOCK132_Pos   (4U)
#define RISC_RCFGLOCKR4_RLOCK132_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK132_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR4_RLOCK132       RISC_RCFGLOCKR4_RLOCK132_Msk
#define RISC_RCFGLOCKR4_RLOCK133_Pos   (5U)
#define RISC_RCFGLOCKR4_RLOCK133_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK133_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR4_RLOCK133       RISC_RCFGLOCKR4_RLOCK133_Msk
#define RISC_RCFGLOCKR4_RLOCK134_Pos   (6U)
#define RISC_RCFGLOCKR4_RLOCK134_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK134_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR4_RLOCK134       RISC_RCFGLOCKR4_RLOCK134_Msk
#define RISC_RCFGLOCKR4_RLOCK135_Pos   (7U)
#define RISC_RCFGLOCKR4_RLOCK135_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK135_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR4_RLOCK135      RISC_RCFGLOCKR4_RLOCK135_Msk
#define RISC_RCFGLOCKR4_RLOCK136_Pos   (8U)
#define RISC_RCFGLOCKR4_RLOCK136_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK136_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR4_RLOCK136       RISC_RCFGLOCKR4_RLOCK136_Msk
#define RISC_RCFGLOCKR4_RLOCK137_Pos   (9U)
#define RISC_RCFGLOCKR4_RLOCK137_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK137_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR4_RLOCK137       RISC_RCFGLOCKR4_RLOCK137_Msk
#define RISC_RCFGLOCKR4_RLOCK138_Pos   (10U)
#define RISC_RCFGLOCKR4_RLOCK138_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK138_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR4_RLOCK138       RISC_RCFGLOCKR4_RLOCK138_Msk
#define RISC_RCFGLOCKR4_RLOCK139_Pos   (11U)
#define RISC_RCFGLOCKR4_RLOCK139_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK139_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR4_RLOCK139       RISC_RCFGLOCKR4_RLOCK139_Msk
#define RISC_RCFGLOCKR4_RLOCK140_Pos   (12U)
#define RISC_RCFGLOCKR4_RLOCK140_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK140_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR4_RLOCK140       RISC_RCFGLOCKR4_RLOCK140_Msk
#define RISC_RCFGLOCKR4_RLOCK141_Pos   (13U)
#define RISC_RCFGLOCKR4_RLOCK141_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK141_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR4_RLOCK141       RISC_RCFGLOCKR4_RLOCK141_Msk
#define RISC_RCFGLOCKR4_RLOCK142_Pos   (14U)
#define RISC_RCFGLOCKR4_RLOCK142_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK142_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR4_RLOCK142       RISC_RCFGLOCKR4_RLOCK142_Msk
#define RISC_RCFGLOCKR4_RLOCK143_Pos   (15U)
#define RISC_RCFGLOCKR4_RLOCK143_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK143_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR4_RLOCK143       RISC_RCFGLOCKR4_RLOCK143_Msk
#define RISC_RCFGLOCKR4_RLOCK144_Pos   (16U)
#define RISC_RCFGLOCKR4_RLOCK144_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK144_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR4_RLOCK144       RISC_RCFGLOCKR4_RLOCK144_Msk
#define RISC_RCFGLOCKR4_RLOCK145_Pos   (17U)
#define RISC_RCFGLOCKR4_RLOCK145_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK145_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR4_RLOCK145       RISC_RCFGLOCKR4_RLOCK145_Msk
#define RISC_RCFGLOCKR4_RLOCK146_Pos   (18U)
#define RISC_RCFGLOCKR4_RLOCK146_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK146_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR4_RLOCK146       RISC_RCFGLOCKR4_RLOCK146_Msk
#define RISC_RCFGLOCKR4_RLOCK147_Pos   (19U)
#define RISC_RCFGLOCKR4_RLOCK147_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK147_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR4_RLOCK147       RISC_RCFGLOCKR4_RLOCK147_Msk
#define RISC_RCFGLOCKR4_RLOCK148_Pos   (20U)
#define RISC_RCFGLOCKR4_RLOCK148_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK148_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR4_RLOCK148       RISC_RCFGLOCKR4_RLOCK148_Msk
#define RISC_RCFGLOCKR4_RLOCK149_Pos   (21U)
#define RISC_RCFGLOCKR4_RLOCK149_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK149_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR4_RLOCK149       RISC_RCFGLOCKR4_RLOCK149_Msk
#define RISC_RCFGLOCKR4_RLOCK150_Pos   (22U)
#define RISC_RCFGLOCKR4_RLOCK150_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK150_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR4_RLOCK150       RISC_RCFGLOCKR4_RLOCK150_Msk
#define RISC_RCFGLOCKR4_RLOCK151_Pos   (23U)
#define RISC_RCFGLOCKR4_RLOCK151_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK151_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR4_RLOCK151       RISC_RCFGLOCKR4_RLOCK151_Msk
#define RISC_RCFGLOCKR4_RLOCK152_Pos   (24U)
#define RISC_RCFGLOCKR4_RLOCK152_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK152_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR4_RLOCK152       RISC_RCFGLOCKR4_RLOCK152_Msk
#define RISC_RCFGLOCKR4_RLOCK153_Pos   (25U)
#define RISC_RCFGLOCKR4_RLOCK153_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK153_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR4_RLOCK153       RISC_RCFGLOCKR4_RLOCK153_Msk
#define RISC_RCFGLOCKR4_RLOCK154_Pos   (26U)
#define RISC_RCFGLOCKR4_RLOCK154_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK154_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR4_RLOCK154       RISC_RCFGLOCKR4_RLOCK154_Msk
#define RISC_RCFGLOCKR4_RLOCK155_Pos   (27U)
#define RISC_RCFGLOCKR4_RLOCK155_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK155_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR4_RLOCK155       RISC_RCFGLOCKR4_RLOCK155_Msk
#define RISC_RCFGLOCKR4_RLOCK156_Pos   (28U)
#define RISC_RCFGLOCKR4_RLOCK156_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK156_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR4_RLOCK156       RISC_RCFGLOCKR4_RLOCK156_Msk
#define RISC_RCFGLOCKR4_RLOCK157_Pos   (29U)
#define RISC_RCFGLOCKR4_RLOCK157_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK157_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR4_RLOCK157       RISC_RCFGLOCKR4_RLOCK157_Msk
#define RISC_RCFGLOCKR4_RLOCK158_Pos   (30U)
#define RISC_RCFGLOCKR4_RLOCK158_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK158_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR4_RLOCK158       RISC_RCFGLOCKR4_RLOCK158_Msk
#define RISC_RCFGLOCKR4_RLOCK159_Pos   (31U)
#define RISC_RCFGLOCKR4_RLOCK159_Msk   (0x1UL << RISC_RCFGLOCKR4_RLOCK159_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR4_RLOCK159       RISC_RCFGLOCKR4_RLOCK159_Msk

/*******************  Bits definition for RISC_RCFGLOCKR5 register *************/
#define RISC_RCFGLOCKR5_RLOCK160_Pos   (0U)
#define RISC_RCFGLOCKR5_RLOCK160_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK160_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCKR5_RLOCK160       RISC_RCFGLOCKR5_RLOCK160_Msk
#define RISC_RCFGLOCKR5_RLOCK161_Pos   (1U)
#define RISC_RCFGLOCKR5_RLOCK161_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK161_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCKR5_RLOCK161       RISC_RCFGLOCKR5_RLOCK161_Msk
#define RISC_RCFGLOCKR5_RLOCK162_Pos   (2U)
#define RISC_RCFGLOCKR5_RLOCK162_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK162_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCKR5_RLOCK162       RISC_RCFGLOCKR5_RLOCK162_Msk
#define RISC_RCFGLOCKR5_RLOCK163_Pos   (3U)
#define RISC_RCFGLOCKR5_RLOCK163_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK163_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCKR5_RLOCK163       RISC_RCFGLOCKR5_RLOCK163_Msk
#define RISC_RCFGLOCKR5_RLOCK164_Pos   (4U)
#define RISC_RCFGLOCKR5_RLOCK164_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK164_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR5_RLOCK164       RISC_RCFGLOCKR5_RLOCK164_Msk
#define RISC_RCFGLOCKR5_RLOCK165_Pos   (5U)
#define RISC_RCFGLOCKR5_RLOCK165_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK165_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR5_RLOCK165       RISC_RCFGLOCKR5_RLOCK165_Msk
#define RISC_RCFGLOCKR5_RLOCK166_Pos   (6U)
#define RISC_RCFGLOCKR5_RLOCK166_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK166_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR5_RLOCK166       RISC_RCFGLOCKR5_RLOCK166_Msk
#define RISC_RCFGLOCKR5_RLOCK167_Pos   (7U)
#define RISC_RCFGLOCKR5_RLOCK167_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK167_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR5_RLOCK167       RISC_RCFGLOCKR5_RLOCK167_Msk
#define RISC_RCFGLOCKR5_RLOCK168_Pos   (8U)
#define RISC_RCFGLOCKR5_RLOCK168_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK168_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR5_RLOCK168        RISC_RCFGLOCKR5_RLOCK168_Msk
#define RISC_RCFGLOCKR5_RLOCK169_Pos   (9U)
#define RISC_RCFGLOCKR5_RLOCK169_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK169_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR5_RLOCK169       RISC_RCFGLOCKR5_RLOCK169_Msk
#define RISC_RCFGLOCKR5_RLOCK170_Pos   (10U)
#define RISC_RCFGLOCKR5_RLOCK170_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK170_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR5_RLOCK170       RISC_RCFGLOCKR5_RLOCK170_Msk
#define RISC_RCFGLOCKR5_RLOCK171_Pos   (11U)
#define RISC_RCFGLOCKR5_RLOCK171_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK171_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR5_RLOCK171       RISC_RCFGLOCKR5_RLOCK171_Msk
#define RISC_RCFGLOCKR5_RLOCK172_Pos   (12U)
#define RISC_RCFGLOCKR5_RLOCK172_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK172_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR5_RLOCK172       RISC_RCFGLOCKR5_RLOCK172_Msk
#define RISC_RCFGLOCKR5_RLOCK173_Pos   (13U)
#define RISC_RCFGLOCKR5_RLOCK173_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK173_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR5_RLOCK173       RISC_RCFGLOCKR5_RLOCK173_Msk
#define RISC_RCFGLOCKR5_RLOCK174_Pos   (14U)
#define RISC_RCFGLOCKR5_RLOCK174_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK174_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR5_RLOCK174       RISC_RCFGLOCKR5_RLOCK174_Msk
#define RISC_RCFGLOCKR5_RLOCK175_Pos   (15U)
#define RISC_RCFGLOCKR5_RLOCK175_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK175_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR5_RLOCK175       RISC_RCFGLOCKR5_RLOCK175_Msk
#define RISC_RCFGLOCKR5_RLOCK176_Pos   (16U)
#define RISC_RCFGLOCKR5_RLOCK176_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK176_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR5_RLOCK176       RISC_RCFGLOCKR5_RLOCK176_Msk
#define RISC_RCFGLOCKR5_RLOCK177_Pos   (17U)
#define RISC_RCFGLOCKR5_RLOCK177_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK177_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR5_RLOCK177       RISC_RCFGLOCKR5_RLOCK177_Msk
#define RISC_RCFGLOCKR5_RLOCK178_Pos   (18U)
#define RISC_RCFGLOCKR5_RLOCK178_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK178_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR5_RLOCK178       RISC_RCFGLOCKR5_RLOCK178_Msk
#define RISC_RCFGLOCKR5_RLOCK179_Pos   (19U)
#define RISC_RCFGLOCKR5_RLOCK179_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK179_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR5_RLOCK179       RISC_RCFGLOCKR5_RLOCK179_Msk
#define RISC_RCFGLOCKR5_RLOCK180_Pos   (20U)
#define RISC_RCFGLOCKR5_RLOCK180_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK180_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR5_RLOCK180       RISC_RCFGLOCKR5_RLOCK180_Msk
#define RISC_RCFGLOCKR5_RLOCK181_Pos   (21U)
#define RISC_RCFGLOCKR5_RLOCK181_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK181_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR5_RLOCK181       RISC_RCFGLOCKR5_RLOCK181_Msk
#define RISC_RCFGLOCKR5_RLOCK182_Pos   (22U)
#define RISC_RCFGLOCKR5_RLOCK182_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK182_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR5_RLOCK182       RISC_RCFGLOCKR5_RLOCK182_Msk
#define RISC_RCFGLOCKR5_RLOCK183_Pos   (23U)
#define RISC_RCFGLOCKR5_RLOCK183_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK183_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR5_RLOCK183       RISC_RCFGLOCKR5_RLOCK183_Msk
#define RISC_RCFGLOCKR5_RLOCK184_Pos   (24U)
#define RISC_RCFGLOCKR5_RLOCK184_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK184_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR5_RLOCK184       RISC_RCFGLOCKR5_RLOCK184_Msk
#define RISC_RCFGLOCKR5_RLOCK185_Pos   (25U)
#define RISC_RCFGLOCKR5_RLOCK185_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK185_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR5_RLOCK185       RISC_RCFGLOCKR5_RLOCK185_Msk
#define RISC_RCFGLOCKR5_RLOCK186_Pos   (26U)
#define RISC_RCFGLOCKR5_RLOCK186_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK186_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR5_RLOCK186       RISC_RCFGLOCKR5_RLOCK186_Msk
#define RISC_RCFGLOCKR5_RLOCK187_Pos   (27U)
#define RISC_RCFGLOCKR5_RLOCK187_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK187_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR5_RLOCK187       RISC_RCFGLOCKR5_RLOCK187_Msk
#define RISC_RCFGLOCKR5_RLOCK188_Pos   (28U)
#define RISC_RCFGLOCKR5_RLOCK188_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK188_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR5_RLOCK188       RISC_RCFGLOCKR5_RLOCK188_Msk
#define RISC_RCFGLOCKR5_RLOCK189_Pos   (29U)
#define RISC_RCFGLOCKR5_RLOCK189_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK189_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR5_RLOCK189       RISC_RCFGLOCKR5_RLOCK189_Msk
#define RISC_RCFGLOCKR5_RLOCK190_Pos   (30U)
#define RISC_RCFGLOCKR5_RLOCK190_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK190_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR5_RLOCK190       RISC_RCFGLOCKR5_RLOCK190_Msk
#define RISC_RCFGLOCKR5_RLOCK191_Pos   (31U)
#define RISC_RCFGLOCKR5_RLOCK191_Msk   (0x1UL << RISC_RCFGLOCKR5_RLOCK191_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR5_RLOCK191       RISC_RCFGLOCKR5_RLOCK191_Msk

/*******************  Bits definition for RISC_PERx_CIDCFGR register **********/
#define RISC_PERCIDCFGR_CFEN_Pos      (0U)
#define RISC_PERCIDCFGR_CFEN_Msk      (0x1UL << RISC_PERCIDCFGR_CFEN_Pos)        /*!< 0x00000001 */
#define RISC_PERCIDCFGR_CFEN          RISC_PERCIDCFGR_CFEN_Msk

#define RISC_PERCIDCFGR_SEMEN_Pos     (1U)
#define RISC_PERCIDCFGR_SEMEN_Msk     (0x1UL << RISC_PERCIDCFGR_SEMEN_Pos)       /*!< 0x00000002 */
#define RISC_PERCIDCFGR_SEMEN         RISC_PERCIDCFGR_SEMEN_Msk

#define RISC_PERCIDCFGR_SCID_Pos      (4U)
#define RISC_PERCIDCFGR_SCID_Msk      (0x7UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */
#define RISC_PERCIDCFGR_SCID          RISC_PERCIDCFGR_SCID_Msk
#define RISC_PERCIDCFGR_SCID0         (0x0UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000000 */
#define RISC_PERCIDCFGR_SCID1         (0x1UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000010 */
#define RISC_PERCIDCFGR_SCID2         (0x2UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000020 */
#define RISC_PERCIDCFGR_SCID3         (0x3UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000030 */
#define RISC_PERCIDCFGR_SCID4         (0x4UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000040 */
#define RISC_PERCIDCFGR_SCID5         (0x5UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000050 */
#define RISC_PERCIDCFGR_SCID6         (0x6UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000060 */
#define RISC_PERCIDCFGR_SCID7         (0x7UL << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */

#define RISC_PERCIDCFGR_SEMWL_Pos     (16U)
#define RISC_PERCIDCFGR_SEMWL_Msk     (0xFFUL << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00FF0000 */
#define RISC_PERCIDCFGR_SEMWL         RISC_PERCIDCFGR_SEMWL_Msk
#define RISC_PERCIDCFGR_SEMWLC0       (0x1UL << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00010000 */
#define RISC_PERCIDCFGR_SEMWLC1       (0x2UL << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00020000 */
#define RISC_PERCIDCFGR_SEMWLC2       (0x4UL << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00040000 */
#define RISC_PERCIDCFGR_SEMWLC3       (0x8UL << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00080000 */
#define RISC_PERCIDCFGR_SEMWLC4       (0x10UL << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00100000 */
#define RISC_PERCIDCFGR_SEMWLC5       (0x20UL << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00200000 */
#define RISC_PERCIDCFGR_SEMWLC6       (0x40UL << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00400000 */
#define RISC_PERCIDCFGR_SEMWLC7       (0x80UL << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00800000 */

/*******************  Bits definition for RISC_PERx_SEMCR register ************/
#define RISC_PERSEMCR_SEMMUTEX_Pos    (0U)
#define RISC_PERSEMCR_SEMMUTEX_Msk    (0x1UL << RISC_PERSEMCR_SEMMUTEX_Pos)      /*!< 0x00000001 */
#define RISC_PERSEMCR_SEMMUTEX        RISC_PERSEMCR_SEMMUTEX_Msk

#define RISC_PERSEMCR_SEMCID_Pos      (4U)
#define RISC_PERSEMCR_SEMCID_Msk      (0x7UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */
#define RISC_PERSEMCR_SEMCID          RISC_PERSEMCR_SEMCID_Msk
#define RISC_PERSEMCR_SEMCID0         (0x0UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000000 */
#define RISC_PERSEMCR_SEMCID1         (0x1UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000010 */
#define RISC_PERSEMCR_SEMCID2         (0x2UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000020 */
#define RISC_PERSEMCR_SEMCID3         (0x3UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000030 */
#define RISC_PERSEMCR_SEMCID4         (0x4UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000040 */
#define RISC_PERSEMCR_SEMCID5         (0x5UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000050 */
#define RISC_PERSEMCR_SEMCID6         (0x6UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000060 */
#define RISC_PERSEMCR_SEMCID7         (0x7UL << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */

/*******************  Bits definition for RISC_REGx_zCFGR register ************/
#define RISC_REGCFGR_SREN_Pos         (0U)
#define RISC_REGCFGR_SREN_Msk         (0x1UL << RISC_REGCFGR_SREN_Pos)           /*!< 0x00000001 */
#define RISC_REGCFGR_SREN             RISC_REGCFGR_SREN_Msk

#define RISC_REGCFGR_RLOCK_Pos        (1U)
#define RISC_REGCFGR_RLOCK_Msk        (0x1UL << RISC_REGCFGR_RLOCK_Pos)          /*!< 0x00000002 */
#define RISC_REGCFGR_RLOCK            RISC_REGCFGR_RLOCK_Msk

#define RISC_REGCFGR_SRCID_Pos        (4U)
#define RISC_REGCFGR_SRCID_Msk        (0x7UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */
#define RISC_REGCFGR_SRCID            RISC_REGCFGR_SRCID_Msk
#define RISC_REGCFGR_SRCID0           (0x0UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000000 */
#define RISC_REGCFGR_SRCID1           (0x1UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000010 */
#define RISC_REGCFGR_SRCID2           (0x2UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000020 */
#define RISC_REGCFGR_SRCID3           (0x3UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000030 */
#define RISC_REGCFGR_SRCID4           (0x4UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000040 */
#define RISC_REGCFGR_SRCID5           (0x5UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000050 */
#define RISC_REGCFGR_SRCID6           (0x6UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000060 */
#define RISC_REGCFGR_SRCID7           (0x7UL << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */

#define RISC_REGCFGR_SEC_Pos          (8U)
#define RISC_REGCFGR_SEC_Msk          (0x1UL << RISC_REGCFGR_SEC_Pos)            /*!< 0x00000100 */
#define RISC_REGCFGR_SEC              RISC_REGCFGR_SEC_Msk

#define RISC_REGCFGR_PRIV_Pos         (9U)
#define RISC_REGCFGR_PRIV_Msk         (0x1UL << RISC_REGCFGR_PRIV_Pos)           /*!< 0x00000200 */
#define RISC_REGCFGR_PRIV             RISC_REGCFGR_PRIV_Msk

/*******************  Bits definition for RISC_REGx_zADDR register ************/
#define RISC_REG3ADDR_SUBSTART_Pos    (0U)
#define RISC_REG3ADDR_SUBSTART_Msk    (0x7FFUL << RISC_REG3ADDR_SUBSTART_Pos)    /*!< 0x000007FF */
#define RISC_REG3ADDR_SUBSTART        RISC_REG3ADDR_SUBSTART_Msk

#define RISC_REG3ADDR_SUBLENGTH_Pos   (16U)
#define RISC_REG3ADDR_SUBLENGTH_Msk   (0xFFFUL << RISC_REG3ADDR_SUBLENGTH_Pos)   /*!< 0x0FFF0000 */
#define RISC_REG3ADDR_SUBLENGTH       RISC_REG3ADDR_SUBLENGTH_Msk

/*******************  Bits definition for RIMC_CR register ********************/
#define RIMC_CR_GLOCK_Pos             (0U)
#define RIMC_CR_GLOCK_Msk             (0x1UL << RIMC_CR_GLOCK_Pos)               /*!< 0x00000001 */
#define RIMC_CR_GLOCK                 RIMC_CR_GLOCK_Msk

#define RIMC_CR_WUCDONE_Pos           (1U)
#define RIMC_CR_WUCDONE_Msk           (0x1UL << RIMC_CR_WUCDONE_Pos)             /*!< 0x00000002 */
#define RIMC_CR_WUCDONE               RIMC_CR_WUCDONE_Msk

#define RIMC_CR_TDCID_Pos             (4U)
#define RIMC_CR_TDCID_Msk             (0x7UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000070 */
#define RIMC_CR_TDCID                 RIMC_CR_TDCID_Msk
#define RIMC_CR_TDCID0                (0x0UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000000 */
#define RIMC_CR_TDCID1                (0x1UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000010 */
#define RIMC_CR_TDCID2                (0x2UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000020 */
#define RIMC_CR_TDCID3                (0x3UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000030 */
#define RIMC_CR_TDCID4                (0x4UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000040 */
#define RIMC_CR_TDCID5                (0x5UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000050 */
#define RIMC_CR_TDCID6                (0x6UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000060 */
#define RIMC_CR_TDCID7                (0x7UL << RIMC_CR_TDCID_Pos)               /*!< 0x00000070 */

#define RIMC_CR_DAPCID_Pos            (8U)
#define RIMC_CR_DAPCID_Msk            (0x7UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000700 */
#define RIMC_CR_DAPCID                RIMC_CR_DAPCID_Msk
#define RIMC_CR_DAPCID0               (0x0UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000000 */
#define RIMC_CR_DAPCID1               (0x1UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000100 */
#define RIMC_CR_DAPCID2               (0x2UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000200 */
#define RIMC_CR_DAPCID3               (0x3UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000300 */
#define RIMC_CR_DAPCID4               (0x4UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000400 */
#define RIMC_CR_DAPCID5               (0x5UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000500 */
#define RIMC_CR_DAPCID6               (0x6UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000600 */
#define RIMC_CR_DAPCID7               (0x7UL << RIMC_CR_DAPCID_Pos)              /*!< 0x00000700 */

#define RIMC_CR_DDEN_Pos              (15U)
#define RIMC_CR_DDEN_Msk              (0x1UL << RIMC_CR_DDEN_Pos)                /*!< 0x00008000 */
#define RIMC_CR_DDEN                  RIMC_CR_DDEN_Msk

/*******************  Bits definition for RIMC_SR register ********************/
#define RIMC_SR_GDPEN_Pos             (0U)
#define RIMC_SR_GDPEN_Msk             (0x1UL << RIMC_SR_GDPEN_Pos)               /*!< 0x00000001 */
#define RIMC_SR_GDPEN                 RIMC_SR_GDPEN_Msk

#define RIMC_SR_WUCEN_Pos             (1U)
#define RIMC_SR_WUCEN_Msk             (0x1UL << RIMC_SR_WUCEN_Pos)               /*!< 0x00000002 */
#define RIMC_SR_WUCEN                 RIMC_SR_WUCEN_Msk

/*******************  Bits definition for RIMC_ATTRx register *****************/
#define RIMC_ATTR_CIDSEL_Pos          (2U)
#define RIMC_ATTR_CIDSEL_Msk          (0x1UL << RIMC_ATTR_CIDSEL_Pos)            /*!< 0x00000004 */
#define RIMC_ATTR_CIDSEL              RIMC_ATTR_CIDSEL_Msk

#define RIMC_ATTR_MCID_Pos            (4U)
#define RIMC_ATTR_MCID_Msk            (0x7UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000070 */
#define RIMC_ATTR_MCID                RIMC_ATTR_MCID_Msk
#define RIMC_ATTR_MCID0               (0x0UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000000 */
#define RIMC_ATTR_MCID1               (0x1UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000010 */
#define RIMC_ATTR_MCID2               (0x2UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000020 */
#define RIMC_ATTR_MCID3               (0x3UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000030 */
#define RIMC_ATTR_MCID4               (0x4UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000040 */
#define RIMC_ATTR_MCID5               (0x5UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000050 */
#define RIMC_ATTR_MCID6               (0x6UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000060 */
#define RIMC_ATTR_MCID7               (0x7UL << RIMC_ATTR_MCID_Pos)              /*!< 0x00000070 */

#define RIMC_ATTR_MSEC_Pos            (8U)
#define RIMC_ATTR_MSEC_Msk            (0x1UL << RIMC_ATTR_MSEC_Pos)              /*!< 0x00000100 */
#define RIMC_ATTR_MSEC                RIMC_ATTR_MSEC_Msk

#define RIMC_ATTR_MPRIV_Pos           (9U)
#define RIMC_ATTR_MPRIV_Msk           (0x1UL << RIMC_ATTR_MPRIV_Pos)             /*!< 0x00000200 */
#define RIMC_ATTR_MPRIV               RIMC_ATTR_MPRIV_Msk

/*******************  Bits definition for RIFSC_VERR register *****************/
#define RIFSC_VERR_MINREV_Pos         (0U)
#define RIFSC_VERR_MINREV_Msk         (0xFUL << RIFSC_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RIFSC_VERR_MINREV             RIFSC_VERR_MINREV_Msk

#define RIFSC_VERR_MAJREV_Pos         (4U)
#define RIFSC_VERR_MAJREV_Msk         (0xFUL << RIFSC_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RIFSC_VERR_MAJREV             RIFSC_VERR_MAJREV_Msk

/*******************  Bits definition for RIFSC_IPIDR register ****************/
#define RIFSC_IPIDR_ID_Pos            (0U)
#define RIFSC_IPIDR_ID_Msk            (0xFFFFFFFFUL << RIFSC_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RIFSC_IPIDR_ID                RIFSC_IPIDR_ID_Msk

/*******************  Bits definition for RIFSC_SIDR register *****************/
#define RIFSC_SIDR_SID_Pos            (0U)
#define RIFSC_SIDR_SID_Msk            (0xFFFFFFFFUL << RIFSC_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RIFSC_SIDR_SID                RIFSC_SIDR_SID_Msk

#define RIF_DERIVATIVE1_RESOURCES     (1U)

/*******************  Bits definition for RISAB_CR register *******************/
#define RISAB_CR_GLOCK_Pos            (0U)
#define RISAB_CR_GLOCK_Msk            (0x1UL << RISAB_CR_GLOCK_Pos)              /*!< 0x00000001 */
#define RISAB_CR_GLOCK                RISAB_CR_GLOCK_Msk

#define RISAB_CR_SRWIAD_Pos           (31U)
#define RISAB_CR_SRWIAD_Msk           (0x1UL << RISAB_CR_SRWIAD_Pos)             /*!< 0x80000000 */
#define RISAB_CR_SRWIAD               RISAB_CR_SRWIAD_Msk

/*******************  Bits definition for RISAB_IASR register *****************/
#define RISAB_IASR_CAEF_Pos           (0U)
#define RISAB_IASR_CAEF_Msk           (0x1UL << RISAB_IASR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAB_IASR_CAEF               RISAB_IASR_CAEF_Msk

#define RISAB_IASR_IAEF_Pos           (1U)
#define RISAB_IASR_IAEF_Msk           (0x1UL << RISAB_IASR_IAEF_Pos)             /*!< 0x00000002 */
#define RISAB_IASR_IAEF               RISAB_IASR_IAEF_Msk

/*******************  Bits definition for RISAB_IACR register *****************/
#define RISAB_IACR_CAEF_Pos           (0U)
#define RISAB_IACR_CAEF_Msk           (0x1UL << RISAB_IACR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAB_IACR_CAEF               RISAB_IACR_CAEF_Msk

#define RISAB_IACR_IAEF_Pos           (1U)
#define RISAB_IACR_IAEF_Msk           (0x1UL << RISAB_IACR_IAEF_Pos)             /*!< 0x00000002 */
#define RISAB_IACR_IAEF               RISAB_IACR_IAEF_Msk

/*******************  Bits definition for RISAB_RIFLOCKR register *************/
#define RISAB_RIFLOCKR_RLOCK_Pos      (0U)
#define RISAB_RIFLOCKR_RLOCK_Msk      (0xFFFFFFFFUL << RISAB_RIFLOCKR_RLOCK_Pos) /*!< 0xFFFFFFFF */
#define RISAB_RIFLOCKR_RLOCK          RISAB_RIFLOCKR_RLOCK_Msk
#define RISAB_RIFLOCKR_RLOCK0_Pos     (0U)
#define RISAB_RIFLOCKR_RLOCK0_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISAB_RIFLOCKR_RLOCK0         RISAB_RIFLOCKR_RLOCK0_Msk
#define RISAB_RIFLOCKR_RLOCK1_Pos     (1U)
#define RISAB_RIFLOCKR_RLOCK1_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISAB_RIFLOCKR_RLOCK1         RISAB_RIFLOCKR_RLOCK1_Msk
#define RISAB_RIFLOCKR_RLOCK2_Pos     (2U)
#define RISAB_RIFLOCKR_RLOCK2_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISAB_RIFLOCKR_RLOCK2         RISAB_RIFLOCKR_RLOCK2_Msk
#define RISAB_RIFLOCKR_RLOCK3_Pos     (3U)
#define RISAB_RIFLOCKR_RLOCK3_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISAB_RIFLOCKR_RLOCK3         RISAB_RIFLOCKR_RLOCK3_Msk
#define RISAB_RIFLOCKR_RLOCK4_Pos     (4U)
#define RISAB_RIFLOCKR_RLOCK4_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISAB_RIFLOCKR_RLOCK4         RISAB_RIFLOCKR_RLOCK4_Msk
#define RISAB_RIFLOCKR_RLOCK5_Pos     (5U)
#define RISAB_RIFLOCKR_RLOCK5_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISAB_RIFLOCKR_RLOCK5         RISAB_RIFLOCKR_RLOCK5_Msk
#define RISAB_RIFLOCKR_RLOCK6_Pos     (6U)
#define RISAB_RIFLOCKR_RLOCK6_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISAB_RIFLOCKR_RLOCK6         RISAB_RIFLOCKR_RLOCK6_Msk
#define RISAB_RIFLOCKR_RLOCK7_Pos     (7U)
#define RISAB_RIFLOCKR_RLOCK7_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISAB_RIFLOCKR_RLOCK7         RISAB_RIFLOCKR_RLOCK7_Msk
#define RISAB_RIFLOCKR_RLOCK8_Pos     (8U)
#define RISAB_RIFLOCKR_RLOCK8_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISAB_RIFLOCKR_RLOCK8         RISAB_RIFLOCKR_RLOCK8_Msk
#define RISAB_RIFLOCKR_RLOCK9_Pos     (9U)
#define RISAB_RIFLOCKR_RLOCK9_Msk     (0x1UL << RISAB_RIFLOCKR_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISAB_RIFLOCKR_RLOCK9         RISAB_RIFLOCKR_RLOCK9_Msk
#define RISAB_RIFLOCKR_RLOCK10_Pos    (10U)
#define RISAB_RIFLOCKR_RLOCK10_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISAB_RIFLOCKR_RLOCK10        RISAB_RIFLOCKR_RLOCK10_Msk
#define RISAB_RIFLOCKR_RLOCK11_Pos    (11U)
#define RISAB_RIFLOCKR_RLOCK11_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISAB_RIFLOCKR_RLOCK11        RISAB_RIFLOCKR_RLOCK11_Msk
#define RISAB_RIFLOCKR_RLOCK12_Pos    (12U)
#define RISAB_RIFLOCKR_RLOCK12_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISAB_RIFLOCKR_RLOCK12        RISAB_RIFLOCKR_RLOCK12_Msk
#define RISAB_RIFLOCKR_RLOCK13_Pos    (13U)
#define RISAB_RIFLOCKR_RLOCK13_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISAB_RIFLOCKR_RLOCK13        RISAB_RIFLOCKR_RLOCK13_Msk
#define RISAB_RIFLOCKR_RLOCK14_Pos    (14U)
#define RISAB_RIFLOCKR_RLOCK14_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISAB_RIFLOCKR_RLOCK14        RISAB_RIFLOCKR_RLOCK14_Msk
#define RISAB_RIFLOCKR_RLOCK15_Pos    (15U)
#define RISAB_RIFLOCKR_RLOCK15_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISAB_RIFLOCKR_RLOCK15        RISAB_RIFLOCKR_RLOCK15_Msk
#define RISAB_RIFLOCKR_RLOCK16_Pos    (16U)
#define RISAB_RIFLOCKR_RLOCK16_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISAB_RIFLOCKR_RLOCK16        RISAB_RIFLOCKR_RLOCK16_Msk
#define RISAB_RIFLOCKR_RLOCK17_Pos    (17U)
#define RISAB_RIFLOCKR_RLOCK17_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISAB_RIFLOCKR_RLOCK17        RISAB_RIFLOCKR_RLOCK17_Msk
#define RISAB_RIFLOCKR_RLOCK18_Pos    (18U)
#define RISAB_RIFLOCKR_RLOCK18_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISAB_RIFLOCKR_RLOCK18        RISAB_RIFLOCKR_RLOCK18_Msk
#define RISAB_RIFLOCKR_RLOCK19_Pos    (19U)
#define RISAB_RIFLOCKR_RLOCK19_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISAB_RIFLOCKR_RLOCK19        RISAB_RIFLOCKR_RLOCK19_Msk
#define RISAB_RIFLOCKR_RLOCK20_Pos    (20U)
#define RISAB_RIFLOCKR_RLOCK20_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISAB_RIFLOCKR_RLOCK20        RISAB_RIFLOCKR_RLOCK20_Msk
#define RISAB_RIFLOCKR_RLOCK21_Pos    (21U)
#define RISAB_RIFLOCKR_RLOCK21_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISAB_RIFLOCKR_RLOCK21        RISAB_RIFLOCKR_RLOCK21_Msk
#define RISAB_RIFLOCKR_RLOCK22_Pos    (22U)
#define RISAB_RIFLOCKR_RLOCK22_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISAB_RIFLOCKR_RLOCK22        RISAB_RIFLOCKR_RLOCK22_Msk
#define RISAB_RIFLOCKR_RLOCK23_Pos    (23U)
#define RISAB_RIFLOCKR_RLOCK23_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISAB_RIFLOCKR_RLOCK23        RISAB_RIFLOCKR_RLOCK23_Msk
#define RISAB_RIFLOCKR_RLOCK24_Pos    (24U)
#define RISAB_RIFLOCKR_RLOCK24_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISAB_RIFLOCKR_RLOCK24        RISAB_RIFLOCKR_RLOCK24_Msk
#define RISAB_RIFLOCKR_RLOCK25_Pos    (25U)
#define RISAB_RIFLOCKR_RLOCK25_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISAB_RIFLOCKR_RLOCK25        RISAB_RIFLOCKR_RLOCK25_Msk
#define RISAB_RIFLOCKR_RLOCK26_Pos    (26U)
#define RISAB_RIFLOCKR_RLOCK26_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISAB_RIFLOCKR_RLOCK26        RISAB_RIFLOCKR_RLOCK26_Msk
#define RISAB_RIFLOCKR_RLOCK27_Pos    (27U)
#define RISAB_RIFLOCKR_RLOCK27_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISAB_RIFLOCKR_RLOCK27        RISAB_RIFLOCKR_RLOCK27_Msk
#define RISAB_RIFLOCKR_RLOCK28_Pos    (28U)
#define RISAB_RIFLOCKR_RLOCK28_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISAB_RIFLOCKR_RLOCK28        RISAB_RIFLOCKR_RLOCK28_Msk
#define RISAB_RIFLOCKR_RLOCK29_Pos    (29U)
#define RISAB_RIFLOCKR_RLOCK29_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISAB_RIFLOCKR_RLOCK29        RISAB_RIFLOCKR_RLOCK29_Msk
#define RISAB_RIFLOCKR_RLOCK30_Pos    (30U)
#define RISAB_RIFLOCKR_RLOCK30_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISAB_RIFLOCKR_RLOCK30        RISAB_RIFLOCKR_RLOCK30_Msk
#define RISAB_RIFLOCKR_RLOCK31_Pos    (31U)
#define RISAB_RIFLOCKR_RLOCK31_Msk    (0x1UL << RISAB_RIFLOCKR_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISAB_RIFLOCKR_RLOCK31        RISAB_RIFLOCKR_RLOCK31_Msk

/*******************  Bits definition for RISAB_IAESR register ****************/
#define RISAB_IAESR_IACID_Pos         (0U)
#define RISAB_IAESR_IACID_Msk         (0x7UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000007 */
#define RISAB_IAESR_IACID             RISAB_IAESR_IACID_Msk
#define RISAB_IAESR_IACID0            (0x0UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000000 */
#define RISAB_IAESR_IACID1            (0x1UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000001 */
#define RISAB_IAESR_IACID2            (0x2UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000002 */
#define RISAB_IAESR_IACID3            (0x3UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000003 */
#define RISAB_IAESR_IACID4            (0x4UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000004 */
#define RISAB_IAESR_IACID5            (0x5UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000005 */
#define RISAB_IAESR_IACID6            (0x6UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000006 */
#define RISAB_IAESR_IACID7            (0x7UL << RISAB_IAESR_IACID_Pos)           /*!< 0x00000007 */

#define RISAB_IAESR_IAPRIV_Pos        (4U)
#define RISAB_IAESR_IAPRIV_Msk        (0x1UL << RISAB_IAESR_IAPRIV_Pos)          /*!< 0x00000010 */
#define RISAB_IAESR_IAPRIV            RISAB_IAESR_IAPRIV_Msk

#define RISAB_IAESR_IASEC_Pos         (5U)
#define RISAB_IAESR_IASEC_Msk         (0x1UL << RISAB_IAESR_IASEC_Pos)           /*!< 0x00000020 */
#define RISAB_IAESR_IASEC             RISAB_IAESR_IASEC_Msk

#define RISAB_IAESR_IANRW_Pos         (7U)
#define RISAB_IAESR_IANRW_Msk         (0x1UL << RISAB_IAESR_IANRW_Pos)           /*!< 0x00000080 */
#define RISAB_IAESR_IANRW             RISAB_IAESR_IANRW_Msk

/*******************  Bits definition for RISAB_IADDR register ****************/
#define RISAB_IADDR_IADD_Pos          (0U)
#define RISAB_IADDR_IADD_Msk          (0xFFFFFFFFUL << RISAB_IADDR_IADD_Pos)     /*!< 0xFFFFFFFF */
#define RISAB_IADDR_IADD              RISAB_IADDR_IADD_Msk

/*******************  Bits definition for RISAB_PGx_SECCFGR register **********/
#define RISAB_PGSECCFGR_SEC_Pos       (0U)
#define RISAB_PGSECCFGR_SEC_Msk       (0xFFUL << RISAB_PGSECCFGR_SEC_Pos)        /*!< 0x000000FF */
#define RISAB_PGSECCFGR_SEC           RISAB_PGSECCFGR_SEC_Msk
#define RISAB_PGSECCFGR_SEC0_Pos      (0U)
#define RISAB_PGSECCFGR_SEC0_Msk      (0x1UL << RISAB_PGSECCFGR_SEC0_Pos)        /*!< 0x00000001 */
#define RISAB_PGSECCFGR_SEC0          RISAB_PGSECCFGR_SEC0_Msk
#define RISAB_PGSECCFGR_SEC1_Pos      (1U)
#define RISAB_PGSECCFGR_SEC1_Msk      (0x1UL << RISAB_PGSECCFGR_SEC1_Pos)        /*!< 0x00000002 */
#define RISAB_PGSECCFGR_SEC1          RISAB_PGSECCFGR_SEC1_Msk
#define RISAB_PGSECCFGR_SEC2_Pos      (2U)
#define RISAB_PGSECCFGR_SEC2_Msk      (0x1UL << RISAB_PGSECCFGR_SEC2_Pos)        /*!< 0x00000004 */
#define RISAB_PGSECCFGR_SEC2          RISAB_PGSECCFGR_SEC2_Msk
#define RISAB_PGSECCFGR_SEC3_Pos      (3U)
#define RISAB_PGSECCFGR_SEC3_Msk      (0x1UL << RISAB_PGSECCFGR_SEC3_Pos)        /*!< 0x00000008 */
#define RISAB_PGSECCFGR_SEC3          RISAB_PGSECCFGR_SEC3_Msk
#define RISAB_PGSECCFGR_SEC4_Pos      (4U)
#define RISAB_PGSECCFGR_SEC4_Msk      (0x1UL << RISAB_PGSECCFGR_SEC4_Pos)        /*!< 0x00000010 */
#define RISAB_PGSECCFGR_SEC4          RISAB_PGSECCFGR_SEC4_Msk
#define RISAB_PGSECCFGR_SEC5_Pos      (5U)
#define RISAB_PGSECCFGR_SEC5_Msk      (0x1UL << RISAB_PGSECCFGR_SEC5_Pos)        /*!< 0x00000020 */
#define RISAB_PGSECCFGR_SEC5          RISAB_PGSECCFGR_SEC5_Msk
#define RISAB_PGSECCFGR_SEC6_Pos      (6U)
#define RISAB_PGSECCFGR_SEC6_Msk      (0x1UL << RISAB_PGSECCFGR_SEC6_Pos)        /*!< 0x00000040 */
#define RISAB_PGSECCFGR_SEC6          RISAB_PGSECCFGR_SEC6_Msk
#define RISAB_PGSECCFGR_SEC7_Pos      (7U)
#define RISAB_PGSECCFGR_SEC7_Msk      (0x1UL << RISAB_PGSECCFGR_SEC7_Pos)        /*!< 0x00000080 */
#define RISAB_PGSECCFGR_SEC7          RISAB_PGSECCFGR_SEC7_Msk

/*******************  Bits definition for RISAB_PGx_PRIVCFGR register *********/
#define RISAB_PGPRIVCFGR_PRIV_Pos     (0U)
#define RISAB_PGPRIVCFGR_PRIV_Msk     (0xFFUL << RISAB_PGPRIVCFGR_PRIV_Pos)      /*!< 0x000000FF */
#define RISAB_PGPRIVCFGR_PRIV         RISAB_PGPRIVCFGR_PRIV_Msk
#define RISAB_PGPRIVCFGR_PRIV0_Pos    (0U)
#define RISAB_PGPRIVCFGR_PRIV0_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV0_Pos)      /*!< 0x00000001 */
#define RISAB_PGPRIVCFGR_PRIV0        RISAB_PGPRIVCFGR_PRIV0_Msk
#define RISAB_PGPRIVCFGR_PRIV1_Pos    (1U)
#define RISAB_PGPRIVCFGR_PRIV1_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV1_Pos)      /*!< 0x00000002 */
#define RISAB_PGPRIVCFGR_PRIV1        RISAB_PGPRIVCFGR_PRIV1_Msk
#define RISAB_PGPRIVCFGR_PRIV2_Pos    (2U)
#define RISAB_PGPRIVCFGR_PRIV2_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV2_Pos)      /*!< 0x00000004 */
#define RISAB_PGPRIVCFGR_PRIV2        RISAB_PGPRIVCFGR_PRIV2_Msk
#define RISAB_PGPRIVCFGR_PRIV3_Pos    (3U)
#define RISAB_PGPRIVCFGR_PRIV3_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV3_Pos)      /*!< 0x00000008 */
#define RISAB_PGPRIVCFGR_PRIV3        RISAB_PGPRIVCFGR_PRIV3_Msk
#define RISAB_PGPRIVCFGR_PRIV4_Pos    (4U)
#define RISAB_PGPRIVCFGR_PRIV4_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV4_Pos)      /*!< 0x00000010 */
#define RISAB_PGPRIVCFGR_PRIV4        RISAB_PGPRIVCFGR_PRIV4_Msk
#define RISAB_PGPRIVCFGR_PRIV5_Pos    (5U)
#define RISAB_PGPRIVCFGR_PRIV5_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV5_Pos)      /*!< 0x00000020 */
#define RISAB_PGPRIVCFGR_PRIV5        RISAB_PGPRIVCFGR_PRIV5_Msk
#define RISAB_PGPRIVCFGR_PRIV6_Pos    (6U)
#define RISAB_PGPRIVCFGR_PRIV6_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV6_Pos)      /*!< 0x00000040 */
#define RISAB_PGPRIVCFGR_PRIV6        RISAB_PGPRIVCFGR_PRIV6_Msk
#define RISAB_PGPRIVCFGR_PRIV7_Pos    (7U)
#define RISAB_PGPRIVCFGR_PRIV7_Msk    (0x1UL << RISAB_PGPRIVCFGR_PRIV7_Pos)      /*!< 0x00000080 */
#define RISAB_PGPRIVCFGR_PRIV7        RISAB_PGPRIVCFGR_PRIV7_Msk

/*******************  Bits definition for RISAB_PGx_C2PRIVCFGRx register ******/
#define RISAB_PGC2PRIVCFGR_PRIV_Pos   (0U)
#define RISAB_PGC2PRIVCFGR_PRIV_Msk   (0xFFUL << RISAB_PGC2PRIVCFGR_PRIV_Pos)    /*!< 0x000000FF */
#define RISAB_PGC2PRIVCFGR_PRIV       RISAB_PGC2PRIVCFGR_PRIV_Msk
#define RISAB_PGC2PRIVCFGR_PRIV0_Pos  (0U)
#define RISAB_PGC2PRIVCFGR_PRIV0_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV0_Pos)    /*!< 0x00000001 */
#define RISAB_PGC2PRIVCFGR_PRIV0      RISAB_PGC2PRIVCFGR_PRIV0_Msk
#define RISAB_PGC2PRIVCFGR_PRIV1_Pos  (1U)
#define RISAB_PGC2PRIVCFGR_PRIV1_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV1_Pos)    /*!< 0x00000002 */
#define RISAB_PGC2PRIVCFGR_PRIV1      RISAB_PGC2PRIVCFGR_PRIV1_Msk
#define RISAB_PGC2PRIVCFGR_PRIV2_Pos  (2U)
#define RISAB_PGC2PRIVCFGR_PRIV2_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV2_Pos)    /*!< 0x00000004 */
#define RISAB_PGC2PRIVCFGR_PRIV2      RISAB_PGC2PRIVCFGR_PRIV2_Msk
#define RISAB_PGC2PRIVCFGR_PRIV3_Pos  (3U)
#define RISAB_PGC2PRIVCFGR_PRIV3_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV3_Pos)    /*!< 0x00000008 */
#define RISAB_PGC2PRIVCFGR_PRIV3      RISAB_PGC2PRIVCFGR_PRIV3_Msk
#define RISAB_PGC2PRIVCFGR_PRIV4_Pos  (4U)
#define RISAB_PGC2PRIVCFGR_PRIV4_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV4_Pos)    /*!< 0x00000010 */
#define RISAB_PGC2PRIVCFGR_PRIV4      RISAB_PGC2PRIVCFGR_PRIV4_Msk
#define RISAB_PGC2PRIVCFGR_PRIV5_Pos  (5U)
#define RISAB_PGC2PRIVCFGR_PRIV5_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV5_Pos)    /*!< 0x00000020 */
#define RISAB_PGC2PRIVCFGR_PRIV5      RISAB_PGC2PRIVCFGR_PRIV5_Msk
#define RISAB_PGC2PRIVCFGR_PRIV6_Pos  (6U)
#define RISAB_PGC2PRIVCFGR_PRIV6_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV6_Pos)    /*!< 0x00000040 */
#define RISAB_PGC2PRIVCFGR_PRIV6      RISAB_PGC2PRIVCFGR_PRIV6_Msk
#define RISAB_PGC2PRIVCFGR_PRIV7_Pos  (7U)
#define RISAB_PGC2PRIVCFGR_PRIV7_Msk  (0x1UL << RISAB_PGC2PRIVCFGR_PRIV7_Pos)    /*!< 0x00000080 */
#define RISAB_PGC2PRIVCFGR_PRIV7      RISAB_PGC2PRIVCFGR_PRIV7_Msk

/*******************  Bits definition for RISAB_CIDxPRIVCFGR register *********/
#define RISAB_CIDPRIVCFGR_PPRIV_Pos   (0U)
#define RISAB_CIDPRIVCFGR_PPRIV_Msk   (0xFFFFFFFFUL << RISAB_CIDPRIVCFGR_PPRIV_Pos)  /*!< 0xFFFFFFFF */
#define RISAB_CIDPRIVCFGR_PPRIV       RISAB_CIDPRIVCFGR_PPRIV_Msk
#define RISAB_CIDPRIVCFGR_PPRIV0_Pos  (0U)
#define RISAB_CIDPRIVCFGR_PPRIV0_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV0_Pos)    /*!< 0x00000001 */
#define RISAB_CIDPRIVCFGR_PPRIV0      RISAB_CIDPRIVCFGR_PPRIV0_Msk
#define RISAB_CIDPRIVCFGR_PPRIV1_Pos  (1U)
#define RISAB_CIDPRIVCFGR_PPRIV1_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV1_Pos)    /*!< 0x00000002 */
#define RISAB_CIDPRIVCFGR_PPRIV1      RISAB_CIDPRIVCFGR_PPRIV1_Msk
#define RISAB_CIDPRIVCFGR_PPRIV2_Pos  (2U)
#define RISAB_CIDPRIVCFGR_PPRIV2_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV2_Pos)    /*!< 0x00000004 */
#define RISAB_CIDPRIVCFGR_PPRIV2      RISAB_CIDPRIVCFGR_PPRIV2_Msk
#define RISAB_CIDPRIVCFGR_PPRIV3_Pos  (3U)
#define RISAB_CIDPRIVCFGR_PPRIV3_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV3_Pos)    /*!< 0x00000008 */
#define RISAB_CIDPRIVCFGR_PPRIV3      RISAB_CIDPRIVCFGR_PPRIV3_Msk
#define RISAB_CIDPRIVCFGR_PPRIV4_Pos  (4U)
#define RISAB_CIDPRIVCFGR_PPRIV4_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV4_Pos)    /*!< 0x00000010 */
#define RISAB_CIDPRIVCFGR_PPRIV4      RISAB_CIDPRIVCFGR_PPRIV4_Msk
#define RISAB_CIDPRIVCFGR_PPRIV5_Pos  (5U)
#define RISAB_CIDPRIVCFGR_PPRIV5_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV5_Pos)    /*!< 0x00000020 */
#define RISAB_CIDPRIVCFGR_PPRIV5      RISAB_CIDPRIVCFGR_PPRIV5_Msk
#define RISAB_CIDPRIVCFGR_PPRIV6_Pos  (6U)
#define RISAB_CIDPRIVCFGR_PPRIV6_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV6_Pos)    /*!< 0x00000040 */
#define RISAB_CIDPRIVCFGR_PPRIV6      RISAB_CIDPRIVCFGR_PPRIV6_Msk
#define RISAB_CIDPRIVCFGR_PPRIV7_Pos  (7U)
#define RISAB_CIDPRIVCFGR_PPRIV7_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV7_Pos)    /*!< 0x00000080 */
#define RISAB_CIDPRIVCFGR_PPRIV7      RISAB_CIDPRIVCFGR_PPRIV7_Msk
#define RISAB_CIDPRIVCFGR_PPRIV8_Pos  (8U)
#define RISAB_CIDPRIVCFGR_PPRIV8_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV8_Pos)    /*!< 0x00000100 */
#define RISAB_CIDPRIVCFGR_PPRIV8      RISAB_CIDPRIVCFGR_PPRIV8_Msk
#define RISAB_CIDPRIVCFGR_PPRIV9_Pos  (9U)
#define RISAB_CIDPRIVCFGR_PPRIV9_Msk  (0x1UL << RISAB_CIDPRIVCFGR_PPRIV9_Pos)    /*!< 0x00000200 */
#define RISAB_CIDPRIVCFGR_PPRIV9      RISAB_CIDPRIVCFGR_PPRIV9_Msk
#define RISAB_CIDPRIVCFGR_PPRIV10_Pos (10U)
#define RISAB_CIDPRIVCFGR_PPRIV10_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV10_Pos)   /*!< 0x00000400 */
#define RISAB_CIDPRIVCFGR_PPRIV10     RISAB_CIDPRIVCFGR_PPRIV10_Msk
#define RISAB_CIDPRIVCFGR_PPRIV11_Pos (11U)
#define RISAB_CIDPRIVCFGR_PPRIV11_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV11_Pos)   /*!< 0x00000800 */
#define RISAB_CIDPRIVCFGR_PPRIV11     RISAB_CIDPRIVCFGR_PPRIV11_Msk
#define RISAB_CIDPRIVCFGR_PPRIV12_Pos (12U)
#define RISAB_CIDPRIVCFGR_PPRIV12_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV12_Pos)   /*!< 0x00001000 */
#define RISAB_CIDPRIVCFGR_PPRIV12     RISAB_CIDPRIVCFGR_PPRIV12_Msk
#define RISAB_CIDPRIVCFGR_PPRIV13_Pos (13U)
#define RISAB_CIDPRIVCFGR_PPRIV13_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV13_Pos)   /*!< 0x00002000 */
#define RISAB_CIDPRIVCFGR_PPRIV13     RISAB_CIDPRIVCFGR_PPRIV13_Msk
#define RISAB_CIDPRIVCFGR_PPRIV14_Pos (14U)
#define RISAB_CIDPRIVCFGR_PPRIV14_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV14_Pos)   /*!< 0x00004000 */
#define RISAB_CIDPRIVCFGR_PPRIV14     RISAB_CIDPRIVCFGR_PPRIV14_Msk
#define RISAB_CIDPRIVCFGR_PPRIV15_Pos (15U)
#define RISAB_CIDPRIVCFGR_PPRIV15_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV15_Pos)   /*!< 0x00008000 */
#define RISAB_CIDPRIVCFGR_PPRIV15     RISAB_CIDPRIVCFGR_PPRIV15_Msk
#define RISAB_CIDPRIVCFGR_PPRIV16_Pos (16U)
#define RISAB_CIDPRIVCFGR_PPRIV16_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV16_Pos)   /*!< 0x00010000 */
#define RISAB_CIDPRIVCFGR_PPRIV16     RISAB_CIDPRIVCFGR_PPRIV16_Msk
#define RISAB_CIDPRIVCFGR_PPRIV17_Pos (17U)
#define RISAB_CIDPRIVCFGR_PPRIV17_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV17_Pos)   /*!< 0x00020000 */
#define RISAB_CIDPRIVCFGR_PPRIV17     RISAB_CIDPRIVCFGR_PPRIV17_Msk
#define RISAB_CIDPRIVCFGR_PPRIV18_Pos (18U)
#define RISAB_CIDPRIVCFGR_PPRIV18_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV18_Pos)   /*!< 0x00040000 */
#define RISAB_CIDPRIVCFGR_PPRIV18     RISAB_CIDPRIVCFGR_PPRIV18_Msk
#define RISAB_CIDPRIVCFGR_PPRIV19_Pos (19U)
#define RISAB_CIDPRIVCFGR_PPRIV19_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV19_Pos)   /*!< 0x00080000 */
#define RISAB_CIDPRIVCFGR_PPRIV19     RISAB_CIDPRIVCFGR_PPRIV19_Msk
#define RISAB_CIDPRIVCFGR_PPRIV20_Pos (20U)
#define RISAB_CIDPRIVCFGR_PPRIV20_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV20_Pos)   /*!< 0x00100000 */
#define RISAB_CIDPRIVCFGR_PPRIV20     RISAB_CIDPRIVCFGR_PPRIV20_Msk
#define RISAB_CIDPRIVCFGR_PPRIV21_Pos (21U)
#define RISAB_CIDPRIVCFGR_PPRIV21_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV21_Pos)   /*!< 0x00200000 */
#define RISAB_CIDPRIVCFGR_PPRIV21     RISAB_CIDPRIVCFGR_PPRIV21_Msk
#define RISAB_CIDPRIVCFGR_PPRIV22_Pos (22U)
#define RISAB_CIDPRIVCFGR_PPRIV22_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV22_Pos)   /*!< 0x00400000 */
#define RISAB_CIDPRIVCFGR_PPRIV22     RISAB_CIDPRIVCFGR_PPRIV22_Msk
#define RISAB_CIDPRIVCFGR_PPRIV23_Pos (23U)
#define RISAB_CIDPRIVCFGR_PPRIV23_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV23_Pos)   /*!< 0x00800000 */
#define RISAB_CIDPRIVCFGR_PPRIV23     RISAB_CIDPRIVCFGR_PPRIV23_Msk
#define RISAB_CIDPRIVCFGR_PPRIV24_Pos (24U)
#define RISAB_CIDPRIVCFGR_PPRIV24_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV24_Pos)   /*!< 0x01000000 */
#define RISAB_CIDPRIVCFGR_PPRIV24     RISAB_CIDPRIVCFGR_PPRIV24_Msk
#define RISAB_CIDPRIVCFGR_PPRIV25_Pos (25U)
#define RISAB_CIDPRIVCFGR_PPRIV25_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV25_Pos)   /*!< 0x02000000 */
#define RISAB_CIDPRIVCFGR_PPRIV25     RISAB_CIDPRIVCFGR_PPRIV25_Msk
#define RISAB_CIDPRIVCFGR_PPRIV26_Pos (26U)
#define RISAB_CIDPRIVCFGR_PPRIV26_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV26_Pos)   /*!< 0x04000000 */
#define RISAB_CIDPRIVCFGR_PPRIV26     RISAB_CIDPRIVCFGR_PPRIV26_Msk
#define RISAB_CIDPRIVCFGR_PPRIV27_Pos (27U)
#define RISAB_CIDPRIVCFGR_PPRIV27_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV27_Pos)   /*!< 0x08000000 */
#define RISAB_CIDPRIVCFGR_PPRIV27     RISAB_CIDPRIVCFGR_PPRIV27_Msk
#define RISAB_CIDPRIVCFGR_PPRIV28_Pos (28U)
#define RISAB_CIDPRIVCFGR_PPRIV28_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV28_Pos)   /*!< 0x10000000 */
#define RISAB_CIDPRIVCFGR_PPRIV28     RISAB_CIDPRIVCFGR_PPRIV28_Msk
#define RISAB_CIDPRIVCFGR_PPRIV29_Pos (29U)
#define RISAB_CIDPRIVCFGR_PPRIV29_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV29_Pos)   /*!< 0x20000000 */
#define RISAB_CIDPRIVCFGR_PPRIV29     RISAB_CIDPRIVCFGR_PPRIV29_Msk
#define RISAB_CIDPRIVCFGR_PPRIV30_Pos (30U)
#define RISAB_CIDPRIVCFGR_PPRIV30_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV30_Pos)   /*!< 0x40000000 */
#define RISAB_CIDPRIVCFGR_PPRIV30     RISAB_CIDPRIVCFGR_PPRIV30_Msk
#define RISAB_CIDPRIVCFGR_PPRIV31_Pos (31U)
#define RISAB_CIDPRIVCFGR_PPRIV31_Msk (0x1UL << RISAB_CIDPRIVCFGR_PPRIV31_Pos)   /*!< 0x80000000 */
#define RISAB_CIDPRIVCFGR_PPRIV31     RISAB_CIDPRIVCFGR_PPRIV31_Msk

/*******************  Bits definition for RISAB_CIDxRDCFGR register ***********/
#define RISAB_CIDRDCFGR_PRDEN_Pos     (0U)
#define RISAB_CIDRDCFGR_PRDEN_Msk     (0xFFFFFFFFUL << RISAB_CIDRDCFGR_PRDEN_Pos) /*!< 0xFFFFFFFF */
#define RISAB_CIDRDCFGR_PRDEN         RISAB_CIDRDCFGR_PRDEN_Msk
#define RISAB_CIDRDCFGR_PRDEN0_Pos    (0U)
#define RISAB_CIDRDCFGR_PRDEN0_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN0_Pos)      /*!< 0x00000001 */
#define RISAB_CIDRDCFGR_PRDEN0        RISAB_CIDRDCFGR_PRDEN0_Msk
#define RISAB_CIDRDCFGR_PRDEN1_Pos    (1U)
#define RISAB_CIDRDCFGR_PRDEN1_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN1_Pos)      /*!< 0x00000002 */
#define RISAB_CIDRDCFGR_PRDEN1         RISAB_CIDRDCFGR_PRDEN1_Msk
#define RISAB_CIDRDCFGR_PRDEN2_Pos    (2U)
#define RISAB_CIDRDCFGR_PRDEN2_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN2_Pos)      /*!< 0x00000004 */
#define RISAB_CIDRDCFGR_PRDEN2        RISAB_CIDRDCFGR_PRDEN2_Msk
#define RISAB_CIDRDCFGR_PRDEN3_Pos    (3U)
#define RISAB_CIDRDCFGR_PRDEN3_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN3_Pos)      /*!< 0x00000008 */
#define RISAB_CIDRDCFGR_PRDEN3        RISAB_CIDRDCFGR_PRDEN3_Msk
#define RISAB_CIDRDCFGR_PRDEN4_Pos    (4U)
#define RISAB_CIDRDCFGR_PRDEN4_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN4_Pos)      /*!< 0x00000010 */
#define RISAB_CIDRDCFGR_PRDEN4        RISAB_CIDRDCFGR_PRDEN4_Msk
#define RISAB_CIDRDCFGR_PRDEN5_Pos    (5U)
#define RISAB_CIDRDCFGR_PRDEN5_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN5_Pos)      /*!< 0x00000020 */
#define RISAB_CIDRDCFGR_PRDEN5        RISAB_CIDRDCFGR_PRDEN5_Msk
#define RISAB_CIDRDCFGR_PRDEN6_Pos    (6U)
#define RISAB_CIDRDCFGR_PRDEN6_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN6_Pos)      /*!< 0x00000040 */
#define RISAB_CIDRDCFGR_PRDEN6        RISAB_CIDRDCFGR_PRDEN6_Msk
#define RISAB_CIDRDCFGR_PRDEN7_Pos    (7U)
#define RISAB_CIDRDCFGR_PRDEN7_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN7_Pos)      /*!< 0x00000080 */
#define RISAB_CIDRDCFGR_PRDEN7        RISAB_CIDRDCFGR_PRDEN7_Msk
#define RISAB_CIDRDCFGR_PRDEN8_Pos    (8U)
#define RISAB_CIDRDCFGR_PRDEN8_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN8_Pos)      /*!< 0x00000100 */
#define RISAB_CIDRDCFGR_PRDEN8        RISAB_CIDRDCFGR_PRDEN8_Msk
#define RISAB_CIDRDCFGR_PRDEN9_Pos    (9U)
#define RISAB_CIDRDCFGR_PRDEN9_Msk    (0x1UL << RISAB_CIDRDCFGR_PRDEN9_Pos)      /*!< 0x00000200 */
#define RISAB_CIDRDCFGR_PRDEN9        RISAB_CIDRDCFGR_PRDEN9_Msk
#define RISAB_CIDRDCFGR_PRDEN10_Pos   (10U)
#define RISAB_CIDRDCFGR_PRDEN10_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN10_Pos)     /*!< 0x00000400 */
#define RISAB_CIDRDCFGR_PRDEN10       RISAB_CIDRDCFGR_PRDEN10_Msk
#define RISAB_CIDRDCFGR_PRDEN11_Pos   (11U)
#define RISAB_CIDRDCFGR_PRDEN11_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN11_Pos)     /*!< 0x00000800 */
#define RISAB_CIDRDCFGR_PRDEN11       RISAB_CIDRDCFGR_PRDEN11_Msk
#define RISAB_CIDRDCFGR_PRDEN12_Pos   (12U)
#define RISAB_CIDRDCFGR_PRDEN12_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN12_Pos)     /*!< 0x00001000 */
#define RISAB_CIDRDCFGR_PRDEN12       RISAB_CIDRDCFGR_PRDEN12_Msk
#define RISAB_CIDRDCFGR_PRDEN13_Pos   (13U)
#define RISAB_CIDRDCFGR_PRDEN13_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN13_Pos)     /*!< 0x00002000 */
#define RISAB_CIDRDCFGR_PRDEN13       RISAB_CIDRDCFGR_PRDEN13_Msk
#define RISAB_CIDRDCFGR_PRDEN14_Pos   (14U)
#define RISAB_CIDRDCFGR_PRDEN14_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN14_Pos)     /*!< 0x00004000 */
#define RISAB_CIDRDCFGR_PRDEN14       RISAB_CIDRDCFGR_PRDEN14_Msk
#define RISAB_CIDRDCFGR_PRDEN15_Pos   (15U)
#define RISAB_CIDRDCFGR_PRDEN15_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN15_Pos)     /*!< 0x00008000 */
#define RISAB_CIDRDCFGR_PRDEN15       RISAB_CIDRDCFGR_PRDEN15_Msk
#define RISAB_CIDRDCFGR_PRDEN16_Pos   (16U)
#define RISAB_CIDRDCFGR_PRDEN16_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN16_Pos)     /*!< 0x00010000 */
#define RISAB_CIDRDCFGR_PRDEN16       RISAB_CIDRDCFGR_PRDEN16_Msk
#define RISAB_CIDRDCFGR_PRDEN17_Pos   (17U)
#define RISAB_CIDRDCFGR_PRDEN17_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN17_Pos)     /*!< 0x00020000 */
#define RISAB_CIDRDCFGR_PRDEN17       RISAB_CIDRDCFGR_PRDEN17_Msk
#define RISAB_CIDRDCFGR_PRDEN18_Pos   (18U)
#define RISAB_CIDRDCFGR_PRDEN18_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN18_Pos)     /*!< 0x00040000 */
#define RISAB_CIDRDCFGR_PRDEN18       RISAB_CIDRDCFGR_PRDEN18_Msk
#define RISAB_CIDRDCFGR_PRDEN19_Pos   (19U)
#define RISAB_CIDRDCFGR_PRDEN19_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN19_Pos)     /*!< 0x00080000 */
#define RISAB_CIDRDCFGR_PRDEN19       RISAB_CIDRDCFGR_PRDEN19_Msk
#define RISAB_CIDRDCFGR_PRDEN20_Pos   (20U)
#define RISAB_CIDRDCFGR_PRDEN20_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN20_Pos)     /*!< 0x00100000 */
#define RISAB_CIDRDCFGR_PRDEN20       RISAB_CIDRDCFGR_PRDEN20_Msk
#define RISAB_CIDRDCFGR_PRDEN21_Pos   (21U)
#define RISAB_CIDRDCFGR_PRDEN21_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN21_Pos)     /*!< 0x00200000 */
#define RISAB_CIDRDCFGR_PRDEN21       RISAB_CIDRDCFGR_PRDEN21_Msk
#define RISAB_CIDRDCFGR_PRDEN22_Pos   (22U)
#define RISAB_CIDRDCFGR_PRDEN22_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN22_Pos)     /*!< 0x00400000 */
#define RISAB_CIDRDCFGR_PRDEN22       RISAB_CIDRDCFGR_PRDEN22_Msk
#define RISAB_CIDRDCFGR_PRDEN23_Pos   (23U)
#define RISAB_CIDRDCFGR_PRDEN23_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN23_Pos)     /*!< 0x00800000 */
#define RISAB_CIDRDCFGR_PRDEN23       RISAB_CIDRDCFGR_PRDEN23_Msk
#define RISAB_CIDRDCFGR_PRDEN24_Pos   (24U)
#define RISAB_CIDRDCFGR_PRDEN24_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN24_Pos)     /*!< 0x01000000 */
#define RISAB_CIDRDCFGR_PRDEN24       RISAB_CIDRDCFGR_PRDEN24_Msk
#define RISAB_CIDRDCFGR_PRDEN25_Pos   (25U)
#define RISAB_CIDRDCFGR_PRDEN25_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN25_Pos)     /*!< 0x02000000 */
#define RISAB_CIDRDCFGR_PRDEN25       RISAB_CIDRDCFGR_PRDEN25_Msk
#define RISAB_CIDRDCFGR_PRDEN26_Pos   (26U)
#define RISAB_CIDRDCFGR_PRDEN26_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN26_Pos)     /*!< 0x04000000 */
#define RISAB_CIDRDCFGR_PRDEN26       RISAB_CIDRDCFGR_PRDEN26_Msk
#define RISAB_CIDRDCFGR_PRDEN27_Pos   (27U)
#define RISAB_CIDRDCFGR_PRDEN27_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN27_Pos)     /*!< 0x08000000 */
#define RISAB_CIDRDCFGR_PRDEN27       RISAB_CIDRDCFGR_PRDEN27_Msk
#define RISAB_CIDRDCFGR_PRDEN28_Pos   (28U)
#define RISAB_CIDRDCFGR_PRDEN28_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN28_Pos)     /*!< 0x10000000 */
#define RISAB_CIDRDCFGR_PRDEN28       RISAB_CIDRDCFGR_PRDEN28_Msk
#define RISAB_CIDRDCFGR_PRDEN29_Pos   (29U)
#define RISAB_CIDRDCFGR_PRDEN29_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN29_Pos)     /*!< 0x20000000 */
#define RISAB_CIDRDCFGR_PRDEN29       RISAB_CIDRDCFGR_PRDEN29_Msk
#define RISAB_CIDRDCFGR_PRDEN30_Pos   (30U)
#define RISAB_CIDRDCFGR_PRDEN30_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN30_Pos)     /*!< 0x40000000 */
#define RISAB_CIDRDCFGR_PRDEN30       RISAB_CIDRDCFGR_PRDEN30_Msk
#define RISAB_CIDRDCFGR_PRDEN31_Pos   (31U)
#define RISAB_CIDRDCFGR_PRDEN31_Msk   (0x1UL << RISAB_CIDRDCFGR_PRDEN31_Pos)     /*!< 0x80000000 */
#define RISAB_CIDRDCFGR_PRDEN31       RISAB_CIDRDCFGR_PRDEN31_Msk

/*******************  Bits definition for RISAB_CIDxWRCFGR register ***********/
#define RISAB_CIDWRCFGR_PWREN_Pos     (0U)
#define RISAB_CIDWRCFGR_PWREN_Msk     (0xFFFFFFFFUL << RISAB_CIDWRCFGR_PWREN_Pos) /*!< 0xFFFFFFFF */
#define RISAB_CIDWRCFGR_PWREN         RISAB_CIDWRCFGR_PWREN_Msk
#define RISAB_CIDWRCFGR_PWREN0_Pos    (0U)
#define RISAB_CIDWRCFGR_PWREN0_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN0_Pos)      /*!< 0x00000001 */
#define RISAB_CIDWRCFGR_PWREN0        RISAB_CIDWRCFGR_PWREN0_Msk
#define RISAB_CIDWRCFGR_PWREN1_Pos    (1U)
#define RISAB_CIDWRCFGR_PWREN1_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN1_Pos)      /*!< 0x00000002 */
#define RISAB_CIDWRCFGR_PWREN1        RISAB_CIDWRCFGR_PWREN1_Msk
#define RISAB_CIDWRCFGR_PWREN2_Pos    (2U)
#define RISAB_CIDWRCFGR_PWREN2_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN2_Pos)      /*!< 0x00000004 */
#define RISAB_CIDWRCFGR_PWREN2        RISAB_CIDWRCFGR_PWREN2_Msk
#define RISAB_CIDWRCFGR_PWREN3_Pos    (3U)
#define RISAB_CIDWRCFGR_PWREN3_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN3_Pos)      /*!< 0x00000008 */
#define RISAB_CIDWRCFGR_PWREN3        RISAB_CIDWRCFGR_PWREN3_Msk
#define RISAB_CIDWRCFGR_PWREN4_Pos    (4U)
#define RISAB_CIDWRCFGR_PWREN4_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN4_Pos)      /*!< 0x00000010 */
#define RISAB_CIDWRCFGR_PWREN4        RISAB_CIDWRCFGR_PWREN4_Msk
#define RISAB_CIDWRCFGR_PWREN5_Pos    (5U)
#define RISAB_CIDWRCFGR_PWREN5_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN5_Pos)      /*!< 0x00000020 */
#define RISAB_CIDWRCFGR_PWREN5        RISAB_CIDWRCFGR_PWREN5_Msk
#define RISAB_CIDWRCFGR_PWREN6_Pos    (6U)
#define RISAB_CIDWRCFGR_PWREN6_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN6_Pos)      /*!< 0x00000040 */
#define RISAB_CIDWRCFGR_PWREN6        RISAB_CIDWRCFGR_PWREN6_Msk
#define RISAB_CIDWRCFGR_PWREN7_Pos    (7U)
#define RISAB_CIDWRCFGR_PWREN7_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN7_Pos)      /*!< 0x00000080 */
#define RISAB_CIDWRCFGR_PWREN7        RISAB_CIDWRCFGR_PWREN7_Msk
#define RISAB_CIDWRCFGR_PWREN8_Pos    (8U)
#define RISAB_CIDWRCFGR_PWREN8_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN8_Pos)      /*!< 0x00000100 */
#define RISAB_CIDWRCFGR_PWREN8        RISAB_CIDWRCFGR_PWREN8_Msk
#define RISAB_CIDWRCFGR_PWREN9_Pos    (9U)
#define RISAB_CIDWRCFGR_PWREN9_Msk    (0x1UL << RISAB_CIDWRCFGR_PWREN9_Pos)      /*!< 0x00000200 */
#define RISAB_CIDWRCFGR_PWREN9        RISAB_CIDWRCFGR_PWREN9_Msk
#define RISAB_CIDWRCFGR_PWREN10_Pos   (10U)
#define RISAB_CIDWRCFGR_PWREN10_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN10_Pos)     /*!< 0x00000400 */
#define RISAB_CIDWRCFGR_PWREN10       RISAB_CIDWRCFGR_PWREN10_Msk
#define RISAB_CIDWRCFGR_PWREN11_Pos   (11U)
#define RISAB_CIDWRCFGR_PWREN11_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN11_Pos)     /*!< 0x00000800 */
#define RISAB_CIDWRCFGR_PWREN11       RISAB_CIDWRCFGR_PWREN11_Msk
#define RISAB_CIDWRCFGR_PWREN12_Pos   (12U)
#define RISAB_CIDWRCFGR_PWREN12_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN12_Pos)     /*!< 0x00001000 */
#define RISAB_CIDWRCFGR_PWREN12       RISAB_CIDWRCFGR_PWREN12_Msk
#define RISAB_CIDWRCFGR_PWREN13_Pos   (13U)
#define RISAB_CIDWRCFGR_PWREN13_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN13_Pos)     /*!< 0x00002000 */
#define RISAB_CIDWRCFGR_PWREN13       RISAB_CIDWRCFGR_PWREN13_Msk
#define RISAB_CIDWRCFGR_PWREN14_Pos   (14U)
#define RISAB_CIDWRCFGR_PWREN14_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN14_Pos)     /*!< 0x00004000 */
#define RISAB_CIDWRCFGR_PWREN14       RISAB_CIDWRCFGR_PWREN14_Msk
#define RISAB_CIDWRCFGR_PWREN15_Pos   (15U)
#define RISAB_CIDWRCFGR_PWREN15_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN15_Pos)     /*!< 0x00008000 */
#define RISAB_CIDWRCFGR_PWREN15       RISAB_CIDWRCFGR_PWREN15_Msk
#define RISAB_CIDWRCFGR_PWREN16_Pos   (16U)
#define RISAB_CIDWRCFGR_PWREN16_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN16_Pos)     /*!< 0x00010000 */
#define RISAB_CIDWRCFGR_PWREN16       RISAB_CIDWRCFGR_PWREN16_Msk
#define RISAB_CIDWRCFGR_PWREN17_Pos   (17U)
#define RISAB_CIDWRCFGR_PWREN17_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN17_Pos)     /*!< 0x00020000 */
#define RISAB_CIDWRCFGR_PWREN17       RISAB_CIDWRCFGR_PWREN17_Msk
#define RISAB_CIDWRCFGR_PWREN18_Pos   (18U)
#define RISAB_CIDWRCFGR_PWREN18_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN18_Pos)     /*!< 0x00040000 */
#define RISAB_CIDWRCFGR_PWREN18       RISAB_CIDWRCFGR_PWREN18_Msk
#define RISAB_CIDWRCFGR_PWREN19_Pos   (19U)
#define RISAB_CIDWRCFGR_PWREN19_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN19_Pos)     /*!< 0x00080000 */
#define RISAB_CIDWRCFGR_PWREN19       RISAB_CIDWRCFGR_PWREN19_Msk
#define RISAB_CIDWRCFGR_PWREN20_Pos   (20U)
#define RISAB_CIDWRCFGR_PWREN20_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN20_Pos)     /*!< 0x00100000 */
#define RISAB_CIDWRCFGR_PWREN20       RISAB_CIDWRCFGR_PWREN20_Msk
#define RISAB_CIDWRCFGR_PWREN21_Pos   (21U)
#define RISAB_CIDWRCFGR_PWREN21_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN21_Pos)     /*!< 0x00200000 */
#define RISAB_CIDWRCFGR_PWREN21       RISAB_CIDWRCFGR_PWREN21_Msk
#define RISAB_CIDWRCFGR_PWREN22_Pos   (22U)
#define RISAB_CIDWRCFGR_PWREN22_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN22_Pos)     /*!< 0x00400000 */
#define RISAB_CIDWRCFGR_PWREN22       RISAB_CIDWRCFGR_PWREN22_Msk
#define RISAB_CIDWRCFGR_PWREN23_Pos   (23U)
#define RISAB_CIDWRCFGR_PWREN23_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN23_Pos)     /*!< 0x00800000 */
#define RISAB_CIDWRCFGR_PWREN23       RISAB_CIDWRCFGR_PWREN23_Msk
#define RISAB_CIDWRCFGR_PWREN24_Pos   (24U)
#define RISAB_CIDWRCFGR_PWREN24_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN24_Pos)     /*!< 0x01000000 */
#define RISAB_CIDWRCFGR_PWREN24       RISAB_CIDWRCFGR_PWREN24_Msk
#define RISAB_CIDWRCFGR_PWREN25_Pos   (25U)
#define RISAB_CIDWRCFGR_PWREN25_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN25_Pos)     /*!< 0x02000000 */
#define RISAB_CIDWRCFGR_PWREN25       RISAB_CIDWRCFGR_PWREN25_Msk
#define RISAB_CIDWRCFGR_PWREN26_Pos   (26U)
#define RISAB_CIDWRCFGR_PWREN26_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN26_Pos)     /*!< 0x04000000 */
#define RISAB_CIDWRCFGR_PWREN26       RISAB_CIDWRCFGR_PWREN26_Msk
#define RISAB_CIDWRCFGR_PWREN27_Pos   (27U)
#define RISAB_CIDWRCFGR_PWREN27_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN27_Pos)     /*!< 0x08000000 */
#define RISAB_CIDWRCFGR_PWREN27       RISAB_CIDWRCFGR_PWREN27_Msk
#define RISAB_CIDWRCFGR_PWREN28_Pos   (28U)
#define RISAB_CIDWRCFGR_PWREN28_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN28_Pos)     /*!< 0x10000000 */
#define RISAB_CIDWRCFGR_PWREN28       RISAB_CIDWRCFGR_PWREN28_Msk
#define RISAB_CIDWRCFGR_PWREN29_Pos   (29U)
#define RISAB_CIDWRCFGR_PWREN29_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN29_Pos)     /*!< 0x20000000 */
#define RISAB_CIDWRCFGR_PWREN29       RISAB_CIDWRCFGR_PWREN29_Msk
#define RISAB_CIDWRCFGR_PWREN30_Pos   (30U)
#define RISAB_CIDWRCFGR_PWREN30_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN30_Pos)     /*!< 0x40000000 */
#define RISAB_CIDWRCFGR_PWREN30       RISAB_CIDWRCFGR_PWREN30_Msk
#define RISAB_CIDWRCFGR_PWREN31_Pos   (31U)
#define RISAB_CIDWRCFGR_PWREN31_Msk   (0x1UL << RISAB_CIDWRCFGR_PWREN31_Pos)     /*!< 0x80000000 */
#define RISAB_CIDWRCFGR_PWREN31       RISAB_CIDWRCFGR_PWREN31_Msk

/*******************  Bits definition for RISAB_PGx_CIDCFGR register **********/
#define RISAB_PGCIDCFGR_CFEN_Pos      (0U)
#define RISAB_PGCIDCFGR_CFEN_Msk      (0x1UL << RISAB_PGCIDCFGR_CFEN_Pos)        /*!< 0x00000001 */
#define RISAB_PGCIDCFGR_CFEN          RISAB_PGCIDCFGR_CFEN_Msk

#define RISAB_PGCIDCFGR_DCEN_Pos      (2U)
#define RISAB_PGCIDCFGR_DCEN_Msk      (0x1UL << RISAB_PGCIDCFGR_DCEN_Pos)        /*!< 0x00000004 */
#define RISAB_PGCIDCFGR_DCEN          RISAB_PGCIDCFGR_DCEN_Msk

#define RISAB_PGCIDCFGR_DCCID_Pos     (4U)
#define RISAB_PGCIDCFGR_DCCID_Msk     (0x7UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000070 */
#define RISAB_PGCIDCFGR_DCCID         RISAB_PGCIDCFGR_DCCID_Msk
#define RISAB_PGCIDCFGR_DCCIDC0       (0x0UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000000 */
#define RISAB_PGCIDCFGR_DCCIDC1       (0x1UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000010 */
#define RISAB_PGCIDCFGR_DCCIDC2       (0x2UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000020 */
#define RISAB_PGCIDCFGR_DCCIDC3       (0x3UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000030 */
#define RISAB_PGCIDCFGR_DCCIDC4       (0x4UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000040 */
#define RISAB_PGCIDCFGR_DCCIDC5       (0x5UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000050 */
#define RISAB_PGCIDCFGR_DCCIDC6       (0x6UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000060 */
#define RISAB_PGCIDCFGR_DCCIDC7       (0x7UL << RISAB_PGCIDCFGR_DCCID_Pos)       /*!< 0x00000070 */

/*******************  Bits definition for RISAB_VERR register *****************/
#define RISAB_VERR_MINREV_Pos         (0U)
#define RISAB_VERR_MINREV_Msk         (0xFUL << RISAB_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RISAB_VERR_MINREV             RISAB_VERR_MINREV_Msk

#define RISAB_VERR_MAJREV_Pos         (4U)
#define RISAB_VERR_MAJREV_Msk         (0xFUL << RISAB_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RISAB_VERR_MAJREV             RISAB_VERR_MAJREV_Msk

/*******************  Bits definition for RISAB_IPIDR register ****************/
#define RISAB_IPIDR_ID_Pos            (0U)
#define RISAB_IPIDR_ID_Msk            (0xFFFFFFFFUL << RISAB_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RISAB_IPIDR_ID                RISAB_IPIDR_ID_Msk

/*******************  Bits definition for RISAB_SIDR register *****************/
#define RISAB_SIDR_SID_Pos            (0U)
#define RISAB_SIDR_SID_Msk            (0xFFFFFFFFUL << RISAB_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RISAB_SIDR_SID                RISAB_SIDR_SID_Msk

/*******************  Bits definition for RISAF_CR register *******************/
#define RISAF_CR_GLOCK_Pos            (0U)
#define RISAF_CR_GLOCK_Msk            (0x1UL << RISAF_CR_GLOCK_Pos)              /*!< 0x00000001 */
#define RISAF_CR_GLOCK                RISAF_CR_GLOCK_Msk

/*******************  Bits definition for RISAF_SR register *******************/
#define RISAF_SR_KEYVALID_Pos         (0U)
#define RISAF_SR_KEYVALID_Msk         (0x1UL << RISAF_SR_KEYVALID_Pos)           /*!< 0x00000001 */
#define RISAF_SR_KEYVALID             RISAF_SR_KEYVALID_Msk

#define RISAF_SR_KEYRDY_Pos           (1U)
#define RISAF_SR_KEYRDY_Msk           (0x1UL << RISAF_SR_KEYRDY_Pos)             /*!< 0x00000002 */
#define RISAF_SR_KEYRDY               RISAF_SR_KEYRDY_Msk

#define RISAF_SR_ENCDIS_Pos           (2U)
#define RISAF_SR_ENCDIS_Msk           (0x1UL << RISAF_SR_ENCDIS_Pos)             /*!< 0x00000004 */
#define RISAF_SR_ENCDIS               RISAF_SR_ENCDIS_Msk

/*******************  Bits definition for RISAF_IASR register *****************/
#define RISAF_IASR_CAEF_Pos           (0U)
#define RISAF_IASR_CAEF_Msk           (0x1UL << RISAF_IASR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAF_IASR_CAEF               RISAF_IASR_CAEF_Msk

#define RISAF_IASR_IAEF0_Pos          (1U)
#define RISAF_IASR_IAEF0_Msk          (0x1UL << RISAF_IASR_IAEF0_Pos)            /*!< 0x00000002 */
#define RISAF_IASR_IAEF0              RISAF_IASR_IAEF0_Msk

#define RISAF_IASR_IAEF1_Pos          (2U)
#define RISAF_IASR_IAEF1_Msk          (0x1UL << RISAF_IASR_IAEF1_Pos)            /*!< 0x00000004 */
#define RISAF_IASR_IAEF1              RISAF_IASR_IAEF1_Msk

/*******************  Bits definition for RISAF_IACR register *****************/
#define RISAF_IACR_CAEF_Pos           (0U)
#define RISAF_IACR_CAEF_Msk           (0x1UL << RISAF_IACR_CAEF_Pos)             /*!< 0x00000001 */
#define RISAF_IACR_CAEF               RISAF_IACR_CAEF_Msk

#define RISAF_IACR_IAEF0_Pos          (1U)
#define RISAF_IACR_IAEF0_Msk          (0x1UL << RISAF_IACR_IAEF0_Pos)            /*!< 0x00000002 */
#define RISAF_IACR_IAEF0              RISAF_IACR_IAEF0_Msk

#define RISAF_IACR_IAEF1_Pos          (2U)
#define RISAF_IACR_IAEF1_Msk          (0x1UL << RISAF_IACR_IAEF1_Pos)            /*!< 0x00000004 */
#define RISAF_IACR_IAEF1              RISAF_IACR_IAEF1_Msk

/*******************  Bits definition for RISAF_IAESR register ****************/
#define RISAF_IAESR_IACID_Pos         (0U)
#define RISAF_IAESR_IACID_Msk         (0x7UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000007 */
#define RISAF_IAESR_IACID             RISAF_IAESR_IACID_Msk
#define RISAF_IAESR_IACID0            (0x0UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000000 */
#define RISAF_IAESR_IACID1            (0x1UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000001 */
#define RISAF_IAESR_IACID2            (0x2UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000002 */
#define RISAF_IAESR_IACID3            (0x3UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000003 */
#define RISAF_IAESR_IACID4            (0x4UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000004 */
#define RISAF_IAESR_IACID5            (0x5UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000005 */
#define RISAF_IAESR_IACID6            (0x6UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000006 */
#define RISAF_IAESR_IACID7            (0x7UL << RISAF_IAESR_IACID_Pos)           /*!< 0x00000007 */

#define RISAF_IAESR_IAPRIV_Pos        (4U)
#define RISAF_IAESR_IAPRIV_Msk        (0x1UL << RISAF_IAESR_IAPRIV_Pos)          /*!< 0x00000010 */
#define RISAF_IAESR_IAPRIV            RISAF_IAESR_IAPRIV_Msk

#define RISAF_IAESR_IASEC_Pos         (5U)
#define RISAF_IAESR_IASEC_Msk         (0x1UL << RISAF_IAESR_IASEC_Pos)           /*!< 0x00000020 */
#define RISAF_IAESR_IASEC             RISAF_IAESR_IASEC_Msk

#define RISAF_IAESR_IANRW_Pos         (7U)
#define RISAF_IAESR_IANRW_Msk         (0x1UL << RISAF_IAESR_IANRW_Pos)           /*!< 0x00000080 */
#define RISAF_IAESR_IANRW             RISAF_IAESR_IANRW_Msk

/*******************  Bits definition for RISAF_IADDR register ****************/
#define RISAF_IADDR_IADD_Pos          (0U)
#define RISAF_IADDR_IADD_Msk          (0xFFFFFFFFUL << RISAF_IADDR_IADD_Pos)     /*!< 0xFFFFFFFF */
#define RISAF_IADDR_IADD              RISAF_IADDR_IADD_Msk

/*******************  Bits definition for RISAF_KEYR0 register ****************/
#define RISAF_KEYR0_KEY_Pos           (0U)
#define RISAF_KEYR0_KEY_Msk           (0xFFFFFFFFUL << RISAF_KEYR0_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR0_KEY               RISAF_KEYR0_KEY_Msk

/*******************  Bits definition for RISAF_KEYR1 register ****************/
#define RISAF_KEYR1_KEY_Pos           (0U)
#define RISAF_KEYR1_KEY_Msk           (0xFFFFFFFFUL << RISAF_KEYR1_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR1_KEY               RISAF_KEYR1_KEY_Msk

/*******************  Bits definition for RISAF_KEYR2 register ****************/
#define RISAF_KEYR2_KEY_Pos           (0U)
#define RISAF_KEYR2_KEY_Msk           (0xFFFFFFFFUL << RISAF_KEYR2_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR2_KEY               RISAF_KEYR2_KEY_Msk

/*******************  Bits definition for RISAF_KEYR3 register ****************/
#define RISAF_KEYR3_KEY_Pos           (0U)
#define RISAF_KEYR3_KEY_Msk           (0xFFFFFFFFUL << RISAF_KEYR3_KEY_Pos)      /*!< 0xFFFFFFFF */
#define RISAF_KEYR3_KEY               RISAF_KEYR3_KEY_Msk

/*******************  Bits definition for RISAF_REGx_CFGR register ************/
#define RISAF_REGCFGR_BREN_Pos        (0U)
#define RISAF_REGCFGR_BREN_Msk        (0x1UL << RISAF_REGCFGR_BREN_Pos)          /*!< 0x00000001 */
#define RISAF_REGCFGR_BREN            RISAF_REGCFGR_BREN_Msk

#define RISAF_REGCFGR_SEC_Pos         (8U)
#define RISAF_REGCFGR_SEC_Msk         (0x1UL << RISAF_REGCFGR_SEC_Pos)           /*!< 0x00000100 */
#define RISAF_REGCFGR_SEC             RISAF_REGCFGR_SEC_Msk

#define RISAF_REGCFGR_ENC_Pos         (14U)
#define RISAF_REGCFGR_ENC_Msk         (0x3UL << RISAF_REGCFGR_ENC_Pos)           /*!< 0x0000C000 */
#define RISAF_REGCFGR_ENC             RISAF_REGCFGR_ENC_Msk

#define RISAF_REGCFGR_PRIV_Pos        (16U)
#define RISAF_REGCFGR_PRIV_Msk        (0xFFUL << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00FF0000 */
#define RISAF_REGCFGR_PRIV            RISAF_REGCFGR_PRIV_Msk
#define RISAF_REGCFGR_PRIVC0          (0x1UL << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00010000 */
#define RISAF_REGCFGR_PRIVC1          (0x2UL << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00020000 */
#define RISAF_REGCFGR_PRIVC2          (0x4UL << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00040000 */
#define RISAF_REGCFGR_PRIVC3          (0x8UL << RISAF_REGCFGR_PRIV_Pos)          /*!< 0x00080000 */
#define RISAF_REGCFGR_PRIVC4          (0x10UL << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00100000 */
#define RISAF_REGCFGR_PRIVC5          (0x20UL << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00200000 */
#define RISAF_REGCFGR_PRIVC6          (0x40UL << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00400000 */
#define RISAF_REGCFGR_PRIVC7          (0x80UL << RISAF_REGCFGR_PRIV_Pos)         /*!< 0x00800000 */

/*******************  Bits definition for RISAF_REGx_STARTR register **********/
#define RISAF_REGSTARTR_BADDSTART_Pos (0U)
#define RISAF_REGSTARTR_BADDSTART_Msk (0xFFFFFFFFUL << RISAF_REGSTARTR_BADDSTART_Pos)  /*!< 0xFFFFFFFF */
#define RISAF_REGSTARTR_BADDSTART     RISAF_REGSTARTR_BADDSTART_Msk

/*******************  Bits definition for RISAF_REGx_ENDR register ************/
#define RISAF_REGENDR_BADDEND_Pos     (0U)
#define RISAF_REGENDR_BADDEND_Msk     (0xFFFFFFFFUL << RISAF_REGENDR_BADDEND_Pos)  /*!< 0xFFFFFFFF */
#define RISAF_REGENDR_BADDEND         RISAF_REGENDR_BADDEND_Msk

/*******************  Bits definition for RISAF_REGx_CIDCFGR register *********/
#define RISAF_REGCIDCFGR_RDEN_Pos     (0U)
#define RISAF_REGCIDCFGR_RDEN_Msk     (0xFFUL << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x000000FF */
#define RISAF_REGCIDCFGR_RDEN         RISAF_REGCIDCFGR_RDEN_Msk
#define RISAF_REGCIDCFGR_RDENC0       (0x1UL << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000001 */
#define RISAF_REGCIDCFGR_RDENC1       (0x2UL << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000002 */
#define RISAF_REGCIDCFGR_RDENC2       (0x4UL << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000004 */
#define RISAF_REGCIDCFGR_RDENC3       (0x8UL << RISAF_REGCIDCFGR_RDEN_Pos)       /*!< 0x00000008 */
#define RISAF_REGCIDCFGR_RDENC4       (0x10UL << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000010 */
#define RISAF_REGCIDCFGR_RDENC5       (0x20UL << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000020 */
#define RISAF_REGCIDCFGR_RDENC6       (0x40UL << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000040 */
#define RISAF_REGCIDCFGR_RDENC7       (0x80UL << RISAF_REGCIDCFGR_RDEN_Pos)      /*!< 0x00000080 */

#define RISAF_REGCIDCFGR_WREN_Pos     (16U)
#define RISAF_REGCIDCFGR_WREN_Msk     (0xFFUL << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00FF0000 */
#define RISAF_REGCIDCFGR_WREN         RISAF_REGCIDCFGR_WREN_Msk
#define RISAF_REGCIDCFGR_WRENC0       (0x1UL << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00010000 */
#define RISAF_REGCIDCFGR_WRENC1       (0x2UL << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00020000 */
#define RISAF_REGCIDCFGR_WRENC2       (0x4UL << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00040000 */
#define RISAF_REGCIDCFGR_WRENC3       (0x8UL << RISAF_REGCIDCFGR_WREN_Pos)       /*!< 0x00080000 */
#define RISAF_REGCIDCFGR_WRENC4       (0x10UL << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00100000 */
#define RISAF_REGCIDCFGR_WRENC5       (0x20UL << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00200000 */
#define RISAF_REGCIDCFGR_WRENC6       (0x40UL << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00400000 */
#define RISAF_REGCIDCFGR_WRENC7       (0x80UL << RISAF_REGCIDCFGR_WREN_Pos)      /*!< 0x00800000 */

/*******************  Bits definition for RISAF_REGx_zCFGR register ***********/
#define RISAF_REGZCFGR_SREN_Pos       (0U)
#define RISAF_REGZCFGR_SREN_Msk       (0x1UL << RISAF_REGZCFGR_SREN_Pos)         /*!< 0x00000001 */
#define RISAF_REGZCFGR_SREN           RISAF_REGZCFGR_SREN_Msk

#define RISAF_REGZCFGR_RLOCK_Pos      (1U)
#define RISAF_REGZCFGR_RLOCK_Msk      (0x1UL << RISAF_REGZCFGR_RLOCK_Pos)        /*!< 0x00000002 */
#define RISAF_REGZCFGR_RLOCK          RISAF_REGZCFGR_RLOCK_Msk

#define RISAF_REGZCFGR_SRCID_Pos      (4U)
#define RISAF_REGZCFGR_SRCID_Msk      (0x7UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000070 */
#define RISAF_REGZCFGR_SRCID          RISAF_REGZCFGR_SRCID_Msk
#define RISAF_REGZCFGR_SRCID0         (0x0UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000000 */
#define RISAF_REGZCFGR_SRCID1         (0x1UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000010 */
#define RISAF_REGZCFGR_SRCID2         (0x2UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000020 */
#define RISAF_REGZCFGR_SRCID3         (0x3UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000030 */
#define RISAF_REGZCFGR_SRCID4         (0x4UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000040 */
#define RISAF_REGZCFGR_SRCID5         (0x5UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000050 */
#define RISAF_REGZCFGR_SRCID6         (0x6UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000060 */
#define RISAF_REGZCFGR_SRCID7         (0x7UL << RISAF_REGZCFGR_SRCID_Pos)        /*!< 0x00000070 */

#define RISAF_REGZCFGR_SEC_Pos        (8U)
#define RISAF_REGZCFGR_SEC_Msk        (0x1UL << RISAF_REGZCFGR_SEC_Pos)          /*!< 0x00000100 */
#define RISAF_REGZCFGR_SEC            RISAF_REGZCFGR_SEC_Msk

#define RISAF_REGZCFGR_PRIV_Pos       (9U)
#define RISAF_REGZCFGR_PRIV_Msk       (0x1UL << RISAF_REGZCFGR_PRIV_Pos)         /*!< 0x00000200 */
#define RISAF_REGZCFGR_PRIV           RISAF_REGZCFGR_PRIV_Msk

#define RISAF_REGZCFGR_RDEN_Pos       (12U)
#define RISAF_REGZCFGR_RDEN_Msk       (0x1UL << RISAF_REGZCFGR_RDEN_Pos)         /*!< 0x00001000 */
#define RISAF_REGZCFGR_RDEN           RISAF_REGZCFGR_RDEN_Msk

#define RISAF_REGZCFGR_WREN_Pos       (13U)
#define RISAF_REGZCFGR_WREN_Msk       (0x1UL << RISAF_REGZCFGR_WREN_Pos)         /*!< 0x00002000 */
#define RISAF_REGZCFGR_WREN           RISAF_REGZCFGR_WREN_Msk

#define RISAF_REGZCFGR_ENC_Pos        (14U)
#define RISAF_REGZCFGR_ENC_Msk        (0x3UL << RISAF_REGZCFGR_ENC_Pos)          /*!< 0x0000C000 */
#define RISAF_REGZCFGR_ENC            RISAF_REGZCFGR_ENC_Msk

/*******************  Bits definition for RISAF_REGx_zSTARTR register *********/
#define RISAF_REGZSTARTR_SADDSTART_Pos (0U)
#define RISAF_REGZSTARTR_SADDSTART_Msk (0xFFFFFFFFUL << RISAF_REGZSTARTR_SADDSTART_Pos) /*!< 0xFFFFFFFF */
#define RISAF_REGZSTARTR_SADDSTART     RISAF_REGZSTARTR_SADDSTART_Msk

/*******************  Bits definition for RISAF_REGx_zENDR register ***********/
#define RISAF_REGZENDR_SADDEND_Pos    (0U)
#define RISAF_REGZENDR_SADDEND_Msk    (0xFFFFFFFFUL << RISAF_REGZENDR_SADDEND_Pos) /*!< 0xFFFFFFFF */
#define RISAF_REGZENDR_SADDEND        RISAF_REGZENDR_SADDEND_Msk

/*******************  Bits definition for RISAF_REGx_zNESTR register **********/
#define RISAF_REGZNESTR_DCEN_Pos      (2U)
#define RISAF_REGZNESTR_DCEN_Msk      (0x1UL << RISAF_REGZNESTR_DCEN_Pos)        /*!< 0x00000004 */
#define RISAF_REGZNESTR_DCEN          RISAF_REGZNESTR_DCEN_Msk

#define RISAF_REGZNESTR_DCCID_Pos     (4U)
#define RISAF_REGZNESTR_DCCID_Msk     (0x7UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000070 */
#define RISAF_REGZNESTR_DCCID         RISAF_REGZNESTR_DCCID_Msk
#define RISAF_REGZNESTR_DCCID0        (0x0UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000000 */
#define RISAF_REGZNESTR_DCCID1        (0x1UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000010 */
#define RISAF_REGZNESTR_DCCID2        (0x2UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000020 */
#define RISAF_REGZNESTR_DCCID3        (0x3UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000030 */
#define RISAF_REGZNESTR_DCCID4        (0x4UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000040 */
#define RISAF_REGZNESTR_DCCID5        (0x5UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000050 */
#define RISAF_REGZNESTR_DCCID6        (0x6UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000060 */
#define RISAF_REGZNESTR_DCCID7        (0x7UL << RISAF_REGZNESTR_DCCID_Pos)       /*!< 0x00000070 */

/*******************  Bits definition for RISAF_HWCFGR register *****************/
#define RISAF_HWCFGR_CFG1_Pos         (0U)
#define RISAF_HWCFGR_CFG1_Msk         (0xFFUL << RISAF_HWCFGR_CFG1_Pos)          /*!< 0x000000FF */
#define RISAF_HWCFGR_CFG1             RISAF_HWCFGR_CFG1_Msk
#define RISAF_HWCFGR_CFG2_Pos         (8U)
#define RISAF_HWCFGR_CFG2_Msk         (0xFFUL << RISAF_HWCFGR_CFG2_Pos)          /*!< 0x0000FF00 */
#define RISAF_HWCFGR_CFG2             RISAF_HWCFGR_CFG2_Msk
#define RISAF_HWCFGR_CFG3_Pos         (16U)
#define RISAF_HWCFGR_CFG3_Msk         (0xFFUL << RISAF_HWCFGR_CFG3_Pos)          /*!< 0x00FF0000 */
#define RISAF_HWCFGR_CFG3             RISAF_HWCFGR_CFG3_Msk
#define RISAF_HWCFGR_CFG4_Pos         (24U)
#define RISAF_HWCFGR_CFG4_Msk         (0xFFUL << RISAF_HWCFGR_CFG4_Pos)          /*!< 0xFF000000 */
#define RISAF_HWCFGR_CFG4             RISAF_HWCFGR_CFG4_Msk

/*******************  Bits definition for RISAF_VERR register *****************/
#define RISAF_VERR_MINREV_Pos         (0U)
#define RISAF_VERR_MINREV_Msk         (0xFUL << RISAF_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define RISAF_VERR_MINREV             RISAF_VERR_MINREV_Msk

#define RISAF_VERR_MAJREV_Pos         (4U)
#define RISAF_VERR_MAJREV_Msk         (0xFUL << RISAF_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define RISAF_VERR_MAJREV             RISAF_VERR_MAJREV_Msk

/*******************  Bits definition for RISAF_IPIDR register ****************/
#define RISAF_IPIDR_ID_Pos            (0U)
#define RISAF_IPIDR_ID_Msk            (0xFFFFFFFFUL << RISAF_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define RISAF_IPIDR_ID                RISAF_IPIDR_ID_Msk

/*******************  Bits definition for RISAF_SIDR register *****************/
#define RISAF_SIDR_SID_Pos            (0U)
#define RISAF_SIDR_SID_Msk            (0xFFFFFFFFUL << RISAF_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define RISAF_SIDR_SID                RISAF_SIDR_SID_Msk

/*******************  Bits definition for RISAF_XCR register ******************/
#define RISAF_XCR_XLOCK_Pos           (0U)
#define RISAF_XCR_XLOCK_Msk           (0x1UL << RISAF_XCR_XLOCK_Pos)             /*!< 0x00000001 */
#define RISAF_XCR_XLOCK               RISAF_XCR_XLOCK_Msk
#define RISAF_XCR_MKLOCK_Pos          (1U)
#define RISAF_XCR_MKLOCK_Msk          (0x1UL << RISAF_XCR_MKLOCK_Pos)            /*!< 0x00000002 */
#define RISAF_XCR_MKLOCK              RISAF_XCR_MKLOCK_Msk
#define RISAF_XCR_CIPHERSEL_Pos       (4U)
#define RISAF_XCR_CIPHERSEL_Msk       (0x3UL << RISAF_XCR_CIPHERSEL_Pos)         /*!< 0x00000030 */
#define RISAF_XCR_CIPHERSEL           RISAF_XCR_CIPHERSEL_Msk

/*******************  Bits definition for RISAF_XSR register ******************/
#define RISAF_XSR_MKVALID_Pos         (0U)
#define RISAF_XSR_MKVALID_Msk         (0x1UL << RISAF_XSR_MKVALID_Pos)           /*!< 0x00000001 */
#define RISAF_XSR_MKVALID             RISAF_XSR_MKVALID_Msk

/*******************  Bits definition for RISAF_MKEYR0 register ***************/
#define RISAF_MKEYR0_MKEY_Pos         (0U)
#define RISAF_MKEYR0_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR0_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR0_MKEY             RISAF_MKEYR0_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR1 register ***************/
#define RISAF_MKEYR1_MKEY_Pos         (0U)
#define RISAF_MKEYR1_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR1_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR1_MKEY             RISAF_MKEYR1_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR2 register ***************/
#define RISAF_MKEYR2_MKEY_Pos         (0U)
#define RISAF_MKEYR2_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR2_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR2_MKEY             RISAF_MKEYR2_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR3 register ***************/
#define RISAF_MKEYR3_MKEY_Pos         (0U)
#define RISAF_MKEYR3_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR3_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR3_MKEY             RISAF_MKEYR3_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR4 register ***************/
#define RISAF_MKEYR4_MKEY_Pos         (0U)
#define RISAF_MKEYR4_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR4_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR4_MKEY             RISAF_MKEYR4_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR5 register ***************/
#define RISAF_MKEYR5_MKEY_Pos         (0U)
#define RISAF_MKEYR5_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR5_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR5_MKEY             RISAF_MKEYR5_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR6 register ***************/
#define RISAF_MKEYR6_MKEY_Pos         (0U)
#define RISAF_MKEYR6_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR6_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR6_MKEY             RISAF_MKEYR6_MKEY_Msk

/*******************  Bits definition for RISAF_MKEYR7 register ***************/
#define RISAF_MKEYR7_MKEY_Pos         (0U)
#define RISAF_MKEYR7_MKEY_Msk         (0xFFFFFFFFUL << RISAF_MKEYR7_MKEY_Pos)    /*!< 0xFFFFFFFF */
#define RISAF_MKEYR7_MKEY             RISAF_MKEYR7_MKEY_Msk

/*******************  Bits definition for IAC_IER0 register *******************/
#define IAC_IER0_IAIE0_Pos            (0U)
#define IAC_IER0_IAIE0_Msk            (0x1UL << IAC_IER0_IAIE0_Pos)              /*!< 0x00000001 */
#define IAC_IER0_IAIE0                IAC_IER0_IAIE0_Msk
#define IAC_IER0_IAIE1_Pos            (1U)
#define IAC_IER0_IAIE1_Msk            (0x1UL << IAC_IER0_IAIE1_Pos)              /*!< 0x00000002 */
#define IAC_IER0_IAIE1                IAC_IER0_IAIE1_Msk
#define IAC_IER0_IAIE2_Pos            (2U)
#define IAC_IER0_IAIE2_Msk            (0x1UL << IAC_IER0_IAIE2_Pos)              /*!< 0x00000004 */
#define IAC_IER0_IAIE2                IAC_IER0_IAIE2_Msk
#define IAC_IER0_IAIE3_Pos            (3U)
#define IAC_IER0_IAIE3_Msk            (0x1UL << IAC_IER0_IAIE3_Pos)              /*!< 0x00000008 */
#define IAC_IER0_IAIE3                IAC_IER0_IAIE3_Msk
#define IAC_IER0_IAIE4_Pos            (4U)
#define IAC_IER0_IAIE4_Msk            (0x1UL << IAC_IER0_IAIE4_Pos)              /*!< 0x00000010 */
#define IAC_IER0_IAIE4                IAC_IER0_IAIE4_Msk
#define IAC_IER0_IAIE5_Pos            (5U)
#define IAC_IER0_IAIE5_Msk            (0x1UL << IAC_IER0_IAIE5_Pos)              /*!< 0x00000020 */
#define IAC_IER0_IAIE5                IAC_IER0_IAIE5_Msk
#define IAC_IER0_IAIE6_Pos            (6U)
#define IAC_IER0_IAIE6_Msk            (0x1UL << IAC_IER0_IAIE6_Pos)              /*!< 0x00000040 */
#define IAC_IER0_IAIE6                IAC_IER0_IAIE6_Msk
#define IAC_IER0_IAIE7_Pos            (7U)
#define IAC_IER0_IAIE7_Msk            (0x1UL << IAC_IER0_IAIE7_Pos)              /*!< 0x00000080 */
#define IAC_IER0_IAIE7                IAC_IER0_IAIE7_Msk
#define IAC_IER0_IAIE8_Pos            (8U)
#define IAC_IER0_IAIE8_Msk            (0x1UL << IAC_IER0_IAIE8_Pos)              /*!< 0x00000100 */
#define IAC_IER0_IAIE8                IAC_IER0_IAIE8_Msk
#define IAC_IER0_IAIE9_Pos            (9U)
#define IAC_IER0_IAIE9_Msk            (0x1UL << IAC_IER0_IAIE9_Pos)              /*!< 0x00000200 */
#define IAC_IER0_IAIE9                IAC_IER0_IAIE9_Msk
#define IAC_IER0_IAIE10_Pos           (10U)
#define IAC_IER0_IAIE10_Msk           (0x1UL << IAC_IER0_IAIE10_Pos)             /*!< 0x00000400 */
#define IAC_IER0_IAIE10               IAC_IER0_IAIE10_Msk
#define IAC_IER0_IAIE11_Pos           (11U)
#define IAC_IER0_IAIE11_Msk           (0x1UL << IAC_IER0_IAIE11_Pos)             /*!< 0x00000800 */
#define IAC_IER0_IAIE11               IAC_IER0_IAIE11_Msk
#define IAC_IER0_IAIE12_Pos           (12U)
#define IAC_IER0_IAIE12_Msk           (0x1UL << IAC_IER0_IAIE12_Pos)             /*!< 0x00001000 */
#define IAC_IER0_IAIE12               IAC_IER0_IAIE12_Msk
#define IAC_IER0_IAIE13_Pos           (13U)
#define IAC_IER0_IAIE13_Msk           (0x1UL << IAC_IER0_IAIE13_Pos)             /*!< 0x00002000 */
#define IAC_IER0_IAIE13               IAC_IER0_IAIE13_Msk
#define IAC_IER0_IAIE14_Pos           (14U)
#define IAC_IER0_IAIE14_Msk           (0x1UL << IAC_IER0_IAIE14_Pos)             /*!< 0x00004000 */
#define IAC_IER0_IAIE14               IAC_IER0_IAIE14_Msk
#define IAC_IER0_IAIE15_Pos           (15U)
#define IAC_IER0_IAIE15_Msk           (0x1UL << IAC_IER0_IAIE15_Pos)             /*!< 0x00008000 */
#define IAC_IER0_IAIE15               IAC_IER0_IAIE15_Msk
#define IAC_IER0_IAIE16_Pos           (16U)
#define IAC_IER0_IAIE16_Msk           (0x1UL << IAC_IER0_IAIE16_Pos)             /*!< 0x00010000 */
#define IAC_IER0_IAIE16               IAC_IER0_IAIE16_Msk
#define IAC_IER0_IAIE17_Pos           (17U)
#define IAC_IER0_IAIE17_Msk           (0x1UL << IAC_IER0_IAIE17_Pos)             /*!< 0x00020000 */
#define IAC_IER0_IAIE17               IAC_IER0_IAIE17_Msk
#define IAC_IER0_IAIE18_Pos           (18U)
#define IAC_IER0_IAIE18_Msk           (0x1UL << IAC_IER0_IAIE18_Pos)             /*!< 0x00040000 */
#define IAC_IER0_IAIE18               IAC_IER0_IAIE18_Msk
#define IAC_IER0_IAIE19_Pos           (19U)
#define IAC_IER0_IAIE19_Msk           (0x1UL << IAC_IER0_IAIE19_Pos)             /*!< 0x00080000 */
#define IAC_IER0_IAIE19               IAC_IER0_IAIE19_Msk
#define IAC_IER0_IAIE20_Pos           (20U)
#define IAC_IER0_IAIE20_Msk           (0x1UL << IAC_IER0_IAIE20_Pos)             /*!< 0x00100000 */
#define IAC_IER0_IAIE20               IAC_IER0_IAIE20_Msk
#define IAC_IER0_IAIE21_Pos           (21U)
#define IAC_IER0_IAIE21_Msk           (0x1UL << IAC_IER0_IAIE21_Pos)             /*!< 0x00200000 */
#define IAC_IER0_IAIE21               IAC_IER0_IAIE21_Msk
#define IAC_IER0_IAIE22_Pos           (22U)
#define IAC_IER0_IAIE22_Msk           (0x1UL << IAC_IER0_IAIE22_Pos)             /*!< 0x00400000 */
#define IAC_IER0_IAIE22               IAC_IER0_IAIE22_Msk
#define IAC_IER0_IAIE23_Pos           (23U)
#define IAC_IER0_IAIE23_Msk           (0x1UL << IAC_IER0_IAIE23_Pos)             /*!< 0x00800000 */
#define IAC_IER0_IAIE23               IAC_IER0_IAIE23_Msk
#define IAC_IER0_IAIE24_Pos           (24U)
#define IAC_IER0_IAIE24_Msk           (0x1UL << IAC_IER0_IAIE24_Pos)             /*!< 0x01000000 */
#define IAC_IER0_IAIE24               IAC_IER0_IAIE24_Msk
#define IAC_IER0_IAIE25_Pos           (25U)
#define IAC_IER0_IAIE25_Msk           (0x1UL << IAC_IER0_IAIE25_Pos)             /*!< 0x02000000 */
#define IAC_IER0_IAIE25               IAC_IER0_IAIE25_Msk
#define IAC_IER0_IAIE26_Pos           (26U)
#define IAC_IER0_IAIE26_Msk           (0x1UL << IAC_IER0_IAIE26_Pos)             /*!< 0x04000000 */
#define IAC_IER0_IAIE26               IAC_IER0_IAIE26_Msk
#define IAC_IER0_IAIE27_Pos           (27U)
#define IAC_IER0_IAIE27_Msk           (0x1UL << IAC_IER0_IAIE27_Pos)             /*!< 0x08000000 */
#define IAC_IER0_IAIE27               IAC_IER0_IAIE27_Msk
#define IAC_IER0_IAIE28_Pos           (28U)
#define IAC_IER0_IAIE28_Msk           (0x1UL << IAC_IER0_IAIE28_Pos)             /*!< 0x10000000 */
#define IAC_IER0_IAIE28               IAC_IER0_IAIE28_Msk
#define IAC_IER0_IAIE29_Pos           (29U)
#define IAC_IER0_IAIE29_Msk           (0x1UL << IAC_IER0_IAIE29_Pos)             /*!< 0x20000000 */
#define IAC_IER0_IAIE29               IAC_IER0_IAIE29_Msk
#define IAC_IER0_IAIE30_Pos           (30U)
#define IAC_IER0_IAIE30_Msk           (0x1UL << IAC_IER0_IAIE30_Pos)             /*!< 0x40000000 */
#define IAC_IER0_IAIE30               IAC_IER0_IAIE30_Msk
#define IAC_IER0_IAIE31_Pos           (31U)
#define IAC_IER0_IAIE31_Msk           (0x1UL << IAC_IER0_IAIE31_Pos)             /*!< 0x80000000 */
#define IAC_IER0_IAIE31               IAC_IER0_IAIE31_Msk

/*******************  Bits definition for IAC_IER1 register *******************/
#define IAC_IER1_IAIE32_Pos           (0U)
#define IAC_IER1_IAIE32_Msk           (0x1UL << IAC_IER1_IAIE32_Pos)             /*!< 0x00000001 */
#define IAC_IER1_IAIE32               IAC_IER1_IAIE32_Msk
#define IAC_IER1_IAIE33_Pos           (1U)
#define IAC_IER1_IAIE33_Msk           (0x1UL << IAC_IER1_IAIE33_Pos)             /*!< 0x00000002 */
#define IAC_IER1_IAIE33               IAC_IER1_IAIE33_Msk
#define IAC_IER1_IAIE34_Pos           (2U)
#define IAC_IER1_IAIE34_Msk           (0x1UL << IAC_IER1_IAIE34_Pos)             /*!< 0x00000004 */
#define IAC_IER1_IAIE34               IAC_IER1_IAIE34_Msk
#define IAC_IER1_IAIE35_Pos           (3U)
#define IAC_IER1_IAIE35_Msk           (0x1UL << IAC_IER1_IAIE35_Pos)             /*!< 0x00000008 */
#define IAC_IER1_IAIE35               IAC_IER1_IAIE35_Msk
#define IAC_IER1_IAIE36_Pos           (4U)
#define IAC_IER1_IAIE36_Msk           (0x1UL << IAC_IER1_IAIE36_Pos)             /*!< 0x00000010 */
#define IAC_IER1_IAIE36               IAC_IER1_IAIE36_Msk
#define IAC_IER1_IAIE37_Pos           (5U)
#define IAC_IER1_IAIE37_Msk           (0x1UL << IAC_IER1_IAIE37_Pos)             /*!< 0x00000020 */
#define IAC_IER1_IAIE37               IAC_IER1_IAIE37_Msk
#define IAC_IER1_IAIE38_Pos           (6U)
#define IAC_IER1_IAIE38_Msk           (0x1UL << IAC_IER1_IAIE38_Pos)             /*!< 0x00000040 */
#define IAC_IER1_IAIE38               IAC_IER1_IAIE38_Msk
#define IAC_IER1_IAIE39_Pos           (7U)
#define IAC_IER1_IAIE39_Msk           (0x1UL << IAC_IER1_IAIE39_Pos)             /*!< 0x00000080 */
#define IAC_IER1_IAIE39               IAC_IER1_IAIE39_Msk
#define IAC_IER1_IAIE40_Pos           (8U)
#define IAC_IER1_IAIE40_Msk           (0x1UL << IAC_IER1_IAIE40_Pos)             /*!< 0x00000100 */
#define IAC_IER1_IAIE40               IAC_IER1_IAIE40_Msk
#define IAC_IER1_IAIE41_Pos           (9U)
#define IAC_IER1_IAIE41_Msk           (0x1UL << IAC_IER1_IAIE41_Pos)             /*!< 0x00000200 */
#define IAC_IER1_IAIE41               IAC_IER1_IAIE41_Msk
#define IAC_IER1_IAIE42_Pos           (10U)
#define IAC_IER1_IAIE42_Msk           (0x1UL << IAC_IER1_IAIE42_Pos)             /*!< 0x00000400 */
#define IAC_IER1_IAIE42               IAC_IER1_IAIE42_Msk
#define IAC_IER1_IAIE43_Pos           (11U)
#define IAC_IER1_IAIE43_Msk           (0x1UL << IAC_IER1_IAIE43_Pos)             /*!< 0x00000800 */
#define IAC_IER1_IAIE43               IAC_IER1_IAIE43_Msk
#define IAC_IER1_IAIE44_Pos           (12U)
#define IAC_IER1_IAIE44_Msk           (0x1UL << IAC_IER1_IAIE44_Pos)             /*!< 0x00001000 */
#define IAC_IER1_IAIE44               IAC_IER1_IAIE44_Msk
#define IAC_IER1_IAIE45_Pos           (13U)
#define IAC_IER1_IAIE45_Msk           (0x1UL << IAC_IER1_IAIE45_Pos)             /*!< 0x00002000 */
#define IAC_IER1_IAIE45               IAC_IER1_IAIE45_Msk
#define IAC_IER1_IAIE46_Pos           (14U)
#define IAC_IER1_IAIE46_Msk           (0x1UL << IAC_IER1_IAIE46_Pos)             /*!< 0x00004000 */
#define IAC_IER1_IAIE46               IAC_IER1_IAIE46_Msk
#define IAC_IER1_IAIE47_Pos           (15U)
#define IAC_IER1_IAIE47_Msk           (0x1UL << IAC_IER1_IAIE47_Pos)             /*!< 0x00008000 */
#define IAC_IER1_IAIE47               IAC_IER1_IAIE47_Msk
#define IAC_IER1_IAIE48_Pos           (16U)
#define IAC_IER1_IAIE48_Msk           (0x1UL << IAC_IER1_IAIE48_Pos)             /*!< 0x00010000 */
#define IAC_IER1_IAIE48               IAC_IER1_IAIE48_Msk
#define IAC_IER1_IAIE49_Pos           (17U)
#define IAC_IER1_IAIE49_Msk           (0x1UL << IAC_IER1_IAIE49_Pos)             /*!< 0x00020000 */
#define IAC_IER1_IAIE49               IAC_IER1_IAIE49_Msk
#define IAC_IER1_IAIE50_Pos           (18U)
#define IAC_IER1_IAIE50_Msk           (0x1UL << IAC_IER1_IAIE50_Pos)             /*!< 0x00040000 */
#define IAC_IER1_IAIE50               IAC_IER1_IAIE50_Msk
#define IAC_IER1_IAIE51_Pos           (19U)
#define IAC_IER1_IAIE51_Msk           (0x1UL << IAC_IER1_IAIE51_Pos)             /*!< 0x00080000 */
#define IAC_IER1_IAIE51               IAC_IER1_IAIE51_Msk
#define IAC_IER1_IAIE52_Pos           (20U)
#define IAC_IER1_IAIE52_Msk           (0x1UL << IAC_IER1_IAIE52_Pos)             /*!< 0x00100000 */
#define IAC_IER1_IAIE52               IAC_IER1_IAIE52_Msk
#define IAC_IER1_IAIE53_Pos           (21U)
#define IAC_IER1_IAIE53_Msk           (0x1UL << IAC_IER1_IAIE53_Pos)             /*!< 0x00200000 */
#define IAC_IER1_IAIE53               IAC_IER1_IAIE53_Msk
#define IAC_IER1_IAIE54_Pos           (22U)
#define IAC_IER1_IAIE54_Msk           (0x1UL << IAC_IER1_IAIE54_Pos)             /*!< 0x00400000 */
#define IAC_IER1_IAIE54               IAC_IER1_IAIE54_Msk
#define IAC_IER1_IAIE55_Pos           (23U)
#define IAC_IER1_IAIE55_Msk           (0x1UL << IAC_IER1_IAIE55_Pos)             /*!< 0x00800000 */
#define IAC_IER1_IAIE55               IAC_IER1_IAIE55_Msk
#define IAC_IER1_IAIE56_Pos           (24U)
#define IAC_IER1_IAIE56_Msk           (0x1UL << IAC_IER1_IAIE56_Pos)             /*!< 0x01000000 */
#define IAC_IER1_IAIE56               IAC_IER1_IAIE56_Msk
#define IAC_IER1_IAIE57_Pos           (25U)
#define IAC_IER1_IAIE57_Msk           (0x1UL << IAC_IER1_IAIE57_Pos)             /*!< 0x02000000 */
#define IAC_IER1_IAIE57               IAC_IER1_IAIE57_Msk
#define IAC_IER1_IAIE58_Pos           (26U)
#define IAC_IER1_IAIE58_Msk           (0x1UL << IAC_IER1_IAIE58_Pos)             /*!< 0x04000000 */
#define IAC_IER1_IAIE58               IAC_IER1_IAIE58_Msk
#define IAC_IER1_IAIE59_Pos           (27U)
#define IAC_IER1_IAIE59_Msk           (0x1UL << IAC_IER1_IAIE59_Pos)             /*!< 0x08000000 */
#define IAC_IER1_IAIE59               IAC_IER1_IAIE59_Msk
#define IAC_IER1_IAIE60_Pos           (28U)
#define IAC_IER1_IAIE60_Msk           (0x1UL << IAC_IER1_IAIE60_Pos)             /*!< 0x10000000 */
#define IAC_IER1_IAIE60               IAC_IER1_IAIE60_Msk
#define IAC_IER1_IAIE61_Pos           (29U)
#define IAC_IER1_IAIE61_Msk           (0x1UL << IAC_IER1_IAIE61_Pos)             /*!< 0x20000000 */
#define IAC_IER1_IAIE61               IAC_IER1_IAIE61_Msk
#define IAC_IER1_IAIE62_Pos           (30U)
#define IAC_IER1_IAIE62_Msk           (0x1UL << IAC_IER1_IAIE62_Pos)             /*!< 0x40000000 */
#define IAC_IER1_IAIE62               IAC_IER1_IAIE62_Msk
#define IAC_IER1_IAIE63_Pos           (31U)
#define IAC_IER1_IAIE63_Msk           (0x1UL << IAC_IER1_IAIE63_Pos)             /*!< 0x80000000 */
#define IAC_IER1_IAIE63               IAC_IER1_IAIE63_Msk

/*******************  Bits definition for IAC_IER2 register *******************/
#define IAC_IER2_IAIE64_Pos           (0U)
#define IAC_IER2_IAIE64_Msk           (0x1UL << IAC_IER2_IAIE64_Pos)             /*!< 0x00000001 */
#define IAC_IER2_IAIE64               IAC_IER2_IAIE64_Msk
#define IAC_IER2_IAIE65_Pos           (1U)
#define IAC_IER2_IAIE65_Msk           (0x1UL << IAC_IER2_IAIE65_Pos)             /*!< 0x00000002 */
#define IAC_IER2_IAIE65               IAC_IER2_IAIE65_Msk
#define IAC_IER2_IAIE66_Pos           (2U)
#define IAC_IER2_IAIE66_Msk           (0x1UL << IAC_IER2_IAIE66_Pos)             /*!< 0x00000004 */
#define IAC_IER2_IAIE66               IAC_IER2_IAIE66_Msk
#define IAC_IER2_IAIE67_Pos           (3U)
#define IAC_IER2_IAIE67_Msk           (0x1UL << IAC_IER2_IAIE67_Pos)             /*!< 0x00000008 */
#define IAC_IER2_IAIE67               IAC_IER2_IAIE67_Msk
#define IAC_IER2_IAIE68_Pos           (4U)
#define IAC_IER2_IAIE68_Msk           (0x1UL << IAC_IER2_IAIE68_Pos)             /*!< 0x00000010 */
#define IAC_IER2_IAIE68               IAC_IER2_IAIE68_Msk
#define IAC_IER2_IAIE69_Pos           (5U)
#define IAC_IER2_IAIE69_Msk           (0x1UL << IAC_IER2_IAIE69_Pos)             /*!< 0x00000020 */
#define IAC_IER2_IAIE69               IAC_IER2_IAIE69_Msk
#define IAC_IER2_IAIE70_Pos           (6U)
#define IAC_IER2_IAIE70_Msk           (0x1UL << IAC_IER2_IAIE70_Pos)             /*!< 0x00000040 */
#define IAC_IER2_IAIE70               IAC_IER2_IAIE70_Msk
#define IAC_IER2_IAIE71_Pos           (7U)
#define IAC_IER2_IAIE71_Msk           (0x1UL << IAC_IER2_IAIE71_Pos)             /*!< 0x00000080 */
#define IAC_IER2_IAIE71                IAC_IER2_IAIE71_Msk
#define IAC_IER2_IAIE72_Pos           (8U)
#define IAC_IER2_IAIE72_Msk           (0x1UL << IAC_IER2_IAIE72_Pos)             /*!< 0x00000100 */
#define IAC_IER2_IAIE72               IAC_IER2_IAIE72_Msk
#define IAC_IER2_IAIE73_Pos           (9U)
#define IAC_IER2_IAIE73_Msk           (0x1UL << IAC_IER2_IAIE73_Pos)             /*!< 0x00000200 */
#define IAC_IER2_IAIE73               IAC_IER2_IAIE73_Msk
#define IAC_IER2_IAIE74_Pos           (10U)
#define IAC_IER2_IAIE74_Msk           (0x1UL << IAC_IER2_IAIE74_Pos)             /*!< 0x00000400 */
#define IAC_IER2_IAIE74               IAC_IER2_IAIE74_Msk
#define IAC_IER2_IAIE75_Pos           (11U)
#define IAC_IER2_IAIE75_Msk           (0x1UL << IAC_IER2_IAIE75_Pos)             /*!< 0x00000800 */
#define IAC_IER2_IAIE75               IAC_IER2_IAIE75_Msk
#define IAC_IER2_IAIE76_Pos           (12U)
#define IAC_IER2_IAIE76_Msk           (0x1UL << IAC_IER2_IAIE76_Pos)             /*!< 0x00001000 */
#define IAC_IER2_IAIE76               IAC_IER2_IAIE76_Msk
#define IAC_IER2_IAIE77_Pos           (13U)
#define IAC_IER2_IAIE77_Msk           (0x1UL << IAC_IER2_IAIE77_Pos)             /*!< 0x00002000 */
#define IAC_IER2_IAIE77               IAC_IER2_IAIE77_Msk
#define IAC_IER2_IAIE78_Pos           (14U)
#define IAC_IER2_IAIE78_Msk           (0x1UL << IAC_IER2_IAIE78_Pos)             /*!< 0x00004000 */
#define IAC_IER2_IAIE78               IAC_IER2_IAIE78_Msk
#define IAC_IER2_IAIE79_Pos           (15U)
#define IAC_IER2_IAIE79_Msk           (0x1UL << IAC_IER2_IAIE79_Pos)             /*!< 0x00008000 */
#define IAC_IER2_IAIE79               IAC_IER2_IAIE79_Msk
#define IAC_IER2_IAIE80_Pos           (16U)
#define IAC_IER2_IAIE80_Msk           (0x1UL << IAC_IER2_IAIE80_Pos)             /*!< 0x00010000 */
#define IAC_IER2_IAIE80               IAC_IER2_IAIE80_Msk
#define IAC_IER2_IAIE81_Pos           (17U)
#define IAC_IER2_IAIE81_Msk           (0x1UL << IAC_IER2_IAIE81_Pos)             /*!< 0x00020000 */
#define IAC_IER2_IAIE81               IAC_IER2_IAIE81_Msk
#define IAC_IER2_IAIE82_Pos           (18U)
#define IAC_IER2_IAIE82_Msk           (0x1UL << IAC_IER2_IAIE82_Pos)             /*!< 0x00040000 */
#define IAC_IER2_IAIE82               IAC_IER2_IAIE82_Msk
#define IAC_IER2_IAIE83_Pos           (19U)
#define IAC_IER2_IAIE83_Msk           (0x1UL << IAC_IER2_IAIE83_Pos)             /*!< 0x00080000 */
#define IAC_IER2_IAIE83               IAC_IER2_IAIE83_Msk
#define IAC_IER2_IAIE84_Pos           (20U)
#define IAC_IER2_IAIE84_Msk           (0x1UL << IAC_IER2_IAIE84_Pos)             /*!< 0x00100000 */
#define IAC_IER2_IAIE84               IAC_IER2_IAIE84_Msk
#define IAC_IER2_IAIE85_Pos           (21U)
#define IAC_IER2_IAIE85_Msk           (0x1UL << IAC_IER2_IAIE85_Pos)             /*!< 0x00200000 */
#define IAC_IER2_IAIE85               IAC_IER2_IAIE85_Msk
#define IAC_IER2_IAIE86_Pos           (22U)
#define IAC_IER2_IAIE86_Msk           (0x1UL << IAC_IER2_IAIE86_Pos)             /*!< 0x00400000 */
#define IAC_IER2_IAIE86               IAC_IER2_IAIE86_Msk
#define IAC_IER2_IAIE87_Pos           (23U)
#define IAC_IER2_IAIE87_Msk           (0x1UL << IAC_IER2_IAIE87_Pos)             /*!< 0x00800000 */
#define IAC_IER2_IAIE87               IAC_IER2_IAIE87_Msk
#define IAC_IER2_IAIE88_Pos           (24U)
#define IAC_IER2_IAIE88_Msk           (0x1UL << IAC_IER2_IAIE88_Pos)             /*!< 0x01000000 */
#define IAC_IER2_IAIE88               IAC_IER2_IAIE88_Msk
#define IAC_IER2_IAIE89_Pos           (25U)
#define IAC_IER2_IAIE89_Msk           (0x1UL << IAC_IER2_IAIE89_Pos)             /*!< 0x02000000 */
#define IAC_IER2_IAIE89               IAC_IER2_IAIE89_Msk
#define IAC_IER2_IAIE90_Pos           (26U)
#define IAC_IER2_IAIE90_Msk           (0x1UL << IAC_IER2_IAIE90_Pos)             /*!< 0x04000000 */
#define IAC_IER2_IAIE90               IAC_IER2_IAIE90_Msk
#define IAC_IER2_IAIE91_Pos           (27U)
#define IAC_IER2_IAIE91_Msk           (0x1UL << IAC_IER2_IAIE91_Pos)             /*!< 0x08000000 */
#define IAC_IER2_IAIE91               IAC_IER2_IAIE91_Msk
#define IAC_IER2_IAIE92_Pos           (28U)
#define IAC_IER2_IAIE92_Msk           (0x1UL << IAC_IER2_IAIE92_Pos)             /*!< 0x10000000 */
#define IAC_IER2_IAIE92               IAC_IER2_IAIE92_Msk
#define IAC_IER2_IAIE93_Pos           (29U)
#define IAC_IER2_IAIE93_Msk           (0x1UL << IAC_IER2_IAIE93_Pos)             /*!< 0x20000000 */
#define IAC_IER2_IAIE93               IAC_IER2_IAIE93_Msk
#define IAC_IER2_IAIE94_Pos           (30U)
#define IAC_IER2_IAIE94_Msk           (0x1UL << IAC_IER2_IAIE94_Pos)             /*!< 0x40000000 */
#define IAC_IER2_IAIE94               IAC_IER2_IAIE94_Msk
#define IAC_IER2_IAIE95_Pos           (31U)
#define IAC_IER2_IAIE95_Msk           (0x1UL << IAC_IER2_IAIE95_Pos)             /*!< 0x80000000 */
#define IAC_IER2_IAIE95               IAC_IER2_IAIE95_Msk

/*******************  Bits definition for IAC_IER3 register *******************/
#define IAC_IER3_IAIE96_Pos           (0U)
#define IAC_IER3_IAIE96_Msk           (0x1UL << IAC_IER3_IAIE96_Pos)             /*!< 0x00000001 */
#define IAC_IER3_IAIE96               IAC_IER3_IAIE96_Msk
#define IAC_IER3_IAIE97_Pos           (1U)
#define IAC_IER3_IAIE97_Msk           (0x1UL << IAC_IER3_IAIE97_Pos)             /*!< 0x00000002 */
#define IAC_IER3_IAIE97               IAC_IER3_IAIE97_Msk
#define IAC_IER3_IAIE98_Pos           (2U)
#define IAC_IER3_IAIE98_Msk           (0x1UL << IAC_IER3_IAIE98_Pos)             /*!< 0x00000004 */
#define IAC_IER3_IAIE98               IAC_IER3_IAIE98_Msk
#define IAC_IER3_IAIE99_Pos           (3U)
#define IAC_IER3_IAIE99_Msk           (0x1UL << IAC_IER3_IAIE99_Pos)             /*!< 0x00000008 */
#define IAC_IER3_IAIE99               IAC_IER3_IAIE99_Msk
#define IAC_IER3_IAIE100_Pos          (4U)
#define IAC_IER3_IAIE100_Msk          (0x1UL << IAC_IER3_IAIE100_Pos)            /*!< 0x00000010 */
#define IAC_IER3_IAIE100              IAC_IER3_IAIE100_Msk
#define IAC_IER3_IAIE101_Pos          (5U)
#define IAC_IER3_IAIE101_Msk          (0x1UL << IAC_IER3_IAIE101_Pos)            /*!< 0x00000020 */
#define IAC_IER3_IAIE101              IAC_IER3_IAIE101_Msk
#define IAC_IER3_IAIE102_Pos          (6U)
#define IAC_IER3_IAIE102_Msk          (0x1UL << IAC_IER3_IAIE102_Pos)            /*!< 0x00000040 */
#define IAC_IER3_IAIE102              IAC_IER3_IAIE102_Msk
#define IAC_IER3_IAIE103_Pos          (7U)
#define IAC_IER3_IAIE103_Msk          (0x1UL << IAC_IER3_IAIE103_Pos)            /*!< 0x00000080 */
#define IAC_IER3_IAIE103              IAC_IER3_IAIE103_Msk
#define IAC_IER3_IAIE104_Pos          (8U)
#define IAC_IER3_IAIE104_Msk          (0x1UL << IAC_IER3_IAIE104_Pos)            /*!< 0x00000100 */
#define IAC_IER3_IAIE104              IAC_IER3_IAIE104_Msk
#define IAC_IER3_IAIE105_Pos          (9U)
#define IAC_IER3_IAIE105_Msk          (0x1UL << IAC_IER3_IAIE105_Pos)            /*!< 0x00000200 */
#define IAC_IER3_IAIE105              IAC_IER3_IAIE105_Msk
#define IAC_IER3_IAIE106_Pos          (10U)
#define IAC_IER3_IAIE106_Msk          (0x1UL << IAC_IER3_IAIE106_Pos)            /*!< 0x00000400 */
#define IAC_IER3_IAIE106              IAC_IER3_IAIE106_Msk
#define IAC_IER3_IAIE107_Pos          (11U)
#define IAC_IER3_IAIE107_Msk          (0x1UL << IAC_IER3_IAIE107_Pos)            /*!< 0x00000800 */
#define IAC_IER3_IAIE107              IAC_IER3_IAIE107_Msk
#define IAC_IER3_IAIE108_Pos          (12U)
#define IAC_IER3_IAIE108_Msk          (0x1UL << IAC_IER3_IAIE108_Pos)            /*!< 0x00001000 */
#define IAC_IER3_IAIE108              IAC_IER3_IAIE108_Msk
#define IAC_IER3_IAIE109_Pos          (13U)
#define IAC_IER3_IAIE109_Msk          (0x1UL << IAC_IER3_IAIE109_Pos)            /*!< 0x00002000 */
#define IAC_IER3_IAIE109              IAC_IER3_IAIE109_Msk
#define IAC_IER3_IAIE110_Pos          (14U)
#define IAC_IER3_IAIE110_Msk          (0x1UL << IAC_IER3_IAIE110_Pos)            /*!< 0x00004000 */
#define IAC_IER3_IAIE110              IAC_IER3_IAIE110_Msk
#define IAC_IER3_IAIE111_Pos          (15U)
#define IAC_IER3_IAIE111_Msk          (0x1UL << IAC_IER3_IAIE111_Pos)            /*!< 0x00008000 */
#define IAC_IER3_IAIE111              IAC_IER3_IAIE111_Msk
#define IAC_IER3_IAIE112_Pos          (16U)
#define IAC_IER3_IAIE112_Msk          (0x1UL << IAC_IER3_IAIE112_Pos)            /*!< 0x00010000 */
#define IAC_IER3_IAIE112              IAC_IER3_IAIE112_Msk
#define IAC_IER3_IAIE113_Pos          (17U)
#define IAC_IER3_IAIE113_Msk          (0x1UL << IAC_IER3_IAIE113_Pos)            /*!< 0x00020000 */
#define IAC_IER3_IAIE113              IAC_IER3_IAIE113_Msk
#define IAC_IER3_IAIE114_Pos          (18U)
#define IAC_IER3_IAIE114_Msk          (0x1UL << IAC_IER3_IAIE114_Pos)            /*!< 0x00040000 */
#define IAC_IER3_IAIE114              IAC_IER3_IAIE114_Msk
#define IAC_IER3_IAIE115_Pos          (19U)
#define IAC_IER3_IAIE115_Msk          (0x1UL << IAC_IER3_IAIE115_Pos)            /*!< 0x00080000 */
#define IAC_IER3_IAIE115              IAC_IER3_IAIE115_Msk
#define IAC_IER3_IAIE116_Pos          (20U)
#define IAC_IER3_IAIE116_Msk          (0x1UL << IAC_IER3_IAIE116_Pos)            /*!< 0x00100000 */
#define IAC_IER3_IAIE116              IAC_IER3_IAIE116_Msk
#define IAC_IER3_IAIE117_Pos          (21U)
#define IAC_IER3_IAIE117_Msk          (0x1UL << IAC_IER3_IAIE117_Pos)            /*!< 0x00200000 */
#define IAC_IER3_IAIE117              IAC_IER3_IAIE117_Msk
#define IAC_IER3_IAIE118_Pos          (22U)
#define IAC_IER3_IAIE118_Msk          (0x1UL << IAC_IER3_IAIE118_Pos)            /*!< 0x00400000 */
#define IAC_IER3_IAIE118              IAC_IER3_IAIE118_Msk
#define IAC_IER3_IAIE119_Pos          (23U)
#define IAC_IER3_IAIE119_Msk          (0x1UL << IAC_IER3_IAIE119_Pos)            /*!< 0x00800000 */
#define IAC_IER3_IAIE119              IAC_IER3_IAIE119_Msk
#define IAC_IER3_IAIE120_Pos          (24U)
#define IAC_IER3_IAIE120_Msk          (0x1UL << IAC_IER3_IAIE120_Pos)            /*!< 0x01000000 */
#define IAC_IER3_IAIE120              IAC_IER3_IAIE120_Msk
#define IAC_IER3_IAIE121_Pos          (25U)
#define IAC_IER3_IAIE121_Msk          (0x1UL << IAC_IER3_IAIE121_Pos)            /*!< 0x02000000 */
#define IAC_IER3_IAIE121              IAC_IER3_IAIE121_Msk
#define IAC_IER3_IAIE122_Pos          (26U)
#define IAC_IER3_IAIE122_Msk          (0x1UL << IAC_IER3_IAIE122_Pos)            /*!< 0x04000000 */
#define IAC_IER3_IAIE122              IAC_IER3_IAIE122_Msk
#define IAC_IER3_IAIE123_Pos          (27U)
#define IAC_IER3_IAIE123_Msk          (0x1UL << IAC_IER3_IAIE123_Pos)            /*!< 0x08000000 */
#define IAC_IER3_IAIE123              IAC_IER3_IAIE123_Msk
#define IAC_IER3_IAIE124_Pos          (28U)
#define IAC_IER3_IAIE124_Msk          (0x1UL << IAC_IER3_IAIE124_Pos)            /*!< 0x10000000 */
#define IAC_IER3_IAIE124              IAC_IER3_IAIE124_Msk
#define IAC_IER3_IAIE125_Pos          (29U)
#define IAC_IER3_IAIE125_Msk          (0x1UL << IAC_IER3_IAIE125_Pos)            /*!< 0x20000000 */
#define IAC_IER3_IAIE125              IAC_IER3_IAIE125_Msk
#define IAC_IER3_IAIE126_Pos          (30U)
#define IAC_IER3_IAIE126_Msk          (0x1UL << IAC_IER3_IAIE126_Pos)            /*!< 0x40000000 */
#define IAC_IER3_IAIE126              IAC_IER3_IAIE126_Msk
#define IAC_IER3_IAIE127_Pos          (31U)
#define IAC_IER3_IAIE127_Msk          (0x1UL << IAC_IER3_IAIE127_Pos)            /*!< 0x80000000 */
#define IAC_IER3_IAIE127              IAC_IER3_IAIE127_Msk

/*******************  Bits definition for IAC_IER4 register *******************/
#define IAC_IER4_IAIE128_Pos          (0U)
#define IAC_IER4_IAIE128_Msk          (0x1UL << IAC_IER4_IAIE128_Pos)            /*!< 0x00000001 */
#define IAC_IER4_IAIE128              IAC_IER4_IAIE128_Msk
#define IAC_IER4_IAIE129_Pos          (1U)
#define IAC_IER4_IAIE129_Msk          (0x1UL << IAC_IER4_IAIE129_Pos)            /*!< 0x00000002 */
#define IAC_IER4_IAIE129              IAC_IER4_IAIE129_Msk
#define IAC_IER4_IAIE130_Pos          (2U)
#define IAC_IER4_IAIE130_Msk          (0x1UL << IAC_IER4_IAIE130_Pos)            /*!< 0x00000004 */
#define IAC_IER4_IAIE130              IAC_IER4_IAIE130_Msk
#define IAC_IER4_IAIE131_Pos          (3U)
#define IAC_IER4_IAIE131_Msk          (0x1UL << IAC_IER4_IAIE131_Pos)            /*!< 0x00000008 */
#define IAC_IER4_IAIE131              IAC_IER4_IAIE131_Msk
#define IAC_IER4_IAIE132_Pos          (4U)
#define IAC_IER4_IAIE132_Msk          (0x1UL << IAC_IER4_IAIE132_Pos)            /*!< 0x00000010 */
#define IAC_IER4_IAIE132              IAC_IER4_IAIE132_Msk
#define IAC_IER4_IAIE133_Pos          (5U)
#define IAC_IER4_IAIE133_Msk          (0x1UL << IAC_IER4_IAIE133_Pos)            /*!< 0x00000020 */
#define IAC_IER4_IAIE133              IAC_IER4_IAIE133_Msk
#define IAC_IER4_IAIE134_Pos          (6U)
#define IAC_IER4_IAIE134_Msk          (0x1UL << IAC_IER4_IAIE134_Pos)            /*!< 0x00000040 */
#define IAC_IER4_IAIE134              IAC_IER4_IAIE134_Msk
#define IAC_IER4_IAIE135_Pos          (7U)
#define IAC_IER4_IAIE135_Msk          (0x1UL << IAC_IER4_IAIE135_Pos)            /*!< 0x00000080 */
#define IAC_IER4_IAIE135              IAC_IER4_IAIE135_Msk
#define IAC_IER4_IAIE136_Pos          (8U)
#define IAC_IER4_IAIE136_Msk          (0x1UL << IAC_IER4_IAIE136_Pos)            /*!< 0x00000100 */
#define IAC_IER4_IAIE136              IAC_IER4_IAIE136_Msk
#define IAC_IER4_IAIE137_Pos          (9U)
#define IAC_IER4_IAIE137_Msk          (0x1UL << IAC_IER4_IAIE137_Pos)            /*!< 0x00000200 */
#define IAC_IER4_IAIE137              IAC_IER4_IAIE137_Msk
#define IAC_IER4_IAIE138_Pos          (10U)
#define IAC_IER4_IAIE138_Msk          (0x1UL << IAC_IER4_IAIE138_Pos)            /*!< 0x00000400 */
#define IAC_IER4_IAIE138              IAC_IER4_IAIE138_Msk
#define IAC_IER4_IAIE139_Pos          (11U)
#define IAC_IER4_IAIE139_Msk          (0x1UL << IAC_IER4_IAIE139_Pos)            /*!< 0x00000800 */
#define IAC_IER4_IAIE139              IAC_IER4_IAIE139_Msk
#define IAC_IER4_IAIE140_Pos          (12U)
#define IAC_IER4_IAIE140_Msk          (0x1UL << IAC_IER4_IAIE140_Pos)            /*!< 0x00001000 */
#define IAC_IER4_IAIE140              IAC_IER4_IAIE140_Msk
#define IAC_IER4_IAIE141_Pos          (13U)
#define IAC_IER4_IAIE141_Msk          (0x1UL << IAC_IER4_IAIE141_Pos)            /*!< 0x00002000 */
#define IAC_IER4_IAIE141              IAC_IER4_IAIE141_Msk
#define IAC_IER4_IAIE142_Pos          (14U)
#define IAC_IER4_IAIE142_Msk          (0x1UL << IAC_IER4_IAIE142_Pos)            /*!< 0x00004000 */
#define IAC_IER4_IAIE142              IAC_IER4_IAIE142_Msk
#define IAC_IER4_IAIE143_Pos          (15U)
#define IAC_IER4_IAIE143_Msk          (0x1UL << IAC_IER4_IAIE143_Pos)            /*!< 0x00008000 */
#define IAC_IER4_IAIE143              IAC_IER4_IAIE143_Msk
#define IAC_IER4_IAIE144_Pos          (16U)
#define IAC_IER4_IAIE144_Msk          (0x1UL << IAC_IER4_IAIE144_Pos)            /*!< 0x00010000 */
#define IAC_IER4_IAIE144              IAC_IER4_IAIE144_Msk
#define IAC_IER4_IAIE145_Pos          (17U)
#define IAC_IER4_IAIE145_Msk          (0x1UL << IAC_IER4_IAIE145_Pos)            /*!< 0x00020000 */
#define IAC_IER4_IAIE145              IAC_IER4_IAIE145_Msk
#define IAC_IER4_IAIE146_Pos          (18U)
#define IAC_IER4_IAIE146_Msk          (0x1UL << IAC_IER4_IAIE146_Pos)            /*!< 0x00040000 */
#define IAC_IER4_IAIE146              IAC_IER4_IAIE146_Msk
#define IAC_IER4_IAIE147_Pos          (19U)
#define IAC_IER4_IAIE147_Msk          (0x1UL << IAC_IER4_IAIE147_Pos)            /*!< 0x00080000 */
#define IAC_IER4_IAIE147              IAC_IER4_IAIE147_Msk
#define IAC_IER4_IAIE148_Pos          (20U)
#define IAC_IER4_IAIE148_Msk          (0x1UL << IAC_IER4_IAIE148_Pos)            /*!< 0x00100000 */
#define IAC_IER4_IAIE148              IAC_IER4_IAIE148_Msk
#define IAC_IER4_IAIE149_Pos          (21U)
#define IAC_IER4_IAIE149_Msk          (0x1UL << IAC_IER4_IAIE149_Pos)            /*!< 0x00200000 */
#define IAC_IER4_IAIE149              IAC_IER4_IAIE149_Msk
#define IAC_IER4_IAIE150_Pos          (22U)
#define IAC_IER4_IAIE150_Msk          (0x1UL << IAC_IER4_IAIE150_Pos)            /*!< 0x00400000 */
#define IAC_IER4_IAIE150              IAC_IER4_IAIE150_Msk
#define IAC_IER4_IAIE151_Pos          (23U)
#define IAC_IER4_IAIE151_Msk          (0x1UL << IAC_IER4_IAIE151_Pos)            /*!< 0x00800000 */
#define IAC_IER4_IAIE151              IAC_IER4_IAIE151_Msk
#define IAC_IER4_IAIE152_Pos          (24U)
#define IAC_IER4_IAIE152_Msk          (0x1UL << IAC_IER4_IAIE152_Pos)            /*!< 0x01000000 */
#define IAC_IER4_IAIE152              IAC_IER4_IAIE152_Msk
#define IAC_IER4_IAIE153_Pos          (25U)
#define IAC_IER4_IAIE153_Msk          (0x1UL << IAC_IER4_IAIE153_Pos)            /*!< 0x02000000 */
#define IAC_IER4_IAIE153              IAC_IER4_IAIE153_Msk
#define IAC_IER4_IAIE154_Pos          (26U)
#define IAC_IER4_IAIE154_Msk          (0x1UL << IAC_IER4_IAIE154_Pos)            /*!< 0x04000000 */
#define IAC_IER4_IAIE154              IAC_IER4_IAIE154_Msk
#define IAC_IER4_IAIE155_Pos          (27U)
#define IAC_IER4_IAIE155_Msk          (0x1UL << IAC_IER4_IAIE155_Pos)            /*!< 0x08000000 */
#define IAC_IER4_IAIE155              IAC_IER4_IAIE155_Msk
#define IAC_IER4_IAIE156_Pos          (28U)
#define IAC_IER4_IAIE156_Msk          (0x1UL << IAC_IER4_IAIE156_Pos)            /*!< 0x10000000 */
#define IAC_IER4_IAIE156              IAC_IER4_IAIE156_Msk
#define IAC_IER4_IAIE157_Pos          (29U)
#define IAC_IER4_IAIE157_Msk          (0x1UL << IAC_IER4_IAIE157_Pos)            /*!< 0x20000000 */
#define IAC_IER4_IAIE157              IAC_IER4_IAIE157_Msk
#define IAC_IER4_IAIE158_Pos          (30U)
#define IAC_IER4_IAIE158_Msk          (0x1UL << IAC_IER4_IAIE158_Pos)            /*!< 0x40000000 */
#define IAC_IER4_IAIE158              IAC_IER4_IAIE158_Msk
#define IAC_IER4_IAIE159_Pos          (31U)
#define IAC_IER4_IAIE159_Msk          (0x1UL << IAC_IER4_IAIE159_Pos)            /*!< 0x80000000 */
#define IAC_IER4_IAIE159              IAC_IER4_IAIE159_Msk

/*******************  Bits definition for IAC_IER5 register *******************/
#define IAC_IER5_IAIE160_Pos          (0U)
#define IAC_IER5_IAIE160_Msk          (0x1UL << IAC_IER5_IAIE160_Pos)            /*!< 0x00000001 */
#define IAC_IER5_IAIE160              IAC_IER5_IAIE160_Msk
#define IAC_IER5_IAIE161_Pos          (1U)
#define IAC_IER5_IAIE161_Msk          (0x1UL << IAC_IER5_IAIE161_Pos)            /*!< 0x00000002 */
#define IAC_IER5_IAIE161              IAC_IER5_IAIE161_Msk
#define IAC_IER5_IAIE162_Pos          (2U)
#define IAC_IER5_IAIE162_Msk          (0x1UL << IAC_IER5_IAIE162_Pos)            /*!< 0x00000004 */
#define IAC_IER5_IAIE162              IAC_IER5_IAIE162_Msk
#define IAC_IER5_IAIE163_Pos          (3U)
#define IAC_IER5_IAIE163_Msk          (0x1UL << IAC_IER5_IAIE163_Pos)            /*!< 0x00000008 */
#define IAC_IER5_IAIE163              IAC_IER5_IAIE163_Msk
#define IAC_IER5_IAIE164_Pos          (4U)
#define IAC_IER5_IAIE164_Msk          (0x1UL << IAC_IER5_IAIE164_Pos)            /*!< 0x00000010 */
#define IAC_IER5_IAIE164              IAC_IER5_IAIE164_Msk
#define IAC_IER5_IAIE165_Pos          (5U)
#define IAC_IER5_IAIE165_Msk          (0x1UL << IAC_IER5_IAIE165_Pos)            /*!< 0x00000020 */
#define IAC_IER5_IAIE165              IAC_IER5_IAIE165_Msk
#define IAC_IER5_IAIE166_Pos          (6U)
#define IAC_IER5_IAIE166_Msk          (0x1UL << IAC_IER5_IAIE166_Pos)            /*!< 0x00000040 */
#define IAC_IER5_IAIE166              IAC_IER5_IAIE166_Msk
#define IAC_IER5_IAIE167_Pos          (7U)
#define IAC_IER5_IAIE167_Msk          (0x1UL << IAC_IER5_IAIE167_Pos)            /*!< 0x00000080 */
#define IAC_IER5_IAIE167              IAC_IER5_IAIE167_Msk
#define IAC_IER5_IAIE168_Pos          (8U)
#define IAC_IER5_IAIE168_Msk          (0x1UL << IAC_IER5_IAIE168_Pos)            /*!< 0x00000100 */
#define IAC_IER5_IAIE168              IAC_IER5_IAIE168_Msk
#define IAC_IER5_IAIE169_Pos          (9U)
#define IAC_IER5_IAIE169_Msk          (0x1UL << IAC_IER5_IAIE169_Pos)            /*!< 0x00000200 */
#define IAC_IER5_IAIE169              IAC_IER5_IAIE169_Msk
#define IAC_IER5_IAIE170_Pos          (10U)
#define IAC_IER5_IAIE170_Msk          (0x1UL << IAC_IER5_IAIE170_Pos)            /*!< 0x00000400 */
#define IAC_IER5_IAIE170              IAC_IER5_IAIE170_Msk
#define IAC_IER5_IAIE171_Pos          (11U)
#define IAC_IER5_IAIE171_Msk          (0x1UL << IAC_IER5_IAIE171_Pos)            /*!< 0x00000800 */
#define IAC_IER5_IAIE171              IAC_IER5_IAIE171_Msk
#define IAC_IER5_IAIE172_Pos          (12U)
#define IAC_IER5_IAIE172_Msk          (0x1UL << IAC_IER5_IAIE172_Pos)            /*!< 0x00001000 */
#define IAC_IER5_IAIE172              IAC_IER5_IAIE172_Msk
#define IAC_IER5_IAIE173_Pos          (13U)
#define IAC_IER5_IAIE173_Msk          (0x1UL << IAC_IER5_IAIE173_Pos)            /*!< 0x00002000 */
#define IAC_IER5_IAIE173              IAC_IER5_IAIE173_Msk
#define IAC_IER5_IAIE174_Pos          (14U)
#define IAC_IER5_IAIE174_Msk          (0x1UL << IAC_IER5_IAIE174_Pos)            /*!< 0x00004000 */
#define IAC_IER5_IAIE174              IAC_IER5_IAIE174_Msk
#define IAC_IER5_IAIE175_Pos          (15U)
#define IAC_IER5_IAIE175_Msk          (0x1UL << IAC_IER5_IAIE175_Pos)            /*!< 0x00008000 */
#define IAC_IER5_IAIE175              IAC_IER5_IAIE175_Msk
#define IAC_IER5_IAIE176_Pos          (16U)
#define IAC_IER5_IAIE176_Msk          (0x1UL << IAC_IER5_IAIE176_Pos)            /*!< 0x00010000 */
#define IAC_IER5_IAIE176              IAC_IER5_IAIE176_Msk
#define IAC_IER5_IAIE177_Pos          (17U)
#define IAC_IER5_IAIE177_Msk          (0x1UL << IAC_IER5_IAIE177_Pos)            /*!< 0x00020000 */
#define IAC_IER5_IAIE177              IAC_IER5_IAIE177_Msk
#define IAC_IER5_IAIE178_Pos          (18U)
#define IAC_IER5_IAIE178_Msk          (0x1UL << IAC_IER5_IAIE178_Pos)            /*!< 0x00040000 */
#define IAC_IER5_IAIE178              IAC_IER5_IAIE178_Msk
#define IAC_IER5_IAIE179_Pos          (19U)
#define IAC_IER5_IAIE179_Msk          (0x1UL << IAC_IER5_IAIE179_Pos)            /*!< 0x00080000 */
#define IAC_IER5_IAIE179              IAC_IER5_IAIE179_Msk
#define IAC_IER5_IAIE180_Pos          (20U)
#define IAC_IER5_IAIE180_Msk          (0x1UL << IAC_IER5_IAIE180_Pos)            /*!< 0x00100000 */
#define IAC_IER5_IAIE180              IAC_IER5_IAIE180_Msk
#define IAC_IER5_IAIE181_Pos          (21U)
#define IAC_IER5_IAIE181_Msk          (0x1UL << IAC_IER5_IAIE181_Pos)            /*!< 0x00200000 */
#define IAC_IER5_IAIE181              IAC_IER5_IAIE181_Msk
#define IAC_IER5_IAIE182_Pos          (22U)
#define IAC_IER5_IAIE182_Msk          (0x1UL << IAC_IER5_IAIE182_Pos)            /*!< 0x00400000 */
#define IAC_IER5_IAIE182              IAC_IER5_IAIE182_Msk
#define IAC_IER5_IAIE183_Pos          (23U)
#define IAC_IER5_IAIE183_Msk          (0x1UL << IAC_IER5_IAIE183_Pos)            /*!< 0x00800000 */
#define IAC_IER5_IAIE183              IAC_IER5_IAIE183_Msk
#define IAC_IER5_IAIE184_Pos          (24U)
#define IAC_IER5_IAIE184_Msk          (0x1UL << IAC_IER5_IAIE184_Pos)            /*!< 0x01000000 */
#define IAC_IER5_IAIE184              IAC_IER5_IAIE184_Msk
#define IAC_IER5_IAIE185_Pos          (25U)
#define IAC_IER5_IAIE185_Msk          (0x1UL << IAC_IER5_IAIE185_Pos)            /*!< 0x02000000 */
#define IAC_IER5_IAIE185              IAC_IER5_IAIE185_Msk
#define IAC_IER5_IAIE186_Pos          (26U)
#define IAC_IER5_IAIE186_Msk          (0x1UL << IAC_IER5_IAIE186_Pos)            /*!< 0x04000000 */
#define IAC_IER5_IAIE186              IAC_IER5_IAIE186_Msk
#define IAC_IER5_IAIE187_Pos          (27U)
#define IAC_IER5_IAIE187_Msk          (0x1UL << IAC_IER5_IAIE187_Pos)            /*!< 0x08000000 */
#define IAC_IER5_IAIE187              IAC_IER5_IAIE187_Msk
#define IAC_IER5_IAIE188_Pos          (28U)
#define IAC_IER5_IAIE188_Msk          (0x1UL << IAC_IER5_IAIE188_Pos)            /*!< 0x10000000 */
#define IAC_IER5_IAIE188              IAC_IER5_IAIE188_Msk
#define IAC_IER5_IAIE189_Pos          (29U)
#define IAC_IER5_IAIE189_Msk          (0x1UL << IAC_IER5_IAIE189_Pos)            /*!< 0x20000000 */
#define IAC_IER5_IAIE189              IAC_IER5_IAIE189_Msk
#define IAC_IER5_IAIE190_Pos          (30U)
#define IAC_IER5_IAIE190_Msk          (0x1UL << IAC_IER5_IAIE190_Pos)            /*!< 0x40000000 */
#define IAC_IER5_IAIE190              IAC_IER5_IAIE190_Msk
#define IAC_IER5_IAIE191_Pos          (31U)
#define IAC_IER5_IAIE191_Msk          (0x1UL << IAC_IER5_IAIE191_Pos)            /*!< 0x80000000 */
#define IAC_IER5_IAIE191              IAC_IER5_IAIE191_Msk

/*******************  Bits definition for IAC_ISR0 register *******************/
#define IAC_ISR0_IAF0_Pos             (0U)
#define IAC_ISR0_IAF0_Msk             (0x1UL << IAC_ISR0_IAF0_Pos)               /*!< 0x00000001 */
#define IAC_ISR0_IAF0                 IAC_ISR0_IAF0_Msk
#define IAC_ISR0_IAF1_Pos             (1U)
#define IAC_ISR0_IAF1_Msk             (0x1UL << IAC_ISR0_IAF1_Pos)               /*!< 0x00000002 */
#define IAC_ISR0_IAF1                 IAC_ISR0_IAF1_Msk
#define IAC_ISR0_IAF2_Pos             (2U)
#define IAC_ISR0_IAF2_Msk             (0x1UL << IAC_ISR0_IAF2_Pos)               /*!< 0x00000004 */
#define IAC_ISR0_IAF2                 IAC_ISR0_IAF2_Msk
#define IAC_ISR0_IAF3_Pos             (3U)
#define IAC_ISR0_IAF3_Msk             (0x1UL << IAC_ISR0_IAF3_Pos)               /*!< 0x00000008 */
#define IAC_ISR0_IAF3                 IAC_ISR0_IAF3_Msk
#define IAC_ISR0_IAF4_Pos             (4U)
#define IAC_ISR0_IAF4_Msk             (0x1UL << IAC_ISR0_IAF4_Pos)               /*!< 0x00000010 */
#define IAC_ISR0_IAF4                 IAC_ISR0_IAF4_Msk
#define IAC_ISR0_IAF5_Pos             (5U)
#define IAC_ISR0_IAF5_Msk             (0x1UL << IAC_ISR0_IAF5_Pos)               /*!< 0x00000020 */
#define IAC_ISR0_IAF5                 IAC_ISR0_IAF5_Msk
#define IAC_ISR0_IAF6_Pos             (6U)
#define IAC_ISR0_IAF6_Msk             (0x1UL << IAC_ISR0_IAF6_Pos)               /*!< 0x00000040 */
#define IAC_ISR0_IAF6                 IAC_ISR0_IAF6_Msk
#define IAC_ISR0_IAF7_Pos             (7U)
#define IAC_ISR0_IAF7_Msk             (0x1UL << IAC_ISR0_IAF7_Pos)               /*!< 0x00000080 */
#define IAC_ISR0_IAF7                 IAC_ISR0_IAF7_Msk
#define IAC_ISR0_IAF8_Pos             (8U)
#define IAC_ISR0_IAF8_Msk             (0x1UL << IAC_ISR0_IAF8_Pos)               /*!< 0x00000100 */
#define IAC_ISR0_IAF8                 IAC_ISR0_IAF8_Msk
#define IAC_ISR0_IAF9_Pos             (9U)
#define IAC_ISR0_IAF9_Msk             (0x1UL << IAC_ISR0_IAF9_Pos)               /*!< 0x00000200 */
#define IAC_ISR0_IAF9                 IAC_ISR0_IAF9_Msk
#define IAC_ISR0_IAF10_Pos            (10U)
#define IAC_ISR0_IAF10_Msk            (0x1UL << IAC_ISR0_IAF10_Pos)              /*!< 0x00000400 */
#define IAC_ISR0_IAF10                IAC_ISR0_IAF10_Msk
#define IAC_ISR0_IAF11_Pos            (11U)
#define IAC_ISR0_IAF11_Msk            (0x1UL << IAC_ISR0_IAF11_Pos)              /*!< 0x00000800 */
#define IAC_ISR0_IAF11                IAC_ISR0_IAF11_Msk
#define IAC_ISR0_IAF12_Pos            (12U)
#define IAC_ISR0_IAF12_Msk            (0x1UL << IAC_ISR0_IAF12_Pos)              /*!< 0x00001000 */
#define IAC_ISR0_IAF12                IAC_ISR0_IAF12_Msk
#define IAC_ISR0_IAF13_Pos            (13U)
#define IAC_ISR0_IAF13_Msk            (0x1UL << IAC_ISR0_IAF13_Pos)              /*!< 0x00002000 */
#define IAC_ISR0_IAF13                IAC_ISR0_IAF13_Msk
#define IAC_ISR0_IAF14_Pos            (14U)
#define IAC_ISR0_IAF14_Msk            (0x1UL << IAC_ISR0_IAF14_Pos)              /*!< 0x00004000 */
#define IAC_ISR0_IAF14                IAC_ISR0_IAF14_Msk
#define IAC_ISR0_IAF15_Pos            (15U)
#define IAC_ISR0_IAF15_Msk            (0x1UL << IAC_ISR0_IAF15_Pos)              /*!< 0x00008000 */
#define IAC_ISR0_IAF15                IAC_ISR0_IAF15_Msk
#define IAC_ISR0_IAF16_Pos            (16U)
#define IAC_ISR0_IAF16_Msk            (0x1UL << IAC_ISR0_IAF16_Pos)              /*!< 0x00010000 */
#define IAC_ISR0_IAF16                IAC_ISR0_IAF16_Msk
#define IAC_ISR0_IAF17_Pos            (17U)
#define IAC_ISR0_IAF17_Msk            (0x1UL << IAC_ISR0_IAF17_Pos)              /*!< 0x00020000 */
#define IAC_ISR0_IAF17                IAC_ISR0_IAF17_Msk
#define IAC_ISR0_IAF18_Pos            (18U)
#define IAC_ISR0_IAF18_Msk            (0x1UL << IAC_ISR0_IAF18_Pos)              /*!< 0x00040000 */
#define IAC_ISR0_IAF18                IAC_ISR0_IAF18_Msk
#define IAC_ISR0_IAF19_Pos            (19U)
#define IAC_ISR0_IAF19_Msk            (0x1UL << IAC_ISR0_IAF19_Pos)              /*!< 0x00080000 */
#define IAC_ISR0_IAF19                IAC_ISR0_IAF19_Msk
#define IAC_ISR0_IAF20_Pos            (20U)
#define IAC_ISR0_IAF20_Msk            (0x1UL << IAC_ISR0_IAF20_Pos)              /*!< 0x00100000 */
#define IAC_ISR0_IAF20                IAC_ISR0_IAF20_Msk
#define IAC_ISR0_IAF21_Pos            (21U)
#define IAC_ISR0_IAF21_Msk            (0x1UL << IAC_ISR0_IAF21_Pos)              /*!< 0x00200000 */
#define IAC_ISR0_IAF21                IAC_ISR0_IAF21_Msk
#define IAC_ISR0_IAF22_Pos            (22U)
#define IAC_ISR0_IAF22_Msk            (0x1UL << IAC_ISR0_IAF22_Pos)              /*!< 0x00400000 */
#define IAC_ISR0_IAF22                IAC_ISR0_IAF22_Msk
#define IAC_ISR0_IAF23_Pos            (23U)
#define IAC_ISR0_IAF23_Msk            (0x1UL << IAC_ISR0_IAF23_Pos)              /*!< 0x00800000 */
#define IAC_ISR0_IAF23                IAC_ISR0_IAF23_Msk
#define IAC_ISR0_IAF24_Pos            (24U)
#define IAC_ISR0_IAF24_Msk            (0x1UL << IAC_ISR0_IAF24_Pos)              /*!< 0x01000000 */
#define IAC_ISR0_IAF24                IAC_ISR0_IAF24_Msk
#define IAC_ISR0_IAF25_Pos            (25U)
#define IAC_ISR0_IAF25_Msk            (0x1UL << IAC_ISR0_IAF25_Pos)              /*!< 0x02000000 */
#define IAC_ISR0_IAF25                IAC_ISR0_IAF25_Msk
#define IAC_ISR0_IAF26_Pos            (26U)
#define IAC_ISR0_IAF26_Msk            (0x1UL << IAC_ISR0_IAF26_Pos)              /*!< 0x04000000 */
#define IAC_ISR0_IAF26                IAC_ISR0_IAF26_Msk
#define IAC_ISR0_IAF27_Pos            (27U)
#define IAC_ISR0_IAF27_Msk            (0x1UL << IAC_ISR0_IAF27_Pos)              /*!< 0x08000000 */
#define IAC_ISR0_IAF27                IAC_ISR0_IAF27_Msk
#define IAC_ISR0_IAF28_Pos            (28U)
#define IAC_ISR0_IAF28_Msk            (0x1UL << IAC_ISR0_IAF28_Pos)              /*!< 0x10000000 */
#define IAC_ISR0_IAF28                IAC_ISR0_IAF28_Msk
#define IAC_ISR0_IAF29_Pos            (29U)
#define IAC_ISR0_IAF29_Msk            (0x1UL << IAC_ISR0_IAF29_Pos)              /*!< 0x20000000 */
#define IAC_ISR0_IAF29                IAC_ISR0_IAF29_Msk
#define IAC_ISR0_IAF30_Pos            (30U)
#define IAC_ISR0_IAF30_Msk            (0x1UL << IAC_ISR0_IAF30_Pos)              /*!< 0x40000000 */
#define IAC_ISR0_IAF30                IAC_ISR0_IAF30_Msk
#define IAC_ISR0_IAF31_Pos            (31U)
#define IAC_ISR0_IAF31_Msk            (0x1UL << IAC_ISR0_IAF31_Pos)              /*!< 0x80000000 */
#define IAC_ISR0_IAF31                IAC_ISR0_IAF31_Msk

/*******************  Bits definition for IAC_ISR1 register *******************/
#define IAC_ISR1_IAF32_Pos            (0U)
#define IAC_ISR1_IAF32_Msk            (0x1UL << IAC_ISR1_IAF32_Pos)              /*!< 0x00000001 */
#define IAC_ISR1_IAF32                IAC_ISR1_IAF32_Msk
#define IAC_ISR1_IAF33_Pos            (1U)
#define IAC_ISR1_IAF33_Msk            (0x1UL << IAC_ISR1_IAF33_Pos)              /*!< 0x00000002 */
#define IAC_ISR1_IAF33                IAC_ISR1_IAF33_Msk
#define IAC_ISR1_IAF34_Pos            (2U)
#define IAC_ISR1_IAF34_Msk            (0x1UL << IAC_ISR1_IAF34_Pos)              /*!< 0x00000004 */
#define IAC_ISR1_IAF34                IAC_ISR1_IAF34_Msk
#define IAC_ISR1_IAF35_Pos            (3U)
#define IAC_ISR1_IAF35_Msk            (0x1UL << IAC_ISR1_IAF35_Pos)              /*!< 0x00000008 */
#define IAC_ISR1_IAF35                IAC_ISR1_IAF35_Msk
#define IAC_ISR1_IAF36_Pos            (4U)
#define IAC_ISR1_IAF36_Msk            (0x1UL << IAC_ISR1_IAF36_Pos)              /*!< 0x00000010 */
#define IAC_ISR1_IAF36                IAC_ISR1_IAF36_Msk
#define IAC_ISR1_IAF37_Pos            (5U)
#define IAC_ISR1_IAF37_Msk            (0x1UL << IAC_ISR1_IAF37_Pos)              /*!< 0x00000020 */
#define IAC_ISR1_IAF37                IAC_ISR1_IAF37_Msk
#define IAC_ISR1_IAF38_Pos            (6U)
#define IAC_ISR1_IAF38_Msk            (0x1UL << IAC_ISR1_IAF38_Pos)              /*!< 0x00000040 */
#define IAC_ISR1_IAF38                IAC_ISR1_IAF38_Msk
#define IAC_ISR1_IAF39_Pos            (7U)
#define IAC_ISR1_IAF39_Msk            (0x1UL << IAC_ISR1_IAF39_Pos)              /*!< 0x00000080 */
#define IAC_ISR1_IAF39                IAC_ISR1_IAF39_Msk
#define IAC_ISR1_IAF40_Pos            (8U)
#define IAC_ISR1_IAF40_Msk            (0x1UL << IAC_ISR1_IAF40_Pos)              /*!< 0x00000100 */
#define IAC_ISR1_IAF40                IAC_ISR1_IAF40_Msk
#define IAC_ISR1_IAF41_Pos            (9U)
#define IAC_ISR1_IAF41_Msk            (0x1UL << IAC_ISR1_IAF41_Pos)              /*!< 0x00000200 */
#define IAC_ISR1_IAF41                IAC_ISR1_IAF41_Msk
#define IAC_ISR1_IAF42_Pos            (10U)
#define IAC_ISR1_IAF42_Msk            (0x1UL << IAC_ISR1_IAF42_Pos)              /*!< 0x00000400 */
#define IAC_ISR1_IAF42                IAC_ISR1_IAF42_Msk
#define IAC_ISR1_IAF43_Pos            (11U)
#define IAC_ISR1_IAF43_Msk            (0x1UL << IAC_ISR1_IAF43_Pos)              /*!< 0x00000800 */
#define IAC_ISR1_IAF43                IAC_ISR1_IAF43_Msk
#define IAC_ISR1_IAF44_Pos            (12U)
#define IAC_ISR1_IAF44_Msk            (0x1UL << IAC_ISR1_IAF44_Pos)              /*!< 0x00001000 */
#define IAC_ISR1_IAF44                IAC_ISR1_IAF44_Msk
#define IAC_ISR1_IAF45_Pos            (13U)
#define IAC_ISR1_IAF45_Msk            (0x1UL << IAC_ISR1_IAF45_Pos)              /*!< 0x00002000 */
#define IAC_ISR1_IAF45                IAC_ISR1_IAF45_Msk
#define IAC_ISR1_IAF46_Pos            (14U)
#define IAC_ISR1_IAF46_Msk            (0x1UL << IAC_ISR1_IAF46_Pos)              /*!< 0x00004000 */
#define IAC_ISR1_IAF46                IAC_ISR1_IAF46_Msk
#define IAC_ISR1_IAF47_Pos            (15U)
#define IAC_ISR1_IAF47_Msk            (0x1UL << IAC_ISR1_IAF47_Pos)              /*!< 0x00008000 */
#define IAC_ISR1_IAF47                IAC_ISR1_IAF47_Msk
#define IAC_ISR1_IAF48_Pos            (16U)
#define IAC_ISR1_IAF48_Msk            (0x1UL << IAC_ISR1_IAF48_Pos)              /*!< 0x00010000 */
#define IAC_ISR1_IAF48                IAC_ISR1_IAF48_Msk
#define IAC_ISR1_IAF49_Pos            (17U)
#define IAC_ISR1_IAF49_Msk            (0x1UL << IAC_ISR1_IAF49_Pos)              /*!< 0x00020000 */
#define IAC_ISR1_IAF49                IAC_ISR1_IAF49_Msk
#define IAC_ISR1_IAF50_Pos            (18U)
#define IAC_ISR1_IAF50_Msk            (0x1UL << IAC_ISR1_IAF50_Pos)              /*!< 0x00040000 */
#define IAC_ISR1_IAF50                IAC_ISR1_IAF50_Msk
#define IAC_ISR1_IAF51_Pos            (19U)
#define IAC_ISR1_IAF51_Msk            (0x1UL << IAC_ISR1_IAF51_Pos)              /*!< 0x00080000 */
#define IAC_ISR1_IAF51                IAC_ISR1_IAF51_Msk
#define IAC_ISR1_IAF52_Pos            (20U)
#define IAC_ISR1_IAF52_Msk            (0x1UL << IAC_ISR1_IAF52_Pos)              /*!< 0x00100000 */
#define IAC_ISR1_IAF52                IAC_ISR1_IAF52_Msk
#define IAC_ISR1_IAF53_Pos            (21U)
#define IAC_ISR1_IAF53_Msk            (0x1UL << IAC_ISR1_IAF53_Pos)              /*!< 0x00200000 */
#define IAC_ISR1_IAF53                IAC_ISR1_IAF53_Msk
#define IAC_ISR1_IAF54_Pos            (22U)
#define IAC_ISR1_IAF54_Msk            (0x1UL << IAC_ISR1_IAF54_Pos)              /*!< 0x00400000 */
#define IAC_ISR1_IAF54                IAC_ISR1_IAF54_Msk
#define IAC_ISR1_IAF55_Pos            (23U)
#define IAC_ISR1_IAF55_Msk            (0x1UL << IAC_ISR1_IAF55_Pos)              /*!< 0x00800000 */
#define IAC_ISR1_IAF55                IAC_ISR1_IAF55_Msk
#define IAC_ISR1_IAF56_Pos            (24U)
#define IAC_ISR1_IAF56_Msk            (0x1UL << IAC_ISR1_IAF56_Pos)              /*!< 0x01000000 */
#define IAC_ISR1_IAF56                IAC_ISR1_IAF56_Msk
#define IAC_ISR1_IAF57_Pos            (25U)
#define IAC_ISR1_IAF57_Msk            (0x1UL << IAC_ISR1_IAF57_Pos)              /*!< 0x02000000 */
#define IAC_ISR1_IAF57                IAC_ISR1_IAF57_Msk
#define IAC_ISR1_IAF58_Pos            (26U)
#define IAC_ISR1_IAF58_Msk            (0x1UL << IAC_ISR1_IAF58_Pos)              /*!< 0x04000000 */
#define IAC_ISR1_IAF58                IAC_ISR1_IAF58_Msk
#define IAC_ISR1_IAF59_Pos            (27U)
#define IAC_ISR1_IAF59_Msk            (0x1UL << IAC_ISR1_IAF59_Pos)              /*!< 0x08000000 */
#define IAC_ISR1_IAF59                IAC_ISR1_IAF59_Msk
#define IAC_ISR1_IAF60_Pos            (28U)
#define IAC_ISR1_IAF60_Msk            (0x1UL << IAC_ISR1_IAF60_Pos)              /*!< 0x10000000 */
#define IAC_ISR1_IAF60                IAC_ISR1_IAF60_Msk
#define IAC_ISR1_IAF61_Pos            (29U)
#define IAC_ISR1_IAF61_Msk            (0x1UL << IAC_ISR1_IAF61_Pos)              /*!< 0x20000000 */
#define IAC_ISR1_IAF61                IAC_ISR1_IAF61_Msk
#define IAC_ISR1_IAF62_Pos            (30U)
#define IAC_ISR1_IAF62_Msk            (0x1UL << IAC_ISR1_IAF62_Pos)              /*!< 0x40000000 */
#define IAC_ISR1_IAF62                IAC_ISR1_IAF62_Msk
#define IAC_ISR1_IAF63_Pos            (31U)
#define IAC_ISR1_IAF63_Msk            (0x1UL << IAC_ISR1_IAF63_Pos)              /*!< 0x80000000 */
#define IAC_ISR1_IAF63                IAC_ISR1_IAF63_Msk

/*******************  Bits definition for IAC_ISR2 register *******************/
#define IAC_ISR2_IAF64_Pos            (0U)
#define IAC_ISR2_IAF64_Msk            (0x1UL << IAC_ISR2_IAF64_Pos)              /*!< 0x00000001 */
#define IAC_ISR2_IAF64                IAC_ISR2_IAF64_Msk
#define IAC_ISR2_IAF65_Pos            (1U)
#define IAC_ISR2_IAF65_Msk            (0x1UL << IAC_ISR2_IAF65_Pos)              /*!< 0x00000002 */
#define IAC_ISR2_IAF65                IAC_ISR2_IAF65_Msk
#define IAC_ISR2_IAF66_Pos            (2U)
#define IAC_ISR2_IAF66_Msk            (0x1UL << IAC_ISR2_IAF66_Pos)              /*!< 0x00000004 */
#define IAC_ISR2_IAF66                IAC_ISR2_IAF66_Msk
#define IAC_ISR2_IAF67_Pos            (3U)
#define IAC_ISR2_IAF67_Msk            (0x1UL << IAC_ISR2_IAF67_Pos)              /*!< 0x00000008 */
#define IAC_ISR2_IAF67                IAC_ISR2_IAF67_Msk
#define IAC_ISR2_IAF68_Pos            (4U)
#define IAC_ISR2_IAF68_Msk            (0x1UL << IAC_ISR2_IAF68_Pos)              /*!< 0x00000010 */
#define IAC_ISR2_IAF68                IAC_ISR2_IAF68_Msk
#define IAC_ISR2_IAF69_Pos            (5U)
#define IAC_ISR2_IAF69_Msk            (0x1UL << IAC_ISR2_IAF69_Pos)              /*!< 0x00000020 */
#define IAC_ISR2_IAF69                IAC_ISR2_IAF69_Msk
#define IAC_ISR2_IAF70_Pos            (6U)
#define IAC_ISR2_IAF70_Msk            (0x1UL << IAC_ISR2_IAF70_Pos)              /*!< 0x00000040 */
#define IAC_ISR2_IAF70                IAC_ISR2_IAF70_Msk
#define IAC_ISR2_IAF71_Pos            (7U)
#define IAC_ISR2_IAF71_Msk            (0x1UL << IAC_ISR2_IAF71_Pos)              /*!< 0x00000080 */
#define IAC_ISR2_IAF71                 IAC_ISR2_IAF71_Msk
#define IAC_ISR2_IAF72_Pos            (8U)
#define IAC_ISR2_IAF72_Msk            (0x1UL << IAC_ISR2_IAF72_Pos)              /*!< 0x00000100 */
#define IAC_ISR2_IAF72                IAC_ISR2_IAF72_Msk
#define IAC_ISR2_IAF73_Pos            (9U)
#define IAC_ISR2_IAF73_Msk            (0x1UL << IAC_ISR2_IAF73_Pos)              /*!< 0x00000200 */
#define IAC_ISR2_IAF73                IAC_ISR2_IAF73_Msk
#define IAC_ISR2_IAF74_Pos            (10U)
#define IAC_ISR2_IAF74_Msk            (0x1UL << IAC_ISR2_IAF74_Pos)              /*!< 0x00000400 */
#define IAC_ISR2_IAF74                IAC_ISR2_IAF74_Msk
#define IAC_ISR2_IAF75_Pos            (11U)
#define IAC_ISR2_IAF75_Msk            (0x1UL << IAC_ISR2_IAF75_Pos)              /*!< 0x00000800 */
#define IAC_ISR2_IAF75                IAC_ISR2_IAF75_Msk
#define IAC_ISR2_IAF76_Pos            (12U)
#define IAC_ISR2_IAF76_Msk            (0x1UL << IAC_ISR2_IAF76_Pos)              /*!< 0x00001000 */
#define IAC_ISR2_IAF76                IAC_ISR2_IAF76_Msk
#define IAC_ISR2_IAF77_Pos            (13U)
#define IAC_ISR2_IAF77_Msk            (0x1UL << IAC_ISR2_IAF77_Pos)              /*!< 0x00002000 */
#define IAC_ISR2_IAF77                IAC_ISR2_IAF77_Msk
#define IAC_ISR2_IAF78_Pos            (14U)
#define IAC_ISR2_IAF78_Msk            (0x1UL << IAC_ISR2_IAF78_Pos)              /*!< 0x00004000 */
#define IAC_ISR2_IAF78                IAC_ISR2_IAF78_Msk
#define IAC_ISR2_IAF79_Pos            (15U)
#define IAC_ISR2_IAF79_Msk            (0x1UL << IAC_ISR2_IAF79_Pos)              /*!< 0x00008000 */
#define IAC_ISR2_IAF79                IAC_ISR2_IAF79_Msk
#define IAC_ISR2_IAF80_Pos            (16U)
#define IAC_ISR2_IAF80_Msk            (0x1UL << IAC_ISR2_IAF80_Pos)              /*!< 0x00010000 */
#define IAC_ISR2_IAF80                IAC_ISR2_IAF80_Msk
#define IAC_ISR2_IAF81_Pos            (17U)
#define IAC_ISR2_IAF81_Msk            (0x1UL << IAC_ISR2_IAF81_Pos)              /*!< 0x00020000 */
#define IAC_ISR2_IAF81                IAC_ISR2_IAF81_Msk
#define IAC_ISR2_IAF82_Pos            (18U)
#define IAC_ISR2_IAF82_Msk            (0x1UL << IAC_ISR2_IAF82_Pos)              /*!< 0x00040000 */
#define IAC_ISR2_IAF82                IAC_ISR2_IAF82_Msk
#define IAC_ISR2_IAF83_Pos            (19U)
#define IAC_ISR2_IAF83_Msk            (0x1UL << IAC_ISR2_IAF83_Pos)              /*!< 0x00080000 */
#define IAC_ISR2_IAF83                IAC_ISR2_IAF83_Msk
#define IAC_ISR2_IAF84_Pos            (20U)
#define IAC_ISR2_IAF84_Msk            (0x1UL << IAC_ISR2_IAF84_Pos)              /*!< 0x00100000 */
#define IAC_ISR2_IAF84                IAC_ISR2_IAF84_Msk
#define IAC_ISR2_IAF85_Pos            (21U)
#define IAC_ISR2_IAF85_Msk            (0x1UL << IAC_ISR2_IAF85_Pos)              /*!< 0x00200000 */
#define IAC_ISR2_IAF85                IAC_ISR2_IAF85_Msk
#define IAC_ISR2_IAF86_Pos            (22U)
#define IAC_ISR2_IAF86_Msk            (0x1UL << IAC_ISR2_IAF86_Pos)              /*!< 0x00400000 */
#define IAC_ISR2_IAF86                IAC_ISR2_IAF86_Msk
#define IAC_ISR2_IAF87_Pos            (23U)
#define IAC_ISR2_IAF87_Msk            (0x1UL << IAC_ISR2_IAF87_Pos)              /*!< 0x00800000 */
#define IAC_ISR2_IAF87                IAC_ISR2_IAF87_Msk
#define IAC_ISR2_IAF88_Pos            (24U)
#define IAC_ISR2_IAF88_Msk            (0x1UL << IAC_ISR2_IAF88_Pos)              /*!< 0x01000000 */
#define IAC_ISR2_IAF88                IAC_ISR2_IAF88_Msk
#define IAC_ISR2_IAF89_Pos            (25U)
#define IAC_ISR2_IAF89_Msk            (0x1UL << IAC_ISR2_IAF89_Pos)              /*!< 0x02000000 */
#define IAC_ISR2_IAF89                IAC_ISR2_IAF89_Msk
#define IAC_ISR2_IAF90_Pos            (26U)
#define IAC_ISR2_IAF90_Msk            (0x1UL << IAC_ISR2_IAF90_Pos)              /*!< 0x04000000 */
#define IAC_ISR2_IAF90                IAC_ISR2_IAF90_Msk
#define IAC_ISR2_IAF91_Pos            (27U)
#define IAC_ISR2_IAF91_Msk            (0x1UL << IAC_ISR2_IAF91_Pos)              /*!< 0x08000000 */
#define IAC_ISR2_IAF91                IAC_ISR2_IAF91_Msk
#define IAC_ISR2_IAF92_Pos            (28U)
#define IAC_ISR2_IAF92_Msk            (0x1UL << IAC_ISR2_IAF92_Pos)              /*!< 0x10000000 */
#define IAC_ISR2_IAF92                IAC_ISR2_IAF92_Msk
#define IAC_ISR2_IAF93_Pos            (29U)
#define IAC_ISR2_IAF93_Msk            (0x1UL << IAC_ISR2_IAF93_Pos)              /*!< 0x20000000 */
#define IAC_ISR2_IAF93                IAC_ISR2_IAF93_Msk
#define IAC_ISR2_IAF94_Pos            (30U)
#define IAC_ISR2_IAF94_Msk            (0x1UL << IAC_ISR2_IAF94_Pos)              /*!< 0x40000000 */
#define IAC_ISR2_IAF94                IAC_ISR2_IAF94_Msk
#define IAC_ISR2_IAF95_Pos            (31U)
#define IAC_ISR2_IAF95_Msk            (0x1UL << IAC_ISR2_IAF95_Pos)              /*!< 0x80000000 */
#define IAC_ISR2_IAF95                IAC_ISR2_IAF95_Msk

/*******************  Bits definition for IAC_ISR3 register *******************/
#define IAC_ISR3_IAF96_Pos            (0U)
#define IAC_ISR3_IAF96_Msk            (0x1UL << IAC_ISR3_IAF96_Pos)              /*!< 0x00000001 */
#define IAC_ISR3_IAF96                IAC_ISR3_IAF96_Msk
#define IAC_ISR3_IAF97_Pos            (1U)
#define IAC_ISR3_IAF97_Msk            (0x1UL << IAC_ISR3_IAF97_Pos)              /*!< 0x00000002 */
#define IAC_ISR3_IAF97                IAC_ISR3_IAF97_Msk
#define IAC_ISR3_IAF98_Pos            (2U)
#define IAC_ISR3_IAF98_Msk            (0x1UL << IAC_ISR3_IAF98_Pos)              /*!< 0x00000004 */
#define IAC_ISR3_IAF98                IAC_ISR3_IAF98_Msk
#define IAC_ISR3_IAF99_Pos            (3U)
#define IAC_ISR3_IAF99_Msk            (0x1UL << IAC_ISR3_IAF99_Pos)              /*!< 0x00000008 */
#define IAC_ISR3_IAF99                IAC_ISR3_IAF99_Msk
#define IAC_ISR3_IAF100_Pos           (4U)
#define IAC_ISR3_IAF100_Msk           (0x1UL << IAC_ISR3_IAF100_Pos)             /*!< 0x00000010 */
#define IAC_ISR3_IAF100               IAC_ISR3_IAF100_Msk
#define IAC_ISR3_IAF101_Pos           (5U)
#define IAC_ISR3_IAF101_Msk           (0x1UL << IAC_ISR3_IAF101_Pos)             /*!< 0x00000020 */
#define IAC_ISR3_IAF101               IAC_ISR3_IAF101_Msk
#define IAC_ISR3_IAF102_Pos           (6U)
#define IAC_ISR3_IAF102_Msk           (0x1UL << IAC_ISR3_IAF102_Pos)             /*!< 0x00000040 */
#define IAC_ISR3_IAF102               IAC_ISR3_IAF102_Msk
#define IAC_ISR3_IAF103_Pos           (7U)
#define IAC_ISR3_IAF103_Msk           (0x1UL << IAC_ISR3_IAF103_Pos)             /*!< 0x00000080 */
#define IAC_ISR3_IAF103               IAC_ISR3_IAF103_Msk
#define IAC_ISR3_IAF104_Pos           (8U)
#define IAC_ISR3_IAF104_Msk           (0x1UL << IAC_ISR3_IAF104_Pos)             /*!< 0x00000100 */
#define IAC_ISR3_IAF104               IAC_ISR3_IAF104_Msk
#define IAC_ISR3_IAF105_Pos           (9U)
#define IAC_ISR3_IAF105_Msk           (0x1UL << IAC_ISR3_IAF105_Pos)             /*!< 0x00000200 */
#define IAC_ISR3_IAF105               IAC_ISR3_IAF105_Msk
#define IAC_ISR3_IAF106_Pos           (10U)
#define IAC_ISR3_IAF106_Msk           (0x1UL << IAC_ISR3_IAF106_Pos)             /*!< 0x00000400 */
#define IAC_ISR3_IAF106               IAC_ISR3_IAF106_Msk
#define IAC_ISR3_IAF107_Pos           (11U)
#define IAC_ISR3_IAF107_Msk           (0x1UL << IAC_ISR3_IAF107_Pos)             /*!< 0x00000800 */
#define IAC_ISR3_IAF107               IAC_ISR3_IAF107_Msk
#define IAC_ISR3_IAF108_Pos           (12U)
#define IAC_ISR3_IAF108_Msk           (0x1UL << IAC_ISR3_IAF108_Pos)             /*!< 0x00001000 */
#define IAC_ISR3_IAF108               IAC_ISR3_IAF108_Msk
#define IAC_ISR3_IAF109_Pos           (13U)
#define IAC_ISR3_IAF109_Msk           (0x1UL << IAC_ISR3_IAF109_Pos)             /*!< 0x00002000 */
#define IAC_ISR3_IAF109               IAC_ISR3_IAF109_Msk
#define IAC_ISR3_IAF110_Pos           (14U)
#define IAC_ISR3_IAF110_Msk           (0x1UL << IAC_ISR3_IAF110_Pos)             /*!< 0x00004000 */
#define IAC_ISR3_IAF110               IAC_ISR3_IAF110_Msk
#define IAC_ISR3_IAF111_Pos           (15U)
#define IAC_ISR3_IAF111_Msk           (0x1UL << IAC_ISR3_IAF111_Pos)             /*!< 0x00008000 */
#define IAC_ISR3_IAF111               IAC_ISR3_IAF111_Msk
#define IAC_ISR3_IAF112_Pos           (16U)
#define IAC_ISR3_IAF112_Msk           (0x1UL << IAC_ISR3_IAF112_Pos)             /*!< 0x00010000 */
#define IAC_ISR3_IAF112               IAC_ISR3_IAF112_Msk
#define IAC_ISR3_IAF113_Pos           (17U)
#define IAC_ISR3_IAF113_Msk           (0x1UL << IAC_ISR3_IAF113_Pos)             /*!< 0x00020000 */
#define IAC_ISR3_IAF113               IAC_ISR3_IAF113_Msk
#define IAC_ISR3_IAF114_Pos           (18U)
#define IAC_ISR3_IAF114_Msk           (0x1UL << IAC_ISR3_IAF114_Pos)             /*!< 0x00040000 */
#define IAC_ISR3_IAF114               IAC_ISR3_IAF114_Msk
#define IAC_ISR3_IAF115_Pos           (19U)
#define IAC_ISR3_IAF115_Msk           (0x1UL << IAC_ISR3_IAF115_Pos)             /*!< 0x00080000 */
#define IAC_ISR3_IAF115               IAC_ISR3_IAF115_Msk
#define IAC_ISR3_IAF116_Pos           (20U)
#define IAC_ISR3_IAF116_Msk           (0x1UL << IAC_ISR3_IAF116_Pos)             /*!< 0x00100000 */
#define IAC_ISR3_IAF116               IAC_ISR3_IAF116_Msk
#define IAC_ISR3_IAF117_Pos           (21U)
#define IAC_ISR3_IAF117_Msk           (0x1UL << IAC_ISR3_IAF117_Pos)             /*!< 0x00200000 */
#define IAC_ISR3_IAF117               IAC_ISR3_IAF117_Msk
#define IAC_ISR3_IAF118_Pos           (22U)
#define IAC_ISR3_IAF118_Msk           (0x1UL << IAC_ISR3_IAF118_Pos)             /*!< 0x00400000 */
#define IAC_ISR3_IAF118               IAC_ISR3_IAF118_Msk
#define IAC_ISR3_IAF119_Pos           (23U)
#define IAC_ISR3_IAF119_Msk           (0x1UL << IAC_ISR3_IAF119_Pos)             /*!< 0x00800000 */
#define IAC_ISR3_IAF119               IAC_ISR3_IAF119_Msk
#define IAC_ISR3_IAF120_Pos           (24U)
#define IAC_ISR3_IAF120_Msk           (0x1UL << IAC_ISR3_IAF120_Pos)             /*!< 0x01000000 */
#define IAC_ISR3_IAF120               IAC_ISR3_IAF120_Msk
#define IAC_ISR3_IAF121_Pos           (25U)
#define IAC_ISR3_IAF121_Msk           (0x1UL << IAC_ISR3_IAF121_Pos)             /*!< 0x02000000 */
#define IAC_ISR3_IAF121               IAC_ISR3_IAF121_Msk
#define IAC_ISR3_IAF122_Pos           (26U)
#define IAC_ISR3_IAF122_Msk           (0x1UL << IAC_ISR3_IAF122_Pos)             /*!< 0x04000000 */
#define IAC_ISR3_IAF122               IAC_ISR3_IAF122_Msk
#define IAC_ISR3_IAF123_Pos           (27U)
#define IAC_ISR3_IAF123_Msk           (0x1UL << IAC_ISR3_IAF123_Pos)             /*!< 0x08000000 */
#define IAC_ISR3_IAF123               IAC_ISR3_IAF123_Msk
#define IAC_ISR3_IAF124_Pos           (28U)
#define IAC_ISR3_IAF124_Msk           (0x1UL << IAC_ISR3_IAF124_Pos)             /*!< 0x10000000 */
#define IAC_ISR3_IAF124               IAC_ISR3_IAF124_Msk
#define IAC_ISR3_IAF125_Pos           (29U)
#define IAC_ISR3_IAF125_Msk           (0x1UL << IAC_ISR3_IAF125_Pos)             /*!< 0x20000000 */
#define IAC_ISR3_IAF125               IAC_ISR3_IAF125_Msk
#define IAC_ISR3_IAF126_Pos           (30U)
#define IAC_ISR3_IAF126_Msk           (0x1UL << IAC_ISR3_IAF126_Pos)             /*!< 0x40000000 */
#define IAC_ISR3_IAF126               IAC_ISR3_IAF126_Msk
#define IAC_ISR3_IAF127_Pos           (31U)
#define IAC_ISR3_IAF127_Msk           (0x1UL << IAC_ISR3_IAF127_Pos)             /*!< 0x80000000 */
#define IAC_ISR3_IAF127               IAC_ISR3_IAF127_Msk

/*******************  Bits definition for IAC_ISR4 register *******************/
#define IAC_ISR4_IAF128_Pos           (0U)
#define IAC_ISR4_IAF128_Msk           (0x1UL << IAC_ISR4_IAF128_Pos)             /*!< 0x00000001 */
#define IAC_ISR4_IAF128               IAC_ISR4_IAF128_Msk
#define IAC_ISR4_IAF129_Pos           (1U)
#define IAC_ISR4_IAF129_Msk           (0x1UL << IAC_ISR4_IAF129_Pos)             /*!< 0x00000002 */
#define IAC_ISR4_IAF129               IAC_ISR4_IAF129_Msk
#define IAC_ISR4_IAF130_Pos           (2U)
#define IAC_ISR4_IAF130_Msk           (0x1UL << IAC_ISR4_IAF130_Pos)             /*!< 0x00000004 */
#define IAC_ISR4_IAF130               IAC_ISR4_IAF130_Msk
#define IAC_ISR4_IAF131_Pos           (3U)
#define IAC_ISR4_IAF131_Msk           (0x1UL << IAC_ISR4_IAF131_Pos)             /*!< 0x00000008 */
#define IAC_ISR4_IAF131               IAC_ISR4_IAF131_Msk
#define IAC_ISR4_IAF132_Pos           (4U)
#define IAC_ISR4_IAF132_Msk           (0x1UL << IAC_ISR4_IAF132_Pos)             /*!< 0x00000010 */
#define IAC_ISR4_IAF132               IAC_ISR4_IAF132_Msk
#define IAC_ISR4_IAF133_Pos           (5U)
#define IAC_ISR4_IAF133_Msk           (0x1UL << IAC_ISR4_IAF133_Pos)             /*!< 0x00000020 */
#define IAC_ISR4_IAF133               IAC_ISR4_IAF133_Msk
#define IAC_ISR4_IAF134_Pos           (6U)
#define IAC_ISR4_IAF134_Msk           (0x1UL << IAC_ISR4_IAF134_Pos)             /*!< 0x00000040 */
#define IAC_ISR4_IAF134               IAC_ISR4_IAF134_Msk
#define IAC_ISR4_IAF135_Pos           (7U)
#define IAC_ISR4_IAF135_Msk           (0x1UL << IAC_ISR4_IAF135_Pos)             /*!< 0x00000080 */
#define IAC_ISR4_IAF135               IAC_ISR4_IAF135_Msk
#define IAC_ISR4_IAF136_Pos           (8U)
#define IAC_ISR4_IAF136_Msk           (0x1UL << IAC_ISR4_IAF136_Pos)             /*!< 0x00000100 */
#define IAC_ISR4_IAF136               IAC_ISR4_IAF136_Msk
#define IAC_ISR4_IAF137_Pos           (9U)
#define IAC_ISR4_IAF137_Msk           (0x1UL << IAC_ISR4_IAF137_Pos)             /*!< 0x00000200 */
#define IAC_ISR4_IAF137               IAC_ISR4_IAF137_Msk
#define IAC_ISR4_IAF138_Pos           (10U)
#define IAC_ISR4_IAF138_Msk           (0x1UL << IAC_ISR4_IAF138_Pos)             /*!< 0x00000400 */
#define IAC_ISR4_IAF138               IAC_ISR4_IAF138_Msk
#define IAC_ISR4_IAF139_Pos           (11U)
#define IAC_ISR4_IAF139_Msk           (0x1UL << IAC_ISR4_IAF139_Pos)             /*!< 0x00000800 */
#define IAC_ISR4_IAF139               IAC_ISR4_IAF139_Msk
#define IAC_ISR4_IAF140_Pos           (12U)
#define IAC_ISR4_IAF140_Msk           (0x1UL << IAC_ISR4_IAF140_Pos)             /*!< 0x00001000 */
#define IAC_ISR4_IAF140               IAC_ISR4_IAF140_Msk
#define IAC_ISR4_IAF141_Pos           (13U)
#define IAC_ISR4_IAF141_Msk           (0x1UL << IAC_ISR4_IAF141_Pos)             /*!< 0x00002000 */
#define IAC_ISR4_IAF141               IAC_ISR4_IAF141_Msk
#define IAC_ISR4_IAF142_Pos           (14U)
#define IAC_ISR4_IAF142_Msk           (0x1UL << IAC_ISR4_IAF142_Pos)             /*!< 0x00004000 */
#define IAC_ISR4_IAF142               IAC_ISR4_IAF142_Msk
#define IAC_ISR4_IAF143_Pos           (15U)
#define IAC_ISR4_IAF143_Msk           (0x1UL << IAC_ISR4_IAF143_Pos)             /*!< 0x00008000 */
#define IAC_ISR4_IAF143               IAC_ISR4_IAF143_Msk
#define IAC_ISR4_IAF144_Pos           (16U)
#define IAC_ISR4_IAF144_Msk           (0x1UL << IAC_ISR4_IAF144_Pos)             /*!< 0x00010000 */
#define IAC_ISR4_IAF144               IAC_ISR4_IAF144_Msk
#define IAC_ISR4_IAF145_Pos           (17U)
#define IAC_ISR4_IAF145_Msk           (0x1UL << IAC_ISR4_IAF145_Pos)             /*!< 0x00020000 */
#define IAC_ISR4_IAF145               IAC_ISR4_IAF145_Msk
#define IAC_ISR4_IAF146_Pos           (18U)
#define IAC_ISR4_IAF146_Msk           (0x1UL << IAC_ISR4_IAF146_Pos)             /*!< 0x00040000 */
#define IAC_ISR4_IAF146               IAC_ISR4_IAF146_Msk
#define IAC_ISR4_IAF147_Pos           (19U)
#define IAC_ISR4_IAF147_Msk           (0x1UL << IAC_ISR4_IAF147_Pos)             /*!< 0x00080000 */
#define IAC_ISR4_IAF147               IAC_ISR4_IAF147_Msk
#define IAC_ISR4_IAF148_Pos           (20U)
#define IAC_ISR4_IAF148_Msk           (0x1UL << IAC_ISR4_IAF148_Pos)             /*!< 0x00100000 */
#define IAC_ISR4_IAF148               IAC_ISR4_IAF148_Msk
#define IAC_ISR4_IAF149_Pos           (21U)
#define IAC_ISR4_IAF149_Msk           (0x1UL << IAC_ISR4_IAF149_Pos)             /*!< 0x00200000 */
#define IAC_ISR4_IAF149               IAC_ISR4_IAF149_Msk
#define IAC_ISR4_IAF150_Pos           (22U)
#define IAC_ISR4_IAF150_Msk           (0x1UL << IAC_ISR4_IAF150_Pos)             /*!< 0x00400000 */
#define IAC_ISR4_IAF150               IAC_ISR4_IAF150_Msk
#define IAC_ISR4_IAF151_Pos           (23U)
#define IAC_ISR4_IAF151_Msk           (0x1UL << IAC_ISR4_IAF151_Pos)             /*!< 0x00800000 */
#define IAC_ISR4_IAF151               IAC_ISR4_IAF151_Msk
#define IAC_ISR4_IAF152_Pos           (24U)
#define IAC_ISR4_IAF152_Msk           (0x1UL << IAC_ISR4_IAF152_Pos)             /*!< 0x01000000 */
#define IAC_ISR4_IAF152               IAC_ISR4_IAF152_Msk
#define IAC_ISR4_IAF153_Pos           (25U)
#define IAC_ISR4_IAF153_Msk           (0x1UL << IAC_ISR4_IAF153_Pos)             /*!< 0x02000000 */
#define IAC_ISR4_IAF153               IAC_ISR4_IAF153_Msk
#define IAC_ISR4_IAF154_Pos           (26U)
#define IAC_ISR4_IAF154_Msk           (0x1UL << IAC_ISR4_IAF154_Pos)             /*!< 0x04000000 */
#define IAC_ISR4_IAF154               IAC_ISR4_IAF154_Msk
#define IAC_ISR4_IAF155_Pos           (27U)
#define IAC_ISR4_IAF155_Msk           (0x1UL << IAC_ISR4_IAF155_Pos)             /*!< 0x08000000 */
#define IAC_ISR4_IAF155               IAC_ISR4_IAF155_Msk
#define IAC_ISR4_IAF156_Pos           (28U)
#define IAC_ISR4_IAF156_Msk           (0x1UL << IAC_ISR4_IAF156_Pos)             /*!< 0x10000000 */
#define IAC_ISR4_IAF156               IAC_ISR4_IAF156_Msk
#define IAC_ISR4_IAF157_Pos           (29U)
#define IAC_ISR4_IAF157_Msk           (0x1UL << IAC_ISR4_IAF157_Pos)             /*!< 0x20000000 */
#define IAC_ISR4_IAF157               IAC_ISR4_IAF157_Msk
#define IAC_ISR4_IAF158_Pos           (30U)
#define IAC_ISR4_IAF158_Msk           (0x1UL << IAC_ISR4_IAF158_Pos)             /*!< 0x40000000 */
#define IAC_ISR4_IAF158               IAC_ISR4_IAF158_Msk
#define IAC_ISR4_IAF159_Pos           (31U)
#define IAC_ISR4_IAF159_Msk           (0x1UL << IAC_ISR4_IAF159_Pos)             /*!< 0x80000000 */
#define IAC_ISR4_IAF159               IAC_ISR4_IAF159_Msk

/*******************  Bits definition for IAC_ISR5 register *******************/
#define IAC_ISR5_IAF160_Pos           (0U)
#define IAC_ISR5_IAF160_Msk           (0x1UL << IAC_ISR5_IAF160_Pos)             /*!< 0x00000001 */
#define IAC_ISR5_IAF160               IAC_ISR5_IAF160_Msk
#define IAC_ISR5_IAF161_Pos           (1U)
#define IAC_ISR5_IAF161_Msk           (0x1UL << IAC_ISR5_IAF161_Pos)             /*!< 0x00000002 */
#define IAC_ISR5_IAF161               IAC_ISR5_IAF161_Msk
#define IAC_ISR5_IAF162_Pos           (2U)
#define IAC_ISR5_IAF162_Msk           (0x1UL << IAC_ISR5_IAF162_Pos)             /*!< 0x00000004 */
#define IAC_ISR5_IAF162               IAC_ISR5_IAF162_Msk
#define IAC_ISR5_IAF163_Pos           (3U)
#define IAC_ISR5_IAF163_Msk           (0x1UL << IAC_ISR5_IAF163_Pos)             /*!< 0x00000008 */
#define IAC_ISR5_IAF163               IAC_ISR5_IAF163_Msk
#define IAC_ISR5_IAF164_Pos           (4U)
#define IAC_ISR5_IAF164_Msk           (0x1UL << IAC_ISR5_IAF164_Pos)             /*!< 0x00000010 */
#define IAC_ISR5_IAF164               IAC_ISR5_IAF164_Msk
#define IAC_ISR5_IAF165_Pos           (5U)
#define IAC_ISR5_IAF165_Msk           (0x1UL << IAC_ISR5_IAF165_Pos)             /*!< 0x00000020 */
#define IAC_ISR5_IAF165               IAC_ISR5_IAF165_Msk
#define IAC_ISR5_IAF166_Pos           (6U)
#define IAC_ISR5_IAF166_Msk           (0x1UL << IAC_ISR5_IAF166_Pos)             /*!< 0x00000040 */
#define IAC_ISR5_IAF166               IAC_ISR5_IAF166_Msk
#define IAC_ISR5_IAF167_Pos           (7U)
#define IAC_ISR5_IAF167_Msk           (0x1UL << IAC_ISR5_IAF167_Pos)             /*!< 0x00000080 */
#define IAC_ISR5_IAF167               IAC_ISR5_IAF167_Msk
#define IAC_ISR5_IAF168_Pos           (8U)
#define IAC_ISR5_IAF168_Msk           (0x1UL << IAC_ISR5_IAF168_Pos)             /*!< 0x00000100 */
#define IAC_ISR5_IAF168               IAC_ISR5_IAF168_Msk
#define IAC_ISR5_IAF169_Pos           (9U)
#define IAC_ISR5_IAF169_Msk           (0x1UL << IAC_ISR5_IAF169_Pos)             /*!< 0x00000200 */
#define IAC_ISR5_IAF169               IAC_ISR5_IAF169_Msk
#define IAC_ISR5_IAF170_Pos           (10U)
#define IAC_ISR5_IAF170_Msk           (0x1UL << IAC_ISR5_IAF170_Pos)             /*!< 0x00000400 */
#define IAC_ISR5_IAF170               IAC_ISR5_IAF170_Msk
#define IAC_ISR5_IAF171_Pos           (11U)
#define IAC_ISR5_IAF171_Msk           (0x1UL << IAC_ISR5_IAF171_Pos)             /*!< 0x00000800 */
#define IAC_ISR5_IAF171               IAC_ISR5_IAF171_Msk
#define IAC_ISR5_IAF172_Pos           (12U)
#define IAC_ISR5_IAF172_Msk           (0x1UL << IAC_ISR5_IAF172_Pos)             /*!< 0x00001000 */
#define IAC_ISR5_IAF172               IAC_ISR5_IAF172_Msk
#define IAC_ISR5_IAF173_Pos           (13U)
#define IAC_ISR5_IAF173_Msk           (0x1UL << IAC_ISR5_IAF173_Pos)             /*!< 0x00002000 */
#define IAC_ISR5_IAF173               IAC_ISR5_IAF173_Msk
#define IAC_ISR5_IAF174_Pos           (14U)
#define IAC_ISR5_IAF174_Msk           (0x1UL << IAC_ISR5_IAF174_Pos)             /*!< 0x00004000 */
#define IAC_ISR5_IAF174               IAC_ISR5_IAF174_Msk
#define IAC_ISR5_IAF175_Pos           (15U)
#define IAC_ISR5_IAF175_Msk           (0x1UL << IAC_ISR5_IAF175_Pos)             /*!< 0x00008000 */
#define IAC_ISR5_IAF175               IAC_ISR5_IAF175_Msk
#define IAC_ISR5_IAF176_Pos           (16U)
#define IAC_ISR5_IAF176_Msk           (0x1UL << IAC_ISR5_IAF176_Pos)             /*!< 0x00010000 */
#define IAC_ISR5_IAF176               IAC_ISR5_IAF176_Msk
#define IAC_ISR5_IAF177_Pos           (17U)
#define IAC_ISR5_IAF177_Msk           (0x1UL << IAC_ISR5_IAF177_Pos)             /*!< 0x00020000 */
#define IAC_ISR5_IAF177               IAC_ISR5_IAF177_Msk
#define IAC_ISR5_IAF178_Pos           (18U)
#define IAC_ISR5_IAF178_Msk           (0x1UL << IAC_ISR5_IAF178_Pos)             /*!< 0x00040000 */
#define IAC_ISR5_IAF178               IAC_ISR5_IAF178_Msk
#define IAC_ISR5_IAF179_Pos           (19U)
#define IAC_ISR5_IAF179_Msk           (0x1UL << IAC_ISR5_IAF179_Pos)             /*!< 0x00080000 */
#define IAC_ISR5_IAF179               IAC_ISR5_IAF179_Msk
#define IAC_ISR5_IAF180_Pos           (20U)
#define IAC_ISR5_IAF180_Msk           (0x1UL << IAC_ISR5_IAF180_Pos)             /*!< 0x00100000 */
#define IAC_ISR5_IAF180               IAC_ISR5_IAF180_Msk
#define IAC_ISR5_IAF181_Pos           (21U)
#define IAC_ISR5_IAF181_Msk           (0x1UL << IAC_ISR5_IAF181_Pos)             /*!< 0x00200000 */
#define IAC_ISR5_IAF181               IAC_ISR5_IAF181_Msk
#define IAC_ISR5_IAF182_Pos           (22U)
#define IAC_ISR5_IAF182_Msk           (0x1UL << IAC_ISR5_IAF182_Pos)             /*!< 0x00400000 */
#define IAC_ISR5_IAF182               IAC_ISR5_IAF182_Msk
#define IAC_ISR5_IAF183_Pos           (23U)
#define IAC_ISR5_IAF183_Msk           (0x1UL << IAC_ISR5_IAF183_Pos)             /*!< 0x00800000 */
#define IAC_ISR5_IAF183               IAC_ISR5_IAF183_Msk
#define IAC_ISR5_IAF184_Pos           (24U)
#define IAC_ISR5_IAF184_Msk           (0x1UL << IAC_ISR5_IAF184_Pos)             /*!< 0x01000000 */
#define IAC_ISR5_IAF184               IAC_ISR5_IAF184_Msk
#define IAC_ISR5_IAF185_Pos           (25U)
#define IAC_ISR5_IAF185_Msk           (0x1UL << IAC_ISR5_IAF185_Pos)             /*!< 0x02000000 */
#define IAC_ISR5_IAF185               IAC_ISR5_IAF185_Msk
#define IAC_ISR5_IAF186_Pos           (26U)
#define IAC_ISR5_IAF186_Msk           (0x1UL << IAC_ISR5_IAF186_Pos)             /*!< 0x04000000 */
#define IAC_ISR5_IAF186               IAC_ISR5_IAF186_Msk
#define IAC_ISR5_IAF187_Pos           (27U)
#define IAC_ISR5_IAF187_Msk           (0x1UL << IAC_ISR5_IAF187_Pos)             /*!< 0x08000000 */
#define IAC_ISR5_IAF187               IAC_ISR5_IAF187_Msk
#define IAC_ISR5_IAF188_Pos           (28U)
#define IAC_ISR5_IAF188_Msk           (0x1UL << IAC_ISR5_IAF188_Pos)             /*!< 0x10000000 */
#define IAC_ISR5_IAF188               IAC_ISR5_IAF188_Msk
#define IAC_ISR5_IAF189_Pos           (29U)
#define IAC_ISR5_IAF189_Msk           (0x1UL << IAC_ISR5_IAF189_Pos)             /*!< 0x20000000 */
#define IAC_ISR5_IAF189               IAC_ISR5_IAF189_Msk
#define IAC_ISR5_IAF190_Pos           (30U)
#define IAC_ISR5_IAF190_Msk           (0x1UL << IAC_ISR5_IAF190_Pos)             /*!< 0x40000000 */
#define IAC_ISR5_IAF190               IAC_ISR5_IAF190_Msk
#define IAC_ISR5_IAF191_Pos           (31U)
#define IAC_ISR5_IAF191_Msk           (0x1UL << IAC_ISR5_IAF191_Pos)             /*!< 0x80000000 */
#define IAC_ISR5_IAF191               IAC_ISR5_IAF191_Msk

/*******************  Bits definition for IAC_ICR0 register *******************/
#define IAC_ICR0_IAF0_Pos             (0U)
#define IAC_ICR0_IAF0_Msk             (0x1UL << IAC_ICR0_IAF0_Pos)               /*!< 0x00000001 */
#define IAC_ICR0_IAF0                 IAC_ICR0_IAF0_Msk
#define IAC_ICR0_IAF1_Pos             (1U)
#define IAC_ICR0_IAF1_Msk             (0x1UL << IAC_ICR0_IAF1_Pos)               /*!< 0x00000002 */
#define IAC_ICR0_IAF1                 IAC_ICR0_IAF1_Msk
#define IAC_ICR0_IAF2_Pos             (2U)
#define IAC_ICR0_IAF2_Msk             (0x1UL << IAC_ICR0_IAF2_Pos)               /*!< 0x00000004 */
#define IAC_ICR0_IAF2                 IAC_ICR0_IAF2_Msk
#define IAC_ICR0_IAF3_Pos             (3U)
#define IAC_ICR0_IAF3_Msk             (0x1UL << IAC_ICR0_IAF3_Pos)               /*!< 0x00000008 */
#define IAC_ICR0_IAF3                 IAC_ICR0_IAF3_Msk
#define IAC_ICR0_IAF4_Pos             (4U)
#define IAC_ICR0_IAF4_Msk             (0x1UL << IAC_ICR0_IAF4_Pos)               /*!< 0x00000010 */
#define IAC_ICR0_IAF4                 IAC_ICR0_IAF4_Msk
#define IAC_ICR0_IAF5_Pos             (5U)
#define IAC_ICR0_IAF5_Msk             (0x1UL << IAC_ICR0_IAF5_Pos)               /*!< 0x00000020 */
#define IAC_ICR0_IAF5                 IAC_ICR0_IAF5_Msk
#define IAC_ICR0_IAF6_Pos             (6U)
#define IAC_ICR0_IAF6_Msk             (0x1UL << IAC_ICR0_IAF6_Pos)               /*!< 0x00000040 */
#define IAC_ICR0_IAF6                 IAC_ICR0_IAF6_Msk
#define IAC_ICR0_IAF7_Pos             (7U)
#define IAC_ICR0_IAF7_Msk             (0x1UL << IAC_ICR0_IAF7_Pos)               /*!< 0x00000080 */
#define IAC_ICR0_IAF7                 IAC_ICR0_IAF7_Msk
#define IAC_ICR0_IAF8_Pos             (8U)
#define IAC_ICR0_IAF8_Msk             (0x1UL << IAC_ICR0_IAF8_Pos)               /*!< 0x00000100 */
#define IAC_ICR0_IAF8                 IAC_ICR0_IAF8_Msk
#define IAC_ICR0_IAF9_Pos             (9U)
#define IAC_ICR0_IAF9_Msk             (0x1UL << IAC_ICR0_IAF9_Pos)               /*!< 0x00000200 */
#define IAC_ICR0_IAF9                 IAC_ICR0_IAF9_Msk
#define IAC_ICR0_IAF10_Pos            (10U)
#define IAC_ICR0_IAF10_Msk            (0x1UL << IAC_ICR0_IAF10_Pos)              /*!< 0x00000400 */
#define IAC_ICR0_IAF10                IAC_ICR0_IAF10_Msk
#define IAC_ICR0_IAF11_Pos            (11U)
#define IAC_ICR0_IAF11_Msk            (0x1UL << IAC_ICR0_IAF11_Pos)              /*!< 0x00000800 */
#define IAC_ICR0_IAF11                IAC_ICR0_IAF11_Msk
#define IAC_ICR0_IAF12_Pos            (12U)
#define IAC_ICR0_IAF12_Msk            (0x1UL << IAC_ICR0_IAF12_Pos)              /*!< 0x00001000 */
#define IAC_ICR0_IAF12                IAC_ICR0_IAF12_Msk
#define IAC_ICR0_IAF13_Pos            (13U)
#define IAC_ICR0_IAF13_Msk            (0x1UL << IAC_ICR0_IAF13_Pos)              /*!< 0x00002000 */
#define IAC_ICR0_IAF13                IAC_ICR0_IAF13_Msk
#define IAC_ICR0_IAF14_Pos            (14U)
#define IAC_ICR0_IAF14_Msk            (0x1UL << IAC_ICR0_IAF14_Pos)              /*!< 0x00004000 */
#define IAC_ICR0_IAF14                IAC_ICR0_IAF14_Msk
#define IAC_ICR0_IAF15_Pos            (15U)
#define IAC_ICR0_IAF15_Msk            (0x1UL << IAC_ICR0_IAF15_Pos)              /*!< 0x00008000 */
#define IAC_ICR0_IAF15                IAC_ICR0_IAF15_Msk
#define IAC_ICR0_IAF16_Pos            (16U)
#define IAC_ICR0_IAF16_Msk            (0x1UL << IAC_ICR0_IAF16_Pos)              /*!< 0x00010000 */
#define IAC_ICR0_IAF16                IAC_ICR0_IAF16_Msk
#define IAC_ICR0_IAF17_Pos            (17U)
#define IAC_ICR0_IAF17_Msk            (0x1UL << IAC_ICR0_IAF17_Pos)              /*!< 0x00020000 */
#define IAC_ICR0_IAF17                IAC_ICR0_IAF17_Msk
#define IAC_ICR0_IAF18_Pos            (18U)
#define IAC_ICR0_IAF18_Msk            (0x1UL << IAC_ICR0_IAF18_Pos)              /*!< 0x00040000 */
#define IAC_ICR0_IAF18                IAC_ICR0_IAF18_Msk
#define IAC_ICR0_IAF19_Pos            (19U)
#define IAC_ICR0_IAF19_Msk            (0x1UL << IAC_ICR0_IAF19_Pos)              /*!< 0x00080000 */
#define IAC_ICR0_IAF19                IAC_ICR0_IAF19_Msk
#define IAC_ICR0_IAF20_Pos            (20U)
#define IAC_ICR0_IAF20_Msk            (0x1UL << IAC_ICR0_IAF20_Pos)              /*!< 0x00100000 */
#define IAC_ICR0_IAF20                IAC_ICR0_IAF20_Msk
#define IAC_ICR0_IAF21_Pos            (21U)
#define IAC_ICR0_IAF21_Msk            (0x1UL << IAC_ICR0_IAF21_Pos)              /*!< 0x00200000 */
#define IAC_ICR0_IAF21                IAC_ICR0_IAF21_Msk
#define IAC_ICR0_IAF22_Pos            (22U)
#define IAC_ICR0_IAF22_Msk            (0x1UL << IAC_ICR0_IAF22_Pos)              /*!< 0x00400000 */
#define IAC_ICR0_IAF22                IAC_ICR0_IAF22_Msk
#define IAC_ICR0_IAF23_Pos            (23U)
#define IAC_ICR0_IAF23_Msk            (0x1UL << IAC_ICR0_IAF23_Pos)              /*!< 0x00800000 */
#define IAC_ICR0_IAF23                IAC_ICR0_IAF23_Msk
#define IAC_ICR0_IAF24_Pos            (24U)
#define IAC_ICR0_IAF24_Msk            (0x1UL << IAC_ICR0_IAF24_Pos)              /*!< 0x01000000 */
#define IAC_ICR0_IAF24                IAC_ICR0_IAF24_Msk
#define IAC_ICR0_IAF25_Pos            (25U)
#define IAC_ICR0_IAF25_Msk            (0x1UL << IAC_ICR0_IAF25_Pos)              /*!< 0x02000000 */
#define IAC_ICR0_IAF25                IAC_ICR0_IAF25_Msk
#define IAC_ICR0_IAF26_Pos            (26U)
#define IAC_ICR0_IAF26_Msk            (0x1UL << IAC_ICR0_IAF26_Pos)              /*!< 0x04000000 */
#define IAC_ICR0_IAF26                IAC_ICR0_IAF26_Msk
#define IAC_ICR0_IAF27_Pos            (27U)
#define IAC_ICR0_IAF27_Msk            (0x1UL << IAC_ICR0_IAF27_Pos)              /*!< 0x08000000 */
#define IAC_ICR0_IAF27                IAC_ICR0_IAF27_Msk
#define IAC_ICR0_IAF28_Pos            (28U)
#define IAC_ICR0_IAF28_Msk            (0x1UL << IAC_ICR0_IAF28_Pos)              /*!< 0x10000000 */
#define IAC_ICR0_IAF28                IAC_ICR0_IAF28_Msk
#define IAC_ICR0_IAF29_Pos            (29U)
#define IAC_ICR0_IAF29_Msk            (0x1UL << IAC_ICR0_IAF29_Pos)              /*!< 0x20000000 */
#define IAC_ICR0_IAF29                IAC_ICR0_IAF29_Msk
#define IAC_ICR0_IAF30_Pos            (30U)
#define IAC_ICR0_IAF30_Msk            (0x1UL << IAC_ICR0_IAF30_Pos)              /*!< 0x40000000 */
#define IAC_ICR0_IAF30                IAC_ICR0_IAF30_Msk
#define IAC_ICR0_IAF31_Pos            (31U)
#define IAC_ICR0_IAF31_Msk            (0x1UL << IAC_ICR0_IAF31_Pos)              /*!< 0x80000000 */
#define IAC_ICR0_IAF31                IAC_ICR0_IAF31_Msk

/*******************  Bits definition for IAC_ICR1 register *******************/
#define IAC_ICR1_IAF32_Pos            (0U)
#define IAC_ICR1_IAF32_Msk            (0x1UL << IAC_ICR1_IAF32_Pos)              /*!< 0x00000001 */
#define IAC_ICR1_IAF32                IAC_ICR1_IAF32_Msk
#define IAC_ICR1_IAF33_Pos            (1U)
#define IAC_ICR1_IAF33_Msk            (0x1UL << IAC_ICR1_IAF33_Pos)              /*!< 0x00000002 */
#define IAC_ICR1_IAF33                IAC_ICR1_IAF33_Msk
#define IAC_ICR1_IAF34_Pos            (2U)
#define IAC_ICR1_IAF34_Msk            (0x1UL << IAC_ICR1_IAF34_Pos)              /*!< 0x00000004 */
#define IAC_ICR1_IAF34                IAC_ICR1_IAF34_Msk
#define IAC_ICR1_IAF35_Pos            (3U)
#define IAC_ICR1_IAF35_Msk            (0x1UL << IAC_ICR1_IAF35_Pos)              /*!< 0x00000008 */
#define IAC_ICR1_IAF35                IAC_ICR1_IAF35_Msk
#define IAC_ICR1_IAF36_Pos            (4U)
#define IAC_ICR1_IAF36_Msk            (0x1UL << IAC_ICR1_IAF36_Pos)              /*!< 0x00000010 */
#define IAC_ICR1_IAF36                IAC_ICR1_IAF36_Msk
#define IAC_ICR1_IAF37_Pos            (5U)
#define IAC_ICR1_IAF37_Msk            (0x1UL << IAC_ICR1_IAF37_Pos)              /*!< 0x00000020 */
#define IAC_ICR1_IAF37                IAC_ICR1_IAF37_Msk
#define IAC_ICR1_IAF38_Pos            (6U)
#define IAC_ICR1_IAF38_Msk            (0x1UL << IAC_ICR1_IAF38_Pos)              /*!< 0x00000040 */
#define IAC_ICR1_IAF38                IAC_ICR1_IAF38_Msk
#define IAC_ICR1_IAF39_Pos            (7U)
#define IAC_ICR1_IAF39_Msk            (0x1UL << IAC_ICR1_IAF39_Pos)              /*!< 0x00000080 */
#define IAC_ICR1_IAF39                IAC_ICR1_IAF39_Msk
#define IAC_ICR1_IAF40_Pos            (8U)
#define IAC_ICR1_IAF40_Msk            (0x1UL << IAC_ICR1_IAF40_Pos)              /*!< 0x00000100 */
#define IAC_ICR1_IAF40                IAC_ICR1_IAF40_Msk
#define IAC_ICR1_IAF41_Pos            (9U)
#define IAC_ICR1_IAF41_Msk            (0x1UL << IAC_ICR1_IAF41_Pos)              /*!< 0x00000200 */
#define IAC_ICR1_IAF41                IAC_ICR1_IAF41_Msk
#define IAC_ICR1_IAF42_Pos            (10U)
#define IAC_ICR1_IAF42_Msk            (0x1UL << IAC_ICR1_IAF42_Pos)              /*!< 0x00000400 */
#define IAC_ICR1_IAF42                IAC_ICR1_IAF42_Msk
#define IAC_ICR1_IAF43_Pos            (11U)
#define IAC_ICR1_IAF43_Msk            (0x1UL << IAC_ICR1_IAF43_Pos)              /*!< 0x00000800 */
#define IAC_ICR1_IAF43                IAC_ICR1_IAF43_Msk
#define IAC_ICR1_IAF44_Pos            (12U)
#define IAC_ICR1_IAF44_Msk            (0x1UL << IAC_ICR1_IAF44_Pos)              /*!< 0x00001000 */
#define IAC_ICR1_IAF44                IAC_ICR1_IAF44_Msk
#define IAC_ICR1_IAF45_Pos            (13U)
#define IAC_ICR1_IAF45_Msk            (0x1UL << IAC_ICR1_IAF45_Pos)              /*!< 0x00002000 */
#define IAC_ICR1_IAF45                IAC_ICR1_IAF45_Msk
#define IAC_ICR1_IAF46_Pos            (14U)
#define IAC_ICR1_IAF46_Msk            (0x1UL << IAC_ICR1_IAF46_Pos)              /*!< 0x00004000 */
#define IAC_ICR1_IAF46                IAC_ICR1_IAF46_Msk
#define IAC_ICR1_IAF47_Pos            (15U)
#define IAC_ICR1_IAF47_Msk            (0x1UL << IAC_ICR1_IAF47_Pos)              /*!< 0x00008000 */
#define IAC_ICR1_IAF47                IAC_ICR1_IAF47_Msk
#define IAC_ICR1_IAF48_Pos            (16U)
#define IAC_ICR1_IAF48_Msk            (0x1UL << IAC_ICR1_IAF48_Pos)              /*!< 0x00010000 */
#define IAC_ICR1_IAF48                IAC_ICR1_IAF48_Msk
#define IAC_ICR1_IAF49_Pos            (17U)
#define IAC_ICR1_IAF49_Msk            (0x1UL << IAC_ICR1_IAF49_Pos)              /*!< 0x00020000 */
#define IAC_ICR1_IAF49                IAC_ICR1_IAF49_Msk
#define IAC_ICR1_IAF50_Pos            (18U)
#define IAC_ICR1_IAF50_Msk            (0x1UL << IAC_ICR1_IAF50_Pos)              /*!< 0x00040000 */
#define IAC_ICR1_IAF50                IAC_ICR1_IAF50_Msk
#define IAC_ICR1_IAF51_Pos            (19U)
#define IAC_ICR1_IAF51_Msk            (0x1UL << IAC_ICR1_IAF51_Pos)              /*!< 0x00080000 */
#define IAC_ICR1_IAF51                IAC_ICR1_IAF51_Msk
#define IAC_ICR1_IAF52_Pos            (20U)
#define IAC_ICR1_IAF52_Msk            (0x1UL << IAC_ICR1_IAF52_Pos)              /*!< 0x00100000 */
#define IAC_ICR1_IAF52                IAC_ICR1_IAF52_Msk
#define IAC_ICR1_IAF53_Pos            (21U)
#define IAC_ICR1_IAF53_Msk            (0x1UL << IAC_ICR1_IAF53_Pos)              /*!< 0x00200000 */
#define IAC_ICR1_IAF53                IAC_ICR1_IAF53_Msk
#define IAC_ICR1_IAF54_Pos            (22U)
#define IAC_ICR1_IAF54_Msk            (0x1UL << IAC_ICR1_IAF54_Pos)              /*!< 0x00400000 */
#define IAC_ICR1_IAF54                IAC_ICR1_IAF54_Msk
#define IAC_ICR1_IAF55_Pos            (23U)
#define IAC_ICR1_IAF55_Msk            (0x1UL << IAC_ICR1_IAF55_Pos)              /*!< 0x00800000 */
#define IAC_ICR1_IAF55                IAC_ICR1_IAF55_Msk
#define IAC_ICR1_IAF56_Pos            (24U)
#define IAC_ICR1_IAF56_Msk            (0x1UL << IAC_ICR1_IAF56_Pos)              /*!< 0x01000000 */
#define IAC_ICR1_IAF56                IAC_ICR1_IAF56_Msk
#define IAC_ICR1_IAF57_Pos            (25U)
#define IAC_ICR1_IAF57_Msk            (0x1UL << IAC_ICR1_IAF57_Pos)              /*!< 0x02000000 */
#define IAC_ICR1_IAF57                IAC_ICR1_IAF57_Msk
#define IAC_ICR1_IAF58_Pos            (26U)
#define IAC_ICR1_IAF58_Msk            (0x1UL << IAC_ICR1_IAF58_Pos)              /*!< 0x04000000 */
#define IAC_ICR1_IAF58                IAC_ICR1_IAF58_Msk
#define IAC_ICR1_IAF59_Pos            (27U)
#define IAC_ICR1_IAF59_Msk            (0x1UL << IAC_ICR1_IAF59_Pos)              /*!< 0x08000000 */
#define IAC_ICR1_IAF59                IAC_ICR1_IAF59_Msk
#define IAC_ICR1_IAF60_Pos            (28U)
#define IAC_ICR1_IAF60_Msk            (0x1UL << IAC_ICR1_IAF60_Pos)              /*!< 0x10000000 */
#define IAC_ICR1_IAF60                IAC_ICR1_IAF60_Msk
#define IAC_ICR1_IAF61_Pos            (29U)
#define IAC_ICR1_IAF61_Msk            (0x1UL << IAC_ICR1_IAF61_Pos)              /*!< 0x20000000 */
#define IAC_ICR1_IAF61                IAC_ICR1_IAF61_Msk
#define IAC_ICR1_IAF62_Pos            (30U)
#define IAC_ICR1_IAF62_Msk            (0x1UL << IAC_ICR1_IAF62_Pos)              /*!< 0x40000000 */
#define IAC_ICR1_IAF62                IAC_ICR1_IAF62_Msk
#define IAC_ICR1_IAF63_Pos            (31U)
#define IAC_ICR1_IAF63_Msk            (0x1UL << IAC_ICR1_IAF63_Pos)              /*!< 0x80000000 */
#define IAC_ICR1_IAF63                IAC_ICR1_IAF63_Msk

/*******************  Bits definition for IAC_ICR2 register *******************/
#define IAC_ICR2_IAF64_Pos            (0U)
#define IAC_ICR2_IAF64_Msk            (0x1UL << IAC_ICR2_IAF64_Pos)              /*!< 0x00000001 */
#define IAC_ICR2_IAF64                IAC_ICR2_IAF64_Msk
#define IAC_ICR2_IAF65_Pos            (1U)
#define IAC_ICR2_IAF65_Msk            (0x1UL << IAC_ICR2_IAF65_Pos)              /*!< 0x00000002 */
#define IAC_ICR2_IAF65                IAC_ICR2_IAF65_Msk
#define IAC_ICR2_IAF66_Pos            (2U)
#define IAC_ICR2_IAF66_Msk            (0x1UL << IAC_ICR2_IAF66_Pos)              /*!< 0x00000004 */
#define IAC_ICR2_IAF66                IAC_ICR2_IAF66_Msk
#define IAC_ICR2_IAF67_Pos            (3U)
#define IAC_ICR2_IAF67_Msk            (0x1UL << IAC_ICR2_IAF67_Pos)              /*!< 0x00000008 */
#define IAC_ICR2_IAF67                IAC_ICR2_IAF67_Msk
#define IAC_ICR2_IAF68_Pos            (4U)
#define IAC_ICR2_IAF68_Msk            (0x1UL << IAC_ICR2_IAF68_Pos)              /*!< 0x00000010 */
#define IAC_ICR2_IAF68                IAC_ICR2_IAF68_Msk
#define IAC_ICR2_IAF69_Pos            (5U)
#define IAC_ICR2_IAF69_Msk            (0x1UL << IAC_ICR2_IAF69_Pos)              /*!< 0x00000020 */
#define IAC_ICR2_IAF69                IAC_ICR2_IAF69_Msk
#define IAC_ICR2_IAF70_Pos            (6U)
#define IAC_ICR2_IAF70_Msk            (0x1UL << IAC_ICR2_IAF70_Pos)              /*!< 0x00000040 */
#define IAC_ICR2_IAF70                IAC_ICR2_IAF70_Msk
#define IAC_ICR2_IAF71_Pos            (7U)
#define IAC_ICR2_IAF71_Msk            (0x1UL << IAC_ICR2_IAF71_Pos)              /*!< 0x00000080 */
#define IAC_ICR2_IAF71                 IAC_ICR2_IAF71_Msk
#define IAC_ICR2_IAF72_Pos            (8U)
#define IAC_ICR2_IAF72_Msk            (0x1UL << IAC_ICR2_IAF72_Pos)              /*!< 0x00000100 */
#define IAC_ICR2_IAF72                IAC_ICR2_IAF72_Msk
#define IAC_ICR2_IAF73_Pos            (9U)
#define IAC_ICR2_IAF73_Msk            (0x1UL << IAC_ICR2_IAF73_Pos)              /*!< 0x00000200 */
#define IAC_ICR2_IAF73                IAC_ICR2_IAF73_Msk
#define IAC_ICR2_IAF74_Pos            (10U)
#define IAC_ICR2_IAF74_Msk            (0x1UL << IAC_ICR2_IAF74_Pos)              /*!< 0x00000400 */
#define IAC_ICR2_IAF74                IAC_ICR2_IAF74_Msk
#define IAC_ICR2_IAF75_Pos            (11U)
#define IAC_ICR2_IAF75_Msk            (0x1UL << IAC_ICR2_IAF75_Pos)              /*!< 0x00000800 */
#define IAC_ICR2_IAF75                IAC_ICR2_IAF75_Msk
#define IAC_ICR2_IAF76_Pos            (12U)
#define IAC_ICR2_IAF76_Msk            (0x1UL << IAC_ICR2_IAF76_Pos)              /*!< 0x00001000 */
#define IAC_ICR2_IAF76                IAC_ICR2_IAF76_Msk
#define IAC_ICR2_IAF77_Pos            (13U)
#define IAC_ICR2_IAF77_Msk            (0x1UL << IAC_ICR2_IAF77_Pos)              /*!< 0x00002000 */
#define IAC_ICR2_IAF77                IAC_ICR2_IAF77_Msk
#define IAC_ICR2_IAF78_Pos            (14U)
#define IAC_ICR2_IAF78_Msk            (0x1UL << IAC_ICR2_IAF78_Pos)              /*!< 0x00004000 */
#define IAC_ICR2_IAF78                IAC_ICR2_IAF78_Msk
#define IAC_ICR2_IAF79_Pos            (15U)
#define IAC_ICR2_IAF79_Msk            (0x1UL << IAC_ICR2_IAF79_Pos)              /*!< 0x00008000 */
#define IAC_ICR2_IAF79                IAC_ICR2_IAF79_Msk
#define IAC_ICR2_IAF80_Pos            (16U)
#define IAC_ICR2_IAF80_Msk            (0x1UL << IAC_ICR2_IAF80_Pos)              /*!< 0x00010000 */
#define IAC_ICR2_IAF80                IAC_ICR2_IAF80_Msk
#define IAC_ICR2_IAF81_Pos            (17U)
#define IAC_ICR2_IAF81_Msk            (0x1UL << IAC_ICR2_IAF81_Pos)              /*!< 0x00020000 */
#define IAC_ICR2_IAF81                IAC_ICR2_IAF81_Msk
#define IAC_ICR2_IAF82_Pos            (18U)
#define IAC_ICR2_IAF82_Msk            (0x1UL << IAC_ICR2_IAF82_Pos)              /*!< 0x00040000 */
#define IAC_ICR2_IAF82                IAC_ICR2_IAF82_Msk
#define IAC_ICR2_IAF83_Pos            (19U)
#define IAC_ICR2_IAF83_Msk            (0x1UL << IAC_ICR2_IAF83_Pos)              /*!< 0x00080000 */
#define IAC_ICR2_IAF83                IAC_ICR2_IAF83_Msk
#define IAC_ICR2_IAF84_Pos            (20U)
#define IAC_ICR2_IAF84_Msk            (0x1UL << IAC_ICR2_IAF84_Pos)              /*!< 0x00100000 */
#define IAC_ICR2_IAF84                IAC_ICR2_IAF84_Msk
#define IAC_ICR2_IAF85_Pos            (21U)
#define IAC_ICR2_IAF85_Msk            (0x1UL << IAC_ICR2_IAF85_Pos)              /*!< 0x00200000 */
#define IAC_ICR2_IAF85                IAC_ICR2_IAF85_Msk
#define IAC_ICR2_IAF86_Pos            (22U)
#define IAC_ICR2_IAF86_Msk            (0x1UL << IAC_ICR2_IAF86_Pos)              /*!< 0x00400000 */
#define IAC_ICR2_IAF86                IAC_ICR2_IAF86_Msk
#define IAC_ICR2_IAF87_Pos            (23U)
#define IAC_ICR2_IAF87_Msk            (0x1UL << IAC_ICR2_IAF87_Pos)              /*!< 0x00800000 */
#define IAC_ICR2_IAF87                IAC_ICR2_IAF87_Msk
#define IAC_ICR2_IAF88_Pos            (24U)
#define IAC_ICR2_IAF88_Msk            (0x1UL << IAC_ICR2_IAF88_Pos)              /*!< 0x01000000 */
#define IAC_ICR2_IAF88                IAC_ICR2_IAF88_Msk
#define IAC_ICR2_IAF89_Pos            (25U)
#define IAC_ICR2_IAF89_Msk            (0x1UL << IAC_ICR2_IAF89_Pos)              /*!< 0x02000000 */
#define IAC_ICR2_IAF89                IAC_ICR2_IAF89_Msk
#define IAC_ICR2_IAF90_Pos            (26U)
#define IAC_ICR2_IAF90_Msk            (0x1UL << IAC_ICR2_IAF90_Pos)              /*!< 0x04000000 */
#define IAC_ICR2_IAF90                IAC_ICR2_IAF90_Msk
#define IAC_ICR2_IAF91_Pos            (27U)
#define IAC_ICR2_IAF91_Msk            (0x1UL << IAC_ICR2_IAF91_Pos)              /*!< 0x08000000 */
#define IAC_ICR2_IAF91                IAC_ICR2_IAF91_Msk
#define IAC_ICR2_IAF92_Pos            (28U)
#define IAC_ICR2_IAF92_Msk            (0x1UL << IAC_ICR2_IAF92_Pos)              /*!< 0x10000000 */
#define IAC_ICR2_IAF92                IAC_ICR2_IAF92_Msk
#define IAC_ICR2_IAF93_Pos            (29U)
#define IAC_ICR2_IAF93_Msk            (0x1UL << IAC_ICR2_IAF93_Pos)              /*!< 0x20000000 */
#define IAC_ICR2_IAF93                IAC_ICR2_IAF93_Msk
#define IAC_ICR2_IAF94_Pos            (30U)
#define IAC_ICR2_IAF94_Msk            (0x1UL << IAC_ICR2_IAF94_Pos)              /*!< 0x40000000 */
#define IAC_ICR2_IAF94                IAC_ICR2_IAF94_Msk
#define IAC_ICR2_IAF95_Pos            (31U)
#define IAC_ICR2_IAF95_Msk            (0x1UL << IAC_ICR2_IAF95_Pos)              /*!< 0x80000000 */
#define IAC_ICR2_IAF95                IAC_ICR2_IAF95_Msk

/*******************  Bits definition for IAC_ICR3 register *******************/
#define IAC_ICR3_IAF96_Pos            (0U)
#define IAC_ICR3_IAF96_Msk            (0x1UL << IAC_ICR3_IAF96_Pos)              /*!< 0x00000001 */
#define IAC_ICR3_IAF96                IAC_ICR3_IAF96_Msk
#define IAC_ICR3_IAF97_Pos            (1U)
#define IAC_ICR3_IAF97_Msk            (0x1UL << IAC_ICR3_IAF97_Pos)              /*!< 0x00000002 */
#define IAC_ICR3_IAF97                IAC_ICR3_IAF97_Msk
#define IAC_ICR3_IAF98_Pos            (2U)
#define IAC_ICR3_IAF98_Msk            (0x1UL << IAC_ICR3_IAF98_Pos)              /*!< 0x00000004 */
#define IAC_ICR3_IAF98                IAC_ICR3_IAF98_Msk
#define IAC_ICR3_IAF99_Pos            (3U)
#define IAC_ICR3_IAF99_Msk            (0x1UL << IAC_ICR3_IAF99_Pos)              /*!< 0x00000008 */
#define IAC_ICR3_IAF99                IAC_ICR3_IAF99_Msk
#define IAC_ICR3_IAF100_Pos           (4U)
#define IAC_ICR3_IAF100_Msk           (0x1UL << IAC_ICR3_IAF100_Pos)             /*!< 0x00000010 */
#define IAC_ICR3_IAF100               IAC_ICR3_IAF100_Msk
#define IAC_ICR3_IAF101_Pos           (5U)
#define IAC_ICR3_IAF101_Msk           (0x1UL << IAC_ICR3_IAF101_Pos)             /*!< 0x00000020 */
#define IAC_ICR3_IAF101               IAC_ICR3_IAF101_Msk
#define IAC_ICR3_IAF102_Pos           (6U)
#define IAC_ICR3_IAF102_Msk           (0x1UL << IAC_ICR3_IAF102_Pos)             /*!< 0x00000040 */
#define IAC_ICR3_IAF102               IAC_ICR3_IAF102_Msk
#define IAC_ICR3_IAF103_Pos           (7U)
#define IAC_ICR3_IAF103_Msk           (0x1UL << IAC_ICR3_IAF103_Pos)             /*!< 0x00000080 */
#define IAC_ICR3_IAF103               IAC_ICR3_IAF103_Msk
#define IAC_ICR3_IAF104_Pos           (8U)
#define IAC_ICR3_IAF104_Msk           (0x1UL << IAC_ICR3_IAF104_Pos)             /*!< 0x00000100 */
#define IAC_ICR3_IAF104               IAC_ICR3_IAF104_Msk
#define IAC_ICR3_IAF105_Pos           (9U)
#define IAC_ICR3_IAF105_Msk           (0x1UL << IAC_ICR3_IAF105_Pos)             /*!< 0x00000200 */
#define IAC_ICR3_IAF105               IAC_ICR3_IAF105_Msk
#define IAC_ICR3_IAF106_Pos           (10U)
#define IAC_ICR3_IAF106_Msk           (0x1UL << IAC_ICR3_IAF106_Pos)             /*!< 0x00000400 */
#define IAC_ICR3_IAF106               IAC_ICR3_IAF106_Msk
#define IAC_ICR3_IAF107_Pos           (11U)
#define IAC_ICR3_IAF107_Msk           (0x1UL << IAC_ICR3_IAF107_Pos)             /*!< 0x00000800 */
#define IAC_ICR3_IAF107               IAC_ICR3_IAF107_Msk
#define IAC_ICR3_IAF108_Pos           (12U)
#define IAC_ICR3_IAF108_Msk           (0x1UL << IAC_ICR3_IAF108_Pos)             /*!< 0x00001000 */
#define IAC_ICR3_IAF108               IAC_ICR3_IAF108_Msk
#define IAC_ICR3_IAF109_Pos           (13U)
#define IAC_ICR3_IAF109_Msk           (0x1UL << IAC_ICR3_IAF109_Pos)             /*!< 0x00002000 */
#define IAC_ICR3_IAF109               IAC_ICR3_IAF109_Msk
#define IAC_ICR3_IAF110_Pos           (14U)
#define IAC_ICR3_IAF110_Msk           (0x1UL << IAC_ICR3_IAF110_Pos)             /*!< 0x00004000 */
#define IAC_ICR3_IAF110               IAC_ICR3_IAF110_Msk
#define IAC_ICR3_IAF111_Pos           (15U)
#define IAC_ICR3_IAF111_Msk           (0x1UL << IAC_ICR3_IAF111_Pos)             /*!< 0x00008000 */
#define IAC_ICR3_IAF111               IAC_ICR3_IAF111_Msk
#define IAC_ICR3_IAF112_Pos           (16U)
#define IAC_ICR3_IAF112_Msk           (0x1UL << IAC_ICR3_IAF112_Pos)             /*!< 0x00010000 */
#define IAC_ICR3_IAF112               IAC_ICR3_IAF112_Msk
#define IAC_ICR3_IAF113_Pos           (17U)
#define IAC_ICR3_IAF113_Msk           (0x1UL << IAC_ICR3_IAF113_Pos)             /*!< 0x00020000 */
#define IAC_ICR3_IAF113               IAC_ICR3_IAF113_Msk
#define IAC_ICR3_IAF114_Pos           (18U)
#define IAC_ICR3_IAF114_Msk           (0x1UL << IAC_ICR3_IAF114_Pos)             /*!< 0x00040000 */
#define IAC_ICR3_IAF114               IAC_ICR3_IAF114_Msk
#define IAC_ICR3_IAF115_Pos           (19U)
#define IAC_ICR3_IAF115_Msk           (0x1UL << IAC_ICR3_IAF115_Pos)             /*!< 0x00080000 */
#define IAC_ICR3_IAF115               IAC_ICR3_IAF115_Msk
#define IAC_ICR3_IAF116_Pos           (20U)
#define IAC_ICR3_IAF116_Msk           (0x1UL << IAC_ICR3_IAF116_Pos)             /*!< 0x00100000 */
#define IAC_ICR3_IAF116               IAC_ICR3_IAF116_Msk
#define IAC_ICR3_IAF117_Pos           (21U)
#define IAC_ICR3_IAF117_Msk           (0x1UL << IAC_ICR3_IAF117_Pos)             /*!< 0x00200000 */
#define IAC_ICR3_IAF117               IAC_ICR3_IAF117_Msk
#define IAC_ICR3_IAF118_Pos           (22U)
#define IAC_ICR3_IAF118_Msk           (0x1UL << IAC_ICR3_IAF118_Pos)             /*!< 0x00400000 */
#define IAC_ICR3_IAF118               IAC_ICR3_IAF118_Msk
#define IAC_ICR3_IAF119_Pos           (23U)
#define IAC_ICR3_IAF119_Msk           (0x1UL << IAC_ICR3_IAF119_Pos)             /*!< 0x00800000 */
#define IAC_ICR3_IAF119               IAC_ICR3_IAF119_Msk
#define IAC_ICR3_IAF120_Pos           (24U)
#define IAC_ICR3_IAF120_Msk           (0x1UL << IAC_ICR3_IAF120_Pos)             /*!< 0x01000000 */
#define IAC_ICR3_IAF120               IAC_ICR3_IAF120_Msk
#define IAC_ICR3_IAF121_Pos           (25U)
#define IAC_ICR3_IAF121_Msk           (0x1UL << IAC_ICR3_IAF121_Pos)             /*!< 0x02000000 */
#define IAC_ICR3_IAF121               IAC_ICR3_IAF121_Msk
#define IAC_ICR3_IAF122_Pos           (26U)
#define IAC_ICR3_IAF122_Msk           (0x1UL << IAC_ICR3_IAF122_Pos)             /*!< 0x04000000 */
#define IAC_ICR3_IAF122               IAC_ICR3_IAF122_Msk
#define IAC_ICR3_IAF123_Pos           (27U)
#define IAC_ICR3_IAF123_Msk           (0x1UL << IAC_ICR3_IAF123_Pos)             /*!< 0x08000000 */
#define IAC_ICR3_IAF123               IAC_ICR3_IAF123_Msk
#define IAC_ICR3_IAF124_Pos           (28U)
#define IAC_ICR3_IAF124_Msk           (0x1UL << IAC_ICR3_IAF124_Pos)             /*!< 0x10000000 */
#define IAC_ICR3_IAF124               IAC_ICR3_IAF124_Msk
#define IAC_ICR3_IAF125_Pos           (29U)
#define IAC_ICR3_IAF125_Msk           (0x1UL << IAC_ICR3_IAF125_Pos)             /*!< 0x20000000 */
#define IAC_ICR3_IAF125               IAC_ICR3_IAF125_Msk
#define IAC_ICR3_IAF126_Pos           (30U)
#define IAC_ICR3_IAF126_Msk           (0x1UL << IAC_ICR3_IAF126_Pos)             /*!< 0x40000000 */
#define IAC_ICR3_IAF126               IAC_ICR3_IAF126_Msk
#define IAC_ICR3_IAF127_Pos           (31U)
#define IAC_ICR3_IAF127_Msk           (0x1UL << IAC_ICR3_IAF127_Pos)             /*!< 0x80000000 */
#define IAC_ICR3_IAF127               IAC_ICR3_IAF127_Msk

/*******************  Bits definition for IAC_ICR4 register *******************/
#define IAC_ICR4_IAF128_Pos           (0U)
#define IAC_ICR4_IAF128_Msk           (0x1UL << IAC_ICR4_IAF128_Pos)             /*!< 0x00000001 */
#define IAC_ICR4_IAF128               IAC_ICR4_IAF128_Msk
#define IAC_ICR4_IAF129_Pos           (1U)
#define IAC_ICR4_IAF129_Msk           (0x1UL << IAC_ICR4_IAF129_Pos)             /*!< 0x00000002 */
#define IAC_ICR4_IAF129               IAC_ICR4_IAF129_Msk
#define IAC_ICR4_IAF130_Pos           (2U)
#define IAC_ICR4_IAF130_Msk           (0x1UL << IAC_ICR4_IAF130_Pos)             /*!< 0x00000004 */
#define IAC_ICR4_IAF130               IAC_ICR4_IAF130_Msk
#define IAC_ICR4_IAF131_Pos           (3U)
#define IAC_ICR4_IAF131_Msk           (0x1UL << IAC_ICR4_IAF131_Pos)             /*!< 0x00000008 */
#define IAC_ICR4_IAF131               IAC_ICR4_IAF131_Msk
#define IAC_ICR4_IAF132_Pos           (4U)
#define IAC_ICR4_IAF132_Msk           (0x1UL << IAC_ICR4_IAF132_Pos)             /*!< 0x00000010 */
#define IAC_ICR4_IAF132               IAC_ICR4_IAF132_Msk
#define IAC_ICR4_IAF133_Pos           (5U)
#define IAC_ICR4_IAF133_Msk           (0x1UL << IAC_ICR4_IAF133_Pos)             /*!< 0x00000020 */
#define IAC_ICR4_IAF133               IAC_ICR4_IAF133_Msk
#define IAC_ICR4_IAF134_Pos           (6U)
#define IAC_ICR4_IAF134_Msk           (0x1UL << IAC_ICR4_IAF134_Pos)             /*!< 0x00000040 */
#define IAC_ICR4_IAF134               IAC_ICR4_IAF134_Msk
#define IAC_ICR4_IAF135_Pos           (7U)
#define IAC_ICR4_IAF135_Msk           (0x1UL << IAC_ICR4_IAF135_Pos)             /*!< 0x00000080 */
#define IAC_ICR4_IAF135               IAC_ICR4_IAF135_Msk
#define IAC_ICR4_IAF136_Pos           (8U)
#define IAC_ICR4_IAF136_Msk           (0x1UL << IAC_ICR4_IAF136_Pos)             /*!< 0x00000100 */
#define IAC_ICR4_IAF136               IAC_ICR4_IAF136_Msk
#define IAC_ICR4_IAF137_Pos           (9U)
#define IAC_ICR4_IAF137_Msk           (0x1UL << IAC_ICR4_IAF137_Pos)             /*!< 0x00000200 */
#define IAC_ICR4_IAF137               IAC_ICR4_IAF137_Msk
#define IAC_ICR4_IAF138_Pos           (10U)
#define IAC_ICR4_IAF138_Msk           (0x1UL << IAC_ICR4_IAF138_Pos)             /*!< 0x00000400 */
#define IAC_ICR4_IAF138               IAC_ICR4_IAF138_Msk
#define IAC_ICR4_IAF139_Pos           (11U)
#define IAC_ICR4_IAF139_Msk           (0x1UL << IAC_ICR4_IAF139_Pos)             /*!< 0x00000800 */
#define IAC_ICR4_IAF139               IAC_ICR4_IAF139_Msk
#define IAC_ICR4_IAF140_Pos           (12U)
#define IAC_ICR4_IAF140_Msk           (0x1UL << IAC_ICR4_IAF140_Pos)             /*!< 0x00001000 */
#define IAC_ICR4_IAF140               IAC_ICR4_IAF140_Msk
#define IAC_ICR4_IAF141_Pos           (13U)
#define IAC_ICR4_IAF141_Msk           (0x1UL << IAC_ICR4_IAF141_Pos)             /*!< 0x00002000 */
#define IAC_ICR4_IAF141               IAC_ICR4_IAF141_Msk
#define IAC_ICR4_IAF142_Pos           (14U)
#define IAC_ICR4_IAF142_Msk           (0x1UL << IAC_ICR4_IAF142_Pos)             /*!< 0x00004000 */
#define IAC_ICR4_IAF142               IAC_ICR4_IAF142_Msk
#define IAC_ICR4_IAF143_Pos           (15U)
#define IAC_ICR4_IAF143_Msk           (0x1UL << IAC_ICR4_IAF143_Pos)             /*!< 0x00008000 */
#define IAC_ICR4_IAF143               IAC_ICR4_IAF143_Msk
#define IAC_ICR4_IAF144_Pos           (16U)
#define IAC_ICR4_IAF144_Msk           (0x1UL << IAC_ICR4_IAF144_Pos)             /*!< 0x00010000 */
#define IAC_ICR4_IAF144               IAC_ICR4_IAF144_Msk
#define IAC_ICR4_IAF145_Pos           (17U)
#define IAC_ICR4_IAF145_Msk           (0x1UL << IAC_ICR4_IAF145_Pos)             /*!< 0x00020000 */
#define IAC_ICR4_IAF145               IAC_ICR4_IAF145_Msk
#define IAC_ICR4_IAF146_Pos           (18U)
#define IAC_ICR4_IAF146_Msk           (0x1UL << IAC_ICR4_IAF146_Pos)             /*!< 0x00040000 */
#define IAC_ICR4_IAF146               IAC_ICR4_IAF146_Msk
#define IAC_ICR4_IAF147_Pos           (19U)
#define IAC_ICR4_IAF147_Msk           (0x1UL << IAC_ICR4_IAF147_Pos)             /*!< 0x00080000 */
#define IAC_ICR4_IAF147               IAC_ICR4_IAF147_Msk
#define IAC_ICR4_IAF148_Pos           (20U)
#define IAC_ICR4_IAF148_Msk           (0x1UL << IAC_ICR4_IAF148_Pos)             /*!< 0x00100000 */
#define IAC_ICR4_IAF148               IAC_ICR4_IAF148_Msk
#define IAC_ICR4_IAF149_Pos           (21U)
#define IAC_ICR4_IAF149_Msk           (0x1UL << IAC_ICR4_IAF149_Pos)             /*!< 0x00200000 */
#define IAC_ICR4_IAF149               IAC_ICR4_IAF149_Msk
#define IAC_ICR4_IAF150_Pos           (22U)
#define IAC_ICR4_IAF150_Msk           (0x1UL << IAC_ICR4_IAF150_Pos)             /*!< 0x00400000 */
#define IAC_ICR4_IAF150               IAC_ICR4_IAF150_Msk
#define IAC_ICR4_IAF151_Pos           (23U)
#define IAC_ICR4_IAF151_Msk           (0x1UL << IAC_ICR4_IAF151_Pos)             /*!< 0x00800000 */
#define IAC_ICR4_IAF151               IAC_ICR4_IAF151_Msk
#define IAC_ICR4_IAF152_Pos           (24U)
#define IAC_ICR4_IAF152_Msk           (0x1UL << IAC_ICR4_IAF152_Pos)             /*!< 0x01000000 */
#define IAC_ICR4_IAF152               IAC_ICR4_IAF152_Msk
#define IAC_ICR4_IAF153_Pos           (25U)
#define IAC_ICR4_IAF153_Msk           (0x1UL << IAC_ICR4_IAF153_Pos)             /*!< 0x02000000 */
#define IAC_ICR4_IAF153               IAC_ICR4_IAF153_Msk
#define IAC_ICR4_IAF154_Pos           (26U)
#define IAC_ICR4_IAF154_Msk           (0x1UL << IAC_ICR4_IAF154_Pos)             /*!< 0x04000000 */
#define IAC_ICR4_IAF154               IAC_ICR4_IAF154_Msk
#define IAC_ICR4_IAF155_Pos           (27U)
#define IAC_ICR4_IAF155_Msk           (0x1UL << IAC_ICR4_IAF155_Pos)             /*!< 0x08000000 */
#define IAC_ICR4_IAF155               IAC_ICR4_IAF155_Msk
#define IAC_ICR4_IAF156_Pos           (28U)
#define IAC_ICR4_IAF156_Msk           (0x1UL << IAC_ICR4_IAF156_Pos)             /*!< 0x10000000 */
#define IAC_ICR4_IAF156               IAC_ICR4_IAF156_Msk
#define IAC_ICR4_IAF157_Pos           (29U)
#define IAC_ICR4_IAF157_Msk           (0x1UL << IAC_ICR4_IAF157_Pos)             /*!< 0x20000000 */
#define IAC_ICR4_IAF157               IAC_ICR4_IAF157_Msk
#define IAC_ICR4_IAF158_Pos           (30U)
#define IAC_ICR4_IAF158_Msk           (0x1UL << IAC_ICR4_IAF158_Pos)             /*!< 0x40000000 */
#define IAC_ICR4_IAF158               IAC_ICR4_IAF158_Msk
#define IAC_ICR4_IAF159_Pos           (31U)
#define IAC_ICR4_IAF159_Msk           (0x1UL << IAC_ICR4_IAF159_Pos)             /*!< 0x80000000 */
#define IAC_ICR4_IAF159               IAC_ICR4_IAF159_Msk

/*******************  Bits definition for IAC_ICR5 register *******************/
#define IAC_ICR5_IAF160_Pos           (0U)
#define IAC_ICR5_IAF160_Msk           (0x1UL << IAC_ICR5_IAF160_Pos)             /*!< 0x00000001 */
#define IAC_ICR5_IAF160               IAC_ICR5_IAF160_Msk
#define IAC_ICR5_IAF161_Pos           (1U)
#define IAC_ICR5_IAF161_Msk           (0x1UL << IAC_ICR5_IAF161_Pos)             /*!< 0x00000002 */
#define IAC_ICR5_IAF161               IAC_ICR5_IAF161_Msk
#define IAC_ICR5_IAF162_Pos           (2U)
#define IAC_ICR5_IAF162_Msk           (0x1UL << IAC_ICR5_IAF162_Pos)             /*!< 0x00000004 */
#define IAC_ICR5_IAF162               IAC_ICR5_IAF162_Msk
#define IAC_ICR5_IAF163_Pos           (3U)
#define IAC_ICR5_IAF163_Msk           (0x1UL << IAC_ICR5_IAF163_Pos)             /*!< 0x00000008 */
#define IAC_ICR5_IAF163               IAC_ICR5_IAF163_Msk
#define IAC_ICR5_IAF164_Pos           (4U)
#define IAC_ICR5_IAF164_Msk           (0x1UL << IAC_ICR5_IAF164_Pos)             /*!< 0x00000010 */
#define IAC_ICR5_IAF164               IAC_ICR5_IAF164_Msk
#define IAC_ICR5_IAF165_Pos           (5U)
#define IAC_ICR5_IAF165_Msk           (0x1UL << IAC_ICR5_IAF165_Pos)             /*!< 0x00000020 */
#define IAC_ICR5_IAF165               IAC_ICR5_IAF165_Msk
#define IAC_ICR5_IAF166_Pos           (6U)
#define IAC_ICR5_IAF166_Msk           (0x1UL << IAC_ICR5_IAF166_Pos)             /*!< 0x00000040 */
#define IAC_ICR5_IAF166               IAC_ICR5_IAF166_Msk
#define IAC_ICR5_IAF167_Pos           (7U)
#define IAC_ICR5_IAF167_Msk           (0x1UL << IAC_ICR5_IAF167_Pos)             /*!< 0x00000080 */
#define IAC_ICR5_IAF167               IAC_ICR5_IAF167_Msk
#define IAC_ICR5_IAF168_Pos           (8U)
#define IAC_ICR5_IAF168_Msk           (0x1UL << IAC_ICR5_IAF168_Pos)             /*!< 0x00000100 */
#define IAC_ICR5_IAF168               IAC_ICR5_IAF168_Msk
#define IAC_ICR5_IAF169_Pos           (9U)
#define IAC_ICR5_IAF169_Msk           (0x1UL << IAC_ICR5_IAF169_Pos)             /*!< 0x00000200 */
#define IAC_ICR5_IAF169               IAC_ICR5_IAF169_Msk
#define IAC_ICR5_IAF170_Pos           (10U)
#define IAC_ICR5_IAF170_Msk           (0x1UL << IAC_ICR5_IAF170_Pos)             /*!< 0x00000400 */
#define IAC_ICR5_IAF170               IAC_ICR5_IAF170_Msk
#define IAC_ICR5_IAF171_Pos           (11U)
#define IAC_ICR5_IAF171_Msk           (0x1UL << IAC_ICR5_IAF171_Pos)             /*!< 0x00000800 */
#define IAC_ICR5_IAF171               IAC_ICR5_IAF171_Msk
#define IAC_ICR5_IAF172_Pos           (12U)
#define IAC_ICR5_IAF172_Msk           (0x1UL << IAC_ICR5_IAF172_Pos)             /*!< 0x00001000 */
#define IAC_ICR5_IAF172               IAC_ICR5_IAF172_Msk
#define IAC_ICR5_IAF173_Pos           (13U)
#define IAC_ICR5_IAF173_Msk           (0x1UL << IAC_ICR5_IAF173_Pos)             /*!< 0x00002000 */
#define IAC_ICR5_IAF173               IAC_ICR5_IAF173_Msk
#define IAC_ICR5_IAF174_Pos           (14U)
#define IAC_ICR5_IAF174_Msk           (0x1UL << IAC_ICR5_IAF174_Pos)             /*!< 0x00004000 */
#define IAC_ICR5_IAF174               IAC_ICR5_IAF174_Msk
#define IAC_ICR5_IAF175_Pos           (15U)
#define IAC_ICR5_IAF175_Msk           (0x1UL << IAC_ICR5_IAF175_Pos)             /*!< 0x00008000 */
#define IAC_ICR5_IAF175               IAC_ICR5_IAF175_Msk
#define IAC_ICR5_IAF176_Pos           (16U)
#define IAC_ICR5_IAF176_Msk           (0x1UL << IAC_ICR5_IAF176_Pos)             /*!< 0x00010000 */
#define IAC_ICR5_IAF176               IAC_ICR5_IAF176_Msk
#define IAC_ICR5_IAF177_Pos           (17U)
#define IAC_ICR5_IAF177_Msk           (0x1UL << IAC_ICR5_IAF177_Pos)             /*!< 0x00020000 */
#define IAC_ICR5_IAF177               IAC_ICR5_IAF177_Msk
#define IAC_ICR5_IAF178_Pos           (18U)
#define IAC_ICR5_IAF178_Msk           (0x1UL << IAC_ICR5_IAF178_Pos)             /*!< 0x00040000 */
#define IAC_ICR5_IAF178               IAC_ICR5_IAF178_Msk
#define IAC_ICR5_IAF179_Pos           (19U)
#define IAC_ICR5_IAF179_Msk           (0x1UL << IAC_ICR5_IAF179_Pos)             /*!< 0x00080000 */
#define IAC_ICR5_IAF179               IAC_ICR5_IAF179_Msk
#define IAC_ICR5_IAF180_Pos           (20U)
#define IAC_ICR5_IAF180_Msk           (0x1UL << IAC_ICR5_IAF180_Pos)             /*!< 0x00100000 */
#define IAC_ICR5_IAF180               IAC_ICR5_IAF180_Msk
#define IAC_ICR5_IAF181_Pos           (21U)
#define IAC_ICR5_IAF181_Msk           (0x1UL << IAC_ICR5_IAF181_Pos)             /*!< 0x00200000 */
#define IAC_ICR5_IAF181               IAC_ICR5_IAF181_Msk
#define IAC_ICR5_IAF182_Pos           (22U)
#define IAC_ICR5_IAF182_Msk           (0x1UL << IAC_ICR5_IAF182_Pos)             /*!< 0x00400000 */
#define IAC_ICR5_IAF182               IAC_ICR5_IAF182_Msk
#define IAC_ICR5_IAF183_Pos           (23U)
#define IAC_ICR5_IAF183_Msk           (0x1UL << IAC_ICR5_IAF183_Pos)             /*!< 0x00800000 */
#define IAC_ICR5_IAF183               IAC_ICR5_IAF183_Msk
#define IAC_ICR5_IAF184_Pos           (24U)
#define IAC_ICR5_IAF184_Msk           (0x1UL << IAC_ICR5_IAF184_Pos)             /*!< 0x01000000 */
#define IAC_ICR5_IAF184               IAC_ICR5_IAF184_Msk
#define IAC_ICR5_IAF185_Pos           (25U)
#define IAC_ICR5_IAF185_Msk           (0x1UL << IAC_ICR5_IAF185_Pos)             /*!< 0x02000000 */
#define IAC_ICR5_IAF185               IAC_ICR5_IAF185_Msk
#define IAC_ICR5_IAF186_Pos           (26U)
#define IAC_ICR5_IAF186_Msk           (0x1UL << IAC_ICR5_IAF186_Pos)             /*!< 0x04000000 */
#define IAC_ICR5_IAF186               IAC_ICR5_IAF186_Msk
#define IAC_ICR5_IAF187_Pos           (27U)
#define IAC_ICR5_IAF187_Msk           (0x1UL << IAC_ICR5_IAF187_Pos)             /*!< 0x08000000 */
#define IAC_ICR5_IAF187               IAC_ICR5_IAF187_Msk
#define IAC_ICR5_IAF188_Pos           (28U)
#define IAC_ICR5_IAF188_Msk           (0x1UL << IAC_ICR5_IAF188_Pos)             /*!< 0x10000000 */
#define IAC_ICR5_IAF188               IAC_ICR5_IAF188_Msk
#define IAC_ICR5_IAF189_Pos           (29U)
#define IAC_ICR5_IAF189_Msk           (0x1UL << IAC_ICR5_IAF189_Pos)             /*!< 0x20000000 */
#define IAC_ICR5_IAF189               IAC_ICR5_IAF189_Msk
#define IAC_ICR5_IAF190_Pos           (30U)
#define IAC_ICR5_IAF190_Msk           (0x1UL << IAC_ICR5_IAF190_Pos)             /*!< 0x40000000 */
#define IAC_ICR5_IAF190               IAC_ICR5_IAF190_Msk
#define IAC_ICR5_IAF191_Pos           (31U)
#define IAC_ICR5_IAF191_Msk           (0x1UL << IAC_ICR5_IAF191_Pos)             /*!< 0x80000000 */
#define IAC_ICR5_IAF191               IAC_ICR5_IAF191_Msk

/*******************  Bits definition for IAC_VERR register *******************/
#define IAC_VERR_MINREV_Pos           (0U)
#define IAC_VERR_MINREV_Msk           (0xFUL << IAC_VERR_MINREV_Pos)             /*!< 0x0000000F */
#define IAC_VERR_MINREV               IAC_VERR_MINREV_Msk

#define IAC_VERR_MAJREV_Pos           (4U)
#define IAC_VERR_MAJREV_Msk           (0xFUL << IAC_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define IAC_VERR_MAJREV               IAC_VERR_MAJREV_Msk

/*******************  Bits definition for IAC_IPIDR register ******************/
#define IAC_IPIDR_ID_Pos              (0U)
#define IAC_IPIDR_ID_Msk              (0xFFFFFFFFUL << IAC_IPIDR_ID_Pos)         /*!< 0xFFFFFFFF */
#define IAC_IPIDR_ID                  IAC_IPIDR_ID_Msk

/*******************  Bits definition for IAC_SIDR register *******************/
#define IAC_SIDR_SID_Pos              (0U)
#define IAC_SIDR_SID_Msk              (0xFFFFFFFFUL << IAC_SIDR_SID_Pos)         /*!< 0xFFFFFFFF */
#define IAC_SIDR_SID                  IAC_SIDR_SID_Msk

/******************************************************************************/
/*                                                                            */
/*                                    RNG                                     */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for RNG_CR register  *******************/
#define RNG_CR_RNGEN_Pos            (2U)
#define RNG_CR_RNGEN_Msk            (0x1UL << RNG_CR_RNGEN_Pos)            /*!< 0x00000004 */
#define RNG_CR_RNGEN                RNG_CR_RNGEN_Msk                      /*!< True random number generator enable */
#define RNG_CR_IE_Pos               (3U)
#define RNG_CR_IE_Msk               (0x1UL << RNG_CR_IE_Pos)               /*!< 0x00000008 */
#define RNG_CR_IE                   RNG_CR_IE_Msk                         /*!< Interrupt Enable */
#define RNG_CR_CED_Pos              (5U)
#define RNG_CR_CED_Msk              (0x1UL << RNG_CR_CED_Pos)              /*!< 0x00000020 */
#define RNG_CR_CED                  RNG_CR_CED_Msk                        /*!< Clock error detection  */
#define RNG_CR_ARDIS_Pos            (7U)
#define RNG_CR_ARDIS_Msk            (0x1UL << RNG_CR_ARDIS_Pos)            /*!< 0x00000080 */
#define RNG_CR_ARDIS                RNG_CR_ARDIS_Msk                      /*!< Auto reset disable */
#define RNG_CR_NISTC_Pos            (12U)
#define RNG_CR_NISTC_Msk            (0x1UL << RNG_CR_NISTC_Pos)            /*!< 0x00001000 */
#define RNG_CR_NISTC                RNG_CR_NISTC_Msk                      /*!< NIST custom */
#define RNG_CR_CLKDIV_Pos           (16U)
#define RNG_CR_CLKDIV_Msk           (0xFUL << RNG_CR_CLKDIV_Pos)           /*!< 0x000F0000 */
#define RNG_CR_CLKDIV_0             (0x1UL << RNG_CR_CLKDIV_Pos)           /*!< 0x00010000 */
#define RNG_CR_CLKDIV_1             (0x2UL << RNG_CR_CLKDIV_Pos)           /*!< 0x00020000 */
#define RNG_CR_CLKDIV_2             (0x4UL << RNG_CR_CLKDIV_Pos)           /*!< 0x00040000 */
#define RNG_CR_CLKDIV_3             (0x8UL << RNG_CR_CLKDIV_Pos)
#define RNG_CR_CLKDIV               RNG_CR_CLKDIV_Msk                     /*!< Clock divider factor */
#define RNG_CR_CONDRST_Pos          (30U)
#define RNG_CR_CONDRST_Msk          (0x1UL << RNG_CR_CONDRST_Pos)          /*!< 0x40000000 */
#define RNG_CR_CONDRST              RNG_CR_CONDRST_Msk                    /*!< Conditioning soft reset */
#define RNG_CR_CONFIGLOCK_Pos       (31U)
#define RNG_CR_CONFIGLOCK_Msk       (0x1UL << RNG_CR_CONFIGLOCK_Pos)       /*!< 0x80000000 */
#define RNG_CR_CONFIGLOCK           RNG_CR_CONFIGLOCK_Msk                 /*!< RNG config lock */

#define RNG_CR_RNG_CONFIG1_Pos      (20U)
#define RNG_CR_RNG_CONFIG1_Msk      (0xFFUL << RNG_CR_RNG_CONFIG1_Pos)    /*!< 0x0FF00000 */
#define RNG_CR_RNG_CONFIG1          RNG_CR_RNG_CONFIG1_Msk                /*!< RNG CONFIG1 */
#define RNG_CR_RNG_CONFIG2_Pos      (13U)
#define RNG_CR_RNG_CONFIG2_Msk      (0x7UL << RNG_CR_RNG_CONFIG2_Pos)     /*!< 0x0000E000 */
#define RNG_CR_RNG_CONFIG2          RNG_CR_RNG_CONFIG2_Msk                /*!< RNG CONFIG2 */
#define RNG_CR_RNG_CONFIG3_Pos      (8U)
#define RNG_CR_RNG_CONFIG3_Msk      (0xFUL << RNG_CR_RNG_CONFIG3_Pos)     /*!< 0x00000F00 */
#define RNG_CR_RNG_CONFIG3          RNG_CR_RNG_CONFIG3_Msk                /*!< RNG CONFIG3 */

/*****************  Bit definition for RNG_SR register  ******************/
#define RNG_SR_DRDY_Pos             (0U)
#define RNG_SR_DRDY_Msk             (0x1UL << RNG_SR_DRDY_Pos)             /*!< 0x00000001 */
#define RNG_SR_DRDY                 RNG_SR_DRDY_Msk                       /*!< Data Ready */
#define RNG_SR_CECS_Pos             (1U)
#define RNG_SR_CECS_Msk             (0x1UL << RNG_SR_CECS_Pos)             /*!< 0x00000002 */
#define RNG_SR_CECS                 RNG_SR_CECS_Msk                       /*!< Clock error current status */
#define RNG_SR_SECS_Pos             (2U)
#define RNG_SR_SECS_Msk             (0x1UL << RNG_SR_SECS_Pos)             /*!< 0x00000004 */
#define RNG_SR_SECS                 RNG_SR_SECS_Msk                       /*!< Seed error current status */
#define RNG_SR_BUSY_Pos             (4U)
#define RNG_SR_BUSY_Msk             (0x1UL << RNG_SR_BUSY_Pos)             /*!< 0x00000010 */
#define RNG_SR_BUSY                 RNG_SR_BUSY_Msk                       /*!< Busy */
#define RNG_SR_CEIS_Pos             (5U)
#define RNG_SR_CEIS_Msk             (0x1UL << RNG_SR_CEIS_Pos)             /*!< 0x00000020 */
#define RNG_SR_CEIS                 RNG_SR_CEIS_Msk                       /*!< Clock error interrupt status */
#define RNG_SR_SEIS_Pos             (6U)
#define RNG_SR_SEIS_Msk             (0x1UL << RNG_SR_SEIS_Pos)             /*!< 0x00000040 */
#define RNG_SR_SEIS                 RNG_SR_SEIS_Msk                       /*!< Seed error interrupt status */

/****************  Bit definition for RNG_NSCR register  *****************/
#define RNG_NSCR_EN_OSC1_Pos        (0U)
#define RNG_NSCR_EN_OSC1_Msk        (0x7UL << RNG_NSCR_EN_OSC1_Pos)        /*!< 0x00000007 */
#define RNG_NSCR_EN_OSC1            RNG_NSCR_EN_OSC1_Msk                  /*!< None */
#define RNG_NSCR_EN_OSC2_Pos        (3U)
#define RNG_NSCR_EN_OSC2_Msk        (0x7UL << RNG_NSCR_EN_OSC2_Pos)        /*!< 0x00000038 */
#define RNG_NSCR_EN_OSC2            RNG_NSCR_EN_OSC2_Msk                  /*!< None */
#define RNG_NSCR_EN_OSC3_Pos        (6U)
#define RNG_NSCR_EN_OSC3_Msk        (0x7UL << RNG_NSCR_EN_OSC3_Pos)        /*!< 0x000001C0 */
#define RNG_NSCR_EN_OSC3            RNG_NSCR_EN_OSC3_Msk                  /*!< None */

/****************  Bit definition for RNG_HTCR0 register  ****************/
#define RNG_HTCR0_HTCFG_Pos         (0U)
#define RNG_HTCR0_HTCFG_Msk         (0xFFFFFFFFUL << RNG_HTCR0_HTCFG_Pos)  /*!< 0xFFFFFFFF */
#define RNG_HTCR0_HTCFG             RNG_HTCR0_HTCFG_Msk                   /*!< health test configuration */

/****************  Bit definition for RNG_HTCR1 register  ****************/
#define RNG_HTCR1_HTCFG_Pos         (0U)
#define RNG_HTCR1_HTCFG_Msk         (0xFFFFFFFFUL << RNG_HTCR1_HTCFG_Pos)  /*!< 0xFFFFFFFF */
#define RNG_HTCR1_HTCFG             RNG_HTCR1_HTCFG_Msk                   /*!< health test configuration */

/****************  Bit definition for RNG_HTCR2 register  ****************/
#define RNG_HTCR2_HTCFG_Pos         (0U)
#define RNG_HTCR2_HTCFG_Msk         (0xFFFFFFFFUL << RNG_HTCR2_HTCFG_Pos)  /*!< 0xFFFFFFFF */
#define RNG_HTCR2_HTCFG             RNG_HTCR2_HTCFG_Msk                   /*!< health test configuration */

/****************  Bit definition for RNG_HTCR3 register  ****************/
#define RNG_HTCR3_HTCFG_Pos         (0U)
#define RNG_HTCR3_HTCFG_Msk         (0xFFFFFFFFUL << RNG_HTCR3_HTCFG_Pos)  /*!< 0xFFFFFFFF */
#define RNG_HTCR3_HTCFG             RNG_HTCR3_HTCFG_Msk                   /*!< health test configuration */

/***************  Bit definition for RNG_HWCFGR register  ****************/
#define RNG_HWCFGR_CFG1_Pos         (0U)
#define RNG_HWCFGR_CFG1_Msk         (0xFFUL << RNG_HWCFGR_CFG1_Pos)        /*!< 0x000000FF */
#define RNG_HWCFGR_CFG1             RNG_HWCFGR_CFG1_Msk                   /*!< HW Generic 1 */
#define RNG_HWCFGR_CFG2_Pos         (8U)
#define RNG_HWCFGR_CFG2_Msk         (0xFFUL << RNG_HWCFGR_CFG2_Pos)        /*!< 0x0000FF00 */
#define RNG_HWCFGR_CFG2             RNG_HWCFGR_CFG2_Msk                   /*!< HW Generic 2 */
#define RNG_HWCFGR_CFG3_Pos         (16U)
#define RNG_HWCFGR_CFG3_Msk         (0xFFUL << RNG_HWCFGR_CFG3_Pos)        /*!< 0x00FF0000 */
#define RNG_HWCFGR_CFG3             RNG_HWCFGR_CFG3_Msk                   /*!< HW Generic 3 */

/****************  Bit definition for RNG_VERR register  *****************/
#define RNG_VERR_MINREV_Pos         (0U)
#define RNG_VERR_MINREV_Msk         (0xFUL << RNG_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define RNG_VERR_MINREV             RNG_VERR_MINREV_Msk                   /*!< Minor revision */
#define RNG_VERR_MAJREV_Pos         (4U)
#define RNG_VERR_MAJREV_Msk         (0xFUL << RNG_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define RNG_VERR_MAJREV             RNG_VERR_MAJREV_Msk                   /*!< Major revision */

/****************  Bit definition for RNG_IPIDR register  ****************/
#define RNG_IPIDR_ID_Pos            (0U)
#define RNG_IPIDR_ID_Msk            (0xFFFFFFFFUL << RNG_IPIDR_ID_Pos)     /*!< 0xFFFFFFFF */
#define RNG_IPIDR_ID                RNG_IPIDR_ID_Msk                      /*!< Identification code of the peripheral */

/****************  Bit definition for RNG_SIDR register  *****************/
#define RNG_SIDR_SID_Pos            (0U)
#define RNG_SIDR_SID_Msk            (0xFFFFFFFFUL << RNG_SIDR_SID_Pos)     /*!< 0xFFFFFFFF */
#define RNG_SIDR_SID                RNG_SIDR_SID_Msk                      /*!< Size identification code */

/******************************************************************************/
/*                                                                            */
/*                           Real-Time Clock (RTC)                            */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for RTC_TR register  *******************/
#define RTC_TR_SU_Pos                (0U)
#define RTC_TR_SU_Msk                (0xFUL << RTC_TR_SU_Pos)                            /*!< 0x0000000F */
#define RTC_TR_SU                    RTC_TR_SU_Msk
#define RTC_TR_SU_0                  (0x1UL << RTC_TR_SU_Pos)                            /*!< 0x00000001 */
#define RTC_TR_SU_1                  (0x2UL << RTC_TR_SU_Pos)                            /*!< 0x00000002 */
#define RTC_TR_SU_2                  (0x4UL << RTC_TR_SU_Pos)                            /*!< 0x00000004 */
#define RTC_TR_SU_3                  (0x8UL << RTC_TR_SU_Pos)                            /*!< 0x00000008 */
#define RTC_TR_ST_Pos                (4U)
#define RTC_TR_ST_Msk                (0x7UL << RTC_TR_ST_Pos)                            /*!< 0x00000070 */
#define RTC_TR_ST                    RTC_TR_ST_Msk
#define RTC_TR_ST_0                  (0x1UL << RTC_TR_ST_Pos)                            /*!< 0x00000010 */
#define RTC_TR_ST_1                  (0x2UL << RTC_TR_ST_Pos)                            /*!< 0x00000020 */
#define RTC_TR_ST_2                  (0x4UL << RTC_TR_ST_Pos)                            /*!< 0x00000040 */
#define RTC_TR_MNU_Pos               (8U)
#define RTC_TR_MNU_Msk               (0xFUL << RTC_TR_MNU_Pos)                           /*!< 0x00000F00 */
#define RTC_TR_MNU                   RTC_TR_MNU_Msk
#define RTC_TR_MNU_0                 (0x1UL << RTC_TR_MNU_Pos)                           /*!< 0x00000100 */
#define RTC_TR_MNU_1                 (0x2UL << RTC_TR_MNU_Pos)                           /*!< 0x00000200 */
#define RTC_TR_MNU_2                 (0x4UL << RTC_TR_MNU_Pos)                           /*!< 0x00000400 */
#define RTC_TR_MNU_3                 (0x8UL << RTC_TR_MNU_Pos)                           /*!< 0x00000800 */
#define RTC_TR_MNT_Pos               (12U)
#define RTC_TR_MNT_Msk               (0x7UL << RTC_TR_MNT_Pos)                           /*!< 0x00007000 */
#define RTC_TR_MNT                   RTC_TR_MNT_Msk
#define RTC_TR_MNT_0                 (0x1UL << RTC_TR_MNT_Pos)                           /*!< 0x00001000 */
#define RTC_TR_MNT_1                 (0x2UL << RTC_TR_MNT_Pos)                           /*!< 0x00002000 */
#define RTC_TR_MNT_2                 (0x4UL << RTC_TR_MNT_Pos)                           /*!< 0x00004000 */
#define RTC_TR_HU_Pos                (16U)
#define RTC_TR_HU_Msk                (0xFUL << RTC_TR_HU_Pos)                            /*!< 0x000F0000 */
#define RTC_TR_HU                    RTC_TR_HU_Msk
#define RTC_TR_HU_0                  (0x1UL << RTC_TR_HU_Pos)                            /*!< 0x00010000 */
#define RTC_TR_HU_1                  (0x2UL << RTC_TR_HU_Pos)                            /*!< 0x00020000 */
#define RTC_TR_HU_2                  (0x4UL << RTC_TR_HU_Pos)                            /*!< 0x00040000 */
#define RTC_TR_HU_3                  (0x8UL << RTC_TR_HU_Pos)                            /*!< 0x00080000 */
#define RTC_TR_HT_Pos                (20U)
#define RTC_TR_HT_Msk                (0x3UL << RTC_TR_HT_Pos)                            /*!< 0x00300000 */
#define RTC_TR_HT                    RTC_TR_HT_Msk
#define RTC_TR_HT_0                  (0x1UL << RTC_TR_HT_Pos)                            /*!< 0x00100000 */
#define RTC_TR_HT_1                  (0x2UL << RTC_TR_HT_Pos)                            /*!< 0x00200000 */
#define RTC_TR_PM_Pos                (22U)
#define RTC_TR_PM_Msk                (0x1UL << RTC_TR_PM_Pos)                            /*!< 0x00400000 */
#define RTC_TR_PM                    RTC_TR_PM_Msk

/********************  Bits definition for RTC_DR register  *******************/
#define RTC_DR_DU_Pos                (0U)
#define RTC_DR_DU_Msk                (0xFUL << RTC_DR_DU_Pos)                            /*!< 0x0000000F */
#define RTC_DR_DU                    RTC_DR_DU_Msk
#define RTC_DR_DU_0                  (0x1UL << RTC_DR_DU_Pos)                            /*!< 0x00000001 */
#define RTC_DR_DU_1                  (0x2UL << RTC_DR_DU_Pos)                            /*!< 0x00000002 */
#define RTC_DR_DU_2                  (0x4UL << RTC_DR_DU_Pos)                            /*!< 0x00000004 */
#define RTC_DR_DU_3                  (0x8UL << RTC_DR_DU_Pos)                            /*!< 0x00000008 */
#define RTC_DR_DT_Pos                (4U)
#define RTC_DR_DT_Msk                (0x3UL << RTC_DR_DT_Pos)                            /*!< 0x00000030 */
#define RTC_DR_DT                    RTC_DR_DT_Msk
#define RTC_DR_DT_0                  (0x1UL << RTC_DR_DT_Pos)                            /*!< 0x00000010 */
#define RTC_DR_DT_1                  (0x2UL << RTC_DR_DT_Pos)                            /*!< 0x00000020 */
#define RTC_DR_MU_Pos                (8U)
#define RTC_DR_MU_Msk                (0xFUL << RTC_DR_MU_Pos)                            /*!< 0x00000F00 */
#define RTC_DR_MU                    RTC_DR_MU_Msk
#define RTC_DR_MU_0                  (0x1UL << RTC_DR_MU_Pos)                            /*!< 0x00000100 */
#define RTC_DR_MU_1                  (0x2UL << RTC_DR_MU_Pos)                            /*!< 0x00000200 */
#define RTC_DR_MU_2                  (0x4UL << RTC_DR_MU_Pos)                            /*!< 0x00000400 */
#define RTC_DR_MU_3                  (0x8UL << RTC_DR_MU_Pos)                            /*!< 0x00000800 */
#define RTC_DR_MT_Pos                (12U)
#define RTC_DR_MT_Msk                (0x1UL << RTC_DR_MT_Pos)                            /*!< 0x00001000 */
#define RTC_DR_MT                    RTC_DR_MT_Msk
#define RTC_DR_WDU_Pos               (13U)
#define RTC_DR_WDU_Msk               (0x7UL << RTC_DR_WDU_Pos)                           /*!< 0x0000E000 */
#define RTC_DR_WDU                   RTC_DR_WDU_Msk
#define RTC_DR_WDU_0                 (0x1UL << RTC_DR_WDU_Pos)                           /*!< 0x00002000 */
#define RTC_DR_WDU_1                 (0x2UL << RTC_DR_WDU_Pos)                           /*!< 0x00004000 */
#define RTC_DR_WDU_2                 (0x4UL << RTC_DR_WDU_Pos)                           /*!< 0x00008000 */
#define RTC_DR_YU_Pos                (16U)
#define RTC_DR_YU_Msk                (0xFUL << RTC_DR_YU_Pos)                            /*!< 0x000F0000 */
#define RTC_DR_YU                    RTC_DR_YU_Msk
#define RTC_DR_YU_0                  (0x1UL << RTC_DR_YU_Pos)                            /*!< 0x00010000 */
#define RTC_DR_YU_1                  (0x2UL << RTC_DR_YU_Pos)                            /*!< 0x00020000 */
#define RTC_DR_YU_2                  (0x4UL << RTC_DR_YU_Pos)                            /*!< 0x00040000 */
#define RTC_DR_YU_3                  (0x8UL << RTC_DR_YU_Pos)                            /*!< 0x00080000 */
#define RTC_DR_YT_Pos                (20U)
#define RTC_DR_YT_Msk                (0xFUL << RTC_DR_YT_Pos)                            /*!< 0x00F00000 */
#define RTC_DR_YT                    RTC_DR_YT_Msk
#define RTC_DR_YT_0                  (0x1UL << RTC_DR_YT_Pos)                            /*!< 0x00100000 */
#define RTC_DR_YT_1                  (0x2UL << RTC_DR_YT_Pos)                            /*!< 0x00200000 */
#define RTC_DR_YT_2                  (0x4UL << RTC_DR_YT_Pos)                            /*!< 0x00400000 */
#define RTC_DR_YT_3                  (0x8UL << RTC_DR_YT_Pos)                            /*!< 0x00800000 */

/********************  Bits definition for RTC_SSR register  ******************/
#define RTC_SSR_SS_Pos               (0U)
#define RTC_SSR_SS_Msk               (0xFFFFFFFFUL << RTC_SSR_SS_Pos)                        /*!< 0xFFFFFFFF */
#define RTC_SSR_SS                   RTC_SSR_SS_Msk

/********************  Bits definition for RTC_ICSR register  ******************/
#define RTC_ICSR_WUTWF_Pos           (2U)
#define RTC_ICSR_WUTWF_Msk           (0x1UL << RTC_ICSR_WUTWF_Pos)             /*!< 0x00000004 */
#define RTC_ICSR_WUTWF               RTC_ICSR_WUTWF_Msk
#define RTC_ICSR_SHPF_Pos            (3U)
#define RTC_ICSR_SHPF_Msk            (0x1UL << RTC_ICSR_SHPF_Pos)              /*!< 0x00000008 */
#define RTC_ICSR_SHPF                RTC_ICSR_SHPF_Msk
#define RTC_ICSR_INITS_Pos           (4U)
#define RTC_ICSR_INITS_Msk           (0x1UL << RTC_ICSR_INITS_Pos)             /*!< 0x00000010 */
#define RTC_ICSR_INITS               RTC_ICSR_INITS_Msk
#define RTC_ICSR_RSF_Pos             (5U)
#define RTC_ICSR_RSF_Msk             (0x1UL << RTC_ICSR_RSF_Pos)               /*!< 0x00000020 */
#define RTC_ICSR_RSF                 RTC_ICSR_RSF_Msk
#define RTC_ICSR_INITF_Pos           (6U)
#define RTC_ICSR_INITF_Msk           (0x1UL << RTC_ICSR_INITF_Pos)             /*!< 0x00000040 */
#define RTC_ICSR_INITF               RTC_ICSR_INITF_Msk
#define RTC_ICSR_INIT_Pos            (7U)
#define RTC_ICSR_INIT_Msk            (0x1UL << RTC_ICSR_INIT_Pos)              /*!< 0x00000080 */
#define RTC_ICSR_INIT                RTC_ICSR_INIT_Msk
#define RTC_ICSR_BIN_Pos             (8U)
#define RTC_ICSR_BIN_Msk             (0x3UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000300 */
#define RTC_ICSR_BIN                 RTC_ICSR_BIN_Msk
#define RTC_ICSR_BIN_0               (0x1UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000100 */
#define RTC_ICSR_BIN_1               (0x2UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000200 */
#define RTC_ICSR_BCDU_Pos            (10U)
#define RTC_ICSR_BCDU_Msk            (0x7UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001C00 */
#define RTC_ICSR_BCDU                RTC_ICSR_BCDU_Msk
#define RTC_ICSR_BCDU_0              (0x1UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000400 */
#define RTC_ICSR_BCDU_1              (0x2UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000800 */
#define RTC_ICSR_BCDU_2              (0x4UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001000 */
#define RTC_ICSR_RECALPF_Pos         (16U)
#define RTC_ICSR_RECALPF_Msk         (0x1UL << RTC_ICSR_RECALPF_Pos)           /*!< 0x00010000 */
#define RTC_ICSR_RECALPF             RTC_ICSR_RECALPF_Msk

/********************  Bits definition for RTC_PRER register  *****************/
#define RTC_PRER_PREDIV_S_Pos        (0U)
#define RTC_PRER_PREDIV_S_Msk        (0x7FFFUL << RTC_PRER_PREDIV_S_Pos)                 /*!< 0x00007FFF */
#define RTC_PRER_PREDIV_S            RTC_PRER_PREDIV_S_Msk
#define RTC_PRER_PREDIV_A_Pos        (16U)
#define RTC_PRER_PREDIV_A_Msk        (0x7FUL << RTC_PRER_PREDIV_A_Pos)                   /*!< 0x007F0000 */
#define RTC_PRER_PREDIV_A            RTC_PRER_PREDIV_A_Msk

/********************  Bits definition for RTC_WUTR register  *****************/
#define RTC_WUTR_WUT_Pos             (0U)
#define RTC_WUTR_WUT_Msk             (0xFFFFUL << RTC_WUTR_WUT_Pos)                      /*!< 0x0000FFFF */
#define RTC_WUTR_WUT                 RTC_WUTR_WUT_Msk
#define RTC_WUTR_WUTOCLR_Pos         (16U)
#define RTC_WUTR_WUTOCLR_Msk         (0xFFFFUL << RTC_WUTR_WUTOCLR_Pos)                  /*!< 0x0000FFFF */
#define RTC_WUTR_WUTOCLR             RTC_WUTR_WUTOCLR_Msk

/********************  Bits definition for RTC_CR register  *******************/
#define RTC_CR_WUCKSEL_Pos           (0U)
#define RTC_CR_WUCKSEL_Msk           (0x7UL << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000007 */
#define RTC_CR_WUCKSEL               RTC_CR_WUCKSEL_Msk
#define RTC_CR_WUCKSEL_0             (0x1UL << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000001 */
#define RTC_CR_WUCKSEL_1             (0x2UL << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000002 */
#define RTC_CR_WUCKSEL_2             (0x4UL << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000004 */
#define RTC_CR_TSEDGE_Pos            (3U)
#define RTC_CR_TSEDGE_Msk            (0x1UL << RTC_CR_TSEDGE_Pos)                        /*!< 0x00000008 */
#define RTC_CR_TSEDGE                RTC_CR_TSEDGE_Msk
#define RTC_CR_REFCKON_Pos           (4U)
#define RTC_CR_REFCKON_Msk           (0x1UL << RTC_CR_REFCKON_Pos)                       /*!< 0x00000010 */
#define RTC_CR_REFCKON               RTC_CR_REFCKON_Msk
#define RTC_CR_BYPSHAD_Pos           (5U)
#define RTC_CR_BYPSHAD_Msk           (0x1UL << RTC_CR_BYPSHAD_Pos)                       /*!< 0x00000020 */
#define RTC_CR_BYPSHAD               RTC_CR_BYPSHAD_Msk
#define RTC_CR_FMT_Pos               (6U)
#define RTC_CR_FMT_Msk               (0x1UL << RTC_CR_FMT_Pos)                           /*!< 0x00000040 */
#define RTC_CR_FMT                   RTC_CR_FMT_Msk
#define RTC_CR_SSRUIE_Pos            (7U)
#define RTC_CR_SSRUIE_Msk            (0x1UL << RTC_CR_SSRUIE_Pos)                      /*!< 0x00000080 */
#define RTC_CR_SSRUIE                RTC_CR_SSRUIE_Msk
#define RTC_CR_ALRAE_Pos             (8U)
#define RTC_CR_ALRAE_Msk             (0x1UL << RTC_CR_ALRAE_Pos)                         /*!< 0x00000100 */
#define RTC_CR_ALRAE                 RTC_CR_ALRAE_Msk
#define RTC_CR_ALRBE_Pos             (9U)
#define RTC_CR_ALRBE_Msk             (0x1UL << RTC_CR_ALRBE_Pos)                         /*!< 0x00000200 */
#define RTC_CR_ALRBE                 RTC_CR_ALRBE_Msk
#define RTC_CR_WUTE_Pos              (10U)
#define RTC_CR_WUTE_Msk              (0x1UL << RTC_CR_WUTE_Pos)                          /*!< 0x00000400 */
#define RTC_CR_WUTE                  RTC_CR_WUTE_Msk
#define RTC_CR_TSE_Pos               (11U)
#define RTC_CR_TSE_Msk               (0x1UL << RTC_CR_TSE_Pos)                           /*!< 0x00000800 */
#define RTC_CR_TSE                   RTC_CR_TSE_Msk
#define RTC_CR_ALRAIE_Pos            (12U)
#define RTC_CR_ALRAIE_Msk            (0x1UL << RTC_CR_ALRAIE_Pos)                        /*!< 0x00001000 */
#define RTC_CR_ALRAIE                RTC_CR_ALRAIE_Msk
#define RTC_CR_ALRBIE_Pos            (13U)
#define RTC_CR_ALRBIE_Msk            (0x1UL << RTC_CR_ALRBIE_Pos)                        /*!< 0x00002000 */
#define RTC_CR_ALRBIE                RTC_CR_ALRBIE_Msk
#define RTC_CR_WUTIE_Pos             (14U)
#define RTC_CR_WUTIE_Msk             (0x1UL << RTC_CR_WUTIE_Pos)                         /*!< 0x00004000 */
#define RTC_CR_WUTIE                 RTC_CR_WUTIE_Msk
#define RTC_CR_TSIE_Pos              (15U)
#define RTC_CR_TSIE_Msk              (0x1UL << RTC_CR_TSIE_Pos)                          /*!< 0x00008000 */
#define RTC_CR_TSIE                  RTC_CR_TSIE_Msk
#define RTC_CR_ADD1H_Pos             (16U)
#define RTC_CR_ADD1H_Msk             (0x1UL << RTC_CR_ADD1H_Pos)                         /*!< 0x00010000 */
#define RTC_CR_ADD1H                 RTC_CR_ADD1H_Msk
#define RTC_CR_SUB1H_Pos             (17U)
#define RTC_CR_SUB1H_Msk             (0x1UL << RTC_CR_SUB1H_Pos)                         /*!< 0x00020000 */
#define RTC_CR_SUB1H                 RTC_CR_SUB1H_Msk
#define RTC_CR_BKP_Pos               (18U)
#define RTC_CR_BKP_Msk               (0x1UL << RTC_CR_BKP_Pos)                           /*!< 0x00040000 */
#define RTC_CR_BKP                   RTC_CR_BKP_Msk
#define RTC_CR_COSEL_Pos             (19U)
#define RTC_CR_COSEL_Msk             (0x1UL << RTC_CR_COSEL_Pos)                         /*!< 0x00080000 */
#define RTC_CR_COSEL                 RTC_CR_COSEL_Msk
#define RTC_CR_POL_Pos               (20U)
#define RTC_CR_POL_Msk               (0x1UL << RTC_CR_POL_Pos)                           /*!< 0x00100000 */
#define RTC_CR_POL                   RTC_CR_POL_Msk
#define RTC_CR_OSEL_Pos              (21U)
#define RTC_CR_OSEL_Msk              (0x3UL << RTC_CR_OSEL_Pos)                          /*!< 0x00600000 */
#define RTC_CR_OSEL                  RTC_CR_OSEL_Msk
#define RTC_CR_OSEL_0                (0x1UL << RTC_CR_OSEL_Pos)                          /*!< 0x00200000 */
#define RTC_CR_OSEL_1                (0x2UL << RTC_CR_OSEL_Pos)                          /*!< 0x00400000 */
#define RTC_CR_COE_Pos               (23U)
#define RTC_CR_COE_Msk               (0x1UL << RTC_CR_COE_Pos)                           /*!< 0x00800000 */
#define RTC_CR_COE                   RTC_CR_COE_Msk
#define RTC_CR_ITSE_Pos              (24U)
#define RTC_CR_ITSE_Msk              (0x1UL << RTC_CR_ITSE_Pos)                          /*!< 0x01000000 */
#define RTC_CR_ITSE                  RTC_CR_ITSE_Msk                                    /*!<Timestamp on internal event enable  */
#define RTC_CR_TAMPTS_Pos            (25U)
#define RTC_CR_TAMPTS_Msk            (0x1UL << RTC_CR_TAMPTS_Pos)                        /*!< 0x02000000 */
#define RTC_CR_TAMPTS                RTC_CR_TAMPTS_Msk                                  /*!<Activate timestamp on tamper detection event  */
#define RTC_CR_TAMPOE_Pos            (26U)
#define RTC_CR_TAMPOE_Msk            (0x1UL << RTC_CR_TAMPOE_Pos)                        /*!< 0x04000000 */
#define RTC_CR_TAMPOE                RTC_CR_TAMPOE_Msk                                  /*!<Tamper detection output enable on TAMPALARM  */
#define RTC_CR_ALRACLR_Pos           (27U)
#define RTC_CR_ALRACLR_Msk           (0x1UL << RTC_CR_ALRACLR_Pos)                       /*!< 0x8000000 */
#define RTC_CR_ALRACLR               RTC_CR_ALRACLR_Msk                                 /*!<Alarm A mask */
#define RTC_CR_ALRBCLR_Pos           (28U)
#define RTC_CR_ALRBCLR_Msk           (0x1UL << RTC_CR_ALRBCLR_Pos)                       /*!< 0x10000000 */
#define RTC_CR_ALRBCLR               RTC_CR_ALRBCLR_Msk                                 /*!<Alarm B mask */
#define RTC_CR_TAMPALRM_PU_Pos       (29U)
#define RTC_CR_TAMPALRM_PU_Msk       (0x1UL << RTC_CR_TAMPALRM_PU_Pos)                   /*!< 0x20000000 */
#define RTC_CR_TAMPALRM_PU           RTC_CR_TAMPALRM_PU_Msk                             /*!<TAMPALARM output pull-up config */
#define RTC_CR_TAMPALRM_TYPE_Pos     (30U)
#define RTC_CR_TAMPALRM_TYPE_Msk     (0x1UL << RTC_CR_TAMPALRM_TYPE_Pos)                 /*!< 0x40000000 */
#define RTC_CR_TAMPALRM_TYPE         RTC_CR_TAMPALRM_TYPE_Msk                           /*!<TAMPALARM output type  */
#define RTC_CR_OUT2EN_Pos            (31U)
#define RTC_CR_OUT2EN_Msk            (0x1UL << RTC_CR_OUT2EN_Pos)                        /*!< 0x80000000 */
#define RTC_CR_OUT2EN                RTC_CR_OUT2EN_Msk                                  /*!<RTC_OUT2 output enable */

/********************  Bits definition for RTC_PRIVCR register  *****************/
#define RTC_PRIVCR_ALRAPRIV_Pos      (0U)
#define RTC_PRIVCR_ALRAPRIV_Msk      (0x1UL << RTC_PRIVCR_ALRAPRIV_Pos)                  /*!< 0x00000001 */
#define RTC_PRIVCR_ALRAPRIV          RTC_PRIVCR_ALRAPRIV_Msk
#define RTC_PRIVCR_ALRBPRIV_Pos      (1U)
#define RTC_PRIVCR_ALRBPRIV_Msk      (0x1UL << RTC_PRIVCR_ALRBPRIV_Pos)                  /*!< 0x00000002 */
#define RTC_PRIVCR_ALRBPRIV          RTC_PRIVCR_ALRBPRIV_Msk
#define RTC_PRIVCR_WUTPRIV_Pos       (2U)
#define RTC_PRIVCR_WUTPRIV_Msk       (0x1UL << RTC_PRIVCR_WUTPRIV_Pos)                   /*!< 0x00000004 */
#define RTC_PRIVCR_WUTPRIV           RTC_PRIVCR_WUTPRIV_Msk
#define RTC_PRIVCR_TSPRIV_Pos        (3U)
#define RTC_PRIVCR_TSPRIV_Msk        (0x1UL << RTC_PRIVCR_TSPRIV_Pos)                    /*!< 0x00000008 */
#define RTC_PRIVCR_TSPRIV            RTC_PRIVCR_TSPRIV_Msk
#define RTC_PRIVCR_CALPRIV_Pos       (13U)
#define RTC_PRIVCR_CALPRIV_Msk       (0x1UL << RTC_PRIVCR_CALPRIV_Pos)                   /*!< 0x00002000 */
#define RTC_PRIVCR_CALPRIV           RTC_PRIVCR_CALPRIV_Msk
#define RTC_PRIVCR_INITPRIV_Pos      (14U)
#define RTC_PRIVCR_INITPRIV_Msk      (0x1UL << RTC_PRIVCR_INITPRIV_Pos)                  /*!< 0x00004000 */
#define RTC_PRIVCR_INITPRIV          RTC_PRIVCR_INITPRIV_Msk
#define RTC_PRIVCR_PRIV_Pos          (15U)
#define RTC_PRIVCR_PRIV_Msk          (0x1UL << RTC_PRIVCR_PRIV_Pos)                      /*!< 0x00008000 */
#define RTC_PRIVCR_PRIV              RTC_PRIVCR_PRIV_Msk

/********************  Bits definition for RTC_SECCFGR register  ******************/
#define RTC_SECCFGR_ALRASEC_Pos       (0U)
#define RTC_SECCFGR_ALRASEC_Msk       (0x1UL << RTC_SECCFGR_ALRASEC_Pos)                   /*!< 0x00000001 */
#define RTC_SECCFGR_ALRASEC           RTC_SECCFGR_ALRASEC_Msk
#define RTC_SECCFGR_ALRBSEC_Pos       (1U)
#define RTC_SECCFGR_ALRBSEC_Msk       (0x1UL << RTC_SECCFGR_ALRBSEC_Pos)                   /*!< 0x00000002 */
#define RTC_SECCFGR_ALRBSEC           RTC_SECCFGR_ALRBSEC_Msk
#define RTC_SECCFGR_WUTSEC_Pos        (2U)
#define RTC_SECCFGR_WUTSEC_Msk        (0x1UL << RTC_SECCFGR_WUTSEC_Pos)                    /*!< 0x00000004 */
#define RTC_SECCFGR_WUTSEC            RTC_SECCFGR_WUTSEC_Msk
#define RTC_SECCFGR_TSSEC_Pos         (3U)
#define RTC_SECCFGR_TSSEC_Msk         (0x1UL << RTC_SECCFGR_TSSEC_Pos)                     /*!< 0x00000008 */
#define RTC_SECCFGR_TSSEC             RTC_SECCFGR_TSSEC_Msk
#define RTC_SECCFGR_CALSEC_Pos        (13U)
#define RTC_SECCFGR_CALSEC_Msk        (0x1UL << RTC_SECCFGR_CALSEC_Pos)                    /*!< 0x00002000 */
#define RTC_SECCFGR_CALSEC            RTC_SECCFGR_CALSEC_Msk
#define RTC_SECCFGR_INITSEC_Pos       (14U)
#define RTC_SECCFGR_INITSEC_Msk       (0x1UL << RTC_SECCFGR_INITSEC_Pos)                   /*!< 0x00004000 */
#define RTC_SECCFGR_INITSEC           RTC_SECCFGR_INITSEC_Msk
#define RTC_SECCFGR_SEC_Pos           (15U)
#define RTC_SECCFGR_SEC_Msk           (0x1UL << RTC_SECCFGR_SEC_Pos)                       /*!< 0x00008000 */
#define RTC_SECCFGR_SEC               RTC_SECCFGR_SEC_Msk

/********************  Bits definition for RTC_WPR register  ******************/
#define RTC_WPR_KEY_Pos              (0U)
#define RTC_WPR_KEY_Msk              (0xFFUL << RTC_WPR_KEY_Pos)                         /*!< 0x000000FF */
#define RTC_WPR_KEY                  RTC_WPR_KEY_Msk

/********************  Bits definition for RTC_CALR register  *****************/
#define RTC_CALR_CALM_Pos            (0U)
#define RTC_CALR_CALM_Msk            (0x1FFUL << RTC_CALR_CALM_Pos)                      /*!< 0x000001FF */
#define RTC_CALR_CALM                RTC_CALR_CALM_Msk
#define RTC_CALR_CALM_0              (0x001UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000001 */
#define RTC_CALR_CALM_1              (0x002UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000002 */
#define RTC_CALR_CALM_2              (0x004UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000004 */
#define RTC_CALR_CALM_3              (0x008UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000008 */
#define RTC_CALR_CALM_4              (0x010UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000010 */
#define RTC_CALR_CALM_5              (0x020UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000020 */
#define RTC_CALR_CALM_6              (0x040UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000040 */
#define RTC_CALR_CALM_7              (0x080UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000080 */
#define RTC_CALR_CALM_8              (0x100UL << RTC_CALR_CALM_Pos)                      /*!< 0x00000100 */
#define RTC_CALR_LPCAL_Pos           (12U)
#define RTC_CALR_LPCAL_Msk           (0x1UL << RTC_CALR_LPCAL_Pos)                       /*!< 0x00001000 */
#define RTC_CALR_LPCAL               RTC_CALR_LPCAL_Msk
#define RTC_CALR_CALW16_Pos          (13U)
#define RTC_CALR_CALW16_Msk          (0x1UL << RTC_CALR_CALW16_Pos)                      /*!< 0x00002000 */
#define RTC_CALR_CALW16              RTC_CALR_CALW16_Msk
#define RTC_CALR_CALW8_Pos           (14U)
#define RTC_CALR_CALW8_Msk           (0x1UL << RTC_CALR_CALW8_Pos)                       /*!< 0x00004000 */
#define RTC_CALR_CALW8               RTC_CALR_CALW8_Msk
#define RTC_CALR_CALP_Pos            (15U)
#define RTC_CALR_CALP_Msk            (0x1UL << RTC_CALR_CALP_Pos)                        /*!< 0x00008000 */
#define RTC_CALR_CALP                RTC_CALR_CALP_Msk

/********************  Bits definition for RTC_SHIFTR register  ***************/
#define RTC_SHIFTR_SUBFS_Pos         (0U)
#define RTC_SHIFTR_SUBFS_Msk         (0x7FFFUL << RTC_SHIFTR_SUBFS_Pos)                  /*!< 0x00007FFF */
#define RTC_SHIFTR_SUBFS             RTC_SHIFTR_SUBFS_Msk
#define RTC_SHIFTR_ADD1S_Pos         (31U)
#define RTC_SHIFTR_ADD1S_Msk         (0x1UL << RTC_SHIFTR_ADD1S_Pos)                     /*!< 0x80000000 */
#define RTC_SHIFTR_ADD1S             RTC_SHIFTR_ADD1S_Msk

/********************  Bits definition for RTC_TSTR register  *****************/
#define RTC_TSTR_SU_Pos              (0U)
#define RTC_TSTR_SU_Msk              (0xFUL << RTC_TSTR_SU_Pos)                          /*!< 0x0000000F */
#define RTC_TSTR_SU                  RTC_TSTR_SU_Msk
#define RTC_TSTR_SU_0                (0x1UL << RTC_TSTR_SU_Pos)                          /*!< 0x00000001 */
#define RTC_TSTR_SU_1                (0x2UL << RTC_TSTR_SU_Pos)                          /*!< 0x00000002 */
#define RTC_TSTR_SU_2                (0x4UL << RTC_TSTR_SU_Pos)                          /*!< 0x00000004 */
#define RTC_TSTR_SU_3                (0x8UL << RTC_TSTR_SU_Pos)                          /*!< 0x00000008 */
#define RTC_TSTR_ST_Pos              (4U)
#define RTC_TSTR_ST_Msk              (0x7UL << RTC_TSTR_ST_Pos)                          /*!< 0x00000070 */
#define RTC_TSTR_ST                  RTC_TSTR_ST_Msk
#define RTC_TSTR_ST_0                (0x1UL << RTC_TSTR_ST_Pos)                          /*!< 0x00000010 */
#define RTC_TSTR_ST_1                (0x2UL << RTC_TSTR_ST_Pos)                          /*!< 0x00000020 */
#define RTC_TSTR_ST_2                (0x4UL << RTC_TSTR_ST_Pos)                          /*!< 0x00000040 */
#define RTC_TSTR_MNU_Pos             (8U)
#define RTC_TSTR_MNU_Msk             (0xFUL << RTC_TSTR_MNU_Pos)                         /*!< 0x00000F00 */
#define RTC_TSTR_MNU                 RTC_TSTR_MNU_Msk
#define RTC_TSTR_MNU_0               (0x1UL << RTC_TSTR_MNU_Pos)                         /*!< 0x00000100 */
#define RTC_TSTR_MNU_1               (0x2UL << RTC_TSTR_MNU_Pos)                         /*!< 0x00000200 */
#define RTC_TSTR_MNU_2               (0x4UL << RTC_TSTR_MNU_Pos)                         /*!< 0x00000400 */
#define RTC_TSTR_MNU_3               (0x8UL << RTC_TSTR_MNU_Pos)                         /*!< 0x00000800 */
#define RTC_TSTR_MNT_Pos             (12U)
#define RTC_TSTR_MNT_Msk             (0x7UL << RTC_TSTR_MNT_Pos)                         /*!< 0x00007000 */
#define RTC_TSTR_MNT                 RTC_TSTR_MNT_Msk
#define RTC_TSTR_MNT_0               (0x1UL << RTC_TSTR_MNT_Pos)                         /*!< 0x00001000 */
#define RTC_TSTR_MNT_1               (0x2UL << RTC_TSTR_MNT_Pos)                         /*!< 0x00002000 */
#define RTC_TSTR_MNT_2               (0x4UL << RTC_TSTR_MNT_Pos)                         /*!< 0x00004000 */
#define RTC_TSTR_HU_Pos              (16U)
#define RTC_TSTR_HU_Msk              (0xFUL << RTC_TSTR_HU_Pos)                          /*!< 0x000F0000 */
#define RTC_TSTR_HU                  RTC_TSTR_HU_Msk
#define RTC_TSTR_HU_0                (0x1UL << RTC_TSTR_HU_Pos)                          /*!< 0x00010000 */
#define RTC_TSTR_HU_1                (0x2UL << RTC_TSTR_HU_Pos)                          /*!< 0x00020000 */
#define RTC_TSTR_HU_2                (0x4UL << RTC_TSTR_HU_Pos)                          /*!< 0x00040000 */
#define RTC_TSTR_HU_3                (0x8UL << RTC_TSTR_HU_Pos)                          /*!< 0x00080000 */
#define RTC_TSTR_HT_Pos              (20U)
#define RTC_TSTR_HT_Msk              (0x3UL << RTC_TSTR_HT_Pos)                          /*!< 0x00300000 */
#define RTC_TSTR_HT                  RTC_TSTR_HT_Msk
#define RTC_TSTR_HT_0                (0x1UL << RTC_TSTR_HT_Pos)                          /*!< 0x00100000 */
#define RTC_TSTR_HT_1                (0x2UL << RTC_TSTR_HT_Pos)                          /*!< 0x00200000 */
#define RTC_TSTR_PM_Pos              (22U)
#define RTC_TSTR_PM_Msk              (0x1UL << RTC_TSTR_PM_Pos)                          /*!< 0x00400000 */
#define RTC_TSTR_PM                  RTC_TSTR_PM_Msk

/********************  Bits definition for RTC_TSDR register  *****************/
#define RTC_TSDR_DU_Pos              (0U)
#define RTC_TSDR_DU_Msk              (0xFUL << RTC_TSDR_DU_Pos)                          /*!< 0x0000000F */
#define RTC_TSDR_DU                  RTC_TSDR_DU_Msk
#define RTC_TSDR_DU_0                (0x1UL << RTC_TSDR_DU_Pos)                          /*!< 0x00000001 */
#define RTC_TSDR_DU_1                (0x2UL << RTC_TSDR_DU_Pos)                          /*!< 0x00000002 */
#define RTC_TSDR_DU_2                (0x4UL << RTC_TSDR_DU_Pos)                          /*!< 0x00000004 */
#define RTC_TSDR_DU_3                (0x8UL << RTC_TSDR_DU_Pos)                          /*!< 0x00000008 */
#define RTC_TSDR_DT_Pos              (4U)
#define RTC_TSDR_DT_Msk              (0x3UL << RTC_TSDR_DT_Pos)                          /*!< 0x00000030 */
#define RTC_TSDR_DT                  RTC_TSDR_DT_Msk
#define RTC_TSDR_DT_0                (0x1UL << RTC_TSDR_DT_Pos)                          /*!< 0x00000010 */
#define RTC_TSDR_DT_1                (0x2UL << RTC_TSDR_DT_Pos)                          /*!< 0x00000020 */
#define RTC_TSDR_MU_Pos              (8U)
#define RTC_TSDR_MU_Msk              (0xFUL << RTC_TSDR_MU_Pos)                          /*!< 0x00000F00 */
#define RTC_TSDR_MU                  RTC_TSDR_MU_Msk
#define RTC_TSDR_MU_0                (0x1UL << RTC_TSDR_MU_Pos)                          /*!< 0x00000100 */
#define RTC_TSDR_MU_1                (0x2UL << RTC_TSDR_MU_Pos)                          /*!< 0x00000200 */
#define RTC_TSDR_MU_2                (0x4UL << RTC_TSDR_MU_Pos)                          /*!< 0x00000400 */
#define RTC_TSDR_MU_3                (0x8UL << RTC_TSDR_MU_Pos)                          /*!< 0x00000800 */
#define RTC_TSDR_MT_Pos              (12U)
#define RTC_TSDR_MT_Msk              (0x1UL << RTC_TSDR_MT_Pos)                          /*!< 0x00001000 */
#define RTC_TSDR_MT                  RTC_TSDR_MT_Msk
#define RTC_TSDR_WDU_Pos             (13U)
#define RTC_TSDR_WDU_Msk             (0x7UL << RTC_TSDR_WDU_Pos)                         /*!< 0x0000E000 */
#define RTC_TSDR_WDU                 RTC_TSDR_WDU_Msk
#define RTC_TSDR_WDU_0               (0x1UL << RTC_TSDR_WDU_Pos)                         /*!< 0x00002000 */
#define RTC_TSDR_WDU_1               (0x2UL << RTC_TSDR_WDU_Pos)                         /*!< 0x00004000 */
#define RTC_TSDR_WDU_2               (0x4UL << RTC_TSDR_WDU_Pos)                         /*!< 0x00008000 */

/********************  Bits definition for RTC_TSSSR register  ****************/
#define RTC_TSSSR_SS_Pos             (0U)
#define RTC_TSSSR_SS_Msk             (0xFFFFFFFFUL << RTC_TSSSR_SS_Pos)            /*!< 0xFFFFFFFF */
#define RTC_TSSSR_SS                 RTC_TSSSR_SS_Msk                             /*!< rtc timestamp sub second > */

/********************  Bits definition for RTC_ALRMAR register  ***************/
#define RTC_ALRMAR_SU_Pos            (0U)
#define RTC_ALRMAR_SU_Msk            (0xFUL << RTC_ALRMAR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMAR_SU                RTC_ALRMAR_SU_Msk
#define RTC_ALRMAR_SU_0              (0x1UL << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMAR_SU_1              (0x2UL << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMAR_SU_2              (0x4UL << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMAR_SU_3              (0x8UL << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMAR_ST_Pos            (4U)
#define RTC_ALRMAR_ST_Msk            (0x7UL << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMAR_ST                RTC_ALRMAR_ST_Msk
#define RTC_ALRMAR_ST_0              (0x1UL << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMAR_ST_1              (0x2UL << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMAR_ST_2              (0x4UL << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMAR_MSK1_Pos          (7U)
#define RTC_ALRMAR_MSK1_Msk          (0x1UL << RTC_ALRMAR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMAR_MSK1              RTC_ALRMAR_MSK1_Msk
#define RTC_ALRMAR_MNU_Pos           (8U)
#define RTC_ALRMAR_MNU_Msk           (0xFUL << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMAR_MNU               RTC_ALRMAR_MNU_Msk
#define RTC_ALRMAR_MNU_0             (0x1UL << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMAR_MNU_1             (0x2UL << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMAR_MNU_2             (0x4UL << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMAR_MNU_3             (0x8UL << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMAR_MNT_Pos           (12U)
#define RTC_ALRMAR_MNT_Msk           (0x7UL << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMAR_MNT               RTC_ALRMAR_MNT_Msk
#define RTC_ALRMAR_MNT_0             (0x1UL << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMAR_MNT_1             (0x2UL << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMAR_MNT_2             (0x4UL << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMAR_MSK2_Pos          (15U)
#define RTC_ALRMAR_MSK2_Msk          (0x1UL << RTC_ALRMAR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMAR_MSK2              RTC_ALRMAR_MSK2_Msk
#define RTC_ALRMAR_HU_Pos            (16U)
#define RTC_ALRMAR_HU_Msk            (0xFUL << RTC_ALRMAR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMAR_HU                RTC_ALRMAR_HU_Msk
#define RTC_ALRMAR_HU_0              (0x1UL << RTC_ALRMAR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMAR_HU_1              (0x2UL << RTC_ALRMAR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMAR_HU_2              (0x4UL << RTC_ALRMAR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMAR_HU_3              (0x8UL << RTC_ALRMAR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMAR_HT_Pos            (20U)
#define RTC_ALRMAR_HT_Msk            (0x3UL << RTC_ALRMAR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMAR_HT                RTC_ALRMAR_HT_Msk
#define RTC_ALRMAR_HT_0              (0x1UL << RTC_ALRMAR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMAR_HT_1              (0x2UL << RTC_ALRMAR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMAR_PM_Pos            (22U)
#define RTC_ALRMAR_PM_Msk            (0x1UL << RTC_ALRMAR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMAR_PM                RTC_ALRMAR_PM_Msk
#define RTC_ALRMAR_MSK3_Pos          (23U)
#define RTC_ALRMAR_MSK3_Msk          (0x1UL << RTC_ALRMAR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMAR_MSK3              RTC_ALRMAR_MSK3_Msk
#define RTC_ALRMAR_DU_Pos            (24U)
#define RTC_ALRMAR_DU_Msk            (0xFUL << RTC_ALRMAR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMAR_DU                RTC_ALRMAR_DU_Msk
#define RTC_ALRMAR_DU_0              (0x1UL << RTC_ALRMAR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMAR_DU_1              (0x2UL << RTC_ALRMAR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMAR_DU_2              (0x4UL << RTC_ALRMAR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMAR_DU_3              (0x8UL << RTC_ALRMAR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMAR_DT_Pos            (28U)
#define RTC_ALRMAR_DT_Msk            (0x3UL << RTC_ALRMAR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMAR_DT                RTC_ALRMAR_DT_Msk
#define RTC_ALRMAR_DT_0              (0x1UL << RTC_ALRMAR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMAR_DT_1              (0x2UL << RTC_ALRMAR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMAR_WDSEL_Pos         (30U)
#define RTC_ALRMAR_WDSEL_Msk         (0x1UL << RTC_ALRMAR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMAR_WDSEL             RTC_ALRMAR_WDSEL_Msk
#define RTC_ALRMAR_MSK4_Pos          (31U)
#define RTC_ALRMAR_MSK4_Msk          (0x1UL << RTC_ALRMAR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMAR_MSK4              RTC_ALRMAR_MSK4_Msk

/********************  Bits definition for RTC_ALRMASSR register  *************/
#define RTC_ALRMASSR_SS_Pos          (0U)
#define RTC_ALRMASSR_SS_Msk          (0x7FFFUL << RTC_ALRMASSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMASSR_SS              RTC_ALRMASSR_SS_Msk
#define RTC_ALRMASSR_MASKSS_Pos      (24U)
#define RTC_ALRMASSR_MASKSS_Msk      (0x3FUL << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMASSR_MASKSS          RTC_ALRMASSR_MASKSS_Msk
#define RTC_ALRMASSR_MASKSS_0        (0x1UL << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMASSR_MASKSS_1        (0x2UL << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMASSR_MASKSS_2        (0x4UL << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMASSR_MASKSS_3        (0x8UL << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_4        (0x10UL << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_5        (0x20UL << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_SSCLR_Pos       (31U)
#define RTC_ALRMASSR_SSCLR_Msk       (0x1UL << RTC_ALRMASSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMASSR_SSCLR           RTC_ALRMASSR_SSCLR_Msk

/********************  Bits definition for RTC_ALRMBR register  ***************/
#define RTC_ALRMBR_SU_Pos            (0U)
#define RTC_ALRMBR_SU_Msk            (0xFUL << RTC_ALRMBR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMBR_SU                RTC_ALRMBR_SU_Msk
#define RTC_ALRMBR_SU_0              (0x1UL << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMBR_SU_1              (0x2UL << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMBR_SU_2              (0x4UL << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMBR_SU_3              (0x8UL << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMBR_ST_Pos            (4U)
#define RTC_ALRMBR_ST_Msk            (0x7UL << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMBR_ST                RTC_ALRMBR_ST_Msk
#define RTC_ALRMBR_ST_0              (0x1UL << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMBR_ST_1              (0x2UL << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMBR_ST_2              (0x4UL << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMBR_MSK1_Pos          (7U)
#define RTC_ALRMBR_MSK1_Msk          (0x1UL << RTC_ALRMBR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMBR_MSK1              RTC_ALRMBR_MSK1_Msk
#define RTC_ALRMBR_MNU_Pos           (8U)
#define RTC_ALRMBR_MNU_Msk           (0xFUL << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMBR_MNU               RTC_ALRMBR_MNU_Msk
#define RTC_ALRMBR_MNU_0             (0x1UL << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMBR_MNU_1             (0x2UL << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMBR_MNU_2             (0x4UL << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMBR_MNU_3             (0x8UL << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMBR_MNT_Pos           (12U)
#define RTC_ALRMBR_MNT_Msk           (0x7UL << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMBR_MNT               RTC_ALRMBR_MNT_Msk
#define RTC_ALRMBR_MNT_0             (0x1UL << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMBR_MNT_1             (0x2UL << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMBR_MNT_2             (0x4UL << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMBR_MSK2_Pos          (15U)
#define RTC_ALRMBR_MSK2_Msk          (0x1UL << RTC_ALRMBR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMBR_MSK2              RTC_ALRMBR_MSK2_Msk
#define RTC_ALRMBR_HU_Pos            (16U)
#define RTC_ALRMBR_HU_Msk            (0xFUL << RTC_ALRMBR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMBR_HU                RTC_ALRMBR_HU_Msk
#define RTC_ALRMBR_HU_0              (0x1UL << RTC_ALRMBR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMBR_HU_1              (0x2UL << RTC_ALRMBR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMBR_HU_2              (0x4UL << RTC_ALRMBR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMBR_HU_3              (0x8UL << RTC_ALRMBR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMBR_HT_Pos            (20U)
#define RTC_ALRMBR_HT_Msk            (0x3UL << RTC_ALRMBR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMBR_HT                RTC_ALRMBR_HT_Msk
#define RTC_ALRMBR_HT_0              (0x1UL << RTC_ALRMBR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMBR_HT_1              (0x2UL << RTC_ALRMBR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMBR_PM_Pos            (22U)
#define RTC_ALRMBR_PM_Msk            (0x1UL << RTC_ALRMBR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMBR_PM                RTC_ALRMBR_PM_Msk
#define RTC_ALRMBR_MSK3_Pos          (23U)
#define RTC_ALRMBR_MSK3_Msk          (0x1UL << RTC_ALRMBR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMBR_MSK3              RTC_ALRMBR_MSK3_Msk
#define RTC_ALRMBR_DU_Pos            (24U)
#define RTC_ALRMBR_DU_Msk            (0xFUL << RTC_ALRMBR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMBR_DU                RTC_ALRMBR_DU_Msk
#define RTC_ALRMBR_DU_0              (0x1UL << RTC_ALRMBR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMBR_DU_1              (0x2UL << RTC_ALRMBR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMBR_DU_2              (0x4UL << RTC_ALRMBR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMBR_DU_3              (0x8UL << RTC_ALRMBR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMBR_DT_Pos            (28U)
#define RTC_ALRMBR_DT_Msk            (0x3UL << RTC_ALRMBR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMBR_DT                RTC_ALRMBR_DT_Msk
#define RTC_ALRMBR_DT_0              (0x1UL << RTC_ALRMBR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMBR_DT_1              (0x2UL << RTC_ALRMBR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMBR_WDSEL_Pos         (30U)
#define RTC_ALRMBR_WDSEL_Msk         (0x1UL << RTC_ALRMBR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMBR_WDSEL             RTC_ALRMBR_WDSEL_Msk
#define RTC_ALRMBR_MSK4_Pos          (31U)
#define RTC_ALRMBR_MSK4_Msk          (0x1UL << RTC_ALRMBR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMBR_MSK4              RTC_ALRMBR_MSK4_Msk

/********************  Bits definition for RTC_ALRMBSSR register  *************/
#define RTC_ALRMBSSR_SS_Pos          (0U)
#define RTC_ALRMBSSR_SS_Msk          (0x7FFFUL << RTC_ALRMBSSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMBSSR_SS              RTC_ALRMBSSR_SS_Msk
#define RTC_ALRMBSSR_MASKSS_Pos      (24U)
#define RTC_ALRMBSSR_MASKSS_Msk      (0x3FUL << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMBSSR_MASKSS          RTC_ALRMBSSR_MASKSS_Msk
#define RTC_ALRMBSSR_MASKSS_0        (0x1UL << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMBSSR_MASKSS_1        (0x2UL << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMBSSR_MASKSS_2        (0x4UL << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMBSSR_MASKSS_3        (0x8UL << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_4        (0x10UL << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_5        (0x20UL << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_SSCLR_Pos       (31U)
#define RTC_ALRMBSSR_SSCLR_Msk       (0x1UL << RTC_ALRMBSSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMBSSR_SSCLR           RTC_ALRMBSSR_SSCLR_Msk

/********************  Bits definition for RTC_SR register  *******************/
#define RTC_SR_ALRAF_Pos             (0U)
#define RTC_SR_ALRAF_Msk             (0x1UL << RTC_SR_ALRAF_Pos)                         /*!< 0x00000001 */
#define RTC_SR_ALRAF                 RTC_SR_ALRAF_Msk
#define RTC_SR_ALRBF_Pos             (1U)
#define RTC_SR_ALRBF_Msk             (0x1UL << RTC_SR_ALRBF_Pos)                         /*!< 0x00000002 */
#define RTC_SR_ALRBF                 RTC_SR_ALRBF_Msk
#define RTC_SR_WUTF_Pos              (2U)
#define RTC_SR_WUTF_Msk              (0x1UL << RTC_SR_WUTF_Pos)                          /*!< 0x00000004 */
#define RTC_SR_WUTF                  RTC_SR_WUTF_Msk
#define RTC_SR_TSF_Pos               (3U)
#define RTC_SR_TSF_Msk               (0x1UL << RTC_SR_TSF_Pos)                           /*!< 0x00000008 */
#define RTC_SR_TSF                   RTC_SR_TSF_Msk
#define RTC_SR_TSOVF_Pos             (4U)
#define RTC_SR_TSOVF_Msk             (0x1UL << RTC_SR_TSOVF_Pos)                         /*!< 0x00000010 */
#define RTC_SR_TSOVF                 RTC_SR_TSOVF_Msk
#define RTC_SR_ITSF_Pos              (5U)
#define RTC_SR_ITSF_Msk              (0x1UL << RTC_SR_ITSF_Pos)                          /*!< 0x00000020 */
#define RTC_SR_ITSF                  RTC_SR_ITSF_Msk
#define RTC_SR_SSRUF_Pos             (6U)
#define RTC_SR_SSRUF_Msk             (0x1UL << RTC_SR_SSRUF_Pos)                       /*!< 0x00000040 */
#define RTC_SR_SSRUF                 RTC_SR_SSRUF_Msk

/********************  Bits definition for RTC_MISR register  *****************/
#define RTC_MISR_ALRAMF_Pos          (0U)
#define RTC_MISR_ALRAMF_Msk          (0x1UL << RTC_MISR_ALRAMF_Pos)                      /*!< 0x00000001 */
#define RTC_MISR_ALRAMF              RTC_MISR_ALRAMF_Msk
#define RTC_MISR_ALRBMF_Pos          (1U)
#define RTC_MISR_ALRBMF_Msk          (0x1UL << RTC_MISR_ALRBMF_Pos)                      /*!< 0x00000002 */
#define RTC_MISR_ALRBMF              RTC_MISR_ALRBMF_Msk
#define RTC_MISR_WUTMF_Pos           (2U)
#define RTC_MISR_WUTMF_Msk           (0x1UL << RTC_MISR_WUTMF_Pos)                       /*!< 0x00000004 */
#define RTC_MISR_WUTMF               RTC_MISR_WUTMF_Msk
#define RTC_MISR_TSMF_Pos            (3U)
#define RTC_MISR_TSMF_Msk            (0x1UL << RTC_MISR_TSMF_Pos)                        /*!< 0x00000008 */
#define RTC_MISR_TSMF                RTC_MISR_TSMF_Msk
#define RTC_MISR_TSOVMF_Pos          (4U)
#define RTC_MISR_TSOVMF_Msk          (0x1UL << RTC_MISR_TSOVMF_Pos)                      /*!< 0x00000010 */
#define RTC_MISR_TSOVMF              RTC_MISR_TSOVMF_Msk
#define RTC_MISR_ITSMF_Pos           (5U)
#define RTC_MISR_ITSMF_Msk           (0x1UL << RTC_MISR_ITSMF_Pos)                       /*!< 0x00000020 */
#define RTC_MISR_ITSMF               RTC_MISR_ITSMF_Msk
#define RTC_MISR_SSRUMF_Pos          (6U)
#define RTC_MISR_SSRUMF_Msk          (0x1UL << RTC_MISR_SSRUMF_Pos)            /*!< 0x00000040 */
#define RTC_MISR_SSRUMF              RTC_MISR_SSRUMF_Msk

/********************  Bits definition for RTC_SMISR register  *****************/
#define RTC_SMISR_ALRAMF_Pos         (0U)
#define RTC_SMISR_ALRAMF_Msk         (0x1UL << RTC_SMISR_ALRAMF_Pos)                     /*!< 0x00000001 */
#define RTC_SMISR_ALRAMF             RTC_SMISR_ALRAMF_Msk
#define RTC_SMISR_ALRBMF_Pos         (1U)
#define RTC_SMISR_ALRBMF_Msk         (0x1UL << RTC_SMISR_ALRBMF_Pos)                     /*!< 0x00000002 */
#define RTC_SMISR_ALRBMF             RTC_SMISR_ALRBMF_Msk
#define RTC_SMISR_WUTMF_Pos          (2U)
#define RTC_SMISR_WUTMF_Msk          (0x1UL << RTC_SMISR_WUTMF_Pos)                      /*!< 0x00000004 */
#define RTC_SMISR_WUTMF              RTC_SMISR_WUTMF_Msk
#define RTC_SMISR_TSMF_Pos           (3U)
#define RTC_SMISR_TSMF_Msk           (0x1UL << RTC_SMISR_TSMF_Pos)                       /*!< 0x00000008 */
#define RTC_SMISR_TSMF               RTC_SMISR_TSMF_Msk
#define RTC_SMISR_TSOVMF_Pos         (4U)
#define RTC_SMISR_TSOVMF_Msk         (0x1UL << RTC_SMISR_TSOVMF_Pos)                     /*!< 0x00000010 */
#define RTC_SMISR_TSOVMF             RTC_SMISR_TSOVMF_Msk
#define RTC_SMISR_ITSMF_Pos          (5U)
#define RTC_SMISR_ITSMF_Msk          (0x1UL << RTC_SMISR_ITSMF_Pos)                      /*!< 0x00000020 */
#define RTC_SMISR_ITSMF              RTC_SMISR_ITSMF_Msk
#define RTC_SMISR_SSRUMF_Pos         (6U)
#define RTC_SMISR_SSRUMF_Msk         (0x1UL << RTC_SMISR_SSRUMF_Pos)                   /*!< 0x00000040 */
#define RTC_SMISR_SSRUMF             RTC_SMISR_SSRUMF_Msk

/********************  Bits definition for RTC_SCR register  ******************/
#define RTC_SCR_CALRAF_Pos           (0U)
#define RTC_SCR_CALRAF_Msk           (0x1UL << RTC_SCR_CALRAF_Pos)                       /*!< 0x00000001 */
#define RTC_SCR_CALRAF               RTC_SCR_CALRAF_Msk
#define RTC_SCR_CALRBF_Pos           (1U)
#define RTC_SCR_CALRBF_Msk           (0x1UL << RTC_SCR_CALRBF_Pos)                       /*!< 0x00000002 */
#define RTC_SCR_CALRBF               RTC_SCR_CALRBF_Msk
#define RTC_SCR_CWUTF_Pos            (2U)
#define RTC_SCR_CWUTF_Msk            (0x1UL << RTC_SCR_CWUTF_Pos)                        /*!< 0x00000004 */
#define RTC_SCR_CWUTF                RTC_SCR_CWUTF_Msk
#define RTC_SCR_CTSF_Pos             (3U)
#define RTC_SCR_CTSF_Msk             (0x1UL << RTC_SCR_CTSF_Pos)                         /*!< 0x00000008 */
#define RTC_SCR_CTSF                 RTC_SCR_CTSF_Msk
#define RTC_SCR_CTSOVF_Pos           (4U)
#define RTC_SCR_CTSOVF_Msk           (0x1UL << RTC_SCR_CTSOVF_Pos)                       /*!< 0x00000010 */
#define RTC_SCR_CTSOVF               RTC_SCR_CTSOVF_Msk
#define RTC_SCR_CITSF_Pos            (5U)
#define RTC_SCR_CITSF_Msk            (0x1UL << RTC_SCR_CITSF_Pos)                        /*!< 0x00000020 */
#define RTC_SCR_CITSF                RTC_SCR_CITSF_Msk
#define RTC_SCR_CSSRUF_Pos           (6U)
#define RTC_SCR_CSSRUF_Msk           (0x1UL << RTC_SCR_CSSRUF_Pos)                      /*!< 0x00000040 */
#define RTC_SCR_CSSRUF               RTC_SCR_CSSRUF_Msk

/*******************  Bits definition for RTC_CFGR register  ******************/
#define RTC_CFGR_OUT2_RMP_Pos        (0U)
#define RTC_CFGR_OUT2_RMP_Msk        (0x1UL << RTC_CFGR_OUT2_RMP_Pos)                    /*!< 0x00000001 */
#define RTC_CFGR_OUT2_RMP            RTC_CFGR_OUT2_RMP_Msk

/********************  Bits definition for RTC_ALRABINR register  ******************/
#define RTC_ALRABINR_SS_Pos          (0U)
#define RTC_ALRABINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRABINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRABINR_SS              RTC_ALRABINR_SS_Msk

/********************  Bits definition for RTC_ALRBBINR register  ******************/
#define RTC_ALRBBINR_SS_Pos          (0U)
#define RTC_ALRBBINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRBBINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRBBINR_SS              RTC_ALRBBINR_SS_Msk

/********************  Bits definition for RTC_RCIDCFGR register  ******************/
#define RTC_RCIDCFGR_CFEN_Pos          (0U)
#define RTC_RCIDCFGR_CFEN_Msk          (0x1UL << RTC_RCIDCFGR_CFEN_Pos)                 /*!< 0xFFFFFFFF */
#define RTC_RCIDCFGR_CFEN              RTC_RCIDCFGR_CFEN_Msk
#define RTC_RCIDCFGR_CID_Pos           (4U)
#define RTC_RCIDCFGR_CID_Msk           (0xFUL << RTC_RCIDCFGR_CID_Pos)                  /*!< 0x000000F0 */
#define RTC_RCIDCFGR_CID               RTC_RCIDCFGR_CID_Msk

/********************  Bits definition for RTC_HWCFGR register  ******************/
#define RTC_HWCFGR_ALARMB_Pos          (0U)
#define RTC_HWCFGR_ALARMB_Msk          (0xFUL << RTC_HWCFGR_ALARMB_Pos)                 /*!< 0x0000000F */
#define RTC_HWCFGR_ALARMB              RTC_HWCFGR_ALARMB_Msk
#define RTC_HWCFGR_WAKEUP_Pos          (4U)
#define RTC_HWCFGR_WAKEUP_Msk          (0xFUL << RTC_HWCFGR_WAKEUP_Pos)                 /*!< 0x000000F0 */
#define RTC_HWCFGR_WAKEUP              RTC_HWCFGR_WAKEUP_Msk
#define RTC_HWCFGR_SMOOTH_CALIB_Pos    (8U)
#define RTC_HWCFGR_SMOOTH_CALIB_Msk    (0xFUL << RTC_HWCFGR_SMOOTH_CALIB_Pos)           /*!< 0x00000F00 */
#define RTC_HWCFGR_SMOOTH_CALIB        RTC_HWCFGR_SMOOTH_CALIB_Msk
#define RTC_HWCFGR_TIMESTAMP_Pos       (12U)
#define RTC_HWCFGR_TIMESTAMP_Msk       (0xFUL << RTC_HWCFGR_TIMESTAMP_Pos)              /*!< 0x00000F000 */
#define RTC_HWCFGR_TIMESTAMP           RTC_HWCFGR_TIMESTAMP_Msk
#define RTC_HWCFGR_OPTIONREG_OUT_Pos   (16U)
#define RTC_HWCFGR_OPTIONREG_OUT_Msk   (0xFFUL << RTC_HWCFGR_OPTIONREG_OUT_Pos)         /*!< 0x00FF0000 */
#define RTC_HWCFGR_OPTIONREG_OUT       RTC_HWCFGR_OPTIONREG_OUT_Msk
#define RTC_HWCFGR_TRUST_ZONE_Pos      (24U)
#define RTC_HWCFGR_TRUST_ZONE_Msk      (0xFUL << RTC_HWCFGR_TRUST_ZONE_Pos)             /*!< 0x0F000000 */
#define RTC_HWCFGR_TRUST_ZONE          RTC_HWCFGR_TRUST_ZONE_Msk
#define RTC_HWCFGR_RIF_Pos             (24U)
#define RTC_HWCFGR_RIF_Msk             (0xFUL << RTC_HWCFGR_RIF_Pos)                    /*!< 0xF0000000 */
#define RTC_HWCFGR_RIF                 RTC_HWCFGR_RIF_Msk

/*******************  Bits definition for RTC_VERR register  **************/
#define RTC_VERR_MINREV_Pos            (0U)
#define RTC_VERR_MINREV_Msk            (0x4UL << RTC_VERR_MINREV_Pos)                   /*!< 0x0000000F */
#define RTC_VERR_MINREV                RTC_VERR_MINREV_Msk                              /*!< RTC Minor version */
#define RTC_VERR_MAJREV_Pos            (4U)
#define RTC_VERR_MAJREV_Msk            (0x4UL << RTC_VERR_MAJREV_Pos)                   /*!< 0x000000F0 */
#define RTC_VERR_MAJREV                RTC_VERR_MAJREV_Msk                              /*!< RTC Major version */

/*******************  Bits definition for RTC_IPIDR register  **************/
#define RTC_IPIDR_ID_Pos               (0U)
#define RTC_IPIDR_ID_Msk               (0xFFFFFFFFUL << RTC_IPIDR_ID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_IPIDR_ID                   RTC_IPIDR_ID_Msk                                 /*!< RTC ID */

/*******************  Bits definition for RTC_SIDR register  **************/
#define RTC_SIDR_SID_Pos               (0U)
#define RTC_SIDR_SID_Msk               (0xFFFFFFFFUL << RTC_SIDR_SID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_SIDR_SID                   RTC_SIDR_SID_Msk                                 /*!< RTC Size ID */


/******************************************************************************/
/*                                                                            */
/*                          Serial Audio Interface                            */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for SAI_GCR register  *******************/
#define SAI_GCR_SYNCIN_Pos         (0U)
#define SAI_GCR_SYNCIN_Msk         (0x3UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000003 */
#define SAI_GCR_SYNCIN             SAI_GCR_SYNCIN_Msk                           /*!<SYNCIN[1:0] bits (Synchronization Inputs)   */
#define SAI_GCR_SYNCIN_0           (0x1UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000001 */
#define SAI_GCR_SYNCIN_1           (0x2UL << SAI_GCR_SYNCIN_Pos)                /*!< 0x00000002 */

#define SAI_GCR_SYNCOUT_Pos        (4U)
#define SAI_GCR_SYNCOUT_Msk        (0x3UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000030 */
#define SAI_GCR_SYNCOUT            SAI_GCR_SYNCOUT_Msk                          /*!<SYNCOUT[1:0] bits (Synchronization Outputs) */
#define SAI_GCR_SYNCOUT_0          (0x1UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000010 */
#define SAI_GCR_SYNCOUT_1          (0x2UL << SAI_GCR_SYNCOUT_Pos)               /*!< 0x00000020 */

/*******************  Bit definition for SAI_xCR1 register  *******************/
#define SAI_xCR1_MODE_Pos          (0U)
#define SAI_xCR1_MODE_Msk          (0x3UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000003 */
#define SAI_xCR1_MODE              SAI_xCR1_MODE_Msk                            /*!<MODE[1:0] bits (Audio Block Mode)           */
#define SAI_xCR1_MODE_0            (0x1UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000001 */
#define SAI_xCR1_MODE_1            (0x2UL << SAI_xCR1_MODE_Pos)                 /*!< 0x00000002 */

#define SAI_xCR1_PRTCFG_Pos        (2U)
#define SAI_xCR1_PRTCFG_Msk        (0x3UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x0000000C */
#define SAI_xCR1_PRTCFG            SAI_xCR1_PRTCFG_Msk                          /*!<PRTCFG[1:0] bits (Protocol Configuration)   */
#define SAI_xCR1_PRTCFG_0          (0x1UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x00000004 */
#define SAI_xCR1_PRTCFG_1          (0x2UL << SAI_xCR1_PRTCFG_Pos)               /*!< 0x00000008 */

#define SAI_xCR1_DS_Pos            (5U)
#define SAI_xCR1_DS_Msk            (0x7UL << SAI_xCR1_DS_Pos)                   /*!< 0x000000E0 */
#define SAI_xCR1_DS                SAI_xCR1_DS_Msk                              /*!<DS[1:0] bits (Data Size) */
#define SAI_xCR1_DS_0              (0x1UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000020 */
#define SAI_xCR1_DS_1              (0x2UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000040 */
#define SAI_xCR1_DS_2              (0x4UL << SAI_xCR1_DS_Pos)                   /*!< 0x00000080 */

#define SAI_xCR1_LSBFIRST_Pos      (8U)
#define SAI_xCR1_LSBFIRST_Msk      (0x1UL << SAI_xCR1_LSBFIRST_Pos)             /*!< 0x00000100 */
#define SAI_xCR1_LSBFIRST          SAI_xCR1_LSBFIRST_Msk                        /*!<LSB First Configuration  */
#define SAI_xCR1_CKSTR_Pos         (9U)
#define SAI_xCR1_CKSTR_Msk         (0x1UL << SAI_xCR1_CKSTR_Pos)                /*!< 0x00000200 */
#define SAI_xCR1_CKSTR             SAI_xCR1_CKSTR_Msk                           /*!<ClocK STRobing edge      */

#define SAI_xCR1_SYNCEN_Pos        (10U)
#define SAI_xCR1_SYNCEN_Msk        (0x3UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000C00 */
#define SAI_xCR1_SYNCEN            SAI_xCR1_SYNCEN_Msk                          /*!<SYNCEN[1:0](SYNChronization ENable) */
#define SAI_xCR1_SYNCEN_0          (0x1UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000400 */
#define SAI_xCR1_SYNCEN_1          (0x2UL << SAI_xCR1_SYNCEN_Pos)               /*!< 0x00000800 */

#define SAI_xCR1_MONO_Pos          (12U)
#define SAI_xCR1_MONO_Msk          (0x1UL << SAI_xCR1_MONO_Pos)                 /*!< 0x00001000 */
#define SAI_xCR1_MONO              SAI_xCR1_MONO_Msk                            /*!<Mono mode                  */
#define SAI_xCR1_OUTDRIV_Pos       (13U)
#define SAI_xCR1_OUTDRIV_Msk       (0x1UL << SAI_xCR1_OUTDRIV_Pos)              /*!< 0x00002000 */
#define SAI_xCR1_OUTDRIV           SAI_xCR1_OUTDRIV_Msk                         /*!<Output Drive               */
#define SAI_xCR1_SAIEN_Pos         (16U)
#define SAI_xCR1_SAIEN_Msk         (0x1UL << SAI_xCR1_SAIEN_Pos)                /*!< 0x00010000 */
#define SAI_xCR1_SAIEN             SAI_xCR1_SAIEN_Msk                           /*!<Audio Block enable         */
#define SAI_xCR1_DMAEN_Pos         (17U)
#define SAI_xCR1_DMAEN_Msk         (0x1UL << SAI_xCR1_DMAEN_Pos)                /*!< 0x00020000 */
#define SAI_xCR1_DMAEN             SAI_xCR1_DMAEN_Msk                           /*!<DMA enable                 */
#define SAI_xCR1_NODIV_Pos         (19U)
#define SAI_xCR1_NODIV_Msk         (0x1UL << SAI_xCR1_NODIV_Pos)                /*!< 0x00080000 */
#define SAI_xCR1_NODIV             SAI_xCR1_NODIV_Msk                           /*!<No Divider Configuration   */

#define SAI_xCR1_MCKDIV_Pos        (20U)
#define SAI_xCR1_MCKDIV_Msk        (0x3FUL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x03F00000 */
#define SAI_xCR1_MCKDIV            SAI_xCR1_MCKDIV_Msk                          /*!<MCKDIV[5:0] (Master ClocK Divider)  */
#define SAI_xCR1_MCKDIV_0          (0x01UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00100000 */
#define SAI_xCR1_MCKDIV_1          (0x02UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00200000 */
#define SAI_xCR1_MCKDIV_2          (0x04UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00400000 */
#define SAI_xCR1_MCKDIV_3          (0x08UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x00800000 */
#define SAI_xCR1_MCKDIV_4          (0x10UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x01000000 */
#define SAI_xCR1_MCKDIV_5          (0x20UL << SAI_xCR1_MCKDIV_Pos)              /*!< 0x02000000 */

#define SAI_xCR1_MCKEN_Pos         (27U)
#define SAI_xCR1_MCKEN_Msk         (0x1UL << SAI_xCR1_MCKEN_Pos)                /*!< 0x08000000 */
#define SAI_xCR1_MCKEN             SAI_xCR1_MCKEN_Msk                           /*!<Master ClocK enable */

#define SAI_xCR1_OSR_Pos           (26U)
#define SAI_xCR1_OSR_Msk           (0x1UL << SAI_xCR1_OSR_Pos)                  /*!< 0x04000000 */
#define SAI_xCR1_OSR               SAI_xCR1_OSR_Msk                             /*!<OverSampling Ratio for master clock  */

/* Legacy define */
#define  SAI_xCR1_NOMCK               SAI_xCR1_NODIV

/*******************  Bit definition for SAI_xCR2 register  *******************/
#define SAI_xCR2_FTH_Pos           (0U)
#define SAI_xCR2_FTH_Msk           (0x7UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000007 */
#define SAI_xCR2_FTH               SAI_xCR2_FTH_Msk                             /*!<FTH[2:0](Fifo THreshold)  */
#define SAI_xCR2_FTH_0             (0x1UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000001 */
#define SAI_xCR2_FTH_1             (0x2UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000002 */
#define SAI_xCR2_FTH_2             (0x4UL << SAI_xCR2_FTH_Pos)                  /*!< 0x00000004 */

#define SAI_xCR2_FFLUSH_Pos        (3U)
#define SAI_xCR2_FFLUSH_Msk        (0x1UL << SAI_xCR2_FFLUSH_Pos)               /*!< 0x00000008 */
#define SAI_xCR2_FFLUSH            SAI_xCR2_FFLUSH_Msk                          /*!<Fifo FLUSH                       */
#define SAI_xCR2_TRIS_Pos          (4U)
#define SAI_xCR2_TRIS_Msk          (0x1UL << SAI_xCR2_TRIS_Pos)                 /*!< 0x00000010 */
#define SAI_xCR2_TRIS              SAI_xCR2_TRIS_Msk                            /*!<TRIState Management on data line */
#define SAI_xCR2_MUTE_Pos          (5U)
#define SAI_xCR2_MUTE_Msk          (0x1UL << SAI_xCR2_MUTE_Pos)                 /*!< 0x00000020 */
#define SAI_xCR2_MUTE              SAI_xCR2_MUTE_Msk                            /*!<Mute mode                        */
#define SAI_xCR2_MUTEVAL_Pos       (6U)
#define SAI_xCR2_MUTEVAL_Msk       (0x1UL << SAI_xCR2_MUTEVAL_Pos)              /*!< 0x00000040 */
#define SAI_xCR2_MUTEVAL           SAI_xCR2_MUTEVAL_Msk                         /*!<Muate value                      */

#define SAI_xCR2_MUTECNT_Pos       (7U)
#define SAI_xCR2_MUTECNT_Msk       (0x3FUL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00001F80 */
#define SAI_xCR2_MUTECNT           SAI_xCR2_MUTECNT_Msk                         /*!<MUTECNT[5:0] (MUTE counter) */
#define SAI_xCR2_MUTECNT_0         (0x01UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000080 */
#define SAI_xCR2_MUTECNT_1         (0x02UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000100 */
#define SAI_xCR2_MUTECNT_2         (0x04UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000200 */
#define SAI_xCR2_MUTECNT_3         (0x08UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000400 */
#define SAI_xCR2_MUTECNT_4         (0x10UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00000800 */
#define SAI_xCR2_MUTECNT_5         (0x20UL << SAI_xCR2_MUTECNT_Pos)             /*!< 0x00001000 */

#define SAI_xCR2_CPL_Pos           (13U)
#define SAI_xCR2_CPL_Msk           (0x1UL << SAI_xCR2_CPL_Pos)                  /*!< 0x00002000 */
#define SAI_xCR2_CPL               SAI_xCR2_CPL_Msk                             /*!< Complement Bit             */

#define SAI_xCR2_COMP_Pos          (14U)
#define SAI_xCR2_COMP_Msk          (0x3UL << SAI_xCR2_COMP_Pos)                 /*!< 0x0000C000 */
#define SAI_xCR2_COMP              SAI_xCR2_COMP_Msk                            /*!<COMP[1:0] (Companding mode) */
#define SAI_xCR2_COMP_0            (0x1UL << SAI_xCR2_COMP_Pos)                 /*!< 0x00004000 */
#define SAI_xCR2_COMP_1            (0x2UL << SAI_xCR2_COMP_Pos)                 /*!< 0x00008000 */

/******************  Bit definition for SAI_xFRCR register  *******************/
#define SAI_xFRCR_FRL_Pos          (0U)
#define SAI_xFRCR_FRL_Msk          (0xFFUL << SAI_xFRCR_FRL_Pos)                /*!< 0x000000FF */
#define SAI_xFRCR_FRL              SAI_xFRCR_FRL_Msk                            /*!<FRL[7:0](FRame Length)  */
#define SAI_xFRCR_FRL_0            (0x01UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000001 */
#define SAI_xFRCR_FRL_1            (0x02UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000002 */
#define SAI_xFRCR_FRL_2            (0x04UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000004 */
#define SAI_xFRCR_FRL_3            (0x08UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000008 */
#define SAI_xFRCR_FRL_4            (0x10UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000010 */
#define SAI_xFRCR_FRL_5            (0x20UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000020 */
#define SAI_xFRCR_FRL_6            (0x40UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000040 */
#define SAI_xFRCR_FRL_7            (0x80UL << SAI_xFRCR_FRL_Pos)                /*!< 0x00000080 */

#define SAI_xFRCR_FSALL_Pos        (8U)
#define SAI_xFRCR_FSALL_Msk        (0x7FUL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00007F00 */
#define SAI_xFRCR_FSALL            SAI_xFRCR_FSALL_Msk                          /*!<FSALL[6:0] (Frame Synchronization Active Level Length)  */
#define SAI_xFRCR_FSALL_0          (0x01UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000100 */
#define SAI_xFRCR_FSALL_1          (0x02UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000200 */
#define SAI_xFRCR_FSALL_2          (0x04UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000400 */
#define SAI_xFRCR_FSALL_3          (0x08UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00000800 */
#define SAI_xFRCR_FSALL_4          (0x10UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00001000 */
#define SAI_xFRCR_FSALL_5          (0x20UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00002000 */
#define SAI_xFRCR_FSALL_6          (0x40UL << SAI_xFRCR_FSALL_Pos)              /*!< 0x00004000 */

#define SAI_xFRCR_FSDEF_Pos        (16U)
#define SAI_xFRCR_FSDEF_Msk        (0x1UL << SAI_xFRCR_FSDEF_Pos)               /*!< 0x00010000 */
#define SAI_xFRCR_FSDEF            SAI_xFRCR_FSDEF_Msk                          /*!<Frame Synchronization Definition  */
#define SAI_xFRCR_FSPOL_Pos        (17U)
#define SAI_xFRCR_FSPOL_Msk        (0x1UL << SAI_xFRCR_FSPOL_Pos)               /*!< 0x00020000 */
#define SAI_xFRCR_FSPOL            SAI_xFRCR_FSPOL_Msk                          /*!<Frame Synchronization POLarity    */
#define SAI_xFRCR_FSOFF_Pos        (18U)
#define SAI_xFRCR_FSOFF_Msk        (0x1UL << SAI_xFRCR_FSOFF_Pos)               /*!< 0x00040000 */
#define SAI_xFRCR_FSOFF            SAI_xFRCR_FSOFF_Msk                          /*!<Frame Synchronization OFFset      */

/* Legacy define */
#define  SAI_xFRCR_FSPO                      SAI_xFRCR_FSPOL

/******************  Bit definition for SAI_xSLOTR register  *******************/
#define SAI_xSLOTR_FBOFF_Pos       (0U)
#define SAI_xSLOTR_FBOFF_Msk       (0x1FUL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x0000001F */
#define SAI_xSLOTR_FBOFF           SAI_xSLOTR_FBOFF_Msk                         /*!<FBOFF[4:0](First Bit Offset)  */
#define SAI_xSLOTR_FBOFF_0         (0x01UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000001 */
#define SAI_xSLOTR_FBOFF_1         (0x02UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000002 */
#define SAI_xSLOTR_FBOFF_2         (0x04UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000004 */
#define SAI_xSLOTR_FBOFF_3         (0x08UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000008 */
#define SAI_xSLOTR_FBOFF_4         (0x10UL << SAI_xSLOTR_FBOFF_Pos)             /*!< 0x00000010 */

#define SAI_xSLOTR_SLOTSZ_Pos      (6U)
#define SAI_xSLOTR_SLOTSZ_Msk      (0x3UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x000000C0 */
#define SAI_xSLOTR_SLOTSZ          SAI_xSLOTR_SLOTSZ_Msk                        /*!<SLOTSZ[1:0] (Slot size)  */
#define SAI_xSLOTR_SLOTSZ_0        (0x1UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x00000040 */
#define SAI_xSLOTR_SLOTSZ_1        (0x2UL << SAI_xSLOTR_SLOTSZ_Pos)             /*!< 0x00000080 */

#define SAI_xSLOTR_NBSLOT_Pos      (8U)
#define SAI_xSLOTR_NBSLOT_Msk      (0xFUL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000F00 */
#define SAI_xSLOTR_NBSLOT          SAI_xSLOTR_NBSLOT_Msk                        /*!<NBSLOT[3:0] (Number of Slot in audio Frame)  */
#define SAI_xSLOTR_NBSLOT_0        (0x1UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000100 */
#define SAI_xSLOTR_NBSLOT_1        (0x2UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000200 */
#define SAI_xSLOTR_NBSLOT_2        (0x4UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000400 */
#define SAI_xSLOTR_NBSLOT_3        (0x8UL << SAI_xSLOTR_NBSLOT_Pos)             /*!< 0x00000800 */

#define SAI_xSLOTR_SLOTEN_Pos      (16U)
#define SAI_xSLOTR_SLOTEN_Msk      (0xFFFFUL << SAI_xSLOTR_SLOTEN_Pos)          /*!< 0xFFFF0000 */
#define SAI_xSLOTR_SLOTEN          SAI_xSLOTR_SLOTEN_Msk                        /*!<SLOTEN[15:0] (Slot Enable)  */

/*******************  Bit definition for SAI_xIMR register  *******************/
#define SAI_xIMR_OVRUDRIE_Pos      (0U)
#define SAI_xIMR_OVRUDRIE_Msk      (0x1UL << SAI_xIMR_OVRUDRIE_Pos)             /*!< 0x00000001 */
#define SAI_xIMR_OVRUDRIE          SAI_xIMR_OVRUDRIE_Msk                        /*!<Overrun underrun interrupt enable                              */
#define SAI_xIMR_MUTEDETIE_Pos     (1U)
#define SAI_xIMR_MUTEDETIE_Msk     (0x1UL << SAI_xIMR_MUTEDETIE_Pos)            /*!< 0x00000002 */
#define SAI_xIMR_MUTEDETIE         SAI_xIMR_MUTEDETIE_Msk                       /*!<Mute detection interrupt enable                                */
#define SAI_xIMR_WCKCFGIE_Pos      (2U)
#define SAI_xIMR_WCKCFGIE_Msk      (0x1UL << SAI_xIMR_WCKCFGIE_Pos)             /*!< 0x00000004 */
#define SAI_xIMR_WCKCFGIE          SAI_xIMR_WCKCFGIE_Msk                        /*!<Wrong Clock Configuration interrupt enable                     */
#define SAI_xIMR_FREQIE_Pos        (3U)
#define SAI_xIMR_FREQIE_Msk        (0x1UL << SAI_xIMR_FREQIE_Pos)               /*!< 0x00000008 */
#define SAI_xIMR_FREQIE            SAI_xIMR_FREQIE_Msk                          /*!<FIFO request interrupt enable                                  */
#define SAI_xIMR_CNRDYIE_Pos       (4U)
#define SAI_xIMR_CNRDYIE_Msk       (0x1UL << SAI_xIMR_CNRDYIE_Pos)              /*!< 0x00000010 */
#define SAI_xIMR_CNRDYIE           SAI_xIMR_CNRDYIE_Msk                         /*!<Codec not ready interrupt enable                               */
#define SAI_xIMR_AFSDETIE_Pos      (5U)
#define SAI_xIMR_AFSDETIE_Msk      (0x1UL << SAI_xIMR_AFSDETIE_Pos)             /*!< 0x00000020 */
#define SAI_xIMR_AFSDETIE          SAI_xIMR_AFSDETIE_Msk                        /*!<Anticipated frame synchronization detection interrupt enable   */
#define SAI_xIMR_LFSDETIE_Pos      (6U)
#define SAI_xIMR_LFSDETIE_Msk      (0x1UL << SAI_xIMR_LFSDETIE_Pos)             /*!< 0x00000040 */
#define SAI_xIMR_LFSDETIE          SAI_xIMR_LFSDETIE_Msk                        /*!<Late frame synchronization detection interrupt enable          */

/********************  Bit definition for SAI_xSR register  *******************/
#define SAI_xSR_OVRUDR_Pos         (0U)
#define SAI_xSR_OVRUDR_Msk         (0x1UL << SAI_xSR_OVRUDR_Pos)                /*!< 0x00000001 */
#define SAI_xSR_OVRUDR             SAI_xSR_OVRUDR_Msk                           /*!<Overrun underrun                               */
#define SAI_xSR_MUTEDET_Pos        (1U)
#define SAI_xSR_MUTEDET_Msk        (0x1UL << SAI_xSR_MUTEDET_Pos)               /*!< 0x00000002 */
#define SAI_xSR_MUTEDET            SAI_xSR_MUTEDET_Msk                          /*!<Mute detection                                 */
#define SAI_xSR_WCKCFG_Pos         (2U)
#define SAI_xSR_WCKCFG_Msk         (0x1UL << SAI_xSR_WCKCFG_Pos)                /*!< 0x00000004 */
#define SAI_xSR_WCKCFG             SAI_xSR_WCKCFG_Msk                           /*!<Wrong Clock Configuration                      */
#define SAI_xSR_FREQ_Pos           (3U)
#define SAI_xSR_FREQ_Msk           (0x1UL << SAI_xSR_FREQ_Pos)                  /*!< 0x00000008 */
#define SAI_xSR_FREQ               SAI_xSR_FREQ_Msk                             /*!<FIFO request                                   */
#define SAI_xSR_CNRDY_Pos          (4U)
#define SAI_xSR_CNRDY_Msk          (0x1UL << SAI_xSR_CNRDY_Pos)                 /*!< 0x00000010 */
#define SAI_xSR_CNRDY              SAI_xSR_CNRDY_Msk                            /*!<Codec not ready                                */
#define SAI_xSR_AFSDET_Pos         (5U)
#define SAI_xSR_AFSDET_Msk         (0x1UL << SAI_xSR_AFSDET_Pos)                /*!< 0x00000020 */
#define SAI_xSR_AFSDET             SAI_xSR_AFSDET_Msk                           /*!<Anticipated frame synchronization detection    */
#define SAI_xSR_LFSDET_Pos         (6U)
#define SAI_xSR_LFSDET_Msk         (0x1UL << SAI_xSR_LFSDET_Pos)                /*!< 0x00000040 */
#define SAI_xSR_LFSDET             SAI_xSR_LFSDET_Msk                           /*!<Late frame synchronization detection           */

#define SAI_xSR_FLVL_Pos           (16U)
#define SAI_xSR_FLVL_Msk           (0x7UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00070000 */
#define SAI_xSR_FLVL               SAI_xSR_FLVL_Msk                             /*!<FLVL[2:0] (FIFO Level Threshold)               */
#define SAI_xSR_FLVL_0             (0x1UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00010000 */
#define SAI_xSR_FLVL_1             (0x2UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00020000 */
#define SAI_xSR_FLVL_2             (0x4UL << SAI_xSR_FLVL_Pos)                  /*!< 0x00040000 */

/******************  Bit definition for SAI_xCLRFR register  ******************/
#define SAI_xCLRFR_COVRUDR_Pos     (0U)
#define SAI_xCLRFR_COVRUDR_Msk     (0x1UL << SAI_xCLRFR_COVRUDR_Pos)            /*!< 0x00000001 */
#define SAI_xCLRFR_COVRUDR         SAI_xCLRFR_COVRUDR_Msk                       /*!<Clear Overrun underrun                               */
#define SAI_xCLRFR_CMUTEDET_Pos    (1U)
#define SAI_xCLRFR_CMUTEDET_Msk    (0x1UL << SAI_xCLRFR_CMUTEDET_Pos)           /*!< 0x00000002 */
#define SAI_xCLRFR_CMUTEDET        SAI_xCLRFR_CMUTEDET_Msk                      /*!<Clear Mute detection                                 */
#define SAI_xCLRFR_CWCKCFG_Pos     (2U)
#define SAI_xCLRFR_CWCKCFG_Msk     (0x1UL << SAI_xCLRFR_CWCKCFG_Pos)            /*!< 0x00000004 */
#define SAI_xCLRFR_CWCKCFG         SAI_xCLRFR_CWCKCFG_Msk                       /*!<Clear Wrong Clock Configuration                      */
#define SAI_xCLRFR_CFREQ_Pos       (3U)
#define SAI_xCLRFR_CFREQ_Msk       (0x1UL << SAI_xCLRFR_CFREQ_Pos)              /*!< 0x00000008 */
#define SAI_xCLRFR_CFREQ           SAI_xCLRFR_CFREQ_Msk                         /*!<Clear FIFO request                                   */
#define SAI_xCLRFR_CCNRDY_Pos      (4U)
#define SAI_xCLRFR_CCNRDY_Msk      (0x1UL << SAI_xCLRFR_CCNRDY_Pos)             /*!< 0x00000010 */
#define SAI_xCLRFR_CCNRDY          SAI_xCLRFR_CCNRDY_Msk                        /*!<Clear Codec not ready                                */
#define SAI_xCLRFR_CAFSDET_Pos     (5U)
#define SAI_xCLRFR_CAFSDET_Msk     (0x1UL << SAI_xCLRFR_CAFSDET_Pos)            /*!< 0x00000020 */
#define SAI_xCLRFR_CAFSDET         SAI_xCLRFR_CAFSDET_Msk                       /*!<Clear Anticipated frame synchronization detection    */
#define SAI_xCLRFR_CLFSDET_Pos     (6U)
#define SAI_xCLRFR_CLFSDET_Msk     (0x1UL << SAI_xCLRFR_CLFSDET_Pos)            /*!< 0x00000040 */
#define SAI_xCLRFR_CLFSDET         SAI_xCLRFR_CLFSDET_Msk                       /*!<Clear Late frame synchronization detection           */

/******************  Bit definition for SAI_xDR register  *********************/
#define SAI_xDR_DATA_Pos           (0U)
#define SAI_xDR_DATA_Msk           (0xFFFFFFFFUL << SAI_xDR_DATA_Pos)           /*!< 0xFFFFFFFF */
#define SAI_xDR_DATA               SAI_xDR_DATA_Msk

/*******************  Bit definition for SAI_PDMCR register  ******************/
#define SAI_PDMCR_PDMEN_Pos        (0U)
#define SAI_PDMCR_PDMEN_Msk        (0x1UL << SAI_PDMCR_PDMEN_Pos)               /*!< 0x00000001 */
#define SAI_PDMCR_PDMEN            SAI_PDMCR_PDMEN_Msk                          /*!<PDM Enable                                          */

#define SAI_PDMCR_MICNBR_Pos       (4U)
#define SAI_PDMCR_MICNBR_Msk       (0x3UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000030 */
#define SAI_PDMCR_MICNBR           SAI_PDMCR_MICNBR_Msk                         /*!<Number of microphones                               */
#define SAI_PDMCR_MICNBR_0         (0x1UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000010 */
#define SAI_PDMCR_MICNBR_1         (0x2UL << SAI_PDMCR_MICNBR_Pos)              /*!< 0x00000020 */

#define SAI_PDMCR_CKEN1_Pos        (8U)
#define SAI_PDMCR_CKEN1_Msk        (0x1UL << SAI_PDMCR_CKEN1_Pos)               /*!< 0x00000100 */
#define SAI_PDMCR_CKEN1            SAI_PDMCR_CKEN1_Msk                          /*!<Clock enable of bitstream clock number 1            */
#define SAI_PDMCR_CKEN2_Pos        (9U)
#define SAI_PDMCR_CKEN2_Msk        (0x1UL << SAI_PDMCR_CKEN2_Pos)               /*!< 0x00000200 */
#define SAI_PDMCR_CKEN2            SAI_PDMCR_CKEN2_Msk                          /*!<Clock enable of bitstream clock number 2            */
#define SAI_PDMCR_CKEN3_Pos        (10U)
#define SAI_PDMCR_CKEN3_Msk        (0x1UL << SAI_PDMCR_CKEN3_Pos)               /*!< 0x00000400 */
#define SAI_PDMCR_CKEN3            SAI_PDMCR_CKEN3_Msk                          /*!<Clock enable of bitstream clock number 3            */
#define SAI_PDMCR_CKEN4_Pos        (11U)
#define SAI_PDMCR_CKEN4_Msk        (0x1UL << SAI_PDMCR_CKEN4_Pos)               /*!< 0x00000800 */
#define SAI_PDMCR_CKEN4            SAI_PDMCR_CKEN4_Msk                          /*!<Clock enable of bitstream clock number 4            */

/******************  Bit definition for SAI_PDMDLY register  ******************/
#define SAI_PDMDLY_DLYM1L_Pos      (0U)
#define SAI_PDMDLY_DLYM1L_Msk      (0x7UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000007 */
#define SAI_PDMDLY_DLYM1L          SAI_PDMDLY_DLYM1L_Msk                        /*!<DLYM1L[2:0] (Delay line adjust for left microphone of pair 1) */
#define SAI_PDMDLY_DLYM1L_0        (0x1UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000001 */
#define SAI_PDMDLY_DLYM1L_1        (0x2UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000002 */
#define SAI_PDMDLY_DLYM1L_2        (0x4UL << SAI_PDMDLY_DLYM1L_Pos)             /*!< 0x00000004 */

#define SAI_PDMDLY_DLYM1R_Pos      (4U)
#define SAI_PDMDLY_DLYM1R_Msk      (0x7UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000070 */
#define SAI_PDMDLY_DLYM1R          SAI_PDMDLY_DLYM1R_Msk                        /*!<DLYM1R[2:0] (Delay line adjust for right microphone of pair 1) */
#define SAI_PDMDLY_DLYM1R_0        (0x1UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000010 */
#define SAI_PDMDLY_DLYM1R_1        (0x2UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000020 */
#define SAI_PDMDLY_DLYM1R_2        (0x4UL << SAI_PDMDLY_DLYM1R_Pos)             /*!< 0x00000040 */

#define SAI_PDMDLY_DLYM2L_Pos      (8U)
#define SAI_PDMDLY_DLYM2L_Msk      (0x7UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000700 */
#define SAI_PDMDLY_DLYM2L          SAI_PDMDLY_DLYM2L_Msk                        /*!<DLYM2L[2:0] (Delay line adjust for left microphone of pair 2) */
#define SAI_PDMDLY_DLYM2L_0        (0x1UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000100 */
#define SAI_PDMDLY_DLYM2L_1        (0x2UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000200 */
#define SAI_PDMDLY_DLYM2L_2        (0x4UL << SAI_PDMDLY_DLYM2L_Pos)             /*!< 0x00000400 */

#define SAI_PDMDLY_DLYM2R_Pos      (12U)
#define SAI_PDMDLY_DLYM2R_Msk      (0x7UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00007000 */
#define SAI_PDMDLY_DLYM2R          SAI_PDMDLY_DLYM2R_Msk                        /*!<DLYM2R[2:0] (Delay line adjust for right microphone of pair 2)*/
#define SAI_PDMDLY_DLYM2R_0        (0x1UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00001000 */
#define SAI_PDMDLY_DLYM2R_1        (0x2UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00002000 */
#define SAI_PDMDLY_DLYM2R_2        (0x4UL << SAI_PDMDLY_DLYM2R_Pos)             /*!< 0x00004000 */

#define SAI_PDMDLY_DLYM3L_Pos      (16U)
#define SAI_PDMDLY_DLYM3L_Msk      (0x7UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00070000 */
#define SAI_PDMDLY_DLYM3L          SAI_PDMDLY_DLYM3L_Msk                        /*!<DLYM3L[2:0] (Delay line adjust for left microphone of pair 3)*/
#define SAI_PDMDLY_DLYM3L_0        (0x1UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00010000 */
#define SAI_PDMDLY_DLYM3L_1        (0x2UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00020000 */
#define SAI_PDMDLY_DLYM3L_2        (0x4UL << SAI_PDMDLY_DLYM3L_Pos)             /*!< 0x00040000 */

#define SAI_PDMDLY_DLYM3R_Pos      (20U)
#define SAI_PDMDLY_DLYM3R_Msk      (0x7UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00700000 */
#define SAI_PDMDLY_DLYM3R          SAI_PDMDLY_DLYM3R_Msk                        /*!<DLYM3R[2:0] (Delay line adjust for right microphone of pair 3)*/
#define SAI_PDMDLY_DLYM3R_0        (0x1UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00100000 */
#define SAI_PDMDLY_DLYM3R_1        (0x2UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00200000 */
#define SAI_PDMDLY_DLYM3R_2        (0x4UL << SAI_PDMDLY_DLYM3R_Pos)             /*!< 0x00400000 */

#define SAI_PDMDLY_DLYM4L_Pos      (24U)
#define SAI_PDMDLY_DLYM4L_Msk      (0x7UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x07000000 */
#define SAI_PDMDLY_DLYM4L          SAI_PDMDLY_DLYM4L_Msk                        /*!<DLYM4L[2:0] (Delay line adjust for left microphone of pair 4)*/
#define SAI_PDMDLY_DLYM4L_0        (0x1UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x01000000 */
#define SAI_PDMDLY_DLYM4L_1        (0x2UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x02000000 */
#define SAI_PDMDLY_DLYM4L_2        (0x4UL << SAI_PDMDLY_DLYM4L_Pos)             /*!< 0x04000000 */

#define SAI_PDMDLY_DLYM4R_Pos      (28U)
#define SAI_PDMDLY_DLYM4R_Msk      (0x7UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x70000000 */
#define SAI_PDMDLY_DLYM4R          SAI_PDMDLY_DLYM4R_Msk                        /*!<DLYM4R[2:0] (Delay line adjust for right microphone of pair 4)*/
#define SAI_PDMDLY_DLYM4R_0        (0x1UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x10000000 */
#define SAI_PDMDLY_DLYM4R_1        (0x2UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x20000000 */
#define SAI_PDMDLY_DLYM4R_2        (0x4UL << SAI_PDMDLY_DLYM4R_Pos)             /*!< 0x40000000 */

/**********************  Bit definition for SAI_HWCFGR register  **************/
#define SAI_HWCFGR_FIFO_SIZE_Pos      (0U)
#define SAI_HWCFGR_FIFO_SIZE_Msk      (0xFFUL << SAI_HWCFGR_FIFO_SIZE_Pos)      /*!< 0x000000FF */
#define SAI_HWCFGR_FIFO_SIZE          SAI_HWCFGR_FIFO_SIZE_Msk                  /*!< FIFO size for SAIA and SAIB */
#define SAI_HWCFGR_SPDIF_PDM_Pos      (8U)
#define SAI_HWCFGR_SPDIF_PDM_Msk      (0xFUL << SAI_HWCFGR_SPDIF_PDM_Pos)       /*!< 0x00000F00 */
#define SAI_HWCFGR_SPDIF_PDM          SAI_HWCFGR_SPDIF_PDM_Msk                  /*!< Support of SPDIF-OUT and PDM interfaces */
#define SAI_HWCFGR_OPTION_REGOUT_Pos  (12U)
#define SAI_HWCFGR_OPTION_REGOUT_Msk  (0xFFUL << SAI_HWCFGR_OPTION_REGOUT_Pos)  /*!< 0x000FF000 */
#define SAI_HWCFGR_OPTION_REGOUT      SAI_HWCFGR_OPTION_REGOUT_Msk              /*!< Support of SAI_IOR register */

/**********************  Bit definition for SAI_VERR register  ****************/
#define SAI_VERR_MINREV_Pos      (0U)
#define SAI_VERR_MINREV_Msk      (0xFUL << SAI_VERR_MINREV_Pos)                 /*!< 0x0000000F */
#define SAI_VERR_MINREV          SAI_VERR_MINREV_Msk                            /*!< Minor Revision number */
#define SAI_VERR_MAJREV_Pos      (4U)
#define SAI_VERR_MAJREV_Msk      (0xFUL << SAI_VERR_MAJREV_Pos)                 /*!< 0x000000F0 */
#define SAI_VERR_MAJREV          SAI_VERR_MAJREV_Msk                            /*!< Major Revision number */

/**********************  Bit definition for SAI_IPIDR register  ***************/
#define SAI_IPIDR_IPID_Pos       (0U)
#define SAI_IPIDR_IPID_Msk       (0xFFFFFFFFUL << SAI_IPIDR_IPID_Pos)           /*!< 0xFFFFFFFF */
#define SAI_IPIDR_IPID           SAI_IPIDR_IPID_Msk                             /*!< IP Identification */

/**********************  Bit definition for SAI_SIDR register  ****************/
#define SAI_SIDR_SID_Pos         (0U)
#define SAI_SIDR_SID_Msk         (0xFFFFFFFFUL << SAI_SIDR_SID_Pos)             /*!< 0xFFFFFFFF */
#define SAI_SIDR_SID             SAI_SIDR_SID_Msk                               /*!< IP size identification */

/******************************************************************************/
/*                                                                            */
/*                           SDMMC Interface                                  */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for SDMMC_POWER register  ******************/
#define SDMMC_POWER_PWRCTRL_Pos          (0U)
#define SDMMC_POWER_PWRCTRL_Msk          (0x3UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000003 */
#define SDMMC_POWER_PWRCTRL              SDMMC_POWER_PWRCTRL_Msk               /*!<PWRCTRL[1:0] bits (Power supply control bits) */
#define SDMMC_POWER_PWRCTRL_0            (0x1UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000001 */
#define SDMMC_POWER_PWRCTRL_1            (0x2UL << SDMMC_POWER_PWRCTRL_Pos)    /*!< 0x00000002 */
#define SDMMC_POWER_VSWITCH_Pos          (2U)
#define SDMMC_POWER_VSWITCH_Msk          (0x1UL << SDMMC_POWER_VSWITCH_Pos)    /*!< 0x00000004 */
#define SDMMC_POWER_VSWITCH              SDMMC_POWER_VSWITCH_Msk               /*!<Voltage switch sequence start */
#define SDMMC_POWER_VSWITCHEN_Pos        (3U)
#define SDMMC_POWER_VSWITCHEN_Msk        (0x1UL << SDMMC_POWER_VSWITCHEN_Pos)  /*!< 0x00000008 */
#define SDMMC_POWER_VSWITCHEN            SDMMC_POWER_VSWITCHEN_Msk             /*!<Voltage switch procedure enable */
#define SDMMC_POWER_DIRPOL_Pos           (4U)
#define SDMMC_POWER_DIRPOL_Msk           (0x1UL << SDMMC_POWER_DIRPOL_Pos)     /*!< 0x00000010 */
#define SDMMC_POWER_DIRPOL               SDMMC_POWER_DIRPOL_Msk                /*!<Data and Command direction signals polarity selection */

/******************  Bit definition for SDMMC_CLKCR register  ******************/
#define SDMMC_CLKCR_CLKDIV_Pos           (0U)
#define SDMMC_CLKCR_CLKDIV_Msk           (0x3FFUL << SDMMC_CLKCR_CLKDIV_Pos)   /*!< 0x000003FF */
#define SDMMC_CLKCR_CLKDIV               SDMMC_CLKCR_CLKDIV_Msk                /*!<Clock divide factor             */
#define SDMMC_CLKCR_PWRSAV_Pos           (12U)
#define SDMMC_CLKCR_PWRSAV_Msk           (0x1UL << SDMMC_CLKCR_PWRSAV_Pos)     /*!< 0x00001000 */
#define SDMMC_CLKCR_PWRSAV               SDMMC_CLKCR_PWRSAV_Msk                /*!<Power saving configuration bit  */

#define SDMMC_CLKCR_WIDBUS_Pos           (14U)
#define SDMMC_CLKCR_WIDBUS_Msk           (0x3UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x0000C000 */
#define SDMMC_CLKCR_WIDBUS               SDMMC_CLKCR_WIDBUS_Msk                /*!<WIDBUS[1:0] bits (Wide bus mode enable bit) */
#define SDMMC_CLKCR_WIDBUS_0             (0x1UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x00004000 */
#define SDMMC_CLKCR_WIDBUS_1             (0x2UL << SDMMC_CLKCR_WIDBUS_Pos)     /*!< 0x00008000 */

#define SDMMC_CLKCR_NEGEDGE_Pos          (16U)
#define SDMMC_CLKCR_NEGEDGE_Msk          (0x1UL << SDMMC_CLKCR_NEGEDGE_Pos)    /*!< 0x00010000 */
#define SDMMC_CLKCR_NEGEDGE              SDMMC_CLKCR_NEGEDGE_Msk               /*!<SDMMC_CK dephasing selection bit */
#define SDMMC_CLKCR_HWFC_EN_Pos          (17U)
#define SDMMC_CLKCR_HWFC_EN_Msk          (0x1UL << SDMMC_CLKCR_HWFC_EN_Pos)    /*!< 0x00020000 */
#define SDMMC_CLKCR_HWFC_EN              SDMMC_CLKCR_HWFC_EN_Msk               /*!<HW Flow Control enable           */
#define SDMMC_CLKCR_DDR_Pos              (18U)
#define SDMMC_CLKCR_DDR_Msk              (0x1UL << SDMMC_CLKCR_DDR_Pos)        /*!< 0x00040000 */
#define SDMMC_CLKCR_DDR                  SDMMC_CLKCR_DDR_Msk                   /*!<Data rate signaling selection    */
#define SDMMC_CLKCR_BUSSPEED_Pos         (19U)
#define SDMMC_CLKCR_BUSSPEED_Msk         (0x1UL << SDMMC_CLKCR_BUSSPEED_Pos)   /*!< 0x00080000 */
#define SDMMC_CLKCR_BUSSPEED             SDMMC_CLKCR_BUSSPEED_Msk              /*!<Bus speed mode selection         */
#define SDMMC_CLKCR_SELCLKRX_Pos         (20U)
#define SDMMC_CLKCR_SELCLKRX_Msk         (0x3UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00300000 */
#define SDMMC_CLKCR_SELCLKRX             SDMMC_CLKCR_SELCLKRX_Msk              /*!<SELCLKRX[1:0] bits (Receive clock selection) */
#define SDMMC_CLKCR_SELCLKRX_0           (0x1UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00100000 */
#define SDMMC_CLKCR_SELCLKRX_1           (0x2UL << SDMMC_CLKCR_SELCLKRX_Pos)   /*!< 0x00200000 */

/*******************  Bit definition for SDMMC_ARG register  *******************/
#define SDMMC_ARG_CMDARG_Pos             (0U)
#define SDMMC_ARG_CMDARG_Msk             (0xFFFFFFFFUL << SDMMC_ARG_CMDARG_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_ARG_CMDARG                 SDMMC_ARG_CMDARG_Msk                  /*!<Command argument */

/*******************  Bit definition for SDMMC_CMD register  *******************/
#define SDMMC_CMD_CMDINDEX_Pos           (0U)
#define SDMMC_CMD_CMDINDEX_Msk           (0x3FUL << SDMMC_CMD_CMDINDEX_Pos)    /*!< 0x0000003F */
#define SDMMC_CMD_CMDINDEX               SDMMC_CMD_CMDINDEX_Msk                /*!<Command Index                               */
#define SDMMC_CMD_CMDTRANS_Pos           (6U)
#define SDMMC_CMD_CMDTRANS_Msk           (0x1UL << SDMMC_CMD_CMDTRANS_Pos)     /*!< 0x00000040 */
#define SDMMC_CMD_CMDTRANS               SDMMC_CMD_CMDTRANS_Msk                /*!<CPSM Treats command as a Data Transfer      */
#define SDMMC_CMD_CMDSTOP_Pos            (7U)
#define SDMMC_CMD_CMDSTOP_Msk            (0x1UL << SDMMC_CMD_CMDSTOP_Pos)      /*!< 0x00000080 */
#define SDMMC_CMD_CMDSTOP                SDMMC_CMD_CMDSTOP_Msk                 /*!<CPSM Treats command as a Stop               */

#define SDMMC_CMD_WAITRESP_Pos           (8U)
#define SDMMC_CMD_WAITRESP_Msk           (0x3UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000300 */
#define SDMMC_CMD_WAITRESP               SDMMC_CMD_WAITRESP_Msk                /*!<WAITRESP[1:0] bits (Wait for response bits) */
#define SDMMC_CMD_WAITRESP_0             (0x1UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000100 */
#define SDMMC_CMD_WAITRESP_1             (0x2UL << SDMMC_CMD_WAITRESP_Pos)     /*!< 0x00000200 */

#define SDMMC_CMD_WAITINT_Pos            (10U)
#define SDMMC_CMD_WAITINT_Msk            (0x1UL << SDMMC_CMD_WAITINT_Pos)      /*!< 0x00000400 */
#define SDMMC_CMD_WAITINT                SDMMC_CMD_WAITINT_Msk                 /*!<CPSM Waits for Interrupt Request                               */
#define SDMMC_CMD_WAITPEND_Pos           (11U)
#define SDMMC_CMD_WAITPEND_Msk           (0x1UL << SDMMC_CMD_WAITPEND_Pos)     /*!< 0x00000800 */
#define SDMMC_CMD_WAITPEND               SDMMC_CMD_WAITPEND_Msk                /*!<CPSM Waits for ends of data transfer (CmdPend internal signal) */
#define SDMMC_CMD_CPSMEN_Pos             (12U)
#define SDMMC_CMD_CPSMEN_Msk             (0x1UL << SDMMC_CMD_CPSMEN_Pos)       /*!< 0x00001000 */
#define SDMMC_CMD_CPSMEN                 SDMMC_CMD_CPSMEN_Msk                  /*!<Command path state machine (CPSM) Enable bit                   */
#define SDMMC_CMD_DTHOLD_Pos             (13U)
#define SDMMC_CMD_DTHOLD_Msk             (0x1UL << SDMMC_CMD_DTHOLD_Pos)       /*!< 0x00002000 */
#define SDMMC_CMD_DTHOLD                 SDMMC_CMD_DTHOLD_Msk                  /*!<Hold new data block transmission and reception in the DPSM     */
#define SDMMC_CMD_BOOTMODE_Pos           (14U)
#define SDMMC_CMD_BOOTMODE_Msk           (0x1UL << SDMMC_CMD_BOOTMODE_Pos)     /*!< 0x00004000 */
#define SDMMC_CMD_BOOTMODE               SDMMC_CMD_BOOTMODE_Msk                /*!<Boot mode                                                      */
#define SDMMC_CMD_BOOTEN_Pos             (15U)
#define SDMMC_CMD_BOOTEN_Msk             (0x1UL << SDMMC_CMD_BOOTEN_Pos)       /*!< 0x00008000 */
#define SDMMC_CMD_BOOTEN                 SDMMC_CMD_BOOTEN_Msk                  /*!<Enable Boot mode procedure                                     */
#define SDMMC_CMD_CMDSUSPEND_Pos         (16U)
#define SDMMC_CMD_CMDSUSPEND_Msk         (0x1UL << SDMMC_CMD_CMDSUSPEND_Pos)   /*!< 0x00010000 */
#define SDMMC_CMD_CMDSUSPEND             SDMMC_CMD_CMDSUSPEND_Msk              /*!<CPSM Treats command as a Suspend or Resume command             */

/*****************  Bit definition for SDMMC_RESPCMD register  *****************/
#define SDMMC_RESPCMD_RESPCMD_Pos        (0U)
#define SDMMC_RESPCMD_RESPCMD_Msk        (0x3FUL << SDMMC_RESPCMD_RESPCMD_Pos) /*!< 0x0000003F */
#define SDMMC_RESPCMD_RESPCMD            SDMMC_RESPCMD_RESPCMD_Msk             /*!<Response command index */

/******************  Bit definition for SDMMC_RESP1 register  ******************/
#define SDMMC_RESP1_CARDSTATUS1_Pos      (0U)
#define SDMMC_RESP1_CARDSTATUS1_Msk      (0xFFFFFFFFUL << SDMMC_RESP1_CARDSTATUS1_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP1_CARDSTATUS1          SDMMC_RESP1_CARDSTATUS1_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP2 register  ******************/
#define SDMMC_RESP2_CARDSTATUS2_Pos      (0U)
#define SDMMC_RESP2_CARDSTATUS2_Msk      (0xFFFFFFFFUL << SDMMC_RESP2_CARDSTATUS2_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP2_CARDSTATUS2          SDMMC_RESP2_CARDSTATUS2_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP3 register  ******************/
#define SDMMC_RESP3_CARDSTATUS3_Pos      (0U)
#define SDMMC_RESP3_CARDSTATUS3_Msk      (0xFFFFFFFFUL << SDMMC_RESP3_CARDSTATUS3_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP3_CARDSTATUS3          SDMMC_RESP3_CARDSTATUS3_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_RESP4 register  ******************/
#define SDMMC_RESP4_CARDSTATUS4_Pos      (0U)
#define SDMMC_RESP4_CARDSTATUS4_Msk      (0xFFFFFFFFUL << SDMMC_RESP4_CARDSTATUS4_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_RESP4_CARDSTATUS4          SDMMC_RESP4_CARDSTATUS4_Msk           /*!<Card Status */

/******************  Bit definition for SDMMC_DTIMER register  *****************/
#define SDMMC_DTIMER_DATATIME_Pos        (0U)
#define SDMMC_DTIMER_DATATIME_Msk        (0xFFFFFFFFUL << SDMMC_DTIMER_DATATIME_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_DTIMER_DATATIME            SDMMC_DTIMER_DATATIME_Msk             /*!<Data timeout period. */

/******************  Bit definition for SDMMC_DLEN register  *******************/
#define SDMMC_DLEN_DATALENGTH_Pos        (0U)
#define SDMMC_DLEN_DATALENGTH_Msk        (0x1FFFFFFUL << SDMMC_DLEN_DATALENGTH_Pos) /*!< 0x01FFFFFF */
#define SDMMC_DLEN_DATALENGTH            SDMMC_DLEN_DATALENGTH_Msk             /*!<Data length value    */

/******************  Bit definition for SDMMC_DCTRL register  ******************/
#define SDMMC_DCTRL_DTEN_Pos             (0U)
#define SDMMC_DCTRL_DTEN_Msk             (0x1UL << SDMMC_DCTRL_DTEN_Pos)       /*!< 0x00000001 */
#define SDMMC_DCTRL_DTEN                 SDMMC_DCTRL_DTEN_Msk                  /*!<Data transfer enabled bit                */
#define SDMMC_DCTRL_DTDIR_Pos            (1U)
#define SDMMC_DCTRL_DTDIR_Msk            (0x1UL << SDMMC_DCTRL_DTDIR_Pos)      /*!< 0x00000002 */
#define SDMMC_DCTRL_DTDIR                SDMMC_DCTRL_DTDIR_Msk                 /*!<Data transfer direction selection        */
#define SDMMC_DCTRL_DTMODE_Pos           (2U)
#define SDMMC_DCTRL_DTMODE_Msk           (0x3UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x0000000C */
#define SDMMC_DCTRL_DTMODE               SDMMC_DCTRL_DTMODE_Msk                /*!<DTMODE[1:0] Data transfer mode selection */
#define SDMMC_DCTRL_DTMODE_0             (0x1UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x00000004 */
#define SDMMC_DCTRL_DTMODE_1             (0x2UL << SDMMC_DCTRL_DTMODE_Pos)     /*!< 0x00000008 */

#define SDMMC_DCTRL_DBLOCKSIZE_Pos       (4U)
#define SDMMC_DCTRL_DBLOCKSIZE_Msk       (0xFUL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x000000F0 */
#define SDMMC_DCTRL_DBLOCKSIZE           SDMMC_DCTRL_DBLOCKSIZE_Msk            /*!<DBLOCKSIZE[3:0] bits (Data block size) */
#define SDMMC_DCTRL_DBLOCKSIZE_0         (0x1UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000010 */
#define SDMMC_DCTRL_DBLOCKSIZE_1         (0x2UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000020 */
#define SDMMC_DCTRL_DBLOCKSIZE_2         (0x4UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000040 */
#define SDMMC_DCTRL_DBLOCKSIZE_3         (0x8UL << SDMMC_DCTRL_DBLOCKSIZE_Pos) /*!< 0x00000080 */

#define SDMMC_DCTRL_RWSTART_Pos          (8U)
#define SDMMC_DCTRL_RWSTART_Msk          (0x1UL << SDMMC_DCTRL_RWSTART_Pos)    /*!< 0x00000100 */
#define SDMMC_DCTRL_RWSTART              SDMMC_DCTRL_RWSTART_Msk               /*!<Read wait start                                 */
#define SDMMC_DCTRL_RWSTOP_Pos           (9U)
#define SDMMC_DCTRL_RWSTOP_Msk           (0x1UL << SDMMC_DCTRL_RWSTOP_Pos)     /*!< 0x00000200 */
#define SDMMC_DCTRL_RWSTOP               SDMMC_DCTRL_RWSTOP_Msk                /*!<Read wait stop                                  */
#define SDMMC_DCTRL_RWMOD_Pos            (10U)
#define SDMMC_DCTRL_RWMOD_Msk            (0x1UL << SDMMC_DCTRL_RWMOD_Pos)      /*!< 0x00000400 */
#define SDMMC_DCTRL_RWMOD                SDMMC_DCTRL_RWMOD_Msk                 /*!<Read wait mode                                  */
#define SDMMC_DCTRL_SDIOEN_Pos           (11U)
#define SDMMC_DCTRL_SDIOEN_Msk           (0x1UL << SDMMC_DCTRL_SDIOEN_Pos)     /*!< 0x00000800 */
#define SDMMC_DCTRL_SDIOEN               SDMMC_DCTRL_SDIOEN_Msk                /*!<SD I/O enable functions                         */
#define SDMMC_DCTRL_BOOTACKEN_Pos        (12U)
#define SDMMC_DCTRL_BOOTACKEN_Msk        (0x1UL << SDMMC_DCTRL_BOOTACKEN_Pos)  /*!< 0x00001000 */
#define SDMMC_DCTRL_BOOTACKEN            SDMMC_DCTRL_BOOTACKEN_Msk             /*!<Enable the reception of the Boot Acknowledgment */
#define SDMMC_DCTRL_FIFORST_Pos          (13U)
#define SDMMC_DCTRL_FIFORST_Msk          (0x1UL << SDMMC_DCTRL_FIFORST_Pos)    /*!< 0x00002000 */
#define SDMMC_DCTRL_FIFORST              SDMMC_DCTRL_FIFORST_Msk               /*!<FIFO reset                                      */

/******************  Bit definition for SDMMC_DCOUNT register  *****************/
#define SDMMC_DCOUNT_DATACOUNT_Pos       (0U)
#define SDMMC_DCOUNT_DATACOUNT_Msk       (0x1FFFFFFUL << SDMMC_DCOUNT_DATACOUNT_Pos) /*!< 0x01FFFFFF */
#define SDMMC_DCOUNT_DATACOUNT           SDMMC_DCOUNT_DATACOUNT_Msk            /*!<Data count value */

/******************  Bit definition for SDMMC_STA register  ********************/
#define SDMMC_STA_CCRCFAIL_Pos           (0U)
#define SDMMC_STA_CCRCFAIL_Msk           (0x1UL << SDMMC_STA_CCRCFAIL_Pos)     /*!< 0x00000001 */
#define SDMMC_STA_CCRCFAIL               SDMMC_STA_CCRCFAIL_Msk                /*!<Command response received (CRC check failed)  */
#define SDMMC_STA_DCRCFAIL_Pos           (1U)
#define SDMMC_STA_DCRCFAIL_Msk           (0x1UL << SDMMC_STA_DCRCFAIL_Pos)     /*!< 0x00000002 */
#define SDMMC_STA_DCRCFAIL               SDMMC_STA_DCRCFAIL_Msk                /*!<Data block sent/received (CRC check failed)   */
#define SDMMC_STA_CTIMEOUT_Pos           (2U)
#define SDMMC_STA_CTIMEOUT_Msk           (0x1UL << SDMMC_STA_CTIMEOUT_Pos)     /*!< 0x00000004 */
#define SDMMC_STA_CTIMEOUT               SDMMC_STA_CTIMEOUT_Msk                /*!<Command response timeout                      */
#define SDMMC_STA_DTIMEOUT_Pos           (3U)
#define SDMMC_STA_DTIMEOUT_Msk           (0x1UL << SDMMC_STA_DTIMEOUT_Pos)     /*!< 0x00000008 */
#define SDMMC_STA_DTIMEOUT               SDMMC_STA_DTIMEOUT_Msk                /*!<Data timeout                                  */
#define SDMMC_STA_TXUNDERR_Pos           (4U)
#define SDMMC_STA_TXUNDERR_Msk           (0x1UL << SDMMC_STA_TXUNDERR_Pos)     /*!< 0x00000010 */
#define SDMMC_STA_TXUNDERR               SDMMC_STA_TXUNDERR_Msk                /*!<Transmit FIFO underrun error                  */
#define SDMMC_STA_RXOVERR_Pos            (5U)
#define SDMMC_STA_RXOVERR_Msk            (0x1UL << SDMMC_STA_RXOVERR_Pos)      /*!< 0x00000020 */
#define SDMMC_STA_RXOVERR                SDMMC_STA_RXOVERR_Msk                 /*!<Received FIFO overrun error                   */
#define SDMMC_STA_CMDREND_Pos            (6U)
#define SDMMC_STA_CMDREND_Msk            (0x1UL << SDMMC_STA_CMDREND_Pos)      /*!< 0x00000040 */
#define SDMMC_STA_CMDREND                SDMMC_STA_CMDREND_Msk                 /*!<Command response received (CRC check passed)  */
#define SDMMC_STA_CMDSENT_Pos            (7U)
#define SDMMC_STA_CMDSENT_Msk            (0x1UL << SDMMC_STA_CMDSENT_Pos)      /*!< 0x00000080 */
#define SDMMC_STA_CMDSENT                SDMMC_STA_CMDSENT_Msk                 /*!<Command sent (no response required)           */
#define SDMMC_STA_DATAEND_Pos            (8U)
#define SDMMC_STA_DATAEND_Msk            (0x1UL << SDMMC_STA_DATAEND_Pos)      /*!< 0x00000100 */
#define SDMMC_STA_DATAEND                SDMMC_STA_DATAEND_Msk                 /*!<Data end (data counter, SDIDCOUNT, is zero)   */
#define SDMMC_STA_DHOLD_Pos              (9U)
#define SDMMC_STA_DHOLD_Msk              (0x1UL << SDMMC_STA_DHOLD_Pos)        /*!< 0x00000200 */
#define SDMMC_STA_DHOLD                  SDMMC_STA_DHOLD_Msk                   /*!<Data transfer Hold                                                      */
#define SDMMC_STA_DBCKEND_Pos            (10U)
#define SDMMC_STA_DBCKEND_Msk            (0x1UL << SDMMC_STA_DBCKEND_Pos)      /*!< 0x00000400 */
#define SDMMC_STA_DBCKEND                SDMMC_STA_DBCKEND_Msk                 /*!<Data block sent/received (CRC check passed)   */
#define SDMMC_STA_DABORT_Pos             (11U)
#define SDMMC_STA_DABORT_Msk             (0x1UL << SDMMC_STA_DABORT_Pos)       /*!< 0x00000800 */
#define SDMMC_STA_DABORT                 SDMMC_STA_DABORT_Msk                  /*!<Data transfer aborted by CMD12                                          */
#define SDMMC_STA_DPSMACT_Pos            (12U)
#define SDMMC_STA_DPSMACT_Msk            (0x1UL << SDMMC_STA_DPSMACT_Pos)      /*!< 0x00001000 */
#define SDMMC_STA_DPSMACT                SDMMC_STA_DPSMACT_Msk                 /*!<Data path state machine active                                       */
#define SDMMC_STA_CPSMACT_Pos            (13U)
#define SDMMC_STA_CPSMACT_Msk            (0x1UL << SDMMC_STA_CPSMACT_Pos)      /*!< 0x00002000 */
#define SDMMC_STA_CPSMACT                SDMMC_STA_CPSMACT_Msk                 /*!<Command path state machine active                                          */
#define SDMMC_STA_TXFIFOHE_Pos           (14U)
#define SDMMC_STA_TXFIFOHE_Msk           (0x1UL << SDMMC_STA_TXFIFOHE_Pos)     /*!< 0x00004000 */
#define SDMMC_STA_TXFIFOHE               SDMMC_STA_TXFIFOHE_Msk                /*!<Transmit FIFO Half Empty: at least 8 words can be written into the FIFO */
#define SDMMC_STA_RXFIFOHF_Pos           (15U)
#define SDMMC_STA_RXFIFOHF_Msk           (0x1UL << SDMMC_STA_RXFIFOHF_Pos)     /*!< 0x00008000 */
#define SDMMC_STA_RXFIFOHF               SDMMC_STA_RXFIFOHF_Msk                /*!<Receive FIFO Half Full: there are at least 8 words in the FIFO */
#define SDMMC_STA_TXFIFOF_Pos            (16U)
#define SDMMC_STA_TXFIFOF_Msk            (0x1UL << SDMMC_STA_TXFIFOF_Pos)      /*!< 0x00010000 */
#define SDMMC_STA_TXFIFOF                SDMMC_STA_TXFIFOF_Msk                 /*!<Transmit FIFO full                            */
#define SDMMC_STA_RXFIFOF_Pos            (17U)
#define SDMMC_STA_RXFIFOF_Msk            (0x1UL << SDMMC_STA_RXFIFOF_Pos)      /*!< 0x00020000 */
#define SDMMC_STA_RXFIFOF                SDMMC_STA_RXFIFOF_Msk                 /*!<Receive FIFO full                             */
#define SDMMC_STA_TXFIFOE_Pos            (18U)
#define SDMMC_STA_TXFIFOE_Msk            (0x1UL << SDMMC_STA_TXFIFOE_Pos)      /*!< 0x00040000 */
#define SDMMC_STA_TXFIFOE                SDMMC_STA_TXFIFOE_Msk                 /*!<Transmit FIFO empty                           */
#define SDMMC_STA_RXFIFOE_Pos            (19U)
#define SDMMC_STA_RXFIFOE_Msk            (0x1UL << SDMMC_STA_RXFIFOE_Pos)      /*!< 0x00080000 */
#define SDMMC_STA_RXFIFOE                SDMMC_STA_RXFIFOE_Msk                 /*!<Receive FIFO empty                            */
#define SDMMC_STA_BUSYD0_Pos             (20U)
#define SDMMC_STA_BUSYD0_Msk             (0x1UL << SDMMC_STA_BUSYD0_Pos)       /*!< 0x00100000 */
#define SDMMC_STA_BUSYD0                 SDMMC_STA_BUSYD0_Msk                  /*!<Inverted value of SDMMC_D0 line (Busy)                                  */
#define SDMMC_STA_BUSYD0END_Pos          (21U)
#define SDMMC_STA_BUSYD0END_Msk          (0x1UL << SDMMC_STA_BUSYD0END_Pos)    /*!< 0x00200000 */
#define SDMMC_STA_BUSYD0END              SDMMC_STA_BUSYD0END_Msk               /*!<End of SDMMC_D0 Busy following a CMD response detected                  */
#define SDMMC_STA_SDIOIT_Pos             (22U)
#define SDMMC_STA_SDIOIT_Msk             (0x1UL << SDMMC_STA_SDIOIT_Pos)       /*!< 0x00400000 */
#define SDMMC_STA_SDIOIT                 SDMMC_STA_SDIOIT_Msk                  /*!<SDIO interrupt received                                                 */
#define SDMMC_STA_ACKFAIL_Pos            (23U)
#define SDMMC_STA_ACKFAIL_Msk            (0x1UL << SDMMC_STA_ACKFAIL_Pos)      /*!< 0x00800000 */
#define SDMMC_STA_ACKFAIL                SDMMC_STA_ACKFAIL_Msk                 /*!<Boot Acknowledgment received (BootAck check fail)                       */
#define SDMMC_STA_ACKTIMEOUT_Pos         (24U)
#define SDMMC_STA_ACKTIMEOUT_Msk         (0x1UL << SDMMC_STA_ACKTIMEOUT_Pos)   /*!< 0x01000000 */
#define SDMMC_STA_ACKTIMEOUT             SDMMC_STA_ACKTIMEOUT_Msk              /*!<Boot Acknowledgment timeout                                             */
#define SDMMC_STA_VSWEND_Pos             (25U)
#define SDMMC_STA_VSWEND_Msk             (0x1UL << SDMMC_STA_VSWEND_Pos)       /*!< 0x02000000 */
#define SDMMC_STA_VSWEND                 SDMMC_STA_VSWEND_Msk                  /*!<Voltage switch critical timing section completion                       */
#define SDMMC_STA_CKSTOP_Pos             (26U)
#define SDMMC_STA_CKSTOP_Msk             (0x1UL << SDMMC_STA_CKSTOP_Pos)       /*!< 0x04000000 */
#define SDMMC_STA_CKSTOP                 SDMMC_STA_CKSTOP_Msk                  /*!<SDMMC_CK stopped in Voltage switch procedure                            */
#define SDMMC_STA_IDMATE_Pos             (27U)
#define SDMMC_STA_IDMATE_Msk             (0x1UL << SDMMC_STA_IDMATE_Pos)       /*!< 0x08000000 */
#define SDMMC_STA_IDMATE                 SDMMC_STA_IDMATE_Msk                  /*!<IDMA transfer error                                                     */
#define SDMMC_STA_IDMABTC_Pos            (28U)
#define SDMMC_STA_IDMABTC_Msk            (0x1UL << SDMMC_STA_IDMABTC_Pos)      /*!< 0x10000000 */
#define SDMMC_STA_IDMABTC                SDMMC_STA_IDMABTC_Msk                 /*!<IDMA buffer transfer complete                                           */

/*******************  Bit definition for SDMMC_ICR register  *******************/
#define SDMMC_ICR_CCRCFAILC_Pos          (0U)
#define SDMMC_ICR_CCRCFAILC_Msk          (0x1UL << SDMMC_ICR_CCRCFAILC_Pos)    /*!< 0x00000001 */
#define SDMMC_ICR_CCRCFAILC              SDMMC_ICR_CCRCFAILC_Msk               /*!<CCRCFAIL flag clear bit */
#define SDMMC_ICR_DCRCFAILC_Pos          (1U)
#define SDMMC_ICR_DCRCFAILC_Msk          (0x1UL << SDMMC_ICR_DCRCFAILC_Pos)    /*!< 0x00000002 */
#define SDMMC_ICR_DCRCFAILC              SDMMC_ICR_DCRCFAILC_Msk               /*!<DCRCFAIL flag clear bit */
#define SDMMC_ICR_CTIMEOUTC_Pos          (2U)
#define SDMMC_ICR_CTIMEOUTC_Msk          (0x1UL << SDMMC_ICR_CTIMEOUTC_Pos)    /*!< 0x00000004 */
#define SDMMC_ICR_CTIMEOUTC              SDMMC_ICR_CTIMEOUTC_Msk               /*!<CTIMEOUT flag clear bit */
#define SDMMC_ICR_DTIMEOUTC_Pos          (3U)
#define SDMMC_ICR_DTIMEOUTC_Msk          (0x1UL << SDMMC_ICR_DTIMEOUTC_Pos)    /*!< 0x00000008 */
#define SDMMC_ICR_DTIMEOUTC              SDMMC_ICR_DTIMEOUTC_Msk               /*!<DTIMEOUT flag clear bit */
#define SDMMC_ICR_TXUNDERRC_Pos          (4U)
#define SDMMC_ICR_TXUNDERRC_Msk          (0x1UL << SDMMC_ICR_TXUNDERRC_Pos)    /*!< 0x00000010 */
#define SDMMC_ICR_TXUNDERRC              SDMMC_ICR_TXUNDERRC_Msk               /*!<TXUNDERR flag clear bit */
#define SDMMC_ICR_RXOVERRC_Pos           (5U)
#define SDMMC_ICR_RXOVERRC_Msk           (0x1UL << SDMMC_ICR_RXOVERRC_Pos)     /*!< 0x00000020 */
#define SDMMC_ICR_RXOVERRC               SDMMC_ICR_RXOVERRC_Msk                /*!<RXOVERR flag clear bit  */
#define SDMMC_ICR_CMDRENDC_Pos           (6U)
#define SDMMC_ICR_CMDRENDC_Msk           (0x1UL << SDMMC_ICR_CMDRENDC_Pos)     /*!< 0x00000040 */
#define SDMMC_ICR_CMDRENDC               SDMMC_ICR_CMDRENDC_Msk                /*!<CMDREND flag clear bit  */
#define SDMMC_ICR_CMDSENTC_Pos           (7U)
#define SDMMC_ICR_CMDSENTC_Msk           (0x1UL << SDMMC_ICR_CMDSENTC_Pos)     /*!< 0x00000080 */
#define SDMMC_ICR_CMDSENTC               SDMMC_ICR_CMDSENTC_Msk                /*!<CMDSENT flag clear bit  */
#define SDMMC_ICR_DATAENDC_Pos           (8U)
#define SDMMC_ICR_DATAENDC_Msk           (0x1UL << SDMMC_ICR_DATAENDC_Pos)     /*!< 0x00000100 */
#define SDMMC_ICR_DATAENDC               SDMMC_ICR_DATAENDC_Msk                /*!<DATAEND flag clear bit  */
#define SDMMC_ICR_DHOLDC_Pos             (9U)
#define SDMMC_ICR_DHOLDC_Msk             (0x1UL << SDMMC_ICR_DHOLDC_Pos)       /*!< 0x00000200 */
#define SDMMC_ICR_DHOLDC                 SDMMC_ICR_DHOLDC_Msk                  /*!<DHOLD flag clear bit       */
#define SDMMC_ICR_DBCKENDC_Pos           (10U)
#define SDMMC_ICR_DBCKENDC_Msk           (0x1UL << SDMMC_ICR_DBCKENDC_Pos)     /*!< 0x00000400 */
#define SDMMC_ICR_DBCKENDC               SDMMC_ICR_DBCKENDC_Msk                /*!<DBCKEND flag clear bit  */
#define SDMMC_ICR_DABORTC_Pos            (11U)
#define SDMMC_ICR_DABORTC_Msk            (0x1UL << SDMMC_ICR_DABORTC_Pos)      /*!< 0x00000800 */
#define SDMMC_ICR_DABORTC                SDMMC_ICR_DABORTC_Msk                 /*!<DABORTC flag clear bit     */
#define SDMMC_ICR_BUSYD0ENDC_Pos         (21U)
#define SDMMC_ICR_BUSYD0ENDC_Msk         (0x1UL << SDMMC_ICR_BUSYD0ENDC_Pos)   /*!< 0x00200000 */
#define SDMMC_ICR_BUSYD0ENDC             SDMMC_ICR_BUSYD0ENDC_Msk              /*!<BUSYD0ENDC flag clear bit  */
#define SDMMC_ICR_SDIOITC_Pos            (22U)
#define SDMMC_ICR_SDIOITC_Msk            (0x1UL << SDMMC_ICR_SDIOITC_Pos)      /*!< 0x00400000 */
#define SDMMC_ICR_SDIOITC                SDMMC_ICR_SDIOITC_Msk                 /*!<SDIOIT flag clear bit      */
#define SDMMC_ICR_ACKFAILC_Pos           (23U)
#define SDMMC_ICR_ACKFAILC_Msk           (0x1UL << SDMMC_ICR_ACKFAILC_Pos)     /*!< 0x00800000 */
#define SDMMC_ICR_ACKFAILC               SDMMC_ICR_ACKFAILC_Msk                /*!<ACKFAILC flag clear bit    */
#define SDMMC_ICR_ACKTIMEOUTC_Pos        (24U)
#define SDMMC_ICR_ACKTIMEOUTC_Msk        (0x1UL << SDMMC_ICR_ACKTIMEOUTC_Pos)  /*!< 0x01000000 */
#define SDMMC_ICR_ACKTIMEOUTC            SDMMC_ICR_ACKTIMEOUTC_Msk             /*!<ACKTIMEOUTC flag clear bit */
#define SDMMC_ICR_VSWENDC_Pos            (25U)
#define SDMMC_ICR_VSWENDC_Msk            (0x1UL << SDMMC_ICR_VSWENDC_Pos)      /*!< 0x02000000 */
#define SDMMC_ICR_VSWENDC                SDMMC_ICR_VSWENDC_Msk                 /*!<VSWENDC flag clear bit     */
#define SDMMC_ICR_CKSTOPC_Pos            (26U)
#define SDMMC_ICR_CKSTOPC_Msk            (0x1UL << SDMMC_ICR_CKSTOPC_Pos)      /*!< 0x04000000 */
#define SDMMC_ICR_CKSTOPC                SDMMC_ICR_CKSTOPC_Msk                 /*!<CKSTOPC flag clear bit     */
#define SDMMC_ICR_IDMATEC_Pos            (27U)
#define SDMMC_ICR_IDMATEC_Msk            (0x1UL << SDMMC_ICR_IDMATEC_Pos)      /*!< 0x08000000 */
#define SDMMC_ICR_IDMATEC                SDMMC_ICR_IDMATEC_Msk                 /*!<IDMATEC flag clear bit     */
#define SDMMC_ICR_IDMABTCC_Pos           (28U)
#define SDMMC_ICR_IDMABTCC_Msk           (0x1UL << SDMMC_ICR_IDMABTCC_Pos)     /*!< 0x10000000 */
#define SDMMC_ICR_IDMABTCC               SDMMC_ICR_IDMABTCC_Msk                /*!<IDMABTCC flag clear bit    */

/******************  Bit definition for SDMMC_MASK register  *******************/
#define SDMMC_MASK_CCRCFAILIE_Pos        (0U)
#define SDMMC_MASK_CCRCFAILIE_Msk        (0x1UL << SDMMC_MASK_CCRCFAILIE_Pos)  /*!< 0x00000001 */
#define SDMMC_MASK_CCRCFAILIE            SDMMC_MASK_CCRCFAILIE_Msk             /*!<Command CRC Fail Interrupt Enable          */
#define SDMMC_MASK_DCRCFAILIE_Pos        (1U)
#define SDMMC_MASK_DCRCFAILIE_Msk        (0x1UL << SDMMC_MASK_DCRCFAILIE_Pos)  /*!< 0x00000002 */
#define SDMMC_MASK_DCRCFAILIE            SDMMC_MASK_DCRCFAILIE_Msk             /*!<Data CRC Fail Interrupt Enable             */
#define SDMMC_MASK_CTIMEOUTIE_Pos        (2U)
#define SDMMC_MASK_CTIMEOUTIE_Msk        (0x1UL << SDMMC_MASK_CTIMEOUTIE_Pos)  /*!< 0x00000004 */
#define SDMMC_MASK_CTIMEOUTIE            SDMMC_MASK_CTIMEOUTIE_Msk             /*!<Command TimeOut Interrupt Enable           */
#define SDMMC_MASK_DTIMEOUTIE_Pos        (3U)
#define SDMMC_MASK_DTIMEOUTIE_Msk        (0x1UL << SDMMC_MASK_DTIMEOUTIE_Pos)  /*!< 0x00000008 */
#define SDMMC_MASK_DTIMEOUTIE            SDMMC_MASK_DTIMEOUTIE_Msk             /*!<Data TimeOut Interrupt Enable              */
#define SDMMC_MASK_TXUNDERRIE_Pos        (4U)
#define SDMMC_MASK_TXUNDERRIE_Msk        (0x1UL << SDMMC_MASK_TXUNDERRIE_Pos)  /*!< 0x00000010 */
#define SDMMC_MASK_TXUNDERRIE            SDMMC_MASK_TXUNDERRIE_Msk             /*!<Tx FIFO UnderRun Error Interrupt Enable    */
#define SDMMC_MASK_RXOVERRIE_Pos         (5U)
#define SDMMC_MASK_RXOVERRIE_Msk         (0x1UL << SDMMC_MASK_RXOVERRIE_Pos)   /*!< 0x00000020 */
#define SDMMC_MASK_RXOVERRIE             SDMMC_MASK_RXOVERRIE_Msk              /*!<Rx FIFO OverRun Error Interrupt Enable     */
#define SDMMC_MASK_CMDRENDIE_Pos         (6U)
#define SDMMC_MASK_CMDRENDIE_Msk         (0x1UL << SDMMC_MASK_CMDRENDIE_Pos)   /*!< 0x00000040 */
#define SDMMC_MASK_CMDRENDIE             SDMMC_MASK_CMDRENDIE_Msk              /*!<Command Response Received Interrupt Enable */
#define SDMMC_MASK_CMDSENTIE_Pos         (7U)
#define SDMMC_MASK_CMDSENTIE_Msk         (0x1UL << SDMMC_MASK_CMDSENTIE_Pos)   /*!< 0x00000080 */
#define SDMMC_MASK_CMDSENTIE             SDMMC_MASK_CMDSENTIE_Msk              /*!<Command Sent Interrupt Enable              */
#define SDMMC_MASK_DATAENDIE_Pos         (8U)
#define SDMMC_MASK_DATAENDIE_Msk         (0x1UL << SDMMC_MASK_DATAENDIE_Pos)   /*!< 0x00000100 */
#define SDMMC_MASK_DATAENDIE             SDMMC_MASK_DATAENDIE_Msk              /*!<Data End Interrupt Enable                  */
#define SDMMC_MASK_DHOLDIE_Pos           (9U)
#define SDMMC_MASK_DHOLDIE_Msk           (0x1UL << SDMMC_MASK_DHOLDIE_Pos)     /*!< 0x00000200 */
#define SDMMC_MASK_DHOLDIE               SDMMC_MASK_DHOLDIE_Msk                /*!<Data Hold Interrupt Enable                 */
#define SDMMC_MASK_DBCKENDIE_Pos         (10U)
#define SDMMC_MASK_DBCKENDIE_Msk         (0x1UL << SDMMC_MASK_DBCKENDIE_Pos)   /*!< 0x00000400 */
#define SDMMC_MASK_DBCKENDIE             SDMMC_MASK_DBCKENDIE_Msk              /*!<Data Block End Interrupt Enable            */
#define SDMMC_MASK_DABORTIE_Pos          (11U)
#define SDMMC_MASK_DABORTIE_Msk          (0x1UL << SDMMC_MASK_DABORTIE_Pos)    /*!< 0x00000800 */
#define SDMMC_MASK_DABORTIE              SDMMC_MASK_DABORTIE_Msk               /*!<Data transfer aborted interrupt enable     */

#define SDMMC_MASK_TXFIFOHEIE_Pos        (14U)
#define SDMMC_MASK_TXFIFOHEIE_Msk        (0x1UL << SDMMC_MASK_TXFIFOHEIE_Pos)  /*!< 0x00004000 */
#define SDMMC_MASK_TXFIFOHEIE            SDMMC_MASK_TXFIFOHEIE_Msk             /*!<Tx FIFO Half Empty interrupt Enable        */
#define SDMMC_MASK_RXFIFOHFIE_Pos        (15U)
#define SDMMC_MASK_RXFIFOHFIE_Msk        (0x1UL << SDMMC_MASK_RXFIFOHFIE_Pos)  /*!< 0x00008000 */
#define SDMMC_MASK_RXFIFOHFIE            SDMMC_MASK_RXFIFOHFIE_Msk             /*!<Rx FIFO Half Full interrupt Enable         */

#define SDMMC_MASK_RXFIFOFIE_Pos         (17U)
#define SDMMC_MASK_RXFIFOFIE_Msk         (0x1UL << SDMMC_MASK_RXFIFOFIE_Pos)   /*!< 0x00020000 */
#define SDMMC_MASK_RXFIFOFIE             SDMMC_MASK_RXFIFOFIE_Msk              /*!<Rx FIFO Full interrupt Enable              */
#define SDMMC_MASK_TXFIFOEIE_Pos         (18U)
#define SDMMC_MASK_TXFIFOEIE_Msk         (0x1UL << SDMMC_MASK_TXFIFOEIE_Pos)   /*!< 0x00040000 */
#define SDMMC_MASK_TXFIFOEIE             SDMMC_MASK_TXFIFOEIE_Msk              /*!<Tx FIFO Empty interrupt Enable             */

#define SDMMC_MASK_BUSYD0ENDIE_Pos       (21U)
#define SDMMC_MASK_BUSYD0ENDIE_Msk       (0x1UL << SDMMC_MASK_BUSYD0ENDIE_Pos) /*!< 0x00200000 */
#define SDMMC_MASK_BUSYD0ENDIE           SDMMC_MASK_BUSYD0ENDIE_Msk            /*!<BUSYD0ENDIE interrupt Enable */
#define SDMMC_MASK_SDIOITIE_Pos          (22U)
#define SDMMC_MASK_SDIOITIE_Msk          (0x1UL << SDMMC_MASK_SDIOITIE_Pos)    /*!< 0x00400000 */
#define SDMMC_MASK_SDIOITIE              SDMMC_MASK_SDIOITIE_Msk               /*!<SDMMC Mode Interrupt Received interrupt Enable */
#define SDMMC_MASK_ACKFAILIE_Pos         (23U)
#define SDMMC_MASK_ACKFAILIE_Msk         (0x1UL << SDMMC_MASK_ACKFAILIE_Pos)   /*!< 0x00800000 */
#define SDMMC_MASK_ACKFAILIE             SDMMC_MASK_ACKFAILIE_Msk              /*!<Acknowledgment Fail Interrupt Enable */
#define SDMMC_MASK_ACKTIMEOUTIE_Pos      (24U)
#define SDMMC_MASK_ACKTIMEOUTIE_Msk      (0x1UL << SDMMC_MASK_ACKTIMEOUTIE_Pos) /*!< 0x01000000 */
#define SDMMC_MASK_ACKTIMEOUTIE          SDMMC_MASK_ACKTIMEOUTIE_Msk           /*!<Acknowledgment timeout Interrupt Enable */
#define SDMMC_MASK_VSWENDIE_Pos          (25U)
#define SDMMC_MASK_VSWENDIE_Msk          (0x1UL << SDMMC_MASK_VSWENDIE_Pos)    /*!< 0x02000000 */
#define SDMMC_MASK_VSWENDIE              SDMMC_MASK_VSWENDIE_Msk               /*!<Voltage switch critical timing section completion Interrupt Enable */
#define SDMMC_MASK_CKSTOPIE_Pos          (26U)
#define SDMMC_MASK_CKSTOPIE_Msk          (0x1UL << SDMMC_MASK_CKSTOPIE_Pos)    /*!< 0x04000000 */
#define SDMMC_MASK_CKSTOPIE              SDMMC_MASK_CKSTOPIE_Msk               /*!<Voltage Switch clock stopped Interrupt Enable */
#define SDMMC_MASK_IDMABTCIE_Pos         (28U)
#define SDMMC_MASK_IDMABTCIE_Msk         (0x1UL << SDMMC_MASK_IDMABTCIE_Pos)   /*!< 0x10000000 */
#define SDMMC_MASK_IDMABTCIE             SDMMC_MASK_IDMABTCIE_Msk              /*!<IDMA buffer transfer complete Interrupt Enable */

/*****************  Bit definition for SDMMC_ACKTIME register  *****************/
#define SDMMC_ACKTIME_ACKTIME_Pos        (0U)
#define SDMMC_ACKTIME_ACKTIME_Msk        (0x1FFFFFFUL << SDMMC_ACKTIME_ACKTIME_Pos) /*!< 0x01FFFFFF */
#define SDMMC_ACKTIME_ACKTIME            SDMMC_ACKTIME_ACKTIME_Msk             /*!<Boot acknowledgment timeout period */

/****************  Bit definition for SDMMC_FIFOTHR register  ****************/
#define SDMMC_FIFOTHR_THR_Pos             (0U)
#define SDMMC_FIFOTHR_THR_Msk             (0xFUL << SDMMC_FIFOTHRR_THR_Pos)              /*!< 0x0000000F */
#define SDMMC_FIFOTHR_THR                 SDMMC_FIFOTHRR_THR_Msk                        /*!< FIFO threshold */

/******************  Bit definition for SDMMC_FIFO register  *******************/
#define SDMMC_FIFO_FIFODATA_Pos          (0U)
#define SDMMC_FIFO_FIFODATA_Msk          (0xFFFFFFFFUL << SDMMC_FIFO_FIFODATA_Pos) /*!< 0xFFFFFFFF */
#define SDMMC_FIFO_FIFODATA              SDMMC_FIFO_FIFODATA_Msk               /*!<Receive and transmit FIFO data */

/******************  Bit definition for SDMMC_IDMACTRL register ****************/
#define SDMMC_IDMA_IDMAEN_Pos            (0U)
#define SDMMC_IDMA_IDMAEN_Msk            (0x1UL << SDMMC_IDMA_IDMAEN_Pos)      /*!< 0x00000001 */
#define SDMMC_IDMA_IDMAEN                SDMMC_IDMA_IDMAEN_Msk                 /*!< Enable the internal DMA of the SDMMC peripheral */
#define SDMMC_IDMA_IDMABMODE_Pos         (1U)
#define SDMMC_IDMA_IDMABMODE_Msk         (0x1UL << SDMMC_IDMA_IDMABMODE_Pos)   /*!< 0x00000002 */
#define SDMMC_IDMA_IDMABMODE             SDMMC_IDMA_IDMABMODE_Msk              /*!< Enable Linked List mode for IDMA */

/*****************  Bit definition for SDMMC_IDMABSIZER register  **************/
#define SDMMC_IDMABSIZE_IDMABNDT_Pos     (5U)
#define SDMMC_IDMABSIZE_IDMABNDT_Msk     (0xFFFUL << SDMMC_IDMABSIZE_IDMABNDT_Pos) /*!< 0x0001FFE0 */
#define SDMMC_IDMABSIZE_IDMABNDT         SDMMC_IDMABSIZE_IDMABNDT_Msk          /*!< Number of bytes per buffer */

/*****************  Bit definition for SDMMC_IDMABASER register  ***************/
#define SDMMC_IDMABASER_IDMABASER_Pos    (0U)
#define SDMMC_IDMABASER_IDMABASER_Msk    (0xFFFFFFFFUL << SDMMC_IDMABASER_IDMABASER_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_IDMABASER_IDMABASER        SDMMC_IDMABASER_IDMABASER_Msk         /*!< Memory base address register */

/*****************  Bit definition for SDMMC_IDMALAR register  ***************/
#define SDMMC_IDMALAR_IDMALA_Pos         (0U)
#define SDMMC_IDMALAR_IDMALA_Msk         (0x3FFFUL << SDMMC_IDMALAR_IDMALA_Pos)  /*!< 0x00003FFF */
#define SDMMC_IDMALAR_IDMALA             SDMMC_IDMALAR_IDMALA_Msk                /*!< Linked list item address offset */
#define SDMMC_IDMALAR_ABR_Pos            (29U)
#define SDMMC_IDMALAR_ABR_Msk            (0x1UL << SDMMC_IDMALAR_ABR_Pos)        /*!< 0x20000000 */
#define SDMMC_IDMALAR_ABR                SDMMC_IDMALAR_ABR_Msk                   /*!< Acknowledge linked list buffer ready */
#define SDMMC_IDMALAR_ULS_Pos            (30U)
#define SDMMC_IDMALAR_ULS_Msk            (0x1UL << SDMMC_IDMALAR_ULS_Pos)        /*!< 0x40000000 */
#define SDMMC_IDMALAR_ULS                SDMMC_IDMALAR_ULS_Msk                   /*!< Update Size from linked list */
#define SDMMC_IDMALAR_ULA_Pos            (31U)
#define SDMMC_IDMALAR_ULA_Msk            (0x1UL << SDMMC_IDMALAR_ULA_Pos)        /*!< 0x80000000 */
#define SDMMC_IDMALAR_ULA                SDMMC_IDMALAR_ULA_Msk                   /*!< Update Address from linked list */

/*****************  Bit definition for SDMMC_IDMABAR register  ***************/
#define SDMMC_IDMABAR_IDMABAR_Pos        (0U)
#define SDMMC_IDMABAR_IDMABAR_Msk        (0xFFFFFFFFUL << SDMMC_IDMABAR_IDMABAR_Pos)/*!< 0xFFFFFFFF */
#define SDMMC_IDMABAR_IDMABAR            SDMMC_IDMABAR_IDMABAR_Msk             /*!< linked list memory base register */

/****************  Bit definition for SDMMC_HWCFGR1 register  *****************/
#define SDMMC_HWCFGR1_FIFOSIZE_Pos         (0U)
#define SDMMC_HWCFGR1_FIFOSIZE_Msk         (0xFUL << SDMMC_HWCFGR1_FIFOSIZE_Pos)          /*!< 0x0000000F */
#define SDMMC_HWCFGR1_FIFOSIZE             SDMMC_HWCFGR1_FIFOSIZE_Msk                    /*!< SDMMC FIFO size */

/******************  Bit definition for SDMMC_VERR register  ******************/
#define SDMMC_VERR_MINREV_Pos              (0U)
#define SDMMC_VERR_MINREV_Msk              (0xFUL << SDMMC_VERR_MINREV_Pos)               /*!< 0x0000000F */
#define SDMMC_VERR_MINREV                  SDMMC_VERR_MINREV_Msk                         /*!< SDMMC minor revision number */
#define SDMMC_VERR_MAJREV_Pos              (4U)
#define SDMMC_VERR_MAJREV_Msk              (0xFUL << SDMMC_VERR_MAJREV_Pos)               /*!< 0x000000F0 */
#define SDMMC_VERR_MAJREV                  SDMMC_VERR_MAJREV_Msk                         /*!< SDMMC major revision number */

/*****************  Bit definition for SDMMC_IPIDR register  ******************/
#define SDMMC_IPIDR_IP_ID_Pos              (0U)
#define SDMMC_IPIDR_IP_ID_Msk              (0xFFFFFFFFUL << SDMMC_IPIDR_IP_ID_Pos)        /*!< 0xFFFFFFFF */
#define SDMMC_IPIDR_IP_ID                  SDMMC_IPIDR_IP_ID_Msk                         /*!< SDMMC identification */

/******************  Bit definition for SDMMC_SIDR register  ******************/
#define SDMMC_SIDR_SID_Pos                 (0U)
#define SDMMC_SIDR_SID_Msk                 (0xFFFFFFFFUL << SDMMC_SIDR_SID_Pos)           /*!< 0xFFFFFFFF */
#define SDMMC_SIDR_SID                     SDMMC_SIDR_SID_Msk                            /*!< SDMMC size identification */

/******************************************************************************/
/*                                                                            */
/*                           SERF/SERC Interface                              */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for SERC_IER0 register  *******************/
#define SERC_IER0_PDRIE0_Pos          (0U)
#define SERC_IER0_PDRIE0_Msk          (0x1UL << SERC_IER0_PDRIE0_Pos)     /*!< 0x00000001 */
#define SERC_IER0_PDRIE0              SERC_IER0_PDRIE0_Msk
#define SERC_IER0_PDRIE1_Pos          (1U)
#define SERC_IER0_PDRIE1_Msk          (0x1UL << SERC_IER0_PDRIE1_Pos)     /*!< 0x00000002 */
#define SERC_IER0_PDRIE1              SERC_IER0_PDRIE1_Msk
#define SERC_IER0_PDRIE2_Pos          (2U)
#define SERC_IER0_PDRIE2_Msk          (0x1UL << SERC_IER0_PDRIE2_Pos)     /*!< 0x00000004 */
#define SERC_IER0_PDRIE2              SERC_IER0_PDRIE2_Msk
#define SERC_IER0_PDRIE3_Pos          (3U)
#define SERC_IER0_PDRIE3_Msk          (0x1UL << SERC_IER0_PDRIE3_Pos)     /*!< 0x00000008 */
#define SERC_IER0_PDRIE3              SERC_IER0_PDRIE3_Msk
#define SERC_IER0_PDRIE4_Pos          (4U)
#define SERC_IER0_PDRIE4_Msk          (0x1UL << SERC_IER0_PDRIE4_Pos)     /*!< 0x00000010 */
#define SERC_IER0_PDRIE4              SERC_IER0_PDRIE4_Msk
#define SERC_IER0_PDRIE5_Pos          (5U)
#define SERC_IER0_PDRIE5_Msk          (0x1UL << SERC_IER0_PDRIE5_Pos)     /*!< 0x00000020 */
#define SERC_IER0_PDRIE5              SERC_IER0_PDRIE5_Msk
#define SERC_IER0_PDRIE6_Pos          (6U)
#define SERC_IER0_PDRIE6_Msk          (0x1UL << SERC_IER0_PDRIE6_Pos)     /*!< 0x00000040 */
#define SERC_IER0_PDRIE6              SERC_IER0_PDRIE6_Msk
#define SERC_IER0_PDRIE7_Pos          (7U)
#define SERC_IER0_PDRIE7_Msk          (0x1UL << SERC_IER0_PDRIE7_Pos)     /*!< 0x00000080 */
#define SERC_IER0_PDRIE7              SERC_IER0_PDRIE7_Msk
#define SERC_IER0_PDRIE8_Pos          (8U)
#define SERC_IER0_PDRIE8_Msk          (0x1UL << SERC_IER0_PDRIE8_Pos)     /*!< 0x00000100 */
#define SERC_IER0_PDRIE8              SERC_IER0_PDRIE8_Msk
#define SERC_IER0_PDRIE9_Pos          (9U)
#define SERC_IER0_PDRIE9_Msk          (0x1UL << SERC_IER0_PDRIE9_Pos)     /*!< 0x00000200 */
#define SERC_IER0_PDRIE9              SERC_IER0_PDRIE9_Msk
#define SERC_IER0_PDRIE10_Pos         (10U)
#define SERC_IER0_PDRIE10_Msk         (0x1UL << SERC_IER0_PDRIE10_Pos)    /*!< 0x00000400 */
#define SERC_IER0_PDRIE10             SERC_IER0_PDRIE10_Msk
#define SERC_IER0_PDRIE11_Pos         (11U)
#define SERC_IER0_PDRIE11_Msk         (0x1UL << SERC_IER0_PDRIE11_Pos)    /*!< 0x00000800 */
#define SERC_IER0_PDRIE11             SERC_IER0_PDRIE11_Msk
#define SERC_IER0_PDRIE12_Pos         (12U)
#define SERC_IER0_PDRIE12_Msk         (0x1UL << SERC_IER0_PDRIE12_Pos)    /*!< 0x00001000 */
#define SERC_IER0_PDRIE12             SERC_IER0_PDRIE12_Msk
#define SERC_IER0_PDRIE13_Pos         (13U)
#define SERC_IER0_PDRIE13_Msk         (0x1UL << SERC_IER0_PDRIE13_Pos)    /*!< 0x00002000 */
#define SERC_IER0_PDRIE13             SERC_IER0_PDRIE13_Msk
#define SERC_IER0_PDRIE14_Pos         (14U)
#define SERC_IER0_PDRIE14_Msk         (0x1UL << SERC_IER0_PDRIE14_Pos)    /*!< 0x00004000 */
#define SERC_IER0_PDRIE14             SERC_IER0_PDRIE14_Msk
#define SERC_IER0_PDRIE15_Pos         (15U)
#define SERC_IER0_PDRIE15_Msk         (0x1UL << SERC_IER0_PDRIE15_Pos)    /*!< 0x00008000 */
#define SERC_IER0_PDRIE15             SERC_IER0_PDRIE15_Msk
#define SERC_IER0_PDRIE16_Pos         (16U)
#define SERC_IER0_PDRIE16_Msk         (0x1UL << SERC_IER0_PDRIE16_Pos)    /*!< 0x00010000 */
#define SERC_IER0_PDRIE16             SERC_IER0_PDRIE16_Msk
#define SERC_IER0_PDRIE17_Pos         (17U)
#define SERC_IER0_PDRIE17_Msk         (0x1UL << SERC_IER0_PDRIE17_Pos)    /*!< 0x00020000 */
#define SERC_IER0_PDRIE17             SERC_IER0_PDRIE17_Msk
#define SERC_IER0_PDRIE18_Pos         (18U)
#define SERC_IER0_PDRIE18_Msk         (0x1UL << SERC_IER0_PDRIE18_Pos)    /*!< 0x00040000 */
#define SERC_IER0_PDRIE18             SERC_IER0_PDRIE18_Msk
#define SERC_IER0_PDRIE19_Pos         (19U)
#define SERC_IER0_PDRIE19_Msk         (0x1UL << SERC_IER0_PDRIE19_Pos)    /*!< 0x00080000 */
#define SERC_IER0_PDRIE19             SERC_IER0_PDRIE19_Msk
#define SERC_IER0_PDRIE20_Pos         (20U)
#define SERC_IER0_PDRIE20_Msk         (0x1UL << SERC_IER0_PDRIE20_Pos)    /*!< 0x00100000 */
#define SERC_IER0_PDRIE20             SERC_IER0_PDRIE20_Msk
#define SERC_IER0_PDRIE21_Pos         (21U)
#define SERC_IER0_PDRIE21_Msk         (0x1UL << SERC_IER0_PDRIE21_Pos)    /*!< 0x00200000 */
#define SERC_IER0_PDRIE21             SERC_IER0_PDRIE21_Msk
#define SERC_IER0_PDRIE22_Pos         (22U)
#define SERC_IER0_PDRIE22_Msk         (0x1UL << SERC_IER0_PDRIE22_Pos)    /*!< 0x00400000 */
#define SERC_IER0_PDRIE22             SERC_IER0_PDRIE22_Msk
#define SERC_IER0_PDRIE23_Pos         (23U)
#define SERC_IER0_PDRIE23_Msk         (0x1UL << SERC_IER0_PDRIE23_Pos)    /*!< 0x00800000 */
#define SERC_IER0_PDRIE23             SERC_IER0_PDRIE23_Msk
#define SERC_IER0_PDRIE24_Pos         (24U)
#define SERC_IER0_PDRIE24_Msk         (0x1UL << SERC_IER0_PDRIE24_Pos)    /*!< 0x01000000 */
#define SERC_IER0_PDRIE24             SERC_IER0_PDRIE24_Msk
#define SERC_IER0_PDRIE25_Pos         (25U)
#define SERC_IER0_PDRIE25_Msk         (0x1UL << SERC_IER0_PDRIE25_Pos)    /*!< 0x02000000 */
#define SERC_IER0_PDRIE25             SERC_IER0_PDRIE25_Msk
#define SERC_IER0_PDRIE26_Pos         (26U)
#define SERC_IER0_PDRIE26_Msk         (0x1UL << SERC_IER0_PDRIE26_Pos)    /*!< 0x04000000 */
#define SERC_IER0_PDRIE26             SERC_IER0_PDRIE26_Msk
#define SERC_IER0_PDRIE27_Pos         (27U)
#define SERC_IER0_PDRIE27_Msk         (0x1UL << SERC_IER0_PDRIE27_Pos)    /*!< 0x08000000 */
#define SERC_IER0_PDRIE27             SERC_IER0_PDRIE27_Msk
#define SERC_IER0_PDRIE28_Pos         (28U)
#define SERC_IER0_PDRIE28_Msk         (0x1UL << SERC_IER0_PDRIE28_Pos)    /*!< 0x10000000 */
#define SERC_IER0_PDRIE28             SERC_IER0_PDRIE28_Msk
#define SERC_IER0_PDRIE29_Pos         (29U)
#define SERC_IER0_PDRIE29_Msk         (0x1UL << SERC_IER0_PDRIE29_Pos)    /*!< 0x20000000 */
#define SERC_IER0_PDRIE29             SERC_IER0_PDRIE29_Msk
#define SERC_IER0_PDRIE30_Pos         (30U)
#define SERC_IER0_PDRIE30_Msk         (0x1UL << SERC_IER0_PDRIE30_Pos)    /*!< 0x40000000 */
#define SERC_IER0_PDRIE30             SERC_IER0_PDRIE30_Msk
#define SERC_IER0_PDRIE31_Pos         (31U)
#define SERC_IER0_PDRIE31_Msk         (0x1UL << SERC_IER0_PDRIE31_Pos)    /*!< 0x80000000 */
#define SERC_IER0_PDRIE31             SERC_IER0_PDRIE31_Msk

/******************  Bit definition for SERC_IER1 register  *******************/
#define SERC_IER1_PDRIE32_Pos         (0U)
#define SERC_IER1_PDRIE32_Msk         (0x1UL << SERC_IER1_PDRIE32_Pos)    /*!< 0x00000001 */
#define SERC_IER1_PDRIE32             SERC_IER1_PDRIE32_Msk
#define SERC_IER1_PDRIE33_Pos         (1U)
#define SERC_IER1_PDRIE33_Msk         (0x1UL << SERC_IER1_PDRIE33_Pos)    /*!< 0x00000002 */
#define SERC_IER1_PDRIE33             SERC_IER1_PDRIE33_Msk
#define SERC_IER1_PDRIE34_Pos         (2U)
#define SERC_IER1_PDRIE34_Msk         (0x1UL << SERC_IER1_PDRIE34_Pos)    /*!< 0x00000004 */
#define SERC_IER1_PDRIE34             SERC_IER1_PDRIE34_Msk
#define SERC_IER1_PDRIE35_Pos         (3U)
#define SERC_IER1_PDRIE35_Msk         (0x1UL << SERC_IER1_PDRIE35_Pos)    /*!< 0x00000008 */
#define SERC_IER1_PDRIE35             SERC_IER1_PDRIE35_Msk
#define SERC_IER1_PDRIE36_Pos         (4U)
#define SERC_IER1_PDRIE36_Msk         (0x1UL << SERC_IER1_PDRIE36_Pos)    /*!< 0x00000010 */
#define SERC_IER1_PDRIE36             SERC_IER1_PDRIE36_Msk
#define SERC_IER1_PDRIE37_Pos         (5U)
#define SERC_IER1_PDRIE37_Msk         (0x1UL << SERC_IER1_PDRIE37_Pos)    /*!< 0x00000020 */
#define SERC_IER1_PDRIE37             SERC_IER1_PDRIE37_Msk
#define SERC_IER1_PDRIE38_Pos         (6U)
#define SERC_IER1_PDRIE38_Msk         (0x1UL << SERC_IER1_PDRIE38_Pos)    /*!< 0x00000040 */
#define SERC_IER1_PDRIE38             SERC_IER1_PDRIE38_Msk
#define SERC_IER1_PDRIE39_Pos         (7U)
#define SERC_IER1_PDRIE39_Msk         (0x1UL << SERC_IER1_PDRIE39_Pos)    /*!< 0x00000080 */
#define SERC_IER1_PDRIE39             SERC_IER1_PDRIE39_Msk
#define SERC_IER1_PDRIE40_Pos         (8U)
#define SERC_IER1_PDRIE40_Msk         (0x1UL << SERC_IER1_PDRIE40_Pos)    /*!< 0x00000100 */
#define SERC_IER1_PDRIE40             SERC_IER1_PDRIE40_Msk
#define SERC_IER1_PDRIE41_Pos         (9U)
#define SERC_IER1_PDRIE41_Msk         (0x1UL << SERC_IER1_PDRIE41_Pos)    /*!< 0x00000200 */
#define SERC_IER1_PDRIE41             SERC_IER1_PDRIE41_Msk
#define SERC_IER1_PDRIE42_Pos         (10U)
#define SERC_IER1_PDRIE42_Msk         (0x1UL << SERC_IER1_PDRIE42_Pos)    /*!< 0x00000400 */
#define SERC_IER1_PDRIE42             SERC_IER1_PDRIE42_Msk
#define SERC_IER1_PDRIE43_Pos         (11U)
#define SERC_IER1_PDRIE43_Msk         (0x1UL << SERC_IER1_PDRIE43_Pos)    /*!< 0x00000800 */
#define SERC_IER1_PDRIE43             SERC_IER1_PDRIE43_Msk
#define SERC_IER1_PDRIE44_Pos         (12U)
#define SERC_IER1_PDRIE44_Msk         (0x1UL << SERC_IER1_PDRIE44_Pos)    /*!< 0x00001000 */
#define SERC_IER1_PDRIE44             SERC_IER1_PDRIE44_Msk
#define SERC_IER1_PDRIE45_Pos         (13U)
#define SERC_IER1_PDRIE45_Msk         (0x1UL << SERC_IER1_PDRIE45_Pos)    /*!< 0x00002000 */
#define SERC_IER1_PDRIE45             SERC_IER1_PDRIE45_Msk
#define SERC_IER1_PDRIE46_Pos         (14U)
#define SERC_IER1_PDRIE46_Msk         (0x1UL << SERC_IER1_PDRIE46_Pos)    /*!< 0x00004000 */
#define SERC_IER1_PDRIE46             SERC_IER1_PDRIE46_Msk
#define SERC_IER1_PDRIE47_Pos         (15U)
#define SERC_IER1_PDRIE47_Msk         (0x1UL << SERC_IER1_PDRIE47_Pos)    /*!< 0x00008000 */
#define SERC_IER1_PDRIE47             SERC_IER1_PDRIE47_Msk
#define SERC_IER1_PDRIE48_Pos         (16U)
#define SERC_IER1_PDRIE48_Msk         (0x1UL << SERC_IER1_PDRIE48_Pos)    /*!< 0x00010000 */
#define SERC_IER1_PDRIE48             SERC_IER1_PDRIE48_Msk
#define SERC_IER1_PDRIE49_Pos         (17U)
#define SERC_IER1_PDRIE49_Msk         (0x1UL << SERC_IER1_PDRIE49_Pos)    /*!< 0x00020000 */
#define SERC_IER1_PDRIE49             SERC_IER1_PDRIE49_Msk
#define SERC_IER1_PDRIE50_Pos         (18U)
#define SERC_IER1_PDRIE50_Msk         (0x1UL << SERC_IER1_PDRIE50_Pos)    /*!< 0x00040000 */
#define SERC_IER1_PDRIE50             SERC_IER1_PDRIE50_Msk
#define SERC_IER1_PDRIE51_Pos         (19U)
#define SERC_IER1_PDRIE51_Msk         (0x1UL << SERC_IER1_PDRIE51_Pos)    /*!< 0x00080000 */
#define SERC_IER1_PDRIE51             SERC_IER1_PDRIE51_Msk
#define SERC_IER1_PDRIE52_Pos         (20U)
#define SERC_IER1_PDRIE52_Msk         (0x1UL << SERC_IER1_PDRIE52_Pos)    /*!< 0x00100000 */
#define SERC_IER1_PDRIE52             SERC_IER1_PDRIE52_Msk
#define SERC_IER1_PDRIE53_Pos         (21U)
#define SERC_IER1_PDRIE53_Msk         (0x1UL << SERC_IER1_PDRIE53_Pos)    /*!< 0x00200000 */
#define SERC_IER1_PDRIE53             SERC_IER1_PDRIE53_Msk
#define SERC_IER1_PDRIE54_Pos         (22U)
#define SERC_IER1_PDRIE54_Msk         (0x1UL << SERC_IER1_PDRIE54_Pos)    /*!< 0x00400000 */
#define SERC_IER1_PDRIE54             SERC_IER1_PDRIE54_Msk
#define SERC_IER1_PDRIE55_Pos         (23U)
#define SERC_IER1_PDRIE55_Msk         (0x1UL << SERC_IER1_PDRIE55_Pos)    /*!< 0x00800000 */
#define SERC_IER1_PDRIE55             SERC_IER1_PDRIE55_Msk
#define SERC_IER1_PDRIE56_Pos         (24U)
#define SERC_IER1_PDRIE56_Msk         (0x1UL << SERC_IER1_PDRIE56_Pos)    /*!< 0x01000000 */
#define SERC_IER1_PDRIE56             SERC_IER1_PDRIE56_Msk
#define SERC_IER1_PDRIE57_Pos         (25U)
#define SERC_IER1_PDRIE57_Msk         (0x1UL << SERC_IER1_PDRIE57_Pos)    /*!< 0x02000000 */
#define SERC_IER1_PDRIE57             SERC_IER1_PDRIE57_Msk
#define SERC_IER1_PDRIE58_Pos         (26U)
#define SERC_IER1_PDRIE58_Msk         (0x1UL << SERC_IER1_PDRIE58_Pos)    /*!< 0x04000000 */
#define SERC_IER1_PDRIE58             SERC_IER1_PDRIE58_Msk
#define SERC_IER1_PDRIE59_Pos         (27U)
#define SERC_IER1_PDRIE59_Msk         (0x1UL << SERC_IER1_PDRIE59_Pos)    /*!< 0x08000000 */
#define SERC_IER1_PDRIE59             SERC_IER1_PDRIE59_Msk
#define SERC_IER1_PDRIE60_Pos         (28U)
#define SERC_IER1_PDRIE60_Msk         (0x1UL << SERC_IER1_PDRIE60_Pos)    /*!< 0x10000000 */
#define SERC_IER1_PDRIE60             SERC_IER1_PDRIE60_Msk
#define SERC_IER1_PDRIE61_Pos         (29U)
#define SERC_IER1_PDRIE61_Msk         (0x1UL << SERC_IER1_PDRIE61_Pos)    /*!< 0x20000000 */
#define SERC_IER1_PDRIE61             SERC_IER1_PDRIE61_Msk
#define SERC_IER1_PDRIE62_Pos         (30U)
#define SERC_IER1_PDRIE62_Msk         (0x1UL << SERC_IER1_PDRIE62_Pos)    /*!< 0x40000000 */
#define SERC_IER1_PDRIE62             SERC_IER1_PDRIE62_Msk
#define SERC_IER1_PDRIE63_Pos         (31U)
#define SERC_IER1_PDRIE63_Msk         (0x1UL << SERC_IER1_PDRIE63_Pos)    /*!< 0x80000000 */
#define SERC_IER1_PDRIE63             SERC_IER1_PDRIE63_Msk

/******************  Bit definition for SERC_IER2 register  *******************/
#define SERC_IER2_PDRIE64_Pos         (0U)
#define SERC_IER2_PDRIE64_Msk         (0x1UL << SERC_IER2_PDRIE64_Pos)    /*!< 0x00000001 */
#define SERC_IER2_PDRIE64             SERC_IER2_PDRIE64_Msk
#define SERC_IER2_PDRIE65_Pos         (1U)
#define SERC_IER2_PDRIE65_Msk         (0x1UL << SERC_IER2_PDRIE65_Pos)    /*!< 0x00000002 */
#define SERC_IER2_PDRIE65             SERC_IER2_PDRIE65_Msk
#define SERC_IER2_PDRIE66_Pos         (2U)
#define SERC_IER2_PDRIE66_Msk         (0x1UL << SERC_IER2_PDRIE66_Pos)    /*!< 0x00000004 */
#define SERC_IER2_PDRIE66             SERC_IER2_PDRIE66_Msk
#define SERC_IER2_PDRIE67_Pos         (3U)
#define SERC_IER2_PDRIE67_Msk         (0x1UL << SERC_IER2_PDRIE67_Pos)    /*!< 0x00000008 */
#define SERC_IER2_PDRIE67             SERC_IER2_PDRIE67_Msk
#define SERC_IER2_PDRIE68_Pos         (4U)
#define SERC_IER2_PDRIE68_Msk         (0x1UL << SERC_IER2_PDRIE68_Pos)    /*!< 0x00000010 */
#define SERC_IER2_PDRIE68             SERC_IER2_PDRIE68_Msk
#define SERC_IER2_PDRIE69_Pos         (5U)
#define SERC_IER2_PDRIE69_Msk         (0x1UL << SERC_IER2_PDRIE69_Pos)    /*!< 0x00000020 */
#define SERC_IER2_PDRIE69             SERC_IER2_PDRIE69_Msk
#define SERC_IER2_PDRIE70_Pos         (6U)
#define SERC_IER2_PDRIE70_Msk         (0x1UL << SERC_IER2_PDRIE70_Pos)    /*!< 0x00000040 */
#define SERC_IER2_PDRIE70             SERC_IER2_PDRIE70_Msk
#define SERC_IER2_PDRIE71_Pos         (7U)
#define SERC_IER2_PDRIE71_Msk         (0x1UL << SERC_IER2_PDRIE71_Pos)    /*!< 0x00000080 */
#define SERC_IER2_PDRIE71             SERC_IER2_PDRIE71_Msk
#define SERC_IER2_PDRIE72_Pos         (8U)
#define SERC_IER2_PDRIE72_Msk         (0x1UL << SERC_IER2_PDRIE72_Pos)    /*!< 0x00000100 */
#define SERC_IER2_PDRIE72             SERC_IER2_PDRIE72_Msk
#define SERC_IER2_PDRIE73_Pos         (9U)
#define SERC_IER2_PDRIE73_Msk         (0x1UL << SERC_IER2_PDRIE73_Pos)    /*!< 0x00000200 */
#define SERC_IER2_PDRIE73             SERC_IER2_PDRIE73_Msk
#define SERC_IER2_PDRIE74_Pos         (10U)
#define SERC_IER2_PDRIE74_Msk         (0x1UL << SERC_IER2_PDRIE74_Pos)    /*!< 0x00000400 */
#define SERC_IER2_PDRIE74             SERC_IER2_PDRIE74_Msk
#define SERC_IER2_PDRIE75_Pos         (11U)
#define SERC_IER2_PDRIE75_Msk         (0x1UL << SERC_IER2_PDRIE75_Pos)    /*!< 0x00000800 */
#define SERC_IER2_PDRIE75             SERC_IER2_PDRIE75_Msk
#define SERC_IER2_PDRIE76_Pos         (12U)
#define SERC_IER2_PDRIE76_Msk         (0x1UL << SERC_IER2_PDRIE76_Pos)    /*!< 0x00001000 */
#define SERC_IER2_PDRIE76             SERC_IER2_PDRIE76_Msk
#define SERC_IER2_PDRIE77_Pos         (13U)
#define SERC_IER2_PDRIE77_Msk         (0x1UL << SERC_IER2_PDRIE77_Pos)    /*!< 0x00002000 */
#define SERC_IER2_PDRIE77             SERC_IER2_PDRIE77_Msk
#define SERC_IER2_PDRIE78_Pos         (14U)
#define SERC_IER2_PDRIE78_Msk         (0x1UL << SERC_IER2_PDRIE78_Pos)    /*!< 0x00004000 */
#define SERC_IER2_PDRIE78             SERC_IER2_PDRIE78_Msk
#define SERC_IER2_PDRIE79_Pos         (15U)
#define SERC_IER2_PDRIE79_Msk         (0x1UL << SERC_IER2_PDRIE79_Pos)    /*!< 0x00008000 */
#define SERC_IER2_PDRIE79             SERC_IER2_PDRIE79_Msk
#define SERC_IER2_PDRIE80_Pos         (16U)
#define SERC_IER2_PDRIE80_Msk         (0x1UL << SERC_IER2_PDRIE80_Pos)    /*!< 0x00010000 */
#define SERC_IER2_PDRIE80             SERC_IER2_PDRIE80_Msk
#define SERC_IER2_PDRIE81_Pos         (17U)
#define SERC_IER2_PDRIE81_Msk         (0x1UL << SERC_IER2_PDRIE81_Pos)    /*!< 0x00020000 */
#define SERC_IER2_PDRIE81             SERC_IER2_PDRIE81_Msk
#define SERC_IER2_PDRIE82_Pos         (18U)
#define SERC_IER2_PDRIE82_Msk         (0x1UL << SERC_IER2_PDRIE82_Pos)    /*!< 0x00040000 */
#define SERC_IER2_PDRIE82             SERC_IER2_PDRIE82_Msk
#define SERC_IER2_PDRIE83_Pos         (19U)
#define SERC_IER2_PDRIE83_Msk         (0x1UL << SERC_IER2_PDRIE83_Pos)    /*!< 0x00080000 */
#define SERC_IER2_PDRIE83             SERC_IER2_PDRIE83_Msk
#define SERC_IER2_PDRIE84_Pos         (20U)
#define SERC_IER2_PDRIE84_Msk         (0x1UL << SERC_IER2_PDRIE84_Pos)    /*!< 0x00100000 */
#define SERC_IER2_PDRIE84             SERC_IER2_PDRIE84_Msk
#define SERC_IER2_PDRIE85_Pos         (21U)
#define SERC_IER2_PDRIE85_Msk         (0x1UL << SERC_IER2_PDRIE85_Pos)    /*!< 0x00200000 */
#define SERC_IER2_PDRIE85             SERC_IER2_PDRIE85_Msk
#define SERC_IER2_PDRIE86_Pos         (22U)
#define SERC_IER2_PDRIE86_Msk         (0x1UL << SERC_IER2_PDRIE86_Pos)    /*!< 0x00400000 */
#define SERC_IER2_PDRIE86             SERC_IER2_PDRIE86_Msk
#define SERC_IER2_PDRIE87_Pos         (23U)
#define SERC_IER2_PDRIE87_Msk         (0x1UL << SERC_IER2_PDRIE87_Pos)    /*!< 0x00800000 */
#define SERC_IER2_PDRIE87             SERC_IER2_PDRIE87_Msk
#define SERC_IER2_PDRIE88_Pos         (24U)
#define SERC_IER2_PDRIE88_Msk         (0x1UL << SERC_IER2_PDRIE88_Pos)    /*!< 0x01000000 */
#define SERC_IER2_PDRIE88             SERC_IER2_PDRIE88_Msk
#define SERC_IER2_PDRIE89_Pos         (25U)
#define SERC_IER2_PDRIE89_Msk         (0x1UL << SERC_IER2_PDRIE89_Pos)    /*!< 0x02000000 */
#define SERC_IER2_PDRIE89             SERC_IER2_PDRIE89_Msk
#define SERC_IER2_PDRIE90_Pos         (26U)
#define SERC_IER2_PDRIE90_Msk         (0x1UL << SERC_IER2_PDRIE90_Pos)    /*!< 0x04000000 */
#define SERC_IER2_PDRIE90             SERC_IER2_PDRIE90_Msk
#define SERC_IER2_PDRIE91_Pos         (27U)
#define SERC_IER2_PDRIE91_Msk         (0x1UL << SERC_IER2_PDRIE91_Pos)    /*!< 0x08000000 */
#define SERC_IER2_PDRIE91             SERC_IER2_PDRIE91_Msk
#define SERC_IER2_PDRIE92_Pos         (28U)
#define SERC_IER2_PDRIE92_Msk         (0x1UL << SERC_IER2_PDRIE92_Pos)    /*!< 0x10000000 */
#define SERC_IER2_PDRIE92             SERC_IER2_PDRIE92_Msk
#define SERC_IER2_PDRIE93_Pos         (29U)
#define SERC_IER2_PDRIE93_Msk         (0x1UL << SERC_IER2_PDRIE93_Pos)    /*!< 0x20000000 */
#define SERC_IER2_PDRIE93             SERC_IER2_PDRIE93_Msk
#define SERC_IER2_PDRIE94_Pos         (30U)
#define SERC_IER2_PDRIE94_Msk         (0x1UL << SERC_IER2_PDRIE94_Pos)    /*!< 0x40000000 */
#define SERC_IER2_PDRIE94             SERC_IER2_PDRIE94_Msk
#define SERC_IER2_PDRIE95_Pos         (31U)
#define SERC_IER2_PDRIE95_Msk         (0x1UL << SERC_IER2_PDRIE95_Pos)    /*!< 0x80000000 */
#define SERC_IER2_PDRIE95             SERC_IER2_PDRIE95_Msk

/******************  Bit definition for SERC_IER3 register  *******************/
#define SERC_IER3_PDRIE96_Pos         (0U)
#define SERC_IER3_PDRIE96_Msk         (0x1UL << SERC_IER3_PDRIE96_Pos)    /*!< 0x00000001 */
#define SERC_IER3_PDRIE96             SERC_IER3_PDRIE96_Msk
#define SERC_IER3_PDRIE97_Pos         (1U)
#define SERC_IER3_PDRIE97_Msk         (0x1UL << SERC_IER3_PDRIE97_Pos)    /*!< 0x00000002 */
#define SERC_IER3_PDRIE97             SERC_IER3_PDRIE97_Msk
#define SERC_IER3_PDRIE98_Pos         (2U)
#define SERC_IER3_PDRIE98_Msk         (0x1UL << SERC_IER3_PDRIE98_Pos)    /*!< 0x00000004 */
#define SERC_IER3_PDRIE98             SERC_IER3_PDRIE98_Msk
#define SERC_IER3_PDRIE99_Pos         (3U)
#define SERC_IER3_PDRIE99_Msk         (0x1UL << SERC_IER3_PDRIE99_Pos)    /*!< 0x00000008 */
#define SERC_IER3_PDRIE99             SERC_IER3_PDRIE99_Msk
#define SERC_IER3_PDRIE100_Pos        (4U)
#define SERC_IER3_PDRIE100_Msk        (0x1UL << SERC_IER3_PDRIE100_Pos)   /*!< 0x00000010 */
#define SERC_IER3_PDRIE100            SERC_IER3_PDRIE100_Msk
#define SERC_IER3_PDRIE101_Pos        (5U)
#define SERC_IER3_PDRIE101_Msk        (0x1UL << SERC_IER3_PDRIE101_Pos)   /*!< 0x00000020 */
#define SERC_IER3_PDRIE101            SERC_IER3_PDRIE101_Msk
#define SERC_IER3_PDRIE102_Pos        (6U)
#define SERC_IER3_PDRIE102_Msk        (0x1UL << SERC_IER3_PDRIE102_Pos)   /*!< 0x00000040 */
#define SERC_IER3_PDRIE102            SERC_IER3_PDRIE102_Msk
#define SERC_IER3_PDRIE103_Pos        (7U)
#define SERC_IER3_PDRIE103_Msk        (0x1UL << SERC_IER3_PDRIE103_Pos)   /*!< 0x00000080 */
#define SERC_IER3_PDRIE103            SERC_IER3_PDRIE103_Msk
#define SERC_IER3_PDRIE104_Pos        (8U)
#define SERC_IER3_PDRIE104_Msk        (0x1UL << SERC_IER3_PDRIE104_Pos)   /*!< 0x00000100 */
#define SERC_IER3_PDRIE104            SERC_IER3_PDRIE104_Msk
#define SERC_IER3_PDRIE105_Pos        (9U)
#define SERC_IER3_PDRIE105_Msk        (0x1UL << SERC_IER3_PDRIE105_Pos)   /*!< 0x00000200 */
#define SERC_IER3_PDRIE105            SERC_IER3_PDRIE105_Msk
#define SERC_IER3_PDRIE106_Pos        (10U)
#define SERC_IER3_PDRIE106_Msk        (0x1UL << SERC_IER3_PDRIE106_Pos)   /*!< 0x00000400 */
#define SERC_IER3_PDRIE106            SERC_IER3_PDRIE106_Msk
#define SERC_IER3_PDRIE107_Pos        (11U)
#define SERC_IER3_PDRIE107_Msk        (0x1UL << SERC_IER3_PDRIE107_Pos)   /*!< 0x00000800 */
#define SERC_IER3_PDRIE107            SERC_IER3_PDRIE107_Msk
#define SERC_IER3_PDRIE108_Pos        (12U)
#define SERC_IER3_PDRIE108_Msk        (0x1UL << SERC_IER3_PDRIE108_Pos)   /*!< 0x00001000 */
#define SERC_IER3_PDRIE108            SERC_IER3_PDRIE108_Msk
#define SERC_IER3_PDRIE109_Pos        (13U)
#define SERC_IER3_PDRIE109_Msk        (0x1UL << SERC_IER3_PDRIE109_Pos)   /*!< 0x00002000 */
#define SERC_IER3_PDRIE109            SERC_IER3_PDRIE109_Msk
#define SERC_IER3_PDRIE110_Pos        (14U)
#define SERC_IER3_PDRIE110_Msk        (0x1UL << SERC_IER3_PDRIE110_Pos)   /*!< 0x00004000 */
#define SERC_IER3_PDRIE110            SERC_IER3_PDRIE110_Msk
#define SERC_IER3_PDRIE111_Pos        (15U)
#define SERC_IER3_PDRIE111_Msk        (0x1UL << SERC_IER3_PDRIE111_Pos)   /*!< 0x00008000 */
#define SERC_IER3_PDRIE111            SERC_IER3_PDRIE111_Msk
#define SERC_IER3_PDRIE112_Pos        (16U)
#define SERC_IER3_PDRIE112_Msk        (0x1UL << SERC_IER3_PDRIE112_Pos)   /*!< 0x00010000 */
#define SERC_IER3_PDRIE112            SERC_IER3_PDRIE112_Msk
#define SERC_IER3_PDRIE113_Pos        (17U)
#define SERC_IER3_PDRIE113_Msk        (0x1UL << SERC_IER3_PDRIE113_Pos)   /*!< 0x00020000 */
#define SERC_IER3_PDRIE113            SERC_IER3_PDRIE113_Msk
#define SERC_IER3_PDRIE114_Pos        (18U)
#define SERC_IER3_PDRIE114_Msk        (0x1UL << SERC_IER3_PDRIE114_Pos)   /*!< 0x00040000 */
#define SERC_IER3_PDRIE114            SERC_IER3_PDRIE114_Msk
#define SERC_IER3_PDRIE115_Pos        (19U)
#define SERC_IER3_PDRIE115_Msk        (0x1UL << SERC_IER3_PDRIE115_Pos)   /*!< 0x00080000 */
#define SERC_IER3_PDRIE115            SERC_IER3_PDRIE115_Msk
#define SERC_IER3_PDRIE116_Pos        (20U)
#define SERC_IER3_PDRIE116_Msk        (0x1UL << SERC_IER3_PDRIE116_Pos)   /*!< 0x00100000 */
#define SERC_IER3_PDRIE116            SERC_IER3_PDRIE116_Msk
#define SERC_IER3_PDRIE117_Pos        (21U)
#define SERC_IER3_PDRIE117_Msk        (0x1UL << SERC_IER3_PDRIE117_Pos)   /*!< 0x00200000 */
#define SERC_IER3_PDRIE117            SERC_IER3_PDRIE117_Msk
#define SERC_IER3_PDRIE118_Pos        (22U)
#define SERC_IER3_PDRIE118_Msk        (0x1UL << SERC_IER3_PDRIE118_Pos)   /*!< 0x00400000 */
#define SERC_IER3_PDRIE118            SERC_IER3_PDRIE118_Msk
#define SERC_IER3_PDRIE119_Pos        (23U)
#define SERC_IER3_PDRIE119_Msk        (0x1UL << SERC_IER3_PDRIE119_Pos)   /*!< 0x00800000 */
#define SERC_IER3_PDRIE119            SERC_IER3_PDRIE119_Msk
#define SERC_IER3_PDRIE120_Pos        (24U)
#define SERC_IER3_PDRIE120_Msk        (0x1UL << SERC_IER3_PDRIE120_Pos)   /*!< 0x01000000 */
#define SERC_IER3_PDRIE120            SERC_IER3_PDRIE120_Msk
#define SERC_IER3_PDRIE121_Pos        (25U)
#define SERC_IER3_PDRIE121_Msk        (0x1UL << SERC_IER3_PDRIE121_Pos)   /*!< 0x02000000 */
#define SERC_IER3_PDRIE121            SERC_IER3_PDRIE121_Msk
#define SERC_IER3_PDRIE122_Pos        (26U)
#define SERC_IER3_PDRIE122_Msk        (0x1UL << SERC_IER3_PDRIE122_Pos)   /*!< 0x04000000 */
#define SERC_IER3_PDRIE122            SERC_IER3_PDRIE122_Msk
#define SERC_IER3_PDRIE123_Pos        (27U)
#define SERC_IER3_PDRIE123_Msk        (0x1UL << SERC_IER3_PDRIE123_Pos)   /*!< 0x08000000 */
#define SERC_IER3_PDRIE123            SERC_IER3_PDRIE123_Msk
#define SERC_IER3_PDRIE124_Pos        (28U)
#define SERC_IER3_PDRIE124_Msk        (0x1UL << SERC_IER3_PDRIE124_Pos)   /*!< 0x10000000 */
#define SERC_IER3_PDRIE124            SERC_IER3_PDRIE124_Msk
#define SERC_IER3_PDRIE125_Pos        (29U)
#define SERC_IER3_PDRIE125_Msk        (0x1UL << SERC_IER3_PDRIE125_Pos)   /*!< 0x20000000 */
#define SERC_IER3_PDRIE125            SERC_IER3_PDRIE125_Msk
#define SERC_IER3_PDRIE126_Pos        (30U)
#define SERC_IER3_PDRIE126_Msk        (0x1UL << SERC_IER3_PDRIE126_Pos)   /*!< 0x40000000 */
#define SERC_IER3_PDRIE126            SERC_IER3_PDRIE126_Msk
#define SERC_IER3_PDRIE127_Pos        (31U)
#define SERC_IER3_PDRIE127_Msk        (0x1UL << SERC_IER3_PDRIE127_Pos)   /*!< 0x80000000 */
#define SERC_IER3_PDRIE127            SERC_IER3_PDRIE127_Msk

/******************  Bit definition for SERC_IER4 register  *******************/
#define SERC_IER4_PDRIE128_Pos        (0U)
#define SERC_IER4_PDRIE128_Msk        (0x1UL << SERC_IER4_PDRIE128_Pos)   /*!< 0x00000001 */
#define SERC_IER4_PDRIE128            SERC_IER4_PDRIE128_Msk
#define SERC_IER4_PDRIE129_Pos        (1U)
#define SERC_IER4_PDRIE129_Msk        (0x1UL << SERC_IER4_PDRIE129_Pos)   /*!< 0x00000002 */
#define SERC_IER4_PDRIE129            SERC_IER4_PDRIE129_Msk
#define SERC_IER4_PDRIE130_Pos        (2U)
#define SERC_IER4_PDRIE130_Msk        (0x1UL << SERC_IER4_PDRIE130_Pos)   /*!< 0x00000004 */
#define SERC_IER4_PDRIE130            SERC_IER4_PDRIE130_Msk
#define SERC_IER4_PDRIE131_Pos        (3U)
#define SERC_IER4_PDRIE131_Msk        (0x1UL << SERC_IER4_PDRIE131_Pos)   /*!< 0x00000008 */
#define SERC_IER4_PDRIE131            SERC_IER4_PDRIE131_Msk
#define SERC_IER4_PDRIE132_Pos        (4U)
#define SERC_IER4_PDRIE132_Msk        (0x1UL << SERC_IER4_PDRIE132_Pos)   /*!< 0x00000010 */
#define SERC_IER4_PDRIE132            SERC_IER4_PDRIE132_Msk
#define SERC_IER4_PDRIE133_Pos        (5U)
#define SERC_IER4_PDRIE133_Msk        (0x1UL << SERC_IER4_PDRIE133_Pos)   /*!< 0x00000020 */
#define SERC_IER4_PDRIE133            SERC_IER4_PDRIE133_Msk
#define SERC_IER4_PDRIE134_Pos        (6U)
#define SERC_IER4_PDRIE134_Msk        (0x1UL << SERC_IER4_PDRIE134_Pos)   /*!< 0x00000040 */
#define SERC_IER4_PDRIE134            SERC_IER4_PDRIE134_Msk
#define SERC_IER4_PDRIE135_Pos        (7U)
#define SERC_IER4_PDRIE135_Msk        (0x1UL << SERC_IER4_PDRIE135_Pos)   /*!< 0x00000080 */
#define SERC_IER4_PDRIE135            SERC_IER4_PDRIE135_Msk
#define SERC_IER4_PDRIE136_Pos        (8U)
#define SERC_IER4_PDRIE136_Msk        (0x1UL << SERC_IER4_PDRIE136_Pos)   /*!< 0x00000100 */
#define SERC_IER4_PDRIE136            SERC_IER4_PDRIE136_Msk
#define SERC_IER4_PDRIE137_Pos        (9U)
#define SERC_IER4_PDRIE137_Msk        (0x1UL << SERC_IER4_PDRIE137_Pos)   /*!< 0x00000200 */
#define SERC_IER4_PDRIE137            SERC_IER4_PDRIE137_Msk
#define SERC_IER4_PDRIE138_Pos        (10U)
#define SERC_IER4_PDRIE138_Msk        (0x1UL << SERC_IER4_PDRIE138_Pos)   /*!< 0x00000400 */
#define SERC_IER4_PDRIE138            SERC_IER4_PDRIE138_Msk
#define SERC_IER4_PDRIE139_Pos        (11U)
#define SERC_IER4_PDRIE139_Msk        (0x1UL << SERC_IER4_PDRIE139_Pos)   /*!< 0x00000800 */
#define SERC_IER4_PDRIE139            SERC_IER4_PDRIE139_Msk
#define SERC_IER4_PDRIE140_Pos        (12U)
#define SERC_IER4_PDRIE140_Msk        (0x1UL << SERC_IER4_PDRIE140_Pos)   /*!< 0x00001000 */
#define SERC_IER4_PDRIE140            SERC_IER4_PDRIE140_Msk
#define SERC_IER4_PDRIE141_Pos        (13U)
#define SERC_IER4_PDRIE141_Msk        (0x1UL << SERC_IER4_PDRIE141_Pos)   /*!< 0x00002000 */
#define SERC_IER4_PDRIE141            SERC_IER4_PDRIE141_Msk
#define SERC_IER4_PDRIE142_Pos        (14U)
#define SERC_IER4_PDRIE142_Msk        (0x1UL << SERC_IER4_PDRIE142_Pos)   /*!< 0x00004000 */
#define SERC_IER4_PDRIE142            SERC_IER4_PDRIE142_Msk
#define SERC_IER4_PDRIE143_Pos        (15U)
#define SERC_IER4_PDRIE143_Msk        (0x1UL << SERC_IER4_PDRIE143_Pos)   /*!< 0x00008000 */
#define SERC_IER4_PDRIE143            SERC_IER4_PDRIE143_Msk
#define SERC_IER4_PDRIE144_Pos        (16U)
#define SERC_IER4_PDRIE144_Msk        (0x1UL << SERC_IER4_PDRIE144_Pos)   /*!< 0x00010000 */
#define SERC_IER4_PDRIE144            SERC_IER4_PDRIE144_Msk
#define SERC_IER4_PDRIE145_Pos        (17U)
#define SERC_IER4_PDRIE145_Msk        (0x1UL << SERC_IER4_PDRIE145_Pos)   /*!< 0x00020000 */
#define SERC_IER4_PDRIE145            SERC_IER4_PDRIE145_Msk
#define SERC_IER4_PDRIE146_Pos        (18U)
#define SERC_IER4_PDRIE146_Msk        (0x1UL << SERC_IER4_PDRIE146_Pos)   /*!< 0x00040000 */
#define SERC_IER4_PDRIE146            SERC_IER4_PDRIE146_Msk
#define SERC_IER4_PDRIE147_Pos        (19U)
#define SERC_IER4_PDRIE147_Msk        (0x1UL << SERC_IER4_PDRIE147_Pos)   /*!< 0x00080000 */
#define SERC_IER4_PDRIE147            SERC_IER4_PDRIE147_Msk
#define SERC_IER4_PDRIE148_Pos        (20U)
#define SERC_IER4_PDRIE148_Msk        (0x1UL << SERC_IER4_PDRIE148_Pos)   /*!< 0x00100000 */
#define SERC_IER4_PDRIE148            SERC_IER4_PDRIE148_Msk
#define SERC_IER4_PDRIE149_Pos        (21U)
#define SERC_IER4_PDRIE149_Msk        (0x1UL << SERC_IER4_PDRIE149_Pos)   /*!< 0x00200000 */
#define SERC_IER4_PDRIE149            SERC_IER4_PDRIE149_Msk
#define SERC_IER4_PDRIE150_Pos        (22U)
#define SERC_IER4_PDRIE150_Msk        (0x1UL << SERC_IER4_PDRIE150_Pos)   /*!< 0x00400000 */
#define SERC_IER4_PDRIE150            SERC_IER4_PDRIE150_Msk
#define SERC_IER4_PDRIE151_Pos        (23U)
#define SERC_IER4_PDRIE151_Msk        (0x1UL << SERC_IER4_PDRIE151_Pos)   /*!< 0x00800000 */
#define SERC_IER4_PDRIE151            SERC_IER4_PDRIE151_Msk
#define SERC_IER4_PDRIE152_Pos        (24U)
#define SERC_IER4_PDRIE152_Msk        (0x1UL << SERC_IER4_PDRIE152_Pos)   /*!< 0x01000000 */
#define SERC_IER4_PDRIE152            SERC_IER4_PDRIE152_Msk
#define SERC_IER4_PDRIE153_Pos        (25U)
#define SERC_IER4_PDRIE153_Msk        (0x1UL << SERC_IER4_PDRIE153_Pos)   /*!< 0x02000000 */
#define SERC_IER4_PDRIE153            SERC_IER4_PDRIE153_Msk
#define SERC_IER4_PDRIE154_Pos        (26U)
#define SERC_IER4_PDRIE154_Msk        (0x1UL << SERC_IER4_PDRIE154_Pos)   /*!< 0x04000000 */
#define SERC_IER4_PDRIE154            SERC_IER4_PDRIE154_Msk
#define SERC_IER4_PDRIE155_Pos        (27U)
#define SERC_IER4_PDRIE155_Msk        (0x1UL << SERC_IER4_PDRIE155_Pos)   /*!< 0x08000000 */
#define SERC_IER4_PDRIE155            SERC_IER4_PDRIE155_Msk
#define SERC_IER4_PDRIE156_Pos        (28U)
#define SERC_IER4_PDRIE156_Msk        (0x1UL << SERC_IER4_PDRIE156_Pos)   /*!< 0x10000000 */
#define SERC_IER4_PDRIE156            SERC_IER4_PDRIE156_Msk
#define SERC_IER4_PDRIE157_Pos        (29U)
#define SERC_IER4_PDRIE157_Msk        (0x1UL << SERC_IER4_PDRIE157_Pos)   /*!< 0x20000000 */
#define SERC_IER4_PDRIE157            SERC_IER4_PDRIE157_Msk
#define SERC_IER4_PDRIE158_Pos        (30U)
#define SERC_IER4_PDRIE158_Msk        (0x1UL << SERC_IER4_PDRIE158_Pos)   /*!< 0x40000000 */
#define SERC_IER4_PDRIE158            SERC_IER4_PDRIE158_Msk
#define SERC_IER4_PDRIE159_Pos        (31U)
#define SERC_IER4_PDRIE159_Msk        (0x1UL << SERC_IER4_PDRIE159_Pos)   /*!< 0x80000000 */
#define SERC_IER4_PDRIE159            SERC_IER4_PDRIE159_Msk

/******************  Bit definition for SERC_IER5 register  *******************/
#define SERC_IER5_PDRIE160_Pos        (0U)
#define SERC_IER5_PDRIE160_Msk        (0x1UL << SERC_IER5_PDRIE160_Pos)   /*!< 0x00000001 */
#define SERC_IER5_PDRIE160            SERC_IER5_PDRIE160_Msk
#define SERC_IER5_PDRIE161_Pos        (1U)
#define SERC_IER5_PDRIE161_Msk        (0x1UL << SERC_IER5_PDRIE161_Pos)   /*!< 0x00000002 */
#define SERC_IER5_PDRIE161            SERC_IER5_PDRIE161_Msk
#define SERC_IER5_PDRIE162_Pos        (2U)
#define SERC_IER5_PDRIE162_Msk        (0x1UL << SERC_IER5_PDRIE162_Pos)   /*!< 0x00000004 */
#define SERC_IER5_PDRIE162            SERC_IER5_PDRIE162_Msk
#define SERC_IER5_PDRIE163_Pos        (3U)
#define SERC_IER5_PDRIE163_Msk        (0x1UL << SERC_IER5_PDRIE163_Pos)   /*!< 0x00000008 */
#define SERC_IER5_PDRIE163            SERC_IER5_PDRIE163_Msk
#define SERC_IER5_PDRIE164_Pos        (4U)
#define SERC_IER5_PDRIE164_Msk        (0x1UL << SERC_IER5_PDRIE164_Pos)   /*!< 0x00000010 */
#define SERC_IER5_PDRIE164            SERC_IER5_PDRIE164_Msk
#define SERC_IER5_PDRIE165_Pos        (5U)
#define SERC_IER5_PDRIE165_Msk        (0x1UL << SERC_IER5_PDRIE165_Pos)   /*!< 0x00000020 */
#define SERC_IER5_PDRIE165            SERC_IER5_PDRIE165_Msk
#define SERC_IER5_PDRIE166_Pos        (6U)
#define SERC_IER5_PDRIE166_Msk        (0x1UL << SERC_IER5_PDRIE166_Pos)   /*!< 0x00000040 */
#define SERC_IER5_PDRIE166            SERC_IER5_PDRIE166_Msk
#define SERC_IER5_PDRIE167_Pos        (7U)
#define SERC_IER5_PDRIE167_Msk        (0x1UL << SERC_IER5_PDRIE167_Pos)   /*!< 0x00000080 */
#define SERC_IER5_PDRIE167            SERC_IER5_PDRIE167_Msk
#define SERC_IER5_PDRIE168_Pos        (8U)
#define SERC_IER5_PDRIE168_Msk        (0x1UL << SERC_IER5_PDRIE168_Pos)   /*!< 0x00000100 */
#define SERC_IER5_PDRIE168            SERC_IER5_PDRIE168_Msk
#define SERC_IER5_PDRIE169_Pos        (9U)
#define SERC_IER5_PDRIE169_Msk        (0x1UL << SERC_IER5_PDRIE169_Pos)   /*!< 0x00000200 */
#define SERC_IER5_PDRIE169            SERC_IER5_PDRIE169_Msk
#define SERC_IER5_PDRIE170_Pos        (10U)
#define SERC_IER5_PDRIE170_Msk        (0x1UL << SERC_IER5_PDRIE170_Pos)   /*!< 0x00000400 */
#define SERC_IER5_PDRIE170            SERC_IER5_PDRIE170_Msk
#define SERC_IER5_PDRIE171_Pos        (11U)
#define SERC_IER5_PDRIE171_Msk        (0x1UL << SERC_IER5_PDRIE171_Pos)   /*!< 0x00000800 */
#define SERC_IER5_PDRIE171            SERC_IER5_PDRIE171_Msk
#define SERC_IER5_PDRIE172_Pos        (12U)
#define SERC_IER5_PDRIE172_Msk        (0x1UL << SERC_IER5_PDRIE172_Pos)   /*!< 0x00001000 */
#define SERC_IER5_PDRIE172            SERC_IER5_PDRIE172_Msk
#define SERC_IER5_PDRIE173_Pos        (13U)
#define SERC_IER5_PDRIE173_Msk        (0x1UL << SERC_IER5_PDRIE173_Pos)   /*!< 0x00002000 */
#define SERC_IER5_PDRIE173            SERC_IER5_PDRIE173_Msk
#define SERC_IER5_PDRIE174_Pos        (14U)
#define SERC_IER5_PDRIE174_Msk        (0x1UL << SERC_IER5_PDRIE174_Pos)   /*!< 0x00004000 */
#define SERC_IER5_PDRIE174            SERC_IER5_PDRIE174_Msk
#define SERC_IER5_PDRIE175_Pos        (15U)
#define SERC_IER5_PDRIE175_Msk        (0x1UL << SERC_IER5_PDRIE175_Pos)   /*!< 0x00008000 */
#define SERC_IER5_PDRIE175            SERC_IER5_PDRIE175_Msk
#define SERC_IER5_PDRIE176_Pos        (16U)
#define SERC_IER5_PDRIE176_Msk        (0x1UL << SERC_IER5_PDRIE176_Pos)   /*!< 0x00010000 */
#define SERC_IER5_PDRIE176            SERC_IER5_PDRIE176_Msk
#define SERC_IER5_PDRIE177_Pos        (17U)
#define SERC_IER5_PDRIE177_Msk        (0x1UL << SERC_IER5_PDRIE177_Pos)   /*!< 0x00020000 */
#define SERC_IER5_PDRIE177            SERC_IER5_PDRIE177_Msk
#define SERC_IER5_PDRIE178_Pos        (18U)
#define SERC_IER5_PDRIE178_Msk        (0x1UL << SERC_IER5_PDRIE178_Pos)   /*!< 0x00040000 */
#define SERC_IER5_PDRIE178            SERC_IER5_PDRIE178_Msk
#define SERC_IER5_PDRIE179_Pos        (19U)
#define SERC_IER5_PDRIE179_Msk        (0x1UL << SERC_IER5_PDRIE179_Pos)   /*!< 0x00080000 */
#define SERC_IER5_PDRIE179            SERC_IER5_PDRIE179_Msk
#define SERC_IER5_PDRIE180_Pos        (20U)
#define SERC_IER5_PDRIE180_Msk        (0x1UL << SERC_IER5_PDRIE180_Pos)   /*!< 0x00100000 */
#define SERC_IER5_PDRIE180            SERC_IER5_PDRIE180_Msk
#define SERC_IER5_PDRIE181_Pos        (21U)
#define SERC_IER5_PDRIE181_Msk        (0x1UL << SERC_IER5_PDRIE181_Pos)   /*!< 0x00200000 */
#define SERC_IER5_PDRIE181            SERC_IER5_PDRIE181_Msk
#define SERC_IER5_PDRIE182_Pos        (22U)
#define SERC_IER5_PDRIE182_Msk        (0x1UL << SERC_IER5_PDRIE182_Pos)   /*!< 0x00400000 */
#define SERC_IER5_PDRIE182            SERC_IER5_PDRIE182_Msk
#define SERC_IER5_PDRIE183_Pos        (23U)
#define SERC_IER5_PDRIE183_Msk        (0x1UL << SERC_IER5_PDRIE183_Pos)   /*!< 0x00800000 */
#define SERC_IER5_PDRIE183            SERC_IER5_PDRIE183_Msk
#define SERC_IER5_PDRIE184_Pos        (24U)
#define SERC_IER5_PDRIE184_Msk        (0x1UL << SERC_IER5_PDRIE184_Pos)   /*!< 0x01000000 */
#define SERC_IER5_PDRIE184            SERC_IER5_PDRIE184_Msk
#define SERC_IER5_PDRIE185_Pos        (25U)
#define SERC_IER5_PDRIE185_Msk        (0x1UL << SERC_IER5_PDRIE185_Pos)   /*!< 0x02000000 */
#define SERC_IER5_PDRIE185            SERC_IER5_PDRIE185_Msk
#define SERC_IER5_PDRIE186_Pos        (26U)
#define SERC_IER5_PDRIE186_Msk        (0x1UL << SERC_IER5_PDRIE186_Pos)   /*!< 0x04000000 */
#define SERC_IER5_PDRIE186            SERC_IER5_PDRIE186_Msk
#define SERC_IER5_PDRIE187_Pos        (27U)
#define SERC_IER5_PDRIE187_Msk        (0x1UL << SERC_IER5_PDRIE187_Pos)   /*!< 0x08000000 */
#define SERC_IER5_PDRIE187            SERC_IER5_PDRIE187_Msk
#define SERC_IER5_PDRIE188_Pos        (28U)
#define SERC_IER5_PDRIE188_Msk        (0x1UL << SERC_IER5_PDRIE188_Pos)   /*!< 0x10000000 */
#define SERC_IER5_PDRIE188            SERC_IER5_PDRIE188_Msk
#define SERC_IER5_PDRIE189_Pos        (29U)
#define SERC_IER5_PDRIE189_Msk        (0x1UL << SERC_IER5_PDRIE189_Pos)   /*!< 0x20000000 */
#define SERC_IER5_PDRIE189            SERC_IER5_PDRIE189_Msk
#define SERC_IER5_PDRIE190_Pos        (30U)
#define SERC_IER5_PDRIE190_Msk        (0x1UL << SERC_IER5_PDRIE190_Pos)   /*!< 0x40000000 */
#define SERC_IER5_PDRIE190            SERC_IER5_PDRIE190_Msk
#define SERC_IER5_PDRIE191_Pos        (31U)
#define SERC_IER5_PDRIE191_Msk        (0x1UL << SERC_IER5_PDRIE191_Pos)   /*!< 0x80000000 */
#define SERC_IER5_PDRIE191            SERC_IER5_PDRIE191_Msk

/******************  Bit definition for SERC_ISR0 register  *******************/
#define SERC_ISR0_PDRS0_Pos          (0U)
#define SERC_ISR0_PDRS0_Msk          (0x1UL << SERC_ISR0_PDRS0_Pos)     /*!< 0x00000001 */
#define SERC_ISR0_PDRS0              SERC_ISR0_PDRS0_Msk
#define SERC_ISR0_PDRS1_Pos          (1U)
#define SERC_ISR0_PDRS1_Msk          (0x1UL << SERC_ISR0_PDRS1_Pos)     /*!< 0x00000002 */
#define SERC_ISR0_PDRS1              SERC_ISR0_PDRS1_Msk
#define SERC_ISR0_PDRS2_Pos          (2U)
#define SERC_ISR0_PDRS2_Msk          (0x1UL << SERC_ISR0_PDRS2_Pos)     /*!< 0x00000004 */
#define SERC_ISR0_PDRS2              SERC_ISR0_PDRS2_Msk
#define SERC_ISR0_PDRS3_Pos          (3U)
#define SERC_ISR0_PDRS3_Msk          (0x1UL << SERC_ISR0_PDRS3_Pos)     /*!< 0x00000008 */
#define SERC_ISR0_PDRS3              SERC_ISR0_PDRS3_Msk
#define SERC_ISR0_PDRS4_Pos          (4U)
#define SERC_ISR0_PDRS4_Msk          (0x1UL << SERC_ISR0_PDRS4_Pos)     /*!< 0x00000010 */
#define SERC_ISR0_PDRS4              SERC_ISR0_PDRS4_Msk
#define SERC_ISR0_PDRS5_Pos          (5U)
#define SERC_ISR0_PDRS5_Msk          (0x1UL << SERC_ISR0_PDRS5_Pos)     /*!< 0x00000020 */
#define SERC_ISR0_PDRS5              SERC_ISR0_PDRS5_Msk
#define SERC_ISR0_PDRS6_Pos          (6U)
#define SERC_ISR0_PDRS6_Msk          (0x1UL << SERC_ISR0_PDRS6_Pos)     /*!< 0x00000040 */
#define SERC_ISR0_PDRS6              SERC_ISR0_PDRS6_Msk
#define SERC_ISR0_PDRS7_Pos          (7U)
#define SERC_ISR0_PDRS7_Msk          (0x1UL << SERC_ISR0_PDRS7_Pos)     /*!< 0x00000080 */
#define SERC_ISR0_PDRS7              SERC_ISR0_PDRS7_Msk
#define SERC_ISR0_PDRS8_Pos          (8U)
#define SERC_ISR0_PDRS8_Msk          (0x1UL << SERC_ISR0_PDRS8_Pos)     /*!< 0x00000100 */
#define SERC_ISR0_PDRS8              SERC_ISR0_PDRS8_Msk
#define SERC_ISR0_PDRS9_Pos          (9U)
#define SERC_ISR0_PDRS9_Msk          (0x1UL << SERC_ISR0_PDRS9_Pos)     /*!< 0x00000200 */
#define SERC_ISR0_PDRS9              SERC_ISR0_PDRS9_Msk
#define SERC_ISR0_PDRS10_Pos         (10U)
#define SERC_ISR0_PDRS10_Msk         (0x1UL << SERC_ISR0_PDRS10_Pos)    /*!< 0x00000400 */
#define SERC_ISR0_PDRS10             SERC_ISR0_PDRS10_Msk
#define SERC_ISR0_PDRS11_Pos         (11U)
#define SERC_ISR0_PDRS11_Msk         (0x1UL << SERC_ISR0_PDRS11_Pos)    /*!< 0x00000800 */
#define SERC_ISR0_PDRS11             SERC_ISR0_PDRS11_Msk
#define SERC_ISR0_PDRS12_Pos         (12U)
#define SERC_ISR0_PDRS12_Msk         (0x1UL << SERC_ISR0_PDRS12_Pos)    /*!< 0x00001000 */
#define SERC_ISR0_PDRS12             SERC_ISR0_PDRS12_Msk
#define SERC_ISR0_PDRS13_Pos         (13U)
#define SERC_ISR0_PDRS13_Msk         (0x1UL << SERC_ISR0_PDRS13_Pos)    /*!< 0x00002000 */
#define SERC_ISR0_PDRS13             SERC_ISR0_PDRS13_Msk
#define SERC_ISR0_PDRS14_Pos         (14U)
#define SERC_ISR0_PDRS14_Msk         (0x1UL << SERC_ISR0_PDRS14_Pos)    /*!< 0x00004000 */
#define SERC_ISR0_PDRS14             SERC_ISR0_PDRS14_Msk
#define SERC_ISR0_PDRS15_Pos         (15U)
#define SERC_ISR0_PDRS15_Msk         (0x1UL << SERC_ISR0_PDRS15_Pos)    /*!< 0x00008000 */
#define SERC_ISR0_PDRS15             SERC_ISR0_PDRS15_Msk
#define SERC_ISR0_PDRS16_Pos         (16U)
#define SERC_ISR0_PDRS16_Msk         (0x1UL << SERC_ISR0_PDRS16_Pos)    /*!< 0x00010000 */
#define SERC_ISR0_PDRS16             SERC_ISR0_PDRS16_Msk
#define SERC_ISR0_PDRS17_Pos         (17U)
#define SERC_ISR0_PDRS17_Msk         (0x1UL << SERC_ISR0_PDRS17_Pos)    /*!< 0x00020000 */
#define SERC_ISR0_PDRS17             SERC_ISR0_PDRS17_Msk
#define SERC_ISR0_PDRS18_Pos         (18U)
#define SERC_ISR0_PDRS18_Msk         (0x1UL << SERC_ISR0_PDRS18_Pos)    /*!< 0x00040000 */
#define SERC_ISR0_PDRS18             SERC_ISR0_PDRS18_Msk
#define SERC_ISR0_PDRS19_Pos         (19U)
#define SERC_ISR0_PDRS19_Msk         (0x1UL << SERC_ISR0_PDRS19_Pos)    /*!< 0x00080000 */
#define SERC_ISR0_PDRS19             SERC_ISR0_PDRS19_Msk
#define SERC_ISR0_PDRS20_Pos         (20U)
#define SERC_ISR0_PDRS20_Msk         (0x1UL << SERC_ISR0_PDRS20_Pos)    /*!< 0x00100000 */
#define SERC_ISR0_PDRS20             SERC_ISR0_PDRS20_Msk
#define SERC_ISR0_PDRS21_Pos         (21U)
#define SERC_ISR0_PDRS21_Msk         (0x1UL << SERC_ISR0_PDRS21_Pos)    /*!< 0x00200000 */
#define SERC_ISR0_PDRS21             SERC_ISR0_PDRS21_Msk
#define SERC_ISR0_PDRS22_Pos         (22U)
#define SERC_ISR0_PDRS22_Msk         (0x1UL << SERC_ISR0_PDRS22_Pos)    /*!< 0x00400000 */
#define SERC_ISR0_PDRS22             SERC_ISR0_PDRS22_Msk
#define SERC_ISR0_PDRS23_Pos         (23U)
#define SERC_ISR0_PDRS23_Msk         (0x1UL << SERC_ISR0_PDRS23_Pos)    /*!< 0x00800000 */
#define SERC_ISR0_PDRS23             SERC_ISR0_PDRS23_Msk
#define SERC_ISR0_PDRS24_Pos         (24U)
#define SERC_ISR0_PDRS24_Msk         (0x1UL << SERC_ISR0_PDRS24_Pos)    /*!< 0x01000000 */
#define SERC_ISR0_PDRS24             SERC_ISR0_PDRS24_Msk
#define SERC_ISR0_PDRS25_Pos         (25U)
#define SERC_ISR0_PDRS25_Msk         (0x1UL << SERC_ISR0_PDRS25_Pos)    /*!< 0x02000000 */
#define SERC_ISR0_PDRS25             SERC_ISR0_PDRS25_Msk
#define SERC_ISR0_PDRS26_Pos         (26U)
#define SERC_ISR0_PDRS26_Msk         (0x1UL << SERC_ISR0_PDRS26_Pos)    /*!< 0x04000000 */
#define SERC_ISR0_PDRS26             SERC_ISR0_PDRS26_Msk
#define SERC_ISR0_PDRS27_Pos         (27U)
#define SERC_ISR0_PDRS27_Msk         (0x1UL << SERC_ISR0_PDRS27_Pos)    /*!< 0x08000000 */
#define SERC_ISR0_PDRS27             SERC_ISR0_PDRS27_Msk
#define SERC_ISR0_PDRS28_Pos         (28U)
#define SERC_ISR0_PDRS28_Msk         (0x1UL << SERC_ISR0_PDRS28_Pos)    /*!< 0x10000000 */
#define SERC_ISR0_PDRS28             SERC_ISR0_PDRS28_Msk
#define SERC_ISR0_PDRS29_Pos         (29U)
#define SERC_ISR0_PDRS29_Msk         (0x1UL << SERC_ISR0_PDRS29_Pos)    /*!< 0x20000000 */
#define SERC_ISR0_PDRS29             SERC_ISR0_PDRS29_Msk
#define SERC_ISR0_PDRS30_Pos         (30U)
#define SERC_ISR0_PDRS30_Msk         (0x1UL << SERC_ISR0_PDRS30_Pos)    /*!< 0x40000000 */
#define SERC_ISR0_PDRS30             SERC_ISR0_PDRS30_Msk
#define SERC_ISR0_PDRS31_Pos         (31U)
#define SERC_ISR0_PDRS31_Msk         (0x1UL << SERC_ISR0_PDRS31_Pos)    /*!< 0x80000000 */
#define SERC_ISR0_PDRS31             SERC_ISR0_PDRS31_Msk

/******************  Bit definition for SERC_ISR1 register  *******************/
#define SERC_ISR1_PDRS32_Pos         (0U)
#define SERC_ISR1_PDRS32_Msk         (0x1UL << SERC_ISR1_PDRS32_Pos)    /*!< 0x00000001 */
#define SERC_ISR1_PDRS32             SERC_ISR1_PDRS32_Msk
#define SERC_ISR1_PDRS33_Pos         (1U)
#define SERC_ISR1_PDRS33_Msk         (0x1UL << SERC_ISR1_PDRS33_Pos)    /*!< 0x00000002 */
#define SERC_ISR1_PDRS33             SERC_ISR1_PDRS33_Msk
#define SERC_ISR1_PDRS34_Pos         (2U)
#define SERC_ISR1_PDRS34_Msk         (0x1UL << SERC_ISR1_PDRS34_Pos)    /*!< 0x00000004 */
#define SERC_ISR1_PDRS34             SERC_ISR1_PDRS34_Msk
#define SERC_ISR1_PDRS35_Pos         (3U)
#define SERC_ISR1_PDRS35_Msk         (0x1UL << SERC_ISR1_PDRS35_Pos)    /*!< 0x00000008 */
#define SERC_ISR1_PDRS35             SERC_ISR1_PDRS35_Msk
#define SERC_ISR1_PDRS36_Pos         (4U)
#define SERC_ISR1_PDRS36_Msk         (0x1UL << SERC_ISR1_PDRS36_Pos)    /*!< 0x00000010 */
#define SERC_ISR1_PDRS36             SERC_ISR1_PDRS36_Msk
#define SERC_ISR1_PDRS37_Pos         (5U)
#define SERC_ISR1_PDRS37_Msk         (0x1UL << SERC_ISR1_PDRS37_Pos)    /*!< 0x00000020 */
#define SERC_ISR1_PDRS37             SERC_ISR1_PDRS37_Msk
#define SERC_ISR1_PDRS38_Pos         (6U)
#define SERC_ISR1_PDRS38_Msk         (0x1UL << SERC_ISR1_PDRS38_Pos)    /*!< 0x00000040 */
#define SERC_ISR1_PDRS38             SERC_ISR1_PDRS38_Msk
#define SERC_ISR1_PDRS39_Pos         (7U)
#define SERC_ISR1_PDRS39_Msk         (0x1UL << SERC_ISR1_PDRS39_Pos)    /*!< 0x00000080 */
#define SERC_ISR1_PDRS39             SERC_ISR1_PDRS39_Msk
#define SERC_ISR1_PDRS40_Pos         (8U)
#define SERC_ISR1_PDRS40_Msk         (0x1UL << SERC_ISR1_PDRS40_Pos)    /*!< 0x00000100 */
#define SERC_ISR1_PDRS40             SERC_ISR1_PDRS40_Msk
#define SERC_ISR1_PDRS41_Pos         (9U)
#define SERC_ISR1_PDRS41_Msk         (0x1UL << SERC_ISR1_PDRS41_Pos)    /*!< 0x00000200 */
#define SERC_ISR1_PDRS41             SERC_ISR1_PDRS41_Msk
#define SERC_ISR1_PDRS42_Pos         (10U)
#define SERC_ISR1_PDRS42_Msk         (0x1UL << SERC_ISR1_PDRS42_Pos)    /*!< 0x00000400 */
#define SERC_ISR1_PDRS42             SERC_ISR1_PDRS42_Msk
#define SERC_ISR1_PDRS43_Pos         (11U)
#define SERC_ISR1_PDRS43_Msk         (0x1UL << SERC_ISR1_PDRS43_Pos)    /*!< 0x00000800 */
#define SERC_ISR1_PDRS43             SERC_ISR1_PDRS43_Msk
#define SERC_ISR1_PDRS44_Pos         (12U)
#define SERC_ISR1_PDRS44_Msk         (0x1UL << SERC_ISR1_PDRS44_Pos)    /*!< 0x00001000 */
#define SERC_ISR1_PDRS44             SERC_ISR1_PDRS44_Msk
#define SERC_ISR1_PDRS45_Pos         (13U)
#define SERC_ISR1_PDRS45_Msk         (0x1UL << SERC_ISR1_PDRS45_Pos)    /*!< 0x00002000 */
#define SERC_ISR1_PDRS45             SERC_ISR1_PDRS45_Msk
#define SERC_ISR1_PDRS46_Pos         (14U)
#define SERC_ISR1_PDRS46_Msk         (0x1UL << SERC_ISR1_PDRS46_Pos)    /*!< 0x00004000 */
#define SERC_ISR1_PDRS46             SERC_ISR1_PDRS46_Msk
#define SERC_ISR1_PDRS47_Pos         (15U)
#define SERC_ISR1_PDRS47_Msk         (0x1UL << SERC_ISR1_PDRS47_Pos)    /*!< 0x00008000 */
#define SERC_ISR1_PDRS47             SERC_ISR1_PDRS47_Msk
#define SERC_ISR1_PDRS48_Pos         (16U)
#define SERC_ISR1_PDRS48_Msk         (0x1UL << SERC_ISR1_PDRS48_Pos)    /*!< 0x00010000 */
#define SERC_ISR1_PDRS48             SERC_ISR1_PDRS48_Msk
#define SERC_ISR1_PDRS49_Pos         (17U)
#define SERC_ISR1_PDRS49_Msk         (0x1UL << SERC_ISR1_PDRS49_Pos)    /*!< 0x00020000 */
#define SERC_ISR1_PDRS49             SERC_ISR1_PDRS49_Msk
#define SERC_ISR1_PDRS50_Pos         (18U)
#define SERC_ISR1_PDRS50_Msk         (0x1UL << SERC_ISR1_PDRS50_Pos)    /*!< 0x00040000 */
#define SERC_ISR1_PDRS50             SERC_ISR1_PDRS50_Msk
#define SERC_ISR1_PDRS51_Pos         (19U)
#define SERC_ISR1_PDRS51_Msk         (0x1UL << SERC_ISR1_PDRS51_Pos)    /*!< 0x00080000 */
#define SERC_ISR1_PDRS51             SERC_ISR1_PDRS51_Msk
#define SERC_ISR1_PDRS52_Pos         (20U)
#define SERC_ISR1_PDRS52_Msk         (0x1UL << SERC_ISR1_PDRS52_Pos)    /*!< 0x00100000 */
#define SERC_ISR1_PDRS52             SERC_ISR1_PDRS52_Msk
#define SERC_ISR1_PDRS53_Pos         (21U)
#define SERC_ISR1_PDRS53_Msk         (0x1UL << SERC_ISR1_PDRS53_Pos)    /*!< 0x00200000 */
#define SERC_ISR1_PDRS53             SERC_ISR1_PDRS53_Msk
#define SERC_ISR1_PDRS54_Pos         (22U)
#define SERC_ISR1_PDRS54_Msk         (0x1UL << SERC_ISR1_PDRS54_Pos)    /*!< 0x00400000 */
#define SERC_ISR1_PDRS54             SERC_ISR1_PDRS54_Msk
#define SERC_ISR1_PDRS55_Pos         (23U)
#define SERC_ISR1_PDRS55_Msk         (0x1UL << SERC_ISR1_PDRS55_Pos)    /*!< 0x00800000 */
#define SERC_ISR1_PDRS55             SERC_ISR1_PDRS55_Msk
#define SERC_ISR1_PDRS56_Pos         (24U)
#define SERC_ISR1_PDRS56_Msk         (0x1UL << SERC_ISR1_PDRS56_Pos)    /*!< 0x01000000 */
#define SERC_ISR1_PDRS56             SERC_ISR1_PDRS56_Msk
#define SERC_ISR1_PDRS57_Pos         (25U)
#define SERC_ISR1_PDRS57_Msk         (0x1UL << SERC_ISR1_PDRS57_Pos)    /*!< 0x02000000 */
#define SERC_ISR1_PDRS57             SERC_ISR1_PDRS57_Msk
#define SERC_ISR1_PDRS58_Pos         (26U)
#define SERC_ISR1_PDRS58_Msk         (0x1UL << SERC_ISR1_PDRS58_Pos)    /*!< 0x04000000 */
#define SERC_ISR1_PDRS58             SERC_ISR1_PDRS58_Msk
#define SERC_ISR1_PDRS59_Pos         (27U)
#define SERC_ISR1_PDRS59_Msk         (0x1UL << SERC_ISR1_PDRS59_Pos)    /*!< 0x08000000 */
#define SERC_ISR1_PDRS59             SERC_ISR1_PDRS59_Msk
#define SERC_ISR1_PDRS60_Pos         (28U)
#define SERC_ISR1_PDRS60_Msk         (0x1UL << SERC_ISR1_PDRS60_Pos)    /*!< 0x10000000 */
#define SERC_ISR1_PDRS60             SERC_ISR1_PDRS60_Msk
#define SERC_ISR1_PDRS61_Pos         (29U)
#define SERC_ISR1_PDRS61_Msk         (0x1UL << SERC_ISR1_PDRS61_Pos)    /*!< 0x20000000 */
#define SERC_ISR1_PDRS61             SERC_ISR1_PDRS61_Msk
#define SERC_ISR1_PDRS62_Pos         (30U)
#define SERC_ISR1_PDRS62_Msk         (0x1UL << SERC_ISR1_PDRS62_Pos)    /*!< 0x40000000 */
#define SERC_ISR1_PDRS62             SERC_ISR1_PDRS62_Msk
#define SERC_ISR1_PDRS63_Pos         (31U)
#define SERC_ISR1_PDRS63_Msk         (0x1UL << SERC_ISR1_PDRS63_Pos)    /*!< 0x80000000 */
#define SERC_ISR1_PDRS63             SERC_ISR1_PDRS63_Msk

/******************  Bit definition for SERC_ISR2 register  *******************/
#define SERC_ISR2_PDRS64_Pos         (0U)
#define SERC_ISR2_PDRS64_Msk         (0x1UL << SERC_ISR2_PDRS64_Pos)    /*!< 0x00000001 */
#define SERC_ISR2_PDRS64             SERC_ISR2_PDRS64_Msk
#define SERC_ISR2_PDRS65_Pos         (1U)
#define SERC_ISR2_PDRS65_Msk         (0x1UL << SERC_ISR2_PDRS65_Pos)    /*!< 0x00000002 */
#define SERC_ISR2_PDRS65             SERC_ISR2_PDRS65_Msk
#define SERC_ISR2_PDRS66_Pos         (2U)
#define SERC_ISR2_PDRS66_Msk         (0x1UL << SERC_ISR2_PDRS66_Pos)    /*!< 0x00000004 */
#define SERC_ISR2_PDRS66             SERC_ISR2_PDRS66_Msk
#define SERC_ISR2_PDRS67_Pos         (3U)
#define SERC_ISR2_PDRS67_Msk         (0x1UL << SERC_ISR2_PDRS67_Pos)    /*!< 0x00000008 */
#define SERC_ISR2_PDRS67             SERC_ISR2_PDRS67_Msk
#define SERC_ISR2_PDRS68_Pos         (4U)
#define SERC_ISR2_PDRS68_Msk         (0x1UL << SERC_ISR2_PDRS68_Pos)    /*!< 0x00000010 */
#define SERC_ISR2_PDRS68             SERC_ISR2_PDRS68_Msk
#define SERC_ISR2_PDRS69_Pos         (5U)
#define SERC_ISR2_PDRS69_Msk         (0x1UL << SERC_ISR2_PDRS69_Pos)    /*!< 0x00000020 */
#define SERC_ISR2_PDRS69             SERC_ISR2_PDRS69_Msk
#define SERC_ISR2_PDRS70_Pos         (6U)
#define SERC_ISR2_PDRS70_Msk         (0x1UL << SERC_ISR2_PDRS70_Pos)    /*!< 0x00000040 */
#define SERC_ISR2_PDRS70             SERC_ISR2_PDRS70_Msk
#define SERC_ISR2_PDRS71_Pos         (7U)
#define SERC_ISR2_PDRS71_Msk         (0x1UL << SERC_ISR2_PDRS71_Pos)    /*!< 0x00000080 */
#define SERC_ISR2_PDRS71             SERC_ISR2_PDRS71_Msk
#define SERC_ISR2_PDRS72_Pos         (8U)
#define SERC_ISR2_PDRS72_Msk         (0x1UL << SERC_ISR2_PDRS72_Pos)    /*!< 0x00000100 */
#define SERC_ISR2_PDRS72             SERC_ISR2_PDRS72_Msk
#define SERC_ISR2_PDRS73_Pos         (9U)
#define SERC_ISR2_PDRS73_Msk         (0x1UL << SERC_ISR2_PDRS73_Pos)    /*!< 0x00000200 */
#define SERC_ISR2_PDRS73             SERC_ISR2_PDRS73_Msk
#define SERC_ISR2_PDRS74_Pos         (10U)
#define SERC_ISR2_PDRS74_Msk         (0x1UL << SERC_ISR2_PDRS74_Pos)    /*!< 0x00000400 */
#define SERC_ISR2_PDRS74             SERC_ISR2_PDRS74_Msk
#define SERC_ISR2_PDRS75_Pos         (11U)
#define SERC_ISR2_PDRS75_Msk         (0x1UL << SERC_ISR2_PDRS75_Pos)    /*!< 0x00000800 */
#define SERC_ISR2_PDRS75             SERC_ISR2_PDRS75_Msk
#define SERC_ISR2_PDRS76_Pos         (12U)
#define SERC_ISR2_PDRS76_Msk         (0x1UL << SERC_ISR2_PDRS76_Pos)    /*!< 0x00001000 */
#define SERC_ISR2_PDRS76             SERC_ISR2_PDRS76_Msk
#define SERC_ISR2_PDRS77_Pos         (13U)
#define SERC_ISR2_PDRS77_Msk         (0x1UL << SERC_ISR2_PDRS77_Pos)    /*!< 0x00002000 */
#define SERC_ISR2_PDRS77             SERC_ISR2_PDRS77_Msk
#define SERC_ISR2_PDRS78_Pos         (14U)
#define SERC_ISR2_PDRS78_Msk         (0x1UL << SERC_ISR2_PDRS78_Pos)    /*!< 0x00004000 */
#define SERC_ISR2_PDRS78             SERC_ISR2_PDRS78_Msk
#define SERC_ISR2_PDRS79_Pos         (15U)
#define SERC_ISR2_PDRS79_Msk         (0x1UL << SERC_ISR2_PDRS79_Pos)    /*!< 0x00008000 */
#define SERC_ISR2_PDRS79             SERC_ISR2_PDRS79_Msk
#define SERC_ISR2_PDRS80_Pos         (16U)
#define SERC_ISR2_PDRS80_Msk         (0x1UL << SERC_ISR2_PDRS80_Pos)    /*!< 0x00010000 */
#define SERC_ISR2_PDRS80             SERC_ISR2_PDRS80_Msk
#define SERC_ISR2_PDRS81_Pos         (17U)
#define SERC_ISR2_PDRS81_Msk         (0x1UL << SERC_ISR2_PDRS81_Pos)    /*!< 0x00020000 */
#define SERC_ISR2_PDRS81             SERC_ISR2_PDRS81_Msk
#define SERC_ISR2_PDRS82_Pos         (18U)
#define SERC_ISR2_PDRS82_Msk         (0x1UL << SERC_ISR2_PDRS82_Pos)    /*!< 0x00040000 */
#define SERC_ISR2_PDRS82             SERC_ISR2_PDRS82_Msk
#define SERC_ISR2_PDRS83_Pos         (19U)
#define SERC_ISR2_PDRS83_Msk         (0x1UL << SERC_ISR2_PDRS83_Pos)    /*!< 0x00080000 */
#define SERC_ISR2_PDRS83             SERC_ISR2_PDRS83_Msk
#define SERC_ISR2_PDRS84_Pos         (20U)
#define SERC_ISR2_PDRS84_Msk         (0x1UL << SERC_ISR2_PDRS84_Pos)    /*!< 0x00100000 */
#define SERC_ISR2_PDRS84             SERC_ISR2_PDRS84_Msk
#define SERC_ISR2_PDRS85_Pos         (21U)
#define SERC_ISR2_PDRS85_Msk         (0x1UL << SERC_ISR2_PDRS85_Pos)    /*!< 0x00200000 */
#define SERC_ISR2_PDRS85             SERC_ISR2_PDRS85_Msk
#define SERC_ISR2_PDRS86_Pos         (22U)
#define SERC_ISR2_PDRS86_Msk         (0x1UL << SERC_ISR2_PDRS86_Pos)    /*!< 0x00400000 */
#define SERC_ISR2_PDRS86             SERC_ISR2_PDRS86_Msk
#define SERC_ISR2_PDRS87_Pos         (23U)
#define SERC_ISR2_PDRS87_Msk         (0x1UL << SERC_ISR2_PDRS87_Pos)    /*!< 0x00800000 */
#define SERC_ISR2_PDRS87             SERC_ISR2_PDRS87_Msk
#define SERC_ISR2_PDRS88_Pos         (24U)
#define SERC_ISR2_PDRS88_Msk         (0x1UL << SERC_ISR2_PDRS88_Pos)    /*!< 0x01000000 */
#define SERC_ISR2_PDRS88             SERC_ISR2_PDRS88_Msk
#define SERC_ISR2_PDRS89_Pos         (25U)
#define SERC_ISR2_PDRS89_Msk         (0x1UL << SERC_ISR2_PDRS89_Pos)    /*!< 0x02000000 */
#define SERC_ISR2_PDRS89             SERC_ISR2_PDRS89_Msk
#define SERC_ISR2_PDRS90_Pos         (26U)
#define SERC_ISR2_PDRS90_Msk         (0x1UL << SERC_ISR2_PDRS90_Pos)    /*!< 0x04000000 */
#define SERC_ISR2_PDRS90             SERC_ISR2_PDRS90_Msk
#define SERC_ISR2_PDRS91_Pos         (27U)
#define SERC_ISR2_PDRS91_Msk         (0x1UL << SERC_ISR2_PDRS91_Pos)    /*!< 0x08000000 */
#define SERC_ISR2_PDRS91             SERC_ISR2_PDRS91_Msk
#define SERC_ISR2_PDRS92_Pos         (28U)
#define SERC_ISR2_PDRS92_Msk         (0x1UL << SERC_ISR2_PDRS92_Pos)    /*!< 0x10000000 */
#define SERC_ISR2_PDRS92             SERC_ISR2_PDRS92_Msk
#define SERC_ISR2_PDRS93_Pos         (29U)
#define SERC_ISR2_PDRS93_Msk         (0x1UL << SERC_ISR2_PDRS93_Pos)    /*!< 0x20000000 */
#define SERC_ISR2_PDRS93             SERC_ISR2_PDRS93_Msk
#define SERC_ISR2_PDRS94_Pos         (30U)
#define SERC_ISR2_PDRS94_Msk         (0x1UL << SERC_ISR2_PDRS94_Pos)    /*!< 0x40000000 */
#define SERC_ISR2_PDRS94             SERC_ISR2_PDRS94_Msk
#define SERC_ISR2_PDRS95_Pos         (31U)
#define SERC_ISR2_PDRS95_Msk         (0x1UL << SERC_ISR2_PDRS95_Pos)    /*!< 0x80000000 */
#define SERC_ISR2_PDRS95             SERC_ISR2_PDRS95_Msk

/******************  Bit definition for SERC_ISR3 register  *******************/
#define SERC_ISR3_PDRS96_Pos         (0U)
#define SERC_ISR3_PDRS96_Msk         (0x1UL << SERC_ISR3_PDRS96_Pos)    /*!< 0x00000001 */
#define SERC_ISR3_PDRS96             SERC_ISR3_PDRS96_Msk
#define SERC_ISR3_PDRS97_Pos         (1U)
#define SERC_ISR3_PDRS97_Msk         (0x1UL << SERC_ISR3_PDRS97_Pos)    /*!< 0x00000002 */
#define SERC_ISR3_PDRS97             SERC_ISR3_PDRS97_Msk
#define SERC_ISR3_PDRS98_Pos         (2U)
#define SERC_ISR3_PDRS98_Msk         (0x1UL << SERC_ISR3_PDRS98_Pos)    /*!< 0x00000004 */
#define SERC_ISR3_PDRS98             SERC_ISR3_PDRS98_Msk
#define SERC_ISR3_PDRS99_Pos         (3U)
#define SERC_ISR3_PDRS99_Msk         (0x1UL << SERC_ISR3_PDRS99_Pos)    /*!< 0x00000008 */
#define SERC_ISR3_PDRS99             SERC_ISR3_PDRS99_Msk
#define SERC_ISR3_PDRS100_Pos        (4U)
#define SERC_ISR3_PDRS100_Msk        (0x1UL << SERC_ISR3_PDRS100_Pos)   /*!< 0x00000010 */
#define SERC_ISR3_PDRS100            SERC_ISR3_PDRS100_Msk
#define SERC_ISR3_PDRS101_Pos        (5U)
#define SERC_ISR3_PDRS101_Msk        (0x1UL << SERC_ISR3_PDRS101_Pos)   /*!< 0x00000020 */
#define SERC_ISR3_PDRS101            SERC_ISR3_PDRS101_Msk
#define SERC_ISR3_PDRS102_Pos        (6U)
#define SERC_ISR3_PDRS102_Msk        (0x1UL << SERC_ISR3_PDRS102_Pos)   /*!< 0x00000040 */
#define SERC_ISR3_PDRS102            SERC_ISR3_PDRS102_Msk
#define SERC_ISR3_PDRS103_Pos        (7U)
#define SERC_ISR3_PDRS103_Msk        (0x1UL << SERC_ISR3_PDRS103_Pos)   /*!< 0x00000080 */
#define SERC_ISR3_PDRS103            SERC_ISR3_PDRS103_Msk
#define SERC_ISR3_PDRS104_Pos        (8U)
#define SERC_ISR3_PDRS104_Msk        (0x1UL << SERC_ISR3_PDRS104_Pos)   /*!< 0x00000100 */
#define SERC_ISR3_PDRS104            SERC_ISR3_PDRS104_Msk
#define SERC_ISR3_PDRS105_Pos        (9U)
#define SERC_ISR3_PDRS105_Msk        (0x1UL << SERC_ISR3_PDRS105_Pos)   /*!< 0x00000200 */
#define SERC_ISR3_PDRS105            SERC_ISR3_PDRS105_Msk
#define SERC_ISR3_PDRS106_Pos        (10U)
#define SERC_ISR3_PDRS106_Msk        (0x1UL << SERC_ISR3_PDRS106_Pos)   /*!< 0x00000400 */
#define SERC_ISR3_PDRS106            SERC_ISR3_PDRS106_Msk
#define SERC_ISR3_PDRS107_Pos        (11U)
#define SERC_ISR3_PDRS107_Msk        (0x1UL << SERC_ISR3_PDRS107_Pos)   /*!< 0x00000800 */
#define SERC_ISR3_PDRS107            SERC_ISR3_PDRS107_Msk
#define SERC_ISR3_PDRS108_Pos        (12U)
#define SERC_ISR3_PDRS108_Msk        (0x1UL << SERC_ISR3_PDRS108_Pos)   /*!< 0x00001000 */
#define SERC_ISR3_PDRS108            SERC_ISR3_PDRS108_Msk
#define SERC_ISR3_PDRS109_Pos        (13U)
#define SERC_ISR3_PDRS109_Msk        (0x1UL << SERC_ISR3_PDRS109_Pos)   /*!< 0x00002000 */
#define SERC_ISR3_PDRS109            SERC_ISR3_PDRS109_Msk
#define SERC_ISR3_PDRS110_Pos        (14U)
#define SERC_ISR3_PDRS110_Msk        (0x1UL << SERC_ISR3_PDRS110_Pos)   /*!< 0x00004000 */
#define SERC_ISR3_PDRS110            SERC_ISR3_PDRS110_Msk
#define SERC_ISR3_PDRS111_Pos        (15U)
#define SERC_ISR3_PDRS111_Msk        (0x1UL << SERC_ISR3_PDRS111_Pos)   /*!< 0x00008000 */
#define SERC_ISR3_PDRS111            SERC_ISR3_PDRS111_Msk
#define SERC_ISR3_PDRS112_Pos        (16U)
#define SERC_ISR3_PDRS112_Msk        (0x1UL << SERC_ISR3_PDRS112_Pos)   /*!< 0x00010000 */
#define SERC_ISR3_PDRS112            SERC_ISR3_PDRS112_Msk
#define SERC_ISR3_PDRS113_Pos        (17U)
#define SERC_ISR3_PDRS113_Msk        (0x1UL << SERC_ISR3_PDRS113_Pos)   /*!< 0x00020000 */
#define SERC_ISR3_PDRS113            SERC_ISR3_PDRS113_Msk
#define SERC_ISR3_PDRS114_Pos        (18U)
#define SERC_ISR3_PDRS114_Msk        (0x1UL << SERC_ISR3_PDRS114_Pos)   /*!< 0x00040000 */
#define SERC_ISR3_PDRS114            SERC_ISR3_PDRS114_Msk
#define SERC_ISR3_PDRS115_Pos        (19U)
#define SERC_ISR3_PDRS115_Msk        (0x1UL << SERC_ISR3_PDRS115_Pos)   /*!< 0x00080000 */
#define SERC_ISR3_PDRS115            SERC_ISR3_PDRS115_Msk
#define SERC_ISR3_PDRS116_Pos        (20U)
#define SERC_ISR3_PDRS116_Msk        (0x1UL << SERC_ISR3_PDRS116_Pos)   /*!< 0x00100000 */
#define SERC_ISR3_PDRS116            SERC_ISR3_PDRS116_Msk
#define SERC_ISR3_PDRS117_Pos        (21U)
#define SERC_ISR3_PDRS117_Msk        (0x1UL << SERC_ISR3_PDRS117_Pos)   /*!< 0x00200000 */
#define SERC_ISR3_PDRS117            SERC_ISR3_PDRS117_Msk
#define SERC_ISR3_PDRS118_Pos        (22U)
#define SERC_ISR3_PDRS118_Msk        (0x1UL << SERC_ISR3_PDRS118_Pos)   /*!< 0x00400000 */
#define SERC_ISR3_PDRS118            SERC_ISR3_PDRS118_Msk
#define SERC_ISR3_PDRS119_Pos        (23U)
#define SERC_ISR3_PDRS119_Msk        (0x1UL << SERC_ISR3_PDRS119_Pos)   /*!< 0x00800000 */
#define SERC_ISR3_PDRS119            SERC_ISR3_PDRS119_Msk
#define SERC_ISR3_PDRS120_Pos        (24U)
#define SERC_ISR3_PDRS120_Msk        (0x1UL << SERC_ISR3_PDRS120_Pos)   /*!< 0x01000000 */
#define SERC_ISR3_PDRS120            SERC_ISR3_PDRS120_Msk
#define SERC_ISR3_PDRS121_Pos        (25U)
#define SERC_ISR3_PDRS121_Msk        (0x1UL << SERC_ISR3_PDRS121_Pos)   /*!< 0x02000000 */
#define SERC_ISR3_PDRS121            SERC_ISR3_PDRS121_Msk
#define SERC_ISR3_PDRS122_Pos        (26U)
#define SERC_ISR3_PDRS122_Msk        (0x1UL << SERC_ISR3_PDRS122_Pos)   /*!< 0x04000000 */
#define SERC_ISR3_PDRS122            SERC_ISR3_PDRS122_Msk
#define SERC_ISR3_PDRS123_Pos        (27U)
#define SERC_ISR3_PDRS123_Msk        (0x1UL << SERC_ISR3_PDRS123_Pos)   /*!< 0x08000000 */
#define SERC_ISR3_PDRS123            SERC_ISR3_PDRS123_Msk
#define SERC_ISR3_PDRS124_Pos        (28U)
#define SERC_ISR3_PDRS124_Msk        (0x1UL << SERC_ISR3_PDRS124_Pos)   /*!< 0x10000000 */
#define SERC_ISR3_PDRS124            SERC_ISR3_PDRS124_Msk
#define SERC_ISR3_PDRS125_Pos        (29U)
#define SERC_ISR3_PDRS125_Msk        (0x1UL << SERC_ISR3_PDRS125_Pos)   /*!< 0x20000000 */
#define SERC_ISR3_PDRS125            SERC_ISR3_PDRS125_Msk
#define SERC_ISR3_PDRS126_Pos        (30U)
#define SERC_ISR3_PDRS126_Msk        (0x1UL << SERC_ISR3_PDRS126_Pos)   /*!< 0x40000000 */
#define SERC_ISR3_PDRS126            SERC_ISR3_PDRS126_Msk
#define SERC_ISR3_PDRS127_Pos        (31U)
#define SERC_ISR3_PDRS127_Msk        (0x1UL << SERC_ISR3_PDRS127_Pos)   /*!< 0x80000000 */
#define SERC_ISR3_PDRS127            SERC_ISR3_PDRS127_Msk

/******************  Bit definition for SERC_ISR4 register  *******************/
#define SERC_ISR4_PDRS128_Pos        (0U)
#define SERC_ISR4_PDRS128_Msk        (0x1UL << SERC_ISR4_PDRS128_Pos)   /*!< 0x00000001 */
#define SERC_ISR4_PDRS128            SERC_ISR4_PDRS128_Msk
#define SERC_ISR4_PDRS129_Pos        (1U)
#define SERC_ISR4_PDRS129_Msk        (0x1UL << SERC_ISR4_PDRS129_Pos)   /*!< 0x00000002 */
#define SERC_ISR4_PDRS129            SERC_ISR4_PDRS129_Msk
#define SERC_ISR4_PDRS130_Pos        (2U)
#define SERC_ISR4_PDRS130_Msk        (0x1UL << SERC_ISR4_PDRS130_Pos)   /*!< 0x00000004 */
#define SERC_ISR4_PDRS130            SERC_ISR4_PDRS130_Msk
#define SERC_ISR4_PDRS131_Pos        (3U)
#define SERC_ISR4_PDRS131_Msk        (0x1UL << SERC_ISR4_PDRS131_Pos)   /*!< 0x00000008 */
#define SERC_ISR4_PDRS131            SERC_ISR4_PDRS131_Msk
#define SERC_ISR4_PDRS132_Pos        (4U)
#define SERC_ISR4_PDRS132_Msk        (0x1UL << SERC_ISR4_PDRS132_Pos)   /*!< 0x00000010 */
#define SERC_ISR4_PDRS132            SERC_ISR4_PDRS132_Msk
#define SERC_ISR4_PDRS133_Pos        (5U)
#define SERC_ISR4_PDRS133_Msk        (0x1UL << SERC_ISR4_PDRS133_Pos)   /*!< 0x00000020 */
#define SERC_ISR4_PDRS133            SERC_ISR4_PDRS133_Msk
#define SERC_ISR4_PDRS134_Pos        (6U)
#define SERC_ISR4_PDRS134_Msk        (0x1UL << SERC_ISR4_PDRS134_Pos)   /*!< 0x00000040 */
#define SERC_ISR4_PDRS134            SERC_ISR4_PDRS134_Msk
#define SERC_ISR4_PDRS135_Pos        (7U)
#define SERC_ISR4_PDRS135_Msk        (0x1UL << SERC_ISR4_PDRS135_Pos)   /*!< 0x00000080 */
#define SERC_ISR4_PDRS135            SERC_ISR4_PDRS135_Msk
#define SERC_ISR4_PDRS136_Pos        (8U)
#define SERC_ISR4_PDRS136_Msk        (0x1UL << SERC_ISR4_PDRS136_Pos)   /*!< 0x00000100 */
#define SERC_ISR4_PDRS136            SERC_ISR4_PDRS136_Msk
#define SERC_ISR4_PDRS137_Pos        (9U)
#define SERC_ISR4_PDRS137_Msk        (0x1UL << SERC_ISR4_PDRS137_Pos)   /*!< 0x00000200 */
#define SERC_ISR4_PDRS137            SERC_ISR4_PDRS137_Msk
#define SERC_ISR4_PDRS138_Pos        (10U)
#define SERC_ISR4_PDRS138_Msk        (0x1UL << SERC_ISR4_PDRS138_Pos)   /*!< 0x00000400 */
#define SERC_ISR4_PDRS138            SERC_ISR4_PDRS138_Msk
#define SERC_ISR4_PDRS139_Pos        (11U)
#define SERC_ISR4_PDRS139_Msk        (0x1UL << SERC_ISR4_PDRS139_Pos)   /*!< 0x00000800 */
#define SERC_ISR4_PDRS139            SERC_ISR4_PDRS139_Msk
#define SERC_ISR4_PDRS140_Pos        (12U)
#define SERC_ISR4_PDRS140_Msk        (0x1UL << SERC_ISR4_PDRS140_Pos)   /*!< 0x00001000 */
#define SERC_ISR4_PDRS140            SERC_ISR4_PDRS140_Msk
#define SERC_ISR4_PDRS141_Pos        (13U)
#define SERC_ISR4_PDRS141_Msk        (0x1UL << SERC_ISR4_PDRS141_Pos)   /*!< 0x00002000 */
#define SERC_ISR4_PDRS141            SERC_ISR4_PDRS141_Msk
#define SERC_ISR4_PDRS142_Pos        (14U)
#define SERC_ISR4_PDRS142_Msk        (0x1UL << SERC_ISR4_PDRS142_Pos)   /*!< 0x00004000 */
#define SERC_ISR4_PDRS142            SERC_ISR4_PDRS142_Msk
#define SERC_ISR4_PDRS143_Pos        (15U)
#define SERC_ISR4_PDRS143_Msk        (0x1UL << SERC_ISR4_PDRS143_Pos)   /*!< 0x00008000 */
#define SERC_ISR4_PDRS143            SERC_ISR4_PDRS143_Msk
#define SERC_ISR4_PDRS144_Pos        (16U)
#define SERC_ISR4_PDRS144_Msk        (0x1UL << SERC_ISR4_PDRS144_Pos)   /*!< 0x00010000 */
#define SERC_ISR4_PDRS144            SERC_ISR4_PDRS144_Msk
#define SERC_ISR4_PDRS145_Pos        (17U)
#define SERC_ISR4_PDRS145_Msk        (0x1UL << SERC_ISR4_PDRS145_Pos)   /*!< 0x00020000 */
#define SERC_ISR4_PDRS145            SERC_ISR4_PDRS145_Msk
#define SERC_ISR4_PDRS146_Pos        (18U)
#define SERC_ISR4_PDRS146_Msk        (0x1UL << SERC_ISR4_PDRS146_Pos)   /*!< 0x00040000 */
#define SERC_ISR4_PDRS146            SERC_ISR4_PDRS146_Msk
#define SERC_ISR4_PDRS147_Pos        (19U)
#define SERC_ISR4_PDRS147_Msk        (0x1UL << SERC_ISR4_PDRS147_Pos)   /*!< 0x00080000 */
#define SERC_ISR4_PDRS147            SERC_ISR4_PDRS147_Msk
#define SERC_ISR4_PDRS148_Pos        (20U)
#define SERC_ISR4_PDRS148_Msk        (0x1UL << SERC_ISR4_PDRS148_Pos)   /*!< 0x00100000 */
#define SERC_ISR4_PDRS148            SERC_ISR4_PDRS148_Msk
#define SERC_ISR4_PDRS149_Pos        (21U)
#define SERC_ISR4_PDRS149_Msk        (0x1UL << SERC_ISR4_PDRS149_Pos)   /*!< 0x00200000 */
#define SERC_ISR4_PDRS149            SERC_ISR4_PDRS149_Msk
#define SERC_ISR4_PDRS150_Pos        (22U)
#define SERC_ISR4_PDRS150_Msk        (0x1UL << SERC_ISR4_PDRS150_Pos)   /*!< 0x00400000 */
#define SERC_ISR4_PDRS150            SERC_ISR4_PDRS150_Msk
#define SERC_ISR4_PDRS151_Pos        (23U)
#define SERC_ISR4_PDRS151_Msk        (0x1UL << SERC_ISR4_PDRS151_Pos)   /*!< 0x00800000 */
#define SERC_ISR4_PDRS151            SERC_ISR4_PDRS151_Msk
#define SERC_ISR4_PDRS152_Pos        (24U)
#define SERC_ISR4_PDRS152_Msk        (0x1UL << SERC_ISR4_PDRS152_Pos)   /*!< 0x01000000 */
#define SERC_ISR4_PDRS152            SERC_ISR4_PDRS152_Msk
#define SERC_ISR4_PDRS153_Pos        (25U)
#define SERC_ISR4_PDRS153_Msk        (0x1UL << SERC_ISR4_PDRS153_Pos)   /*!< 0x02000000 */
#define SERC_ISR4_PDRS153            SERC_ISR4_PDRS153_Msk
#define SERC_ISR4_PDRS154_Pos        (26U)
#define SERC_ISR4_PDRS154_Msk        (0x1UL << SERC_ISR4_PDRS154_Pos)   /*!< 0x04000000 */
#define SERC_ISR4_PDRS154            SERC_ISR4_PDRS154_Msk
#define SERC_ISR4_PDRS155_Pos        (27U)
#define SERC_ISR4_PDRS155_Msk        (0x1UL << SERC_ISR4_PDRS155_Pos)   /*!< 0x08000000 */
#define SERC_ISR4_PDRS155            SERC_ISR4_PDRS155_Msk
#define SERC_ISR4_PDRS156_Pos        (28U)
#define SERC_ISR4_PDRS156_Msk        (0x1UL << SERC_ISR4_PDRS156_Pos)   /*!< 0x10000000 */
#define SERC_ISR4_PDRS156            SERC_ISR4_PDRS156_Msk
#define SERC_ISR4_PDRS157_Pos        (29U)
#define SERC_ISR4_PDRS157_Msk        (0x1UL << SERC_ISR4_PDRS157_Pos)   /*!< 0x20000000 */
#define SERC_ISR4_PDRS157            SERC_ISR4_PDRS157_Msk
#define SERC_ISR4_PDRS158_Pos        (30U)
#define SERC_ISR4_PDRS158_Msk        (0x1UL << SERC_ISR4_PDRS158_Pos)   /*!< 0x40000000 */
#define SERC_ISR4_PDRS158            SERC_ISR4_PDRS158_Msk
#define SERC_ISR4_PDRS159_Pos        (31U)
#define SERC_ISR4_PDRS159_Msk        (0x1UL << SERC_ISR4_PDRS159_Pos)   /*!< 0x80000000 */
#define SERC_ISR4_PDRS159            SERC_ISR4_PDRS159_Msk

/******************  Bit definition for SERC_ISR5 register  *******************/
#define SERC_ISR5_PDRS160_Pos        (0U)
#define SERC_ISR5_PDRS160_Msk        (0x1UL << SERC_ISR5_PDRS160_Pos)   /*!< 0x00000001 */
#define SERC_ISR5_PDRS160            SERC_ISR5_PDRS160_Msk
#define SERC_ISR5_PDRS161_Pos        (1U)
#define SERC_ISR5_PDRS161_Msk        (0x1UL << SERC_ISR5_PDRS161_Pos)   /*!< 0x00000002 */
#define SERC_ISR5_PDRS161            SERC_ISR5_PDRS161_Msk
#define SERC_ISR5_PDRS162_Pos        (2U)
#define SERC_ISR5_PDRS162_Msk        (0x1UL << SERC_ISR5_PDRS162_Pos)   /*!< 0x00000004 */
#define SERC_ISR5_PDRS162            SERC_ISR5_PDRS162_Msk
#define SERC_ISR5_PDRS163_Pos        (3U)
#define SERC_ISR5_PDRS163_Msk        (0x1UL << SERC_ISR5_PDRS163_Pos)   /*!< 0x00000008 */
#define SERC_ISR5_PDRS163            SERC_ISR5_PDRS163_Msk
#define SERC_ISR5_PDRS164_Pos        (4U)
#define SERC_ISR5_PDRS164_Msk        (0x1UL << SERC_ISR5_PDRS164_Pos)   /*!< 0x00000010 */
#define SERC_ISR5_PDRS164            SERC_ISR5_PDRS164_Msk
#define SERC_ISR5_PDRS165_Pos        (5U)
#define SERC_ISR5_PDRS165_Msk        (0x1UL << SERC_ISR5_PDRS165_Pos)   /*!< 0x00000020 */
#define SERC_ISR5_PDRS165            SERC_ISR5_PDRS165_Msk
#define SERC_ISR5_PDRS166_Pos        (6U)
#define SERC_ISR5_PDRS166_Msk        (0x1UL << SERC_ISR5_PDRS166_Pos)   /*!< 0x00000040 */
#define SERC_ISR5_PDRS166            SERC_ISR5_PDRS166_Msk
#define SERC_ISR5_PDRS167_Pos        (7U)
#define SERC_ISR5_PDRS167_Msk        (0x1UL << SERC_ISR5_PDRS167_Pos)   /*!< 0x00000080 */
#define SERC_ISR5_PDRS167            SERC_ISR5_PDRS167_Msk
#define SERC_ISR5_PDRS168_Pos        (8U)
#define SERC_ISR5_PDRS168_Msk        (0x1UL << SERC_ISR5_PDRS168_Pos)   /*!< 0x00000100 */
#define SERC_ISR5_PDRS168            SERC_ISR5_PDRS168_Msk
#define SERC_ISR5_PDRS169_Pos        (9U)
#define SERC_ISR5_PDRS169_Msk        (0x1UL << SERC_ISR5_PDRS169_Pos)   /*!< 0x00000200 */
#define SERC_ISR5_PDRS169            SERC_ISR5_PDRS169_Msk
#define SERC_ISR5_PDRS170_Pos        (10U)
#define SERC_ISR5_PDRS170_Msk        (0x1UL << SERC_ISR5_PDRS170_Pos)   /*!< 0x00000400 */
#define SERC_ISR5_PDRS170            SERC_ISR5_PDRS170_Msk
#define SERC_ISR5_PDRS171_Pos        (11U)
#define SERC_ISR5_PDRS171_Msk        (0x1UL << SERC_ISR5_PDRS171_Pos)   /*!< 0x00000800 */
#define SERC_ISR5_PDRS171            SERC_ISR5_PDRS171_Msk
#define SERC_ISR5_PDRS172_Pos        (12U)
#define SERC_ISR5_PDRS172_Msk        (0x1UL << SERC_ISR5_PDRS172_Pos)   /*!< 0x00001000 */
#define SERC_ISR5_PDRS172            SERC_ISR5_PDRS172_Msk
#define SERC_ISR5_PDRS173_Pos        (13U)
#define SERC_ISR5_PDRS173_Msk        (0x1UL << SERC_ISR5_PDRS173_Pos)   /*!< 0x00002000 */
#define SERC_ISR5_PDRS173            SERC_ISR5_PDRS173_Msk
#define SERC_ISR5_PDRS174_Pos        (14U)
#define SERC_ISR5_PDRS174_Msk        (0x1UL << SERC_ISR5_PDRS174_Pos)   /*!< 0x00004000 */
#define SERC_ISR5_PDRS174            SERC_ISR5_PDRS174_Msk
#define SERC_ISR5_PDRS175_Pos        (15U)
#define SERC_ISR5_PDRS175_Msk        (0x1UL << SERC_ISR5_PDRS175_Pos)   /*!< 0x00008000 */
#define SERC_ISR5_PDRS175            SERC_ISR5_PDRS175_Msk
#define SERC_ISR5_PDRS176_Pos        (16U)
#define SERC_ISR5_PDRS176_Msk        (0x1UL << SERC_ISR5_PDRS176_Pos)   /*!< 0x00010000 */
#define SERC_ISR5_PDRS176            SERC_ISR5_PDRS176_Msk
#define SERC_ISR5_PDRS177_Pos        (17U)
#define SERC_ISR5_PDRS177_Msk        (0x1UL << SERC_ISR5_PDRS177_Pos)   /*!< 0x00020000 */
#define SERC_ISR5_PDRS177            SERC_ISR5_PDRS177_Msk
#define SERC_ISR5_PDRS178_Pos        (18U)
#define SERC_ISR5_PDRS178_Msk        (0x1UL << SERC_ISR5_PDRS178_Pos)   /*!< 0x00040000 */
#define SERC_ISR5_PDRS178            SERC_ISR5_PDRS178_Msk
#define SERC_ISR5_PDRS179_Pos        (19U)
#define SERC_ISR5_PDRS179_Msk        (0x1UL << SERC_ISR5_PDRS179_Pos)   /*!< 0x00080000 */
#define SERC_ISR5_PDRS179            SERC_ISR5_PDRS179_Msk
#define SERC_ISR5_PDRS180_Pos        (20U)
#define SERC_ISR5_PDRS180_Msk        (0x1UL << SERC_ISR5_PDRS180_Pos)   /*!< 0x00100000 */
#define SERC_ISR5_PDRS180            SERC_ISR5_PDRS180_Msk
#define SERC_ISR5_PDRS181_Pos        (21U)
#define SERC_ISR5_PDRS181_Msk        (0x1UL << SERC_ISR5_PDRS181_Pos)   /*!< 0x00200000 */
#define SERC_ISR5_PDRS181            SERC_ISR5_PDRS181_Msk
#define SERC_ISR5_PDRS182_Pos        (22U)
#define SERC_ISR5_PDRS182_Msk        (0x1UL << SERC_ISR5_PDRS182_Pos)   /*!< 0x00400000 */
#define SERC_ISR5_PDRS182            SERC_ISR5_PDRS182_Msk
#define SERC_ISR5_PDRS183_Pos        (23U)
#define SERC_ISR5_PDRS183_Msk        (0x1UL << SERC_ISR5_PDRS183_Pos)   /*!< 0x00800000 */
#define SERC_ISR5_PDRS183            SERC_ISR5_PDRS183_Msk
#define SERC_ISR5_PDRS184_Pos        (24U)
#define SERC_ISR5_PDRS184_Msk        (0x1UL << SERC_ISR5_PDRS184_Pos)   /*!< 0x01000000 */
#define SERC_ISR5_PDRS184            SERC_ISR5_PDRS184_Msk
#define SERC_ISR5_PDRS185_Pos        (25U)
#define SERC_ISR5_PDRS185_Msk        (0x1UL << SERC_ISR5_PDRS185_Pos)   /*!< 0x02000000 */
#define SERC_ISR5_PDRS185            SERC_ISR5_PDRS185_Msk
#define SERC_ISR5_PDRS186_Pos        (26U)
#define SERC_ISR5_PDRS186_Msk        (0x1UL << SERC_ISR5_PDRS186_Pos)   /*!< 0x04000000 */
#define SERC_ISR5_PDRS186            SERC_ISR5_PDRS186_Msk
#define SERC_ISR5_PDRS187_Pos        (27U)
#define SERC_ISR5_PDRS187_Msk        (0x1UL << SERC_ISR5_PDRS187_Pos)   /*!< 0x08000000 */
#define SERC_ISR5_PDRS187            SERC_ISR5_PDRS187_Msk
#define SERC_ISR5_PDRS188_Pos        (28U)
#define SERC_ISR5_PDRS188_Msk        (0x1UL << SERC_ISR5_PDRS188_Pos)   /*!< 0x10000000 */
#define SERC_ISR5_PDRS188            SERC_ISR5_PDRS188_Msk
#define SERC_ISR5_PDRS189_Pos        (29U)
#define SERC_ISR5_PDRS189_Msk        (0x1UL << SERC_ISR5_PDRS189_Pos)   /*!< 0x20000000 */
#define SERC_ISR5_PDRS189            SERC_ISR5_PDRS189_Msk
#define SERC_ISR5_PDRS190_Pos        (30U)
#define SERC_ISR5_PDRS190_Msk        (0x1UL << SERC_ISR5_PDRS190_Pos)   /*!< 0x40000000 */
#define SERC_ISR5_PDRS190            SERC_ISR5_PDRS190_Msk
#define SERC_ISR5_PDRS191_Pos        (31U)
#define SERC_ISR5_PDRS191_Msk        (0x1UL << SERC_ISR5_PDRS191_Pos)   /*!< 0x80000000 */
#define SERC_ISR5_PDRS191            SERC_ISR5_PDRS191_Msk

/******************  Bit definition for SERC_ICR0 register  *******************/
#define SERC_ICR0_PDRC0_Pos          (0U)
#define SERC_ICR0_PDRC0_Msk          (0x1UL << SERC_ICR0_PDRC0_Pos)     /*!< 0x00000001 */
#define SERC_ICR0_PDRC0              SERC_ICR0_PDRC0_Msk
#define SERC_ICR0_PDRC1_Pos          (1U)
#define SERC_ICR0_PDRC1_Msk          (0x1UL << SERC_ICR0_PDRC1_Pos)     /*!< 0x00000002 */
#define SERC_ICR0_PDRC1              SERC_ICR0_PDRC1_Msk
#define SERC_ICR0_PDRC2_Pos          (2U)
#define SERC_ICR0_PDRC2_Msk          (0x1UL << SERC_ICR0_PDRC2_Pos)     /*!< 0x00000004 */
#define SERC_ICR0_PDRC2              SERC_ICR0_PDRC2_Msk
#define SERC_ICR0_PDRC3_Pos          (3U)
#define SERC_ICR0_PDRC3_Msk          (0x1UL << SERC_ICR0_PDRC3_Pos)     /*!< 0x00000008 */
#define SERC_ICR0_PDRC3              SERC_ICR0_PDRC3_Msk
#define SERC_ICR0_PDRC4_Pos          (4U)
#define SERC_ICR0_PDRC4_Msk          (0x1UL << SERC_ICR0_PDRC4_Pos)     /*!< 0x00000010 */
#define SERC_ICR0_PDRC4              SERC_ICR0_PDRC4_Msk
#define SERC_ICR0_PDRC5_Pos          (5U)
#define SERC_ICR0_PDRC5_Msk          (0x1UL << SERC_ICR0_PDRC5_Pos)     /*!< 0x00000020 */
#define SERC_ICR0_PDRC5              SERC_ICR0_PDRC5_Msk
#define SERC_ICR0_PDRC6_Pos          (6U)
#define SERC_ICR0_PDRC6_Msk          (0x1UL << SERC_ICR0_PDRC6_Pos)     /*!< 0x00000040 */
#define SERC_ICR0_PDRC6              SERC_ICR0_PDRC6_Msk
#define SERC_ICR0_PDRC7_Pos          (7U)
#define SERC_ICR0_PDRC7_Msk          (0x1UL << SERC_ICR0_PDRC7_Pos)     /*!< 0x00000080 */
#define SERC_ICR0_PDRC7              SERC_ICR0_PDRC7_Msk
#define SERC_ICR0_PDRC8_Pos          (8U)
#define SERC_ICR0_PDRC8_Msk          (0x1UL << SERC_ICR0_PDRC8_Pos)     /*!< 0x00000100 */
#define SERC_ICR0_PDRC8              SERC_ICR0_PDRC8_Msk
#define SERC_ICR0_PDRC9_Pos          (9U)
#define SERC_ICR0_PDRC9_Msk          (0x1UL << SERC_ICR0_PDRC9_Pos)     /*!< 0x00000200 */
#define SERC_ICR0_PDRC9              SERC_ICR0_PDRC9_Msk
#define SERC_ICR0_PDRC10_Pos         (10U)
#define SERC_ICR0_PDRC10_Msk         (0x1UL << SERC_ICR0_PDRC10_Pos)    /*!< 0x00000400 */
#define SERC_ICR0_PDRC10             SERC_ICR0_PDRC10_Msk
#define SERC_ICR0_PDRC11_Pos         (11U)
#define SERC_ICR0_PDRC11_Msk         (0x1UL << SERC_ICR0_PDRC11_Pos)    /*!< 0x00000800 */
#define SERC_ICR0_PDRC11             SERC_ICR0_PDRC11_Msk
#define SERC_ICR0_PDRC12_Pos         (12U)
#define SERC_ICR0_PDRC12_Msk         (0x1UL << SERC_ICR0_PDRC12_Pos)    /*!< 0x00001000 */
#define SERC_ICR0_PDRC12             SERC_ICR0_PDRC12_Msk
#define SERC_ICR0_PDRC13_Pos         (13U)
#define SERC_ICR0_PDRC13_Msk         (0x1UL << SERC_ICR0_PDRC13_Pos)    /*!< 0x00002000 */
#define SERC_ICR0_PDRC13             SERC_ICR0_PDRC13_Msk
#define SERC_ICR0_PDRC14_Pos         (14U)
#define SERC_ICR0_PDRC14_Msk         (0x1UL << SERC_ICR0_PDRC14_Pos)    /*!< 0x00004000 */
#define SERC_ICR0_PDRC14             SERC_ICR0_PDRC14_Msk
#define SERC_ICR0_PDRC15_Pos         (15U)
#define SERC_ICR0_PDRC15_Msk         (0x1UL << SERC_ICR0_PDRC15_Pos)    /*!< 0x00008000 */
#define SERC_ICR0_PDRC15             SERC_ICR0_PDRC15_Msk
#define SERC_ICR0_PDRC16_Pos         (16U)
#define SERC_ICR0_PDRC16_Msk         (0x1UL << SERC_ICR0_PDRC16_Pos)    /*!< 0x00010000 */
#define SERC_ICR0_PDRC16             SERC_ICR0_PDRC16_Msk
#define SERC_ICR0_PDRC17_Pos         (17U)
#define SERC_ICR0_PDRC17_Msk         (0x1UL << SERC_ICR0_PDRC17_Pos)    /*!< 0x00020000 */
#define SERC_ICR0_PDRC17             SERC_ICR0_PDRC17_Msk
#define SERC_ICR0_PDRC18_Pos         (18U)
#define SERC_ICR0_PDRC18_Msk         (0x1UL << SERC_ICR0_PDRC18_Pos)    /*!< 0x00040000 */
#define SERC_ICR0_PDRC18             SERC_ICR0_PDRC18_Msk
#define SERC_ICR0_PDRC19_Pos         (19U)
#define SERC_ICR0_PDRC19_Msk         (0x1UL << SERC_ICR0_PDRC19_Pos)    /*!< 0x00080000 */
#define SERC_ICR0_PDRC19             SERC_ICR0_PDRC19_Msk
#define SERC_ICR0_PDRC20_Pos         (20U)
#define SERC_ICR0_PDRC20_Msk         (0x1UL << SERC_ICR0_PDRC20_Pos)    /*!< 0x00100000 */
#define SERC_ICR0_PDRC20             SERC_ICR0_PDRC20_Msk
#define SERC_ICR0_PDRC21_Pos         (21U)
#define SERC_ICR0_PDRC21_Msk         (0x1UL << SERC_ICR0_PDRC21_Pos)    /*!< 0x00200000 */
#define SERC_ICR0_PDRC21             SERC_ICR0_PDRC21_Msk
#define SERC_ICR0_PDRC22_Pos         (22U)
#define SERC_ICR0_PDRC22_Msk         (0x1UL << SERC_ICR0_PDRC22_Pos)    /*!< 0x00400000 */
#define SERC_ICR0_PDRC22             SERC_ICR0_PDRC22_Msk
#define SERC_ICR0_PDRC23_Pos         (23U)
#define SERC_ICR0_PDRC23_Msk         (0x1UL << SERC_ICR0_PDRC23_Pos)    /*!< 0x00800000 */
#define SERC_ICR0_PDRC23             SERC_ICR0_PDRC23_Msk
#define SERC_ICR0_PDRC24_Pos         (24U)
#define SERC_ICR0_PDRC24_Msk         (0x1UL << SERC_ICR0_PDRC24_Pos)    /*!< 0x01000000 */
#define SERC_ICR0_PDRC24             SERC_ICR0_PDRC24_Msk
#define SERC_ICR0_PDRC25_Pos         (25U)
#define SERC_ICR0_PDRC25_Msk         (0x1UL << SERC_ICR0_PDRC25_Pos)    /*!< 0x02000000 */
#define SERC_ICR0_PDRC25             SERC_ICR0_PDRC25_Msk
#define SERC_ICR0_PDRC26_Pos         (26U)
#define SERC_ICR0_PDRC26_Msk         (0x1UL << SERC_ICR0_PDRC26_Pos)    /*!< 0x04000000 */
#define SERC_ICR0_PDRC26             SERC_ICR0_PDRC26_Msk
#define SERC_ICR0_PDRC27_Pos         (27U)
#define SERC_ICR0_PDRC27_Msk         (0x1UL << SERC_ICR0_PDRC27_Pos)    /*!< 0x08000000 */
#define SERC_ICR0_PDRC27             SERC_ICR0_PDRC27_Msk
#define SERC_ICR0_PDRC28_Pos         (28U)
#define SERC_ICR0_PDRC28_Msk         (0x1UL << SERC_ICR0_PDRC28_Pos)    /*!< 0x10000000 */
#define SERC_ICR0_PDRC28             SERC_ICR0_PDRC28_Msk
#define SERC_ICR0_PDRC29_Pos         (29U)
#define SERC_ICR0_PDRC29_Msk         (0x1UL << SERC_ICR0_PDRC29_Pos)    /*!< 0x20000000 */
#define SERC_ICR0_PDRC29             SERC_ICR0_PDRC29_Msk
#define SERC_ICR0_PDRC30_Pos         (30U)
#define SERC_ICR0_PDRC30_Msk         (0x1UL << SERC_ICR0_PDRC30_Pos)    /*!< 0x40000000 */
#define SERC_ICR0_PDRC30             SERC_ICR0_PDRC30_Msk
#define SERC_ICR0_PDRC31_Pos         (31U)
#define SERC_ICR0_PDRC31_Msk         (0x1UL << SERC_ICR0_PDRC31_Pos)    /*!< 0x80000000 */
#define SERC_ICR0_PDRC31             SERC_ICR0_PDRC31_Msk

/******************  Bit definition for SERC_ICR1 register  *******************/
#define SERC_ICR1_PDRC32_Pos         (0U)
#define SERC_ICR1_PDRC32_Msk         (0x1UL << SERC_ICR1_PDRC32_Pos)    /*!< 0x00000001 */
#define SERC_ICR1_PDRC32             SERC_ICR1_PDRC32_Msk
#define SERC_ICR1_PDRC33_Pos         (1U)
#define SERC_ICR1_PDRC33_Msk         (0x1UL << SERC_ICR1_PDRC33_Pos)    /*!< 0x00000002 */
#define SERC_ICR1_PDRC33             SERC_ICR1_PDRC33_Msk
#define SERC_ICR1_PDRC34_Pos         (2U)
#define SERC_ICR1_PDRC34_Msk         (0x1UL << SERC_ICR1_PDRC34_Pos)    /*!< 0x00000004 */
#define SERC_ICR1_PDRC34             SERC_ICR1_PDRC34_Msk
#define SERC_ICR1_PDRC35_Pos         (3U)
#define SERC_ICR1_PDRC35_Msk         (0x1UL << SERC_ICR1_PDRC35_Pos)    /*!< 0x00000008 */
#define SERC_ICR1_PDRC35             SERC_ICR1_PDRC35_Msk
#define SERC_ICR1_PDRC36_Pos         (4U)
#define SERC_ICR1_PDRC36_Msk         (0x1UL << SERC_ICR1_PDRC36_Pos)    /*!< 0x00000010 */
#define SERC_ICR1_PDRC36             SERC_ICR1_PDRC36_Msk
#define SERC_ICR1_PDRC37_Pos         (5U)
#define SERC_ICR1_PDRC37_Msk         (0x1UL << SERC_ICR1_PDRC37_Pos)    /*!< 0x00000020 */
#define SERC_ICR1_PDRC37             SERC_ICR1_PDRC37_Msk
#define SERC_ICR1_PDRC38_Pos         (6U)
#define SERC_ICR1_PDRC38_Msk         (0x1UL << SERC_ICR1_PDRC38_Pos)    /*!< 0x00000040 */
#define SERC_ICR1_PDRC38             SERC_ICR1_PDRC38_Msk
#define SERC_ICR1_PDRC39_Pos         (7U)
#define SERC_ICR1_PDRC39_Msk         (0x1UL << SERC_ICR1_PDRC39_Pos)    /*!< 0x00000080 */
#define SERC_ICR1_PDRC39             SERC_ICR1_PDRC39_Msk
#define SERC_ICR1_PDRC40_Pos         (8U)
#define SERC_ICR1_PDRC40_Msk         (0x1UL << SERC_ICR1_PDRC40_Pos)    /*!< 0x00000100 */
#define SERC_ICR1_PDRC40             SERC_ICR1_PDRC40_Msk
#define SERC_ICR1_PDRC41_Pos         (9U)
#define SERC_ICR1_PDRC41_Msk         (0x1UL << SERC_ICR1_PDRC41_Pos)    /*!< 0x00000200 */
#define SERC_ICR1_PDRC41             SERC_ICR1_PDRC41_Msk
#define SERC_ICR1_PDRC42_Pos         (10U)
#define SERC_ICR1_PDRC42_Msk         (0x1UL << SERC_ICR1_PDRC42_Pos)    /*!< 0x00000400 */
#define SERC_ICR1_PDRC42             SERC_ICR1_PDRC42_Msk
#define SERC_ICR1_PDRC43_Pos         (11U)
#define SERC_ICR1_PDRC43_Msk         (0x1UL << SERC_ICR1_PDRC43_Pos)    /*!< 0x00000800 */
#define SERC_ICR1_PDRC43             SERC_ICR1_PDRC43_Msk
#define SERC_ICR1_PDRC44_Pos         (12U)
#define SERC_ICR1_PDRC44_Msk         (0x1UL << SERC_ICR1_PDRC44_Pos)    /*!< 0x00001000 */
#define SERC_ICR1_PDRC44             SERC_ICR1_PDRC44_Msk
#define SERC_ICR1_PDRC45_Pos         (13U)
#define SERC_ICR1_PDRC45_Msk         (0x1UL << SERC_ICR1_PDRC45_Pos)    /*!< 0x00002000 */
#define SERC_ICR1_PDRC45             SERC_ICR1_PDRC45_Msk
#define SERC_ICR1_PDRC46_Pos         (14U)
#define SERC_ICR1_PDRC46_Msk         (0x1UL << SERC_ICR1_PDRC46_Pos)    /*!< 0x00004000 */
#define SERC_ICR1_PDRC46             SERC_ICR1_PDRC46_Msk
#define SERC_ICR1_PDRC47_Pos         (15U)
#define SERC_ICR1_PDRC47_Msk         (0x1UL << SERC_ICR1_PDRC47_Pos)    /*!< 0x00008000 */
#define SERC_ICR1_PDRC47             SERC_ICR1_PDRC47_Msk
#define SERC_ICR1_PDRC48_Pos         (16U)
#define SERC_ICR1_PDRC48_Msk         (0x1UL << SERC_ICR1_PDRC48_Pos)    /*!< 0x00010000 */
#define SERC_ICR1_PDRC48             SERC_ICR1_PDRC48_Msk
#define SERC_ICR1_PDRC49_Pos         (17U)
#define SERC_ICR1_PDRC49_Msk         (0x1UL << SERC_ICR1_PDRC49_Pos)    /*!< 0x00020000 */
#define SERC_ICR1_PDRC49             SERC_ICR1_PDRC49_Msk
#define SERC_ICR1_PDRC50_Pos         (18U)
#define SERC_ICR1_PDRC50_Msk         (0x1UL << SERC_ICR1_PDRC50_Pos)    /*!< 0x00040000 */
#define SERC_ICR1_PDRC50             SERC_ICR1_PDRC50_Msk
#define SERC_ICR1_PDRC51_Pos         (19U)
#define SERC_ICR1_PDRC51_Msk         (0x1UL << SERC_ICR1_PDRC51_Pos)    /*!< 0x00080000 */
#define SERC_ICR1_PDRC51             SERC_ICR1_PDRC51_Msk
#define SERC_ICR1_PDRC52_Pos         (20U)
#define SERC_ICR1_PDRC52_Msk         (0x1UL << SERC_ICR1_PDRC52_Pos)    /*!< 0x00100000 */
#define SERC_ICR1_PDRC52             SERC_ICR1_PDRC52_Msk
#define SERC_ICR1_PDRC53_Pos         (21U)
#define SERC_ICR1_PDRC53_Msk         (0x1UL << SERC_ICR1_PDRC53_Pos)    /*!< 0x00200000 */
#define SERC_ICR1_PDRC53             SERC_ICR1_PDRC53_Msk
#define SERC_ICR1_PDRC54_Pos         (22U)
#define SERC_ICR1_PDRC54_Msk         (0x1UL << SERC_ICR1_PDRC54_Pos)    /*!< 0x00400000 */
#define SERC_ICR1_PDRC54             SERC_ICR1_PDRC54_Msk
#define SERC_ICR1_PDRC55_Pos         (23U)
#define SERC_ICR1_PDRC55_Msk         (0x1UL << SERC_ICR1_PDRC55_Pos)    /*!< 0x00800000 */
#define SERC_ICR1_PDRC55             SERC_ICR1_PDRC55_Msk
#define SERC_ICR1_PDRC56_Pos         (24U)
#define SERC_ICR1_PDRC56_Msk         (0x1UL << SERC_ICR1_PDRC56_Pos)    /*!< 0x01000000 */
#define SERC_ICR1_PDRC56             SERC_ICR1_PDRC56_Msk
#define SERC_ICR1_PDRC57_Pos         (25U)
#define SERC_ICR1_PDRC57_Msk         (0x1UL << SERC_ICR1_PDRC57_Pos)    /*!< 0x02000000 */
#define SERC_ICR1_PDRC57             SERC_ICR1_PDRC57_Msk
#define SERC_ICR1_PDRC58_Pos         (26U)
#define SERC_ICR1_PDRC58_Msk         (0x1UL << SERC_ICR1_PDRC58_Pos)    /*!< 0x04000000 */
#define SERC_ICR1_PDRC58             SERC_ICR1_PDRC58_Msk
#define SERC_ICR1_PDRC59_Pos         (27U)
#define SERC_ICR1_PDRC59_Msk         (0x1UL << SERC_ICR1_PDRC59_Pos)    /*!< 0x08000000 */
#define SERC_ICR1_PDRC59             SERC_ICR1_PDRC59_Msk
#define SERC_ICR1_PDRC60_Pos         (28U)
#define SERC_ICR1_PDRC60_Msk         (0x1UL << SERC_ICR1_PDRC60_Pos)    /*!< 0x10000000 */
#define SERC_ICR1_PDRC60             SERC_ICR1_PDRC60_Msk
#define SERC_ICR1_PDRC61_Pos         (29U)
#define SERC_ICR1_PDRC61_Msk         (0x1UL << SERC_ICR1_PDRC61_Pos)    /*!< 0x20000000 */
#define SERC_ICR1_PDRC61             SERC_ICR1_PDRC61_Msk
#define SERC_ICR1_PDRC62_Pos         (30U)
#define SERC_ICR1_PDRC62_Msk         (0x1UL << SERC_ICR1_PDRC62_Pos)    /*!< 0x40000000 */
#define SERC_ICR1_PDRC62             SERC_ICR1_PDRC62_Msk
#define SERC_ICR1_PDRC63_Pos         (31U)
#define SERC_ICR1_PDRC63_Msk         (0x1UL << SERC_ICR1_PDRC63_Pos)    /*!< 0x80000000 */
#define SERC_ICR1_PDRC63             SERC_ICR1_PDRC63_Msk

/******************  Bit definition for SERC_ICR2 register  *******************/
#define SERC_ICR2_PDRC64_Pos         (0U)
#define SERC_ICR2_PDRC64_Msk         (0x1UL << SERC_ICR2_PDRC64_Pos)    /*!< 0x00000001 */
#define SERC_ICR2_PDRC64             SERC_ICR2_PDRC64_Msk
#define SERC_ICR2_PDRC65_Pos         (1U)
#define SERC_ICR2_PDRC65_Msk         (0x1UL << SERC_ICR2_PDRC65_Pos)    /*!< 0x00000002 */
#define SERC_ICR2_PDRC65             SERC_ICR2_PDRC65_Msk
#define SERC_ICR2_PDRC66_Pos         (2U)
#define SERC_ICR2_PDRC66_Msk         (0x1UL << SERC_ICR2_PDRC66_Pos)    /*!< 0x00000004 */
#define SERC_ICR2_PDRC66             SERC_ICR2_PDRC66_Msk
#define SERC_ICR2_PDRC67_Pos         (3U)
#define SERC_ICR2_PDRC67_Msk         (0x1UL << SERC_ICR2_PDRC67_Pos)    /*!< 0x00000008 */
#define SERC_ICR2_PDRC67             SERC_ICR2_PDRC67_Msk
#define SERC_ICR2_PDRC68_Pos         (4U)
#define SERC_ICR2_PDRC68_Msk         (0x1UL << SERC_ICR2_PDRC68_Pos)    /*!< 0x00000010 */
#define SERC_ICR2_PDRC68             SERC_ICR2_PDRC68_Msk
#define SERC_ICR2_PDRC69_Pos         (5U)
#define SERC_ICR2_PDRC69_Msk         (0x1UL << SERC_ICR2_PDRC69_Pos)    /*!< 0x00000020 */
#define SERC_ICR2_PDRC69             SERC_ICR2_PDRC69_Msk
#define SERC_ICR2_PDRC70_Pos         (6U)
#define SERC_ICR2_PDRC70_Msk         (0x1UL << SERC_ICR2_PDRC70_Pos)    /*!< 0x00000040 */
#define SERC_ICR2_PDRC70             SERC_ICR2_PDRC70_Msk
#define SERC_ICR2_PDRC71_Pos         (7U)
#define SERC_ICR2_PDRC71_Msk         (0x1UL << SERC_ICR2_PDRC71_Pos)    /*!< 0x00000080 */
#define SERC_ICR2_PDRC71             SERC_ICR2_PDRC71_Msk
#define SERC_ICR2_PDRC72_Pos         (8U)
#define SERC_ICR2_PDRC72_Msk         (0x1UL << SERC_ICR2_PDRC72_Pos)    /*!< 0x00000100 */
#define SERC_ICR2_PDRC72             SERC_ICR2_PDRC72_Msk
#define SERC_ICR2_PDRC73_Pos         (9U)
#define SERC_ICR2_PDRC73_Msk         (0x1UL << SERC_ICR2_PDRC73_Pos)    /*!< 0x00000200 */
#define SERC_ICR2_PDRC73             SERC_ICR2_PDRC73_Msk
#define SERC_ICR2_PDRC74_Pos         (10U)
#define SERC_ICR2_PDRC74_Msk         (0x1UL << SERC_ICR2_PDRC74_Pos)    /*!< 0x00000400 */
#define SERC_ICR2_PDRC74             SERC_ICR2_PDRC74_Msk
#define SERC_ICR2_PDRC75_Pos         (11U)
#define SERC_ICR2_PDRC75_Msk         (0x1UL << SERC_ICR2_PDRC75_Pos)    /*!< 0x00000800 */
#define SERC_ICR2_PDRC75             SERC_ICR2_PDRC75_Msk
#define SERC_ICR2_PDRC76_Pos         (12U)
#define SERC_ICR2_PDRC76_Msk         (0x1UL << SERC_ICR2_PDRC76_Pos)    /*!< 0x00001000 */
#define SERC_ICR2_PDRC76             SERC_ICR2_PDRC76_Msk
#define SERC_ICR2_PDRC77_Pos         (13U)
#define SERC_ICR2_PDRC77_Msk         (0x1UL << SERC_ICR2_PDRC77_Pos)    /*!< 0x00002000 */
#define SERC_ICR2_PDRC77             SERC_ICR2_PDRC77_Msk
#define SERC_ICR2_PDRC78_Pos         (14U)
#define SERC_ICR2_PDRC78_Msk         (0x1UL << SERC_ICR2_PDRC78_Pos)    /*!< 0x00004000 */
#define SERC_ICR2_PDRC78             SERC_ICR2_PDRC78_Msk
#define SERC_ICR2_PDRC79_Pos         (15U)
#define SERC_ICR2_PDRC79_Msk         (0x1UL << SERC_ICR2_PDRC79_Pos)    /*!< 0x00008000 */
#define SERC_ICR2_PDRC79             SERC_ICR2_PDRC79_Msk
#define SERC_ICR2_PDRC80_Pos         (16U)
#define SERC_ICR2_PDRC80_Msk         (0x1UL << SERC_ICR2_PDRC80_Pos)    /*!< 0x00010000 */
#define SERC_ICR2_PDRC80             SERC_ICR2_PDRC80_Msk
#define SERC_ICR2_PDRC81_Pos         (17U)
#define SERC_ICR2_PDRC81_Msk         (0x1UL << SERC_ICR2_PDRC81_Pos)    /*!< 0x00020000 */
#define SERC_ICR2_PDRC81             SERC_ICR2_PDRC81_Msk
#define SERC_ICR2_PDRC82_Pos         (18U)
#define SERC_ICR2_PDRC82_Msk         (0x1UL << SERC_ICR2_PDRC82_Pos)    /*!< 0x00040000 */
#define SERC_ICR2_PDRC82             SERC_ICR2_PDRC82_Msk
#define SERC_ICR2_PDRC83_Pos         (19U)
#define SERC_ICR2_PDRC83_Msk         (0x1UL << SERC_ICR2_PDRC83_Pos)    /*!< 0x00080000 */
#define SERC_ICR2_PDRC83             SERC_ICR2_PDRC83_Msk
#define SERC_ICR2_PDRC84_Pos         (20U)
#define SERC_ICR2_PDRC84_Msk         (0x1UL << SERC_ICR2_PDRC84_Pos)    /*!< 0x00100000 */
#define SERC_ICR2_PDRC84             SERC_ICR2_PDRC84_Msk
#define SERC_ICR2_PDRC85_Pos         (21U)
#define SERC_ICR2_PDRC85_Msk         (0x1UL << SERC_ICR2_PDRC85_Pos)    /*!< 0x00200000 */
#define SERC_ICR2_PDRC85             SERC_ICR2_PDRC85_Msk
#define SERC_ICR2_PDRC86_Pos         (22U)
#define SERC_ICR2_PDRC86_Msk         (0x1UL << SERC_ICR2_PDRC86_Pos)    /*!< 0x00400000 */
#define SERC_ICR2_PDRC86             SERC_ICR2_PDRC86_Msk
#define SERC_ICR2_PDRC87_Pos         (23U)
#define SERC_ICR2_PDRC87_Msk         (0x1UL << SERC_ICR2_PDRC87_Pos)    /*!< 0x00800000 */
#define SERC_ICR2_PDRC87             SERC_ICR2_PDRC87_Msk
#define SERC_ICR2_PDRC88_Pos         (24U)
#define SERC_ICR2_PDRC88_Msk         (0x1UL << SERC_ICR2_PDRC88_Pos)    /*!< 0x01000000 */
#define SERC_ICR2_PDRC88             SERC_ICR2_PDRC88_Msk
#define SERC_ICR2_PDRC89_Pos         (25U)
#define SERC_ICR2_PDRC89_Msk         (0x1UL << SERC_ICR2_PDRC89_Pos)    /*!< 0x02000000 */
#define SERC_ICR2_PDRC89             SERC_ICR2_PDRC89_Msk
#define SERC_ICR2_PDRC90_Pos         (26U)
#define SERC_ICR2_PDRC90_Msk         (0x1UL << SERC_ICR2_PDRC90_Pos)    /*!< 0x04000000 */
#define SERC_ICR2_PDRC90             SERC_ICR2_PDRC90_Msk
#define SERC_ICR2_PDRC91_Pos         (27U)
#define SERC_ICR2_PDRC91_Msk         (0x1UL << SERC_ICR2_PDRC91_Pos)    /*!< 0x08000000 */
#define SERC_ICR2_PDRC91             SERC_ICR2_PDRC91_Msk
#define SERC_ICR2_PDRC92_Pos         (28U)
#define SERC_ICR2_PDRC92_Msk         (0x1UL << SERC_ICR2_PDRC92_Pos)    /*!< 0x10000000 */
#define SERC_ICR2_PDRC92             SERC_ICR2_PDRC92_Msk
#define SERC_ICR2_PDRC93_Pos         (29U)
#define SERC_ICR2_PDRC93_Msk         (0x1UL << SERC_ICR2_PDRC93_Pos)    /*!< 0x20000000 */
#define SERC_ICR2_PDRC93             SERC_ICR2_PDRC93_Msk
#define SERC_ICR2_PDRC94_Pos         (30U)
#define SERC_ICR2_PDRC94_Msk         (0x1UL << SERC_ICR2_PDRC94_Pos)    /*!< 0x40000000 */
#define SERC_ICR2_PDRC94             SERC_ICR2_PDRC94_Msk
#define SERC_ICR2_PDRC95_Pos         (31U)
#define SERC_ICR2_PDRC95_Msk         (0x1UL << SERC_ICR2_PDRC95_Pos)    /*!< 0x80000000 */
#define SERC_ICR2_PDRC95             SERC_ICR2_PDRC95_Msk

/******************  Bit definition for SERC_ICR3 register  *******************/
#define SERC_ICR3_PDRC96_Pos         (0U)
#define SERC_ICR3_PDRC96_Msk         (0x1UL << SERC_ICR3_PDRC96_Pos)    /*!< 0x00000001 */
#define SERC_ICR3_PDRC96             SERC_ICR3_PDRC96_Msk
#define SERC_ICR3_PDRC97_Pos         (1U)
#define SERC_ICR3_PDRC97_Msk         (0x1UL << SERC_ICR3_PDRC97_Pos)    /*!< 0x00000002 */
#define SERC_ICR3_PDRC97             SERC_ICR3_PDRC97_Msk
#define SERC_ICR3_PDRC98_Pos         (2U)
#define SERC_ICR3_PDRC98_Msk         (0x1UL << SERC_ICR3_PDRC98_Pos)    /*!< 0x00000004 */
#define SERC_ICR3_PDRC98             SERC_ICR3_PDRC98_Msk
#define SERC_ICR3_PDRC99_Pos         (3U)
#define SERC_ICR3_PDRC99_Msk         (0x1UL << SERC_ICR3_PDRC99_Pos)    /*!< 0x00000008 */
#define SERC_ICR3_PDRC99             SERC_ICR3_PDRC99_Msk
#define SERC_ICR3_PDRC100_Pos        (4U)
#define SERC_ICR3_PDRC100_Msk        (0x1UL << SERC_ICR3_PDRC100_Pos)   /*!< 0x00000010 */
#define SERC_ICR3_PDRC100            SERC_ICR3_PDRC100_Msk
#define SERC_ICR3_PDRC101_Pos        (5U)
#define SERC_ICR3_PDRC101_Msk        (0x1UL << SERC_ICR3_PDRC101_Pos)   /*!< 0x00000020 */
#define SERC_ICR3_PDRC101            SERC_ICR3_PDRC101_Msk
#define SERC_ICR3_PDRC102_Pos        (6U)
#define SERC_ICR3_PDRC102_Msk        (0x1UL << SERC_ICR3_PDRC102_Pos)   /*!< 0x00000040 */
#define SERC_ICR3_PDRC102            SERC_ICR3_PDRC102_Msk
#define SERC_ICR3_PDRC103_Pos        (7U)
#define SERC_ICR3_PDRC103_Msk        (0x1UL << SERC_ICR3_PDRC103_Pos)   /*!< 0x00000080 */
#define SERC_ICR3_PDRC103            SERC_ICR3_PDRC103_Msk
#define SERC_ICR3_PDRC104_Pos        (8U)
#define SERC_ICR3_PDRC104_Msk        (0x1UL << SERC_ICR3_PDRC104_Pos)   /*!< 0x00000100 */
#define SERC_ICR3_PDRC104            SERC_ICR3_PDRC104_Msk
#define SERC_ICR3_PDRC105_Pos        (9U)
#define SERC_ICR3_PDRC105_Msk        (0x1UL << SERC_ICR3_PDRC105_Pos)   /*!< 0x00000200 */
#define SERC_ICR3_PDRC105            SERC_ICR3_PDRC105_Msk
#define SERC_ICR3_PDRC106_Pos        (10U)
#define SERC_ICR3_PDRC106_Msk        (0x1UL << SERC_ICR3_PDRC106_Pos)   /*!< 0x00000400 */
#define SERC_ICR3_PDRC106            SERC_ICR3_PDRC106_Msk
#define SERC_ICR3_PDRC107_Pos        (11U)
#define SERC_ICR3_PDRC107_Msk        (0x1UL << SERC_ICR3_PDRC107_Pos)   /*!< 0x00000800 */
#define SERC_ICR3_PDRC107            SERC_ICR3_PDRC107_Msk
#define SERC_ICR3_PDRC108_Pos        (12U)
#define SERC_ICR3_PDRC108_Msk        (0x1UL << SERC_ICR3_PDRC108_Pos)   /*!< 0x00001000 */
#define SERC_ICR3_PDRC108            SERC_ICR3_PDRC108_Msk
#define SERC_ICR3_PDRC109_Pos        (13U)
#define SERC_ICR3_PDRC109_Msk        (0x1UL << SERC_ICR3_PDRC109_Pos)   /*!< 0x00002000 */
#define SERC_ICR3_PDRC109            SERC_ICR3_PDRC109_Msk
#define SERC_ICR3_PDRC110_Pos        (14U)
#define SERC_ICR3_PDRC110_Msk        (0x1UL << SERC_ICR3_PDRC110_Pos)   /*!< 0x00004000 */
#define SERC_ICR3_PDRC110            SERC_ICR3_PDRC110_Msk
#define SERC_ICR3_PDRC111_Pos        (15U)
#define SERC_ICR3_PDRC111_Msk        (0x1UL << SERC_ICR3_PDRC111_Pos)   /*!< 0x00008000 */
#define SERC_ICR3_PDRC111            SERC_ICR3_PDRC111_Msk
#define SERC_ICR3_PDRC112_Pos        (16U)
#define SERC_ICR3_PDRC112_Msk        (0x1UL << SERC_ICR3_PDRC112_Pos)   /*!< 0x00010000 */
#define SERC_ICR3_PDRC112            SERC_ICR3_PDRC112_Msk
#define SERC_ICR3_PDRC113_Pos        (17U)
#define SERC_ICR3_PDRC113_Msk        (0x1UL << SERC_ICR3_PDRC113_Pos)   /*!< 0x00020000 */
#define SERC_ICR3_PDRC113            SERC_ICR3_PDRC113_Msk
#define SERC_ICR3_PDRC114_Pos        (18U)
#define SERC_ICR3_PDRC114_Msk        (0x1UL << SERC_ICR3_PDRC114_Pos)   /*!< 0x00040000 */
#define SERC_ICR3_PDRC114            SERC_ICR3_PDRC114_Msk
#define SERC_ICR3_PDRC115_Pos        (19U)
#define SERC_ICR3_PDRC115_Msk        (0x1UL << SERC_ICR3_PDRC115_Pos)   /*!< 0x00080000 */
#define SERC_ICR3_PDRC115            SERC_ICR3_PDRC115_Msk
#define SERC_ICR3_PDRC116_Pos        (20U)
#define SERC_ICR3_PDRC116_Msk        (0x1UL << SERC_ICR3_PDRC116_Pos)   /*!< 0x00100000 */
#define SERC_ICR3_PDRC116            SERC_ICR3_PDRC116_Msk
#define SERC_ICR3_PDRC117_Pos        (21U)
#define SERC_ICR3_PDRC117_Msk        (0x1UL << SERC_ICR3_PDRC117_Pos)   /*!< 0x00200000 */
#define SERC_ICR3_PDRC117            SERC_ICR3_PDRC117_Msk
#define SERC_ICR3_PDRC118_Pos        (22U)
#define SERC_ICR3_PDRC118_Msk        (0x1UL << SERC_ICR3_PDRC118_Pos)   /*!< 0x00400000 */
#define SERC_ICR3_PDRC118            SERC_ICR3_PDRC118_Msk
#define SERC_ICR3_PDRC119_Pos        (23U)
#define SERC_ICR3_PDRC119_Msk        (0x1UL << SERC_ICR3_PDRC119_Pos)   /*!< 0x00800000 */
#define SERC_ICR3_PDRC119            SERC_ICR3_PDRC119_Msk
#define SERC_ICR3_PDRC120_Pos        (24U)
#define SERC_ICR3_PDRC120_Msk        (0x1UL << SERC_ICR3_PDRC120_Pos)   /*!< 0x01000000 */
#define SERC_ICR3_PDRC120            SERC_ICR3_PDRC120_Msk
#define SERC_ICR3_PDRC121_Pos        (25U)
#define SERC_ICR3_PDRC121_Msk        (0x1UL << SERC_ICR3_PDRC121_Pos)   /*!< 0x02000000 */
#define SERC_ICR3_PDRC121            SERC_ICR3_PDRC121_Msk
#define SERC_ICR3_PDRC122_Pos        (26U)
#define SERC_ICR3_PDRC122_Msk        (0x1UL << SERC_ICR3_PDRC122_Pos)   /*!< 0x04000000 */
#define SERC_ICR3_PDRC122            SERC_ICR3_PDRC122_Msk
#define SERC_ICR3_PDRC123_Pos        (27U)
#define SERC_ICR3_PDRC123_Msk        (0x1UL << SERC_ICR3_PDRC123_Pos)   /*!< 0x08000000 */
#define SERC_ICR3_PDRC123            SERC_ICR3_PDRC123_Msk
#define SERC_ICR3_PDRC124_Pos        (28U)
#define SERC_ICR3_PDRC124_Msk        (0x1UL << SERC_ICR3_PDRC124_Pos)   /*!< 0x10000000 */
#define SERC_ICR3_PDRC124            SERC_ICR3_PDRC124_Msk
#define SERC_ICR3_PDRC125_Pos        (29U)
#define SERC_ICR3_PDRC125_Msk        (0x1UL << SERC_ICR3_PDRC125_Pos)   /*!< 0x20000000 */
#define SERC_ICR3_PDRC125            SERC_ICR3_PDRC125_Msk
#define SERC_ICR3_PDRC126_Pos        (30U)
#define SERC_ICR3_PDRC126_Msk        (0x1UL << SERC_ICR3_PDRC126_Pos)   /*!< 0x40000000 */
#define SERC_ICR3_PDRC126            SERC_ICR3_PDRC126_Msk
#define SERC_ICR3_PDRC127_Pos        (31U)
#define SERC_ICR3_PDRC127_Msk        (0x1UL << SERC_ICR3_PDRC127_Pos)   /*!< 0x80000000 */
#define SERC_ICR3_PDRC127            SERC_ICR3_PDRC127_Msk

/******************  Bit definition for SERC_ICR4 register  *******************/
#define SERC_ICR4_PDRC128_Pos        (0U)
#define SERC_ICR4_PDRC128_Msk        (0x1UL << SERC_ICR4_PDRC128_Pos)   /*!< 0x00000001 */
#define SERC_ICR4_PDRC128            SERC_ICR4_PDRC128_Msk
#define SERC_ICR4_PDRC129_Pos        (1U)
#define SERC_ICR4_PDRC129_Msk        (0x1UL << SERC_ICR4_PDRC129_Pos)   /*!< 0x00000002 */
#define SERC_ICR4_PDRC129            SERC_ICR4_PDRC129_Msk
#define SERC_ICR4_PDRC130_Pos        (2U)
#define SERC_ICR4_PDRC130_Msk        (0x1UL << SERC_ICR4_PDRC130_Pos)   /*!< 0x00000004 */
#define SERC_ICR4_PDRC130            SERC_ICR4_PDRC130_Msk
#define SERC_ICR4_PDRC131_Pos        (3U)
#define SERC_ICR4_PDRC131_Msk        (0x1UL << SERC_ICR4_PDRC131_Pos)   /*!< 0x00000008 */
#define SERC_ICR4_PDRC131            SERC_ICR4_PDRC131_Msk
#define SERC_ICR4_PDRC132_Pos        (4U)
#define SERC_ICR4_PDRC132_Msk        (0x1UL << SERC_ICR4_PDRC132_Pos)   /*!< 0x00000010 */
#define SERC_ICR4_PDRC132            SERC_ICR4_PDRC132_Msk
#define SERC_ICR4_PDRC133_Pos        (5U)
#define SERC_ICR4_PDRC133_Msk        (0x1UL << SERC_ICR4_PDRC133_Pos)   /*!< 0x00000020 */
#define SERC_ICR4_PDRC133            SERC_ICR4_PDRC133_Msk
#define SERC_ICR4_PDRC134_Pos        (6U)
#define SERC_ICR4_PDRC134_Msk        (0x1UL << SERC_ICR4_PDRC134_Pos)   /*!< 0x00000040 */
#define SERC_ICR4_PDRC134            SERC_ICR4_PDRC134_Msk
#define SERC_ICR4_PDRC135_Pos        (7U)
#define SERC_ICR4_PDRC135_Msk        (0x1UL << SERC_ICR4_PDRC135_Pos)   /*!< 0x00000080 */
#define SERC_ICR4_PDRC135            SERC_ICR4_PDRC135_Msk
#define SERC_ICR4_PDRC136_Pos        (8U)
#define SERC_ICR4_PDRC136_Msk        (0x1UL << SERC_ICR4_PDRC136_Pos)   /*!< 0x00000100 */
#define SERC_ICR4_PDRC136            SERC_ICR4_PDRC136_Msk
#define SERC_ICR4_PDRC137_Pos        (9U)
#define SERC_ICR4_PDRC137_Msk        (0x1UL << SERC_ICR4_PDRC137_Pos)   /*!< 0x00000200 */
#define SERC_ICR4_PDRC137            SERC_ICR4_PDRC137_Msk
#define SERC_ICR4_PDRC138_Pos        (10U)
#define SERC_ICR4_PDRC138_Msk        (0x1UL << SERC_ICR4_PDRC138_Pos)   /*!< 0x00000400 */
#define SERC_ICR4_PDRC138            SERC_ICR4_PDRC138_Msk
#define SERC_ICR4_PDRC139_Pos        (11U)
#define SERC_ICR4_PDRC139_Msk        (0x1UL << SERC_ICR4_PDRC139_Pos)   /*!< 0x00000800 */
#define SERC_ICR4_PDRC139            SERC_ICR4_PDRC139_Msk
#define SERC_ICR4_PDRC140_Pos        (12U)
#define SERC_ICR4_PDRC140_Msk        (0x1UL << SERC_ICR4_PDRC140_Pos)   /*!< 0x00001000 */
#define SERC_ICR4_PDRC140            SERC_ICR4_PDRC140_Msk
#define SERC_ICR4_PDRC141_Pos        (13U)
#define SERC_ICR4_PDRC141_Msk        (0x1UL << SERC_ICR4_PDRC141_Pos)   /*!< 0x00002000 */
#define SERC_ICR4_PDRC141            SERC_ICR4_PDRC141_Msk
#define SERC_ICR4_PDRC142_Pos        (14U)
#define SERC_ICR4_PDRC142_Msk        (0x1UL << SERC_ICR4_PDRC142_Pos)   /*!< 0x00004000 */
#define SERC_ICR4_PDRC142            SERC_ICR4_PDRC142_Msk
#define SERC_ICR4_PDRC143_Pos        (15U)
#define SERC_ICR4_PDRC143_Msk        (0x1UL << SERC_ICR4_PDRC143_Pos)   /*!< 0x00008000 */
#define SERC_ICR4_PDRC143            SERC_ICR4_PDRC143_Msk
#define SERC_ICR4_PDRC144_Pos        (16U)
#define SERC_ICR4_PDRC144_Msk        (0x1UL << SERC_ICR4_PDRC144_Pos)   /*!< 0x00010000 */
#define SERC_ICR4_PDRC144            SERC_ICR4_PDRC144_Msk
#define SERC_ICR4_PDRC145_Pos        (17U)
#define SERC_ICR4_PDRC145_Msk        (0x1UL << SERC_ICR4_PDRC145_Pos)   /*!< 0x00020000 */
#define SERC_ICR4_PDRC145            SERC_ICR4_PDRC145_Msk
#define SERC_ICR4_PDRC146_Pos        (18U)
#define SERC_ICR4_PDRC146_Msk        (0x1UL << SERC_ICR4_PDRC146_Pos)   /*!< 0x00040000 */
#define SERC_ICR4_PDRC146            SERC_ICR4_PDRC146_Msk
#define SERC_ICR4_PDRC147_Pos        (19U)
#define SERC_ICR4_PDRC147_Msk        (0x1UL << SERC_ICR4_PDRC147_Pos)   /*!< 0x00080000 */
#define SERC_ICR4_PDRC147            SERC_ICR4_PDRC147_Msk
#define SERC_ICR4_PDRC148_Pos        (20U)
#define SERC_ICR4_PDRC148_Msk        (0x1UL << SERC_ICR4_PDRC148_Pos)   /*!< 0x00100000 */
#define SERC_ICR4_PDRC148            SERC_ICR4_PDRC148_Msk
#define SERC_ICR4_PDRC149_Pos        (21U)
#define SERC_ICR4_PDRC149_Msk        (0x1UL << SERC_ICR4_PDRC149_Pos)   /*!< 0x00200000 */
#define SERC_ICR4_PDRC149            SERC_ICR4_PDRC149_Msk
#define SERC_ICR4_PDRC150_Pos        (22U)
#define SERC_ICR4_PDRC150_Msk        (0x1UL << SERC_ICR4_PDRC150_Pos)   /*!< 0x00400000 */
#define SERC_ICR4_PDRC150            SERC_ICR4_PDRC150_Msk
#define SERC_ICR4_PDRC151_Pos        (23U)
#define SERC_ICR4_PDRC151_Msk        (0x1UL << SERC_ICR4_PDRC151_Pos)   /*!< 0x00800000 */
#define SERC_ICR4_PDRC151            SERC_ICR4_PDRC151_Msk
#define SERC_ICR4_PDRC152_Pos        (24U)
#define SERC_ICR4_PDRC152_Msk        (0x1UL << SERC_ICR4_PDRC152_Pos)   /*!< 0x01000000 */
#define SERC_ICR4_PDRC152            SERC_ICR4_PDRC152_Msk
#define SERC_ICR4_PDRC153_Pos        (25U)
#define SERC_ICR4_PDRC153_Msk        (0x1UL << SERC_ICR4_PDRC153_Pos)   /*!< 0x02000000 */
#define SERC_ICR4_PDRC153            SERC_ICR4_PDRC153_Msk
#define SERC_ICR4_PDRC154_Pos        (26U)
#define SERC_ICR4_PDRC154_Msk        (0x1UL << SERC_ICR4_PDRC154_Pos)   /*!< 0x04000000 */
#define SERC_ICR4_PDRC154            SERC_ICR4_PDRC154_Msk
#define SERC_ICR4_PDRC155_Pos        (27U)
#define SERC_ICR4_PDRC155_Msk        (0x1UL << SERC_ICR4_PDRC155_Pos)   /*!< 0x08000000 */
#define SERC_ICR4_PDRC155            SERC_ICR4_PDRC155_Msk
#define SERC_ICR4_PDRC156_Pos        (28U)
#define SERC_ICR4_PDRC156_Msk        (0x1UL << SERC_ICR4_PDRC156_Pos)   /*!< 0x10000000 */
#define SERC_ICR4_PDRC156            SERC_ICR4_PDRC156_Msk
#define SERC_ICR4_PDRC157_Pos        (29U)
#define SERC_ICR4_PDRC157_Msk        (0x1UL << SERC_ICR4_PDRC157_Pos)   /*!< 0x20000000 */
#define SERC_ICR4_PDRC157            SERC_ICR4_PDRC157_Msk
#define SERC_ICR4_PDRC158_Pos        (30U)
#define SERC_ICR4_PDRC158_Msk        (0x1UL << SERC_ICR4_PDRC158_Pos)   /*!< 0x40000000 */
#define SERC_ICR4_PDRC158            SERC_ICR4_PDRC158_Msk
#define SERC_ICR4_PDRC159_Pos        (31U)
#define SERC_ICR4_PDRC159_Msk        (0x1UL << SERC_ICR4_PDRC159_Pos)   /*!< 0x80000000 */
#define SERC_ICR4_PDRC159            SERC_ICR4_PDRC159_Msk

/******************  Bit definition for SERC_ICR5 register  *******************/
#define SERC_ICR5_PDRC160_Pos        (0U)
#define SERC_ICR5_PDRC160_Msk        (0x1UL << SERC_ICR5_PDRC160_Pos)   /*!< 0x00000001 */
#define SERC_ICR5_PDRC160            SERC_ICR5_PDRC160_Msk
#define SERC_ICR5_PDRC161_Pos        (1U)
#define SERC_ICR5_PDRC161_Msk        (0x1UL << SERC_ICR5_PDRC161_Pos)   /*!< 0x00000002 */
#define SERC_ICR5_PDRC161            SERC_ICR5_PDRC161_Msk
#define SERC_ICR5_PDRC162_Pos        (2U)
#define SERC_ICR5_PDRC162_Msk        (0x1UL << SERC_ICR5_PDRC162_Pos)   /*!< 0x00000004 */
#define SERC_ICR5_PDRC162            SERC_ICR5_PDRC162_Msk
#define SERC_ICR5_PDRC163_Pos        (3U)
#define SERC_ICR5_PDRC163_Msk        (0x1UL << SERC_ICR5_PDRC163_Pos)   /*!< 0x00000008 */
#define SERC_ICR5_PDRC163            SERC_ICR5_PDRC163_Msk
#define SERC_ICR5_PDRC164_Pos        (4U)
#define SERC_ICR5_PDRC164_Msk        (0x1UL << SERC_ICR5_PDRC164_Pos)   /*!< 0x00000010 */
#define SERC_ICR5_PDRC164            SERC_ICR5_PDRC164_Msk
#define SERC_ICR5_PDRC165_Pos        (5U)
#define SERC_ICR5_PDRC165_Msk        (0x1UL << SERC_ICR5_PDRC165_Pos)   /*!< 0x00000020 */
#define SERC_ICR5_PDRC165            SERC_ICR5_PDRC165_Msk
#define SERC_ICR5_PDRC166_Pos        (6U)
#define SERC_ICR5_PDRC166_Msk        (0x1UL << SERC_ICR5_PDRC166_Pos)   /*!< 0x00000040 */
#define SERC_ICR5_PDRC166            SERC_ICR5_PDRC166_Msk
#define SERC_ICR5_PDRC167_Pos        (7U)
#define SERC_ICR5_PDRC167_Msk        (0x1UL << SERC_ICR5_PDRC167_Pos)   /*!< 0x00000080 */
#define SERC_ICR5_PDRC167            SERC_ICR5_PDRC167_Msk
#define SERC_ICR5_PDRC168_Pos        (8U)
#define SERC_ICR5_PDRC168_Msk        (0x1UL << SERC_ICR5_PDRC168_Pos)   /*!< 0x00000100 */
#define SERC_ICR5_PDRC168            SERC_ICR5_PDRC168_Msk
#define SERC_ICR5_PDRC169_Pos        (9U)
#define SERC_ICR5_PDRC169_Msk        (0x1UL << SERC_ICR5_PDRC169_Pos)   /*!< 0x00000200 */
#define SERC_ICR5_PDRC169            SERC_ICR5_PDRC169_Msk
#define SERC_ICR5_PDRC170_Pos        (10U)
#define SERC_ICR5_PDRC170_Msk        (0x1UL << SERC_ICR5_PDRC170_Pos)   /*!< 0x00000400 */
#define SERC_ICR5_PDRC170            SERC_ICR5_PDRC170_Msk
#define SERC_ICR5_PDRC171_Pos        (11U)
#define SERC_ICR5_PDRC171_Msk        (0x1UL << SERC_ICR5_PDRC171_Pos)   /*!< 0x00000800 */
#define SERC_ICR5_PDRC171            SERC_ICR5_PDRC171_Msk
#define SERC_ICR5_PDRC172_Pos        (12U)
#define SERC_ICR5_PDRC172_Msk        (0x1UL << SERC_ICR5_PDRC172_Pos)   /*!< 0x00001000 */
#define SERC_ICR5_PDRC172            SERC_ICR5_PDRC172_Msk
#define SERC_ICR5_PDRC173_Pos        (13U)
#define SERC_ICR5_PDRC173_Msk        (0x1UL << SERC_ICR5_PDRC173_Pos)   /*!< 0x00002000 */
#define SERC_ICR5_PDRC173            SERC_ICR5_PDRC173_Msk
#define SERC_ICR5_PDRC174_Pos        (14U)
#define SERC_ICR5_PDRC174_Msk        (0x1UL << SERC_ICR5_PDRC174_Pos)   /*!< 0x00004000 */
#define SERC_ICR5_PDRC174            SERC_ICR5_PDRC174_Msk
#define SERC_ICR5_PDRC175_Pos        (15U)
#define SERC_ICR5_PDRC175_Msk        (0x1UL << SERC_ICR5_PDRC175_Pos)   /*!< 0x00008000 */
#define SERC_ICR5_PDRC175            SERC_ICR5_PDRC175_Msk
#define SERC_ICR5_PDRC176_Pos        (16U)
#define SERC_ICR5_PDRC176_Msk        (0x1UL << SERC_ICR5_PDRC176_Pos)   /*!< 0x00010000 */
#define SERC_ICR5_PDRC176            SERC_ICR5_PDRC176_Msk
#define SERC_ICR5_PDRC177_Pos        (17U)
#define SERC_ICR5_PDRC177_Msk        (0x1UL << SERC_ICR5_PDRC177_Pos)   /*!< 0x00020000 */
#define SERC_ICR5_PDRC177            SERC_ICR5_PDRC177_Msk
#define SERC_ICR5_PDRC178_Pos        (18U)
#define SERC_ICR5_PDRC178_Msk        (0x1UL << SERC_ICR5_PDRC178_Pos)   /*!< 0x00040000 */
#define SERC_ICR5_PDRC178            SERC_ICR5_PDRC178_Msk
#define SERC_ICR5_PDRC179_Pos        (19U)
#define SERC_ICR5_PDRC179_Msk        (0x1UL << SERC_ICR5_PDRC179_Pos)   /*!< 0x00080000 */
#define SERC_ICR5_PDRC179            SERC_ICR5_PDRC179_Msk
#define SERC_ICR5_PDRC180_Pos        (20U)
#define SERC_ICR5_PDRC180_Msk        (0x1UL << SERC_ICR5_PDRC180_Pos)   /*!< 0x00100000 */
#define SERC_ICR5_PDRC180            SERC_ICR5_PDRC180_Msk
#define SERC_ICR5_PDRC181_Pos        (21U)
#define SERC_ICR5_PDRC181_Msk        (0x1UL << SERC_ICR5_PDRC181_Pos)   /*!< 0x00200000 */
#define SERC_ICR5_PDRC181            SERC_ICR5_PDRC181_Msk
#define SERC_ICR5_PDRC182_Pos        (22U)
#define SERC_ICR5_PDRC182_Msk        (0x1UL << SERC_ICR5_PDRC182_Pos)   /*!< 0x00400000 */
#define SERC_ICR5_PDRC182            SERC_ICR5_PDRC182_Msk
#define SERC_ICR5_PDRC183_Pos        (23U)
#define SERC_ICR5_PDRC183_Msk        (0x1UL << SERC_ICR5_PDRC183_Pos)   /*!< 0x00800000 */
#define SERC_ICR5_PDRC183            SERC_ICR5_PDRC183_Msk
#define SERC_ICR5_PDRC184_Pos        (24U)
#define SERC_ICR5_PDRC184_Msk        (0x1UL << SERC_ICR5_PDRC184_Pos)   /*!< 0x01000000 */
#define SERC_ICR5_PDRC184            SERC_ICR5_PDRC184_Msk
#define SERC_ICR5_PDRC185_Pos        (25U)
#define SERC_ICR5_PDRC185_Msk        (0x1UL << SERC_ICR5_PDRC185_Pos)   /*!< 0x02000000 */
#define SERC_ICR5_PDRC185            SERC_ICR5_PDRC185_Msk
#define SERC_ICR5_PDRC186_Pos        (26U)
#define SERC_ICR5_PDRC186_Msk        (0x1UL << SERC_ICR5_PDRC186_Pos)   /*!< 0x04000000 */
#define SERC_ICR5_PDRC186            SERC_ICR5_PDRC186_Msk
#define SERC_ICR5_PDRC187_Pos        (27U)
#define SERC_ICR5_PDRC187_Msk        (0x1UL << SERC_ICR5_PDRC187_Pos)   /*!< 0x08000000 */
#define SERC_ICR5_PDRC187            SERC_ICR5_PDRC187_Msk
#define SERC_ICR5_PDRC188_Pos        (28U)
#define SERC_ICR5_PDRC188_Msk        (0x1UL << SERC_ICR5_PDRC188_Pos)   /*!< 0x10000000 */
#define SERC_ICR5_PDRC188            SERC_ICR5_PDRC188_Msk
#define SERC_ICR5_PDRC189_Pos        (29U)
#define SERC_ICR5_PDRC189_Msk        (0x1UL << SERC_ICR5_PDRC189_Pos)   /*!< 0x20000000 */
#define SERC_ICR5_PDRC189            SERC_ICR5_PDRC189_Msk
#define SERC_ICR5_PDRC190_Pos        (30U)
#define SERC_ICR5_PDRC190_Msk        (0x1UL << SERC_ICR5_PDRC190_Pos)   /*!< 0x40000000 */
#define SERC_ICR5_PDRC190            SERC_ICR5_PDRC190_Msk
#define SERC_ICR5_PDRC191_Pos        (31U)
#define SERC_ICR5_PDRC191_Msk        (0x1UL << SERC_ICR5_PDRC191_Pos)   /*!< 0x80000000 */
#define SERC_ICR5_PDRC191            SERC_ICR5_PDRC191_Msk

/*****************  Bit definition for SERF_ENABLE register  ******************/
#define SERF_ENABLE_SERFEN_Pos        (0U)
#define SERF_ENABLE_SERFEN_Msk        (0x1UL << SERF_ENABLE_SERFEN_Pos)
#define SERF_ENABLE_SERFEN            SERF_ENABLE_SERFEN_Msk

/******************************************************************************/
/*                                                                            */
/*                              SPDIF-RX Interface                            */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for SPDIF_CR register  ******************/
#define SPDIFRX_CR_SPDIFRXEN_Pos    (0U)
#define SPDIFRX_CR_SPDIFRXEN_Msk    (0x3UL << SPDIFRX_CR_SPDIFRXEN_Pos)        /*!< 0x00000003 */
#define SPDIFRX_CR_SPDIFRXEN        SPDIFRX_CR_SPDIFRXEN_Msk                   /*!<Peripheral Block Enable                      */
#define SPDIFRX_CR_RXDMAEN_Pos      (2U)
#define SPDIFRX_CR_RXDMAEN_Msk      (0x1UL << SPDIFRX_CR_RXDMAEN_Pos)          /*!< 0x00000004 */
#define SPDIFRX_CR_RXDMAEN          SPDIFRX_CR_RXDMAEN_Msk                     /*!<Receiver DMA Enable for data flow            */
#define SPDIFRX_CR_RXSTEO_Pos       (3U)
#define SPDIFRX_CR_RXSTEO_Msk       (0x1UL << SPDIFRX_CR_RXSTEO_Pos)           /*!< 0x00000008 */
#define SPDIFRX_CR_RXSTEO           SPDIFRX_CR_RXSTEO_Msk                      /*!<Stereo Mode                                  */
#define SPDIFRX_CR_DRFMT_Pos        (4U)
#define SPDIFRX_CR_DRFMT_Msk        (0x3UL << SPDIFRX_CR_DRFMT_Pos)            /*!< 0x00000030 */
#define SPDIFRX_CR_DRFMT            SPDIFRX_CR_DRFMT_Msk                       /*!<RX Data format                               */
#define SPDIFRX_CR_PMSK_Pos         (6U)
#define SPDIFRX_CR_PMSK_Msk         (0x1UL << SPDIFRX_CR_PMSK_Pos)             /*!< 0x00000040 */
#define SPDIFRX_CR_PMSK             SPDIFRX_CR_PMSK_Msk                        /*!<Mask Parity error bit                        */
#define SPDIFRX_CR_VMSK_Pos         (7U)
#define SPDIFRX_CR_VMSK_Msk         (0x1UL << SPDIFRX_CR_VMSK_Pos)             /*!< 0x00000080 */
#define SPDIFRX_CR_VMSK             SPDIFRX_CR_VMSK_Msk                        /*!<Mask of Validity bit                         */
#define SPDIFRX_CR_CUMSK_Pos        (8U)
#define SPDIFRX_CR_CUMSK_Msk        (0x1UL << SPDIFRX_CR_CUMSK_Pos)            /*!< 0x00000100 */
#define SPDIFRX_CR_CUMSK            SPDIFRX_CR_CUMSK_Msk                       /*!<Mask of channel status and user bits         */
#define SPDIFRX_CR_PTMSK_Pos        (9U)
#define SPDIFRX_CR_PTMSK_Msk        (0x1UL << SPDIFRX_CR_PTMSK_Pos)            /*!< 0x00000200 */
#define SPDIFRX_CR_PTMSK            SPDIFRX_CR_PTMSK_Msk                       /*!<Mask of Preamble Type bits                   */
#define SPDIFRX_CR_CBDMAEN_Pos      (10U)
#define SPDIFRX_CR_CBDMAEN_Msk      (0x1UL << SPDIFRX_CR_CBDMAEN_Pos)          /*!< 0x00000400 */
#define SPDIFRX_CR_CBDMAEN          SPDIFRX_CR_CBDMAEN_Msk                     /*!<Control Buffer DMA ENable for control flow   */
#define SPDIFRX_CR_CHSEL_Pos        (11U)
#define SPDIFRX_CR_CHSEL_Msk        (0x1UL << SPDIFRX_CR_CHSEL_Pos)            /*!< 0x00000800 */
#define SPDIFRX_CR_CHSEL            SPDIFRX_CR_CHSEL_Msk                       /*!<Channel Selection                            */
#define SPDIFRX_CR_NBTR_Pos         (12U)
#define SPDIFRX_CR_NBTR_Msk         (0x3UL << SPDIFRX_CR_NBTR_Pos)             /*!< 0x00003000 */
#define SPDIFRX_CR_NBTR             SPDIFRX_CR_NBTR_Msk                        /*!<Maximum allowed re-tries during synchronization phase */
#define SPDIFRX_CR_WFA_Pos          (14U)
#define SPDIFRX_CR_WFA_Msk          (0x1UL << SPDIFRX_CR_WFA_Pos)              /*!< 0x00004000 */
#define SPDIFRX_CR_WFA              SPDIFRX_CR_WFA_Msk                         /*!<Wait For Activity     */
#define SPDIFRX_CR_INSEL_Pos        (16U)
#define SPDIFRX_CR_INSEL_Msk        (0x7UL << SPDIFRX_CR_INSEL_Pos)            /*!< 0x00070000 */
#define SPDIFRX_CR_INSEL            SPDIFRX_CR_INSEL_Msk                       /*!<SPDIF input selection */
#define SPDIFRX_CR_CKSEN_Pos        (20U)
#define SPDIFRX_CR_CKSEN_Msk        (0x1UL << SPDIFRX_CR_CKSEN_Pos)            /*!< 0x00100000 */
#define SPDIFRX_CR_CKSEN            SPDIFRX_CR_CKSEN_Msk                       /*!<Symbol Clock Enable */
#define SPDIFRX_CR_CKSBKPEN_Pos     (21U)
#define SPDIFRX_CR_CKSBKPEN_Msk     (0x1UL << SPDIFRX_CR_CKSBKPEN_Pos)         /*!< 0x00200000 */
#define SPDIFRX_CR_CKSBKPEN         SPDIFRX_CR_CKSBKPEN_Msk                    /*!<Backup Symbol Clock Enable */

/*******************  Bit definition for SPDIFRX_IMR register  *******************/
#define SPDIFRX_IMR_RXNEIE_Pos      (0U)
#define SPDIFRX_IMR_RXNEIE_Msk      (0x1UL << SPDIFRX_IMR_RXNEIE_Pos)          /*!< 0x00000001 */
#define SPDIFRX_IMR_RXNEIE          SPDIFRX_IMR_RXNEIE_Msk                     /*!<RXNE interrupt enable                              */
#define SPDIFRX_IMR_CSRNEIE_Pos     (1U)
#define SPDIFRX_IMR_CSRNEIE_Msk     (0x1UL << SPDIFRX_IMR_CSRNEIE_Pos)         /*!< 0x00000002 */
#define SPDIFRX_IMR_CSRNEIE         SPDIFRX_IMR_CSRNEIE_Msk                    /*!<Control Buffer Ready Interrupt Enable              */
#define SPDIFRX_IMR_PERRIE_Pos      (2U)
#define SPDIFRX_IMR_PERRIE_Msk      (0x1UL << SPDIFRX_IMR_PERRIE_Pos)          /*!< 0x00000004 */
#define SPDIFRX_IMR_PERRIE          SPDIFRX_IMR_PERRIE_Msk                     /*!<Parity error interrupt enable                      */
#define SPDIFRX_IMR_OVRIE_Pos       (3U)
#define SPDIFRX_IMR_OVRIE_Msk       (0x1UL << SPDIFRX_IMR_OVRIE_Pos)           /*!< 0x00000008 */
#define SPDIFRX_IMR_OVRIE           SPDIFRX_IMR_OVRIE_Msk                      /*!<Overrun error Interrupt Enable                     */
#define SPDIFRX_IMR_SBLKIE_Pos      (4U)
#define SPDIFRX_IMR_SBLKIE_Msk      (0x1UL << SPDIFRX_IMR_SBLKIE_Pos)          /*!< 0x00000010 */
#define SPDIFRX_IMR_SBLKIE          SPDIFRX_IMR_SBLKIE_Msk                     /*!<Synchronization Block Detected Interrupt Enable    */
#define SPDIFRX_IMR_SYNCDIE_Pos     (5U)
#define SPDIFRX_IMR_SYNCDIE_Msk     (0x1UL << SPDIFRX_IMR_SYNCDIE_Pos)         /*!< 0x00000020 */
#define SPDIFRX_IMR_SYNCDIE         SPDIFRX_IMR_SYNCDIE_Msk                    /*!<Synchronization Done                               */
#define SPDIFRX_IMR_IFEIE_Pos       (6U)
#define SPDIFRX_IMR_IFEIE_Msk       (0x1UL << SPDIFRX_IMR_IFEIE_Pos)           /*!< 0x00000040 */
#define SPDIFRX_IMR_IFEIE           SPDIFRX_IMR_IFEIE_Msk                      /*!<Serial Interface Error Interrupt Enable            */

/*******************  Bit definition for SPDIFRX_SR register  *******************/
#define SPDIFRX_SR_RXNE_Pos         (0U)
#define SPDIFRX_SR_RXNE_Msk         (0x1UL << SPDIFRX_SR_RXNE_Pos)             /*!< 0x00000001 */
#define SPDIFRX_SR_RXNE             SPDIFRX_SR_RXNE_Msk                        /*!<Read data register not empty                          */
#define SPDIFRX_SR_CSRNE_Pos        (1U)
#define SPDIFRX_SR_CSRNE_Msk        (0x1UL << SPDIFRX_SR_CSRNE_Pos)            /*!< 0x00000002 */
#define SPDIFRX_SR_CSRNE            SPDIFRX_SR_CSRNE_Msk                       /*!<The Control Buffer register is not empty              */
#define SPDIFRX_SR_PERR_Pos         (2U)
#define SPDIFRX_SR_PERR_Msk         (0x1UL << SPDIFRX_SR_PERR_Pos)             /*!< 0x00000004 */
#define SPDIFRX_SR_PERR             SPDIFRX_SR_PERR_Msk                        /*!<Parity error                                          */
#define SPDIFRX_SR_OVR_Pos          (3U)
#define SPDIFRX_SR_OVR_Msk          (0x1UL << SPDIFRX_SR_OVR_Pos)              /*!< 0x00000008 */
#define SPDIFRX_SR_OVR              SPDIFRX_SR_OVR_Msk                         /*!<Overrun error                                         */
#define SPDIFRX_SR_SBD_Pos          (4U)
#define SPDIFRX_SR_SBD_Msk          (0x1UL << SPDIFRX_SR_SBD_Pos)              /*!< 0x00000010 */
#define SPDIFRX_SR_SBD              SPDIFRX_SR_SBD_Msk                         /*!<Synchronization Block Detected                        */
#define SPDIFRX_SR_SYNCD_Pos        (5U)
#define SPDIFRX_SR_SYNCD_Msk        (0x1UL << SPDIFRX_SR_SYNCD_Pos)            /*!< 0x00000020 */
#define SPDIFRX_SR_SYNCD            SPDIFRX_SR_SYNCD_Msk                       /*!<Synchronization Done                                  */
#define SPDIFRX_SR_FERR_Pos         (6U)
#define SPDIFRX_SR_FERR_Msk         (0x1UL << SPDIFRX_SR_FERR_Pos)             /*!< 0x00000040 */
#define SPDIFRX_SR_FERR             SPDIFRX_SR_FERR_Msk                        /*!<Framing error                                         */
#define SPDIFRX_SR_SERR_Pos         (7U)
#define SPDIFRX_SR_SERR_Msk         (0x1UL << SPDIFRX_SR_SERR_Pos)             /*!< 0x00000080 */
#define SPDIFRX_SR_SERR             SPDIFRX_SR_SERR_Msk                        /*!<Synchronization error                                 */
#define SPDIFRX_SR_TERR_Pos         (8U)
#define SPDIFRX_SR_TERR_Msk         (0x1UL << SPDIFRX_SR_TERR_Pos)             /*!< 0x00000100 */
#define SPDIFRX_SR_TERR             SPDIFRX_SR_TERR_Msk                        /*!<Time-out error                                        */
#define SPDIFRX_SR_WIDTH5_Pos       (16U)
#define SPDIFRX_SR_WIDTH5_Msk       (0x7FFFUL << SPDIFRX_SR_WIDTH5_Pos)        /*!< 0x7FFF0000 */
#define SPDIFRX_SR_WIDTH5           SPDIFRX_SR_WIDTH5_Msk                      /*!<Duration of 5 symbols counted with spdif_clk          */

/*******************  Bit definition for SPDIFRX_IFCR register  *******************/
#define SPDIFRX_IFCR_PERRCF_Pos     (2U)
#define SPDIFRX_IFCR_PERRCF_Msk     (0x1UL << SPDIFRX_IFCR_PERRCF_Pos)         /*!< 0x00000004 */
#define SPDIFRX_IFCR_PERRCF         SPDIFRX_IFCR_PERRCF_Msk                    /*!<Clears the Parity error flag                         */
#define SPDIFRX_IFCR_OVRCF_Pos      (3U)
#define SPDIFRX_IFCR_OVRCF_Msk      (0x1UL << SPDIFRX_IFCR_OVRCF_Pos)          /*!< 0x00000008 */
#define SPDIFRX_IFCR_OVRCF          SPDIFRX_IFCR_OVRCF_Msk                     /*!<Clears the Overrun error flag                        */
#define SPDIFRX_IFCR_SBDCF_Pos      (4U)
#define SPDIFRX_IFCR_SBDCF_Msk      (0x1UL << SPDIFRX_IFCR_SBDCF_Pos)          /*!< 0x00000010 */
#define SPDIFRX_IFCR_SBDCF          SPDIFRX_IFCR_SBDCF_Msk                     /*!<Clears the Synchronization Block Detected flag       */
#define SPDIFRX_IFCR_SYNCDCF_Pos    (5U)
#define SPDIFRX_IFCR_SYNCDCF_Msk    (0x1UL << SPDIFRX_IFCR_SYNCDCF_Pos)        /*!< 0x00000020 */
#define SPDIFRX_IFCR_SYNCDCF        SPDIFRX_IFCR_SYNCDCF_Msk                   /*!<Clears the Synchronization Done flag                 */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b00 case) *******************/
#define SPDIFRX_DR0_DR_Pos          (0U)
#define SPDIFRX_DR0_DR_Msk          (0xFFFFFFUL << SPDIFRX_DR0_DR_Pos)         /*!< 0x00FFFFFF */
#define SPDIFRX_DR0_DR              SPDIFRX_DR0_DR_Msk                         /*!<Data value            */
#define SPDIFRX_DR0_PE_Pos          (24U)
#define SPDIFRX_DR0_PE_Msk          (0x1UL << SPDIFRX_DR0_PE_Pos)              /*!< 0x01000000 */
#define SPDIFRX_DR0_PE              SPDIFRX_DR0_PE_Msk                         /*!<Parity Error bit      */
#define SPDIFRX_DR0_V_Pos           (25U)
#define SPDIFRX_DR0_V_Msk           (0x1UL << SPDIFRX_DR0_V_Pos)               /*!< 0x02000000 */
#define SPDIFRX_DR0_V               SPDIFRX_DR0_V_Msk                          /*!<Validity bit          */
#define SPDIFRX_DR0_U_Pos           (26U)
#define SPDIFRX_DR0_U_Msk           (0x1UL << SPDIFRX_DR0_U_Pos)               /*!< 0x04000000 */
#define SPDIFRX_DR0_U               SPDIFRX_DR0_U_Msk                          /*!<User bit              */
#define SPDIFRX_DR0_C_Pos           (27U)
#define SPDIFRX_DR0_C_Msk           (0x1UL << SPDIFRX_DR0_C_Pos)               /*!< 0x08000000 */
#define SPDIFRX_DR0_C               SPDIFRX_DR0_C_Msk                          /*!<Channel Status bit    */
#define SPDIFRX_DR0_PT_Pos          (28U)
#define SPDIFRX_DR0_PT_Msk          (0x3UL << SPDIFRX_DR0_PT_Pos)              /*!< 0x30000000 */
#define SPDIFRX_DR0_PT              SPDIFRX_DR0_PT_Msk                         /*!<Preamble Type         */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b01 case) *******************/
#define SPDIFRX_DR1_DR_Pos          (8U)
#define SPDIFRX_DR1_DR_Msk          (0xFFFFFFUL << SPDIFRX_DR1_DR_Pos)         /*!< 0xFFFFFF00 */
#define SPDIFRX_DR1_DR              SPDIFRX_DR1_DR_Msk                         /*!<Data value            */
#define SPDIFRX_DR1_PT_Pos          (4U)
#define SPDIFRX_DR1_PT_Msk          (0x3UL << SPDIFRX_DR1_PT_Pos)              /*!< 0x00000030 */
#define SPDIFRX_DR1_PT              SPDIFRX_DR1_PT_Msk                         /*!<Preamble Type         */
#define SPDIFRX_DR1_C_Pos           (3U)
#define SPDIFRX_DR1_C_Msk           (0x1UL << SPDIFRX_DR1_C_Pos)               /*!< 0x00000008 */
#define SPDIFRX_DR1_C               SPDIFRX_DR1_C_Msk                          /*!<Channel Status bit    */
#define SPDIFRX_DR1_U_Pos           (2U)
#define SPDIFRX_DR1_U_Msk           (0x1UL << SPDIFRX_DR1_U_Pos)               /*!< 0x00000004 */
#define SPDIFRX_DR1_U               SPDIFRX_DR1_U_Msk                          /*!<User bit              */
#define SPDIFRX_DR1_V_Pos           (1U)
#define SPDIFRX_DR1_V_Msk           (0x1UL << SPDIFRX_DR1_V_Pos)               /*!< 0x00000002 */
#define SPDIFRX_DR1_V               SPDIFRX_DR1_V_Msk                          /*!<Validity bit          */
#define SPDIFRX_DR1_PE_Pos          (0U)
#define SPDIFRX_DR1_PE_Msk          (0x1UL << SPDIFRX_DR1_PE_Pos)              /*!< 0x00000001 */
#define SPDIFRX_DR1_PE              SPDIFRX_DR1_PE_Msk                         /*!<Parity Error bit      */

/*******************  Bit definition for SPDIFRX_DR register  (DRFMT = 0b10 case) *******************/
#define SPDIFRX_DR1_DRNL1_Pos       (16U)
#define SPDIFRX_DR1_DRNL1_Msk       (0xFFFFUL << SPDIFRX_DR1_DRNL1_Pos)        /*!< 0xFFFF0000 */
#define SPDIFRX_DR1_DRNL1           SPDIFRX_DR1_DRNL1_Msk                      /*!<Data value Channel B      */
#define SPDIFRX_DR1_DRNL2_Pos       (0U)
#define SPDIFRX_DR1_DRNL2_Msk       (0xFFFFUL << SPDIFRX_DR1_DRNL2_Pos)        /*!< 0x0000FFFF */
#define SPDIFRX_DR1_DRNL2           SPDIFRX_DR1_DRNL2_Msk                      /*!<Data value Channel A      */

/*******************  Bit definition for SPDIFRX_CSR register   *******************/
#define SPDIFRX_CSR_USR_Pos         (0U)
#define SPDIFRX_CSR_USR_Msk         (0xFFFFUL << SPDIFRX_CSR_USR_Pos)          /*!< 0x0000FFFF */
#define SPDIFRX_CSR_USR             SPDIFRX_CSR_USR_Msk                        /*!<User data information           */
#define SPDIFRX_CSR_CS_Pos          (16U)
#define SPDIFRX_CSR_CS_Msk          (0xFFUL << SPDIFRX_CSR_CS_Pos)             /*!< 0x00FF0000 */
#define SPDIFRX_CSR_CS              SPDIFRX_CSR_CS_Msk                         /*!<Channel A status information    */
#define SPDIFRX_CSR_SOB_Pos         (24U)
#define SPDIFRX_CSR_SOB_Msk         (0x1UL << SPDIFRX_CSR_SOB_Pos)             /*!< 0x01000000 */
#define SPDIFRX_CSR_SOB             SPDIFRX_CSR_SOB_Msk                        /*!<Start Of Block                  */

/*******************  Bit definition for SPDIFRX_DIR register    *******************/
#define SPDIFRX_DIR_THI_Pos         (0U)
#define SPDIFRX_DIR_THI_Msk         (0x1FFFUL << SPDIFRX_DIR_THI_Pos)          /*!< 0x00001FFF */
#define SPDIFRX_DIR_THI             SPDIFRX_DIR_THI_Msk                        /*!<Threshold LOW      */
#define SPDIFRX_DIR_TLO_Pos         (16U)
#define SPDIFRX_DIR_TLO_Msk         (0x1FFFUL << SPDIFRX_DIR_TLO_Pos)          /*!< 0x1FFF0000 */
#define SPDIFRX_DIR_TLO             SPDIFRX_DIR_TLO_Msk                        /*!<Threshold HIGH     */

/*******************  Bit definition for SPDIFRX_VERR register    *******************/
#define SPDIFRX_VERR_MINREV_Pos     (0U)
#define SPDIFRX_VERR_MINREV_Msk     (0xFUL << SPDIFRX_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define SPDIFRX_VERR_MINREV         SPDIFRX_VERR_MINREV_Msk                    /*!<SPDIFRX Minor revision     */
#define SPDIFRX_VERR_MAJREV_Pos     (4U)
#define SPDIFRX_VERR_MAJREV_Msk     (0xFUL << SPDIFRX_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define SPDIFRX_VERR_MAJREV         SPDIFRX_VERR_MAJREV_Msk                    /*!<SPDIFRX Major revision     */

/*******************  Bit definition for SPDIFRX_IDR register    *******************/
#define SPDIFRX_IDR_ID_Pos          (0U)
#define SPDIFRX_IDR_ID_Msk          (0xFFFFFFFFUL << SPDIFRX_IDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define SPDIFRX_IDR_ID              SPDIFRX_IDR_ID_Msk                         /*!<SPDIFRX identifier     */

/*******************  Bit definition for SPDIFRX_SIDR register    *******************/
#define SPDIFRX_SIDR_SID_Pos        (0U)
#define SPDIFRX_SIDR_SID_Msk        (0xFFFFFFFFUL << SPDIFRX_SIDR_SID_Pos)     /*!< 0xFFFFFFFF */
#define SPDIFRX_SIDR_SID            SPDIFRX_SIDR_SID_Msk                       /*!<Size of the memory region allocated to SPDIFRX registers */

/**********************************************************************************/
/*                                                                                */
/*     Serial Peripheral Interface and Integrated Interchip Sound  (SPI/I2S)      */
/*                                                                                */
/**********************************************************************************/
/********************  Bits definition for SPI_CR1 register      ******************/
#define SPI_CR1_SPE_Pos                     (0U)
#define SPI_CR1_SPE_Msk                     (0x1UL << SPI_CR1_SPE_Pos)              /*!< 0x00000001 */
#define SPI_CR1_SPE                         SPI_CR1_SPE_Msk                         /*!<Serial Peripheral Enable */
#define SPI_CR1_MASRX_Pos                   (8U)
#define SPI_CR1_MASRX_Msk                   (0x1UL << SPI_CR1_MASRX_Pos)            /*!< 0x00000100 */
#define SPI_CR1_MASRX                       SPI_CR1_MASRX_Msk                       /*!<Master automatic suspension in Receive mode */
#define SPI_CR1_CSTART_Pos                  (9U)
#define SPI_CR1_CSTART_Msk                  (0x1UL << SPI_CR1_CSTART_Pos)           /*!< 0x00000200 */
#define SPI_CR1_CSTART                      SPI_CR1_CSTART_Msk                      /*!<Master transfer start  */
#define SPI_CR1_CSUSP_Pos                   (10U)
#define SPI_CR1_CSUSP_Msk                   (0x1UL << SPI_CR1_CSUSP_Pos)            /*!< 0x00000400 */
#define SPI_CR1_CSUSP                       SPI_CR1_CSUSP_Msk                       /*!<Master SUSPend request */
#define SPI_CR1_HDDIR_Pos                   (11U)
#define SPI_CR1_HDDIR_Msk                   (0x1UL << SPI_CR1_HDDIR_Pos)            /*!< 0x00000800 */
#define SPI_CR1_HDDIR                       SPI_CR1_HDDIR_Msk                       /*!<Rx/Tx direction at Half-duplex mode */
#define SPI_CR1_SSI_Pos                     (12U)
#define SPI_CR1_SSI_Msk                     (0x1UL << SPI_CR1_SSI_Pos)              /*!< 0x00001000 */
#define SPI_CR1_SSI                         SPI_CR1_SSI_Msk                         /*!<Internal SS signal input level */
#define SPI_CR1_CRC33_17_Pos                (13U)
#define SPI_CR1_CRC33_17_Msk                (0x1UL << SPI_CR1_CRC33_17_Pos)         /*!< 0x00002000 */
#define SPI_CR1_CRC33_17                    SPI_CR1_CRC33_17_Msk                    /*!<32-bit CRC polynomial configuration */
#define SPI_CR1_RCRCINI_Pos                 (14U)
#define SPI_CR1_RCRCINI_Msk                 (0x1UL << SPI_CR1_RCRCINI_Pos)          /*!< 0x00004000 */
#define SPI_CR1_RCRCINI                     SPI_CR1_RCRCINI_Msk                     /*!<CRC calculation initialization pattern control for receiver */
#define SPI_CR1_TCRCINI_Pos                 (15U)
#define SPI_CR1_TCRCINI_Msk                 (0x1UL << SPI_CR1_TCRCINI_Pos)          /*!< 0x00008000 */
#define SPI_CR1_TCRCINI                     SPI_CR1_TCRCINI_Msk                     /*!<CRC calculation initialization pattern control for transmitter */
#define SPI_CR1_IOLOCK_Pos                  (16U)
#define SPI_CR1_IOLOCK_Msk                  (0x1UL << SPI_CR1_IOLOCK_Pos)           /*!< 0x00010000 */
#define SPI_CR1_IOLOCK                      SPI_CR1_IOLOCK_Msk                      /*!<Locking the AF configuration of associated IOs */

/********************  Bits definition for SPI_CR2 register      ******************/
#define SPI_CR2_TSIZE_Pos                   (0U)
#define SPI_CR2_TSIZE_Msk                   (0xFFFFUL << SPI_CR2_TSIZE_Pos)         /*!< 0x0000FFFF */
#define SPI_CR2_TSIZE                       SPI_CR2_TSIZE_Msk                       /*!<Number of data at current transfer */

/********************  Bits definition for SPI_CFG1 register     ******************/
#define SPI_CFG1_DSIZE_Pos                  (0U)
#define SPI_CFG1_DSIZE_Msk                  (0x1FUL << SPI_CFG1_DSIZE_Pos)          /*!< 0x0000001F */
#define SPI_CFG1_DSIZE                      SPI_CFG1_DSIZE_Msk                      /*!<DSIZE[4:0]: Bits number in single SPI data frame */
#define SPI_CFG1_DSIZE_0                    (0x01UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000001 */
#define SPI_CFG1_DSIZE_1                    (0x02UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000002 */
#define SPI_CFG1_DSIZE_2                    (0x04UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000004 */
#define SPI_CFG1_DSIZE_3                    (0x08UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000008 */
#define SPI_CFG1_DSIZE_4                    (0x10UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000010 */
#define SPI_CFG1_FTHLV_Pos                  (5U)
#define SPI_CFG1_FTHLV_Msk                  (0xFUL << SPI_CFG1_FTHLV_Pos)           /*!< 0x000001E0 */
#define SPI_CFG1_FTHLV                      SPI_CFG1_FTHLV_Msk                      /*!<FTHVL [3:0]: FIFO threshold level */
#define SPI_CFG1_FTHLV_0                    (0x1UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000020 */
#define SPI_CFG1_FTHLV_1                    (0x2UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000040 */
#define SPI_CFG1_FTHLV_2                    (0x4UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000080 */
#define SPI_CFG1_FTHLV_3                    (0x8UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000100 */
#define SPI_CFG1_UDRCFG_Pos                 (9U)
#define SPI_CFG1_UDRCFG_Msk                 (0x1UL << SPI_CFG1_UDRCFG_Pos)          /*!< 0x00000600 */
#define SPI_CFG1_UDRCFG                     SPI_CFG1_UDRCFG_Msk                     /*!<Behavior of Slave transmitter at underrun condition */
#define SPI_CFG1_RXDMAEN_Pos                (14U)
#define SPI_CFG1_RXDMAEN_Msk                (0x1UL << SPI_CFG1_RXDMAEN_Pos)         /*!< 0x00004000 */
#define SPI_CFG1_RXDMAEN                    SPI_CFG1_RXDMAEN_Msk                    /*!<Rx DMA stream enable */
#define SPI_CFG1_TXDMAEN_Pos                (15U)
#define SPI_CFG1_TXDMAEN_Msk                (0x1UL << SPI_CFG1_TXDMAEN_Pos)         /*!< 0x00008000 */
#define SPI_CFG1_TXDMAEN                    SPI_CFG1_TXDMAEN_Msk                    /*!<Tx DMA stream enable */
#define SPI_CFG1_CRCSIZE_Pos                (16U)
#define SPI_CFG1_CRCSIZE_Msk                (0x1FUL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x001F0000 */
#define SPI_CFG1_CRCSIZE                    SPI_CFG1_CRCSIZE_Msk                    /*!<CRCSIZE [4:0]: Length of CRC frame to be transacted and compared */
#define SPI_CFG1_CRCSIZE_0                  (0x01UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00010000 */
#define SPI_CFG1_CRCSIZE_1                  (0x02UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00020000 */
#define SPI_CFG1_CRCSIZE_2                  (0x04UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00040000 */
#define SPI_CFG1_CRCSIZE_3                  (0x08UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00080000 */
#define SPI_CFG1_CRCSIZE_4                  (0x10UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00100000 */
#define SPI_CFG1_CRCEN_Pos                  (22U)
#define SPI_CFG1_CRCEN_Msk                  (0x1UL << SPI_CFG1_CRCEN_Pos)           /*!< 0x00400000 */
#define SPI_CFG1_CRCEN                      SPI_CFG1_CRCEN_Msk                      /*!<Hardware CRC computation enable */
#define SPI_CFG1_MBR_Pos                    (28U)
#define SPI_CFG1_MBR_Msk                    (0x7UL << SPI_CFG1_MBR_Pos)             /*!< 0x70000000 */
#define SPI_CFG1_MBR                        SPI_CFG1_MBR_Msk                        /*!<Master baud rate prescaler setting*/
#define SPI_CFG1_MBR_0                      (0x1UL << SPI_CFG1_MBR_Pos)             /*!< 0x10000000 */
#define SPI_CFG1_MBR_1                      (0x2UL << SPI_CFG1_MBR_Pos)             /*!< 0x20000000 */
#define SPI_CFG1_MBR_2                      (0x4UL << SPI_CFG1_MBR_Pos)             /*!< 0x40000000 */
#define SPI_CFG1_BPASS_Pos                  (31U)
#define SPI_CFG1_BPASS_Msk                  (0x1UL << SPI_CFG1_BPASS_Pos)           /*!< 0x80000000 */
#define SPI_CFG1_BPASS                      SPI_CFG1_BPASS_Msk                      /*!<Bypass of the prescaler at master baud rate clock generator */

/********************  Bits definition for SPI_CFG2 register     ******************/
#define SPI_CFG2_MSSI_Pos                   (0U)
#define SPI_CFG2_MSSI_Msk                   (0xFUL << SPI_CFG2_MSSI_Pos)            /*!< 0x0000000F */
#define SPI_CFG2_MSSI                       SPI_CFG2_MSSI_Msk                       /*!<Master SS Idleness */
#define SPI_CFG2_MSSI_0                     (0x1UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000001 */
#define SPI_CFG2_MSSI_1                     (0x2UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000002 */
#define SPI_CFG2_MSSI_2                     (0x4UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000004 */
#define SPI_CFG2_MSSI_3                     (0x8UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000008 */
#define SPI_CFG2_MIDI_Pos                   (4U)
#define SPI_CFG2_MIDI_Msk                   (0xFUL << SPI_CFG2_MIDI_Pos)            /*!< 0x000000F0 */
#define SPI_CFG2_MIDI                       SPI_CFG2_MIDI_Msk                       /*!<Master Inter-Data Idleness */
#define SPI_CFG2_MIDI_0                     (0x1UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000010 */
#define SPI_CFG2_MIDI_1                     (0x2UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000020 */
#define SPI_CFG2_MIDI_2                     (0x4UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000040 */
#define SPI_CFG2_MIDI_3                     (0x8UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000080 */
#define SPI_CFG2_RDIMM_Pos                  (13U)
#define SPI_CFG2_RDIMM_Msk                  (0x1UL << SPI_CFG2_RDIMM_Pos)           /*!< 0x00002000 */
#define SPI_CFG2_RDIMM                      SPI_CFG2_RDIMM_Msk                      /*!<RDY signal input master management */
#define SPI_CFG2_RDIOP_Pos                  (14U)
#define SPI_CFG2_RDIOP_Msk                  (0x1UL << SPI_CFG2_RDIOP_Pos)           /*!< 0x00004000 */
#define SPI_CFG2_RDIOP                      SPI_CFG2_RDIOP_Msk                      /*!<RDY signal input/output polarity */
#define SPI_CFG2_IOSWP_Pos                  (15U)
#define SPI_CFG2_IOSWP_Msk                  (0x1UL << SPI_CFG2_IOSWP_Pos)           /*!< 0x00008000 */
#define SPI_CFG2_IOSWP                      SPI_CFG2_IOSWP_Msk                      /*!<Swap functionality of MISO and MOSI pins */
#define SPI_CFG2_COMM_Pos                   (17U)
#define SPI_CFG2_COMM_Msk                   (0x3UL << SPI_CFG2_COMM_Pos)            /*!< 0x00060000 */
#define SPI_CFG2_COMM                       SPI_CFG2_COMM_Msk                       /*!<COMM [1:0]: SPI Communication Mode*/
#define SPI_CFG2_COMM_0                     (0x1UL << SPI_CFG2_COMM_Pos)            /*!< 0x00020000 */
#define SPI_CFG2_COMM_1                     (0x2UL << SPI_CFG2_COMM_Pos)            /*!< 0x00040000 */
#define SPI_CFG2_SP_Pos                     (19U)
#define SPI_CFG2_SP_Msk                     (0x7UL << SPI_CFG2_SP_Pos)              /*!< 0x00380000 */
#define SPI_CFG2_SP                         SPI_CFG2_SP_Msk                         /*!<SP[2:0]: Serial Protocol */
#define SPI_CFG2_SP_0                       (0x1UL << SPI_CFG2_SP_Pos)              /*!< 0x00080000 */
#define SPI_CFG2_SP_1                       (0x2UL << SPI_CFG2_SP_Pos)              /*!< 0x00100000 */
#define SPI_CFG2_SP_2                       (0x4UL << SPI_CFG2_SP_Pos)              /*!< 0x00200000 */
#define SPI_CFG2_MASTER_Pos                 (22U)
#define SPI_CFG2_MASTER_Msk                 (0x1UL << SPI_CFG2_MASTER_Pos)          /*!< 0x00400000 */
#define SPI_CFG2_MASTER                     SPI_CFG2_MASTER_Msk                     /*!<SPI Master */
#define SPI_CFG2_LSBFRST_Pos                (23U)
#define SPI_CFG2_LSBFRST_Msk                (0x1UL << SPI_CFG2_LSBFRST_Pos)         /*!< 0x00800000 */
#define SPI_CFG2_LSBFRST                    SPI_CFG2_LSBFRST_Msk                    /*!<Data frame format */
#define SPI_CFG2_CPHA_Pos                   (24U)
#define SPI_CFG2_CPHA_Msk                   (0x1UL << SPI_CFG2_CPHA_Pos)            /*!< 0x01000000 */
#define SPI_CFG2_CPHA                       SPI_CFG2_CPHA_Msk                       /*!<Clock Phase */
#define SPI_CFG2_CPOL_Pos                   (25U)
#define SPI_CFG2_CPOL_Msk                   (0x1UL << SPI_CFG2_CPOL_Pos)            /*!< 0x02000000 */
#define SPI_CFG2_CPOL                       SPI_CFG2_CPOL_Msk                       /*!<Clock Polarity */
#define SPI_CFG2_SSM_Pos                    (26U)
#define SPI_CFG2_SSM_Msk                    (0x1UL << SPI_CFG2_SSM_Pos)             /*!< 0x04000000 */
#define SPI_CFG2_SSM                        SPI_CFG2_SSM_Msk                        /*!<Software management of SS signal input */
#define SPI_CFG2_SSIOP_Pos                  (28U)
#define SPI_CFG2_SSIOP_Msk                  (0x1UL << SPI_CFG2_SSIOP_Pos)           /*!< 0x10000000 */
#define SPI_CFG2_SSIOP                      SPI_CFG2_SSIOP_Msk                      /*!<SS input/output polarity */
#define SPI_CFG2_SSOE_Pos                   (29U)
#define SPI_CFG2_SSOE_Msk                   (0x1UL << SPI_CFG2_SSOE_Pos)            /*!< 0x20000000 */
#define SPI_CFG2_SSOE                       SPI_CFG2_SSOE_Msk                       /*!<SS output enable */
#define SPI_CFG2_SSOM_Pos                   (30U)
#define SPI_CFG2_SSOM_Msk                   (0x1UL << SPI_CFG2_SSOM_Pos)            /*!< 0x40000000 */
#define SPI_CFG2_SSOM                       SPI_CFG2_SSOM_Msk                       /*!<SS output management in master mode */
#define SPI_CFG2_AFCNTR_Pos                 (31U)
#define SPI_CFG2_AFCNTR_Msk                 (0x1UL << SPI_CFG2_AFCNTR_Pos)          /*!< 0x80000000 */
#define SPI_CFG2_AFCNTR                     SPI_CFG2_AFCNTR_Msk                     /*!<Alternate function GPIOs control */

/********************  Bits definition for SPI_IER register      ******************/
#define SPI_IER_RXPIE_Pos                   (0U)
#define SPI_IER_RXPIE_Msk                   (0x1UL << SPI_IER_RXPIE_Pos)            /*!< 0x00000001 */
#define SPI_IER_RXPIE                       SPI_IER_RXPIE_Msk                       /*!<RXP Interrupt Enable */
#define SPI_IER_TXPIE_Pos                   (1U)
#define SPI_IER_TXPIE_Msk                   (0x1UL << SPI_IER_TXPIE_Pos)            /*!< 0x00000002 */
#define SPI_IER_TXPIE                       SPI_IER_TXPIE_Msk                       /*!<TXP interrupt enable */
#define SPI_IER_DXPIE_Pos                   (2U)
#define SPI_IER_DXPIE_Msk                   (0x1UL << SPI_IER_DXPIE_Pos)            /*!< 0x00000004 */
#define SPI_IER_DXPIE                       SPI_IER_DXPIE_Msk                       /*!<DXP interrupt enable */
#define SPI_IER_EOTIE_Pos                   (3U)
#define SPI_IER_EOTIE_Msk                   (0x1UL << SPI_IER_EOTIE_Pos)            /*!< 0x00000008 */
#define SPI_IER_EOTIE                       SPI_IER_EOTIE_Msk                       /*!<EOT/SUSP/TXC interrupt enable */
#define SPI_IER_TXTFIE_Pos                  (4U)
#define SPI_IER_TXTFIE_Msk                  (0x1UL << SPI_IER_TXTFIE_Pos)           /*!< 0x00000010 */
#define SPI_IER_TXTFIE                      SPI_IER_TXTFIE_Msk                      /*!<TXTF interrupt enable */
#define SPI_IER_UDRIE_Pos                   (5U)
#define SPI_IER_UDRIE_Msk                   (0x1UL << SPI_IER_UDRIE_Pos)            /*!< 0x00000020 */
#define SPI_IER_UDRIE                       SPI_IER_UDRIE_Msk                       /*!<UDR interrupt enable */
#define SPI_IER_OVRIE_Pos                   (6U)
#define SPI_IER_OVRIE_Msk                   (0x1UL << SPI_IER_OVRIE_Pos)            /*!< 0x00000040 */
#define SPI_IER_OVRIE                       SPI_IER_OVRIE_Msk                       /*!<OVR interrupt enable */
#define SPI_IER_CRCEIE_Pos                  (7U)
#define SPI_IER_CRCEIE_Msk                  (0x1UL << SPI_IER_CRCEIE_Pos)           /*!< 0x00000080 */
#define SPI_IER_CRCEIE                      SPI_IER_CRCEIE_Msk                      /*!<CRC error interrupt enable */
#define SPI_IER_TIFREIE_Pos                 (8U)
#define SPI_IER_TIFREIE_Msk                 (0x1UL << SPI_IER_TIFREIE_Pos)          /*!< 0x00000100 */
#define SPI_IER_TIFREIE                     SPI_IER_TIFREIE_Msk                     /*!<TI Frame Error interrupt enable */
#define SPI_IER_MODFIE_Pos                  (9U)
#define SPI_IER_MODFIE_Msk                  (0x1UL << SPI_IER_MODFIE_Pos)           /*!< 0x00000200 */
#define SPI_IER_MODFIE                      SPI_IER_MODFIE_Msk                      /*!<Mode Fault interrupt enable */

/********************  Bits definition for SPI_SR register       ******************/
#define SPI_SR_RXP_Pos                      (0U)
#define SPI_SR_RXP_Msk                      (0x1UL << SPI_SR_RXP_Pos)               /*!< 0x00000001 */
#define SPI_SR_RXP                          SPI_SR_RXP_Msk                          /*!<Rx-Packet available */
#define SPI_SR_TXP_Pos                      (1U)
#define SPI_SR_TXP_Msk                      (0x1UL << SPI_SR_TXP_Pos)               /*!< 0x00000002 */
#define SPI_SR_TXP                          SPI_SR_TXP_Msk                          /*!<Tx-Packet space available */
#define SPI_SR_DXP_Pos                      (2U)
#define SPI_SR_DXP_Msk                      (0x1UL << SPI_SR_DXP_Pos)               /*!< 0x00000004 */
#define SPI_SR_DXP                          SPI_SR_DXP_Msk                          /*!<Duplex Packet available */
#define SPI_SR_EOT_Pos                      (3U)
#define SPI_SR_EOT_Msk                      (0x1UL << SPI_SR_EOT_Pos)               /*!< 0x00000008 */
#define SPI_SR_EOT                          SPI_SR_EOT_Msk                          /*!<End of transfer */
#define SPI_SR_TXTF_Pos                     (4U)
#define SPI_SR_TXTF_Msk                     (0x1UL << SPI_SR_TXTF_Pos)              /*!< 0x00000010 */
#define SPI_SR_TXTF                         SPI_SR_TXTF_Msk                         /*!<Transmission Transfer Filled */
#define SPI_SR_UDR_Pos                      (5U)
#define SPI_SR_UDR_Msk                      (0x1UL << SPI_SR_UDR_Pos)               /*!< 0x00000020 */
#define SPI_SR_UDR                          SPI_SR_UDR_Msk                          /*!<Underrun at Slave transmission mode*/
#define SPI_SR_OVR_Pos                      (6U)
#define SPI_SR_OVR_Msk                      (0x1UL << SPI_SR_OVR_Pos)               /*!< 0x00000040 */
#define SPI_SR_OVR                          SPI_SR_OVR_Msk                          /*!<Overrun Error Detected */
#define SPI_SR_CRCE_Pos                     (7U)
#define SPI_SR_CRCE_Msk                     (0x1UL << SPI_SR_CRCE_Pos)              /*!< 0x00000080 */
#define SPI_SR_CRCE                         SPI_SR_CRCE_Msk                         /*!<CRC Error Detected */
#define SPI_SR_TIFRE_Pos                    (8U)
#define SPI_SR_TIFRE_Msk                    (0x1UL << SPI_SR_TIFRE_Pos)             /*!< 0x00000100 */
#define SPI_SR_TIFRE                        SPI_SR_TIFRE_Msk                        /*!<TI frame format error Detected */
#define SPI_SR_MODF_Pos                     (9U)
#define SPI_SR_MODF_Msk                     (0x1UL << SPI_SR_MODF_Pos)              /*!< 0x00000200 */
#define SPI_SR_MODF                         SPI_SR_MODF_Msk                         /*!<Mode Fault Detected */
#define SPI_SR_SUSP_Pos                     (11U)
#define SPI_SR_SUSP_Msk                     (0x1UL << SPI_SR_SUSP_Pos)              /*!< 0x00000800 */
#define SPI_SR_SUSP                         SPI_SR_SUSP_Msk                         /*!<Suspension status, SUSP is set by hardware */
#define SPI_SR_TXC_Pos                      (12U)
#define SPI_SR_TXC_Msk                      (0x1UL << SPI_SR_TXC_Pos)               /*!< 0x00001000 */
#define SPI_SR_TXC                          SPI_SR_TXC_Msk                          /*!<TxFIFO transmission complete */
#define SPI_SR_RXPLVL_Pos                   (13U)
#define SPI_SR_RXPLVL_Msk                   (0x3UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00006000 */
#define SPI_SR_RXPLVL                       SPI_SR_RXPLVL_Msk                       /*!<RxFIFO Packing Level */
#define SPI_SR_RXPLVL_0                     (0x1UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00002000 */
#define SPI_SR_RXPLVL_1                     (0x2UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00004000 */
#define SPI_SR_RXWNE_Pos                    (15U)
#define SPI_SR_RXWNE_Msk                    (0x1UL << SPI_SR_RXWNE_Pos)             /*!< 0x00008000 */
#define SPI_SR_RXWNE                        SPI_SR_RXWNE_Msk                        /*!<Rx FIFO Word Not Empty */
#define SPI_SR_CTSIZE_Pos                   (16U)
#define SPI_SR_CTSIZE_Msk                   (0xFFFFUL << SPI_SR_CTSIZE_Pos)         /*!< 0xFFFF0000 */
#define SPI_SR_CTSIZE                       SPI_SR_CTSIZE_Msk                       /*!<Number of data frames remaining in TSIZE */

/********************  Bits definition for SPI_IFCR register     ******************/
#define SPI_IFCR_EOTC_Pos                   (3U)
#define SPI_IFCR_EOTC_Msk                   (0x1UL << SPI_IFCR_EOTC_Pos)            /*!< 0x00000008 */
#define SPI_IFCR_EOTC                       SPI_IFCR_EOTC_Msk                       /*!<End Of Transfer flag clear */
#define SPI_IFCR_TXTFC_Pos                  (4U)
#define SPI_IFCR_TXTFC_Msk                  (0x1UL << SPI_IFCR_TXTFC_Pos)           /*!< 0x00000010 */
#define SPI_IFCR_TXTFC                      SPI_IFCR_TXTFC_Msk                      /*!<Transmission Transfer Filled flag clear */
#define SPI_IFCR_UDRC_Pos                   (5U)
#define SPI_IFCR_UDRC_Msk                   (0x1UL << SPI_IFCR_UDRC_Pos)            /*!< 0x00000020 */
#define SPI_IFCR_UDRC                       SPI_IFCR_UDRC_Msk                       /*!<Underrun flag clear */
#define SPI_IFCR_OVRC_Pos                   (6U)
#define SPI_IFCR_OVRC_Msk                   (0x1UL << SPI_IFCR_OVRC_Pos)            /*!< 0x00000040 */
#define SPI_IFCR_OVRC                       SPI_IFCR_OVRC_Msk                       /*!<Overrun flag clear */
#define SPI_IFCR_CRCEC_Pos                  (7U)
#define SPI_IFCR_CRCEC_Msk                  (0x1UL << SPI_IFCR_CRCEC_Pos)           /*!< 0x00000080 */
#define SPI_IFCR_CRCEC                      SPI_IFCR_CRCEC_Msk                      /*!<CRC Error flag clear */
#define SPI_IFCR_TIFREC_Pos                 (8U)
#define SPI_IFCR_TIFREC_Msk                 (0x1UL << SPI_IFCR_TIFREC_Pos)          /*!< 0x00000100 */
#define SPI_IFCR_TIFREC                     SPI_IFCR_TIFREC_Msk                     /*!<TI frame format error flag clear */
#define SPI_IFCR_MODFC_Pos                  (9U)
#define SPI_IFCR_MODFC_Msk                  (0x1UL << SPI_IFCR_MODFC_Pos)           /*!< 0x00000200 */
#define SPI_IFCR_MODFC                      SPI_IFCR_MODFC_Msk                      /*!<Mode Fault flag clear */
#define SPI_IFCR_SUSPC_Pos                  (11U)
#define SPI_IFCR_SUSPC_Msk                  (0x1UL << SPI_IFCR_SUSPC_Pos)           /*!< 0x00000800 */
#define SPI_IFCR_SUSPC                      SPI_IFCR_SUSPC_Msk                      /*!<SUSPend flag clear */

/********************  Bits definition for SPI_AUTOCR register   ******************/
#define SPI_AUTOCR_TRIGSEL_Pos              (16U)
#define SPI_AUTOCR_TRIGSEL_Msk              (0xFUL << SPI_AUTOCR_TRIGSEL_Pos)       /*!< 0x000F0000 */
#define SPI_AUTOCR_TRIGSEL                  SPI_AUTOCR_TRIGSEL_Msk                  /*!<CTRIGSEL [3:0]: Trigger selection */
#define SPI_AUTOCR_TRIGSEL_0                (0x01UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00010000 */
#define SPI_AUTOCR_TRIGSEL_1                (0x02UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00020000 */
#define SPI_AUTOCR_TRIGSEL_2                (0x04UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00040000 */
#define SPI_AUTOCR_TRIGSEL_3                (0x08UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00080000 */
#define SPI_AUTOCR_TRIGPOL_Pos              (20U)
#define SPI_AUTOCR_TRIGPOL_Msk              (0x1UL << SPI_AUTOCR_TRIGPOL_Pos)       /*!< 0x00100000 */
#define SPI_AUTOCR_TRIGPOL                  SPI_AUTOCR_TRIGPOL_Msk                  /*!<Trigger polarity */
#define SPI_AUTOCR_TRIGEN_Pos               (21U)
#define SPI_AUTOCR_TRIGEN_Msk               (0x1UL << SPI_AUTOCR_TRIGEN_Pos)        /*!< 0x00200000 */
#define SPI_AUTOCR_TRIGEN                   SPI_AUTOCR_TRIGEN_Msk                   /*!<Trigger of CSTART control enable */

/********************  Bits definition for SPI_TXDR register     ******************/
#define SPI_TXDR_TXDR_Pos                   (0U)
#define SPI_TXDR_TXDR_Msk                   (0xFFFFFFFFUL << SPI_TXDR_TXDR_Pos)     /*!< 0xFFFFFFFF */
#define SPI_TXDR_TXDR                       SPI_TXDR_TXDR_Msk                       /* Transmit Data Register */

/********************  Bits definition for SPI_RXDR register     ******************/
#define SPI_RXDR_RXDR_Pos                   (0U)
#define SPI_RXDR_RXDR_Msk                   (0xFFFFFFFFUL << SPI_RXDR_RXDR_Pos)     /*!< 0xFFFFFFFF */
#define SPI_RXDR_RXDR                       SPI_RXDR_RXDR_Msk                       /* Receive Data Register */

/********************  Bits definition for SPI_CRCPOLY register  ******************/
#define SPI_CRCPOLY_CRCPOLY_Pos             (0U)
#define SPI_CRCPOLY_CRCPOLY_Msk             (0xFFFFFFFFUL << SPI_CRCPOLY_CRCPOLY_Pos) /*!< 0xFFFFFFFF */
#define SPI_CRCPOLY_CRCPOLY                 SPI_CRCPOLY_CRCPOLY_Msk                 /* CRC Polynomial register */

/********************  Bits definition for SPI_TXCRC register    ******************/
#define SPI_TXCRC_TXCRC_Pos                 (0U)
#define SPI_TXCRC_TXCRC_Msk                 (0xFFFFFFFFUL << SPI_TXCRC_TXCRC_Pos)   /*!< 0xFFFFFFFF */
#define SPI_TXCRC_TXCRC                     SPI_TXCRC_TXCRC_Msk                     /* CRC Register for transmitter */

/********************  Bits definition for SPI_RXCRC register    ******************/
#define SPI_RXCRC_RXCRC_Pos                 (0U)
#define SPI_RXCRC_RXCRC_Msk                 (0xFFFFFFFFUL << SPI_RXCRC_RXCRC_Pos)   /*!< 0xFFFFFFFF */
#define SPI_RXCRC_RXCRC                     SPI_RXCRC_RXCRC_Msk                     /* CRC Register for receiver */

/********************  Bits definition for SPI_UDRDR register    ******************/
#define SPI_UDRDR_UDRDR_Pos                 (0U)
#define SPI_UDRDR_UDRDR_Msk                 (0xFFFFFFFFUL << SPI_UDRDR_UDRDR_Pos)   /*!< 0xFFFFFFFF */
#define SPI_UDRDR_UDRDR                     SPI_UDRDR_UDRDR_Msk                     /* Data at slave underrun condition */

/********************  Bits definition for SPI_I2SCFGR register  ******************/
#define SPI_I2SCFGR_I2SMOD_Pos      (0U)
#define SPI_I2SCFGR_I2SMOD_Msk      (0x1UL << SPI_I2SCFGR_I2SMOD_Pos)           /*!< 0x00000001 */
#define SPI_I2SCFGR_I2SMOD          SPI_I2SCFGR_I2SMOD_Msk                     /*!<I2S mode selection */
#define SPI_I2SCFGR_I2SCFG_Pos      (1U)
#define SPI_I2SCFGR_I2SCFG_Msk      (0x7UL << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x0000000E */
#define SPI_I2SCFGR_I2SCFG          SPI_I2SCFGR_I2SCFG_Msk                     /*!<I2SCFGR[1:0] bits (I2S configuration mode) */
#define SPI_I2SCFGR_I2SCFG_0        (0x1UL << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000002 */
#define SPI_I2SCFGR_I2SCFG_1        (0x2UL << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000004 */
#define SPI_I2SCFGR_I2SCFG_2        (0x4UL << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000008 */
#define SPI_I2SCFGR_I2SSTD_Pos      (4U)
#define SPI_I2SCFGR_I2SSTD_Msk      (0x3UL << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000030 */
#define SPI_I2SCFGR_I2SSTD          SPI_I2SCFGR_I2SSTD_Msk                     /*!<I2SSTD[1:0] I2S standard selection */
#define SPI_I2SCFGR_I2SSTD_0        (0x1UL << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000010 */
#define SPI_I2SCFGR_I2SSTD_1        (0x2UL << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000020 */
#define SPI_I2SCFGR_PCMSYNC_Pos     (7U)
#define SPI_I2SCFGR_PCMSYNC_Msk     (0x1UL << SPI_I2SCFGR_PCMSYNC_Pos)          /*!< 0x00000080 */
#define SPI_I2SCFGR_PCMSYNC         SPI_I2SCFGR_PCMSYNC_Msk                    /*!<PCM frame synchronization */
#define SPI_I2SCFGR_DATLEN_Pos      (8U)
#define SPI_I2SCFGR_DATLEN_Msk      (0x3UL << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000300 */
#define SPI_I2SCFGR_DATLEN          SPI_I2SCFGR_DATLEN_Msk                     /*!<DATLEN[1:0] Data length to be transferred */
#define SPI_I2SCFGR_DATLEN_0        (0x1UL << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000100 */
#define SPI_I2SCFGR_DATLEN_1        (0x2UL << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000200 */
#define SPI_I2SCFGR_CHLEN_Pos       (10U)
#define SPI_I2SCFGR_CHLEN_Msk       (0x1UL << SPI_I2SCFGR_CHLEN_Pos)            /*!< 0x00000400 */
#define SPI_I2SCFGR_CHLEN           SPI_I2SCFGR_CHLEN_Msk                      /*!<Channel length (number of bits per audio channel) */
#define SPI_I2SCFGR_CKPOL_Pos       (11U)
#define SPI_I2SCFGR_CKPOL_Msk       (0x1UL << SPI_I2SCFGR_CKPOL_Pos)            /*!< 0x00000800 */
#define SPI_I2SCFGR_CKPOL           SPI_I2SCFGR_CKPOL_Msk                      /*!<Serial audio clock polarity */
#define SPI_I2SCFGR_FIXCH_Pos       (12U)
#define SPI_I2SCFGR_FIXCH_Msk       (0x1UL << SPI_I2SCFGR_FIXCH_Pos)            /*!< 0x00001000 */
#define SPI_I2SCFGR_FIXCH           SPI_I2SCFGR_FIXCH_Msk                      /*!<Fixed channel length in SLAVE */
#define SPI_I2SCFGR_WSINV_Pos       (13U)
#define SPI_I2SCFGR_WSINV_Msk       (0x1UL << SPI_I2SCFGR_WSINV_Pos)            /*!< 0x00002000 */
#define SPI_I2SCFGR_WSINV           SPI_I2SCFGR_WSINV_Msk                      /*!<Word select inversion */
#define SPI_I2SCFGR_DATFMT_Pos      (14U)
#define SPI_I2SCFGR_DATFMT_Msk      (0x1UL << SPI_I2SCFGR_DATFMT_Pos)           /*!< 0x00003000 */
#define SPI_I2SCFGR_DATFMT          SPI_I2SCFGR_DATFMT_Msk                     /*!<Data format */
#define SPI_I2SCFGR_I2SDIV_Pos      (16U)
#define SPI_I2SCFGR_I2SDIV_Msk      (0xFFUL << SPI_I2SCFGR_I2SDIV_Pos)          /*!< 0x00FF0000 */
#define SPI_I2SCFGR_I2SDIV          SPI_I2SCFGR_I2SDIV_Msk                     /*!<I2S Linear prescaler */
#define SPI_I2SCFGR_ODD_Pos         (24U)
#define SPI_I2SCFGR_ODD_Msk         (0x1UL << SPI_I2SCFGR_ODD_Pos)              /*!< 0x01000000 */
#define SPI_I2SCFGR_ODD             SPI_I2SCFGR_ODD_Msk                        /*!<Odd factor for the prescaler */
#define SPI_I2SCFGR_MCKOE_Pos       (25U)
#define SPI_I2SCFGR_MCKOE_Msk       (0x1UL << SPI_I2SCFGR_MCKOE_Pos)            /*!< 0x02000000 */
#define SPI_I2SCFGR_MCKOE           SPI_I2SCFGR_MCKOE_Msk                      /*!<Master Clock Output Enable */

/********************  Bits definition for SPI_HWCFGR2 register  ******************/
#define SPI_HWCFGR2_OPBCFG_Pos    (0U)
#define SPI_HWCFGR2_OPBCFG_Msk    (0xFFUL << SPI_HWCFGR2_OPBCFG_Pos)            /*!< 0x000000FF */
#define SPI_HWCFGR2_OPBCFG        SPI_HWCFGR2_OPBCFG_Msk                       /*!< Number of option bits available 0 to 31 */

/********************  Bits definition for SPI_HWCFGR1 register  ******************/
#define SPI_HWCFGR1_TXFCFG_Pos    (0U)
#define SPI_HWCFGR1_TXFCFG_Msk    (0xFUL << SPI_HWCFGR1_TXFCFG_Pos)             /*!< 0x0000000F */
#define SPI_HWCFGR1_TXFCFG        SPI_HWCFGR1_TXFCFG_Msk                       /*!< TxFIFO size */
#define SPI_HWCFGR1_RXFCFG_Pos    (4U)
#define SPI_HWCFGR1_RXFCFG_Msk    (0xFUL << SPI_HWCFGR1_RXFCFG_Pos)             /*!< 0x000000F0 */
#define SPI_HWCFGR1_RXFCFG        SPI_HWCFGR1_RXFCFG_Msk                       /*!< RxFIFO size */
#define SPI_HWCFGR1_CRCCFG_Pos    (8U)
#define SPI_HWCFGR1_CRCCFG_Msk    (0xFUL << SPI_HWCFGR1_CRCCFG_Pos)             /*!< 0x00000F00 */
#define SPI_HWCFGR1_CRCCFG        SPI_HWCFGR1_CRCCFG_Msk                       /*!< CRC configuration for SPI */
#define SPI_HWCFGR1_I2SCFG_Pos    (12U)
#define SPI_HWCFGR1_I2SCFG_Msk    (0xFUL << SPI_HWCFGR1_I2SCFG_Pos)             /*!< 0x0000F000 */
#define SPI_HWCFGR1_I2SCFG        SPI_HWCFGR1_I2SCFG_Msk                       /*!< I2S configuration */
#define SPI_HWCFGR1_DSCFG_Pos     (16U)
#define SPI_HWCFGR1_DSCFG_Msk     (0xFUL << SPI_HWCFGR1_DSCFG_Pos)              /*!< 0x000F0000 */
#define SPI_HWCFGR1_DSCFG         SPI_HWCFGR1_DSCFG_Msk                        /*!< SPI data size configuration */

#define SPI_HWCFGR1_TRGCFG_Pos    (20U)
#define SPI_HWCFGR1_TRGCFG_Msk    (0xFUL << SPI_HWCFGR1_TRGCFG_Pos)             /*!< 0x00F00000 */
#define SPI_HWCFGR1_TRGCFG        SPI_HWCFGR1_TRGCFG_Msk                       /*!< Autonomous trigger feature configuration */

#define SPI_HWCFGR1_FULLCFG_Pos   (24U)
#define SPI_HWCFGR1_FULLCFG_Msk   (0xFUL << SPI_HWCFGR1_FULLCFG_Pos)            /*!< 0x0F000000 */
#define SPI_HWCFGR1_FULLCFG       SPI_HWCFGR1_FULLCFG_Msk                      /*!< SPI2S full feature version configuration */

/********************  Bits definition for SPI_VERR register     ******************/
#define SPI_VERR_MINREV_Pos      (0U)
#define SPI_VERR_MINREV_Msk      (0xFUL << SPI_VERR_MINREV_Pos)               /*!< 0x0000000F */
#define SPI_VERR_MINREV          SPI_VERR_MINREV_Msk                         /*!< Minor Revision of the IP */
#define SPI_VERR_MAJREV_Pos      (4U)
#define SPI_VERR_MAJREV_Msk      (0xFUL << SPI_VERR_MAJREV_Pos)               /*!< 0x000000F0 */
#define SPI_VERR_MAJREV          SPI_VERR_MAJREV_Msk                         /*!< Major Revision of the IP */

/********************  Bits definition for SPI_IPIDR register    ******************/
#define SPI_IPIDR_ID_Pos       (0U)
#define SPI_IPIDR_ID_Msk       (0xFFFFFFFFUL << SPI_IPIDR_ID_Pos)             /*!< 0xFFFFFFFF */
#define SPI_IPIDR_ID           SPI_IPIDR_ID_Msk                              /*!< MCD identification code which identifies the IP */
/********************  Bits definition for SPI_SIDR register     ******************/
#define SPI_SIDR_SID_Pos         (0U)
#define SPI_SIDR_SID_Msk         (0xFFFFFFFFUL << SPI_SIDR_SID_Pos)           /*!< 0xFFFFFFFF */
#define SPI_SIDR_SID             SPI_SIDR_SID_Msk                            /*!< Size identification */

/******************************************************************************/
/*                                                                            */
/*                 System configuration controller (SYSCFG)                   */
/*                                                                            */
/******************************************************************************/
/****************  Bit definition for SYSCFG_BOOTSR register  *****************/
#define SYSCFG_BOOTSR_BOOT0_Pos                                       (0U)
#define SYSCFG_BOOTSR_BOOT0_Msk                                       (0x1UL << SYSCFG_BOOTSR_BOOT0_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_BOOTSR_BOOT0                                           SYSCFG_BOOTSR_BOOT0_Msk                                                   /*!< BOOT0 pin value */
#define SYSCFG_BOOTSR_BOOT1_Pos                                       (1U)
#define SYSCFG_BOOTSR_BOOT1_Msk                                       (0x1UL << SYSCFG_BOOTSR_BOOT1_Pos)                                         /*!< 0x00000002 */
#define SYSCFG_BOOTSR_BOOT1                                           SYSCFG_BOOTSR_BOOT1_Msk                                                   /*!< BOOT1 pin value */
#define SYSCFG_BOOTSR_BOOT2_Pos                                       (2U)
#define SYSCFG_BOOTSR_BOOT2_Msk                                       (0x1UL << SYSCFG_BOOTSR_BOOT2_Pos)                                         /*!< 0x00000004 */
#define SYSCFG_BOOTSR_BOOT2                                           SYSCFG_BOOTSR_BOOT2_Msk                                                   /*!< BOOT2 pin value */
#define SYSCFG_BOOTSR_BOOT3_Pos                                       (3U)
#define SYSCFG_BOOTSR_BOOT3_Msk                                       (0x1UL << SYSCFG_BOOTSR_BOOT3_Pos)                                         /*!< 0x00000008 */
#define SYSCFG_BOOTSR_BOOT3                                           SYSCFG_BOOTSR_BOOT3_Msk                                                   /*!< BOOT3 pin value */

/****************  Bit definition for SYSCFG_BOOTCR register  *****************/
#define SYSCFG_BOOTCR_BOOT0_PD_Pos                                    (0U)
#define SYSCFG_BOOTCR_BOOT0_PD_Msk                                    (0x1UL << SYSCFG_BOOTCR_BOOT0_PD_Pos)                                      /*!< 0x00000001 */
#define SYSCFG_BOOTCR_BOOT0_PD                                        SYSCFG_BOOTCR_BOOT0_PD_Msk                                                /*!< BOOT0 pin pull-down disable */
#define SYSCFG_BOOTCR_BOOT1_PD_Pos                                    (1U)
#define SYSCFG_BOOTCR_BOOT1_PD_Msk                                    (0x1UL << SYSCFG_BOOTCR_BOOT1_PD_Pos)                                      /*!< 0x00000002 */
#define SYSCFG_BOOTCR_BOOT1_PD                                        SYSCFG_BOOTCR_BOOT1_PD_Msk                                                /*!< BOOT1 pin pull-down disable */
#define SYSCFG_BOOTCR_BOOT2_PD_Pos                                    (2U)
#define SYSCFG_BOOTCR_BOOT2_PD_Msk                                    (0x1UL << SYSCFG_BOOTCR_BOOT2_PD_Pos)                                      /*!< 0x00000004 */
#define SYSCFG_BOOTCR_BOOT2_PD                                        SYSCFG_BOOTCR_BOOT2_PD_Msk                                                /*!< BOOT2 pin pull-down disable */
#define SYSCFG_BOOTCR_BOOT3_PD_Pos                                    (3U)
#define SYSCFG_BOOTCR_BOOT3_PD_Msk                                    (0x1UL << SYSCFG_BOOTCR_BOOT3_PD_Pos)                                      /*!< 0x00000008 */
#define SYSCFG_BOOTCR_BOOT3_PD                                        SYSCFG_BOOTCR_BOOT3_PD_Msk                                                /*!< BOOT3 pin pull-down disable */

/***************  Bit definition for SYSCFG_DLYBSD1CR register  ***************/
#define SYSCFG_DLYBSD1CR_EN_Pos                                       (0U)
#define SYSCFG_DLYBSD1CR_EN_Msk                                       (0x1UL << SYSCFG_DLYBSD1CR_EN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_DLYBSD1CR_EN                                           SYSCFG_DLYBSD1CR_EN_Msk                                                   /*!< When 1, the DLL is enabled when configured in lock mode (BYP_EN = 0) */
#define SYSCFG_DLYBSD1CR_RX_TAP_SEL_Pos                               (1U)
#define SYSCFG_DLYBSD1CR_RX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBSD1CR_RX_TAP_SEL_Pos)                                /*!< 0x0000007E */
#define SYSCFG_DLYBSD1CR_RX_TAP_SEL                                   SYSCFG_DLYBSD1CR_RX_TAP_SEL_Msk                                           /*!< TAP number for RX clock selection */
#define SYSCFG_DLYBSD1CR_BYP_EN_Pos                                   (16U)
#define SYSCFG_DLYBSD1CR_BYP_EN_Msk                                   (0x1UL << SYSCFG_DLYBSD1CR_BYP_EN_Pos)                                     /*!< 0x00010000 */
#define SYSCFG_DLYBSD1CR_BYP_EN                                       SYSCFG_DLYBSD1CR_BYP_EN_Msk                                               /*!< DLL bypass mode enable */
#define SYSCFG_DLYBSD1CR_BYP_CMD_Pos                                  (17U)
#define SYSCFG_DLYBSD1CR_BYP_CMD_Msk                                  (0x1FUL << SYSCFG_DLYBSD1CR_BYP_CMD_Pos)                                   /*!< 0x003E0000 */
#define SYSCFG_DLYBSD1CR_BYP_CMD                                      SYSCFG_DLYBSD1CR_BYP_CMD_Msk                                              /*!< Delay unit when in DLL bypass mode */
#define SYSCFG_DLYBSD1CR_ANTIGLITCH_EN_Pos                            (22U)
#define SYSCFG_DLYBSD1CR_ANTIGLITCH_EN_Msk                            (0x1UL << SYSCFG_DLYBSD1CR_ANTIGLITCH_EN_Pos)                              /*!< 0x00400000 */
#define SYSCFG_DLYBSD1CR_ANTIGLITCH_EN                                SYSCFG_DLYBSD1CR_ANTIGLITCH_EN_Msk                                        /*!< - 1: The anti-glitch logic is enabled */

/***************  Bit definition for SYSCFG_DLYBSD1SR register  ***************/
#define SYSCFG_DLYBSD1SR_LOCK_Pos                                     (0U)
#define SYSCFG_DLYBSD1SR_LOCK_Msk                                     (0x1UL << SYSCFG_DLYBSD1SR_LOCK_Pos)                                       /*!< 0x00000001 */
#define SYSCFG_DLYBSD1SR_LOCK                                         SYSCFG_DLYBSD1SR_LOCK_Msk                                                 /*!< - 1: The DLL is locked */
#define SYSCFG_DLYBSD1SR_RX_TAP_SEL_ACK_Pos                           (1U)
#define SYSCFG_DLYBSD1SR_RX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBSD1SR_RX_TAP_SEL_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_DLYBSD1SR_RX_TAP_SEL_ACK                               SYSCFG_DLYBSD1SR_RX_TAP_SEL_ACK_Msk                                       /*!< - 1: The RX delay switched to the tap value specified in RX_TAP_SEL[5:0] */

/***************  Bit definition for SYSCFG_SDMMC1CR register  ****************/
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL_Pos                               (0U)
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL_Msk                               (0x1UL << SYSCFG_SDMMC1CR_SDMMC1_VSEL_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_SDMMC1CR_SDMMC1_VSEL                                   SYSCFG_SDMMC1CR_SDMMC1_VSEL_Msk                                           /*!< Voltage selection */

/**************  Bit definition for SYSCFG_SDMMC1ARCR register  ***************/
#define SYSCFG_SDMMC1ARCR_AREN_Pos                                    (0U)
#define SYSCFG_SDMMC1ARCR_AREN_Msk                                    (0x1UL << SYSCFG_SDMMC1ARCR_AREN_Pos)                                      /*!< 0x00000001 */
#define SYSCFG_SDMMC1ARCR_AREN                                        SYSCFG_SDMMC1ARCR_AREN_Msk                                                /*!< Address remapping enable */

/***************  Bit definition for SYSCFG_DLYBSD2CR register  ***************/
#define SYSCFG_DLYBSD2CR_EN_Pos                                       (0U)
#define SYSCFG_DLYBSD2CR_EN_Msk                                       (0x1UL << SYSCFG_DLYBSD2CR_EN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_DLYBSD2CR_EN                                           SYSCFG_DLYBSD2CR_EN_Msk                                                   /*!< - 1: The DLL is enabled when configured in lock mode (BYP_EN = 0) */
#define SYSCFG_DLYBSD2CR_RX_TAP_SEL_Pos                               (1U)
#define SYSCFG_DLYBSD2CR_RX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBSD2CR_RX_TAP_SEL_Pos)                                /*!< 0x0000007E */
#define SYSCFG_DLYBSD2CR_RX_TAP_SEL                                   SYSCFG_DLYBSD2CR_RX_TAP_SEL_Msk                                           /*!< TAP delay for RX clock selection */
#define SYSCFG_DLYBSD2CR_BYP_EN_Pos                                   (16U)
#define SYSCFG_DLYBSD2CR_BYP_EN_Msk                                   (0x1UL << SYSCFG_DLYBSD2CR_BYP_EN_Pos)                                     /*!< 0x00010000 */
#define SYSCFG_DLYBSD2CR_BYP_EN                                       SYSCFG_DLYBSD2CR_BYP_EN_Msk                                               /*!< DLL bypass mode enable */
#define SYSCFG_DLYBSD2CR_BYP_CMD_Pos                                  (17U)
#define SYSCFG_DLYBSD2CR_BYP_CMD_Msk                                  (0x1FUL << SYSCFG_DLYBSD2CR_BYP_CMD_Pos)                                   /*!< 0x003E0000 */
#define SYSCFG_DLYBSD2CR_BYP_CMD                                      SYSCFG_DLYBSD2CR_BYP_CMD_Msk                                              /*!< Delay unit when in DLL bypass mode */
#define SYSCFG_DLYBSD2CR_ANTIGLITCH_EN_Pos                            (22U)
#define SYSCFG_DLYBSD2CR_ANTIGLITCH_EN_Msk                            (0x1UL << SYSCFG_DLYBSD2CR_ANTIGLITCH_EN_Pos)                              /*!< 0x00400000 */
#define SYSCFG_DLYBSD2CR_ANTIGLITCH_EN                                SYSCFG_DLYBSD2CR_ANTIGLITCH_EN_Msk                                        /*!< Anti-glitch logic enable */

/***************  Bit definition for SYSCFG_DLYBSD2SR register  ***************/
#define SYSCFG_DLYBSD2SR_LOCK_Pos                                     (0U)
#define SYSCFG_DLYBSD2SR_LOCK_Msk                                     (0x1UL << SYSCFG_DLYBSD2SR_LOCK_Pos)                                       /*!< 0x00000001 */
#define SYSCFG_DLYBSD2SR_LOCK                                         SYSCFG_DLYBSD2SR_LOCK_Msk                                                 /*!< - 1: The DLL is locked */
#define SYSCFG_DLYBSD2SR_RX_TAP_SEL_ACK_Pos                           (1U)
#define SYSCFG_DLYBSD2SR_RX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBSD2SR_RX_TAP_SEL_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_DLYBSD2SR_RX_TAP_SEL_ACK                               SYSCFG_DLYBSD2SR_RX_TAP_SEL_ACK_Msk                                       /*!< - 1: The RX delay switched to the tap value specified in RX_TAP_SEL[5:0] */

/***************  Bit definition for SYSCFG_SDMMC2CR register  ****************/
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL_Pos                               (0U)
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL_Msk                               (0x1UL << SYSCFG_SDMMC2CR_SDMMC2_VSEL_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_SDMMC2CR_SDMMC2_VSEL                                   SYSCFG_SDMMC2CR_SDMMC2_VSEL_Msk                                           /*!< Voltage selection */

/**************  Bit definition for SYSCFG_SDMMC2ARCR register  ***************/
#define SYSCFG_SDMMC2ARCR_AREN_Pos                                    (0U)
#define SYSCFG_SDMMC2ARCR_AREN_Msk                                    (0x1UL << SYSCFG_SDMMC2ARCR_AREN_Pos)                                      /*!< 0x00000001 */
#define SYSCFG_SDMMC2ARCR_AREN                                        SYSCFG_SDMMC2ARCR_AREN_Msk                                                /*!< Address remapping enable */

/***************  Bit definition for SYSCFG_DLYBSD3CR register  ***************/
#define SYSCFG_DLYBSD3CR_EN_Pos                                       (0U)
#define SYSCFG_DLYBSD3CR_EN_Msk                                       (0x1UL << SYSCFG_DLYBSD3CR_EN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_DLYBSD3CR_EN                                           SYSCFG_DLYBSD3CR_EN_Msk                                                   /*!< - 1: The DLL is enabled when configured in lock mode (BYP_EN = 0) */
#define SYSCFG_DLYBSD3CR_RX_TAP_SEL_Pos                               (1U)
#define SYSCFG_DLYBSD3CR_RX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBSD3CR_RX_TAP_SEL_Pos)                                /*!< 0x0000007E */
#define SYSCFG_DLYBSD3CR_RX_TAP_SEL                                   SYSCFG_DLYBSD3CR_RX_TAP_SEL_Msk                                           /*!< TAP delay for RX clock selection */
#define SYSCFG_DLYBSD3CR_BYP_EN_Pos                                   (16U)
#define SYSCFG_DLYBSD3CR_BYP_EN_Msk                                   (0x1UL << SYSCFG_DLYBSD3CR_BYP_EN_Pos)                                     /*!< 0x00010000 */
#define SYSCFG_DLYBSD3CR_BYP_EN                                       SYSCFG_DLYBSD3CR_BYP_EN_Msk                                               /*!< DLL bypass mode enable */
#define SYSCFG_DLYBSD3CR_BYP_CMD_Pos                                  (17U)
#define SYSCFG_DLYBSD3CR_BYP_CMD_Msk                                  (0x1FUL << SYSCFG_DLYBSD3CR_BYP_CMD_Pos)                                   /*!< 0x003E0000 */
#define SYSCFG_DLYBSD3CR_BYP_CMD                                      SYSCFG_DLYBSD3CR_BYP_CMD_Msk                                              /*!< Delay unit when in DLL bypass mode */
#define SYSCFG_DLYBSD3CR_ANTIGLITCH_EN_Pos                            (22U)
#define SYSCFG_DLYBSD3CR_ANTIGLITCH_EN_Msk                            (0x1UL << SYSCFG_DLYBSD3CR_ANTIGLITCH_EN_Pos)                              /*!< 0x00400000 */
#define SYSCFG_DLYBSD3CR_ANTIGLITCH_EN                                SYSCFG_DLYBSD3CR_ANTIGLITCH_EN_Msk                                        /*!< Anti-glitch logic enable */

/***************  Bit definition for SYSCFG_DLYBSD3SR register  ***************/
#define SYSCFG_DLYBSD3SR_LOCK_Pos                                     (0U)
#define SYSCFG_DLYBSD3SR_LOCK_Msk                                     (0x1UL << SYSCFG_DLYBSD3SR_LOCK_Pos)                                       /*!< 0x00000001 */
#define SYSCFG_DLYBSD3SR_LOCK                                         SYSCFG_DLYBSD3SR_LOCK_Msk                                                 /*!< - 1: The DLL is locked */
#define SYSCFG_DLYBSD3SR_RX_TAP_SEL_ACK_Pos                           (1U)
#define SYSCFG_DLYBSD3SR_RX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBSD3SR_RX_TAP_SEL_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_DLYBSD3SR_RX_TAP_SEL_ACK                               SYSCFG_DLYBSD3SR_RX_TAP_SEL_ACK_Msk                                       /*!< - 1: The RX delay has switched to the tap value specified in RX_TAP_SEL[5:0] */

/**************  Bit definition for SYSCFG_SDMMC3ARCR register  ***************/
#define SYSCFG_SDMMC3ARCR_AREN_Pos                                    (0U)
#define SYSCFG_SDMMC3ARCR_AREN_Msk                                    (0x1UL << SYSCFG_SDMMC3ARCR_AREN_Pos)                                      /*!< 0x00000001 */
#define SYSCFG_SDMMC3ARCR_AREN                                        SYSCFG_SDMMC3ARCR_AREN_Msk                                                /*!< Address remapping enable */

/***************  Bit definition for SYSCFG_DLYBOS1CR register  ***************/
#define SYSCFG_DLYBOS1CR_EN_Pos                                       (0U)
#define SYSCFG_DLYBOS1CR_EN_Msk                                       (0x1UL << SYSCFG_DLYBOS1CR_EN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_DLYBOS1CR_EN                                           SYSCFG_DLYBOS1CR_EN_Msk                                                   /*!< - 1: The DLL is enabled when configured in lock mode (BYP_EN = 0) */
#define SYSCFG_DLYBOS1CR_RX_TAP_SEL_Pos                               (1U)
#define SYSCFG_DLYBOS1CR_RX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBOS1CR_RX_TAP_SEL_Pos)                                /*!< 0x0000007E */
#define SYSCFG_DLYBOS1CR_RX_TAP_SEL                                   SYSCFG_DLYBOS1CR_RX_TAP_SEL_Msk                                           /*!< TAP delay for RX clock selection */
#define SYSCFG_DLYBOS1CR_TX_TAP_SEL_Pos                               (7U)
#define SYSCFG_DLYBOS1CR_TX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBOS1CR_TX_TAP_SEL_Pos)                                /*!< 0x00001F80 */
#define SYSCFG_DLYBOS1CR_TX_TAP_SEL                                   SYSCFG_DLYBOS1CR_TX_TAP_SEL_Msk                                           /*!< TAP delay for TX clock selection */
#define SYSCFG_DLYBOS1CR_BYP_EN_Pos                                   (16U)
#define SYSCFG_DLYBOS1CR_BYP_EN_Msk                                   (0x1UL << SYSCFG_DLYBOS1CR_BYP_EN_Pos)                                     /*!< 0x00010000 */
#define SYSCFG_DLYBOS1CR_BYP_EN                                       SYSCFG_DLYBOS1CR_BYP_EN_Msk                                               /*!< DLL bypass mode enable */
#define SYSCFG_DLYBOS1CR_BYP_CMD_Pos                                  (17U)
#define SYSCFG_DLYBOS1CR_BYP_CMD_Msk                                  (0x1FUL << SYSCFG_DLYBOS1CR_BYP_CMD_Pos)                                   /*!< 0x003E0000 */
#define SYSCFG_DLYBOS1CR_BYP_CMD                                      SYSCFG_DLYBOS1CR_BYP_CMD_Msk                                              /*!< Delay unit when in DLL bypass mode */

/***************  Bit definition for SYSCFG_DLYBOS1SR register  ***************/
#define SYSCFG_DLYBOS1SR_LOCK_Pos                                     (0U)
#define SYSCFG_DLYBOS1SR_LOCK_Msk                                     (0x1UL << SYSCFG_DLYBOS1SR_LOCK_Pos)                                       /*!< 0x00000001 */
#define SYSCFG_DLYBOS1SR_LOCK                                         SYSCFG_DLYBOS1SR_LOCK_Msk                                                 /*!< - 1: The DLL is locked */
#define SYSCFG_DLYBOS1SR_RX_TAP_SEL_ACK_Pos                           (1U)
#define SYSCFG_DLYBOS1SR_RX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBOS1SR_RX_TAP_SEL_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_DLYBOS1SR_RX_TAP_SEL_ACK                               SYSCFG_DLYBOS1SR_RX_TAP_SEL_ACK_Msk                                       /*!< - 1: The RX delay has switched to the tap value specified in RX_TAP_SEL[5:0] */
#define SYSCFG_DLYBOS1SR_TX_TAP_SEL_ACK_Pos                           (2U)
#define SYSCFG_DLYBOS1SR_TX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBOS1SR_TX_TAP_SEL_ACK_Pos)                             /*!< 0x00000004 */
#define SYSCFG_DLYBOS1SR_TX_TAP_SEL_ACK                               SYSCFG_DLYBOS1SR_TX_TAP_SEL_ACK_Msk                                       /*!< - 1: The TX delay has switched to the tap value specified in TX_TAP_SEL[5:0] */

/***************  Bit definition for SYSCFG_DLYBOS2CR register  ***************/
#define SYSCFG_DLYBOS2CR_EN_Pos                                       (0U)
#define SYSCFG_DLYBOS2CR_EN_Msk                                       (0x1UL << SYSCFG_DLYBOS2CR_EN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_DLYBOS2CR_EN                                           SYSCFG_DLYBOS2CR_EN_Msk                                                   /*!< e */
#define SYSCFG_DLYBOS2CR_RX_TAP_SEL_Pos                               (1U)
#define SYSCFG_DLYBOS2CR_RX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBOS2CR_RX_TAP_SEL_Pos)                                /*!< 0x0000007E */
#define SYSCFG_DLYBOS2CR_RX_TAP_SEL                                   SYSCFG_DLYBOS2CR_RX_TAP_SEL_Msk                                           /*!< TAP delay for RX clock selection */
#define SYSCFG_DLYBOS2CR_TX_TAP_SEL_Pos                               (7U)
#define SYSCFG_DLYBOS2CR_TX_TAP_SEL_Msk                               (0x3FUL << SYSCFG_DLYBOS2CR_TX_TAP_SEL_Pos)                                /*!< 0x00001F80 */
#define SYSCFG_DLYBOS2CR_TX_TAP_SEL                                   SYSCFG_DLYBOS2CR_TX_TAP_SEL_Msk                                           /*!< TAP delay for TX clock selection */
#define SYSCFG_DLYBOS2CR_BYP_EN_Pos                                   (16U)
#define SYSCFG_DLYBOS2CR_BYP_EN_Msk                                   (0x1UL << SYSCFG_DLYBOS2CR_BYP_EN_Pos)                                     /*!< 0x00010000 */
#define SYSCFG_DLYBOS2CR_BYP_EN                                       SYSCFG_DLYBOS2CR_BYP_EN_Msk                                               /*!< DLL bypass mode enable */
#define SYSCFG_DLYBOS2CR_BYP_CMD_Pos                                  (17U)
#define SYSCFG_DLYBOS2CR_BYP_CMD_Msk                                  (0x1FUL << SYSCFG_DLYBOS2CR_BYP_CMD_Pos)                                   /*!< 0x003E0000 */
#define SYSCFG_DLYBOS2CR_BYP_CMD                                      SYSCFG_DLYBOS2CR_BYP_CMD_Msk                                              /*!< Delay unit when in DLL bypass mode */

/***************  Bit definition for SYSCFG_DLYBOS2SR register  ***************/
#define SYSCFG_DLYBOS2SR_LOCK_Pos                                     (0U)
#define SYSCFG_DLYBOS2SR_LOCK_Msk                                     (0x1UL << SYSCFG_DLYBOS2SR_LOCK_Pos)                                       /*!< 0x00000001 */
#define SYSCFG_DLYBOS2SR_LOCK                                         SYSCFG_DLYBOS2SR_LOCK_Msk                                                 /*!< - 1: The DLL is locked */
#define SYSCFG_DLYBOS2SR_RX_TAP_SEL_ACK_Pos                           (1U)
#define SYSCFG_DLYBOS2SR_RX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBOS2SR_RX_TAP_SEL_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_DLYBOS2SR_RX_TAP_SEL_ACK                               SYSCFG_DLYBOS2SR_RX_TAP_SEL_ACK_Msk                                       /*!< - 1: The RX delay has switched to the tap value specified in RX_TAP_SEL[5:0] */
#define SYSCFG_DLYBOS2SR_TX_TAP_SEL_ACK_Pos                           (2U)
#define SYSCFG_DLYBOS2SR_TX_TAP_SEL_ACK_Msk                           (0x1UL << SYSCFG_DLYBOS2SR_TX_TAP_SEL_ACK_Pos)                             /*!< 0x00000004 */
#define SYSCFG_DLYBOS2SR_TX_TAP_SEL_ACK                               SYSCFG_DLYBOS2SR_TX_TAP_SEL_ACK_Msk                                       /*!< - 1: The TX delay has switched to the tap value specified in TX_TAP_SEL[5:0] */

/**************  Bit definition for SYSCFG_VDENPURAMCR register  **************/
#define SYSCFG_VDENPURAMCR_VDERAM_EN_Pos                              (0U)
#define SYSCFG_VDENPURAMCR_VDERAM_EN_Msk                              (0x1UL << SYSCFG_VDENPURAMCR_VDERAM_EN_Pos)                                /*!< 0x00000001 */
#define SYSCFG_VDENPURAMCR_VDERAM_EN                                  SYSCFG_VDENPURAMCR_VDERAM_EN_Msk                                          /*!< VDEC RAM enable */
#define SYSCFG_VDENPURAMCR_NPURAM_EN_Pos                              (4U)
#define SYSCFG_VDENPURAMCR_NPURAM_EN_Msk                              (0x1UL << SYSCFG_VDENPURAMCR_NPURAM_EN_Pos)                                /*!< 0x00000010 */
#define SYSCFG_VDENPURAMCR_NPURAM_EN                                  SYSCFG_VDENPURAMCR_NPURAM_EN_Msk                                          /*!< NPU RAM enable */

/*************  Bit definition for SYSCFG_POTTAMPRSTCR register  **************/
#define SYSCFG_POTTAMPRSTCR_POTTAMPRESETMASK_Pos                      (0U)
#define SYSCFG_POTTAMPRSTCR_POTTAMPRESETMASK_Msk                      (0x1UL << SYSCFG_POTTAMPRSTCR_POTTAMPRESETMASK_Pos)                        /*!< 0x00000001 */
#define SYSCFG_POTTAMPRSTCR_POTTAMPRESETMASK                          SYSCFG_POTTAMPRSTCR_POTTAMPRESETMASK_Msk                                  /*!< This bit can be set by software to mask PKA, SAES, CRYP1/2, and HASH reset in case of potential tam */

/****************  Bit definition for SYSCFG_M33SSCR register  ****************/
#define SYSCFG_M33SSCR_FPU_IT_EN_Pos                                  (0U)
#define SYSCFG_M33SSCR_FPU_IT_EN_Msk                                  (0x3FUL << SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                   /*!< 0x0000003F */
#define SYSCFG_M33SSCR_FPU_IT_EN                                      SYSCFG_M33SSCR_FPU_IT_EN_Msk                                              /*!< Floating point unit interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_0                                    (0x1UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                          /*!< 0x00000001 - Invalid operation Interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_1                                    (0x2UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                          /*!< 0x00000002 - Divide-by-zero interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_2                                    (0x4UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                          /*!< 0x00000004 - Overflow interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_3                                    (0x8UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                          /*!< 0x00000008 - Underflow interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_4                                    (0x10UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)                                         /*!< 0x00000010 - Inexact interrupt enable */
#define SYSCFG_M33SSCR_FPU_IT_EN_5                                    (0x20UL<<SYSCFG_M33SSCR_FPU_IT_EN_Pos)
#define SYSCFG_M33SSCR_LOCKSVTAIRCR_Pos                               (16U)
#define SYSCFG_M33SSCR_LOCKSVTAIRCR_Msk                               (0x1UL << SYSCFG_M33SSCR_LOCKSVTAIRCR_Pos)                                 /*!< 0x00010000 */
#define SYSCFG_M33SSCR_LOCKSVTAIRCR                                   SYSCFG_M33SSCR_LOCKSVTAIRCR_Msk                                           /*!< Prevent changes to: */
#define SYSCFG_M33SSCR_LOCKNSVTOR_Pos                                 (17U)
#define SYSCFG_M33SSCR_LOCKNSVTOR_Msk                                 (0x1UL << SYSCFG_M33SSCR_LOCKNSVTOR_Pos)                                   /*!< 0x00020000 */
#define SYSCFG_M33SSCR_LOCKNSVTOR                                     SYSCFG_M33SSCR_LOCKNSVTOR_Msk                                             /*!< Prevent changes to non-secure vector table base address */
#define SYSCFG_M33SSCR_LOCKSMPU_Pos                                   (18U)
#define SYSCFG_M33SSCR_LOCKSMPU_Msk                                   (0x1UL << SYSCFG_M33SSCR_LOCKSMPU_Pos)                                     /*!< 0x00040000 */
#define SYSCFG_M33SSCR_LOCKSMPU                                       SYSCFG_M33SSCR_LOCKSMPU_Msk                                               /*!< Prevent changes to programmed secure MPU memory regions */
#define SYSCFG_M33SSCR_LOCKNSMPU_Pos                                  (19U)
#define SYSCFG_M33SSCR_LOCKNSMPU_Msk                                  (0x1UL << SYSCFG_M33SSCR_LOCKNSMPU_Pos)                                    /*!< 0x00080000 */
#define SYSCFG_M33SSCR_LOCKNSMPU                                      SYSCFG_M33SSCR_LOCKNSMPU_Msk                                              /*!< Prevent changes to non-secure MPU memory regions already programmed */
#define SYSCFG_M33SSCR_LOCKSAU_Pos                                    (20U)
#define SYSCFG_M33SSCR_LOCKSAU_Msk                                    (0x1UL << SYSCFG_M33SSCR_LOCKSAU_Pos)                                      /*!< 0x00100000 */
#define SYSCFG_M33SSCR_LOCKSAU                                        SYSCFG_M33SSCR_LOCKSAU_Msk                                                /*!< Prevent changes to secure SAU memory regions already programmed */

/***************  Bit definition for SYSCFG_ICNQPCR1 register  ****************/
#define SYSCFG_ICNQPCR1_A35_QOS_Pos                                   (0U)
#define SYSCFG_ICNQPCR1_A35_QOS_Msk                                   (0xFUL << SYSCFG_ICNQPCR1_A35_QOS_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_ICNQPCR1_A35_QOS                                       SYSCFG_ICNQPCR1_A35_QOS_Msk                                               /*!< Cortex-A35 read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_TRACE_QOS_Pos                                 (4U)
#define SYSCFG_ICNQPCR1_TRACE_QOS_Msk                                 (0xFUL << SYSCFG_ICNQPCR1_TRACE_QOS_Pos)                                   /*!< 0x000000F0 */
#define SYSCFG_ICNQPCR1_TRACE_QOS                                     SYSCFG_ICNQPCR1_TRACE_QOS_Msk                                             /*!< TRACE read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_HPDMA1_QOS_Pos                                (8U)
#define SYSCFG_ICNQPCR1_HPDMA1_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_HPDMA1_QOS_Pos)                                  /*!< 0x00000F00 */
#define SYSCFG_ICNQPCR1_HPDMA1_QOS                                    SYSCFG_ICNQPCR1_HPDMA1_QOS_Msk                                            /*!< HPDMA1 read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_HPDMA2_QOS_Pos                                (12U)
#define SYSCFG_ICNQPCR1_HPDMA2_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_HPDMA2_QOS_Pos)                                  /*!< 0x0000F000 */
#define SYSCFG_ICNQPCR1_HPDMA2_QOS                                    SYSCFG_ICNQPCR1_HPDMA2_QOS_Msk                                            /*!< HPDMA2 read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_HPDMA3_QOS_Pos                                (16U)
#define SYSCFG_ICNQPCR1_HPDMA3_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_HPDMA3_QOS_Pos)                                  /*!< 0x000F0000 */
#define SYSCFG_ICNQPCR1_HPDMA3_QOS                                    SYSCFG_ICNQPCR1_HPDMA3_QOS_Msk                                            /*!< HPDMA3 read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_SDMMC1_QOS_Pos                                (20U)
#define SYSCFG_ICNQPCR1_SDMMC1_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_SDMMC1_QOS_Pos)                                  /*!< 0x00F00000 */
#define SYSCFG_ICNQPCR1_SDMMC1_QOS                                    SYSCFG_ICNQPCR1_SDMMC1_QOS_Msk                                            /*!< SDMMC1 read/write channel QoS setting */
#define SYSCFG_ICNQPCR1_SDMMC2_QOS_Pos                                (24U)
#define SYSCFG_ICNQPCR1_SDMMC2_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_SDMMC2_QOS_Pos)                                  /*!< 0x0F000000 */
#define SYSCFG_ICNQPCR1_SDMMC2_QOS                                    SYSCFG_ICNQPCR1_SDMMC2_QOS_Msk                                            /*!< SDMMC2 read/write channes QoS setting */
#define SYSCFG_ICNQPCR1_SDMMC3_QOS_Pos                                (28U)
#define SYSCFG_ICNQPCR1_SDMMC3_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR1_SDMMC3_QOS_Pos)                                  /*!< 0xF0000000 */
#define SYSCFG_ICNQPCR1_SDMMC3_QOS                                    SYSCFG_ICNQPCR1_SDMMC3_QOS_Msk                                            /*!< SDMMC3 read/write channel QoS setting */

/***************  Bit definition for SYSCFG_ICNQPCR2 register  ****************/
#define SYSCFG_ICNQPCR2_USBH_QOS_Pos                                  (0U)
#define SYSCFG_ICNQPCR2_USBH_QOS_Msk                                  (0xFUL << SYSCFG_ICNQPCR2_USBH_QOS_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_ICNQPCR2_USBH_QOS                                      SYSCFG_ICNQPCR2_USBH_QOS_Msk                                              /*!< USBH(OHCI and EHCI) read/write channel QoS setting */
#define SYSCFG_ICNQPCR2_OTG_QOS_Pos                                   (4U)
#define SYSCFG_ICNQPCR2_OTG_QOS_Msk                                   (0xFUL << SYSCFG_ICNQPCR2_OTG_QOS_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_ICNQPCR2_OTG_QOS                                       SYSCFG_ICNQPCR2_OTG_QOS_Msk                                               /*!< OTG read/write channel QoS setting */
#define SYSCFG_ICNQPCR2_DCMIPP_QOS_Pos                                (12U)
#define SYSCFG_ICNQPCR2_DCMIPP_QOS_Msk                                (0xFUL << SYSCFG_ICNQPCR2_DCMIPP_QOS_Pos)                                  /*!< 0x0000F000 */
#define SYSCFG_ICNQPCR2_DCMIPP_QOS                                    SYSCFG_ICNQPCR2_DCMIPP_QOS_Msk                                            /*!< DCMIPP write channel QoS setting */
#define SYSCFG_ICNQPCR2_LTDC_QOS_Pos                                  (16U)
#define SYSCFG_ICNQPCR2_LTDC_QOS_Msk                                  (0xFUL << SYSCFG_ICNQPCR2_LTDC_QOS_Pos)                                    /*!< 0x000F0000 */
#define SYSCFG_ICNQPCR2_LTDC_QOS                                      SYSCFG_ICNQPCR2_LTDC_QOS_Msk                                              /*!< LTDC read/write channels QoS setting */
#define SYSCFG_ICNQPCR2_VDEC_QOS_Pos                                  (24U)
#define SYSCFG_ICNQPCR2_VDEC_QOS_Msk                                  (0xFUL << SYSCFG_ICNQPCR2_VDEC_QOS_Pos)                                    /*!< 0x0F000000 */
#define SYSCFG_ICNQPCR2_VDEC_QOS                                      SYSCFG_ICNQPCR2_VDEC_QOS_Msk                                              /*!< VDEC read/write channels QoS setting */
#define SYSCFG_ICNQPCR2_GPU_QOS_Pos                                   (28U)
#define SYSCFG_ICNQPCR2_GPU_QOS_Msk                                   (0xFUL << SYSCFG_ICNQPCR2_GPU_QOS_Pos)                                     /*!< 0xF0000000 */
#define SYSCFG_ICNQPCR2_GPU_QOS                                       SYSCFG_ICNQPCR2_GPU_QOS_Msk                                               /*!< GPU/NPU read/write channel QoS setting */

/***************  Bit definition for SYSCFG_ICNEWRCR register  ****************/
#define SYSCFG_ICNEWRCR_USBH_EARLY_WR_RSP_ENABLE_Pos                  (0U)
#define SYSCFG_ICNEWRCR_USBH_EARLY_WR_RSP_ENABLE_Msk                  (0x1UL << SYSCFG_ICNEWRCR_USBH_EARLY_WR_RSP_ENABLE_Pos)                    /*!< 0x00000001 */
#define SYSCFG_ICNEWRCR_USBH_EARLY_WR_RSP_ENABLE                      SYSCFG_ICNEWRCR_USBH_EARLY_WR_RSP_ENABLE_Msk                              /*!< USBH (OHCI and EHCI) early write response enable */
#define SYSCFG_ICNEWRCR_SDMMC1_EARLY_WR_RSP_ENABLE_Pos                (1U)
#define SYSCFG_ICNEWRCR_SDMMC1_EARLY_WR_RSP_ENABLE_Msk                (0x1UL << SYSCFG_ICNEWRCR_SDMMC1_EARLY_WR_RSP_ENABLE_Pos)                  /*!< 0x00000002 */
#define SYSCFG_ICNEWRCR_SDMMC1_EARLY_WR_RSP_ENABLE                    SYSCFG_ICNEWRCR_SDMMC1_EARLY_WR_RSP_ENABLE_Msk                            /*!< SDMMC1 early write response enable */
#define SYSCFG_ICNEWRCR_SDMMC2_EARLY_WR_RSP_ENABLE_Pos                (2U)
#define SYSCFG_ICNEWRCR_SDMMC2_EARLY_WR_RSP_ENABLE_Msk                (0x1UL << SYSCFG_ICNEWRCR_SDMMC2_EARLY_WR_RSP_ENABLE_Pos)                  /*!< 0x00000004 */
#define SYSCFG_ICNEWRCR_SDMMC2_EARLY_WR_RSP_ENABLE                    SYSCFG_ICNEWRCR_SDMMC2_EARLY_WR_RSP_ENABLE_Msk                            /*!< SDMMC2 early write response enable */
#define SYSCFG_ICNEWRCR_SDMMC3_EARLY_WR_RSP_ENABLE_Pos                (3U)
#define SYSCFG_ICNEWRCR_SDMMC3_EARLY_WR_RSP_ENABLE_Msk                (0x1UL << SYSCFG_ICNEWRCR_SDMMC3_EARLY_WR_RSP_ENABLE_Pos)                  /*!< 0x00000008 */
#define SYSCFG_ICNEWRCR_SDMMC3_EARLY_WR_RSP_ENABLE                    SYSCFG_ICNEWRCR_SDMMC3_EARLY_WR_RSP_ENABLE_Msk                            /*!< SDMMC3 early write response enable */
#define SYSCFG_ICNEWRCR_LTDCR_DCMIPP_EARLY_WR_RSP_ENABLE_Pos          (4U)
#define SYSCFG_ICNEWRCR_LTDCR_DCMIPP_EARLY_WR_RSP_ENABLE_Msk          (0x1UL << SYSCFG_ICNEWRCR_LTDCR_DCMIPP_EARLY_WR_RSP_ENABLE_Pos)            /*!< 0x00000010 */
#define SYSCFG_ICNEWRCR_LTDCR_DCMIPP_EARLY_WR_RSP_ENABLE              SYSCFG_ICNEWRCR_LTDCR_DCMIPP_EARLY_WR_RSP_ENABLE_Msk                      /*!< LTDC Rotation and DCMIPP early write response enable */
#define SYSCFG_ICNEWRCR_OTG_EARLY_WR_RSP_ENABLE_Pos                   (5U)
#define SYSCFG_ICNEWRCR_OTG_EARLY_WR_RSP_ENABLE_Msk                   (0x1UL << SYSCFG_ICNEWRCR_OTG_EARLY_WR_RSP_ENABLE_Pos)                     /*!< 0x00000020 */
#define SYSCFG_ICNEWRCR_OTG_EARLY_WR_RSP_ENABLE                       SYSCFG_ICNEWRCR_OTG_EARLY_WR_RSP_ENABLE_Msk                               /*!< OTG early write response enable */

/****************  Bit definition for SYSCFG_ICNCGCR register  ****************/
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DDR_Pos                      (0U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DDR_Msk                      (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DDR_Pos)                        /*!< 0x00000001 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DDR                          SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DDR_Msk                                  /*!< When set to 1, ICN automatic clock gating on clk_icn_ddr domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Pos                  (1U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Msk                  (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Pos)                    /*!< 0x00000002 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DISPLAY                      SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_DISPLAY_Msk                              /*!< When set to 1, ICN automatic clock gating on clk_icn_display domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_HSL_Pos                      (2U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_HSL_Msk                      (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_HSL_Pos)                        /*!< 0x00000004 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_HSL                          SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_HSL_Msk                                  /*!< When set to 1, ICN automatic clock gating on clk_icn_hsl domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_MCU_Pos                      (3U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_MCU_Msk                      (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_MCU_Pos)                        /*!< 0x00000008 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_MCU                          SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_MCU_Msk                                  /*!< When set to 1, ICN automatic clock gating on clk_icn_mcu domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SYSATB_Pos                   (4U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SYSATB_Msk                   (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SYSATB_Pos)                     /*!< 0x00000010 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SYSATB                       SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SYSATB_Msk                               /*!< When set to 1, ICN automatic clock gating on clk_icn_sysatb domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SDMMC_Pos                    (5U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SDMMC_Msk                    (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SDMMC_Pos)                      /*!< 0x00000020 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SDMMC                        SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_SDMMC_Msk                                /*!< When set to 1, ICN automatic clock gating on clk_icn_sdmmc domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Pos                 (6U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Msk                 (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Pos)                   /*!< 0x00000040 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_BUSPERFM                     SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_BUSPERFM_Msk                             /*!< When set to 1, ICN automatic clock gating on clk_icn_busperfm domain is off */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_VID_Pos                      (7U)
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_VID_Msk                      (0x1UL << SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_VID_Pos)                        /*!< 0x00000080 */
#define SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_VID                          SYSCFG_ICNCGCR_ALWAYS_ON_CLK_ICN_VID_Msk                                  /*!< When set to 1, ICN automatic clock gating on clk_icn_vid domain is off */
#define SYSCFG_ICNCGCR_GPU_MEM_CLK_G_BYPASS_Pos                       (16U)
#define SYSCFG_ICNCGCR_GPU_MEM_CLK_G_BYPASS_Msk                       (0x1UL << SYSCFG_ICNCGCR_GPU_MEM_CLK_G_BYPASS_Pos)                         /*!< 0x00010000 */
#define SYSCFG_ICNCGCR_GPU_MEM_CLK_G_BYPASS                           SYSCFG_ICNCGCR_GPU_MEM_CLK_G_BYPASS_Msk                                   /*!< When set to 1, automatic clock gating of GPU memories are off */
#define SYSCFG_ICNCGCR_SECURITYSS_MEM_CLK_G_BYPASS_Pos                (17U)
#define SYSCFG_ICNCGCR_SECURITYSS_MEM_CLK_G_BYPASS_Msk                (0x1UL << SYSCFG_ICNCGCR_SECURITYSS_MEM_CLK_G_BYPASS_Pos)                  /*!< 0x00020000 */
#define SYSCFG_ICNCGCR_SECURITYSS_MEM_CLK_G_BYPASS                    SYSCFG_ICNCGCR_SECURITYSS_MEM_CLK_G_BYPASS_Msk                            /*!< When set to 1, automatic clock gating of Security subsystem memories are off */
#define SYSCFG_ICNCGCR_VIDEOSS_MEM_CLK_G_BYPASS_Pos                   (18U)
#define SYSCFG_ICNCGCR_VIDEOSS_MEM_CLK_G_BYPASS_Msk                   (0x1UL << SYSCFG_ICNCGCR_VIDEOSS_MEM_CLK_G_BYPASS_Pos)                     /*!< 0x00040000 */
#define SYSCFG_ICNCGCR_VIDEOSS_MEM_CLK_G_BYPASS                       SYSCFG_ICNCGCR_VIDEOSS_MEM_CLK_G_BYPASS_Msk                               /*!< When set to 1, automatic clock gating of Video subsystem memories are off */
#define SYSCFG_ICNCGCR_DDRSS_MEM_CLK_G_BYPASS_Pos                     (19U)
#define SYSCFG_ICNCGCR_DDRSS_MEM_CLK_G_BYPASS_Msk                     (0x1UL << SYSCFG_ICNCGCR_DDRSS_MEM_CLK_G_BYPASS_Pos)                       /*!< 0x00080000 */
#define SYSCFG_ICNCGCR_DDRSS_MEM_CLK_G_BYPASS                         SYSCFG_ICNCGCR_DDRSS_MEM_CLK_G_BYPASS_Msk                                 /*!< When set to 1, automatic clock gating of DDR subsystem memories are off */
#define SYSCFG_ICNCGCR_M33SS_MEM_CLK_G_BYPASS_Pos                     (20U)
#define SYSCFG_ICNCGCR_M33SS_MEM_CLK_G_BYPASS_Msk                     (0x1UL << SYSCFG_ICNCGCR_M33SS_MEM_CLK_G_BYPASS_Pos)                       /*!< 0x00100000 */
#define SYSCFG_ICNCGCR_M33SS_MEM_CLK_G_BYPASS                         SYSCFG_ICNCGCR_M33SS_MEM_CLK_G_BYPASS_Msk                                 /*!< When set to 1, automatic clock gating of M33 subsystem memories are off */
#define SYSCFG_ICNCGCR_RETRAM_CLK_G_BYPASS_Pos                        (21U)
#define SYSCFG_ICNCGCR_RETRAM_CLK_G_BYPASS_Msk                        (0x1UL << SYSCFG_ICNCGCR_RETRAM_CLK_G_BYPASS_Pos)                          /*!< 0x00200000 */
#define SYSCFG_ICNCGCR_RETRAM_CLK_G_BYPASS                            SYSCFG_ICNCGCR_RETRAM_CLK_G_BYPASS_Msk                                    /*!< When set to 1, automatic clock gating of Retram memory is off */
#define SYSCFG_ICNCGCR_SYSRAM_SRAM1_BKPSRAM_CLK_G_BYPASS_Pos          (22U)
#define SYSCFG_ICNCGCR_SYSRAM_SRAM1_BKPSRAM_CLK_G_BYPASS_Msk          (0x1UL << SYSCFG_ICNCGCR_SYSRAM_SRAM1_BKPSRAM_CLK_G_BYPASS_Pos)            /*!< 0x00400000 */
#define SYSCFG_ICNCGCR_SYSRAM_SRAM1_BKPSRAM_CLK_G_BYPASS              SYSCFG_ICNCGCR_SYSRAM_SRAM1_BKPSRAM_CLK_G_BYPASS_Msk                      /*!< When set to 1, automatic clock gating of Sysram, Sram1 and Bkpsram memories are off */
#define SYSCFG_ICNCGCR_FDCAN_MEM_CLK_G_BYPASS_Pos                     (23U)
#define SYSCFG_ICNCGCR_FDCAN_MEM_CLK_G_BYPASS_Msk                     (0x1UL << SYSCFG_ICNCGCR_FDCAN_MEM_CLK_G_BYPASS_Pos)                       /*!< 0x00800000 */
#define SYSCFG_ICNCGCR_FDCAN_MEM_CLK_G_BYPASS                         SYSCFG_ICNCGCR_FDCAN_MEM_CLK_G_BYPASS_Msk                                 /*!< When set to 1, automatic clock gating of FDCAN memory is off */
#define SYSCFG_ICNCGCR_ETF_MEM_CLK_G_BYPASS_Pos                       (24U)
#define SYSCFG_ICNCGCR_ETF_MEM_CLK_G_BYPASS_Msk                       (0x1UL << SYSCFG_ICNCGCR_ETF_MEM_CLK_G_BYPASS_Pos)                         /*!< 0x01000000 */
#define SYSCFG_ICNCGCR_ETF_MEM_CLK_G_BYPASS                           SYSCFG_ICNCGCR_ETF_MEM_CLK_G_BYPASS_Msk                                   /*!< When set to 1, automatic clock gating of ETF memory is off */

/**************  Bit definition for SYSCFG_ICNGPUBWLCR register  **************/
#define SYSCFG_ICNGPUBWLCR_PMEN_Pos                                   (0U)
#define SYSCFG_ICNGPUBWLCR_PMEN_Msk                                   (0x1UL << SYSCFG_ICNGPUBWLCR_PMEN_Pos)                                     /*!< 0x00000001 */
#define SYSCFG_ICNGPUBWLCR_PMEN                                       SYSCFG_ICNGPUBWLCR_PMEN_Msk                                               /*!< Panic Mode Enable */
#define SYSCFG_ICNGPUBWLCR_BWLEN_Pos                                  (1U)
#define SYSCFG_ICNGPUBWLCR_BWLEN_Msk                                  (0x1UL << SYSCFG_ICNGPUBWLCR_BWLEN_Pos)                                    /*!< 0x00000002 */
#define SYSCFG_ICNGPUBWLCR_BWLEN                                      SYSCFG_ICNGPUBWLCR_BWLEN_Msk                                              /*!< Bandwidth limiter enable */
#define SYSCFG_ICNGPUBWLCR_PMRSTDLY_Pos                               (2U)
#define SYSCFG_ICNGPUBWLCR_PMRSTDLY_Msk                               (0x3UL << SYSCFG_ICNGPUBWLCR_PMRSTDLY_Pos)                                 /*!< 0x0000000C */
#define SYSCFG_ICNGPUBWLCR_PMRSTDLY                                   SYSCFG_ICNGPUBWLCR_PMRSTDLY_Msk                                           /*!< Panic Mode Restart Delay */
#define SYSCFG_ICNGPUBWLCR_MAXABW_Pos                                 (8U)
#define SYSCFG_ICNGPUBWLCR_MAXABW_Msk                                 (0xFFUL << SYSCFG_ICNGPUBWLCR_MAXABW_Pos)                                  /*!< 0x0000FF00 */
#define SYSCFG_ICNGPUBWLCR_MAXABW                                     SYSCFG_ICNGPUBWLCR_MAXABW_Msk                                             /*!< Maximum allowed Bandwidth */

/**************  Bit definition for SYSCFG_ICNE2EBWRCR register  **************/
#define SYSCFG_ICNE2EBWRCR_CFG_ENABLE_Pos                             (0U)
#define SYSCFG_ICNE2EBWRCR_CFG_ENABLE_Msk                             (0x1UL << SYSCFG_ICNE2EBWRCR_CFG_ENABLE_Pos)                               /*!< 0x00000001 */
#define SYSCFG_ICNE2EBWRCR_CFG_ENABLE                                 SYSCFG_ICNE2EBWRCR_CFG_ENABLE_Msk                                         /*!< Activates the end-to-end bandwidth regulation */
#define SYSCFG_ICNE2EBWRCR_CFG_MODEL_Pos                              (1U)
#define SYSCFG_ICNE2EBWRCR_CFG_MODEL_Msk                              (0x3UL << SYSCFG_ICNE2EBWRCR_CFG_MODEL_Pos)                                /*!< 0x00000006 */
#define SYSCFG_ICNE2EBWRCR_CFG_MODEL                                  SYSCFG_ICNE2EBWRCR_CFG_MODEL_Msk                                          /*!< Defines the reactivity of the regulation feedback */
#define SYSCFG_ICNE2EBWRCR_CFG_ALL_TGT_Pos                            (4U)
#define SYSCFG_ICNE2EBWRCR_CFG_ALL_TGT_Msk                            (0x7UL << SYSCFG_ICNE2EBWRCR_CFG_ALL_TGT_Pos)                              /*!< 0x00000070 */
#define SYSCFG_ICNE2EBWRCR_CFG_ALL_TGT                                SYSCFG_ICNE2EBWRCR_CFG_ALL_TGT_Msk                                        /*!< Amount of empty CAM slots in DDR-CTRL that the regulation targets */
#define SYSCFG_ICNE2EBWRCR_CFG_CPU1_BW_Pos                            (8U)
#define SYSCFG_ICNE2EBWRCR_CFG_CPU1_BW_Msk                            (0x1UL << SYSCFG_ICNE2EBWRCR_CFG_CPU1_BW_Pos)                              /*!< 0x00000100 */
#define SYSCFG_ICNE2EBWRCR_CFG_CPU1_BW                                SYSCFG_ICNE2EBWRCR_CFG_CPU1_BW_Msk                                        /*!< Triple the bandwidth allowed to the CPU1 by the regulation */
#define SYSCFG_ICNE2EBWRCR_CFG_HPDMA_BW_Pos                           (9U)
#define SYSCFG_ICNE2EBWRCR_CFG_HPDMA_BW_Msk                           (0x1UL << SYSCFG_ICNE2EBWRCR_CFG_HPDMA_BW_Pos)                             /*!< 0x00000200 */
#define SYSCFG_ICNE2EBWRCR_CFG_HPDMA_BW                               SYSCFG_ICNE2EBWRCR_CFG_HPDMA_BW_Msk                                       /*!< Triple the bandwidth (BW) allowed to HPDMA1/2/3 by the regulation */

/***************  Bit definition for SYSCFG_SAFERSTCR register  ***************/
#define SYSCFG_SAFERSTCR_CFG_ENABLE_Pos                               (0U)
#define SYSCFG_SAFERSTCR_CFG_ENABLE_Msk                               (0x1UL << SYSCFG_SAFERSTCR_CFG_ENABLE_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_SAFERSTCR_CFG_ENABLE                                   SYSCFG_SAFERSTCR_CFG_ENABLE_Msk                                           /*!< Activates the safe reset connector */

/**************  Bit definition for SYSCFG_ICNETHBWLCR register  **************/
#define SYSCFG_ICNETHBWLCR_BWLEN_Pos                                  (1U)
#define SYSCFG_ICNETHBWLCR_BWLEN_Msk                                  (0x1UL << SYSCFG_ICNETHBWLCR_BWLEN_Pos)                                    /*!< 0x00000002 */
#define SYSCFG_ICNETHBWLCR_BWLEN                                      SYSCFG_ICNETHBWLCR_BWLEN_Msk                                              /*!< Bandwidth limiter enable */
#define SYSCFG_ICNETHBWLCR_MAXABW_Pos                                 (8U)
#define SYSCFG_ICNETHBWLCR_MAXABW_Msk                                 (0xFFUL << SYSCFG_ICNETHBWLCR_MAXABW_Pos)                                  /*!< 0x0000FF00 */
#define SYSCFG_ICNETHBWLCR_MAXABW                                     SYSCFG_ICNETHBWLCR_MAXABW_Msk                                             /*!< Maximum allowed Bandwidth */

/*************  Bit definition for SYSCFG_ICNCPU1BWLCR register  **************/
#define SYSCFG_ICNCPU1BWLCR_BWLEN_Pos                                 (1U)
#define SYSCFG_ICNCPU1BWLCR_BWLEN_Msk                                 (0x1UL << SYSCFG_ICNCPU1BWLCR_BWLEN_Pos)                                   /*!< 0x00000002 */
#define SYSCFG_ICNCPU1BWLCR_BWLEN                                     SYSCFG_ICNCPU1BWLCR_BWLEN_Msk                                             /*!< Bandwidth limiter enable */
#define SYSCFG_ICNCPU1BWLCR_MAXABW_Pos                                (8U)
#define SYSCFG_ICNCPU1BWLCR_MAXABW_Msk                                (0xFFUL << SYSCFG_ICNCPU1BWLCR_MAXABW_Pos)                                 /*!< 0x0000FF00 */
#define SYSCFG_ICNCPU1BWLCR_MAXABW                                    SYSCFG_ICNCPU1BWLCR_MAXABW_Msk                                            /*!< Maximum allowed Bandwidth */

/*************  Bit definition for SYSCFG_ICNLTDCBWLCR register  **************/
#define SYSCFG_ICNLTDCBWLCR_BWLEN_Pos                                 (1U)
#define SYSCFG_ICNLTDCBWLCR_BWLEN_Msk                                 (0x1UL << SYSCFG_ICNLTDCBWLCR_BWLEN_Pos)                                   /*!< 0x00000002 */
#define SYSCFG_ICNLTDCBWLCR_BWLEN                                     SYSCFG_ICNLTDCBWLCR_BWLEN_Msk                                             /*!< Bandwidth limiter enable */
#define SYSCFG_ICNLTDCBWLCR_MAXABW_Pos                                (8U)
#define SYSCFG_ICNLTDCBWLCR_MAXABW_Msk                                (0xFFUL << SYSCFG_ICNLTDCBWLCR_MAXABW_Pos)                                 /*!< 0x0000FF00 */
#define SYSCFG_ICNLTDCBWLCR_MAXABW                                    SYSCFG_ICNLTDCBWLCR_MAXABW_Msk                                            /*!< Maximum allowed Bandwidth */

/************  Bit definition for SYSCFG_ICNDCMIPPBWLCR register  *************/
#define SYSCFG_ICNDCMIPPBWLCR_BWLEN_Pos                               (1U)
#define SYSCFG_ICNDCMIPPBWLCR_BWLEN_Msk                               (0x1UL << SYSCFG_ICNDCMIPPBWLCR_BWLEN_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_ICNDCMIPPBWLCR_BWLEN                                   SYSCFG_ICNDCMIPPBWLCR_BWLEN_Msk                                           /*!< Bandwidth limiter enable */
#define SYSCFG_ICNDCMIPPBWLCR_MAXABW_Pos                              (8U)
#define SYSCFG_ICNDCMIPPBWLCR_MAXABW_Msk                              (0xFFUL << SYSCFG_ICNDCMIPPBWLCR_MAXABW_Pos)                               /*!< 0x0000FF00 */
#define SYSCFG_ICNDCMIPPBWLCR_MAXABW                                  SYSCFG_ICNDCMIPPBWLCR_MAXABW_Msk                                          /*!< Maximum allowed Bandwidth */

/**************  Bit definition for SYSCFG_ICNVDEBWLCR register  **************/
#define SYSCFG_ICNVDEBWLCR_BWLEN_Pos                                  (1U)
#define SYSCFG_ICNVDEBWLCR_BWLEN_Msk                                  (0x1UL << SYSCFG_ICNVDEBWLCR_BWLEN_Pos)                                    /*!< 0x00000002 */
#define SYSCFG_ICNVDEBWLCR_BWLEN                                      SYSCFG_ICNVDEBWLCR_BWLEN_Msk                                              /*!< Bandwidth limiter enable */
#define SYSCFG_ICNVDEBWLCR_MAXABW_Pos                                 (8U)
#define SYSCFG_ICNVDEBWLCR_MAXABW_Msk                                 (0xFFUL << SYSCFG_ICNVDEBWLCR_MAXABW_Pos)                                  /*!< 0x0000FF00 */
#define SYSCFG_ICNVDEBWLCR_MAXABW                                     SYSCFG_ICNVDEBWLCR_MAXABW_Msk                                             /*!< Maximum allowed Bandwidth */

/***************  Bit definition for SYSCFG_HPDMAARCR register  ***************/
#define SYSCFG_HPDMAARCR_HPDMA1AREN_Pos                               (0U)
#define SYSCFG_HPDMAARCR_HPDMA1AREN_Msk                               (0x1UL << SYSCFG_HPDMAARCR_HPDMA1AREN_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_HPDMAARCR_HPDMA1AREN                                   SYSCFG_HPDMAARCR_HPDMA1AREN_Msk                                           /*!< Address remapping enable */
#define SYSCFG_HPDMAARCR_HPDMA2AREN_Pos                               (1U)
#define SYSCFG_HPDMAARCR_HPDMA2AREN_Msk                               (0x1UL << SYSCFG_HPDMAARCR_HPDMA2AREN_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_HPDMAARCR_HPDMA2AREN                                   SYSCFG_HPDMAARCR_HPDMA2AREN_Msk                                           /*!< Address remapping enable */
#define SYSCFG_HPDMAARCR_HPDMA3AREN_Pos                               (2U)
#define SYSCFG_HPDMAARCR_HPDMA3AREN_Msk                               (0x1UL << SYSCFG_HPDMAARCR_HPDMA3AREN_Pos)                                 /*!< 0x00000004 */
#define SYSCFG_HPDMAARCR_HPDMA3AREN                                   SYSCFG_HPDMAARCR_HPDMA3AREN_Msk                                           /*!< Address remapping enable */

/**************  Bit definition for SYSCFG_USB2PHY1CR register  ***************/
#define SYSCFG_USB2PHY1CR_RETENABLEN1_Pos                             (0U)
#define SYSCFG_USB2PHY1CR_RETENABLEN1_Msk                             (0x1UL << SYSCFG_USB2PHY1CR_RETENABLEN1_Pos)                               /*!< 0x00000001 */
#define SYSCFG_USB2PHY1CR_RETENABLEN1                                 SYSCFG_USB2PHY1CR_RETENABLEN1_Msk                                         /*!< Retention mode enable (active low) */
#define SYSCFG_USB2PHY1CR_AUTORSMENB1_Pos                             (1U)
#define SYSCFG_USB2PHY1CR_AUTORSMENB1_Msk                             (0x1UL << SYSCFG_USB2PHY1CR_AUTORSMENB1_Pos)                               /*!< 0x00000002 */
#define SYSCFG_USB2PHY1CR_AUTORSMENB1                                 SYSCFG_USB2PHY1CR_AUTORSMENB1_Msk                                         /*!< Auto-resume mode enable */
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN_Pos                             (2U)
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN_Msk                             (0x1UL << SYSCFG_USB2PHY1CR_USB2PHY1CMN_Pos)                               /*!< 0x00000004 */
#define SYSCFG_USB2PHY1CR_USB2PHY1CMN                                 SYSCFG_USB2PHY1CR_USB2PHY1CMN_Msk                                         /*!< Controls power down of analog blocks during Suspend and Sleep */
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL_Pos                             (4U)
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL_Msk                             (0x7UL << SYSCFG_USB2PHY1CR_USB2PHY1SEL_Pos)                               /*!< 0x00000070 */
#define SYSCFG_USB2PHY1CR_USB2PHY1SEL                                 SYSCFG_USB2PHY1CR_USB2PHY1SEL_Msk                                         /*!< PHY reference clock speed setting */

/*************  Bit definition for SYSCFG_USB2PHY1BCCR register  **************/
#define SYSCFG_USB2PHY1BCCR_H_CDPEN_Pos                               (0U)
#define SYSCFG_USB2PHY1BCCR_H_CDPEN_Msk                               (0x1UL << SYSCFG_USB2PHY1BCCR_H_CDPEN_Pos)                                 /*!< 0x00000001 */
#define SYSCFG_USB2PHY1BCCR_H_CDPEN                                   SYSCFG_USB2PHY1BCCR_H_CDPEN_Msk                                           /*!< CDP behavior for Host port enable */
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Pos                            (1U)
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Msk                            (0x1UL << SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Pos)                              /*!< 0x00000002 */
#define SYSCFG_USB2PHY1BCCR_H_CDPDETEN                                SYSCFG_USB2PHY1BCCR_H_CDPDETEN_Msk                                        /*!< Voltage detector on DP for CDP port enable */
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Pos                            (2U)
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Msk                            (0x1UL << SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Pos)                              /*!< 0x00000004 */
#define SYSCFG_USB2PHY1BCCR_H_VDMSRCEN                                SYSCFG_USB2PHY1BCCR_H_VDMSRCEN_Msk                                        /*!< Voltage source on DM for CDP port enable */
#define SYSCFG_USB2PHY1BCCR_H_FORCEBCMODE_Pos                         (3U)
#define SYSCFG_USB2PHY1BCCR_H_FORCEBCMODE_Msk                         (0x1UL << SYSCFG_USB2PHY1BCCR_H_FORCEBCMODE_Pos)                           /*!< 0x00000008 */
#define SYSCFG_USB2PHY1BCCR_H_FORCEBCMODE                             SYSCFG_USB2PHY1BCCR_H_FORCEBCMODE_Msk                                     /*!< Forces USB2PHY1 in non-driving suspend mode */

/*************  Bit definition for SYSCFG_USB2PHY1BCSR register  **************/
#define SYSCFG_USB2PHY1BCSR_CHGDET_Pos                                (0U)
#define SYSCFG_USB2PHY1BCSR_CHGDET_Msk                                (0x1UL << SYSCFG_USB2PHY1BCSR_CHGDET_Pos)                                  /*!< 0x00000001 */
#define SYSCFG_USB2PHY1BCSR_CHGDET                                    SYSCFG_USB2PHY1BCSR_CHGDET_Msk                                            /*!< Comparison of voltage on DP with VDAT_REF threshold as defined in BC v1 */
#define SYSCFG_USB2PHY1BCSR_FSVPLUS_Pos                               (1U)
#define SYSCFG_USB2PHY1BCSR_FSVPLUS_Msk                               (0x1UL << SYSCFG_USB2PHY1BCSR_FSVPLUS_Pos)                                 /*!< 0x00000002 */
#define SYSCFG_USB2PHY1BCSR_FSVPLUS                                   SYSCFG_USB2PHY1BCSR_FSVPLUS_Msk                                           /*!< Voltage level on DP (also output of the comparison with VLGC threshold, as defined in BC v1 */
#define SYSCFG_USB2PHY1BCSR_FSVMINUS_Pos                              (2U)
#define SYSCFG_USB2PHY1BCSR_FSVMINUS_Msk                              (0x1UL << SYSCFG_USB2PHY1BCSR_FSVMINUS_Pos)                                /*!< 0x00000004 */
#define SYSCFG_USB2PHY1BCSR_FSVMINUS                                  SYSCFG_USB2PHY1BCSR_FSVMINUS_Msk                                          /*!< Voltage level on DM (also output of the comparison with VLGC threshold, as defined in BC v1 */

/************  Bit definition for SYSCFG_USB2PHY1TRIM1CR register  ************/
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLITUNE_Pos                   (0U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLITUNE_Msk                   (0x3UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLITUNE_Pos)                     /*!< 0x00000003 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLITUNE                       SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLITUNE_Msk                               /*!< PLL integral path tune */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLPTUNE_Pos                   (2U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLPTUNE_Msk                   (0xFUL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLPTUNE_Pos)                     /*!< 0x0000003C */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLPTUNE                       SYSCFG_USB2PHY1TRIM1CR_USB2PHY1PLLPTUNE_Msk                               /*!< PLL proportional path tune */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1COMPDISTUNE_Pos                (6U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1COMPDISTUNE_Msk                (0x7UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1COMPDISTUNE_Pos)                  /*!< 0x000001C0 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1COMPDISTUNE                    SYSCFG_USB2PHY1TRIM1CR_USB2PHY1COMPDISTUNE_Msk                            /*!< Disconnect threshold adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1SQRXTUNE_Pos                   (9U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1SQRXTUNE_Msk                   (0x7UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1SQRXTUNE_Pos)                     /*!< 0x00000E00 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1SQRXTUNE                       SYSCFG_USB2PHY1TRIM1CR_USB2PHY1SQRXTUNE_Msk                               /*!< Squelch threshold adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1VDATREFTUNE_Pos                (12U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1VDATREFTUNE_Msk                (0x3UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1VDATREFTUNE_Pos)                  /*!< 0x00003000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1VDATREFTUNE                    SYSCFG_USB2PHY1TRIM1CR_USB2PHY1VDATREFTUNE_Msk                            /*!< Data detect voltage adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1OTGTUNE_Pos                    (14U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1OTGTUNE_Msk                    (0x7UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1OTGTUNE_Pos)                      /*!< 0x0001C000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1OTGTUNE                        SYSCFG_USB2PHY1TRIM1CR_USB2PHY1OTGTUNE_Msk                                /*!< VBUS valid threshold adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXHSXVTUNE_Pos                 (17U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXHSXVTUNE_Msk                 (0x3UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXHSXVTUNE_Pos)                   /*!< 0x00060000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXHSXVTUNE                     SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXHSXVTUNE_Msk                             /*!< Transmitter high-speed crossover adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXFSLSTUNE_Pos                 (19U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXFSLSTUNE_Msk                 (0xFUL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXFSLSTUNE_Pos)                   /*!< 0x00780000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXFSLSTUNE                     SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXFSLSTUNE_Msk                             /*!< Full-speed (FS)/low-speed (LS) source impedance adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXVREFTUNE_Pos                 (23U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXVREFTUNE_Msk                 (0xFUL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXVREFTUNE_Pos)                   /*!< 0x07800000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXVREFTUNE                     SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXVREFTUNE_Msk                             /*!< HS DC voltage level adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRISETUNE_Pos                 (27U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRISETUNE_Msk                 (0x3UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRISETUNE_Pos)                   /*!< 0x18000000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRISETUNE                     SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRISETUNE_Msk                             /*!< High-speed transmitter rise/fall time adjustment */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRESTUNE_Pos                  (29U)
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRESTUNE_Msk                  (0x3UL << SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRESTUNE_Pos)                    /*!< 0x60000000 */
#define SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRESTUNE                      SYSCFG_USB2PHY1TRIM1CR_USB2PHY1TXRESTUNE_Msk                              /*!< USB source impedance adjustment */

/************  Bit definition for SYSCFG_USB2PHY1TRIM2CR register  ************/
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPAMPTUNE_Pos            (0U)
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPAMPTUNE_Msk            (0x3UL << SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPAMPTUNE_Pos)              /*!< 0x00000003 */
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPAMPTUNE                SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPAMPTUNE_Msk                        /*!< HS transmitter preemphasis current control */
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPPULSETUNE_Pos          (2U)
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPPULSETUNE_Msk          (0x1UL << SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPPULSETUNE_Pos)            /*!< 0x00000004 */
#define SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPPULSETUNE              SYSCFG_USB2PHY1TRIM2CR_USB2PHY1TXPREEMPPULSETUNE_Msk                      /*!< HS transmitter preemphasis duration control */

/****************  Bit definition for SYSCFG_USBHCR register  *****************/
#define SYSCFG_USBHCR_USBH_OVRCUR_POLARITY_Pos                        (0U)
#define SYSCFG_USBHCR_USBH_OVRCUR_POLARITY_Msk                        (0x1UL << SYSCFG_USBHCR_USBH_OVRCUR_POLARITY_Pos)                          /*!< 0x00000001 */
#define SYSCFG_USBHCR_USBH_OVRCUR_POLARITY                            SYSCFG_USBHCR_USBH_OVRCUR_POLARITY_Msk                                    /*!< Polarity of USBH_OVRCUR alternate function */
#define SYSCFG_USBHCR_USBH_VBUSEN_POLARITY_Pos                        (1U)
#define SYSCFG_USBHCR_USBH_VBUSEN_POLARITY_Msk                        (0x1UL << SYSCFG_USBHCR_USBH_VBUSEN_POLARITY_Pos)                          /*!< 0x00000002 */
#define SYSCFG_USBHCR_USBH_VBUSEN_POLARITY                            SYSCFG_USBHCR_USBH_VBUSEN_POLARITY_Msk                                    /*!< Polarity of USBH_VBUSEN alternate function */

/***************  Bit definition for SYSCFG_USBHARCR register  ****************/
#define SYSCFG_USBHARCR_AREN_Pos                                      (0U)
#define SYSCFG_USBHARCR_AREN_Msk                                      (0x1UL << SYSCFG_USBHARCR_AREN_Pos)                                        /*!< 0x00000001 */
#define SYSCFG_USBHARCR_AREN                                          SYSCFG_USBHARCR_AREN_Msk                                                  /*!< Address remapping enable */

/**************  Bit definition for SYSCFG_USB2PHY2CR register  ***************/
#define SYSCFG_USB2PHY2CR_RETENABLEN2_Pos                             (0U)
#define SYSCFG_USB2PHY2CR_RETENABLEN2_Msk                             (0x1UL << SYSCFG_USB2PHY2CR_RETENABLEN2_Pos)                               /*!< 0x00000001 */
#define SYSCFG_USB2PHY2CR_RETENABLEN2                                 SYSCFG_USB2PHY2CR_RETENABLEN2_Msk                                         /*!< Retention mode enable (active low) */
#define SYSCFG_USB2PHY2CR_AUTORSMENB2_Pos                             (1U)
#define SYSCFG_USB2PHY2CR_AUTORSMENB2_Msk                             (0x1UL << SYSCFG_USB2PHY2CR_AUTORSMENB2_Pos)                               /*!< 0x00000002 */
#define SYSCFG_USB2PHY2CR_AUTORSMENB2                                 SYSCFG_USB2PHY2CR_AUTORSMENB2_Msk                                         /*!< Auto-resume mode enable */
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN_Pos                             (2U)
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN_Msk                             (0x1UL << SYSCFG_USB2PHY2CR_USB2PHY2CMN_Pos)                               /*!< 0x00000004 */
#define SYSCFG_USB2PHY2CR_USB2PHY2CMN                                 SYSCFG_USB2PHY2CR_USB2PHY2CMN_Msk                                         /*!< Control of power down of analog blocks during Suspend and Sleep */
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL_Pos                             (4U)
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL_Msk                             (0x7UL << SYSCFG_USB2PHY2CR_USB2PHY2SEL_Pos)                               /*!< 0x00000070 */
#define SYSCFG_USB2PHY2CR_USB2PHY2SEL                                 SYSCFG_USB2PHY2CR_USB2PHY2SEL_Msk                                         /*!< PHY reference clock speed setting */

/************  Bit definition for SYSCFG_USB2PHY2TRIM1CR register  ************/
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLITUNE_Pos                   (0U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLITUNE_Msk                   (0x3UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLITUNE_Pos)                     /*!< 0x00000003 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLITUNE                       SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLITUNE_Msk                               /*!< PLL integral path tune */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLPTUNE_Pos                   (2U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLPTUNE_Msk                   (0xFUL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLPTUNE_Pos)                     /*!< 0x0000003C */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLPTUNE                       SYSCFG_USB2PHY2TRIM1CR_USB2PHY2PLLPTUNE_Msk                               /*!< PLL proportional path tune */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2COMPDISTUNE_Pos                (6U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2COMPDISTUNE_Msk                (0x7UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2COMPDISTUNE_Pos)                  /*!< 0x000001C0 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2COMPDISTUNE                    SYSCFG_USB2PHY2TRIM1CR_USB2PHY2COMPDISTUNE_Msk                            /*!< Disconnect threshold adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2SQRXTUNE_Pos                   (9U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2SQRXTUNE_Msk                   (0x7UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2SQRXTUNE_Pos)                     /*!< 0x00000E00 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2SQRXTUNE                       SYSCFG_USB2PHY2TRIM1CR_USB2PHY2SQRXTUNE_Msk                               /*!< Squelch threshold adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2VDATREFTUNE_Pos                (12U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2VDATREFTUNE_Msk                (0x3UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2VDATREFTUNE_Pos)                  /*!< 0x00003000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2VDATREFTUNE                    SYSCFG_USB2PHY2TRIM1CR_USB2PHY2VDATREFTUNE_Msk                            /*!< Data detect voltage adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2OTGTUNE_Pos                    (14U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2OTGTUNE_Msk                    (0x7UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2OTGTUNE_Pos)                      /*!< 0x0001C000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2OTGTUNE                        SYSCFG_USB2PHY2TRIM1CR_USB2PHY2OTGTUNE_Msk                                /*!< VBUS valid threshold adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXHSXVTUNE_Pos                 (17U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXHSXVTUNE_Msk                 (0x3UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXHSXVTUNE_Pos)                   /*!< 0x00060000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXHSXVTUNE                     SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXHSXVTUNE_Msk                             /*!< Transmitter HS crossover adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXFSLSTUNE_Pos                 (19U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXFSLSTUNE_Msk                 (0xFUL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXFSLSTUNE_Pos)                   /*!< 0x00780000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXFSLSTUNE                     SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXFSLSTUNE_Msk                             /*!< Full-speed (FS)/low-speed (LS) source impedance adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXVREFTUNE_Pos                 (23U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXVREFTUNE_Msk                 (0xFUL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXVREFTUNE_Pos)                   /*!< 0x07800000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXVREFTUNE                     SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXVREFTUNE_Msk                             /*!< HS DC voltage level adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRISETUNE_Pos                 (27U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRISETUNE_Msk                 (0x3UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRISETUNE_Pos)                   /*!< 0x18000000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRISETUNE                     SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRISETUNE_Msk                             /*!< HS transmitter rise/fall time adjustment */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRESTUNE_Pos                  (29U)
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRESTUNE_Msk                  (0x3UL << SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRESTUNE_Pos)                    /*!< 0x60000000 */
#define SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRESTUNE                      SYSCFG_USB2PHY2TRIM1CR_USB2PHY2TXRESTUNE_Msk                              /*!< USB source impedance adjustment */

/************  Bit definition for SYSCFG_USB2PHY2TRIM2CR register  ************/
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPAMPTUNE_Pos            (0U)
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPAMPTUNE_Msk            (0x3UL << SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPAMPTUNE_Pos)              /*!< 0x00000003 */
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPAMPTUNE                SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPAMPTUNE_Msk                        /*!< HS transmitter preemphasis current control */
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPPULSETUNE_Pos          (2U)
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPPULSETUNE_Msk          (0x1UL << SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPPULSETUNE_Pos)            /*!< 0x00000004 */
#define SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPPULSETUNE              SYSCFG_USB2PHY2TRIM2CR_USB2PHY2TXPREEMPPULSETUNE_Msk                      /*!< HS transmitter preemphasis duration control */

/****************  Bit definition for SYSCFG_OTGARCR register  ****************/
#define SYSCFG_OTGARCR_AREN_Pos                                       (0U)
#define SYSCFG_OTGARCR_AREN_Msk                                       (0x1UL << SYSCFG_OTGARCR_AREN_Pos)                                         /*!< 0x00000001 */
#define SYSCFG_OTGARCR_AREN                                           SYSCFG_OTGARCR_AREN_Msk                                                   /*!< Address remapping enable */

/**************  Bit definition for SYSCFG_OCTOSPIAMCR register  **************/
#define SYSCFG_OCTOSPIAMCR_OCTOSPI_ADDRESS_MAPPING_Pos                (0U)
#define SYSCFG_OCTOSPIAMCR_OCTOSPI_ADDRESS_MAPPING_Msk                (0x7UL << SYSCFG_OCTOSPIAMCR_OCTOSPI_ADDRESS_MAPPING_Pos)                  /*!< 0x00000007 */
#define SYSCFG_OCTOSPIAMCR_OCTOSPI_ADDRESS_MAPPING                    SYSCFG_OCTOSPIAMCR_OCTOSPI_ADDRESS_MAPPING_Msk                            /*!< OCTOSPI1 and OCTOSPI2 address mapping */

/****************  Bit definition for SYSCFG_ETH1CR register  *****************/
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Pos                            (0U)
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Msk                            (0x1UL << SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Pos)                              /*!< 0x00000001 */
#define SYSCFG_ETH1CR_ETH1_REF_CLK_SEL                                SYSCFG_ETH1CR_ETH1_REF_CLK_SEL_Msk                                        /*!< Ethernet reference/RX clock selection */
#define SYSCFG_ETH1CR_ETH1_CLK_SEL_Pos                                (1U)
#define SYSCFG_ETH1CR_ETH1_CLK_SEL_Msk                                (0x1UL << SYSCFG_ETH1CR_ETH1_CLK_SEL_Pos)                                  /*!< 0x00000002 */
#define SYSCFG_ETH1CR_ETH1_CLK_SEL                                    SYSCFG_ETH1CR_ETH1_CLK_SEL_Msk                                            /*!< RGMII 125 MHz clock selection */
#define SYSCFG_ETH1CR_ETH1_SEL_Pos                                    (4U)
#define SYSCFG_ETH1CR_ETH1_SEL_Msk                                    (0x7UL << SYSCFG_ETH1CR_ETH1_SEL_Pos)                                      /*!< 0x00000070 */
#define SYSCFG_ETH1CR_ETH1_SEL                                        SYSCFG_ETH1CR_ETH1_SEL_Msk                                                /*!< Ethernet 1 PHY interface selection */

/****************  Bit definition for SYSCFG_ETH1SR register  *****************/
#define SYSCFG_ETH1SR_ETH1_TX_CLK_GATING_CTRL_Pos                     (0U)
#define SYSCFG_ETH1SR_ETH1_TX_CLK_GATING_CTRL_Msk                     (0x1UL << SYSCFG_ETH1SR_ETH1_TX_CLK_GATING_CTRL_Pos)                       /*!< 0x00000001 */
#define SYSCFG_ETH1SR_ETH1_TX_CLK_GATING_CTRL                         SYSCFG_ETH1SR_ETH1_TX_CLK_GATING_CTRL_Msk                                 /*!< Asserted when the MAC has entered Tx LPI mode */
#define SYSCFG_ETH1SR_ETH1_PWR_DOWN_ACK_Pos                           (1U)
#define SYSCFG_ETH1SR_ETH1_PWR_DOWN_ACK_Msk                           (0x1UL << SYSCFG_ETH1SR_ETH1_PWR_DOWN_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_ETH1SR_ETH1_PWR_DOWN_ACK                               SYSCFG_ETH1SR_ETH1_PWR_DOWN_ACK_Msk                                       /*!< Asserted when the power-down sequence start has been acknowledged */

/****************  Bit definition for SYSCFG_ETH2CR register  *****************/
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Pos                            (0U)
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Msk                            (0x1UL << SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Pos)                              /*!< 0x00000001 */
#define SYSCFG_ETH2CR_ETH2_REF_CLK_SEL                                SYSCFG_ETH2CR_ETH2_REF_CLK_SEL_Msk                                        /*!< Reference/RX clock selection */
#define SYSCFG_ETH2CR_ETH2_CLK_SEL_Pos                                (1U)
#define SYSCFG_ETH2CR_ETH2_CLK_SEL_Msk                                (0x1UL << SYSCFG_ETH2CR_ETH2_CLK_SEL_Pos)                                  /*!< 0x00000002 */
#define SYSCFG_ETH2CR_ETH2_CLK_SEL                                    SYSCFG_ETH2CR_ETH2_CLK_SEL_Msk                                            /*!< RGMII 125MHz clock selection */
#define SYSCFG_ETH2CR_ETH2_SEL_Pos                                    (4U)
#define SYSCFG_ETH2CR_ETH2_SEL_Msk                                    (0x7UL << SYSCFG_ETH2CR_ETH2_SEL_Pos)                                      /*!< 0x00000070 */
#define SYSCFG_ETH2CR_ETH2_SEL                                        SYSCFG_ETH2CR_ETH2_SEL_Msk                                                /*!< Ethernet 2 PHY interface selection */

/****************  Bit definition for SYSCFG_ETH2SR register  *****************/
#define SYSCFG_ETH2SR_ETH2_TX_CLK_GATING_CTRL_Pos                     (0U)
#define SYSCFG_ETH2SR_ETH2_TX_CLK_GATING_CTRL_Msk                     (0x1UL << SYSCFG_ETH2SR_ETH2_TX_CLK_GATING_CTRL_Pos)                       /*!< 0x00000001 */
#define SYSCFG_ETH2SR_ETH2_TX_CLK_GATING_CTRL                         SYSCFG_ETH2SR_ETH2_TX_CLK_GATING_CTRL_Msk                                 /*!< Asserted when the MAC has entered Tx LPI mode */
#define SYSCFG_ETH2SR_ETH2_PWR_DOWN_ACK_Pos                           (1U)
#define SYSCFG_ETH2SR_ETH2_PWR_DOWN_ACK_Msk                           (0x1UL << SYSCFG_ETH2SR_ETH2_PWR_DOWN_ACK_Pos)                             /*!< 0x00000002 */
#define SYSCFG_ETH2SR_ETH2_PWR_DOWN_ACK                               SYSCFG_ETH2SR_ETH2_PWR_DOWN_ACK_Msk                                       /*!< Asserted when the power-down sequence start has been acknowledged */

/**************  Bit definition for SYSCFG_VDDIO3CCCR register  ***************/
#define SYSCFG_VDDIO3CCCR_RANSRC_Pos                                  (0U)
#define SYSCFG_VDDIO3CCCR_RANSRC_Msk                                  (0xFUL << SYSCFG_VDDIO3CCCR_RANSRC_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_VDDIO3CCCR_RANSRC                                      SYSCFG_VDDIO3CCCR_RANSRC_Msk                                              /*!< NMOS compensation code of the I/Os supplied by VDDIO3 */
#define SYSCFG_VDDIO3CCCR_RAPSRC_Pos                                  (4U)
#define SYSCFG_VDDIO3CCCR_RAPSRC_Msk                                  (0xFUL << SYSCFG_VDDIO3CCCR_RAPSRC_Pos)                                    /*!< 0x000000F0 */
#define SYSCFG_VDDIO3CCCR_RAPSRC                                      SYSCFG_VDDIO3CCCR_RAPSRC_Msk                                              /*!< PMOS compensation code of the I/Os supplied by VDDIO3 */
#define SYSCFG_VDDIO3CCCR_EN_Pos                                      (8U)
#define SYSCFG_VDDIO3CCCR_EN_Msk                                      (0x1UL << SYSCFG_VDDIO3CCCR_EN_Pos)                                        /*!< 0x00000100 */
#define SYSCFG_VDDIO3CCCR_EN                                          SYSCFG_VDDIO3CCCR_EN_Msk                                                  /*!< I/Os supplied by VDDIO3 compensation cell enable */
#define SYSCFG_VDDIO3CCCR_CS_Pos                                      (9U)
#define SYSCFG_VDDIO3CCCR_CS_Msk                                      (0x1UL << SYSCFG_VDDIO3CCCR_CS_Pos)                                        /*!< 0x00000200 */
#define SYSCFG_VDDIO3CCCR_CS                                          SYSCFG_VDDIO3CCCR_CS_Msk                                                  /*!< I/Os supplied by VDDIO3 code selection */
#define SYSCFG_VDDIO3CCCR_LPMDIS_Pos                                  (10U)
#define SYSCFG_VDDIO3CCCR_LPMDIS_Msk                                  (0x1UL << SYSCFG_VDDIO3CCCR_LPMDIS_Pos)                                    /*!< 0x00000400 */
#define SYSCFG_VDDIO3CCCR_LPMDIS                                      SYSCFG_VDDIO3CCCR_LPMDIS_Msk                                              /*!< VDDIO3 I/Os Compensation cell low power mode disable */

/**************  Bit definition for SYSCFG_VDDIO3CCSR register  ***************/
#define SYSCFG_VDDIO3CCSR_ANSRC_Pos                                   (0U)
#define SYSCFG_VDDIO3CCSR_ANSRC_Msk                                   (0xFUL << SYSCFG_VDDIO3CCSR_ANSRC_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_VDDIO3CCSR_ANSRC                                       SYSCFG_VDDIO3CCSR_ANSRC_Msk                                               /*!< NMOS compensation value of the I/Os supplied by VDDIO3 */
#define SYSCFG_VDDIO3CCSR_APSRC_Pos                                   (4U)
#define SYSCFG_VDDIO3CCSR_APSRC_Msk                                   (0xFUL << SYSCFG_VDDIO3CCSR_APSRC_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_VDDIO3CCSR_APSRC                                       SYSCFG_VDDIO3CCSR_APSRC_Msk                                               /*!< PMOS compensation value of the I/Os supplied by VDDIO3 */
#define SYSCFG_VDDIO3CCSR_READY_Pos                                   (8U)
#define SYSCFG_VDDIO3CCSR_READY_Msk                                   (0x1UL << SYSCFG_VDDIO3CCSR_READY_Pos)                                     /*!< 0x00000100 */
#define SYSCFG_VDDIO3CCSR_READY                                       SYSCFG_VDDIO3CCSR_READY_Msk                                               /*!< VDDIO3 I/O compensation cell ready flag */

/**************  Bit definition for SYSCFG_VDDIO4CCCR register  ***************/
#define SYSCFG_VDDIO4CCCR_RANSRC_Pos                                  (0U)
#define SYSCFG_VDDIO4CCCR_RANSRC_Msk                                  (0xFUL << SYSCFG_VDDIO4CCCR_RANSRC_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_VDDIO4CCCR_RANSRC                                      SYSCFG_VDDIO4CCCR_RANSRC_Msk                                              /*!< NMOS compensation code of the I/Os supplied by VDDIO4 */
#define SYSCFG_VDDIO4CCCR_RAPSRC_Pos                                  (4U)
#define SYSCFG_VDDIO4CCCR_RAPSRC_Msk                                  (0xFUL << SYSCFG_VDDIO4CCCR_RAPSRC_Pos)                                    /*!< 0x000000F0 */
#define SYSCFG_VDDIO4CCCR_RAPSRC                                      SYSCFG_VDDIO4CCCR_RAPSRC_Msk                                              /*!< PMOS compensation code of the I/Os supplied by VDDIO4 */
#define SYSCFG_VDDIO4CCCR_EN_Pos                                      (8U)
#define SYSCFG_VDDIO4CCCR_EN_Msk                                      (0x1UL << SYSCFG_VDDIO4CCCR_EN_Pos)                                        /*!< 0x00000100 */
#define SYSCFG_VDDIO4CCCR_EN                                          SYSCFG_VDDIO4CCCR_EN_Msk                                                  /*!< VDDIO4 I/O compensation cell enable */
#define SYSCFG_VDDIO4CCCR_CS_Pos                                      (9U)
#define SYSCFG_VDDIO4CCCR_CS_Msk                                      (0x1UL << SYSCFG_VDDIO4CCCR_CS_Pos)                                        /*!< 0x00000200 */
#define SYSCFG_VDDIO4CCCR_CS                                          SYSCFG_VDDIO4CCCR_CS_Msk                                                  /*!< VDDIO4 I/O code selection */
#define SYSCFG_VDDIO4CCCR_LPMDIS_Pos                                  (10U)
#define SYSCFG_VDDIO4CCCR_LPMDIS_Msk                                  (0x1UL << SYSCFG_VDDIO4CCCR_LPMDIS_Pos)                                    /*!< 0x00000400 */
#define SYSCFG_VDDIO4CCCR_LPMDIS                                      SYSCFG_VDDIO4CCCR_LPMDIS_Msk                                              /*!< VDDIO4 I/Os Compensation cell low power mode disable */

/**************  Bit definition for SYSCFG_VDDIO4CCSR register  ***************/
#define SYSCFG_VDDIO4CCSR_ANSRC_Pos                                   (0U)
#define SYSCFG_VDDIO4CCSR_ANSRC_Msk                                   (0xFUL << SYSCFG_VDDIO4CCSR_ANSRC_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_VDDIO4CCSR_ANSRC                                       SYSCFG_VDDIO4CCSR_ANSRC_Msk                                               /*!< NMOS compensation value of the I/Os supplied by VDDIO4 */
#define SYSCFG_VDDIO4CCSR_APSRC_Pos                                   (4U)
#define SYSCFG_VDDIO4CCSR_APSRC_Msk                                   (0xFUL << SYSCFG_VDDIO4CCSR_APSRC_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_VDDIO4CCSR_APSRC                                       SYSCFG_VDDIO4CCSR_APSRC_Msk                                               /*!< PMOS compensation value of the I/Os supplied by VDDIO4 */
#define SYSCFG_VDDIO4CCSR_READY_Pos                                   (8U)
#define SYSCFG_VDDIO4CCSR_READY_Msk                                   (0x1UL << SYSCFG_VDDIO4CCSR_READY_Pos)                                     /*!< 0x00000100 */
#define SYSCFG_VDDIO4CCSR_READY                                       SYSCFG_VDDIO4CCSR_READY_Msk                                               /*!< VDDIO4 I/O compensation cell ready flag */

/****************  Bit definition for SYSCFG_VDDCCCR register  ****************/
#define SYSCFG_VDDCCCR_RANSRC_Pos                                     (0U)
#define SYSCFG_VDDCCCR_RANSRC_Msk                                     (0xFUL << SYSCFG_VDDCCCR_RANSRC_Pos)                                       /*!< 0x0000000F */
#define SYSCFG_VDDCCCR_RANSRC                                         SYSCFG_VDDCCCR_RANSRC_Msk                                                 /*!< NMOS compensation code of the I/Os supplied by VDD */
#define SYSCFG_VDDCCCR_RAPSRC_Pos                                     (4U)
#define SYSCFG_VDDCCCR_RAPSRC_Msk                                     (0xFUL << SYSCFG_VDDCCCR_RAPSRC_Pos)                                       /*!< 0x000000F0 */
#define SYSCFG_VDDCCCR_RAPSRC                                         SYSCFG_VDDCCCR_RAPSRC_Msk                                                 /*!< PMOS compensation code of the I/Os supplied by VDD */
#define SYSCFG_VDDCCCR_EN_Pos                                         (8U)
#define SYSCFG_VDDCCCR_EN_Msk                                         (0x1UL << SYSCFG_VDDCCCR_EN_Pos)                                           /*!< 0x00000100 */
#define SYSCFG_VDDCCCR_EN                                             SYSCFG_VDDCCCR_EN_Msk                                                     /*!< VDD I/O compensation cell enable */
#define SYSCFG_VDDCCCR_CS_Pos                                         (9U)
#define SYSCFG_VDDCCCR_CS_Msk                                         (0x1UL << SYSCFG_VDDCCCR_CS_Pos)                                           /*!< 0x00000200 */
#define SYSCFG_VDDCCCR_CS                                             SYSCFG_VDDCCCR_CS_Msk                                                     /*!< VDD I/O code selection */
#define SYSCFG_VDDCCCR_LPMDIS_Pos                                     (10U)
#define SYSCFG_VDDCCCR_LPMDIS_Msk                                     (0x1UL << SYSCFG_VDDCCCR_LPMDIS_Pos)                                       /*!< 0x00000400 */
#define SYSCFG_VDDCCCR_LPMDIS                                         SYSCFG_VDDCCCR_LPMDIS_Msk                                                 /*!< VDD I/Os Compensation cell low power mode disable */

/****************  Bit definition for SYSCFG_VDDCCSR register  ****************/
#define SYSCFG_VDDCCSR_ANSRC_Pos                                      (0U)
#define SYSCFG_VDDCCSR_ANSRC_Msk                                      (0xFUL << SYSCFG_VDDCCSR_ANSRC_Pos)                                        /*!< 0x0000000F */
#define SYSCFG_VDDCCSR_ANSRC                                          SYSCFG_VDDCCSR_ANSRC_Msk                                                  /*!< NMOS compensation value of the I/Os supplied by VDD */
#define SYSCFG_VDDCCSR_APSRC_Pos                                      (4U)
#define SYSCFG_VDDCCSR_APSRC_Msk                                      (0xFUL << SYSCFG_VDDCCSR_APSRC_Pos)                                        /*!< 0x000000F0 */
#define SYSCFG_VDDCCSR_APSRC                                          SYSCFG_VDDCCSR_APSRC_Msk                                                  /*!< PMOS compensation value of the I/Os supplied by VDD */
#define SYSCFG_VDDCCSR_READY_Pos                                      (8U)
#define SYSCFG_VDDCCSR_READY_Msk                                      (0x1UL << SYSCFG_VDDCCSR_READY_Pos)                                        /*!< 0x00000100 */
#define SYSCFG_VDDCCSR_READY                                          SYSCFG_VDDCCSR_READY_Msk                                                  /*!< VDD I/O compensation cell ready flag */

/**************  Bit definition for SYSCFG_VDDIO2CCCR register  ***************/
#define SYSCFG_VDDIO2CCCR_RANSRC_Pos                                  (0U)
#define SYSCFG_VDDIO2CCCR_RANSRC_Msk                                  (0xFUL << SYSCFG_VDDIO2CCCR_RANSRC_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_VDDIO2CCCR_RANSRC                                      SYSCFG_VDDIO2CCCR_RANSRC_Msk                                              /*!< NMOS compensation code of the I/Os supplied by VDDIO2 */
#define SYSCFG_VDDIO2CCCR_RAPSRC_Pos                                  (4U)
#define SYSCFG_VDDIO2CCCR_RAPSRC_Msk                                  (0xFUL << SYSCFG_VDDIO2CCCR_RAPSRC_Pos)                                    /*!< 0x000000F0 */
#define SYSCFG_VDDIO2CCCR_RAPSRC                                      SYSCFG_VDDIO2CCCR_RAPSRC_Msk                                              /*!< PMOS compensation code of the I/Os supplied by VDDIO2 */
#define SYSCFG_VDDIO2CCCR_EN_Pos                                      (8U)
#define SYSCFG_VDDIO2CCCR_EN_Msk                                      (0x1UL << SYSCFG_VDDIO2CCCR_EN_Pos)                                        /*!< 0x00000100 */
#define SYSCFG_VDDIO2CCCR_EN                                          SYSCFG_VDDIO2CCCR_EN_Msk                                                  /*!< VDDIO2 I/O compensation cell enable */
#define SYSCFG_VDDIO2CCCR_CS_Pos                                      (9U)
#define SYSCFG_VDDIO2CCCR_CS_Msk                                      (0x1UL << SYSCFG_VDDIO2CCCR_CS_Pos)                                        /*!< 0x00000200 */
#define SYSCFG_VDDIO2CCCR_CS                                          SYSCFG_VDDIO2CCCR_CS_Msk                                                  /*!< VDDIO2 I/O code selection */
#define SYSCFG_VDDIO2CCCR_LPMDIS_Pos                                  (10U)
#define SYSCFG_VDDIO2CCCR_LPMDIS_Msk                                  (0x1UL << SYSCFG_VDDIO2CCCR_LPMDIS_Pos)                                    /*!< 0x00000400 */
#define SYSCFG_VDDIO2CCCR_LPMDIS                                      SYSCFG_VDDIO2CCCR_LPMDIS_Msk                                              /*!< VDDIO2 I/Os Compensation cell low power mode disable */

/**************  Bit definition for SYSCFG_VDDIO2CCSR register  ***************/
#define SYSCFG_VDDIO2CCSR_ANSRC_Pos                                   (0U)
#define SYSCFG_VDDIO2CCSR_ANSRC_Msk                                   (0xFUL << SYSCFG_VDDIO2CCSR_ANSRC_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_VDDIO2CCSR_ANSRC                                       SYSCFG_VDDIO2CCSR_ANSRC_Msk                                               /*!< NMOS compensation value of the I/Os supplied by VDDIO2 */
#define SYSCFG_VDDIO2CCSR_APSRC_Pos                                   (4U)
#define SYSCFG_VDDIO2CCSR_APSRC_Msk                                   (0xFUL << SYSCFG_VDDIO2CCSR_APSRC_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_VDDIO2CCSR_APSRC                                       SYSCFG_VDDIO2CCSR_APSRC_Msk                                               /*!< PMOS compensation value of the I/Os supplied by VDDIO2 */
#define SYSCFG_VDDIO2CCSR_READY_Pos                                   (8U)
#define SYSCFG_VDDIO2CCSR_READY_Msk                                   (0x1UL << SYSCFG_VDDIO2CCSR_READY_Pos)                                     /*!< 0x00000100 */
#define SYSCFG_VDDIO2CCSR_READY                                       SYSCFG_VDDIO2CCSR_READY_Msk                                               /*!< VDDIO2 I/O compensation cell ready flag */

/**************  Bit definition for SYSCFG_VDDIO1CCCR register  ***************/
#define SYSCFG_VDDIO1CCCR_RANSRC_Pos                                  (0U)
#define SYSCFG_VDDIO1CCCR_RANSRC_Msk                                  (0xFUL << SYSCFG_VDDIO1CCCR_RANSRC_Pos)                                    /*!< 0x0000000F */
#define SYSCFG_VDDIO1CCCR_RANSRC                                      SYSCFG_VDDIO1CCCR_RANSRC_Msk                                              /*!< NMOS compensation code of the I/Os supplied by VDDIO1 */
#define SYSCFG_VDDIO1CCCR_RAPSRC_Pos                                  (4U)
#define SYSCFG_VDDIO1CCCR_RAPSRC_Msk                                  (0xFUL << SYSCFG_VDDIO1CCCR_RAPSRC_Pos)                                    /*!< 0x000000F0 */
#define SYSCFG_VDDIO1CCCR_RAPSRC                                      SYSCFG_VDDIO1CCCR_RAPSRC_Msk                                              /*!< PMOS compensation code of the I/Os supplied by VDDIO1 */
#define SYSCFG_VDDIO1CCCR_EN_Pos                                      (8U)
#define SYSCFG_VDDIO1CCCR_EN_Msk                                      (0x1UL << SYSCFG_VDDIO1CCCR_EN_Pos)                                        /*!< 0x00000100 */
#define SYSCFG_VDDIO1CCCR_EN                                          SYSCFG_VDDIO1CCCR_EN_Msk                                                  /*!< VDDIO1 I/O compensation cell enable */
#define SYSCFG_VDDIO1CCCR_CS_Pos                                      (9U)
#define SYSCFG_VDDIO1CCCR_CS_Msk                                      (0x1UL << SYSCFG_VDDIO1CCCR_CS_Pos)                                        /*!< 0x00000200 */
#define SYSCFG_VDDIO1CCCR_CS                                          SYSCFG_VDDIO1CCCR_CS_Msk                                                  /*!< VDDIO1 I/O code selection */
#define SYSCFG_VDDIO1CCCR_LPMDIS_Pos                                  (10U)
#define SYSCFG_VDDIO1CCCR_LPMDIS_Msk                                  (0x1UL << SYSCFG_VDDIO1CCCR_LPMDIS_Pos)                                    /*!< 0x00000400 */
#define SYSCFG_VDDIO1CCCR_LPMDIS                                      SYSCFG_VDDIO1CCCR_LPMDIS_Msk                                              /*!< VDDIO1 I/Os Compensation cell low power mode disable */

/**************  Bit definition for SYSCFG_VDDIO1CCSR register  ***************/
#define SYSCFG_VDDIO1CCSR_ANSRC_Pos                                   (0U)
#define SYSCFG_VDDIO1CCSR_ANSRC_Msk                                   (0xFUL << SYSCFG_VDDIO1CCSR_ANSRC_Pos)                                     /*!< 0x0000000F */
#define SYSCFG_VDDIO1CCSR_ANSRC                                       SYSCFG_VDDIO1CCSR_ANSRC_Msk                                               /*!< NMOS compensation value of the I/Os supplied by VDDIO1 */
#define SYSCFG_VDDIO1CCSR_APSRC_Pos                                   (4U)
#define SYSCFG_VDDIO1CCSR_APSRC_Msk                                   (0xFUL << SYSCFG_VDDIO1CCSR_APSRC_Pos)                                     /*!< 0x000000F0 */
#define SYSCFG_VDDIO1CCSR_APSRC                                       SYSCFG_VDDIO1CCSR_APSRC_Msk                                               /*!< PMOS compensation value of the I/Os supplied by VDDIO1 */
#define SYSCFG_VDDIO1CCSR_READY_Pos                                   (8U)
#define SYSCFG_VDDIO1CCSR_READY_Msk                                   (0x1UL << SYSCFG_VDDIO1CCSR_READY_Pos)                                     /*!< 0x00000100 */
#define SYSCFG_VDDIO1CCSR_READY                                       SYSCFG_VDDIO1CCSR_READY_Msk                                               /*!< VDDIO1 I/O compensation cell ready flag */

/******************  Bit definition for SYSCFG_CBR register  ******************/
#define SYSCFG_CBR_CLL_Pos                                            (0U)
#define SYSCFG_CBR_CLL_Msk                                            (0x1UL << SYSCFG_CBR_CLL_Pos)                                              /*!< 0x00000001 */
#define SYSCFG_CBR_CLL                                                SYSCFG_CBR_CLL_Msk                                                        /*!< Cortex-M33 LOCKUP (HardFault) output enable */
#define SYSCFG_CBR_PVDL_Pos                                           (2U)
#define SYSCFG_CBR_PVDL_Msk                                           (0x1UL << SYSCFG_CBR_PVDL_Pos)                                             /*!< 0x00000004 */
#define SYSCFG_CBR_PVDL                                               SYSCFG_CBR_PVDL_Msk                                                       /*!< PVD lock enable */
#define SYSCFG_CBR_BKRAML_Pos                                         (3U)
#define SYSCFG_CBR_BKRAML_Msk                                         (0x1UL << SYSCFG_CBR_BKRAML_Pos)                                           /*!< 0x00000008 */
#define SYSCFG_CBR_BKRAML                                             SYSCFG_CBR_BKRAML_Msk                                                     /*!< BKPSRAM double ECC error lock */
#define SYSCFG_CBR_RETRAML_Pos                                        (4U)
#define SYSCFG_CBR_RETRAML_Msk                                        (0x1UL << SYSCFG_CBR_RETRAML_Pos)                                          /*!< 0x00000010 */
#define SYSCFG_CBR_RETRAML                                            SYSCFG_CBR_RETRAML_Msk                                                    /*!< RETRAM double ECC error lock */

/*************  Bit definition for SYSCFG_DISPLAYCLKCR register  **************/
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Pos                         (0U)
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Msk                         (0x3UL << SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Pos)                           /*!< 0x00000003 */
#define SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL                             SYSCFG_DISPLAYCLKCR_PIXEL_CLK_SEL_Msk                                     /*!< Control of pixel clock output selection */

/**************  Bit definition for SYSCFG_HDPUSBDBGCR register  **************/
#define SYSCFG_HDPUSBDBGCR_SELUSBDBG_Pos                              (0U)
#define SYSCFG_HDPUSBDBGCR_SELUSBDBG_Msk                              (0x1UL << SYSCFG_HDPUSBDBGCR_SELUSBDBG_Pos)                                /*!< 0x00000001 */
#define SYSCFG_HDPUSBDBGCR_SELUSBDBG                                  SYSCFG_HDPUSBDBGCR_SELUSBDBG_Msk                                          /*!< Selects debug signals to be routed to the Hardware Debug Port */

/******************  Bit definition for SYSCFG_IDC register  ******************/
#define SYSCFG_IDC_DEV_ID_Pos                                         (0U)
#define SYSCFG_IDC_DEV_ID_Msk                                         (0xFFFUL << SYSCFG_IDC_DEV_ID_Pos)                                         /*!< 0x00000FFF */
#define SYSCFG_IDC_DEV_ID                                             SYSCFG_IDC_DEV_ID_Msk                                                     /*!< Device ID */
#define SYSCFG_IDC_REV_ID_Pos                                         (16U)
#define SYSCFG_IDC_REV_ID_Msk                                         (0xFFFFUL << SYSCFG_IDC_REV_ID_Pos)                                        /*!< 0xFFFF0000 */
#define SYSCFG_IDC_REV_ID                                             SYSCFG_IDC_REV_ID_Msk                                                     /*!< Device revision */

/*****************  Bit definition for SYSCFG_VERR register  ******************/
#define SYSCFG_VERR_MINREV_Pos                                        (0U)
#define SYSCFG_VERR_MINREV_Msk                                        (0xFUL << SYSCFG_VERR_MINREV_Pos)                                          /*!< 0x0000000F */
#define SYSCFG_VERR_MINREV                                            SYSCFG_VERR_MINREV_Msk                                                    /*!< SYSCFG minor revision */
#define SYSCFG_VERR_MAJREV_Pos                                        (4U)
#define SYSCFG_VERR_MAJREV_Msk                                        (0xFUL << SYSCFG_VERR_MAJREV_Pos)                                          /*!< 0x000000F0 */
#define SYSCFG_VERR_MAJREV                                            SYSCFG_VERR_MAJREV_Msk                                                    /*!< SYSCFG major revision */

/*****************  Bit definition for SYSCFG_IPIDR register  *****************/
#define SYSCFG_IPIDR_ID_Pos                                           (0U)
#define SYSCFG_IPIDR_ID_Msk                                           (0xFFFFFFFFUL << SYSCFG_IPIDR_ID_Pos)                                      /*!< 0xFFFFFFFF */
#define SYSCFG_IPIDR_ID                                               SYSCFG_IPIDR_ID_Msk                                                       /*!< SYSCFG identifier */

/*****************  Bit definition for SYSCFG_SIDR register  ******************/
#define SYSCFG_SIDR_SID_Pos                                           (0U)
#define SYSCFG_SIDR_SID_Msk                                           (0xFFFFFFFFUL << SYSCFG_SIDR_SID_Pos)                                      /*!< 0xFFFFFFFF */
#define SYSCFG_SIDR_SID                                               SYSCFG_SIDR_SID_Msk                                                       /*!< Size identification */

/******************************************************************************/
/*                                                                            */
/*                     Tamper and backup register (TAMP)                      */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for TAMP_CR1 register  *****************/
#define TAMP_CR1_TAMP1E_Pos          (0U)
#define TAMP_CR1_TAMP1E_Msk          (0x1UL << TAMP_CR1_TAMP1E_Pos)                      /*!< 0x00000001U */
#define TAMP_CR1_TAMP1E              TAMP_CR1_TAMP1E_Msk
#define TAMP_CR1_TAMP2E_Pos          (1U)
#define TAMP_CR1_TAMP2E_Msk          (0x1UL << TAMP_CR1_TAMP2E_Pos)                      /*!< 0x00000002U */
#define TAMP_CR1_TAMP2E              TAMP_CR1_TAMP2E_Msk
#define TAMP_CR1_TAMP3E_Pos          (2U)
#define TAMP_CR1_TAMP3E_Msk          (0x1UL << TAMP_CR1_TAMP3E_Pos)                      /*!< 0x00000004U */
#define TAMP_CR1_TAMP3E              TAMP_CR1_TAMP3E_Msk
#define TAMP_CR1_TAMP4E_Pos          (3U)
#define TAMP_CR1_TAMP4E_Msk          (0x1UL << TAMP_CR1_TAMP4E_Pos)                      /*!< 0x00000008U */
#define TAMP_CR1_TAMP4E              TAMP_CR1_TAMP4E_Msk
#define TAMP_CR1_TAMP5E_Pos          (4U)
#define TAMP_CR1_TAMP5E_Msk          (0x1UL << TAMP_CR1_TAMP5E_Pos)                      /*!< 0x00000010U */
#define TAMP_CR1_TAMP5E              TAMP_CR1_TAMP5E_Msk
#define TAMP_CR1_TAMP6E_Pos          (5U)
#define TAMP_CR1_TAMP6E_Msk          (0x1UL << TAMP_CR1_TAMP6E_Pos)                      /*!< 0x00000020U */
#define TAMP_CR1_TAMP6E              TAMP_CR1_TAMP6E_Msk
#define TAMP_CR1_TAMP7E_Pos          (6U)
#define TAMP_CR1_TAMP7E_Msk          (0x1UL << TAMP_CR1_TAMP7E_Pos)                      /*!< 0x00000040U */
#define TAMP_CR1_TAMP7E              TAMP_CR1_TAMP7E_Msk
#define TAMP_CR1_ITAMP1E_Pos         (16U)
#define TAMP_CR1_ITAMP1E_Msk         (0x1UL << TAMP_CR1_ITAMP1E_Pos)                     /*!< 0x00010000U */
#define TAMP_CR1_ITAMP1E             TAMP_CR1_ITAMP1E_Msk
#define TAMP_CR1_ITAMP2E_Pos         (17U)
#define TAMP_CR1_ITAMP2E_Msk         (0x1UL << TAMP_CR1_ITAMP2E_Pos)                     /*!< 0x00040000U */
#define TAMP_CR1_ITAMP2E             TAMP_CR1_ITAMP2E_Msk
#define TAMP_CR1_ITAMP3E_Pos         (18U)
#define TAMP_CR1_ITAMP3E_Msk         (0x1UL << TAMP_CR1_ITAMP3E_Pos)                     /*!< 0x00040000U */
#define TAMP_CR1_ITAMP3E             TAMP_CR1_ITAMP3E_Msk
#define TAMP_CR1_ITAMP4E_Pos         (19U)
#define TAMP_CR1_ITAMP4E_Msk         (0x1UL << TAMP_CR1_ITAMP4E_Pos)                     /*!< 0x00080000U */
#define TAMP_CR1_ITAMP4E             TAMP_CR1_ITAMP4E_Msk
#define TAMP_CR1_ITAMP5E_Pos         (20U)
#define TAMP_CR1_ITAMP5E_Msk         (0x1UL << TAMP_CR1_ITAMP5E_Pos)                     /*!< 0x00100000U */
#define TAMP_CR1_ITAMP5E             TAMP_CR1_ITAMP5E_Msk
#define TAMP_CR1_ITAMP6E_Pos         (21U)
#define TAMP_CR1_ITAMP6E_Msk         (0x1UL << TAMP_CR1_ITAMP6E_Pos)                     /*!< 0x00200000U */
#define TAMP_CR1_ITAMP6E             TAMP_CR1_ITAMP6E_Msk
#define TAMP_CR1_ITAMP7E_Pos         (22U)
#define TAMP_CR1_ITAMP7E_Msk         (0x1UL << TAMP_CR1_ITAMP7E_Pos)                     /*!< 0x00400000U */
#define TAMP_CR1_ITAMP7E             TAMP_CR1_ITAMP7E_Msk
#define TAMP_CR1_ITAMP8E_Pos         (23U)
#define TAMP_CR1_ITAMP8E_Msk         (0x1UL << TAMP_CR1_ITAMP8E_Pos)                     /*!< 0x00800000U */
#define TAMP_CR1_ITAMP8E             TAMP_CR1_ITAMP8E_Msk
#define TAMP_CR1_ITAMP9E_Pos         (24U)
#define TAMP_CR1_ITAMP9E_Msk         (0x1UL << TAMP_CR1_ITAMP9E_Pos)                     /*!< 0x01000000U */
#define TAMP_CR1_ITAMP9E             TAMP_CR1_ITAMP9E_Msk
#define TAMP_CR1_ITAMP10E_Pos        (25U)
#define TAMP_CR1_ITAMP10E_Msk        (0x1UL << TAMP_CR1_ITAMP10E_Pos)                    /*!< 0x02000000U */
#define TAMP_CR1_ITAMP10E            TAMP_CR1_ITAMP10E_Msk
#define TAMP_CR1_ITAMP11E_Pos        (26U)
#define TAMP_CR1_ITAMP11E_Msk        (0x1UL << TAMP_CR1_ITAMP11E_Pos)                    /*!< 0x04000000U */
#define TAMP_CR1_ITAMP11E            TAMP_CR1_ITAMP11E_Msk
#define TAMP_CR1_ITAMP12E_Pos        (27U)
#define TAMP_CR1_ITAMP12E_Msk        (0x1UL << TAMP_CR1_ITAMP12E_Pos)                    /*!< 0x08000000U */
#define TAMP_CR1_ITAMP12E            TAMP_CR1_ITAMP12E_Msk
#define TAMP_CR1_ITAMP13E_Pos        (28U)
#define TAMP_CR1_ITAMP13E_Msk        (0x1UL << TAMP_CR1_ITAMP13E_Pos)                    /*!< 0x10000000U */
#define TAMP_CR1_ITAMP13E            TAMP_CR1_ITAMP13E_Msk
#define TAMP_CR1_ITAMP14E_Pos        (29U)
#define TAMP_CR1_ITAMP14E_Msk        (0x1UL << TAMP_CR1_ITAMP14E_Pos)                    /*!< 0x20000000U */
#define TAMP_CR1_ITAMP14E            TAMP_CR1_ITAMP14E_Msk
#define TAMP_CR1_ITAMP15E_Pos        (30U)
#define TAMP_CR1_ITAMP15E_Msk        (0x1UL << TAMP_CR1_ITAMP15E_Pos)                    /*!< 0x40000000U */
#define TAMP_CR1_ITAMP15E            TAMP_CR1_ITAMP15E_Msk
#define TAMP_CR1_ITAMP16E_Pos        (31U)
#define TAMP_CR1_ITAMP16E_Msk        (0x1UL << TAMP_CR1_ITAMP16E_Pos)                    /*!< 0x80000000U */
#define TAMP_CR1_ITAMP16E            TAMP_CR1_ITAMP16E_Msk

/********************  Bits definition for TAMP_CR2 register  *****************/
#define TAMP_CR2_TAMP1NOER_Pos       (0U)
#define TAMP_CR2_TAMP1NOER_Msk       (0x1UL << TAMP_CR2_TAMP1NOER_Pos)                   /*!< 0x00000001U */
#define TAMP_CR2_TAMP1NOER           TAMP_CR2_TAMP1NOER_Msk
#define TAMP_CR2_TAMP2NOER_Pos       (1U)
#define TAMP_CR2_TAMP2NOER_Msk       (0x1UL << TAMP_CR2_TAMP2NOER_Pos)                   /*!< 0x00000002U */
#define TAMP_CR2_TAMP2NOER           TAMP_CR2_TAMP2NOER_Msk
#define TAMP_CR2_TAMP3NOER_Pos       (2U)
#define TAMP_CR2_TAMP3NOER_Msk       (0x1UL << TAMP_CR2_TAMP3NOER_Pos)                   /*!< 0x00000004U */
#define TAMP_CR2_TAMP3NOER           TAMP_CR2_TAMP3NOER_Msk
#define TAMP_CR2_TAMP4NOER_Pos       (3U)
#define TAMP_CR2_TAMP4NOER_Msk       (0x1UL << TAMP_CR2_TAMP4NOER_Pos)                   /*!< 0x00000008U */
#define TAMP_CR2_TAMP4NOER           TAMP_CR2_TAMP4NOER_Msk
#define TAMP_CR2_TAMP5NOER_Pos       (4U)
#define TAMP_CR2_TAMP5NOER_Msk       (0x1UL << TAMP_CR2_TAMP5NOER_Pos)                   /*!< 0x00000010U */
#define TAMP_CR2_TAMP5NOER           TAMP_CR2_TAMP5NOER_Msk
#define TAMP_CR2_TAMP6NOER_Pos       (5U)
#define TAMP_CR2_TAMP6NOER_Msk       (0x1UL << TAMP_CR2_TAMP6NOER_Pos)                   /*!< 0x00000020U */
#define TAMP_CR2_TAMP6NOER           TAMP_CR2_TAMP6NOER_Msk
#define TAMP_CR2_TAMP7NOER_Pos       (6U)
#define TAMP_CR2_TAMP7NOER_Msk       (0x1UL << TAMP_CR2_TAMP7NOER_Pos)                   /*!< 0x00000040U */
#define TAMP_CR2_TAMP7NOER           TAMP_CR2_TAMP7NOER_Msk
#define TAMP_CR2_TAMP1MSK_Pos        (16U)
#define TAMP_CR2_TAMP1MSK_Msk        (0x1UL << TAMP_CR2_TAMP1MSK_Pos)                    /*!< 0x00010000U */
#define TAMP_CR2_TAMP1MSK            TAMP_CR2_TAMP1MSK_Msk
#define TAMP_CR2_TAMP2MSK_Pos        (17U)
#define TAMP_CR2_TAMP2MSK_Msk        (0x1UL << TAMP_CR2_TAMP2MSK_Pos)                    /*!< 0x00020000U */
#define TAMP_CR2_TAMP2MSK            TAMP_CR2_TAMP2MSK_Msk
#define TAMP_CR2_TAMP3MSK_Pos        (18U)
#define TAMP_CR2_TAMP3MSK_Msk        (0x1UL << TAMP_CR2_TAMP3MSK_Pos)                    /*!< 0x00040000U */
#define TAMP_CR2_TAMP3MSK            TAMP_CR2_TAMP3MSK_Msk
#define TAMP_CR2_BKERASE_Pos         (23U)
#define TAMP_CR2_BKERASE_Msk         (0x1UL << TAMP_CR2_BKERASE_Pos)                     /*!< 0x00800000U */
#define TAMP_CR2_BKERASE             TAMP_CR2_BKERASE_Msk
#define TAMP_CR2_TAMP1TRG_Pos        (24U)
#define TAMP_CR2_TAMP1TRG_Msk        (0x1UL << TAMP_CR2_TAMP1TRG_Pos)                    /*!< 0x01000000U */
#define TAMP_CR2_TAMP1TRG            TAMP_CR2_TAMP1TRG_Msk
#define TAMP_CR2_TAMP2TRG_Pos        (25U)
#define TAMP_CR2_TAMP2TRG_Msk        (0x1UL << TAMP_CR2_TAMP2TRG_Pos)                    /*!< 0x02000000U */
#define TAMP_CR2_TAMP2TRG            TAMP_CR2_TAMP2TRG_Msk
#define TAMP_CR2_TAMP3TRG_Pos        (26U)
#define TAMP_CR2_TAMP3TRG_Msk        (0x1UL << TAMP_CR2_TAMP3TRG_Pos)                    /*!< 0x04000000U */
#define TAMP_CR2_TAMP3TRG            TAMP_CR2_TAMP3TRG_Msk
#define TAMP_CR2_TAMP4TRG_Pos        (27U)
#define TAMP_CR2_TAMP4TRG_Msk        (0x1UL << TAMP_CR2_TAMP4TRG_Pos)                    /*!< 0x08000000U */
#define TAMP_CR2_TAMP4TRG            TAMP_CR2_TAMP4TRG_Msk
#define TAMP_CR2_TAMP5TRG_Pos        (28U)
#define TAMP_CR2_TAMP5TRG_Msk        (0x1UL << TAMP_CR2_TAMP5TRG_Pos)                    /*!< 0x10000000U */
#define TAMP_CR2_TAMP5TRG            TAMP_CR2_TAMP5TRG_Msk
#define TAMP_CR2_TAMP6TRG_Pos        (29U)
#define TAMP_CR2_TAMP6TRG_Msk        (0x1UL << TAMP_CR2_TAMP6TRG_Pos)                    /*!< 0x20000000U */
#define TAMP_CR2_TAMP6TRG            TAMP_CR2_TAMP6TRG_Msk
#define TAMP_CR2_TAMP7TRG_Pos        (30U)
#define TAMP_CR2_TAMP7TRG_Msk        (0x1UL << TAMP_CR2_TAMP7TRG_Pos)                    /*!< 0x40000000U */
#define TAMP_CR2_TAMP7TRG            TAMP_CR2_TAMP7TRG_Msk

/********************  Bits definition for TAMP_CR3 register  *****************/
#define TAMP_CR3_ITAMP1NOER_Pos      (0U)
#define TAMP_CR3_ITAMP1NOER_Msk      (0x1UL << TAMP_CR3_ITAMP1NOER_Pos)                  /*!< 0x00000001U */
#define TAMP_CR3_ITAMP1NOER          TAMP_CR3_ITAMP1NOER_Msk
#define TAMP_CR3_ITAMP2NOER_Pos      (1U)
#define TAMP_CR3_ITAMP2NOER_Msk      (0x1UL << TAMP_CR3_ITAMP2NOER_Pos)                  /*!< 0x00000002U */
#define TAMP_CR3_ITAMP2NOER          TAMP_CR3_ITAMP2NOER_Msk
#define TAMP_CR3_ITAMP3NOER_Pos      (2U)
#define TAMP_CR3_ITAMP3NOER_Msk      (0x1UL << TAMP_CR3_ITAMP3NOER_Pos)                  /*!< 0x00000004U */
#define TAMP_CR3_ITAMP3NOER          TAMP_CR3_ITAMP3NOER_Msk
#define TAMP_CR3_ITAMP4NOER_Pos      (3U)
#define TAMP_CR3_ITAMP4NOER_Msk      (0x1UL << TAMP_CR3_ITAMP4NOER_Pos)                  /*!< 0x00000008U */
#define TAMP_CR3_ITAMP4NOER          TAMP_CR3_ITAMP4NOER_Msk
#define TAMP_CR3_ITAMP5NOER_Pos      (4U)
#define TAMP_CR3_ITAMP5NOER_Msk      (0x1UL << TAMP_CR3_ITAMP5NOER_Pos)                  /*!< 0x00000010U */
#define TAMP_CR3_ITAMP5NOER          TAMP_CR3_ITAMP5NOER_Msk
#define TAMP_CR3_ITAMP6NOER_Pos      (5U)
#define TAMP_CR3_ITAMP6NOER_Msk      (0x1UL << TAMP_CR3_ITAMP6NOER_Pos)                  /*!< 0x00000020U */
#define TAMP_CR3_ITAMP6NOER          TAMP_CR3_ITAMP6NOER_Msk
#define TAMP_CR3_ITAMP7NOER_Pos      (6U)
#define TAMP_CR3_ITAMP7NOER_Msk      (0x1UL << TAMP_CR3_ITAMP7NOER)                      /*!< 0x00000040U */
#define TAMP_CR3_ITAMP7NOER          TAMP_CR3_ITAMP7NOER_Msk
#define TAMP_CR3_ITAMP8NOER_Pos      (7U)
#define TAMP_CR3_ITAMP8NOER_Msk      (0x1UL << TAMP_CR3_ITAMP8NOER_Pos)                  /*!< 0x00000080U */
#define TAMP_CR3_ITAMP8NOER          TAMP_CR3_ITAMP8NOER_Msk
#define TAMP_CR3_ITAMP9NOER_Pos      (8U)
#define TAMP_CR3_ITAMP9NOER_Msk      (0x1UL << TAMP_CR3_ITAMP9NOER_Pos)                  /*!< 0x00000100U */
#define TAMP_CR3_ITAMP9NOER          TAMP_CR3_ITAMP9NOER_Msk
#define TAMP_CR3_ITAMP10NOER_Pos     (9U)
#define TAMP_CR3_ITAMP10NOER_Msk     (0x1UL << TAMP_CR3_ITAMP10NOER_Pos)                 /*!< 0x00000200U */
#define TAMP_CR3_ITAMP10NOER         TAMP_CR3_ITAMP10NOER_Msk
#define TAMP_CR3_ITAMP11NOER_Pos     (10U)
#define TAMP_CR3_ITAMP11NOER_Msk     (0x1UL << TAMP_CR3_ITAMP11NOER_Pos)                 /*!< 0x00000400U */
#define TAMP_CR3_ITAMP11NOER         TAMP_CR3_ITAMP11NOER_Msk
#define TAMP_CR3_ITAMP12NOER_Pos     (11U)
#define TAMP_CR3_ITAMP12NOER_Msk     (0x1UL << TAMP_CR3_ITAMP12NOER_Pos)                 /*!< 0x00000800U */
#define TAMP_CR3_ITAMP12NOER         TAMP_CR3_ITAMP12NOER_Msk
#define TAMP_CR3_ITAMP13NOER_Pos     (12U)
#define TAMP_CR3_ITAMP13NOER_Msk     (0x1UL << TAMP_CR3_ITAMP13NOER_Pos)                 /*!< 0x00001000U */
#define TAMP_CR3_ITAMP13NOER         TAMP_CR3_ITAMP13NOER_Msk
#define TAMP_CR3_ITAMP14NOER_Pos     (13U)
#define TAMP_CR3_ITAMP14NOER_Msk     (0x1UL << TAMP_CR3_ITAMP14NOER_Pos)                 /*!< 0x00002000U */
#define TAMP_CR3_ITAMP14NOER         TAMP_CR3_ITAMP14NOER_Msk
#define TAMP_CR3_ITAMP15NOER_Pos     (14U)
#define TAMP_CR3_ITAMP15NOER_Msk     (0x1UL << TAMP_CR3_ITAMP15NOER_Pos)                 /*!< 0x00004000U */
#define TAMP_CR3_ITAMP15NOER         TAMP_CR3_ITAMP15NOER_Msk
#define TAMP_CR3_ITAMP16NOER_Pos     (15U)
#define TAMP_CR3_ITAMP16NOER_Msk     (0x1UL << TAMP_CR3_ITAMP16NOER_Pos)                 /*!< 0x00008000U */
#define TAMP_CR3_ITAMP16NOER         TAMP_CR3_ITAMP16NOER_Msk

/********************  Bits definition for TAMP_FLTCR register  ***************/
#define TAMP_FLTCR_TAMPFREQ_Pos      (0U)
#define TAMP_FLTCR_TAMPFREQ_Msk      (0x7UL << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000007U */
#define TAMP_FLTCR_TAMPFREQ          TAMP_FLTCR_TAMPFREQ_Msk
#define TAMP_FLTCR_TAMPFREQ_0        (0x1UL << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000001U */
#define TAMP_FLTCR_TAMPFREQ_1        (0x2UL << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000002U */
#define TAMP_FLTCR_TAMPFREQ_2        (0x4UL << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000004U */
#define TAMP_FLTCR_TAMPFLT_Pos       (3U)
#define TAMP_FLTCR_TAMPFLT_Msk       (0x3UL << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000018U */
#define TAMP_FLTCR_TAMPFLT           TAMP_FLTCR_TAMPFLT_Msk
#define TAMP_FLTCR_TAMPFLT_0         (0x1UL << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000008U */
#define TAMP_FLTCR_TAMPFLT_1         (0x2UL << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000010U */
#define TAMP_FLTCR_TAMPPRCH_Pos      (5U)
#define TAMP_FLTCR_TAMPPRCH_Msk      (0x3UL << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000060U */
#define TAMP_FLTCR_TAMPPRCH          TAMP_FLTCR_TAMPPRCH_Msk
#define TAMP_FLTCR_TAMPPRCH_0        (0x1UL << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000020U */
#define TAMP_FLTCR_TAMPPRCH_1        (0x2UL << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000040U */
#define TAMP_FLTCR_TAMPPUDIS_Pos     (7U)
#define TAMP_FLTCR_TAMPPUDIS_Msk     (0x1UL << TAMP_FLTCR_TAMPPUDIS_Pos)                 /*!< 0x00000080U */
#define TAMP_FLTCR_TAMPPUDIS         TAMP_FLTCR_TAMPPUDIS_Msk

/********************  Bits definition for TAMP_ATCR1 register  ***************/
#define TAMP_ATCR1_TAMP1AM_Pos       (0U)
#define TAMP_ATCR1_TAMP1AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP1AM_Pos)                     /*!< 0x00000001U */
#define TAMP_ATCR1_TAMP1AM           TAMP_ATCR1_TAMP1AM_Msk
#define TAMP_ATCR1_TAMP2AM_Pos       (1U)
#define TAMP_ATCR1_TAMP2AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP2AM_Pos)                     /*!< 0x00000002U */
#define TAMP_ATCR1_TAMP2AM           TAMP_ATCR1_TAMP2AM_Msk
#define TAMP_ATCR1_TAMP3AM_Pos       (2U)
#define TAMP_ATCR1_TAMP3AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP3AM_Pos)                     /*!< 0x00000004U */
#define TAMP_ATCR1_TAMP3AM           TAMP_ATCR1_TAMP3AM_Msk
#define TAMP_ATCR1_TAMP4AM_Pos       (3U)
#define TAMP_ATCR1_TAMP4AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP4AM_Pos)                     /*!< 0x00000008U */
#define TAMP_ATCR1_TAMP4AM           TAMP_ATCR1_TAMP4AM_Msk
#define TAMP_ATCR1_TAMP5AM_Pos       (4U)
#define TAMP_ATCR1_TAMP5AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP5AM_Pos)                     /*!< 0x00000010U */
#define TAMP_ATCR1_TAMP5AM           TAMP_ATCR1_TAMP5AM_Msk
#define TAMP_ATCR1_TAMP6AM_Pos       (5U)
#define TAMP_ATCR1_TAMP6AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP6AM_Pos)                     /*!< 0x00000010U */
#define TAMP_ATCR1_TAMP6AM           TAMP_ATCR1_TAMP6AM_Msk
#define TAMP_ATCR1_TAMP7AM_Pos       (6U)
#define TAMP_ATCR1_TAMP7AM_Msk       (0x1UL<<TAMP_ATCR1_TAMP7AM_Pos)                     /*!< 0x00000040U */
#define TAMP_ATCR1_TAMP7AM           TAMP_ATCR1_TAMP7AM_Msk
#define TAMP_ATCR1_ATOSEL1_Pos       (8U)
#define TAMP_ATCR1_ATOSEL1_Msk       (0x3UL<<TAMP_ATCR1_ATOSEL1_Pos)                     /*!< 0x00000300U */
#define TAMP_ATCR1_ATOSEL1            TAMP_ATCR1_ATOSEL1_Msk
#define TAMP_ATCR1_ATOSEL1_0         (0x1UL << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000100U */
#define TAMP_ATCR1_ATOSEL1_1         (0x2UL << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000200U */
#define TAMP_ATCR1_ATOSEL2_Pos       (10U)
#define TAMP_ATCR1_ATOSEL2_Msk       (0x3UL<<TAMP_ATCR1_ATOSEL2_Pos)                     /*!< 0x00000C00U */
#define TAMP_ATCR1_ATOSEL2            TAMP_ATCR1_ATOSEL2_Msk
#define TAMP_ATCR1_ATOSEL2_0         (0x1UL << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000400U */
#define TAMP_ATCR1_ATOSEL2_1         (0x2UL << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000800U */
#define TAMP_ATCR1_ATOSEL3_Pos       (12U)
#define TAMP_ATCR1_ATOSEL3_Msk       (0x3UL<<TAMP_ATCR1_ATOSEL3_Pos)                     /*!< 0x00003000U */
#define TAMP_ATCR1_ATOSEL3            TAMP_ATCR1_ATOSEL3_Msk
#define TAMP_ATCR1_ATOSEL3_0         (0x1UL << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00001000U */
#define TAMP_ATCR1_ATOSEL3_1         (0x2UL << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00002000U */
#define TAMP_ATCR1_ATOSEL4_Pos       (14U)
#define TAMP_ATCR1_ATOSEL4_Msk       (0x3UL<<TAMP_ATCR1_ATOSEL4_Pos)                     /*!< 0x0000C000U */
#define TAMP_ATCR1_ATOSEL4            TAMP_ATCR1_ATOSEL4_Msk
#define TAMP_ATCR1_ATOSEL4_0         (0x1UL << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00004000U */
#define TAMP_ATCR1_ATOSEL4_1         (0x2UL << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00008000U */
#define TAMP_ATCR1_ATCKSEL_Pos       (16U)
#define TAMP_ATCR1_ATCKSEL_Msk       (0x7UL<<TAMP_ATCR1_ATCKSEL_Pos)                     /*!< 0x00070000U */
#define TAMP_ATCR1_ATCKSEL            TAMP_ATCR1_ATCKSEL_Msk
#define TAMP_ATCR1_ATCKSEL_0         (0x1UL << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00010000U */
#define TAMP_ATCR1_ATCKSEL_1         (0x2UL << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00020000U */
#define TAMP_ATCR1_ATCKSEL_2         (0x4UL << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00040000U */
#define TAMP_ATCR1_ATCKSEL_3         (0x8UL << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00080000U */
#define TAMP_ATCR1_ATPER_Pos         (24U)
#define TAMP_ATCR1_ATPER_Msk         (0xFUL<<TAMP_ATCR1_ATPER_Pos)                       /*!< 0x0F000000U */
#define TAMP_ATCR1_ATPER              TAMP_ATCR1_ATPER_Msk
#define TAMP_ATCR1_ATPER_0           (0x1UL << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x01000000U */
#define TAMP_ATCR1_ATPER_1           (0x2UL << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x02000000U */
#define TAMP_ATCR1_ATPER_2           (0x4UL << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x04000000U */
#define TAMP_ATCR1_ATOSHARE_Pos      (30U)
#define TAMP_ATCR1_ATOSHARE_Msk      (0x1UL<<TAMP_ATCR1_ATOSHARE_Pos)                    /*!< 0x40000000U */
#define TAMP_ATCR1_ATOSHARE          TAMP_ATCR1_ATOSHARE_Msk
#define TAMP_ATCR1_FLTEN_Pos         (31U)
#define TAMP_ATCR1_FLTEN_Msk         (0x1UL<<TAMP_ATCR1_FLTEN_Pos)                       /*!< 0x80000000U */
#define TAMP_ATCR1_FLTEN             TAMP_ATCR1_FLTEN_Msk

/********************  Bits definition for TAMP_ATSEEDR register  ******************/
#define TAMP_ATSEEDR_SEED_Pos        (0U)
#define TAMP_ATSEEDR_SEED_Msk        (0xFFFFFFFFUL << TAMP_ATSEEDR_SEED_Pos)             /*!< 0xFFFFFFFFU */
#define TAMP_ATSEEDR_SEED            TAMP_ATSEEDR_SEED_Msk

/********************  Bits definition for TAMP_ATOR register  ******************/
#define TAMP_ATOR_PRNG_Pos           (0U)
#define TAMP_ATOR_PRNG_Msk           (0xFFUL << TAMP_ATOR_PRNG_Pos)                      /*!< 0x000000FFU */
#define TAMP_ATOR_PRNG               TAMP_ATOR_PRNG_Msk
#define TAMP_ATOR_PRNG_0             (0x1UL << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000001U */
#define TAMP_ATOR_PRNG_1             (0x2UL << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000002U */
#define TAMP_ATOR_PRNG_2             (0x4UL << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000004U */
#define TAMP_ATOR_PRNG_3             (0x8UL << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000008U */
#define TAMP_ATOR_PRNG_4             (0x10UL << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000010U */
#define TAMP_ATOR_PRNG_5             (0x20UL << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000020U */
#define TAMP_ATOR_PRNG_6             (0x40UL << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000040U */
#define TAMP_ATOR_PRNG_7             (0x80UL << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000080U */
#define TAMP_ATOR_SEEDF_Pos          (14U)
#define TAMP_ATOR_SEEDF_Msk          (1UL << TAMP_ATOR_SEEDF_Pos)                       /*!< 0x00004000U */
#define TAMP_ATOR_SEEDF              TAMP_ATOR_SEEDF_Msk
#define TAMP_ATOR_INITS_Pos          (15U)
#define TAMP_ATOR_INITS_Msk          (1UL << TAMP_ATOR_INITS_Pos)                       /*!< 0x00008000U */
#define TAMP_ATOR_INITS              TAMP_ATOR_INITS_Msk

/********************  Bits definition for TAMP_ATCR2 register  ***************/
#define TAMP_ATCR2_ATOSEL1_Pos       (8U)
#define TAMP_ATCR2_ATOSEL1_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL1_Pos)                    /*!< 0x00000700U */
#define TAMP_ATCR2_ATOSEL1            TAMP_ATCR2_ATOSEL1_Msk
#define TAMP_ATCR2_ATOSEL1_0         (0x1UL << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000100U */
#define TAMP_ATCR2_ATOSEL1_1         (0x2UL << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000200U */
#define TAMP_ATCR2_ATOSEL1_2         (0x4UL << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000400U */
#define TAMP_ATCR2_ATOSEL2_Pos       (11U)
#define TAMP_ATCR2_ATOSEL2_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL2_Pos)                    /*!< 0x00003800U */
#define TAMP_ATCR2_ATOSEL2            TAMP_ATCR2_ATOSEL2_Msk
#define TAMP_ATCR2_ATOSEL2_0         (0x1UL << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00000800U */
#define TAMP_ATCR2_ATOSEL2_1         (0x2UL << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00001000U */
#define TAMP_ATCR2_ATOSEL2_2         (0x4UL << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00002000U */
#define TAMP_ATCR2_ATOSEL3_Pos       (14U)
#define TAMP_ATCR2_ATOSEL3_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL3_Pos)                    /*!< 0x0001C000U */
#define TAMP_ATCR2_ATOSEL3            TAMP_ATCR2_ATOSEL3_Msk
#define TAMP_ATCR2_ATOSEL3_0         (0x1UL << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00004000U */
#define TAMP_ATCR2_ATOSEL3_1         (0x2UL << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00008000U */
#define TAMP_ATCR2_ATOSEL3_2         (0x4UL << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00010000U */
#define TAMP_ATCR2_ATOSEL4_Pos       (17U)
#define TAMP_ATCR2_ATOSEL4_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL4_Pos)                    /*!< 0x000E0000U */
#define TAMP_ATCR2_ATOSEL4            TAMP_ATCR2_ATOSEL4_Msk
#define TAMP_ATCR2_ATOSEL4_0         (0x1UL << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00020000U */
#define TAMP_ATCR2_ATOSEL4_1         (0x2UL << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00040000U */
#define TAMP_ATCR2_ATOSEL4_2         (0x4UL << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00080000U */
#define TAMP_ATCR2_ATOSEL5_Pos       (20U)
#define TAMP_ATCR2_ATOSEL5_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL5_Pos)                    /*!< 0x00700000U */
#define TAMP_ATCR2_ATOSEL5            TAMP_ATCR2_ATOSEL5_Msk
#define TAMP_ATCR2_ATOSEL5_0         (0x1UL << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00100000U */
#define TAMP_ATCR2_ATOSEL5_1         (0x2UL << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00200000U */
#define TAMP_ATCR2_ATOSEL5_2         (0x4UL << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00400000U */
#define TAMP_ATCR2_ATOSEL6_Pos       (23U)
#define TAMP_ATCR2_ATOSEL6_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL6_Pos)                    /*!< 0x03800000U */
#define TAMP_ATCR2_ATOSEL6            TAMP_ATCR2_ATOSEL6_Msk
#define TAMP_ATCR2_ATOSEL6_0         (0x1UL << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x00800000U */
#define TAMP_ATCR2_ATOSEL6_1         (0x2UL << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x01000000U */
#define TAMP_ATCR2_ATOSEL6_2         (0x4UL << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x02000000U */
#define TAMP_ATCR2_ATOSEL7_Pos       (26U)
#define TAMP_ATCR2_ATOSEL7_Msk       (0x7UL<<TAMP_ATCR2_ATOSEL7_Pos)                    /*!< 0x1C000000U */
#define TAMP_ATCR2_ATOSEL7            TAMP_ATCR2_ATOSEL7_Msk
#define TAMP_ATCR2_ATOSEL7_0         (0x1UL << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x04000000U */
#define TAMP_ATCR2_ATOSEL7_1         (0x2UL << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x08000000U */
#define TAMP_ATCR2_ATOSEL7_2         (0x4UL << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x10000000U */

/********************  Bits definition for TAMP_SECCFGR register  *************/
#define TAMP_SECCFGR_BKPRWSEC_Pos     (0U)
#define TAMP_SECCFGR_BKPRWSEC_Msk     (0xFFUL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x000000FFU */
#define TAMP_SECCFGR_BKPRWSEC         TAMP_SECCFGR_BKPRWSEC_Msk
#define TAMP_SECCFGR_BKPRWSEC_0       (0x1UL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000001U */
#define TAMP_SECCFGR_BKPRWSEC_1       (0x2UL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000002U */
#define TAMP_SECCFGR_BKPRWSEC_2       (0x4UL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000004U */
#define TAMP_SECCFGR_BKPRWSEC_3       (0x8UL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000008U */
#define TAMP_SECCFGR_BKPRWSEC_4       (0x1UL << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000010U */
#define TAMP_SECCFGR_BKPRWSEC_5       (0x20UL << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000020U */
#define TAMP_SECCFGR_BKPRWSEC_6       (0x40UL << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000040U */
#define TAMP_SECCFGR_BKPRWSEC_7       (0x80UL << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000080U */
#define TAMP_SECCFGR_CNT2SEC_Pos      (14U)
#define TAMP_SECCFGR_CNT2SEC_Msk      (0x1UL << TAMP_SECCFGR_CNT2SEC_Pos)                  /*!< 0x00004000U */
#define TAMP_SECCFGR_CNT2SEC          TAMP_SECCFGR_CNT2SEC_Msk
#define TAMP_SECCFGR_CNT1SEC_Pos      (15U)
#define TAMP_SECCFGR_CNT1SEC_Msk      (0x1UL << TAMP_SECCFGR_CNT1SEC_Pos)                  /*!< 0x00008000U */
#define TAMP_SECCFGR_CNT1SEC          TAMP_SECCFGR_CNT1SEC_Msk
#define TAMP_SECCFGR_BKPWSEC_Pos      (16U)
#define TAMP_SECCFGR_BKPWSEC_Msk      (0xFFUL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00FF0000U */
#define TAMP_SECCFGR_BKPWSEC          TAMP_SECCFGR_BKPWSEC_Msk
#define TAMP_SECCFGR_BKPWSEC_0        (0x1UL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00010000U */
#define TAMP_SECCFGR_BKPWSEC_1        (0x2UL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00020000U */
#define TAMP_SECCFGR_BKPWSEC_2        (0x4UL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00040000U */
#define TAMP_SECCFGR_BKPWSEC_3        (0x8UL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00080000U */
#define TAMP_SECCFGR_BKPWSEC_4        (0x1UL << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00100000U */
#define TAMP_SECCFGR_BKPWSEC_5        (0x20UL << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00200000U */
#define TAMP_SECCFGR_BKPWSEC_6        (0x40UL << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00400000U */
#define TAMP_SECCFGR_BKPWSEC_7        (0x80UL << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00800000U */
#define TAMP_SECCFGR_SMKLOCK_Pos      (30U)
#define TAMP_SECCFGR_SMKLOCK_Msk      (0x1UL << TAMP_SECCFGR_SMKLOCK_Pos)                 /*!< 0x40000000U */
#define TAMP_SECCFGR_SMKLOCK          TAMP_SECCFGR_SMKLOCK_Msk
#define TAMP_SECCFGR_TAMPSEC_Pos      (31U)
#define TAMP_SECCFGR_TAMPSEC_Msk      (0x1UL << TAMP_SECCFGR_TAMPSEC_Pos)                 /*!< 0x80000000U */
#define TAMP_SECCFGR_TAMPSEC          TAMP_SECCFGR_TAMPSEC_Msk

/********************  Bits definition for TAMP_PRIVCR register  ************/
#define TAMP_PRIVCR_CNT2PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT2PRIV_Msk    (0x1UL << TAMP_PRIVCR_CNT2PRIV_Pos)                /*!< 0x00004000U */
#define TAMP_PRIVCR_CNT2PRIV        TAMP_PRIVCR_CNT2PRIV_Msk
#define TAMP_PRIVCR_CNT1PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT1PRIV_Msk    (0x1UL << TAMP_PRIVCR_CNT1PRIV_Pos)                /*!< 0x00008000U */
#define TAMP_PRIVCR_CNT1PRIV        TAMP_PRIVCR_CNT1PRIV_Msk
#define TAMP_PRIVCR_BKPRWPRIV_Pos   (29U)
#define TAMP_PRIVCR_BKPRWPRIV_Msk   (0x1UL << TAMP_PRIVCR_BKPRWPRIV_Pos)               /*!< 0x20000000U */
#define TAMP_PRIVCR_BKPRWPRIV       TAMP_PRIVCR_BKPRWPRIV_Msk
#define TAMP_PRIVCR_BKPWPRIV_Pos    (30U)
#define TAMP_PRIVCR_BKPWPRIV_Msk    (0x1UL << TAMP_PRIVCR_BKPWPRIV_Pos)                /*!< 0x40000000U */
#define TAMP_PRIVCR_BKPWPRIV        TAMP_PRIVCR_BKPWPRIV_Msk
#define TAMP_PRIVCR_TAMPPRIV_Pos    (31U)
#define TAMP_PRIVCR_TAMPPRIV_Msk    (0x1UL << TAMP_PRIVCR_TAMPPRIV_Pos)                /*!< 0x80000000U */
#define TAMP_PRIVCR_TAMPPRIV        TAMP_PRIVCR_TAMPPRIV_Msk

/********************  Bits definition for TAMP_IER register  *****************/
#define TAMP_IER_TAMP1IE_Pos         (0U)
#define TAMP_IER_TAMP1IE_Msk         (0x1UL << TAMP_IER_TAMP1IE_Pos)                    /*!< 0x00000001U */
#define TAMP_IER_TAMP1IE             TAMP_IER_TAMP1IE_Msk
#define TAMP_IER_TAMP2IE_Pos         (1U)
#define TAMP_IER_TAMP2IE_Msk         (0x1UL << TAMP_IER_TAMP2IE_Pos)                    /*!< 0x00000002U */
#define TAMP_IER_TAMP2IE             TAMP_IER_TAMP2IE_Msk
#define TAMP_IER_TAMP3IE_Pos         (2U)
#define TAMP_IER_TAMP3IE_Msk         (0x1UL << TAMP_IER_TAMP3IE_Pos)                    /*!< 0x00000004U */
#define TAMP_IER_TAMP3IE             TAMP_IER_TAMP3IE_Msk
#define TAMP_IER_TAMP4IE_Pos         (3U)
#define TAMP_IER_TAMP4IE_Msk         (0x1UL << TAMP_IER_TAMP4IE_Pos)                    /*!< 0x00000008U */
#define TAMP_IER_TAMP4IE             TAMP_IER_TAMP4IE_Msk
#define TAMP_IER_TAMP5IE_Pos         (4U)
#define TAMP_IER_TAMP5IE_Msk         (0x1UL << TAMP_IER_TAMP5IE_Pos)                    /*!< 0x00000010U */
#define TAMP_IER_TAMP5IE             TAMP_IER_TAMP5IE_Msk
#define TAMP_IER_TAMP6IE_Pos         (5U)
#define TAMP_IER_TAMP6IE_Msk         (0x1UL << TAMP_IER_TAMP6IE_Pos)                    /*!< 0x00000020U */
#define TAMP_IER_TAMP6IE             TAMP_IER_TAMP6IE_Msk
#define TAMP_IER_TAMP7IE_Pos         (6U)
#define TAMP_IER_TAMP7IE_Msk         (0x1UL << TAMP_IER_TAMP7IE_Pos)                    /*!< 0x00000040U */
#define TAMP_IER_TAMP7IE             TAMP_IER_TAMP7IE_Msk
#define TAMP_IER_ITAMP1IE_Pos        (16U)
#define TAMP_IER_ITAMP1IE_Msk        (0x1UL << TAMP_IER_ITAMP1IE_Pos)                   /*!< 0x00010000U */
#define TAMP_IER_ITAMP1IE            TAMP_IER_ITAMP1IE_Msk
#define TAMP_IER_ITAMP2IE_Pos        (17U)
#define TAMP_IER_ITAMP2IE_Msk        (0x1UL << TAMP_IER_ITAMP2IE_Pos)                   /*!< 0x00020000U */
#define TAMP_IER_ITAMP2IE            TAMP_IER_ITAMP2IE_Msk
#define TAMP_IER_ITAMP3IE_Pos        (18U)
#define TAMP_IER_ITAMP3IE_Msk        (0x1UL << TAMP_IER_ITAMP3IE_Pos)                   /*!< 0x00040000U */
#define TAMP_IER_ITAMP3IE            TAMP_IER_ITAMP3IE_Msk
#define TAMP_IER_ITAMP4IE_Pos        (19U)
#define TAMP_IER_ITAMP4IE_Msk        (0x1UL << TAMP_IER_ITAMP4IE_Pos)                   /*!< 0x00040000U */
#define TAMP_IER_ITAMP4IE            TAMP_IER_ITAMP4IE_Msk
#define TAMP_IER_ITAMP5IE_Pos        (20U)
#define TAMP_IER_ITAMP5IE_Msk        (0x1UL << TAMP_IER_ITAMP5IE_Pos)                   /*!< 0x00100000U */
#define TAMP_IER_ITAMP5IE            TAMP_IER_ITAMP5IE_Msk
#define TAMP_IER_ITAMP6IE_Pos        (21U)
#define TAMP_IER_ITAMP6IE_Msk        (0x1UL << TAMP_IER_ITAMP6IE_Pos)                   /*!< 0x00200000U */
#define TAMP_IER_ITAMP6IE            TAMP_IER_ITAMP6IE_Msk
#define TAMP_IER_ITAMP7IE_Pos        (22U)
#define TAMP_IER_ITAMP7IE_Msk        (0x1UL << TAMP_IER_ITAMP7IE_Pos)                   /*!< 0x00400000U */
#define TAMP_IER_ITAMP7IE            TAMP_IER_ITAMP7IE_Msk
#define TAMP_IER_ITAMP8IE_Pos        (23U)
#define TAMP_IER_ITAMP8IE_Msk        (0x1UL << TAMP_IER_ITAMP8IE_Pos)                   /*!< 0x00800000U */
#define TAMP_IER_ITAMP8IE            TAMP_IER_ITAMP8IE_Msk
#define TAMP_IER_ITAMP9IE_Pos        (24U)
#define TAMP_IER_ITAMP9IE_Msk        (0x1UL << TAMP_IER_ITAMP9IE_Pos)                   /*!< 0x01000000U */
#define TAMP_IER_ITAMP9IE            TAMP_IER_ITAMP9IE_Msk
#define TAMP_IER_ITAMP10IE_Pos       (25U)
#define TAMP_IER_ITAMP10IE_Msk       (0x1UL << TAMP_IER_ITAMP10IE_Pos)                  /*!< 0x02000000U */
#define TAMP_IER_ITAMP10IE           TAMP_IER_ITAMP10IE_Msk
#define TAMP_IER_ITAMP11IE_Pos       (26U)
#define TAMP_IER_ITAMP11IE_Msk       (0x1UL << TAMP_IER_ITAMP11IE_Pos)                  /*!< 0x04000000U */
#define TAMP_IER_ITAMP11IE           TAMP_IER_ITAMP11IE_Msk
#define TAMP_IER_ITAMP12IE_Pos       (27U)
#define TAMP_IER_ITAMP12IE_Msk       (0x1UL << TAMP_IER_ITAMP12IE_Pos)                  /*!< 0x08000000U */
#define TAMP_IER_ITAMP12IE           TAMP_IER_ITAMP12IE_Msk
#define TAMP_IER_ITAMP13IE_Pos       (28U)
#define TAMP_IER_ITAMP13IE_Msk       (0x1UL << TAMP_IER_ITAMP13IE_Pos)                  /*!< 0x10000000U */
#define TAMP_IER_ITAMP13IE           TAMP_IER_ITAMP13IE_Msk
#define TAMP_IER_ITAMP14IE_Pos       (29U)
#define TAMP_IER_ITAMP14IE_Msk       (0x1UL << TAMP_IER_ITAMP14IE_Pos)                  /*!< 0x20000000U */
#define TAMP_IER_ITAMP14IE           TAMP_IER_ITAMP14IE_Msk
#define TAMP_IER_ITAMP15IE_Pos       (30U)
#define TAMP_IER_ITAMP15IE_Msk       (0x1UL << TAMP_IER_ITAMP15IE_Pos)                  /*!< 0x40000000U */
#define TAMP_IER_ITAMP15IE           TAMP_IER_ITAMP15IE_Msk
#define TAMP_IER_ITAMP16IE_Pos       (31U)
#define TAMP_IER_ITAMP16IE_Msk       (0x1UL << TAMP_IER_ITAMP16IE_Pos)                  /*!< 0x80000000U */
#define TAMP_IER_ITAMP16IE           TAMP_IER_ITAMP16IE_Msk

/********************  Bits definition for TAMP_SR register  *****************/
#define TAMP_SR_TAMP1F_Pos           (0U)
#define TAMP_SR_TAMP1F_Msk           (0x1UL << TAMP_SR_TAMP1F_Pos)                      /*!< 0x00000001U */
#define TAMP_SR_TAMP1F               TAMP_SR_TAMP1F_Msk
#define TAMP_SR_TAMP2F_Pos           (1U)
#define TAMP_SR_TAMP2F_Msk           (0x1UL << TAMP_SR_TAMP2F_Pos)                      /*!< 0x00000002U */
#define TAMP_SR_TAMP2F               TAMP_SR_TAMP2F_Msk
#define TAMP_SR_TAMP3F_Pos           (2U)
#define TAMP_SR_TAMP3F_Msk           (0x1UL << TAMP_SR_TAMP3F_Pos)                      /*!< 0x00000004U */
#define TAMP_SR_TAMP3F               TAMP_SR_TAMP3F_Msk
#define TAMP_SR_TAMP4F_Pos           (3U)
#define TAMP_SR_TAMP4F_Msk           (0x1UL << TAMP_SR_TAMP4F_Pos)                      /*!< 0x00000008U */
#define TAMP_SR_TAMP4F               TAMP_SR_TAMP4F_Msk
#define TAMP_SR_TAMP5F_Pos           (4U)
#define TAMP_SR_TAMP5F_Msk           (0x1UL << TAMP_SR_TAMP5F_Pos)                      /*!< 0x00000010U */
#define TAMP_SR_TAMP5F               TAMP_SR_TAMP5F_Msk
#define TAMP_SR_TAMP6F_Pos           (5U)
#define TAMP_SR_TAMP6F_Msk           (0x1UL << TAMP_SR_TAMP6F_Pos)                      /*!< 0x00000020U */
#define TAMP_SR_TAMP6F               TAMP_SR_TAMP6F_Msk
#define TAMP_SR_TAMP7F_Pos           (6U)
#define TAMP_SR_TAMP7F_Msk           (0x1UL << TAMP_SR_TAMP7F_Pos)                      /*!< 0x00000040U */
#define TAMP_SR_TAMP7F               TAMP_SR_TAMP7F_Msk
#define TAMP_SR_ITAMP1F_Pos          (16U)
#define TAMP_SR_ITAMP1F_Msk          (0x1UL << TAMP_SR_ITAMP1F_Pos)                     /*!< 0x00010000U */
#define TAMP_SR_ITAMP1F              TAMP_SR_ITAMP1F_Msk
#define TAMP_SR_ITAMP2F_Pos          (17U)
#define TAMP_SR_ITAMP2F_Msk          (0x1UL << TAMP_SR_ITAMP2F_Pos)                     /*!< 0x00020000U */
#define TAMP_SR_ITAMP2F              TAMP_SR_ITAMP2F_Msk
#define TAMP_SR_ITAMP3F_Pos          (18U)
#define TAMP_SR_ITAMP3F_Msk          (0x1UL << TAMP_SR_ITAMP3F_Pos)                     /*!< 0x00040000U */
#define TAMP_SR_ITAMP3F              TAMP_SR_ITAMP3F_Msk
#define TAMP_SR_ITAMP4F_Pos          (19U)
#define TAMP_SR_ITAMP4F_Msk          (0x1UL << TAMP_SR_ITAMP4F_Pos)                     /*!< 0x00040000U */
#define TAMP_SR_ITAMP4F              TAMP_SR_ITAMP4F_Msk
#define TAMP_SR_ITAMP5F_Pos          (20U)
#define TAMP_SR_ITAMP5F_Msk          (0x1UL << TAMP_SR_ITAMP5F_Pos)                     /*!< 0x00100000U */
#define TAMP_SR_ITAMP5F              TAMP_SR_ITAMP5F_Msk
#define TAMP_SR_ITAMP6F_Pos          (21U)
#define TAMP_SR_ITAMP6F_Msk          (0x1UL << TAMP_SR_ITAMP6F_Pos)                     /*!< 0x00200000U */
#define TAMP_SR_ITAMP6F              TAMP_SR_ITAMP6F_Msk
#define TAMP_SR_ITAMP7F_Pos          (22U)
#define TAMP_SR_ITAMP7F_Msk          (0x1UL << TAMP_SR_ITAMP7F_Pos)                     /*!< 0x00400000U */
#define TAMP_SR_ITAMP7F              TAMP_SR_ITAMP7F_Msk
#define TAMP_SR_ITAMP8F_Pos          (23U)
#define TAMP_SR_ITAMP8F_Msk          (0x1UL << TAMP_SR_ITAMP8F_Pos)                     /*!< 0x00800000U */
#define TAMP_SR_ITAMP8F              TAMP_SR_ITAMP8F_Msk
#define TAMP_SR_ITAMP9F_Pos          (24U)
#define TAMP_SR_ITAMP9F_Msk          (0x1UL << TAMP_SR_ITAMP9F_Pos)                     /*!< 0x01000000U */
#define TAMP_SR_ITAMP9F              TAMP_SR_ITAMP9F_Msk
#define TAMP_SR_ITAMP10F_Pos         (25U)
#define TAMP_SR_ITAMP10F_Msk         (0x1UL << TAMP_SR_ITAMP10F_Pos)                    /*!< 0x02000000U */
#define TAMP_SR_ITAMP10F             TAMP_SR_ITAMP10F_Msk
#define TAMP_SR_ITAMP11F_Pos         (26U)
#define TAMP_SR_ITAMP11F_Msk         (0x1UL << TAMP_SR_ITAMP11F_Pos)                    /*!< 0x04000000U */
#define TAMP_SR_ITAMP11F             TAMP_SR_ITAMP11F_Msk
#define TAMP_SR_ITAMP12F_Pos         (27U)
#define TAMP_SR_ITAMP12F_Msk         (0x1UL << TAMP_SR_ITAMP12F_Pos)                    /*!< 0x08000000U */
#define TAMP_SR_ITAMP12F             TAMP_SR_ITAMP12F_Msk
#define TAMP_SR_ITAMP13F_Pos         (28U)
#define TAMP_SR_ITAMP13F_Msk         (0x1UL << TAMP_SR_ITAMP13F_Pos)                    /*!< 0x10000000U */
#define TAMP_SR_ITAMP13F             TAMP_SR_ITAMP13F_Msk
#define TAMP_SR_ITAMP14F_Pos         (29U)
#define TAMP_SR_ITAMP14F_Msk         (0x1UL << TAMP_SR_ITAMP14F_Pos)                    /*!< 0x20000000U */
#define TAMP_SR_ITAMP14F             TAMP_SR_ITAMP14F_Msk
#define TAMP_SR_ITAMP15F_Pos         (30U)
#define TAMP_SR_ITAMP15F_Msk         (0x1UL << TAMP_SR_ITAMP15F_Pos)                    /*!< 0x40000000U */
#define TAMP_SR_ITAMP15F             TAMP_SR_ITAMP15F_Msk
#define TAMP_SR_ITAMP16F_Pos         (31U)
#define TAMP_SR_ITAMP16F_Msk         (0x1UL << TAMP_SR_ITAMP16F_Pos)                    /*!< 0x80000000U */
#define TAMP_SR_ITAMP16F             TAMP_SR_ITAMP16F_Msk

/********************  Bits definition for TAMP_MISR register  ****************/
#define TAMP_MISR_TAMP1MF_Pos        (0U)
#define TAMP_MISR_TAMP1MF_Msk        (0x1UL << TAMP_MISR_TAMP1MF_Pos)                   /*!< 0x00000001U */
#define TAMP_MISR_TAMP1MF            TAMP_MISR_TAMP1MF_Msk
#define TAMP_MISR_TAMP2MF_Pos        (1U)
#define TAMP_MISR_TAMP2MF_Msk        (0x1UL << TAMP_MISR_TAMP2MF_Pos)                   /*!< 0x00000002U */
#define TAMP_MISR_TAMP2MF            TAMP_MISR_TAMP2MF_Msk
#define TAMP_MISR_TAMP3MF_Pos        (2U)
#define TAMP_MISR_TAMP3MF_Msk        (0x1UL << TAMP_MISR_TAMP3MF_Pos)                   /*!< 0x00000004U */
#define TAMP_MISR_TAMP3MF            TAMP_MISR_TAMP3MF_Msk
#define TAMP_MISR_TAMP4MF_Pos        (3U)
#define TAMP_MISR_TAMP4MF_Msk        (0x1UL << TAMP_MISR_TAMP4MF_Pos)                   /*!< 0x00000008U */
#define TAMP_MISR_TAMP4MF            TAMP_MISR_TAMP4MF_Msk
#define TAMP_MISR_TAMP5MF_Pos        (4U)
#define TAMP_MISR_TAMP5MF_Msk        (0x1UL << TAMP_MISR_TAMP5MF_Pos)                   /*!< 0x00000010U */
#define TAMP_MISR_TAMP5MF            TAMP_MISR_TAMP5MF_Msk
#define TAMP_MISR_TAMP6MF_Pos        (5U)
#define TAMP_MISR_TAMP6MF_Msk        (0x1UL << TAMP_MISR_TAMP6MF_Pos)                   /*!< 0x00000020U */
#define TAMP_MISR_TAMP6MF            TAMP_MISR_TAMP6MF_Msk
#define TAMP_MISR_TAMP7MF_Pos        (6U)
#define TAMP_MISR_TAMP7MF_Msk        (0x1UL << TAMP_MISR_TAMP7MF_Pos)                   /*!< 0x00000040U */
#define TAMP_MISR_TAMP7MF            TAMP_MISR_TAMP7MF_Msk
#define TAMP_MISR_ITAMP1MF_Pos       (16U)
#define TAMP_MISR_ITAMP1MF_Msk       (0x1UL << TAMP_MISR_ITAMP1MF_Pos)                  /*!< 0x00010000U */
#define TAMP_MISR_ITAMP1MF           TAMP_MISR_ITAMP1MF_Msk
#define TAMP_MISR_ITAMP2MF_Pos       (17U)
#define TAMP_MISR_ITAMP2MF_Msk       (0x1UL << TAMP_MISR_ITAMP2MF_Pos)                  /*!< 0x00020000U */
#define TAMP_MISR_ITAMP2MF           TAMP_MISR_ITAMP2MF_Msk
#define TAMP_MISR_ITAMP3MF_Pos       (18U)
#define TAMP_MISR_ITAMP3MF_Msk       (0x1UL << TAMP_MISR_ITAMP3MF_Pos)                  /*!< 0x00040000U */
#define TAMP_MISR_ITAMP3MF           TAMP_MISR_ITAMP3MF_Msk
#define TAMP_MISR_ITAMP4MF_Pos       (19U)
#define TAMP_MISR_ITAMP4MF_Msk       (0x1UL << TAMP_MISR_ITAMP4MF_Pos)                  /*!< 0x00080000U */
#define TAMP_MISR_ITAMP4MF           TAMP_MISR_ITAMP4MF_Msk
#define TAMP_MISR_ITAMP5MF_Pos       (20U)
#define TAMP_MISR_ITAMP5MF_Msk       (0x1UL << TAMP_MISR_ITAMP5MF_Pos)                  /*!< 0x00100000U */
#define TAMP_MISR_ITAMP5MF           TAMP_MISR_ITAMP5MF_Msk
#define TAMP_MISR_ITAMP6MF_Pos       (21U)
#define TAMP_MISR_ITAMP6MF_Msk       (0x1UL << TAMP_MISR_ITAMP6MF_Pos)                  /*!< 0x00200000U */
#define TAMP_MISR_ITAMP6MF           TAMP_MISR_ITAMP6MF_Msk
#define TAMP_MISR_ITAMP7MF_Pos       (22U)
#define TAMP_MISR_ITAMP7MF_Msk       (0x1UL << TAMP_MISR_ITAMP7MF_Pos)                  /*!< 0x00400000U */
#define TAMP_MISR_ITAMP7MF           TAMP_MISR_ITAMP7MF_Msk
#define TAMP_MISR_ITAMP8MF_Pos       (23U)
#define TAMP_MISR_ITAMP8MF_Msk       (0x1UL << TAMP_MISR_ITAMP8MF_Pos)                  /*!< 0x00800000U */
#define TAMP_MISR_ITAMP8MF           TAMP_MISR_ITAMP8MF_Msk
#define TAMP_MISR_ITAMP9MF_Pos       (24U)
#define TAMP_MISR_ITAMP9MF_Msk       (0x1UL << TAMP_MISR_ITAMP9MF_Pos)                  /*!< 0x01000000U */
#define TAMP_MISR_ITAMP9MF           TAMP_MISR_ITAMP9MF_Msk
#define TAMP_MISR_ITAMP10MF_Pos      (25U)
#define TAMP_MISR_ITAMP10MF_Msk      (0x1UL << TAMP_MISR_ITAMP10MF_Pos)                 /*!< 0x02000000U */
#define TAMP_MISR_ITAMP10MF          TAMP_MISR_ITAMP10MF_Msk
#define TAMP_MISR_ITAMP11MF_Pos      (26U)
#define TAMP_MISR_ITAMP11MF_Msk      (0x1UL << TAMP_MISR_ITAMP11MF_Pos)                 /*!< 0x04000000U */
#define TAMP_MISR_ITAMP11MF          TAMP_MISR_ITAMP11MF_Msk
#define TAMP_MISR_ITAMP12MF_Pos      (27U)
#define TAMP_MISR_ITAMP12MF_Msk      (0x1UL << TAMP_MISR_ITAMP12MF_Pos)                 /*!< 0x08000000U */
#define TAMP_MISR_ITAMP12MF          TAMP_MISR_ITAMP12MF_Msk
#define TAMP_MISR_ITAMP13MF_Pos      (28U)
#define TAMP_MISR_ITAMP13MF_Msk      (0x1UL << TAMP_MISR_ITAMP13MF_Pos)                 /*!< 0x10000000U */
#define TAMP_MISR_ITAMP13MF          TAMP_MISR_ITAMP13MF_Msk
#define TAMP_MISR_ITAMP14MF_Pos      (29U)
#define TAMP_MISR_ITAMP14MF_Msk      (0x1UL << TAMP_MISR_ITAMP14MF_Pos)                 /*!< 0x20000000U */
#define TAMP_MISR_ITAMP14MF          TAMP_MISR_ITAMP14MF_Msk
#define TAMP_MISR_ITAMP15MF_Pos      (30U)
#define TAMP_MISR_ITAMP15MF_Msk      (0x1UL << TAMP_MISR_ITAMP15MF_Pos)                 /*!< 0x40000000U */
#define TAMP_MISR_ITAMP15MF          TAMP_MISR_ITAMP15MF_Msk
#define TAMP_MISR_ITAMP16MF_Pos      (31U)
#define TAMP_MISR_ITAMP16MF_Msk      (0x1UL << TAMP_MISR_ITAMP16MF_Pos)                 /*!< 0x80000000U */
#define TAMP_MISR_ITAMP16MF          TAMP_MISR_ITAMP16MF_Msk

/********************  Bits definition for TAMP_SMISR register  ************ *****/
#define TAMP_SMISR_TAMP1MF_Pos       (0U)
#define TAMP_SMISR_TAMP1MF_Msk       (0x1UL << TAMP_SMISR_TAMP1MF_Pos)                  /*!< 0x00000001U */
#define TAMP_SMISR_TAMP1MF           TAMP_SMISR_TAMP1MF_Msk
#define TAMP_SMISR_TAMP2MF_Pos       (1U)
#define TAMP_SMISR_TAMP2MF_Msk       (0x1UL << TAMP_SMISR_TAMP2MF_Pos)                  /*!< 0x00000002U */
#define TAMP_SMISR_TAMP2MF           TAMP_SMISR_TAMP2MF_Msk
#define TAMP_SMISR_TAMP3MF_Pos       (2U)
#define TAMP_SMISR_TAMP3MF_Msk       (0x1UL << TAMP_SMISR_TAMP3MF_Pos)                  /*!< 0x00000004U */
#define TAMP_SMISR_TAMP3MF           TAMP_SMISR_TAMP3MF_Msk
#define TAMP_SMISR_TAMP4MF_Pos       (3U)
#define TAMP_SMISR_TAMP4MF_Msk       (0x1UL << TAMP_SMISR_TAMP4MF_Pos)                  /*!< 0x00000008U */
#define TAMP_SMISR_TAMP4MF           TAMP_SMISR_TAMP4MF_Msk
#define TAMP_SMISR_TAMP5MF_Pos       (4U)
#define TAMP_SMISR_TAMP5MF_Msk       (0x1UL << TAMP_SMISR_TAMP5MF_Pos)                  /*!< 0x00000010U */
#define TAMP_SMISR_TAMP5MF           TAMP_SMISR_TAMP5MF_Msk
#define TAMP_SMISR_TAMP6MF_Pos       (5U)
#define TAMP_SMISR_TAMP6MF_Msk       (0x1UL << TAMP_SMISR_TAMP6MF_Pos)                  /*!< 0x00000020U */
#define TAMP_SMISR_TAMP6MF           TAMP_SMISR_TAMP6MF_Msk
#define TAMP_SMISR_TAMP7MF_Pos       (6U)
#define TAMP_SMISR_TAMP7MF_Msk       (0x1UL << TAMP_SMISR_TAMP7MF_Pos)                  /*!< 0x00000040U */
#define TAMP_SMISR_TAMP7MF           TAMP_SMISR_TAMP7MF_Msk
#define TAMP_SMISR_ITAMP1MF_Pos      (16U)
#define TAMP_SMISR_ITAMP1MF_Msk      (0x1UL << TAMP_SMISR_ITAMP1MF_Pos)                 /*!< 0x00010000U */
#define TAMP_SMISR_ITAMP1MF          TAMP_SMISR_ITAMP1MF_Msk
#define TAMP_SMISR_ITAMP2MF_Pos      (17U)
#define TAMP_SMISR_ITAMP2MF_Msk      (0x1UL << TAMP_SMISR_ITAMP2MF_Pos)                 /*!< 0x00020000U */
#define TAMP_SMISR_ITAMP2MF          TAMP_SMISR_ITAMP2MF_Msk
#define TAMP_SMISR_ITAMP3MF_Pos      (18U)
#define TAMP_SMISR_ITAMP3MF_Msk      (0x1UL << TAMP_SMISR_ITAMP3MF_Pos)                 /*!< 0x00040000U */
#define TAMP_SMISR_ITAMP3MF          TAMP_SMISR_ITAMP3MF_Msk
#define TAMP_SMISR_ITAMP4MF_Pos      (19U)
#define TAMP_SMISR_ITAMP4MF_Msk      (0x1UL << TAMP_SMISR_ITAMP4MF_Pos)                 /*!< 0x00080000U */
#define TAMP_SMISR_ITAMP4MF          TAMP_SMISR_ITAMP4MF_Msk
#define TAMP_SMISR_ITAMP5MF_Pos      (20U)
#define TAMP_SMISR_ITAMP5MF_Msk      (0x1UL << TAMP_SMISR_ITAMP5MF_Pos)                 /*!< 0x00100000U */
#define TAMP_SMISR_ITAMP5MF          TAMP_SMISR_ITAMP5MF_Msk
#define TAMP_SMISR_ITAMP6MF_Pos      (21U)
#define TAMP_SMISR_ITAMP6MF_Msk      (0x1UL << TAMP_SMISR_ITAMP6MF_Pos)                 /*!< 0x00200000U */
#define TAMP_SMISR_ITAMP6MF          TAMP_SMISR_ITAMP6MF_Msk
#define TAMP_SMISR_ITAMP7MF_Pos      (22U)
#define TAMP_SMISR_ITAMP7MF_Msk      (0x1UL << TAMP_SMISR_ITAMP7MF_Pos)                 /*!< 0x00400000U */
#define TAMP_SMISR_ITAMP7MF          TAMP_SMISR_ITAMP7MF_Msk
#define TAMP_SMISR_ITAMP8MF_Pos      (23U)
#define TAMP_SMISR_ITAMP8MF_Msk      (0x1UL << TAMP_SMISR_ITAMP8MF_Pos)                 /*!< 0x00800000U */
#define TAMP_SMISR_ITAMP8MF          TAMP_SMISR_ITAMP8MF_Msk
#define TAMP_SMISR_ITAMP9MF_Pos      (24U)
#define TAMP_SMISR_ITAMP9MF_Msk      (0x1UL << TAMP_SMISR_ITAMP9MF_Pos)                 /*!< 0x01000000U */
#define TAMP_SMISR_ITAMP9MF          TAMP_SMISR_ITAMP9MF_Msk
#define TAMP_SMISR_ITAMP10MF_Pos     (25U)
#define TAMP_SMISR_ITAMP10MF_Msk     (0x1UL << TAMP_SMISR_ITAMP10MF_Pos)                /*!< 0x020400000U */
#define TAMP_SMISR_ITAMP10MF         TAMP_SMISR_ITAMP10MF_Msk
#define TAMP_SMISR_ITAMP11MF_Pos     (26U)
#define TAMP_SMISR_ITAMP11MF_Msk     (0x1UL << TAMP_SMISR_ITAMP11MF_Pos)                /*!< 0x020400000U */
#define TAMP_SMISR_ITAMP11MF         TAMP_SMISR_ITAMP11MF_Msk
#define TAMP_SMISR_ITAMP12MF_Pos     (27U)
#define TAMP_SMISR_ITAMP12MF_Msk     (0x1UL << TAMP_SMISR_ITAMP12MF_Pos)                /*!< 0x080000000U */
#define TAMP_SMISR_ITAMP12MF         TAMP_SMISR_ITAMP12MF_Msk
#define TAMP_SMISR_ITAMP13MF_Pos     (28U)
#define TAMP_SMISR_ITAMP13MF_Msk     (0x1UL << TAMP_SMISR_ITAMP13MF_Pos)                /*!< 0x100000000U */
#define TAMP_SMISR_ITAMP13MF         TAMP_SMISR_ITAMP13MF_Msk
#define TAMP_SMISR_ITAMP14MF_Pos     (29U)
#define TAMP_SMISR_ITAMP14MF_Msk     (0x1UL << TAMP_SMISR_ITAMP14MF_Pos)                /*!< 0x200000000U */
#define TAMP_SMISR_ITAMP14MF         TAMP_SMISR_ITAMP14MF_Msk
#define TAMP_SMISR_ITAMP15MF_Pos     (30U)
#define TAMP_SMISR_ITAMP15MF_Msk     (0x1UL << TAMP_SMISR_ITAMP15MF_Pos)                /*!< 0x400000000U */
#define TAMP_SMISR_ITAMP15MF         TAMP_SMISR_ITAMP15MF_Msk
#define TAMP_SMISR_ITAMP16MF_Pos     (31U)
#define TAMP_SMISR_ITAMP16MF_Msk     (0x1UL << TAMP_SMISR_ITAMP16MF_Pos)                /*!< 0x800000000U */
#define TAMP_SMISR_ITAMP16MF         TAMP_SMISR_ITAMP16MF_Msk

/********************  Bits definition for TAMP_SCR register  *****************/
#define TAMP_SCR_CTAMP1F_Pos         (0U)
#define TAMP_SCR_CTAMP1F_Msk         (0x1UL << TAMP_SCR_CTAMP1F_Pos)                    /*!< 0x00000001U */
#define TAMP_SCR_CTAMP1F             TAMP_SCR_CTAMP1F_Msk
#define TAMP_SCR_CTAMP2F_Pos         (1U)
#define TAMP_SCR_CTAMP2F_Msk         (0x1UL << TAMP_SCR_CTAMP2F_Pos)                    /*!< 0x00000002U */
#define TAMP_SCR_CTAMP2F             TAMP_SCR_CTAMP2F_Msk
#define TAMP_SCR_CTAMP3F_Pos         (2U)
#define TAMP_SCR_CTAMP3F_Msk         (0x1UL << TAMP_SCR_CTAMP3F_Pos)                    /*!< 0x00000004U */
#define TAMP_SCR_CTAMP3F             TAMP_SCR_CTAMP3F_Msk
#define TAMP_SCR_CTAMP4F_Pos         (3U)
#define TAMP_SCR_CTAMP4F_Msk         (0x1UL << TAMP_SCR_CTAMP4F_Pos)                    /*!< 0x00000008U */
#define TAMP_SCR_CTAMP4F             TAMP_SCR_CTAMP4F_Msk
#define TAMP_SCR_CTAMP5F_Pos         (4U)
#define TAMP_SCR_CTAMP5F_Msk         (0x1UL << TAMP_SCR_CTAMP5F_Pos)                    /*!< 0x00000010U */
#define TAMP_SCR_CTAMP5F             TAMP_SCR_CTAMP5F_Msk
#define TAMP_SCR_CTAMP6F_Pos         (5U)
#define TAMP_SCR_CTAMP6F_Msk         (0x1UL << TAMP_SCR_CTAMP6F_Pos)                    /*!< 0x00000020U */
#define TAMP_SCR_CTAMP6F             TAMP_SCR_CTAMP6F_Msk
#define TAMP_SCR_CTAMP7F_Pos         (6U)
#define TAMP_SCR_CTAMP7F_Msk         (0x1UL << TAMP_SCR_CTAMP7F_Pos)                    /*!< 0x00000040U */
#define TAMP_SCR_CTAMP7F             TAMP_SCR_CTAMP7F_Msk
#define TAMP_SCR_CITAMP1F_Pos        (16U)
#define TAMP_SCR_CITAMP1F_Msk        (0x1UL << TAMP_SCR_CITAMP1F_Pos)                   /*!< 0x00010000U */
#define TAMP_SCR_CITAMP1F            TAMP_SCR_CITAMP1F_Msk
#define TAMP_SCR_CITAMP2F_Pos        (17U)
#define TAMP_SCR_CITAMP2F_Msk        (0x1UL << TAMP_SCR_CITAMP2F_Pos)                   /*!< 0x00020000U */
#define TAMP_SCR_CITAMP2F            TAMP_SCR_CITAMP2F_Msk
#define TAMP_SCR_CITAMP3F_Pos        (18U)
#define TAMP_SCR_CITAMP3F_Msk        (0x1UL << TAMP_SCR_CITAMP3F_Pos)                   /*!< 0x00040000U */
#define TAMP_SCR_CITAMP3F            TAMP_SCR_CITAMP3F_Msk
#define TAMP_SCR_CITAMP4F_Pos        (19U)
#define TAMP_SCR_CITAMP4F_Msk        (0x1UL << TAMP_SCR_CITAMP4F_Pos)                   /*!< 0x00080000U */
#define TAMP_SCR_CITAMP4F            TAMP_SCR_CITAMP4F_Msk
#define TAMP_SCR_CITAMP5F_Pos        (20U)
#define TAMP_SCR_CITAMP5F_Msk        (0x1UL << TAMP_SCR_CITAMP5F_Pos)                   /*!< 0x00100000U */
#define TAMP_SCR_CITAMP5F            TAMP_SCR_CITAMP5F_Msk
#define TAMP_SCR_CITAMP6F_Pos        (21U)
#define TAMP_SCR_CITAMP6F_Msk        (0x1UL << TAMP_SCR_CITAMP6F_Pos)                   /*!< 0x00200000U */
#define TAMP_SCR_CITAMP6F            TAMP_SCR_CITAMP6F_Msk
#define TAMP_SCR_CITAMP7F_Pos        (22U)
#define TAMP_SCR_CITAMP7F_Msk        (0x1UL << TAMP_SCR_CITAMP7F_Pos)                   /*!< 0x00400000U */
#define TAMP_SCR_CITAMP7F            TAMP_SCR_CITAMP7F_Msk
#define TAMP_SCR_CITAMP8F_Pos        (23U)
#define TAMP_SCR_CITAMP8F_Msk        (0x1UL << TAMP_SCR_CITAMP8F_Pos)                   /*!< 0x00800000U */
#define TAMP_SCR_CITAMP8F            TAMP_SCR_CITAMP8F_Msk
#define TAMP_SCR_CITAMP9F_Pos        (24U)
#define TAMP_SCR_CITAMP9F_Msk        (0x1UL << TAMP_SCR_CITAMP9F_Pos)                   /*!< 0x01000000U */
#define TAMP_SCR_CITAMP9F            TAMP_SCR_CITAMP9F_Msk
#define TAMP_SCR_CITAMP10F_Pos       (25U)
#define TAMP_SCR_CITAMP10F_Msk       (0x1UL << TAMP_SCR_CITAMP10F_Pos)                  /*!< 0x02000000U */
#define TAMP_SCR_CITAMP10F           TAMP_SCR_CITAMP10F_Msk
#define TAMP_SCR_CITAMP11F_Pos       (26U)
#define TAMP_SCR_CITAMP11F_Msk       (0x1UL << TAMP_SCR_CITAMP11F_Pos)                  /*!< 0x04000000U */
#define TAMP_SCR_CITAMP11F           TAMP_SCR_CITAMP11F_Msk
#define TAMP_SCR_CITAMP12F_Pos       (27U)
#define TAMP_SCR_CITAMP12F_Msk       (0x1UL << TAMP_SCR_CITAMP12F_Pos)                  /*!< 0x08000000U */
#define TAMP_SCR_CITAMP12F           TAMP_SCR_CITAMP12F_Msk
#define TAMP_SCR_CITAMP13F_Pos       (28U)
#define TAMP_SCR_CITAMP13F_Msk       (0x1UL << TAMP_SCR_CITAMP13F_Pos)                  /*!< 0x10000000U */
#define TAMP_SCR_CITAMP13F           TAMP_SCR_CITAMP13F_Msk
#define TAMP_SCR_CITAMP14F_Pos       (29U)
#define TAMP_SCR_CITAMP14F_Msk       (0x1UL << TAMP_SCR_CITAMP14F_Pos)                  /*!< 0x20000000U */
#define TAMP_SCR_CITAMP14F           TAMP_SCR_CITAMP14F_Msk
#define TAMP_SCR_CITAMP15F_Pos       (30U)
#define TAMP_SCR_CITAMP15F_Msk       (0x1UL << TAMP_SCR_CITAMP15F_Pos)                  /*!< 0x40000000U */
#define TAMP_SCR_CITAMP15F           TAMP_SCR_CITAMP15F_Msk
#define TAMP_SCR_CITAMP16F_Pos       (31U)
#define TAMP_SCR_CITAMP16F_Msk       (0x1UL << TAMP_SCR_CITAMP16F_Pos)                  /*!< 0x80000000U */
#define TAMP_SCR_CITAMP16F           TAMP_SCR_CITAMP16F_Msk

/*******************  Bits definition for TAMP_COUNT1R register  **************/
#define TAMP_COUNT1R_Pos              (0U)
#define TAMP_COUNT1R_Msk              (0xFFFFFFFFUL << TAMP_COUNT1R_Pos)               /*!< 0xFFFFFFFFU */
#define TAMP_COUNT1R                  TAMP_COUNT1R_Msk

/*******************  Bits definition for TAMP_COUNT2R register  **************/
#define TAMP_COUNT2R_Pos              (0U)
#define TAMP_COUNT2R_Msk              (0xFFFFFFFFUL << TAMP_COUNT2R_Pos)               /*!< 0xFFFFFFFFU */
#define TAMP_COUNT2R                  TAMP_COUNT2R_Msk

/*******************  Bits definition for TAMP_OR register  **************/
#define TAMP_IN1_RMP_Pos              (0U)
#define TAMP_IN1_RMP_Msk              (0x1UL << TAMP_IN1_RMP_Pos)                       /*!< 0x1U */
#define TAMP_IN1_RMP                  TAMP_IN1_RMP_Msk
#define TAMP_BSDIS_Pos                (3U)
#define TAMP_BSDIS_Msk                (0x1UL << TAMP_BSDIS_Pos)                         /*!< 0x8U */
#define TAMP_BSDIS                    TAMP_BSDIS_Msk

/*******************  Bits definition for TAMP_ERCFGR register  **************/
#define TAMP_ERCFG0_Pos               (0U)
#define TAMP_ERCFG0_Msk               (0x1UL << TAMP_ERCFG0_Pos)                        /*!< 0x1U */
#define TAMP_ERCFG0                   TAMP_ERCFG0_Msk

/*******************  Bits definition for TAMP_BKPRIFR1 register  *************/
#define TAMP_BKPRIFR1_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR1_BKPRWRIF_Msk    (0xFFUL << TAMP_BKPRIFR1_BKPRWRIF_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR1_BKPRWRIF        TAMP_BKPRIFR1_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR2 register  *************/
#define TAMP_BKPRIFR2_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR2_BKPRWRIF_Msk    (0xFFUL << TAMP_BKPRIFR2_BKPRWRIF_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR2_BKPRWRIF        TAMP_BKPRIFR2_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR3 register  *************/
#define TAMP_BKPRIFR3_BKPRWRIF1_Pos   (0U)
#define TAMP_BKPRIFR3_BKPRWRIF1_Msk   (0xFFUL << TAMP_BKPRIFR3_BKPRWRIF1_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR3_BKPRWRIF1       TAMP_BKPRIFR3_BKPRWRIF1_Msk
#define TAMP_BKPRIFR3_BKPRWRIF2_Pos   (16U)
#define TAMP_BKPRIFR3_BKPRWRIF2_Msk   (0xFFUL << TAMP_BKPRIFR3_BKPRWRIF2_Pos)            /*!< 0x00FF0000U */
#define TAMP_BKPRIFR3_BKPRWRIF2       TAMP_BKPRIFR3_BKPRWRIF2_Msk

/*******************  Bits definition for TAMP_RCIDCFGR register  *************/
#define TAMP_RCIDCFGR_CFEN_Pos       (0U)
#define TAMP_RCIDCFGR_CFEN_Msk       (0x1UL << TAMP_RCIDCFGR_CFEN_Pos)                   /*!< 0x00000001U */
#define TAMP_RCIDCFGR_CFEN           TAMP_RCIDCFGR_CFEN_Msk
#define TAMP_RCIDCFGR_CID_Pos       (4U)
#define TAMP_RCIDCFGR_CID_Msk       (0xFUL << TAMP_RCIDCFGR_CID_Pos)                     /*!< 0x000000F0U */
#define TAMP_RCIDCFGR_CID           TAMP_RCIDCFGR_CID_Msk

/********************  Bits definition for TAMP_BKP0R register  ***************/
#define TAMP_BKP0R_Pos               (0U)
#define TAMP_BKP0R_Msk               (0xFFFFFFFFUL << TAMP_BKP0R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP0R                   TAMP_BKP0R_Msk

/********************  Bits definition for TAMP_BKP1R register  ****************/
#define TAMP_BKP1R_Pos               (0U)
#define TAMP_BKP1R_Msk               (0xFFFFFFFFUL << TAMP_BKP1R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP1R                   TAMP_BKP1R_Msk

/********************  Bits definition for TAMP_BKP2R register  ****************/
#define TAMP_BKP2R_Pos               (0U)
#define TAMP_BKP2R_Msk               (0xFFFFFFFFUL << TAMP_BKP2R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP2R                   TAMP_BKP2R_Msk

/********************  Bits definition for TAMP_BKP3R register  ****************/
#define TAMP_BKP3R_Pos               (0U)
#define TAMP_BKP3R_Msk               (0xFFFFFFFFUL << TAMP_BKP3R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP3R                   TAMP_BKP3R_Msk

/********************  Bits definition for TAMP_BKP4R register  ****************/
#define TAMP_BKP4R_Pos               (0U)
#define TAMP_BKP4R_Msk               (0xFFFFFFFFUL << TAMP_BKP4R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP4R                   TAMP_BKP4R_Msk

/********************  Bits definition for TAMP_BKP5R register  ****************/
#define TAMP_BKP5R_Pos               (0U)
#define TAMP_BKP5R_Msk               (0xFFFFFFFFUL << TAMP_BKP5R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP5R                   TAMP_BKP5R_Msk

/********************  Bits definition for TAMP_BKP6R register  ****************/
#define TAMP_BKP6R_Pos               (0U)
#define TAMP_BKP6R_Msk               (0xFFFFFFFFUL << TAMP_BKP6R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP6R                   TAMP_BKP6R_Msk

/********************  Bits definition for TAMP_BKP7R register  ****************/
#define TAMP_BKP7R_Pos               (0U)
#define TAMP_BKP7R_Msk               (0xFFFFFFFFUL << TAMP_BKP7R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP7R                   TAMP_BKP7R_Msk

/********************  Bits definition for TAMP_BKP8R register  ****************/
#define TAMP_BKP8R_Pos               (0U)
#define TAMP_BKP8R_Msk               (0xFFFFFFFFUL << TAMP_BKP8R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP8R                   TAMP_BKP8R_Msk

/********************  Bits definition for TAMP_BKP9R register  ****************/
#define TAMP_BKP9R_Pos               (0U)
#define TAMP_BKP9R_Msk               (0xFFFFFFFFUL << TAMP_BKP9R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP9R                   TAMP_BKP9R_Msk

/********************  Bits definition for TAMP_BKP10R register  ***************/
#define TAMP_BKP10R_Pos              (0U)
#define TAMP_BKP10R_Msk              (0xFFFFFFFFUL << TAMP_BKP10R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP10R                  TAMP_BKP10R_Msk

/********************  Bits definition for TAMP_BKP11R register  ***************/
#define TAMP_BKP11R_Pos              (0U)
#define TAMP_BKP11R_Msk              (0xFFFFFFFFUL << TAMP_BKP11R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP11R                  TAMP_BKP11R_Msk

/********************  Bits definition for TAMP_BKP12R register  ***************/
#define TAMP_BKP12R_Pos              (0U)
#define TAMP_BKP12R_Msk              (0xFFFFFFFFUL << TAMP_BKP12R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP12R                  TAMP_BKP12R_Msk

/********************  Bits definition for TAMP_BKP13R register  ***************/
#define TAMP_BKP13R_Pos              (0U)
#define TAMP_BKP13R_Msk              (0xFFFFFFFFUL << TAMP_BKP13R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP13R                  TAMP_BKP13R_Msk

/********************  Bits definition for TAMP_BKP14R register  ***************/
#define TAMP_BKP14R_Pos              (0U)
#define TAMP_BKP14R_Msk              (0xFFFFFFFFUL << TAMP_BKP14R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP14R                  TAMP_BKP14R_Msk

/********************  Bits definition for TAMP_BKP15R register  ***************/
#define TAMP_BKP15R_Pos              (0U)
#define TAMP_BKP15R_Msk              (0xFFFFFFFFUL << TAMP_BKP15R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP15R                  TAMP_BKP15R_Msk

/********************  Bits definition for TAMP_BKP16R register  ***************/
#define TAMP_BKP16R_Pos              (0U)
#define TAMP_BKP16R_Msk              (0xFFFFFFFFUL << TAMP_BKP16R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP16R                  TAMP_BKP16R_Msk

/********************  Bits definition for TAMP_BKP17R register  ***************/
#define TAMP_BKP17R_Pos              (0U)
#define TAMP_BKP17R_Msk              (0xFFFFFFFFUL << TAMP_BKP17R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP17R                  TAMP_BKP17R_Msk

/********************  Bits definition for TAMP_BKP18R register  ***************/
#define TAMP_BKP18R_Pos              (0U)
#define TAMP_BKP18R_Msk              (0xFFFFFFFFUL << TAMP_BKP18R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP18R                  TAMP_BKP18R_Msk

/********************  Bits definition for TAMP_BKP19R register  ***************/
#define TAMP_BKP19R_Pos              (0U)
#define TAMP_BKP19R_Msk              (0xFFFFFFFFUL << TAMP_BKP19R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP19R                  TAMP_BKP19R_Msk

/********************  Bits definition for TAMP_BKP20R register  ***************/
#define TAMP_BKP20R_Pos              (0U)
#define TAMP_BKP20R_Msk              (0xFFFFFFFFUL << TAMP_BKP20R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP20R                  TAMP_BKP20R_Msk

/********************  Bits definition for TAMP_BKP21R register  ***************/
#define TAMP_BKP21R_Pos              (0U)
#define TAMP_BKP21R_Msk              (0xFFFFFFFFUL << TAMP_BKP21R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP21R                  TAMP_BKP21R_Msk

/********************  Bits definition for TAMP_BKP22R register  ***************/
#define TAMP_BKP22R_Pos              (0U)
#define TAMP_BKP22R_Msk              (0xFFFFFFFFUL << TAMP_BKP22R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP22R                  TAMP_BKP22R_Msk

/********************  Bits definition for TAMP_BKP23R register  ***************/
#define TAMP_BKP23R_Pos              (0U)
#define TAMP_BKP23R_Msk              (0xFFFFFFFFUL << TAMP_BKP23R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP23R                  TAMP_BKP23R_Msk

/********************  Bits definition for TAMP_BKP24R register  ***************/
#define TAMP_BKP24R_Pos              (0U)
#define TAMP_BKP24R_Msk              (0xFFFFFFFFUL << TAMP_BKP24R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP24R                  TAMP_BKP24R_Msk

/********************  Bits definition for TAMP_BKP25R register  ***************/
#define TAMP_BKP25R_Pos              (0U)
#define TAMP_BKP25R_Msk              (0xFFFFFFFFUL << TAMP_BKP25R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP25R                  TAMP_BKP25R_Msk

/********************  Bits definition for TAMP_BKP26R register  ***************/
#define TAMP_BKP26R_Pos              (0U)
#define TAMP_BKP26R_Msk              (0xFFFFFFFFUL << TAMP_BKP26R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP26R                  TAMP_BKP26R_Msk

/********************  Bits definition for TAMP_BKP27R register  ***************/
#define TAMP_BKP27R_Pos              (0U)
#define TAMP_BKP27R_Msk              (0xFFFFFFFFUL << TAMP_BKP27R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP27R                  TAMP_BKP27R_Msk

/********************  Bits definition for TAMP_BKP28R register  ***************/
#define TAMP_BKP28R_Pos              (0U)
#define TAMP_BKP28R_Msk              (0xFFFFFFFFUL << TAMP_BKP28R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP28R                  TAMP_BKP28R_Msk

/********************  Bits definition for TAMP_BKP29R register  ***************/
#define TAMP_BKP29R_Pos              (0U)
#define TAMP_BKP29R_Msk              (0xFFFFFFFFUL << TAMP_BKP29R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP29R                  TAMP_BKP29R_Msk

/********************  Bits definition for TAMP_BKP30R register  ***************/
#define TAMP_BKP30R_Pos              (0U)
#define TAMP_BKP30R_Msk              (0xFFFFFFFFUL << TAMP_BKP30R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP30R                  TAMP_BKP30R_Msk

/********************  Bits definition for TAMP_BKP31R register  ***************/
#define TAMP_BKP31R_Pos              (0U)
#define TAMP_BKP31R_Msk              (0xFFFFFFFFUL << TAMP_BKP31R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP31R                  TAMP_BKP31R_Msk

/****  Bits definition for TAMP_BKP32R to 128 not added because never user ****/

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR2_OPTIONREG_OUT_Pos  (0U)
#define TAMP_HWCFGR2_OPTIONREG_OUT_Msk  (0xFFUL << TAMP_HWCFGR2_OPTIONREG_OUT_Pos)   /*!< 0x000000FFU */
#define TAMP_HWCFGR2_OPTIONREG_OUT      TAMP_HWCFGR2_OPTIONREG_OUT_Msk
#define TAMP_HWCFGR2_TRUST_ZONE_Pos     (8U)
#define TAMP_HWCFGR2_TRUST_ZONE_Msk     (0xFUL << TAMP_HWCFGR2_TRUST_ZONE_Pos)       /*!< 0x00000F00U */
#define TAMP_HWCFGR2_TRUST_ZONE         TAMP_HWCFGR2_TRUST_ZONE_Msk
#define TAMP_HWCFGR2_RIF_Pos            (12)
#define TAMP_HWCFGR2_RIF_Msk            (0xFUL << TAMP_HWCFGR2_RIF_Pos)              /*!< 0x0000F000U */
#define TAMP_HWCFGR2_RIF                TAMP_HWCFGR2_RIF_Msk

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR1_BACKUP_REGS_Pos    (0U)
#define TAMP_HWCFGR1_BACKUP_REGS_Msk    (0xFFUL << TAMP_HWCFGR1_BACKUP_REGS_Pos)     /*!< 0x000000FFU */
#define TAMP_HWCFGR1_BACKUP_REGS        TAMP_HWCFGR1_BACKUP_REGS_Msk
#define TAMP_HWCFGR1_TAMPER_Pos         (8U)
#define TAMP_HWCFGR1_TAMPER_Msk         (0xFUL << TAMP_HWCFGR1_TAMPER_Pos)           /*!< 0x00000F00U */
#define TAMP_HWCFGR1_TAMPER             TAMP_HWCFGR1_TAMPER_Msk
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Pos  (12U)
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Msk  (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0x0000F000U */
#define TAMP_HWCFGR1_ACTIVE_TAMPER      TAMP_HWCFGR1_ACTIVE_TAMPER_Msk
#define TAMP_HWCFGR1_INT_TAMPER_Pos     (8U)
#define TAMP_HWCFGR1_INT_TAMPER_Msk     (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0xFFFF0000U */
#define TAMP_HWCFGR1_INT_TAMPER         TAMP_HWCFGR1_ACTIVE_TAMPER_Msk

/*******************  Bits definition for TAMP_VERR register  **************/
#define TAMP_VERR_MINREV_Pos            (0U)
#define TAMP_VERR_MINREV_Msk            (0x4UL << TAMP_VERR_MINREV_Pos)              /*!< 0x0000000F */
#define TAMP_VERR_MINREV                TAMP_VERR_MINREV_Msk                         /*!< TAMP Minor version */
#define TAMP_VERR_MAJREV_Pos            (4U)
#define TAMP_VERR_MAJREV_Msk            (0x4UL << TAMPC_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define TAMP_VERR_MAJREV                TAMP_VERR_MAJREV_Msk                         /*!< TAMP Major version */

/*******************  Bits definition for TAMP_IPIDR register  **************/
#define TAMP_IPIDR_ID_Pos               (0U)
#define TAMP_IPIDR_ID_Msk               (0xFFFFFFFFUL << TAMP_IPIDR_ID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_IPIDR_ID                   TAMP_IPIDR_ID_Msk                            /*!< TAMP ID */

/*******************  Bits definition for TAMP_SIDR register  **************/
#define TAMP_SIDR_SID_Pos               (0U)
#define TAMP_SIDR_SID_Msk               (0xFFFFFFFFUL << TAMP_SIDR_SID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_SIDR_SID                   TAMP_SIDR_SID_Msk                            /*!< TAMP Size ID */

/******************************************************************************/
/*                                                                            */
/*                                Timer (TIM)                                 */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for TIM_CR1 register  ********************/
#define TIM_CR1_CEN_Pos           (0U)
#define TIM_CR1_CEN_Msk           (0x1UL << TIM_CR1_CEN_Pos)                   /*!< 0x00000001 */
#define TIM_CR1_CEN               TIM_CR1_CEN_Msk                              /*!< Counter enable */
#define TIM_CR1_UDIS_Pos          (1U)
#define TIM_CR1_UDIS_Msk          (0x1UL << TIM_CR1_UDIS_Pos)                  /*!< 0x00000002 */
#define TIM_CR1_UDIS              TIM_CR1_UDIS_Msk                             /*!< Update disable */
#define TIM_CR1_URS_Pos           (2U)
#define TIM_CR1_URS_Msk           (0x1UL << TIM_CR1_URS_Pos)                   /*!< 0x00000004 */
#define TIM_CR1_URS               TIM_CR1_URS_Msk                              /*!< Update request source */
#define TIM_CR1_OPM_Pos           (3U)
#define TIM_CR1_OPM_Msk           (0x1UL << TIM_CR1_OPM_Pos)                   /*!< 0x00000008 */
#define TIM_CR1_OPM               TIM_CR1_OPM_Msk                              /*!< One pulse mode */
#define TIM_CR1_DIR_Pos           (4U)
#define TIM_CR1_DIR_Msk           (0x1UL << TIM_CR1_DIR_Pos)                   /*!< 0x00000010 */
#define TIM_CR1_DIR               TIM_CR1_DIR_Msk                              /*!< Direction */
#define TIM_CR1_CMS_Pos           (5U)
#define TIM_CR1_CMS_Msk           (0x3UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000060 */
#define TIM_CR1_CMS               TIM_CR1_CMS_Msk                              /*!< CMS[1:0] bits (Center-aligned mode selection) */
#define TIM_CR1_CMS_0             (0x1UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000020 */
#define TIM_CR1_CMS_1             (0x2UL << TIM_CR1_CMS_Pos)                   /*!< 0x00000040 */
#define TIM_CR1_ARPE_Pos          (7U)
#define TIM_CR1_ARPE_Msk          (0x1UL << TIM_CR1_ARPE_Pos)                  /*!< 0x00000080 */
#define TIM_CR1_ARPE              TIM_CR1_ARPE_Msk                             /*!< Auto-reload preload enable */
#define TIM_CR1_CKD_Pos           (8U)
#define TIM_CR1_CKD_Msk           (0x3UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000300 */
#define TIM_CR1_CKD               TIM_CR1_CKD_Msk                              /*!< CKD[1:0] bits (clock division) */
#define TIM_CR1_CKD_0             (0x1UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000100 */
#define TIM_CR1_CKD_1             (0x2UL << TIM_CR1_CKD_Pos)                   /*!< 0x00000200 */
#define TIM_CR1_UIFREMAP_Pos      (11U)
#define TIM_CR1_UIFREMAP_Msk      (0x1UL << TIM_CR1_UIFREMAP_Pos)              /*!< 0x00000800 */
#define TIM_CR1_UIFREMAP          TIM_CR1_UIFREMAP_Msk                         /*!< Update interrupt flag remap */
#define TIM_CR1_DITHEN_Pos        (12U)
#define TIM_CR1_DITHEN_Msk        (0x1UL << TIM_CR1_DITHEN_Pos)                /*!< 0x00001000 */
#define TIM_CR1_DITHEN            TIM_CR1_DITHEN_Msk                           /*!< Dithering enable */

/*******************  Bit definition for TIM_CR2 register  ********************/
#define TIM_CR2_CCPC_Pos          (0U)
#define TIM_CR2_CCPC_Msk          (0x1UL << TIM_CR2_CCPC_Pos)                  /*!< 0x00000001 */
#define TIM_CR2_CCPC              TIM_CR2_CCPC_Msk                             /*!< Capture/Compare Preloaded Control */
#define TIM_CR2_CCUS_Pos          (2U)
#define TIM_CR2_CCUS_Msk          (0x1UL << TIM_CR2_CCUS_Pos)                  /*!< 0x00000004 */
#define TIM_CR2_CCUS              TIM_CR2_CCUS_Msk                             /*!< Capture/Compare Control Update Selection */
#define TIM_CR2_CCDS_Pos          (3U)
#define TIM_CR2_CCDS_Msk          (0x1UL << TIM_CR2_CCDS_Pos)                  /*!< 0x00000008 */
#define TIM_CR2_CCDS              TIM_CR2_CCDS_Msk                             /*!< Capture/Compare DMA Selection */
#define TIM_CR2_MMS_Pos           (4U)
#define TIM_CR2_MMS_Msk           (0x200007UL << TIM_CR2_MMS_Pos)              /*!< 0x02000070 */
#define TIM_CR2_MMS               TIM_CR2_MMS_Msk                              /*!< MMS[3:0] bits (Master Mode Selection) */
#define TIM_CR2_MMS_0             (0x000001UL << TIM_CR2_MMS_Pos)              /*!< 0x00000010 */
#define TIM_CR2_MMS_1             (0x000002UL << TIM_CR2_MMS_Pos)              /*!< 0x00000020 */
#define TIM_CR2_MMS_2             (0x000004UL << TIM_CR2_MMS_Pos)              /*!< 0x00000040 */
#define TIM_CR2_MMS_3             (0x200000UL << TIM_CR2_MMS_Pos)              /*!< 0x02000000 */
#define TIM_CR2_TI1S_Pos          (7U)
#define TIM_CR2_TI1S_Msk          (0x1UL << TIM_CR2_TI1S_Pos)                  /*!< 0x00000080 */
#define TIM_CR2_TI1S              TIM_CR2_TI1S_Msk                             /*!< TI1 Selection */
#define TIM_CR2_OIS1_Pos          (8U)
#define TIM_CR2_OIS1_Msk          (0x1UL << TIM_CR2_OIS1_Pos)                  /*!< 0x00000100 */
#define TIM_CR2_OIS1              TIM_CR2_OIS1_Msk                             /*!< Output Idle state 1 (OC1 output) */
#define TIM_CR2_OIS1N_Pos         (9U)
#define TIM_CR2_OIS1N_Msk         (0x1UL << TIM_CR2_OIS1N_Pos)                 /*!< 0x00000200 */
#define TIM_CR2_OIS1N             TIM_CR2_OIS1N_Msk                            /*!< Output Idle state 1 (OC1N output) */
#define TIM_CR2_OIS2_Pos          (10U)
#define TIM_CR2_OIS2_Msk          (0x1UL << TIM_CR2_OIS2_Pos)                  /*!< 0x00000400 */
#define TIM_CR2_OIS2              TIM_CR2_OIS2_Msk                             /*!< Output Idle state 2 (OC2 output) */
#define TIM_CR2_OIS2N_Pos         (11U)
#define TIM_CR2_OIS2N_Msk         (0x1UL << TIM_CR2_OIS2N_Pos)                 /*!< 0x00000800 */
#define TIM_CR2_OIS2N             TIM_CR2_OIS2N_Msk                            /*!< Output Idle state 2 (OC2N output) */
#define TIM_CR2_OIS3_Pos          (12U)
#define TIM_CR2_OIS3_Msk          (0x1UL << TIM_CR2_OIS3_Pos)                  /*!< 0x00001000 */
#define TIM_CR2_OIS3              TIM_CR2_OIS3_Msk                             /*!< Output Idle state 3 (OC3 output) */
#define TIM_CR2_OIS3N_Pos         (13U)
#define TIM_CR2_OIS3N_Msk         (0x1UL << TIM_CR2_OIS3N_Pos)                 /*!< 0x00002000 */
#define TIM_CR2_OIS3N             TIM_CR2_OIS3N_Msk                            /*!< Output Idle state 3 (OC3N output) */
#define TIM_CR2_OIS4_Pos          (14U)
#define TIM_CR2_OIS4_Msk          (0x1UL << TIM_CR2_OIS4_Pos)                  /*!< 0x00004000 */
#define TIM_CR2_OIS4              TIM_CR2_OIS4_Msk                             /*!< Output Idle state 4 (OC4 output) */
#define TIM_CR2_OIS4N_Pos         (15U)
#define TIM_CR2_OIS4N_Msk         (0x1UL << TIM_CR2_OIS4N_Pos)                 /*!< 0x00008000 */
#define TIM_CR2_OIS4N             TIM_CR2_OIS4N_Msk                            /*!< Output Idle state 4 (OC4N output) */
#define TIM_CR2_OIS5_Pos          (16U)
#define TIM_CR2_OIS5_Msk          (0x1UL << TIM_CR2_OIS5_Pos)                  /*!< 0x00010000 */
#define TIM_CR2_OIS5              TIM_CR2_OIS5_Msk                             /*!< Output Idle state 5 (OC5 output) */
#define TIM_CR2_OIS6_Pos          (18U)
#define TIM_CR2_OIS6_Msk          (0x1UL << TIM_CR2_OIS6_Pos)                  /*!< 0x00040000 */
#define TIM_CR2_OIS6              TIM_CR2_OIS6_Msk                             /*!< Output Idle state 6 (OC6 output) */
#define TIM_CR2_MMS2_Pos          (20U)
#define TIM_CR2_MMS2_Msk          (0xFUL << TIM_CR2_MMS2_Pos)                  /*!< 0x00F00000 */
#define TIM_CR2_MMS2              TIM_CR2_MMS2_Msk                             /*!< MMS[2:0] bits (Master Mode Selection) */
#define TIM_CR2_MMS2_0            (0x1UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00100000 */
#define TIM_CR2_MMS2_1            (0x2UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00200000 */
#define TIM_CR2_MMS2_2            (0x4UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00400000 */
#define TIM_CR2_MMS2_3            (0x8UL << TIM_CR2_MMS2_Pos)                  /*!< 0x00800000 */

/*******************  Bit definition for TIM_SMCR register  *******************/
#define TIM_SMCR_SMS_Pos          (0U)
#define TIM_SMCR_SMS_Msk          (0x10007UL << TIM_SMCR_SMS_Pos)              /*!< 0x00010007 */
#define TIM_SMCR_SMS              TIM_SMCR_SMS_Msk                             /*!< SMS[2:0] bits (Slave mode selection) */
#define TIM_SMCR_SMS_0            (0x00001UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000001 */
#define TIM_SMCR_SMS_1            (0x00002UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000002 */
#define TIM_SMCR_SMS_2            (0x00004UL << TIM_SMCR_SMS_Pos)              /*!< 0x00000004 */
#define TIM_SMCR_SMS_3            (0x10000UL << TIM_SMCR_SMS_Pos)              /*!< 0x00010000 */
#define TIM_SMCR_TS_Pos           (4U)
#define TIM_SMCR_TS_Msk           (0x30007UL << TIM_SMCR_TS_Pos)               /*!< 0x00300070 */
#define TIM_SMCR_TS               TIM_SMCR_TS_Msk                              /*!< TS[2:0] bits (Trigger selection) */
#define TIM_SMCR_TS_0             (0x00001UL << TIM_SMCR_TS_Pos)               /*!< 0x00000010 */
#define TIM_SMCR_TS_1             (0x00002UL << TIM_SMCR_TS_Pos)               /*!< 0x00000020 */
#define TIM_SMCR_TS_2             (0x00004UL << TIM_SMCR_TS_Pos)               /*!< 0x00000040 */
#define TIM_SMCR_TS_3             (0x10000UL << TIM_SMCR_TS_Pos)               /*!< 0x00100000 */
#define TIM_SMCR_TS_4             (0x20000UL << TIM_SMCR_TS_Pos)               /*!< 0x00200000 */
#define TIM_SMCR_MSM_Pos          (7U)
#define TIM_SMCR_MSM_Msk          (0x1UL << TIM_SMCR_MSM_Pos)                  /*!< 0x00000080 */
#define TIM_SMCR_MSM              TIM_SMCR_MSM_Msk                             /*!< Master/slave mode */
#define TIM_SMCR_ETF_Pos          (8U)
#define TIM_SMCR_ETF_Msk          (0xFUL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000F00 */
#define TIM_SMCR_ETF              TIM_SMCR_ETF_Msk                             /*!< ETF[3:0] bits (External trigger filter) */
#define TIM_SMCR_ETF_0            (0x1UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000100 */
#define TIM_SMCR_ETF_1            (0x2UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000200 */
#define TIM_SMCR_ETF_2            (0x4UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000400 */
#define TIM_SMCR_ETF_3            (0x8UL << TIM_SMCR_ETF_Pos)                  /*!< 0x00000800 */
#define TIM_SMCR_ETPS_Pos         (12U)
#define TIM_SMCR_ETPS_Msk         (0x3UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00003000 */
#define TIM_SMCR_ETPS             TIM_SMCR_ETPS_Msk                            /*!< ETPS[1:0] bits (External trigger prescaler) */
#define TIM_SMCR_ETPS_0           (0x1UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00001000 */
#define TIM_SMCR_ETPS_1           (0x2UL << TIM_SMCR_ETPS_Pos)                 /*!< 0x00002000 */
#define TIM_SMCR_ECE_Pos          (14U)
#define TIM_SMCR_ECE_Msk          (0x1UL << TIM_SMCR_ECE_Pos)                  /*!< 0x00004000 */
#define TIM_SMCR_ECE              TIM_SMCR_ECE_Msk                             /*!< External clock enable */
#define TIM_SMCR_ETP_Pos          (15U)
#define TIM_SMCR_ETP_Msk          (0x1UL << TIM_SMCR_ETP_Pos)                  /*!< 0x00008000 */
#define TIM_SMCR_ETP              TIM_SMCR_ETP_Msk                             /*!< External trigger polarity */
#define TIM_SMCR_SMSPE_Pos        (24U)
#define TIM_SMCR_SMSPE_Msk        (0x1UL << TIM_SMCR_SMSPE_Pos)                /*!< 0x02000000 */
#define TIM_SMCR_SMSPE            TIM_SMCR_SMSPE_Msk                           /*!< SMS preload enable */
#define TIM_SMCR_SMSPS_Pos        (25U)
#define TIM_SMCR_SMSPS_Msk        (0x1UL << TIM_SMCR_SMSPS_Pos)                /*!< 0x04000000 */
#define TIM_SMCR_SMSPS            TIM_SMCR_SMSPS_Msk                           /*!< SMS preload source */

/*******************  Bit definition for TIM_DIER register  *******************/
#define TIM_DIER_UIE_Pos          (0U)
#define TIM_DIER_UIE_Msk          (0x1UL << TIM_DIER_UIE_Pos)                  /*!< 0x00000001 */
#define TIM_DIER_UIE              TIM_DIER_UIE_Msk                             /*!< Update interrupt enable */
#define TIM_DIER_CC1IE_Pos        (1U)
#define TIM_DIER_CC1IE_Msk        (0x1UL << TIM_DIER_CC1IE_Pos)                /*!< 0x00000002 */
#define TIM_DIER_CC1IE            TIM_DIER_CC1IE_Msk                           /*!< Capture/Compare 1 interrupt enable */
#define TIM_DIER_CC2IE_Pos        (2U)
#define TIM_DIER_CC2IE_Msk        (0x1UL << TIM_DIER_CC2IE_Pos)                /*!< 0x00000004 */
#define TIM_DIER_CC2IE            TIM_DIER_CC2IE_Msk                           /*!< Capture/Compare 2 interrupt enable */
#define TIM_DIER_CC3IE_Pos        (3U)
#define TIM_DIER_CC3IE_Msk        (0x1UL << TIM_DIER_CC3IE_Pos)                /*!< 0x00000008 */
#define TIM_DIER_CC3IE            TIM_DIER_CC3IE_Msk                           /*!< Capture/Compare 3 interrupt enable */
#define TIM_DIER_CC4IE_Pos        (4U)
#define TIM_DIER_CC4IE_Msk        (0x1UL << TIM_DIER_CC4IE_Pos)                /*!< 0x00000010 */
#define TIM_DIER_CC4IE            TIM_DIER_CC4IE_Msk                           /*!< Capture/Compare 4 interrupt enable */
#define TIM_DIER_COMIE_Pos        (5U)
#define TIM_DIER_COMIE_Msk        (0x1UL << TIM_DIER_COMIE_Pos)                /*!< 0x00000020 */
#define TIM_DIER_COMIE            TIM_DIER_COMIE_Msk                           /*!< COM interrupt enable */
#define TIM_DIER_TIE_Pos          (6U)
#define TIM_DIER_TIE_Msk          (0x1UL << TIM_DIER_TIE_Pos)                  /*!< 0x00000040 */
#define TIM_DIER_TIE              TIM_DIER_TIE_Msk                             /*!< Trigger interrupt enable */
#define TIM_DIER_BIE_Pos          (7U)
#define TIM_DIER_BIE_Msk          (0x1UL << TIM_DIER_BIE_Pos)                  /*!< 0x00000080 */
#define TIM_DIER_BIE              TIM_DIER_BIE_Msk                             /*!< Break interrupt enable */
#define TIM_DIER_UDE_Pos          (8U)
#define TIM_DIER_UDE_Msk          (0x1UL << TIM_DIER_UDE_Pos)                  /*!< 0x00000100 */
#define TIM_DIER_UDE              TIM_DIER_UDE_Msk                             /*!< Update DMA request enable */
#define TIM_DIER_CC1DE_Pos        (9U)
#define TIM_DIER_CC1DE_Msk        (0x1UL << TIM_DIER_CC1DE_Pos)                /*!< 0x00000200 */
#define TIM_DIER_CC1DE            TIM_DIER_CC1DE_Msk                           /*!< Capture/Compare 1 DMA request enable */
#define TIM_DIER_CC2DE_Pos        (10U)
#define TIM_DIER_CC2DE_Msk        (0x1UL << TIM_DIER_CC2DE_Pos)                /*!< 0x00000400 */
#define TIM_DIER_CC2DE            TIM_DIER_CC2DE_Msk                           /*!< Capture/Compare 2 DMA request enable */
#define TIM_DIER_CC3DE_Pos        (11U)
#define TIM_DIER_CC3DE_Msk        (0x1UL << TIM_DIER_CC3DE_Pos)                /*!< 0x00000800 */
#define TIM_DIER_CC3DE            TIM_DIER_CC3DE_Msk                           /*!< Capture/Compare 3 DMA request enable */
#define TIM_DIER_CC4DE_Pos        (12U)
#define TIM_DIER_CC4DE_Msk        (0x1UL << TIM_DIER_CC4DE_Pos)                /*!< 0x00001000 */
#define TIM_DIER_CC4DE            TIM_DIER_CC4DE_Msk                           /*!< Capture/Compare 4 DMA request enable */
#define TIM_DIER_COMDE_Pos        (13U)
#define TIM_DIER_COMDE_Msk        (0x1UL << TIM_DIER_COMDE_Pos)                /*!< 0x00002000 */
#define TIM_DIER_COMDE            TIM_DIER_COMDE_Msk                           /*!< COM DMA request enable */
#define TIM_DIER_TDE_Pos          (14U)
#define TIM_DIER_TDE_Msk          (0x1UL << TIM_DIER_TDE_Pos)                  /*!< 0x00004000 */
#define TIM_DIER_TDE              TIM_DIER_TDE_Msk                             /*!< Trigger DMA request enable */
#define TIM_DIER_IDXIE_Pos        (20U)
#define TIM_DIER_IDXIE_Msk        (0x1UL << TIM_DIER_IDXIE_Pos)                /*!< 0x00100000 */
#define TIM_DIER_IDXIE            TIM_DIER_IDXIE_Msk                           /*!< Encoder index interrupt enable */
#define TIM_DIER_DIRIE_Pos        (21U)
#define TIM_DIER_DIRIE_Msk        (0x1UL << TIM_DIER_DIRIE_Pos)                /*!< 0x00200000 */
#define TIM_DIER_DIRIE            TIM_DIER_DIRIE_Msk                           /*!< Encoder direction change interrupt enable */
#define TIM_DIER_IERRIE_Pos       (22U)
#define TIM_DIER_IERRIE_Msk       (0x1UL << TIM_DIER_IERRIE_Pos)               /*!< 0x00400000 */
#define TIM_DIER_IERRIE           TIM_DIER_IERRIE_Msk                          /*!< Encoder index error enable */
#define TIM_DIER_TERRIE_Pos       (23U)
#define TIM_DIER_TERRIE_Msk       (0x1UL << TIM_DIER_TERRIE_Pos)               /*!< 0x00800000 */
#define TIM_DIER_TERRIE           TIM_DIER_TERRIE_Msk                          /*!< Encoder transition error enable */

/********************  Bit definition for TIM_SR register  ********************/
#define TIM_SR_UIF_Pos            (0U)
#define TIM_SR_UIF_Msk            (0x1UL << TIM_SR_UIF_Pos)                    /*!< 0x00000001 */
#define TIM_SR_UIF                TIM_SR_UIF_Msk                               /*!< Update interrupt Flag */
#define TIM_SR_CC1IF_Pos          (1U)
#define TIM_SR_CC1IF_Msk          (0x1UL << TIM_SR_CC1IF_Pos)                  /*!< 0x00000002 */
#define TIM_SR_CC1IF              TIM_SR_CC1IF_Msk                             /*!< Capture/Compare 1 interrupt Flag */
#define TIM_SR_CC2IF_Pos          (2U)
#define TIM_SR_CC2IF_Msk          (0x1UL << TIM_SR_CC2IF_Pos)                  /*!< 0x00000004 */
#define TIM_SR_CC2IF              TIM_SR_CC2IF_Msk                             /*!< Capture/Compare 2 interrupt Flag */
#define TIM_SR_CC3IF_Pos          (3U)
#define TIM_SR_CC3IF_Msk          (0x1UL << TIM_SR_CC3IF_Pos)                  /*!< 0x00000008 */
#define TIM_SR_CC3IF              TIM_SR_CC3IF_Msk                             /*!< Capture/Compare 3 interrupt Flag */
#define TIM_SR_CC4IF_Pos          (4U)
#define TIM_SR_CC4IF_Msk          (0x1UL << TIM_SR_CC4IF_Pos)                  /*!< 0x00000010 */
#define TIM_SR_CC4IF              TIM_SR_CC4IF_Msk                             /*!< Capture/Compare 4 interrupt Flag */
#define TIM_SR_COMIF_Pos          (5U)
#define TIM_SR_COMIF_Msk          (0x1UL << TIM_SR_COMIF_Pos)                  /*!< 0x00000020 */
#define TIM_SR_COMIF              TIM_SR_COMIF_Msk                             /*!< COM interrupt Flag */
#define TIM_SR_TIF_Pos            (6U)
#define TIM_SR_TIF_Msk            (0x1UL << TIM_SR_TIF_Pos)                    /*!< 0x00000040 */
#define TIM_SR_TIF                TIM_SR_TIF_Msk                               /*!< Trigger interrupt Flag */
#define TIM_SR_BIF_Pos            (7U)
#define TIM_SR_BIF_Msk            (0x1UL << TIM_SR_BIF_Pos)                    /*!< 0x00000080 */
#define TIM_SR_BIF                TIM_SR_BIF_Msk                               /*!< Break interrupt Flag */
#define TIM_SR_B2IF_Pos           (8U)
#define TIM_SR_B2IF_Msk           (0x1UL << TIM_SR_B2IF_Pos)                   /*!< 0x00000100 */
#define TIM_SR_B2IF               TIM_SR_B2IF_Msk                              /*!< Break 2 interrupt Flag */
#define TIM_SR_CC1OF_Pos          (9U)
#define TIM_SR_CC1OF_Msk          (0x1UL << TIM_SR_CC1OF_Pos)                  /*!< 0x00000200 */
#define TIM_SR_CC1OF              TIM_SR_CC1OF_Msk                             /*!< Capture/Compare 1 Overcapture Flag */
#define TIM_SR_CC2OF_Pos          (10U)
#define TIM_SR_CC2OF_Msk          (0x1UL << TIM_SR_CC2OF_Pos)                  /*!< 0x00000400 */
#define TIM_SR_CC2OF              TIM_SR_CC2OF_Msk                             /*!< Capture/Compare 2 Overcapture Flag */
#define TIM_SR_CC3OF_Pos          (11U)
#define TIM_SR_CC3OF_Msk          (0x1UL << TIM_SR_CC3OF_Pos)                  /*!< 0x00000800 */
#define TIM_SR_CC3OF              TIM_SR_CC3OF_Msk                             /*!< Capture/Compare 3 Overcapture Flag */
#define TIM_SR_CC4OF_Pos          (12U)
#define TIM_SR_CC4OF_Msk          (0x1UL << TIM_SR_CC4OF_Pos)                  /*!< 0x00001000 */
#define TIM_SR_CC4OF              TIM_SR_CC4OF_Msk                             /*!< Capture/Compare 4 Overcapture Flag */
#define TIM_SR_SBIF_Pos           (13U)
#define TIM_SR_SBIF_Msk           (0x1UL << TIM_SR_SBIF_Pos)                   /*!< 0x00002000 */
#define TIM_SR_SBIF               TIM_SR_SBIF_Msk                              /*!< System Break interrupt Flag */
#define TIM_SR_CC5IF_Pos          (16U)
#define TIM_SR_CC5IF_Msk          (0x1UL << TIM_SR_CC5IF_Pos)                  /*!< 0x00010000 */
#define TIM_SR_CC5IF              TIM_SR_CC5IF_Msk                             /*!< Capture/Compare 5 interrupt Flag */
#define TIM_SR_CC6IF_Pos          (17U)
#define TIM_SR_CC6IF_Msk          (0x1UL << TIM_SR_CC6IF_Pos)                  /*!< 0x00020000 */
#define TIM_SR_CC6IF              TIM_SR_CC6IF_Msk                             /*!< Capture/Compare 6 interrupt Flag */
#define TIM_SR_IDXF_Pos           (20U)
#define TIM_SR_IDXF_Msk           (0x1UL << TIM_SR_IDXF_Pos)                   /*!< 0x00100000 */
#define TIM_SR_IDXF               TIM_SR_IDXF_Msk                              /*!< Encoder index interrupt flag */
#define TIM_SR_DIRF_Pos           (21U)
#define TIM_SR_DIRF_Msk           (0x1UL << TIM_SR_DIRF_Pos)                   /*!< 0x00200000 */
#define TIM_SR_DIRF               TIM_SR_DIRF_Msk                              /*!< Encoder direction change interrupt flag */
#define TIM_SR_IERRF_Pos          (22U)
#define TIM_SR_IERRF_Msk          (0x1UL << TIM_SR_IERRF_Pos)                  /*!< 0x00400000 */
#define TIM_SR_IERRF              TIM_SR_IERRF_Msk                             /*!< Encoder index error flag */
#define TIM_SR_TERRF_Pos          (23U)
#define TIM_SR_TERRF_Msk          (0x1UL << TIM_SR_TERRF_Pos)                  /*!< 0x00800000 */
#define TIM_SR_TERRF              TIM_SR_TERRF_Msk                             /*!< Encoder transition error flag */

/*******************  Bit definition for TIM_EGR register  ********************/
#define TIM_EGR_UG_Pos            (0U)
#define TIM_EGR_UG_Msk            (0x1UL << TIM_EGR_UG_Pos)                    /*!< 0x00000001 */
#define TIM_EGR_UG                TIM_EGR_UG_Msk                               /*!< Update Generation */
#define TIM_EGR_CC1G_Pos          (1U)
#define TIM_EGR_CC1G_Msk          (0x1UL << TIM_EGR_CC1G_Pos)                  /*!< 0x00000002 */
#define TIM_EGR_CC1G              TIM_EGR_CC1G_Msk                             /*!< Capture/Compare 1 Generation */
#define TIM_EGR_CC2G_Pos          (2U)
#define TIM_EGR_CC2G_Msk          (0x1UL << TIM_EGR_CC2G_Pos)                  /*!< 0x00000004 */
#define TIM_EGR_CC2G              TIM_EGR_CC2G_Msk                             /*!< Capture/Compare 2 Generation */
#define TIM_EGR_CC3G_Pos          (3U)
#define TIM_EGR_CC3G_Msk          (0x1UL << TIM_EGR_CC3G_Pos)                  /*!< 0x00000008 */
#define TIM_EGR_CC3G              TIM_EGR_CC3G_Msk                             /*!< Capture/Compare 3 Generation */
#define TIM_EGR_CC4G_Pos          (4U)
#define TIM_EGR_CC4G_Msk          (0x1UL << TIM_EGR_CC4G_Pos)                  /*!< 0x00000010 */
#define TIM_EGR_CC4G              TIM_EGR_CC4G_Msk                             /*!< Capture/Compare 4 Generation */
#define TIM_EGR_COMG_Pos          (5U)
#define TIM_EGR_COMG_Msk          (0x1UL << TIM_EGR_COMG_Pos)                  /*!< 0x00000020 */
#define TIM_EGR_COMG              TIM_EGR_COMG_Msk                             /*!< Capture/Compare Control Update Generation */
#define TIM_EGR_TG_Pos            (6U)
#define TIM_EGR_TG_Msk            (0x1UL << TIM_EGR_TG_Pos)                    /*!< 0x00000040 */
#define TIM_EGR_TG                TIM_EGR_TG_Msk                               /*!< Trigger Generation */
#define TIM_EGR_BG_Pos            (7U)
#define TIM_EGR_BG_Msk            (0x1UL << TIM_EGR_BG_Pos)                    /*!< 0x00000080 */
#define TIM_EGR_BG                TIM_EGR_BG_Msk                               /*!< Break Generation */
#define TIM_EGR_B2G_Pos           (8U)
#define TIM_EGR_B2G_Msk           (0x1UL << TIM_EGR_B2G_Pos)                   /*!< 0x00000100 */
#define TIM_EGR_B2G               TIM_EGR_B2G_Msk                              /*!< Break 2 Generation */

/******************  Bit definition for TIM_CCMR1 register  *******************/
/*---------------------------------- Common ----------------------------------*/
#define TIM_CCMR1_CC1S_Pos        (0U)
#define TIM_CCMR1_CC1S_Msk        (0x3UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000003 */
#define TIM_CCMR1_CC1S            TIM_CCMR1_CC1S_Msk                           /*!< CC1S[1:0] bits (Capture/Compare 1 Selection) */
#define TIM_CCMR1_CC1S_0          (0x1UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000001 */
#define TIM_CCMR1_CC1S_1          (0x2UL << TIM_CCMR1_CC1S_Pos)                /*!< 0x00000002 */
#define TIM_CCMR1_CC2S_Pos        (8U)
#define TIM_CCMR1_CC2S_Msk        (0x3UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000300 */
#define TIM_CCMR1_CC2S            TIM_CCMR1_CC2S_Msk                           /*!< CC2S[1:0] bits (Capture/Compare 2 Selection) */
#define TIM_CCMR1_CC2S_0          (0x1UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000100 */
#define TIM_CCMR1_CC2S_1          (0x2UL << TIM_CCMR1_CC2S_Pos)                /*!< 0x00000200 */

/*---------------------------- Input capture mode ----------------------------*/
#define TIM_CCMR1_IC1PSC_Pos      (2U)
#define TIM_CCMR1_IC1PSC_Msk      (0x3UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x0000000C */
#define TIM_CCMR1_IC1PSC          TIM_CCMR1_IC1PSC_Msk                         /*!< IC1PSC[1:0] bits (Input Capture 1 Prescaler) */
#define TIM_CCMR1_IC1PSC_0        (0x1UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x00000004 */
#define TIM_CCMR1_IC1PSC_1        (0x2UL << TIM_CCMR1_IC1PSC_Pos)              /*!< 0x00000008 */
#define TIM_CCMR1_IC1F_Pos        (4U)
#define TIM_CCMR1_IC1F_Msk        (0xFUL << TIM_CCMR1_IC1F_Pos)                /*!< 0x000000F0 */
#define TIM_CCMR1_IC1F            TIM_CCMR1_IC1F_Msk                           /*!< IC1F[3:0] bits (Input Capture 1 Filter) */
#define TIM_CCMR1_IC1F_0          (0x1UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000010 */
#define TIM_CCMR1_IC1F_1          (0x2UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000020 */
#define TIM_CCMR1_IC1F_2          (0x4UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000040 */
#define TIM_CCMR1_IC1F_3          (0x8UL << TIM_CCMR1_IC1F_Pos)                /*!< 0x00000080 */
#define TIM_CCMR1_IC2PSC_Pos      (10U)
#define TIM_CCMR1_IC2PSC_Msk      (0x3UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000C00 */
#define TIM_CCMR1_IC2PSC          TIM_CCMR1_IC2PSC_Msk                         /*!< IC2PSC[1:0] bits (Input Capture 2 Prescaler) */
#define TIM_CCMR1_IC2PSC_0        (0x1UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000400 */
#define TIM_CCMR1_IC2PSC_1        (0x2UL << TIM_CCMR1_IC2PSC_Pos)              /*!< 0x00000800 */
#define TIM_CCMR1_IC2F_Pos        (12U)
#define TIM_CCMR1_IC2F_Msk        (0xFUL << TIM_CCMR1_IC2F_Pos)                /*!< 0x0000F000 */
#define TIM_CCMR1_IC2F            TIM_CCMR1_IC2F_Msk                           /*!< IC2F[3:0] bits (Input Capture 2 Filter) */
#define TIM_CCMR1_IC2F_0          (0x1UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00001000 */
#define TIM_CCMR1_IC2F_1          (0x2UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00002000 */
#define TIM_CCMR1_IC2F_2          (0x4UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00004000 */
#define TIM_CCMR1_IC2F_3          (0x8UL << TIM_CCMR1_IC2F_Pos)                /*!< 0x00008000 */

/*---------------------------- Output compare mode ---------------------------*/
#define TIM_CCMR1_OC1FE_Pos       (2U)
#define TIM_CCMR1_OC1FE_Msk       (0x1UL << TIM_CCMR1_OC1FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR1_OC1FE           TIM_CCMR1_OC1FE_Msk                          /*!< Output Compare 1 Fast enable */
#define TIM_CCMR1_OC1PE_Pos       (3U)
#define TIM_CCMR1_OC1PE_Msk       (0x1UL << TIM_CCMR1_OC1PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR1_OC1PE           TIM_CCMR1_OC1PE_Msk                          /*!< Output Compare 1 Preload enable */
#define TIM_CCMR1_OC1M_Pos        (4U)
#define TIM_CCMR1_OC1M_Msk        (0x1007UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR1_OC1M            TIM_CCMR1_OC1M_Msk                           /*!< OC1M[2:0] bits (Output Compare 1 Mode) */
#define TIM_CCMR1_OC1M_0          (0x0001UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR1_OC1M_1          (0x0002UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR1_OC1M_2          (0x0004UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR1_OC1M_3          (0x1000UL << TIM_CCMR1_OC1M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR1_OC1CE_Pos       (7U)
#define TIM_CCMR1_OC1CE_Msk       (0x1UL << TIM_CCMR1_OC1CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR1_OC1CE           TIM_CCMR1_OC1CE_Msk                          /*!< Output Compare 1 Clear Enable */
#define TIM_CCMR1_OC2FE_Pos       (10U)
#define TIM_CCMR1_OC2FE_Msk       (0x1UL << TIM_CCMR1_OC2FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR1_OC2FE           TIM_CCMR1_OC2FE_Msk                          /*!< Output Compare 2 Fast enable */
#define TIM_CCMR1_OC2PE_Pos       (11U)
#define TIM_CCMR1_OC2PE_Msk       (0x1UL << TIM_CCMR1_OC2PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR1_OC2PE           TIM_CCMR1_OC2PE_Msk                          /*!< Output Compare 2 Preload enable */
#define TIM_CCMR1_OC2M_Pos        (12U)
#define TIM_CCMR1_OC2M_Msk        (0x1007UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR1_OC2M            TIM_CCMR1_OC2M_Msk                           /*!< OC2M[2:0] bits (Output Compare 2 Mode) */
#define TIM_CCMR1_OC2M_0          (0x0001UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR1_OC2M_1          (0x0002UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR1_OC2M_2          (0x0004UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR1_OC2M_3          (0x1000UL << TIM_CCMR1_OC2M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR1_OC2CE_Pos       (15U)
#define TIM_CCMR1_OC2CE_Msk       (0x1UL << TIM_CCMR1_OC2CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR1_OC2CE           TIM_CCMR1_OC2CE_Msk                          /*!< Output Compare 2 Clear Enable */

/******************  Bit definition for TIM_CCMR2 register  *******************/
/*---------------------------------- Common ----------------------------------*/
#define TIM_CCMR2_CC3S_Pos        (0U)
#define TIM_CCMR2_CC3S_Msk        (0x3UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000003 */
#define TIM_CCMR2_CC3S            TIM_CCMR2_CC3S_Msk                           /*!< CC3S[1:0] bits (Capture/Compare 3 Selection) */
#define TIM_CCMR2_CC3S_0          (0x1UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000001 */
#define TIM_CCMR2_CC3S_1          (0x2UL << TIM_CCMR2_CC3S_Pos)                /*!< 0x00000002 */
#define TIM_CCMR2_CC4S_Pos        (8U)
#define TIM_CCMR2_CC4S_Msk        (0x3UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000300 */
#define TIM_CCMR2_CC4S            TIM_CCMR2_CC4S_Msk                           /*!< CC4S[1:0] bits (Capture/Compare 4 Selection) */
#define TIM_CCMR2_CC4S_0          (0x1UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000100 */
#define TIM_CCMR2_CC4S_1          (0x2UL << TIM_CCMR2_CC4S_Pos)                /*!< 0x00000200 */

/*---------------------------- Input capture mode ----------------------------*/
#define TIM_CCMR2_IC3PSC_Pos      (2U)
#define TIM_CCMR2_IC3PSC_Msk      (0x3UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x0000000C */
#define TIM_CCMR2_IC3PSC          TIM_CCMR2_IC3PSC_Msk                         /*!< IC3PSC[1:0] bits (Input Capture 3 Prescaler) */
#define TIM_CCMR2_IC3PSC_0        (0x1UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x00000004 */
#define TIM_CCMR2_IC3PSC_1        (0x2UL << TIM_CCMR2_IC3PSC_Pos)              /*!< 0x00000008 */
#define TIM_CCMR2_IC3F_Pos        (4U)
#define TIM_CCMR2_IC3F_Msk        (0xFUL << TIM_CCMR2_IC3F_Pos)                /*!< 0x000000F0 */
#define TIM_CCMR2_IC3F            TIM_CCMR2_IC3F_Msk                           /*!< IC3F[3:0] bits (Input Capture 3 Filter) */
#define TIM_CCMR2_IC3F_0          (0x1UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000010 */
#define TIM_CCMR2_IC3F_1          (0x2UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000020 */
#define TIM_CCMR2_IC3F_2          (0x4UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000040 */
#define TIM_CCMR2_IC3F_3          (0x8UL << TIM_CCMR2_IC3F_Pos)                /*!< 0x00000080 */
#define TIM_CCMR2_IC4PSC_Pos      (10U)
#define TIM_CCMR2_IC4PSC_Msk      (0x3UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000C00 */
#define TIM_CCMR2_IC4PSC          TIM_CCMR2_IC4PSC_Msk                         /*!< IC4PSC[1:0] bits (Input Capture 4 Prescaler) */
#define TIM_CCMR2_IC4PSC_0        (0x1UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000400 */
#define TIM_CCMR2_IC4PSC_1        (0x2UL << TIM_CCMR2_IC4PSC_Pos)              /*!< 0x00000800 */
#define TIM_CCMR2_IC4F_Pos        (12U)
#define TIM_CCMR2_IC4F_Msk        (0xFUL << TIM_CCMR2_IC4F_Pos)                /*!< 0x0000F000 */
#define TIM_CCMR2_IC4F            TIM_CCMR2_IC4F_Msk                           /*!< IC4F[3:0] bits (Input Capture 4 Filter) */
#define TIM_CCMR2_IC4F_0          (0x1UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00001000 */
#define TIM_CCMR2_IC4F_1          (0x2UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00002000 */
#define TIM_CCMR2_IC4F_2          (0x4UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00004000 */
#define TIM_CCMR2_IC4F_3          (0x8UL << TIM_CCMR2_IC4F_Pos)                /*!< 0x00008000 */

/*---------------------------- Output compare mode ---------------------------*/
#define TIM_CCMR2_OC3FE_Pos       (2U)
#define TIM_CCMR2_OC3FE_Msk       (0x1UL << TIM_CCMR2_OC3FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR2_OC3FE           TIM_CCMR2_OC3FE_Msk                          /*!< Output Compare 3 Fast enable */
#define TIM_CCMR2_OC3PE_Pos       (3U)
#define TIM_CCMR2_OC3PE_Msk       (0x1UL << TIM_CCMR2_OC3PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR2_OC3PE           TIM_CCMR2_OC3PE_Msk                          /*!< Output Compare 3 Preload enable */
#define TIM_CCMR2_OC3M_Pos        (4U)
#define TIM_CCMR2_OC3M_Msk        (0x1007UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR2_OC3M            TIM_CCMR2_OC3M_Msk                           /*!< OC3M[2:0] bits (Output Compare 3 Mode) */
#define TIM_CCMR2_OC3M_0          (0x0001UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR2_OC3M_1          (0x0002UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR2_OC3M_2          (0x0004UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR2_OC3M_3          (0x1000UL << TIM_CCMR2_OC3M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR2_OC3CE_Pos       (7U)
#define TIM_CCMR2_OC3CE_Msk       (0x1UL << TIM_CCMR2_OC3CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR2_OC3CE           TIM_CCMR2_OC3CE_Msk                          /*!< Output Compare 3 Clear Enable */
#define TIM_CCMR2_OC4FE_Pos       (10U)
#define TIM_CCMR2_OC4FE_Msk       (0x1UL << TIM_CCMR2_OC4FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR2_OC4FE           TIM_CCMR2_OC4FE_Msk                          /*!< Output Compare 4 Fast enable */
#define TIM_CCMR2_OC4PE_Pos       (11U)
#define TIM_CCMR2_OC4PE_Msk       (0x1UL << TIM_CCMR2_OC4PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR2_OC4PE           TIM_CCMR2_OC4PE_Msk                          /*!< Output Compare 4 Preload enable */
#define TIM_CCMR2_OC4M_Pos        (12U)
#define TIM_CCMR2_OC4M_Msk        (0x1007UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR2_OC4M            TIM_CCMR2_OC4M_Msk                           /*!< OC4M[2:0] bits (Output Compare 4 Mode) */
#define TIM_CCMR2_OC4M_0          (0x0001UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR2_OC4M_1          (0x0002UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR2_OC4M_2          (0x0004UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR2_OC4M_3          (0x1000UL << TIM_CCMR2_OC4M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR2_OC4CE_Pos       (15U)
#define TIM_CCMR2_OC4CE_Msk       (0x1UL << TIM_CCMR2_OC4CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR2_OC4CE           TIM_CCMR2_OC4CE_Msk                          /*!< Output Compare 4 Clear Enable */

/*******************  Bit definition for TIM_CCER register  *******************/
#define TIM_CCER_CC1E_Pos         (0U)
#define TIM_CCER_CC1E_Msk         (0x1UL << TIM_CCER_CC1E_Pos)                 /*!< 0x00000001 */
#define TIM_CCER_CC1E             TIM_CCER_CC1E_Msk                            /*!< Capture/Compare 1 output enable */
#define TIM_CCER_CC1P_Pos         (1U)
#define TIM_CCER_CC1P_Msk         (0x1UL << TIM_CCER_CC1P_Pos)                 /*!< 0x00000002 */
#define TIM_CCER_CC1P             TIM_CCER_CC1P_Msk                            /*!< Capture/Compare 1 output Polarity */
#define TIM_CCER_CC1NE_Pos        (2U)
#define TIM_CCER_CC1NE_Msk        (0x1UL << TIM_CCER_CC1NE_Pos)                /*!< 0x00000004 */
#define TIM_CCER_CC1NE            TIM_CCER_CC1NE_Msk                           /*!< Capture/Compare 1 Complementary output enable */
#define TIM_CCER_CC1NP_Pos        (3U)
#define TIM_CCER_CC1NP_Msk        (0x1UL << TIM_CCER_CC1NP_Pos)                /*!< 0x00000008 */
#define TIM_CCER_CC1NP            TIM_CCER_CC1NP_Msk                           /*!< Capture/Compare 1 Complementary output Polarity */
#define TIM_CCER_CC2E_Pos         (4U)
#define TIM_CCER_CC2E_Msk         (0x1UL << TIM_CCER_CC2E_Pos)                 /*!< 0x00000010 */
#define TIM_CCER_CC2E             TIM_CCER_CC2E_Msk                            /*!< Capture/Compare 2 output enable */
#define TIM_CCER_CC2P_Pos         (5U)
#define TIM_CCER_CC2P_Msk         (0x1UL << TIM_CCER_CC2P_Pos)                 /*!< 0x00000020 */
#define TIM_CCER_CC2P             TIM_CCER_CC2P_Msk                            /*!< Capture/Compare 2 output Polarity */
#define TIM_CCER_CC2NE_Pos        (6U)
#define TIM_CCER_CC2NE_Msk        (0x1UL << TIM_CCER_CC2NE_Pos)                /*!< 0x00000040 */
#define TIM_CCER_CC2NE            TIM_CCER_CC2NE_Msk                           /*!< Capture/Compare 2 Complementary output enable */
#define TIM_CCER_CC2NP_Pos        (7U)
#define TIM_CCER_CC2NP_Msk        (0x1UL << TIM_CCER_CC2NP_Pos)                /*!< 0x00000080 */
#define TIM_CCER_CC2NP            TIM_CCER_CC2NP_Msk                           /*!< Capture/Compare 2 Complementary output Polarity */
#define TIM_CCER_CC3E_Pos         (8U)
#define TIM_CCER_CC3E_Msk         (0x1UL << TIM_CCER_CC3E_Pos)                 /*!< 0x00000100 */
#define TIM_CCER_CC3E             TIM_CCER_CC3E_Msk                            /*!< apture/Compare 3 output enable */
#define TIM_CCER_CC3P_Pos         (9U)
#define TIM_CCER_CC3P_Msk         (0x1UL << TIM_CCER_CC3P_Pos)                 /*!< 0x00000200 */
#define TIM_CCER_CC3P             TIM_CCER_CC3P_Msk                            /*!< Capture/Compare 3 output Polarity */
#define TIM_CCER_CC3NE_Pos        (10U)
#define TIM_CCER_CC3NE_Msk        (0x1UL << TIM_CCER_CC3NE_Pos)                /*!< 0x00000400 */
#define TIM_CCER_CC3NE            TIM_CCER_CC3NE_Msk                           /*!< Capture/Compare 3 Complementary output enable */
#define TIM_CCER_CC3NP_Pos        (11U)
#define TIM_CCER_CC3NP_Msk        (0x1UL << TIM_CCER_CC3NP_Pos)                /*!< 0x00000800 */
#define TIM_CCER_CC3NP            TIM_CCER_CC3NP_Msk                           /*!< Capture/Compare 3 Complementary output Polarity */
#define TIM_CCER_CC4E_Pos         (12U)
#define TIM_CCER_CC4E_Msk         (0x1UL << TIM_CCER_CC4E_Pos)                 /*!< 0x00001000 */
#define TIM_CCER_CC4E             TIM_CCER_CC4E_Msk                            /*!< Capture/Compare 4 output enable */
#define TIM_CCER_CC4P_Pos         (13U)
#define TIM_CCER_CC4P_Msk         (0x1UL << TIM_CCER_CC4P_Pos)                 /*!< 0x00002000 */
#define TIM_CCER_CC4P             TIM_CCER_CC4P_Msk                            /*!< Capture/Compare 4 output Polarity */
#define TIM_CCER_CC4NE_Pos        (14U)
#define TIM_CCER_CC4NE_Msk        (0x1UL << TIM_CCER_CC4NE_Pos)                /*!< 0x00004000 */
#define TIM_CCER_CC4NE            TIM_CCER_CC4NE_Msk                           /*!< Capture/Compare 4 Complementary output enable */
#define TIM_CCER_CC4NP_Pos        (15U)
#define TIM_CCER_CC4NP_Msk        (0x1UL << TIM_CCER_CC4NP_Pos)                /*!< 0x00008000 */
#define TIM_CCER_CC4NP            TIM_CCER_CC4NP_Msk                           /*!< Capture/Compare 4 Complementary output Polarity */
#define TIM_CCER_CC5E_Pos         (16U)
#define TIM_CCER_CC5E_Msk         (0x1UL << TIM_CCER_CC5E_Pos)                 /*!< 0x00010000 */
#define TIM_CCER_CC5E             TIM_CCER_CC5E_Msk                            /*!< Capture/Compare 5 output enable */
#define TIM_CCER_CC5P_Pos         (17U)
#define TIM_CCER_CC5P_Msk         (0x1UL << TIM_CCER_CC5P_Pos)                 /*!< 0x00020000 */
#define TIM_CCER_CC5P             TIM_CCER_CC5P_Msk                            /*!< Capture/Compare 5 output Polarity */
#define TIM_CCER_CC6E_Pos         (20U)
#define TIM_CCER_CC6E_Msk         (0x1UL << TIM_CCER_CC6E_Pos)                 /*!< 0x00100000 */
#define TIM_CCER_CC6E             TIM_CCER_CC6E_Msk                            /*!< Capture/Compare 6 output enable */
#define TIM_CCER_CC6P_Pos         (21U)
#define TIM_CCER_CC6P_Msk         (0x1UL << TIM_CCER_CC6P_Pos)                 /*!< 0x00200000 */
#define TIM_CCER_CC6P             TIM_CCER_CC6P_Msk                            /*!< Capture/Compare 6 output Polarity */

/*******************  Bit definition for TIM_CNT register  ********************/
#define TIM_CNT_CNT_Pos           (0U)
#define TIM_CNT_CNT_Msk           (0xFFFFFFFFUL << TIM_CNT_CNT_Pos)            /*!< 0xFFFFFFFF */
#define TIM_CNT_CNT               TIM_CNT_CNT_Msk                              /*!< Counter Value */
#define TIM_CNT_UIFCPY_Pos        (31U)
#define TIM_CNT_UIFCPY_Msk        (0x1UL << TIM_CNT_UIFCPY_Pos)                /*!< 0x80000000 */
#define TIM_CNT_UIFCPY            TIM_CNT_UIFCPY_Msk                           /*!< Update interrupt flag copy (if UIFREMAP=1) */

/*******************  Bit definition for TIM_PSC register  ********************/
#define TIM_PSC_PSC_Pos           (0U)
#define TIM_PSC_PSC_Msk           (0xFFFFUL << TIM_PSC_PSC_Pos)                /*!< 0x0000FFFF */
#define TIM_PSC_PSC               TIM_PSC_PSC_Msk                              /*!< Prescaler Value */

/*******************  Bit definition for TIM_ARR register  ********************/
#define TIM_ARR_ARR_Pos           (0U)
#define TIM_ARR_ARR_Msk           (0xFFFFFFFFUL << TIM_ARR_ARR_Pos)            /*!< 0xFFFFFFFF */
#define TIM_ARR_ARR               TIM_ARR_ARR_Msk                              /*!< Actual auto-reload Value */

/*******************  Bit definition for TIM_RCR register  ********************/
#define TIM_RCR_REP_Pos           (0U)
#define TIM_RCR_REP_Msk           (0xFFFFUL << TIM_RCR_REP_Pos)                /*!< 0x0000FFFF */
#define TIM_RCR_REP               TIM_RCR_REP_Msk                              /*!< Repetition Counter Value */

/*******************  Bit definition for TIM_CCR1 register  *******************/
#define TIM_CCR1_CCR1_Pos         (0U)
#define TIM_CCR1_CCR1_Msk         (0xFFFFFFFFUL << TIM_CCR1_CCR1_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR1_CCR1             TIM_CCR1_CCR1_Msk                            /*!< Capture/Compare 1 Value */

/*******************  Bit definition for TIM_CCR2 register  *******************/
#define TIM_CCR2_CCR2_Pos         (0U)
#define TIM_CCR2_CCR2_Msk         (0xFFFFFFFFUL << TIM_CCR2_CCR2_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR2_CCR2             TIM_CCR2_CCR2_Msk                            /*!< Capture/Compare 2 Value */

/*******************  Bit definition for TIM_CCR3 register  *******************/
#define TIM_CCR3_CCR3_Pos         (0U)
#define TIM_CCR3_CCR3_Msk         (0xFFFFFFFFUL << TIM_CCR3_CCR3_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR3_CCR3             TIM_CCR3_CCR3_Msk                            /*!< Capture/Compare 3 Value */

/*******************  Bit definition for TIM_CCR4 register  *******************/
#define TIM_CCR4_CCR4_Pos         (0U)
#define TIM_CCR4_CCR4_Msk         (0xFFFFFFFFUL << TIM_CCR4_CCR4_Pos)          /*!< 0xFFFFFFFFF */
#define TIM_CCR4_CCR4             TIM_CCR4_CCR4_Msk                            /*!< apture/Compare 4 Value */

/*******************  Bit definition for TIM_BDTR register  *******************/
#define TIM_BDTR_DTG_Pos          (0U)
#define TIM_BDTR_DTG_Msk          (0xFFUL << TIM_BDTR_DTG_Pos)                 /*!< 0x000000FF */
#define TIM_BDTR_DTG              TIM_BDTR_DTG_Msk                             /*!< DTG[0:7] bits (Dead-Time Generator set-up) */
#define TIM_BDTR_DTG_0            (0x01UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000001 */
#define TIM_BDTR_DTG_1            (0x02UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000002 */
#define TIM_BDTR_DTG_2            (0x04UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000004 */
#define TIM_BDTR_DTG_3            (0x08UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000008 */
#define TIM_BDTR_DTG_4            (0x10UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000010 */
#define TIM_BDTR_DTG_5            (0x20UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000020 */
#define TIM_BDTR_DTG_6            (0x40UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000040 */
#define TIM_BDTR_DTG_7            (0x80UL << TIM_BDTR_DTG_Pos)                 /*!< 0x00000080 */
#define TIM_BDTR_LOCK_Pos         (8U)
#define TIM_BDTR_LOCK_Msk         (0x3UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000300 */
#define TIM_BDTR_LOCK             TIM_BDTR_LOCK_Msk                            /*!< LOCK[1:0] bits (Lock Configuration) */
#define TIM_BDTR_LOCK_0           (0x1UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000100 */
#define TIM_BDTR_LOCK_1           (0x2UL << TIM_BDTR_LOCK_Pos)                 /*!< 0x00000200 */
#define TIM_BDTR_OSSI_Pos         (10U)
#define TIM_BDTR_OSSI_Msk         (0x1UL << TIM_BDTR_OSSI_Pos)                 /*!< 0x00000400 */
#define TIM_BDTR_OSSI             TIM_BDTR_OSSI_Msk                            /*!<Off-State Selection for Idle mode */
#define TIM_BDTR_OSSR_Pos         (11U)
#define TIM_BDTR_OSSR_Msk         (0x1UL << TIM_BDTR_OSSR_Pos)                 /*!< 0x00000800 */
#define TIM_BDTR_OSSR             TIM_BDTR_OSSR_Msk                            /*!< Off-State Selection for Run mode */
#define TIM_BDTR_BKE_Pos          (12U)
#define TIM_BDTR_BKE_Msk          (0x1UL << TIM_BDTR_BKE_Pos)                  /*!< 0x00001000 */
#define TIM_BDTR_BKE              TIM_BDTR_BKE_Msk                             /*!< Break enable for Break 1 */
#define TIM_BDTR_BKP_Pos          (13U)
#define TIM_BDTR_BKP_Msk          (0x1UL << TIM_BDTR_BKP_Pos)                  /*!< 0x00002000 */
#define TIM_BDTR_BKP              TIM_BDTR_BKP_Msk                             /*!< Break Polarity for Break 1 */
#define TIM_BDTR_AOE_Pos          (14U)
#define TIM_BDTR_AOE_Msk          (0x1UL << TIM_BDTR_AOE_Pos)                  /*!< 0x00004000 */
#define TIM_BDTR_AOE              TIM_BDTR_AOE_Msk                             /*!< Automatic Output enable */
#define TIM_BDTR_MOE_Pos          (15U)
#define TIM_BDTR_MOE_Msk          (0x1UL << TIM_BDTR_MOE_Pos)                  /*!< 0x00008000 */
#define TIM_BDTR_MOE              TIM_BDTR_MOE_Msk                             /*!< Main Output enable */
#define TIM_BDTR_BKF_Pos          (16U)
#define TIM_BDTR_BKF_Msk          (0xFUL << TIM_BDTR_BKF_Pos)                  /*!< 0x000F0000 */
#define TIM_BDTR_BKF              TIM_BDTR_BKF_Msk                             /*!< Break Filter for Break 1 */
#define TIM_BDTR_BK2F_Pos         (20U)
#define TIM_BDTR_BK2F_Msk         (0xFUL << TIM_BDTR_BK2F_Pos)                 /*!< 0x00F00000 */
#define TIM_BDTR_BK2F             TIM_BDTR_BK2F_Msk                            /*!< Break Filter for Break 2 */
#define TIM_BDTR_BK2E_Pos         (24U)
#define TIM_BDTR_BK2E_Msk         (0x1UL << TIM_BDTR_BK2E_Pos)                 /*!< 0x01000000 */
#define TIM_BDTR_BK2E             TIM_BDTR_BK2E_Msk                            /*!< Break enable for Break 2 */
#define TIM_BDTR_BK2P_Pos         (25U)
#define TIM_BDTR_BK2P_Msk         (0x1UL << TIM_BDTR_BK2P_Pos)                 /*!< 0x02000000 */
#define TIM_BDTR_BK2P             TIM_BDTR_BK2P_Msk                            /*!< Break Polarity for Break 2 */
#define TIM_BDTR_BKDSRM_Pos       (26U)
#define TIM_BDTR_BKDSRM_Msk       (0x1UL << TIM_BDTR_BKDSRM_Pos)               /*!< 0x04000000 */
#define TIM_BDTR_BKDSRM           TIM_BDTR_BKDSRM_Msk                          /*!< Break disarming/re-arming */
#define TIM_BDTR_BK2DSRM_Pos      (27U)
#define TIM_BDTR_BK2DSRM_Msk      (0x1UL << TIM_BDTR_BK2DSRM_Pos)              /*!< 0x08000000 */
#define TIM_BDTR_BK2DSRM          TIM_BDTR_BK2DSRM_Msk                         /*!< Break2 disarming/re-arming */
#define TIM_BDTR_BKBID_Pos        (28U)
#define TIM_BDTR_BKBID_Msk        (0x1UL << TIM_BDTR_BKBID_Pos)                /*!< 0x10000000 */
#define TIM_BDTR_BKBID            TIM_BDTR_BKBID_Msk                           /*!< Break BIDirectional */
#define TIM_BDTR_BK2BID_Pos       (29U)
#define TIM_BDTR_BK2BID_Msk       (0x1UL << TIM_BDTR_BK2BID_Pos)               /*!< 0x20000000 */
#define TIM_BDTR_BK2BID           TIM_BDTR_BK2BID_Msk                          /*!< Break2 BIDirectional */

/*******************  Bit definition for TIM_CCR5 register  *******************/
#define TIM_CCR5_CCR5_Pos         (0U)
#define TIM_CCR5_CCR5_Msk         (0xFFFFFUL << TIM_CCR5_CCR5_Pos)             /*!< 0x000FFFFF */
#define TIM_CCR5_CCR5             TIM_CCR5_CCR5_Msk                            /*!< Capture/Compare 5 Value */
#define TIM_CCR5_GC5C1_Pos        (29U)
#define TIM_CCR5_GC5C1_Msk        (0x1UL << TIM_CCR5_GC5C1_Pos)                /*!< 0x20000000 */
#define TIM_CCR5_GC5C1            TIM_CCR5_GC5C1_Msk                           /*!< Group Channel 5 and Channel 1 */
#define TIM_CCR5_GC5C2_Pos        (30U)
#define TIM_CCR5_GC5C2_Msk        (0x1UL << TIM_CCR5_GC5C2_Pos)                /*!< 0x40000000 */
#define TIM_CCR5_GC5C2            TIM_CCR5_GC5C2_Msk                           /*!< Group Channel 5 and Channel 2 */
#define TIM_CCR5_GC5C3_Pos        (31U)
#define TIM_CCR5_GC5C3_Msk        (0x1UL << TIM_CCR5_GC5C3_Pos)                /*!< 0x80000000 */
#define TIM_CCR5_GC5C3            TIM_CCR5_GC5C3_Msk                           /*!< Group Channel 5 and Channel 3 */

/*******************  Bit definition for TIM_CCR6 register  *******************/
#define TIM_CCR6_CCR6_Pos         (0U)
#define TIM_CCR6_CCR6_Msk         (0xFFFFFUL << TIM_CCR6_CCR6_Pos)             /*!< 0x000FFFFF */
#define TIM_CCR6_CCR6             TIM_CCR6_CCR6_Msk                            /*!< Capture/Compare 6 Value */

/******************  Bit definition for TIM_CCMR3 register  *******************/
#define TIM_CCMR3_OC5FE_Pos       (2U)
#define TIM_CCMR3_OC5FE_Msk       (0x1UL << TIM_CCMR3_OC5FE_Pos)               /*!< 0x00000004 */
#define TIM_CCMR3_OC5FE           TIM_CCMR3_OC5FE_Msk                          /*!< Output Compare 5 Fast enable */
#define TIM_CCMR3_OC5PE_Pos       (3U)
#define TIM_CCMR3_OC5PE_Msk       (0x1UL << TIM_CCMR3_OC5PE_Pos)               /*!< 0x00000008 */
#define TIM_CCMR3_OC5PE           TIM_CCMR3_OC5PE_Msk                          /*!< Output Compare 5 Preload enable */
#define TIM_CCMR3_OC5M_Pos        (4U)
#define TIM_CCMR3_OC5M_Msk        (0x1007UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00010070 */
#define TIM_CCMR3_OC5M            TIM_CCMR3_OC5M_Msk                           /*!< OC5M[3:0] bits (Output Compare 5 Mode) */
#define TIM_CCMR3_OC5M_0          (0x0001UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000010 */
#define TIM_CCMR3_OC5M_1          (0x0002UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000020 */
#define TIM_CCMR3_OC5M_2          (0x0004UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00000040 */
#define TIM_CCMR3_OC5M_3          (0x1000UL << TIM_CCMR3_OC5M_Pos)             /*!< 0x00010000 */
#define TIM_CCMR3_OC5CE_Pos       (7U)
#define TIM_CCMR3_OC5CE_Msk       (0x1UL << TIM_CCMR3_OC5CE_Pos)               /*!< 0x00000080 */
#define TIM_CCMR3_OC5CE           TIM_CCMR3_OC5CE_Msk                          /*!< Output Compare 5 Clear Enable */
#define TIM_CCMR3_OC6FE_Pos       (10U)
#define TIM_CCMR3_OC6FE_Msk       (0x1UL << TIM_CCMR3_OC6FE_Pos)               /*!< 0x00000400 */
#define TIM_CCMR3_OC6FE           TIM_CCMR3_OC6FE_Msk                          /*!< Output Compare 6 Fast enable */
#define TIM_CCMR3_OC6PE_Pos       (11U)
#define TIM_CCMR3_OC6PE_Msk       (0x1UL << TIM_CCMR3_OC6PE_Pos)               /*!< 0x00000800 */
#define TIM_CCMR3_OC6PE           TIM_CCMR3_OC6PE_Msk                          /*!< Output Compare 6 Preload enable */
#define TIM_CCMR3_OC6M_Pos        (12U)
#define TIM_CCMR3_OC6M_Msk        (0x1007UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x01007000 */
#define TIM_CCMR3_OC6M            TIM_CCMR3_OC6M_Msk                           /*!< OC6M[3:0] bits (Output Compare 6 Mode) */
#define TIM_CCMR3_OC6M_0          (0x0001UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00001000 */
#define TIM_CCMR3_OC6M_1          (0x0002UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00002000 */
#define TIM_CCMR3_OC6M_2          (0x0004UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x00004000 */
#define TIM_CCMR3_OC6M_3          (0x1000UL << TIM_CCMR3_OC6M_Pos)             /*!< 0x01000000 */
#define TIM_CCMR3_OC6CE_Pos       (15U)
#define TIM_CCMR3_OC6CE_Msk       (0x1UL << TIM_CCMR3_OC6CE_Pos)               /*!< 0x00008000 */
#define TIM_CCMR3_OC6CE           TIM_CCMR3_OC6CE_Msk                          /*!< Output Compare 6 Clear Enable */

/*******************  Bit definition for TIM_DTR2 register  *******************/
#define TIM_DTR2_DTGF_Pos      (0U)
#define TIM_DTR2_DTGF_Msk      (0xFFUL << TIM_DTR2_DTGF_Pos)                   /*!< 0x0000000F */
#define TIM_DTR2_DTGF          TIM_DTR2_DTGF_Msk                               /*!< DTGF[7:0] bits (Deadtime falling edge generator setup)*/
#define TIM_DTR2_DTGF_0        (0x01UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000001 */
#define TIM_DTR2_DTGF_1        (0x02UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000002 */
#define TIM_DTR2_DTGF_2        (0x04UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000004 */
#define TIM_DTR2_DTGF_3        (0x08UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000008 */
#define TIM_DTR2_DTGF_4        (0x10UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000010 */
#define TIM_DTR2_DTGF_5        (0x20UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000020 */
#define TIM_DTR2_DTGF_6        (0x40UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000040 */
#define TIM_DTR2_DTGF_7        (0x80UL << TIM_DTR2_DTGF_Pos)                   /*!< 0x00000080 */
#define TIM_DTR2_DTAE_Pos      (16U)
#define TIM_DTR2_DTAE_Msk      (0x1UL << TIM_DTR2_DTAE_Pos)                    /*!< 0x00004000 */
#define TIM_DTR2_DTAE          TIM_DTR2_DTAE_Msk                               /*!< Deadtime asymmetric enable */
#define TIM_DTR2_DTPE_Pos      (17U)
#define TIM_DTR2_DTPE_Msk      (0x1UL << TIM_DTR2_DTPE_Pos)                    /*!< 0x00008000 */
#define TIM_DTR2_DTPE          TIM_DTR2_DTPE_Msk                               /*!< Deadtime prelaod enable */

/*******************  Bit definition for TIM_ECR register  ********************/
#define TIM_ECR_IE_Pos       (0U)
#define TIM_ECR_IE_Msk       (0x1UL << TIM_ECR_IE_Pos)                         /*!< 0x00000001 */
#define TIM_ECR_IE           TIM_ECR_IE_Msk                                    /*!< Index enable */
#define TIM_ECR_IDIR_Pos     (1U)
#define TIM_ECR_IDIR_Msk     (0x3UL << TIM_ECR_IDIR_Pos)                       /*!< 0x00000006 */
#define TIM_ECR_IDIR         TIM_ECR_IDIR_Msk                                  /*!< IDIR[1:0] bits (Index direction)*/
#define TIM_ECR_IDIR_0       (0x01UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000002 */
#define TIM_ECR_IDIR_1       (0x02UL << TIM_ECR_IDIR_Pos)                      /*!< 0x00000004 */
#define TIM_ECR_IBLK_Pos     (3U)
#define TIM_ECR_IBLK_Msk     (0x3UL << TIM_ECR_IBLK_Pos)                       /*!< 0x00000018 */
#define TIM_ECR_IBLK         TIM_ECR_IBLK_Msk                                  /*!< IBLK[1:0] bits (Index blanking)*/
#define TIM_ECR_IBLK_0       (0x01UL << TIM_ECR_IBLK_Pos)                      /*!< 0x00000008 */
#define TIM_ECR_IBLK_1       (0x02UL << TIM_ECR_IBLK_Pos)                      /*!< 0x00000010 */
#define TIM_ECR_FIDX_Pos     (5U)
#define TIM_ECR_FIDX_Msk     (0x1UL << TIM_ECR_FIDX_Pos)                       /*!< 0x00000020 */
#define TIM_ECR_FIDX         TIM_ECR_FIDX_Msk                                  /*!< First index enable */
#define TIM_ECR_IPOS_Pos     (6U)
#define TIM_ECR_IPOS_Msk     (0x3UL << TIM_ECR_IPOS_Pos)                       /*!< 0x0000000C0 */
#define TIM_ECR_IPOS         TIM_ECR_IPOS_Msk                                  /*!< IPOS[1:0] bits (Index positioning)*/
#define TIM_ECR_IPOS_0       (0x01UL << TIM_ECR_IPOS_Pos)                      /*!< 0x00000001 */
#define TIM_ECR_IPOS_1       (0x02UL << TIM_ECR_IPOS_Pos)                      /*!< 0x00000002 */
#define TIM_ECR_PW_Pos       (16U)
#define TIM_ECR_PW_Msk       (0xFFUL << TIM_ECR_PW_Pos)                        /*!< 0x00FF0000 */
#define TIM_ECR_PW           TIM_ECR_PW_Msk                                    /*!< PW[7:0] bits (Pulse width)*/
#define TIM_ECR_PW_0         (0x01UL << TIM_ECR_PW_Pos)                        /*!< 0x00010000 */
#define TIM_ECR_PW_1         (0x02UL << TIM_ECR_PW_Pos)                        /*!< 0x00020000 */
#define TIM_ECR_PW_2         (0x04UL << TIM_ECR_PW_Pos)                        /*!< 0x00040000 */
#define TIM_ECR_PW_3         (0x08UL << TIM_ECR_PW_Pos)                        /*!< 0x00080000 */
#define TIM_ECR_PW_4         (0x10UL << TIM_ECR_PW_Pos)                        /*!< 0x00100000 */
#define TIM_ECR_PW_5         (0x20UL << TIM_ECR_PW_Pos)                        /*!< 0x00200000 */
#define TIM_ECR_PW_6         (0x40UL << TIM_ECR_PW_Pos)                        /*!< 0x00400000 */
#define TIM_ECR_PW_7         (0x80UL << TIM_ECR_PW_Pos)                        /*!< 0x00800000 */
#define TIM_ECR_PWPRSC_Pos   (24U)
#define TIM_ECR_PWPRSC_Msk   (0x7UL << TIM_ECR_PWPRSC_Pos)                     /*!< 0x07000000 */
#define TIM_ECR_PWPRSC       TIM_ECR_PWPRSC_Msk                                /*!< PWPRSC[2:0] bits (Pulse width prescaler)*/
#define TIM_ECR_PWPRSC_0     (0x01UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x01000000 */
#define TIM_ECR_PWPRSC_1     (0x02UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x02000000 */
#define TIM_ECR_PWPRSC_2     (0x04UL << TIM_ECR_PWPRSC_Pos)                    /*!< 0x04000000 */

/*******************  Bit definition for TIM_TISEL register  ******************/
#define TIM_TISEL_TI1SEL_Pos      (0U)
#define TIM_TISEL_TI1SEL_Msk      (0xFUL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x0000000F */
#define TIM_TISEL_TI1SEL          TIM_TISEL_TI1SEL_Msk                         /*!< TI1SEL[3:0] bits (TIM1 TI1 SEL)*/
#define TIM_TISEL_TI1SEL_0        (0x1UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000001 */
#define TIM_TISEL_TI1SEL_1        (0x2UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000002 */
#define TIM_TISEL_TI1SEL_2        (0x4UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000004 */
#define TIM_TISEL_TI1SEL_3        (0x8UL << TIM_TISEL_TI1SEL_Pos)              /*!< 0x00000008 */
#define TIM_TISEL_TI2SEL_Pos      (8U)
#define TIM_TISEL_TI2SEL_Msk      (0xFUL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000F00 */
#define TIM_TISEL_TI2SEL          TIM_TISEL_TI2SEL_Msk                         /*!< TI2SEL[3:0] bits (TIM1 TI2 SEL)*/
#define TIM_TISEL_TI2SEL_0        (0x1UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000100 */
#define TIM_TISEL_TI2SEL_1        (0x2UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000200 */
#define TIM_TISEL_TI2SEL_2        (0x4UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000400 */
#define TIM_TISEL_TI2SEL_3        (0x8UL << TIM_TISEL_TI2SEL_Pos)              /*!< 0x00000800 */
#define TIM_TISEL_TI3SEL_Pos      (16U)
#define TIM_TISEL_TI3SEL_Msk      (0xFUL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x000F0000 */
#define TIM_TISEL_TI3SEL          TIM_TISEL_TI3SEL_Msk                         /*!< TI3SEL[3:0] bits (TIM1 TI3 SEL)*/
#define TIM_TISEL_TI3SEL_0        (0x1UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00010000 */
#define TIM_TISEL_TI3SEL_1        (0x2UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00020000 */
#define TIM_TISEL_TI3SEL_2        (0x4UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00040000 */
#define TIM_TISEL_TI3SEL_3        (0x8UL << TIM_TISEL_TI3SEL_Pos)              /*!< 0x00080000 */
#define TIM_TISEL_TI4SEL_Pos      (24U)
#define TIM_TISEL_TI4SEL_Msk      (0xFUL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x0F000000 */
#define TIM_TISEL_TI4SEL          TIM_TISEL_TI4SEL_Msk                         /*!< TI4SEL[3:0] bits (TIM1 TI4 SEL)*/
#define TIM_TISEL_TI4SEL_0        (0x1UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x01000000 */
#define TIM_TISEL_TI4SEL_1        (0x2UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x02000000 */
#define TIM_TISEL_TI4SEL_2        (0x4UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x04000000 */
#define TIM_TISEL_TI4SEL_3        (0x8UL << TIM_TISEL_TI4SEL_Pos)              /*!< 0x08000000 */

/********************  Bit definition for TIM_AF1 register  *******************/
#define TIM1_AF1_BKINE_Pos        (0U)
#define TIM1_AF1_BKINE_Msk        (0x1UL << TIM1_AF1_BKINE_Pos)                /*!< 0x00000001 */
#define TIM1_AF1_BKINE            TIM1_AF1_BKINE_Msk                           /*!< BRK BKIN input enable */
#define TIM1_AF1_BKINP_Pos        (9U)
#define TIM1_AF1_BKINP_Msk        (0x1UL << TIM1_AF1_BKINP_Pos)                /*!< 0x00000200 */
#define TIM1_AF1_BKINP            TIM1_AF1_BKINP_Msk                           /*!< BRK BKIN input polarity */
#define TIM1_AF1_ETRSEL_Pos       (14U)
#define TIM1_AF1_ETRSEL_Msk       (0xFUL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x0003C000 */
#define TIM1_AF1_ETRSEL           TIM1_AF1_ETRSEL_Msk                          /*!< ETRSEL[3:0] bits (TIM ETR source selection) */
#define TIM1_AF1_ETRSEL_0         (0x1UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00004000 */
#define TIM1_AF1_ETRSEL_1         (0x2UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00008000 */
#define TIM1_AF1_ETRSEL_2         (0x4UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00010000 */
#define TIM1_AF1_ETRSEL_3         (0x8UL << TIM1_AF1_ETRSEL_Pos)               /*!< 0x00020000 */

/*------------------------------  TIM1 specific  -----------------------------*/
#define TIM1_AF1_BKMDF1BK0E_Pos   (8U)
#define TIM1_AF1_BKMDF1BK0E_Msk   (0x1UL << TIM1_AF1_BKMDF1BK0E_Pos)           /*!< 0x00000100 */
#define TIM1_AF1_BKMDF1BK0E       TIM1_AF1_BKMDF1BK0E_Msk                      /*!< BRK mdf1_break[0] enable*/

/*------------------------------  TIM8 specific  -----------------------------*/
#define TIM8_AF1_BKMDF1BK2E_Pos   (8U)
#define TIM8_AF1_BKMDF1BK2E_Msk   (0x1UL << TIM8_AF1_BKMDF1BK2E_Pos)           /*!< 0x00000100 */
#define TIM8_AF1_BKMDF1BK2E       TIM8_AF1_BKMDF1BK2E_Msk                      /*!< BRK mdf1_break[2] enable*/

/*-----------------------------  TIM15 specific  -----------------------------*/
#define TIM15_AF1_BKMDF1BK0E_Pos  (8U)
#define TIM15_AF1_BKMDF1BK0E_Msk  (0x1UL << TIM15_AF1_BKMDF1BK0E_Pos)          /*!< 0x00000100 */
#define TIM15_AF1_BKMDF1BK0E      TIM15_AF1_BKMDF1BK0E_Msk                     /*!< BRK mdf1_break[0] enable*/

/*-----------------------------  TIM16 specific  -----------------------------*/
#define TIM16_AF1_BKMDF1BK1E_Pos  (8U)
#define TIM16_AF1_BKMDF1BK1E_Msk  (0x1UL << TIM16_AF1_BKMDF1BK1E_Pos)          /*!< 0x00000100 */
#define TIM16_AF1_BKMDF1BK1E      TIM16_AF1_BKMDF1BK1E_Msk                     /*!< BRK mdf1_break[1] enable*/

/*-----------------------------  TIM17 specific  -----------------------------*/
#define TIM17_AF1_BKMDF1BK2E_Pos  (8U)
#define TIM17_AF1_BKMDF1BK2E_Msk  (0x1UL << TIM17_AF1_BKMDF1BK2E_Pos)          /*!< 0x00000100 */
#define TIM17_AF1_BKMDF1BK2E      TIM16_AF1_BKMDF1BK2E_Msk                     /*!< BRK mdf1_break[2] enable*/

/*-----------------------------  TIM20 specific  -----------------------------*/
#define TIM20_AF1_BKMDF1BK2E_Pos  (8U)
#define TIM20_AF1_BKMDF1BK2E_Msk  (0x1UL << TIM20_AF1_BKMDF1BK0E_Pos)          /*!< 0x00000100 */
#define TIM20_AF1_BKMDF1BK2E      TIM20_AF1_BKMDF1BK0E_Msk                     /*!< BRK mdf1_break[0] enable*/

/******************  Bit definition for TIM_AF2 register  *********************/
#define TIM1_AF2_BK2INE_Pos       (0U)
#define TIM1_AF2_BK2INE_Msk       (0x1UL << TIM1_AF2_BK2INE_Pos)               /*!< 0x00000001 */
#define TIM1_AF2_BK2INE           TIM1_AF2_BK2INE_Msk                          /*!< BRK2 BKIN input enable */
#define TIM1_AF2_BK2INP_Pos       (9U)
#define TIM1_AF2_BK2INP_Msk       (0x1UL << TIM1_AF2_BK2INP_Pos)               /*!< 0x00000200 */
#define TIM1_AF2_BK2INP           TIM1_AF2_BK2INP_Msk                          /*!< BRK2 BKIN input polarity */
#define TIM1_AF2_OCRSEL_Pos       (16U)
#define TIM1_AF2_OCRSEL_Msk       (0x7UL << TIM1_AF2_OCRSEL_Pos)               /*!< 0x00070000 */
#define TIM1_AF2_OCRSEL           TIM1_AF2_OCRSEL_Msk                          /*!< ocref_clr source selection */

/*------------------------------  TIM1 specific  -----------------------------*/
#define TIM1_AF2_BK2MDF1BK1E_Pos  (8U)
#define TIM1_AF2_BK2MDF1BK1E_Msk  (0x1UL << TIM1_AF2_BK2MDF1BK1E_Pos)          /*!< 0x00000100 */
#define TIM1_AF2_BK2MDF1BK1E      TIM1_AF2_BK2MDF1BK1E_Msk                     /*!< BRK2 mdf1_break[1] enable */

/*-(----------------------------  TIM8 specific  -----------------------------*/
#define TIM8_AF2_BK2MDF1BK3E_Pos  (8U)
#define TIM8_AF2_BK2MDF1BK3E_Msk  (0x1UL << TIM8_AF2_BK2MDF1BK3E_Pos)          /*!< 0x00000100 */
#define TIM8_AF2_BK2MDF1BK3E      TIM8_AF2_BK2MDF1BK3E_Msk                     /*!< BRK2 mdf1_break[3] enable */

/*-----------------------------  TIM20 specific  -----------------------------*/
#define TIM20_AF2_BK2MDF1BK1E_Pos (8U)
#define TIM20_AF2_BK2MDF1BK1E_Msk (0x1UL << TIM20_AF2_BK2MDF1BK1E_Pos)         /*!< 0x00000100 */
#define TIM20_AF2_BK2MDF1BK1E     TIM20_AF2_BK2MDF1BK1E_Msk                    /*!< BRK2 mdf1_break[1] enable */

/*******************  Bit definition for TIM_DCR register  ********************/
#define TIM_DCR_DBA_Pos           (0U)
#define TIM_DCR_DBA_Msk           (0x1FUL << TIM_DCR_DBA_Pos)                  /*!< 0x0000001F */
#define TIM_DCR_DBA               TIM_DCR_DBA_Msk                              /*!< DBA[4:0] bits (DMA Base Address) */
#define TIM_DCR_DBA_0             (0x01UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000001 */
#define TIM_DCR_DBA_1             (0x02UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000002 */
#define TIM_DCR_DBA_2             (0x04UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000004 */
#define TIM_DCR_DBA_3             (0x08UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000008 */
#define TIM_DCR_DBA_4             (0x10UL << TIM_DCR_DBA_Pos)                  /*!< 0x00000010 */
#define TIM_DCR_DBL_Pos           (8U)
#define TIM_DCR_DBL_Msk           (0x1FUL << TIM_DCR_DBL_Pos)                  /*!< 0x00001F00 */
#define TIM_DCR_DBL               TIM_DCR_DBL_Msk                              /*!< DBL[4:0] bits (DMA Burst Length) */
#define TIM_DCR_DBL_0             (0x01UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000100 */
#define TIM_DCR_DBL_1             (0x02UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000200 */
#define TIM_DCR_DBL_2             (0x04UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000400 */
#define TIM_DCR_DBL_3             (0x08UL << TIM_DCR_DBL_Pos)                  /*!< 0x00000800 */
#define TIM_DCR_DBL_4             (0x10UL << TIM_DCR_DBL_Pos)                  /*!< 0x00001000 */
#define TIM_DCR_DBSS_Pos          (16U)
#define TIM_DCR_DBSS_Msk          (0xFUL << TIM_DCR_DBSS_Pos)                  /*!< 0x00000F00 */
#define TIM_DCR_DBSS               TIM_DCR_DBSS_Msk                            /*!< DBSS[19:16] bits (DMA Burst Source Selection) */
#define TIM_DCR_DBSS_0            (0x01UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000100 */
#define TIM_DCR_DBSS_1            (0x02UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000200 */
#define TIM_DCR_DBSS_2            (0x04UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000400 */
#define TIM_DCR_DBSS_3            (0x08UL << TIM_DCR_DBSS_Pos)                 /*!< 0x00000800 */

/*******************  Bit definition for TIM_DMAR register  *******************/
#define TIM_DMAR_DMAB_Pos         (0U)
#define TIM_DMAR_DMAB_Msk         (0xFFFFFFFFUL << TIM_DMAR_DMAB_Pos)          /*!< 0xFFFFFFFF */
#define TIM_DMAR_DMAB             TIM_DMAR_DMAB_Msk                            /*!< DMA register for burst accesses */

/******************  Bits definition for TIM_HWCFGR2 register  ****************/
#define TIM_HWCFGR2_PSC_LINEAR_Pos     (0U)
#define TIM_HWCFGR2_PSC_LINEAR_Msk     (0xFUL << TIM_HWCFGR2_PSC_LINEAR_Pos)   /*!< 0x0000000F */
#define TIM_HWCFGR2_PSC_LINEAR         TIM_HWCFGR2_PSC_LINEAR_Msk              /*!< Option register number */
#define TIM_HWCFGR2_PSC_WIDTH16_Pos    (4U)
#define TIM_HWCFGR2_PSC_WIDTH16_Msk    (0xFUL << TIM_HWCFGR2_PSC_WIDTH16_Pos)  /*!< 0x000000F0 */
#define TIM_HWCFGR2_PSC_WIDTH16        TIM_HWCFGR2_PSC_WIDTH16_Msk             /*!< Prescaler width */
#define TIM_HWCFGR2_CNT_WIDTH_Pos      (8U)
#define TIM_HWCFGR2_CNT_WIDTH_Msk      (0xFFUL << TIM_HWCFGR2_CNT_WIDTH_Pos)   /*!< 0x0000FF00 */
#define TIM_HWCFGR2_CNT_WIDTH          TIM_HWCFGR2_CNT_WIDTH_Msk               /*!< Counter width */
#define TIM_HWCFGR2_OPTIONREG_OUT_Pos  (16U)
#define TIM_HWCFGR2_OPTIONREG_OUT_Msk  (0xFFUL << TIM_HWCFGR2_OPTIONREG_OUT_Pos) /*!< 0x00FF0000 */
#define TIM_HWCFGR2_OPTIONREG_OUT      TIM_HWCFGR2_OPTIONREG_OUT_Msk           /*!< Option register number */

/*****************  Bits definition for TIM_HWCFGR1 register  *****************/
#define TIM_HWCFGR1_NB_OF_CC_Pos    (0U)
#define TIM_HWCFGR1_NB_OF_CC_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_CC_Pos)        /*!< 0x0000000F */
#define TIM_HWCFGR1_NB_OF_CC        TIM_HWCFGR1_NB_OF_CC_Msk                   /*!< Number of capture / compare channel */
#define TIM_HWCFGR1_NB_OF_DT_Pos    (4U)
#define TIM_HWCFGR1_NB_OF_DT_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_DT_Pos)        /*!< 0x000000F0 */
#define TIM_HWCFGR1_NB_OF_DT        TIM_HWCFGR1_NB_OF_DT_Msk                   /*!< Number of complementary outputs and dead-time generators */
#define TIM_HWCFGR1_NB_OF_SM_Pos    (8U)
#define TIM_HWCFGR1_NB_OF_SM_Msk    (0xFUL << TIM_HWCFGR1_NB_OF_SM_Pos)        /*!< 0x00000F00 */
#define TIM_HWCFGR1_NB_OF_SM        TIM_HWCFGR1_NB_OF_SM_Msk                   /*!< Number of synchronization module */
#define TIM_HWCFGR1_RCR_IMPL_Pos    (12U)
#define TIM_HWCFGR1_RCR_IMPL_Msk    (0xFUL << TIM_HWCFGR1_RCR_IMPL_Pos)        /*!< 0x0000F000 */
#define TIM_HWCFGR1_RCR_IMPL        TIM_HWCFGR1_RCR_IMPL_Msk                   /*!< Repetition counter implementation */
#define TIM_HWCFGR1_ETR_IMPL_Pos    (16U)
#define TIM_HWCFGR1_ETR_IMPL_Msk    (0xFUL << TIM_HWCFGR1_ETR_IMPL_Pos)        /*!< 0x000F0000 */
#define TIM_HWCFGR1_ETR_IMPL        TIM_HWCFGR1_ETR_IMPL_Msk                   /*!< External trigger implementation */
#define TIM_HWCFGR1_BK_IMPL_Pos     (20U)
#define TIM_HWCFGR1_BK_IMPL_Msk     (0xFUL << TIM_HWCFGR1_BK_IMPL_Pos)         /*!< 0x00F00000 */
#define TIM_HWCFGR1_BK_IMPL         TIM_HWCFGR1_BK_IMPL_Msk                    /*!< Break circuit implementation */
#define TIM_HWCFGR1_DMA_IMPL_Pos    (24U)
#define TIM_HWCFGR1_DMA_IMPL_Msk    (0xFUL << TIM_HWCFGR1_DMA_IMPL_Pos)        /*!< 0x0F000000 */
#define TIM_HWCFGR1_DMA_IMPL        TIM_HWCFGR1_DMA_IMPL_Msk                   /*!< DMA features implementation */
#define TIM_HWCFGR1_CNT_DIR_Pos     (28U)
#define TIM_HWCFGR1_CNT_DIR_Msk     (0xFUL << TIM_HWCFGR1_CNT_DIR_Pos)         /*!< 0xF0000000 */
#define TIM_HWCFGR1_CNT_DIR         TIM_HWCFGR1_CNT_DIR_Msk                    /*!< Counter direction */

/*******************  Bits definition for TIM_VERR register  ******************/
#define TIM_VERR_MINREV_Pos            (0U)
#define TIM_VERR_MINREV_Msk            (0x4UL << TIM_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define TIM_VERR_MINREV                TIM_VERR_MINREV_Msk                     /*!< TIM Minor version */
#define TIM_VERR_MAJREV_Pos            (4U)
#define TIM_VERR_MAJREV_Msk            (0x4UL << TAMPC_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define TIM_VERR_MAJREV                TIM_VERR_MAJREV_Msk                     /*!< TIM Major version */

/******************  Bits definition for TIM_IPIDR register  ******************/
#define TIM_IPIDR_ID_Pos               (0U)
#define TIM_IPIDR_ID_Msk               (0xFFFFFFFFUL << TIM_IPIDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define TIM_IPIDR_ID                   TIM_IPIDR_ID_Msk                        /*!< TIM ID */

/******************  Bits definition for TAMP_SIDR register  ******************/
#define TIM_SIDR_SID_Pos               (0U)
#define TIM_SIDR_SID_Msk               (0xFFFFFFFFUL << TIM_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define TIM_SIDR_SID                   TIM_SIDR_SID_Msk                        /*!< TIM Size ID */

/******************************************************************************/
/*                                                                            */
/*      Universal Synchronous Asynchronous Receiver Transmitter (USART)       */
/*                                                                            */
/******************************************************************************/
/* c7amba_sci3_v3.0 */
/******************  Bit definition for USART_CR1 register  *******************/
/******************  Bit definition for USART_CR1 register  *******************/
#define USART_CR1_UE_Pos               (0U)
#define USART_CR1_UE_Msk               (0x1UL << USART_CR1_UE_Pos)  /*!< 0x00000001 */
#define USART_CR1_UE                   USART_CR1_UE_Msk            /*!< USART enable */
#define USART_CR1_UESM_Pos             (1U)
#define USART_CR1_UESM_Msk             (0x1UL << USART_CR1_UESM_Pos)/*!< 0x00000002 */
#define USART_CR1_UESM                 USART_CR1_UESM_Msk          /*!< USART enable in low-power mode  */
#define USART_CR1_RE_Pos               (2U)
#define USART_CR1_RE_Msk               (0x1UL << USART_CR1_RE_Pos)  /*!< 0x00000004 */
#define USART_CR1_RE                   USART_CR1_RE_Msk            /*!< Receiver enable */
#define USART_CR1_TE_Pos               (3U)
#define USART_CR1_TE_Msk               (0x1UL << USART_CR1_TE_Pos)  /*!< 0x00000008 */
#define USART_CR1_TE                   USART_CR1_TE_Msk            /*!< Transmitter enable */
#define USART_CR1_IDLEIE_Pos           (4U)
#define USART_CR1_IDLEIE_Msk           (0x1UL << USART_CR1_IDLEIE_Pos)  /*!< 0x00000010 */
#define USART_CR1_IDLEIE               USART_CR1_IDLEIE_Msk        /*!< IDLE interrupt enable */
#define USART_CR1_RXFNEIE_Pos          (5U)
#define USART_CR1_RXFNEIE_Msk          (0x1UL << USART_CR1_RXFNEIE_Pos)   /*!< 0x00000020 */
#define USART_CR1_RXFNEIE              USART_CR1_RXFNEIE_Msk       /*!< RXFIFO not empty interrupt enable */
#define USART_CR1_RXNEIE_RXFNEIE_Pos   USART_CR1_RXFNEIE_Pos
#define USART_CR1_RXNEIE_RXFNEIE_Msk   USART_CR1_RXFNEIE_Msk                      /*!< 0x00000020 */
#define USART_CR1_RXNEIE_RXFNEIE       USART_CR1_RXFNEIE_Msk                      /*!< RXNE and RX FIFO Not Empty Interrupt Enable */
#define USART_CR1_TCIE_Pos             (6U)
#define USART_CR1_TCIE_Msk             (0x1UL << USART_CR1_TCIE_Pos)/*!< 0x00000040 */
#define USART_CR1_TCIE                 USART_CR1_TCIE_Msk          /*!< Transmission complete interrupt enable */
#define USART_CR1_TXFNFIE_Pos          (7U)
#define USART_CR1_TXFNFIE_Msk          (0x1UL << USART_CR1_TXFNFIE_Pos)   /*!< 0x00000080 */
#define USART_CR1_TXFNFIE              USART_CR1_TXFNFIE_Msk       /*!< TXFIFO not full interrupt enable */
#define USART_CR1_TXEIE_TXFNFIE_Pos    USART_CR1_TXFNFIE_Pos
#define USART_CR1_TXEIE_TXFNFIE_Msk    USART_CR1_TXFNFIE_Msk                       /*!< 0x00000080 */
#define USART_CR1_TXEIE_TXFNFIE        USART_CR1_TXFNFIE_Msk                       /*!< TXE and TX FIFO Not Full Interrupt Enable */
#define USART_CR1_PEIE_Pos             (8U)
#define USART_CR1_PEIE_Msk             (0x1UL << USART_CR1_PEIE_Pos)/*!< 0x00000100 */
#define USART_CR1_PEIE                 USART_CR1_PEIE_Msk          /*!< PE interrupt enable */
#define USART_CR1_PS_Pos               (9U)
#define USART_CR1_PS_Msk               (0x1UL << USART_CR1_PS_Pos)  /*!< 0x00000200 */
#define USART_CR1_PS                   USART_CR1_PS_Msk            /*!< Parity selection */
#define USART_CR1_PCE_Pos              (10U)
#define USART_CR1_PCE_Msk              (0x1UL << USART_CR1_PCE_Pos) /*!< 0x00000400 */
#define USART_CR1_PCE                  USART_CR1_PCE_Msk           /*!< Parity control enable */
#define USART_CR1_WAKE_Pos             (11U)
#define USART_CR1_WAKE_Msk             (0x1UL << USART_CR1_WAKE_Pos)/*!< 0x00000800 */
#define USART_CR1_WAKE                 USART_CR1_WAKE_Msk          /*!< Receiver wakeup method */
#define USART_CR1_M_Pos                (12U)
#define USART_CR1_M_Msk                (0x10001UL << USART_CR1_M_Pos)             /*!< 0x10001000 */
#define USART_CR1_M                    USART_CR1_M_Msk                           /*!< Word length */
#define USART_CR1_M0_Pos               (12U)
#define USART_CR1_M0_Msk               (0x1UL << USART_CR1_M0_Pos)  /*!< 0x00001000 */
#define USART_CR1_M0                   USART_CR1_M0_Msk            /*!< Word length */
#define USART_CR1_MME_Pos              (13U)
#define USART_CR1_MME_Msk              (0x1UL << USART_CR1_MME_Pos) /*!< 0x00002000 */
#define USART_CR1_MME                  USART_CR1_MME_Msk           /*!< Mute mode enable */
#define USART_CR1_CMIE_Pos             (14U)
#define USART_CR1_CMIE_Msk             (0x1UL << USART_CR1_CMIE_Pos)/*!< 0x00004000 */
#define USART_CR1_CMIE                 USART_CR1_CMIE_Msk          /*!< Character match interrupt enable */
#define USART_CR1_OVER8_Pos            (15U)
#define USART_CR1_OVER8_Msk            (0x1UL << USART_CR1_OVER8_Pos) /*!< 0x00008000 */
#define USART_CR1_OVER8                USART_CR1_OVER8_Msk         /*!< Oversampling mode */
#define USART_CR1_DEDT_Pos             (16U)
#define USART_CR1_DEDT_Msk             (0x1FUL << USART_CR1_DEDT_Pos) /*!< 0x001F0000 */
#define USART_CR1_DEDT                 USART_CR1_DEDT_Msk          /*!< Driver Enable deassertion time */
#define USART_CR1_DEAT_Pos             (21U)
#define USART_CR1_DEAT_Msk             (0x1FUL << USART_CR1_DEAT_Pos) /*!< 0x03E00000 */
#define USART_CR1_DEAT                 USART_CR1_DEAT_Msk          /*!< Driver Enable assertion time */
#define USART_CR1_RTOIE_Pos            (26U)
#define USART_CR1_RTOIE_Msk            (0x1UL << USART_CR1_RTOIE_Pos) /*!< 0x04000000 */
#define USART_CR1_RTOIE                USART_CR1_RTOIE_Msk         /*!< Receiver timeout interrupt enable */
#define USART_CR1_EOBIE_Pos            (27U)
#define USART_CR1_EOBIE_Msk            (0x1UL << USART_CR1_EOBIE_Pos) /*!< 0x08000000 */
#define USART_CR1_EOBIE                USART_CR1_EOBIE_Msk         /*!< End of Block interrupt enable */
#define USART_CR1_M1_Pos               (28U)
#define USART_CR1_M1_Msk               (0x1UL << USART_CR1_M1_Pos)  /*!< 0x10000000 */
#define USART_CR1_M1                   USART_CR1_M1_Msk            /*!< Word length */
#define USART_CR1_FIFOEN_Pos           (29U)
#define USART_CR1_FIFOEN_Msk           (0x1UL << USART_CR1_FIFOEN_Pos)  /*!< 0x20000000 */
#define USART_CR1_FIFOEN               USART_CR1_FIFOEN_Msk        /*!< FIFO mode enable */
#define USART_CR1_TXFEIE_Pos           (30U)
#define USART_CR1_TXFEIE_Msk           (0x1UL << USART_CR1_TXFEIE_Pos)  /*!< 0x40000000 */
#define USART_CR1_TXFEIE               USART_CR1_TXFEIE_Msk        /*!< TXFIFO empty interrupt enable */
#define USART_CR1_RXFFIE_Pos           (31U)
#define USART_CR1_RXFFIE_Msk           (0x1UL << USART_CR1_RXFFIE_Pos)  /*!< 0x80000000 */
#define USART_CR1_RXFFIE               USART_CR1_RXFFIE_Msk        /*!< RXFIFO Full interrupt enable */

/******************  Bit definition for USART_CR2 register  *******************/
#define USART_CR2_SLVEN_Pos            (0U)
#define USART_CR2_SLVEN_Msk            (0x1UL << USART_CR2_SLVEN_Pos) /*!< 0x00000001 */
#define USART_CR2_SLVEN                USART_CR2_SLVEN_Msk         /*!< Synchronous Slave mode enable */
#define USART_CR2_DIS_NSS_Pos          (3U)
#define USART_CR2_DIS_NSS_Msk          (0x1UL << USART_CR2_DIS_NSS_Pos)   /*!< 0x00000008 */
#define USART_CR2_DIS_NSS              USART_CR2_DIS_NSS_Msk       /*!< When the DIS_NSS bit is set, the NSS pin input is ignored */
#define USART_CR2_ADDM7_Pos            (4U)
#define USART_CR2_ADDM7_Msk            (0x1UL << USART_CR2_ADDM7_Pos) /*!< 0x00000010 */
#define USART_CR2_ADDM7                USART_CR2_ADDM7_Msk         /*!< 7-bit Address Detection/4-bit Address Detection */
#define USART_CR2_LBDL_Pos             (5U)
#define USART_CR2_LBDL_Msk             (0x1UL << USART_CR2_LBDL_Pos)/*!< 0x00000020 */
#define USART_CR2_LBDL                 USART_CR2_LBDL_Msk          /*!< LIN break detection length */
#define USART_CR2_LBDIE_Pos            (6U)
#define USART_CR2_LBDIE_Msk            (0x1UL << USART_CR2_LBDIE_Pos) /*!< 0x00000040 */
#define USART_CR2_LBDIE                USART_CR2_LBDIE_Msk         /*!< LIN break detection interrupt enable */
#define USART_CR2_LBCL_Pos             (8U)
#define USART_CR2_LBCL_Msk             (0x1UL << USART_CR2_LBCL_Pos)/*!< 0x00000100 */
#define USART_CR2_LBCL                 USART_CR2_LBCL_Msk          /*!< Last bit clock pulse */
#define USART_CR2_CPHA_Pos             (9U)
#define USART_CR2_CPHA_Msk             (0x1UL << USART_CR2_CPHA_Pos)/*!< 0x00000200 */
#define USART_CR2_CPHA                 USART_CR2_CPHA_Msk          /*!< Clock phase */
#define USART_CR2_CPOL_Pos             (10U)
#define USART_CR2_CPOL_Msk             (0x1UL << USART_CR2_CPOL_Pos)/*!< 0x00000400 */
#define USART_CR2_CPOL                 USART_CR2_CPOL_Msk          /*!< Clock polarity */
#define USART_CR2_CLKEN_Pos            (11U)
#define USART_CR2_CLKEN_Msk            (0x1UL << USART_CR2_CLKEN_Pos) /*!< 0x00000800 */
#define USART_CR2_CLKEN                USART_CR2_CLKEN_Msk         /*!< Clock enable */
#define USART_CR2_STOP_Pos             (12U)
#define USART_CR2_STOP_Msk             (0x3UL << USART_CR2_STOP_Pos)/*!< 0x00003000 */
#define USART_CR2_STOP                 USART_CR2_STOP_Msk          /*!< stop bits */
#define USART_CR2_STOP_0               (0x1UL << USART_CR2_STOP_Pos)              /*!< 0x00001000 */
#define USART_CR2_STOP_1               (0x2UL << USART_CR2_STOP_Pos)              /*!< 0x00002000 */
#define USART_CR2_LINEN_Pos            (14U)
#define USART_CR2_LINEN_Msk            (0x1UL << USART_CR2_LINEN_Pos) /*!< 0x00004000 */
#define USART_CR2_LINEN                USART_CR2_LINEN_Msk         /*!< LIN mode enable */
#define USART_CR2_SWAP_Pos             (15U)
#define USART_CR2_SWAP_Msk             (0x1UL << USART_CR2_SWAP_Pos)/*!< 0x00008000 */
#define USART_CR2_SWAP                 USART_CR2_SWAP_Msk          /*!< Swap TX/RX pins */
#define USART_CR2_RXINV_Pos            (16U)
#define USART_CR2_RXINV_Msk            (0x1UL << USART_CR2_RXINV_Pos) /*!< 0x00010000 */
#define USART_CR2_RXINV                USART_CR2_RXINV_Msk         /*!< RX pin active level inversion */
#define USART_CR2_TXINV_Pos            (17U)
#define USART_CR2_TXINV_Msk            (0x1UL << USART_CR2_TXINV_Pos) /*!< 0x00020000 */
#define USART_CR2_TXINV                USART_CR2_TXINV_Msk         /*!< TX pin active level inversion */
#define USART_CR2_DATAINV_Pos          (18U)
#define USART_CR2_DATAINV_Msk          (0x1UL << USART_CR2_DATAINV_Pos)   /*!< 0x00040000 */
#define USART_CR2_DATAINV              USART_CR2_DATAINV_Msk       /*!< Binary data inversion */
#define USART_CR2_MSBFIRST_Pos         (19U)
#define USART_CR2_MSBFIRST_Msk         (0x1UL << USART_CR2_MSBFIRST_Pos)    /*!< 0x00080000 */
#define USART_CR2_MSBFIRST             USART_CR2_MSBFIRST_Msk      /*!< Most significant bit first */
#define USART_CR2_ABREN_Pos            (20U)
#define USART_CR2_ABREN_Msk            (0x1UL << USART_CR2_ABREN_Pos) /*!< 0x00100000 */
#define USART_CR2_ABREN                USART_CR2_ABREN_Msk         /*!< Auto baud rate enable */
#define USART_CR2_ABRMODE_Pos           (21U)
#define USART_CR2_ABRMODE_Msk           (0x3UL << USART_CR2_ABRMODE_Pos)  /*!< 0x00600000 */
#define USART_CR2_ABRMODE               USART_CR2_ABRMODE_Msk        /*!< Auto baud rate mode */
#define USART_CR2_ABRMODE_0            (0x1UL << USART_CR2_ABRMODE_Pos)           /*!< 0x00200000 */
#define USART_CR2_ABRMODE_1            (0x2UL << USART_CR2_ABRMODE_Pos)           /*!< 0x00400000 */
#define USART_CR2_RTOEN_Pos            (23U)
#define USART_CR2_RTOEN_Msk            (0x1UL << USART_CR2_RTOEN_Pos) /*!< 0x00800000 */
#define USART_CR2_RTOEN                USART_CR2_RTOEN_Msk         /*!< Receiver timeout enable */
#define USART_CR2_ADD_Pos              (24U)
#define USART_CR2_ADD_Msk              (0xFFUL << USART_CR2_ADD_Pos)/*!< 0xFF000000 */
#define USART_CR2_ADD                  USART_CR2_ADD_Msk           /*!< Address of the USART node  */

/******************  Bit definition for USART_CR3 register  *******************/
#define USART_CR3_EIE_Pos              (0U)
#define USART_CR3_EIE_Msk              (0x1UL << USART_CR3_EIE_Pos) /*!< 0x00000001 */
#define USART_CR3_EIE                  USART_CR3_EIE_Msk           /*!< Error interrupt enable */
#define USART_CR3_IREN_Pos             (1U)
#define USART_CR3_IREN_Msk             (0x1UL << USART_CR3_IREN_Pos)/*!< 0x00000002 */
#define USART_CR3_IREN                 USART_CR3_IREN_Msk          /*!< IrDA mode enable */
#define USART_CR3_IRLP_Pos             (2U)
#define USART_CR3_IRLP_Msk             (0x1UL << USART_CR3_IRLP_Pos)/*!< 0x00000004 */
#define USART_CR3_IRLP                 USART_CR3_IRLP_Msk          /*!< IrDA low-power */
#define USART_CR3_HDSEL_Pos            (3U)
#define USART_CR3_HDSEL_Msk            (0x1UL << USART_CR3_HDSEL_Pos) /*!< 0x00000008 */
#define USART_CR3_HDSEL                USART_CR3_HDSEL_Msk         /*!< Half-duplex selection */
#define USART_CR3_NACK_Pos             (4U)
#define USART_CR3_NACK_Msk             (0x1UL << USART_CR3_NACK_Pos)/*!< 0x00000010 */
#define USART_CR3_NACK                 USART_CR3_NACK_Msk          /*!< Smartcard NACK enable */
#define USART_CR3_SCEN_Pos             (5U)
#define USART_CR3_SCEN_Msk             (0x1UL << USART_CR3_SCEN_Pos)/*!< 0x00000020 */
#define USART_CR3_SCEN                 USART_CR3_SCEN_Msk          /*!< Smartcard mode enable */
#define USART_CR3_DMAR_Pos             (6U)
#define USART_CR3_DMAR_Msk             (0x1UL << USART_CR3_DMAR_Pos)/*!< 0x00000040 */
#define USART_CR3_DMAR                 USART_CR3_DMAR_Msk          /*!< DMA enable receiver */
#define USART_CR3_DMAT_Pos             (7U)
#define USART_CR3_DMAT_Msk             (0x1UL << USART_CR3_DMAT_Pos)/*!< 0x00000080 */
#define USART_CR3_DMAT                 USART_CR3_DMAT_Msk          /*!< DMA enable transmitter */
#define USART_CR3_RTSE_Pos             (8U)
#define USART_CR3_RTSE_Msk             (0x1UL << USART_CR3_RTSE_Pos)/*!< 0x00000100 */
#define USART_CR3_RTSE                 USART_CR3_RTSE_Msk          /*!< RTS enable */
#define USART_CR3_CTSE_Pos             (9U)
#define USART_CR3_CTSE_Msk             (0x1UL << USART_CR3_CTSE_Pos)/*!< 0x00000200 */
#define USART_CR3_CTSE                 USART_CR3_CTSE_Msk          /*!< CTS enable */
#define USART_CR3_CTSIE_Pos            (10U)
#define USART_CR3_CTSIE_Msk            (0x1UL << USART_CR3_CTSIE_Pos) /*!< 0x00000400 */
#define USART_CR3_CTSIE                USART_CR3_CTSIE_Msk         /*!< CTS interrupt enable */
#define USART_CR3_ONEBIT_Pos           (11U)
#define USART_CR3_ONEBIT_Msk           (0x1UL << USART_CR3_ONEBIT_Pos)  /*!< 0x00000800 */
#define USART_CR3_ONEBIT               USART_CR3_ONEBIT_Msk        /*!< One sample bit method enable */
#define USART_CR3_OVRDIS_Pos           (12U)
#define USART_CR3_OVRDIS_Msk           (0x1UL << USART_CR3_OVRDIS_Pos)  /*!< 0x00001000 */
#define USART_CR3_OVRDIS               USART_CR3_OVRDIS_Msk        /*!< Overrun Disable */
#define USART_CR3_DDRE_Pos             (13U)
#define USART_CR3_DDRE_Msk             (0x1UL << USART_CR3_DDRE_Pos)/*!< 0x00002000 */
#define USART_CR3_DDRE                 USART_CR3_DDRE_Msk          /*!< DMA Disable on Reception Error */
#define USART_CR3_DEM_Pos              (14U)
#define USART_CR3_DEM_Msk              (0x1UL << USART_CR3_DEM_Pos) /*!< 0x00004000 */
#define USART_CR3_DEM                  USART_CR3_DEM_Msk           /*!< Driver enable mode  */
#define USART_CR3_DEP_Pos              (15U)
#define USART_CR3_DEP_Msk              (0x1UL << USART_CR3_DEP_Pos) /*!< 0x00008000 */
#define USART_CR3_DEP                  USART_CR3_DEP_Msk           /*!< Driver enable polarity selection */
#define USART_CR3_SCARCNT_Pos          (17U)
#define USART_CR3_SCARCNT_Msk          (0x7UL << USART_CR3_SCARCNT_Pos)   /*!< 0x000E0000 */
#define USART_CR3_SCARCNT              USART_CR3_SCARCNT_Msk       /*!< Smartcard auto-retry count */
#define USART_CR3_TXFTIE_Pos           (23U)
#define USART_CR3_TXFTIE_Msk           (0x1UL << USART_CR3_TXFTIE_Pos)  /*!< 0x00800000 */
#define USART_CR3_TXFTIE               USART_CR3_TXFTIE_Msk        /*!< TXFIFO threshold interrupt enable */
#define USART_CR3_TCBGTIE_Pos          (24U)
#define USART_CR3_TCBGTIE_Msk          (0x1UL << USART_CR3_TCBGTIE_Pos)   /*!< 0x01000000 */
#define USART_CR3_TCBGTIE              USART_CR3_TCBGTIE_Msk       /*!< Transmission Complete before guard time, interrupt enable */
#define USART_CR3_RXFTCFG_Pos          (25U)
#define USART_CR3_RXFTCFG_Msk          (0x7UL << USART_CR3_RXFTCFG_Pos)   /*!< 0x0E000000 */
#define USART_CR3_RXFTCFG              USART_CR3_RXFTCFG_Msk       /*!< Receive FIFO threshold configuration */
#define USART_CR3_RXFTCFG_0            (0x1UL << USART_CR3_RXFTCFG_Pos)           /*!< 0x02000000 */
#define USART_CR3_RXFTCFG_1            (0x2UL << USART_CR3_RXFTCFG_Pos)           /*!< 0x04000000 */
#define USART_CR3_RXFTCFG_2            (0x4UL << USART_CR3_RXFTCFG_Pos)           /*!< 0x08000000 */
#define USART_CR3_RXFTIE_Pos           (28U)
#define USART_CR3_RXFTIE_Msk           (0x1UL << USART_CR3_RXFTIE_Pos)  /*!< 0x10000000 */
#define USART_CR3_RXFTIE               USART_CR3_RXFTIE_Msk        /*!< RXFIFO threshold interrupt enable */
#define USART_CR3_TXFTCFG_Pos          (29U)
#define USART_CR3_TXFTCFG_Msk          (0x7UL << USART_CR3_TXFTCFG_Pos)   /*!< 0xE0000000 */
#define USART_CR3_TXFTCFG              USART_CR3_TXFTCFG_Msk       /*!< TXFIFO threshold configuration */
#define USART_CR3_TXFTCFG_0            (0x1UL << USART_CR3_TXFTCFG_Pos)           /*!< 0x20000000 */
#define USART_CR3_TXFTCFG_1            (0x2UL << USART_CR3_TXFTCFG_Pos)           /*!< 0x40000000 */
#define USART_CR3_TXFTCFG_2            (0x4UL << USART_CR3_TXFTCFG_Pos)           /*!< 0x80000000 */

/******************  Bit definition for USART_BRR register  *******************/
#define USART_BRR_LPUART_Pos              (0U)
#define USART_BRR_LPUART_Msk              (0xFFFFFUL << USART_BRR_LPUART_Pos)   /*!< 0x000FFFFF */
#define USART_BRR_LPUART                  USART_BRR_LPUART_Msk           /*!< LPUART baud rate division (LPUARTDIV) */
#define USART_BRR_BRR_Pos                 (0U)
#define USART_BRR_BRR_Msk                 (0xFFFFUL << USART_BRR_BRR_Pos)  /*!< 0x0000FFFF */
#define USART_BRR_BRR                     USART_BRR_BRR_Msk           /*!< USART baud rate */

/******************  Bit definition for USART_GTPR register  ******************/
#define USART_GTPR_PSC_Pos             (0U)
#define USART_GTPR_PSC_Msk             (0xFFUL << USART_GTPR_PSC_Pos) /*!< 0x000000FF */
#define USART_GTPR_PSC                 USART_GTPR_PSC_Msk          /*!< Prescaler value */
#define USART_GTPR_GT_Pos              (8U)
#define USART_GTPR_GT_Msk              (0xFFUL << USART_GTPR_GT_Pos)/*!< 0x0000FF00 */
#define USART_GTPR_GT                  USART_GTPR_GT_Msk           /*!< Guard time value */

/*******************  Bit definition for USART_RTOR register  *****************/
#define USART_RTOR_RTO_Pos             (0U)
#define USART_RTOR_RTO_Msk             (0xFFFFFFUL << USART_RTOR_RTO_Pos)     /*!< 0x00FFFFFF */
#define USART_RTOR_RTO                 USART_RTOR_RTO_Msk          /*!< Receiver timeout value */
#define USART_RTOR_BLEN_Pos            (24U)
#define USART_RTOR_BLEN_Msk            (0xFFUL << USART_RTOR_BLEN_Pos)  /*!< 0xFF000000 */
#define USART_RTOR_BLEN                USART_RTOR_BLEN_Msk         /*!< Block Length  */

/*******************  Bit definition for USART_RQR register  ******************/
#define USART_RQR_ABRRQ_Pos            (0U)
#define USART_RQR_ABRRQ_Msk            (0x1UL << USART_RQR_ABRRQ_Pos) /*!< 0x00000001 */
#define USART_RQR_ABRRQ                USART_RQR_ABRRQ_Msk         /*!< Auto baud rate request */
#define USART_RQR_SBKRQ_Pos            (1U)
#define USART_RQR_SBKRQ_Msk            (0x1UL << USART_RQR_SBKRQ_Pos) /*!< 0x00000002 */
#define USART_RQR_SBKRQ                USART_RQR_SBKRQ_Msk         /*!< Send break request */
#define USART_RQR_MMRQ_Pos             (2U)
#define USART_RQR_MMRQ_Msk             (0x1UL << USART_RQR_MMRQ_Pos)/*!< 0x00000004 */
#define USART_RQR_MMRQ                 USART_RQR_MMRQ_Msk          /*!< Mute mode request */
#define USART_RQR_RXFRQ_Pos            (3U)
#define USART_RQR_RXFRQ_Msk            (0x1UL << USART_RQR_RXFRQ_Pos) /*!< 0x00000008 */
#define USART_RQR_RXFRQ                USART_RQR_RXFRQ_Msk         /*!< Receive data flush request */
#define USART_RQR_TXFRQ_Pos            (4U)
#define USART_RQR_TXFRQ_Msk            (0x1UL << USART_RQR_TXFRQ_Pos) /*!< 0x00000010 */
#define USART_RQR_TXFRQ                USART_RQR_TXFRQ_Msk         /*!< Transmit data flush request */

/*******************  Bit definition for USART_ISR register  ******************/
#define USART_ISR_PE_Pos               (0U)
#define USART_ISR_PE_Msk               (0x1UL << USART_ISR_PE_Pos)  /*!< 0x00000001 */
#define USART_ISR_PE                   USART_ISR_PE_Msk            /*!< Parity error */
#define USART_ISR_FE_Pos               (1U)
#define USART_ISR_FE_Msk               (0x1UL << USART_ISR_FE_Pos)  /*!< 0x00000002 */
#define USART_ISR_FE                   USART_ISR_FE_Msk            /*!< Framing error */
#define USART_ISR_NE_Pos               (2U)
#define USART_ISR_NE_Msk               (0x1UL << USART_ISR_NE_Pos)  /*!< 0x00000004 */
#define USART_ISR_NE                   USART_ISR_NE_Msk            /*!< Noise detection flag */
#define USART_ISR_ORE_Pos              (3U)
#define USART_ISR_ORE_Msk              (0x1UL << USART_ISR_ORE_Pos) /*!< 0x00000008 */
#define USART_ISR_ORE                  USART_ISR_ORE_Msk           /*!< Overrun error */
#define USART_ISR_IDLE_Pos             (4U)
#define USART_ISR_IDLE_Msk             (0x1UL << USART_ISR_IDLE_Pos)/*!< 0x00000010 */
#define USART_ISR_IDLE                 USART_ISR_IDLE_Msk          /*!< Idle line detected */
#define USART_ISR_RXFNE_Pos            (5U)
#define USART_ISR_RXFNE_Msk            (0x1UL << USART_ISR_RXFNE_Pos) /*!< 0x00000020 */
#define USART_ISR_RXFNE                USART_ISR_RXFNE_Msk         /*!< RXFIFO not empty */
#define USART_ISR_RXNE_RXFNE_Pos       USART_ISR_RXFNE_Pos
#define USART_ISR_RXNE_RXFNE_Msk       USART_ISR_RXFNE_Msk                        /*!< 0x00000020 */
#define USART_ISR_RXNE_RXFNE           USART_ISR_RXFNE_Msk                        /*!< Read Data Register or RX FIFO Not Empty */
#define USART_ISR_TC_Pos               (6U)
#define USART_ISR_TC_Msk               (0x1UL << USART_ISR_TC_Pos)  /*!< 0x00000040 */
#define USART_ISR_TC                   USART_ISR_TC_Msk            /*!< Transmission complete */
#define USART_ISR_TXFNF_Pos            (7U)
#define USART_ISR_TXFNF_Msk            (0x1UL << USART_ISR_TXFNF_Pos) /*!< 0x00000080 */
#define USART_ISR_TXFNF                USART_ISR_TXFNF_Pos         /*!< TXFIFO not full */
#define USART_ISR_TXE_TXFNF_Pos        USART_ISR_TXE_Pos
#define USART_ISR_TXE_TXFNF_Msk        USART_ISR_TXFNF_Msk                         /*!< 0x00000080 */
#define USART_ISR_TXE_TXFNF            USART_ISR_TXFNF_Msk                         /*!< Transmit Data Register Empty or TX FIFO Not Full Flag */
#define USART_ISR_LBDF_Pos             (8U)
#define USART_ISR_LBDF_Msk             (0x1UL << USART_ISR_LBDF_Pos)/*!< 0x00000100 */
#define USART_ISR_LBDF                 USART_ISR_LBDF_Msk          /*!< LIN break detection flag */
#define USART_ISR_CTSIF_Pos            (9U)
#define USART_ISR_CTSIF_Msk            (0x1UL << USART_ISR_CTSIF_Pos) /*!< 0x00000200 */
#define USART_ISR_CTSIF                USART_ISR_CTSIF_Msk         /*!< CTS interrupt flag */
#define USART_ISR_CTS_Pos              (10U)
#define USART_ISR_CTS_Msk              (0x1UL << USART_ISR_CTS_Pos) /*!< 0x00000400 */
#define USART_ISR_CTS                  USART_ISR_CTS_Msk           /*!< CTS flag */
#define USART_ISR_RTOF_Pos             (11U)
#define USART_ISR_RTOF_Msk             (0x1UL << USART_ISR_RTOF_Pos)/*!< 0x00000800 */
#define USART_ISR_RTOF                 USART_ISR_RTOF_Msk          /*!< Receiver timeout */
#define USART_ISR_EOBF_Pos             (12U)
#define USART_ISR_EOBF_Msk             (0x1UL << USART_ISR_EOBF_Pos)/*!< 0x00001000 */
#define USART_ISR_EOBF                 USART_ISR_EOBF_Msk          /*!< End of block flag */
#define USART_ISR_UDR_Pos              (13U)
#define USART_ISR_UDR_Msk              (0x1UL << USART_ISR_UDR_Pos) /*!< 0x00002000 */
#define USART_ISR_UDR                  USART_ISR_UDR_Msk           /*!< SPI slave underrun error flag */
#define USART_ISR_ABRE_Pos             (14U)
#define USART_ISR_ABRE_Msk             (0x1UL << USART_ISR_ABRE_Pos)/*!< 0x00004000 */
#define USART_ISR_ABRE                 USART_ISR_ABRE_Msk          /*!< Auto baud rate error */
#define USART_ISR_ABRF_Pos             (15U)
#define USART_ISR_ABRF_Msk             (0x1UL << USART_ISR_ABRF_Pos)/*!< 0x00008000 */
#define USART_ISR_ABRF                 USART_ISR_ABRF_Msk          /*!< Auto baud rate flag */
#define USART_ISR_BUSY_Pos             (16U)
#define USART_ISR_BUSY_Msk             (0x1UL << USART_ISR_BUSY_Pos)/*!< 0x00010000 */
#define USART_ISR_BUSY                 USART_ISR_BUSY_Msk          /*!< Busy flag */
#define USART_ISR_CMF_Pos              (17U)
#define USART_ISR_CMF_Msk              (0x1UL << USART_ISR_CMF_Pos) /*!< 0x00020000 */
#define USART_ISR_CMF                  USART_ISR_CMF_Msk           /*!< Character match flag */
#define USART_ISR_SBKF_Pos             (18U)
#define USART_ISR_SBKF_Msk             (0x1UL << USART_ISR_SBKF_Pos)/*!< 0x00040000 */
#define USART_ISR_SBKF                 USART_ISR_SBKF_Msk          /*!< Send break flag */
#define USART_ISR_RWU_Pos              (19U)
#define USART_ISR_RWU_Msk              (0x1UL << USART_ISR_RWU_Pos) /*!< 0x00080000 */
#define USART_ISR_RWU                  USART_ISR_RWU_Msk           /*!< Receiver wakeup from Mute mode */
#define USART_ISR_TEACK_Pos            (21U)
#define USART_ISR_TEACK_Msk            (0x1UL << USART_ISR_TEACK_Pos) /*!< 0x00200000 */
#define USART_ISR_TEACK                USART_ISR_TEACK_Msk         /*!< Transmit enable acknowledge flag  */
#define USART_ISR_REACK_Pos            (22U)
#define USART_ISR_REACK_Msk            (0x1UL << USART_ISR_REACK_Pos) /*!< 0x00400000 */
#define USART_ISR_REACK                USART_ISR_REACK_Msk         /*!< Receive enable acknowledge flag  */
#define USART_ISR_TXFE_Pos             (23U)
#define USART_ISR_TXFE_Msk             (0x1UL << USART_ISR_TXFE_Pos)/*!< 0x00800000 */
#define USART_ISR_TXFE                 USART_ISR_TXFE_Msk          /*!< TXFIFO Empty */
#define USART_ISR_RXFF_Pos             (24U)
#define USART_ISR_RXFF_Msk             (0x1UL << USART_ISR_RXFF_Pos)/*!< 0x01000000 */
#define USART_ISR_RXFF                 USART_ISR_RXFF_Msk          /*!< RXFIFO Full */
#define USART_ISR_TCBGT_Pos            (25U)
#define USART_ISR_TCBGT_Msk            (0x1UL << USART_ISR_TCBGT_Pos) /*!< 0x02000000 */
#define USART_ISR_TCBGT                USART_ISR_TCBGT_Msk         /*!< Transmission complete before guard time flag */
#define USART_ISR_RXFT_Pos             (26U)
#define USART_ISR_RXFT_Msk             (0x1UL << USART_ISR_RXFT_Pos)/*!< 0x04000000 */
#define USART_ISR_RXFT                 USART_ISR_RXFT_Msk          /*!< RXFIFO threshold flag */
#define USART_ISR_TXFT_Pos             (27U)
#define USART_ISR_TXFT_Msk             (0x1UL << USART_ISR_TXFT_Pos)/*!< 0x08000000 */
#define USART_ISR_TXFT                 USART_ISR_TXFT_Msk          /*!< TXFIFO threshold flag */

/*******************  Bit definition for USART_ICR register  ******************/
#define USART_ICR_PECF_Pos             (0U)
#define USART_ICR_PECF_Msk             (0x1UL << USART_ICR_PECF_Pos)/*!< 0x00000001 */
#define USART_ICR_PECF                 USART_ICR_PECF_Msk          /*!< Parity error clear flag */
#define USART_ICR_FECF_Pos             (1U)
#define USART_ICR_FECF_Msk             (0x1UL << USART_ICR_FECF_Pos)/*!< 0x00000002 */
#define USART_ICR_FECF                 USART_ICR_FECF_Msk          /*!< Framing error clear flag */
#define USART_ICR_NECF_Pos             (2U)
#define USART_ICR_NECF_Msk             (0x1UL << USART_ICR_NECF_Pos)/*!< 0x00000004 */
#define USART_ICR_NECF                 USART_ICR_NECF_Msk          /*!< Noise detected clear flag */
#define USART_ICR_ORECF_Pos            (3U)
#define USART_ICR_ORECF_Msk            (0x1UL << USART_ICR_ORECF_Pos) /*!< 0x00000008 */
#define USART_ICR_ORECF                USART_ICR_ORECF_Msk         /*!< Overrun error clear flag */
#define USART_ICR_IDLECF_Pos           (4U)
#define USART_ICR_IDLECF_Msk           (0x1UL << USART_ICR_IDLECF_Pos)  /*!< 0x00000010 */
#define USART_ICR_IDLECF               USART_ICR_IDLECF_Msk        /*!< Idle line detected clear flag */
#define USART_ICR_TXFECF_Pos           (5U)
#define USART_ICR_TXFECF_Msk           (0x1UL << USART_ICR_TXFECF_Pos)  /*!< 0x00000020 */
#define USART_ICR_TXFECF               USART_ICR_TXFECF_Msk        /*!< TXFIFO empty clear flag */
#define USART_ICR_TCCF_Pos             (6U)
#define USART_ICR_TCCF_Msk             (0x1UL << USART_ICR_TCCF_Pos)/*!< 0x00000040 */
#define USART_ICR_TCCF                 USART_ICR_TCCF_Msk          /*!< Transmission complete clear flag */
#define USART_ICR_TCBGTCF_Pos          (7U)
#define USART_ICR_TCBGTCF_Msk          (0x1UL << USART_ICR_TCBGTCF_Pos)   /*!< 0x00000080 */
#define USART_ICR_TCBGTCF              USART_ICR_TCBGTCF_Msk       /*!< Transmission complete before Guard time clear flag */
#define USART_ICR_LBDCF_Pos            (8U)
#define USART_ICR_LBDCF_Msk            (0x1UL << USART_ICR_LBDCF_Pos) /*!< 0x00000100 */
#define USART_ICR_LBDCF                USART_ICR_LBDCF_Msk         /*!< LIN break detection clear flag */
#define USART_ICR_CTSCF_Pos            (9U)
#define USART_ICR_CTSCF_Msk            (0x1UL << USART_ICR_CTSCF_Pos) /*!< 0x00000200 */
#define USART_ICR_CTSCF                USART_ICR_CTSCF_Msk         /*!< CTS clear flag */
#define USART_ICR_RTOCF_Pos            (11U)
#define USART_ICR_RTOCF_Msk            (0x1UL << USART_ICR_RTOCF_Pos) /*!< 0x00000800 */
#define USART_ICR_RTOCF                USART_ICR_RTOCF_Msk         /*!< Receiver timeout clear flag */
#define USART_ICR_EOBCF_Pos            (12U)
#define USART_ICR_EOBCF_Msk            (0x1UL << USART_ICR_EOBCF_Pos) /*!< 0x00001000 */
#define USART_ICR_EOBCF                USART_ICR_EOBCF_Msk         /*!< End of block clear flag */
#define USART_ICR_UDRCF_Pos            (13U)
#define USART_ICR_UDRCF_Msk            (0x1UL << USART_ICR_UDRCF_Pos) /*!< 0x00002000 */
#define USART_ICR_UDRCF                USART_ICR_UDRCF_Msk         /*!< SPI slave underrun clear flag */
#define USART_ICR_CMCF_Pos             (17U)
#define USART_ICR_CMCF_Msk             (0x1UL << USART_ICR_CMCF_Pos)/*!< 0x00020000 */
#define USART_ICR_CMCF                 USART_ICR_CMCF_Msk          /*!< Character match clear flag */

/*******************  Bit definition for USART_RDR register  ******************/
#define USART_RDR_RDR_Pos              (0U)
#define USART_RDR_RDR_Msk              (0x1FFUL << USART_RDR_RDR_Pos) /*!< 0x000001FF */
#define USART_RDR_RDR                  USART_RDR_RDR_Msk           /*!< Receive data value */

/*******************  Bit definition for USART_TDR register  ******************/
#define USART_TDR_TDR_Pos              (0U)
#define USART_TDR_TDR_Msk              (0x1FFUL << USART_TDR_TDR_Pos) /*!< 0x000001FF */
#define USART_TDR_TDR                  USART_TDR_TDR_Msk           /*!< Transmit data value */

/*******************  Bit definition for USART_PRESC register  ****************/
#define USART_PRESC_PRESCALER_Pos      (0U)
#define USART_PRESC_PRESCALER_Msk      (0xFUL << USART_PRESC_PRESCALER_Pos)       /*!< 0x0000000F */
#define USART_PRESC_PRESCALER          USART_PRESC_PRESCALER_Msk   /*!< Clock prescaler */
#define USART_PRESC_PRESCALER_0        (0x1UL << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000001 */
#define USART_PRESC_PRESCALER_1        (0x2UL << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000002 */
#define USART_PRESC_PRESCALER_2        (0x4UL << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000004 */
#define USART_PRESC_PRESCALER_3        (0x8UL << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000008 */

/*******************  Bit definition for USART_AUTOCR register  ***************/
#define USART_AUTOCR_TDN_Pos           (0U)
#define USART_AUTOCR_TDN_Msk           (0xFFFFUL << USART_AUTOCR_TDN_Pos)     /*!< 0x0000FFFF */
#define USART_AUTOCR_TDN               USART_AUTOCR_TDN_Msk        /*!< TDN transmission data number */
#define USART_AUTOCR_TRIGPOL_Pos       (16U)
#define USART_AUTOCR_TRIGPOL_Msk       (0x1UL << USART_AUTOCR_TRIGPOL_Pos)      /*!< 0x00010000 */
#define USART_AUTOCR_TRIGPOL           USART_AUTOCR_TRIGPOL_Msk    /*!< Trigger polarity bit */
#define USART_AUTOCR_TRIGEN_Pos        (17U)
#define USART_AUTOCR_TRIGEN_Msk        (0x1UL << USART_AUTOCR_TRIGEN_Pos)     /*!< 0x00020000 */
#define USART_AUTOCR_TRIGEN            USART_AUTOCR_TRIGEN_Msk     /*!< Trigger enable bit  */
#define USART_AUTOCR_IDLEDIS_Pos       (18U)
#define USART_AUTOCR_IDLEDIS_Msk       (0x1UL << USART_AUTOCR_IDLEDIS_Pos)      /*!< 0x00040000 */
#define USART_AUTOCR_IDLEDIS           USART_AUTOCR_IDLEDIS_Msk    /*!< Idle frame transmission disable bit after enabling the transmitter */
#define USART_AUTOCR_TRIGSEL_Pos       (19U)
#define USART_AUTOCR_TRIGSEL_Msk       (0xFUL << USART_AUTOCR_TRIGSEL_Pos)      /*!< 0x00780000 */
#define USART_AUTOCR_TRIGSEL           USART_AUTOCR_TRIGSEL_Msk    /*!< Trigger selection bits  */

/****************  Bit definition for USART_HWCFGR2 register  *****************/
#define USART_HWCFGR2_CFG1_Pos         (0U)
#define USART_HWCFGR2_CFG1_Msk         (0xFUL << USART_HWCFGR2_CFG1_Pos)    /*!< 0x0000000F */
#define USART_HWCFGR2_CFG1             USART_HWCFGR2_CFG1_Msk      /*!< USART hardware configuration 1 */
#define USART_HWCFGR2_CFG2_Pos         (4U)
#define USART_HWCFGR2_CFG2_Msk         (0xFUL << USART_HWCFGR2_CFG2_Pos)    /*!< 0x000000F0 */
#define USART_HWCFGR2_CFG2             USART_HWCFGR2_CFG2_Msk      /*!< USART hardware configuration 2 */
#define USART_HWCFGR2_CFG3_Pos         (8U)
#define USART_HWCFGR2_CFG3_Msk         (0xFUL << USART_HWCFGR2_CFG3_Pos)    /*!< 0x00000F00 */
#define USART_HWCFGR2_CFG3             USART_HWCFGR2_CFG3_Msk      /*!< USART hardware configuration 3 */

/****************  Bit definition for USART_HWCFGR1 register  *****************/
#define USART_HWCFGR1_CFG1_Pos         (0U)
#define USART_HWCFGR1_CFG1_Msk         (0xFUL << USART_HWCFGR1_CFG1_Pos)    /*!< 0x0000000F */
#define USART_HWCFGR1_CFG1             USART_HWCFGR1_CFG1_Msk      /*!< USART hardware configuration 1 */
#define USART_HWCFGR1_CFG2_Pos         (4U)
#define USART_HWCFGR1_CFG2_Msk         (0xFUL << USART_HWCFGR1_CFG2_Pos)    /*!< 0x000000F0 */
#define USART_HWCFGR1_CFG2             USART_HWCFGR1_CFG2_Msk      /*!< USART hardware configuration 2 */
#define USART_HWCFGR1_CFG3_Pos         (8U)
#define USART_HWCFGR1_CFG3_Msk         (0xFUL << USART_HWCFGR1_CFG3_Pos)    /*!< 0x00000F00 */
#define USART_HWCFGR1_CFG3             USART_HWCFGR1_CFG3_Msk      /*!< USART hardware configuration 3 */
#define USART_HWCFGR1_CFG4_Pos         (12U)
#define USART_HWCFGR1_CFG4_Msk         (0xFUL << USART_HWCFGR1_CFG4_Pos)    /*!< 0x0000F000 */
#define USART_HWCFGR1_CFG4             USART_HWCFGR1_CFG4_Msk      /*!< USART hardware configuration 4 */
#define USART_HWCFGR1_CFG5_Pos         (16U)
#define USART_HWCFGR1_CFG5_Msk         (0xFUL << USART_HWCFGR1_CFG5_Pos)    /*!< 0x000F0000 */
#define USART_HWCFGR1_CFG5             USART_HWCFGR1_CFG5_Msk      /*!< USART hardware configuration 5 */
#define USART_HWCFGR1_CFG6_Pos         (20U)
#define USART_HWCFGR1_CFG6_Msk         (0xFUL << USART_HWCFGR1_CFG6_Pos)    /*!< 0x00F00000 */
#define USART_HWCFGR1_CFG6             USART_HWCFGR1_CFG6_Msk      /*!< USART hardware configuration 6 */
#define USART_HWCFGR1_CFG7_Pos         (24U)
#define USART_HWCFGR1_CFG7_Msk         (0xFUL << USART_HWCFGR1_CFG7_Pos)    /*!< 0x0F000000 */
#define USART_HWCFGR1_CFG7             USART_HWCFGR1_CFG7_Msk      /*!< USART hardware configuration 7 */
#define USART_HWCFGR1_CFG8_Pos         (28U)
#define USART_HWCFGR1_CFG8_Msk         (0xFUL << USART_HWCFGR1_CFG8_Pos)    /*!< 0xF0000000 */
#define USART_HWCFGR1_CFG8             USART_HWCFGR1_CFG8_Msk      /*!< USART hardware configuration 8  */

/******************  Bit definition for USART_VERR register  ******************/
#define USART_VERR_MINREV_Pos          (0U)
#define USART_VERR_MINREV_Msk          (0xFUL << USART_VERR_MINREV_Pos)   /*!< 0x0000000F */
#define USART_VERR_MINREV              USART_VERR_MINREV_Msk       /*!< Minor revision */
#define USART_VERR_MAJREV_Pos          (4U)
#define USART_VERR_MAJREV_Msk          (0xFUL << USART_VERR_MAJREV_Pos)   /*!< 0x000000F0 */
#define USART_VERR_MAJREV              USART_VERR_MAJREV_Msk       /*!< Major revision */

/*****************  Bit definition for USART_IPIDR register  ******************/
#define USART_IPIDR_ID_Pos             (0U)
#define USART_IPIDR_ID_Msk             (0xFFFFFFFFUL << USART_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define USART_IPIDR_ID                 USART_IPIDR_ID_Msk          /*!< Peripheral identifier */

/******************  Bit definition for USART_SIDR register  ******************/
#define USART_SIDR_SID_Pos             (0U)
#define USART_SIDR_SID_Msk             (0xFFFFFFFFUL << USART_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define USART_SIDR_SID                 USART_SIDR_SID_Msk          /*!< Size identification  */

/******************************************************************************/
/*                                                                            */
/*                                       USB_OTG                              */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for USB_OTG_GOTGCTL register  ********************/
#define USB_OTG_GOTGCTL_SRQSCS_Pos               (0U)
#define USB_OTG_GOTGCTL_SRQSCS_Msk               (0x1UL << USB_OTG_GOTGCTL_SRQSCS_Pos)      /*!< 0x00000001 */
#define USB_OTG_GOTGCTL_SRQSCS                   USB_OTG_GOTGCTL_SRQSCS_Msk                /*!< Session request success */
#define USB_OTG_GOTGCTL_SRQ_Pos                  (1U)
#define USB_OTG_GOTGCTL_SRQ_Msk                  (0x1UL << USB_OTG_GOTGCTL_SRQ_Pos)         /*!< 0x00000002 */
#define USB_OTG_GOTGCTL_SRQ                      USB_OTG_GOTGCTL_SRQ_Msk                   /*!< Session request */
#define USB_OTG_GOTGCTL_VBVALOEN_Pos             (2U)
#define USB_OTG_GOTGCTL_VBVALOEN_Msk             (0x1UL << USB_OTG_GOTGCTL_VBVALOEN_Pos)    /*!< 0x00000004 */
#define USB_OTG_GOTGCTL_VBVALOEN                 USB_OTG_GOTGCTL_VBVALOEN_Msk              /*!< VBUS valid override enable */
#define USB_OTG_GOTGCTL_VBVALOVAL_Pos            (3U)
#define USB_OTG_GOTGCTL_VBVALOVAL_Msk            (0x1UL << USB_OTG_GOTGCTL_VBVALOVAL_Pos)   /*!< 0x00000008 */
#define USB_OTG_GOTGCTL_VBVALOVAL                USB_OTG_GOTGCTL_VBVALOVAL_Msk             /*!< VBUS valid override value */
#define USB_OTG_GOTGCTL_AVALOEN_Pos              (4U)
#define USB_OTG_GOTGCTL_AVALOEN_Msk              (0x1UL << USB_OTG_GOTGCTL_AVALOEN_Pos)     /*!< 0x00000010 */
#define USB_OTG_GOTGCTL_AVALOEN                  USB_OTG_GOTGCTL_AVALOEN_Msk               /*!< A-peripheral session valid override enable */
#define USB_OTG_GOTGCTL_AVALOVAL_Pos             (5U)
#define USB_OTG_GOTGCTL_AVALOVAL_Msk             (0x1UL << USB_OTG_GOTGCTL_AVALOVAL_Pos)    /*!< 0x00000020 */
#define USB_OTG_GOTGCTL_AVALOVAL                 USB_OTG_GOTGCTL_AVALOVAL_Msk              /*!< A-peripheral session valid override value */
#define USB_OTG_GOTGCTL_BVALOEN_Pos              (6U)
#define USB_OTG_GOTGCTL_BVALOEN_Msk              (0x1UL << USB_OTG_GOTGCTL_BVALOEN_Pos)     /*!< 0x00000040 */
#define USB_OTG_GOTGCTL_BVALOEN                  USB_OTG_GOTGCTL_BVALOEN_Msk               /*!< B-peripheral session valid override enable */
#define USB_OTG_GOTGCTL_BVALOVAL_Pos             (7U)
#define USB_OTG_GOTGCTL_BVALOVAL_Msk             (0x1UL << USB_OTG_GOTGCTL_BVALOVAL_Pos)    /*!< 0x00000080 */
#define USB_OTG_GOTGCTL_BVALOVAL                 USB_OTG_GOTGCTL_BVALOVAL_Msk              /*!< B-peripheral session valid override value  */
#define USB_OTG_GOTGCTL_BSESVLD_Pos              (19U)
#define USB_OTG_GOTGCTL_BSESVLD_Msk              (0x1UL << USB_OTG_GOTGCTL_BSESVLD_Pos)     /*!< 0x00080000 */
#define USB_OTG_GOTGCTL_BSESVLD                  USB_OTG_GOTGCTL_BSESVLD_Msk               /*!<  B-session valid*/

/********************  Bit definition for USB_OTG_HCFG register  ********************/
#define USB_OTG_HCFG_FSLSPCS_Pos                 (0U)
#define USB_OTG_HCFG_FSLSPCS_Msk                 (0x3UL << USB_OTG_HCFG_FSLSPCS_Pos)        /*!< 0x00000003 */
#define USB_OTG_HCFG_FSLSPCS                     USB_OTG_HCFG_FSLSPCS_Msk                  /*!< FS/LS PHY clock select */
#define USB_OTG_HCFG_FSLSPCS_0                   (0x1UL << USB_OTG_HCFG_FSLSPCS_Pos)        /*!< 0x00000001 */
#define USB_OTG_HCFG_FSLSPCS_1                   (0x2UL << USB_OTG_HCFG_FSLSPCS_Pos)        /*!< 0x00000002 */
#define USB_OTG_HCFG_FSLSS_Pos                   (2U)
#define USB_OTG_HCFG_FSLSS_Msk                   (0x1UL << USB_OTG_HCFG_FSLSS_Pos)          /*!< 0x00000004 */
#define USB_OTG_HCFG_FSLSS                       USB_OTG_HCFG_FSLSS_Msk                    /*!< FS- and LS-only support */

/********************  Bit definition for USB_OTG_DCFG register  ********************/
#define USB_OTG_DCFG_DSPD_Pos                    (0U)
#define USB_OTG_DCFG_DSPD_Msk                    (0x3UL << USB_OTG_DCFG_DSPD_Pos)           /*!< 0x00000003 */
#define USB_OTG_DCFG_DSPD                        USB_OTG_DCFG_DSPD_Msk                     /*!< Device speed */
#define USB_OTG_DCFG_DSPD_0                      (0x1UL << USB_OTG_DCFG_DSPD_Pos)           /*!< 0x00000001 */
#define USB_OTG_DCFG_DSPD_1                      (0x2UL << USB_OTG_DCFG_DSPD_Pos)           /*!< 0x00000002 */
#define USB_OTG_DCFG_NZLSOHSK_Pos                (2U)
#define USB_OTG_DCFG_NZLSOHSK_Msk                (0x1UL << USB_OTG_DCFG_NZLSOHSK_Pos)       /*!< 0x00000004 */
#define USB_OTG_DCFG_NZLSOHSK                    USB_OTG_DCFG_NZLSOHSK_Msk                 /*!< Nonzero-length status OUT handshake */
#define USB_OTG_DCFG_DAD_Pos                     (4U)
#define USB_OTG_DCFG_DAD_Msk                     (0x7FUL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x000007F0 */
#define USB_OTG_DCFG_DAD                         USB_OTG_DCFG_DAD_Msk                      /*!< Device address */
#define USB_OTG_DCFG_DAD_0                       (0x01UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000010 */
#define USB_OTG_DCFG_DAD_1                       (0x02UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000020 */
#define USB_OTG_DCFG_DAD_2                       (0x04UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000040 */
#define USB_OTG_DCFG_DAD_3                       (0x08UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000080 */
#define USB_OTG_DCFG_DAD_4                       (0x10UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000100 */
#define USB_OTG_DCFG_DAD_5                       (0x20UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000200 */
#define USB_OTG_DCFG_DAD_6                       (0x40UL << USB_OTG_DCFG_DAD_Pos)           /*!< 0x00000400 */
#define USB_OTG_DCFG_PFIVL_Pos                   (11U)
#define USB_OTG_DCFG_PFIVL_Msk                   (0x3UL << USB_OTG_DCFG_PFIVL_Pos)          /*!< 0x00001800 */
#define USB_OTG_DCFG_PFIVL                       USB_OTG_DCFG_PFIVL_Msk                    /*!< Periodic (micro)frame interval */
#define USB_OTG_DCFG_PFIVL_0                     (0x1UL << USB_OTG_DCFG_PFIVL_Pos)          /*!< 0x00000800 */
#define USB_OTG_DCFG_PFIVL_1                     (0x2UL << USB_OTG_DCFG_PFIVL_Pos)          /*!< 0x00001000 */
#define USB_OTG_DCFG_PERSCHIVL_Pos               (24U)
#define USB_OTG_DCFG_PERSCHIVL_Msk               (0x3UL << USB_OTG_DCFG_PERSCHIVL_Pos)      /*!< 0x03000000 */
#define USB_OTG_DCFG_PERSCHIVL                   USB_OTG_DCFG_PERSCHIVL_Msk                /*!< Periodic scheduling interval */
#define USB_OTG_DCFG_PERSCHIVL_0                 (0x1UL << USB_OTG_DCFG_PERSCHIVL_Pos)      /*!< 0x01000000 */
#define USB_OTG_DCFG_PERSCHIVL_1                 (0x2UL << USB_OTG_DCFG_PERSCHIVL_Pos)      /*!< 0x02000000 */

/********************  Bit definition for USB_OTG_PCGCR register  ********************/
#define USB_OTG_PCGCR_STPPCLK_Pos                (0U)
#define USB_OTG_PCGCR_STPPCLK_Msk                (0x1UL << USB_OTG_PCGCR_STPPCLK_Pos)       /*!< 0x00000001 */
#define USB_OTG_PCGCR_STPPCLK                    USB_OTG_PCGCR_STPPCLK_Msk                 /*!< Stop PHY clock */
#define USB_OTG_PCGCR_GATEHCLK_Pos               (1U)
#define USB_OTG_PCGCR_GATEHCLK_Msk               (0x1UL << USB_OTG_PCGCR_GATEHCLK_Pos)      /*!< 0x00000002 */
#define USB_OTG_PCGCR_GATEHCLK                   USB_OTG_PCGCR_GATEHCLK_Msk                /*!< Gate HCLK */
#define USB_OTG_PCGCR_PHYSUSP_Pos                (4U)
#define USB_OTG_PCGCR_PHYSUSP_Msk                (0x1UL << USB_OTG_PCGCR_PHYSUSP_Pos)       /*!< 0x00000010 */
#define USB_OTG_PCGCR_PHYSUSP                    USB_OTG_PCGCR_PHYSUSP_Msk                 /*!< PHY suspended */

/********************  Bit definition for USB_OTG_GOTGINT register  ********************/
#define USB_OTG_GOTGINT_SEDET_Pos                (2U)
#define USB_OTG_GOTGINT_SEDET_Msk                (0x1UL << USB_OTG_GOTGINT_SEDET_Pos)       /*!< 0x00000004 */
#define USB_OTG_GOTGINT_SEDET                    USB_OTG_GOTGINT_SEDET_Msk                 /*!< Session end detected */
#define USB_OTG_GOTGINT_SRSSCHG_Pos              (8U)
#define USB_OTG_GOTGINT_SRSSCHG_Msk              (0x1UL << USB_OTG_GOTGINT_SRSSCHG_Pos)     /*!< 0x00000100 */
#define USB_OTG_GOTGINT_SRSSCHG                  USB_OTG_GOTGINT_SRSSCHG_Msk               /*!< Session request success status change */
#define USB_OTG_GOTGINT_HNSSCHG_Pos              (9U)
#define USB_OTG_GOTGINT_HNSSCHG_Msk              (0x1UL << USB_OTG_GOTGINT_HNSSCHG_Pos)     /*!< 0x00000200 */
#define USB_OTG_GOTGINT_HNSSCHG                  USB_OTG_GOTGINT_HNSSCHG_Msk               /*!< Host negotiation success status change */
#define USB_OTG_GOTGINT_HNGDET_Pos               (17U)
#define USB_OTG_GOTGINT_HNGDET_Msk               (0x1UL << USB_OTG_GOTGINT_HNGDET_Pos)      /*!< 0x00020000 */
#define USB_OTG_GOTGINT_HNGDET                   USB_OTG_GOTGINT_HNGDET_Msk                /*!< Host negotiation detected */
#define USB_OTG_GOTGINT_ADTOCHG_Pos              (18U)
#define USB_OTG_GOTGINT_ADTOCHG_Msk              (0x1UL << USB_OTG_GOTGINT_ADTOCHG_Pos)     /*!< 0x00040000 */
#define USB_OTG_GOTGINT_ADTOCHG                  USB_OTG_GOTGINT_ADTOCHG_Msk               /*!< A-device timeout change */
#define USB_OTG_GOTGINT_DBCDNE_Pos               (19U)
#define USB_OTG_GOTGINT_DBCDNE_Msk               (0x1UL << USB_OTG_GOTGINT_DBCDNE_Pos)      /*!< 0x00080000 */
#define USB_OTG_GOTGINT_DBCDNE                   USB_OTG_GOTGINT_DBCDNE_Msk                /*!< Debounce done */

/********************  Bit definition for USB_OTG_DCTL register  ********************/
#define USB_OTG_DCTL_RWUSIG_Pos                  (0U)
#define USB_OTG_DCTL_RWUSIG_Msk                  (0x1UL << USB_OTG_DCTL_RWUSIG_Pos)         /*!< 0x00000001 */
#define USB_OTG_DCTL_RWUSIG                      USB_OTG_DCTL_RWUSIG_Msk                   /*!< Remote wakeup signaling */
#define USB_OTG_DCTL_SDIS_Pos                    (1U)
#define USB_OTG_DCTL_SDIS_Msk                    (0x1UL << USB_OTG_DCTL_SDIS_Pos)           /*!< 0x00000002 */
#define USB_OTG_DCTL_SDIS                        USB_OTG_DCTL_SDIS_Msk                     /*!< Soft disconnect */
#define USB_OTG_DCTL_GINSTS_Pos                  (2U)
#define USB_OTG_DCTL_GINSTS_Msk                  (0x1UL << USB_OTG_DCTL_GINSTS_Pos)         /*!< 0x00000004 */
#define USB_OTG_DCTL_GINSTS                      USB_OTG_DCTL_GINSTS_Msk                   /*!< Global IN NAK status */
#define USB_OTG_DCTL_GONSTS_Pos                  (3U)
#define USB_OTG_DCTL_GONSTS_Msk                  (0x1UL << USB_OTG_DCTL_GONSTS_Pos)         /*!< 0x00000008 */
#define USB_OTG_DCTL_GONSTS                      USB_OTG_DCTL_GONSTS_Msk                   /*!< Global OUT NAK status */
#define USB_OTG_DCTL_TCTL_Pos                    (4U)
#define USB_OTG_DCTL_TCTL_Msk                    (0x7UL << USB_OTG_DCTL_TCTL_Pos)           /*!< 0x00000070 */
#define USB_OTG_DCTL_TCTL                        USB_OTG_DCTL_TCTL_Msk                     /*!< Test control */
#define USB_OTG_DCTL_TCTL_0                      (0x1UL << USB_OTG_DCTL_TCTL_Pos)           /*!< 0x00000010 */
#define USB_OTG_DCTL_TCTL_1                      (0x2UL << USB_OTG_DCTL_TCTL_Pos)           /*!< 0x00000020 */
#define USB_OTG_DCTL_TCTL_2                      (0x4UL << USB_OTG_DCTL_TCTL_Pos)           /*!< 0x00000040 */
#define USB_OTG_DCTL_SGINAK_Pos                  (7U)
#define USB_OTG_DCTL_SGINAK_Msk                  (0x1UL << USB_OTG_DCTL_SGINAK_Pos)         /*!< 0x00000080 */
#define USB_OTG_DCTL_SGINAK                      USB_OTG_DCTL_SGINAK_Msk                   /*!< Set global IN NAK */
#define USB_OTG_DCTL_CGINAK_Pos                  (8U)
#define USB_OTG_DCTL_CGINAK_Msk                  (0x1UL << USB_OTG_DCTL_CGINAK_Pos)         /*!< 0x00000100 */
#define USB_OTG_DCTL_CGINAK                      USB_OTG_DCTL_CGINAK_Msk                   /*!< Clear global IN NAK */
#define USB_OTG_DCTL_SGONAK_Pos                  (9U)
#define USB_OTG_DCTL_SGONAK_Msk                  (0x1UL << USB_OTG_DCTL_SGONAK_Pos)         /*!< 0x00000200 */
#define USB_OTG_DCTL_SGONAK                      USB_OTG_DCTL_SGONAK_Msk                   /*!< Set global OUT NAK */
#define USB_OTG_DCTL_CGONAK_Pos                  (10U)
#define USB_OTG_DCTL_CGONAK_Msk                  (0x1UL << USB_OTG_DCTL_CGONAK_Pos)         /*!< 0x00000400 */
#define USB_OTG_DCTL_CGONAK                      USB_OTG_DCTL_CGONAK_Msk                   /*!< Clear global OUT NAK */
#define USB_OTG_DCTL_POPRGDNE_Pos                (11U)
#define USB_OTG_DCTL_POPRGDNE_Msk                (0x1UL << USB_OTG_DCTL_POPRGDNE_Pos)       /*!< 0x00000800 */
#define USB_OTG_DCTL_POPRGDNE                    USB_OTG_DCTL_POPRGDNE_Msk                 /*!< Power-on programming done */

/********************  Bit definition for USB_OTG_HFIR register  ********************/
#define USB_OTG_HFIR_FRIVL_Pos                   (0U)
#define USB_OTG_HFIR_FRIVL_Msk                   (0xFFFFUL << USB_OTG_HFIR_FRIVL_Pos)       /*!< 0x0000FFFF */
#define USB_OTG_HFIR_FRIVL                       USB_OTG_HFIR_FRIVL_Msk                    /*!< Frame interval */

/********************  Bit definition for USB_OTG_HFNUM register  ********************/
#define USB_OTG_HFNUM_FRNUM_Pos                  (0U)
#define USB_OTG_HFNUM_FRNUM_Msk                  (0xFFFFUL << USB_OTG_HFNUM_FRNUM_Pos)      /*!< 0x0000FFFF */
#define USB_OTG_HFNUM_FRNUM                      USB_OTG_HFNUM_FRNUM_Msk                   /*!< Frame number */
#define USB_OTG_HFNUM_FTREM_Pos                  (16U)
#define USB_OTG_HFNUM_FTREM_Msk                  (0xFFFFUL << USB_OTG_HFNUM_FTREM_Pos)      /*!< 0xFFFF0000 */
#define USB_OTG_HFNUM_FTREM                      USB_OTG_HFNUM_FTREM_Msk                   /*!< Frame time remaining */

/********************  Bit definition for USB_OTG_DSTS register  ********************/
#define USB_OTG_DSTS_SUSPSTS_Pos                 (0U)
#define USB_OTG_DSTS_SUSPSTS_Msk                 (0x1UL << USB_OTG_DSTS_SUSPSTS_Pos)        /*!< 0x00000001 */
#define USB_OTG_DSTS_SUSPSTS                     USB_OTG_DSTS_SUSPSTS_Msk                  /*!< Suspend status */

#define USB_OTG_DSTS_ENUMSPD_Pos                 (1U)
#define USB_OTG_DSTS_ENUMSPD_Msk                 (0x3UL << USB_OTG_DSTS_ENUMSPD_Pos)        /*!< 0x00000006 */
#define USB_OTG_DSTS_ENUMSPD                     USB_OTG_DSTS_ENUMSPD_Msk                  /*!< Enumerated speed */
#define USB_OTG_DSTS_ENUMSPD_0                   (0x1UL << USB_OTG_DSTS_ENUMSPD_Pos)        /*!< 0x00000002 */
#define USB_OTG_DSTS_ENUMSPD_1                   (0x2UL << USB_OTG_DSTS_ENUMSPD_Pos)        /*!< 0x00000004 */
#define USB_OTG_DSTS_EERR_Pos                    (3U)
#define USB_OTG_DSTS_EERR_Msk                    (0x1UL << USB_OTG_DSTS_EERR_Pos)           /*!< 0x00000008 */
#define USB_OTG_DSTS_EERR                        USB_OTG_DSTS_EERR_Msk                     /*!< Erratic error */
#define USB_OTG_DSTS_FNSOF_Pos                   (8U)
#define USB_OTG_DSTS_FNSOF_Msk                   (0x3FFFUL << USB_OTG_DSTS_FNSOF_Pos)       /*!< 0x003FFF00 */
#define USB_OTG_DSTS_FNSOF                       USB_OTG_DSTS_FNSOF_Msk                    /*!< Frame number of the received SOF */

/********************  Bit definition for USB_OTG_GAHBCFG register  ********************/
#define USB_OTG_GAHBCFG_GINT_Pos                 (0U)
#define USB_OTG_GAHBCFG_GINT_Msk                 (0x1UL << USB_OTG_GAHBCFG_GINT_Pos)        /*!< 0x00000001 */
#define USB_OTG_GAHBCFG_GINT                     USB_OTG_GAHBCFG_GINT_Msk                  /*!< Global interrupt mask */
#define USB_OTG_GAHBCFG_HBSTLEN_Pos              (1U)
#define USB_OTG_GAHBCFG_HBSTLEN_Msk              (0xFUL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< 0x0000001E */
#define USB_OTG_GAHBCFG_HBSTLEN                  USB_OTG_GAHBCFG_HBSTLEN_Msk               /*!< Burst length/type */
#define USB_OTG_GAHBCFG_HBSTLEN_0                (0x0UL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< Single */
#define USB_OTG_GAHBCFG_HBSTLEN_1                (0x1UL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< INCR */
#define USB_OTG_GAHBCFG_HBSTLEN_2                (0x3UL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< INCR4 */
#define USB_OTG_GAHBCFG_HBSTLEN_3                (0x5UL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< INCR8 */
#define USB_OTG_GAHBCFG_HBSTLEN_4                (0x7UL << USB_OTG_GAHBCFG_HBSTLEN_Pos)     /*!< INCR16 */
#define USB_OTG_GAHBCFG_DMAEN_Pos                (5U)
#define USB_OTG_GAHBCFG_DMAEN_Msk                (0x1UL << USB_OTG_GAHBCFG_DMAEN_Pos)       /*!< 0x00000020 */
#define USB_OTG_GAHBCFG_DMAEN                    USB_OTG_GAHBCFG_DMAEN_Msk                 /*!< DMA enable */
#define USB_OTG_GAHBCFG_TXFELVL_Pos              (7U)
#define USB_OTG_GAHBCFG_TXFELVL_Msk              (0x1UL << USB_OTG_GAHBCFG_TXFELVL_Pos)     /*!< 0x00000080 */
#define USB_OTG_GAHBCFG_TXFELVL                  USB_OTG_GAHBCFG_TXFELVL_Msk               /*!< TxFIFO empty level */
#define USB_OTG_GAHBCFG_PTXFELVL_Pos             (8U)
#define USB_OTG_GAHBCFG_PTXFELVL_Msk             (0x1UL << USB_OTG_GAHBCFG_PTXFELVL_Pos)    /*!< 0x00000100 */
#define USB_OTG_GAHBCFG_PTXFELVL                 USB_OTG_GAHBCFG_PTXFELVL_Msk              /*!< Periodic TxFIFO empty level */

/********************  Bit definition for USB_OTG_GUSBCFG register  ********************/
#define USB_OTG_GUSBCFG_TOCAL_Pos                (0U)
#define USB_OTG_GUSBCFG_TOCAL_Msk                (0x7UL << USB_OTG_GUSBCFG_TOCAL_Pos)       /*!< 0x00000007 */
#define USB_OTG_GUSBCFG_TOCAL                    USB_OTG_GUSBCFG_TOCAL_Msk                 /*!< FS timeout calibration */
#define USB_OTG_GUSBCFG_TOCAL_0                  (0x1UL << USB_OTG_GUSBCFG_TOCAL_Pos)       /*!< 0x00000001 */
#define USB_OTG_GUSBCFG_TOCAL_1                  (0x2UL << USB_OTG_GUSBCFG_TOCAL_Pos)       /*!< 0x00000002 */
#define USB_OTG_GUSBCFG_TOCAL_2                  (0x4UL << USB_OTG_GUSBCFG_TOCAL_Pos)       /*!< 0x00000004 */
#define USB_OTG_GUSBCFG_PHYSEL_Pos               (6U)
#define USB_OTG_GUSBCFG_PHYSEL_Msk               (0x1UL << USB_OTG_GUSBCFG_PHYSEL_Pos)      /*!< 0x00000040 */
#define USB_OTG_GUSBCFG_PHYSEL                   USB_OTG_GUSBCFG_PHYSEL_Msk                /*!< USB 2.0 high-speed ULPI PHY or USB 1.1 full-speed serial transceiver select */
#define USB_OTG_GUSBCFG_SRPCAP_Pos               (8U)
#define USB_OTG_GUSBCFG_SRPCAP_Msk               (0x1UL << USB_OTG_GUSBCFG_SRPCAP_Pos)      /*!< 0x00000100 */
#define USB_OTG_GUSBCFG_SRPCAP                   USB_OTG_GUSBCFG_SRPCAP_Msk                /*!< SRP-capable */
#define USB_OTG_GUSBCFG_HNPCAP_Pos               (9U)
#define USB_OTG_GUSBCFG_HNPCAP_Msk               (0x1UL << USB_OTG_GUSBCFG_HNPCAP_Pos)      /*!< 0x00000200 */
#define USB_OTG_GUSBCFG_HNPCAP                   USB_OTG_GUSBCFG_HNPCAP_Msk                /*!< HNP-capable */
#define USB_OTG_GUSBCFG_TRDT_Pos                 (10U)
#define USB_OTG_GUSBCFG_TRDT_Msk                 (0xFUL << USB_OTG_GUSBCFG_TRDT_Pos)        /*!< 0x00003C00 */
#define USB_OTG_GUSBCFG_TRDT                     USB_OTG_GUSBCFG_TRDT_Msk                  /*!< USB turnaround time */
#define USB_OTG_GUSBCFG_TRDT_0                   (0x1UL << USB_OTG_GUSBCFG_TRDT_Pos)        /*!< 0x00000400 */
#define USB_OTG_GUSBCFG_TRDT_1                   (0x2UL << USB_OTG_GUSBCFG_TRDT_Pos)        /*!< 0x00000800 */
#define USB_OTG_GUSBCFG_TRDT_2                   (0x4UL << USB_OTG_GUSBCFG_TRDT_Pos)        /*!< 0x00001000 */
#define USB_OTG_GUSBCFG_TRDT_3                   (0x8UL << USB_OTG_GUSBCFG_TRDT_Pos)        /*!< 0x00002000 */
#define USB_OTG_GUSBCFG_PHYLPCS_Pos              (15U)
#define USB_OTG_GUSBCFG_PHYLPCS_Msk              (0x1UL << USB_OTG_GUSBCFG_PHYLPCS_Pos)     /*!< 0x00008000 */
#define USB_OTG_GUSBCFG_PHYLPCS                  USB_OTG_GUSBCFG_PHYLPCS_Msk               /*!< PHY Low-power clock select */
#define USB_OTG_GUSBCFG_ULPIFSLS_Pos             (17U)
#define USB_OTG_GUSBCFG_ULPIFSLS_Msk             (0x1UL << USB_OTG_GUSBCFG_ULPIFSLS_Pos)    /*!< 0x00020000 */
#define USB_OTG_GUSBCFG_ULPIFSLS                 USB_OTG_GUSBCFG_ULPIFSLS_Msk              /*!< ULPI FS/LS select */
#define USB_OTG_GUSBCFG_ULPIAR_Pos               (18U)
#define USB_OTG_GUSBCFG_ULPIAR_Msk               (0x1UL << USB_OTG_GUSBCFG_ULPIAR_Pos)      /*!< 0x00040000 */
#define USB_OTG_GUSBCFG_ULPIAR                   USB_OTG_GUSBCFG_ULPIAR_Msk                /*!< ULPI Auto-resume */
#define USB_OTG_GUSBCFG_ULPICSM_Pos              (19U)
#define USB_OTG_GUSBCFG_ULPICSM_Msk              (0x1UL << USB_OTG_GUSBCFG_ULPICSM_Pos)     /*!< 0x00080000 */
#define USB_OTG_GUSBCFG_ULPICSM                  USB_OTG_GUSBCFG_ULPICSM_Msk               /*!< ULPI Clock SuspendM */
#define USB_OTG_GUSBCFG_ULPIEVBUSD_Pos           (20U)
#define USB_OTG_GUSBCFG_ULPIEVBUSD_Msk           (0x1UL << USB_OTG_GUSBCFG_ULPIEVBUSD_Pos)  /*!< 0x00100000 */
#define USB_OTG_GUSBCFG_ULPIEVBUSD               USB_OTG_GUSBCFG_ULPIEVBUSD_Msk            /*!< ULPI External VBUS Drive */
#define USB_OTG_GUSBCFG_ULPIEVBUSI_Pos           (21U)
#define USB_OTG_GUSBCFG_ULPIEVBUSI_Msk           (0x1UL << USB_OTG_GUSBCFG_ULPIEVBUSI_Pos)  /*!< 0x00200000 */
#define USB_OTG_GUSBCFG_ULPIEVBUSI               USB_OTG_GUSBCFG_ULPIEVBUSI_Msk            /*!< ULPI external VBUS indicator */
#define USB_OTG_GUSBCFG_TSDPS_Pos                (22U)
#define USB_OTG_GUSBCFG_TSDPS_Msk                (0x1UL << USB_OTG_GUSBCFG_TSDPS_Pos)       /*!< 0x00400000 */
#define USB_OTG_GUSBCFG_TSDPS                    USB_OTG_GUSBCFG_TSDPS_Msk                 /*!< TermSel DLine pulsing selection */
#define USB_OTG_GUSBCFG_PCCI_Pos                 (23U)
#define USB_OTG_GUSBCFG_PCCI_Msk                 (0x1UL << USB_OTG_GUSBCFG_PCCI_Pos)        /*!< 0x00800000 */
#define USB_OTG_GUSBCFG_PCCI                     USB_OTG_GUSBCFG_PCCI_Msk                  /*!< Indicator complement */
#define USB_OTG_GUSBCFG_PTCI_Pos                 (24U)
#define USB_OTG_GUSBCFG_PTCI_Msk                 (0x1UL << USB_OTG_GUSBCFG_PTCI_Pos)        /*!< 0x01000000 */
#define USB_OTG_GUSBCFG_PTCI                     USB_OTG_GUSBCFG_PTCI_Msk                  /*!< Indicator pass through */
#define USB_OTG_GUSBCFG_ULPIIPD_Pos              (25U)
#define USB_OTG_GUSBCFG_ULPIIPD_Msk              (0x1UL << USB_OTG_GUSBCFG_ULPIIPD_Pos)     /*!< 0x02000000 */
#define USB_OTG_GUSBCFG_ULPIIPD                  USB_OTG_GUSBCFG_ULPIIPD_Msk               /*!< ULPI interface protect disable */
#define USB_OTG_GUSBCFG_FHMOD_Pos                (29U)
#define USB_OTG_GUSBCFG_FHMOD_Msk                (0x1UL << USB_OTG_GUSBCFG_FHMOD_Pos)       /*!< 0x20000000 */
#define USB_OTG_GUSBCFG_FHMOD                    USB_OTG_GUSBCFG_FHMOD_Msk                 /*!< Forced host mode */
#define USB_OTG_GUSBCFG_FDMOD_Pos                (30U)
#define USB_OTG_GUSBCFG_FDMOD_Msk                (0x1UL << USB_OTG_GUSBCFG_FDMOD_Pos)       /*!< 0x40000000 */
#define USB_OTG_GUSBCFG_FDMOD                    USB_OTG_GUSBCFG_FDMOD_Msk                 /*!< Forced peripheral mode */
#define USB_OTG_GUSBCFG_CTXPKT_Pos               (31U)
#define USB_OTG_GUSBCFG_CTXPKT_Msk               (0x1UL << USB_OTG_GUSBCFG_CTXPKT_Pos)      /*!< 0x80000000 */
#define USB_OTG_GUSBCFG_CTXPKT                   USB_OTG_GUSBCFG_CTXPKT_Msk                /*!< Corrupt Tx packet */

/********************  Bit definition for USB_OTG_GRSTCTL register  ********************/
#define USB_OTG_GRSTCTL_CSRST_Pos                (0U)
#define USB_OTG_GRSTCTL_CSRST_Msk                (0x1UL << USB_OTG_GRSTCTL_CSRST_Pos)       /*!< 0x00000001 */
#define USB_OTG_GRSTCTL_CSRST                    USB_OTG_GRSTCTL_CSRST_Msk                 /*!< Core soft reset */
#define USB_OTG_GRSTCTL_HSRST_Pos                (1U)
#define USB_OTG_GRSTCTL_HSRST_Msk                (0x1UL << USB_OTG_GRSTCTL_HSRST_Pos)       /*!< 0x00000002 */
#define USB_OTG_GRSTCTL_HSRST                    USB_OTG_GRSTCTL_HSRST_Msk                 /*!< HCLK soft reset */
#define USB_OTG_GRSTCTL_FCRST_Pos                (2U)
#define USB_OTG_GRSTCTL_FCRST_Msk                (0x1UL << USB_OTG_GRSTCTL_FCRST_Pos)       /*!< 0x00000004 */
#define USB_OTG_GRSTCTL_FCRST                    USB_OTG_GRSTCTL_FCRST_Msk                 /*!< Host frame counter reset */
#define USB_OTG_GRSTCTL_RXFFLSH_Pos              (4U)
#define USB_OTG_GRSTCTL_RXFFLSH_Msk              (0x1UL << USB_OTG_GRSTCTL_RXFFLSH_Pos)     /*!< 0x00000010 */
#define USB_OTG_GRSTCTL_RXFFLSH                  USB_OTG_GRSTCTL_RXFFLSH_Msk               /*!< RxFIFO flush */
#define USB_OTG_GRSTCTL_TXFFLSH_Pos              (5U)
#define USB_OTG_GRSTCTL_TXFFLSH_Msk              (0x1UL << USB_OTG_GRSTCTL_TXFFLSH_Pos)     /*!< 0x00000020 */
#define USB_OTG_GRSTCTL_TXFFLSH                  USB_OTG_GRSTCTL_TXFFLSH_Msk               /*!< TxFIFO flush */
#define USB_OTG_GRSTCTL_TXFNUM_Pos               (6U)
#define USB_OTG_GRSTCTL_TXFNUM_Msk               (0x1FUL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x000007C0 */
#define USB_OTG_GRSTCTL_TXFNUM                   USB_OTG_GRSTCTL_TXFNUM_Msk                /*!< TxFIFO number */
#define USB_OTG_GRSTCTL_TXFNUM_0                 (0x01UL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x00000040 */
#define USB_OTG_GRSTCTL_TXFNUM_1                 (0x02UL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x00000080 */
#define USB_OTG_GRSTCTL_TXFNUM_2                 (0x04UL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x00000100 */
#define USB_OTG_GRSTCTL_TXFNUM_3                 (0x08UL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x00000200 */
#define USB_OTG_GRSTCTL_TXFNUM_4                 (0x10UL << USB_OTG_GRSTCTL_TXFNUM_Pos)     /*!< 0x00000400 */
#define USB_OTG_GRSTCTL_CSRSTDONE_Pos            (29U)
#define USB_OTG_GRSTCTL_CSRSTDONE_Msk            (0x1UL << USB_OTG_GRSTCTL_CSRSTDONE_Pos)      /*!< 0x40000000 */
#define USB_OTG_GRSTCTL_CSRSTDONE                USB_OTG_GRSTCTL_CSRSTDONE_Msk                /*!< DMA request signal */
#define USB_OTG_GRSTCTL_DMAREQ_Pos               (30U)
#define USB_OTG_GRSTCTL_DMAREQ_Msk               (0x1UL << USB_OTG_GRSTCTL_DMAREQ_Pos)      /*!< 0x40000000 */
#define USB_OTG_GRSTCTL_DMAREQ                   USB_OTG_GRSTCTL_DMAREQ_Msk                /*!< DMA request signal */
#define USB_OTG_GRSTCTL_AHBIDL_Pos               (31U)
#define USB_OTG_GRSTCTL_AHBIDL_Msk               (0x1UL << USB_OTG_GRSTCTL_AHBIDL_Pos)      /*!< 0x80000000 */
#define USB_OTG_GRSTCTL_AHBIDL                   USB_OTG_GRSTCTL_AHBIDL_Msk                /*!< AHB master idle */

/********************  Bit definition for USB_OTG_DIEPMSK register  ********************/
#define USB_OTG_DIEPMSK_XFRCM_Pos                (0U)
#define USB_OTG_DIEPMSK_XFRCM_Msk                (0x1UL << USB_OTG_DIEPMSK_XFRCM_Pos)       /*!< 0x00000001 */
#define USB_OTG_DIEPMSK_XFRCM                    USB_OTG_DIEPMSK_XFRCM_Msk                 /*!< Transfer completed interrupt mask */
#define USB_OTG_DIEPMSK_EPDM_Pos                 (1U)
#define USB_OTG_DIEPMSK_EPDM_Msk                 (0x1UL << USB_OTG_DIEPMSK_EPDM_Pos)        /*!< 0x00000002 */
#define USB_OTG_DIEPMSK_EPDM                     USB_OTG_DIEPMSK_EPDM_Msk                  /*!< Endpoint disabled interrupt mask */
#define USB_OTG_DIEPMSK_TOM_Pos                  (3U)
#define USB_OTG_DIEPMSK_TOM_Msk                  (0x1UL << USB_OTG_DIEPMSK_TOM_Pos)         /*!< 0x00000008 */
#define USB_OTG_DIEPMSK_TOM                      USB_OTG_DIEPMSK_TOM_Msk                   /*!< Timeout condition mask (nonisochronous endpoints) */
#define USB_OTG_DIEPMSK_ITTXFEMSK_Pos            (4U)
#define USB_OTG_DIEPMSK_ITTXFEMSK_Msk            (0x1UL << USB_OTG_DIEPMSK_ITTXFEMSK_Pos)   /*!< 0x00000010 */
#define USB_OTG_DIEPMSK_ITTXFEMSK                USB_OTG_DIEPMSK_ITTXFEMSK_Msk             /*!< IN token received when TxFIFO empty mask */
#define USB_OTG_DIEPMSK_INEPNMM_Pos              (5U)
#define USB_OTG_DIEPMSK_INEPNMM_Msk              (0x1UL << USB_OTG_DIEPMSK_INEPNMM_Pos)     /*!< 0x00000020 */
#define USB_OTG_DIEPMSK_INEPNMM                  USB_OTG_DIEPMSK_INEPNMM_Msk               /*!< IN token received with EP mismatch mask */
#define USB_OTG_DIEPMSK_INEPNEM_Pos              (6U)
#define USB_OTG_DIEPMSK_INEPNEM_Msk              (0x1UL << USB_OTG_DIEPMSK_INEPNEM_Pos)     /*!< 0x00000040 */
#define USB_OTG_DIEPMSK_INEPNEM                  USB_OTG_DIEPMSK_INEPNEM_Msk               /*!< IN endpoint NAK effective mask */
#define USB_OTG_DIEPMSK_TXFURM_Pos               (8U)
#define USB_OTG_DIEPMSK_TXFURM_Msk               (0x1UL << USB_OTG_DIEPMSK_TXFURM_Pos)      /*!< 0x00000100 */
#define USB_OTG_DIEPMSK_TXFURM                   USB_OTG_DIEPMSK_TXFURM_Msk                /*!< FIFO underrun mask */
#define USB_OTG_DIEPMSK_BIM_Pos                  (9U)
#define USB_OTG_DIEPMSK_BIM_Msk                  (0x1UL << USB_OTG_DIEPMSK_BIM_Pos)         /*!< 0x00000200 */
#define USB_OTG_DIEPMSK_BIM                      USB_OTG_DIEPMSK_BIM_Msk                   /*!< BNA interrupt mask */

/********************  Bit definition for USB_OTG_HPTXSTS register  ********************/
#define USB_OTG_HPTXSTS_PTXFSAVL_Pos             (0U)
#define USB_OTG_HPTXSTS_PTXFSAVL_Msk             (0xFFFFUL << USB_OTG_HPTXSTS_PTXFSAVL_Pos) /*!< 0x0000FFFF */
#define USB_OTG_HPTXSTS_PTXFSAVL                 USB_OTG_HPTXSTS_PTXFSAVL_Msk              /*!< Periodic transmit data FIFO space available */
#define USB_OTG_HPTXSTS_PTXQSAV_Pos              (16U)
#define USB_OTG_HPTXSTS_PTXQSAV_Msk              (0xFFUL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00FF0000 */
#define USB_OTG_HPTXSTS_PTXQSAV                  USB_OTG_HPTXSTS_PTXQSAV_Msk               /*!< Periodic transmit request queue space available */
#define USB_OTG_HPTXSTS_PTXQSAV_0                (0x01UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00010000 */
#define USB_OTG_HPTXSTS_PTXQSAV_1                (0x02UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00020000 */
#define USB_OTG_HPTXSTS_PTXQSAV_2                (0x04UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00040000 */
#define USB_OTG_HPTXSTS_PTXQSAV_3                (0x08UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00080000 */
#define USB_OTG_HPTXSTS_PTXQSAV_4                (0x10UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00100000 */
#define USB_OTG_HPTXSTS_PTXQSAV_5                (0x20UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00200000 */
#define USB_OTG_HPTXSTS_PTXQSAV_6                (0x40UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00400000 */
#define USB_OTG_HPTXSTS_PTXQSAV_7                (0x80UL << USB_OTG_HPTXSTS_PTXQSAV_Pos)    /*!< 0x00800000 */

#define USB_OTG_HPTXSTS_PTXQTOP_Pos              (24U)
#define USB_OTG_HPTXSTS_PTXQTOP_Msk              (0xFFUL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0xFF000000 */
#define USB_OTG_HPTXSTS_PTXQTOP                  USB_OTG_HPTXSTS_PTXQTOP_Msk               /*!< Top of the periodic transmit request queue */
#define USB_OTG_HPTXSTS_PTXQTOP_0                (0x01UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x01000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_1                (0x02UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x02000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_2                (0x04UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x04000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_3                (0x08UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x08000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_4                (0x10UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x10000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_5                (0x20UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x20000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_6                (0x40UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x40000000 */
#define USB_OTG_HPTXSTS_PTXQTOP_7                (0x80UL << USB_OTG_HPTXSTS_PTXQTOP_Pos)    /*!< 0x80000000 */

/********************  Bit definition for USB_OTG_HAINT register  ********************/
#define USB_OTG_HAINT_HAINT_Pos                  (0U)
#define USB_OTG_HAINT_HAINT_Msk                  (0xFFFFUL << USB_OTG_HAINT_HAINT_Pos)      /*!< 0x0000FFFF */
#define USB_OTG_HAINT_HAINT                      USB_OTG_HAINT_HAINT_Msk                   /*!< Channel interrupts */

/********************  Bit definition for USB_OTG_DOEPMSK register  ********************/
#define USB_OTG_DOEPMSK_XFRCM_Pos                (0U)
#define USB_OTG_DOEPMSK_XFRCM_Msk                (0x1UL << USB_OTG_DOEPMSK_XFRCM_Pos)       /*!< 0x00000001 */
#define USB_OTG_DOEPMSK_XFRCM                    USB_OTG_DOEPMSK_XFRCM_Msk                 /*!< Transfer completed interrupt mask */
#define USB_OTG_DOEPMSK_EPDM_Pos                 (1U)
#define USB_OTG_DOEPMSK_EPDM_Msk                 (0x1UL << USB_OTG_DOEPMSK_EPDM_Pos)        /*!< 0x00000002 */
#define USB_OTG_DOEPMSK_EPDM                     USB_OTG_DOEPMSK_EPDM_Msk                  /*!< Endpoint disabled interrupt mask */
#define USB_OTG_DOEPMSK_STUPM_Pos                (3U)
#define USB_OTG_DOEPMSK_STUPM_Msk                (0x1UL << USB_OTG_DOEPMSK_STUPM_Pos)       /*!< 0x00000008 */
#define USB_OTG_DOEPMSK_STUPM                    USB_OTG_DOEPMSK_STUPM_Msk                 /*!< SETUP phase done mask */
#define USB_OTG_DOEPMSK_OTEPDM_Pos               (4U)
#define USB_OTG_DOEPMSK_OTEPDM_Msk               (0x1UL << USB_OTG_DOEPMSK_OTEPDM_Pos)      /*!< 0x00000010 */
#define USB_OTG_DOEPMSK_OTEPDM                   USB_OTG_DOEPMSK_OTEPDM_Msk                /*!< OUT token received when endpoint disabled mask */
#define USB_OTG_DOEPMSK_B2BSTUP_Pos              (6U)
#define USB_OTG_DOEPMSK_B2BSTUP_Msk              (0x1UL << USB_OTG_DOEPMSK_B2BSTUP_Pos)     /*!< 0x00000040 */
#define USB_OTG_DOEPMSK_B2BSTUP                  USB_OTG_DOEPMSK_B2BSTUP_Msk               /*!< Back-to-back SETUP packets received mask */
#define USB_OTG_DOEPMSK_OPEM_Pos                 (8U)
#define USB_OTG_DOEPMSK_OPEM_Msk                 (0x1UL << USB_OTG_DOEPMSK_OPEM_Pos)        /*!< 0x00000100 */
#define USB_OTG_DOEPMSK_OPEM                     USB_OTG_DOEPMSK_OPEM_Msk                  /*!< OUT packet error mask */
#define USB_OTG_DOEPMSK_BOIM_Pos                 (9U)
#define USB_OTG_DOEPMSK_BOIM_Msk                 (0x1UL << USB_OTG_DOEPMSK_BOIM_Pos)        /*!< 0x00000200 */
#define USB_OTG_DOEPMSK_BOIM                     USB_OTG_DOEPMSK_BOIM_Msk                  /*!< BNA interrupt mask */

/********************  Bit definition for USB_OTG_GINTSTS register  ********************/
#define USB_OTG_GINTSTS_CMOD_Pos                 (0U)
#define USB_OTG_GINTSTS_CMOD_Msk                 (0x1UL << USB_OTG_GINTSTS_CMOD_Pos)              /*!< 0x00000001 */
#define USB_OTG_GINTSTS_CMOD                     USB_OTG_GINTSTS_CMOD_Msk                        /*!< Current mode of operation */
#define USB_OTG_GINTSTS_MMIS_Pos                 (1U)
#define USB_OTG_GINTSTS_MMIS_Msk                 (0x1UL << USB_OTG_GINTSTS_MMIS_Pos)              /*!< 0x00000002 */
#define USB_OTG_GINTSTS_MMIS                     USB_OTG_GINTSTS_MMIS_Msk                        /*!< Mode mismatch interrupt */
#define USB_OTG_GINTSTS_OTGINT_Pos               (2U)
#define USB_OTG_GINTSTS_OTGINT_Msk               (0x1UL << USB_OTG_GINTSTS_OTGINT_Pos)            /*!< 0x00000004 */
#define USB_OTG_GINTSTS_OTGINT                   USB_OTG_GINTSTS_OTGINT_Msk                      /*!< OTG interrupt */
#define USB_OTG_GINTSTS_SOF_Pos                  (3U)
#define USB_OTG_GINTSTS_SOF_Msk                  (0x1UL << USB_OTG_GINTSTS_SOF_Pos)               /*!< 0x00000008 */
#define USB_OTG_GINTSTS_SOF                      USB_OTG_GINTSTS_SOF_Msk                         /*!< Start of frame */
#define USB_OTG_GINTSTS_RXFLVL_Pos               (4U)
#define USB_OTG_GINTSTS_RXFLVL_Msk               (0x1UL << USB_OTG_GINTSTS_RXFLVL_Pos)            /*!< 0x00000010 */
#define USB_OTG_GINTSTS_RXFLVL                   USB_OTG_GINTSTS_RXFLVL_Msk                      /*!< RxFIFO nonempty */
#define USB_OTG_GINTSTS_NPTXFE_Pos               (5U)
#define USB_OTG_GINTSTS_NPTXFE_Msk               (0x1UL << USB_OTG_GINTSTS_NPTXFE_Pos)            /*!< 0x00000020 */
#define USB_OTG_GINTSTS_NPTXFE                   USB_OTG_GINTSTS_NPTXFE_Msk                      /*!< Nonperiodic TxFIFO empty */
#define USB_OTG_GINTSTS_GINAKEFF_Pos             (6U)
#define USB_OTG_GINTSTS_GINAKEFF_Msk             (0x1UL << USB_OTG_GINTSTS_GINAKEFF_Pos)          /*!< 0x00000040 */
#define USB_OTG_GINTSTS_GINAKEFF                 USB_OTG_GINTSTS_GINAKEFF_Msk                    /*!< Global IN nonperiodic NAK effective */
#define USB_OTG_GINTSTS_BOUTNAKEFF_Pos           (7U)
#define USB_OTG_GINTSTS_BOUTNAKEFF_Msk           (0x1UL << USB_OTG_GINTSTS_BOUTNAKEFF_Pos)        /*!< 0x00000080 */
#define USB_OTG_GINTSTS_BOUTNAKEFF               USB_OTG_GINTSTS_BOUTNAKEFF_Msk                  /*!< Global OUT NAK effective */
#define USB_OTG_GINTSTS_ESUSP_Pos                (10U)
#define USB_OTG_GINTSTS_ESUSP_Msk                (0x1UL << USB_OTG_GINTSTS_ESUSP_Pos)             /*!< 0x00000400 */
#define USB_OTG_GINTSTS_ESUSP                    USB_OTG_GINTSTS_ESUSP_Msk                       /*!< Early suspend */
#define USB_OTG_GINTSTS_USBSUSP_Pos              (11U)
#define USB_OTG_GINTSTS_USBSUSP_Msk              (0x1UL << USB_OTG_GINTSTS_USBSUSP_Pos)           /*!< 0x00000800 */
#define USB_OTG_GINTSTS_USBSUSP                  USB_OTG_GINTSTS_USBSUSP_Msk                     /*!< USB suspend */
#define USB_OTG_GINTSTS_USBRST_Pos               (12U)
#define USB_OTG_GINTSTS_USBRST_Msk               (0x1UL << USB_OTG_GINTSTS_USBRST_Pos)            /*!< 0x00001000 */
#define USB_OTG_GINTSTS_USBRST                   USB_OTG_GINTSTS_USBRST_Msk                      /*!< USB reset */
#define USB_OTG_GINTSTS_ENUMDNE_Pos              (13U)
#define USB_OTG_GINTSTS_ENUMDNE_Msk              (0x1UL << USB_OTG_GINTSTS_ENUMDNE_Pos)           /*!< 0x00002000 */
#define USB_OTG_GINTSTS_ENUMDNE                  USB_OTG_GINTSTS_ENUMDNE_Msk                     /*!< Enumeration done */
#define USB_OTG_GINTSTS_ISOODRP_Pos              (14U)
#define USB_OTG_GINTSTS_ISOODRP_Msk              (0x1UL << USB_OTG_GINTSTS_ISOODRP_Pos)           /*!< 0x00004000 */
#define USB_OTG_GINTSTS_ISOODRP                  USB_OTG_GINTSTS_ISOODRP_Msk                     /*!< Isochronous OUT packet dropped interrupt */
#define USB_OTG_GINTSTS_EOPF_Pos                 (15U)
#define USB_OTG_GINTSTS_EOPF_Msk                 (0x1UL << USB_OTG_GINTSTS_EOPF_Pos)              /*!< 0x00008000 */
#define USB_OTG_GINTSTS_EOPF                     USB_OTG_GINTSTS_EOPF_Msk                        /*!< End of periodic frame interrupt */
#define USB_OTG_GINTSTS_IEPINT_Pos               (18U)
#define USB_OTG_GINTSTS_IEPINT_Msk               (0x1UL << USB_OTG_GINTSTS_IEPINT_Pos)            /*!< 0x00040000 */
#define USB_OTG_GINTSTS_IEPINT                   USB_OTG_GINTSTS_IEPINT_Msk                      /*!< IN endpoint interrupt */
#define USB_OTG_GINTSTS_OEPINT_Pos               (19U)
#define USB_OTG_GINTSTS_OEPINT_Msk               (0x1UL << USB_OTG_GINTSTS_OEPINT_Pos)            /*!< 0x00080000 */
#define USB_OTG_GINTSTS_OEPINT                   USB_OTG_GINTSTS_OEPINT_Msk                      /*!< OUT endpoint interrupt */
#define USB_OTG_GINTSTS_IISOIXFR_Pos             (20U)
#define USB_OTG_GINTSTS_IISOIXFR_Msk             (0x1UL << USB_OTG_GINTSTS_IISOIXFR_Pos)          /*!< 0x00100000 */
#define USB_OTG_GINTSTS_IISOIXFR                 USB_OTG_GINTSTS_IISOIXFR_Msk                    /*!< Incomplete isochronous IN transfer */
#define USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Pos    (21U)
#define USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Msk    (0x1UL << USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Pos) /*!< 0x00200000 */
#define USB_OTG_GINTSTS_PXFR_INCOMPISOOUT        USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Msk           /*!< Incomplete periodic transfer */
#define USB_OTG_GINTSTS_DATAFSUSP_Pos            (22U)
#define USB_OTG_GINTSTS_DATAFSUSP_Msk            (0x1UL << USB_OTG_GINTSTS_DATAFSUSP_Pos)         /*!< 0x00400000 */
#define USB_OTG_GINTSTS_DATAFSUSP                USB_OTG_GINTSTS_DATAFSUSP_Msk                   /*!< Data fetch suspended */
#define USB_OTG_GINTSTS_HPRTINT_Pos              (24U)
#define USB_OTG_GINTSTS_HPRTINT_Msk              (0x1UL << USB_OTG_GINTSTS_HPRTINT_Pos)           /*!< 0x01000000 */
#define USB_OTG_GINTSTS_HPRTINT                  USB_OTG_GINTSTS_HPRTINT_Msk                     /*!< Host port interrupt */
#define USB_OTG_GINTSTS_HCINT_Pos                (25U)
#define USB_OTG_GINTSTS_HCINT_Msk                (0x1UL << USB_OTG_GINTSTS_HCINT_Pos)             /*!< 0x02000000 */
#define USB_OTG_GINTSTS_HCINT                    USB_OTG_GINTSTS_HCINT_Msk                       /*!< Host channels interrupt */
#define USB_OTG_GINTSTS_PTXFE_Pos                (26U)
#define USB_OTG_GINTSTS_PTXFE_Msk                (0x1UL << USB_OTG_GINTSTS_PTXFE_Pos)             /*!< 0x04000000 */
#define USB_OTG_GINTSTS_PTXFE                    USB_OTG_GINTSTS_PTXFE_Msk                       /*!< Periodic TxFIFO empty */
#define USB_OTG_GINTSTS_LPMINT_Pos               (27U)
#define USB_OTG_GINTSTS_LPMINT_Msk               (0x1UL << USB_OTG_GINTSTS_LPMINT_Pos)            /*!< 0x08000000 */
#define USB_OTG_GINTSTS_LPMINT                   USB_OTG_GINTSTS_LPMINT_Msk                      /*!< LPM interrupt */
#define USB_OTG_GINTSTS_CIDSCHG_Pos              (28U)
#define USB_OTG_GINTSTS_CIDSCHG_Msk              (0x1UL << USB_OTG_GINTSTS_CIDSCHG_Pos)           /*!< 0x10000000 */
#define USB_OTG_GINTSTS_CIDSCHG                  USB_OTG_GINTSTS_CIDSCHG_Msk                     /*!< Connector ID status change */
#define USB_OTG_GINTSTS_DISCINT_Pos              (29U)
#define USB_OTG_GINTSTS_DISCINT_Msk              (0x1UL << USB_OTG_GINTSTS_DISCINT_Pos)           /*!< 0x20000000 */
#define USB_OTG_GINTSTS_DISCINT                  USB_OTG_GINTSTS_DISCINT_Msk                     /*!< Disconnect detected interrupt */
#define USB_OTG_GINTSTS_SRQINT_Pos               (30U)
#define USB_OTG_GINTSTS_SRQINT_Msk               (0x1UL << USB_OTG_GINTSTS_SRQINT_Pos)            /*!< 0x40000000 */
#define USB_OTG_GINTSTS_SRQINT                   USB_OTG_GINTSTS_SRQINT_Msk                      /*!< Session request/new session detected interrupt */
#define USB_OTG_GINTSTS_WKUINT_Pos               (31U)
#define USB_OTG_GINTSTS_WKUINT_Msk               (0x1UL << USB_OTG_GINTSTS_WKUINT_Pos)            /*!< 0x80000000 */
#define USB_OTG_GINTSTS_WKUINT                   USB_OTG_GINTSTS_WKUINT_Msk                      /*!< Resume/remote wakeup detected interrupt */

/********************  Bit definition for USB_OTG_GINTMSK register  ********************/
#define USB_OTG_GINTMSK_MMISM_Pos                (1U)
#define USB_OTG_GINTMSK_MMISM_Msk                (0x1UL << USB_OTG_GINTMSK_MMISM_Pos)           /*!< 0x00000002 */
#define USB_OTG_GINTMSK_MMISM                    USB_OTG_GINTMSK_MMISM_Msk                     /*!< Mode mismatch interrupt mask */
#define USB_OTG_GINTMSK_OTGINT_Pos               (2U)
#define USB_OTG_GINTMSK_OTGINT_Msk               (0x1UL << USB_OTG_GINTMSK_OTGINT_Pos)          /*!< 0x00000004 */
#define USB_OTG_GINTMSK_OTGINT                   USB_OTG_GINTMSK_OTGINT_Msk                    /*!< OTG interrupt mask */
#define USB_OTG_GINTMSK_SOFM_Pos                 (3U)
#define USB_OTG_GINTMSK_SOFM_Msk                 (0x1UL << USB_OTG_GINTMSK_SOFM_Pos)            /*!< 0x00000008 */
#define USB_OTG_GINTMSK_SOFM                     USB_OTG_GINTMSK_SOFM_Msk                      /*!< Start of frame mask */
#define USB_OTG_GINTMSK_RXFLVLM_Pos              (4U)
#define USB_OTG_GINTMSK_RXFLVLM_Msk              (0x1UL << USB_OTG_GINTMSK_RXFLVLM_Pos)         /*!< 0x00000010 */
#define USB_OTG_GINTMSK_RXFLVLM                  USB_OTG_GINTMSK_RXFLVLM_Msk                   /*!< Receive FIFO nonempty mask */
#define USB_OTG_GINTMSK_NPTXFEM_Pos              (5U)
#define USB_OTG_GINTMSK_NPTXFEM_Msk              (0x1UL << USB_OTG_GINTMSK_NPTXFEM_Pos)         /*!< 0x00000020 */
#define USB_OTG_GINTMSK_NPTXFEM                  USB_OTG_GINTMSK_NPTXFEM_Msk                   /*!< Nonperiodic TxFIFO empty mask */
#define USB_OTG_GINTMSK_GINAKEFFM_Pos            (6U)
#define USB_OTG_GINTMSK_GINAKEFFM_Msk            (0x1UL << USB_OTG_GINTMSK_GINAKEFFM_Pos)       /*!< 0x00000040 */
#define USB_OTG_GINTMSK_GINAKEFFM                USB_OTG_GINTMSK_GINAKEFFM_Msk                 /*!< Global nonperiodic IN NAK effective mask */
#define USB_OTG_GINTMSK_GONAKEFFM_Pos            (7U)
#define USB_OTG_GINTMSK_GONAKEFFM_Msk            (0x1UL << USB_OTG_GINTMSK_GONAKEFFM_Pos)       /*!< 0x00000080 */
#define USB_OTG_GINTMSK_GONAKEFFM                USB_OTG_GINTMSK_GONAKEFFM_Msk                 /*!< Global OUT NAK effective mask */
#define USB_OTG_GINTMSK_ESUSPM_Pos               (10U)
#define USB_OTG_GINTMSK_ESUSPM_Msk               (0x1UL << USB_OTG_GINTMSK_ESUSPM_Pos)          /*!< 0x00000400 */
#define USB_OTG_GINTMSK_ESUSPM                   USB_OTG_GINTMSK_ESUSPM_Msk                    /*!< Early suspend mask */
#define USB_OTG_GINTMSK_USBSUSPM_Pos             (11U)
#define USB_OTG_GINTMSK_USBSUSPM_Msk             (0x1UL << USB_OTG_GINTMSK_USBSUSPM_Pos)        /*!< 0x00000800 */
#define USB_OTG_GINTMSK_USBSUSPM                 USB_OTG_GINTMSK_USBSUSPM_Msk                  /*!< USB suspend mask */
#define USB_OTG_GINTMSK_USBRST_Pos               (12U)
#define USB_OTG_GINTMSK_USBRST_Msk               (0x1UL << USB_OTG_GINTMSK_USBRST_Pos)          /*!< 0x00001000 */
#define USB_OTG_GINTMSK_USBRST                   USB_OTG_GINTMSK_USBRST_Msk                    /*!< USB reset mask */
#define USB_OTG_GINTMSK_ENUMDNEM_Pos             (13U)
#define USB_OTG_GINTMSK_ENUMDNEM_Msk             (0x1UL << USB_OTG_GINTMSK_ENUMDNEM_Pos)        /*!< 0x00002000 */
#define USB_OTG_GINTMSK_ENUMDNEM                 USB_OTG_GINTMSK_ENUMDNEM_Msk                  /*!< Enumeration done mask */
#define USB_OTG_GINTMSK_ISOODRPM_Pos             (14U)
#define USB_OTG_GINTMSK_ISOODRPM_Msk             (0x1UL << USB_OTG_GINTMSK_ISOODRPM_Pos)        /*!< 0x00004000 */
#define USB_OTG_GINTMSK_ISOODRPM                 USB_OTG_GINTMSK_ISOODRPM_Msk                  /*!< Isochronous OUT packet dropped interrupt mask */
#define USB_OTG_GINTMSK_EOPFM_Pos                (15U)
#define USB_OTG_GINTMSK_EOPFM_Msk                (0x1UL << USB_OTG_GINTMSK_EOPFM_Pos)           /*!< 0x00008000 */
#define USB_OTG_GINTMSK_EOPFM                    USB_OTG_GINTMSK_EOPFM_Msk                     /*!< End of periodic frame interrupt mask */
#define USB_OTG_GINTMSK_EPMISM_Pos               (17U)
#define USB_OTG_GINTMSK_EPMISM_Msk               (0x1UL << USB_OTG_GINTMSK_EPMISM_Pos)          /*!< 0x00020000 */
#define USB_OTG_GINTMSK_EPMISM                   USB_OTG_GINTMSK_EPMISM_Msk                    /*!< Endpoint mismatch interrupt mask */
#define USB_OTG_GINTMSK_IEPINT_Pos               (18U)
#define USB_OTG_GINTMSK_IEPINT_Msk               (0x1UL << USB_OTG_GINTMSK_IEPINT_Pos)          /*!< 0x00040000 */
#define USB_OTG_GINTMSK_IEPINT                   USB_OTG_GINTMSK_IEPINT_Msk                    /*!< IN endpoints interrupt mask */
#define USB_OTG_GINTMSK_OEPINT_Pos               (19U)
#define USB_OTG_GINTMSK_OEPINT_Msk               (0x1UL << USB_OTG_GINTMSK_OEPINT_Pos)          /*!< 0x00080000 */
#define USB_OTG_GINTMSK_OEPINT                   USB_OTG_GINTMSK_OEPINT_Msk                    /*!< OUT endpoints interrupt mask */
#define USB_OTG_GINTMSK_IISOIXFRM_Pos            (20U)
#define USB_OTG_GINTMSK_IISOIXFRM_Msk            (0x1UL << USB_OTG_GINTMSK_IISOIXFRM_Pos)       /*!< 0x00100000 */
#define USB_OTG_GINTMSK_IISOIXFRM                USB_OTG_GINTMSK_IISOIXFRM_Msk                 /*!< Incomplete isochronous IN transfer mask */
#define USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Pos      (21U)
#define USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Msk      (0x1UL << USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Pos) /*!< 0x00200000 */
#define USB_OTG_GINTMSK_PXFRM_IISOOXFRM          USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Msk           /*!< Incomplete periodic transfer mask */
#define USB_OTG_GINTMSK_FSUSPM_Pos               (22U)
#define USB_OTG_GINTMSK_FSUSPM_Msk               (0x1UL << USB_OTG_GINTMSK_FSUSPM_Pos)          /*!< 0x00400000 */
#define USB_OTG_GINTMSK_FSUSPM                   USB_OTG_GINTMSK_FSUSPM_Msk                    /*!< Data fetch suspended mask */
#define USB_OTG_GINTMSK_PRTIM_Pos                (24U)
#define USB_OTG_GINTMSK_PRTIM_Msk                (0x1UL << USB_OTG_GINTMSK_PRTIM_Pos)           /*!< 0x01000000 */
#define USB_OTG_GINTMSK_PRTIM                    USB_OTG_GINTMSK_PRTIM_Msk                     /*!< Host port interrupt mask */
#define USB_OTG_GINTMSK_HCIM_Pos                 (25U)
#define USB_OTG_GINTMSK_HCIM_Msk                 (0x1UL << USB_OTG_GINTMSK_HCIM_Pos)            /*!< 0x02000000 */
#define USB_OTG_GINTMSK_HCIM                     USB_OTG_GINTMSK_HCIM_Msk                      /*!< Host channels interrupt mask */
#define USB_OTG_GINTMSK_PTXFEM_Pos               (26U)
#define USB_OTG_GINTMSK_PTXFEM_Msk               (0x1UL << USB_OTG_GINTMSK_PTXFEM_Pos)          /*!< 0x04000000 */
#define USB_OTG_GINTMSK_PTXFEM                   USB_OTG_GINTMSK_PTXFEM_Msk                    /*!< Periodic TxFIFO empty mask */
#define USB_OTG_GINTMSK_LPMINTM_Pos              (27U)
#define USB_OTG_GINTMSK_LPMINTM_Msk              (0x1UL << USB_OTG_GINTMSK_LPMINTM_Pos)         /*!< 0x08000000 */
#define USB_OTG_GINTMSK_LPMINTM                  USB_OTG_GINTMSK_LPMINTM_Msk                   /*!< LPM interrupt Mask */
#define USB_OTG_GINTMSK_CIDSCHGM_Pos             (28U)
#define USB_OTG_GINTMSK_CIDSCHGM_Msk             (0x1UL << USB_OTG_GINTMSK_CIDSCHGM_Pos)        /*!< 0x10000000 */
#define USB_OTG_GINTMSK_CIDSCHGM                 USB_OTG_GINTMSK_CIDSCHGM_Msk                  /*!< Connector ID status change mask */
#define USB_OTG_GINTMSK_DISCINT_Pos              (29U)
#define USB_OTG_GINTMSK_DISCINT_Msk              (0x1UL << USB_OTG_GINTMSK_DISCINT_Pos)         /*!< 0x20000000 */
#define USB_OTG_GINTMSK_DISCINT                  USB_OTG_GINTMSK_DISCINT_Msk                   /*!< Disconnect detected interrupt mask */
#define USB_OTG_GINTMSK_SRQIM_Pos                (30U)
#define USB_OTG_GINTMSK_SRQIM_Msk                (0x1UL << USB_OTG_GINTMSK_SRQIM_Pos)           /*!< 0x40000000 */
#define USB_OTG_GINTMSK_SRQIM                    USB_OTG_GINTMSK_SRQIM_Msk                     /*!< Session request/new session detected interrupt mask */
#define USB_OTG_GINTMSK_WUIM_Pos                 (31U)
#define USB_OTG_GINTMSK_WUIM_Msk                 (0x1UL << USB_OTG_GINTMSK_WUIM_Pos)            /*!< 0x80000000 */
#define USB_OTG_GINTMSK_WUIM                     USB_OTG_GINTMSK_WUIM_Msk                      /*!< Resume/remote wakeup detected interrupt mask */

/********************  Bit definition for USB_OTG_DAINT register  ********************/
#define USB_OTG_DAINT_IEPINT_Pos                 (0U)
#define USB_OTG_DAINT_IEPINT_Msk                 (0xFFFFUL << USB_OTG_DAINT_IEPINT_Pos)         /*!< 0x0000FFFF */
#define USB_OTG_DAINT_IEPINT                     USB_OTG_DAINT_IEPINT_Msk                      /*!< IN endpoint interrupt bits */
#define USB_OTG_DAINT_OEPINT_Pos                 (16U)
#define USB_OTG_DAINT_OEPINT_Msk                 (0xFFFFUL << USB_OTG_DAINT_OEPINT_Pos)         /*!< 0xFFFF0000 */
#define USB_OTG_DAINT_OEPINT                     USB_OTG_DAINT_OEPINT_Msk                      /*!< OUT endpoint interrupt bits */

/********************  Bit definition for USB_OTG_HAINTMSK register  ********************/
#define USB_OTG_HAINTMSK_HAINTM_Pos              (0U)
#define USB_OTG_HAINTMSK_HAINTM_Msk              (0xFFFFUL << USB_OTG_HAINTMSK_HAINTM_Pos)      /*!< 0x0000FFFF */
#define USB_OTG_HAINTMSK_HAINTM                  USB_OTG_HAINTMSK_HAINTM_Msk                   /*!< Channel interrupt mask */

/********************  Bit definition for USB_OTG_GRXSTSP register  ********************/
#define USB_OTG_GRXSTSP_EPNUM_Pos                (0U)
#define USB_OTG_GRXSTSP_EPNUM_Msk                (0xFUL << USB_OTG_GRXSTSP_EPNUM_Pos)           /*!< 0x0000000F */
#define USB_OTG_GRXSTSP_EPNUM                    USB_OTG_GRXSTSP_EPNUM_Msk                     /*!< IN EP interrupt mask bits */
#define USB_OTG_GRXSTSP_BCNT_Pos                 (4U)
#define USB_OTG_GRXSTSP_BCNT_Msk                 (0x7FFUL << USB_OTG_GRXSTSP_BCNT_Pos)          /*!< 0x00007FF0 */
#define USB_OTG_GRXSTSP_BCNT                     USB_OTG_GRXSTSP_BCNT_Msk                      /*!< OUT EP interrupt mask bits */
#define USB_OTG_GRXSTSP_DPID_Pos                 (15U)
#define USB_OTG_GRXSTSP_DPID_Msk                 (0x3UL << USB_OTG_GRXSTSP_DPID_Pos)            /*!< 0x00018000 */
#define USB_OTG_GRXSTSP_DPID                     USB_OTG_GRXSTSP_DPID_Msk                      /*!< OUT EP interrupt mask bits */
#define USB_OTG_GRXSTSP_PKTSTS_Pos               (17U)
#define USB_OTG_GRXSTSP_PKTSTS_Msk               (0xFUL << USB_OTG_GRXSTSP_PKTSTS_Pos)          /*!< 0x001E0000 */
#define USB_OTG_GRXSTSP_PKTSTS                   USB_OTG_GRXSTSP_PKTSTS_Msk                    /*!< OUT EP interrupt mask bits */

/********************  Bit definition for USB_OTG_DAINTMSK register  ********************/
#define USB_OTG_DAINTMSK_IEPM_Pos                (0U)
#define USB_OTG_DAINTMSK_IEPM_Msk                (0xFFFFUL << USB_OTG_DAINTMSK_IEPM_Pos)        /*!< 0x0000FFFF */
#define USB_OTG_DAINTMSK_IEPM                    USB_OTG_DAINTMSK_IEPM_Msk                     /*!< IN EP interrupt mask bits */
#define USB_OTG_DAINTMSK_OEPM_Pos                (16U)
#define USB_OTG_DAINTMSK_OEPM_Msk                (0xFFFFUL << USB_OTG_DAINTMSK_OEPM_Pos)        /*!< 0xFFFF0000 */
#define USB_OTG_DAINTMSK_OEPM                    USB_OTG_DAINTMSK_OEPM_Msk                     /*!< OUT EP interrupt mask bits */

/********************  Bit definition for OTG register  ********************/
#define USB_OTG_CHNUM_Pos                        (0U)
#define USB_OTG_CHNUM_Msk                        (0xFUL << USB_OTG_CHNUM_Pos)                  /*!< 0x0000000F */
#define USB_OTG_CHNUM                            USB_OTG_CHNUM_Msk                            /*!< Channel number */
#define USB_OTG_CHNUM_0                          (0x1UL << USB_OTG_CHNUM_Pos)                  /*!< 0x00000001 */
#define USB_OTG_CHNUM_1                          (0x2UL << USB_OTG_CHNUM_Pos)                  /*!< 0x00000002 */
#define USB_OTG_CHNUM_2                          (0x4UL << USB_OTG_CHNUM_Pos)                  /*!< 0x00000004 */
#define USB_OTG_CHNUM_3                          (0x8UL << USB_OTG_CHNUM_Pos)                  /*!< 0x00000008 */
#define USB_OTG_BCNT_Pos                         (4U)
#define USB_OTG_BCNT_Msk                         (0x7FFUL << USB_OTG_BCNT_Pos)                 /*!< 0x00007FF0 */
#define USB_OTG_BCNT                             USB_OTG_BCNT_Msk                             /*!< Byte count */
#define USB_OTG_DPID_Pos                         (15U)
#define USB_OTG_DPID_Msk                         (0x3UL << USB_OTG_DPID_Pos)                   /*!< 0x00018000 */
#define USB_OTG_DPID                             USB_OTG_DPID_Msk                             /*!< Data PID */
#define USB_OTG_DPID_0                           (0x1UL << USB_OTG_DPID_Pos)                   /*!< 0x00008000 */
#define USB_OTG_DPID_1                           (0x2UL << USB_OTG_DPID_Pos)                   /*!< 0x00010000 */
#define USB_OTG_PKTSTS_Pos                       (17U)
#define USB_OTG_PKTSTS_Msk                       (0xFUL << USB_OTG_PKTSTS_Pos)                 /*!< 0x001E0000 */
#define USB_OTG_PKTSTS                           USB_OTG_PKTSTS_Msk                           /*!< Packet status */
#define USB_OTG_PKTSTS_0                         (0x1UL << USB_OTG_PKTSTS_Pos)                 /*!< 0x00020000 */
#define USB_OTG_PKTSTS_1                         (0x2UL << USB_OTG_PKTSTS_Pos)                 /*!< 0x00040000 */
#define USB_OTG_PKTSTS_2                         (0x4UL << USB_OTG_PKTSTS_Pos)                 /*!< 0x00080000 */
#define USB_OTG_PKTSTS_3                         (0x8UL << USB_OTG_PKTSTS_Pos)                 /*!< 0x00100000 */
#define USB_OTG_EPNUM_Pos                        (0U)
#define USB_OTG_EPNUM_Msk                        (0xFUL << USB_OTG_EPNUM_Pos)                  /*!< 0x0000000F */
#define USB_OTG_EPNUM                            USB_OTG_EPNUM_Msk                            /*!< Endpoint number */
#define USB_OTG_EPNUM_0                          (0x1UL << USB_OTG_EPNUM_Pos)                  /*!< 0x00000001 */
#define USB_OTG_EPNUM_1                          (0x2UL << USB_OTG_EPNUM_Pos)                  /*!< 0x00000002 */
#define USB_OTG_EPNUM_2                          (0x4UL << USB_OTG_EPNUM_Pos)                  /*!< 0x00000004 */
#define USB_OTG_EPNUM_3                          (0x8UL << USB_OTG_EPNUM_Pos)                  /*!< 0x00000008 */
#define USB_OTG_FRMNUM_Pos                       (21U)
#define USB_OTG_FRMNUM_Msk                       (0xFUL << USB_OTG_FRMNUM_Pos)                 /*!< 0x01E00000 */
#define USB_OTG_FRMNUM                           USB_OTG_FRMNUM_Msk                           /*!< Frame number */
#define USB_OTG_FRMNUM_0                         (0x1UL << USB_OTG_FRMNUM_Pos)                 /*!< 0x00200000 */
#define USB_OTG_FRMNUM_1                         (0x2UL << USB_OTG_FRMNUM_Pos)                 /*!< 0x00400000 */
#define USB_OTG_FRMNUM_2                         (0x4UL << USB_OTG_FRMNUM_Pos)                 /*!< 0x00800000 */
#define USB_OTG_FRMNUM_3                         (0x8UL << USB_OTG_FRMNUM_Pos)                 /*!< 0x01000000 */

/********************  Bit definition for USB_OTG_GRXFSIZ register  ********************/
#define USB_OTG_GRXFSIZ_RXFD_Pos                 (0U)
#define USB_OTG_GRXFSIZ_RXFD_Msk                 (0xFFFFUL << USB_OTG_GRXFSIZ_RXFD_Pos)        /*!< 0x0000FFFF */
#define USB_OTG_GRXFSIZ_RXFD                     USB_OTG_GRXFSIZ_RXFD_Msk                     /*!< RxFIFO depth */

/********************  Bit definition for OTG register  ********************/
#define USB_OTG_NPTXFSA_Pos                      (0U)
#define USB_OTG_NPTXFSA_Msk                      (0xFFFFUL << USB_OTG_NPTXFSA_Pos)             /*!< 0x0000FFFF */
#define USB_OTG_NPTXFSA                          USB_OTG_NPTXFSA_Msk                          /*!< Nonperiodic transmit RAM start address */
#define USB_OTG_NPTXFD_Pos                       (16U)
#define USB_OTG_NPTXFD_Msk                       (0xFFFFUL << USB_OTG_NPTXFD_Pos)              /*!< 0xFFFF0000 */
#define USB_OTG_NPTXFD                           USB_OTG_NPTXFD_Msk                           /*!< Nonperiodic TxFIFO depth */
#define USB_OTG_TX0FSA_Pos                       (0U)
#define USB_OTG_TX0FSA_Msk                       (0xFFFFUL << USB_OTG_TX0FSA_Pos)              /*!< 0x0000FFFF */
#define USB_OTG_TX0FSA                           USB_OTG_TX0FSA_Msk                           /*!< Endpoint 0 transmit RAM start address */
#define USB_OTG_TX0FD_Pos                        (16U)
#define USB_OTG_TX0FD_Msk                        (0xFFFFUL << USB_OTG_TX0FD_Pos)               /*!< 0xFFFF0000 */
#define USB_OTG_TX0FD                            USB_OTG_TX0FD_Msk                            /*!< Endpoint 0 TxFIFO depth */

/********************  Bit definition for USB_OTG_GNPTXSTS register  ********************/
#define USB_OTG_GNPTXSTS_NPTXFSAV_Pos            (0U)
#define USB_OTG_GNPTXSTS_NPTXFSAV_Msk            (0xFFFFUL << USB_OTG_GNPTXSTS_NPTXFSAV_Pos)   /*!< 0x0000FFFF */
#define USB_OTG_GNPTXSTS_NPTXFSAV                USB_OTG_GNPTXSTS_NPTXFSAV_Msk                /*!< Nonperiodic TxFIFO space available */

#define USB_OTG_GNPTXSTS_NPTQXSAV_Pos            (16U)
#define USB_OTG_GNPTXSTS_NPTQXSAV_Msk            (0xFFUL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00FF0000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV                USB_OTG_GNPTXSTS_NPTQXSAV_Msk                /*!< Nonperiodic transmit request queue space available */
#define USB_OTG_GNPTXSTS_NPTQXSAV_0              (0x01UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00010000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_1              (0x02UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00020000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_2              (0x04UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00040000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_3              (0x08UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00080000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_4              (0x10UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00100000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_5              (0x20UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00200000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_6              (0x40UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00400000 */
#define USB_OTG_GNPTXSTS_NPTQXSAV_7              (0x80UL << USB_OTG_GNPTXSTS_NPTQXSAV_Pos)     /*!< 0x00800000 */

#define USB_OTG_GNPTXSTS_NPTXQTOP_Pos            (24U)
#define USB_OTG_GNPTXSTS_NPTXQTOP_Msk            (0x7FUL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x7F000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP                USB_OTG_GNPTXSTS_NPTXQTOP_Msk                /*!< Top of the nonperiodic transmit request queue */
#define USB_OTG_GNPTXSTS_NPTXQTOP_0              (0x01UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x01000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_1              (0x02UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x02000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_2              (0x04UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x04000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_3              (0x08UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x08000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_4              (0x10UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x10000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_5              (0x20UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x20000000 */
#define USB_OTG_GNPTXSTS_NPTXQTOP_6              (0x40UL << USB_OTG_GNPTXSTS_NPTXQTOP_Pos)     /*!< 0x40000000 */

/********************  Bit definition for USB_OTG_DTHRCTL register  ***************/
#define USB_OTG_DTHRCTL_NONISOTHREN_Pos          (0U)
#define USB_OTG_DTHRCTL_NONISOTHREN_Msk          (0x1UL << USB_OTG_DTHRCTL_NONISOTHREN_Pos)    /*!< 0x00000001 */
#define USB_OTG_DTHRCTL_NONISOTHREN              USB_OTG_DTHRCTL_NONISOTHREN_Msk              /*!< Nonisochronous IN endpoints threshold enable */
#define USB_OTG_DTHRCTL_ISOTHREN_Pos             (1U)
#define USB_OTG_DTHRCTL_ISOTHREN_Msk             (0x1UL << USB_OTG_DTHRCTL_ISOTHREN_Pos)       /*!< 0x00000002 */
#define USB_OTG_DTHRCTL_ISOTHREN                 USB_OTG_DTHRCTL_ISOTHREN_Msk                 /*!< ISO IN endpoint threshold enable */
#define USB_OTG_DTHRCTL_TXTHRLEN_Pos             (2U)
#define USB_OTG_DTHRCTL_TXTHRLEN_Msk             (0x1FFUL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x000007FC */
#define USB_OTG_DTHRCTL_TXTHRLEN                 USB_OTG_DTHRCTL_TXTHRLEN_Msk                 /*!< Transmit threshold length */
#define USB_OTG_DTHRCTL_TXTHRLEN_0               (0x001UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000004 */
#define USB_OTG_DTHRCTL_TXTHRLEN_1               (0x002UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000008 */
#define USB_OTG_DTHRCTL_TXTHRLEN_2               (0x004UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000010 */
#define USB_OTG_DTHRCTL_TXTHRLEN_3               (0x008UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000020 */
#define USB_OTG_DTHRCTL_TXTHRLEN_4               (0x010UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000040 */
#define USB_OTG_DTHRCTL_TXTHRLEN_5               (0x020UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000080 */
#define USB_OTG_DTHRCTL_TXTHRLEN_6               (0x040UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000100 */
#define USB_OTG_DTHRCTL_TXTHRLEN_7               (0x080UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000200 */
#define USB_OTG_DTHRCTL_TXTHRLEN_8               (0x100UL << USB_OTG_DTHRCTL_TXTHRLEN_Pos)     /*!< 0x00000400 */

#define USB_OTG_DTHRCTL_RXTHREN_Pos              (16U)
#define USB_OTG_DTHRCTL_RXTHREN_Msk              (0x1UL << USB_OTG_DTHRCTL_RXTHREN_Pos)        /*!< 0x00010000 */
#define USB_OTG_DTHRCTL_RXTHREN                  USB_OTG_DTHRCTL_RXTHREN_Msk                  /*!< Receive threshold enable */
#define USB_OTG_DTHRCTL_RXTHRLEN_Pos             (17U)
#define USB_OTG_DTHRCTL_RXTHRLEN_Msk             (0x1FFUL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x03FE0000 */
#define USB_OTG_DTHRCTL_RXTHRLEN                 USB_OTG_DTHRCTL_RXTHRLEN_Msk                 /*!< Receive threshold length */
#define USB_OTG_DTHRCTL_RXTHRLEN_0               (0x001UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00020000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_1               (0x002UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00040000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_2               (0x004UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00080000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_3               (0x008UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00100000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_4               (0x010UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00200000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_5               (0x020UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00400000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_6               (0x040UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x00800000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_7               (0x080UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x01000000 */
#define USB_OTG_DTHRCTL_RXTHRLEN_8               (0x100UL << USB_OTG_DTHRCTL_RXTHRLEN_Pos)     /*!< 0x02000000 */
#define USB_OTG_DTHRCTL_ARPEN_Pos                (27U)
#define USB_OTG_DTHRCTL_ARPEN_Msk                (0x1UL << USB_OTG_DTHRCTL_ARPEN_Pos)          /*!< 0x08000000 */
#define USB_OTG_DTHRCTL_ARPEN                    USB_OTG_DTHRCTL_ARPEN_Msk                    /*!< Arbiter parking enable */

/********************  Bit definition for USB_OTG_DIEPEMPMSK register  ***************/
#define USB_OTG_DIEPEMPMSK_INEPTXFEM_Pos         (0U)
#define USB_OTG_DIEPEMPMSK_INEPTXFEM_Msk         (0xFFFFUL << USB_OTG_DIEPEMPMSK_INEPTXFEM_Pos) /*!< 0x0000FFFF */
#define USB_OTG_DIEPEMPMSK_INEPTXFEM             USB_OTG_DIEPEMPMSK_INEPTXFEM_Msk              /*!< IN EP Tx FIFO empty interrupt mask bits */

/********************  Bit definition for USB_OTG_GCCFG register  ********************/
#define USB_OTG_GCCFG_CHGDET_Pos                 (0U)
#define USB_OTG_GCCFG_CHGDET_Msk                 (0x1UL << USB_OTG_GCCFG_CHGDET_Pos)           /*!< 0x00000001 */
#define USB_OTG_GCCFG_CHGDET                     USB_OTG_GCCFG_CHGDET_Msk                     /*!< Battery Charger Detection */
#define USB_OTG_GCCFG_FSVPLUS_Pos                (1U)
#define USB_OTG_GCCFG_FSVPLUS_Msk                (0x1UL << USB_OTG_GCCFG_FSVPLUS_Pos)          /*!< 0x00000002 */
#define USB_OTG_GCCFG_FSVPLUS                    USB_OTG_GCCFG_FSVPLUS_Msk                    /*!< Single-Ended DP2 indicator DP voltage level  */
#define USB_OTG_GCCFG_FSVMINUS_Pos               (2U)
#define USB_OTG_GCCFG_FSVMINUS_Msk               0x1UL << USB_OTG_GCCFG_FSVMINUS_Pos)         /*!< 0x00000004 */
#define USB_OTG_GCCFG_FSVMINUS                   USB_OTG_GCCFG_FSVMINUS_Msk                  /*!< Single-Ended DM2 indicator DM voltage level  */
#define USB_OTG_GCCFG_SESSVLD_Pos                (3U)
#define USB_OTG_GCCFG_SESSVLD_Msk                (0x1UL << USB_OTG_GCCFG_SESSVLD_Pos)          /*!< 0x00000008 */
#define USB_OTG_GCCFG_SESSVLD                    USB_OTG_GCCFG_SESSVLD_Msk                    /*!< VBUS session valid indicator Vbus voltage level  */
#define USB_OTG_GCCFG_H_CDPEN_Pos                (16U)
#define USB_OTG_GCCFG_H_CDPEN_Msk                (0x1UL << USB_OTG_GCCFG_H_CDPEN_Pos)          /*!< 0x00010000 */
#define USB_OTG_GCCFG_H_CDPEN                    USB_OTG_GCCFG_H_CDPEN_Msk                    /*!< VBUS session valid indicator Vbus voltage level  */
#define USB_OTG_GCCFG_H_CDPDETEN_Pos             (17U)
#define USB_OTG_GCCFG_H_CDPDETEN_Msk             (0x1UL << USB_OTG_GCCFG_H_CDPDETEN_Pos)       /*!< 0x00020000 */
#define USB_OTG_GCCFG_H_CDPDETEN                 USB_OTG_GCCFG_H_CDPDETEN_Msk                 /*!< Enable of voltage detector on DP for CDP port  */
#define USB_OTG_GCCFG_H_VDMSRCEN_Pos             (18U)
#define USB_OTG_GCCFG_H_VDMSRCEN_Msk             (0x1UL << USB_OTG_GCCFG_H_VDMSRCEN_Pos)       /*!< 0x00040000 */
#define USB_OTG_GCCFG_H_VDMSRCEN                 USB_OTG_GCCFG_H_VDMSRCEN_Msk                 /*!< Enable Voltage source on DM for CDP port */
#define USB_OTG_GCCFG_DCDETEN_Pos                (19U)
#define USB_OTG_GCCFG_DCDETEN_Msk                (0x1UL << USB_OTG_GCCFG_DCDETEN_Pos)            /*!< 0x00080000 */
#define USB_OTG_GCCFG_DCDETEN                    USB_OTG_GCCFG_DCDETEN_Msk                      /*!< Data contact detection (DCD) mode enable */
#define USB_OTG_GCCFG_PDETEN_Pos                 (20U)
#define USB_OTG_GCCFG_PDETEN_Msk                 (0x1UL << USB_OTG_GCCFG_PDETEN_Pos)             /*!< 0x00080000 */
#define USB_OTG_GCCFG_PDETEN                       USB_OTG_GCCFG_PDETEN_Msk                       /*!< Primary detection (PD) mode enable */
#define USB_OTG_GCCFG_VBDEN_Pos                  (21U)
#define USB_OTG_GCCFG_VBDEN_Msk                  (0x1UL << USB_OTG_GCCFG_VBDEN_Pos)            /*!< 0x00200000 */
#define USB_OTG_GCCFG_VBDEN                      USB_OTG_GCCFG_VBDEN_Msk                      /*!< Vbus detection enable */
#define USB_OTG_GCCFG_SDETEN_Pos                 (22U)
#define USB_OTG_GCCFG_SDETEN_Msk                 (0x1UL << USB_OTG_GCCFG_SDETEN_Pos)             /*!< 0x00400000 */
#define USB_OTG_GCCFG_SDETEN                     USB_OTG_GCCFG_SDETEN_Msk                       /*!< Secondary detection (PD) mode enable */
#define USB_OTG_GCCFG_VBVALOVAL_Pos              (23U)
#define USB_OTG_GCCFG_VBVALOVAL_Msk              (0x1UL << USB_OTG_GCCFG_VBVALOVAL_Pos)        /*!< 0x00800000 */
#define USB_OTG_GCCFG_VBVALOVAL                  USB_OTG_GCCFG_VBVALOVAL_Msk                  /*!< Value of VBUSVLDEXT0 femtoPHY input */
#define USB_OTG_GCCFG_VBVALEXTOEN_Pos            (24U)
#define USB_OTG_GCCFG_VBVALEXTOEN_Msk            (0x1UL << USB_OTG_GCCFG_VBVALEXTOEN_Pos)      /*!< 0x01000000 */
#define USB_OTG_GCCFG_VBVALEXTOEN                USB_OTG_GCCFG_VBVALEXTOEN_Msk                /*!< Enables of VBUSVLDEXT0 femtoPHY input override */
#define USB_OTG_GCCFG_PULLDOWNEN_Pos             (25U)
#define USB_OTG_GCCFG_PULLDOWNEN_Msk             (0x1UL << USB_OTG_GCCFG_PULLDOWNEN_Pos)       /*!< 0x02000000 */
#define USB_OTG_GCCFG_PULLDOWNEN                 USB_OTG_GCCFG_PULLDOWNEN_Msk                 /*!< Enables of femtoPHY pulldown resistors, used when ID PAD is disabled */
#define USB_OTG_GCCFG_IDPULLUP_Pos               (28U)
#define USB_OTG_GCCFG_IDPULLUP_Msk               (0x1UL << USB_OTG_GCCFG_IDPULLUP_Pos)         /*!< 0x10000000 */
#define USB_OTG_GCCFG_IDPULLUP                   USB_OTG_GCCFG_IDPULLUP_Msk                   /*!< Disables sampling on the analog ID Line*/

/********************  Bit definition for USB_OTG_DEACHINTMSK register  ********************/
#define USB_OTG_DEACHINTMSK_IEP1INTM_Pos         (1U)
#define USB_OTG_DEACHINTMSK_IEP1INTM_Msk         (0x1UL << USB_OTG_DEACHINTMSK_IEP1INTM_Pos)   /*!< 0x00000002 */
#define USB_OTG_DEACHINTMSK_IEP1INTM             USB_OTG_DEACHINTMSK_IEP1INTM_Msk             /*!< IN Endpoint 1 interrupt mask bit */
#define USB_OTG_DEACHINTMSK_OEP1INTM_Pos         (17U)
#define USB_OTG_DEACHINTMSK_OEP1INTM_Msk         (0x1UL << USB_OTG_DEACHINTMSK_OEP1INTM_Pos)   /*!< 0x00020000 */
#define USB_OTG_DEACHINTMSK_OEP1INTM             USB_OTG_DEACHINTMSK_OEP1INTM_Msk             /*!< OUT Endpoint 1 interrupt mask bit */

/********************  Bit definition for USB_OTG_CID register  ********************/
#define USB_OTG_CID_PRODUCT_ID_Pos               (0U)
#define USB_OTG_CID_PRODUCT_ID_Msk               (0xFFFFFFFFUL << USB_OTG_CID_PRODUCT_ID_Pos)  /*!< 0xFFFFFFFF */
#define USB_OTG_CID_PRODUCT_ID                   USB_OTG_CID_PRODUCT_ID_Msk                   /*!< Product ID field */

/********************  Bit definition for USB_OTG_GLPMCFG register  ********************/
#define USB_OTG_GLPMCFG_ENBESL_Pos               (28U)
#define USB_OTG_GLPMCFG_ENBESL_Msk               (0x1UL << USB_OTG_GLPMCFG_ENBESL_Pos)         /*!< 0x10000000 */
#define USB_OTG_GLPMCFG_ENBESL                   USB_OTG_GLPMCFG_ENBESL_Msk                   /* Enable best effort service latency */
#define USB_OTG_GLPMCFG_LPMRCNTSTS_Pos           (25U)
#define USB_OTG_GLPMCFG_LPMRCNTSTS_Msk           (0x7UL << USB_OTG_GLPMCFG_LPMRCNTSTS_Pos)     /*!< 0x0E000000 */
#define USB_OTG_GLPMCFG_LPMRCNTSTS               USB_OTG_GLPMCFG_LPMRCNTSTS_Msk               /* LPM retry count status */
#define USB_OTG_GLPMCFG_SNDLPM_Pos               (24U)
#define USB_OTG_GLPMCFG_SNDLPM_Msk               (0x1UL << USB_OTG_GLPMCFG_SNDLPM_Pos)         /*!< 0x01000000 */
#define USB_OTG_GLPMCFG_SNDLPM                   USB_OTG_GLPMCFG_SNDLPM_Msk                   /* Send LPM transaction */
#define USB_OTG_GLPMCFG_LPMRCNT_Pos              (21U)
#define USB_OTG_GLPMCFG_LPMRCNT_Msk              (0x7UL << USB_OTG_GLPMCFG_LPMRCNT_Pos)        /*!< 0x00E00000 */
#define USB_OTG_GLPMCFG_LPMRCNT                  USB_OTG_GLPMCFG_LPMRCNT_Msk                  /* LPM retry count */
#define USB_OTG_GLPMCFG_LPMCHIDX_Pos             (17U)
#define USB_OTG_GLPMCFG_LPMCHIDX_Msk             (0xFUL << USB_OTG_GLPMCFG_LPMCHIDX_Pos)       /*!< 0x001E0000 */
#define USB_OTG_GLPMCFG_LPMCHIDX                 USB_OTG_GLPMCFG_LPMCHIDX_Msk                 /* LPMCHIDX: */
#define USB_OTG_GLPMCFG_L1ResumeOK_Pos           (16U)
#define USB_OTG_GLPMCFG_L1ResumeOK_Msk           (0x1UL << USB_OTG_GLPMCFG_L1ResumeOK_Pos)     /*!< 0x00010000 */
#define USB_OTG_GLPMCFG_L1ResumeOK               USB_OTG_GLPMCFG_L1ResumeOK_Msk               /* Sleep State Resume OK */
#define USB_OTG_GLPMCFG_SLPSTS_Pos               (15U)
#define USB_OTG_GLPMCFG_SLPSTS_Msk               (0x1UL << USB_OTG_GLPMCFG_SLPSTS_Pos)         /*!< 0x00008000 */
#define USB_OTG_GLPMCFG_SLPSTS                   USB_OTG_GLPMCFG_SLPSTS_Msk                   /* Port sleep status */
#define USB_OTG_GLPMCFG_LPMRSP_Pos               (13U)
#define USB_OTG_GLPMCFG_LPMRSP_Msk               (0x3UL << USB_OTG_GLPMCFG_LPMRSP_Pos)         /*!< 0x00006000 */
#define USB_OTG_GLPMCFG_LPMRSP                   USB_OTG_GLPMCFG_LPMRSP_Msk                   /* LPM response */
#define USB_OTG_GLPMCFG_L1DSEN_Pos               (12U)
#define USB_OTG_GLPMCFG_L1DSEN_Msk               (0x1UL << USB_OTG_GLPMCFG_L1DSEN_Pos)         /*!< 0x00001000 */
#define USB_OTG_GLPMCFG_L1DSEN                   USB_OTG_GLPMCFG_L1DSEN_Msk                   /* L1 deep sleep enable */
#define USB_OTG_GLPMCFG_BESLTHRS_Pos             (8U)
#define USB_OTG_GLPMCFG_BESLTHRS_Msk             (0xFUL << USB_OTG_GLPMCFG_BESLTHRS_Pos)       /*!< 0x00000F00 */
#define USB_OTG_GLPMCFG_BESLTHRS                 USB_OTG_GLPMCFG_BESLTHRS_Msk                 /* BESL threshold */
#define USB_OTG_GLPMCFG_L1SSEN_Pos               (7U)
#define USB_OTG_GLPMCFG_L1SSEN_Msk               (0x1UL << USB_OTG_GLPMCFG_L1SSEN_Pos)         /*!< 0x00000080 */
#define USB_OTG_GLPMCFG_L1SSEN                   USB_OTG_GLPMCFG_L1SSEN_Msk                   /* L1 shallow sleep enable */
#define USB_OTG_GLPMCFG_REMWAKE_Pos              (6U)
#define USB_OTG_GLPMCFG_REMWAKE_Msk              (0x1UL << USB_OTG_GLPMCFG_REMWAKE_Pos)        /*!< 0x00000040 */
#define USB_OTG_GLPMCFG_REMWAKE                  USB_OTG_GLPMCFG_REMWAKE_Msk                  /* bRemoteWake value received with last ACKed LPM Token */
#define USB_OTG_GLPMCFG_BESL_Pos                 (2U)
#define USB_OTG_GLPMCFG_BESL_Msk                 (0xFUL << USB_OTG_GLPMCFG_BESL_Pos)           /*!< 0x0000003C */
#define USB_OTG_GLPMCFG_BESL                     USB_OTG_GLPMCFG_BESL_Msk                     /* BESL value received with last ACKed LPM Token  */
#define USB_OTG_GLPMCFG_LPMACK_Pos               (1U)
#define USB_OTG_GLPMCFG_LPMACK_Msk               (0x1UL << USB_OTG_GLPMCFG_LPMACK_Pos)         /*!< 0x00000002 */
#define USB_OTG_GLPMCFG_LPMACK                   USB_OTG_GLPMCFG_LPMACK_Msk                   /* LPM Token acknowledge enable*/
#define USB_OTG_GLPMCFG_LPMEN_Pos                (0U)
#define USB_OTG_GLPMCFG_LPMEN_Msk                (0x1UL << USB_OTG_GLPMCFG_LPMEN_Pos)          /*!< 0x00000001 */
#define USB_OTG_GLPMCFG_LPMEN                    USB_OTG_GLPMCFG_LPMEN_Msk                    /* LPM support enable  */

/********************  Bit definition for USB_OTG_DIEPEACHMSK1 register  ********************/
#define USB_OTG_DIEPEACHMSK1_XFRCM_Pos           (0U)
#define USB_OTG_DIEPEACHMSK1_XFRCM_Msk           (0x1UL << USB_OTG_DIEPEACHMSK1_XFRCM_Pos)     /*!< 0x00000001 */
#define USB_OTG_DIEPEACHMSK1_XFRCM               USB_OTG_DIEPEACHMSK1_XFRCM_Msk               /*!< Transfer completed interrupt mask */
#define USB_OTG_DIEPEACHMSK1_EPDM_Pos            (1U)
#define USB_OTG_DIEPEACHMSK1_EPDM_Msk            (0x1UL << USB_OTG_DIEPEACHMSK1_EPDM_Pos)      /*!< 0x00000002 */
#define USB_OTG_DIEPEACHMSK1_EPDM                USB_OTG_DIEPEACHMSK1_EPDM_Msk                /*!< Endpoint disabled interrupt mask */
#define USB_OTG_DIEPEACHMSK1_TOM_Pos             (3U)
#define USB_OTG_DIEPEACHMSK1_TOM_Msk             (0x1UL << USB_OTG_DIEPEACHMSK1_TOM_Pos)       /*!< 0x00000008 */
#define USB_OTG_DIEPEACHMSK1_TOM                 USB_OTG_DIEPEACHMSK1_TOM_Msk                 /*!< Timeout condition mask (nonisochronous endpoints) */
#define USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Pos       (4U)
#define USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Msk       (0x1UL << USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Pos) /*!< 0x00000010 */
#define USB_OTG_DIEPEACHMSK1_ITTXFEMSK           USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Msk           /*!< IN token received when TxFIFO empty mask */
#define USB_OTG_DIEPEACHMSK1_INEPNMM_Pos         (5U)
#define USB_OTG_DIEPEACHMSK1_INEPNMM_Msk         (0x1UL << USB_OTG_DIEPEACHMSK1_INEPNMM_Pos)   /*!< 0x00000020 */
#define USB_OTG_DIEPEACHMSK1_INEPNMM             USB_OTG_DIEPEACHMSK1_INEPNMM_Msk             /*!< IN token received with EP mismatch mask */
#define USB_OTG_DIEPEACHMSK1_INEPNEM_Pos         (6U)
#define USB_OTG_DIEPEACHMSK1_INEPNEM_Msk         (0x1UL << USB_OTG_DIEPEACHMSK1_INEPNEM_Pos)   /*!< 0x00000040 */
#define USB_OTG_DIEPEACHMSK1_INEPNEM             USB_OTG_DIEPEACHMSK1_INEPNEM_Msk             /*!< IN endpoint NAK effective mask */
#define USB_OTG_DIEPEACHMSK1_TXFURM_Pos          (8U)
#define USB_OTG_DIEPEACHMSK1_TXFURM_Msk          (0x1UL << USB_OTG_DIEPEACHMSK1_TXFURM_Pos)    /*!< 0x00000100 */
#define USB_OTG_DIEPEACHMSK1_TXFURM              USB_OTG_DIEPEACHMSK1_TXFURM_Msk              /*!< FIFO underrun mask */
#define USB_OTG_DIEPEACHMSK1_BIM_Pos             (9U)
#define USB_OTG_DIEPEACHMSK1_BIM_Msk             (0x1UL << USB_OTG_DIEPEACHMSK1_BIM_Pos)       /*!< 0x00000200 */
#define USB_OTG_DIEPEACHMSK1_BIM                 USB_OTG_DIEPEACHMSK1_BIM_Msk                 /*!< BNA interrupt mask */
#define USB_OTG_DIEPEACHMSK1_NAKM_Pos            (13U)
#define USB_OTG_DIEPEACHMSK1_NAKM_Msk            (0x1UL << USB_OTG_DIEPEACHMSK1_NAKM_Pos)      /*!< 0x00002000 */
#define USB_OTG_DIEPEACHMSK1_NAKM                USB_OTG_DIEPEACHMSK1_NAKM_Msk                /*!< NAK interrupt mask */

/********************  Bit definition for USB_OTG_HPRT register  ********************/
#define USB_OTG_HPRT_PCSTS_Pos                   (0U)
#define USB_OTG_HPRT_PCSTS_Msk                   (0x1UL << USB_OTG_HPRT_PCSTS_Pos)             /*!< 0x00000001 */
#define USB_OTG_HPRT_PCSTS                       USB_OTG_HPRT_PCSTS_Msk                       /*!< Port connect status */
#define USB_OTG_HPRT_PCDET_Pos                   (1U)
#define USB_OTG_HPRT_PCDET_Msk                   (0x1UL << USB_OTG_HPRT_PCDET_Pos)             /*!< 0x00000002 */
#define USB_OTG_HPRT_PCDET                       USB_OTG_HPRT_PCDET_Msk                       /*!< Port connect detected */
#define USB_OTG_HPRT_PENA_Pos                    (2U)
#define USB_OTG_HPRT_PENA_Msk                    (0x1UL << USB_OTG_HPRT_PENA_Pos)              /*!< 0x00000004 */
#define USB_OTG_HPRT_PENA                        USB_OTG_HPRT_PENA_Msk                        /*!< Port enable */
#define USB_OTG_HPRT_PENCHNG_Pos                 (3U)
#define USB_OTG_HPRT_PENCHNG_Msk                 (0x1UL << USB_OTG_HPRT_PENCHNG_Pos)           /*!< 0x00000008 */
#define USB_OTG_HPRT_PENCHNG                     USB_OTG_HPRT_PENCHNG_Msk                     /*!< Port enable/disable change */
#define USB_OTG_HPRT_POCA_Pos                    (4U)
#define USB_OTG_HPRT_POCA_Msk                    (0x1UL << USB_OTG_HPRT_POCA_Pos)              /*!< 0x00000010 */
#define USB_OTG_HPRT_POCA                        USB_OTG_HPRT_POCA_Msk                        /*!< Port overcurrent active */
#define USB_OTG_HPRT_POCCHNG_Pos                 (5U)
#define USB_OTG_HPRT_POCCHNG_Msk                 (0x1UL << USB_OTG_HPRT_POCCHNG_Pos)           /*!< 0x00000020 */
#define USB_OTG_HPRT_POCCHNG                     USB_OTG_HPRT_POCCHNG_Msk                     /*!< Port overcurrent change */
#define USB_OTG_HPRT_PRES_Pos                    (6U)
#define USB_OTG_HPRT_PRES_Msk                    (0x1UL << USB_OTG_HPRT_PRES_Pos)              /*!< 0x00000040 */
#define USB_OTG_HPRT_PRES                        USB_OTG_HPRT_PRES_Msk                        /*!< Port resume */
#define USB_OTG_HPRT_PSUSP_Pos                   (7U)
#define USB_OTG_HPRT_PSUSP_Msk                   (0x1UL << USB_OTG_HPRT_PSUSP_Pos)             /*!< 0x00000080 */
#define USB_OTG_HPRT_PSUSP                       USB_OTG_HPRT_PSUSP_Msk                       /*!< Port suspend */
#define USB_OTG_HPRT_PRST_Pos                    (8U)
#define USB_OTG_HPRT_PRST_Msk                    (0x1UL << USB_OTG_HPRT_PRST_Pos)              /*!< 0x00000100 */
#define USB_OTG_HPRT_PRST                        USB_OTG_HPRT_PRST_Msk                        /*!< Port reset */

#define USB_OTG_HPRT_PLSTS_Pos                   (10U)
#define USB_OTG_HPRT_PLSTS_Msk                   (0x3UL << USB_OTG_HPRT_PLSTS_Pos)             /*!< 0x00000C00 */
#define USB_OTG_HPRT_PLSTS                       USB_OTG_HPRT_PLSTS_Msk                       /*!< Port line status */
#define USB_OTG_HPRT_PLSTS_0                     (0x1UL << USB_OTG_HPRT_PLSTS_Pos)             /*!< 0x00000400 */
#define USB_OTG_HPRT_PLSTS_1                     (0x2UL << USB_OTG_HPRT_PLSTS_Pos)             /*!< 0x00000800 */
#define USB_OTG_HPRT_PPWR_Pos                    (12U)
#define USB_OTG_HPRT_PPWR_Msk                    (0x1UL << USB_OTG_HPRT_PPWR_Pos)              /*!< 0x00001000 */
#define USB_OTG_HPRT_PPWR                        USB_OTG_HPRT_PPWR_Msk                        /*!< Port power */

#define USB_OTG_HPRT_PTCTL_Pos                   (13U)
#define USB_OTG_HPRT_PTCTL_Msk                   (0xFUL << USB_OTG_HPRT_PTCTL_Pos)             /*!< 0x0001E000 */
#define USB_OTG_HPRT_PTCTL                       USB_OTG_HPRT_PTCTL_Msk                       /*!< Port test control */
#define USB_OTG_HPRT_PTCTL_0                     (0x1UL << USB_OTG_HPRT_PTCTL_Pos)             /*!< 0x00002000 */
#define USB_OTG_HPRT_PTCTL_1                     (0x2UL << USB_OTG_HPRT_PTCTL_Pos)             /*!< 0x00004000 */
#define USB_OTG_HPRT_PTCTL_2                     (0x4UL << USB_OTG_HPRT_PTCTL_Pos)             /*!< 0x00008000 */
#define USB_OTG_HPRT_PTCTL_3                     (0x8UL << USB_OTG_HPRT_PTCTL_Pos)             /*!< 0x00010000 */

#define USB_OTG_HPRT_PSPD_Pos                    (17U)
#define USB_OTG_HPRT_PSPD_Msk                    (0x3UL << USB_OTG_HPRT_PSPD_Pos)              /*!< 0x00060000 */
#define USB_OTG_HPRT_PSPD                        USB_OTG_HPRT_PSPD_Msk                        /*!< Port speed */
#define USB_OTG_HPRT_PSPD_0                      (0x1UL << USB_OTG_HPRT_PSPD_Pos)              /*!< 0x00020000 */
#define USB_OTG_HPRT_PSPD_1                      (0x2UL << USB_OTG_HPRT_PSPD_Pos)              /*!< 0x00040000 */

/********************  Bit definition for USB_OTG_DOEPEACHMSK1 register  ********************/
#define USB_OTG_DOEPEACHMSK1_XFRCM_Pos           (0U)
#define USB_OTG_DOEPEACHMSK1_XFRCM_Msk           (0x1UL << USB_OTG_DOEPEACHMSK1_XFRCM_Pos)     /*!< 0x00000001 */
#define USB_OTG_DOEPEACHMSK1_XFRCM               USB_OTG_DOEPEACHMSK1_XFRCM_Msk               /*!< Transfer completed interrupt mask */
#define USB_OTG_DOEPEACHMSK1_EPDM_Pos            (1U)
#define USB_OTG_DOEPEACHMSK1_EPDM_Msk            (0x1UL << USB_OTG_DOEPEACHMSK1_EPDM_Pos)      /*!< 0x00000002 */
#define USB_OTG_DOEPEACHMSK1_EPDM                USB_OTG_DOEPEACHMSK1_EPDM_Msk                /*!< Endpoint disabled interrupt mask */
#define USB_OTG_DOEPEACHMSK1_TOM_Pos             (3U)
#define USB_OTG_DOEPEACHMSK1_TOM_Msk             (0x1UL << USB_OTG_DOEPEACHMSK1_TOM_Pos)       /*!< 0x00000008 */
#define USB_OTG_DOEPEACHMSK1_TOM                 USB_OTG_DOEPEACHMSK1_TOM_Msk                 /*!< Timeout condition mask */
#define USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Pos       (4U)
#define USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Msk       (0x1UL << USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Pos) /*!< 0x00000010 */
#define USB_OTG_DOEPEACHMSK1_ITTXFEMSK           USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Msk           /*!< IN token received when TxFIFO empty mask */
#define USB_OTG_DOEPEACHMSK1_INEPNMM_Pos         (5U)
#define USB_OTG_DOEPEACHMSK1_INEPNMM_Msk         (0x1UL << USB_OTG_DOEPEACHMSK1_INEPNMM_Pos)   /*!< 0x00000020 */
#define USB_OTG_DOEPEACHMSK1_INEPNMM             USB_OTG_DOEPEACHMSK1_INEPNMM_Msk             /*!< IN token received with EP mismatch mask */
#define USB_OTG_DOEPEACHMSK1_INEPNEM_Pos         (6U)
#define USB_OTG_DOEPEACHMSK1_INEPNEM_Msk         (0x1UL << USB_OTG_DOEPEACHMSK1_INEPNEM_Pos)   /*!< 0x00000040 */
#define USB_OTG_DOEPEACHMSK1_INEPNEM             USB_OTG_DOEPEACHMSK1_INEPNEM_Msk             /*!< IN endpoint NAK effective mask */
#define USB_OTG_DOEPEACHMSK1_TXFURM_Pos          (8U)
#define USB_OTG_DOEPEACHMSK1_TXFURM_Msk          (0x1UL << USB_OTG_DOEPEACHMSK1_TXFURM_Pos)    /*!< 0x00000100 */
#define USB_OTG_DOEPEACHMSK1_TXFURM              USB_OTG_DOEPEACHMSK1_TXFURM_Msk              /*!< OUT packet error mask */
#define USB_OTG_DOEPEACHMSK1_BIM_Pos             (9U)
#define USB_OTG_DOEPEACHMSK1_BIM_Msk             (0x1UL << USB_OTG_DOEPEACHMSK1_BIM_Pos)       /*!< 0x00000200 */
#define USB_OTG_DOEPEACHMSK1_BIM                 USB_OTG_DOEPEACHMSK1_BIM_Msk                 /*!< BNA interrupt mask */
#define USB_OTG_DOEPEACHMSK1_BERRM_Pos           (12U)
#define USB_OTG_DOEPEACHMSK1_BERRM_Msk           (0x1UL << USB_OTG_DOEPEACHMSK1_BERRM_Pos)     /*!< 0x00001000 */
#define USB_OTG_DOEPEACHMSK1_BERRM               USB_OTG_DOEPEACHMSK1_BERRM_Msk               /*!< Bubble error interrupt mask */
#define USB_OTG_DOEPEACHMSK1_NAKM_Pos            (13U)
#define USB_OTG_DOEPEACHMSK1_NAKM_Msk            (0x1UL << USB_OTG_DOEPEACHMSK1_NAKM_Pos)      /*!< 0x00002000 */
#define USB_OTG_DOEPEACHMSK1_NAKM                USB_OTG_DOEPEACHMSK1_NAKM_Msk                /*!< NAK interrupt mask */
#define USB_OTG_DOEPEACHMSK1_NYETM_Pos           (14U)
#define USB_OTG_DOEPEACHMSK1_NYETM_Msk           (0x1UL << USB_OTG_DOEPEACHMSK1_NYETM_Pos)     /*!< 0x00004000 */
#define USB_OTG_DOEPEACHMSK1_NYETM               USB_OTG_DOEPEACHMSK1_NYETM_Msk               /*!< NYET interrupt mask */

/********************  Bit definition for USB_OTG_HPTXFSIZ register  ********************/
#define USB_OTG_HPTXFSIZ_PTXSA_Pos               (0U)
#define USB_OTG_HPTXFSIZ_PTXSA_Msk               (0xFFFFUL << USB_OTG_HPTXFSIZ_PTXSA_Pos)      /*!< 0x0000FFFF */
#define USB_OTG_HPTXFSIZ_PTXSA                   USB_OTG_HPTXFSIZ_PTXSA_Msk                   /*!< Host periodic TxFIFO start address */
#define USB_OTG_HPTXFSIZ_PTXFD_Pos               (16U)
#define USB_OTG_HPTXFSIZ_PTXFD_Msk               (0xFFFFUL << USB_OTG_HPTXFSIZ_PTXFD_Pos)      /*!< 0xFFFF0000 */
#define USB_OTG_HPTXFSIZ_PTXFD                   USB_OTG_HPTXFSIZ_PTXFD_Msk                   /*!< Host periodic TxFIFO depth */

/********************  Bit definition for USB_OTG_DIEPCTL register  ********************/
#define USB_OTG_DIEPCTL_MPSIZ_Pos                (0U)
#define USB_OTG_DIEPCTL_MPSIZ_Msk                (0x7FFUL << USB_OTG_DIEPCTL_MPSIZ_Pos)        /*!< 0x000007FF */
#define USB_OTG_DIEPCTL_MPSIZ                    USB_OTG_DIEPCTL_MPSIZ_Msk                    /*!< Maximum packet size */
#define USB_OTG_DIEPCTL_USBAEP_Pos               (15U)
#define USB_OTG_DIEPCTL_USBAEP_Msk               (0x1UL << USB_OTG_DIEPCTL_USBAEP_Pos)         /*!< 0x00008000 */
#define USB_OTG_DIEPCTL_USBAEP                   USB_OTG_DIEPCTL_USBAEP_Msk                   /*!< USB active endpoint */
#define USB_OTG_DIEPCTL_EONUM_DPID_Pos           (16U)
#define USB_OTG_DIEPCTL_EONUM_DPID_Msk           (0x1UL << USB_OTG_DIEPCTL_EONUM_DPID_Pos)     /*!< 0x00010000 */
#define USB_OTG_DIEPCTL_EONUM_DPID               USB_OTG_DIEPCTL_EONUM_DPID_Msk               /*!< Even/odd frame */
#define USB_OTG_DIEPCTL_NAKSTS_Pos               (17U)
#define USB_OTG_DIEPCTL_NAKSTS_Msk               (0x1UL << USB_OTG_DIEPCTL_NAKSTS_Pos)         /*!< 0x00020000 */
#define USB_OTG_DIEPCTL_NAKSTS                   USB_OTG_DIEPCTL_NAKSTS_Msk                   /*!< NAK status */

#define USB_OTG_DIEPCTL_EPTYP_Pos                (18U)
#define USB_OTG_DIEPCTL_EPTYP_Msk                (0x3UL << USB_OTG_DIEPCTL_EPTYP_Pos)          /*!< 0x000C0000 */
#define USB_OTG_DIEPCTL_EPTYP                    USB_OTG_DIEPCTL_EPTYP_Msk                    /*!< Endpoint type */
#define USB_OTG_DIEPCTL_EPTYP_0                  (0x1UL << USB_OTG_DIEPCTL_EPTYP_Pos)          /*!< 0x00040000 */
#define USB_OTG_DIEPCTL_EPTYP_1                  (0x2UL << USB_OTG_DIEPCTL_EPTYP_Pos)          /*!< 0x00080000 */
#define USB_OTG_DIEPCTL_STALL_Pos                (21U)
#define USB_OTG_DIEPCTL_STALL_Msk                (0x1UL << USB_OTG_DIEPCTL_STALL_Pos)          /*!< 0x00200000 */
#define USB_OTG_DIEPCTL_STALL                    USB_OTG_DIEPCTL_STALL_Msk                    /*!< STALL handshake */

#define USB_OTG_DIEPCTL_TXFNUM_Pos               (22U)
#define USB_OTG_DIEPCTL_TXFNUM_Msk               (0xFUL << USB_OTG_DIEPCTL_TXFNUM_Pos)         /*!< 0x03C00000 */
#define USB_OTG_DIEPCTL_TXFNUM                   USB_OTG_DIEPCTL_TXFNUM_Msk                   /*!< TxFIFO number */
#define USB_OTG_DIEPCTL_TXFNUM_0                 (0x1UL << USB_OTG_DIEPCTL_TXFNUM_Pos)         /*!< 0x00400000 */
#define USB_OTG_DIEPCTL_TXFNUM_1                 (0x2UL << USB_OTG_DIEPCTL_TXFNUM_Pos)         /*!< 0x00800000 */
#define USB_OTG_DIEPCTL_TXFNUM_2                 (0x4UL << USB_OTG_DIEPCTL_TXFNUM_Pos)         /*!< 0x01000000 */
#define USB_OTG_DIEPCTL_TXFNUM_3                 (0x8UL << USB_OTG_DIEPCTL_TXFNUM_Pos)         /*!< 0x02000000 */
#define USB_OTG_DIEPCTL_CNAK_Pos                 (26U)
#define USB_OTG_DIEPCTL_CNAK_Msk                 (0x1UL << USB_OTG_DIEPCTL_CNAK_Pos)           /*!< 0x04000000 */
#define USB_OTG_DIEPCTL_CNAK                     USB_OTG_DIEPCTL_CNAK_Msk                     /*!< Clear NAK */
#define USB_OTG_DIEPCTL_SNAK_Pos                 (27U)
#define USB_OTG_DIEPCTL_SNAK_Msk                 (0x1UL << USB_OTG_DIEPCTL_SNAK_Pos)           /*!< 0x08000000 */
#define USB_OTG_DIEPCTL_SNAK                     USB_OTG_DIEPCTL_SNAK_Msk                     /*!< Set NAK */
#define USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Pos       (28U)
#define USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk       (0x1UL << USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Pos) /*!< 0x10000000 */
#define USB_OTG_DIEPCTL_SD0PID_SEVNFRM           USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk           /*!< Set DATA0 PID */
#define USB_OTG_DIEPCTL_SODDFRM_Pos              (29U)
#define USB_OTG_DIEPCTL_SODDFRM_Msk              (0x1UL << USB_OTG_DIEPCTL_SODDFRM_Pos)        /*!< 0x20000000 */
#define USB_OTG_DIEPCTL_SODDFRM                  USB_OTG_DIEPCTL_SODDFRM_Msk                  /*!< Set odd frame */
#define USB_OTG_DIEPCTL_EPDIS_Pos                (30U)
#define USB_OTG_DIEPCTL_EPDIS_Msk                (0x1UL << USB_OTG_DIEPCTL_EPDIS_Pos)          /*!< 0x40000000 */
#define USB_OTG_DIEPCTL_EPDIS                    USB_OTG_DIEPCTL_EPDIS_Msk                    /*!< Endpoint disable */
#define USB_OTG_DIEPCTL_EPENA_Pos                (31U)
#define USB_OTG_DIEPCTL_EPENA_Msk                (0x1UL << USB_OTG_DIEPCTL_EPENA_Pos)          /*!< 0x80000000 */
#define USB_OTG_DIEPCTL_EPENA                    USB_OTG_DIEPCTL_EPENA_Msk                    /*!< Endpoint enable */

/********************  Bit definition for USB_OTG_HCCHAR register  ********************/
#define USB_OTG_HCCHAR_MPSIZ_Pos                 (0U)
#define USB_OTG_HCCHAR_MPSIZ_Msk                 (0x7FFUL << USB_OTG_HCCHAR_MPSIZ_Pos)         /*!< 0x000007FF */
#define USB_OTG_HCCHAR_MPSIZ                     USB_OTG_HCCHAR_MPSIZ_Msk                     /*!< Maximum packet size */

#define USB_OTG_HCCHAR_EPNUM_Pos                 (11U)
#define USB_OTG_HCCHAR_EPNUM_Msk                 (0xFUL << USB_OTG_HCCHAR_EPNUM_Pos)           /*!< 0x00007800 */
#define USB_OTG_HCCHAR_EPNUM                     USB_OTG_HCCHAR_EPNUM_Msk                     /*!< Endpoint number */
#define USB_OTG_HCCHAR_EPNUM_0                   (0x1UL << USB_OTG_HCCHAR_EPNUM_Pos)           /*!< 0x00000800 */
#define USB_OTG_HCCHAR_EPNUM_1                   (0x2UL << USB_OTG_HCCHAR_EPNUM_Pos)           /*!< 0x00001000 */
#define USB_OTG_HCCHAR_EPNUM_2                   (0x4UL << USB_OTG_HCCHAR_EPNUM_Pos)           /*!< 0x00002000 */
#define USB_OTG_HCCHAR_EPNUM_3                   (0x8UL << USB_OTG_HCCHAR_EPNUM_Pos)           /*!< 0x00004000 */
#define USB_OTG_HCCHAR_EPDIR_Pos                 (15U)
#define USB_OTG_HCCHAR_EPDIR_Msk                 (0x1UL << USB_OTG_HCCHAR_EPDIR_Pos)           /*!< 0x00008000 */
#define USB_OTG_HCCHAR_EPDIR                     USB_OTG_HCCHAR_EPDIR_Msk                     /*!< Endpoint direction */
#define USB_OTG_HCCHAR_LSDEV_Pos                 (17U)
#define USB_OTG_HCCHAR_LSDEV_Msk                 (0x1UL << USB_OTG_HCCHAR_LSDEV_Pos)           /*!< 0x00020000 */
#define USB_OTG_HCCHAR_LSDEV                     USB_OTG_HCCHAR_LSDEV_Msk                     /*!< Low-speed device */

#define USB_OTG_HCCHAR_EPTYP_Pos                 (18U)
#define USB_OTG_HCCHAR_EPTYP_Msk                 (0x3UL << USB_OTG_HCCHAR_EPTYP_Pos)           /*!< 0x000C0000 */
#define USB_OTG_HCCHAR_EPTYP                     USB_OTG_HCCHAR_EPTYP_Msk                     /*!< Endpoint type */
#define USB_OTG_HCCHAR_EPTYP_0                   (0x1UL << USB_OTG_HCCHAR_EPTYP_Pos)           /*!< 0x00040000 */
#define USB_OTG_HCCHAR_EPTYP_1                   (0x2UL << USB_OTG_HCCHAR_EPTYP_Pos)           /*!< 0x00080000 */

#define USB_OTG_HCCHAR_MC_Pos                    (20U)
#define USB_OTG_HCCHAR_MC_Msk                    (0x3UL << USB_OTG_HCCHAR_MC_Pos)              /*!< 0x00300000 */
#define USB_OTG_HCCHAR_MC                        USB_OTG_HCCHAR_MC_Msk                        /*!< Multi Count (MC) / Error Count (EC) */
#define USB_OTG_HCCHAR_MC_0                      (0x1UL << USB_OTG_HCCHAR_MC_Pos)              /*!< 0x00100000 */
#define USB_OTG_HCCHAR_MC_1                      (0x2UL << USB_OTG_HCCHAR_MC_Pos)              /*!< 0x00200000 */

#define USB_OTG_HCCHAR_DAD_Pos                   (22U)
#define USB_OTG_HCCHAR_DAD_Msk                   (0x7FUL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x1FC00000 */
#define USB_OTG_HCCHAR_DAD                       USB_OTG_HCCHAR_DAD_Msk                       /*!< Device address */
#define USB_OTG_HCCHAR_DAD_0                     (0x01UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x00400000 */
#define USB_OTG_HCCHAR_DAD_1                     (0x02UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x00800000 */
#define USB_OTG_HCCHAR_DAD_2                     (0x04UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x01000000 */
#define USB_OTG_HCCHAR_DAD_3                     (0x08UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x02000000 */
#define USB_OTG_HCCHAR_DAD_4                     (0x10UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x04000000 */
#define USB_OTG_HCCHAR_DAD_5                     (0x20UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x08000000 */
#define USB_OTG_HCCHAR_DAD_6                     (0x40UL << USB_OTG_HCCHAR_DAD_Pos)            /*!< 0x10000000 */
#define USB_OTG_HCCHAR_ODDFRM_Pos                (29U)
#define USB_OTG_HCCHAR_ODDFRM_Msk                (0x1UL << USB_OTG_HCCHAR_ODDFRM_Pos)          /*!< 0x20000000 */
#define USB_OTG_HCCHAR_ODDFRM                    USB_OTG_HCCHAR_ODDFRM_Msk                    /*!< Odd frame */
#define USB_OTG_HCCHAR_CHDIS_Pos                 (30U)
#define USB_OTG_HCCHAR_CHDIS_Msk                 (0x1UL << USB_OTG_HCCHAR_CHDIS_Pos)           /*!< 0x40000000 */
#define USB_OTG_HCCHAR_CHDIS                     USB_OTG_HCCHAR_CHDIS_Msk                     /*!< Channel disable */
#define USB_OTG_HCCHAR_CHENA_Pos                 (31U)
#define USB_OTG_HCCHAR_CHENA_Msk                 (0x1UL << USB_OTG_HCCHAR_CHENA_Pos)           /*!< 0x80000000 */
#define USB_OTG_HCCHAR_CHENA                     USB_OTG_HCCHAR_CHENA_Msk                     /*!< Channel enable */

/********************  Bit definition for USB_OTG_HCSPLT register  ********************/
#define USB_OTG_HCSPLT_PRTADDR_Pos               (0U)
#define USB_OTG_HCSPLT_PRTADDR_Msk               (0x7FUL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x0000007F */
#define USB_OTG_HCSPLT_PRTADDR                   USB_OTG_HCSPLT_PRTADDR_Msk                   /*!< Port address */
#define USB_OTG_HCSPLT_PRTADDR_0                 (0x01UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000001 */
#define USB_OTG_HCSPLT_PRTADDR_1                 (0x02UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000002 */
#define USB_OTG_HCSPLT_PRTADDR_2                 (0x04UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000004 */
#define USB_OTG_HCSPLT_PRTADDR_3                 (0x08UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000008 */
#define USB_OTG_HCSPLT_PRTADDR_4                 (0x10UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000010 */
#define USB_OTG_HCSPLT_PRTADDR_5                 (0x20UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000020 */
#define USB_OTG_HCSPLT_PRTADDR_6                 (0x40UL << USB_OTG_HCSPLT_PRTADDR_Pos)        /*!< 0x00000040 */

#define USB_OTG_HCSPLT_HUBADDR_Pos               (7U)
#define USB_OTG_HCSPLT_HUBADDR_Msk               (0x7FUL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00003F80 */
#define USB_OTG_HCSPLT_HUBADDR                   USB_OTG_HCSPLT_HUBADDR_Msk                   /*!< Hub address */
#define USB_OTG_HCSPLT_HUBADDR_0                 (0x01UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00000080 */
#define USB_OTG_HCSPLT_HUBADDR_1                 (0x02UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00000100 */
#define USB_OTG_HCSPLT_HUBADDR_2                 (0x04UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00000200 */
#define USB_OTG_HCSPLT_HUBADDR_3                 (0x08UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00000400 */
#define USB_OTG_HCSPLT_HUBADDR_4                 (0x10UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00000800 */
#define USB_OTG_HCSPLT_HUBADDR_5                 (0x20UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00001000 */
#define USB_OTG_HCSPLT_HUBADDR_6                 (0x40UL << USB_OTG_HCSPLT_HUBADDR_Pos)        /*!< 0x00002000 */

#define USB_OTG_HCSPLT_XACTPOS_Pos               (14U)
#define USB_OTG_HCSPLT_XACTPOS_Msk               (0x3UL << USB_OTG_HCSPLT_XACTPOS_Pos)         /*!< 0x0000C000 */
#define USB_OTG_HCSPLT_XACTPOS                   USB_OTG_HCSPLT_XACTPOS_Msk                   /*!< XACTPOS */
#define USB_OTG_HCSPLT_XACTPOS_0                 (0x1UL << USB_OTG_HCSPLT_XACTPOS_Pos)         /*!< 0x00004000 */
#define USB_OTG_HCSPLT_XACTPOS_1                 (0x2UL << USB_OTG_HCSPLT_XACTPOS_Pos)         /*!< 0x00008000 */
#define USB_OTG_HCSPLT_COMPLSPLT_Pos             (16U)
#define USB_OTG_HCSPLT_COMPLSPLT_Msk             (0x1UL << USB_OTG_HCSPLT_COMPLSPLT_Pos)       /*!< 0x00010000 */
#define USB_OTG_HCSPLT_COMPLSPLT                 USB_OTG_HCSPLT_COMPLSPLT_Msk                 /*!< Do complete split */
#define USB_OTG_HCSPLT_SPLITEN_Pos               (31U)
#define USB_OTG_HCSPLT_SPLITEN_Msk               (0x1UL << USB_OTG_HCSPLT_SPLITEN_Pos)         /*!< 0x80000000 */
#define USB_OTG_HCSPLT_SPLITEN                   USB_OTG_HCSPLT_SPLITEN_Msk                   /*!< Split enable */

/********************  Bit definition for USB_OTG_HCINT register  ********************/
#define USB_OTG_HCINT_XFRC_Pos                   (0U)
#define USB_OTG_HCINT_XFRC_Msk                   (0x1UL << USB_OTG_HCINT_XFRC_Pos)             /*!< 0x00000001 */
#define USB_OTG_HCINT_XFRC                       USB_OTG_HCINT_XFRC_Msk                       /*!< Transfer completed */
#define USB_OTG_HCINT_CHH_Pos                    (1U)
#define USB_OTG_HCINT_CHH_Msk                    (0x1UL << USB_OTG_HCINT_CHH_Pos)              /*!< 0x00000002 */
#define USB_OTG_HCINT_CHH                        USB_OTG_HCINT_CHH_Msk                        /*!< Channel halted */
#define USB_OTG_HCINT_AHBERR_Pos                 (2U)
#define USB_OTG_HCINT_AHBERR_Msk                 (0x1UL << USB_OTG_HCINT_AHBERR_Pos)           /*!< 0x00000004 */
#define USB_OTG_HCINT_AHBERR                     USB_OTG_HCINT_AHBERR_Msk                     /*!< AHB error */
#define USB_OTG_HCINT_STALL_Pos                  (3U)
#define USB_OTG_HCINT_STALL_Msk                  (0x1UL << USB_OTG_HCINT_STALL_Pos)            /*!< 0x00000008 */
#define USB_OTG_HCINT_STALL                      USB_OTG_HCINT_STALL_Msk                      /*!< STALL response received interrupt */
#define USB_OTG_HCINT_NAK_Pos                    (4U)
#define USB_OTG_HCINT_NAK_Msk                    (0x1UL << USB_OTG_HCINT_NAK_Pos)              /*!< 0x00000010 */
#define USB_OTG_HCINT_NAK                        USB_OTG_HCINT_NAK_Msk                        /*!< NAK response received interrupt */
#define USB_OTG_HCINT_ACK_Pos                    (5U)
#define USB_OTG_HCINT_ACK_Msk                    (0x1UL << USB_OTG_HCINT_ACK_Pos)              /*!< 0x00000020 */
#define USB_OTG_HCINT_ACK                        USB_OTG_HCINT_ACK_Msk                        /*!< ACK response received/transmitted interrupt */
#define USB_OTG_HCINT_NYET_Pos                   (6U)
#define USB_OTG_HCINT_NYET_Msk                   (0x1UL << USB_OTG_HCINT_NYET_Pos)             /*!< 0x00000040 */
#define USB_OTG_HCINT_NYET                       USB_OTG_HCINT_NYET_Msk                       /*!< Response received interrupt */
#define USB_OTG_HCINT_TXERR_Pos                  (7U)
#define USB_OTG_HCINT_TXERR_Msk                  (0x1UL << USB_OTG_HCINT_TXERR_Pos)            /*!< 0x00000080 */
#define USB_OTG_HCINT_TXERR                      USB_OTG_HCINT_TXERR_Msk                      /*!< Transaction error */
#define USB_OTG_HCINT_BBERR_Pos                  (8U)
#define USB_OTG_HCINT_BBERR_Msk                  (0x1UL << USB_OTG_HCINT_BBERR_Pos)            /*!< 0x00000100 */
#define USB_OTG_HCINT_BBERR                      USB_OTG_HCINT_BBERR_Msk                      /*!< Babble error */
#define USB_OTG_HCINT_FRMOR_Pos                  (9U)
#define USB_OTG_HCINT_FRMOR_Msk                  (0x1UL << USB_OTG_HCINT_FRMOR_Pos)            /*!< 0x00000200 */
#define USB_OTG_HCINT_FRMOR                      USB_OTG_HCINT_FRMOR_Msk                      /*!< Frame overrun */
#define USB_OTG_HCINT_DTERR_Pos                  (10U)
#define USB_OTG_HCINT_DTERR_Msk                  (0x1UL << USB_OTG_HCINT_DTERR_Pos)            /*!< 0x00000400 */
#define USB_OTG_HCINT_DTERR                      USB_OTG_HCINT_DTERR_Msk                      /*!< Data toggle error */

/********************  Bit definition for USB_OTG_DIEPINT register  ********************/
#define USB_OTG_DIEPINT_XFRC_Pos                 (0U)
#define USB_OTG_DIEPINT_XFRC_Msk                 (0x1UL << USB_OTG_DIEPINT_XFRC_Pos)           /*!< 0x00000001 */
#define USB_OTG_DIEPINT_XFRC                     USB_OTG_DIEPINT_XFRC_Msk                     /*!< Transfer completed interrupt */
#define USB_OTG_DIEPINT_EPDISD_Pos               (1U)
#define USB_OTG_DIEPINT_EPDISD_Msk               (0x1UL << USB_OTG_DIEPINT_EPDISD_Pos)         /*!< 0x00000002 */
#define USB_OTG_DIEPINT_EPDISD                   USB_OTG_DIEPINT_EPDISD_Msk                   /*!< Endpoint disabled interrupt */
#define USB_OTG_DIEPINT_TOC_Pos                  (3U)
#define USB_OTG_DIEPINT_TOC_Msk                  (0x1UL << USB_OTG_DIEPINT_TOC_Pos)            /*!< 0x00000008 */
#define USB_OTG_DIEPINT_TOC                      USB_OTG_DIEPINT_TOC_Msk                      /*!< Timeout condition */
#define USB_OTG_DIEPINT_ITTXFE_Pos               (4U)
#define USB_OTG_DIEPINT_ITTXFE_Msk               (0x1UL << USB_OTG_DIEPINT_ITTXFE_Pos)         /*!< 0x00000010 */
#define USB_OTG_DIEPINT_ITTXFE                   USB_OTG_DIEPINT_ITTXFE_Msk                   /*!< IN token received when TxFIFO is empty */
#define USB_OTG_DIEPINT_INEPNE_Pos               (6U)
#define USB_OTG_DIEPINT_INEPNE_Msk               (0x1UL << USB_OTG_DIEPINT_INEPNE_Pos)         /*!< 0x00000040 */
#define USB_OTG_DIEPINT_INEPNE                   USB_OTG_DIEPINT_INEPNE_Msk                   /*!< IN endpoint NAK effective */
#define USB_OTG_DIEPINT_TXFE_Pos                 (7U)
#define USB_OTG_DIEPINT_TXFE_Msk                 (0x1UL << USB_OTG_DIEPINT_TXFE_Pos)           /*!< 0x00000080 */
#define USB_OTG_DIEPINT_TXFE                     USB_OTG_DIEPINT_TXFE_Msk                     /*!< Transmit FIFO empty */
#define USB_OTG_DIEPINT_TXFIFOUDRN_Pos           (8U)
#define USB_OTG_DIEPINT_TXFIFOUDRN_Msk           (0x1UL << USB_OTG_DIEPINT_TXFIFOUDRN_Pos)     /*!< 0x00000100 */
#define USB_OTG_DIEPINT_TXFIFOUDRN               USB_OTG_DIEPINT_TXFIFOUDRN_Msk               /*!< Transmit Fifo Underrun */
#define USB_OTG_DIEPINT_BNA_Pos                  (9U)
#define USB_OTG_DIEPINT_BNA_Msk                  (0x1UL << USB_OTG_DIEPINT_BNA_Pos)            /*!< 0x00000200 */
#define USB_OTG_DIEPINT_BNA                      USB_OTG_DIEPINT_BNA_Msk                      /*!< Buffer not available interrupt */
#define USB_OTG_DIEPINT_PKTDRPSTS_Pos            (11U)
#define USB_OTG_DIEPINT_PKTDRPSTS_Msk            (0x1UL << USB_OTG_DIEPINT_PKTDRPSTS_Pos)      /*!< 0x00000800 */
#define USB_OTG_DIEPINT_PKTDRPSTS                USB_OTG_DIEPINT_PKTDRPSTS_Msk                /*!< Packet dropped status */
#define USB_OTG_DIEPINT_BERR_Pos                 (12U)
#define USB_OTG_DIEPINT_BERR_Msk                 (0x1UL << USB_OTG_DIEPINT_BERR_Pos)           /*!< 0x00001000 */
#define USB_OTG_DIEPINT_BERR                     USB_OTG_DIEPINT_BERR_Msk                     /*!< Babble error interrupt */
#define USB_OTG_DIEPINT_NAK_Pos                  (13U)
#define USB_OTG_DIEPINT_NAK_Msk                  (0x1UL << USB_OTG_DIEPINT_NAK_Pos)            /*!< 0x00002000 */
#define USB_OTG_DIEPINT_NAK                      USB_OTG_DIEPINT_NAK_Msk                      /*!< NAK interrupt */

/********************  Bit definition for USB_OTG_HCINTMSK register  ********************/
#define USB_OTG_HCINTMSK_XFRCM_Pos               (0U)
#define USB_OTG_HCINTMSK_XFRCM_Msk               (0x1UL << USB_OTG_HCINTMSK_XFRCM_Pos)         /*!< 0x00000001 */
#define USB_OTG_HCINTMSK_XFRCM                   USB_OTG_HCINTMSK_XFRCM_Msk                   /*!< Transfer completed mask */
#define USB_OTG_HCINTMSK_CHHM_Pos                (1U)
#define USB_OTG_HCINTMSK_CHHM_Msk                (0x1UL << USB_OTG_HCINTMSK_CHHM_Pos)          /*!< 0x00000002 */
#define USB_OTG_HCINTMSK_CHHM                    USB_OTG_HCINTMSK_CHHM_Msk                    /*!< Channel halted mask */
#define USB_OTG_HCINTMSK_AHBERR_Pos              (2U)
#define USB_OTG_HCINTMSK_AHBERR_Msk              (0x1UL << USB_OTG_HCINTMSK_AHBERR_Pos)        /*!< 0x00000004 */
#define USB_OTG_HCINTMSK_AHBERR                  USB_OTG_HCINTMSK_AHBERR_Msk                  /*!< AHB error */
#define USB_OTG_HCINTMSK_STALLM_Pos              (3U)
#define USB_OTG_HCINTMSK_STALLM_Msk              (0x1UL << USB_OTG_HCINTMSK_STALLM_Pos)        /*!< 0x00000008 */
#define USB_OTG_HCINTMSK_STALLM                  USB_OTG_HCINTMSK_STALLM_Msk                  /*!< STALL response received interrupt mask */
#define USB_OTG_HCINTMSK_NAKM_Pos                (4U)
#define USB_OTG_HCINTMSK_NAKM_Msk                (0x1UL << USB_OTG_HCINTMSK_NAKM_Pos)          /*!< 0x00000010 */
#define USB_OTG_HCINTMSK_NAKM                    USB_OTG_HCINTMSK_NAKM_Msk                    /*!< NAK response received interrupt mask */
#define USB_OTG_HCINTMSK_ACKM_Pos                (5U)
#define USB_OTG_HCINTMSK_ACKM_Msk                (0x1UL << USB_OTG_HCINTMSK_ACKM_Pos)          /*!< 0x00000020 */
#define USB_OTG_HCINTMSK_ACKM                    USB_OTG_HCINTMSK_ACKM_Msk                    /*!< ACK response received/transmitted interrupt mask */
#define USB_OTG_HCINTMSK_NYET_Pos                (6U)
#define USB_OTG_HCINTMSK_NYET_Msk                (0x1UL << USB_OTG_HCINTMSK_NYET_Pos)          /*!< 0x00000040 */
#define USB_OTG_HCINTMSK_NYET                    USB_OTG_HCINTMSK_NYET_Msk                    /*!< response received interrupt mask */
#define USB_OTG_HCINTMSK_TXERRM_Pos              (7U)
#define USB_OTG_HCINTMSK_TXERRM_Msk              (0x1UL << USB_OTG_HCINTMSK_TXERRM_Pos)        /*!< 0x00000080 */
#define USB_OTG_HCINTMSK_TXERRM                  USB_OTG_HCINTMSK_TXERRM_Msk                  /*!< Transaction error mask */
#define USB_OTG_HCINTMSK_BBERRM_Pos              (8U)
#define USB_OTG_HCINTMSK_BBERRM_Msk              (0x1UL << USB_OTG_HCINTMSK_BBERRM_Pos)        /*!< 0x00000100 */
#define USB_OTG_HCINTMSK_BBERRM                  USB_OTG_HCINTMSK_BBERRM_Msk                  /*!< Babble error mask */
#define USB_OTG_HCINTMSK_FRMORM_Pos              (9U)
#define USB_OTG_HCINTMSK_FRMORM_Msk              (0x1UL << USB_OTG_HCINTMSK_FRMORM_Pos)        /*!< 0x00000200 */
#define USB_OTG_HCINTMSK_FRMORM                  USB_OTG_HCINTMSK_FRMORM_Msk                  /*!< Frame overrun mask */
#define USB_OTG_HCINTMSK_DTERRM_Pos              (10U)
#define USB_OTG_HCINTMSK_DTERRM_Msk              (0x1UL << USB_OTG_HCINTMSK_DTERRM_Pos)        /*!< 0x00000400 */
#define USB_OTG_HCINTMSK_DTERRM                  USB_OTG_HCINTMSK_DTERRM_Msk                  /*!< Data toggle error mask */

/********************  Bit definition for USB_OTG_DIEPTSIZ register  ********************/
#define USB_OTG_DIEPTSIZ_XFRSIZ_Pos              (0U)
#define USB_OTG_DIEPTSIZ_XFRSIZ_Msk              (0x7FFFFUL << USB_OTG_DIEPTSIZ_XFRSIZ_Pos)    /*!< 0x0007FFFF */
#define USB_OTG_DIEPTSIZ_XFRSIZ                  USB_OTG_DIEPTSIZ_XFRSIZ_Msk                  /*!< Transfer size */
#define USB_OTG_DIEPTSIZ_PKTCNT_Pos              (19U)
#define USB_OTG_DIEPTSIZ_PKTCNT_Msk              (0x3FFUL << USB_OTG_DIEPTSIZ_PKTCNT_Pos)      /*!< 0x1FF80000 */
#define USB_OTG_DIEPTSIZ_PKTCNT                  USB_OTG_DIEPTSIZ_PKTCNT_Msk                  /*!< Packet count */
#define USB_OTG_DIEPTSIZ_MULCNT_Pos              (29U)
#define USB_OTG_DIEPTSIZ_MULCNT_Msk              (0x3UL << USB_OTG_DIEPTSIZ_MULCNT_Pos)        /*!< 0x60000000 */
#define USB_OTG_DIEPTSIZ_MULCNT                  USB_OTG_DIEPTSIZ_MULCNT_Msk                  /*!< Packet count */

/********************  Bit definition for USB_OTG_HCTSIZ register  ********************/
#define USB_OTG_HCTSIZ_XFRSIZ_Pos                (0U)
#define USB_OTG_HCTSIZ_XFRSIZ_Msk                (0x7FFFFUL << USB_OTG_HCTSIZ_XFRSIZ_Pos)      /*!< 0x0007FFFF */
#define USB_OTG_HCTSIZ_XFRSIZ                    USB_OTG_HCTSIZ_XFRSIZ_Msk                    /*!< Transfer size */
#define USB_OTG_HCTSIZ_PKTCNT_Pos                (19U)
#define USB_OTG_HCTSIZ_PKTCNT_Msk                (0x3FFUL << USB_OTG_HCTSIZ_PKTCNT_Pos)        /*!< 0x1FF80000 */
#define USB_OTG_HCTSIZ_PKTCNT                    USB_OTG_HCTSIZ_PKTCNT_Msk                    /*!< Packet count */
#define USB_OTG_HCTSIZ_DOPING_Pos                (31U)
#define USB_OTG_HCTSIZ_DOPING_Msk                (0x1UL << USB_OTG_HCTSIZ_DOPING_Pos)          /*!< 0x80000000 */
#define USB_OTG_HCTSIZ_DOPING                    USB_OTG_HCTSIZ_DOPING_Msk                    /*!< Do PING */
#define USB_OTG_HCTSIZ_DPID_Pos                  (29U)
#define USB_OTG_HCTSIZ_DPID_Msk                  (0x3UL << USB_OTG_HCTSIZ_DPID_Pos)            /*!< 0x60000000 */
#define USB_OTG_HCTSIZ_DPID                      USB_OTG_HCTSIZ_DPID_Msk                      /*!< Data PID */
#define USB_OTG_HCTSIZ_DPID_0                    (0x1UL << USB_OTG_HCTSIZ_DPID_Pos)            /*!< 0x20000000 */
#define USB_OTG_HCTSIZ_DPID_1                    (0x2UL << USB_OTG_HCTSIZ_DPID_Pos)            /*!< 0x40000000 */

/********************  Bit definition for USB_OTG_DIEPDMA register  ********************/
#define USB_OTG_DIEPDMA_DMAADDR_Pos              (0U)
#define USB_OTG_DIEPDMA_DMAADDR_Msk              (0xFFFFFFFFUL << USB_OTG_DIEPDMA_DMAADDR_Pos) /*!< 0xFFFFFFFF */
#define USB_OTG_DIEPDMA_DMAADDR                  USB_OTG_DIEPDMA_DMAADDR_Msk                  /*!< DMA address */

/********************  Bit definition for USB_OTG_HCDMA register  ********************/
#define USB_OTG_HCDMA_DMAADDR_Pos                (0U)
#define USB_OTG_HCDMA_DMAADDR_Msk                (0xFFFFFFFFUL << USB_OTG_HCDMA_DMAADDR_Pos)   /*!< 0xFFFFFFFF */
#define USB_OTG_HCDMA_DMAADDR                    USB_OTG_HCDMA_DMAADDR_Msk                    /*!< DMA address */

/********************  Bit definition for USB_OTG_DTXFSTS register  ********************/
#define USB_OTG_DTXFSTS_INEPTFSAV_Pos            (0U)
#define USB_OTG_DTXFSTS_INEPTFSAV_Msk            (0xFFFFUL << USB_OTG_DTXFSTS_INEPTFSAV_Pos)   /*!< 0x0000FFFF */
#define USB_OTG_DTXFSTS_INEPTFSAV                USB_OTG_DTXFSTS_INEPTFSAV_Msk                /*!< IN endpoint TxFIFO space avail */

/********************  Bit definition for USB_OTG_DIEPTXF register  ********************/
#define USB_OTG_DIEPTXF_INEPTXSA_Pos             (0U)
#define USB_OTG_DIEPTXF_INEPTXSA_Msk             (0xFFFFUL << USB_OTG_DIEPTXF_INEPTXSA_Pos)    /*!< 0x0000FFFF */
#define USB_OTG_DIEPTXF_INEPTXSA                 USB_OTG_DIEPTXF_INEPTXSA_Msk                 /*!< IN endpoint FIFOx transmit RAM start address */
#define USB_OTG_DIEPTXF_INEPTXFD_Pos             (16U)
#define USB_OTG_DIEPTXF_INEPTXFD_Msk             (0xFFFFUL << USB_OTG_DIEPTXF_INEPTXFD_Pos)    /*!< 0xFFFF0000 */
#define USB_OTG_DIEPTXF_INEPTXFD                 USB_OTG_DIEPTXF_INEPTXFD_Msk                 /*!< IN endpoint TxFIFO depth */

/********************  Bit definition for USB_OTG_DOEPCTL register  ********************/
#define USB_OTG_DOEPCTL_MPSIZ_Pos                (0U)
#define USB_OTG_DOEPCTL_MPSIZ_Msk                (0x7FFUL << USB_OTG_DOEPCTL_MPSIZ_Pos)        /*!< 0x000007FF */
#define USB_OTG_DOEPCTL_MPSIZ                    USB_OTG_DOEPCTL_MPSIZ_Msk                    /*!< Maximum packet size */
#define USB_OTG_DOEPCTL_USBAEP_Pos               (15U)
#define USB_OTG_DOEPCTL_USBAEP_Msk               (0x1UL << USB_OTG_DOEPCTL_USBAEP_Pos)         /*!< 0x00008000 */
#define USB_OTG_DOEPCTL_USBAEP                   USB_OTG_DOEPCTL_USBAEP_Msk                   /*!< USB active endpoint */
#define USB_OTG_DOEPCTL_NAKSTS_Pos               (17U)
#define USB_OTG_DOEPCTL_NAKSTS_Msk               (0x1UL << USB_OTG_DOEPCTL_NAKSTS_Pos)         /*!< 0x00020000 */
#define USB_OTG_DOEPCTL_NAKSTS                   USB_OTG_DOEPCTL_NAKSTS_Msk                   /*!< NAK status */
#define USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Pos       (28U)
#define USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk       (0x1UL << USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Pos) /*!< 0x10000000 */
#define USB_OTG_DOEPCTL_SD0PID_SEVNFRM           USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk           /*!< Set DATA0 PID */
#define USB_OTG_DOEPCTL_SODDFRM_Pos              (29U)
#define USB_OTG_DOEPCTL_SODDFRM_Msk              (0x1UL << USB_OTG_DOEPCTL_SODDFRM_Pos)        /*!< 0x20000000 */
#define USB_OTG_DOEPCTL_SODDFRM                  USB_OTG_DOEPCTL_SODDFRM_Msk                  /*!< Set odd frame */
#define USB_OTG_DOEPCTL_EPTYP_Pos                (18U)
#define USB_OTG_DOEPCTL_EPTYP_Msk                (0x3UL << USB_OTG_DOEPCTL_EPTYP_Pos)          /*!< 0x000C0000 */
#define USB_OTG_DOEPCTL_EPTYP                    USB_OTG_DOEPCTL_EPTYP_Msk                    /*!< Endpoint type */
#define USB_OTG_DOEPCTL_EPTYP_0                  (0x1UL << USB_OTG_DOEPCTL_EPTYP_Pos)          /*!< 0x00040000 */
#define USB_OTG_DOEPCTL_EPTYP_1                  (0x2UL << USB_OTG_DOEPCTL_EPTYP_Pos)          /*!< 0x00080000 */
#define USB_OTG_DOEPCTL_SNPM_Pos                 (20U)
#define USB_OTG_DOEPCTL_SNPM_Msk                 (0x1UL << USB_OTG_DOEPCTL_SNPM_Pos)           /*!< 0x00100000 */
#define USB_OTG_DOEPCTL_SNPM                     USB_OTG_DOEPCTL_SNPM_Msk                     /*!< Snoop mode */
#define USB_OTG_DOEPCTL_STALL_Pos                (21U)
#define USB_OTG_DOEPCTL_STALL_Msk                (0x1UL << USB_OTG_DOEPCTL_STALL_Pos)          /*!< 0x00200000 */
#define USB_OTG_DOEPCTL_STALL                    USB_OTG_DOEPCTL_STALL_Msk                    /*!< STALL handshake */
#define USB_OTG_DOEPCTL_CNAK_Pos                 (26U)
#define USB_OTG_DOEPCTL_CNAK_Msk                 (0x1UL << USB_OTG_DOEPCTL_CNAK_Pos)           /*!< 0x04000000 */
#define USB_OTG_DOEPCTL_CNAK                     USB_OTG_DOEPCTL_CNAK_Msk                     /*!< Clear NAK */
#define USB_OTG_DOEPCTL_SNAK_Pos                 (27U)
#define USB_OTG_DOEPCTL_SNAK_Msk                 (0x1UL << USB_OTG_DOEPCTL_SNAK_Pos)           /*!< 0x08000000 */
#define USB_OTG_DOEPCTL_SNAK                     USB_OTG_DOEPCTL_SNAK_Msk                     /*!< Set NAK */
#define USB_OTG_DOEPCTL_EPDIS_Pos                (30U)
#define USB_OTG_DOEPCTL_EPDIS_Msk                (0x1UL << USB_OTG_DOEPCTL_EPDIS_Pos)          /*!< 0x40000000 */
#define USB_OTG_DOEPCTL_EPDIS                    USB_OTG_DOEPCTL_EPDIS_Msk                    /*!< Endpoint disable */
#define USB_OTG_DOEPCTL_EPENA_Pos                (31U)
#define USB_OTG_DOEPCTL_EPENA_Msk                (0x1UL << USB_OTG_DOEPCTL_EPENA_Pos)          /*!< 0x80000000 */
#define USB_OTG_DOEPCTL_EPENA                    USB_OTG_DOEPCTL_EPENA_Msk                    /*!< Endpoint enable */

/********************  Bit definition for USB_OTG_DOEPINT register  ********************/
#define USB_OTG_DOEPINT_XFRC_Pos                 (0U)
#define USB_OTG_DOEPINT_XFRC_Msk                 (0x1UL << USB_OTG_DOEPINT_XFRC_Pos)           /*!< 0x00000001 */
#define USB_OTG_DOEPINT_XFRC                     USB_OTG_DOEPINT_XFRC_Msk                     /*!< Transfer completed interrupt */
#define USB_OTG_DOEPINT_EPDISD_Pos               (1U)
#define USB_OTG_DOEPINT_EPDISD_Msk               (0x1UL << USB_OTG_DOEPINT_EPDISD_Pos)         /*!< 0x00000002 */
#define USB_OTG_DOEPINT_EPDISD                   USB_OTG_DOEPINT_EPDISD_Msk                   /*!< Endpoint disabled interrupt */
#define USB_OTG_DOEPINT_STUP_Pos                 (3U)
#define USB_OTG_DOEPINT_STUP_Msk                 (0x1UL << USB_OTG_DOEPINT_STUP_Pos)           /*!< 0x00000008 */
#define USB_OTG_DOEPINT_STUP                     USB_OTG_DOEPINT_STUP_Msk                     /*!< SETUP phase done */
#define USB_OTG_DOEPINT_OTEPDIS_Pos              (4U)
#define USB_OTG_DOEPINT_OTEPDIS_Msk              (0x1UL << USB_OTG_DOEPINT_OTEPDIS_Pos)        /*!< 0x00000010 */
#define USB_OTG_DOEPINT_OTEPDIS                  USB_OTG_DOEPINT_OTEPDIS_Msk                  /*!< OUT token received when endpoint disabled */
#define USB_OTG_DOEPINT_B2BSTUP_Pos              (6U)
#define USB_OTG_DOEPINT_B2BSTUP_Msk              (0x1UL << USB_OTG_DOEPINT_B2BSTUP_Pos)        /*!< 0x00000040 */
#define USB_OTG_DOEPINT_B2BSTUP                  USB_OTG_DOEPINT_B2BSTUP_Msk                  /*!< Back-to-back SETUP packets received */
#define USB_OTG_DOEPINT_NYET_Pos                 (14U)
#define USB_OTG_DOEPINT_NYET_Msk                 (0x1UL << USB_OTG_DOEPINT_NYET_Pos)           /*!< 0x00004000 */
#define USB_OTG_DOEPINT_NYET                     USB_OTG_DOEPINT_NYET_Msk                     /*!< NYET interrupt */

/********************  Bit definition for USB_OTG_DOEPTSIZ register  ********************/
#define USB_OTG_DOEPTSIZ_XFRSIZ_Pos              (0U)
#define USB_OTG_DOEPTSIZ_XFRSIZ_Msk              (0x7FFFFUL << USB_OTG_DOEPTSIZ_XFRSIZ_Pos)    /*!< 0x0007FFFF */
#define USB_OTG_DOEPTSIZ_XFRSIZ                  USB_OTG_DOEPTSIZ_XFRSIZ_Msk                  /*!< Transfer size */
#define USB_OTG_DOEPTSIZ_PKTCNT_Pos              (19U)
#define USB_OTG_DOEPTSIZ_PKTCNT_Msk              (0x3FFUL << USB_OTG_DOEPTSIZ_PKTCNT_Pos)      /*!< 0x1FF80000 */
#define USB_OTG_DOEPTSIZ_PKTCNT                  USB_OTG_DOEPTSIZ_PKTCNT_Msk                  /*!< Packet count */

#define USB_OTG_DOEPTSIZ_STUPCNT_Pos             (29U)
#define USB_OTG_DOEPTSIZ_STUPCNT_Msk             (0x3UL << USB_OTG_DOEPTSIZ_STUPCNT_Pos)       /*!< 0x60000000 */
#define USB_OTG_DOEPTSIZ_STUPCNT                 USB_OTG_DOEPTSIZ_STUPCNT_Msk                 /*!< SETUP packet count */
#define USB_OTG_DOEPTSIZ_STUPCNT_0               (0x1UL << USB_OTG_DOEPTSIZ_STUPCNT_Pos)       /*!< 0x20000000 */
#define USB_OTG_DOEPTSIZ_STUPCNT_1               (0x2UL << USB_OTG_DOEPTSIZ_STUPCNT_Pos)       /*!< 0x40000000 */

/********************  Bit definition for PCGCCTL register  ********************/
#define USB_OTG_PCGCCTL_STOPCLK_Pos              (0U)
#define USB_OTG_PCGCCTL_STOPCLK_Msk              (0x1UL << USB_OTG_PCGCCTL_STOPCLK_Pos)        /*!< 0x00000001 */
#define USB_OTG_PCGCCTL_STOPCLK                  USB_OTG_PCGCCTL_STOPCLK_Msk                  /*!< SETUP packet count */
#define USB_OTG_PCGCCTL_GATECLK_Pos              (1U)
#define USB_OTG_PCGCCTL_GATECLK_Msk              (0x1UL << USB_OTG_PCGCCTL_GATECLK_Pos)        /*!< 0x00000002 */
#define USB_OTG_PCGCCTL_GATECLK                  USB_OTG_PCGCCTL_GATECLK_Msk                  /*!<Bit 1 */
#define USB_OTG_PCGCCTL_PHYSUSP_Pos              (4U)
#define USB_OTG_PCGCCTL_PHYSUSP_Msk              (0x1UL << USB_OTG_PCGCCTL_PHYSUSP_Pos)        /*!< 0x00000010 */
#define USB_OTG_PCGCCTL_PHYSUSP                  USB_OTG_PCGCCTL_PHYSUSP_Msk                  /*!<Bit 4 */

/********************  Bit definition for PCGCCTL1 register  ********************/
#define USB_OTG_PCGCCTL1_GATEEN_Pos                (0U)
#define USB_OTG_PCGCCTL1_GATEEN_Msk                (0x1UL << USB_OTG_PCGCCTL1_GATEEN_Pos)        /*!< 0x00000001 */
#define USB_OTG_PCGCCTL1_GATEEN                    USB_OTG_PCGCCTL1_GATEEN_Msk                  /*!< GATE ENABLE */
#define USB_OTG_PCGCCTL1_CNTGATECLK_Pos            (1U)
#define USB_OTG_PCGCCTL1_CNTGATECLK_Msk            (0x3UL << USB_OTG_PCGCCTL1_CNTGATECLK_Pos)    /*!< 0x00000002 */
#define USB_OTG_PCGCCTL1_CNTGATECLK                USB_OTG_PCGCCTL1_CNTGATECLK_Msk              /*!<Bit 1 */
#define USB_OTG_PCGCCTL1_RAMGATEEN_Pos             (3U)
#define USB_OTG_PCGCCTL1_RAMGATEEN_Msk             (0x1UL << USB_OTG_PCGCCTL1_RAMGATEEN_Pos)     /*!< 0x00000003 */
#define USB_OTG_PCGCCTL1_RAMGATEEN                 USB_OTG_PCGCCTL1_RAMGATEEN_Msk               /*!<Bit 3 */

/******************************************************************************/
/*                                                                            */
/*                                 VREFBUF                                    */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for VREFBUF_CSR register  ****************/
#define VREFBUF_CSR_ENVR_Pos    (0U)
#define VREFBUF_CSR_ENVR_Msk    (0x1UL << VREFBUF_CSR_ENVR_Pos)                      /*!< 0x00000001 */
#define VREFBUF_CSR_ENVR        VREFBUF_CSR_ENVR_Msk                                /*!<Voltage reference buffer enable */
#define VREFBUF_CSR_HIZ_Pos     (1U)
#define VREFBUF_CSR_HIZ_Msk     (0x1UL << VREFBUF_CSR_HIZ_Pos)                       /*!< 0x00000002 */
#define VREFBUF_CSR_HIZ         VREFBUF_CSR_HIZ_Msk                                 /*!<High impedance mode             */
#define VREFBUF_CSR_VRS_Pos     (4U)
#define VREFBUF_CSR_VRS_Msk     (0x1UL << VREFBUF_CSR_VRS_Pos)                       /*!< 0x00000004 */
#define VREFBUF_CSR_VRS         VREFBUF_CSR_VRS_Msk                                 /*!<Voltage reference scale         */
#define VREFBUF_CSR_VRS_0       (0x01UL<< VREFBUF_CSR_VRS_Pos)                      /*!< 0x000O0010 */
#define VREFBUF_CSR_VRS_1       (0x02UL<< VREFBUF_CSR_VRS_Pos)                      /*!< 0x00000020 */
#define VREFBUF_CSR_VRS_2       (0x04UL<< VREFBUF_CSR_VRS_Pos)                      /*!< 0x00000030 */
#define VREFBUF_CSR_VRR_Pos     (3U)
#define VREFBUF_CSR_VRR_Msk     (0x1UL << VREFBUF_CSR_VRR_Pos)                       /*!< 0x00000008 */
#define VREFBUF_CSR_VRR         VREFBUF_CSR_VRR_Msk                                 /*!<Voltage reference buffer ready  */

/*******************  Bit definition for VREFBUF_CCR register  ******************/
#define VREFBUF_CCR_TRIM_Pos                (0U)
#define VREFBUF_CCR_TRIM_Msk                (0x3FUL << VREFBUF_CCR_TRIM_Pos)        /*!< 0x0000003F */
#define VREFBUF_CCR_TRIM                    VREFBUF_CCR_TRIM_Msk                    /*!<TRIM[5:0] bits (Trimming code)  */

/******************************************************************************/
/*                                                                            */
/*                           Window Watchdog (WWDG)                           */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for WWDG_CR register  ********************/
#define WWDG_CR_T_Pos           (0U)
#define WWDG_CR_T_Msk           (0x7FUL << WWDG_CR_T_Pos)          /*!< 0x0000007F */
#define WWDG_CR_T               WWDG_CR_T_Msk                     /*!< 7-bit counter (MSB to LSB) */
#define WWDG_CR_T_0             (0x1UL << WWDG_CR_T_Pos)           /*!< 0x00000001 */
#define WWDG_CR_T_1             (0x2UL << WWDG_CR_T_Pos)           /*!< 0x00000002 */
#define WWDG_CR_T_2             (0x4UL << WWDG_CR_T_Pos)           /*!< 0x00000004 */
#define WWDG_CR_T_3             (0x8UL << WWDG_CR_T_Pos)           /*!< 0x00000008 */
#define WWDG_CR_T_4             (0x10UL << WWDG_CR_T_Pos)          /*!< 0x00000010 */
#define WWDG_CR_T_5             (0x20UL << WWDG_CR_T_Pos)          /*!< 0x00000020 */
#define WWDG_CR_T_6             (0x40UL << WWDG_CR_T_Pos)          /*!< 0x00000040 */
#define WWDG_CR_WDGA_Pos        (7U)
#define WWDG_CR_WDGA_Msk        (0x1UL << WWDG_CR_WDGA_Pos)        /*!< 0x00000080 */
#define WWDG_CR_WDGA            WWDG_CR_WDGA_Msk                  /*!< Activation bit */

/*******************  Bit definition for WWDG_CFR register  *******************/
#define WWDG_CFR_W_Pos          (0U)
#define WWDG_CFR_W_Msk          (0x7FUL << WWDG_CFR_W_Pos)         /*!< 0x0000007F */
#define WWDG_CFR_W              WWDG_CFR_W_Msk                    /*!< 7-bit window value */
#define WWDG_CFR_W_0            (0x1UL << WWDG_CFR_W_Pos)          /*!< 0x00000001 */
#define WWDG_CFR_W_1            (0x2UL << WWDG_CFR_W_Pos)          /*!< 0x00000002 */
#define WWDG_CFR_W_2            (0x4UL << WWDG_CFR_W_Pos)          /*!< 0x00000004 */
#define WWDG_CFR_W_3            (0x8UL << WWDG_CFR_W_Pos)          /*!< 0x00000008 */
#define WWDG_CFR_W_4            (0x10UL << WWDG_CFR_W_Pos)         /*!< 0x00000010 */
#define WWDG_CFR_W_5            (0x20UL << WWDG_CFR_W_Pos)         /*!< 0x00000020 */
#define WWDG_CFR_W_6            (0x40UL << WWDG_CFR_W_Pos)         /*!< 0x00000040 */
#define WWDG_CFR_EWI_Pos        (9U)
#define WWDG_CFR_EWI_Msk        (0x1UL << WWDG_CFR_EWI_Pos)        /*!< 0x00000200 */
#define WWDG_CFR_EWI            WWDG_CFR_EWI_Msk                  /*!< Early wakeup interrupt */
#define WWDG_CFR_WDGTB_Pos      (11U)
#define WWDG_CFR_WDGTB_Msk      (0x7UL << WWDG_CFR_WDGTB_Pos)      /*!< 0x00003800 */
#define WWDG_CFR_WDGTB          WWDG_CFR_WDGTB_Msk                /*!< Timer base */
#define WWDG_CFR_WDGTB_0        (0x1UL << WWDG_CFR_WDGTB_Pos)    /*!< 0x00000800 */
#define WWDG_CFR_WDGTB_1        (0x2UL << WWDG_CFR_WDGTB_Pos)   /*!< 0x00001000 */
#define WWDG_CFR_WDGTB_2        (0x4UL << WWDG_CFR_WDGTB_Pos)   /*!< 0x00002000 */

/*******************  Bit definition for WWDG_SR register  ********************/
#define WWDG_SR_EWIF_Pos        (0U)
#define WWDG_SR_EWIF_Msk        (0x1UL << WWDG_SR_EWIF_Pos)        /*!< 0x00000001 */
#define WWDG_SR_EWIF            WWDG_SR_EWIF_Msk                  /*!< Early wakeup interrupt flag */

/*****************  Bit definition for WWDG_HWCFGR register  ******************/
#define WWDG_HWCFGR_PREDIV_Pos  (0U)
#define WWDG_HWCFGR_PREDIV_Msk  (0xFFFFUL << WWDG_HWCFGR_PREDIV_Pos) /*!< 0x0000FFFF */
#define WWDG_HWCFGR_PREDIV      WWDG_HWCFGR_PREDIV_Msk            /*!< The watchdog clock is prescaled by 4096 (PREDIV[15:0] + 1). */

/******************  Bit definition for WWDG_VERR register  *******************/
#define WWDG_VERR_MINREV_Pos    (0U)
#define WWDG_VERR_MINREV_Msk    (0xFUL << WWDG_VERR_MINREV_Pos)    /*!< 0x0000000F */
#define WWDG_VERR_MINREV        WWDG_VERR_MINREV_Msk              /*!< IP version minor revision info */
#define WWDG_VERR_MAJREV_Pos    (4U)
#define WWDG_VERR_MAJREV_Msk    (0xFUL << WWDG_VERR_MAJREV_Pos)    /*!< 0x000000F0 */
#define WWDG_VERR_MAJREV        WWDG_VERR_MAJREV_Msk              /*!< IP version major revision info */

/******************  Bit definition for WWDG_IPIDR register  ******************/
#define WWDG_IPIDR_ID_Pos       (0U)
#define WWDG_IPIDR_ID_Msk       (0xFFFFFFFFUL << WWDG_IPIDR_ID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_IPIDR_ID           WWDG_IPIDR_ID_Msk                 /*!< WWDG peripheral identifier */

/******************  Bit definition for WWDG_SIDR register  *******************/
#define WWDG_SIDR_SID_Pos       (0U)
#define WWDG_SIDR_SID_Msk       (0xFFFFFFFFUL << WWDG_SIDR_SID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_SIDR_SID           WWDG_SIDR_SID_Msk                 /*!< The address decoding range is 1 Kbyte */


/**
  * @}
  */

/**
  * @}
  */

/** @addtogroup Exported_macros
  * @{
  */

/******************************* ADC Instances ********************************/
#define IS_ADC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == ADC1) ||                   \
                                       ((INSTANCE) == ADC2))

#define IS_ADC_MULTIMODE_MASTER_INSTANCE(INSTANCE) ((INSTANCE) == ADC1)

#define IS_ADC_COMMON_INSTANCE(INSTANCE) (((INSTANCE) == ADC1_COMMON) ||         \
                                          ((INSTANCE) == ADC2_COMMON))

/******************************** BSEC Instances **********************************/
#define IS_BSEC_ALL_INSTANCE(INSTANCE)       ((INSTANCE) == BSEC)

/******************************* CRC Instances ********************************/
#define IS_CRC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == CRC))


/******************************* DCMI Instances *******************************/
#define IS_DCMI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DCMI)

/******************************* DCMIPP Instances *******************************/
#define IS_DCMIPP_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DCMIPP)

/******************************** DMA Instances *******************************/
#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0)  || \
                                       ((INSTANCE) == HPDMA1_Channel1)  || \
                                       ((INSTANCE) == HPDMA1_Channel2)  || \
                                       ((INSTANCE) == HPDMA1_Channel3)  || \
                                       ((INSTANCE) == HPDMA1_Channel4)  || \
                                       ((INSTANCE) == HPDMA1_Channel5)  || \
                                       ((INSTANCE) == HPDMA1_Channel6)  || \
                                       ((INSTANCE) == HPDMA1_Channel7)  || \
                                       ((INSTANCE) == HPDMA1_Channel8)  || \
                                       ((INSTANCE) == HPDMA1_Channel9)  || \
                                       ((INSTANCE) == HPDMA1_Channel10) || \
                                       ((INSTANCE) == HPDMA1_Channel11) || \
                                       ((INSTANCE) == HPDMA1_Channel12) || \
                                       ((INSTANCE) == HPDMA1_Channel13) || \
                                       ((INSTANCE) == HPDMA1_Channel14) || \
                                       ((INSTANCE) == HPDMA1_Channel15) || \
                                       ((INSTANCE) == HPDMA2_Channel0)  || \
                                       ((INSTANCE) == HPDMA2_Channel1)  || \
                                       ((INSTANCE) == HPDMA2_Channel2)  || \
                                       ((INSTANCE) == HPDMA2_Channel3)  || \
                                       ((INSTANCE) == HPDMA2_Channel4)  || \
                                       ((INSTANCE) == HPDMA2_Channel5)  || \
                                       ((INSTANCE) == HPDMA2_Channel6)  || \
                                       ((INSTANCE) == HPDMA2_Channel7)  || \
                                       ((INSTANCE) == HPDMA2_Channel8)  || \
                                       ((INSTANCE) == HPDMA2_Channel9)  || \
                                       ((INSTANCE) == HPDMA2_Channel10) || \
                                       ((INSTANCE) == HPDMA2_Channel11) || \
                                       ((INSTANCE) == HPDMA2_Channel12) || \
                                       ((INSTANCE) == HPDMA2_Channel13) || \
                                       ((INSTANCE) == HPDMA2_Channel14) || \
                                       ((INSTANCE) == HPDMA2_Channel15) || \
                                       ((INSTANCE) == HPDMA3_Channel0)  || \
                                       ((INSTANCE) == HPDMA3_Channel1)  || \
                                       ((INSTANCE) == HPDMA3_Channel2)  || \
                                       ((INSTANCE) == HPDMA3_Channel3)  || \
                                       ((INSTANCE) == HPDMA3_Channel4)  || \
                                       ((INSTANCE) == HPDMA3_Channel5)  || \
                                       ((INSTANCE) == HPDMA3_Channel6)  || \
                                       ((INSTANCE) == HPDMA3_Channel7)  || \
                                       ((INSTANCE) == HPDMA3_Channel8)  || \
                                       ((INSTANCE) == HPDMA3_Channel9)  || \
                                       ((INSTANCE) == HPDMA3_Channel10) || \
                                       ((INSTANCE) == HPDMA3_Channel11) || \
                                       ((INSTANCE) == HPDMA3_Channel12) || \
                                       ((INSTANCE) == HPDMA3_Channel13) || \
                                       ((INSTANCE) == HPDMA3_Channel14) || \
                                       ((INSTANCE) == HPDMA3_Channel15))
#define IS_HPDMA_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0)  || \
                                     ((INSTANCE) == HPDMA1_Channel1)  || \
                                     ((INSTANCE) == HPDMA1_Channel2)  || \
                                     ((INSTANCE) == HPDMA1_Channel3)  || \
                                     ((INSTANCE) == HPDMA1_Channel4)  || \
                                     ((INSTANCE) == HPDMA1_Channel5)  || \
                                     ((INSTANCE) == HPDMA1_Channel6)  || \
                                     ((INSTANCE) == HPDMA1_Channel7)  || \
                                     ((INSTANCE) == HPDMA1_Channel8)  || \
                                     ((INSTANCE) == HPDMA1_Channel9)  || \
                                     ((INSTANCE) == HPDMA1_Channel10) || \
                                     ((INSTANCE) == HPDMA1_Channel11) || \
                                     ((INSTANCE) == HPDMA1_Channel12) || \
                                     ((INSTANCE) == HPDMA1_Channel13) || \
                                     ((INSTANCE) == HPDMA1_Channel14) || \
                                     ((INSTANCE) == HPDMA1_Channel15) || \
                                     ((INSTANCE) == HPDMA2_Channel0)  || \
                                     ((INSTANCE) == HPDMA2_Channel1)  || \
                                     ((INSTANCE) == HPDMA2_Channel2)  || \
                                     ((INSTANCE) == HPDMA2_Channel3)  || \
                                     ((INSTANCE) == HPDMA2_Channel4)  || \
                                     ((INSTANCE) == HPDMA2_Channel5)  || \
                                     ((INSTANCE) == HPDMA2_Channel6)  || \
                                     ((INSTANCE) == HPDMA2_Channel7)  || \
                                     ((INSTANCE) == HPDMA2_Channel8)  || \
                                     ((INSTANCE) == HPDMA2_Channel9)  || \
                                     ((INSTANCE) == HPDMA2_Channel10) || \
                                     ((INSTANCE) == HPDMA2_Channel11) || \
                                     ((INSTANCE) == HPDMA2_Channel12) || \
                                     ((INSTANCE) == HPDMA2_Channel13) || \
                                     ((INSTANCE) == HPDMA2_Channel14) || \
                                     ((INSTANCE) == HPDMA2_Channel15) || \
                                     ((INSTANCE) == HPDMA3_Channel0)  || \
                                     ((INSTANCE) == HPDMA3_Channel1)  || \
                                     ((INSTANCE) == HPDMA3_Channel2)  || \
                                     ((INSTANCE) == HPDMA3_Channel3)  || \
                                     ((INSTANCE) == HPDMA3_Channel4)  || \
                                     ((INSTANCE) == HPDMA3_Channel5)  || \
                                     ((INSTANCE) == HPDMA3_Channel6)  || \
                                     ((INSTANCE) == HPDMA3_Channel7)  || \
                                     ((INSTANCE) == HPDMA3_Channel8)  || \
                                     ((INSTANCE) == HPDMA3_Channel9)  || \
                                     ((INSTANCE) == HPDMA3_Channel10) || \
                                     ((INSTANCE) == HPDMA3_Channel11) || \
                                     ((INSTANCE) == HPDMA3_Channel12) || \
                                     ((INSTANCE) == HPDMA3_Channel13) || \
                                     ((INSTANCE) == HPDMA3_Channel14) || \
                                     ((INSTANCE) == HPDMA3_Channel15))


#define IS_DMA_2D_ADDRESSING_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel12)  || \
                                                 ((INSTANCE) == HPDMA1_Channel13)  || \
                                                 ((INSTANCE) == HPDMA1_Channel14)  || \
                                                 ((INSTANCE) == HPDMA1_Channel15)  || \
                                                 ((INSTANCE) == HPDMA2_Channel12)  || \
                                                 ((INSTANCE) == HPDMA2_Channel13)  || \
                                                 ((INSTANCE) == HPDMA2_Channel14)  || \
                                                 ((INSTANCE) == HPDMA2_Channel15)  || \
                                                 ((INSTANCE) == HPDMA3_Channel12)  || \
                                                 ((INSTANCE) == HPDMA3_Channel13)  || \
                                                 ((INSTANCE) == HPDMA3_Channel14)  || \
                                                 ((INSTANCE) == HPDMA3_Channel15))
#define IS_DMA_PFREQ_INSTANCE(INSTANCE) (((INSTANCE) == HPDMA1_Channel0)  || \
                                         ((INSTANCE) == HPDMA1_Channel1)  || \
                                         ((INSTANCE) == HPDMA1_Channel2)  || \
                                         ((INSTANCE) == HPDMA1_Channel3)  || \
                                         ((INSTANCE) == HPDMA1_Channel4)  || \
                                         ((INSTANCE) == HPDMA1_Channel5)  || \
                                         ((INSTANCE) == HPDMA1_Channel6)  || \
                                         ((INSTANCE) == HPDMA1_Channel7)  || \
                                         ((INSTANCE) == HPDMA1_Channel8)  || \
                                         ((INSTANCE) == HPDMA1_Channel9)  || \
                                         ((INSTANCE) == HPDMA1_Channel10) || \
                                         ((INSTANCE) == HPDMA1_Channel11) || \
                                         ((INSTANCE) == HPDMA1_Channel12) || \
                                         ((INSTANCE) == HPDMA1_Channel13) || \
                                         ((INSTANCE) == HPDMA1_Channel14) || \
                                         ((INSTANCE) == HPDMA1_Channel15) || \
                                         ((INSTANCE) == HPDMA2_Channel0)  || \
                                         ((INSTANCE) == HPDMA2_Channel1)  || \
                                         ((INSTANCE) == HPDMA2_Channel2)  || \
                                         ((INSTANCE) == HPDMA2_Channel3)  || \
                                         ((INSTANCE) == HPDMA2_Channel4)  || \
                                         ((INSTANCE) == HPDMA2_Channel5)  || \
                                         ((INSTANCE) == HPDMA2_Channel6)  || \
                                         ((INSTANCE) == HPDMA2_Channel7)  || \
                                         ((INSTANCE) == HPDMA2_Channel8)  || \
                                         ((INSTANCE) == HPDMA2_Channel9)  || \
                                         ((INSTANCE) == HPDMA2_Channel10) || \
                                         ((INSTANCE) == HPDMA2_Channel11) || \
                                         ((INSTANCE) == HPDMA2_Channel12) || \
                                         ((INSTANCE) == HPDMA2_Channel13) || \
                                         ((INSTANCE) == HPDMA2_Channel14) || \
                                         ((INSTANCE) == HPDMA2_Channel15) || \
                                         ((INSTANCE) == HPDMA3_Channel0)  || \
                                         ((INSTANCE) == HPDMA3_Channel1)  || \
                                         ((INSTANCE) == HPDMA3_Channel2)  || \
                                         ((INSTANCE) == HPDMA3_Channel3)  || \
                                         ((INSTANCE) == HPDMA3_Channel4)  || \
                                         ((INSTANCE) == HPDMA3_Channel5)  || \
                                         ((INSTANCE) == HPDMA3_Channel6)  || \
                                         ((INSTANCE) == HPDMA3_Channel7)  || \
                                         ((INSTANCE) == HPDMA3_Channel8)  || \
                                         ((INSTANCE) == HPDMA3_Channel9)  || \
                                         ((INSTANCE) == HPDMA3_Channel10) || \
                                         ((INSTANCE) == HPDMA3_Channel11) || \
                                         ((INSTANCE) == HPDMA3_Channel12) || \
                                         ((INSTANCE) == HPDMA3_Channel13) || \
                                         ((INSTANCE) == HPDMA3_Channel14) || \
                                         ((INSTANCE) == HPDMA3_Channel15))

/******************************** EXTI Instances **********************************/
#define IS_EXTI_ALL_INSTANCE(INSTANCE)  ( ((INSTANCE) == EXTI1) || ((INSTANCE) == EXTI2))

/******************************* GPIO Instances *******************************/
#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || \
                                        ((INSTANCE) == GPIOB) || \
                                        ((INSTANCE) == GPIOC) || \
                                        ((INSTANCE) == GPIOD) || \
                                        ((INSTANCE) == GPIOE) || \
                                        ((INSTANCE) == GPIOF) || \
                                        ((INSTANCE) == GPIOG) || \
                                        ((INSTANCE) == GPIOH) || \
                                        ((INSTANCE) == GPIOI) || \
                                        ((INSTANCE) == GPIOZ))
/**************************** GPIO AF Instances *******************************/
/* On MP2, all GPIO Bank support AF */
#define IS_GPIO_AF_INSTANCE IS_GPIO_ALL_INSTANCE

/**************************** GPIO Lock Instances *****************************/
/* On MP2, all GPIO Bank support the Lock mechanism */
#define IS_GPIO_LOCK_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)

/******************************* HASH Instances ********************************/
#define IS_HASH_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1) || \
                                        ((INSTANCE) == HASH2))

/******************************* HASH Instances ********************************/
#define IS_HASH_DIGEST_ALL_INSTANCE(INSTANCE) (((INSTANCE) == HASH1_DIGEST) || \
                                               ((INSTANCE) == HASH2_DIGEST))

/******************************* HSEM Instances *******************************/
#define IS_HSEM_ALL_INSTANCE(INSTANCE) ((INSTANCE) == HSEM)
/*********************  Bit definition for HSEM_CR register  ******************/
#define HSEM_CPU1_COREID    (0x00000001UL) /* Semaphore Core CA35 ID */
#define HSEM_CPU2_COREID    (0x00000002UL) /* Semaphore Core CM33 ID */
#define HSEM_CPU3_COREID    (0x00000003UL) /* Semaphore Core CM0PLUS ID */
#define HSEM_CR_COREID_CURRENT   (HSEM_CPU1_COREID << HSEM_CR_COREID_Pos)

#define HSEM_SEMID_MIN     (0U)       /* HSEM ID Min*/
#define HSEM_SEMID_MAX     (15U)      /* HSEM ID Max */

#define HSEM_PROCESSID_MIN (0U)       /* HSEM Process ID Min */
#define HSEM_PROCESSID_MAX (255U)     /* HSEM Process ID Max */

#define HSEM_CLEAR_KEY_MIN (0U)       /* HSEM clear Key Min value */
#define HSEM_CLEAR_KEY_MAX (0xFFFFU)  /* HSEM clear Key Max value */

/******************************** I3C Instances *******************************/
#define IS_I3C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I3C1) || \
                                       ((INSTANCE) == I3C2) || \
                                       ((INSTANCE) == I3C3))
/******************************** I2C Instances *******************************/
#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
                                       ((INSTANCE) == I2C2) || \
                                       ((INSTANCE) == I2C3))
/******************* I2C Instances : Group belongingness *********************/
#define IS_I2C_GRP1_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
                                        ((INSTANCE) == I2C2))
#define IS_I2C_GRP2_INSTANCE(INSTANCE) ((INSTANCE) == I2C3)

/************** I2C Instances : wakeup capability from stop modes *************/
#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)

/************** I2C Instances : trigger input *********************************/
#define IS_I2C_TRIGGER_INPUT_INSTANCE(INSTANCE) (IS_I2C_GRP1_INSTANCE(INSTANCE) || \
                                                 IS_I2C_GRP2_INSTANCE(INSTANCE))

/****************************** SMBUS Instances *******************************/

#define IS_SMBUS_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
                                         ((INSTANCE) == I2C2) || \
                                         ((INSTANCE) == I2C3))
/******************* SMBUS Instances : Group belongingness *********************/
#define IS_SMBUS_GRP1_INSTANCE(INSTANCE) (((INSTANCE) == I2C1)|| \
                                          ((INSTANCE) == I2C2))
#define IS_SMBUS_GRP2_INSTANCE(INSTANCE) ((INSTANCE) == I2C3)

/************** SMBUS Instances : trigger input *******************************/
#define IS_SMBUS_TRIGGER_INPUT_INSTANCE(INSTANCE) (IS_SMBUS_GRP1_INSTANCE(INSTANCE) ||\
                                                   IS_SMBUS_GRP2_INSTANCE(INSTANCE))
/******************************* I2S Instances ****************************/
#define IS_I2S_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || \
                                       ((INSTANCE) == SPI2) || \
                                       ((INSTANCE) == SPI3))

/******************************* IPCC Instances *******************************/
#define IS_IPCC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IPCC1)
/******************************* IWDG Instances *******************************/
#define IS_IWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == IWDG1) || \
                                        ((INSTANCE) == IWDG2) || \
                                        ((INSTANCE) == IWDG3) || \
                                        ((INSTANCE) == IWDG4))

/******************************* LPTIM Instances ******************************/
#define IS_LPTIM_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM1) || \
                                     ((INSTANCE) == LPTIM2) || \
                                     ((INSTANCE) == LPTIM3) || \
                                     ((INSTANCE) == LPTIM4) || \
                                     ((INSTANCE) == LPTIM5))

/****************** LPTIM Instances : DMA supported instances *****************/
#define IS_LPTIM_DMA_INSTANCE(INSTANCE)  (((INSTANCE) == LPTIM1) || \
                                          ((INSTANCE) == LPTIM2) || \
                                          ((INSTANCE) == LPTIM3) || \
                                          ((INSTANCE) == LPTIM4))

/************* LPTIM Instances : at least 1 capture/compare channel ***********/
#define IS_LPTIM_CC1_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM1) || \
                                         ((INSTANCE) == LPTIM2) || \
                                         ((INSTANCE) == LPTIM3) || \
                                         ((INSTANCE) == LPTIM4) || \
                                         ((INSTANCE) == LPTIM5))

/************* LPTIM Instances : at least 2 capture/compare channel ***********/
#define IS_LPTIM_CC2_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM1) || \
                                         ((INSTANCE) == LPTIM2) || \
                                         ((INSTANCE) == LPTIM3) || \
                                         ((INSTANCE) == LPTIM4))

/****************** LPTIM Instances : supporting encoder interface **************/
#define IS_LPTIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)  (((INSTANCE) == LPTIM1) || \
                                                        ((INSTANCE) == LPTIM2))

/****************** LPTIM Instances : supporting Input Capture **************/
#define IS_LPTIM_INPUT_CAPTURE_INSTANCE(INSTANCE)  (((INSTANCE) == LPTIM1) || \
                                                    ((INSTANCE) == LPTIM2) || \
                                                    ((INSTANCE) == LPTIM3) || \
                                                    ((INSTANCE) == LPTIM4))

/******************************* LTDC Instances *******************************/
#define IS_LTDC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == LTDC)

/******************************* MDF/ADF Instances ****************************/
#define IS_MDF_ALL_INSTANCE(INSTANCE) (((INSTANCE) == MDF1_Filter0)  ||  \
                                       ((INSTANCE) == MDF1_Filter1)  ||  \
                                       ((INSTANCE) == MDF1_Filter2)  ||  \
                                       ((INSTANCE) == MDF1_Filter3)  ||  \
                                       ((INSTANCE) == MDF1_Filter4)  ||  \
                                       ((INSTANCE) == MDF1_Filter5)  ||  \
                                       ((INSTANCE) == MDF1_Filter6)  ||  \
                                       ((INSTANCE) == MDF1_Filter7)  ||  \
                                       ((INSTANCE) == ADF1_Filter0))

/******************************* PSSI Instances ********************************/
#define IS_PSSI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == PSSI)

/******************************* RAMCFG Instances ********************************/
#define IS_RAMCFG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == RAMCFG_SYSRAM)  || \
                                          ((INSTANCE) == RAMCFG_SRAM1)   || \
                                          ((INSTANCE) == RAMCFG_RETRAM)  || \
                                          ((INSTANCE) == RAMCFG_BKPSRAM))

#define IS_RAMCFG_ECC_INSTANCE(INSTANCE) (((INSTANCE) == RAMCFG_RETRAM)  || \
                                          ((INSTANCE) == RAMCFG_BKPSRAM))

#define IS_RAMCFG_IT_INSTANCE(INSTANCE)  (((INSTANCE) == RAMCFG_RETRAM)  || \
                                          ((INSTANCE) == RAMCFG_BKPSRAM))

#define IS_RAMCFG_CRC_INSTANCE(INSTANCE) (((INSTANCE) == RAMCFG_RETRAM))

/******************************* RNG Instances ********************************/
#define IS_RNG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == RNG1) || ((INSTANCE) == RNG2))

/******************************* RTC Instances ********************************/
#define IS_RTC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RTC)

/****************************** SAI Instances ********************************/
#define IS_SAI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SAI1_Block_A) || \
                                       ((INSTANCE) == SAI1_Block_B) || \
                                       ((INSTANCE) == SAI2_Block_A) || \
                                       ((INSTANCE) == SAI2_Block_B) || \
                                       ((INSTANCE) == SAI3_Block_A) || \
                                       ((INSTANCE) == SAI3_Block_B) || \
                                       ((INSTANCE) == SAI4_Block_A) || \
                                       ((INSTANCE) == SAI4_Block_B))

/******************************** SDMMC Instances *****************************/
#define IS_SDMMC_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SDMMC1) || \
                                         ((INSTANCE) == SDMMC2) || \
                                         ((INSTANCE) == SDMMC3))

/******************************* SPDIFRX Instances ****************************/
#define IS_SPDIFRX_ALL_INSTANCE(INSTANCE) ((INSTANCE) == SPDIFRX)

/****************************** SPI Instances ********************************/
#define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || \
                                       ((INSTANCE) == SPI2) || \
                                       ((INSTANCE) == SPI3) || \
                                       ((INSTANCE) == SPI4) || \
                                       ((INSTANCE) == SPI5) || \
                                       ((INSTANCE) == SPI6))

#define IS_SPI_FULL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || \
                                        ((INSTANCE) == SPI2) || \
                                        ((INSTANCE) == SPI3))

#define IS_SPI_PARTIAL_INSTANCE(INSTANCE) (((INSTANCE) == SPI4) || \
                                           ((INSTANCE) == SPI5) || \
                                           ((INSTANCE) == SPI6))


/****************** TIM Instances : All supported instances *******************/
#define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM6)  || \
                                         ((INSTANCE) == TIM7)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM10) || \
                                         ((INSTANCE) == TIM11) || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM13) || \
                                         ((INSTANCE) == TIM14) || \
                                         ((INSTANCE) == TIM15) || \
                                         ((INSTANCE) == TIM16) || \
                                         ((INSTANCE) == TIM17))

/****************** TIM Instances : supporting 32 bits counter ****************/
#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)  || \
                                               ((INSTANCE) == TIM3)  || \
                                               ((INSTANCE) == TIM4)  || \
                                               ((INSTANCE) == TIM5))

/****************** TIM Instances : supporting the break function *************/
#define IS_TIM_BREAK_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17))

/************** TIM Instances : supporting Break source selection *************/
#define IS_TIM_BREAKSOURCE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                               ((INSTANCE) == TIM8)  || \
                                               ((INSTANCE) == TIM15) || \
                                               ((INSTANCE) == TIM16) || \
                                               ((INSTANCE) == TIM17))

/****************** TIM Instances : supporting 2 break inputs *****************/
#define IS_TIM_BKIN2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1) || \
                                            ((INSTANCE) == TIM8))

/************* TIM Instances : at least 1 capture/compare channel *************/
#define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM10) || \
                                         ((INSTANCE) == TIM11) || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM13) || \
                                         ((INSTANCE) == TIM14) || \
                                         ((INSTANCE) == TIM15) || \
                                         ((INSTANCE) == TIM16) || \
                                         ((INSTANCE) == TIM17))

/************ TIM Instances : at least 2 capture/compare channels *************/
#define IS_TIM_CC2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8)  || \
                                         ((INSTANCE) == TIM12) || \
                                         ((INSTANCE) == TIM15))

/************ TIM Instances : at least 3 capture/compare channels *************/
#define IS_TIM_CC3_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8))

/************ TIM Instances : at least 4 capture/compare channels *************/
#define IS_TIM_CC4_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM2)  || \
                                         ((INSTANCE) == TIM3)  || \
                                         ((INSTANCE) == TIM4)  || \
                                         ((INSTANCE) == TIM5)  || \
                                         ((INSTANCE) == TIM8))

/****************** TIM Instances : at least 5 capture/compare channels *******/
#define IS_TIM_CC5_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM8))

/****************** TIM Instances : at least 6 capture/compare channels *******/
#define IS_TIM_CC6_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                         ((INSTANCE) == TIM8))

/************ TIM Instances : DMA requests generation (TIMx_DIER.COMDE) *******/
#define IS_TIM_CCDMA_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15))

/****************** TIM Instances : DMA requests generation (TIMx_DIER.UDE) ***/
#define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM6)  || \
                                            ((INSTANCE) == TIM7)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17))

/************ TIM Instances : DMA requests generation (TIMx_DIER.CCxDE) *******/
#define IS_TIM_DMA_CC_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17))

/******************** TIM Instances : DMA burst feature ***********************/
#define IS_TIM_DMABURST_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM15) || \
                                            ((INSTANCE) == TIM16) || \
                                            ((INSTANCE) == TIM17))

/******************* TIM Instances : output(s) available **********************/
#define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                                        \
     ((((INSTANCE) == TIM2))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM3))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM4))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM5))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
     ||                               \
     ((((INSTANCE) == TIM8))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4) || \
      ((CHANNEL) == TIM_CHANNEL_5) || \
      ((CHANNEL) == TIM_CHANNEL_6)))  \
     ||                               \
     ((((INSTANCE) == TIM10)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM11)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM12)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM13)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM14)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM15)) && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2)))  \
     ||                               \
     ((((INSTANCE) == TIM16)) && \
     (((CHANNEL) == TIM_CHANNEL_1)))  \
     ||                               \
     ((((INSTANCE) == TIM17)) && \
     (((CHANNEL) == TIM_CHANNEL_1))))

/****************** TIM Instances : supporting complementary output(s) ********/
#define IS_TIM_CCXN_INSTANCE(INSTANCE, CHANNEL) \
    (((((INSTANCE) == TIM1))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM8))  && \
     (((CHANNEL) == TIM_CHANNEL_1) || \
      ((CHANNEL) == TIM_CHANNEL_2) || \
      ((CHANNEL) == TIM_CHANNEL_3) || \
      ((CHANNEL) == TIM_CHANNEL_4)))  \
    ||                                \
    ((((INSTANCE) == TIM15)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM16)) && \
      ((CHANNEL) == TIM_CHANNEL_1))   \
    ||                                \
    ((((INSTANCE) == TIM17)) && \
      ((CHANNEL) == TIM_CHANNEL_1)))


/****************** TIM Instances : supporting clock division *****************/
#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                                    ((INSTANCE) == TIM2)  || \
                                                    ((INSTANCE) == TIM3)  || \
                                                    ((INSTANCE) == TIM4)  || \
                                                    ((INSTANCE) == TIM5)  || \
                                                    ((INSTANCE) == TIM8)  || \
                                                    ((INSTANCE) == TIM10) || \
                                                    ((INSTANCE) == TIM11) || \
                                                    ((INSTANCE) == TIM12) || \
                                                    ((INSTANCE) == TIM13) || \
                                                    ((INSTANCE) == TIM14) || \
                                                    ((INSTANCE) == TIM15) || \
                                                    ((INSTANCE) == TIM16) || \
                                                    ((INSTANCE) == TIM17))

/****** TIM Instances : supporting external clock mode 1 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8))

/****** TIM Instances : supporting external clock mode 2 for ETRF input *******/
#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8))

/****************** TIM Instances : supporting external clock mode 1 for TIX inputs*/
#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM12) || \
                                                        ((INSTANCE) == TIM15))

/****************** TIM Instances : supporting internal trigger inputs(ITRX) *******/
#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)     (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8)  || \
                                                        ((INSTANCE) == TIM12) || \
                                                        ((INSTANCE) == TIM15))

/****************** TIM Instances : supporting combined 3-phase PWM mode ******/
#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                     ((INSTANCE) == TIM8))

/****************** TIM Instances : supporting commutation event generation ***/
#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                     ((INSTANCE) == TIM8)  || \
                                                     ((INSTANCE) == TIM15) || \
                                                     ((INSTANCE) == TIM16) || \
                                                     ((INSTANCE) == TIM17))

/****************** TIM Instances : supporting counting mode selection ********/
#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                        ((INSTANCE) == TIM2)  || \
                                                        ((INSTANCE) == TIM3)  || \
                                                        ((INSTANCE) == TIM4)  || \
                                                        ((INSTANCE) == TIM5)  || \
                                                        ((INSTANCE) == TIM8))

/****************** TIM Instances : supporting encoder interface **************/
#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                      ((INSTANCE) == TIM2)  || \
                                                      ((INSTANCE) == TIM3)  || \
                                                      ((INSTANCE) == TIM4)  || \
                                                      ((INSTANCE) == TIM5)  || \
                                                      ((INSTANCE) == TIM8))

/****************** TIM Instances : supporting Hall sensor interface **********/
#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1)  || \
                                                         ((INSTANCE) == TIM2)  || \
                                                         ((INSTANCE) == TIM3)  || \
                                                         ((INSTANCE) == TIM4)  || \
                                                         ((INSTANCE) == TIM5)  || \
                                                         ((INSTANCE) == TIM8))

/**************** TIM Instances : external trigger input available ************/
#define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8))

/************* TIM Instances : supporting ETR source selection ***************/
#define IS_TIM_ETRSEL_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                             ((INSTANCE) == TIM2)  || \
                                             ((INSTANCE) == TIM3)  || \
                                             ((INSTANCE) == TIM4)  || \
                                             ((INSTANCE) == TIM5)  || \
                                             ((INSTANCE) == TIM8))

/****** TIM Instances : Master mode available (TIMx_CR2.MMS available )********/
#define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM6)  || \
                                            ((INSTANCE) == TIM7)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15))

/*********** TIM Instances : Slave mode available (TIMx_SMCR available )*******/
#define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15))

/****************** TIM Instances : supporting OCxREF clear *******************/
#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)        (((INSTANCE) == TIM1)  || \
                                                       ((INSTANCE) == TIM2)  || \
                                                       ((INSTANCE) == TIM3)  || \
                                                       ((INSTANCE) == TIM4)  || \
                                                       ((INSTANCE) == TIM5)  || \
                                                       ((INSTANCE) == TIM8))

/****************** TIM Instances : remapping capability **********************/
#define IS_TIM_REMAP_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8))

/****************** TIM Instances : supporting repetition counter *************/
#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE)  (((INSTANCE) == TIM1)  || \
                                                       ((INSTANCE) == TIM8)  || \
                                                       ((INSTANCE) == TIM15) || \
                                                       ((INSTANCE) == TIM16) || \
                                                       ((INSTANCE) == TIM17))

/****************** TIM Instances : supporting synchronization ****************/
#define IS_TIM_SYNCHRO_INSTANCE(INSTANCE)  IS_TIM_MASTER_INSTANCE(INSTANCE)

/****************** TIM Instances : supporting ADC triggering through TRGO2 ***/
#define IS_TIM_TRGO2_INSTANCE(INSTANCE)    (((INSTANCE) == TIM1) || \
                                            ((INSTANCE) == TIM8))

/******************* TIM Instances : Timer input XOR function *****************/
#define IS_TIM_XOR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM1)  || \
                                            ((INSTANCE) == TIM2)  || \
                                            ((INSTANCE) == TIM3)  || \
                                            ((INSTANCE) == TIM4)  || \
                                            ((INSTANCE) == TIM5)  || \
                                            ((INSTANCE) == TIM8)  || \
                                            ((INSTANCE) == TIM12) || \
                                            ((INSTANCE) == TIM15))

/******************* TIM Instances : Timer input selection ********************/
#define IS_TIM_TISEL_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2)  || \
                                              ((INSTANCE) == TIM3)  || \
                                              ((INSTANCE) == TIM5)  || \
                                              ((INSTANCE) == TIM12) || \
                                              ((INSTANCE) == TIM15) || \
                                              ((INSTANCE) == TIM16) || \
                                              ((INSTANCE) == TIM17))

/****************** TIM Instances : Advanced timer instances *******************/
#define IS_TIM_ADVANCED_INSTANCE(INSTANCE)       (((INSTANCE) == TIM1) || \
                                                  ((INSTANCE) == TIM8))

/******************** USART Instances : Synchronous mode **********************/
#define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                     ((INSTANCE) == USART2) || \
                                     ((INSTANCE) == USART3) || \
                                     ((INSTANCE) == USART6))

/******************** UART Instances : Asynchronous mode **********************/
#define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                    ((INSTANCE) == USART2) || \
                                    ((INSTANCE) == USART3) || \
                                    ((INSTANCE) == USART6) || \
                                    ((INSTANCE) == UART4)  || \
                                    ((INSTANCE) == UART5)  || \
                                    ((INSTANCE) == UART7))
/******************************* LPUART Instance ******************************/
#define IS_LPUART_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/************************* UART Instances : FIFO mode *************************/
#define IS_UART_FIFO_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                         ((INSTANCE) == USART2) || \
                                         ((INSTANCE) == USART3) || \
                                         ((INSTANCE) == USART6) || \
                                         ((INSTANCE) == UART4)  || \
                                         ((INSTANCE) == UART5)  || \
                                         ((INSTANCE) == UART7)  || \
                                         ((INSTANCE) == LPUART1))
/****************** UART Instances : Auto Baud Rate detection *****************/
#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                            ((INSTANCE) == USART2) || \
                                                            ((INSTANCE) == USART3) || \
                                                            ((INSTANCE) == USART6) || \
                                                            ((INSTANCE) == UART4)  || \
                                                            ((INSTANCE) == UART5)  || \
                                                            ((INSTANCE) == UART7))

/*********************** UART Instances : Driver Enable ***********************/
#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                  ((INSTANCE) == USART2) || \
                                                  ((INSTANCE) == USART3) || \
                                                  ((INSTANCE) == USART6) || \
                                                  ((INSTANCE) == UART4)  || \
                                                  ((INSTANCE) == UART5)  || \
                                                  ((INSTANCE) == UART7)  || \
                                                  ((INSTANCE) == LPUART1))

/********************* UART Instances : Half-Duplex mode **********************/
#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                               ((INSTANCE) == USART2) || \
                                               ((INSTANCE) == USART3) || \
                                               ((INSTANCE) == USART6) || \
                                               ((INSTANCE) == UART4)  || \
                                               ((INSTANCE) == UART5)  || \
                                               ((INSTANCE) == UART7)  || \
                                               ((INSTANCE) == LPUART1))

/******************* UART Instances : Hardware Flow control *******************/
#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                           ((INSTANCE) == USART2) || \
                                           ((INSTANCE) == USART3) || \
                                           ((INSTANCE) == USART6) || \
                                           ((INSTANCE) == UART4)  || \
                                           ((INSTANCE) == UART5)  || \
                                           ((INSTANCE) == UART7)  || \
                                           ((INSTANCE) == LPUART1))

/************************* UART Instances : SPI Slave mode **************************/
#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                              ((INSTANCE) == USART2) || \
                                              ((INSTANCE) == USART3) || \
                                              ((INSTANCE) == USART6))

/************************* UART Instances : LIN mode **************************/
#define IS_UART_LIN_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                        ((INSTANCE) == USART2) || \
                                        ((INSTANCE) == USART3) || \
                                        ((INSTANCE) == USART6) || \
                                        ((INSTANCE) == UART4)  || \
                                        ((INSTANCE) == UART5)  || \
                                        ((INSTANCE) == UART7))

/****************** UART Instances : Wake-up from Stop mode *******************/
#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                                    ((INSTANCE) == USART2) || \
                                                    ((INSTANCE) == USART3) || \
                                                    ((INSTANCE) == USART6) || \
                                                    ((INSTANCE) == UART4)  || \
                                                    ((INSTANCE) == UART5)  || \
                                                    ((INSTANCE) == UART7)  || \
                                                    ((INSTANCE) == LPUART1))

/************************* UART Instances : IRDA mode *************************/
#define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                    ((INSTANCE) == USART2) || \
                                    ((INSTANCE) == USART3) || \
                                    ((INSTANCE) == USART6) || \
                                    ((INSTANCE) == UART4)  || \
                                    ((INSTANCE) == UART5)  || \
                                    ((INSTANCE) == UART7))

/********************* USART Instances : Smard card mode **********************/
#define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
                                         ((INSTANCE) == USART2) || \
                                         ((INSTANCE) == USART3) || \
                                         ((INSTANCE) == USART6) )


/******************************* USB_PCD Instances *******************************/
#define IS_PCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USBDR)

/******************************* OTG HS HCD Instances *************************/
#define IS_HCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USBDR)

/******************************* WWDG Instances *******************************/
#define IS_WWDG_ALL_INSTANCE(INSTANCE) (((INSTANCE) == WWDG1)
/******************************* CRC VERSION ********************************/
#define CRC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)


/******************************* DCMI VERSION ********************************/
#define DCMI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DCMIPP VERSION ********************************/
#define DCMIPP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DMA VERSION ********************************/
#define DMA_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DSI VERSION ********************************/
#define DSI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* EXTI VERSION ********************************/
#define EXTI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* HASH VERSION ********************************/
#define HASH_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* GPIO VERSION ********************************/
#define GPIO_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* HDP VERSION ********************************/
#define HDP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* I2C VERSION ********************************/
#define I2C_VERSION(INSTANCE) ((INSTANCE)->VERR)

/******************************* IPCC VERSION ********************************/
#define IPCC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* IWDG VERSION ********************************/
#define IWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* LPTIM VERSION ********************************/
#define LPTIM_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RNG VERSION ********************************/
#define OSPI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* PSSI VERSION ********************************/
#define PSSI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)


/******************************* PWR VERSION ********************************/
#define PWR_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RAMCFG VERSION ********************************/
#define RAMCFG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RCC VERSION ********************************/
#define RCC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RIFSC VERSION ********************************/
#define RIFSC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RISAB VERSION ********************************/
#define RISAB_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RISAF VERSION ********************************/
#define RISAF_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* IAC VERSION ********************************/
#define IAC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RNG VERSION ********************************/
#define RNG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RTC VERSION ********************************/
#define RTC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SAI VERSION ****************************/
#define SAI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SDMMC VERSION ******************************/
#define SDMMC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SPDIFRX VERSION ****************************/
#define SPDIFRX_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SPI/I2S VERSION ****************************/
#define SPI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* TAMP VERSION ********************************/
#define TAMP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* TIM VERSION ********************************/
#define TIM_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* USART VERSION ********************************/
#define USART_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* WWDG VERSION ********************************/
#define WWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DEVICE VERSION ********************************/
#define DEVICE_REVISION() (((DBGMCU->IDCODE) & (DBGMCU_IDCODE_REV_ID_Msk)) >> DBGMCU_IDCODE_REV_ID_Pos)
#define IS_DEVICE_REV_A() (DEVICE_REVISION() == 0x1000)

/******************************* DEVICE ID  ************************************/
#define DEVICE_ID() ((DBGMCU->IDCODE) & (DBGMCU_IDCODE_DEV_ID_Msk))


#define BOOT_MODE() ((SYSCFG->BOOTSR) & (SYSCFG_BOOTSR_BOOT3|SYSCFG_BOOTSR_BOOT2|SYSCFG_BOOTSR_BOOT1|SYSCFG_BOOTSR_BOOT0))

/**
  * @brief  Check whether platform is Developer boot mode
  * @param  None
  * @retval TRUE or FALSE
  */
#define IS_DEVELOPER_BOOT_MODE()   ((BOOT_MODE()  == (SYSCFG_BOOTSR_BOOT1 | SYSCFG_BOOTSR_BOOT0)) || \
                                    (BOOT_MODE()  == (SYSCFG_BOOTSR_BOOT3 | SYSCFG_BOOTSR_BOOT2)))
/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __STM32MP211Dxx_CA35_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
