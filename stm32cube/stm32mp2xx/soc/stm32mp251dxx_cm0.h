/**
  ******************************************************************************
  * @file    stm32mp251dxx_cm0.h
  * @author  MCD Application Team
  * @brief   CMSIS stm32mp251dxx_cm0 Device Peripheral Access Layer Header File.
  *
  *          This file contains:
  *           - Data structures and the address mapping for all peripherals
  *           - Peripheral registers declarations and bits definition
  *           - Macros to access peripherals registers hardware
  *
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2022 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/** @addtogroup CMSIS_Device
  * @{
  */

/** @addtogroup stm32mp251dxx_cm0
  * @{
  */

#ifndef __STM32MP251Dxx_CM0_H
#define __STM32MP251Dxx_CM0_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

/** @addtogroup Peripheral_interrupt_number_definition
  * @{
  */

 /**
 * @brief stm32mp2_m0plus Interrupt Number Definition :
 *        - according to the selected device in @ref Library_configuration_section
 *        - according to "Table 233. interrupt mapping for Cortex-M0+"
 *          in chapitre 32 "interrupt list" of reference document
 *          RM0457 - Reference Manual - STM32MP25xx - advanced ARM-based 32/64-bit MPUs
 *          file "DM00485804 (RM0457) Rev0.2.pdf" (Revision 0.2 / 27-Jul-2021)
 */

/*!< Interrupt Number Definition */
typedef enum
{
/******  Cortex-M0+ Processor Exceptions Numbers ***************************************************************/
  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                          */
  HardFault_IRQn              = -13,    /*!< 3 Cortex-M Hard Fault Interrupt                                   */
  SVC_IRQn                    = -5,     /*!< 11 Cortex-M SV Call Interrupt                                     */
  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M Pend SV Interrupt                                     */
  SysTick_IRQn                = -1,     /*!< 15 Cortex-M System Tick Interrupt                                 */
/******  STM32mp2xxxx specific Interrupt Numbers ***************************************************************/
  IWDG5_IRQn                  = 0,     /*!< Independent Watchdog 5 Early interrupt                             */
  WWDG2_IRQn                  = 1,     /*!< Window Watchdog 2 Early Wakeup interrupt                           */
  TAMP_IRQn                   = 2,     /*!< Tamper interrupt                                                   */
  RESERVED_3                  = 3,     /*!< reserved                                                           */
  RESERVED_4                  = 4,     /*!< reserved                                                           */
  EXTI2_L_IRQn                = 5,     /*!< EXTI2 lines 0 to 7 interrupt                                       */
  EXTI2_H_IRQn                = 6,     /*!< EXTI2 lines 8 to 15 interrupt                                      */
  LPDMA_Channel0_IRQn         = 7,     /*!< LPDMA Channel0 interrupt                                           */
  LPDMA_Channel1_IRQn         = 8,     /*!< LPDMA Channel1 interrupt                                           */
  LPDMA_Channel2_IRQn         = 9,     /*!< LPDMA Channel2 interrupt                                           */
  LPDMA_Channel3_IRQn         = 10,    /*!< LPDMA Channel3 interrupt                                           */
  LPUART1_IRQn                = 11,    /*!< LPUART1 global interrupt                                           */
  SPI8_IRQn                   = 12,    /*!< SPI8 global interrupt                                              */
  IPCC2_RX_IRQn               = 13,    /*!< Mailbox 2 RX Occupied interrupt                                    */
  IPCC2_TX_IRQn               = 14,    /*!< Mailbox 2 TX Free interrupt                                        */
  I2C8_IRQn                   = 15,    /*!< I2C8 global interrupt                                              */
  I3C4_IRQn                   = 16,    /*!< I3C4 global interrupt                                              */
  RESERVED_17                 = 17,    /*!< reserved                                                           */
  LPTIM3_IRQn                 = 18,    /*!< LPTIMER3 global interrupt                                          */
  LPTIM4_IRQn                 = 19,    /*!< LPTIMER4 global interrupt                                          */
  LPTIM5_IRQn                 = 20,    /*!< LPTIMER5 global interrupt                                          */
  HSEM_IRQn                   = 21,    /*!< HSEM non-secure interrupt                                          */
  RESERVED_22                 = 22,    /*!< reserved                                                           */
  ADF1_FLT_IRQn               = 23,    /*!< ADF1 Filter global interrupt                                       */
  RESERVED_24                 = 24,    /*!< reserved                                                           */
  CPU1_SEV_IRQn               = 25,    /*!< Cortex-A35 Send Event through EXTI2                                */
  CPU2_SEV_IRQn               = 26,    /*!< Cortex-M33 Send Event through EXTI2                                */
  VDDCPU_VD_IRQn              = 27,    /*!< VDDCPU voltage detector interrupt                                  */
  VDDCORE_VD_IRQn             = 28,    /*!< VDDCORE voltage detector interrupt                                 */
  RESERVED_29                 = 29,    /*!< reserved                                                           */
  CTI_IRQ0_IRQn               = 30,    /*!< CTI IRQ0                                                           */
  CTI_IRQ1_IRQn               = 31,    /*!< CTI IRQ1                                                           */
  MAX_IRQ_n
/***************************************************************************************************************/
} IRQn_Type;
/**
  * @}
  */

/** @addtogroup Configuration_section_for_CMSIS
  * @{
  */

#define SDC        /*!< Step Down Converter feature */

/**
  * @brief Configuration of the Cortex-M0+ Processor and Core Peripherals
  */
#define __CM0PLUS_REV             0x0001  /*!< Cortex-M0+ revision r0p1                       */
#define __MPU_PRESENT             1       /*!< CM0+ provides MPU                              */
#define __VTOR_PRESENT            0       /*!< Vector Table Offset Register NOT present       */
#define __NVIC_PRIO_BITS          2       /*!< CM0+ uses 2 Bits for the Priority Levels       */
#define __Vendor_SysTickConfig    0       /*!< Set to 1 if different SysTick Config is used   */
#define __FPU_PRESENT             0       /*!< FPU NOT present                                */

#include "core_cm0plus.h"                 /*!< Cortex-M0+ processor and core peripherals      */

/**
  * @}
  */

#include "system_stm32mp2xx.h"
#include <stdint.h>

/** @addtogroup Peripheral_registers_structures
  * @{
  */

/**
  * @brief DMA Controller
  */
/* c7amba_dma3_v1_0 */
typedef struct
{
  __IO uint32_t SECCFGR;          /*!< DMA secure configuration register,                      Address offset: 0x00  */
  __IO uint32_t PRIVCFGR;         /*!< DMA privileged configuration register,                  Address offset: 0x04  */
  __IO uint32_t RCFGLOCKR;        /*!< DMA configuration lock register                         Address offset: 0x08 */
  __IO uint32_t MISR;             /*!< DMA non secure masked interrupt status register,        Address offset: 0x0C  */
  __IO uint32_t SMISR;            /*!< DMA secure masked interrupt status register,            Address offset: 0x10  */
       uint32_t RESERVED[1003];   /*!< Reserved                                                Address offset: 0x014-0xFBC */
  __IO uint32_t HWCFGR13;         /*!< HPDMA hardware configuration 13 register                Address offset: 0xFC0 */
  __IO uint32_t HWCFGR12;         /*!< HPDMA hardware configuration 12 register                Address offset: 0xFC4 */
  __IO uint32_t HWCFGR11;         /*!< HPDMA hardware configuration 11 register                Address offset: 0xFC8 */
  __IO uint32_t HWCFGR10;         /*!< HPDMA hardware configuration 10 register                Address offset: 0xFCC */
  __IO uint32_t HWCFGR9;          /*!< HPDMA hardware configuration 9 register                 Address offset: 0xFD0 */
  __IO uint32_t HWCFGR8;          /*!< HPDMA hardware configuration 8 register                 Address offset: 0xFD4 */
  __IO uint32_t HWCFGR7;          /*!< HPDMA hardware configuration 7 register                 Address offset: 0xFD8 */
  __IO uint32_t HWCFGR6;          /*!< HPDMA hardware configuration 6 register                 Address offset: 0xFDC */
  __IO uint32_t HWCFGR5;          /*!< HPDMA hardware configuration 5 register                 Address offset: 0xFE0 */
  __IO uint32_t HWCFGR4;          /*!< HPDMA hardware configuration 4 register                 Address offset: 0xFE4 */
  __IO uint32_t HWCFGR3;          /*!< HPDMA hardware configuration 3 register                 Address offset: 0xFE8 */
  __IO uint32_t HWCFGR2;          /*!< HPDMA hardware configuration 2 register                 Address offset: 0xFEC */
  __IO uint32_t HWCFGR1;          /*!< HPDMA hardware configuration 1 register                 Address offset: 0xFF0 */
  __IO uint32_t VERR;             /*!< HPDMA version register                                  Address offset: 0xFF4 */
  __IO uint32_t IPIDR;            /*!< HPDMA identification register                           Address offset: 0xFF8 */
  __IO uint32_t SIDR;             /*!< HPDMA size identification register                      Address offset: 0xFFC */
} DMA_TypeDef;

typedef struct
{
  __IO uint32_t CLBAR;        /*!< DMA channel x linked-list base address register, Address offset: 0x50 + (x * 0x80) */
  __IO uint32_t CCIDCFGR;     /*!< DMA channel x CID register,                      Address offset: 0x54 + (x * 0x80) */
  __IO uint32_t CSEMCR;       /*!< DMA channel x semaphore control register,        Address offset: 0x58 + (x * 0x80) */
  __IO uint32_t CFCR;         /*!< DMA channel x flag clear register,               Address offset: 0x5C + (x * 0x80) */
  __IO uint32_t CSR;          /*!< DMA channel x flag status register,              Address offset: 0x60 + (x * 0x80) */
  __IO uint32_t CCR;          /*!< DMA channel x control register,                  Address offset: 0x64 + (x * 0x80) */
       uint32_t RESERVED2[10];/*!< Reserved 2,                                      Address offset: 0x68 -- 0x8C      */
  __IO uint32_t CTR1;         /*!< DMA channel x transfer register 1,               Address offset: 0x90 + (x * 0x80) */
  __IO uint32_t CTR2;         /*!< DMA channel x transfer register 2,               Address offset: 0x94 + (x * 0x80) */
  __IO uint32_t CBR1;         /*!< DMA channel x block register 1,                  Address offset: 0x98 + (x * 0x80) */
  __IO uint32_t CSAR;         /*!< DMA channel x source address register,           Address offset: 0x9C + (x * 0x80) */
  __IO uint32_t CDAR;         /*!< DMA channel x destination address register,      Address offset: 0xA0 + (x * 0x80) */
  __IO uint32_t CTR3;         /*!< DMA channel x transfer register 3,               Address offset: 0xA4 + (x * 0x80) */
  __IO uint32_t CBR2;         /*!< DMA channel x block register 2,                  Address offset: 0xA8 + (x * 0x80) */
       uint32_t RESERVED3[8]; /*!< Reserved 3,                                      Address offset: 0xAC -- 0xC8      */
  __IO uint32_t CLLR;         /*!< DMA channel x linked-list address register,      Address offset: 0xCC + (x * 0x80) */
} DMA_Channel_TypeDef;

/*
 * @brief EXTI Block description (EXTI)
 * c7amba_exti_v3-0_UserSpec_v3_0_0m *
 */
typedef struct
{
  __IO uint32_t RTSR1;           /*!< EXTI rising trigger selection register        Address offset: 0x000 */
  __IO uint32_t FTSR1;           /*!< EXTI falling trigger selection register       Address offset: 0x004 */
  __IO uint32_t SWIER1;          /*!< EXTI software interrupt event register        Address offset: 0x008 */
  __IO uint32_t RPR1;            /*!< EXTI rising edge pending register             Address offset: 0x00C */
  __IO uint32_t FPR1;            /*!< EXTI falling edge pending register            Address offset: 0x010 */
  __IO uint32_t SECCFGR1;        /*!< EXTI security configuration register          Address offset: 0x014 */
  __IO uint32_t PRIVCFGR1;       /*!< EXTI Privilege configuration register         Address offset: 0x018 */
       uint32_t RESERVED0;       /*!< Reserved                                      Address offset: 0x01C */
  __IO uint32_t RTSR2;           /*!< EXTI rising trigger selection register        Address offset: 0x020 */
  __IO uint32_t FTSR2;           /*!< EXTI falling trigger selection register       Address offset: 0x024 */
  __IO uint32_t SWIER2;          /*!< EXTI software interrupt event register        Address offset: 0x028 */
  __IO uint32_t RPR2;            /*!< EXTI rising edge pending register             Address offset: 0x02C */
  __IO uint32_t FPR2;            /*!< EXTI falling edge pending register            Address offset: 0x030 */
  __IO uint32_t SECCFGR2;        /*!< EXTI security enable register                 Address offset: 0x034 */
  __IO uint32_t PRIVCFGR2;       /*!< EXTI Privilege enable register                Address offset: 0x038 */
       uint32_t RESERVED1;       /*!< Reserved                                       Address offset: 0x03C */
  __IO uint32_t RTSR3;           /*!< EXTI rising trigger selection register        Address offset: 0x040 */
  __IO uint32_t FTSR3;           /*!< EXTI falling trigger selection register       Address offset: 0x044 */
  __IO uint32_t SWIER3;          /*!< EXTI software interrupt event register        Address offset: 0x048 */
  __IO uint32_t RPR3;            /*!< EXTI rising edge pending register             Address offset: 0x04C */
  __IO uint32_t FPR3;            /*!< EXTI falling edge pending register            Address offset: 0x050 */
  __IO uint32_t SECCFGR3;        /*!< EXTI security enable register                 Address offset: 0x054 */
  __IO uint32_t PRIVCFGR3;       /*!< EXTI Privilege enable register                Address offset: 0x058 */
       uint32_t RESERVED15;      /*!< Reserved                                       Address offset: 0x05C */
  __IO uint32_t EXTICR[4];       /*!< EXTI external interrupt selection register 1  Address offset: 0x060-0x6C */
  __IO uint32_t LOCKR;           /*!< EXTI lock register                            Address offset: 0x070 */
       uint32_t RESERVED3[3];    /*!< Reserved                                       Address offset: 0x074-0x07C */
  __IO uint32_t C1IMR1;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x080 */
       uint32_t RESERVED17[3];   /*!< Reserved                                       Address offset: 0x088-0x08C */
  __IO uint32_t C1IMR2;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x090 */
       uint32_t RESERVED18[3];   /*!< Reserved                                       Address offset: 0x098-0x09C */
  __IO uint32_t C1IMR3;          /*!< EXTI CPU1 wakeup with interrupt mask register Address offset: 0x0A0 */
       uint32_t RESERVED6[7];    /*!< Reserved                                       Address offset: 0x0A8-0x0BC */
  __IO uint32_t C2IMR1;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0C0 */
  __IO uint32_t C2EMR1;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0C4 */
       uint32_t RESERVED20[2];   /*!< Reserved                                       Address offset: 0x0C8-0x0CC */
  __IO uint32_t C2IMR2;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0D0 */
  __IO uint32_t C2EMR2;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0D4 */
       uint32_t RESERVED21[2];   /*!< Reserved                                       Address offset: 0x0D8-0x0DC */
  __IO uint32_t C2IMR3;          /*!< EXTI CPU2 wakeup with interrupt mask register Address offset: 0x0E0 */
  __IO uint32_t C2EMR3;          /*!< EXTI CPU2 wakeup with event mask register     Address offset: 0x0E4 */
         uint32_t RESERVED22[6];   /*!< Reserved                                       Address offset: 0x0E8-0x0FC */
  __IO uint32_t C3IMR1;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x100 */
  __IO uint32_t C3EMR1;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x104 */
       uint32_t RESERVED23[2];   /*!< Reserved                                       Address offset: 0x108-0x10C */
  __IO uint32_t C3IMR2;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x110 */
  __IO uint32_t C3EMR2;          /*!< EXTI CPU3 wakeup with event mask register     Address offset: 0x114 */
       uint32_t RESERVED24[2];   /*!< Reserved                                       Address offset: 0x118-0x11C */
  __IO uint32_t C3IMR3;          /*!< EXTI CPU3 wakeup with interrupt mask register Address offset: 0x120 */
       uint32_t RESERVED25[23];  /*!< Reserved                                       Address offset: 0x124-0x17C */
  __IO uint32_t ECIDCFGR[96];    /*!< EXTI configurable event CID Config register   Address offset: 0x180-0x2BC */
  __IO uint32_t C1CIDCFGR;       /*!< EXTI processor 1 CID configuration register   Address offset: 0x300 */
  __IO uint32_t C2CIDCFGR;       /*!< EXTI processor 2 CID configuration register   Address offset: 0x304 */
  __IO uint32_t C3CIDCFGR;       /*!< EXTI processor 3 CID configuration register   Address offset: 0x308 */
       uint32_t RESERVED27[45];  /*!< Reserved                                      Address offset: 0x30C-0x3BC */
  __IO uint32_t HWCFGR13;        /*!< EXTI Hardware configuration register 13       Address offset: 0x3C0 */
  __IO uint32_t HWCFGR12;        /*!< EXTI Hardware configuration register 12       Address offset: 0x3C4 */
  __IO uint32_t HWCFGR11;        /*!< EXTI Hardware configuration register 11       Address offset: 0x3C8 */
       uint32_t RESERVED12[3];   /*!< Reserved                                      Address offset: 0x3CC-0x3D4 */
  __IO uint32_t HWCFGR7;         /*!< EXTI Hardware configuration register 7        Address offset: 0x3D8 */
  __IO uint32_t HWCFGR6;         /*!< EXTI Hardware configuration register 6        Address offset: 0x3DC */
  __IO uint32_t HWCFGR5;         /*!< EXTI Hardware configuration register 5        Address offset: 0x3E0 */
  __IO uint32_t HWCFGR4;         /*!< EXTI Hardware configuration register 4        Address offset: 0x3E4 */
  __IO uint32_t HWCFGR3;         /*!< EXTI Hardware configuration register 3        Address offset: 0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< EXTI Hardware configuration register 2        Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< EXTI Hardware configuration register 1        Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< EXTI IP Version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< EXTI Identification register                  Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< EXTI Size ID register                         Address offset: 0x3FC */
} EXTI_TypeDef;

typedef struct
{
  __IO uint32_t IMR1;                /*!< EXTI Interrupt mask register,                Address offset: 0x00 */
  __IO uint32_t EMR1;                /*!< EXTI Event mask register,                    Address offset: 0x04 */
  uint32_t      RESERVED1[2];        /*!< Reserved, offset 0x08 -> 0x10                                     */
  __IO uint32_t IMR2;                /*!< EXTI Interrupt mask register,                Address offset: 0x10 */
  __IO uint32_t EMR2;                /*!< EXTI Event mask register,                    Address offset: 0x14 */
  uint32_t      RESERVED2[2];        /*!< Reserved, offset 0x18 -> 0x20                                     */
  __IO uint32_t IMR3;                /*!< EXTI Interrupt mask register,                Address offset: 0x20 */
  __IO uint32_t EMR3;                /*!< EXTI Event mask register,                    Address offset: 0x24 */
  uint32_t      RESERVED3[6];        /*!< Reserved, offset 0x28 -> 0x40                                     */
} EXTI_Core_TypeDef;

/**
* @brief General Purpose I/O
* @note c7amba_ioport4 Rev 1.0.2
*/
typedef struct
{
  __IO uint32_t MODER;           /*!< GPIO mode register                                  Address offset: 0x000 */
  __IO uint32_t OTYPER;          /*!< GPIO output type register                           Address offset: 0x004 */
  __IO uint32_t OSPEEDR;         /*!< GPIO output speed register                          Address offset: 0x008 */
  __IO uint32_t PUPDR;           /*!< GPIO port pull-up/pull-down register                Address offset: 0x00C */
  __IO uint32_t IDR;             /*!< GPIO input data register                            Address offset: 0x010 */
  __IO uint32_t ODR;             /*!< GPIO output data register                           Address offset: 0x014 */
  __IO uint32_t BSRR;            /*!< GPIO bit set/reset register                         Address offset: 0x018 */
  __IO uint32_t LCKR;            /*!< GPIO configuration lock register                    Address offset: 0x01C */
  __IO uint32_t AFR[2];          /*!< GPIO alternate function  registers                  Address offset: 0x020 */
  __IO uint32_t BRR;             /*!< GPIO bit reset register                             Address offset: 0x028 */
  __IO uint32_t OR;              /*!< GPIO bit option register                            Address offset: 0x02C */
  __IO uint32_t SECCFGR;         /*!< GPIO secure configuration register                  Address offset: 0x030 */
  __IO uint32_t PRIVCFGR;        /*!< GPIO privileged configuration register              Address offset: 0x034 */
  __IO uint32_t RCFGLOCKR;       /*!< GPIO resource configuration lock register           Address offset: 0x038 */
       uint32_t RESERVED0;       /*!< Reserved                                            Address offset: 0x03C */
  __IO uint32_t DELAYRL;         /*!< GPIO delay low register                             Address offset: 0x040 */
  __IO uint32_t DELAYRH;         /*!< GPIO delay high register                            Address offset: 0x044 */
  __IO uint32_t ADVCFGRL;        /*!< GPIO PIO control low register                       Address offset: 0x048 */
  __IO uint32_t ADVCFGRH;        /*!< GPIO delay high register                            Address offset: 0x04C */

  __IO uint32_t CIDCFGR0;        /*!< GPIO CID configuration register for I/O pin 0       Address offset: 0x050 */
  __IO uint32_t SEMCR0;          /*!< GPIO semaphore control register for I/O pin 0       Address offset: 0x054 */
  __IO uint32_t CIDCFGR1;        /*!< GPIO CID configuration register for I/O pin 1       Address offset: 0x058 */
  __IO uint32_t SEMCR1;          /*!< GPIO semaphore control register for I/O pin 1       Address offset: 0x05C */
  __IO uint32_t CIDCFGR2;        /*!< GPIO CID configuration register for I/O pin 2       Address offset: 0x060 */
  __IO uint32_t SEMCR2;          /*!< GPIO semaphore control register for I/O pin 2       Address offset: 0x064 */
  __IO uint32_t CIDCFGR3;        /*!< GPIO CID configuration register for I/O pin 3       Address offset: 0x068 */
  __IO uint32_t SEMCR3;          /*!< GPIO semaphore control register for I/O pin 3       Address offset: 0x06C */
  __IO uint32_t CIDCFGR4;        /*!< GPIO CID configuration register for I/O pin 4       Address offset: 0x070 */
  __IO uint32_t SEMCR4;          /*!< GPIO semaphore control register for I/O pin 4       Address offset: 0x074 */
  __IO uint32_t CIDCFGR5;        /*!< GPIO CID configuration register for I/O pin 5       Address offset: 0x078 */
  __IO uint32_t SEMCR5;          /*!< GPIO semaphore control register for I/O pin 5       Address offset: 0x07C */
  __IO uint32_t CIDCFGR6;        /*!< GPIO CID configuration register for I/O pin 6       Address offset: 0x080 */
  __IO uint32_t SEMCR6;          /*!< GPIO semaphore control register for I/O pin 6       Address offset: 0x084 */
  __IO uint32_t CIDCFGR7;        /*!< GPIO CID configuration register for I/O pin 7       Address offset: 0x088 */
  __IO uint32_t SEMCR7;          /*!< GPIO semaphore control register for I/O pin 7       Address offset: 0x08C */
  __IO uint32_t CIDCFGR8;        /*!< GPIO CID configuration register for I/O pin 8       Address offset: 0x090 */
  __IO uint32_t SEMCR8;          /*!< GPIO semaphore control register for I/O pin 8       Address offset: 0x094 */
  __IO uint32_t CIDCFGR9;        /*!< GPIO CID configuration register for I/O pin 9       Address offset: 0x098 */
  __IO uint32_t SEMCR9;          /*!< GPIO semaphore control register for I/O pin 9       Address offset: 0x09C */
  __IO uint32_t CIDCFGR10;       /*!< GPIO CID configuration register for I/O pin 10      Address offset: 0x0A0 */
  __IO uint32_t SEMCR10;         /*!< GPIO semaphore control register for I/O pin 10      Address offset: 0x0A4 */
  __IO uint32_t CIDCFGR11;       /*!< GPIO CID configuration register for I/O pin 11      Address offset: 0x0A8 */
  __IO uint32_t SEMCR11;         /*!< GPIO semaphore control register for I/O pin 11      Address offset: 0x0AC */
  __IO uint32_t CIDCFGR12;       /*!< GPIO CID configuration register for I/O pin 12      Address offset: 0x0B0 */
  __IO uint32_t SEMCR12;         /*!< GPIO semaphore control register for I/O pin 12      Address offset: 0x0B4 */
  __IO uint32_t CIDCFGR13;       /*!< GPIO CID configuration register for I/O pin 13      Address offset: 0x0B8 */
  __IO uint32_t SEMCR13;         /*!< GPIO semaphore control register for I/O pin 13      Address offset: 0x0BC */
  __IO uint32_t CIDCFGR14;       /*!< GPIO CID configuration register for I/O pin 14      Address offset: 0x0C0 */
  __IO uint32_t SEMCR14;         /*!< GPIO semaphore control register for I/O pin 14      Address offset: 0x0C4 */
  __IO uint32_t CIDCFGR15;       /*!< GPIO CID configuration register for I/O pin 15      Address offset: 0x0C8 */
  __IO uint32_t SEMCR15;         /*!< GPIO semaphore control register for I/O pin 15      Address offset: 0x0CC */
       uint32_t RESERVED1[190];  /*!< Reserved                                            Address offset: 0x0D0-0x3C4 */
  __IO uint32_t HWCFGR10;        /*!< GPIO hardware configuration register 10             Address offset: 0x3C8 */
  __IO uint32_t HWCFGR9;         /*!< GPIO hardware configuration register 9              Address offset: 0x3CC */
  __IO uint32_t HWCFGR8;         /*!< GPIO hardware configuration register 8              Address offset: 0x3D0 */
  __IO uint32_t HWCFGR7;         /*!< GPIO hardware configuration register 7              Address offset: 0x3D4 */
  __IO uint32_t HWCFGR6;         /*!< GPIO hardware configuration register 6              Address offset: 0x3D8 */
  __IO uint32_t HWCFGR5;         /*!< GPIO hardware configuration register 5              Address offset: 0x3DC */
  __IO uint32_t HWCFGR4;         /*!< GPIO hardware configuration register 4              Address offset: 0x3E0 */
  __IO uint32_t HWCFGR3;         /*!< GPIO hardware configuration register 3              Address offset: 0x3E4 */
  __IO uint32_t HWCFGR2;         /*!< GPIO hardware configuration register 2              Address offset: 0x3E8 */
  __IO uint32_t HWCFGR1;         /*!< GPIO hardware configuration register 1              Address offset: 0x3EC */
  __IO uint32_t HWCFGR0;         /*!< GPIO hardware configuration register 0              Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< GPIO version register                               Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< GPIO identification register                        Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< GPIO size identification register                   Address offset: 0x3FC */
} GPIO_TypeDef;

/*
 * @brief HW Semaphore (HSEM)
 */
typedef struct
{
  __IO uint32_t R[16];           /*!< HSEM register                                    Address offset: 0x000-0x03C */
       uint32_t RESERVED0[16];   /*!< Reserved                                         Address offset: 0x040-0x07C */
  __IO uint32_t RLR[16];         /*!< HSEM read lock register                          Address offset: 0x080-0x0BC */
       uint32_t RESERVED1[16];   /*!< Reserved                                         Address offset: 0x0C0-0x0FC */
  __IO uint32_t C1IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x100 */
  __IO uint32_t C1ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x104 */
  __IO uint32_t C1ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x108 */
  __IO uint32_t C1MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x10C */
  __IO uint32_t C2IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x110 */
  __IO uint32_t C2ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x114 */
  __IO uint32_t C2ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x118 */
  __IO uint32_t C2MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x11C */
  __IO uint32_t C3IER;           /*!< HSEM non-secure Interrupt enable register        Address offset: 0x120 */
  __IO uint32_t C3ICR;           /*!< HSEM non-secure Interrupt clear register         Address offset: 0x124 */
  __IO uint32_t C3ISR;           /*!< HSEM non-secure Interrupt status register        Address offset: 0x128 */
  __IO uint32_t C3MISR;          /*!< HSEM Masked non-secure interrupt status register Address offset: 0x12C */
       uint32_t RESERVED2[20];   /*!< Reserved                                         Address offset: 0x130-0x17C */
  __IO uint32_t SC1IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x180 */
  __IO uint32_t SC1ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x184 */
  __IO uint32_t SC1ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x188 */
  __IO uint32_t SC1MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x18C */
  __IO uint32_t SC2IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x190 */
  __IO uint32_t SC2ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x194 */
  __IO uint32_t SC2ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x198 */
  __IO uint32_t SC2MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x19C */
  __IO uint32_t SC3IER;          /*!< HSEM secure interrupt enable register            Address offset: 0x1A0 */
  __IO uint32_t SC3ICR;          /*!< HSEM secure interrupt clear register             Address offset: 0x1A4 */
  __IO uint32_t SC3ISR;          /*!< HSEM Secure interrupt status register            Address offset: 0x1A8 */
  __IO uint32_t SC3MISR;         /*!< HSEM Secure masked interrupt status register     Address offset: 0x1AC */
       uint32_t RESERVED3[20];   /*!< Reserved                                         Address offset: 0x1B0-0x1FC */
  __IO uint32_t SECCFGR;         /*!< HSEM Security configuration register             Address offset: 0x200 */
       uint32_t RESERVED4[3];    /*!< Reserved                                         Address offset: 0x204-0x20C */
  __IO uint32_t PRIVCFGR;        /*!< HSEM Privilege configuration register            Address offset: 0x210 */
       uint32_t RESERVED5[3];    /*!< Reserved                                         Address offset: 0x214-0x21C */
  __IO uint32_t C1CIDCFGR;       /*!< HSEM processor 1 CID configuration register      Address offset: 0x220 */
  __IO uint32_t C2CIDCFGR;       /*!< HSEM processor 2 CID configuration register      Address offset: 0x224 */
  __IO uint32_t C3CIDCFGR;       /*!< HSEM processor 3 CID configuration register      Address offset: 0x228 */
       uint32_t RESERVED6;       /*!< Reserved                                         Address offset: 0x22C */
  __IO uint32_t CR;              /*!< HSEM Clear register                              Address offset: 0x230 */
  __IO uint32_t KEYR;            /*!< HSEM clear key register                          Address offset: 0x234 */
       uint32_t RESERVED7[2];    /*!< Reserved                                         Address offset: 0x238-0x23C */
  __IO uint32_t G0CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x240 */
  __IO uint32_t G1CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x244 */
  __IO uint32_t G2CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x248 */
  __IO uint32_t G3CIDCFGR;       /*!< HSEM CID configuration register                  Address offset: 0x24C */
       uint32_t RESERVED8[103];  /*!< Reserved                                         Address offset: 0x250-0x3E8 */
  __I  uint32_t HWCFGR2;         /*!< HSEM hardware configuration register 2           Address offset: 0x3EC */
  __I  uint32_t HWCFGR1;         /*!< HSEM hardware configuration register 1           Address offset: 0x3F0 */
  __I  uint32_t VERR;            /*!< HSEM IP version register                         Address offset: 0x3F4 */
  __I  uint32_t IPIDR;           /*!< HSEM IP identification register                  Address offset: 0x3F8 */
  __I  uint32_t SIDR;            /*!< HSEM size identification register                Address offset: 0x3FC */
} HSEM_TypeDef;

typedef struct
{
  __IO uint32_t IER;             /*!< HSEM Interrupt enable register                   Address offset: 0x000 */
  __IO uint32_t ICR;             /*!< HSEM Interrupt clear register                    Address offset: 0x004 */
  __IO uint32_t ISR;             /*!< HSEM Interrupt status register                   Address offset: 0x008 */
  __IO uint32_t MISR;            /*!< HSEM Masked interrupt status register            Address offset: 0x00C */
} HSEM_Common_TypeDef;

/**
  * @brief Inter-integrated Circuit Interface (I2C)
  */

typedef struct
{
  __IO uint32_t CR1;            /*!< I2C Control register 1                 Address offset: 0x00 */
  __IO uint32_t CR2;            /*!< I2C Control register 2                 Address offset: 0x04 */
  __IO uint32_t OAR1;           /*!< I2C Own address 1 register             Address offset: 0x08 */
  __IO uint32_t OAR2;           /*!< I2C Own address 2 register             Address offset: 0x0C */
  __IO uint32_t TIMINGR;        /*!< I2C Timing register                    Address offset: 0x10 */
  __IO uint32_t TIMEOUTR;       /*!< I2C Timeout register                   Address offset: 0x14 */
  __IO uint32_t ISR;            /*!< I2C Interrupt and status register      Address offset: 0x18 */
  __IO uint32_t ICR;            /*!< I2C Interrupt clear register           Address offset: 0x1C */
  __IO uint32_t PECR;           /*!< I2C PEC register                       Address offset: 0x20 */
  __IO uint32_t RXDR;           /*!< I2C Receive data register              Address offset: 0x24 */
  __IO uint32_t TXDR;           /*!< I2C Transmit data register             Address offset: 0x28 */
  __IO uint32_t AUTOCR;         /*!< I2C Autonomous mode control register   Address offset: 0x2C */
       uint32_t RESERVED[240];  /*!< Reserved                               Address offset: 0x30->0x3EC */
  __IO uint32_t HWCFGR;         /*!< I2C hardware configuration register    Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< I2C version register                   Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< I2C identification register            Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< I2C size identification register       Address offset: 0x3FC */
} I2C_TypeDef;

/**
  * @brief Inter-integrated Circuit Interface (I3C)
  */
typedef struct
{
  __IO uint32_t CR;              /*!< I3C message control register                Address offset: 0x000 */
  __IO uint32_t CFGR;            /*!< I3C configuration register                  Address offset: 0x004 */
       uint32_t RESERVED0[2];    /*!< Reserved                                    Address offset: 0x008-0x00C */
  __IO uint32_t RDR;             /*!< I3C receive data byte register              Address offset: 0x010 */
  __IO uint32_t RDWR;            /*!< I3C receive data word register              Address offset: 0x014 */
  __IO uint32_t TDR;             /*!< I3C transmit data byte register             Address offset: 0x018 */
  __IO uint32_t TDWR;            /*!< I3C transmit data word register             Address offset: 0x01C */
  __IO uint32_t IBIDR;           /*!< I3C IBI payload data register               Address offset: 0x020 */
  __IO uint32_t TGTTDR;          /*!< I3C target transmit configuration register  Address offset: 0x024 */
       uint32_t RESERVED1[2];    /*!< Reserved                                    Address offset: 0x028-0x02C */
  __IO uint32_t SR;              /*!< I3C status register                         Address offset: 0x030 */
  __IO uint32_t SER;             /*!< I3C status error register                   Address offset: 0x034 */
       uint32_t RESERVED2[2];    /*!< Reserved                                    Address offset: 0x038-0x03C */
  __IO uint32_t RMR;             /*!< I3C received message register               Address offset: 0x040 */
       uint32_t RESERVED3[3];    /*!< Reserved                                    Address offset: 0x044-0x04C */
  __IO uint32_t EVR;             /*!< I3C event register                          Address offset: 0x050 */
  __IO uint32_t IER;             /*!< I3C interrupt enable register               Address offset: 0x054 */
  __IO uint32_t CEVR;            /*!< I3C clear event register                    Address offset: 0x058 */
       uint32_t RESERVED4;       /*!< Reserved                                    Address offset: 0x05C */
  __IO uint32_t DEVR0;           /*!< I3C own device characteristics register     Address offset: 0x060 */
  __IO uint32_t DEVRX[4];        /*!< I3C device x (0<=x<=4) register             Address offset: 0x064-0x070 */
       uint32_t RESERVED5[7];    /*!< Reserved                                    Address offset: 0x074-0x08C */
  __IO uint32_t MAXRLR;          /*!< I3C maximum read length register            Address offset: 0x090 */
  __IO uint32_t MAXWLR;          /*!< I3C maximum write length register           Address offset: 0x094 */
       uint32_t RESERVED6[2];    /*!< Reserved                                    Address offset: 0x098-0x09C */
  __IO uint32_t TIMINGR0;        /*!< I3C timing register 0                       Address offset: 0x0A0 */
  __IO uint32_t TIMINGR1;        /*!< I3C timing register 1                       Address offset: 0x0A4 */
  __IO uint32_t TIMINGR2;        /*!< I3C timing register 2                       Address offset: 0x0A8 */
       uint32_t RESERVED7[5];    /*!< Reserved                                    Address offset: 0x0AC-0x0BC */
  __IO uint32_t BCR;             /*!< I3C bus characteristics register            Address offset: 0x0C0 */
  __IO uint32_t DCR;             /*!< I3C device characteristics register         Address offset: 0x0C4 */
  __IO uint32_t GETCAPR;         /*!< I3C get capability register                 Address offset: 0x0C8 */
  __IO uint32_t CRCAPR;          /*!< I3C controller-role capability register     Address offset: 0x0CC */
  __IO uint32_t GETMXDSR;        /*!< I3C get capability register                 Address offset: 0x0D0 */
  __IO uint32_t EPIDR;           /*!< I3C extended provisioned ID register        Address offset: 0x0D4 */
       uint32_t RESERVED8[198];  /*!< Reserved                                    Address offset: 0x0D8-0x3EC */
  __IO uint32_t HWCFGR;          /*!< I3C hardware configuration register         Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< I3C version register                        Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< I3C IP identification register              Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< I3C IP size identification register         Address offset: 0x3FC */
} I3C_TypeDef;

/*
 * @brief Inter-Processor Communication Controller (IPCC)
 */
typedef struct
{
  __IO uint32_t C1CR;            /*!< IPCC Processor 1 control register                 Address offset: 0x000 */
  __IO uint32_t C1MR;            /*!< IPCC Processor 1 mask register                    Address offset: 0x004 */
  __IO uint32_t C1SCR;           /*!< IPCC Processor 1 status set clear register        Address offset: 0x008 */
  __IO uint32_t C1TOC2SR;        /*!< IPCC processor 1 to processor 2 status register   Address offset: 0x00C */
  __IO uint32_t C2CR;            /*!< IPCC Processor 2 control register                 Address offset: 0x010 */
  __IO uint32_t C2MR;            /*!< IPCC Processor 2 mask register                    Address offset: 0x014 */
  __IO uint32_t C2SCR;           /*!< IPCC Processor 2 status set clear register        Address offset: 0x018 */
  __IO uint32_t C2TOC1SR;        /*!< IPCC processor 2 to processor 1 status register   Address offset: 0x01C */
       uint32_t RESERVED0[24];   /*!< Reserved                                          Address offset: 0x020-0x07C */
  __IO uint32_t C1SECCFGR;       /*!< IPCC Processor 1 security configuration register  Address offset: 0x080 */
  __IO uint32_t C1PRIVCFGR;      /*!< IPCC processor 1 privilege configuration register Address offset: 0x084 */
  __IO uint32_t C1CIDCFGR;       /*!< IPCC processor 1 CID configuration register       Address offset: 0x088 */
       uint32_t RESERVED1;       /*!< Reserved                                          Address offset: 0x08C */
  __IO uint32_t C2SECCFGR;       /*!< IPCC processor 2 security configuration register  Address offset: 0x090 */
  __IO uint32_t C2PRIVCFGR;      /*!< IPCC processor 2 privilege configuration register Address offset: 0x094 */
  __IO uint32_t C2CIDCFGR;       /*!< IPCC processor 2 CID configuration register       Address offset: 0x098 */
       uint32_t RESERVED2[213];  /*!< Reserved                                          Address offset: 0x09C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< IPCC Hardware configuration register              Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< IPCC IP Version register                          Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< IPCC IP Identification register                   Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< IPCC Size ID register                             Address offset: 0x3FC */
} IPCC_TypeDef;

typedef struct
{
  __IO uint32_t CR;              /*!< Control register                                  Address offset: 0x000 */
  __IO uint32_t MR;              /*!< Mask register                                     Address offset: 0x004 */
  __IO uint32_t SCR;             /*!< Status set clear register                         Address offset: 0x008 */
  __IO uint32_t SR;              /*!< Status register                                   Address offset: 0x00C */
} IPCC_CommonTypeDef;

/*
 * @brief Independent Watchdog (IWDG)
 */
typedef struct
{
  __IO uint32_t KR;              /*!< IWDG key register                    Address offset: 0x000 */
  __IO uint32_t PR;              /*!< IWDG prescaler register              Address offset: 0x004 */
  __IO uint32_t RLR;             /*!< IWDG reload register                 Address offset: 0x008 */
  __IO uint32_t SR;              /*!< IWDG status register                 Address offset: 0x00C */
  __IO uint32_t WINR;            /*!< IWDG window register                 Address offset: 0x010 */
  __IO uint32_t EWCR;            /*!< IWDG early wakeup interrupt register Address offset: 0x014 */
  __IO uint32_t ICR;             /*!< IWDG Interrupt clear register        Address offset: 0x018 */
       uint32_t RESERVED0[245];  /*!< Reserved                             Address offset: 0x01C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< IWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< IWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IDR;             /*!< IWDG identification register         Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< IWDG size identification register    Address offset: 0x3FC */
} IWDG_TypeDef;

/*
 * @brief Low power timer (LPTIM)
          IP version is v2_1
 */
typedef struct
{
  __IO uint32_t ISR;             /*!< LPTIM interrupt and status register                 Address offset: 0x000 */
  __IO uint32_t ICR;             /*!< LPTIM interrupt clear register                      Address offset: 0x004 */
  __IO uint32_t DIER;            /*!< LPTIM interrupt enable register                     Address offset: 0x008 */
  __IO uint32_t CFGR;            /*!< LPTIM configuration register                        Address offset: 0x00C */
  __IO uint32_t CR;              /*!< LPTIM control register                              Address offset: 0x010 */
  __IO uint32_t CCR1;            /*!< LPTIM compare register 1                            Address offset: 0x014 */
  __IO uint32_t ARR;             /*!< LPTIM autoreload register                           Address offset: 0x018 */
  __IO uint32_t CNT;             /*!< LPTIM counter register                              Address offset: 0x01C */
  __IO uint32_t OR;              /*!< LPTIM1 option register                              Address offset: 0x020 */
  __IO uint32_t CFGR2;           /*!< LPTIM configuration register 2                      Address offset: 0x024 */
  __IO uint32_t RCR;             /*!< LPTIM repetition register                           Address offset: 0x028 */
  __IO uint32_t CCMR1;           /*!< LPTIM capture/compare mode register 1               Address offset: 0x02C */
       uint32_t RESERVED1;       /*!< Reserved                                            Address offset: 0x030 */
  __IO uint32_t CCR2;            /*!< LPTIM compare register 2                            Address offset: 0x034 */
       uint32_t RESERVED2[237];  /*!< Reserved                                            Address offset: 0x038-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< LPTIM peripheral hardware configuration register 2  Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< LPTIM peripheral hardware configuration register 1  Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< LPTIM peripheral version identification register    Address offset: 0x3F4 */
  __IO uint32_t PIDR;            /*!< LPTIM peripheral type identification register       Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< LPTIM registers map size identification register    Address offset: 0x3FC */
} LPTIM_TypeDef;

/**
  * @brief MDF/ADF
  */
typedef struct
{
 __IO uint32_t GCR;            /*!< MDF Global Control register,             Address offset: 0x00  */
 __IO uint32_t CKGCR;          /*!< MDF Clock Generator Control Register,    Address offset: 0x04  */
 uint32_t     RESERVED1[6];    /*!< Reserved, 0x08-0x1C                                            */
 __IO uint32_t OR;             /*!< MDF  Option Register,                    Address offset: 0x20  */
 uint32_t     RESERVED2[1011]; /*!< Reserved, 0x24-0xFEC                                           */
 __IO uint32_t HWCFGR;         /*!< MDF Hardware Configuration Register,     Address offset:0xFF0  */
 __IO uint32_t VERR;           /*!< MDF Version Register,                    Address offset:0xFF4  */
 __IO uint32_t IPIDR;          /*!< MDF Identification Register,             Address offset:0xFF8  */
 __IO uint32_t SIDR;           /*!< MDF Size Identification Register,        Address offset:0xFFC  */
}MDF_TypeDef;

/**
  * @brief MDF/ADF filter
  */
typedef struct
{
 __IO uint32_t SITFCR;         /*!< MDF Serial Interface Control Register,          Address offset: 0x80 */
 __IO uint32_t BSMXCR;         /*!< MDF Bitstream Matrix Control Register,          Address offset: 0x84 */
 __IO uint32_t DFLTCR;         /*!< MDF Digital Filter Control Register,            Address offset: 0x88 */
 __IO uint32_t DFLTCICR;       /*!< MDF MCIC Configuration Register,                Address offset: 0x8C */
 __IO uint32_t DFLTRSFR;       /*!< MDF Reshape Filter Configuration Register,      Address offset: 0x90 */
 __IO uint32_t DFLTINTR;       /*!< MDF Integrator Configuration Register,          Address offset: 0x94 */
 __IO uint32_t OLDCR;          /*!< MDF Out-Of Limit Detector Control Register,     Address offset: 0x98 */
 __IO uint32_t OLDTHLR;        /*!< MDF OLD Threshold Low Register,                 Address offset: 0x9C */
 __IO uint32_t OLDTHHR;        /*!< MDF OLD Threshold High Register,                Address offset: 0xA0 */
 __IO uint32_t DLYCR;          /*!< MDF Delay control Register,                     Address offset: 0xA4 */
 __IO uint32_t SCDCR;          /*!< MDF short circuit detector control Register,    Address offset: 0xA8 */
 __IO uint32_t DFLTIER;        /*!< MDF DFLT Interrupt enable Register,             Address offset: 0xAC */
 __IO uint32_t DFLTISR;        /*!< MDF DFLT Interrupt status Register,             Address offset: 0xB0 */
 __IO uint32_t OECCR;          /*!< MDF Offset Error Compensation Control Register, Address offset: 0xB4 */
 __IO uint32_t SADCR;          /*!< MDF SAD Control Register,                       Address offset: 0xB8 */
 __IO uint32_t SADCFGR;        /*!< MDF SAD configuration register,                 Address offset: 0xBC */
 __IO uint32_t SADSDLVR;       /*!< MDF SAD Sound level Register,                   Address offset: 0xC0 */
 __IO uint32_t SADANLVR;       /*!< MDF SAD Ambient Noise level Register,           Address offset: 0xC4 */
 uint32_t     RESERVED1[9];    /*!< Reserved, 0xC8-0xE8                                                  */
 __IO uint32_t SNPSDR;         /*!< MDF Snapshot Data Register,                     Address offset: 0xEC */
 __IO uint32_t DFLTDR;         /*!< MDF Digital Filter Data Register,               Address offset: 0xF0 */
} MDF_Filter_TypeDef;

/**
  * @brief Power Management
  */
typedef struct
{
  __IO uint32_t CR1;             /*!< PWR control register 1                         Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< PWR control register 2                         Address offset: 0x004 */
  __IO uint32_t CR3;             /*!< PWR control register 3                         Address offset: 0x008 */
       uint32_t RESERVED0;       /*!< Reserved                                       Address offset: 0x00C */
  __IO uint32_t CR5;             /*!< PWR control register 5                         Address offset: 0x010 */
  __IO uint32_t CR6;             /*!< PWR control register 6                         Address offset: 0x014 */
  __IO uint32_t CR7;             /*!< PWR control register 7                         Address offset: 0x018 */
  __IO uint32_t CR8;             /*!< PWR control register 8                         Address offset: 0x01C */
  __IO uint32_t CR9;             /*!< PWR control register 9                         Address offset: 0x020 */
  __IO uint32_t CR10;            /*!< PWR control register 10                        Address offset: 0x024 */
  __IO uint32_t CR11;            /*!< PWR control register 11                        Address offset: 0x028 */
  __IO uint32_t CR12;            /*!< PWR control register 12                        Address offset: 0x02C */
       uint32_t RESERVED1[2];    /*!< Reserved                                       Address offset: 0x030-0x034 */
  __IO uint32_t BDCR1;           /*!< PWR backup domain control register 1           Address offset: 0x038 */
  __IO uint32_t BDCR2;           /*!< PWR backup domain control register 2           Address offset: 0x03C */
  __IO uint32_t CPU1CR;          /*!< PWR CPU1 control register                      Address offset: 0x040 */
  __IO uint32_t CPU2CR;          /*!< PWR CPU2 control register                      Address offset: 0x044 */
  __IO uint32_t CPU3CR;          /*!< PWR CPU3 control register                      Address offset: 0x048 */
  __IO uint32_t D1CR;            /*!< PWR D1 control register                        Address offset: 0x04C */
  __IO uint32_t D2CR;            /*!< PWR D2 control register                        Address offset: 0x050 */
  __IO uint32_t D3CR;            /*!< PWR D3 control register                        Address offset: 0x054 */
       uint32_t RESERVED2[2];    /*!< Reserved                                       Address offset: 0x058-0x05C */
  __IO uint32_t WKUPCR1;         /*!< PWR wake-up control register 1                 Address offset: 0x060 */
  __IO uint32_t WKUPCR2;         /*!< PWR wake-up control register 2                 Address offset: 0x064 */
  __IO uint32_t WKUPCR3;         /*!< PWR wake-up control register 3                 Address offset: 0x068 */
  __IO uint32_t WKUPCR4;         /*!< PWR wake-up control register 4                 Address offset: 0x06C */
  __IO uint32_t WKUPCR5;         /*!< PWR wake-up control register 5                 Address offset: 0x070 */
  __IO uint32_t WKUPCR6;         /*!< PWR wake-up control register 6                 Address offset: 0x074 */
       uint32_t RESERVED3[8];    /*!< Reserved                                       Address offset: 0x078-0x094 */
  __IO uint32_t D3WKUPENR;       /*!< PWR D3 wake-up enable register                 Address offset: 0x098 */
       uint32_t RESERVED4[25];   /*!< Reserved                                       Address offset: 0x09C-0x0FC */
  __IO uint32_t RSECCFGR;        /*!< PWR resource secure configuration register     Address offset: 0x100 */
  __IO uint32_t RPRIVCFGR;       /*!< PWR resource privileged configuration register Address offset: 0x104 */
  __IO uint32_t RxCIDCFGR[7];    /*!< PWR Resource 0-6 CID Configuration Registers   Address offsets 0x108-0x120 */
       uint32_t RESERVED5[23];   /*!< Reserved                                       Address offset: 0x124-0x17C */
  __IO uint32_t WIOSECCFGR;      /*!< PWR WIO secure configuration register          Address offset: 0x180 */
  __IO uint32_t WIOPRIVCFGR;     /*!< PWR WIO privileged configuration register      Address offset: 0x184 */
  __IO uint32_t WIO1CIDCFGR;     /*!< PWR WIO 1 CID configuration register           Address offset: 0x188 */
  __IO uint32_t WIO1SEMCR;       /*!< PWR WIO 1 semaphore control register           Address offset: 0x18C */
  __IO uint32_t WIO2CIDCFGR;     /*!< PWR WIO 2 CID configuration register           Address offset: 0x190 */
  __IO uint32_t WIO2SEMCR;       /*!< PWR WIO 2 semaphore control register           Address offset: 0x194 */
  __IO uint32_t WIO3CIDCFGR;     /*!< PWR WIO 3 CID configuration register           Address offset: 0x198 */
  __IO uint32_t WIO3SEMCR;       /*!< PWR WIO 3 semaphore control register           Address offset: 0x19C */
  __IO uint32_t WIO4CIDCFGR;     /*!< PWR WIO 4 CID configuration register           Address offset: 0x1A0 */
  __IO uint32_t WIO4SEMCR;       /*!< PWR WIO 4 semaphore control register           Address offset: 0x1A4 */
  __IO uint32_t WIO5CIDCFGR;     /*!< PWR WIO 5 CID configuration register           Address offset: 0x1A8 */
  __IO uint32_t WIO5SEMCR;       /*!< PWR WIO 5 semaphore control register           Address offset: 0x1AC */
  __IO uint32_t WIO6CIDCFGR;     /*!< PWR WIO 6 CID configuration register           Address offset: 0x1B0 */
  __IO uint32_t WIO6SEMCR;       /*!< PWR WIO 6 semaphore control register           Address offset: 0x1B4 */
       uint32_t RESERVED6[18];   /*!< Reserved                                       Address offset: 0x1B8-0x1FC */
  __IO uint32_t CPU1D1SR;        /*!< PWR CPU1 status register                       Address offset: 0x200 */
  __IO uint32_t CPU2D2SR;        /*!< PWR CPU2 status register                       Address offset: 0x204 */
  __IO uint32_t CPU3D3SR;        /*!< PWR CPU3 status register                       Address offset: 0x208 */
       uint32_t RESERVED7[122];  /*!< Reserved                                       Address offset: 0x20C-0x3F0 */
  __IO uint32_t VERR;            /*!< PWR VER register                               Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< PWR identifier register                        Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< PWR size identification register               Address offset: 0x3FC */
} PWR_TypeDef;

/**
  * @brief RISC Resource Isolation Slave Controller Compartment (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t CIDCFGR;        /*!< RISC CID configuration register for peripheral x */
  __IO uint32_t SEMCR;          /*!< RISC Semaphore control register for peripheral x */
} RISC_Comp_TypeDef;

/**
  * @brief RISC Resource Isolation Slave Controller Peripheral (RIF User Spec Rev 1.0.14)
  */
typedef struct
{
  __IO uint32_t          CR;             /*!< RISC Control register,                                           Address offset: 0x000 */
       uint32_t          RESERVED1[3];   /*!< Reserved,                                                                  0x004-0x00C */
  __IO uint32_t          SECCFGR[6];     /*!< RISC Security configuration register x,                                    0x010-0x024 */
       uint32_t          RESERVED2[2];   /*!< Reserved,                                                                  0x028-0x02C */
  __IO uint32_t          PRIVCFGR[6];    /*!< RISC Privileged configuration register x,                                  0x030-0x044 */
       uint32_t          RESERVED3[2];   /*!< Reserved,                                                                  0x048-0x04C */
  __IO uint32_t          RCFGLOCKR[6];   /*!< RISC Resource configuration lock register x,                               0x050-0x064 */
       uint32_t          RESERVED4[38];  /*!< Reserved,                                                                  0x068-0x0FC */
       RISC_Comp_TypeDef PER[128];       /*!< RISC Compartment configuration for peripheral x                            0x100-0x4FC */
       uint32_t          RESERVED5[256]; /*!< Reserved,                                                                  0x500-0x8FC */
  __IO uint32_t          REG1ACFGR;      /*!< RISAL Region 1 subregion A configuration register,               Address offset: 0x900 */
  __IO uint32_t          RESERVED6[1];   /*!< Reserved,                                                        Address offset: 0x904 */
  __IO uint32_t          REG1BCFGR;      /*!< RISAL Region 1 subregion B configuration register,               Address offset: 0x908 */
  __IO uint32_t          RESERVED7[1];   /*!< Reserved,                                                        Address offset: 0x90C */
  __IO uint32_t          REG2ACFGR;      /*!< RISAL Region 2 subregion A configuration register,               Address offset: 0x910 */
  __IO uint32_t          RESERVED8[1];   /*!< Reserved,                                                        Address offset: 0x914 */
  __IO uint32_t          REG2BCFGR;      /*!< RISAL Region 2 subregion B configuration register,               Address offset: 0x918 */
  __IO uint32_t          RESERVED9[1];   /*!< Reserved,                                                        Address offset: 0x91C */
  __IO uint32_t          REG3ACFGR;      /*!< RISAL Region 3 subregion A configuration register,               Address offset: 0x920 */
  __IO uint32_t          REG3AADDR;      /*!< RISAL Region 3 subregion A address register,                     Address offset: 0x924 */
  __IO uint32_t          REG3BCFGR;      /*!< RISAL Region 3 subregion B configuration register,               Address offset: 0x928 */
  __IO uint32_t          REG3BADDR;      /*!< RISAL Region 3 subregion B address register,                     Address offset: 0x92C */
} RISC_TypeDef;

/*
* @brief RTC Specific device feature definitions
*/
#define RTC_BKP_NB         128U
#define RTC_TAMP_NB        8U
#define RTC_INT_TAMP_NB    14U

/**
  * @brief Real-Time Clock
  */
typedef struct
{
  __IO uint32_t TR;             /*!< RTC time register                                Address offset: 0x000 */
  __IO uint32_t DR;             /*!< RTC date register                                Address offset: 0x004 */
  __IO uint32_t SSR;            /*!< RTC sub second register                          Address offset: 0x008 */
  __IO uint32_t ICSR;           /*!< RTC initialization control and status register   Address offset: 0x00C */
  __IO uint32_t PRER;           /*!< RTC prescaler register                           Address offset: 0x010 */
  __IO uint32_t WUTR;           /*!< RTC wakeup timer register                        Address offset: 0x014 */
  __IO uint32_t CR;             /*!< RTC control register                             Address offset: 0x018 */
  __IO uint32_t PRIVCR;         /*!< RTC privilege mode control register              Address offset: 0x01C */
  __IO uint32_t SECCFGR;        /*!< RTC secure mode control register                 Address offset: 0x020 */
  __IO uint32_t WPR;            /*!< RTC write protection register                    Address offset: 0x024 */
  __IO uint32_t CALR;           /*!< RTC calibration register                         Address offset: 0x028 */
  __IO uint32_t SHIFTR;         /*!< RTC shift control register                       Address offset: 0x02C */
  __IO uint32_t TSTR;           /*!< RTC timestamp time register                      Address offset: 0x030 */
  __IO uint32_t TSDR;           /*!< RTC timestamp date register                      Address offset: 0x034 */
  __IO uint32_t TSSSR;          /*!< RTC timestamp sub second register                Address offset: 0x038 */
       uint32_t RESERVED0;      /*!< Reserved                                         Address offset: 0x03C */
  __IO uint32_t ALRMAR;         /*!< RTC alarm A register                             Address offset: 0x040 */
  __IO uint32_t ALRMASSR;       /*!< RTC alarm A sub second register                  Address offset: 0x044 */
  __IO uint32_t ALRMBR;         /*!< RTC alarm B register                             Address offset: 0x048 */
  __IO uint32_t ALRMBSSR;       /*!< RTC alarm B sub second register                  Address offset: 0x04C */
  __IO uint32_t SR;             /*!< RTC Status register                              Address offset: 0x050 */
  __IO uint32_t MISR;           /*!< RTC non-secure masked interrupt status register  Address offset: 0x054 */
  __IO uint32_t SMISR;          /*!< RTC secure masked interrupt status register      Address offset: 0x058 */
  __IO uint32_t SCR;            /*!< RTC status Clear register                        Address offset: 0x05C */
  __IO uint32_t CFGR;           /*!< RTC configuration register                       Address offset: 0x060 */
       uint32_t RESERVED1[3];   /*!< Reserved                                         Address offset: 0x064-0x06C */
  __IO uint32_t ALRABINR;       /*!< RTC alarm A binary mode register                 Address offset: 0x070 */
  __IO uint32_t ALRBBINR;       /*!< RTC alarm B binary mode register                 Address offset: 0x074 */
       uint32_t RESERVED2[2];   /*!< Reserved                                         Address offset: 0x078-0x07C */
  __IO uint32_t RCIDCFGR[6];    /*!< RTC Resource x CID configuration register        Address offset: 0x080-0x094 */
       uint32_t RESERVED3[214]; /*!< Reserved                                         Address offset: 0x098-0x3EC */
  __IO uint32_t HWCFGR;         /*!< RTC hardware configuration register              Address offset: 0x3F0 */
  __IO uint32_t VERR;           /*!< RTC version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;          /*!< RTC identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;           /*!< RTC size identification register                 Address offset: 0x3FC */
} RTC_TypeDef;


/**
  * @brief SPI/I2S
  *
  *     Serial peripheral interface and integrated interchip sound
  *     User Spec c7amba_spi2s3 version v2.0  (April 21th, 2020 Draft!!)
  *
  */
typedef struct
{
  __IO uint32_t CR1;              /*!< SPI/I2S Control register 1,                         Address offset: 0x000       */
  __IO uint32_t CR2;              /*!< SPI Control register 2,                             Address offset: 0x004       */
  __IO uint32_t CFG1;             /*!< SPI Configuration register 1,                       Address offset: 0x008       */
  __IO uint32_t CFG2;             /*!< SPI Configuration register 2,                       Address offset: 0x00C       */
  __IO uint32_t IER;              /*!< SPI/I2S Interrupt Enable register,                  Address offset: 0x010       */
  __IO uint32_t SR;               /*!< SPI Status register,                                Address offset: 0x014       */
  __IO uint32_t IFCR;             /*!< SPI/I2S Interrupt/Status Flags Clear register,      Address offset: 0x018       */
  __IO uint32_t AUTOCR;           /*!< SPI/I2S Autonomous Mode Control register,           Address offset: 0x01C       */
  __IO uint32_t TXDR;             /*!< SPI/I2S Transmit data register,                     Address offset: 0x020       */
  uint32_t      RESERVED0[3];     /*!< Reserved,                                           Address offset: 0x024-0x02C */
  __IO uint32_t RXDR;             /*!< SPI/I2S Receive data register,                      Address offset: 0x030       */
  uint32_t      RESERVED1[3];     /*!< Reserved,                                           Adresse offset: 0X034-0x03C */
  __IO uint32_t CRCPOLY;          /*!< SPI CRC Polynomial register,                        Address offset: 0x040       */
  __IO uint32_t TXCRC;            /*!< SPI Transmitter CRC register,                       Address offset: 0x044       */
  __IO uint32_t RXCRC;            /*!< SPI Receiver CRC register,                          Address offset: 0x048       */
  __IO uint32_t UDRDR;            /*!< SPI Underrun data register,                         Address offset: 0x04C       */
  __IO uint32_t I2SCFGR;          /*!< SPI/I2S configuration register,                     Address offset: 0x050       */
  uint32_t      RESERVED2[230];   /*!< Reserved,                                           Adresse offset: 0X054-0x3E8 */
  __IO uint32_t HWCFGR2;          /*!< SPI/I2S hardware configuration register 2,          Address offset: 0x03EC      */
  __IO uint32_t HWCFGR1;          /*!< SPI/I2S hardware configuration register 1,          Address offset: 0x03F0      */
  __IO uint32_t VERR;             /*!< SPI/I2S Version register,                           Address offset: 0x03F4      */
  __IO uint32_t IPIDR;            /*!< SPI/I2S Identification register,                    Address offset: 0x03F8      */
  __IO uint32_t SIDR;             /*!< SPI/I2S Size Identification register,               Address offset: 0x03FC      */
} SPI_TypeDef;

/**
  * @brief Tamper and backup registers
  */
typedef struct
{
  __IO uint32_t CR1;           /*!< TAMP control register 1                           Address offset: 0x000 */
  __IO uint32_t CR2;           /*!< TAMP control register 2                           Address offset: 0x004 */
  __IO uint32_t CR3;           /*!< TAMP control register 3                           Address offset: 0x008 */
  __IO uint32_t FLTCR;         /*!< TAMP filter control register                      Address offset: 0x00C */
  __IO uint32_t ATCR1;         /*!< TAMP active tamper control register 1             Address offset: 0x010 */
  __IO uint32_t ATSEEDR;       /*!< TAMP active tamper seed register                  Address offset: 0x014 */
  __IO uint32_t ATOR;          /*!< TAMP active tamper output register                Address offset: 0x018 */
  __IO uint32_t ATCR2;         /*!< TAMP active tamper control register 2             Address offset: 0x01C */
  __IO uint32_t SECCFGR;       /*!< TAMP secure mode register                         Address offset: 0x020 */
  __IO uint32_t PRIVCR;        /*!< TAMP privilege mode control register              Address offset: 0x024 */
       uint32_t RESERVED0;     /*!< Reserved                                          Address offset: 0x028 */
  __IO uint32_t IER;           /*!< TAMP interrupt enable register                    Address offset: 0x02C */
  __IO uint32_t SR;            /*!< TAMP status register                              Address offset: 0x030 */
  __IO uint32_t MISR;          /*!< TAMP non-secure masked interrupt status register  Address offset: 0x034 */
  __IO uint32_t SMISR;         /*!< TAMP secure masked interrupt status register      Address offset: 0x038 */
  __IO uint32_t SCR;           /*!< TAMP status clear register                        Address offset: 0x03C */
  __IO uint32_t COUNT1R;       /*!< TAMP monotonic counter 1 register                 Address offset: 0x040 */
  __IO uint32_t COUNT2R;       /*!< TAMP monotonic counter 2 register                 Address offset: 0x044 */
       uint32_t RESERVED1[2];  /*!< Reserved                                          Address offset: 0x048-0x04C */
  __IO uint32_t OR;            /*!< TAMP option register                              Address offset: 0x050 */
  __IO uint32_t ERCFGR;        /*!< TAMP erase configuration register                 Address offset: 0x054 */
       uint32_t RESERVED2[6];  /*!< Reserved                                          Address offset: 0x058-0x06C */
  __IO uint32_t BKPRIFR1;      /*!< TAMP Backup registers RIF register 1              Address offset: 0x070 */
  __IO uint32_t BKPRIFR2;      /*!< TAMP Backup registers RIF register 2              Address offset: 0x074 */
  __IO uint32_t BKPRIFR3;      /*!< TAMP Backup registers RIF register 3              Address offset: 0x078 */
       uint32_t RESERVED3;     /*!< Reserved                                          Address offset: 0x07C */
  __IO uint32_t RCIDCFGR[3];   /*!< TAMP Resource CID configuration register          Address offset: 0x080-0x088 */
       uint32_t RESERVED4[29]; /*!< Reserved                                          Address offset: 0x08C-0x0FC */
  __IO uint32_t BKP0R;         /*!< TAMP backup register 0                            Address offset: 0x100 */
  __IO uint32_t BKP1R;         /*!< TAMP backup register 1                            Address offset: 0x104 */
  __IO uint32_t BKP2R;         /*!< TAMP backup register 2                            Address offset: 0x108 */
  __IO uint32_t BKP3R;         /*!< TAMP backup register 3                            Address offset: 0x10C */
  __IO uint32_t BKP4R;         /*!< TAMP backup register 4                            Address offset: 0x110 */
  __IO uint32_t BKP5R;         /*!< TAMP backup register 5                            Address offset: 0x114 */
  __IO uint32_t BKP6R;         /*!< TAMP backup register 6                            Address offset: 0x118 */
  __IO uint32_t BKP7R;         /*!< TAMP backup register 7                            Address offset: 0x11C */
  __IO uint32_t BKP8R;         /*!< TAMP backup register 8                            Address offset: 0x120 */
  __IO uint32_t BKP9R;         /*!< TAMP backup register 9                            Address offset: 0x124 */
  __IO uint32_t BKP10R;        /*!< TAMP backup register 10                           Address offset: 0x128 */
  __IO uint32_t BKP11R;        /*!< TAMP backup register 11                           Address offset: 0x12C */
  __IO uint32_t BKP12R;        /*!< TAMP backup register 12                           Address offset: 0x130 */
  __IO uint32_t BKP13R;        /*!< TAMP backup register 13                           Address offset: 0x134 */
  __IO uint32_t BKP14R;        /*!< TAMP backup register 14                           Address offset: 0x138 */
  __IO uint32_t BKP15R;        /*!< TAMP backup register 15                           Address offset: 0x13C */
  __IO uint32_t BKP16R;        /*!< TAMP backup register 16                           Address offset: 0x140 */
  __IO uint32_t BKP17R;        /*!< TAMP backup register 17                           Address offset: 0x144 */
  __IO uint32_t BKP18R;        /*!< TAMP backup register 18                           Address offset: 0x148 */
  __IO uint32_t BKP19R;        /*!< TAMP backup register 19                           Address offset: 0x14C */
  __IO uint32_t BKP20R;        /*!< TAMP backup register 20                           Address offset: 0x150 */
  __IO uint32_t BKP21R;        /*!< TAMP backup register 21                           Address offset: 0x154 */
  __IO uint32_t BKP22R;        /*!< TAMP backup register 22                           Address offset: 0x158 */
  __IO uint32_t BKP23R;        /*!< TAMP backup register 23                           Address offset: 0x15C */
  __IO uint32_t BKP24R;        /*!< TAMP backup register 24                           Address offset: 0x160 */
  __IO uint32_t BKP25R;        /*!< TAMP backup register 25                           Address offset: 0x164 */
  __IO uint32_t BKP26R;        /*!< TAMP backup register 26                           Address offset: 0x168 */
  __IO uint32_t BKP27R;        /*!< TAMP backup register 27                           Address offset: 0x16C */
  __IO uint32_t BKP28R;        /*!< TAMP backup register 28                           Address offset: 0x170 */
  __IO uint32_t BKP29R;        /*!< TAMP backup register 29                           Address offset: 0x174 */
  __IO uint32_t BKP30R;        /*!< TAMP backup register 30                           Address offset: 0x178 */
  __IO uint32_t BKP31R;        /*!< TAMP backup register 31                           Address offset: 0x17C */
  __IO uint32_t BKP32R;        /*!< TAMP backup register 32                           Address offset: 0x180 */
  __IO uint32_t BKP33R;        /*!< TAMP backup register 33                           Address offset: 0x184 */
  __IO uint32_t BKP34R;        /*!< TAMP backup register 34                           Address offset: 0x188 */
  __IO uint32_t BKP35R;        /*!< TAMP backup register 35                           Address offset: 0x18C */
  __IO uint32_t BKP36R;        /*!< TAMP backup register 36                           Address offset: 0x190 */
  __IO uint32_t BKP37R;        /*!< TAMP backup register 37                           Address offset: 0x194 */
  __IO uint32_t BKP38R;        /*!< TAMP backup register 38                           Address offset: 0x198 */
  __IO uint32_t BKP39R;        /*!< TAMP backup register 39                           Address offset: 0x19C */
  __IO uint32_t BKP40R;        /*!< TAMP backup register 40                           Address offset: 0x1A0 */
  __IO uint32_t BKP41R;        /*!< TAMP backup register 41                           Address offset: 0x1A4 */
  __IO uint32_t BKP42R;        /*!< TAMP backup register 42                           Address offset: 0x1A8 */
  __IO uint32_t BKP43R;        /*!< TAMP backup register 43                           Address offset: 0x1AC */
  __IO uint32_t BKP44R;        /*!< TAMP backup register 44                           Address offset: 0x1B0 */
  __IO uint32_t BKP45R;        /*!< TAMP backup register 45                           Address offset: 0x1B4 */
  __IO uint32_t BKP46R;        /*!< TAMP backup register 46                           Address offset: 0x1B8 */
  __IO uint32_t BKP47R;        /*!< TAMP backup register 47                           Address offset: 0x1BC */
  __IO uint32_t BKP48R;        /*!< TAMP backup register 48                           Address offset: 0x1C0 */
  __IO uint32_t BKP49R;        /*!< TAMP backup register 49                           Address offset: 0x1C4 */
  __IO uint32_t BKP50R;        /*!< TAMP backup register 50                           Address offset: 0x1C8 */
  __IO uint32_t BKP51R;        /*!< TAMP backup register 51                           Address offset: 0x1CC */
  __IO uint32_t BKP52R;        /*!< TAMP backup register 52                           Address offset: 0x1D0 */
  __IO uint32_t BKP53R;        /*!< TAMP backup register 53                           Address offset: 0x1D4 */
  __IO uint32_t BKP54R;        /*!< TAMP backup register 54                           Address offset: 0x1D8 */
  __IO uint32_t BKP55R;        /*!< TAMP backup register 55                           Address offset: 0x1DC */
  __IO uint32_t BKP56R;        /*!< TAMP backup register 56                           Address offset: 0x1E0 */
  __IO uint32_t BKP57R;        /*!< TAMP backup register 57                           Address offset: 0x1E4 */
  __IO uint32_t BKP58R;        /*!< TAMP backup register 58                           Address offset: 0x1E8 */
  __IO uint32_t BKP59R;        /*!< TAMP backup register 59                           Address offset: 0x1EC */
  __IO uint32_t BKP60R;        /*!< TAMP backup register 60                           Address offset: 0x1F0 */
  __IO uint32_t BKP61R;        /*!< TAMP backup register 61                           Address offset: 0x1F4 */
  __IO uint32_t BKP62R;        /*!< TAMP backup register 62                           Address offset: 0x1F8 */
  __IO uint32_t BKP63R;        /*!< TAMP backup register 63                           Address offset: 0x1FC */
  __IO uint32_t BKP64R;        /*!< TAMP backup register 64                           Address offset: 0x200 */
  __IO uint32_t BKP65R;        /*!< TAMP backup register 65                           Address offset: 0x204 */
  __IO uint32_t BKP66R;        /*!< TAMP backup register 66                           Address offset: 0x208 */
  __IO uint32_t BKP67R;        /*!< TAMP backup register 67                           Address offset: 0x20C */
  __IO uint32_t BKP68R;        /*!< TAMP backup register 68                           Address offset: 0x210 */
  __IO uint32_t BKP69R;        /*!< TAMP backup register 69                           Address offset: 0x214 */
  __IO uint32_t BKP70R;        /*!< TAMP backup register 70                           Address offset: 0x218 */
  __IO uint32_t BKP71R;        /*!< TAMP backup register 71                           Address offset: 0x21C */
  __IO uint32_t BKP72R;        /*!< TAMP backup register 72                           Address offset: 0x220 */
  __IO uint32_t BKP73R;        /*!< TAMP backup register 73                           Address offset: 0x224 */
  __IO uint32_t BKP74R;        /*!< TAMP backup register 74                           Address offset: 0x228 */
  __IO uint32_t BKP75R;        /*!< TAMP backup register 75                           Address offset: 0x22C */
  __IO uint32_t BKP76R;        /*!< TAMP backup register 76                           Address offset: 0x230 */
  __IO uint32_t BKP77R;        /*!< TAMP backup register 77                           Address offset: 0x234 */
  __IO uint32_t BKP78R;        /*!< TAMP backup register 78                           Address offset: 0x238 */
  __IO uint32_t BKP79R;        /*!< TAMP backup register 79                           Address offset: 0x23C */
  __IO uint32_t BKP80R;        /*!< TAMP backup register 80                           Address offset: 0x240 */
  __IO uint32_t BKP81R;        /*!< TAMP backup register 81                           Address offset: 0x244 */
  __IO uint32_t BKP82R;        /*!< TAMP backup register 82                           Address offset: 0x248 */
  __IO uint32_t BKP83R;        /*!< TAMP backup register 83                           Address offset: 0x24C */
  __IO uint32_t BKP84R;        /*!< TAMP backup register 84                           Address offset: 0x250 */
  __IO uint32_t BKP85R;        /*!< TAMP backup register 85                           Address offset: 0x254 */
  __IO uint32_t BKP86R;        /*!< TAMP backup register 86                           Address offset: 0x258 */
  __IO uint32_t BKP87R;        /*!< TAMP backup register 87                           Address offset: 0x25C */
  __IO uint32_t BKP88R;        /*!< TAMP backup register 88                           Address offset: 0x260 */
  __IO uint32_t BKP89R;        /*!< TAMP backup register 89                           Address offset: 0x264 */
  __IO uint32_t BKP90R;        /*!< TAMP backup register 90                           Address offset: 0x268 */
  __IO uint32_t BKP91R;        /*!< TAMP backup register 91                           Address offset: 0x26C */
  __IO uint32_t BKP92R;        /*!< TAMP backup register 92                           Address offset: 0x270 */
  __IO uint32_t BKP93R;        /*!< TAMP backup register 93                           Address offset: 0x274 */
  __IO uint32_t BKP94R;        /*!< TAMP backup register 94                           Address offset: 0x278 */
  __IO uint32_t BKP95R;        /*!< TAMP backup register 95                           Address offset: 0x27C */
  __IO uint32_t BKP96R;        /*!< TAMP backup register 96                           Address offset: 0x280 */
  __IO uint32_t BKP97R;        /*!< TAMP backup register 97                           Address offset: 0x284 */
  __IO uint32_t BKP98R;        /*!< TAMP backup register 98                           Address offset: 0x288 */
  __IO uint32_t BKP99R;        /*!< TAMP backup register 99                           Address offset: 0x28C */
  __IO uint32_t BKP100R;       /*!< TAMP backup register 100                          Address offset: 0x290 */
  __IO uint32_t BKP101R;       /*!< TAMP backup register 101                          Address offset: 0x294 */
  __IO uint32_t BKP102R;       /*!< TAMP backup register 102                          Address offset: 0x298 */
  __IO uint32_t BKP103R;       /*!< TAMP backup register 103                          Address offset: 0x29C */
  __IO uint32_t BKP104R;       /*!< TAMP backup register 104                          Address offset: 0x2A0 */
  __IO uint32_t BKP105R;       /*!< TAMP backup register 105                          Address offset: 0x2A4 */
  __IO uint32_t BKP106R;       /*!< TAMP backup register 106                          Address offset: 0x2A8 */
  __IO uint32_t BKP107R;       /*!< TAMP backup register 107                          Address offset: 0x2AC */
  __IO uint32_t BKP108R;       /*!< TAMP backup register 108                          Address offset: 0x2B0 */
  __IO uint32_t BKP109R;       /*!< TAMP backup register 109                          Address offset: 0x2B4 */
  __IO uint32_t BKP110R;       /*!< TAMP backup register 110                          Address offset: 0x2B8 */
  __IO uint32_t BKP111R;       /*!< TAMP backup register 111                          Address offset: 0x2BC */
  __IO uint32_t BKP112R;       /*!< TAMP backup register 112                          Address offset: 0x2C0 */
  __IO uint32_t BKP113R;       /*!< TAMP backup register 113                          Address offset: 0x2C4 */
  __IO uint32_t BKP114R;       /*!< TAMP backup register 114                          Address offset: 0x2C8 */
  __IO uint32_t BKP115R;       /*!< TAMP backup register 115                          Address offset: 0x2CC */
  __IO uint32_t BKP116R;       /*!< TAMP backup register 116                          Address offset: 0x2D0 */
  __IO uint32_t BKP117R;       /*!< TAMP backup register 117                          Address offset: 0x2D4 */
  __IO uint32_t BKP118R;       /*!< TAMP backup register 118                          Address offset: 0x2D8 */
  __IO uint32_t BKP119R;       /*!< TAMP backup register 119                          Address offset: 0x2DC */
  __IO uint32_t BKP120R;       /*!< TAMP backup register 120                          Address offset: 0x2E0 */
  __IO uint32_t BKP121R;       /*!< TAMP backup register 121                          Address offset: 0x2E4 */
  __IO uint32_t BKP122R;       /*!< TAMP backup register 122                          Address offset: 0x2E8 */
  __IO uint32_t BKP123R;       /*!< TAMP backup register 123                          Address offset: 0x2EC */
  __IO uint32_t BKP124R;       /*!< TAMP backup register 124                          Address offset: 0x2F0 */
  __IO uint32_t BKP125R;       /*!< TAMP backup register 125                          Address offset: 0x2F4 */
  __IO uint32_t BKP126R;       /*!< TAMP backup register 126                          Address offset: 0x2F8 */
  __IO uint32_t BKP127R;       /*!< TAMP backup register 127                          Address offset: 0x2FC */
       uint32_t RESERVED5[59]; /*!< Reserved                                          Address offset: 0x300-0x3E8 */
  __IO uint32_t HWCFGR2;       /*!< TAMP hardware configuration register 2            Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;       /*!< TAMP hardware configuration register 1            Address offset: 0x3F0 */
  __IO uint32_t VERR;          /*!< TAMP version register                             Address offset: 0x3F4 */
  __IO uint32_t IPIDR;         /*!< TAMP identification register                      Address offset: 0x3F8 */
  __IO uint32_t SIDR;          /*!< TAMP size identification register                 Address offset: 0x3FC */
} TAMP_TypeDef;

/**
  * @brief Universal Synchronous Asynchronous Receiver Transmitter
  */
/* c7amba_sci3_v3.0 */
typedef struct
{
  __IO uint32_t CR1;             /*!< USART Control register 1                    Address offset: 0x000 */
  __IO uint32_t CR2;             /*!< USART Control register 2                    Address offset: 0x004 */
  __IO uint32_t CR3;             /*!< USART Control register 3                    Address offset: 0x008 */
  __IO uint32_t BRR;             /*!< USART Baud rate register                    Address offset: 0x00C */
  __IO uint32_t GTPR;            /*!< USART Guard time and prescaler register     Address offset: 0x010 */
  __IO uint32_t RTOR;            /*!< USART Receiver timeout register             Address offset: 0x014 */
  __IO uint32_t RQR;             /*!< USART Request register                      Address offset: 0x018 */
  __IO uint32_t ISR;             /*!< USART Interrupt and status register         Address offset: 0x01C */
  __IO uint32_t ICR;             /*!< USART Interrupt flag Clear register         Address offset: 0x020 */
  __IO uint32_t RDR;             /*!< USART Receive Data register                 Address offset: 0x024 */
  __IO uint32_t TDR;             /*!< USART Transmit Data register                Address offset: 0x028 */
  __IO uint32_t PRESC;           /*!< USART Prescaler register                    Address offset: 0x02C */
  __IO uint32_t AUTOCR;          /*!< USART Autonomous mode Control register      Address offset: 0x030 */
       uint32_t RESERVED0[238];  /*!< Reserved                                    Address offset: 0x034-0x3E8 */
  __IO uint32_t HWCFGR2;         /*!< USART Hardware Configuration register 2     Address offset: 0x3EC */
  __IO uint32_t HWCFGR1;         /*!< USART Hardware Configuration register 1     Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< USART version register                      Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< USART Identification register               Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< USART Size Identification register          Address offset: 0x3FC */
} USART_TypeDef;

/*
 * @brief Window Watchdog (WWDG)
 */
typedef struct
{
  __IO uint32_t CR;              /*!< Control register                     Address offset: 0x000 */
  __IO uint32_t CFR;             /*!< Configuration register               Address offset: 0x004 */
  __IO uint32_t SR;              /*!< Status register                      Address offset: 0x008 */
       uint32_t RESERVED0[249];  /*!< Reserved                             Address offset: 0x00C-0x3EC */
  __IO uint32_t HWCFGR;          /*!< WWDG hardware configuration register Address offset: 0x3F0 */
  __IO uint32_t VERR;            /*!< WWDG version register                Address offset: 0x3F4 */
  __IO uint32_t IPIDR;           /*!< WWDG ID register                     Address offset: 0x3F8 */
  __IO uint32_t SIDR;            /*!< WWDG size ID register                Address offset: 0x3FC */
} WWDG_TypeDef;

/**
  * @}
  */

/**
 * @}
 */

/** @addtogroup Peripheral_declaration
  * @{
  */
/**
 * @brief stm32mp2 base addresses Definitions :
 */
#define PERIPH_SIZE                         (0x10000000UL)  /*!< Size of : AHB/APB Peripherals                                  */

#define SRAMS_SIZE                          (0x10000000UL)  /*!< Size of : SRAMs memory region                                  */

#define LPSRAM1_SIZE                        (   8UL *1024UL) /*!< Unit is Byte                                                   */
#define LPSRAM2_SIZE                        (   8UL *1024UL) /*!< Unit is Byte                                                   */
#define LPSRAM3_SIZE                        (  16UL *1024UL) /*!< Unit is Byte                                                   */

/*!< Peripherals */
#define PERIPH_BASE                         (0x40000000UL)  /*!< Base address of : AHB/APB Peripherals                          */

/*!< Memories */
#define SRAMS_BASE                          (0x20000000UL)  /*!< Base address of : SRAMs region                                 */

#define LPSRAM1_BASE                        (SRAMS_BASE + 0x000C0000UL)     /*!< Base address of : Low Power System RAM                   */
#define LPSRAM2_BASE                        (SRAMS_BASE + 0x000C2000UL)     /*!< Base address of : Low Power System RAM                   */
#define LPSRAM3_BASE                        (SRAMS_BASE + 0x000C4000UL)     /*!< Base address of : Low Power System RAM                   */

/*!< Peripheral buses */
#define AHB3_PERIPH_BASE                    (PERIPH_BASE + 0x02000000UL)
#define AHB4_PERIPH_BASE                    (PERIPH_BASE + 0x04200000UL)
#define SMART_RUN_APB_PERIPH_BASE           (PERIPH_BASE + 0x06000000UL)
#define SMART_RUN_AHB_PERIPH_BASE           (PERIPH_BASE + 0x06200000UL)

#define RIFSC_BASE                          (AHB3_PERIPH_BASE + 0x080000UL)
#define RISC_BASE                           (RIFSC_BASE)
/*!< AHB4 peripherals */
#define PWR_BASE                            (AHB4_PERIPH_BASE + 0x10000UL)

/*!< SMART_RUN_APB peripherals */
#define RTC_BASE                            (SMART_RUN_APB_PERIPH_BASE + 0x00000UL)
#define TAMP_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x10000UL)
#define SPI8_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x20000UL)
#define LPUART1_BASE                        (SMART_RUN_APB_PERIPH_BASE + 0x30000UL)
#define I2C8_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x40000UL)
#define LPTIM3_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x50000UL)
#define LPTIM4_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x60000UL)
#define LPTIM5_BASE                         (SMART_RUN_APB_PERIPH_BASE + 0x70000UL)
#define I3C4_BASE                           (SMART_RUN_APB_PERIPH_BASE + 0x80000UL)
#define IWDG5_BASE                          (SMART_RUN_APB_PERIPH_BASE + 0x90000UL)
#define WWDG2_BASE                          (SMART_RUN_APB_PERIPH_BASE + 0xA0000UL)

/*!< SMART_RUN_AHB peripherals */
#define GPIOZ_BASE                          (SMART_RUN_AHB_PERIPH_BASE + 0x00000UL)
#define LPDMA_BASE                          (SMART_RUN_AHB_PERIPH_BASE + 0x10000UL)
#define ADF1_BASE                           (SMART_RUN_AHB_PERIPH_BASE + 0x20000UL)
#define ADF1_Filter0_BASE                   (ADF1_BASE + 0x80UL)
#define EXTI2_BASE                          (SMART_RUN_AHB_PERIPH_BASE + 0x30000UL)
#define EXTI2_C1_BASE                       (EXTI2_BASE + 0x80UL)
#define EXTI2_C2_BASE                       (EXTI2_BASE + 0xC0UL)
#define EXTI2_C3_BASE                       (EXTI2_BASE + 0x100UL)
#define HSEM_BASE                           (SMART_RUN_AHB_PERIPH_BASE + 0x40000UL)
#define IPCC2_BASE                          (SMART_RUN_AHB_PERIPH_BASE + 0x50000UL)
#define IPCC2_C1_BASE                       (IPCC2_BASE)
#define IPCC2_C2_BASE                       (IPCC2_BASE + 0x10UL)

#define LPDMA_Channel0_BASE                 (LPDMA_BASE + 0x0050UL)
#define LPDMA_Channel1_BASE                 (LPDMA_BASE + 0x00D0UL)
#define LPDMA_Channel2_BASE                 (LPDMA_BASE + 0x0150UL)
#define LPDMA_Channel3_BASE                 (LPDMA_BASE + 0x01D0UL)

/**
  * @}
  */
#define RISC                                ((RISC_TypeDef *)     RISC_BASE)
#define PWR                                 ((PWR_TypeDef *) PWR_BASE)
#define RTC                                 ((RTC_TypeDef *) RTC_BASE)
#define TAMP                                ((TAMP_TypeDef *) TAMP_BASE)
#define SPI8                                ((SPI_TypeDef *) SPI8_BASE)
#define LPUART1                             ((USART_TypeDef *) LPUART1_BASE)
#define I2C8                                ((I2C_TypeDef *) I2C8_BASE)
#define LPTIM3                              ((LPTIM_TypeDef *) LPTIM3_BASE)
#define LPTIM4                              ((LPTIM_TypeDef *) LPTIM4_BASE)
#define LPTIM5                              ((LPTIM_TypeDef *) LPTIM5_BASE)
#define I3C4                                ((I3C_TypeDef *) I3C4_BASE)
#define IWDG5                               ((IWDG_TypeDef *) IWDG5_BASE)
#define WWDG2                               ((WWDG_TypeDef *) WWDG2_BASE)

#define GPIOZ                               ((GPIO_TypeDef *) GPIOZ_BASE)
#define LPDMA                               ((DMA_TypeDef *) LPDMA_BASE)
#define ADF1                                ((MDF_TypeDef *) ADF1_BASE)
#define ADF1_Filter0                        ((MDF_Filter_TypeDef*) ADF1_Filter0_BASE)
#define EXTI2                               ((EXTI_TypeDef *) EXTI2_BASE)
#define EXTI2_C1                            ((EXTI_Core_TypeDef *) EXTI2_C1_BASE)
#define EXTI2_C2                            ((EXTI_Core_TypeDef *) EXTI2_C2_BASE)
#define EXTI2_C3                            ((EXTI_Core_TypeDef *) EXTI2_C3_BASE)
#define HSEM                                ((HSEM_TypeDef *) HSEM_BASE)
#define HSEM_COMMON                         ((HSEM_Common_TypeDef *) (HSEM_BASE + 0x120UL))
#define IPCC2                               ((IPCC_TypeDef *) IPCC2_BASE)
#define IPCC2_C1                            ((IPCC_CommonTypeDef *) IPCC2_C1_BASE)
#define IPCC2_C2                            ((IPCC_CommonTypeDef *) IPCC2_C2_BASE)

#define LPDMA_Channel0                      ((DMA_Channel_TypeDef *) LPDMA_Channel0_BASE)
#define LPDMA_Channel1                      ((DMA_Channel_TypeDef *) LPDMA_Channel1_BASE)
#define LPDMA_Channel2                      ((DMA_Channel_TypeDef *) LPDMA_Channel2_BASE)
#define LPDMA_Channel3                      ((DMA_Channel_TypeDef *) LPDMA_Channel3_BASE)

/**
  * @}
  */

/** @addtogroup Exported_constants
  * @{
  */

  /** @addtogroup Peripheral_Registers_Bits_Definition
  * @{
  */

/******************************************************************************/
/*                         Peripheral Registers_Bits_Definition               */
/******************************************************************************/

/******************************************************************************/
/*                                                                            */
/*                             DMA Controller                                 */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for DMA_SECCFGR register  ****************/
#define DMA_VER_V1_3

#define DMA_SECCFGR_SEC0_Pos     (0U)
#define DMA_SECCFGR_SEC0_Msk     (0x1U << DMA_SECCFGR_SEC0_Pos)                /*!< 0x00000001 */
#define DMA_SECCFGR_SEC0         DMA_SECCFGR_SEC0_Msk                          /*!< Secure State of Channel 0 */
#define DMA_SECCFGR_SEC1_Pos     (1U)
#define DMA_SECCFGR_SEC1_Msk     (0x1U << DMA_SECCFGR_SEC1_Pos)                /*!< 0x00000002 */
#define DMA_SECCFGR_SEC1         DMA_SECCFGR_SEC1_Msk                          /*!< Secure State of Channel 1 */
#define DMA_SECCFGR_SEC2_Pos     (2U)
#define DMA_SECCFGR_SEC2_Msk     (0x1U << DMA_SECCFGR_SEC2_Pos)                /*!< 0x00000004 */
#define DMA_SECCFGR_SEC2         DMA_SECCFGR_SEC2_Msk                          /*!< Secure State of Channel 2 */
#define DMA_SECCFGR_SEC3_Pos     (3U)
#define DMA_SECCFGR_SEC3_Msk     (0x1U << DMA_SECCFGR_SEC3_Pos)                /*!< 0x00000008 */
#define DMA_SECCFGR_SEC3         DMA_SECCFGR_SEC3_Msk                          /*!< Secure State of Channel 3 */
#define DMA_SECCFGR_SEC4_Pos     (4U)
#define DMA_SECCFGR_SEC4_Msk     (0x1U << DMA_SECCFGR_SEC4_Pos)                /*!< 0x00000010 */
#define DMA_SECCFGR_SEC4         DMA_SECCFGR_SEC4_Msk                          /*!< Secure State of Channel 4 */
#define DMA_SECCFGR_SEC5_Pos     (5U)
#define DMA_SECCFGR_SEC5_Msk     (0x1U << DMA_SECCFGR_SEC5_Pos)                /*!< 0x00000020 */
#define DMA_SECCFGR_SEC5         DMA_SECCFGR_SEC5_Msk                          /*!< Secure State of Channel 5 */
#define DMA_SECCFGR_SEC6_Pos     (6U)
#define DMA_SECCFGR_SEC6_Msk     (0x1U << DMA_SECCFGR_SEC6_Pos)                /*!< 0x00000040 */
#define DMA_SECCFGR_SEC6         DMA_SECCFGR_SEC6_Msk                          /*!< Secure State of Channel 6 */
#define DMA_SECCFGR_SEC7_Pos     (7U)
#define DMA_SECCFGR_SEC7_Msk     (0x1U << DMA_SECCFGR_SEC7_Pos)                /*!< 0x00000080 */
#define DMA_SECCFGR_SEC7         DMA_SECCFGR_SEC7_Msk                          /*!< Secure State of Channel 7 */
#define DMA_SECCFGR_SEC8_Pos     (8U)
#define DMA_SECCFGR_SEC8_Msk     (0x1U << DMA_SECCFGR_SEC8_Pos)                /*!< 0x00000100 */
#define DMA_SECCFGR_SEC8         DMA_SECCFGR_SEC8_Msk                          /*!< Secure State of Channel 8 */
#define DMA_SECCFGR_SEC9_Pos     (9U)
#define DMA_SECCFGR_SEC9_Msk     (0x1U << DMA_SECCFGR_SEC9_Pos)                /*!< 0x00000200 */
#define DMA_SECCFGR_SEC9         DMA_SECCFGR_SEC9_Msk                          /*!< Secure State of Channel 9 */
#define DMA_SECCFGR_SEC10_Pos    (10U)
#define DMA_SECCFGR_SEC10_Msk    (0x1U << DMA_SECCFGR_SEC10_Pos)               /*!< 0x00000400 */
#define DMA_SECCFGR_SEC10        DMA_SECCFGR_SEC10_Msk                         /*!< Secure State of Channel 10 */
#define DMA_SECCFGR_SEC11_Pos    (11U)
#define DMA_SECCFGR_SEC11_Msk    (0x1U << DMA_SECCFGR_SEC11_Pos)               /*!< 0x00000800 */
#define DMA_SECCFGR_SEC11        DMA_SECCFGR_SEC11_Msk                         /*!< Secure State of Channel 11 */
#define DMA_SECCFGR_SEC12_Pos    (12U)
#define DMA_SECCFGR_SEC12_Msk    (0x1U << DMA_SECCFGR_SEC12_Pos)               /*!< 0x00001000 */
#define DMA_SECCFGR_SEC12        DMA_SECCFGR_SEC12_Msk                         /*!< Secure State of Channel 12 */
#define DMA_SECCFGR_SEC13_Pos    (13U)
#define DMA_SECCFGR_SEC13_Msk    (0x1U << DMA_SECCFGR_SEC13_Pos)               /*!< 0x00002000 */
#define DMA_SECCFGR_SEC13        DMA_SECCFGR_SEC13_Msk                         /*!< Secure State of Channel 13 */
#define DMA_SECCFGR_SEC14_Pos    (14U)
#define DMA_SECCFGR_SEC14_Msk    (0x1U << DMA_SECCFGR_SEC14_Pos)               /*!< 0x00004000 */
#define DMA_SECCFGR_SEC14        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 14 */
#define DMA_SECCFGR_SEC15_Pos    (15U)
#define DMA_SECCFGR_SEC15_Msk    (0x1U << DMA_SECCFGR_SEC15_Pos)               /*!< 0x00008000 */
#define DMA_SECCFGR_SEC15        DMA_SECCFGR_SEC14_Msk                         /*!< Secure State of Channel 15 */

/*******************  Bit definition for DMA_PRIVCFGR register  ****************/
#define DMA_PRIVCFGR_PRIV0_Pos   (0U)
#define DMA_PRIVCFGR_PRIV0_Msk   (0x1U << DMA_PRIVCFGR_PRIV0_Pos)              /*!< 0x00000001 */
#define DMA_PRIVCFGR_PRIV0       DMA_PRIVCFGR_PRIV0_Msk                        /*!< Privileged State of Channel 0 */
#define DMA_PRIVCFGR_PRIV1_Pos   (1U)
#define DMA_PRIVCFGR_PRIV1_Msk   (0x1U << DMA_PRIVCFGR_PRIV1_Pos)              /*!< 0x00000002 */
#define DMA_PRIVCFGR_PRIV1       DMA_PRIVCFGR_PRIV1_Msk                        /*!< Privileged State of Channel 1 */
#define DMA_PRIVCFGR_PRIV2_Pos   (2U)
#define DMA_PRIVCFGR_PRIV2_Msk   (0x1U << DMA_PRIVCFGR_PRIV2_Pos)              /*!< 0x00000004 */
#define DMA_PRIVCFGR_PRIV2       DMA_PRIVCFGR_PRIV2_Msk                        /*!< Privileged State of Channel 2 */
#define DMA_PRIVCFGR_PRIV3_Pos   (3U)
#define DMA_PRIVCFGR_PRIV3_Msk   (0x1U << DMA_PRIVCFGR_PRIV3_Pos)              /*!< 0x00000008 */
#define DMA_PRIVCFGR_PRIV3       DMA_PRIVCFGR_PRIV3_Msk                        /*!< Privileged State of Channel 3 */
#define DMA_PRIVCFGR_PRIV4_Pos   (4U)
#define DMA_PRIVCFGR_PRIV4_Msk   (0x1U << DMA_PRIVCFGR_PRIV4_Pos)              /*!< 0x00000010 */
#define DMA_PRIVCFGR_PRIV4       DMA_PRIVCFGR_PRIV4_Msk                        /*!< Privileged State of Channel 4 */
#define DMA_PRIVCFGR_PRIV5_Pos   (5U)
#define DMA_PRIVCFGR_PRIV5_Msk   (0x1U << DMA_PRIVCFGR_PRIV5_Pos)              /*!< 0x00000020 */
#define DMA_PRIVCFGR_PRIV5       DMA_PRIVCFGR_PRIV5_Msk                        /*!< Privileged State of Channel 5 */
#define DMA_PRIVCFGR_PRIV6_Pos   (6U)
#define DMA_PRIVCFGR_PRIV6_Msk   (0x1U << DMA_PRIVCFGR_PRIV6_Pos)              /*!< 0x00000040 */
#define DMA_PRIVCFGR_PRIV6       DMA_PRIVCFGR_PRIV6_Msk                        /*!< Privileged State of Channel 6 */
#define DMA_PRIVCFGR_PRIV7_Pos   (7U)
#define DMA_PRIVCFGR_PRIV7_Msk   (0x1U << DMA_PRIVCFGR_PRIV7_Pos)              /*!< 0x00000080 */
#define DMA_PRIVCFGR_PRIV7       DMA_PRIVCFGR_PRIV7_Msk                        /*!< Privileged State of Channel 7 */
#define DMA_PRIVCFGR_PRIV8_Pos   (8U)
#define DMA_PRIVCFGR_PRIV8_Msk   (0x1U << DMA_PRIVCFGR_PRIV8_Pos)              /*!< 0x00000100 */
#define DMA_PRIVCFGR_PRIV8       DMA_PRIVCFGR_PRIV8_Msk                        /*!< Privileged State of Channel 8 */
#define DMA_PRIVCFGR_PRIV9_Pos   (9U)
#define DMA_PRIVCFGR_PRIV9_Msk   (0x1U << DMA_PRIVCFGR_PRIV9_Pos)              /*!< 0x00000200 */
#define DMA_PRIVCFGR_PRIV9       DMA_PRIVCFGR_PRIV9_Msk                        /*!< Privileged State of Channel 9 */
#define DMA_PRIVCFGR_PRIV10_Pos  (10U)
#define DMA_PRIVCFGR_PRIV10_Msk  (0x1U << DMA_PRIVCFGR_PRIV10_Pos)             /*!< 0x00000400 */
#define DMA_PRIVCFGR_PRIV10      DMA_PRIVCFGR_PRIV10_Msk                       /*!< Privileged State of Channel 10 */
#define DMA_PRIVCFGR_PRIV11_Pos  (11U)
#define DMA_PRIVCFGR_PRIV11_Msk  (0x1U << DMA_PRIVCFGR_PRIV11_Pos)             /*!< 0x00000800 */
#define DMA_PRIVCFGR_PRIV11      DMA_PRIVCFGR_PRIV11_Msk                       /*!< Privileged State of Channel 11 */
#define DMA_PRIVCFGR_PRIV12_Pos  (12U)
#define DMA_PRIVCFGR_PRIV12_Msk  (0x1U << DMA_PRIVCFGR_PRIV12_Pos)             /*!< 0x00001000 */
#define DMA_PRIVCFGR_PRIV12      DMA_PRIVCFGR_PRIV12_Msk                       /*!< Privileged State of Channel 12 */
#define DMA_PRIVCFGR_PRIV13_Pos  (13U)
#define DMA_PRIVCFGR_PRIV13_Msk  (0x1U << DMA_PRIVCFGR_PRIV13_Pos)             /*!< 0x00002000 */
#define DMA_PRIVCFGR_PRIV13      DMA_PRIVCFGR_PRIV13_Msk                       /*!< Privileged State of Channel 13 */
#define DMA_PRIVCFGR_PRIV14_Pos  (14U)
#define DMA_PRIVCFGR_PRIV14_Msk  (0x1U << DMA_PRIVCFGR_PRIV14_Pos)             /*!< 0x00004000 */
#define DMA_PRIVCFGR_PRIV14      DMA_PRIVCFGR_PRIV14_Msk                       /*!< Privileged State of Channel 14 */
#define DMA_PRIVCFGR_PRIV15_Pos  (15U)
#define DMA_PRIVCFGR_PRIV15_Msk  (0x1U << DMA_PRIVCFGR_PRIV15_Pos)             /*!< 0x00008000 */
#define DMA_PRIVCFGR_PRIV15      DMA_PRIVCFGR_PRIV15_Msk                       /*!< Privileged State of Channel 15 */

/***************  Bit definition for DMA_RCFGLOCKR register  ***************/
#define DMA_RCFGLOCKR_LOCK0_Pos  (0U)
#define DMA_RCFGLOCKR_LOCK0_Msk  (0x1U << DMA_RCFGLOCKR_LOCK0_Pos)             /*!< 0x00000001 */
#define DMA_RCFGLOCKR_LOCK0      DMA_RCFGLOCKR_LOCK0_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK1_Pos  (1U)
#define DMA_RCFGLOCKR_LOCK1_Msk  (0x1U << DMA_RCFGLOCKR_LOCK1_Pos)             /*!< 0x00000002 */
#define DMA_RCFGLOCKR_LOCK1      DMA_RCFGLOCKR_LOCK1_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK2_Pos  (2U)
#define DMA_RCFGLOCKR_LOCK2_Msk  (0x1U << DMA_RCFGLOCKR_LOCK2_Pos)             /*!< 0x00000004 */
#define DMA_RCFGLOCKR_LOCK2      DMA_RCFGLOCKR_LOCK2_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK3_Pos  (3U)
#define DMA_RCFGLOCKR_LOCK3_Msk  (0x1U << DMA_RCFGLOCKR_LOCK3_Pos)             /*!< 0x00000008 */
#define DMA_RCFGLOCKR_LOCK3      DMA_RCFGLOCKR_LOCK3_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK4_Pos  (4U)
#define DMA_RCFGLOCKR_LOCK4_Msk  (0x1U << DMA_RCFGLOCKR_LOCK4_Pos)             /*!< 0x00000010 */
#define DMA_RCFGLOCKR_LOCK4      DMA_RCFGLOCKR_LOCK4_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK5_Pos  (5U)
#define DMA_RCFGLOCKR_LOCK5_Msk  (0x1U << DMA_RCFGLOCKR_LOCK5_Pos)             /*!< 0x00000020 */
#define DMA_RCFGLOCKR_LOCK5      DMA_RCFGLOCKR_LOCK5_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK6_Pos  (6U)
#define DMA_RCFGLOCKR_LOCK6_Msk  (0x1U << DMA_RCFGLOCKR_LOCK6_Pos)             /*!< 0x00000040 */
#define DMA_RCFGLOCKR_LOCK6      DMA_RCFGLOCKR_LOCK6_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK7_Pos  (7U)
#define DMA_RCFGLOCKR_LOCK7_Msk  (0x1U << DMA_RCFGLOCKR_LOCK7_Pos)             /*!< 0x00000080 */
#define DMA_RCFGLOCKR_LOCK7      DMA_RCFGLOCKR_LOCK7_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK8_Pos  (8U)
#define DMA_RCFGLOCKR_LOCK8_Msk  (0x1U << DMA_RCFGLOCKR_LOCK8_Pos)             /*!< 0x00000100 */
#define DMA_RCFGLOCKR_LOCK8      DMA_RCFGLOCKR_LOCK8_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK9_Pos  (9U)
#define DMA_RCFGLOCKR_LOCK9_Msk  (0x1U << DMA_RCFGLOCKR_LOCK9_Pos)             /*!< 0x00000200 */
#define DMA_RCFGLOCKR_LOCK9      DMA_RCFGLOCKR_LOCK9_Msk                       /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK10_Pos (10U)
#define DMA_RCFGLOCKR_LOCK10_Msk (0x1U << DMA_RCFGLOCKR_LOCK10_Pos)            /*!< 0x00000400 */
#define DMA_RCFGLOCKR_LOCK10     DMA_RCFGLOCKR_LOCK10_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK11_Pos (11U)
#define DMA_RCFGLOCKR_LOCK11_Msk (0x1U << DMA_RCFGLOCKR_LOCK11_Pos)            /*!< 0x00000800 */
#define DMA_RCFGLOCKR_LOCK11     DMA_RCFGLOCKR_LOCK11_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK12_Pos (12U)
#define DMA_RCFGLOCKR_LOCK12_Msk (0x1U << DMA_RCFGLOCKR_LOCK12_Pos)            /*!< 0x00001000 */
#define DMA_RCFGLOCKR_LOCK12     DMA_RCFGLOCKR_LOCK12_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK13_Pos (13U)
#define DMA_RCFGLOCKR_LOCK13_Msk (0x1U << DMA_RCFGLOCKR_LOCK13_Pos)            /*!< 0x00002000 */
#define DMA_RCFGLOCKR_LOCK13     DMA_RCFGLOCKR_LOCK13_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK14_Pos (14U)
#define DMA_RCFGLOCKR_LOCK14_Msk (0x1U << DMA_RCFGLOCKR_LOCK14_Pos)            /*!< 0x00004000 */
#define DMA_RCFGLOCKR_LOCK14     DMA_RCFGLOCKR_LOCK14_Msk                      /*!< lock the configuration of the DMA_SECCFGR */
#define DMA_RCFGLOCKR_LOCK15_Pos (15U)
#define DMA_RCFGLOCKR_LOCK15_Msk (0x1U << DMA_RCFGLOCKR_LOCK15_Pos)            /*!< 0x00008000 */
#define DMA_RCFGLOCKR_LOCK15     DMA_RCFGLOCKR_LOCK15_Msk                      /*!< lock the configuration of the DMA_SECCFGR */

/*******************  Bit definition for DMA_MISR register  ****************/
#define DMA_MISR_MIS0_Pos        (0U)
#define DMA_MISR_MIS0_Msk        (0x1U << DMA_MISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_MISR_MIS0            DMA_MISR_MIS0_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 0 */
#define DMA_MISR_MIS1_Pos        (1U)
#define DMA_MISR_MIS1_Msk        (0x1U << DMA_MISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_MISR_MIS1            DMA_MISR_MIS1_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 1 */
#define DMA_MISR_MIS2_Pos        (2U)
#define DMA_MISR_MIS2_Msk        (0x1U << DMA_MISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_MISR_MIS2            DMA_MISR_MIS2_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 2 */
#define DMA_MISR_MIS3_Pos        (3U)
#define DMA_MISR_MIS3_Msk        (0x1U << DMA_MISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_MISR_MIS3            DMA_MISR_MIS3_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 3 */
#define DMA_MISR_MIS4_Pos        (4U)
#define DMA_MISR_MIS4_Msk        (0x1U << DMA_MISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_MISR_MIS4            DMA_MISR_MIS4_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 4 */
#define DMA_MISR_MIS5_Pos        (5U)
#define DMA_MISR_MIS5_Msk        (0x1U << DMA_MISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_MISR_MIS5            DMA_MISR_MIS5_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 5 */
#define DMA_MISR_MIS6_Pos        (6U)
#define DMA_MISR_MIS6_Msk        (0x1U << DMA_MISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_MISR_MIS6            DMA_MISR_MIS6_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 6 */
#define DMA_MISR_MIS7_Pos        (7U)
#define DMA_MISR_MIS7_Msk        (0x1U << DMA_MISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_MISR_MIS7            DMA_MISR_MIS7_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 7 */
#define DMA_MISR_MIS8_Pos        (8U)
#define DMA_MISR_MIS8_Msk        (0x1U << DMA_MISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_MISR_MIS8            DMA_MISR_MIS8_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 8 */
#define DMA_MISR_MIS9_Pos        (9U)
#define DMA_MISR_MIS9_Msk        (0x1U << DMA_MISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_MISR_MIS9            DMA_MISR_MIS9_Msk                            /*!< Masked Interrupt State of Non-Secure Channel 9 */
#define DMA_MISR_MIS10_Pos       (10U)
#define DMA_MISR_MIS10_Msk       (0x1U << DMA_MISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_MISR_MIS10           DMA_MISR_MIS10_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 10 */
#define DMA_MISR_MIS11_Pos       (11U)
#define DMA_MISR_MIS11_Msk       (0x1U << DMA_MISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_MISR_MIS11           DMA_MISR_MIS11_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 11 */
#define DMA_MISR_MIS12_Pos       (12U)
#define DMA_MISR_MIS12_Msk       (0x1U << DMA_MISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_MISR_MIS12           DMA_MISR_MIS12_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 12 */
#define DMA_MISR_MIS13_Pos       (13U)
#define DMA_MISR_MIS13_Msk       (0x1U << DMA_MISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_MISR_MIS13           DMA_MISR_MIS13_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 13 */
#define DMA_MISR_MIS14_Pos       (14U)
#define DMA_MISR_MIS14_Msk       (0x1U << DMA_MISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_MISR_MIS14           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 14 */
#define DMA_MISR_MIS15_Pos       (15U)
#define DMA_MISR_MIS15_Msk       (0x1U << DMA_MISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_MISR_MIS15           DMA_MISR_MIS14_Msk                           /*!< Masked Interrupt State of Non-Secure Channel 15 */

/*******************  Bit definition for DMA_SMISR register  ****************/
#define DMA_SMISR_MIS0_Pos       (0U)
#define DMA_SMISR_MIS0_Msk       (0x1U << DMA_SMISR_MIS0_Pos)                  /*!< 0x00000001 */
#define DMA_SMISR_MIS0           DMA_SMISR_MIS0_Msk                            /*!< Masked Interrupt State of Secure Channel 0 */
#define DMA_SMISR_MIS1_Pos       (1U)
#define DMA_SMISR_MIS1_Msk       (0x1U << DMA_SMISR_MIS1_Pos)                  /*!< 0x00000002 */
#define DMA_SMISR_MIS1           DMA_SMISR_MIS1_Msk                            /*!< Masked Interrupt State of Secure Channel 1 */
#define DMA_SMISR_MIS2_Pos       (2U)
#define DMA_SMISR_MIS2_Msk       (0x1U << DMA_SMISR_MIS2_Pos)                  /*!< 0x00000004 */
#define DMA_SMISR_MIS2           DMA_SMISR_MIS2_Msk                            /*!< Masked Interrupt State of Secure Channel 2 */
#define DMA_SMISR_MIS3_Pos       (3U)
#define DMA_SMISR_MIS3_Msk       (0x1U << DMA_SMISR_MIS3_Pos)                  /*!< 0x00000008 */
#define DMA_SMISR_MIS3           DMA_SMISR_MIS3_Msk                            /*!< Masked Interrupt State of Secure Channel 3 */
#define DMA_SMISR_MIS4_Pos       (4U)
#define DMA_SMISR_MIS4_Msk       (0x1U << DMA_SMISR_MIS4_Pos)                  /*!< 0x00000010 */
#define DMA_SMISR_MIS4           DMA_SMISR_MIS4_Msk                            /*!< Masked Interrupt State of Secure Channel 4 */
#define DMA_SMISR_MIS5_Pos       (5U)
#define DMA_SMISR_MIS5_Msk       (0x1U << DMA_SMISR_MIS5_Pos)                  /*!< 0x00000020 */
#define DMA_SMISR_MIS5           DMA_SMISR_MIS5_Msk                            /*!< Masked Interrupt State of Secure Channel 5 */
#define DMA_SMISR_MIS6_Pos       (6U)
#define DMA_SMISR_MIS6_Msk       (0x1U << DMA_SMISR_MIS6_Pos)                  /*!< 0x00000040 */
#define DMA_SMISR_MIS6           DMA_SMISR_MIS6_Msk                            /*!< Masked Interrupt State of Secure Channel 6 */
#define DMA_SMISR_MIS7_Pos       (7U)
#define DMA_SMISR_MIS7_Msk       (0x1U << DMA_SMISR_MIS7_Pos)                  /*!< 0x00000080 */
#define DMA_SMISR_MIS7           DMA_SMISR_MIS7_Msk                            /*!< Masked Interrupt State of Secure Channel 7 */
#define DMA_SMISR_MIS8_Pos       (8U)
#define DMA_SMISR_MIS8_Msk       (0x1U << DMA_SMISR_MIS8_Pos)                  /*!< 0x00000100 */
#define DMA_SMISR_MIS8           DMA_SMISR_MIS8_Msk                            /*!< Masked Interrupt State of Secure Channel 8 */
#define DMA_SMISR_MIS9_Pos       (9U)
#define DMA_SMISR_MIS9_Msk       (0x1U << DMA_SMISR_MIS9_Pos)                  /*!< 0x00000200 */
#define DMA_SMISR_MIS9           DMA_SMISR_MIS9_Msk                            /*!< Masked Interrupt State of Secure Channel 9 */
#define DMA_SMISR_MIS10_Pos      (10U)
#define DMA_SMISR_MIS10_Msk      (0x1U << DMA_SMISR_MIS10_Pos)                 /*!< 0x00000400 */
#define DMA_SMISR_MIS10          DMA_SMISR_MIS10_Msk                           /*!< Masked Interrupt State of Secure Channel 10 */
#define DMA_SMISR_MIS11_Pos      (11U)
#define DMA_SMISR_MIS11_Msk      (0x1U << DMA_SMISR_MIS11_Pos)                 /*!< 0x00000800 */
#define DMA_SMISR_MIS11          DMA_SMISR_MIS11_Msk                           /*!< Masked Interrupt State of Secure Channel 11 */
#define DMA_SMISR_MIS12_Pos      (12U)
#define DMA_SMISR_MIS12_Msk      (0x1U << DMA_SMISR_MIS12_Pos)                 /*!< 0x00001000 */
#define DMA_SMISR_MIS12          DMA_SMISR_MIS12_Msk                           /*!< Masked Interrupt State of Secure Channel 12 */
#define DMA_SMISR_MIS13_Pos      (13U)
#define DMA_SMISR_MIS13_Msk      (0x1U << DMA_SMISR_MIS13_Pos)                 /*!< 0x00002000 */
#define DMA_SMISR_MIS13          DMA_SMISR_MIS13_Msk                           /*!< Masked Interrupt State of Secure Channel 13 */
#define DMA_SMISR_MIS14_Pos      (14U)
#define DMA_SMISR_MIS14_Msk      (0x1U << DMA_SMISR_MIS14_Pos)                 /*!< 0x00004000 */
#define DMA_SMISR_MIS14          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 14 */
#define DMA_SMISR_MIS15_Pos      (15U)
#define DMA_SMISR_MIS15_Msk      (0x1U << DMA_SMISR_MIS15_Pos)                 /*!< 0x00008000 */
#define DMA_SMISR_MIS15          DMA_SMISR_MIS14_Msk                           /*!< Masked Interrupt State of Secure Channel 15 */

/*******************  Bit definition for DMA_CLBAR register  ****************/
#define DMA_CLBAR_LBA_Pos         (16U)
#define DMA_CLBAR_LBA_Msk         (0xFFFFU << DMA_CLBAR_LBA_Pos)               /*!< 0xFFFF0000 */
#define DMA_CLBAR_LBA             DMA_CLBAR_LBA_Msk                            /*!< Linked-list Base Address of DMA channel x */

/*******************  Bit definition for DMA_CCIDCFGR register  *******************/
#define DMA_CCIDCFGR_CFEN_Pos           (0U)
#define DMA_CCIDCFGR_CFEN_Msk           (0x1U << DMA_CCIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define DMA_CCIDCFGR_CFEN               DMA_CCIDCFGR_CFEN_Msk                   /*!< CID filtering enable of the channel x */
#define DMA_CCIDCFGR_SEMEN_Pos          (1U)
#define DMA_CCIDCFGR_SEMEN_Msk          (0x1U << DMA_CCIDCFGR_SEMEN_Pos)        /*!< 0x00000002 */
#define DMA_CCIDCFGR_SEMEN              DMA_CCIDCFGR_SEMEN_Msk                  /*!< semaphore enable mode */
#define DMA_CCIDCFGR_SCID_Pos           (4U)
#define DMA_CCIDCFGR_SCID_Msk           (0x3U << DMA_CCIDCFGR_SCID_Pos)         /*!< 0x00000030 */
#define DMA_CCIDCFGR_SCID               DMA_CCIDCFGR_SCID_Msk                   /*!< select a static CID to the channel x */
#define DMA_CCIDCFGR_WLISTCID0_Pos      (16U)
#define DMA_CCIDCFGR_WLISTCID0_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID0_Pos)    /*!< 0x00010000 */
#define DMA_CCIDCFGR_WLISTCID0          DMA_CCIDCFGR_WLISTCID0_Msk              /*!< white-listed CID0 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID1_Pos      (17U)
#define DMA_CCIDCFGR_WLISTCID1_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID1_Pos)    /*!< 0x00020000 */
#define DMA_CCIDCFGR_WLISTCID1          DMA_CCIDCFGR_WLISTCID1_Msk              /*!< white-listed CID1 in the CID allocation pool (of the channel x in semaphore mode) */
#define DMA_CCIDCFGR_WLISTCID2_Pos      (18U)
#define DMA_CCIDCFGR_WLISTCID2_Msk      (0x1U << DMA_CCIDCFGR_WLISTCID2_Pos)    /*!< 0x00040000 */
#define DMA_CCIDCFGR_WLISTCID2          DMA_CCIDCFGR_WLISTCID2_Msk              /*!< white-listed CID2 in the CID allocation pool (of the channel x in semaphore mode) */

#define DMA_CCIDCFGR_WLISTCID_CURRENT   ((0x1U << RIF_CID_CPU3_CM0) << DMA_CCIDCFGR_WLISTCID0_Pos)

/*******************  Bit definition for DMA_CSEMCR register  *******************/
#define DMA_CSEMCR_SEMMUTEX_Pos       (0U)
#define DMA_CSEMCR_SEMMUTEX_Msk       (0x1U << DMA_CSEMCR_SEMMUTEX_Pos)       /*!< 0x00000001 */
#define DMA_CSEMCR_SEMMUTEX           DMA_CSEMCR_SEMMUTEX_Msk                 /*!< mutex for the CID allocation of the channel x */
#define DMA_CSEMCR_SEMCCID_Pos        (4U)
#define DMA_CSEMCR_SEMCCID_Msk        (0x3U << DMA_CSEMCR_SEMCCID_Pos)         /*!< 0x00000030 */
#define DMA_CSEMCR_SEMCCID            DMA_CSEMCR_SEMCCID_Msk                   /*!< current CID allocated to the channel x */
#define DMA_CSEMCR_SEMCCID_CID1       (RIF_CID_CPU1_CA35 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID2       (RIF_CID_CPU2_CM33 << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CID3       (RIF_CID_CPU3_CM0  << DMA_CSEMCR_SEMCCID_Pos)
#define DMA_CSEMCR_SEMCCID_CURRENT    DMA_CSEMCR_SEMCCID_CID3

/*******************  Bit definition for DMA_CFCR register  *******************/
#define DMA_CFCR_TCF_Pos       (8U)
#define DMA_CFCR_TCF_Msk       (0x1U << DMA_CFCR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CFCR_TCF           DMA_CFCR_TCF_Msk                              /*!< Transfer complete flag clear */
#define DMA_CFCR_HTF_Pos       (9U)
#define DMA_CFCR_HTF_Msk       (0x1U << DMA_CFCR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CFCR_HTF           DMA_CFCR_HTF_Msk                              /*!< Half transfer complete flag clear */
#define DMA_CFCR_DTEF_Pos      (10U)
#define DMA_CFCR_DTEF_Msk      (0x1U << DMA_CFCR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CFCR_DTEF          DMA_CFCR_DTEF_Msk                             /*!< Data transfer error flag clear */
#define DMA_CFCR_ULEF_Pos      (11U)
#define DMA_CFCR_ULEF_Msk      (0x1U << DMA_CFCR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CFCR_ULEF          DMA_CFCR_ULEF_Msk                             /*!< Update linked-list item error flag clear */
#define DMA_CFCR_USEF_Pos      (12U)
#define DMA_CFCR_USEF_Msk      (0x1U << DMA_CFCR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CFCR_USEF          DMA_CFCR_USEF_Msk                             /*!< User setting error flag clear */
#define DMA_CFCR_SUSPF_Pos     (13U)
#define DMA_CFCR_SUSPF_Msk     (0x1U << DMA_CFCR_SUSPF_Pos)                   /*!< 0x00002000 */
#define DMA_CFCR_SUSPF         DMA_CFCR_SUSPF_Msk                             /*!< Completed suspension flag clear */
#define DMA_CFCR_TOF_Pos       (14U)
#define DMA_CFCR_TOF_Msk       (0x1U << DMA_CFCR_TOF_Pos)                    /*!< 0x00004000 */
#define DMA_CFCR_TOF           DMA_CFCR_TOF_Msk                              /*!< trigger overrun flag clear */

/*******************  Bit definition for DMA_CSR register  *******************/
#define DMA_CSR_IDLEF_Pos      (0U)
#define DMA_CSR_IDLEF_Msk      (0x1U << DMA_CSR_IDLEF_Pos)                  /*!< 0x00000001 */
#define DMA_CSR_IDLEF          DMA_CSR_IDLEF_Msk                            /*!< Idle flag */
#define DMA_CSR_TCF_Pos        (8U)
#define DMA_CSR_TCF_Msk        (0x1U << DMA_CSR_TCF_Pos)                    /*!< 0x00000100 */
#define DMA_CSR_TCF            DMA_CSR_TCF_Msk                              /*!< Transfer complete flag */
#define DMA_CSR_HTF_Pos        (9U)
#define DMA_CSR_HTF_Msk        (0x1U << DMA_CSR_HTF_Pos)                    /*!< 0x00000200 */
#define DMA_CSR_HTF            DMA_CSR_HTF_Msk                              /*!< Half transfer complete flag */
#define DMA_CSR_DTEF_Pos       (10U)
#define DMA_CSR_DTEF_Msk       (0x1U << DMA_CSR_DTEF_Pos)                   /*!< 0x00000400 */
#define DMA_CSR_DTEF           DMA_CSR_DTEF_Msk                             /*!< Data transfer error flag */
#define DMA_CSR_ULEF_Pos       (11U)
#define DMA_CSR_ULEF_Msk       (0x1U << DMA_CSR_ULEF_Pos)                   /*!< 0x00000800 */
#define DMA_CSR_ULEF           DMA_CSR_ULEF_Msk                             /*!< Update linked-list item error flag */
#define DMA_CSR_USEF_Pos       (12U)
#define DMA_CSR_USEF_Msk       (0x1U << DMA_CSR_USEF_Pos)                   /*!< 0x00001000 */
#define DMA_CSR_USEF           DMA_CSR_USEF_Msk                             /*!< User setting error flag */
#define DMA_CSR_SUSPF_Pos      (13U)
#define DMA_CSR_SUSPF_Msk      (0x1U << DMA_CSR_SUSPF_Pos)                  /*!< 0x00002000 */
#define DMA_CSR_SUSPF          DMA_CSR_SUSPF_Msk                            /*!< User setting error flag */
#define DMA_CSR_TOF_Pos        (14U)
#define DMA_CSR_TOF_Msk        (0x1U << DMA_CSR_TOF_Pos)                    /*!< 0x00004000 */
#define DMA_CSR_TOF            DMA_CSR_TOF_Msk                              /*!< trigger overrun flag */
#define DMA_CSR_FIFOL_Pos      (16U)
#define DMA_CSR_FIFOL_Msk      (0xFFU << DMA_CSR_FIFOL_Pos)                 /*!< 0x00FF0000 */
#define DMA_CSR_FIFOL          DMA_CSR_FIFOL_Msk                            /*!< Monitored FIFO level in bytes */

/*******************  Bit definition for DMA_CCR register  ********************/
#define DMA_CCR_EN_Pos         (0U)
#define DMA_CCR_EN_Msk         (0x1U << DMA_CCR_EN_Pos)                     /*!< 0x00000001 */
#define DMA_CCR_EN             DMA_CCR_EN_Msk                               /*!< Channel enable */
#define DMA_CCR_RESET_Pos      (1U)
#define DMA_CCR_RESET_Msk      (0x1U << DMA_CCR_RESET_Pos)                  /*!< 0x00000002 */
#define DMA_CCR_RESET          DMA_CCR_RESET_Msk                            /*!< Channel reset */
#define DMA_CCR_SUSP_Pos       (2U)
#define DMA_CCR_SUSP_Msk       (0x1U << DMA_CCR_SUSP_Pos)                   /*!< 0x00000004 */
#define DMA_CCR_SUSP           DMA_CCR_SUSP_Msk                             /*!< Channel suspend */
#define DMA_CCR_TCIE_Pos       (8U)
#define DMA_CCR_TCIE_Msk       (0x1U << DMA_CCR_TCIE_Pos)                   /*!< 0x00000100 */
#define DMA_CCR_TCIE           DMA_CCR_TCIE_Msk                             /*!< Transfer complete interrupt enable */
#define DMA_CCR_HTIE_Pos       (9U)
#define DMA_CCR_HTIE_Msk       (0x1U << DMA_CCR_HTIE_Pos)                   /*!< 0x00000200 */
#define DMA_CCR_HTIE           DMA_CCR_HTIE_Msk                             /*!< Half transfer complete interrupt enable */
#define DMA_CCR_DTEIE_Pos      (10U)
#define DMA_CCR_DTEIE_Msk      (0x1U << DMA_CCR_DTEIE_Pos)                  /*!< 0x00000400 */
#define DMA_CCR_DTEIE          DMA_CCR_DTEIE_Msk                            /*!< Data transfer error interrput enable */
#define DMA_CCR_ULEIE_Pos      (11U)
#define DMA_CCR_ULEIE_Msk      (0x1U << DMA_CCR_ULEIE_Pos)                  /*!< 0x00000800 */
#define DMA_CCR_ULEIE          DMA_CCR_ULEIE_Msk                            /*!< Update linked-list item error interrput enable */
#define DMA_CCR_USEIE_Pos      (12U)
#define DMA_CCR_USEIE_Msk      (0x1U << DMA_CCR_USEIE_Pos)                  /*!< 0x00001000 */
#define DMA_CCR_USEIE          DMA_CCR_USEIE_Msk                            /*!< User setting error interrput enable */
#define DMA_CCR_SUSPIE_Pos     (13U)
#define DMA_CCR_SUSPIE_Msk     (0x1U << DMA_CCR_SUSPIE_Pos)                 /*!< 0x00002000 */
#define DMA_CCR_SUSPIE         DMA_CCR_SUSPIE_Msk                           /*!< Completed suspension interrput enable */
#define DMA_CCR_TOIE_Pos       (14U)
#define DMA_CCR_TOIE_Msk       (0x1U << DMA_CCR_TOIE_Pos)                   /*!< 0x00004000 */
#define DMA_CCR_TOIE           DMA_CCR_TOIE_Msk                             /*!< trigger overrun interrupt enable */
#define DMA_CCR_LSM_Pos        (16U)
#define DMA_CCR_LSM_Msk        (0x1U << DMA_CCR_LSM_Pos)                    /*!< 0x00010000 */
#define DMA_CCR_LSM            DMA_CCR_LSM_Msk                              /*!< Link step mode */
#define DMA_CCR_LAP_Pos        (17U)
#define DMA_CCR_LAP_Msk        (0x1U << DMA_CCR_LAP_Pos)                    /*!< 0x00020000 */
#define DMA_CCR_LAP            DMA_CCR_LAP_Msk                              /*!< Linked-list allocated port */
#define DMA_CCR_PRIO_Pos       (22U)
#define DMA_CCR_PRIO_Msk       (0x3U << DMA_CCR_PRIO_Pos)                   /*!< 0x00C00000 */
#define DMA_CCR_PRIO           DMA_CCR_PRIO_Msk                             /*!< Priority level */
#define DMA_CCR_PRIO_0         (0x1U << DMA_CCR_PRIO_Pos)                   /*!< 0x00400000 */
#define DMA_CCR_PRIO_1         (0x2U << DMA_CCR_PRIO_Pos)                   /*!< 0x00800000 */

/*******************  Bit definition for DMA_CTR1 register  *******************/
#define DMA_CTR1_SDW_LOG2_Pos  (0U)
#define DMA_CTR1_SDW_LOG2_Msk  (0x3U << DMA_CTR1_SDW_LOG2_Pos)             /*!< 0x00000003 */
#define DMA_CTR1_SDW_LOG2      DMA_CTR1_SDW_LOG2_Msk                       /*!< Binary logarithm of the source data width of a burst */
#define DMA_CTR1_SDW_LOG2_0    (0x1U << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_SDW_LOG2_1    (0x2U << DMA_CTR1_SDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_SINC_Pos      (3U)
#define DMA_CTR1_SINC_Msk      (0x1U << DMA_CTR1_SINC_Pos)                 /*!< 0x00000008 */
#define DMA_CTR1_SINC          DMA_CTR1_SINC_Msk                           /*!< Source incrementing burst */
#define DMA_CTR1_SBL_1_Pos     (4U)
#define DMA_CTR1_SBL_1_Msk     (0x3FU << DMA_CTR1_SBL_1_Pos)               /*!< 0x000003F0 */
#define DMA_CTR1_SBL_1         DMA_CTR1_SBL_1_Msk                          /*!< Source burst length minus 1 */
#define DMA_CTR1_PAM_Pos       (11U)
#define DMA_CTR1_PAM_Msk       (0x3U << DMA_CTR1_PAM_Pos)                  /*!< 0x0001800 */
#define DMA_CTR1_PAM           DMA_CTR1_PAM_Msk                            /*!< Padding / alignment mode */
#define DMA_CTR1_PAM_0         (0x1U << DMA_CTR1_PAM_Pos)                  /*!< Bit 0 */
#define DMA_CTR1_PAM_1         (0x2U << DMA_CTR1_PAM_Pos)                  /*!< Bit 1 */
#define DMA_CTR1_SBX_Pos       (13U)
#define DMA_CTR1_SBX_Msk       (0x1U << DMA_CTR1_SBX_Pos)                  /*!< 0x00002000 */
#define DMA_CTR1_SBX           DMA_CTR1_SBX_Msk                            /*!< Source byte exchange within the unaligned half-word of each source word */
#define DMA_CTR1_SAP_Pos       (14U)
#define DMA_CTR1_SAP_Msk       (0x1U << DMA_CTR1_SAP_Pos)                  /*!< 0x00004000 */
#define DMA_CTR1_SAP           DMA_CTR1_SAP_Msk                            /*!< Source allocated port */
#define DMA_CTR1_SSEC_Pos      (15U)
#define DMA_CTR1_SSEC_Msk      (0x1U << DMA_CTR1_SSEC_Pos)                 /*!< 0x00008000 */
#define DMA_CTR1_SSEC          DMA_CTR1_SSEC_Msk                           /*!< Security attribute of the DMA transfer from the source */
#define DMA_CTR1_DDW_LOG2_Pos  (16U)
#define DMA_CTR1_DDW_LOG2_Msk  (0x3U << DMA_CTR1_DDW_LOG2_Pos)             /*!< 0x00030000 */
#define DMA_CTR1_DDW_LOG2      DMA_CTR1_DDW_LOG2_Msk                       /*!< Binary logarithm of the destination data width of a burst */
#define DMA_CTR1_DDW_LOG2_0    (0x1U << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 0 */
#define DMA_CTR1_DDW_LOG2_1    (0x2U << DMA_CTR1_DDW_LOG2_Pos)             /*!< Bit 1 */
#define DMA_CTR1_DINC_Pos      (19U)
#define DMA_CTR1_DINC_Msk      (0x1U << DMA_CTR1_DINC_Pos)                 /*!< 0x00080000 */
#define DMA_CTR1_DINC          DMA_CTR1_DINC_Msk                           /*!< Destination incrementing burst */
#define DMA_CTR1_DBL_1_Pos     (20U)
#define DMA_CTR1_DBL_1_Msk     (0x3FU << DMA_CTR1_DBL_1_Pos)               /*!< 0x03F00000 */
#define DMA_CTR1_DBL_1         DMA_CTR1_DBL_1_Msk                          /*!< Destination burst length minus 1 */
#define DMA_CTR1_DBX_Pos       (26U)
#define DMA_CTR1_DBX_Msk       (0x1U << DMA_CTR1_DBX_Pos)                  /*!< 0x04000000 */
#define DMA_CTR1_DBX           DMA_CTR1_DBX_Msk                            /*!< Destination byte exchange */
#define DMA_CTR1_DHX_Pos       (27U)
#define DMA_CTR1_DHX_Msk       (0x1U << DMA_CTR1_DHX_Pos)                  /*!< 0x08000000 */
#define DMA_CTR1_DHX           DMA_CTR1_DHX_Msk                            /*!< Destination half-word exchange */
#define DMA_CTR1_DWX_Pos       (28U)
#define DMA_CTR1_DWX_Msk       (0x1U << DMA_CTR1_DWX_Pos)                  /*!< 0x10000000 */
#define DMA_CTR1_DWX           DMA_CTR1_DWX_Msk                            /*!< Destination word exchange */
#define DMA_CTR1_DAP_Pos       (30U)
#define DMA_CTR1_DAP_Msk       (0x1U << DMA_CTR1_DAP_Pos)                  /*!< 0x40000000 */
#define DMA_CTR1_DAP           DMA_CTR1_DAP_Msk                            /*!< Destination allocated port */
#define DMA_CTR1_DSEC_Pos      (31U)
#define DMA_CTR1_DSEC_Msk      (0x1U << DMA_CTR1_DSEC_Pos)                 /*!< 0x80000000 */
#define DMA_CTR1_DSEC          DMA_CTR1_DSEC_Msk                           /*!< Security attribute of the DMA transfer from the destination */

/******************  Bit definition for DMA_CTR2 register  *******************/
#define DMA_CTR2_REQSEL_Pos     (0U)
#define DMA_CTR2_REQSEL_Msk     (0xFFU << DMA_CTR2_REQSEL_Pos)             /*!< 0x000000FF */
#define DMA_CTR2_REQSEL         DMA_CTR2_REQSEL_Msk                        /*!< DMA hardware request selection */
#define DMA_CTR2_SWREQ_Pos      (9U)
#define DMA_CTR2_SWREQ_Msk      (0x1U << DMA_CTR2_SWREQ_Pos)               /*!< 0x00000200 */
#define DMA_CTR2_SWREQ          DMA_CTR2_SWREQ_Msk                         /*!< Software request */
#define DMA_CTR2_DREQ_Pos       (10U)
#define DMA_CTR2_DREQ_Msk       (0x1U << DMA_CTR2_DREQ_Pos)                /*!< 0x00000400 */
#define DMA_CTR2_DREQ           DMA_CTR2_DREQ_Msk                          /*!< Destination hardware request */
#define DMA_CTR2_BREQ_Pos       (11U)
#define DMA_CTR2_BREQ_Msk       (0x1U << DMA_CTR2_BREQ_Pos)                /*!< 0x00000800 */
#define DMA_CTR2_BREQ           DMA_CTR2_BREQ_Msk                          /*!< Block hardware request */
#define DMA_CTR2_PFREQ_Pos      (12U)
#define DMA_CTR2_PFREQ_Msk      (0x1U << DMA_CTR2_PFREQ_Pos)               /*!< 0x00001000 */
#define DMA_CTR2_PFREQ          DMA_CTR2_PFREQ_Msk                         /*!< Hardware request in peripheral flow control mode */
#define DMA_CTR2_TRIGM_Pos      (14U)
#define DMA_CTR2_TRIGM_Msk      (0x3U << DMA_CTR2_TRIGM_Pos)               /*!< 0x0000C000 */
#define DMA_CTR2_TRIGM          DMA_CTR2_TRIGM_Msk                         /*!< Trigger mode */
#define DMA_CTR2_TRIGM_0        (0x1U << DMA_CTR2_TRIGM_Pos)               /*!< Bit 0 */
#define DMA_CTR2_TRIGM_1        (0x2U << DMA_CTR2_TRIGM_Pos)               /*!< Bit 1 */
#define DMA_CTR2_TRIGSEL_Pos    (16U)
#define DMA_CTR2_TRIGSEL_Msk    (0x7FU << DMA_CTR2_TRIGSEL_Pos)            /*!< 0x007F0000 */
#define DMA_CTR2_TRIGSEL        DMA_CTR2_TRIGSEL_Msk                       /*!< Trigger event input selection */
#define DMA_CTR2_TRIGPOL_Pos    (24U)
#define DMA_CTR2_TRIGPOL_Msk    (0x3U << DMA_CTR2_TRIGPOL_Pos)             /*!< 0x03000000 */
#define DMA_CTR2_TRIGPOL        DMA_CTR2_TRIGPOL_Msk                       /*!< Trigger event polarity */
#define DMA_CTR2_TRIGPOL_0      (0x1U << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 0 */
#define DMA_CTR2_TRIGPOL_1      (0x2U << DMA_CTR2_TRIGPOL_Pos)             /*!< Bit 1 */
#define DMA_CTR2_TCEM_Pos       (30U)
#define DMA_CTR2_TCEM_Msk       (0x3U << DMA_CTR2_TCEM_Pos)                /*!< 0xC0000000 */
#define DMA_CTR2_TCEM           DMA_CTR2_TCEM_Msk                          /*!< Transfer complete event mode */
#define DMA_CTR2_TCEM_0         (0x1U << DMA_CTR2_TCEM_Pos)                /*!< Bit 0 */
#define DMA_CTR2_TCEM_1         (0x2U << DMA_CTR2_TCEM_Pos)                /*!< Bit 1 */

/******************  Bit definition for DMA_CBR1 register  *******************/
#define DMA_CBR1_BNDT_Pos      (0U)
#define DMA_CBR1_BNDT_Msk      (0xFFFFU << DMA_CBR1_BNDT_Pos)              /*!< 0x0000FFFF */
#define DMA_CBR1_BNDT          DMA_CBR1_BNDT_Msk                           /*!< Block number of data bytes to transfer from the source */
#define DMA_CBR1_BRC_Pos       (16U)
#define DMA_CBR1_BRC_Msk       (0x7FFU << DMA_CBR1_BRC_Pos)               /*!< 0x07FF0000 */
#define DMA_CBR1_BRC           DMA_CBR1_BRC_Msk                            /*!< Block repeat counter */
#define DMA_CBR1_SDEC_Pos      (28U)
#define DMA_CBR1_SDEC_Msk      (0x1U << DMA_CBR1_SDEC_Pos)                 /*!< 0x10000000 */
#define DMA_CBR1_SDEC          DMA_CBR1_SDEC_Msk                           /*!< Source address decrement */
#define DMA_CBR1_DDEC_Pos      (29U)
#define DMA_CBR1_DDEC_Msk      (0x1U << DMA_CBR1_DDEC_Pos)                 /*!< 0x20000000 */
#define DMA_CBR1_DDEC          DMA_CBR1_DDEC_Msk                           /*!< Destination address decrement */
#define DMA_CBR1_BRSDEC_Pos    (30U)
#define DMA_CBR1_BRSDEC_Msk    (0x1U << DMA_CBR1_BRSDEC_Pos)               /*!< 0x40000000 */
#define DMA_CBR1_BRSDEC        DMA_CBR1_BRSDEC_Msk                         /*!< Block repeat source address decrement */
#define DMA_CBR1_BRDDEC_Pos    (31U)
#define DMA_CBR1_BRDDEC_Msk    (0x1U << DMA_CBR1_BRDDEC_Pos)               /*!< 0x80000000 */
#define DMA_CBR1_BRDDEC        DMA_CBR1_BRDDEC_Msk                         /*!< Block repeat destination address decrement */

/******************  Bit definition for DMA_CSAR register  ********************/
#define DMA_CSAR_SA_Pos        (0U)
#define DMA_CSAR_SA_Msk        (0xFFFFFFFFU << DMA_CSAR_SA_Pos)            /*!< 0xFFFFFFFF */
#define DMA_CSAR_SA            DMA_CSAR_SA_Msk                             /*!< Source Address */

/******************  Bit definition for DMA_CDAR register  *******************/
#define DMA_CDAR_DA_Pos        (0U)
#define DMA_CDAR_DA_Msk        (0xFFFFFFFFU << DMA_CDAR_DA_Pos)             /*!< 0xFFFFFFFF */
#define DMA_CDAR_DA            DMA_CDAR_DA_Msk                              /*!< Destination address */

/******************  Bit definition for DMA_CTR3 register  *******************/
#define DMA_CTR3_SAO_Pos       (0U)
#define DMA_CTR3_SAO_Msk       (0x1FFFU << DMA_CTR3_SAO_Pos)               /*!< 0x00001FFF */
#define DMA_CTR3_SAO           DMA_CTR3_SAO_Msk                            /*!< Source address offset increment */
#define DMA_CTR3_DAO_Pos       (16U)
#define DMA_CTR3_DAO_Msk       (0x1FFFU << DMA_CTR3_DAO_Pos)               /*!< 0x1FFF0000 */
#define DMA_CTR3_DAO           DMA_CTR3_DAO_Msk                            /*!< Destination address offset increment */

/******************  Bit definition for DMA_CBR2 register  *******************/
#define DMA_CBR2_BRSAO_Pos     (0U)
#define DMA_CBR2_BRSAO_Msk     (0xFFFFU << DMA_CBR2_BRSAO_Pos)             /*!< 0x0000FFFF */
#define DMA_CBR2_BRSAO         DMA_CBR2_BRSAO_Msk                          /*!< Block repeated source address offset */
#define DMA_CBR2_BRDAO_Pos     (16U)
#define DMA_CBR2_BRDAO_Msk     (0xFFFFU << DMA_CBR2_BRDAO_Pos)             /*!< 0xFFFF0000 */
#define DMA_CBR2_BRDAO         DMA_CBR2_BRDAO_Msk                          /*!< Block repeated destination address offset */

/******************  Bit definition for DMA_CLLR register  *******************/
#define DMA_CLLR_LA_Pos        (2U)
#define DMA_CLLR_LA_Msk        (0x3FFFU << DMA_CLLR_LA_Pos)                /*!< 0x0000FFFC */
#define DMA_CLLR_LA            DMA_CLLR_LA_Msk                             /*!< Pointer to the next linked-list data structure */
#define DMA_CLLR_ULL_Pos       (16U)
#define DMA_CLLR_ULL_Msk       (0x1U << DMA_CLLR_ULL_Pos)                  /*!< 0x00010000 */
#define DMA_CLLR_ULL           DMA_CLLR_ULL_Msk                            /*!< Update link address register from memory */
#define DMA_CLLR_UB2_Pos       (25U)
#define DMA_CLLR_UB2_Msk       (0x1U << DMA_CLLR_UB2_Pos)                  /*!< 0x02000000 */
#define DMA_CLLR_UB2           DMA_CLLR_UB2_Msk                            /*!< Update block register 2 from memory */
#define DMA_CLLR_UT3_Pos       (26U)
#define DMA_CLLR_UT3_Msk       (0x1U << DMA_CLLR_UT3_Pos)                  /*!< 0x04000000 */
#define DMA_CLLR_UT3           DMA_CLLR_UT3_Msk                            /*!< Update transfer register 3 from SRAM */
#define DMA_CLLR_UDA_Pos       (27U)
#define DMA_CLLR_UDA_Msk       (0x1U << DMA_CLLR_UDA_Pos)                  /*!< 0x08000000 */
#define DMA_CLLR_UDA           DMA_CLLR_UDA_Msk                            /*!< Update destination address register from SRAM */
#define DMA_CLLR_USA_Pos       (28U)
#define DMA_CLLR_USA_Msk       (0x1U << DMA_CLLR_USA_Pos)                  /*!< 0x10000000 */
#define DMA_CLLR_USA           DMA_CLLR_USA_Msk                            /*!< Update source address register from SRAM */
#define DMA_CLLR_UB1_Pos       (29U)
#define DMA_CLLR_UB1_Msk       (0x1U << DMA_CLLR_UB1_Pos)                  /*!< 0x20000000 */
#define DMA_CLLR_UB1           DMA_CLLR_UB1_Msk                            /*!< Update block register 1 from SRAM */
#define DMA_CLLR_UT2_Pos       (30U)
#define DMA_CLLR_UT2_Msk       (0x1U << DMA_CLLR_UT2_Pos)                  /*!< 0x40000000 */
#define DMA_CLLR_UT2           DMA_CLLR_UT2_Msk                            /*!< Update transfer register 2 from SRAM */
#define DMA_CLLR_UT1_Pos       (31U)
#define DMA_CLLR_UT1_Msk       (0x1U << DMA_CLLR_UT1_Pos)                  /*!< 0x80000000 */
#define DMA_CLLR_UT1           DMA_CLLR_UT1_Msk                            /*!< Update transfer register 1 from SRAM */

/******************************************************************************/
/*                                                                            */
/*                    External Interrupt/Event Controller                     */
/*                               EXTI1/EXTI2                                  */
/*                   c7amba_exti_v3-0_UserSpec_v3_0_0m.pdf                    */
/*                   register declared following documentation order          */
/******************************************************************************/

/******************  Bit definition for EXTI1_RTSR1 register  *******************/
#define EXTI1_RTSR1_RT0_Pos         (0U)
#define EXTI1_RTSR1_RT0_Msk         (0x1U << EXTI1_RTSR1_RT0_Pos)                /*!< 0x00000001 */
#define EXTI1_RTSR1_RT0             EXTI1_RTSR1_RT0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI1_RTSR1_RT1_Pos         (1U)
#define EXTI1_RTSR1_RT1_Msk         (0x1U << EXTI1_RTSR1_RT1_Pos)                /*!< 0x00000002 */
#define EXTI1_RTSR1_RT1             EXTI1_RTSR1_RT1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI1_RTSR1_RT2_Pos         (2U)
#define EXTI1_RTSR1_RT2_Msk         (0x1U << EXTI1_RTSR1_RT2_Pos)                /*!< 0x00000004 */
#define EXTI1_RTSR1_RT2             EXTI1_RTSR1_RT2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI1_RTSR1_RT3_Pos         (3U)
#define EXTI1_RTSR1_RT3_Msk         (0x1U << EXTI1_RTSR1_RT3_Pos)                /*!< 0x00000008 */
#define EXTI1_RTSR1_RT3             EXTI1_RTSR1_RT3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI1_RTSR1_RT4_Pos         (4U)
#define EXTI1_RTSR1_RT4_Msk         (0x1U << EXTI1_RTSR1_RT4_Pos)                /*!< 0x00000010 */
#define EXTI1_RTSR1_RT4             EXTI1_RTSR1_RT4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI1_RTSR1_RT5_Pos         (5U)
#define EXTI1_RTSR1_RT5_Msk         (0x1U << EXTI1_RTSR1_RT5_Pos)                /*!< 0x00000020 */
#define EXTI1_RTSR1_RT5             EXTI1_RTSR1_RT5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI1_RTSR1_RT6_Pos         (6U)
#define EXTI1_RTSR1_RT6_Msk         (0x1U << EXTI1_RTSR1_RT6_Pos)                /*!< 0x00000040 */
#define EXTI1_RTSR1_RT6             EXTI1_RTSR1_RT6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI1_RTSR1_RT7_Pos         (7U)
#define EXTI1_RTSR1_RT7_Msk         (0x1U << EXTI1_RTSR1_RT7_Pos)                /*!< 0x00000080 */
#define EXTI1_RTSR1_RT7             EXTI1_RTSR1_RT7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI1_RTSR1_RT8_Pos         (8U)
#define EXTI1_RTSR1_RT8_Msk         (0x1U << EXTI1_RTSR1_RT8_Pos)                /*!< 0x00000100 */
#define EXTI1_RTSR1_RT8             EXTI1_RTSR1_RT8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI1_RTSR1_RT9_Pos         (9U)
#define EXTI1_RTSR1_RT9_Msk         (0x1U << EXTI1_RTSR1_RT9_Pos)                /*!< 0x00000200 */
#define EXTI1_RTSR1_RT9             EXTI1_RTSR1_RT9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI1_RTSR1_RT10_Pos        (10U)
#define EXTI1_RTSR1_RT10_Msk        (0x1U << EXTI1_RTSR1_RT10_Pos)               /*!< 0x00000400 */
#define EXTI1_RTSR1_RT10            EXTI1_RTSR1_RT10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI1_RTSR1_RT11_Pos        (11U)
#define EXTI1_RTSR1_RT11_Msk        (0x1U << EXTI1_RTSR1_RT11_Pos)               /*!< 0x00000800 */
#define EXTI1_RTSR1_RT11            EXTI1_RTSR1_RT11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI1_RTSR1_RT12_Pos        (12U)
#define EXTI1_RTSR1_RT12_Msk        (0x1U << EXTI1_RTSR1_RT12_Pos)               /*!< 0x00001000 */
#define EXTI1_RTSR1_RT12            EXTI1_RTSR1_RT12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI1_RTSR1_RT13_Pos        (13U)
#define EXTI1_RTSR1_RT13_Msk        (0x1U << EXTI1_RTSR1_RT13_Pos)               /*!< 0x00002000 */
#define EXTI1_RTSR1_RT13            EXTI1_RTSR1_RT13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI1_RTSR1_RT14_Pos        (14U)
#define EXTI1_RTSR1_RT14_Msk        (0x1U << EXTI1_RTSR1_RT14_Pos)               /*!< 0x00004000 */
#define EXTI1_RTSR1_RT14            EXTI1_RTSR1_RT14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI1_RTSR1_RT15_Pos        (15U)
#define EXTI1_RTSR1_RT15_Msk        (0x1U << EXTI1_RTSR1_RT15_Pos)               /*!< 0x00008000 */
#define EXTI1_RTSR1_RT15            EXTI1_RTSR1_RT15_Msk                         /*!< Rising trigger event configuration bit of line 15 */
#define EXTI1_RTSR1_RT16_Pos        (16U)
#define EXTI1_RTSR1_RT16_Msk        (0x1U << EXTI1_RTSR1_RT16_Pos)               /*!< 0x00010000 */
#define EXTI1_RTSR1_RT16            EXTI1_RTSR1_RT16_Msk                         /*!< Rising trigger event configuration bit of line 16 */
#define EXTI1_RTSR1_RT17_Pos        (17U)
#define EXTI1_RTSR1_RT17_Msk        (0x1U << EXTI1_RTSR1_RT17_Pos)               /*!< 0x00020000 */
#define EXTI1_RTSR1_RT17            EXTI1_RTSR1_RT17_Msk                         /*!< Rising trigger event configuration bit of line 17 */
#define EXTI1_RTSR1_RT18_Pos        (18U)
#define EXTI1_RTSR1_RT18_Msk        (0x1U << EXTI1_RTSR1_RT18_Pos)               /*!< 0x00040000 */
#define EXTI1_RTSR1_RT18            EXTI1_RTSR1_RT18_Msk                         /*!< Rising trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_FTSR1 register  *******************/
#define EXTI1_FTSR1_FT0_Pos         (0U)
#define EXTI1_FTSR1_FT0_Msk         (0x1U << EXTI1_FTSR1_FT0_Pos)                /*!< 0x00000001 */
#define EXTI1_FTSR1_FT0             EXTI1_FTSR1_FT0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI1_FTSR1_FT1_Pos         (1U)
#define EXTI1_FTSR1_FT1_Msk         (0x1U << EXTI1_FTSR1_FT1_Pos)                /*!< 0x00000002 */
#define EXTI1_FTSR1_FT1             EXTI1_FTSR1_FT1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI1_FTSR1_FT2_Pos         (2U)
#define EXTI1_FTSR1_FT2_Msk         (0x1U << EXTI1_FTSR1_FT2_Pos)                /*!< 0x00000004 */
#define EXTI1_FTSR1_FT2             EXTI1_FTSR1_FT2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI1_FTSR1_FT3_Pos         (3U)
#define EXTI1_FTSR1_FT3_Msk         (0x1U << EXTI1_FTSR1_FT3_Pos)                /*!< 0x00000008 */
#define EXTI1_FTSR1_FT3             EXTI1_FTSR1_FT3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI1_FTSR1_FT4_Pos         (4U)
#define EXTI1_FTSR1_FT4_Msk         (0x1U << EXTI1_FTSR1_FT4_Pos)                /*!< 0x00000010 */
#define EXTI1_FTSR1_FT4             EXTI1_FTSR1_FT4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI1_FTSR1_FT5_Pos         (5U)
#define EXTI1_FTSR1_FT5_Msk         (0x1U << EXTI1_FTSR1_FT5_Pos)                /*!< 0x00000020 */
#define EXTI1_FTSR1_FT5             EXTI1_FTSR1_FT5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI1_FTSR1_FT6_Pos         (6U)
#define EXTI1_FTSR1_FT6_Msk         (0x1U << EXTI1_FTSR1_FT6_Pos)                /*!< 0x00000040 */
#define EXTI1_FTSR1_FT6             EXTI1_FTSR1_FT6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI1_FTSR1_FT7_Pos         (7U)
#define EXTI1_FTSR1_FT7_Msk         (0x1U << EXTI1_FTSR1_FT7_Pos)                /*!< 0x00000080 */
#define EXTI1_FTSR1_FT7             EXTI1_FTSR1_FT7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI1_FTSR1_FT8_Pos         (8U)
#define EXTI1_FTSR1_FT8_Msk         (0x1U << EXTI1_FTSR1_FT8_Pos)                /*!< 0x00000100 */
#define EXTI1_FTSR1_FT8             EXTI1_FTSR1_FT8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI1_FTSR1_FT9_Pos         (9U)
#define EXTI1_FTSR1_FT9_Msk         (0x1U << EXTI1_FTSR1_FT9_Pos)                /*!< 0x00000200 */
#define EXTI1_FTSR1_FT9             EXTI1_FTSR1_FT9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI1_FTSR1_FT10_Pos        (10U)
#define EXTI1_FTSR1_FT10_Msk        (0x1U << EXTI1_FTSR1_FT10_Pos)               /*!< 0x00000400 */
#define EXTI1_FTSR1_FT10            EXTI1_FTSR1_FT10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI1_FTSR1_FT11_Pos        (11U)
#define EXTI1_FTSR1_FT11_Msk        (0x1U << EXTI1_FTSR1_FT11_Pos)               /*!< 0x00000800 */
#define EXTI1_FTSR1_FT11            EXTI1_FTSR1_FT11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI1_FTSR1_FT12_Pos        (12U)
#define EXTI1_FTSR1_FT12_Msk        (0x1U << EXTI1_FTSR1_FT12_Pos)               /*!< 0x00001000 */
#define EXTI1_FTSR1_FT12            EXTI1_FTSR1_FT12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI1_FTSR1_FT13_Pos        (13U)
#define EXTI1_FTSR1_FT13_Msk        (0x1U << EXTI1_FTSR1_FT13_Pos)               /*!< 0x00002000 */
#define EXTI1_FTSR1_FT13            EXTI1_FTSR1_FT13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI1_FTSR1_FT14_Pos        (14U)
#define EXTI1_FTSR1_FT14_Msk        (0x1U << EXTI1_FTSR1_FT14_Pos)               /*!< 0x00004000 */
#define EXTI1_FTSR1_FT14            EXTI1_FTSR1_FT14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI1_FTSR1_FT15_Pos        (15U)
#define EXTI1_FTSR1_FT15_Msk        (0x1U << EXTI1_FTSR1_FT15_Pos)               /*!< 0x00008000 */
#define EXTI1_FTSR1_FT15            EXTI1_FTSR1_FT15_Msk                         /*!< Falling trigger event configuration bit of line 15 */
#define EXTI1_FTSR1_FT16_Pos        (16U)
#define EXTI1_FTSR1_FT16_Msk        (0x1U << EXTI1_FTSR1_FT16_Pos)               /*!< 0x00010000 */
#define EXTI1_FTSR1_FT16            EXTI1_FTSR1_FT16_Msk                         /*!< Falling trigger event configuration bit of line 16 */
#define EXTI1_FTSR1_FT17_Pos        (17U)
#define EXTI1_FTSR1_FT17_Msk        (0x1U << EXTI1_FTSR1_FT17_Pos)               /*!< 0x00020000 */
#define EXTI1_FTSR1_FT17            EXTI1_FTSR1_FT17_Msk                         /*!< Falling trigger event configuration bit of line 17 */
#define EXTI1_FTSR1_FT18_Pos        (18U)
#define EXTI1_FTSR1_FT18_Msk        (0x1U << EXTI1_FTSR1_FT18_Pos)               /*!< 0x00040000 */
#define EXTI1_FTSR1_FT18            EXTI1_FTSR1_FT18_Msk                         /*!< Falling trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_SWIER1 register  ******************/
#define EXTI1_SWIER1_SWI0_Pos     (0U)
#define EXTI1_SWIER1_SWI0_Msk     (0x1U << EXTI1_SWIER1_SWI0_Pos)            /*!< 0x00000001 */
#define EXTI1_SWIER1_SWI0         EXTI1_SWIER1_SWI0_Msk                      /*!< Software Interrupt on line 0 */
#define EXTI1_SWIER1_SWI1_Pos     (1U)
#define EXTI1_SWIER1_SWI1_Msk     (0x1U << EXTI1_SWIER1_SWI1_Pos)            /*!< 0x00000002 */
#define EXTI1_SWIER1_SWI1         EXTI1_SWIER1_SWI1_Msk                      /*!< Software Interrupt on line 1 */
#define EXTI1_SWIER1_SWI2_Pos     (2U)
#define EXTI1_SWIER1_SWI2_Msk     (0x1U << EXTI1_SWIER1_SWI2_Pos)            /*!< 0x00000004 */
#define EXTI1_SWIER1_SWI2         EXTI1_SWIER1_SWI2_Msk                      /*!< Software Interrupt on line 2 */
#define EXTI1_SWIER1_SWI3_Pos     (3U)
#define EXTI1_SWIER1_SWI3_Msk     (0x1U << EXTI1_SWIER1_SWI3_Pos)            /*!< 0x00000008 */
#define EXTI1_SWIER1_SWI3         EXTI1_SWIER1_SWI3_Msk                      /*!< Software Interrupt on line 3 */
#define EXTI1_SWIER1_SWI4_Pos     (4U)
#define EXTI1_SWIER1_SWI4_Msk     (0x1U << EXTI1_SWIER1_SWI4_Pos)            /*!< 0x00000010 */
#define EXTI1_SWIER1_SWI4         EXTI1_SWIER1_SWI4_Msk                      /*!< Software Interrupt on line 4 */
#define EXTI1_SWIER1_SWI5_Pos     (5U)
#define EXTI1_SWIER1_SWI5_Msk     (0x1U << EXTI1_SWIER1_SWI5_Pos)            /*!< 0x00000020 */
#define EXTI1_SWIER1_SWI5         EXTI1_SWIER1_SWI5_Msk                      /*!< Software Interrupt on line 5 */
#define EXTI1_SWIER1_SWI6_Pos     (6U)
#define EXTI1_SWIER1_SWI6_Msk     (0x1U << EXTI1_SWIER1_SWI6_Pos)            /*!< 0x00000040 */
#define EXTI1_SWIER1_SWI6         EXTI1_SWIER1_SWI6_Msk                      /*!< Software Interrupt on line 6 */
#define EXTI1_SWIER1_SWI7_Pos     (7U)
#define EXTI1_SWIER1_SWI7_Msk     (0x1U << EXTI1_SWIER1_SWI7_Pos)            /*!< 0x00000080 */
#define EXTI1_SWIER1_SWI7         EXTI1_SWIER1_SWI7_Msk                      /*!< Software Interrupt on line 7 */
#define EXTI1_SWIER1_SWI8_Pos     (8U)
#define EXTI1_SWIER1_SWI8_Msk     (0x1U << EXTI1_SWIER1_SWI8_Pos)            /*!< 0x00000100 */
#define EXTI1_SWIER1_SWI8         EXTI1_SWIER1_SWI8_Msk                      /*!< Software Interrupt on line 8 */
#define EXTI1_SWIER1_SWI9_Pos     (9U)
#define EXTI1_SWIER1_SWI9_Msk     (0x1U << EXTI1_SWIER1_SWI9_Pos)            /*!< 0x00000200 */
#define EXTI1_SWIER1_SWI9         EXTI1_SWIER1_SWI9_Msk                      /*!< Software Interrupt on line 9 */
#define EXTI1_SWIER1_SWI10_Pos    (10U)
#define EXTI1_SWIER1_SWI10_Msk    (0x1U << EXTI1_SWIER1_SWI10_Pos)           /*!< 0x00000400 */
#define EXTI1_SWIER1_SWI10        EXTI1_SWIER1_SWI10_Msk                     /*!< Software Interrupt on line 10 */
#define EXTI1_SWIER1_SWI11_Pos    (11U)
#define EXTI1_SWIER1_SWI11_Msk    (0x1U << EXTI1_SWIER1_SWI11_Pos)           /*!< 0x00000800 */
#define EXTI1_SWIER1_SWI11        EXTI1_SWIER1_SWI11_Msk                     /*!< Software Interrupt on line 11 */
#define EXTI1_SWIER1_SWI12_Pos    (12U)
#define EXTI1_SWIER1_SWI12_Msk    (0x1U << EXTI1_SWIER1_SWI12_Pos)           /*!< 0x00001000 */
#define EXTI1_SWIER1_SWI12        EXTI1_SWIER1_SWI12_Msk                     /*!< Software Interrupt on line 12 */
#define EXTI1_SWIER1_SWI13_Pos    (13U)
#define EXTI1_SWIER1_SWI13_Msk    (0x1U << EXTI1_SWIER1_SWI13_Pos)           /*!< 0x00002000 */
#define EXTI1_SWIER1_SWI13        EXTI1_SWIER1_SWI13_Msk                     /*!< Software Interrupt on line 13 */
#define EXTI1_SWIER1_SWI14_Pos    (14U)
#define EXTI1_SWIER1_SWI14_Msk    (0x1U << EXTI1_SWIER1_SWI14_Pos)           /*!< 0x00004000 */
#define EXTI1_SWIER1_SWI14        EXTI1_SWIER1_SWI14_Msk                     /*!< Software Interrupt on line 14 */
#define EXTI1_SWIER1_SWI15_Pos    (15U)
#define EXTI1_SWIER1_SWI15_Msk    (0x1U << EXTI1_SWIER1_SWI15_Pos)           /*!< 0x00008000 */
#define EXTI1_SWIER1_SWI15        EXTI1_SWIER1_SWI15_Msk                     /*!< Software Interrupt on line 15 */
#define EXTI1_SWIER1_SWI16_Pos    (16U)
#define EXTI1_SWIER1_SWI16_Msk    (0x1U << EXTI1_SWIER1_SWI16_Pos)           /*!< 0x00010000 */
#define EXTI1_SWIER1_SWI16        EXTI1_SWIER1_SWI16_Msk                     /*!< Software Interrupt on line 16 */
#define EXTI1_SWIER1_SWI17_Pos    (17U)
#define EXTI1_SWIER1_SWI17_Msk    (0x1U << EXTI1_SWIER1_SWI17_Pos)           /*!< 0x00020000 */
#define EXTI1_SWIER1_SWI17        EXTI1_SWIER1_SWI17_Msk                     /*!< Software Interrupt on line 17 */
#define EXTI1_SWIER1_SWI18_Pos    (18U)
#define EXTI1_SWIER1_SWI18_Msk    (0x1U << EXTI1_SWIER1_SWI18_Pos)           /*!< 0x00040000 */
#define EXTI1_SWIER1_SWI18        EXTI1_SWIER1_SWI18_Msk                     /*!< Software Interrupt on line 18 */

/******************  Bit definition for EXTI1_RPR1 register  *******************/
#define EXTI1_RPR1_RPIF0_Pos         (0U)
#define EXTI1_RPR1_RPIF0_Msk         (0x1U << EXTI1_RPR1_RPIF0_Pos)                /*!< 0x00000001 */
#define EXTI1_RPR1_RPIF0             EXTI1_RPR1_RPIF0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI1_RPR1_RPIF1_Pos         (1U)
#define EXTI1_RPR1_RPIF1_Msk         (0x1U << EXTI1_RPR1_RPIF1_Pos)                /*!< 0x00000002 */
#define EXTI1_RPR1_RPIF1             EXTI1_RPR1_RPIF1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI1_RPR1_RPIF2_Pos         (2U)
#define EXTI1_RPR1_RPIF2_Msk         (0x1U << EXTI1_RPR1_RPIF2_Pos)                /*!< 0x00000004 */
#define EXTI1_RPR1_RPIF2             EXTI1_RPR1_RPIF2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI1_RPR1_RPIF3_Pos         (3U)
#define EXTI1_RPR1_RPIF3_Msk         (0x1U << EXTI1_RPR1_RPIF3_Pos)                /*!< 0x00000008 */
#define EXTI1_RPR1_RPIF3             EXTI1_RPR1_RPIF3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI1_RPR1_RPIF4_Pos         (4U)
#define EXTI1_RPR1_RPIF4_Msk         (0x1U << EXTI1_RPR1_RPIF4_Pos)                /*!< 0x00000010 */
#define EXTI1_RPR1_RPIF4             EXTI1_RPR1_RPIF4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI1_RPR1_RPIF5_Pos         (5U)
#define EXTI1_RPR1_RPIF5_Msk         (0x1U << EXTI1_RPR1_RPIF5_Pos)                /*!< 0x00000020 */
#define EXTI1_RPR1_RPIF5             EXTI1_RPR1_RPIF5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI1_RPR1_RPIF6_Pos         (6U)
#define EXTI1_RPR1_RPIF6_Msk         (0x1U << EXTI1_RPR1_RPIF6_Pos)                /*!< 0x00000040 */
#define EXTI1_RPR1_RPIF6             EXTI1_RPR1_RPIF6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI1_RPR1_RPIF7_Pos         (7U)
#define EXTI1_RPR1_RPIF7_Msk         (0x1U << EXTI1_RPR1_RPIF7_Pos)                /*!< 0x00000080 */
#define EXTI1_RPR1_RPIF7             EXTI1_RPR1_RPIF7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI1_RPR1_RPIF8_Pos         (8U)
#define EXTI1_RPR1_RPIF8_Msk         (0x1U << EXTI1_RPR1_RPIF8_Pos)                /*!< 0x00000100 */
#define EXTI1_RPR1_RPIF8             EXTI1_RPR1_RPIF8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI1_RPR1_RPIF9_Pos         (9U)
#define EXTI1_RPR1_RPIF9_Msk         (0x1U << EXTI1_RPR1_RPIF9_Pos)                /*!< 0x00000200 */
#define EXTI1_RPR1_RPIF9             EXTI1_RPR1_RPIF9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI1_RPR1_RPIF10_Pos        (10U)
#define EXTI1_RPR1_RPIF10_Msk        (0x1U << EXTI1_RPR1_RPIF10_Pos)               /*!< 0x00000400 */
#define EXTI1_RPR1_RPIF10            EXTI1_RPR1_RPIF10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI1_RPR1_RPIF11_Pos        (11U)
#define EXTI1_RPR1_RPIF11_Msk        (0x1U << EXTI1_RPR1_RPIF11_Pos)               /*!< 0x00000800 */
#define EXTI1_RPR1_RPIF11            EXTI1_RPR1_RPIF11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI1_RPR1_RPIF12_Pos        (12U)
#define EXTI1_RPR1_RPIF12_Msk        (0x1U << EXTI1_RPR1_RPIF12_Pos)               /*!< 0x00001000 */
#define EXTI1_RPR1_RPIF12            EXTI1_RPR1_RPIF12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI1_RPR1_RPIF13_Pos        (13U)
#define EXTI1_RPR1_RPIF13_Msk        (0x1U << EXTI1_RPR1_RPIF13_Pos)               /*!< 0x00002000 */
#define EXTI1_RPR1_RPIF13            EXTI1_RPR1_RPIF13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI1_RPR1_RPIF14_Pos        (14U)
#define EXTI1_RPR1_RPIF14_Msk        (0x1U << EXTI1_RPR1_RPIF14_Pos)               /*!< 0x00004000 */
#define EXTI1_RPR1_RPIF14            EXTI1_RPR1_RPIF14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI1_RPR1_RPIF15_Pos        (15U)
#define EXTI1_RPR1_RPIF15_Msk        (0x1U << EXTI1_RPR1_RPIF15_Pos)               /*!< 0x00008000 */
#define EXTI1_RPR1_RPIF15            EXTI1_RPR1_RPIF15_Msk                         /*!< Rising trigger event configuration bit of line 15 */
#define EXTI1_RPR1_RPIF16_Pos        (16U)
#define EXTI1_RPR1_RPIF16_Msk        (0x1U << EXTI1_RPR1_RPIF16_Pos)               /*!< 0x00010000 */
#define EXTI1_RPR1_RPIF16            EXTI1_RPR1_RPIF16_Msk                         /*!< Rising trigger event configuration bit of line 16 */
#define EXTI1_RPR1_RPIF17_Pos        (17U)
#define EXTI1_RPR1_RPIF17_Msk        (0x1U << EXTI1_RPR1_RPIF17_Pos)               /*!< 0x00020000 */
#define EXTI1_RPR1_RPIF17            EXTI1_RPR1_RPIF17_Msk                         /*!< Rising trigger event configuration bit of line 17 */
#define EXTI1_RPR1_RPIF18_Pos        (18U)
#define EXTI1_RPR1_RPIF18_Msk        (0x1U << EXTI1_RPR1_RPIF18_Pos)               /*!< 0x00040000 */
#define EXTI1_RPR1_RPIF18            EXTI1_RPR1_RPIF18_Msk                         /*!< Rising trigger event configuration bit of line 18 */

/******************  Bit definition for EXTI1_FPR1 register  *******************/
#define EXTI1_FPR1_FPIF0_Pos         (0U)
#define EXTI1_FPR1_FPIF0_Msk         (0x1U << EXTI1_FPR1_FPIF0_Pos)                /*!< 0x00000001 */
#define EXTI1_FPR1_FPIF0             EXTI1_FPR1_FPIF0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI1_FPR1_FPIF1_Pos         (1U)
#define EXTI1_FPR1_FPIF1_Msk         (0x1U << EXTI1_FPR1_FPIF1_Pos)                /*!< 0x00000002 */
#define EXTI1_FPR1_FPIF1             EXTI1_FPR1_FPIF1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI1_FPR1_FPIF2_Pos         (2U)
#define EXTI1_FPR1_FPIF2_Msk         (0x1U << EXTI1_FPR1_FPIF2_Pos)                /*!< 0x00000004 */
#define EXTI1_FPR1_FPIF2             EXTI1_FPR1_FPIF2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI1_FPR1_FPIF3_Pos         (3U)
#define EXTI1_FPR1_FPIF3_Msk         (0x1U << EXTI1_FPR1_FPIF3_Pos)                /*!< 0x00000008 */
#define EXTI1_FPR1_FPIF3             EXTI1_FPR1_FPIF3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI1_FPR1_FPIF4_Pos         (4U)
#define EXTI1_FPR1_FPIF4_Msk         (0x1U << EXTI1_FPR1_FPIF4_Pos)                /*!< 0x00000010 */
#define EXTI1_FPR1_FPIF4             EXTI1_FPR1_FPIF4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI1_FPR1_FPIF5_Pos         (5U)
#define EXTI1_FPR1_FPIF5_Msk         (0x1U << EXTI1_FPR1_FPIF5_Pos)                /*!< 0x00000020 */
#define EXTI1_FPR1_FPIF5             EXTI1_FPR1_FPIF5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI1_FPR1_FPIF6_Pos         (6U)
#define EXTI1_FPR1_FPIF6_Msk         (0x1U << EXTI1_FPR1_FPIF6_Pos)                /*!< 0x00000040 */
#define EXTI1_FPR1_FPIF6             EXTI1_FPR1_FPIF6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI1_FPR1_FPIF7_Pos         (7U)
#define EXTI1_FPR1_FPIF7_Msk         (0x1U << EXTI1_FPR1_FPIF7_Pos)                /*!< 0x00000080 */
#define EXTI1_FPR1_FPIF7             EXTI1_FPR1_FPIF7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI1_FPR1_FPIF8_Pos         (8U)
#define EXTI1_FPR1_FPIF8_Msk         (0x1U << EXTI1_FPR1_FPIF8_Pos)                /*!< 0x00000100 */
#define EXTI1_FPR1_FPIF8             EXTI1_FPR1_FPIF8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI1_FPR1_FPIF9_Pos         (9U)
#define EXTI1_FPR1_FPIF9_Msk         (0x1U << EXTI1_FPR1_FPIF9_Pos)                /*!< 0x00000200 */
#define EXTI1_FPR1_FPIF9             EXTI1_FPR1_FPIF9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI1_FPR1_FPIF10_Pos        (10U)
#define EXTI1_FPR1_FPIF10_Msk        (0x1U << EXTI1_FPR1_FPIF10_Pos)               /*!< 0x00000400 */
#define EXTI1_FPR1_FPIF10            EXTI1_FPR1_FPIF10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI1_FPR1_FPIF11_Pos        (11U)
#define EXTI1_FPR1_FPIF11_Msk        (0x1U << EXTI1_FPR1_FPIF11_Pos)               /*!< 0x00000800 */
#define EXTI1_FPR1_FPIF11            EXTI1_FPR1_FPIF11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI1_FPR1_FPIF12_Pos        (12U)
#define EXTI1_FPR1_FPIF12_Msk        (0x1U << EXTI1_FPR1_FPIF12_Pos)               /*!< 0x00001000 */
#define EXTI1_FPR1_FPIF12            EXTI1_FPR1_FPIF12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI1_FPR1_FPIF13_Pos        (13U)
#define EXTI1_FPR1_FPIF13_Msk        (0x1U << EXTI1_FPR1_FPIF13_Pos)               /*!< 0x00002000 */
#define EXTI1_FPR1_FPIF13            EXTI1_FPR1_FPIF13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI1_FPR1_FPIF14_Pos        (14U)
#define EXTI1_FPR1_FPIF14_Msk        (0x1U << EXTI1_FPR1_FPIF14_Pos)               /*!< 0x00004000 */
#define EXTI1_FPR1_FPIF14            EXTI1_FPR1_FPIF14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI1_FPR1_FPIF15_Pos        (15U)
#define EXTI1_FPR1_FPIF15_Msk        (0x1U << EXTI1_FPR1_FPIF15_Pos)               /*!< 0x00008000 */
#define EXTI1_FPR1_FPIF15            EXTI1_FPR1_FPIF15_Msk                         /*!< Falling trigger event configuration bit of line 15 */
#define EXTI1_FPR1_FPIF16_Pos        (16U)
#define EXTI1_FPR1_FPIF16_Msk        (0x1U << EXTI1_FPR1_FPIF16_Pos)               /*!< 0x00010000 */
#define EXTI1_FPR1_FPIF16            EXTI1_FPR1_FPIF16_Msk                         /*!< Falling trigger event configuration bit of line 16 */
#define EXTI1_FPR1_FPIF17_Pos        (17U)
#define EXTI1_FPR1_FPIF17_Msk        (0x1U << EXTI1_FPR1_FPIF17_Pos)               /*!< 0x00020000 */
#define EXTI1_FPR1_FPIF17            EXTI1_FPR1_FPIF17_Msk                         /*!< Falling trigger event configuration bit of line 17 */
#define EXTI1_FPR1_FPIF18_Pos        (18U)
#define EXTI1_FPR1_FPIF18_Msk        (0x1U << EXTI1_FPR1_FPIF18_Pos)               /*!< 0x00040000 */
#define EXTI1_FPR1_FPIF18            EXTI1_FPR1_FPIF18_Msk                         /*!< Falling trigger event configuration bit of line 18 */


/******************  Bit definition for EXTI1_SECCFGR1  register  ******************/
#define EXTI1_SECCFGR1_SEC0_Pos  (0U)
#define EXTI1_SECCFGR1_SEC0_Msk  (0x1U << EXTI1_SECCFGR1_SEC0_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR1_SEC0      EXTI1_SECCFGR1_SEC0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI1_SECCFGR1_SEC1_Pos  (1U)
#define EXTI1_SECCFGR1_SEC1_Msk  (0x1U << EXTI1_SECCFGR1_SEC1_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR1_SEC1      EXTI1_SECCFGR1_SEC1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI1_SECCFGR1_SEC2_Pos  (2U)
#define EXTI1_SECCFGR1_SEC2_Msk  (0x1U << EXTI1_SECCFGR1_SEC2_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR1_SEC2      EXTI1_SECCFGR1_SEC2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI1_SECCFGR1_SEC3_Pos  (3U)
#define EXTI1_SECCFGR1_SEC3_Msk  (0x1U << EXTI1_SECCFGR1_SEC3_Pos)          /*!< 0x00000008 */
#define EXTI1_SECCFGR1_SEC3      EXTI1_SECCFGR1_SEC3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI1_SECCFGR1_SEC4_Pos  (4U)
#define EXTI1_SECCFGR1_SEC4_Msk  (0x1U << EXTI1_SECCFGR1_SEC4_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR1_SEC4      EXTI1_SECCFGR1_SEC4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI1_SECCFGR1_SEC5_Pos  (5U)
#define EXTI1_SECCFGR1_SEC5_Msk  (0x1U << EXTI1_SECCFGR1_SEC5_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR1_SEC5      EXTI1_SECCFGR1_SEC5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI1_SECCFGR1_SEC6_Pos  (6U)
#define EXTI1_SECCFGR1_SEC6_Msk  (0x1U << EXTI1_SECCFGR1_SEC6_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR1_SEC6      EXTI1_SECCFGR1_SEC6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI1_SECCFGR1_SEC7_Pos  (7U)
#define EXTI1_SECCFGR1_SEC7_Msk  (0x1U << EXTI1_SECCFGR1_SEC7_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR1_SEC7      EXTI1_SECCFGR1_SEC7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI1_SECCFGR1_SEC8_Pos  (8U)
#define EXTI1_SECCFGR1_SEC8_Msk  (0x1U << EXTI1_SECCFGR1_SEC8_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR1_SEC8      EXTI1_SECCFGR1_SEC8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI1_SECCFGR1_SEC9_Pos  (9U)
#define EXTI1_SECCFGR1_SEC9_Msk  (0x1U << EXTI1_SECCFGR1_SEC9_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR1_SEC9      EXTI1_SECCFGR1_SEC9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI1_SECCFGR1_SEC10_Pos (10U)
#define EXTI1_SECCFGR1_SEC10_Msk (0x1U << EXTI1_SECCFGR1_SEC10_Pos)         /*!< 0x00000400 */
#define EXTI1_SECCFGR1_SEC10     EXTI1_SECCFGR1_SEC10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI1_SECCFGR1_SEC11_Pos (11U)
#define EXTI1_SECCFGR1_SEC11_Msk (0x1U << EXTI1_SECCFGR1_SEC11_Pos)         /*!< 0x00000800 */
#define EXTI1_SECCFGR1_SEC11     EXTI1_SECCFGR1_SEC11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI1_SECCFGR1_SEC12_Pos (12U)
#define EXTI1_SECCFGR1_SEC12_Msk (0x1U << EXTI1_SECCFGR1_SEC12_Pos)         /*!< 0x00001000 */
#define EXTI1_SECCFGR1_SEC12     EXTI1_SECCFGR1_SEC12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI1_SECCFGR1_SEC13_Pos (13U)
#define EXTI1_SECCFGR1_SEC13_Msk (0x1U << EXTI1_SECCFGR1_SEC13_Pos)         /*!< 0x00002000 */
#define EXTI1_SECCFGR1_SEC13     EXTI1_SECCFGR1_SEC13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI1_SECCFGR1_SEC14_Pos (14U)
#define EXTI1_SECCFGR1_SEC14_Msk (0x1U << EXTI1_SECCFGR1_SEC14_Pos)         /*!< 0x00004000 */
#define EXTI1_SECCFGR1_SEC14     EXTI1_SECCFGR1_SEC14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI1_SECCFGR1_SEC15_Pos (15U)
#define EXTI1_SECCFGR1_SEC15_Msk (0x1U << EXTI1_SECCFGR1_SEC15_Pos)         /*!< 0x00008000 */
#define EXTI1_SECCFGR1_SEC15     EXTI1_SECCFGR1_SEC15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI1_SECCFGR1_SEC16_Pos (16U)
#define EXTI1_SECCFGR1_SEC16_Msk (0x1U << EXTI1_SECCFGR1_SEC16_Pos)         /*!< 0x00010000 */
#define EXTI1_SECCFGR1_SEC16     EXTI1_SECCFGR1_SEC16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI1_SECCFGR1_SEC17_Pos (17U)
#define EXTI1_SECCFGR1_SEC17_Msk (0x1U << EXTI1_SECCFGR1_SEC17_Pos)         /*!< 0x00020000 */
#define EXTI1_SECCFGR1_SEC17     EXTI1_SECCFGR1_SEC17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI1_SECCFGR1_SEC18_Pos (18U)
#define EXTI1_SECCFGR1_SEC18_Msk (0x1U << EXTI1_SECCFGR1_SEC18_Pos)         /*!< 0x00040000 */
#define EXTI1_SECCFGR1_SEC18     EXTI1_SECCFGR1_SEC18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI1_SECCFGR1_SEC19_Pos (19U)
#define EXTI1_SECCFGR1_SEC19_Msk (0x1U << EXTI1_SECCFGR1_SEC19_Pos)         /*!< 0x00080000 */
#define EXTI1_SECCFGR1_SEC19     EXTI1_SECCFGR1_SEC19_Msk                   /*!< SEC/PRIV enable on event input 19 */
/* no event input 20  */
#define EXTI1_SECCFGR1_SEC21_Pos (21U)
#define EXTI1_SECCFGR1_SEC21_Msk (0x1U << EXTI1_SECCFGR1_SEC21_Pos)         /*!< 0x00200000 */
#define EXTI1_SECCFGR1_SEC21     EXTI1_SECCFGR1_SEC21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI1_SECCFGR1_SEC22_Pos (22U)
#define EXTI1_SECCFGR1_SEC22_Msk (0x1U << EXTI1_SECCFGR1_SEC22_Pos)         /*!< 0x00400000 */
#define EXTI1_SECCFGR1_SEC22     EXTI1_SECCFGR1_SEC22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI1_SECCFGR1_SEC23_Pos (23U)
#define EXTI1_SECCFGR1_SEC23_Msk (0x1U << EXTI1_SECCFGR1_SEC23_Pos)         /*!< 0x00800000 */
#define EXTI1_SECCFGR1_SEC23     EXTI1_SECCFGR1_SEC23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI1_SECCFGR1_SEC24_Pos (24U)
#define EXTI1_SECCFGR1_SEC24_Msk (0x1U << EXTI1_SECCFGR1_SEC24_Pos)         /*!< 0x01000000 */
#define EXTI1_SECCFGR1_SEC24     EXTI1_SECCFGR1_SEC24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI1_SECCFGR1_SEC25_Pos (25U)
#define EXTI1_SECCFGR1_SEC25_Msk (0x1U << EXTI1_SECCFGR1_SEC25_Pos)         /*!< 0x02000000 */
#define EXTI1_SECCFGR1_SEC25     EXTI1_SECCFGR1_SEC25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI1_SECCFGR1_SEC26_Pos (26U)
#define EXTI1_SECCFGR1_SEC26_Msk (0x1U << EXTI1_SECCFGR1_SEC26_Pos)         /*!< 0x04000000 */
#define EXTI1_SECCFGR1_SEC26     EXTI1_SECCFGR1_SEC26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI1_SECCFGR1_SEC27_Pos (27U)
#define EXTI1_SECCFGR1_SEC27_Msk (0x1U << EXTI1_SECCFGR1_SEC27_Pos)         /*!< 0x08000000 */
#define EXTI1_SECCFGR1_SEC27     EXTI1_SECCFGR1_SEC27_Msk                   /*!< SEC/PRIV enable on event input 27 */
#define EXTI1_SECCFGR1_SEC28_Pos (28U)
#define EXTI1_SECCFGR1_SEC28_Msk (0x1U << EXTI1_SECCFGR1_SEC28_Pos)         /*!< 0x10000000 */
#define EXTI1_SECCFGR1_SEC28     EXTI1_SECCFGR1_SEC28_Msk                   /*!< SEC/PRIV enable on event input 28 */
#define EXTI1_SECCFGR1_SEC29_Pos (29U)
#define EXTI1_SECCFGR1_SEC29_Msk (0x1U << EXTI1_SECCFGR1_SEC29_Pos)         /*!< 0x20000000 */
#define EXTI1_SECCFGR1_SEC29     EXTI1_SECCFGR1_SEC29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI1_SECCFGR1_SEC30_Pos (30U)
#define EXTI1_SECCFGR1_SEC30_Msk (0x1U << EXTI1_SECCFGR1_SEC30_Pos)         /*!< 0x40000000 */
#define EXTI1_SECCFGR1_SEC30     EXTI1_SECCFGR1_SEC30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI1_SECCFGR1_SEC31_Pos (31U)
#define EXTI1_SECCFGR1_SEC31_Msk (0x1U << EXTI1_SECCFGR1_SEC31_Pos)         /*!< 0x80000000 */
#define EXTI1_SECCFGR1_SEC31     EXTI1_SECCFGR1_SEC31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI1_PRIVCFGR1 register  ******************/
#define EXTI1_PRIVCFGR1_PRIV0_Pos  (0U)
#define EXTI1_PRIVCFGR1_PRIV0_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV0_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR1_PRIV0      EXTI1_PRIVCFGR1_PRIV0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI1_PRIVCFGR1_PRIV1_Pos  (1U)
#define EXTI1_PRIVCFGR1_PRIV1_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV1_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR1_PRIV1      EXTI1_PRIVCFGR1_PRIV1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI1_PRIVCFGR1_PRIV2_Pos  (2U)
#define EXTI1_PRIVCFGR1_PRIV2_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV2_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR1_PRIV2      EXTI1_PRIVCFGR1_PRIV2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI1_PRIVCFGR1_PRIV3_Pos  (3U)
#define EXTI1_PRIVCFGR1_PRIV3_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV3_Pos)          /*!< 0x00000008 */
#define EXTI1_PRIVCFGR1_PRIV3      EXTI1_PRIVCFGR1_PRIV3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI1_PRIVCFGR1_PRIV4_Pos  (4U)
#define EXTI1_PRIVCFGR1_PRIV4_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV4_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR1_PRIV4      EXTI1_PRIVCFGR1_PRIV4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI1_PRIVCFGR1_PRIV5_Pos  (5U)
#define EXTI1_PRIVCFGR1_PRIV5_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV5_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR1_PRIV5      EXTI1_PRIVCFGR1_PRIV5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI1_PRIVCFGR1_PRIV6_Pos  (6U)
#define EXTI1_PRIVCFGR1_PRIV6_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV6_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR1_PRIV6      EXTI1_PRIVCFGR1_PRIV6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI1_PRIVCFGR1_PRIV7_Pos  (7U)
#define EXTI1_PRIVCFGR1_PRIV7_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV7_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR1_PRIV7      EXTI1_PRIVCFGR1_PRIV7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI1_PRIVCFGR1_PRIV8_Pos  (8U)
#define EXTI1_PRIVCFGR1_PRIV8_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV8_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR1_PRIV8      EXTI1_PRIVCFGR1_PRIV8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI1_PRIVCFGR1_PRIV9_Pos  (9U)
#define EXTI1_PRIVCFGR1_PRIV9_Msk  (0x1U << EXTI1_PRIVCFGR1_PRIV9_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR1_PRIV9      EXTI1_PRIVCFGR1_PRIV9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI1_PRIVCFGR1_PRIV10_Pos (10U)
#define EXTI1_PRIVCFGR1_PRIV10_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV10_Pos)         /*!< 0x00000400 */
#define EXTI1_PRIVCFGR1_PRIV10     EXTI1_PRIVCFGR1_PRIV10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI1_PRIVCFGR1_PRIV11_Pos (11U)
#define EXTI1_PRIVCFGR1_PRIV11_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV11_Pos)         /*!< 0x00000800 */
#define EXTI1_PRIVCFGR1_PRIV11     EXTI1_PRIVCFGR1_PRIV11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI1_PRIVCFGR1_PRIV12_Pos (12U)
#define EXTI1_PRIVCFGR1_PRIV12_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV12_Pos)         /*!< 0x00001000 */
#define EXTI1_PRIVCFGR1_PRIV12     EXTI1_PRIVCFGR1_PRIV12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI1_PRIVCFGR1_PRIV13_Pos (13U)
#define EXTI1_PRIVCFGR1_PRIV13_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV13_Pos)         /*!< 0x00002000 */
#define EXTI1_PRIVCFGR1_PRIV13     EXTI1_PRIVCFGR1_PRIV13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI1_PRIVCFGR1_PRIV14_Pos (14U)
#define EXTI1_PRIVCFGR1_PRIV14_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV14_Pos)         /*!< 0x00004000 */
#define EXTI1_PRIVCFGR1_PRIV14     EXTI1_PRIVCFGR1_PRIV14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI1_PRIVCFGR1_PRIV15_Pos (15U)
#define EXTI1_PRIVCFGR1_PRIV15_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV15_Pos)         /*!< 0x00008000 */
#define EXTI1_PRIVCFGR1_PRIV15     EXTI1_PRIVCFGR1_PRIV15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI1_PRIVCFGR1_PRIV16_Pos (16U)
#define EXTI1_PRIVCFGR1_PRIV16_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV16_Pos)         /*!< 0x00010000 */
#define EXTI1_PRIVCFGR1_PRIV16     EXTI1_PRIVCFGR1_PRIV16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI1_PRIVCFGR1_PRIV17_Pos (17U)
#define EXTI1_PRIVCFGR1_PRIV17_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV17_Pos)         /*!< 0x00020000 */
#define EXTI1_PRIVCFGR1_PRIV17     EXTI1_PRIVCFGR1_PRIV17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI1_PRIVCFGR1_PRIV18_Pos (18U)
#define EXTI1_PRIVCFGR1_PRIV18_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV18_Pos)         /*!< 0x00040000 */
#define EXTI1_PRIVCFGR1_PRIV18     EXTI1_PRIVCFGR1_PRIV18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI1_PRIVCFGR1_PRIV19_Pos (19U)
#define EXTI1_PRIVCFGR1_PRIV19_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV19_Pos)         /*!< 0x00080000 */
#define EXTI1_PRIVCFGR1_PRIV19     EXTI1_PRIVCFGR1_PRIV19_Msk                   /*!< SEC/PRIV enable on event input 19 */
/* no event input 20  */
#define EXTI1_PRIVCFGR1_PRIV21_Pos (21U)
#define EXTI1_PRIVCFGR1_PRIV21_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV21_Pos)         /*!< 0x00200000 */
#define EXTI1_PRIVCFGR1_PRIV21     EXTI1_PRIVCFGR1_PRIV21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI1_PRIVCFGR1_PRIV22_Pos (22U)
#define EXTI1_PRIVCFGR1_PRIV22_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV22_Pos)         /*!< 0x00400000 */
#define EXTI1_PRIVCFGR1_PRIV22     EXTI1_PRIVCFGR1_PRIV22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI1_PRIVCFGR1_PRIV23_Pos (23U)
#define EXTI1_PRIVCFGR1_PRIV23_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV23_Pos)         /*!< 0x00800000 */
#define EXTI1_PRIVCFGR1_PRIV23     EXTI1_PRIVCFGR1_PRIV23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI1_PRIVCFGR1_PRIV24_Pos (24U)
#define EXTI1_PRIVCFGR1_PRIV24_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV24_Pos)         /*!< 0x01000000 */
#define EXTI1_PRIVCFGR1_PRIV24     EXTI1_PRIVCFGR1_PRIV24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI1_PRIVCFGR1_PRIV25_Pos (25U)
#define EXTI1_PRIVCFGR1_PRIV25_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV25_Pos)         /*!< 0x02000000 */
#define EXTI1_PRIVCFGR1_PRIV25     EXTI1_PRIVCFGR1_PRIV25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI1_PRIVCFGR1_PRIV26_Pos (26U)
#define EXTI1_PRIVCFGR1_PRIV26_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV26_Pos)         /*!< 0x04000000 */
#define EXTI1_PRIVCFGR1_PRIV26     EXTI1_PRIVCFGR1_PRIV26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI1_PRIVCFGR1_PRIV27_Pos (27U)
#define EXTI1_PRIVCFGR1_PRIV27_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV27_Pos)         /*!< 0x08000000 */
#define EXTI1_PRIVCFGR1_PRIV27     EXTI1_PRIVCFGR1_PRIV27_Msk                   /*!< SEC/PRIV enable on event input 27 */
#define EXTI1_PRIVCFGR1_PRIV28_Pos (28U)
#define EXTI1_PRIVCFGR1_PRIV28_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV28_Pos)         /*!< 0x10000000 */
#define EXTI1_PRIVCFGR1_PRIV28     EXTI1_PRIVCFGR1_PRIV28_Msk                   /*!< SEC/PRIV enable on event input 28 */
#define EXTI1_PRIVCFGR1_PRIV29_Pos (29U)
#define EXTI1_PRIVCFGR1_PRIV29_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV29_Pos)         /*!< 0x20000000 */
#define EXTI1_PRIVCFGR1_PRIV29     EXTI1_PRIVCFGR1_PRIV29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI1_PRIVCFGR1_PRIV30_Pos (30U)
#define EXTI1_PRIVCFGR1_PRIV30_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV30_Pos)         /*!< 0x40000000 */
#define EXTI1_PRIVCFGR1_PRIV30     EXTI1_PRIVCFGR1_PRIV30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI1_PRIVCFGR1_PRIV31_Pos (31U)
#define EXTI1_PRIVCFGR1_PRIV31_Msk (0x1U << EXTI1_PRIVCFGR1_PRIV31_Pos)         /*!< 0x80000000 */
#define EXTI1_PRIVCFGR1_PRIV31     EXTI1_PRIVCFGR1_PRIV31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI1_RTSR2 register  *******************/
#define EXTI1_RTSR2_RT43_Pos        (11U)
#define EXTI1_RTSR2_RT43_Msk        (0x1U << EXTI1_RTSR2_RT43_Pos)               /*!< 0x00000800 */
#define EXTI1_RTSR2_RT43            EXTI1_RTSR2_RT43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_RTSR2_RT44_Pos        (12U)
#define EXTI1_RTSR2_RT44_Msk        (0x1U << EXTI1_RTSR2_RT44_Pos)               /*!< 0x00001000 */
#define EXTI1_RTSR2_RT44            EXTI1_RTSR2_RT44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_RTSR2_RT45_Pos        (13U)
#define EXTI1_RTSR2_RT45_Msk        (0x1U << EXTI1_RTSR2_RT45_Pos)               /*!< 0x00002000 */
#define EXTI1_RTSR2_RT45            EXTI1_RTSR2_RT45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_FTSR2 register  *******************/
#define EXTI1_FTSR2_FT43_Pos        (11U)
#define EXTI1_FTSR2_FT43_Msk        (0x1U << EXTI1_FTSR2_FT43_Pos)               /*!< 0x00000800 */
#define EXTI1_FTSR2_FT43            EXTI1_FTSR2_FT43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_FTSR2_FT44_Pos        (12U)
#define EXTI1_FTSR2_FT44_Msk        (0x1U << EXTI1_FTSR2_FT44_Pos)               /*!< 0x00001000 */
#define EXTI1_FTSR2_FT44            EXTI1_FTSR2_FT44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_FTSR2_FT45_Pos        (13U)
#define EXTI1_FTSR2_FT45_Msk        (0x1U << EXTI1_FTSR2_FT45_Pos)               /*!< 0x00002000 */
#define EXTI1_FTSR2_FT45            EXTI1_FTSR2_FT45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_SWIER2 register  ******************/
#define EXTI1_SWIER2_SWI43_Pos    (11U)
#define EXTI1_SWIER2_SWI43_Msk    (0x1U << EXTI1_SWIER2_SWI43_Pos)           /*!< 0x00000800 */
#define EXTI1_SWIER2_SWI43        EXTI1_SWIER2_SWI43_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI1_SWIER2_SWI44_Pos    (12U)
#define EXTI1_SWIER2_SWI44_Msk    (0x1U << EXTI1_SWIER2_SWI44_Pos)           /*!< 0x00001000 */
#define EXTI1_SWIER2_SWI44        EXTI1_SWIER2_SWI44_Msk                     /*!< Software Interrupt on line 51 */
#define EXTI1_SWIER2_SWI45_Pos    (13U)
#define EXTI1_SWIER2_SWI45_Msk    (0x1U << EXTI1_SWIER2_SWI45_Pos)           /*!< 0x00002000 */
#define EXTI1_SWIER2_SWI45        EXTI1_SWIER2_SWI45_Msk                     /*!< Software Interrupt on line 51 */

/******************  Bit definition for EXTI1_RPR2 register  *******************/
#define EXTI1_RPR2_RPIF43_Pos        (11U)
#define EXTI1_RPR2_RPIF43_Msk        (0x1U << EXTI1_RPR2_RPIF43_Pos)               /*!< 0x00000800 */
#define EXTI1_RPR2_RPIF43            EXTI1_RPR2_RPIF43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_RPR2_RPIF44_Pos        (12U)
#define EXTI1_RPR2_RPIF44_Msk        (0x1U << EXTI1_RPR2_RPIF44_Pos)               /*!< 0x00001000 */
#define EXTI1_RPR2_RPIF44            EXTI1_RPR2_RPIF44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_RPR2_RPIF45_Pos        (13U)
#define EXTI1_RPR2_RPIF45_Msk        (0x1U << EXTI1_RPR2_RPIF45_Pos)               /*!< 0x00002000 */
#define EXTI1_RPR2_RPIF45            EXTI1_RPR2_RPIF45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_FPR2 register  *******************/
#define EXTI1_FPR2_FPIF43_Pos        (11U)
#define EXTI1_FPR2_FPIF43_Msk        (0x1U << EXTI1_FPR2_FPIF43_Pos)               /*!< 0x00000800 */
#define EXTI1_FPR2_FPIF43            EXTI1_FPR2_FPIF43_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI1_FPR2_FPIF44_Pos        (12U)
#define EXTI1_FPR2_FPIF44_Msk        (0x1U << EXTI1_FPR2_FPIF44_Pos)               /*!< 0x00001000 */
#define EXTI1_FPR2_FPIF44            EXTI1_FPR2_FPIF44_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI1_FPR2_FPIF45_Pos        (13U)
#define EXTI1_FPR2_FPIF45_Msk        (0x1U << EXTI1_FPR2_FPIF45_Pos)               /*!< 0x00002000 */
#define EXTI1_FPR2_FPIF45            EXTI1_FPR2_FPIF45_Msk                         /*!< Rising trigger event configuration bit of line 51 */

/******************  Bit definition for EXTI1_SECCFGR2  register  ******************/
#define EXTI1_SECCFGR2_SEC32_Pos  (0U)
#define EXTI1_SECCFGR2_SEC32_Msk  (0x1U << EXTI1_SECCFGR2_SEC32_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR2_SEC32      EXTI1_SECCFGR2_SEC32_Msk                    /*!< SEC/PRIV enable on event input 32 */
#define EXTI1_SECCFGR2_SEC33_Pos  (1U)
#define EXTI1_SECCFGR2_SEC33_Msk  (0x1U << EXTI1_SECCFGR2_SEC33_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR2_SEC33      EXTI1_SECCFGR2_SEC33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI1_SECCFGR2_SEC34_Pos  (2U)
#define EXTI1_SECCFGR2_SEC34_Msk  (0x1U << EXTI1_SECCFGR2_SEC34_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR2_SEC34      EXTI1_SECCFGR2_SEC34_Msk                    /*!< SEC/PRIV enable on event input 34 */
/* no event input 35  */
#define EXTI1_SECCFGR2_SEC36_Pos  (4U)
#define EXTI1_SECCFGR2_SEC36_Msk  (0x1U << EXTI1_SECCFGR2_SEC36_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR2_SEC36      EXTI1_SECCFGR2_SEC36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI1_SECCFGR2_SEC37_Pos  (5U)
#define EXTI1_SECCFGR2_SEC37_Msk  (0x1U << EXTI1_SECCFGR2_SEC37_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR2_SEC37      EXTI1_SECCFGR2_SEC37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI1_SECCFGR2_SEC38_Pos  (6U)
#define EXTI1_SECCFGR2_SEC38_Msk  (0x1U << EXTI1_SECCFGR2_SEC38_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR2_SEC38      EXTI1_SECCFGR2_SEC38_Msk                    /*!< SEC/PRIV enable on event input 38 */
#define EXTI1_SECCFGR2_SEC39_Pos  (7U)
#define EXTI1_SECCFGR2_SEC39_Msk  (0x1U << EXTI1_SECCFGR2_SEC39_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR2_SEC39      EXTI1_SECCFGR2_SEC39_Msk                    /*!< SEC/PRIV enable on event input 39 */
#define EXTI1_SECCFGR2_SEC40_Pos  (8U)
#define EXTI1_SECCFGR2_SEC40_Msk  (0x1U << EXTI1_SECCFGR2_SEC40_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR2_SEC40      EXTI1_SECCFGR2_SEC40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI1_SECCFGR2_SEC41_Pos  (9U)
#define EXTI1_SECCFGR2_SEC41_Msk  (0x1U << EXTI1_SECCFGR2_SEC41_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR2_SEC41      EXTI1_SECCFGR2_SEC41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI1_SECCFGR2_SEC42_Pos (10U)
#define EXTI1_SECCFGR2_SEC42_Msk (0x1U << EXTI1_SECCFGR2_SEC42_Pos)         /*!< 0x00000400 */
#define EXTI1_SECCFGR2_SEC42     EXTI1_SECCFGR2_SEC42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI1_SECCFGR2_SEC43_Pos (11U)
#define EXTI1_SECCFGR2_SEC43_Msk (0x1U << EXTI1_SECCFGR2_SEC43_Pos)         /*!< 0x00000800 */
#define EXTI1_SECCFGR2_SEC43     EXTI1_SECCFGR2_SEC43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI1_SECCFGR2_SEC44_Pos (12U)
#define EXTI1_SECCFGR2_SEC44_Msk (0x1U << EXTI1_SECCFGR2_SEC44_Pos)         /*!< 0x00001000 */
#define EXTI1_SECCFGR2_SEC44     EXTI1_SECCFGR2_SEC44_Msk                   /*!< SEC/PRIV enable on event input 44 */
#define EXTI1_SECCFGR2_SEC45_Pos (13U)
#define EXTI1_SECCFGR2_SEC45_Msk (0x1U << EXTI1_SECCFGR2_SEC45_Pos)         /*!< 0x00002000 */
#define EXTI1_SECCFGR2_SEC45     EXTI1_SECCFGR2_SEC45_Msk                   /*!< SEC/PRIV enable on event input 45 */
#define EXTI1_SECCFGR2_SEC46_Pos (14U)
#define EXTI1_SECCFGR2_SEC46_Msk (0x1U << EXTI1_SECCFGR2_SEC46_Pos)         /*!< 0x00004000 */
#define EXTI1_SECCFGR2_SEC46     EXTI1_SECCFGR2_SEC46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI1_SECCFGR2_SEC47_Pos (15U)
#define EXTI1_SECCFGR2_SEC47_Msk (0x1U << EXTI1_SECCFGR2_SEC47_Pos)         /*!< 0x00008000 */
#define EXTI1_SECCFGR2_SEC47     EXTI1_SECCFGR2_SEC47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI1_SECCFGR2_SEC48_Pos (16U)
#define EXTI1_SECCFGR2_SEC48_Msk (0x1U << EXTI1_SECCFGR2_SEC48_Pos)         /*!< 0x00010000 */
#define EXTI1_SECCFGR2_SEC48     EXTI1_SECCFGR2_SEC48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI1_SECCFGR2_SEC49_Pos (17U)
#define EXTI1_SECCFGR2_SEC49_Msk (0x1U << EXTI1_SECCFGR2_SEC49_Pos)         /*!< 0x00020000 */
#define EXTI1_SECCFGR2_SEC49     EXTI1_SECCFGR2_SEC49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI1_SECCFGR2_SEC50_Pos (18U)
#define EXTI1_SECCFGR2_SEC50_Msk (0x1U << EXTI1_SECCFGR2_SEC50_Pos)         /*!< 0x00040000 */
#define EXTI1_SECCFGR2_SEC50     EXTI1_SECCFGR2_SEC50_Msk                   /*!< SEC/PRIV enable on event input 50 */
/* no event input 51  */
#define EXTI1_SECCFGR2_SEC52_Pos (20U)
#define EXTI1_SECCFGR2_SEC52_Msk (0x1U << EXTI1_SECCFGR2_SEC52_Pos)         /*!< 0x00080000 */
#define EXTI1_SECCFGR2_SEC52     EXTI1_SECCFGR2_SEC52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI1_SECCFGR2_SEC53_Pos (21U)
#define EXTI1_SECCFGR2_SEC53_Msk (0x1U << EXTI1_SECCFGR2_SEC53_Pos)         /*!< 0x00200000 */
#define EXTI1_SECCFGR2_SEC53     EXTI1_SECCFGR2_SEC53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI1_SECCFGR2_SEC54_Pos (22U)
#define EXTI1_SECCFGR2_SEC54_Msk (0x1U << EXTI1_SECCFGR2_SEC54_Pos)         /*!< 0x00400000 */
#define EXTI1_SECCFGR2_SEC54     EXTI1_SECCFGR2_SEC54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI1_SECCFGR2_SEC55_Pos (23U)
#define EXTI1_SECCFGR2_SEC55_Msk (0x1U << EXTI1_SECCFGR2_SEC55_Pos)         /*!< 0x00800000 */
#define EXTI1_SECCFGR2_SEC55     EXTI1_SECCFGR2_SEC55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI1_SECCFGR2_SEC56_Pos (24U)
#define EXTI1_SECCFGR2_SEC56_Msk (0x1U << EXTI1_SECCFGR2_SEC56_Pos)         /*!< 0x01000000 */
#define EXTI1_SECCFGR2_SEC56     EXTI1_SECCFGR2_SEC56_Msk                   /*!< SEC/PRIV enable on event input 56 */
#define EXTI1_SECCFGR2_SEC57_Pos (25U)
#define EXTI1_SECCFGR2_SEC57_Msk (0x1U << EXTI1_SECCFGR2_SEC57_Pos)         /*!< 0x02000000 */
#define EXTI1_SECCFGR2_SEC57     EXTI1_SECCFGR2_SEC57_Msk                   /*!< SEC/PRIV enable on event input 57 */
/* no event input 58  */
#define EXTI1_SECCFGR2_SEC59_Pos (27U)
#define EXTI1_SECCFGR2_SEC59_Msk (0x1U << EXTI1_SECCFGR2_SEC59_Pos)         /*!< 0x08000000 */
#define EXTI1_SECCFGR2_SEC59     EXTI1_SECCFGR2_SEC59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI1_SECCFGR2_SEC60_Pos (28U)
#define EXTI1_SECCFGR2_SEC60_Msk (0x1U << EXTI1_SECCFGR2_SEC60_Pos)         /*!< 0x10000000 */
#define EXTI1_SECCFGR2_SEC60     EXTI1_SECCFGR2_SEC60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI1_SECCFGR2_SEC61_Pos (29U)
#define EXTI1_SECCFGR2_SEC61_Msk (0x1U << EXTI1_SECCFGR2_SEC61_Pos)         /*!< 0x20000000 */
#define EXTI1_SECCFGR2_SEC61     EXTI1_SECCFGR2_SEC61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI1_SECCFGR2_SEC62_Pos (30U)
#define EXTI1_SECCFGR2_SEC62_Msk (0x1U << EXTI1_SECCFGR2_SEC62_Pos)         /*!< 0x40000000 */
#define EXTI1_SECCFGR2_SEC62     EXTI1_SECCFGR2_SEC62_Msk                   /*!< SEC/PRIV enable on event input 62 */
/* no event input 63 */

/******************  Bit definition for EXTI1_PRIVCFGR2 register  ******************/
#define EXTI1_PRIVCFGR2_PRIV32_Pos  (0U)
#define EXTI1_PRIVCFGR2_PRIV32_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV32_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR2_PRIV32      EXTI1_PRIVCFGR2_PRIV32_Msk                    /*!< SEC/PRIV enable on event input 32 */
#define EXTI1_PRIVCFGR2_PRIV33_Pos  (1U)
#define EXTI1_PRIVCFGR2_PRIV33_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV33_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR2_PRIV33      EXTI1_PRIVCFGR2_PRIV33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI1_PRIVCFGR2_PRIV34_Pos  (2U)
#define EXTI1_PRIVCFGR2_PRIV34_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV34_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR2_PRIV34      EXTI1_PRIVCFGR2_PRIV34_Msk                    /*!< SEC/PRIV enable on event input 34 */
/* no event input 35  */
#define EXTI1_PRIVCFGR2_PRIV36_Pos  (4U)
#define EXTI1_PRIVCFGR2_PRIV36_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV36_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR2_PRIV36      EXTI1_PRIVCFGR2_PRIV36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI1_PRIVCFGR2_PRIV37_Pos  (5U)
#define EXTI1_PRIVCFGR2_PRIV37_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV37_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR2_PRIV37      EXTI1_PRIVCFGR2_PRIV37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI1_PRIVCFGR2_PRIV38_Pos  (6U)
#define EXTI1_PRIVCFGR2_PRIV38_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV38_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR2_PRIV38      EXTI1_PRIVCFGR2_PRIV38_Msk                    /*!< SEC/PRIV enable on event input 38 */
#define EXTI1_PRIVCFGR2_PRIV39_Pos  (7U)
#define EXTI1_PRIVCFGR2_PRIV39_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV39_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR2_PRIV39      EXTI1_PRIVCFGR2_PRIV39_Msk                    /*!< SEC/PRIV enable on event input 39 */
#define EXTI1_PRIVCFGR2_PRIV40_Pos  (8U)
#define EXTI1_PRIVCFGR2_PRIV40_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV40_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR2_PRIV40      EXTI1_PRIVCFGR2_PRIV40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI1_PRIVCFGR2_PRIV41_Pos  (9U)
#define EXTI1_PRIVCFGR2_PRIV41_Msk  (0x1U << EXTI1_PRIVCFGR2_PRIV41_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR2_PRIV41      EXTI1_PRIVCFGR2_PRIV41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI1_PRIVCFGR2_PRIV42_Pos (10U)
#define EXTI1_PRIVCFGR2_PRIV42_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV42_Pos)         /*!< 0x00000400 */
#define EXTI1_PRIVCFGR2_PRIV42     EXTI1_PRIVCFGR2_PRIV42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI1_PRIVCFGR2_PRIV43_Pos (11U)
#define EXTI1_PRIVCFGR2_PRIV43_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV43_Pos)         /*!< 0x00000800 */
#define EXTI1_PRIVCFGR2_PRIV43     EXTI1_PRIVCFGR2_PRIV43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI1_PRIVCFGR2_PRIV44_Pos (12U)
#define EXTI1_PRIVCFGR2_PRIV44_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV44_Pos)         /*!< 0x00001000 */
#define EXTI1_PRIVCFGR2_PRIV44     EXTI1_PRIVCFGR2_PRIV44_Msk                   /*!< SEC/PRIV enable on event input 44 */
#define EXTI1_PRIVCFGR2_PRIV45_Pos (13U)
#define EXTI1_PRIVCFGR2_PRIV45_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV45_Pos)         /*!< 0x00002000 */
#define EXTI1_PRIVCFGR2_PRIV45     EXTI1_PRIVCFGR2_PRIV45_Msk                   /*!< SEC/PRIV enable on event input 45 */
#define EXTI1_PRIVCFGR2_PRIV46_Pos (14U)
#define EXTI1_PRIVCFGR2_PRIV46_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV46_Pos)         /*!< 0x00004000 */
#define EXTI1_PRIVCFGR2_PRIV46     EXTI1_PRIVCFGR2_PRIV46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI1_PRIVCFGR2_PRIV47_Pos (15U)
#define EXTI1_PRIVCFGR2_PRIV47_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV47_Pos)         /*!< 0x00008000 */
#define EXTI1_PRIVCFGR2_PRIV47     EXTI1_PRIVCFGR2_PRIV47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI1_PRIVCFGR2_PRIV48_Pos (16U)
#define EXTI1_PRIVCFGR2_PRIV48_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV48_Pos)         /*!< 0x00010000 */
#define EXTI1_PRIVCFGR2_PRIV48     EXTI1_PRIVCFGR2_PRIV48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI1_PRIVCFGR2_PRIV49_Pos (17U)
#define EXTI1_PRIVCFGR2_PRIV49_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV49_Pos)         /*!< 0x00020000 */
#define EXTI1_PRIVCFGR2_PRIV49     EXTI1_PRIVCFGR2_PRIV49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI1_PRIVCFGR2_PRIV50_Pos (18U)
#define EXTI1_PRIVCFGR2_PRIV50_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV50_Pos)         /*!< 0x00040000 */
#define EXTI1_PRIVCFGR2_PRIV50     EXTI1_PRIVCFGR2_PRIV50_Msk                   /*!< SEC/PRIV enable on event input 50 */
/* no event input 51  */
#define EXTI1_PRIVCFGR2_PRIV52_Pos (20U)
#define EXTI1_PRIVCFGR2_PRIV52_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV52_Pos)         /*!< 0x00080000 */
#define EXTI1_PRIVCFGR2_PRIV52     EXTI1_PRIVCFGR2_PRIV52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI1_PRIVCFGR2_PRIV53_Pos (21U)
#define EXTI1_PRIVCFGR2_PRIV53_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV53_Pos)         /*!< 0x00200000 */
#define EXTI1_PRIVCFGR2_PRIV53     EXTI1_PRIVCFGR2_PRIV53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI1_PRIVCFGR2_PRIV54_Pos (22U)
#define EXTI1_PRIVCFGR2_PRIV54_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV54_Pos)         /*!< 0x00400000 */
#define EXTI1_PRIVCFGR2_PRIV54     EXTI1_PRIVCFGR2_PRIV54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI1_PRIVCFGR2_PRIV55_Pos (23U)
#define EXTI1_PRIVCFGR2_PRIV55_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV55_Pos)         /*!< 0x00800000 */
#define EXTI1_PRIVCFGR2_PRIV55     EXTI1_PRIVCFGR2_PRIV55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI1_PRIVCFGR2_PRIV56_Pos (24U)
#define EXTI1_PRIVCFGR2_PRIV56_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV56_Pos)         /*!< 0x01000000 */
#define EXTI1_PRIVCFGR2_PRIV56     EXTI1_PRIVCFGR2_PRIV56_Msk                   /*!< SEC/PRIV enable on event input 56 */
#define EXTI1_PRIVCFGR2_PRIV57_Pos (25U)
#define EXTI1_PRIVCFGR2_PRIV57_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV57_Pos)         /*!< 0x02000000 */
#define EXTI1_PRIVCFGR2_PRIV57     EXTI1_PRIVCFGR2_PRIV57_Msk                   /*!< SEC/PRIV enable on event input 57 */
/* no event input 58  */
#define EXTI1_PRIVCFGR2_PRIV59_Pos (27U)
#define EXTI1_PRIVCFGR2_PRIV59_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV59_Pos)         /*!< 0x08000000 */
#define EXTI1_PRIVCFGR2_PRIV59     EXTI1_PRIVCFGR2_PRIV59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI1_PRIVCFGR2_PRIV60_Pos (28U)
#define EXTI1_PRIVCFGR2_PRIV60_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV60_Pos)         /*!< 0x10000000 */
#define EXTI1_PRIVCFGR2_PRIV60     EXTI1_PRIVCFGR2_PRIV60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI1_PRIVCFGR2_PRIV61_Pos (29U)
#define EXTI1_PRIVCFGR2_PRIV61_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV61_Pos)         /*!< 0x20000000 */
#define EXTI1_PRIVCFGR2_PRIV61     EXTI1_PRIVCFGR2_PRIV61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI1_PRIVCFGR2_PRIV62_Pos (30U)
#define EXTI1_PRIVCFGR2_PRIV62_Msk (0x1U << EXTI1_PRIVCFGR2_PRIV62_Pos)         /*!< 0x40000000 */
#define EXTI1_PRIVCFGR2_PRIV62     EXTI1_PRIVCFGR2_PRIV62_Msk                   /*!< SEC/PRIV enable on event input 62 */
/* no event input 63 */

/******************  Bit definition for EXTI1_RTSR3 register  *******************/
#define EXTI1_RTSR3_RT64_Pos        (0U)
#define EXTI1_RTSR3_RT64_Msk        (0x1U << EXTI1_RTSR3_RT64_Pos)               /*!< 0x00000001 */
#define EXTI1_RTSR3_RT64            EXTI1_RTSR3_RT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT65_Pos        (1U)
#define EXTI1_RTSR3_RT65_Msk        (0x1U << EXTI1_RTSR3_RT65_Pos)               /*!< 0x00000002 */
#define EXTI1_RTSR3_RT65            EXTI1_RTSR3_RT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RTSR3_RT67_Pos        (3U)
#define EXTI1_RTSR3_RT67_Msk        (0x1U << EXTI1_RTSR3_RT67_Pos)               /*!< 0x00000008 */
#define EXTI1_RTSR3_RT67            EXTI1_RTSR3_RT67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT73_Pos        (9U)
#define EXTI1_RTSR3_RT73_Msk        (0x1U << EXTI1_RTSR3_RT73_Pos)               /*!< 0x00400000 */
#define EXTI1_RTSR3_RT73            EXTI1_RTSR3_RT73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RTSR3_RT83_Pos        (19U)
#define EXTI1_RTSR3_RT83_Msk        (0x1U << EXTI1_RTSR3_RT83_Pos)               /*!< 0x00080000 */
#define EXTI1_RTSR3_RT83            EXTI1_RTSR3_RT83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RTSR3_RT84_Pos        (20U)
#define EXTI1_RTSR3_RT84_Msk        (0x1U << EXTI1_RTSR3_RT84_Pos)               /*!< 0x00100000 */
#define EXTI1_RTSR3_RT84            EXTI1_RTSR3_RT84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_FTSR3 register  *******************/
#define EXTI1_FTSR3_FT64_Pos        (0U)
#define EXTI1_FTSR3_FT64_Msk        (0x1U << EXTI1_FTSR3_FT64_Pos)               /*!< 0x00000001 */
#define EXTI1_FTSR3_FT64            EXTI1_FTSR3_FT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT65_Pos        (1U)
#define EXTI1_FTSR3_FT65_Msk        (0x1U << EXTI1_FTSR3_FT65_Pos)               /*!< 0x00000002 */
#define EXTI1_FTSR3_FT65            EXTI1_FTSR3_FT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FTSR3_FT67_Pos        (3U)
#define EXTI1_FTSR3_FT67_Msk        (0x1U << EXTI1_FTSR3_FT67_Pos)               /*!< 0x00000008 */
#define EXTI1_FTSR3_FT67            EXTI1_FTSR3_FT67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT73_Pos        (9U)
#define EXTI1_FTSR3_FT73_Msk        (0x1U << EXTI1_FTSR3_FT73_Pos)               /*!< 0x00400000 */
#define EXTI1_FTSR3_FT73            EXTI1_FTSR3_FT73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FTSR3_FT83_Pos        (19U)
#define EXTI1_FTSR3_FT83_Msk        (0x1U << EXTI1_FTSR3_FT83_Pos)               /*!< 0x00080000 */
#define EXTI1_FTSR3_FT83            EXTI1_FTSR3_FT83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FTSR3_FT84_Pos        (20U)
#define EXTI1_FTSR3_FT84_Msk        (0x1U << EXTI1_FTSR3_FT84_Pos)               /*!< 0x00100000 */
#define EXTI1_FTSR3_FT84            EXTI1_FTSR3_FT84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_SWIER3 register  ******************/
#define EXTI1_SWIER3_SWI64_Pos    (0U)
#define EXTI1_SWIER3_SWI64_Msk    (0x1U << EXTI1_SWIER3_SWI64_Pos)           /*!< 0x00000001 */
#define EXTI1_SWIER3_SWI64        EXTI1_SWIER3_SWI64_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI65_Pos    (1U)
#define EXTI1_SWIER3_SWI65_Msk    (0x1U << EXTI1_SWIER3_SWI65_Pos)           /*!< 0x00000002 */
#define EXTI1_SWIER3_SWI65        EXTI1_SWIER3_SWI65_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI1_SWIER3_SWI67_Pos    (3U)
#define EXTI1_SWIER3_SWI67_Msk    (0x1U << EXTI1_SWIER3_SWI67_Pos)           /*!< 0x00000008 */
#define EXTI1_SWIER3_SWI67        EXTI1_SWIER3_SWI67_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI73_Pos    (9U)
#define EXTI1_SWIER3_SWI73_Msk    (0x1U << EXTI1_SWIER3_SWI73_Pos)           /*!< 0x00000200 */
#define EXTI1_SWIER3_SWI73        EXTI1_SWIER3_SWI73_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI1_SWIER3_SWI83_Pos    (19U)
#define EXTI1_SWIER3_SWI83_Msk    (0x1U << EXTI1_SWIER3_SWI83_Pos)           /*!< 0x00200000 */
#define EXTI1_SWIER3_SWI83        EXTI1_SWIER3_SWI83_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI1_SWIER3_SWI84_Pos    (20U)
#define EXTI1_SWIER3_SWI84_Msk    (0x1U << EXTI1_SWIER3_SWI84_Pos)           /*!< 0x00400000 */
#define EXTI1_SWIER3_SWI84        EXTI1_SWIER3_SWI84_Msk                     /*!< Software Interrupt on line 86 */

/******************  Bit definition for EXTI1_RPR3 register  *******************/
#define EXTI1_RPR3_RPIF64_Pos        (0U)
#define EXTI1_RPR3_RPIF64_Msk        (0x1U << EXTI1_RPR3_RPIF64_Pos)               /*!< 0x00000001 */
#define EXTI1_RPR3_RPIF64            EXTI1_RPR3_RPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF65_Pos        (1U)
#define EXTI1_RPR3_RPIF65_Msk        (0x1U << EXTI1_RPR3_RPIF65_Pos)               /*!< 0x00000002 */
#define EXTI1_RPR3_RPIF65            EXTI1_RPR3_RPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RPR3_RPIF67_Pos        (3U)
#define EXTI1_RPR3_RPIF67_Msk        (0x1U << EXTI1_RPR3_RPIF67_Pos)               /*!< 0x00000008 */
#define EXTI1_RPR3_RPIF67            EXTI1_RPR3_RPIF67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF73_Pos        (9U)
#define EXTI1_RPR3_RPIF73_Msk        (0x1U << EXTI1_RPR3_RPIF73_Pos)               /*!< 0x00400000 */
#define EXTI1_RPR3_RPIF73            EXTI1_RPR3_RPIF73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_RPR3_RPIF83_Pos        (19U)
#define EXTI1_RPR3_RPIF83_Msk        (0x1U << EXTI1_RPR3_RPIF83_Pos)               /*!< 0x00080000 */
#define EXTI1_RPR3_RPIF83            EXTI1_RPR3_RPIF83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_RPR3_RPIF84_Pos        (20U)
#define EXTI1_RPR3_RPIF84_Msk        (0x1U << EXTI1_RPR3_RPIF84_Pos)               /*!< 0x00100000 */
#define EXTI1_RPR3_RPIF84            EXTI1_RPR3_RPIF84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_FPR3 register  *******************/
#define EXTI1_FPR3_FPIF64_Pos        (0U)
#define EXTI1_FPR3_FPIF64_Msk        (0x1U << EXTI1_FPR3_FPIF64_Pos)               /*!< 0x00000001 */
#define EXTI1_FPR3_FPIF64            EXTI1_FPR3_FPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF65_Pos        (1U)
#define EXTI1_FPR3_FPIF65_Msk        (0x1U << EXTI1_FPR3_FPIF65_Pos)               /*!< 0x00000002 */
#define EXTI1_FPR3_FPIF65            EXTI1_FPR3_FPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FPR3_FPIF67_Pos        (3U)
#define EXTI1_FPR3_FPIF67_Msk        (0x1U << EXTI1_FPR3_FPIF67_Pos)               /*!< 0x00000008 */
#define EXTI1_FPR3_FPIF67            EXTI1_FPR3_FPIF67_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF73_Pos        (9U)
#define EXTI1_FPR3_FPIF73_Msk        (0x1U << EXTI1_FPR3_FPIF73_Pos)               /*!< 0x00400000 */
#define EXTI1_FPR3_FPIF73            EXTI1_FPR3_FPIF73_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI1_FPR3_FPIF83_Pos        (19U)
#define EXTI1_FPR3_FPIF83_Msk        (0x1U << EXTI1_FPR3_FPIF83_Pos)               /*!< 0x00080000 */
#define EXTI1_FPR3_FPIF83            EXTI1_FPR3_FPIF83_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI1_FPR3_FPIF84_Pos        (20U)
#define EXTI1_FPR3_FPIF84_Msk        (0x1U << EXTI1_FPR3_FPIF84_Pos)               /*!< 0x00100000 */
#define EXTI1_FPR3_FPIF84            EXTI1_FPR3_FPIF84_Msk                         /*!< Rising trigger event configuration bit of line 86 */

/******************  Bit definition for EXTI1_SECCFGR3  register  ******************/
#define EXTI1_SECCFGR3_SEC64_Pos  (0U)
#define EXTI1_SECCFGR3_SEC64_Msk  (0x1U << EXTI1_SECCFGR3_SEC64_Pos)          /*!< 0x00000001 */
#define EXTI1_SECCFGR3_SEC64      EXTI1_SECCFGR3_SEC64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI1_SECCFGR3_SEC65_Pos  (1U)
#define EXTI1_SECCFGR3_SEC65_Msk  (0x1U << EXTI1_SECCFGR3_SEC65_Pos)          /*!< 0x00000002 */
#define EXTI1_SECCFGR3_SEC65      EXTI1_SECCFGR3_SEC65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI1_SECCFGR3_SEC66_Pos  (2U)
#define EXTI1_SECCFGR3_SEC66_Msk  (0x1U << EXTI1_SECCFGR3_SEC66_Pos)          /*!< 0x00000004 */
#define EXTI1_SECCFGR3_SEC66      EXTI1_SECCFGR3_SEC66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI1_SECCFGR3_SEC67_Pos  (3U)
#define EXTI1_SECCFGR3_SEC67_Msk  (0x1U << EXTI1_SECCFGR3_SEC67_Pos)          /*!< 0x00000008 */
#define EXTI1_SECCFGR3_SEC67      EXTI1_SECCFGR3_SEC67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI1_SECCFGR3_SEC68_Pos  (4U)
#define EXTI1_SECCFGR3_SEC68_Msk  (0x1U << EXTI1_SECCFGR3_SEC68_Pos)          /*!< 0x00000010 */
#define EXTI1_SECCFGR3_SEC68      EXTI1_SECCFGR3_SEC68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI1_SECCFGR3_SEC69_Pos  (5U)
#define EXTI1_SECCFGR3_SEC69_Msk  (0x1U << EXTI1_SECCFGR3_SEC69_Pos)          /*!< 0x00000020 */
#define EXTI1_SECCFGR3_SEC69      EXTI1_SECCFGR3_SEC69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI1_SECCFGR3_SEC70_Pos  (6U)
#define EXTI1_SECCFGR3_SEC70_Msk  (0x1U << EXTI1_SECCFGR3_SEC70_Pos)          /*!< 0x00000040 */
#define EXTI1_SECCFGR3_SEC70      EXTI1_SECCFGR3_SEC70_Msk                    /*!< SEC/PRIV enable on event input 70 */
#define EXTI1_SECCFGR3_SEC71_Pos  (7U)
#define EXTI1_SECCFGR3_SEC71_Msk  (0x1U << EXTI1_SECCFGR3_SEC71_Pos)          /*!< 0x00000080 */
#define EXTI1_SECCFGR3_SEC71      EXTI1_SECCFGR3_SEC71_Msk                    /*!< SEC/PRIV enable on event input 71 */
#define EXTI1_SECCFGR3_SEC72_Pos  (8U)
#define EXTI1_SECCFGR3_SEC72_Msk  (0x1U << EXTI1_SECCFGR3_SEC72_Pos)          /*!< 0x00000100 */
#define EXTI1_SECCFGR3_SEC72      EXTI1_SECCFGR3_SEC72_Msk                    /*!< SEC/PRIV enable on event input 72 */
#define EXTI1_SECCFGR3_SEC73_Pos  (9U)
#define EXTI1_SECCFGR3_SEC73_Msk  (0x1U << EXTI1_SECCFGR3_SEC73_Pos)          /*!< 0x00000200 */
#define EXTI1_SECCFGR3_SEC73      EXTI1_SECCFGR3_SEC73_Msk                    /*!< SEC/PRIV enable on event input 73 */
#define EXTI1_SECCFGR3_SEC74_Pos  (10U)
#define EXTI1_SECCFGR3_SEC74_Msk  (0x1U << EXTI1_SECCFGR3_SEC74_Pos)           /*!< 0x00000400 */
#define EXTI1_SECCFGR3_SEC74      EXTI1_SECCFGR3_SEC74_Msk                     /*!< SEC/PRIV enable on event input 74 */
#define EXTI1_SECCFGR3_SEC75_Pos  (11U)
#define EXTI1_SECCFGR3_SEC75_Msk  (0x1U << EXTI1_SECCFGR3_SEC75_Pos)           /*!< 0x00000800 */
#define EXTI1_SECCFGR3_SEC75      EXTI1_SECCFGR3_SEC75_Msk                     /*!< SEC/PRIV enable on event input 75 */
#define EXTI1_SECCFGR3_SEC76_Pos  (12U)
#define EXTI1_SECCFGR3_SEC76_Msk  (0x1U << EXTI1_SECCFGR3_SEC76_Pos)           /*!< 0x00001000 */
#define EXTI1_SECCFGR3_SEC76      EXTI1_SECCFGR3_SEC76_Msk                     /*!< SEC/PRIV enable on event input 76 */
#define EXTI1_SECCFGR3_SEC77_Pos  (13U)
#define EXTI1_SECCFGR3_SEC77_Msk  (0x1U << EXTI1_SECCFGR3_SEC77_Pos)           /*!< 0x00002000 */
#define EXTI1_SECCFGR3_SEC77      EXTI1_SECCFGR3_SEC77_Msk                     /*!< SEC/PRIV enable on event input 77 */
#define EXTI1_SECCFGR3_SEC78_Pos  (14U)
#define EXTI1_SECCFGR3_SEC78_Msk  (0x1U << EXTI1_SECCFGR3_SEC78_Pos)           /*!< 0x00004000 */
#define EXTI1_SECCFGR3_SEC78      EXTI1_SECCFGR3_SEC78_Msk                     /*!< SEC/PRIV enable on event input 78 */
#define EXTI1_SECCFGR3_SEC79_Pos  (15U)
#define EXTI1_SECCFGR3_SEC79_Msk  (0x1U << EXTI1_SECCFGR3_SEC79_Pos)           /*!< 0x00008000 */
#define EXTI1_SECCFGR3_SEC79      EXTI1_SECCFGR3_SEC79_Msk                     /*!< SEC/PRIV enable on event input 79 */
#define EXTI1_SECCFGR3_SEC80_Pos  (16U)
#define EXTI1_SECCFGR3_SEC80_Msk  (0x1U << EXTI1_SECCFGR3_SEC80_Pos)           /*!< 0x00010000 */
#define EXTI1_SECCFGR3_SEC80      EXTI1_SECCFGR3_SEC80_Msk                     /*!< SEC/PRIV enable on event input 80 */
#define EXTI1_SECCFGR3_SEC81_Pos  (17U)
#define EXTI1_SECCFGR3_SEC81_Msk  (0x1U << EXTI1_SECCFGR3_SEC81_Pos)           /*!< 0x00020000 */
#define EXTI1_SECCFGR3_SEC81      EXTI1_SECCFGR3_SEC81_Msk                     /*!< SEC/PRIV enable on event input 81 */
#define EXTI1_SECCFGR3_SEC82_Pos  (18U)
#define EXTI1_SECCFGR3_SEC82_Msk  (0x1U << EXTI1_SECCFGR3_SEC82_Pos)           /*!< 0x00040000 */
#define EXTI1_SECCFGR3_SEC82      EXTI1_SECCFGR3_SEC82_Msk                     /*!< SEC/PRIV enable on event input 82 */
#define EXTI1_SECCFGR3_SEC83_Pos  (19U)
#define EXTI1_SECCFGR3_SEC83_Msk  (0x1U << EXTI1_SECCFGR3_SEC83_Pos)           /*!< 0x00080000 */
#define EXTI1_SECCFGR3_SEC83      EXTI1_SECCFGR3_SEC83_Msk                     /*!< SEC/PRIV enable on event input 83 */
#define EXTI1_SECCFGR3_SEC84_Pos  (20U)
#define EXTI1_SECCFGR3_SEC84_Msk  (0x1U << EXTI1_SECCFGR3_SEC84_Pos)           /*!< 0x00200000 */
#define EXTI1_SECCFGR3_SEC84      EXTI1_SECCFGR3_SEC84_Msk                     /*!< SEC/PRIV enable on event input 84 */
/* no event input 84 - 95 */

/******************  Bit definition for EXTI1_PRIVCFGR3 register  ******************/
#define EXTI1_PRIVCFGR3_PRIV64_Pos  (0U)
#define EXTI1_PRIVCFGR3_PRIV64_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV64_Pos)          /*!< 0x00000001 */
#define EXTI1_PRIVCFGR3_PRIV64      EXTI1_PRIVCFGR3_PRIV64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI1_PRIVCFGR3_PRIV65_Pos  (1U)
#define EXTI1_PRIVCFGR3_PRIV65_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV65_Pos)          /*!< 0x00000002 */
#define EXTI1_PRIVCFGR3_PRIV65      EXTI1_PRIVCFGR3_PRIV65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI1_PRIVCFGR3_PRIV66_Pos  (2U)
#define EXTI1_PRIVCFGR3_PRIV66_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV66_Pos)          /*!< 0x00000004 */
#define EXTI1_PRIVCFGR3_PRIV66      EXTI1_PRIVCFGR3_PRIV66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI1_PRIVCFGR3_PRIV67_Pos  (3U)
#define EXTI1_PRIVCFGR3_PRIV67_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV67_Pos)          /*!< 0x00000008 */
#define EXTI1_PRIVCFGR3_PRIV67      EXTI1_PRIVCFGR3_PRIV67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI1_PRIVCFGR3_PRIV68_Pos  (4U)
#define EXTI1_PRIVCFGR3_PRIV68_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV68_Pos)          /*!< 0x00000010 */
#define EXTI1_PRIVCFGR3_PRIV68      EXTI1_PRIVCFGR3_PRIV68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI1_PRIVCFGR3_PRIV69_Pos  (5U)
#define EXTI1_PRIVCFGR3_PRIV69_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV69_Pos)          /*!< 0x00000020 */
#define EXTI1_PRIVCFGR3_PRIV69      EXTI1_PRIVCFGR3_PRIV69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI1_PRIVCFGR3_PRIV70_Pos  (6U)
#define EXTI1_PRIVCFGR3_PRIV70_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV70_Pos)          /*!< 0x00000040 */
#define EXTI1_PRIVCFGR3_PRIV70      EXTI1_PRIVCFGR3_PRIV70_Msk                    /*!< SEC/PRIV enable on event input 70 */
#define EXTI1_PRIVCFGR3_PRIV71_Pos  (7U)
#define EXTI1_PRIVCFGR3_PRIV71_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV71_Pos)          /*!< 0x00000080 */
#define EXTI1_PRIVCFGR3_PRIV71      EXTI1_PRIVCFGR3_PRIV71_Msk                    /*!< SEC/PRIV enable on event input 71 */
#define EXTI1_PRIVCFGR3_PRIV72_Pos  (8U)
#define EXTI1_PRIVCFGR3_PRIV72_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV72_Pos)          /*!< 0x00000100 */
#define EXTI1_PRIVCFGR3_PRIV72      EXTI1_PRIVCFGR3_PRIV72_Msk                    /*!< SEC/PRIV enable on event input 72 */
#define EXTI1_PRIVCFGR3_PRIV73_Pos  (9U)
#define EXTI1_PRIVCFGR3_PRIV73_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV73_Pos)          /*!< 0x00000200 */
#define EXTI1_PRIVCFGR3_PRIV73      EXTI1_PRIVCFGR3_PRIV73_Msk                    /*!< SEC/PRIV enable on event input 73 */
#define EXTI1_PRIVCFGR3_PRIV74_Pos  (10U)
#define EXTI1_PRIVCFGR3_PRIV74_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV74_Pos)           /*!< 0x00000400 */
#define EXTI1_PRIVCFGR3_PRIV74      EXTI1_PRIVCFGR3_PRIV74_Msk                     /*!< SEC/PRIV enable on event input 74 */
#define EXTI1_PRIVCFGR3_PRIV75_Pos  (11U)
#define EXTI1_PRIVCFGR3_PRIV75_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV75_Pos)           /*!< 0x00000800 */
#define EXTI1_PRIVCFGR3_PRIV75      EXTI1_PRIVCFGR3_PRIV75_Msk                     /*!< SEC/PRIV enable on event input 75 */
#define EXTI1_PRIVCFGR3_PRIV76_Pos  (12U)
#define EXTI1_PRIVCFGR3_PRIV76_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV76_Pos)           /*!< 0x00001000 */
#define EXTI1_PRIVCFGR3_PRIV76      EXTI1_PRIVCFGR3_PRIV76_Msk                     /*!< SEC/PRIV enable on event input 76 */
#define EXTI1_PRIVCFGR3_PRIV77_Pos  (13U)
#define EXTI1_PRIVCFGR3_PRIV77_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV77_Pos)           /*!< 0x00002000 */
#define EXTI1_PRIVCFGR3_PRIV77      EXTI1_PRIVCFGR3_PRIV77_Msk                     /*!< SEC/PRIV enable on event input 77 */
#define EXTI1_PRIVCFGR3_PRIV78_Pos  (14U)
#define EXTI1_PRIVCFGR3_PRIV78_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV78_Pos)           /*!< 0x00004000 */
#define EXTI1_PRIVCFGR3_PRIV78      EXTI1_PRIVCFGR3_PRIV78_Msk                     /*!< SEC/PRIV enable on event input 78 */
#define EXTI1_PRIVCFGR3_PRIV79_Pos  (15U)
#define EXTI1_PRIVCFGR3_PRIV79_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV79_Pos)           /*!< 0x00008000 */
#define EXTI1_PRIVCFGR3_PRIV79      EXTI1_PRIVCFGR3_PRIV79_Msk                     /*!< SEC/PRIV enable on event input 79 */
#define EXTI1_PRIVCFGR3_PRIV80_Pos  (16U)
#define EXTI1_PRIVCFGR3_PRIV80_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV80_Pos)           /*!< 0x00010000 */
#define EXTI1_PRIVCFGR3_PRIV80      EXTI1_PRIVCFGR3_PRIV80_Msk                     /*!< SEC/PRIV enable on event input 80 */
#define EXTI1_PRIVCFGR3_PRIV81_Pos  (17U)
#define EXTI1_PRIVCFGR3_PRIV81_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV81_Pos)           /*!< 0x00020000 */
#define EXTI1_PRIVCFGR3_PRIV81      EXTI1_PRIVCFGR3_PRIV81_Msk                     /*!< SEC/PRIV enable on event input 81 */
#define EXTI1_PRIVCFGR3_PRIV82_Pos  (18U)
#define EXTI1_PRIVCFGR3_PRIV82_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV82_Pos)           /*!< 0x00040000 */
#define EXTI1_PRIVCFGR3_PRIV82      EXTI1_PRIVCFGR3_PRIV82_Msk                     /*!< SEC/PRIV enable on event input 82 */
#define EXTI1_PRIVCFGR3_PRIV83_Pos  (19U)
#define EXTI1_PRIVCFGR3_PRIV83_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV83_Pos)           /*!< 0x00080000 */
#define EXTI1_PRIVCFGR3_PRIV83      EXTI1_PRIVCFGR3_PRIV83_Msk                     /*!< SEC/PRIV enable on event input 83 */
#define EXTI1_PRIVCFGR3_PRIV84_Pos  (20U)
#define EXTI1_PRIVCFGR3_PRIV84_Msk  (0x1U << EXTI1_PRIVCFGR3_PRIV84_Pos)           /*!< 0x00200000 */
#define EXTI1_PRIVCFGR3_PRIV84      EXTI1_PRIVCFGR3_PRIV84_Msk                     /*!< SEC/PRIV enable on event input 84 */
/* no event input 84 - 95 */

/* Edu: common definition for EXTI1 EXTI2 */
/*****************  Bit definition for EXTI_EXTICR1, EXTICR[0] register  ***************/
#define EXTI_EXTICR1_EXTI0_Pos        (0U)
#define EXTI_EXTICR1_EXTI0_Msk        (0xFFU << EXTI_EXTICR1_EXTI0_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR1_EXTI0            EXTI_EXTICR1_EXTI0_Msk                   /*!<EXTI 0 configuration */
#define EXTI_EXTICR1_EXTI1_Pos        (8U)
#define EXTI_EXTICR1_EXTI1_Msk        (0xFFU << EXTI_EXTICR1_EXTI1_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR1_EXTI1            EXTI_EXTICR1_EXTI1_Msk                   /*!<EXTI 1 configuration */
#define EXTI_EXTICR1_EXTI2_Pos        (16U)
#define EXTI_EXTICR1_EXTI2_Msk        (0xFFU << EXTI_EXTICR1_EXTI2_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR1_EXTI2            EXTI_EXTICR1_EXTI2_Msk                   /*!<EXTI 2 configuration */
#define EXTI_EXTICR1_EXTI3_Pos        (24U)
#define EXTI_EXTICR1_EXTI3_Msk        (0xFFU << EXTI_EXTICR1_EXTI3_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR1_EXTI3            EXTI_EXTICR1_EXTI3_Msk                   /*!<EXTI 3 configuration */
/**
  * @brief   EXTI0 configuration
  */
#define EXTI_EXTICR1_EXTI0_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PA[0] pin */
#define EXTI_EXTICR1_EXTI0_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PB[0] pin */
#define EXTI_EXTICR1_EXTI0_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PC[0] pin */
#define EXTI_EXTICR1_EXTI0_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PD[0] pin */
#define EXTI_EXTICR1_EXTI0_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PE[0] pin */
#define EXTI_EXTICR1_EXTI0_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PF[0] pin */
#define EXTI_EXTICR1_EXTI0_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PG[0] pin */
#define EXTI_EXTICR1_EXTI0_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PH[0] pin */
#define EXTI_EXTICR1_EXTI0_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PI[0] pin */
#define EXTI_EXTICR1_EXTI0_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PJ[0] pin */
#define EXTI_EXTICR1_EXTI0_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PK[0] pin */
#define EXTI_EXTICR1_EXTI0_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI0_Pos)         /*!<PZ[0] pin */

/**
  * @brief   EXTI1 configuration
  */
#define EXTI_EXTICR1_EXTI1_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PA[1] pin */
#define EXTI_EXTICR1_EXTI1_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PB[1] pin */
#define EXTI_EXTICR1_EXTI1_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PC[1] pin */
#define EXTI_EXTICR1_EXTI1_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PD[1] pin */
#define EXTI_EXTICR1_EXTI1_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PE[1] pin */
#define EXTI_EXTICR1_EXTI1_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PF[1] pin */
#define EXTI_EXTICR1_EXTI1_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PG[1] pin */
#define EXTI_EXTICR1_EXTI1_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PH[1] pin */
#define EXTI_EXTICR1_EXTI1_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PI[1] pin */
#define EXTI_EXTICR1_EXTI1_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PJ[1] pin */
#define EXTI_EXTICR1_EXTI1_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PK[1] pin */
#define EXTI_EXTICR1_EXTI1_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI1_Pos)         /*!<PZ[1] pin */


/**
  * @brief   EXTI2 configuration
  */
#define EXTI_EXTICR1_EXTI2_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PA[2] pin */
#define EXTI_EXTICR1_EXTI2_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PB[2] pin */
#define EXTI_EXTICR1_EXTI2_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PC[2] pin */
#define EXTI_EXTICR1_EXTI2_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PD[2] pin */
#define EXTI_EXTICR1_EXTI2_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PE[2] pin */
#define EXTI_EXTICR1_EXTI2_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PF[2] pin */
#define EXTI_EXTICR1_EXTI2_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PG[2] pin */
#define EXTI_EXTICR1_EXTI2_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PH[2] pin */
#define EXTI_EXTICR1_EXTI2_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PI[2] pin */
#define EXTI_EXTICR1_EXTI2_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PJ[2] pin */
#define EXTI_EXTICR1_EXTI2_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PK[2] pin */
#define EXTI_EXTICR1_EXTI2_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI2_Pos)         /*!<PZ[2] pin */

/**
  * @brief   EXTI3 configuration
  */
#define EXTI_EXTICR1_EXTI3_PA         ((0x00000000U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PA[3] pin */
#define EXTI_EXTICR1_EXTI3_PB         ((0x00000001U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PB[3] pin */
#define EXTI_EXTICR1_EXTI3_PC         ((0x00000002U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PC[3] pin */
#define EXTI_EXTICR1_EXTI3_PD         ((0x00000003U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PD[3] pin */
#define EXTI_EXTICR1_EXTI3_PE         ((0x00000004U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PE[3] pin */
#define EXTI_EXTICR1_EXTI3_PF         ((0x00000005U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PF[3] pin */
#define EXTI_EXTICR1_EXTI3_PG         ((0x00000006U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PG[3] pin */
#define EXTI_EXTICR1_EXTI3_PH         ((0x00000007U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PH[3] pin */
#define EXTI_EXTICR1_EXTI3_PI         ((0x00000008U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PI[3] pin */
#define EXTI_EXTICR1_EXTI3_PJ         ((0x00000009U)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PJ[3] pin */
#define EXTI_EXTICR1_EXTI3_PK         ((0x0000000AU)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PK[3] pin */
#define EXTI_EXTICR1_EXTI3_PZ         ((0x0000000BU)<<EXTI_EXTICR1_EXTI3_Pos)         /*!<PZ[3] pin */

/*****************  Bit definition for EXTI_EXTICR2 register  ***************/
#define EXTI_EXTICR2_EXTI4_Pos        (0U)
#define EXTI_EXTICR2_EXTI4_Msk        (0xFFU << EXTI_EXTICR2_EXTI4_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR2_EXTI4            EXTI_EXTICR2_EXTI4_Msk                   /*!<EXTI 4 configuration */
#define EXTI_EXTICR2_EXTI5_Pos        (8U)
#define EXTI_EXTICR2_EXTI5_Msk        (0xFFU << EXTI_EXTICR2_EXTI5_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR2_EXTI5            EXTI_EXTICR2_EXTI5_Msk                   /*!<EXTI 5 configuration */
#define EXTI_EXTICR2_EXTI6_Pos        (16U)
#define EXTI_EXTICR2_EXTI6_Msk        (0xFFU << EXTI_EXTICR2_EXTI6_Pos)        /*!< 0x00FF0000 */
#define EXTI_EXTICR2_EXTI6            EXTI_EXTICR2_EXTI6_Msk                   /*!<EXTI 6 configuration */
#define EXTI_EXTICR2_EXTI7_Pos        (24U)
#define EXTI_EXTICR2_EXTI7_Msk        (0xFFU << EXTI_EXTICR2_EXTI7_Pos)        /*!< 0xFF000000 */
#define EXTI_EXTICR2_EXTI7            EXTI_EXTICR2_EXTI7_Msk                   /*!<EXTI 7 configuration */

/**
  * @brief   EXTI4 configuration
  */
#define EXTI_EXTICR2_EXTI4_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PA[4] pin */
#define EXTI_EXTICR2_EXTI4_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PB[4] pin */
#define EXTI_EXTICR2_EXTI4_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PC[4] pin */
#define EXTI_EXTICR2_EXTI4_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PD[4] pin */
#define EXTI_EXTICR2_EXTI4_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PE[4] pin */
#define EXTI_EXTICR2_EXTI4_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PF[4] pin */
#define EXTI_EXTICR2_EXTI4_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PG[4] pin */
#define EXTI_EXTICR2_EXTI4_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PH[4] pin */
#define EXTI_EXTICR2_EXTI4_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PI[4] pin */
#define EXTI_EXTICR2_EXTI4_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PJ[4] pin */
#define EXTI_EXTICR2_EXTI4_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PK[4] pin */
#define EXTI_EXTICR2_EXTI4_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI4_Pos)                   /*!<PZ[4] pin */

/**
  * @brief   EXTI5 configuration
  */
#define EXTI_EXTICR2_EXTI5_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PA[5] pin */
#define EXTI_EXTICR2_EXTI5_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PB[5] pin */
#define EXTI_EXTICR2_EXTI5_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PC[5] pin */
#define EXTI_EXTICR2_EXTI5_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PD[5] pin */
#define EXTI_EXTICR2_EXTI5_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PE[5] pin */
#define EXTI_EXTICR2_EXTI5_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PF[5] pin */
#define EXTI_EXTICR2_EXTI5_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PG[5] pin */
#define EXTI_EXTICR2_EXTI5_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PH[5] pin */
#define EXTI_EXTICR2_EXTI5_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PI[5] pin */
#define EXTI_EXTICR2_EXTI5_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PJ[5] pin */
#define EXTI_EXTICR2_EXTI5_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PK[5] pin */
#define EXTI_EXTICR2_EXTI5_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI5_Pos)         /*!<PZ[5] pin */

/**
  * @brief   EXTI6 configuration
  */
#define EXTI_EXTICR2_EXTI6_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PA[6] pin */
#define EXTI_EXTICR2_EXTI6_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PB[6] pin */
#define EXTI_EXTICR2_EXTI6_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PC[6] pin */
#define EXTI_EXTICR2_EXTI6_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PD[6] pin */
#define EXTI_EXTICR2_EXTI6_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PE[6] pin */
#define EXTI_EXTICR2_EXTI6_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PF[6] pin */
#define EXTI_EXTICR2_EXTI6_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PG[6] pin */
#define EXTI_EXTICR2_EXTI6_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PH[6] pin */
#define EXTI_EXTICR2_EXTI6_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PI[6] pin */
#define EXTI_EXTICR2_EXTI6_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PJ[6] pin */
#define EXTI_EXTICR2_EXTI6_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PK[6] pin */
#define EXTI_EXTICR2_EXTI6_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI6_Pos)         /*!<PZ[6] pin */

/**
  * @brief   EXTI7 configuration
  */
#define EXTI_EXTICR2_EXTI7_PA         ((0x00000000U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PA[7] pin */
#define EXTI_EXTICR2_EXTI7_PB         ((0x00000001U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PB[7] pin */
#define EXTI_EXTICR2_EXTI7_PC         ((0x00000002U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PC[7] pin */
#define EXTI_EXTICR2_EXTI7_PD         ((0x00000003U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PD[7] pin */
#define EXTI_EXTICR2_EXTI7_PE         ((0x00000004U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PE[7] pin */
#define EXTI_EXTICR2_EXTI7_PF         ((0x00000005U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PF[7] pin */
#define EXTI_EXTICR2_EXTI7_PG         ((0x00000006U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PG[7] pin */
#define EXTI_EXTICR2_EXTI7_PH         ((0x00000007U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PH[7] pin */
#define EXTI_EXTICR2_EXTI7_PI         ((0x00000008U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PI[7] pin */
#define EXTI_EXTICR2_EXTI7_PJ         ((0x00000009U)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PJ[7] pin */
#define EXTI_EXTICR2_EXTI7_PK         ((0x0000000AU)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PK[7] pin */
#define EXTI_EXTICR2_EXTI7_PZ         ((0x0000000BU)<<EXTI_EXTICR2_EXTI7_Pos)         /*!<PZ[7] pin */

/*****************  Bit definition for EXTI_EXTICR3 register  ***************/
#define EXTI_EXTICR3_EXTI8_Pos        (0U)
#define EXTI_EXTICR3_EXTI8_Msk        (0xFFU << EXTI_EXTICR3_EXTI8_Pos)        /*!< 0x000000FF */
#define EXTI_EXTICR3_EXTI8            EXTI_EXTICR3_EXTI8_Msk                   /*!<EXTI 8 configuration */
#define EXTI_EXTICR3_EXTI9_Pos        (8U)
#define EXTI_EXTICR3_EXTI9_Msk        (0xFFU << EXTI_EXTICR3_EXTI9_Pos)        /*!< 0x0000FF00 */
#define EXTI_EXTICR3_EXTI9            EXTI_EXTICR3_EXTI9_Msk                   /*!<EXTI 9 configuration */
#define EXTI_EXTICR3_EXTI10_Pos       (16U)
#define EXTI_EXTICR3_EXTI10_Msk       (0xFFU << EXTI_EXTICR3_EXTI10_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR3_EXTI10           EXTI_EXTICR3_EXTI10_Msk                  /*!<EXTI 10 configuration */
#define EXTI_EXTICR3_EXTI11_Pos       (24U)
#define EXTI_EXTICR3_EXTI11_Msk       (0xFFU << EXTI_EXTICR3_EXTI11_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR3_EXTI11           EXTI_EXTICR3_EXTI11_Msk                  /*!<EXTI 11 configuration */

/**
  * @brief   EXTI8 configuration
  */
#define EXTI_EXTICR3_EXTI8_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PA[8] pin */
#define EXTI_EXTICR3_EXTI8_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PB[8] pin */
#define EXTI_EXTICR3_EXTI8_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PC[8] pin */
#define EXTI_EXTICR3_EXTI8_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PD[8] pin */
#define EXTI_EXTICR3_EXTI8_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PE[8] pin */
#define EXTI_EXTICR3_EXTI8_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PF[8] pin */
#define EXTI_EXTICR3_EXTI8_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PG[8] pin */
#define EXTI_EXTICR3_EXTI8_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PH[8] pin */
#define EXTI_EXTICR3_EXTI8_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PI[8] pin */
#define EXTI_EXTICR3_EXTI8_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PJ[8] pin */
/* No PK on EXTI8 */
#define EXTI_EXTICR3_EXTI8_PZ         ((0x0000000BU)<<EXTI_EXTICR3_EXTI8_Pos)         /*!<PZ[8] pin */

/**
  * @brief   EXTI9 configuration
  */
#define EXTI_EXTICR3_EXTI9_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PA[9] pin */
#define EXTI_EXTICR3_EXTI9_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PB[9] pin */
#define EXTI_EXTICR3_EXTI9_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PC[9] pin */
#define EXTI_EXTICR3_EXTI9_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PD[9] pin */
#define EXTI_EXTICR3_EXTI9_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PE[9] pin */
#define EXTI_EXTICR3_EXTI9_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PF[9] pin */
#define EXTI_EXTICR3_EXTI9_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PG[9] pin */
#define EXTI_EXTICR3_EXTI9_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PH[9] pin */
#define EXTI_EXTICR3_EXTI9_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PI[9] pin */
#define EXTI_EXTICR3_EXTI9_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PJ[9] pin */
/* No PK on EXTI9 */
#define EXTI_EXTICR3_EXTI9_PZ         ((0x0000000BU)<<EXTI_EXTICR3_EXTI9_Pos)         /*!<PZ[9] pin */

/**
  * @brief   EXTI10 configuration
  */
#define EXTI_EXTICR3_EXTI10_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PA[10] pin */
#define EXTI_EXTICR3_EXTI10_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PB[10] pin */
#define EXTI_EXTICR3_EXTI10_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PC[10] pin */
#define EXTI_EXTICR3_EXTI10_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PD[10] pin */
#define EXTI_EXTICR3_EXTI10_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PE[10] pin */
#define EXTI_EXTICR3_EXTI10_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PF[10] pin */
#define EXTI_EXTICR3_EXTI10_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PG[10] pin */
#define EXTI_EXTICR3_EXTI10_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PH[10] pin */
#define EXTI_EXTICR3_EXTI10_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PI[10] pin */
#define EXTI_EXTICR3_EXTI10_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI10_Pos)         /*!<PJ[10] pin */
/* No PK on EXTI10 */
/* No PZ on EXTI10 */

/**
  * @brief   EXTI11 configuration
  */
#define EXTI_EXTICR3_EXTI11_PA         ((0x00000000U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PA[11] pin */
#define EXTI_EXTICR3_EXTI11_PB         ((0x00000001U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PB[11] pin */
#define EXTI_EXTICR3_EXTI11_PC         ((0x00000002U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PC[11] pin */
#define EXTI_EXTICR3_EXTI11_PD         ((0x00000003U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PD[11] pin */
#define EXTI_EXTICR3_EXTI11_PE         ((0x00000004U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PE[11] pin */
#define EXTI_EXTICR3_EXTI11_PF         ((0x00000005U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PF[11] pin */
#define EXTI_EXTICR3_EXTI11_PG         ((0x00000006U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PG[11] pin */
#define EXTI_EXTICR3_EXTI11_PH         ((0x00000007U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PH[11] pin */
#define EXTI_EXTICR3_EXTI11_PI         ((0x00000008U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PI[11] pin */
#define EXTI_EXTICR3_EXTI11_PJ         ((0x00000009U)<<EXTI_EXTICR3_EXTI11_Pos)         /*!<PJ[11] pin */
/* No PK on EXTI11 */
/* No PZ on EXTI11 */

/*****************  Bit definition for EXTI_EXTICR4 register  ***************/
#define EXTI_EXTICR4_EXTI12_Pos       (0U)
#define EXTI_EXTICR4_EXTI12_Msk       (0xFFU << EXTI_EXTICR4_EXTI12_Pos)       /*!< 0x000000FF */
#define EXTI_EXTICR4_EXTI12           EXTI_EXTICR4_EXTI12_Msk                  /*!<EXTI 12 configuration */
#define EXTI_EXTICR4_EXTI13_Pos       (8U)
#define EXTI_EXTICR4_EXTI13_Msk       (0xFFU << EXTI_EXTICR4_EXTI13_Pos)       /*!< 0x0000FF00 */
#define EXTI_EXTICR4_EXTI13           EXTI_EXTICR4_EXTI13_Msk                  /*!<EXTI 13 configuration */
#define EXTI_EXTICR4_EXTI14_Pos       (16U)
#define EXTI_EXTICR4_EXTI14_Msk       (0xFFU << EXTI_EXTICR4_EXTI14_Pos)       /*!< 0x00FF0000 */
#define EXTI_EXTICR4_EXTI14           EXTI_EXTICR4_EXTI14_Msk                  /*!<EXTI 14 configuration */
#define EXTI_EXTICR4_EXTI15_Pos       (24U)
#define EXTI_EXTICR4_EXTI15_Msk       (0xFFU << EXTI_EXTICR4_EXTI15_Pos)       /*!< 0xFF000000 */
#define EXTI_EXTICR4_EXTI15           EXTI_EXTICR4_EXTI15_Msk                  /*!<EXTI 15 configuration */

/**
  * @brief   EXTI12 configuration
  */
#define EXTI_EXTICR4_EXTI12_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PA[12] pin */
#define EXTI_EXTICR4_EXTI12_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PB[12] pin */
#define EXTI_EXTICR4_EXTI12_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PC[12] pin */
#define EXTI_EXTICR4_EXTI12_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PD[12] pin */
#define EXTI_EXTICR4_EXTI12_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PE[12] pin */
#define EXTI_EXTICR4_EXTI12_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PF[12] pin */
#define EXTI_EXTICR4_EXTI12_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PG[12] pin */
#define EXTI_EXTICR4_EXTI12_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PH[12] pin */
#define EXTI_EXTICR4_EXTI12_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PI[12] pin */
#define EXTI_EXTICR4_EXTI12_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI12_Pos)         /*!<PJ[12] pin */
/* No PK on EXTI12 */
/* No PZ on EXTI12 */

/**
  * @brief   EXTI13 configuration
  */
#define EXTI_EXTICR4_EXTI13_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PA[13] pin */
#define EXTI_EXTICR4_EXTI13_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PB[13] pin */
#define EXTI_EXTICR4_EXTI13_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PC[13] pin */
#define EXTI_EXTICR4_EXTI13_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PD[13] pin */
#define EXTI_EXTICR4_EXTI13_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PE[13] pin */
#define EXTI_EXTICR4_EXTI13_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PF[13] pin */
#define EXTI_EXTICR4_EXTI13_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PG[13] pin */
#define EXTI_EXTICR4_EXTI13_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PH[13] pin */
#define EXTI_EXTICR4_EXTI13_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PI[13] pin */
#define EXTI_EXTICR4_EXTI13_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI13_Pos)         /*!<PJ[13] pin */
/* No PK on EXTI13 */
/* No PZ on EXTI13 */

/**
  * @brief   EXTI14 configuration
  */
#define EXTI_EXTICR4_EXTI14_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PA[14] pin */
#define EXTI_EXTICR4_EXTI14_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PB[14] pin */
#define EXTI_EXTICR4_EXTI14_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PC[14] pin */
#define EXTI_EXTICR4_EXTI14_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PD[14] pin */
#define EXTI_EXTICR4_EXTI14_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PE[14] pin */
#define EXTI_EXTICR4_EXTI14_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PF[14] pin */
#define EXTI_EXTICR4_EXTI14_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PG[14] pin */
#define EXTI_EXTICR4_EXTI14_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PH[14] pin */
#define EXTI_EXTICR4_EXTI14_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PI[14] pin */
#define EXTI_EXTICR4_EXTI14_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI14_Pos)         /*!<PJ[14] pin */
/* No PK on EXTI14 */
/* No PZ on EXTI14 */

/**
  * @brief   EXTI15 configuration
  */
#define EXTI_EXTICR4_EXTI15_PA         ((0x00000000U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PA[15] pin */
#define EXTI_EXTICR4_EXTI15_PB         ((0x00000001U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PB[15] pin */
#define EXTI_EXTICR4_EXTI15_PC         ((0x00000002U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PC[15] pin */
#define EXTI_EXTICR4_EXTI15_PD         ((0x00000003U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PD[15] pin */
#define EXTI_EXTICR4_EXTI15_PE         ((0x00000004U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PE[15] pin */
#define EXTI_EXTICR4_EXTI15_PF         ((0x00000005U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PF[15] pin */
#define EXTI_EXTICR4_EXTI15_PG         ((0x00000006U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PG[15] pin */
#define EXTI_EXTICR4_EXTI15_PH         ((0x00000007U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PH[15] pin */
#define EXTI_EXTICR4_EXTI15_PI         ((0x00000008U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PI[15] pin */
#define EXTI_EXTICR4_EXTI15_PJ         ((0x00000009U)<<EXTI_EXTICR4_EXTI15_Pos)         /*!<PJ[15] pin */
/* No PK on EXTI15 */
/* No PZ on EXTI15 */

/******************  Bit definition for EXTI_LOCKR register  ***********************/
#define EXTI_LOCKR_GLOCK_Pos         (0U)
#define EXTI_LOCKR_GLOCK_Msk         (0x1U << EXTI_LOCKR_GLOCK_Pos)
#define EXTI_LOCKR_GLOCK             EXTI_LOCKR_GLOCK_Msk                        /*!< global security locked */

/*******************  Bit definition for EXTI1 CmIMR1 register  *******************/
#define EXTI1_IMR1_IM0_Pos          (0U)
#define EXTI1_IMR1_IM0_Msk          (0x1U << EXTI1_IMR1_IM0_Pos)                 /*!< 0x00000001 */
#define EXTI1_IMR1_IM0              EXTI1_IMR1_IM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI1_IMR1_IM1_Pos          (1U)
#define EXTI1_IMR1_IM1_Msk          (0x1U << EXTI1_IMR1_IM1_Pos)                 /*!< 0x00000002 */
#define EXTI1_IMR1_IM1              EXTI1_IMR1_IM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI1_IMR1_IM2_Pos          (2U)
#define EXTI1_IMR1_IM2_Msk          (0x1U << EXTI1_IMR1_IM2_Pos)                 /*!< 0x00000004 */
#define EXTI1_IMR1_IM2              EXTI1_IMR1_IM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI1_IMR1_IM3_Pos          (3U)
#define EXTI1_IMR1_IM3_Msk          (0x1U << EXTI1_IMR1_IM3_Pos)                 /*!< 0x00000008 */
#define EXTI1_IMR1_IM3              EXTI1_IMR1_IM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI1_IMR1_IM4_Pos          (4U)
#define EXTI1_IMR1_IM4_Msk          (0x1U << EXTI1_IMR1_IM4_Pos)                 /*!< 0x00000010 */
#define EXTI1_IMR1_IM4              EXTI1_IMR1_IM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI1_IMR1_IM5_Pos          (5U)
#define EXTI1_IMR1_IM5_Msk          (0x1U << EXTI1_IMR1_IM5_Pos)                 /*!< 0x00000020 */
#define EXTI1_IMR1_IM5              EXTI1_IMR1_IM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI1_IMR1_IM6_Pos          (6U)
#define EXTI1_IMR1_IM6_Msk          (0x1U << EXTI1_IMR1_IM6_Pos)                 /*!< 0x00000040 */
#define EXTI1_IMR1_IM6              EXTI1_IMR1_IM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI1_IMR1_IM7_Pos          (7U)
#define EXTI1_IMR1_IM7_Msk          (0x1U << EXTI1_IMR1_IM7_Pos)                 /*!< 0x00000080 */
#define EXTI1_IMR1_IM7              EXTI1_IMR1_IM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI1_IMR1_IM8_Pos          (8U)
#define EXTI1_IMR1_IM8_Msk          (0x1U << EXTI1_IMR1_IM8_Pos)                 /*!< 0x00000100 */
#define EXTI1_IMR1_IM8              EXTI1_IMR1_IM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI1_IMR1_IM9_Pos          (9U)
#define EXTI1_IMR1_IM9_Msk          (0x1U << EXTI1_IMR1_IM9_Pos)                 /*!< 0x00000200 */
#define EXTI1_IMR1_IM9              EXTI1_IMR1_IM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI1_IMR1_IM10_Pos         (10U)
#define EXTI1_IMR1_IM10_Msk         (0x1U << EXTI1_IMR1_IM10_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR1_IM10             EXTI1_IMR1_IM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI1_IMR1_IM11_Pos         (11U)
#define EXTI1_IMR1_IM11_Msk         (0x1U << EXTI1_IMR1_IM11_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR1_IM11             EXTI1_IMR1_IM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI1_IMR1_IM12_Pos         (12U)
#define EXTI1_IMR1_IM12_Msk         (0x1U << EXTI1_IMR1_IM12_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR1_IM12             EXTI1_IMR1_IM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI1_IMR1_IM13_Pos         (13U)
#define EXTI1_IMR1_IM13_Msk         (0x1U << EXTI1_IMR1_IM13_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR1_IM13             EXTI1_IMR1_IM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI1_IMR1_IM14_Pos         (14U)
#define EXTI1_IMR1_IM14_Msk         (0x1U << EXTI1_IMR1_IM14_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR1_IM14             EXTI1_IMR1_IM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI1_IMR1_IM15_Pos         (15U)
#define EXTI1_IMR1_IM15_Msk         (0x1U << EXTI1_IMR1_IM15_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR1_IM15             EXTI1_IMR1_IM15_Msk                          /*!< Interrupt Mask on line 15 */
#define EXTI1_IMR1_IM16_Pos         (16U)
#define EXTI1_IMR1_IM16_Msk         (0x1U << EXTI1_IMR1_IM16_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR1_IM16             EXTI1_IMR1_IM16_Msk                          /*!< Interrupt Mask on line 16 */
#define EXTI1_IMR1_IM17_Pos         (17U)
#define EXTI1_IMR1_IM17_Msk         (0x1U << EXTI1_IMR1_IM17_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR1_IM17             EXTI1_IMR1_IM17_Msk                          /*!< Interrupt Mask on line 17 */
#define EXTI1_IMR1_IM18_Pos         (18U)
#define EXTI1_IMR1_IM18_Msk         (0x1U << EXTI1_IMR1_IM18_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR1_IM18             EXTI1_IMR1_IM18_Msk                          /*!< Interrupt Mask on line 18 */
#define EXTI1_IMR1_IM19_Pos         (19U)
#define EXTI1_IMR1_IM19_Msk         (0x1U << EXTI1_IMR1_IM19_Pos)                /*!< 0x00080000 */
#define EXTI1_IMR1_IM19             EXTI1_IMR1_IM19_Msk                          /*!< Interrupt Mask on line 19 */
/* No interrupt line 20 */
#define EXTI1_IMR1_IM21_Pos         (21U)
#define EXTI1_IMR1_IM21_Msk         (0x1U << EXTI1_IMR1_IM21_Pos)                /*!< 0x00200000 */
#define EXTI1_IMR1_IM21             EXTI1_IMR1_IM21_Msk                          /*!< Interrupt Mask on line 21 */
#define EXTI1_IMR1_IM22_Pos         (22U)
#define EXTI1_IMR1_IM22_Msk         (0x1U << EXTI1_IMR1_IM22_Pos)                /*!< 0x00400000 */
#define EXTI1_IMR1_IM22             EXTI1_IMR1_IM22_Msk                          /*!< Interrupt Mask on line 22 */
#define EXTI1_IMR1_IM23_Pos         (23U)
#define EXTI1_IMR1_IM23_Msk         (0x1U << EXTI1_IMR1_IM23_Pos)                /*!< 0x00800000 */
#define EXTI1_IMR1_IM23             EXTI1_IMR1_IM23_Msk                          /*!< Interrupt Mask on line 23 */
#define EXTI1_IMR1_IM24_Pos         (24U)
#define EXTI1_IMR1_IM24_Msk         (0x1U << EXTI1_IMR1_IM24_Pos)                /*!< 0x01000000 */
#define EXTI1_IMR1_IM24             EXTI1_IMR1_IM24_Msk                          /*!< Interrupt Mask on line 24 */
#define EXTI1_IMR1_IM25_Pos         (25U)
#define EXTI1_IMR1_IM25_Msk         (0x1U << EXTI1_IMR1_IM25_Pos)                /*!< 0x02000000 */
#define EXTI1_IMR1_IM25             EXTI1_IMR1_IM25_Msk                          /*!< Interrupt Mask on line 25 */
#define EXTI1_IMR1_IM26_Pos         (26U)
#define EXTI1_IMR1_IM26_Msk         (0x1U << EXTI1_IMR1_IM26_Pos)                /*!< 0x04000000 */
#define EXTI1_IMR1_IM26             EXTI1_IMR1_IM26_Msk                          /*!< Interrupt Mask on line 26 */
#define EXTI1_IMR1_IM27_Pos         (27U)
#define EXTI1_IMR1_IM27_Msk         (0x1U << EXTI1_IMR1_IM27_Pos)                /*!< 0x08000000 */
#define EXTI1_IMR1_IM27             EXTI1_IMR1_IM27_Msk                          /*!< Interrupt Mask on line 27 */
#define EXTI1_IMR1_IM28_Pos         (28U)
#define EXTI1_IMR1_IM28_Msk         (0x1U << EXTI1_IMR1_IM28_Pos)                /*!< 0x10000000 */
#define EXTI1_IMR1_IM28             EXTI1_IMR1_IM28_Msk                          /*!< Interrupt Mask on line 28 */
#define EXTI1_IMR1_IM29_Pos         (29U)
#define EXTI1_IMR1_IM29_Msk         (0x1U << EXTI1_IMR1_IM29_Pos)                /*!< 0x20000000 */
#define EXTI1_IMR1_IM29             EXTI1_IMR1_IM29_Msk                          /*!< Interrupt Mask on line 29 */
#define EXTI1_IMR1_IM30_Pos         (30U)
#define EXTI1_IMR1_IM30_Msk         (0x1U << EXTI1_IMR1_IM30_Pos)                /*!< 0x40000000 */
#define EXTI1_IMR1_IM30             EXTI1_IMR1_IM30_Msk                          /*!< Interrupt Mask on line 30 */
#define EXTI1_IMR1_IM31_Pos         (31U)
#define EXTI1_IMR1_IM31_Msk         (0x1U << EXTI1_IMR1_IM31_Pos)                /*!< 0x80000000 */
#define EXTI1_IMR1_IM31             EXTI1_IMR1_IM31_Msk                          /*!< Interrupt Mask on line 31 */

/*******************  Bit definition for EXTI1_CmIMR2 register  *******************/
#define EXTI1_IMR2_IM32_Pos         (0U)
#define EXTI1_IMR2_IM32_Msk         (0x1U << EXTI1_IMR2_IM32_Pos)                /*!< 0x00000001 */
#define EXTI1_IMR2_IM32             EXTI1_IMR2_IM32_Msk                          /*!< Interrupt Mask on line 32 */
#define EXTI1_IMR2_IM33_Pos         (1U)
#define EXTI1_IMR2_IM33_Msk         (0x1U << EXTI1_IMR2_IM33_Pos)                /*!< 0x00000002 */
#define EXTI1_IMR2_IM33             EXTI1_IMR2_IM33_Msk                          /*!< Interrupt Mask on line 33 */
#define EXTI1_IMR2_IM34_Pos         (2U)
#define EXTI1_IMR2_IM34_Msk         (0x1U << EXTI1_IMR2_IM34_Pos)                /*!< 0x00000004 */
#define EXTI1_IMR2_IM34             EXTI1_IMR2_IM34_Msk                          /*!< Interrupt Mask on line 34 */
/* No interrupt line 35 */
#define EXTI1_IMR2_IM36_Pos         (4U)
#define EXTI1_IMR2_IM36_Msk         (0x1U << EXTI1_IMR2_IM36_Pos)                /*!< 0x00000010 */
#define EXTI1_IMR2_IM36             EXTI1_IMR2_IM36_Msk                          /*!< Interrupt Mask on line 36 */
#define EXTI1_IMR2_IM37_Pos         (5U)
#define EXTI1_IMR2_IM37_Msk         (0x1U << EXTI1_IMR2_IM37_Pos)                /*!< 0x00000020 */
#define EXTI1_IMR2_IM37             EXTI1_IMR2_IM37_Msk                          /*!< Interrupt Mask on line 37 */
#define EXTI1_IMR2_IM38_Pos         (6U)
#define EXTI1_IMR2_IM38_Msk         (0x1U << EXTI1_IMR2_IM38_Pos)                /*!< 0x00000040 */
#define EXTI1_IMR2_IM38             EXTI1_IMR2_IM38_Msk                          /*!< Interrupt Mask on line 38 */
#define EXTI1_IMR2_IM39_Pos         (7U)
#define EXTI1_IMR2_IM39_Msk         (0x1U << EXTI1_IMR2_IM39_Pos)                /*!< 0x00000080 */
#define EXTI1_IMR2_IM39             EXTI1_IMR2_IM39_Msk                          /*!< Interrupt Mask on line 39 */
#define EXTI1_IMR2_IM40_Pos         (8U)
#define EXTI1_IMR2_IM40_Msk         (0x1U << EXTI1_IMR2_IM40_Pos)                /*!< 0x00000100 */
#define EXTI1_IMR2_IM40             EXTI1_IMR2_IM40_Msk                          /*!< Interrupt Mask on line 40 */
#define EXTI1_IMR2_IM41_Pos         (9U)
#define EXTI1_IMR2_IM41_Msk         (0x1U << EXTI1_IMR2_IM41_Pos)                /*!< 0x00000200 */
#define EXTI1_IMR2_IM41             EXTI1_IMR2_IM41_Msk                          /*!< Interrupt Mask on line 41 */
#define EXTI1_IMR2_IM42_Pos         (10U)
#define EXTI1_IMR2_IM42_Msk         (0x1U << EXTI1_IMR2_IM42_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR2_IM42             EXTI1_IMR2_IM42_Msk                          /*!< Interrupt Mask on line 42 */
#define EXTI1_IMR2_IM43_Pos         (11U)
#define EXTI1_IMR2_IM43_Msk         (0x1U << EXTI1_IMR2_IM43_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR2_IM43             EXTI1_IMR2_IM43_Msk                          /*!< Interrupt Mask on line 43 */
#define EXTI1_IMR2_IM44_Pos         (12U)
#define EXTI1_IMR2_IM44_Msk         (0x1U << EXTI1_IMR2_IM44_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR2_IM44             EXTI1_IMR2_IM44_Msk                          /*!< Interrupt Mask on line 44 */
#define EXTI1_IMR2_IM45_Pos         (13U)
#define EXTI1_IMR2_IM45_Msk         (0x1U << EXTI1_IMR2_IM45_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR2_IM45             EXTI1_IMR2_IM45_Msk                          /*!< Interrupt Mask on line 45 */
#define EXTI1_IMR2_IM46_Pos         (14U)
#define EXTI1_IMR2_IM46_Msk         (0x1U << EXTI1_IMR2_IM46_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR2_IM46             EXTI1_IMR2_IM46_Msk                          /*!< Interrupt Mask on line 46 */
#define EXTI1_IMR2_IM47_Pos         (15U)
#define EXTI1_IMR2_IM47_Msk         (0x1U << EXTI1_IMR2_IM47_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR2_IM47             EXTI1_IMR2_IM47_Msk                          /*!< Interrupt Mask on line 47 */
#define EXTI1_IMR2_IM48_Pos         (16U)
#define EXTI1_IMR2_IM48_Msk         (0x1U << EXTI1_IMR2_IM48_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR2_IM48             EXTI1_IMR2_IM48_Msk                          /*!< Interrupt Mask on line 48 */
#define EXTI1_IMR2_IM49_Pos         (17U)
#define EXTI1_IMR2_IM49_Msk         (0x1U << EXTI1_IMR2_IM49_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR2_IM49             EXTI1_IMR2_IM49_Msk                          /*!< Interrupt Mask on line 49 */
#define EXTI1_IMR2_IM50_Pos         (18U)
#define EXTI1_IMR2_IM50_Msk         (0x1U << EXTI1_IMR2_IM50_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR2_IM50             EXTI1_IMR2_IM50_Msk                          /*!< Interrupt Mask on line 50 */
/* No interrupt line 51 */
#define EXTI1_IMR2_IM52_Pos         (20U)
#define EXTI1_IMR2_IM52_Msk         (0x1U << EXTI1_IMR2_IM52_Pos)                /*!< 0x00100000 */
#define EXTI1_IMR2_IM52             EXTI1_IMR2_IM52_Msk                          /*!< Interrupt Mask on line 52 */
#define EXTI1_IMR2_IM53_Pos         (21U)
#define EXTI1_IMR2_IM53_Msk         (0x1U << EXTI1_IMR2_IM53_Pos)                /*!< 0x00200000 */
#define EXTI1_IMR2_IM53             EXTI1_IMR2_IM53_Msk                          /*!< Interrupt Mask on line 53 */
#define EXTI1_IMR2_IM54_Pos         (22U)
#define EXTI1_IMR2_IM54_Msk         (0x1U << EXTI1_IMR2_IM54_Pos)                /*!< 0x00400000 */
#define EXTI1_IMR2_IM54             EXTI1_IMR2_IM54_Msk                          /*!< Interrupt Mask on line 54 */
#define EXTI1_IMR2_IM55_Pos         (23U)
#define EXTI1_IMR2_IM55_Msk         (0x1U << EXTI1_IMR2_IM55_Pos)                /*!< 0x00800000 */
#define EXTI1_IMR2_IM55             EXTI1_IMR2_IM55_Msk                          /*!< Interrupt Mask on line 55 */
#define EXTI1_IMR2_IM56_Pos         (24U)
#define EXTI1_IMR2_IM56_Msk         (0x1U << EXTI1_IMR2_IM56_Pos)                /*!< 0x01000000 */
#define EXTI1_IMR2_IM56             EXTI1_IMR2_IM56_Msk                          /*!< Interrupt Mask on line 56 */
#define EXTI1_IMR2_IM57_Pos         (25U)
#define EXTI1_IMR2_IM57_Msk         (0x1U << EXTI1_IMR2_IM57_Pos)                /*!< 0x02000000 */
#define EXTI1_IMR2_IM57             EXTI1_IMR2_IM57_Msk                          /*!< Interrupt Mask on line 57 */
/* No interrupt line 58 */
#define EXTI1_IMR2_IM59_Pos         (27U)
#define EXTI1_IMR2_IM59_Msk         (0x1U << EXTI1_IMR2_IM59_Pos)                /*!< 0x08000000 */
#define EXTI1_IMR2_IM59             EXTI1_IMR2_IM59_Msk                          /*!< Interrupt Mask on line 59 */
#define EXTI1_IMR2_IM60_Pos         (28U)
#define EXTI1_IMR2_IM60_Msk         (0x1U << EXTI1_IMR2_IM60_Pos)                /*!< 0x10000000 */
#define EXTI1_IMR2_IM60             EXTI1_IMR2_IM60_Msk                          /*!< Interrupt Mask on line 60 */
#define EXTI1_IMR2_IM61_Pos         (29U)
#define EXTI1_IMR2_IM61_Msk         (0x1U << EXTI1_IMR2_IM61_Pos)                /*!< 0x20000000 */
#define EXTI1_IMR2_IM61             EXTI1_IMR2_IM61_Msk                          /*!< Interrupt Mask on line 61 */
#define EXTI1_IMR2_IM62_Pos         (30U)
#define EXTI1_IMR2_IM62_Msk         (0x1U << EXTI1_IMR2_IM62_Pos)                /*!< 0x40000000 */
#define EXTI1_IMR2_IM62             EXTI1_IMR2_IM62_Msk                          /*!< Interrupt Mask on line 62 */
/* No interrupt line 63 */

/*******************  Bit definition for EXTI1_CmIMR3 register  *******************/
#define EXTI1_IMR3_IM64_Pos         (0U)
#define EXTI1_IMR3_IM64_Msk         (0x1U << EXTI1_IMR3_IM64_Pos)                /*!< 0x00000001 */
#define EXTI1_IMR3_IM64             EXTI1_IMR3_IM64_Msk                          /*!< Interrupt Mask on line 64 */
#define EXTI1_IMR3_IM65_Pos         (1U)
#define EXTI1_IMR3_IM65_Msk         (0x1U << EXTI1_IMR3_IM65_Pos)                /*!< 0x00000002 */
#define EXTI1_IMR3_IM65             EXTI1_IMR3_IM65_Msk                          /*!< Interrupt Mask on line 65 */
/* No interrupt line 66 */
#define EXTI1_IMR3_IM67_Pos         (3U)
#define EXTI1_IMR3_IM67_Msk         (0x1U << EXTI1_IMR3_IM67_Pos)                /*!< 0x00000008 */
#define EXTI1_IMR3_IM67             EXTI1_IMR3_IM67_Msk                          /*!< Interrupt Mask on line 67 */
#define EXTI1_IMR3_IM68_Pos         (4U)
#define EXTI1_IMR3_IM68_Msk         (0x1U << EXTI1_IMR3_IM68_Pos)                /*!< 0x00000010 */
#define EXTI1_IMR3_IM68             EXTI1_IMR3_IM68_Msk                          /*!< Interrupt Mask on line 68 */
/* No interrupt line 69 */
#define EXTI1_IMR3_IM70_Pos         (6U)
#define EXTI1_IMR3_IM70_Msk         (0x1U << EXTI1_IMR3_IM70_Pos)                /*!< 0x00000040 */
#define EXTI1_IMR3_IM70             EXTI1_IMR3_IM70_Msk                          /*!< Interrupt Mask on line 70 */
/* No interrupt line 71 */
#define EXTI1_IMR3_IM72_Pos         (8U)
#define EXTI1_IMR3_IM72_Msk         (0x1U << EXTI1_IMR3_IM72_Pos)                /*!< 0x00000100 */
#define EXTI1_IMR3_IM72             EXTI1_IMR3_IM72_Msk                          /*!< Interrupt Mask on line 72 */
#define EXTI1_IMR3_IM73_Pos         (9U)
#define EXTI1_IMR3_IM73_Msk         (0x1U << EXTI1_IMR3_IM73_Pos)                /*!< 0x00000200 */
#define EXTI1_IMR3_IM73             EXTI1_IMR3_IM73_Msk                          /*!< Interrupt Mask on line 73 */
#define EXTI1_IMR3_IM74_Pos         (10U)
#define EXTI1_IMR3_IM74_Msk         (0x1U << EXTI1_IMR3_IM74_Pos)                /*!< 0x00000400 */
#define EXTI1_IMR3_IM74             EXTI1_IMR3_IM74_Msk                          /*!< Interrupt Mask on line 74 */
#define EXTI1_IMR3_IM75_Pos         (11U)
#define EXTI1_IMR3_IM75_Msk         (0x1U << EXTI1_IMR3_IM75_Pos)                /*!< 0x00000800 */
#define EXTI1_IMR3_IM75             EXTI1_IMR3_IM75_Msk                          /*!< Interrupt Mask on line 75 */
#define EXTI1_IMR3_IM76_Pos         (12U)
#define EXTI1_IMR3_IM76_Msk         (0x1U << EXTI1_IMR3_IM76_Pos)                /*!< 0x00001000 */
#define EXTI1_IMR3_IM76             EXTI1_IMR3_IM76_Msk                          /*!< Interrupt Mask on line 76 */
#define EXTI1_IMR3_IM77_Pos         (13U)
#define EXTI1_IMR3_IM77_Msk         (0x1U << EXTI1_IMR3_IM77_Pos)                /*!< 0x00002000 */
#define EXTI1_IMR3_IM77             EXTI1_IMR3_IM77_Msk                          /*!< Interrupt Mask on line 77 */
#define EXTI1_IMR3_IM78_Pos         (14U)
#define EXTI1_IMR3_IM78_Msk         (0x1U << EXTI1_IMR3_IM78_Pos)                /*!< 0x00004000 */
#define EXTI1_IMR3_IM78             EXTI1_IMR3_IM78_Msk                          /*!< Interrupt Mask on line 78 */
#define EXTI1_IMR3_IM79_Pos         (15U)
#define EXTI1_IMR3_IM79_Msk         (0x1U << EXTI1_IMR3_IM79_Pos)                /*!< 0x00008000 */
#define EXTI1_IMR3_IM79             EXTI1_IMR3_IM79_Msk                          /*!< Interrupt Mask on line 79 */
#define EXTI1_IMR3_IM80_Pos         (16U)
#define EXTI1_IMR3_IM80_Msk         (0x1U << EXTI1_IMR3_IM80_Pos)                /*!< 0x00010000 */
#define EXTI1_IMR3_IM80             EXTI1_IMR3_IM80_Msk                          /*!< Interrupt Mask on line 80 */
#define EXTI1_IMR3_IM81_Pos         (17U)
#define EXTI1_IMR3_IM81_Msk         (0x1U << EXTI1_IMR3_IM81_Pos)                /*!< 0x00020000 */
#define EXTI1_IMR3_IM81             EXTI1_IMR3_IM81_Msk                          /*!< Interrupt Mask on line 81 */
#define EXTI1_IMR3_IM82_Pos         (18U)
#define EXTI1_IMR3_IM82_Msk         (0x1U << EXTI1_IMR3_IM82_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR3_IM82             EXTI1_IMR3_IM82_Msk                          /*!< Interrupt Mask on line 82 */
#define EXTI1_IMR3_IM83_Pos         (19U)
#define EXTI1_IMR3_IM83_Msk         (0x1U << EXTI1_IMR3_IM83_Pos)                /*!< 0x00040000 */
#define EXTI1_IMR3_IM83             EXTI1_IMR3_IM83_Msk                          /*!< Interrupt Mask on line 83 */
#define EXTI1_IMR3_IM84_Pos         (20U)
#define EXTI1_IMR3_IM84_Msk         (0x1U << EXTI1_IMR3_IM84_Pos)                /*!< 0x00100000 */
#define EXTI1_IMR3_IM84             EXTI1_IMR3_IM84_Msk                          /*!< Interrupt Mask on line 84 */

/*******************  Bit definition for EXTI1_C2EMR3 register  *******************/
#define EXTI1_EMR3_EM65_Pos         (1U)
#define EXTI1_EMR3_EM65_Msk         (0x1U << EXTI1_EMR3_EM65_Pos)                /*!< 0x00000002 */
#define EXTI1_EMR3_EM65             EXTI1_EMR3_EM65_Msk                          /*!< Interrupt Mask on line 65 */

/******************  Bit definition for EXTI_EnCIDCFGR register  *******************/
#define EXTI_EnCIDCFGR_CFEN_Pos      (0U)
#define EXTI_EnCIDCFGR_CFEN_Msk      (0x1U << EXTI_EnCIDCFGR_CFEN_Pos)
#define EXTI_EnCIDCFGR_CFEN          EXTI_EnCIDCFGR_CFEN_Msk                     /*!< CID filtering enable*/
#define EXTI_EnCIDCFGR_CID_Pos       (4U)
#define EXTI_EnCIDCFGR_CID_Msk       (0x3U << EXTI_EnCIDCFGR_CID_Pos)
#define EXTI_EnCIDCFGR_CID           EXTI_EnCIDCFGR_CID_Msk                     /*!< static CID value*/

/******************  Bit definition for EXTI_CmCIDCFGR register  *******************/
#define EXTI_CmCIDCFGR_CFEN_Pos      (0U)
#define EXTI_CmCIDCFGR_CFEN_Msk      (0x1U << EXTI_CmCIDCFGR_CFEN_Pos)
#define EXTI_CmCIDCFGR_CFEN          EXTI_CmCIDCFGR_CFEN_Msk                     /*!< CID filtering enable*/
#define EXTI_CmCIDCFGR_CID_Pos       (4U)
#define EXTI_CmCIDCFGR_CID_Msk       (0x3U << EXTI_CmCIDCFGR_CID_Pos)
#define EXTI_CmCIDCFGR_CID           EXTI_CmCIDCFGR_CID_Msk                     /*!< static CID value*/



/* EXTI2 */


/******************  Bit definition for EXTI2_RTSR1 register  *******************/
#define EXTI2_RTSR1_RT0_Pos         (0U)
#define EXTI2_RTSR1_RT0_Msk         (0x1U << EXTI2_RTSR1_RT0_Pos)                /*!< 0x00000001 */
#define EXTI2_RTSR1_RT0             EXTI2_RTSR1_RT0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI2_RTSR1_RT1_Pos         (1U)
#define EXTI2_RTSR1_RT1_Msk         (0x1U << EXTI2_RTSR1_RT1_Pos)                /*!< 0x00000002 */
#define EXTI2_RTSR1_RT1             EXTI2_RTSR1_RT1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI2_RTSR1_RT2_Pos         (2U)
#define EXTI2_RTSR1_RT2_Msk         (0x1U << EXTI2_RTSR1_RT2_Pos)                /*!< 0x00000004 */
#define EXTI2_RTSR1_RT2             EXTI2_RTSR1_RT2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI2_RTSR1_RT3_Pos         (3U)
#define EXTI2_RTSR1_RT3_Msk         (0x1U << EXTI2_RTSR1_RT3_Pos)                /*!< 0x00000008 */
#define EXTI2_RTSR1_RT3             EXTI2_RTSR1_RT3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI2_RTSR1_RT4_Pos         (4U)
#define EXTI2_RTSR1_RT4_Msk         (0x1U << EXTI2_RTSR1_RT4_Pos)                /*!< 0x00000010 */
#define EXTI2_RTSR1_RT4             EXTI2_RTSR1_RT4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI2_RTSR1_RT5_Pos         (5U)
#define EXTI2_RTSR1_RT5_Msk         (0x1U << EXTI2_RTSR1_RT5_Pos)                /*!< 0x00000020 */
#define EXTI2_RTSR1_RT5             EXTI2_RTSR1_RT5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI2_RTSR1_RT6_Pos         (6U)
#define EXTI2_RTSR1_RT6_Msk         (0x1U << EXTI2_RTSR1_RT6_Pos)                /*!< 0x00000040 */
#define EXTI2_RTSR1_RT6             EXTI2_RTSR1_RT6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI2_RTSR1_RT7_Pos         (7U)
#define EXTI2_RTSR1_RT7_Msk         (0x1U << EXTI2_RTSR1_RT7_Pos)                /*!< 0x00000080 */
#define EXTI2_RTSR1_RT7             EXTI2_RTSR1_RT7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI2_RTSR1_RT8_Pos         (8U)
#define EXTI2_RTSR1_RT8_Msk         (0x1U << EXTI2_RTSR1_RT8_Pos)                /*!< 0x00000100 */
#define EXTI2_RTSR1_RT8             EXTI2_RTSR1_RT8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI2_RTSR1_RT9_Pos         (9U)
#define EXTI2_RTSR1_RT9_Msk         (0x1U << EXTI2_RTSR1_RT9_Pos)                /*!< 0x00000200 */
#define EXTI2_RTSR1_RT9             EXTI2_RTSR1_RT9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI2_RTSR1_RT10_Pos        (10U)
#define EXTI2_RTSR1_RT10_Msk        (0x1U << EXTI2_RTSR1_RT10_Pos)               /*!< 0x00000400 */
#define EXTI2_RTSR1_RT10            EXTI2_RTSR1_RT10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI2_RTSR1_RT11_Pos        (11U)
#define EXTI2_RTSR1_RT11_Msk        (0x1U << EXTI2_RTSR1_RT11_Pos)               /*!< 0x00000800 */
#define EXTI2_RTSR1_RT11            EXTI2_RTSR1_RT11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI2_RTSR1_RT12_Pos        (12U)
#define EXTI2_RTSR1_RT12_Msk        (0x1U << EXTI2_RTSR1_RT12_Pos)               /*!< 0x00001000 */
#define EXTI2_RTSR1_RT12            EXTI2_RTSR1_RT12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI2_RTSR1_RT13_Pos        (13U)
#define EXTI2_RTSR1_RT13_Msk        (0x1U << EXTI2_RTSR1_RT13_Pos)               /*!< 0x00002000 */
#define EXTI2_RTSR1_RT13            EXTI2_RTSR1_RT13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI2_RTSR1_RT14_Pos        (14U)
#define EXTI2_RTSR1_RT14_Msk        (0x1U << EXTI2_RTSR1_RT14_Pos)               /*!< 0x00004000 */
#define EXTI2_RTSR1_RT14            EXTI2_RTSR1_RT14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI2_RTSR1_RT15_Pos        (15U)
#define EXTI2_RTSR1_RT15_Msk        (0x1U << EXTI2_RTSR1_RT15_Pos)               /*!< 0x00008000 */
#define EXTI2_RTSR1_RT15            EXTI2_RTSR1_RT15_Msk                         /*!< Rising trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_FTSR1 register  *******************/
#define EXTI2_FTSR1_FT0_Pos         (0U)
#define EXTI2_FTSR1_FT0_Msk         (0x1U << EXTI2_FTSR1_FT0_Pos)                /*!< 0x00000001 */
#define EXTI2_FTSR1_FT0             EXTI2_FTSR1_FT0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI2_FTSR1_FT1_Pos         (1U)
#define EXTI2_FTSR1_FT1_Msk         (0x1U << EXTI2_FTSR1_FT1_Pos)                /*!< 0x00000002 */
#define EXTI2_FTSR1_FT1             EXTI2_FTSR1_FT1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI2_FTSR1_FT2_Pos         (2U)
#define EXTI2_FTSR1_FT2_Msk         (0x1U << EXTI2_FTSR1_FT2_Pos)                /*!< 0x00000004 */
#define EXTI2_FTSR1_FT2             EXTI2_FTSR1_FT2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI2_FTSR1_FT3_Pos         (3U)
#define EXTI2_FTSR1_FT3_Msk         (0x1U << EXTI2_FTSR1_FT3_Pos)                /*!< 0x00000008 */
#define EXTI2_FTSR1_FT3             EXTI2_FTSR1_FT3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI2_FTSR1_FT4_Pos         (4U)
#define EXTI2_FTSR1_FT4_Msk         (0x1U << EXTI2_FTSR1_FT4_Pos)                /*!< 0x00000010 */
#define EXTI2_FTSR1_FT4             EXTI2_FTSR1_FT4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI2_FTSR1_FT5_Pos         (5U)
#define EXTI2_FTSR1_FT5_Msk         (0x1U << EXTI2_FTSR1_FT5_Pos)                /*!< 0x00000020 */
#define EXTI2_FTSR1_FT5             EXTI2_FTSR1_FT5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI2_FTSR1_FT6_Pos         (6U)
#define EXTI2_FTSR1_FT6_Msk         (0x1U << EXTI2_FTSR1_FT6_Pos)                /*!< 0x00000040 */
#define EXTI2_FTSR1_FT6             EXTI2_FTSR1_FT6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI2_FTSR1_FT7_Pos         (7U)
#define EXTI2_FTSR1_FT7_Msk         (0x1U << EXTI2_FTSR1_FT7_Pos)                /*!< 0x00000080 */
#define EXTI2_FTSR1_FT7             EXTI2_FTSR1_FT7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI2_FTSR1_FT8_Pos         (8U)
#define EXTI2_FTSR1_FT8_Msk         (0x1U << EXTI2_FTSR1_FT8_Pos)                /*!< 0x00000100 */
#define EXTI2_FTSR1_FT8             EXTI2_FTSR1_FT8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI2_FTSR1_FT9_Pos         (9U)
#define EXTI2_FTSR1_FT9_Msk         (0x1U << EXTI2_FTSR1_FT9_Pos)                /*!< 0x00000200 */
#define EXTI2_FTSR1_FT9             EXTI2_FTSR1_FT9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI2_FTSR1_FT10_Pos        (10U)
#define EXTI2_FTSR1_FT10_Msk        (0x1U << EXTI2_FTSR1_FT10_Pos)               /*!< 0x00000400 */
#define EXTI2_FTSR1_FT10            EXTI2_FTSR1_FT10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI2_FTSR1_FT11_Pos        (11U)
#define EXTI2_FTSR1_FT11_Msk        (0x1U << EXTI2_FTSR1_FT11_Pos)               /*!< 0x00000800 */
#define EXTI2_FTSR1_FT11            EXTI2_FTSR1_FT11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI2_FTSR1_FT12_Pos        (12U)
#define EXTI2_FTSR1_FT12_Msk        (0x1U << EXTI2_FTSR1_FT12_Pos)               /*!< 0x00001000 */
#define EXTI2_FTSR1_FT12            EXTI2_FTSR1_FT12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI2_FTSR1_FT13_Pos        (13U)
#define EXTI2_FTSR1_FT13_Msk        (0x1U << EXTI2_FTSR1_FT13_Pos)               /*!< 0x00002000 */
#define EXTI2_FTSR1_FT13            EXTI2_FTSR1_FT13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI2_FTSR1_FT14_Pos        (14U)
#define EXTI2_FTSR1_FT14_Msk        (0x1U << EXTI2_FTSR1_FT14_Pos)               /*!< 0x00004000 */
#define EXTI2_FTSR1_FT14            EXTI2_FTSR1_FT14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI2_FTSR1_FT15_Pos        (15U)
#define EXTI2_FTSR1_FT15_Msk        (0x1U << EXTI2_FTSR1_FT15_Pos)               /*!< 0x00008000 */
#define EXTI2_FTSR1_FT15            EXTI2_FTSR1_FT15_Msk                         /*!< Falling trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI12_SWIER1 register  ******************/
#define EXTI2_SWIER1_SWI0_Pos     (0U)
#define EXTI2_SWIER1_SWI0_Msk     (0x1U << EXTI2_SWIER1_SWI0_Pos)            /*!< 0x00000001 */
#define EXTI2_SWIER1_SWI0         EXTI2_SWIER1_SWI0_Msk                      /*!< Software Interrupt on line 0 */
#define EXTI2_SWIER1_SWI1_Pos     (1U)
#define EXTI2_SWIER1_SWI1_Msk     (0x1U << EXTI2_SWIER1_SWI1_Pos)            /*!< 0x00000002 */
#define EXTI2_SWIER1_SWI1         EXTI2_SWIER1_SWI1_Msk                      /*!< Software Interrupt on line 1 */
#define EXTI2_SWIER1_SWI2_Pos     (2U)
#define EXTI2_SWIER1_SWI2_Msk     (0x1U << EXTI2_SWIER1_SWI2_Pos)            /*!< 0x00000004 */
#define EXTI2_SWIER1_SWI2         EXTI2_SWIER1_SWI2_Msk                      /*!< Software Interrupt on line 2 */
#define EXTI2_SWIER1_SWI3_Pos     (3U)
#define EXTI2_SWIER1_SWI3_Msk     (0x1U << EXTI2_SWIER1_SWI3_Pos)            /*!< 0x00000008 */
#define EXTI2_SWIER1_SWI3         EXTI2_SWIER1_SWI3_Msk                      /*!< Software Interrupt on line 3 */
#define EXTI2_SWIER1_SWI4_Pos     (4U)
#define EXTI2_SWIER1_SWI4_Msk     (0x1U << EXTI2_SWIER1_SWI4_Pos)            /*!< 0x00000010 */
#define EXTI2_SWIER1_SWI4         EXTI2_SWIER1_SWI4_Msk                      /*!< Software Interrupt on line 4 */
#define EXTI2_SWIER1_SWI5_Pos     (5U)
#define EXTI2_SWIER1_SWI5_Msk     (0x1U << EXTI2_SWIER1_SWI5_Pos)            /*!< 0x00000020 */
#define EXTI2_SWIER1_SWI5         EXTI2_SWIER1_SWI5_Msk                      /*!< Software Interrupt on line 5 */
#define EXTI2_SWIER1_SWI6_Pos     (6U)
#define EXTI2_SWIER1_SWI6_Msk     (0x1U << EXTI2_SWIER1_SWI6_Pos)            /*!< 0x00000040 */
#define EXTI2_SWIER1_SWI6         EXTI2_SWIER1_SWI6_Msk                      /*!< Software Interrupt on line 6 */
#define EXTI2_SWIER1_SWI7_Pos     (7U)
#define EXTI2_SWIER1_SWI7_Msk     (0x1U << EXTI2_SWIER1_SWI7_Pos)            /*!< 0x00000080 */
#define EXTI2_SWIER1_SWI7         EXTI2_SWIER1_SWI7_Msk                      /*!< Software Interrupt on line 7 */
#define EXTI2_SWIER1_SWI8_Pos     (8U)
#define EXTI2_SWIER1_SWI8_Msk     (0x1U << EXTI2_SWIER1_SWI8_Pos)            /*!< 0x00000100 */
#define EXTI2_SWIER1_SWI8         EXTI2_SWIER1_SWI8_Msk                      /*!< Software Interrupt on line 8 */
#define EXTI2_SWIER1_SWI9_Pos     (9U)
#define EXTI2_SWIER1_SWI9_Msk     (0x1U << EXTI2_SWIER1_SWI9_Pos)            /*!< 0x00000200 */
#define EXTI2_SWIER1_SWI9         EXTI2_SWIER1_SWI9_Msk                      /*!< Software Interrupt on line 9 */
#define EXTI2_SWIER1_SWI10_Pos    (10U)
#define EXTI2_SWIER1_SWI10_Msk    (0x1U << EXTI2_SWIER1_SWI10_Pos)           /*!< 0x00000400 */
#define EXTI2_SWIER1_SWI10        EXTI2_SWIER1_SWI10_Msk                     /*!< Software Interrupt on line 10 */
#define EXTI2_SWIER1_SWI11_Pos    (11U)
#define EXTI2_SWIER1_SWI11_Msk    (0x1U << EXTI2_SWIER1_SWI11_Pos)           /*!< 0x00000800 */
#define EXTI2_SWIER1_SWI11        EXTI2_SWIER1_SWI11_Msk                     /*!< Software Interrupt on line 11 */
#define EXTI2_SWIER1_SWI12_Pos    (12U)
#define EXTI2_SWIER1_SWI12_Msk    (0x1U << EXTI2_SWIER1_SWI12_Pos)           /*!< 0x00001000 */
#define EXTI2_SWIER1_SWI12        EXTI2_SWIER1_SWI12_Msk                     /*!< Software Interrupt on line 12 */
#define EXTI2_SWIER1_SWI13_Pos    (13U)
#define EXTI2_SWIER1_SWI13_Msk    (0x1U << EXTI2_SWIER1_SWI13_Pos)           /*!< 0x00002000 */
#define EXTI2_SWIER1_SWI13        EXTI2_SWIER1_SWI13_Msk                     /*!< Software Interrupt on line 13 */
#define EXTI2_SWIER1_SWI14_Pos    (14U)
#define EXTI2_SWIER1_SWI14_Msk    (0x1U << EXTI2_SWIER1_SWI14_Pos)           /*!< 0x00004000 */
#define EXTI2_SWIER1_SWI14        EXTI2_SWIER1_SWI14_Msk                     /*!< Software Interrupt on line 14 */
#define EXTI2_SWIER1_SWI15_Pos    (15U)
#define EXTI2_SWIER1_SWI15_Msk    (0x1U << EXTI2_SWIER1_SWI15_Pos)           /*!< 0x00008000 */
#define EXTI2_SWIER1_SWI15        EXTI2_SWIER1_SWI15_Msk                     /*!< Software Interrupt on line 15 */

/******************  Bit definition for EXTI2_RPR1 register  *******************/
#define EXTI2_RPR1_RPIF0_Pos         (0U)
#define EXTI2_RPR1_RPIF0_Msk         (0x1U << EXTI2_RPR1_RPIF0_Pos)                /*!< 0x00000001 */
#define EXTI2_RPR1_RPIF0             EXTI2_RPR1_RPIF0_Msk                          /*!< Rising trigger event configuration bit of line 0 */
#define EXTI2_RPR1_RPIF1_Pos         (1U)
#define EXTI2_RPR1_RPIF1_Msk         (0x1U << EXTI2_RPR1_RPIF1_Pos)                /*!< 0x00000002 */
#define EXTI2_RPR1_RPIF1             EXTI2_RPR1_RPIF1_Msk                          /*!< Rising trigger event configuration bit of line 1 */
#define EXTI2_RPR1_RPIF2_Pos         (2U)
#define EXTI2_RPR1_RPIF2_Msk         (0x1U << EXTI2_RPR1_RPIF2_Pos)                /*!< 0x00000004 */
#define EXTI2_RPR1_RPIF2             EXTI2_RPR1_RPIF2_Msk                          /*!< Rising trigger event configuration bit of line 2 */
#define EXTI2_RPR1_RPIF3_Pos         (3U)
#define EXTI2_RPR1_RPIF3_Msk         (0x1U << EXTI2_RPR1_RPIF3_Pos)                /*!< 0x00000008 */
#define EXTI2_RPR1_RPIF3             EXTI2_RPR1_RPIF3_Msk                          /*!< Rising trigger event configuration bit of line 3 */
#define EXTI2_RPR1_RPIF4_Pos         (4U)
#define EXTI2_RPR1_RPIF4_Msk         (0x1U << EXTI2_RPR1_RPIF4_Pos)                /*!< 0x00000010 */
#define EXTI2_RPR1_RPIF4             EXTI2_RPR1_RPIF4_Msk                          /*!< Rising trigger event configuration bit of line 4 */
#define EXTI2_RPR1_RPIF5_Pos         (5U)
#define EXTI2_RPR1_RPIF5_Msk         (0x1U << EXTI2_RPR1_RPIF5_Pos)                /*!< 0x00000020 */
#define EXTI2_RPR1_RPIF5             EXTI2_RPR1_RPIF5_Msk                          /*!< Rising trigger event configuration bit of line 5 */
#define EXTI2_RPR1_RPIF6_Pos         (6U)
#define EXTI2_RPR1_RPIF6_Msk         (0x1U << EXTI2_RPR1_RPIF6_Pos)                /*!< 0x00000040 */
#define EXTI2_RPR1_RPIF6             EXTI2_RPR1_RPIF6_Msk                          /*!< Rising trigger event configuration bit of line 6 */
#define EXTI2_RPR1_RPIF7_Pos         (7U)
#define EXTI2_RPR1_RPIF7_Msk         (0x1U << EXTI2_RPR1_RPIF7_Pos)                /*!< 0x00000080 */
#define EXTI2_RPR1_RPIF7             EXTI2_RPR1_RPIF7_Msk                          /*!< Rising trigger event configuration bit of line 7 */
#define EXTI2_RPR1_RPIF8_Pos         (8U)
#define EXTI2_RPR1_RPIF8_Msk         (0x1U << EXTI2_RPR1_RPIF8_Pos)                /*!< 0x00000100 */
#define EXTI2_RPR1_RPIF8             EXTI2_RPR1_RPIF8_Msk                          /*!< Rising trigger event configuration bit of line 8 */
#define EXTI2_RPR1_RPIF9_Pos         (9U)
#define EXTI2_RPR1_RPIF9_Msk         (0x1U << EXTI2_RPR1_RPIF9_Pos)                /*!< 0x00000200 */
#define EXTI2_RPR1_RPIF9             EXTI2_RPR1_RPIF9_Msk                          /*!< Rising trigger event configuration bit of line 9 */
#define EXTI2_RPR1_RPIF10_Pos        (10U)
#define EXTI2_RPR1_RPIF10_Msk        (0x1U << EXTI2_RPR1_RPIF10_Pos)               /*!< 0x00000400 */
#define EXTI2_RPR1_RPIF10            EXTI2_RPR1_RPIF10_Msk                         /*!< Rising trigger event configuration bit of line 10 */
#define EXTI2_RPR1_RPIF11_Pos        (11U)
#define EXTI2_RPR1_RPIF11_Msk        (0x1U << EXTI2_RPR1_RPIF11_Pos)               /*!< 0x00000800 */
#define EXTI2_RPR1_RPIF11            EXTI2_RPR1_RPIF11_Msk                         /*!< Rising trigger event configuration bit of line 11 */
#define EXTI2_RPR1_RPIF12_Pos        (12U)
#define EXTI2_RPR1_RPIF12_Msk        (0x1U << EXTI2_RPR1_RPIF12_Pos)               /*!< 0x00001000 */
#define EXTI2_RPR1_RPIF12            EXTI2_RPR1_RPIF12_Msk                         /*!< Rising trigger event configuration bit of line 12 */
#define EXTI2_RPR1_RPIF13_Pos        (13U)
#define EXTI2_RPR1_RPIF13_Msk        (0x1U << EXTI2_RPR1_RPIF13_Pos)               /*!< 0x00002000 */
#define EXTI2_RPR1_RPIF13            EXTI2_RPR1_RPIF13_Msk                         /*!< Rising trigger event configuration bit of line 13 */
#define EXTI2_RPR1_RPIF14_Pos        (14U)
#define EXTI2_RPR1_RPIF14_Msk        (0x1U << EXTI2_RPR1_RPIF14_Pos)               /*!< 0x00004000 */
#define EXTI2_RPR1_RPIF14            EXTI2_RPR1_RPIF14_Msk                         /*!< Rising trigger event configuration bit of line 14 */
#define EXTI2_RPR1_RPIF15_Pos        (15U)
#define EXTI2_RPR1_RPIF15_Msk        (0x1U << EXTI2_RPR1_RPIF15_Pos)               /*!< 0x00008000 */
#define EXTI2_RPR1_RPIF15            EXTI2_RPR1_RPIF15_Msk                         /*!< Rising trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_FTSR1 register  *******************/
#define EXTI2_FPR1_FPIF0_Pos         (0U)
#define EXTI2_FPR1_FPIF0_Msk         (0x1U << EXTI2_FPR1_FPIF0_Pos)                /*!< 0x00000001 */
#define EXTI2_FPR1_FPIF0             EXTI2_FPR1_FPIF0_Msk                          /*!< Falling trigger event configuration bit of line 0 */
#define EXTI2_FPR1_FPIF1_Pos         (1U)
#define EXTI2_FPR1_FPIF1_Msk         (0x1U << EXTI2_FPR1_FPIF1_Pos)                /*!< 0x00000002 */
#define EXTI2_FPR1_FPIF1             EXTI2_FPR1_FPIF1_Msk                          /*!< Falling trigger event configuration bit of line 1 */
#define EXTI2_FPR1_FPIF2_Pos         (2U)
#define EXTI2_FPR1_FPIF2_Msk         (0x1U << EXTI2_FPR1_FPIF2_Pos)                /*!< 0x00000004 */
#define EXTI2_FPR1_FPIF2             EXTI2_FPR1_FPIF2_Msk                          /*!< Falling trigger event configuration bit of line 2 */
#define EXTI2_FPR1_FPIF3_Pos         (3U)
#define EXTI2_FPR1_FPIF3_Msk         (0x1U << EXTI2_FPR1_FPIF3_Pos)                /*!< 0x00000008 */
#define EXTI2_FPR1_FPIF3             EXTI2_FPR1_FPIF3_Msk                          /*!< Falling trigger event configuration bit of line 3 */
#define EXTI2_FPR1_FPIF4_Pos         (4U)
#define EXTI2_FPR1_FPIF4_Msk         (0x1U << EXTI2_FPR1_FPIF4_Pos)                /*!< 0x00000010 */
#define EXTI2_FPR1_FPIF4             EXTI2_FPR1_FPIF4_Msk                          /*!< Falling trigger event configuration bit of line 4 */
#define EXTI2_FPR1_FPIF5_Pos         (5U)
#define EXTI2_FPR1_FPIF5_Msk         (0x1U << EXTI2_FPR1_FPIF5_Pos)                /*!< 0x00000020 */
#define EXTI2_FPR1_FPIF5             EXTI2_FPR1_FPIF5_Msk                          /*!< Falling trigger event configuration bit of line 5 */
#define EXTI2_FPR1_FPIF6_Pos         (6U)
#define EXTI2_FPR1_FPIF6_Msk         (0x1U << EXTI2_FPR1_FPIF6_Pos)                /*!< 0x00000040 */
#define EXTI2_FPR1_FPIF6             EXTI2_FPR1_FPIF6_Msk                          /*!< Falling trigger event configuration bit of line 6 */
#define EXTI2_FPR1_FPIF7_Pos         (7U)
#define EXTI2_FPR1_FPIF7_Msk         (0x1U << EXTI2_FPR1_FPIF7_Pos)                /*!< 0x00000080 */
#define EXTI2_FPR1_FPIF7             EXTI2_FPR1_FPIF7_Msk                          /*!< Falling trigger event configuration bit of line 7 */
#define EXTI2_FPR1_FPIF8_Pos         (8U)
#define EXTI2_FPR1_FPIF8_Msk         (0x1U << EXTI2_FPR1_FPIF8_Pos)                /*!< 0x00000100 */
#define EXTI2_FPR1_FPIF8             EXTI2_FPR1_FPIF8_Msk                          /*!< Falling trigger event configuration bit of line 8 */
#define EXTI2_FPR1_FPIF9_Pos         (9U)
#define EXTI2_FPR1_FPIF9_Msk         (0x1U << EXTI2_FPR1_FPIF9_Pos)                /*!< 0x00000200 */
#define EXTI2_FPR1_FPIF9             EXTI2_FPR1_FPIF9_Msk                          /*!< Falling trigger event configuration bit of line 9 */
#define EXTI2_FPR1_FPIF10_Pos        (10U)
#define EXTI2_FPR1_FPIF10_Msk        (0x1U << EXTI2_FPR1_FPIF10_Pos)               /*!< 0x00000400 */
#define EXTI2_FPR1_FPIF10            EXTI2_FPR1_FPIF10_Msk                         /*!< Falling trigger event configuration bit of line 10 */
#define EXTI2_FPR1_FPIF11_Pos        (11U)
#define EXTI2_FPR1_FPIF11_Msk        (0x1U << EXTI2_FPR1_FPIF11_Pos)               /*!< 0x00000800 */
#define EXTI2_FPR1_FPIF11            EXTI2_FPR1_FPIF11_Msk                         /*!< Falling trigger event configuration bit of line 11 */
#define EXTI2_FPR1_FPIF12_Pos        (12U)
#define EXTI2_FPR1_FPIF12_Msk        (0x1U << EXTI2_FPR1_FPIF12_Pos)               /*!< 0x00001000 */
#define EXTI2_FPR1_FPIF12            EXTI2_FPR1_FPIF12_Msk                         /*!< Falling trigger event configuration bit of line 12 */
#define EXTI2_FPR1_FPIF13_Pos        (13U)
#define EXTI2_FPR1_FPIF13_Msk        (0x1U << EXTI2_FPR1_FPIF13_Pos)               /*!< 0x00002000 */
#define EXTI2_FPR1_FPIF13            EXTI2_FPR1_FPIF13_Msk                         /*!< Falling trigger event configuration bit of line 13 */
#define EXTI2_FPR1_FPIF14_Pos        (14U)
#define EXTI2_FPR1_FPIF14_Msk        (0x1U << EXTI2_FPR1_FPIF14_Pos)               /*!< 0x00004000 */
#define EXTI2_FPR1_FPIF14            EXTI2_FPR1_FPIF14_Msk                         /*!< Falling trigger event configuration bit of line 14 */
#define EXTI2_FPR1_FPIF15_Pos        (15U)
#define EXTI2_FPR1_FPIF15_Msk        (0x1U << EXTI2_FPR1_FPIF15_Pos)               /*!< 0x00008000 */
#define EXTI2_FPR1_FPIF15            EXTI2_FPR1_FPIF15_Msk                         /*!< Falling trigger event configuration bit of line 15 */

/******************  Bit definition for EXTI2_SECCFGR1  register  ******************/
#define EXTI2_SECCFGR1_SEC0_Pos  (0U)
#define EXTI2_SECCFGR1_SEC0_Msk  (0x1U << EXTI2_SECCFGR1_SEC0_Pos)          /*!< 0x00000001 */
#define EXTI2_SECCFGR1_SEC0      EXTI2_SECCFGR1_SEC0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI2_SECCFGR1_SEC1_Pos  (1U)
#define EXTI2_SECCFGR1_SEC1_Msk  (0x1U << EXTI2_SECCFGR1_SEC1_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR1_SEC1      EXTI2_SECCFGR1_SEC1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI2_SECCFGR1_SEC2_Pos  (2U)
#define EXTI2_SECCFGR1_SEC2_Msk  (0x1U << EXTI2_SECCFGR1_SEC2_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR1_SEC2      EXTI2_SECCFGR1_SEC2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI2_SECCFGR1_SEC3_Pos  (3U)
#define EXTI2_SECCFGR1_SEC3_Msk  (0x1U << EXTI2_SECCFGR1_SEC3_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR1_SEC3      EXTI2_SECCFGR1_SEC3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI2_SECCFGR1_SEC4_Pos  (4U)
#define EXTI2_SECCFGR1_SEC4_Msk  (0x1U << EXTI2_SECCFGR1_SEC4_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR1_SEC4      EXTI2_SECCFGR1_SEC4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI2_SECCFGR1_SEC5_Pos  (5U)
#define EXTI2_SECCFGR1_SEC5_Msk  (0x1U << EXTI2_SECCFGR1_SEC5_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR1_SEC5      EXTI2_SECCFGR1_SEC5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI2_SECCFGR1_SEC6_Pos  (6U)
#define EXTI2_SECCFGR1_SEC6_Msk  (0x1U << EXTI2_SECCFGR1_SEC6_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR1_SEC6      EXTI2_SECCFGR1_SEC6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI2_SECCFGR1_SEC7_Pos  (7U)
#define EXTI2_SECCFGR1_SEC7_Msk  (0x1U << EXTI2_SECCFGR1_SEC7_Pos)          /*!< 0x00000080 */
#define EXTI2_SECCFGR1_SEC7      EXTI2_SECCFGR1_SEC7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI2_SECCFGR1_SEC8_Pos  (8U)
#define EXTI2_SECCFGR1_SEC8_Msk  (0x1U << EXTI2_SECCFGR1_SEC8_Pos)          /*!< 0x00000100 */
#define EXTI2_SECCFGR1_SEC8      EXTI2_SECCFGR1_SEC8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI2_SECCFGR1_SEC9_Pos  (9U)
#define EXTI2_SECCFGR1_SEC9_Msk  (0x1U << EXTI2_SECCFGR1_SEC9_Pos)          /*!< 0x00000200 */
#define EXTI2_SECCFGR1_SEC9      EXTI2_SECCFGR1_SEC9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI2_SECCFGR1_SEC10_Pos (10U)
#define EXTI2_SECCFGR1_SEC10_Msk (0x1U << EXTI2_SECCFGR1_SEC10_Pos)         /*!< 0x00000400 */
#define EXTI2_SECCFGR1_SEC10     EXTI2_SECCFGR1_SEC10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI2_SECCFGR1_SEC11_Pos (11U)
#define EXTI2_SECCFGR1_SEC11_Msk (0x1U << EXTI2_SECCFGR1_SEC11_Pos)         /*!< 0x00000800 */
#define EXTI2_SECCFGR1_SEC11     EXTI2_SECCFGR1_SEC11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI2_SECCFGR1_SEC12_Pos (12U)
#define EXTI2_SECCFGR1_SEC12_Msk (0x1U << EXTI2_SECCFGR1_SEC12_Pos)         /*!< 0x00001000 */
#define EXTI2_SECCFGR1_SEC12     EXTI2_SECCFGR1_SEC12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI2_SECCFGR1_SEC13_Pos (13U)
#define EXTI2_SECCFGR1_SEC13_Msk (0x1U << EXTI2_SECCFGR1_SEC13_Pos)         /*!< 0x00002000 */
#define EXTI2_SECCFGR1_SEC13     EXTI2_SECCFGR1_SEC13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI2_SECCFGR1_SEC14_Pos (14U)
#define EXTI2_SECCFGR1_SEC14_Msk (0x1U << EXTI2_SECCFGR1_SEC14_Pos)         /*!< 0x00004000 */
#define EXTI2_SECCFGR1_SEC14     EXTI2_SECCFGR1_SEC14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI2_SECCFGR1_SEC15_Pos (15U)
#define EXTI2_SECCFGR1_SEC15_Msk (0x1U << EXTI2_SECCFGR1_SEC15_Pos)         /*!< 0x00008000 */
#define EXTI2_SECCFGR1_SEC15     EXTI2_SECCFGR1_SEC15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI2_SECCFGR1_SEC16_Pos (16U)
#define EXTI2_SECCFGR1_SEC16_Msk (0x1U << EXTI2_SECCFGR1_SEC16_Pos)         /*!< 0x00010000 */
#define EXTI2_SECCFGR1_SEC16     EXTI2_SECCFGR1_SEC16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI2_SECCFGR1_SEC17_Pos (17U)
#define EXTI2_SECCFGR1_SEC17_Msk (0x1U << EXTI2_SECCFGR1_SEC17_Pos)         /*!< 0x00020000 */
#define EXTI2_SECCFGR1_SEC17     EXTI2_SECCFGR1_SEC17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI2_SECCFGR1_SEC18_Pos (18U)
#define EXTI2_SECCFGR1_SEC18_Msk (0x1U << EXTI2_SECCFGR1_SEC18_Pos)         /*!< 0x00040000 */
#define EXTI2_SECCFGR1_SEC18     EXTI2_SECCFGR1_SEC18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI2_SECCFGR1_SEC19_Pos (19U)
#define EXTI2_SECCFGR1_SEC19_Msk (0x1U << EXTI2_SECCFGR1_SEC19_Pos)         /*!< 0x00080000 */
#define EXTI2_SECCFGR1_SEC19     EXTI2_SECCFGR1_SEC19_Msk                   /*!< SEC/PRIV enable on event input 19 */
#define EXTI2_SECCFGR1_SEC20_Pos (20U)
#define EXTI2_SECCFGR1_SEC20_Msk (0x1U << EXTI2_SECCFGR1_SEC20_Pos)         /*!< 0x00100000 */
#define EXTI2_SECCFGR1_SEC20     EXTI2_SECCFGR1_SEC20_Msk                   /*!< SEC/PRIV enable on event input 20 */
#define EXTI2_SECCFGR1_SEC21_Pos (21U)
#define EXTI2_SECCFGR1_SEC21_Msk (0x1U << EXTI2_SECCFGR1_SEC21_Pos)         /*!< 0x00200000 */
#define EXTI2_SECCFGR1_SEC21     EXTI2_SECCFGR1_SEC21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI2_SECCFGR1_SEC22_Pos (22U)
#define EXTI2_SECCFGR1_SEC22_Msk (0x1U << EXTI2_SECCFGR1_SEC22_Pos)         /*!< 0x00400000 */
#define EXTI2_SECCFGR1_SEC22     EXTI2_SECCFGR1_SEC22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI2_SECCFGR1_SEC23_Pos (23U)
#define EXTI2_SECCFGR1_SEC23_Msk (0x1U << EXTI2_SECCFGR1_SEC23_Pos)         /*!< 0x00800000 */
#define EXTI2_SECCFGR1_SEC23     EXTI2_SECCFGR1_SEC23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI2_SECCFGR1_SEC24_Pos (24U)
#define EXTI2_SECCFGR1_SEC24_Msk (0x1U << EXTI2_SECCFGR1_SEC24_Pos)         /*!< 0x01000000 */
#define EXTI2_SECCFGR1_SEC24     EXTI2_SECCFGR1_SEC24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI2_SECCFGR1_SEC25_Pos (25U)
#define EXTI2_SECCFGR1_SEC25_Msk (0x1U << EXTI2_SECCFGR1_SEC25_Pos)         /*!< 0x02000000 */
#define EXTI2_SECCFGR1_SEC25     EXTI2_SECCFGR1_SEC25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI2_SECCFGR1_SEC26_Pos (26U)
#define EXTI2_SECCFGR1_SEC26_Msk (0x1U << EXTI2_SECCFGR1_SEC26_Pos)         /*!< 0x04000000 */
#define EXTI2_SECCFGR1_SEC26     EXTI2_SECCFGR1_SEC26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI2_SECCFGR1_SEC27_Pos (27U)
#define EXTI2_SECCFGR1_SEC27_Msk (0x1U << EXTI2_SECCFGR1_SEC27_Pos)         /*!< 0x08000000 */
#define EXTI2_SECCFGR1_SEC27     EXTI2_SECCFGR1_SEC27_Msk                   /*!< SEC/PRIV enable on event input 27 */
/* no event input 28  */
#define EXTI2_SECCFGR1_SEC29_Pos (29U)
#define EXTI2_SECCFGR1_SEC29_Msk (0x1U << EXTI2_SECCFGR1_SEC29_Pos)         /*!< 0x20000000 */
#define EXTI2_SECCFGR1_SEC29     EXTI2_SECCFGR1_SEC29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI2_SECCFGR1_SEC30_Pos (30U)
#define EXTI2_SECCFGR1_SEC30_Msk (0x1U << EXTI2_SECCFGR1_SEC30_Pos)         /*!< 0x40000000 */
#define EXTI2_SECCFGR1_SEC30     EXTI2_SECCFGR1_SEC30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI2_SECCFGR1_SEC31_Pos (31U)
#define EXTI2_SECCFGR1_SEC31_Msk (0x1U << EXTI2_SECCFGR1_SEC31_Pos)         /*!< 0x80000000 */
#define EXTI2_SECCFGR1_SEC31     EXTI2_SECCFGR1_SEC31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI2_PRIVCFGR1 register  ******************/
#define EXTI2_PRIVCFGR1_PRIV0_Pos  (0U)
#define EXTI2_PRIVCFGR1_PRIV0_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV0_Pos)          /*!< 0x00000001 */
#define EXTI2_PRIVCFGR1_PRIV0      EXTI2_PRIVCFGR1_PRIV0_Msk                    /*!< SEC/PRIV enable on event input 0 */
#define EXTI2_PRIVCFGR1_PRIV1_Pos  (1U)
#define EXTI2_PRIVCFGR1_PRIV1_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV1_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR1_PRIV1      EXTI2_PRIVCFGR1_PRIV1_Msk                    /*!< SEC/PRIV enable on event input 1 */
#define EXTI2_PRIVCFGR1_PRIV2_Pos  (2U)
#define EXTI2_PRIVCFGR1_PRIV2_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV2_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR1_PRIV2      EXTI2_PRIVCFGR1_PRIV2_Msk                    /*!< SEC/PRIV enable on event input 2 */
#define EXTI2_PRIVCFGR1_PRIV3_Pos  (3U)
#define EXTI2_PRIVCFGR1_PRIV3_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV3_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR1_PRIV3      EXTI2_PRIVCFGR1_PRIV3_Msk                    /*!< SEC/PRIV enable on event input 3 */
#define EXTI2_PRIVCFGR1_PRIV4_Pos  (4U)
#define EXTI2_PRIVCFGR1_PRIV4_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV4_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR1_PRIV4      EXTI2_PRIVCFGR1_PRIV4_Msk                    /*!< SEC/PRIV enable on event input 4 */
#define EXTI2_PRIVCFGR1_PRIV5_Pos  (5U)
#define EXTI2_PRIVCFGR1_PRIV5_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV5_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR1_PRIV5      EXTI2_PRIVCFGR1_PRIV5_Msk                    /*!< SEC/PRIV enable on event input 5 */
#define EXTI2_PRIVCFGR1_PRIV6_Pos  (6U)
#define EXTI2_PRIVCFGR1_PRIV6_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV6_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR1_PRIV6      EXTI2_PRIVCFGR1_PRIV6_Msk                    /*!< SEC/PRIV enable on event input 6 */
#define EXTI2_PRIVCFGR1_PRIV7_Pos  (7U)
#define EXTI2_PRIVCFGR1_PRIV7_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV7_Pos)          /*!< 0x00000080 */
#define EXTI2_PRIVCFGR1_PRIV7      EXTI2_PRIVCFGR1_PRIV7_Msk                    /*!< SEC/PRIV enable on event input 7 */
#define EXTI2_PRIVCFGR1_PRIV8_Pos  (8U)
#define EXTI2_PRIVCFGR1_PRIV8_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV8_Pos)          /*!< 0x00000100 */
#define EXTI2_PRIVCFGR1_PRIV8      EXTI2_PRIVCFGR1_PRIV8_Msk                    /*!< SEC/PRIV enable on event input 8 */
#define EXTI2_PRIVCFGR1_PRIV9_Pos  (9U)
#define EXTI2_PRIVCFGR1_PRIV9_Msk  (0x1U << EXTI2_PRIVCFGR1_PRIV9_Pos)          /*!< 0x00000200 */
#define EXTI2_PRIVCFGR1_PRIV9      EXTI2_PRIVCFGR1_PRIV9_Msk                    /*!< SEC/PRIV enable on event input 9 */
#define EXTI2_PRIVCFGR1_PRIV10_Pos (10U)
#define EXTI2_PRIVCFGR1_PRIV10_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV10_Pos)         /*!< 0x00000400 */
#define EXTI2_PRIVCFGR1_PRIV10     EXTI2_PRIVCFGR1_PRIV10_Msk                   /*!< SEC/PRIV enable on event input 10 */
#define EXTI2_PRIVCFGR1_PRIV11_Pos (11U)
#define EXTI2_PRIVCFGR1_PRIV11_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV11_Pos)         /*!< 0x00000800 */
#define EXTI2_PRIVCFGR1_PRIV11     EXTI2_PRIVCFGR1_PRIV11_Msk                   /*!< SEC/PRIV enable on event input 11 */
#define EXTI2_PRIVCFGR1_PRIV12_Pos (12U)
#define EXTI2_PRIVCFGR1_PRIV12_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV12_Pos)         /*!< 0x00001000 */
#define EXTI2_PRIVCFGR1_PRIV12     EXTI2_PRIVCFGR1_PRIV12_Msk                   /*!< SEC/PRIV enable on event input 12 */
#define EXTI2_PRIVCFGR1_PRIV13_Pos (13U)
#define EXTI2_PRIVCFGR1_PRIV13_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV13_Pos)         /*!< 0x00002000 */
#define EXTI2_PRIVCFGR1_PRIV13     EXTI2_PRIVCFGR1_PRIV13_Msk                   /*!< SEC/PRIV enable on event input 13 */
#define EXTI2_PRIVCFGR1_PRIV14_Pos (14U)
#define EXTI2_PRIVCFGR1_PRIV14_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV14_Pos)         /*!< 0x00004000 */
#define EXTI2_PRIVCFGR1_PRIV14     EXTI2_PRIVCFGR1_PRIV14_Msk                   /*!< SEC/PRIV enable on event input 14 */
#define EXTI2_PRIVCFGR1_PRIV15_Pos (15U)
#define EXTI2_PRIVCFGR1_PRIV15_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV15_Pos)         /*!< 0x00008000 */
#define EXTI2_PRIVCFGR1_PRIV15     EXTI2_PRIVCFGR1_PRIV15_Msk                   /*!< SEC/PRIV enable on event input 15 */
#define EXTI2_PRIVCFGR1_PRIV16_Pos (16U)
#define EXTI2_PRIVCFGR1_PRIV16_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV16_Pos)         /*!< 0x00010000 */
#define EXTI2_PRIVCFGR1_PRIV16     EXTI2_PRIVCFGR1_PRIV16_Msk                   /*!< SEC/PRIV enable on event input 16 */
#define EXTI2_PRIVCFGR1_PRIV17_Pos (17U)
#define EXTI2_PRIVCFGR1_PRIV17_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV17_Pos)         /*!< 0x00020000 */
#define EXTI2_PRIVCFGR1_PRIV17     EXTI2_PRIVCFGR1_PRIV17_Msk                   /*!< SEC/PRIV enable on event input 17 */
#define EXTI2_PRIVCFGR1_PRIV18_Pos (18U)
#define EXTI2_PRIVCFGR1_PRIV18_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV18_Pos)         /*!< 0x00040000 */
#define EXTI2_PRIVCFGR1_PRIV18     EXTI2_PRIVCFGR1_PRIV18_Msk                   /*!< SEC/PRIV enable on event input 18 */
#define EXTI2_PRIVCFGR1_PRIV19_Pos (19U)
#define EXTI2_PRIVCFGR1_PRIV19_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV19_Pos)         /*!< 0x00080000 */
#define EXTI2_PRIVCFGR1_PRIV19     EXTI2_PRIVCFGR1_PRIV19_Msk                   /*!< SEC/PRIV enable on event input 19 */
#define EXTI2_PRIVCFGR1_PRIV20_Pos (20U)
#define EXTI2_PRIVCFGR1_PRIV20_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV20_Pos)         /*!< 0x00100000 */
#define EXTI2_PRIVCFGR1_PRIV20     EXTI2_PRIVCFGR1_PRIV20_Msk                   /*!< SEC/PRIV enable on event input 20 */
#define EXTI2_PRIVCFGR1_PRIV21_Pos (21U)
#define EXTI2_PRIVCFGR1_PRIV21_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV21_Pos)         /*!< 0x00200000 */
#define EXTI2_PRIVCFGR1_PRIV21     EXTI2_PRIVCFGR1_PRIV21_Msk                   /*!< SEC/PRIV enable on event input 21 */
#define EXTI2_PRIVCFGR1_PRIV22_Pos (22U)
#define EXTI2_PRIVCFGR1_PRIV22_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV22_Pos)         /*!< 0x00400000 */
#define EXTI2_PRIVCFGR1_PRIV22     EXTI2_PRIVCFGR1_PRIV22_Msk                   /*!< SEC/PRIV enable on event input 22 */
#define EXTI2_PRIVCFGR1_PRIV23_Pos (23U)
#define EXTI2_PRIVCFGR1_PRIV23_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV23_Pos)         /*!< 0x00800000 */
#define EXTI2_PRIVCFGR1_PRIV23     EXTI2_PRIVCFGR1_PRIV23_Msk                   /*!< SEC/PRIV enable on event input 23 */
#define EXTI2_PRIVCFGR1_PRIV24_Pos (24U)
#define EXTI2_PRIVCFGR1_PRIV24_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV24_Pos)         /*!< 0x01000000 */
#define EXTI2_PRIVCFGR1_PRIV24     EXTI2_PRIVCFGR1_PRIV24_Msk                   /*!< SEC/PRIV enable on event input 24 */
#define EXTI2_PRIVCFGR1_PRIV25_Pos (25U)
#define EXTI2_PRIVCFGR1_PRIV25_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV25_Pos)         /*!< 0x02000000 */
#define EXTI2_PRIVCFGR1_PRIV25     EXTI2_PRIVCFGR1_PRIV25_Msk                   /*!< SEC/PRIV enable on event input 25 */
#define EXTI2_PRIVCFGR1_PRIV26_Pos (26U)
#define EXTI2_PRIVCFGR1_PRIV26_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV26_Pos)         /*!< 0x04000000 */
#define EXTI2_PRIVCFGR1_PRIV26     EXTI2_PRIVCFGR1_PRIV26_Msk                   /*!< SEC/PRIV enable on event input 26 */
#define EXTI2_PRIVCFGR1_PRIV27_Pos (27U)
#define EXTI2_PRIVCFGR1_PRIV27_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV27_Pos)         /*!< 0x08000000 */
#define EXTI2_PRIVCFGR1_PRIV27     EXTI2_PRIVCFGR1_PRIV27_Msk                   /*!< SEC/PRIV enable on event input 27 */
/* no event input 28  */
#define EXTI2_PRIVCFGR1_PRIV29_Pos (29U)
#define EXTI2_PRIVCFGR1_PRIV29_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV29_Pos)         /*!< 0x20000000 */
#define EXTI2_PRIVCFGR1_PRIV29     EXTI2_PRIVCFGR1_PRIV29_Msk                   /*!< SEC/PRIV enable on event input 29 */
#define EXTI2_PRIVCFGR1_PRIV30_Pos (30U)
#define EXTI2_PRIVCFGR1_PRIV30_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV30_Pos)         /*!< 0x40000000 */
#define EXTI2_PRIVCFGR1_PRIV30     EXTI2_PRIVCFGR1_PRIV30_Msk                   /*!< SEC/PRIV enable on event input 30 */
#define EXTI2_PRIVCFGR1_PRIV31_Pos (31U)
#define EXTI2_PRIVCFGR1_PRIV31_Msk (0x1U << EXTI2_PRIVCFGR1_PRIV31_Pos)         /*!< 0x80000000 */
#define EXTI2_PRIVCFGR1_PRIV31     EXTI2_PRIVCFGR1_PRIV31_Msk                   /*!< SEC/PRIV enable on event input 31 */

/******************  Bit definition for EXTI2_RTSR2 register  *******************/
#define EXTI2_RTSR2_RT46_Pos        (14U)
#define EXTI2_RTSR2_RT46_Msk        (0x1U << EXTI2_RTSR2_RT46_Pos)               /*!< 0x00004000 */
#define EXTI2_RTSR2_RT46            EXTI2_RTSR2_RT46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT47_Pos        (15U)
#define EXTI2_RTSR2_RT47_Msk        (0x1U << EXTI2_RTSR2_RT47_Pos)               /*!< 0x00008000 */
#define EXTI2_RTSR2_RT47            EXTI2_RTSR2_RT47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT48_Pos        (16U)
#define EXTI2_RTSR2_RT48_Msk        (0x1U << EXTI2_RTSR2_RT48_Pos)               /*!< 0x00010000 */
#define EXTI2_RTSR2_RT48            EXTI2_RTSR2_RT48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT49_Pos        (17U)
#define EXTI2_RTSR2_RT49_Msk        (0x1U << EXTI2_RTSR2_RT49_Pos)               /*!< 0x00020000 */
#define EXTI2_RTSR2_RT49            EXTI2_RTSR2_RT49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT50_Pos        (18U)
#define EXTI2_RTSR2_RT50_Msk        (0x1U << EXTI2_RTSR2_RT50_Pos)               /*!< 0x00040000 */
#define EXTI2_RTSR2_RT50            EXTI2_RTSR2_RT50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT51_Pos        (19U)
#define EXTI2_RTSR2_RT51_Msk        (0x1U << EXTI2_RTSR2_RT51_Pos)               /*!< 0x00080000 */
#define EXTI2_RTSR2_RT51            EXTI2_RTSR2_RT51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_RTSR2_RT59_Pos        (27U)
#define EXTI2_RTSR2_RT59_Msk        (0x1U << EXTI2_RTSR2_RT59_Pos)               /*!< 0x08000000 */
#define EXTI2_RTSR2_RT59            EXTI2_RTSR2_RT59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT60_Pos        (28U)
#define EXTI2_RTSR2_RT60_Msk        (0x1U << EXTI2_RTSR2_RT60_Pos)               /*!< 0x10000000 */
#define EXTI2_RTSR2_RT60            EXTI2_RTSR2_RT60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RTSR2_RT61_Pos        (29U)
#define EXTI2_RTSR2_RT61_Msk        (0x1U << EXTI2_RTSR2_RT61_Pos)               /*!< 0x20000000 */
#define EXTI2_RTSR2_RT61            EXTI2_RTSR2_RT61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_FTSR2 register  *******************/
#define EXTI2_FTSR2_FT46_Pos        (14U)
#define EXTI2_FTSR2_FT46_Msk        (0x1U << EXTI2_FTSR2_FT46_Pos)               /*!< 0x00004000 */
#define EXTI2_FTSR2_FT46            EXTI2_FTSR2_FT46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT47_Pos        (15U)
#define EXTI2_FTSR2_FT47_Msk        (0x1U << EXTI2_FTSR2_FT47_Pos)               /*!< 0x00008000 */
#define EXTI2_FTSR2_FT47            EXTI2_FTSR2_FT47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT48_Pos        (16U)
#define EXTI2_FTSR2_FT48_Msk        (0x1U << EXTI2_FTSR2_FT48_Pos)               /*!< 0x00010000 */
#define EXTI2_FTSR2_FT48            EXTI2_FTSR2_FT48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT49_Pos        (17U)
#define EXTI2_FTSR2_FT49_Msk        (0x1U << EXTI2_FTSR2_FT49_Pos)               /*!< 0x00020000 */
#define EXTI2_FTSR2_FT49            EXTI2_FTSR2_FT49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT50_Pos        (18U)
#define EXTI2_FTSR2_FT50_Msk        (0x1U << EXTI2_FTSR2_FT50_Pos)               /*!< 0x00040000 */
#define EXTI2_FTSR2_FT50            EXTI2_FTSR2_FT50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT51_Pos        (19U)
#define EXTI2_FTSR2_FT51_Msk        (0x1U << EXTI2_FTSR2_FT51_Pos)               /*!< 0x00080000 */
#define EXTI2_FTSR2_FT51            EXTI2_FTSR2_FT51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_FTSR2_FT59_Pos        (27U)
#define EXTI2_FTSR2_FT59_Msk        (0x1U << EXTI2_FTSR2_FT59_Pos)               /*!< 0x08000000 */
#define EXTI2_FTSR2_FT59            EXTI2_FTSR2_FT59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT60_Pos        (28U)
#define EXTI2_FTSR2_FT60_Msk        (0x1U << EXTI2_FTSR2_FT60_Pos)               /*!< 0x10000000 */
#define EXTI2_FTSR2_FT60            EXTI2_FTSR2_FT60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FTSR2_FT61_Pos        (29U)
#define EXTI2_FTSR2_FT61_Msk        (0x1U << EXTI2_FTSR2_FT61_Pos)               /*!< 0x20000000 */
#define EXTI2_FTSR2_FT61            EXTI2_FTSR2_FT61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_SWIER2 register  ******************/
#define EXTI2_SWIER2_SWI46_Pos    (14U)
#define EXTI2_SWIER2_SWI46_Msk    (0x1U << EXTI2_SWIER2_SWI46_Pos)           /*!< 0x00004000 */
#define EXTI2_SWIER2_SWI46        EXTI2_SWIER2_SWI46_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI47_Pos    (15U)
#define EXTI2_SWIER2_SWI47_Msk    (0x1U << EXTI2_SWIER2_SWI47_Pos)           /*!< 0x00008000 */
#define EXTI2_SWIER2_SWI47        EXTI2_SWIER2_SWI47_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI48_Pos    (16U)
#define EXTI2_SWIER2_SWI48_Msk    (0x1U << EXTI2_SWIER2_SWI48_Pos)           /*!< 0x00010000 */
#define EXTI2_SWIER2_SWI48        EXTI2_SWIER2_SWI48_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI49_Pos    (17U)
#define EXTI2_SWIER2_SWI49_Msk    (0x1U << EXTI2_SWIER2_SWI49_Pos)           /*!< 0x00020000 */
#define EXTI2_SWIER2_SWI49        EXTI2_SWIER2_SWI49_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI50_Pos    (18U)
#define EXTI2_SWIER2_SWI50_Msk    (0x1U << EXTI2_SWIER2_SWI50_Pos)           /*!< 0x00040000 */
#define EXTI2_SWIER2_SWI50        EXTI2_SWIER2_SWI50_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI51_Pos    (19U)
#define EXTI2_SWIER2_SWI51_Msk    (0x1U << EXTI2_SWIER2_SWI51_Pos)           /*!< 0x00080000 */
#define EXTI2_SWIER2_SWI51        EXTI2_SWIER2_SWI51_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI59_Pos    (27U)
#define EXTI2_SWIER2_SWI59_Msk    (0x1U << EXTI2_SWIER2_SWI59_Pos)           /*!< 0x08000000 */
#define EXTI2_SWIER2_SWI59        EXTI2_SWIER2_SWI59_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI60_Pos    (28U)
#define EXTI2_SWIER2_SWI60_Msk    (0x1U << EXTI2_SWIER2_SWI60_Pos)           /*!< 0x10000000 */
#define EXTI2_SWIER2_SWI60        EXTI2_SWIER2_SWI60_Msk                     /*!< Software Interrupt on line 49 */
#define EXTI2_SWIER2_SWI61_Pos    (29U)
#define EXTI2_SWIER2_SWI61_Msk    (0x1U << EXTI2_SWIER2_SWI61_Pos)           /*!< 0x20000000 */
#define EXTI2_SWIER2_SWI61        EXTI2_SWIER2_SWI61_Msk                     /*!< Software Interrupt on line 49 */

/******************  Bit definition for EXTI2_RPR2 register  *******************/
#define EXTI2_RPR2_RPIF46_Pos        (14U)
#define EXTI2_RPR2_RPIF46_Msk        (0x1U << EXTI2_RPR2_RPIF46_Pos)               /*!< 0x00004000 */
#define EXTI2_RPR2_RPIF46            EXTI2_RPR2_RPIF46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF47_Pos        (15U)
#define EXTI2_RPR2_RPIF47_Msk        (0x1U << EXTI2_RPR2_RPIF47_Pos)               /*!< 0x00008000 */
#define EXTI2_RPR2_RPIF47            EXTI2_RPR2_RPIF47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF48_Pos        (16U)
#define EXTI2_RPR2_RPIF48_Msk        (0x1U << EXTI2_RPR2_RPIF48_Pos)               /*!< 0x00010000 */
#define EXTI2_RPR2_RPIF48            EXTI2_RPR2_RPIF48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF49_Pos        (17U)
#define EXTI2_RPR2_RPIF49_Msk        (0x1U << EXTI2_RPR2_RPIF49_Pos)               /*!< 0x00020000 */
#define EXTI2_RPR2_RPIF49            EXTI2_RPR2_RPIF49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF50_Pos        (18U)
#define EXTI2_RPR2_RPIF50_Msk        (0x1U << EXTI2_RPR2_RPIF50_Pos)               /*!< 0x00040000 */
#define EXTI2_RPR2_RPIF50            EXTI2_RPR2_RPIF50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF51_Pos        (19U)
#define EXTI2_RPR2_RPIF51_Msk        (0x1U << EXTI2_RPR2_RPIF51_Pos)               /*!< 0x00080000 */
#define EXTI2_RPR2_RPIF51            EXTI2_RPR2_RPIF51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_RPR2_RPIF59_Pos        (27U)
#define EXTI2_RPR2_RPIF59_Msk        (0x1U << EXTI2_RPR2_RPIF59_Pos)               /*!< 0x08000000 */
#define EXTI2_RPR2_RPIF59            EXTI2_RPR2_RPIF59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF60_Pos        (28U)
#define EXTI2_RPR2_RPIF60_Msk        (0x1U << EXTI2_RPR2_RPIF60_Pos)               /*!< 0x10000000 */
#define EXTI2_RPR2_RPIF60            EXTI2_RPR2_RPIF60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_RPR2_RPIF61_Pos        (29U)
#define EXTI2_RPR2_RPIF61_Msk        (0x1U << EXTI2_RPR2_RPIF61_Pos)               /*!< 0x20000000 */
#define EXTI2_RPR2_RPIF61            EXTI2_RPR2_RPIF61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_FPR2 register  *******************/
#define EXTI2_FPR2_FPIF46_Pos        (14U)
#define EXTI2_FPR2_FPIF46_Msk        (0x1U << EXTI2_FPR2_FPIF46_Pos)               /*!< 0x00004000 */
#define EXTI2_FPR2_FPIF46            EXTI2_FPR2_FPIF46_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF47_Pos        (15U)
#define EXTI2_FPR2_FPIF47_Msk        (0x1U << EXTI2_FPR2_FPIF47_Pos)               /*!< 0x00008000 */
#define EXTI2_FPR2_FPIF47            EXTI2_FPR2_FPIF47_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF48_Pos        (16U)
#define EXTI2_FPR2_FPIF48_Msk        (0x1U << EXTI2_FPR2_FPIF48_Pos)               /*!< 0x00010000 */
#define EXTI2_FPR2_FPIF48            EXTI2_FPR2_FPIF48_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF49_Pos        (17U)
#define EXTI2_FPR2_FPIF49_Msk        (0x1U << EXTI2_FPR2_FPIF49_Pos)               /*!< 0x00020000 */
#define EXTI2_FPR2_FPIF49            EXTI2_FPR2_FPIF49_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF50_Pos        (18U)
#define EXTI2_FPR2_FPIF50_Msk        (0x1U << EXTI2_FPR2_FPIF50_Pos)               /*!< 0x00040000 */
#define EXTI2_FPR2_FPIF50            EXTI2_FPR2_FPIF50_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF51_Pos        (19U)
#define EXTI2_FPR2_FPIF51_Msk        (0x1U << EXTI2_FPR2_FPIF51_Pos)               /*!< 0x00080000 */
#define EXTI2_FPR2_FPIF51            EXTI2_FPR2_FPIF51_Msk                         /*!< Rising trigger event configuration bit of line 51 */
#define EXTI2_FPR2_FPIF59_Pos        (27U)
#define EXTI2_FPR2_FPIF59_Msk        (0x1U << EXTI2_FPR2_FPIF59_Pos)               /*!< 0x08000000 */
#define EXTI2_FPR2_FPIF59            EXTI2_FPR2_FPIF59_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF60_Pos        (28U)
#define EXTI2_FPR2_FPIF60_Msk        (0x1U << EXTI2_FPR2_FPIF60_Pos)               /*!< 0x10000000 */
#define EXTI2_FPR2_FPIF60            EXTI2_FPR2_FPIF60_Msk                         /*!< Rising trigger event configuration bit of line 49 */
#define EXTI2_FPR2_FPIF61_Pos        (29U)
#define EXTI2_FPR2_FPIF61_Msk        (0x1U << EXTI2_FPR2_FPIF61_Pos)               /*!< 0x20000000 */
#define EXTI2_FPR2_FPIF61            EXTI2_FPR2_FPIF61_Msk                         /*!< Rising trigger event configuration bit of line 49 */

/******************  Bit definition for EXTI2_SECCFGR2  register  ******************/
/* no event input 32  */
#define EXTI2_SECCFGR2_SEC33_Pos  (1U)
#define EXTI2_SECCFGR2_SEC33_Msk  (0x1U << EXTI2_SECCFGR2_SEC33_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR2_SEC33      EXTI2_SECCFGR2_SEC33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI2_SECCFGR2_SEC34_Pos  (2U)
#define EXTI2_SECCFGR2_SEC34_Msk  (0x1U << EXTI2_SECCFGR2_SEC34_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR2_SEC34      EXTI2_SECCFGR2_SEC34_Msk                    /*!< SEC/PRIV enable on event input 34 */
#define EXTI2_SECCFGR2_SEC35_Pos  (3U)
#define EXTI2_SECCFGR2_SEC35_Msk  (0x1U << EXTI2_SECCFGR2_SEC35_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR2_SEC35      EXTI2_SECCFGR2_SEC35_Msk                    /*!< SEC/PRIV enable on event input 3( */
#define EXTI2_SECCFGR2_SEC36_Pos  (4U)
#define EXTI2_SECCFGR2_SEC36_Msk  (0x1U << EXTI2_SECCFGR2_SEC36_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR2_SEC36      EXTI2_SECCFGR2_SEC36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI2_SECCFGR2_SEC37_Pos  (5U)
#define EXTI2_SECCFGR2_SEC37_Msk  (0x1U << EXTI2_SECCFGR2_SEC37_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR2_SEC37      EXTI2_SECCFGR2_SEC37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI2_SECCFGR2_SEC38_Pos  (6U)
#define EXTI2_SECCFGR2_SEC38_Msk  (0x1U << EXTI2_SECCFGR2_SEC38_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR2_SEC38      EXTI2_SECCFGR2_SEC38_Msk                    /*!< SEC/PRIV enable on event input 38 */
/* no event input 39  */
#define EXTI2_SECCFGR2_SEC40_Pos  (8U)
#define EXTI2_SECCFGR2_SEC40_Msk  (0x1U << EXTI2_SECCFGR2_SEC40_Pos)          /*!< 0x00000100 */
#define EXTI2_SECCFGR2_SEC40      EXTI2_SECCFGR2_SEC40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI2_SECCFGR2_SEC41_Pos  (9U)
#define EXTI2_SECCFGR2_SEC41_Msk  (0x1U << EXTI2_SECCFGR2_SEC41_Pos)          /*!< 0x00000200 */
#define EXTI2_SECCFGR2_SEC41      EXTI2_SECCFGR2_SEC41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI2_SECCFGR2_SEC42_Pos  (10U)
#define EXTI2_SECCFGR2_SEC42_Msk  (0x1U << EXTI2_SECCFGR2_SEC42_Pos)         /*!< 0x00000400 */
#define EXTI2_SECCFGR2_SEC42      EXTI2_SECCFGR2_SEC42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI2_SECCFGR2_SEC43_Pos  (11U)
#define EXTI2_SECCFGR2_SEC43_Msk  (0x1U << EXTI2_SECCFGR2_SEC43_Pos)         /*!< 0x00000800 */
#define EXTI2_SECCFGR2_SEC43      EXTI2_SECCFGR2_SEC43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI2_SECCFGR2_SEC44_Pos  (12U)
#define EXTI2_SECCFGR2_SEC44_Msk  (0x1U << EXTI2_SECCFGR2_SEC44_Pos)         /*!< 0x00001000 */
#define EXTI2_SECCFGR2_SEC44      EXTI2_SECCFGR2_SEC44_Msk                   /*!< SEC/PRIV enable on event input 45 */
/* no event input 45  */
#define EXTI2_SECCFGR2_SEC46_Pos  (14U)
#define EXTI2_SECCFGR2_SEC46_Msk  (0x1U << EXTI2_SECCFGR2_SEC46_Pos)         /*!< 0x00004000 */
#define EXTI2_SECCFGR2_SEC46      EXTI2_SECCFGR2_SEC46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI2_SECCFGR2_SEC47_Pos  (15U)
#define EXTI2_SECCFGR2_SEC47_Msk   (0x1U << EXTI2_SECCFGR2_SEC47_Pos)         /*!< 0x00008000 */
#define EXTI2_SECCFGR2_SEC47      EXTI2_SECCFGR2_SEC47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI2_SECCFGR2_SEC48_Pos  (16U)
#define EXTI2_SECCFGR2_SEC48_Msk  (0x1U << EXTI2_SECCFGR2_SEC48_Pos)         /*!< 0x00010000 */
#define EXTI2_SECCFGR2_SEC48      EXTI2_SECCFGR2_SEC48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI2_SECCFGR2_SEC49_Pos  (17U)
#define EXTI2_SECCFGR2_SEC49_Msk  (0x1U << EXTI2_SECCFGR2_SEC49_Pos)         /*!< 0x00020000 */
#define EXTI2_SECCFGR2_SEC49      EXTI2_SECCFGR2_SEC49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI2_SECCFGR2_SEC50_Pos  (18U)
#define EXTI2_SECCFGR2_SEC50_Msk  (0x1U << EXTI2_SECCFGR2_SEC50_Pos)         /*!< 0x00040000 */
#define EXTI2_SECCFGR2_SEC50      EXTI2_SECCFGR2_SEC50_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_SECCFGR2_SEC51_Pos  (19U)
#define EXTI2_SECCFGR2_SEC51_Msk  (0x1U << EXTI2_SECCFGR2_SEC51_Pos)         /*!< 0x00080000 */
#define EXTI2_SECCFGR2_SEC51      EXTI2_SECCFGR2_SEC51_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_SECCFGR2_SEC52_Pos  (20U)
#define EXTI2_SECCFGR2_SEC52_Msk  (0x1U << EXTI2_SECCFGR2_SEC52_Pos)         /*!< 0x00100000 */
#define EXTI2_SECCFGR2_SEC52      EXTI2_SECCFGR2_SEC52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI2_SECCFGR2_SEC53_Pos  (21U)
#define EXTI2_SECCFGR2_SEC53_Msk  (0x1U << EXTI2_SECCFGR2_SEC53_Pos)         /*!< 0x00200000 */
#define EXTI2_SECCFGR2_SEC53      EXTI2_SECCFGR2_SEC53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI2_SECCFGR2_SEC54_Pos  (22U)
#define EXTI2_SECCFGR2_SEC54_Msk  (0x1U << EXTI2_SECCFGR2_SEC54_Pos)         /*!< 0x00400000 */
#define EXTI2_SECCFGR2_SEC54      EXTI2_SECCFGR2_SEC54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI2_SECCFGR2_SEC55_Pos  (23U)
#define EXTI2_SECCFGR2_SEC55_Msk  (0x1U << EXTI2_SECCFGR2_SEC55_Pos)         /*!< 0x00800000 */
#define EXTI2_SECCFGR2_SEC55      EXTI2_SECCFGR2_SEC55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI2_SECCFGR2_SEC56_Pos  (24U)
#define EXTI2_SECCFGR2_SEC56_Msk  (0x1U << EXTI2_SECCFGR2_SEC56_Pos)         /*!< 0x01000000 */
#define EXTI2_SECCFGR2_SEC56      EXTI2_SECCFGR2_SEC56_Msk                   /*!< SEC/PRIV enable on event input 56 */
/* no event input 57  */
/* no event input 58  */
#define EXTI2_SECCFGR2_SEC59_Pos  (27U)
#define EXTI2_SECCFGR2_SEC59_Msk  (0x1U << EXTI2_SECCFGR2_SEC59_Pos)         /*!< 0x08000000 */
#define EXTI2_SECCFGR2_SEC59      EXTI2_SECCFGR2_SEC59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI2_SECCFGR2_SEC60_Pos  (28U)
#define EXTI2_SECCFGR2_SEC60_Msk  (0x1U << EXTI2_SECCFGR2_SEC60_Pos)         /*!< 0x10000000 */
#define EXTI2_SECCFGR2_SEC60      EXTI2_SECCFGR2_SEC60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI2_SECCFGR2_SEC61_Pos  (29U)
#define EXTI2_SECCFGR2_SEC61_Msk  (0x1U << EXTI2_SECCFGR2_SEC61_Pos)         /*!< 0x20000000 */
#define EXTI2_SECCFGR2_SEC61      EXTI2_SECCFGR2_SEC61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI2_SECCFGR2_SEC62_Pos  (30U)
#define EXTI2_SECCFGR2_SEC62_Msk  (0x1U << EXTI2_SECCFGR2_SEC62_Pos)         /*!< 0x40000000 */
#define EXTI2_SECCFGR2_SEC62      EXTI2_SECCFGR2_SEC62_Msk                   /*!< SEC/PRIV enable on event input 62 */
#define EXTI2_SECCFGR2_SEC63_Pos  (31U)
#define EXTI2_SECCFGR2_SEC63_Msk  (0x1U << EXTI2_SECCFGR2_SEC63_Pos)         /*!< 0x80000000 */
#define EXTI2_SECCFGR2_SEC63      EXTI2_SECCFGR2_SEC63_Msk                   /*!< SEC/PRIV enable on event input 63 */

/******************  Bit definition for EXTI2_PRIVCFGR2 register  ******************/
/* no event input 32  */
#define EXTI2_PRIVCFGR2_PRIV33_Pos  (1U)
#define EXTI2_PRIVCFGR2_PRIV33_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV33_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR2_PRIV33      EXTI2_PRIVCFGR2_PRIV33_Msk                    /*!< SEC/PRIV enable on event input 33 */
#define EXTI2_PRIVCFGR2_PRIV34_Pos  (2U)
#define EXTI2_PRIVCFGR2_PRIV34_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV34_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR2_PRIV34      EXTI2_PRIVCFGR2_PRIV34_Msk                    /*!< SEC/PRIV enable on event input 34 */
#define EXTI2_PRIVCFGR2_PRIV35_Pos  (3U)
#define EXTI2_PRIVCFGR2_PRIV35_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV35_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR2_PRIV35      EXTI2_PRIVCFGR2_PRIV35_Msk                    /*!< SEC/PRIV enable on event input 3( */
#define EXTI2_PRIVCFGR2_PRIV36_Pos  (4U)
#define EXTI2_PRIVCFGR2_PRIV36_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV36_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR2_PRIV36      EXTI2_PRIVCFGR2_PRIV36_Msk                    /*!< SEC/PRIV enable on event input 36 */
#define EXTI2_PRIVCFGR2_PRIV37_Pos  (5U)
#define EXTI2_PRIVCFGR2_PRIV37_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV37_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR2_PRIV37      EXTI2_PRIVCFGR2_PRIV37_Msk                    /*!< SEC/PRIV enable on event input 37 */
#define EXTI2_PRIVCFGR2_PRIV38_Pos  (6U)
#define EXTI2_PRIVCFGR2_PRIV38_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV38_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR2_PRIV38      EXTI2_PRIVCFGR2_PRIV38_Msk                    /*!< SEC/PRIV enable on event input 38 */
/* no event input 39  */
#define EXTI2_PRIVCFGR2_PRIV40_Pos  (8U)
#define EXTI2_PRIVCFGR2_PRIV40_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV40_Pos)          /*!< 0x00000100 */
#define EXTI2_PRIVCFGR2_PRIV40      EXTI2_PRIVCFGR2_PRIV40_Msk                    /*!< SEC/PRIV enable on event input 40 */
#define EXTI2_PRIVCFGR2_PRIV41_Pos  (9U)
#define EXTI2_PRIVCFGR2_PRIV41_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV41_Pos)          /*!< 0x00000200 */
#define EXTI2_PRIVCFGR2_PRIV41      EXTI2_PRIVCFGR2_PRIV41_Msk                    /*!< SEC/PRIV enable on event input 41 */
#define EXTI2_PRIVCFGR2_PRIV42_Pos  (10U)
#define EXTI2_PRIVCFGR2_PRIV42_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV42_Pos)         /*!< 0x00000400 */
#define EXTI2_PRIVCFGR2_PRIV42      EXTI2_PRIVCFGR2_PRIV42_Msk                   /*!< SEC/PRIV enable on event input 42 */
#define EXTI2_PRIVCFGR2_PRIV43_Pos  (11U)
#define EXTI2_PRIVCFGR2_PRIV43_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV43_Pos)         /*!< 0x00000800 */
#define EXTI2_PRIVCFGR2_PRIV43      EXTI2_PRIVCFGR2_PRIV43_Msk                   /*!< SEC/PRIV enable on event input 43 */
#define EXTI2_PRIVCFGR2_PRIV44_Pos  (12U)
#define EXTI2_PRIVCFGR2_PRIV44_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV44_Pos)         /*!< 0x00001000 */
#define EXTI2_PRIVCFGR2_PRIV44      EXTI2_PRIVCFGR2_PRIV44_Msk                   /*!< SEC/PRIV enable on event input 45 */
/* no event input 45  */
#define EXTI2_PRIVCFGR2_PRIV46_Pos  (14U)
#define EXTI2_PRIVCFGR2_PRIV46_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV46_Pos)         /*!< 0x00004000 */
#define EXTI2_PRIVCFGR2_PRIV46      EXTI2_PRIVCFGR2_PRIV46_Msk                   /*!< SEC/PRIV enable on event input 46 */
#define EXTI2_PRIVCFGR2_PRIV47_Pos  (15U)
#define EXTI2_PRIVCFGR2_PRIV47_Msk   (0x1U << EXTI2_PRIVCFGR2_PRIV47_Pos)         /*!< 0x00008000 */
#define EXTI2_PRIVCFGR2_PRIV47      EXTI2_PRIVCFGR2_PRIV47_Msk                   /*!< SEC/PRIV enable on event input 47 */
#define EXTI2_PRIVCFGR2_PRIV48_Pos  (16U)
#define EXTI2_PRIVCFGR2_PRIV48_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV48_Pos)         /*!< 0x00010000 */
#define EXTI2_PRIVCFGR2_PRIV48      EXTI2_PRIVCFGR2_PRIV48_Msk                   /*!< SEC/PRIV enable on event input 48 */
#define EXTI2_PRIVCFGR2_PRIV49_Pos  (17U)
#define EXTI2_PRIVCFGR2_PRIV49_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV49_Pos)         /*!< 0x00020000 */
#define EXTI2_PRIVCFGR2_PRIV49      EXTI2_PRIVCFGR2_PRIV49_Msk                   /*!< SEC/PRIV enable on event input 49 */
#define EXTI2_PRIVCFGR2_PRIV50_Pos  (18U)
#define EXTI2_PRIVCFGR2_PRIV50_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV50_Pos)         /*!< 0x00040000 */
#define EXTI2_PRIVCFGR2_PRIV50      EXTI2_PRIVCFGR2_PRIV50_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_PRIVCFGR2_PRIV51_Pos  (19U)
#define EXTI2_PRIVCFGR2_PRIV51_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV51_Pos)         /*!< 0x00080000 */
#define EXTI2_PRIVCFGR2_PRIV51      EXTI2_PRIVCFGR2_PRIV51_Msk                   /*!< SEC/PRIV enable on event input 50 */
#define EXTI2_PRIVCFGR2_PRIV52_Pos  (20U)
#define EXTI2_PRIVCFGR2_PRIV52_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV52_Pos)         /*!< 0x00100000 */
#define EXTI2_PRIVCFGR2_PRIV52      EXTI2_PRIVCFGR2_PRIV52_Msk                   /*!< SEC/PRIV enable on event input 52 */
#define EXTI2_PRIVCFGR2_PRIV53_Pos  (21U)
#define EXTI2_PRIVCFGR2_PRIV53_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV53_Pos)         /*!< 0x00200000 */
#define EXTI2_PRIVCFGR2_PRIV53      EXTI2_PRIVCFGR2_PRIV53_Msk                   /*!< SEC/PRIV enable on event input 53 */
#define EXTI2_PRIVCFGR2_PRIV54_Pos  (22U)
#define EXTI2_PRIVCFGR2_PRIV54_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV54_Pos)         /*!< 0x00400000 */
#define EXTI2_PRIVCFGR2_PRIV54      EXTI2_PRIVCFGR2_PRIV54_Msk                   /*!< SEC/PRIV enable on event input 54 */
#define EXTI2_PRIVCFGR2_PRIV55_Pos  (23U)
#define EXTI2_PRIVCFGR2_PRIV55_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV55_Pos)         /*!< 0x00800000 */
#define EXTI2_PRIVCFGR2_PRIV55      EXTI2_PRIVCFGR2_PRIV55_Msk                   /*!< SEC/PRIV enable on event input 55 */
#define EXTI2_PRIVCFGR2_PRIV56_Pos  (24U)
#define EXTI2_PRIVCFGR2_PRIV56_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV56_Pos)         /*!< 0x01000000 */
#define EXTI2_PRIVCFGR2_PRIV56      EXTI2_PRIVCFGR2_PRIV56_Msk                   /*!< SEC/PRIV enable on event input 56 */
/* no event input 57  */
/* no event input 58  */
#define EXTI2_PRIVCFGR2_PRIV59_Pos  (27U)
#define EXTI2_PRIVCFGR2_PRIV59_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV59_Pos)         /*!< 0x08000000 */
#define EXTI2_PRIVCFGR2_PRIV59      EXTI2_PRIVCFGR2_PRIV59_Msk                   /*!< SEC/PRIV enable on event input 59 */
#define EXTI2_PRIVCFGR2_PRIV60_Pos  (28U)
#define EXTI2_PRIVCFGR2_PRIV60_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV60_Pos)         /*!< 0x10000000 */
#define EXTI2_PRIVCFGR2_PRIV60      EXTI2_PRIVCFGR2_PRIV60_Msk                   /*!< SEC/PRIV enable on event input 60 */
#define EXTI2_PRIVCFGR2_PRIV61_Pos  (29U)
#define EXTI2_PRIVCFGR2_PRIV61_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV61_Pos)         /*!< 0x20000000 */
#define EXTI2_PRIVCFGR2_PRIV61      EXTI2_PRIVCFGR2_PRIV61_Msk                   /*!< SEC/PRIV enable on event input 61 */
#define EXTI2_PRIVCFGR2_PRIV62_Pos  (30U)
#define EXTI2_PRIVCFGR2_PRIV62_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV62_Pos)         /*!< 0x40000000 */
#define EXTI2_PRIVCFGR2_PRIV62      EXTI2_PRIVCFGR2_PRIV62_Msk                   /*!< SEC/PRIV enable on event input 62 */
#define EXTI2_PRIVCFGR2_PRIV63_Pos  (31U)
#define EXTI2_PRIVCFGR2_PRIV63_Msk  (0x1U << EXTI2_PRIVCFGR2_PRIV63_Pos)         /*!< 0x80000000 */
#define EXTI2_PRIVCFGR2_PRIV63      EXTI2_PRIVCFGR2_PRIV63_Msk                   /*!< SEC/PRIV enable on event input 63 */

/******************  Bit definition for EXTI2_RTSR3 register  *******************/
#define EXTI2_RTSR3_RT64_Pos        (0U)
#define EXTI2_RTSR3_RT64_Msk        (0x1U << EXTI2_RTSR3_RT64_Pos)               /*!< 0x00000001 */
#define EXTI2_RTSR3_RT64            EXTI2_RTSR3_RT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_RTSR3_RT65_Pos        (1U)
#define EXTI2_RTSR3_RT65_Msk        (0x1U << EXTI2_RTSR3_RT65_Pos)               /*!< 0x00000002 */
#define EXTI2_RTSR3_RT65            EXTI2_RTSR3_RT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_RTSR3_RT66_Pos        (2U)
#define EXTI2_RTSR3_RT66_Msk        (0x1U << EXTI2_RTSR3_RT66_Pos)               /*!< 0x00000004 */
#define EXTI2_RTSR3_RT66            EXTI2_RTSR3_RT66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_FTSR3 register  *******************/
#define EXTI2_FTSR3_FT64_Pos        (0U)
#define EXTI2_FTSR3_FT64_Msk        (0x1U << EXTI2_FTSR3_FT64_Pos)               /*!< 0x00000001 */
#define EXTI2_FTSR3_FT64            EXTI2_FTSR3_FT64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_FTSR3_FT65_Pos        (1U)
#define EXTI2_FTSR3_FT65_Msk        (0x1U << EXTI2_FTSR3_FT65_Pos)               /*!< 0x00000002 */
#define EXTI2_FTSR3_FT65            EXTI2_FTSR3_FT65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_FTSR3_FT66_Pos        (2U)
#define EXTI2_FTSR3_FT66_Msk        (0x1U << EXTI2_FTSR3_FT66_Pos)               /*!< 0x00000004 */
#define EXTI2_FTSR3_FT66            EXTI2_FTSR3_FT66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_SWIER3 register  ******************/
#define EXTI2_SWIER3_SWI64_Pos    (0U)
#define EXTI2_SWIER3_SWI64_Msk    (0x1U << EXTI2_SWIER3_SWI64_Pos)           /*!< 0x00000001 */
#define EXTI2_SWIER3_SWI64        EXTI2_SWIER3_SWI64_Msk                     /*!< Software Interrupt on line 85 */
#define EXTI2_SWIER3_SWI65_Pos    (1U)
#define EXTI2_SWIER3_SWI65_Msk    (0x1U << EXTI2_SWIER3_SWI65_Pos)           /*!< 0x00000002 */
#define EXTI2_SWIER3_SWI65        EXTI2_SWIER3_SWI65_Msk                     /*!< Software Interrupt on line 86 */
#define EXTI2_SWIER3_SWI66_Pos    (2U)
#define EXTI2_SWIER3_SWI66_Msk    (0x1U << EXTI2_SWIER3_SWI66_Pos)           /*!< 0x00000008 */
#define EXTI2_SWIER3_SWI66        EXTI2_SWIER3_SWI66_Msk                     /*!< Software Interrupt on line 85 */

/******************  Bit definition for EXTI2_RPR3 register  *******************/
#define EXTI2_RPR3_RPIF64_Pos        (0U)
#define EXTI2_RPR3_RPIF64_Msk        (0x1U << EXTI2_RPR3_RPIF64_Pos)               /*!< 0x00000001 */
#define EXTI2_RPR3_RPIF64            EXTI2_RPR3_RPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_RPR3_RPIF65_Pos        (1U)
#define EXTI2_RPR3_RPIF65_Msk        (0x1U << EXTI2_RPR3_RPIF65_Pos)               /*!< 0x00000002 */
#define EXTI2_RPR3_RPIF65            EXTI2_RPR3_RPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_RPR3_RPIF66_Pos        (2U)
#define EXTI2_RPR3_RPIF66_Msk        (0x1U << EXTI2_RPR3_RPIF66_Pos)               /*!< 0x00000004 */
#define EXTI2_RPR3_RPIF66            EXTI2_RPR3_RPIF66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_FPR3 register  *******************/
#define EXTI2_FPR3_FPIF64_Pos        (0U)
#define EXTI2_FPR3_FPIF64_Msk        (0x1U << EXTI2_FPR3_FPIF64_Pos)               /*!< 0x00000001 */
#define EXTI2_FPR3_FPIF64            EXTI2_FPR3_FPIF64_Msk                         /*!< Rising trigger event configuration bit of line 85 */
#define EXTI2_FPR3_FPIF65_Pos        (1U)
#define EXTI2_FPR3_FPIF65_Msk        (0x1U << EXTI2_FPR3_FPIF65_Pos)               /*!< 0x00000002 */
#define EXTI2_FPR3_FPIF65            EXTI2_FPR3_FPIF65_Msk                         /*!< Rising trigger event configuration bit of line 86 */
#define EXTI2_FPR3_FPIF66_Pos        (2U)
#define EXTI2_FPR3_FPIF66_Msk        (0x1U << EXTI2_FPR3_FPIF66_Pos)               /*!< 0x00000004 */
#define EXTI2_FPR3_FPIF66            EXTI2_FPR3_FPIF66_Msk                         /*!< Rising trigger event configuration bit of line 85 */

/******************  Bit definition for EXTI2_SECCFGR3  register  ******************/
#define EXTI2_SECCFGR3_SEC64_Pos  (0U)
#define EXTI2_SECCFGR3_SEC64_Msk  (0x1U << EXTI2_SECCFGR3_SEC64_Pos)          /*!< 0x00000001 */
#define EXTI2_SECCFGR3_SEC64      EXTI2_SECCFGR3_SEC64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI2_SECCFGR3_SEC65_Pos  (1U)
#define EXTI2_SECCFGR3_SEC65_Msk  (0x1U << EXTI2_SECCFGR3_SEC65_Pos)          /*!< 0x00000002 */
#define EXTI2_SECCFGR3_SEC65      EXTI2_SECCFGR3_SEC65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI2_SECCFGR3_SEC66_Pos  (2U)
#define EXTI2_SECCFGR3_SEC66_Msk  (0x1U << EXTI2_SECCFGR3_SEC66_Pos)          /*!< 0x00000004 */
#define EXTI2_SECCFGR3_SEC66      EXTI2_SECCFGR3_SEC66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI2_SECCFGR3_SEC67_Pos  (3U)
#define EXTI2_SECCFGR3_SEC67_Msk  (0x1U << EXTI2_SECCFGR3_SEC67_Pos)          /*!< 0x00000008 */
#define EXTI2_SECCFGR3_SEC67      EXTI2_SECCFGR3_SEC67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI2_SECCFGR3_SEC68_Pos  (4U)
#define EXTI2_SECCFGR3_SEC68_Msk  (0x1U << EXTI2_SECCFGR3_SEC68_Pos)          /*!< 0x00000010 */
#define EXTI2_SECCFGR3_SEC68      EXTI2_SECCFGR3_SEC68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI2_SECCFGR3_SEC69_Pos  (5U)
#define EXTI2_SECCFGR3_SEC69_Msk  (0x1U << EXTI2_SECCFGR3_SEC69_Pos)          /*!< 0x00000020 */
#define EXTI2_SECCFGR3_SEC69      EXTI2_SECCFGR3_SEC69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI2_SECCFGR3_SEC70_Pos  (6U)
#define EXTI2_SECCFGR3_SEC70_Msk  (0x1U << EXTI2_SECCFGR3_SEC70_Pos)          /*!< 0x00000040 */
#define EXTI2_SECCFGR3_SEC70      EXTI2_SECCFGR3_SEC70_Msk                    /*!< SEC/PRIV enable on event input 70 */
/* no event input 71 - 75 */
#define EXTI2_SECCFGR3_SEC76_Pos  (12U)
#define EXTI2_SECCFGR3_SEC76_Msk  (0x1U << EXTI2_SECCFGR3_SEC76_Pos)           /*!< 0x00001000 */
#define EXTI2_SECCFGR3_SEC76      EXTI2_SECCFGR3_SEC76_Msk                     /*!< SEC/PRIV enable on event input 76 */
/* no event input 77 - 95 */

/******************  Bit definition for EXTI2_PRIVCFGR3 register  ******************/
#define EXTI2_PRIVCFGR3_PRIV64_Pos  (0U)
#define EXTI2_PRIVCFGR3_PRIV64_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV64_Pos)          /*!< 0x00000001 */
#define EXTI2_PRIVCFGR3_PRIV64      EXTI2_PRIVCFGR3_PRIV64_Msk                    /*!< SEC/PRIV enable on event input 64 */
#define EXTI2_PRIVCFGR3_PRIV65_Pos  (1U)
#define EXTI2_PRIVCFGR3_PRIV65_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV65_Pos)          /*!< 0x00000002 */
#define EXTI2_PRIVCFGR3_PRIV65      EXTI2_PRIVCFGR3_PRIV65_Msk                    /*!< SEC/PRIV enable on event input 65 */
#define EXTI2_PRIVCFGR3_PRIV66_Pos  (2U)
#define EXTI2_PRIVCFGR3_PRIV66_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV66_Pos)          /*!< 0x00000004 */
#define EXTI2_PRIVCFGR3_PRIV66      EXTI2_PRIVCFGR3_PRIV66_Msk                    /*!< SEC/PRIV enable on event input 66 */
#define EXTI2_PRIVCFGR3_PRIV67_Pos  (3U)
#define EXTI2_PRIVCFGR3_PRIV67_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV67_Pos)          /*!< 0x00000008 */
#define EXTI2_PRIVCFGR3_PRIV67      EXTI2_PRIVCFGR3_PRIV67_Msk                    /*!< SEC/PRIV enable on event input 67 */
#define EXTI2_PRIVCFGR3_PRIV68_Pos  (4U)
#define EXTI2_PRIVCFGR3_PRIV68_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV68_Pos)          /*!< 0x00000010 */
#define EXTI2_PRIVCFGR3_PRIV68      EXTI2_PRIVCFGR3_PRIV68_Msk                    /*!< SEC/PRIV enable on event input 68 */
#define EXTI2_PRIVCFGR3_PRIV69_Pos  (5U)
#define EXTI2_PRIVCFGR3_PRIV69_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV69_Pos)          /*!< 0x00000020 */
#define EXTI2_PRIVCFGR3_PRIV69      EXTI2_PRIVCFGR3_PRIV69_Msk                    /*!< SEC/PRIV enable on event input 69 */
#define EXTI2_PRIVCFGR3_PRIV70_Pos  (6U)
#define EXTI2_PRIVCFGR3_PRIV70_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV70_Pos)          /*!< 0x00000040 */
#define EXTI2_PRIVCFGR3_PRIV70      EXTI2_PRIVCFGR3_PRIV70_Msk                    /*!< SEC/PRIV enable on event input 70 */
/* no event input 71 - 75 */
#define EXTI2_PRIVCFGR3_PRIV76_Pos  (12U)
#define EXTI2_PRIVCFGR3_PRIV76_Msk  (0x1U << EXTI2_PRIVCFGR3_PRIV76_Pos)           /*!< 0x00001000 */
#define EXTI2_PRIVCFGR3_PRIV76      EXTI2_PRIVCFGR3_PRIV76_Msk                     /*!< SEC/PRIV enable on event input 76 */
/* no event input 77 - 95 */

/*******************  Bit definition for EXTI2_CmIMR1 register  *******************/
#define EXTI2_IMR1_IM0_Pos          (0U)
#define EXTI2_IMR1_IM0_Msk          (0x1U << EXTI2_IMR1_IM0_Pos)                 /*!< 0x00000001 */
#define EXTI2_IMR1_IM0              EXTI2_IMR1_IM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI2_IMR1_IM1_Pos          (1U)
#define EXTI2_IMR1_IM1_Msk          (0x1U << EXTI2_IMR1_IM1_Pos)                 /*!< 0x00000002 */
#define EXTI2_IMR1_IM1              EXTI2_IMR1_IM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI2_IMR1_IM2_Pos          (2U)
#define EXTI2_IMR1_IM2_Msk          (0x1U << EXTI2_IMR1_IM2_Pos)                 /*!< 0x00000004 */
#define EXTI2_IMR1_IM2              EXTI2_IMR1_IM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI2_IMR1_IM3_Pos          (3U)
#define EXTI2_IMR1_IM3_Msk          (0x1U << EXTI2_IMR1_IM3_Pos)                 /*!< 0x00000008 */
#define EXTI2_IMR1_IM3              EXTI2_IMR1_IM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI2_IMR1_IM4_Pos          (4U)
#define EXTI2_IMR1_IM4_Msk          (0x1U << EXTI2_IMR1_IM4_Pos)                 /*!< 0x00000010 */
#define EXTI2_IMR1_IM4              EXTI2_IMR1_IM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI2_IMR1_IM5_Pos          (5U)
#define EXTI2_IMR1_IM5_Msk          (0x1U << EXTI2_IMR1_IM5_Pos)                 /*!< 0x00000020 */
#define EXTI2_IMR1_IM5              EXTI2_IMR1_IM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI2_IMR1_IM6_Pos          (6U)
#define EXTI2_IMR1_IM6_Msk          (0x1U << EXTI2_IMR1_IM6_Pos)                 /*!< 0x00000040 */
#define EXTI2_IMR1_IM6              EXTI2_IMR1_IM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI2_IMR1_IM7_Pos          (7U)
#define EXTI2_IMR1_IM7_Msk          (0x1U << EXTI2_IMR1_IM7_Pos)                 /*!< 0x00000080 */
#define EXTI2_IMR1_IM7              EXTI2_IMR1_IM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI2_IMR1_IM8_Pos          (8U)
#define EXTI2_IMR1_IM8_Msk          (0x1U << EXTI2_IMR1_IM8_Pos)                 /*!< 0x00000100 */
#define EXTI2_IMR1_IM8              EXTI2_IMR1_IM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI2_IMR1_IM9_Pos          (9U)
#define EXTI2_IMR1_IM9_Msk          (0x1U << EXTI2_IMR1_IM9_Pos)                 /*!< 0x00000200 */
#define EXTI2_IMR1_IM9              EXTI2_IMR1_IM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI2_IMR1_IM10_Pos         (10U)
#define EXTI2_IMR1_IM10_Msk         (0x1U << EXTI2_IMR1_IM10_Pos)                /*!< 0x00000400 */
#define EXTI2_IMR1_IM10             EXTI2_IMR1_IM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI2_IMR1_IM11_Pos         (11U)
#define EXTI2_IMR1_IM11_Msk         (0x1U << EXTI2_IMR1_IM11_Pos)                /*!< 0x00000800 */
#define EXTI2_IMR1_IM11             EXTI2_IMR1_IM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI2_IMR1_IM12_Pos         (12U)
#define EXTI2_IMR1_IM12_Msk         (0x1U << EXTI2_IMR1_IM12_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR1_IM12             EXTI2_IMR1_IM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI2_IMR1_IM13_Pos         (13U)
#define EXTI2_IMR1_IM13_Msk         (0x1U << EXTI2_IMR1_IM13_Pos)                /*!< 0x00002000 */
#define EXTI2_IMR1_IM13             EXTI2_IMR1_IM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI2_IMR1_IM14_Pos         (14U)
#define EXTI2_IMR1_IM14_Msk         (0x1U << EXTI2_IMR1_IM14_Pos)                /*!< 0x00004000 */
#define EXTI2_IMR1_IM14             EXTI2_IMR1_IM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI2_IMR1_IM15_Pos         (15U)
#define EXTI2_IMR1_IM15_Msk         (0x1U << EXTI2_IMR1_IM15_Pos)                /*!< 0x00008000 */
#define EXTI2_IMR1_IM15             EXTI2_IMR1_IM15_Msk                          /*!< Interrupt Mask on line 15 */
#define EXTI2_IMR1_IM16_Pos         (16U)
#define EXTI2_IMR1_IM16_Msk         (0x1U << EXTI2_IMR1_IM16_Pos)                /*!< 0x00010000 */
#define EXTI2_IMR1_IM16             EXTI2_IMR1_IM16_Msk                          /*!< Interrupt Mask on line 16 */
#define EXTI2_IMR1_IM17_Pos         (17U)
#define EXTI2_IMR1_IM17_Msk         (0x1U << EXTI2_IMR1_IM17_Pos)                /*!< 0x00020000 */
#define EXTI2_IMR1_IM17             EXTI2_IMR1_IM17_Msk                          /*!< Interrupt Mask on line 17 */
#define EXTI2_IMR1_IM18_Pos         (18U)
#define EXTI2_IMR1_IM18_Msk         (0x1U << EXTI2_IMR1_IM18_Pos)                /*!< 0x00040000 */
#define EXTI2_IMR1_IM18             EXTI2_IMR1_IM18_Msk                          /*!< Interrupt Mask on line 18 */
#define EXTI2_IMR1_IM19_Pos         (19U)
#define EXTI2_IMR1_IM19_Msk         (0x1U << EXTI2_IMR1_IM19_Pos)                /*!< 0x00080000 */
#define EXTI2_IMR1_IM19             EXTI2_IMR1_IM19_Msk                          /*!< Interrupt Mask on line 19 */
#define EXTI2_IMR1_IM20_Pos         (20U)
#define EXTI2_IMR1_IM20_Msk         (0x1U << EXTI2_IMR1_IM20_Pos)                /*!< 0x00100000 */
#define EXTI2_IMR1_IM20             EXTI2_IMR1_IM20_Msk                          /*!< Interrupt Mask on line 20 */
#define EXTI2_IMR1_IM21_Pos         (21U)
#define EXTI2_IMR1_IM21_Msk         (0x1U << EXTI2_IMR1_IM21_Pos)                /*!< 0x00200000 */
#define EXTI2_IMR1_IM21             EXTI2_IMR1_IM21_Msk                          /*!< Interrupt Mask on line 21 */
#define EXTI2_IMR1_IM22_Pos         (22U)
#define EXTI2_IMR1_IM22_Msk         (0x1U << EXTI2_IMR1_IM22_Pos)                /*!< 0x00400000 */
#define EXTI2_IMR1_IM22             EXTI2_IMR1_IM22_Msk                          /*!< Interrupt Mask on line 22 */
#define EXTI2_IMR1_IM23_Pos         (23U)
#define EXTI2_IMR1_IM23_Msk         (0x1U << EXTI2_IMR1_IM23_Pos)                /*!< 0x00800000 */
#define EXTI2_IMR1_IM23             EXTI2_IMR1_IM23_Msk                          /*!< Interrupt Mask on line 23 */
#define EXTI2_IMR1_IM24_Pos         (24U)
#define EXTI2_IMR1_IM24_Msk         (0x1U << EXTI2_IMR1_IM24_Pos)                /*!< 0x01000000 */
#define EXTI2_IMR1_IM24             EXTI2_IMR1_IM24_Msk                          /*!< Interrupt Mask on line 24 */
#define EXTI2_IMR1_IM25_Pos         (25U)
#define EXTI2_IMR1_IM25_Msk         (0x1U << EXTI2_IMR1_IM25_Pos)                /*!< 0x02000000 */
#define EXTI2_IMR1_IM25             EXTI2_IMR1_IM25_Msk                          /*!< Interrupt Mask on line 25 */
#define EXTI2_IMR1_IM26_Pos         (26U)
#define EXTI2_IMR1_IM26_Msk         (0x1U << EXTI2_IMR1_IM26_Pos)                /*!< 0x04000000 */
#define EXTI2_IMR1_IM26             EXTI2_IMR1_IM26_Msk                          /*!< Interrupt Mask on line 26 */
#define EXTI2_IMR1_IM27_Pos         (27U)
#define EXTI2_IMR1_IM27_Msk         (0x1U << EXTI2_IMR1_IM27_Pos)                /*!< 0x08000000 */
#define EXTI2_IMR1_IM27             EXTI2_IMR1_IM27_Msk                          /*!< Interrupt Mask on line 27 */
/* No interrupt line 28 */
#define EXTI2_IMR1_IM29_Pos         (29U)
#define EXTI2_IMR1_IM29_Msk         (0x1U << EXTI2_IMR1_IM29_Pos)                /*!< 0x20000000 */
#define EXTI2_IMR1_IM29             EXTI2_IMR1_IM29_Msk                          /*!< Interrupt Mask on line 29 */
#define EXTI2_IMR1_IM30_Pos         (30U)
#define EXTI2_IMR1_IM30_Msk         (0x1U << EXTI2_IMR1_IM30_Pos)                /*!< 0x40000000 */
#define EXTI2_IMR1_IM30             EXTI2_IMR1_IM30_Msk                          /*!< Interrupt Mask on line 30 */
#define EXTI2_IMR1_IM31_Pos         (31U)
#define EXTI2_IMR1_IM31_Msk         (0x1U << EXTI2_IMR1_IM31_Pos)                /*!< 0x80000000 */
#define EXTI2_IMR1_IM31             EXTI2_IMR1_IM31_Msk                          /*!< Interrupt Mask on line 31 */

/*******************  Bit definition for EXTI2_CmEMR1 register  *******************/
#define EXTI2_EMR1_EM0_Pos          (0U)
#define EXTI2_EMR1_EM0_Msk          (0x1U << EXTI2_EMR1_EM0_Pos)                 /*!< 0x00000001 */
#define EXTI2_EMR1_EM0              EXTI2_EMR1_EM0_Msk                           /*!< Interrupt Mask on line 0 */
#define EXTI2_EMR1_EM1_Pos          (1U)
#define EXTI2_EMR1_EM1_Msk          (0x1U << EXTI2_EMR1_EM1_Pos)                 /*!< 0x00000002 */
#define EXTI2_EMR1_EM1              EXTI2_EMR1_EM1_Msk                           /*!< Interrupt Mask on line 1 */
#define EXTI2_EMR1_EM2_Pos          (2U)
#define EXTI2_EMR1_EM2_Msk          (0x1U << EXTI2_EMR1_EM2_Pos)                 /*!< 0x00000004 */
#define EXTI2_EMR1_EM2              EXTI2_EMR1_EM2_Msk                           /*!< Interrupt Mask on line 2 */
#define EXTI2_EMR1_EM3_Pos          (3U)
#define EXTI2_EMR1_EM3_Msk          (0x1U << EXTI2_EMR1_EM3_Pos)                 /*!< 0x00000008 */
#define EXTI2_EMR1_EM3              EXTI2_EMR1_EM3_Msk                           /*!< Interrupt Mask on line 3 */
#define EXTI2_EMR1_EM4_Pos          (4U)
#define EXTI2_EMR1_EM4_Msk          (0x1U << EXTI2_EMR1_EM4_Pos)                 /*!< 0x00000010 */
#define EXTI2_EMR1_EM4              EXTI2_EMR1_EM4_Msk                           /*!< Interrupt Mask on line 4 */
#define EXTI2_EMR1_EM5_Pos          (5U)
#define EXTI2_EMR1_EM5_Msk          (0x1U << EXTI2_EMR1_EM5_Pos)                 /*!< 0x00000020 */
#define EXTI2_EMR1_EM5              EXTI2_EMR1_EM5_Msk                           /*!< Interrupt Mask on line 5 */
#define EXTI2_EMR1_EM6_Pos          (6U)
#define EXTI2_EMR1_EM6_Msk          (0x1U << EXTI2_EMR1_EM6_Pos)                 /*!< 0x00000040 */
#define EXTI2_EMR1_EM6              EXTI2_EMR1_EM6_Msk                           /*!< Interrupt Mask on line 6 */
#define EXTI2_EMR1_EM7_Pos          (7U)
#define EXTI2_EMR1_EM7_Msk          (0x1U << EXTI2_EMR1_EM7_Pos)                 /*!< 0x00000080 */
#define EXTI2_EMR1_EM7              EXTI2_EMR1_EM7_Msk                           /*!< Interrupt Mask on line 7 */
#define EXTI2_EMR1_EM8_Pos          (8U)
#define EXTI2_EMR1_EM8_Msk          (0x1U << EXTI2_EMR1_EM8_Pos)                 /*!< 0x00000100 */
#define EXTI2_EMR1_EM8              EXTI2_EMR1_EM8_Msk                           /*!< Interrupt Mask on line 8 */
#define EXTI2_EMR1_EM9_Pos          (9U)
#define EXTI2_EMR1_EM9_Msk          (0x1U << EXTI2_EMR1_EM9_Pos)                 /*!< 0x00000200 */
#define EXTI2_EMR1_EM9              EXTI2_EMR1_EM9_Msk                           /*!< Interrupt Mask on line 9 */
#define EXTI2_EMR1_EM10_Pos         (10U)
#define EXTI2_EMR1_EM10_Msk         (0x1U << EXTI2_EMR1_EM10_Pos)                /*!< 0x00000400 */
#define EXTI2_EMR1_EM10             EXTI2_EMR1_EM10_Msk                          /*!< Interrupt Mask on line 10 */
#define EXTI2_EMR1_EM11_Pos         (11U)
#define EXTI2_EMR1_EM11_Msk         (0x1U << EXTI2_EMR1_EM11_Pos)                /*!< 0x00000800 */
#define EXTI2_EMR1_EM11             EXTI2_EMR1_EM11_Msk                          /*!< Interrupt Mask on line 11 */
#define EXTI2_EMR1_EM12_Pos         (12U)
#define EXTI2_EMR1_EM12_Msk         (0x1U << EXTI2_EMR1_EM12_Pos)                /*!< 0x00001000 */
#define EXTI2_EMR1_EM12             EXTI2_EMR1_EM12_Msk                          /*!< Interrupt Mask on line 12 */
#define EXTI2_EMR1_EM13_Pos         (13U)
#define EXTI2_EMR1_EM13_Msk         (0x1U << EXTI2_EMR1_EM13_Pos)                /*!< 0x00002000 */
#define EXTI2_EMR1_EM13             EXTI2_EMR1_EM13_Msk                          /*!< Interrupt Mask on line 13 */
#define EXTI2_EMR1_EM14_Pos         (14U)
#define EXTI2_EMR1_EM14_Msk         (0x1U << EXTI2_EMR1_EM14_Pos)                /*!< 0x00004000 */
#define EXTI2_EMR1_EM14             EXTI2_EMR1_EM14_Msk                          /*!< Interrupt Mask on line 14 */
#define EXTI2_EMR1_EM15_Pos         (15U)
#define EXTI2_EMR1_EM15_Msk         (0x1U << EXTI2_EMR1_EM15_Pos)                /*!< 0x00008000 */
#define EXTI2_EMR1_EM15             EXTI2_EMR1_EM15_Msk                          /*!< Interrupt Mask on line 15 */

/*******************  Bit definition for EXTI2_CmIMR2 register  *******************/
/* No interrupt line 32 */
#define EXTI2_IMR2_IM33_Pos         (1U)
#define EXTI2_IMR2_IM33_Msk         (0x1U << EXTI2_IMR2_IM33_Pos)                /*!< 0x00000002 */
#define EXTI2_IMR2_IM33             EXTI2_IMR2_IM33_Msk                          /*!< Interrupt Mask on line 33 */
#define EXTI2_IMR2_IM34_Pos         (2U)
#define EXTI2_IMR2_IM34_Msk         (0x1U << EXTI2_IMR2_IM34_Pos)                /*!< 0x00000004 */
#define EXTI2_IMR2_IM34             EXTI2_IMR2_IM34_Msk                          /*!< Interrupt Mask on line 34 */
#define EXTI2_IMR2_IM35_Pos         (3U)
#define EXTI2_IMR2_IM35_Msk         (0x1U << EXTI2_IMR2_IM35_Pos)                /*!< 0x00000008 */
#define EXTI2_IMR2_IM35             EXTI2_IMR2_IM35_Msk                          /*!< Interrupt Mask on line 35 */
#define EXTI2_IMR2_IM36_Pos         (4U)
#define EXTI2_IMR2_IM36_Msk         (0x1U << EXTI2_IMR2_IM36_Pos)                /*!< 0x00000010 */
#define EXTI2_IMR2_IM36             EXTI2_IMR2_IM36_Msk                          /*!< Interrupt Mask on line 36 */
#define EXTI2_IMR2_IM37_Pos         (5U)
#define EXTI2_IMR2_IM37_Msk         (0x1U << EXTI2_IMR2_IM37_Pos)                /*!< 0x00000020 */
#define EXTI2_IMR2_IM37             EXTI2_IMR2_IM37_Msk                          /*!< Interrupt Mask on line 37 */
#define EXTI2_IMR2_IM38_Pos         (6U)
#define EXTI2_IMR2_IM38_Msk         (0x1U << EXTI2_IMR2_IM38_Pos)                /*!< 0x00000040 */
#define EXTI2_IMR2_IM38             EXTI2_IMR2_IM38_Msk                          /*!< Interrupt Mask on line 38 */
/* No interrupt line 39 */
#define EXTI2_IMR2_IM40_Pos         (8U)
#define EXTI2_IMR2_IM40_Msk         (0x1U << EXTI2_IMR2_IM40_Pos)                /*!< 0x00000100 */
#define EXTI2_IMR2_IM40             EXTI2_IMR2_IM40_Msk                          /*!< Interrupt Mask on line 40 */
#define EXTI2_IMR2_IM41_Pos         (9U)
#define EXTI2_IMR2_IM41_Msk         (0x1U << EXTI2_IMR2_IM41_Pos)                /*!< 0x00000200 */
#define EXTI2_IMR2_IM41             EXTI2_IMR2_IM41_Msk                          /*!< Interrupt Mask on line 41 */
#define EXTI2_IMR2_IM42_Pos         (10U)
#define EXTI2_IMR2_IM42_Msk         (0x1U << EXTI2_IMR2_IM42_Pos)                /*!< 0x00000400 */
#define EXTI2_IMR2_IM42             EXTI2_IMR2_IM42_Msk                          /*!< Interrupt Mask on line 42 */
#define EXTI2_IMR2_IM43_Pos         (11U)
#define EXTI2_IMR2_IM43_Msk         (0x1U << EXTI2_IMR2_IM43_Pos)                /*!< 0x00000800 */
#define EXTI2_IMR2_IM43             EXTI2_IMR2_IM43_Msk                          /*!< Interrupt Mask on line 43 */
#define EXTI2_IMR2_IM44_Pos         (12U)
#define EXTI2_IMR2_IM44_Msk         (0x1U << EXTI2_IMR2_IM44_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR2_IM44             EXTI2_IMR2_IM44_Msk                          /*!< Interrupt Mask on line 44 */
/* No interrupt line 45 */
#define EXTI2_IMR2_IM46_Pos         (14U)
#define EXTI2_IMR2_IM46_Msk         (0x1U << EXTI2_IMR2_IM46_Pos)                /*!< 0x00004000 */
#define EXTI2_IMR2_IM46             EXTI2_IMR2_IM46_Msk                          /*!< Interrupt Mask on line 46 */
#define EXTI2_IMR2_IM47_Pos         (15U)
#define EXTI2_IMR2_IM47_Msk         (0x1U << EXTI2_IMR2_IM47_Pos)                /*!< 0x00008000 */
#define EXTI2_IMR2_IM47             EXTI2_IMR2_IM47_Msk                          /*!< Interrupt Mask on line 47 */
#define EXTI2_IMR2_IM48_Pos         (16U)
#define EXTI2_IMR2_IM48_Msk         (0x1U << EXTI2_IMR2_IM48_Pos)                /*!< 0x00010000 */
#define EXTI2_IMR2_IM48             EXTI2_IMR2_IM48_Msk                          /*!< Interrupt Mask on line 48 */
#define EXTI2_IMR2_IM49_Pos         (17U)
#define EXTI2_IMR2_IM49_Msk         (0x1U << EXTI2_IMR2_IM49_Pos)                /*!< 0x00020000 */
#define EXTI2_IMR2_IM49             EXTI2_IMR2_IM49_Msk                          /*!< Interrupt Mask on line 49 */
#define EXTI2_IMR2_IM50_Pos         (18U)
#define EXTI2_IMR2_IM50_Msk         (0x1U << EXTI2_IMR2_IM50_Pos)                /*!< 0x00040000 */
#define EXTI2_IMR2_IM50             EXTI2_IMR2_IM50_Msk                          /*!< Interrupt Mask on line 50 */
#define EXTI2_IMR2_IM51_Pos         (19U)
#define EXTI2_IMR2_IM51_Msk         (0x1U << EXTI2_IMR2_IM51_Pos)                /*!< 0x00080000 */
#define EXTI2_IMR2_IM51             EXTI2_IMR2_IM51_Msk                          /*!< Interrupt Mask on line 51 */
#define EXTI2_IMR2_IM52_Pos         (20U)
#define EXTI2_IMR2_IM52_Msk         (0x1U << EXTI2_IMR2_IM52_Pos)                /*!< 0x00100000 */
#define EXTI2_IMR2_IM52             EXTI2_IMR2_IM52_Msk                          /*!< Interrupt Mask on line 52 */
#define EXTI2_IMR2_IM53_Pos         (21U)
#define EXTI2_IMR2_IM53_Msk         (0x1U << EXTI2_IMR2_IM53_Pos)                /*!< 0x00200000 */
#define EXTI2_IMR2_IM53             EXTI2_IMR2_IM53_Msk                          /*!< Interrupt Mask on line 53 */
#define EXTI2_IMR2_IM54_Pos         (22U)
#define EXTI2_IMR2_IM54_Msk         (0x1U << EXTI2_IMR2_IM54_Pos)                /*!< 0x00400000 */
#define EXTI2_IMR2_IM54             EXTI2_IMR2_IM54_Msk                          /*!< Interrupt Mask on line 54 */
#define EXTI2_IMR2_IM55_Pos         (23U)
#define EXTI2_IMR2_IM55_Msk         (0x1U << EXTI2_IMR2_IM55_Pos)                /*!< 0x00800000 */
#define EXTI2_IMR2_IM55             EXTI2_IMR2_IM55_Msk                          /*!< Interrupt Mask on line 55 */
#define EXTI2_IMR2_IM56_Pos         (24U)
#define EXTI2_IMR2_IM56_Msk         (0x1U << EXTI2_IMR2_IM56_Pos)                /*!< 0x01000000 */
#define EXTI2_IMR2_IM56             EXTI2_IMR2_IM56_Msk                          /*!< Interrupt Mask on line 56 */
/* No interrupt line 57 */
/* No interrupt line 58 */
#define EXTI2_IMR2_IM59_Pos         (27U)
#define EXTI2_IMR2_IM59_Msk         (0x1U << EXTI2_IMR2_IM59_Pos)                /*!< 0x08000000 */
#define EXTI2_IMR2_IM59             EXTI2_IMR2_IM59_Msk                          /*!< Interrupt Mask on line 59 */
#define EXTI2_IMR2_IM60_Pos         (28U)
#define EXTI2_IMR2_IM60_Msk         (0x1U << EXTI2_IMR2_IM60_Pos)                /*!< 0x10000000 */
#define EXTI2_IMR2_IM60             EXTI2_IMR2_IM60_Msk                          /*!< Interrupt Mask on line 60 */
#define EXTI2_IMR2_IM61_Pos         (29U)
#define EXTI2_IMR2_IM61_Msk         (0x1U << EXTI2_IMR2_IM61_Pos)                /*!< 0x20000000 */
#define EXTI2_IMR2_IM61             EXTI2_IMR2_IM61_Msk                          /*!< Interrupt Mask on line 61 */
#define EXTI2_IMR2_IM62_Pos         (30U)
#define EXTI2_IMR2_IM62_Msk         (0x1U << EXTI2_IMR2_IM62_Pos)                /*!< 0x40000000 */
#define EXTI2_IMR2_IM62             EXTI2_IMR2_IM62_Msk                          /*!< Interrupt Mask on line 62 */
#define EXTI2_IMR2_IM63_Pos         (31U)
#define EXTI2_IMR2_IM63_Msk         (0x1U << EXTI2_IMR2_IM63_Pos)                /*!< 0x80000000 */
#define EXTI2_IMR2_IM63             EXTI2_IMR2_IM63_Msk                          /*!< Interrupt Mask on line 63 */

/*******************  Bit definition for EXTI2_CmEMR2 register  *******************/
#define EXTI2_EMR2_EM59_Pos         (27U)
#define EXTI2_EMR2_EM59_Msk         (0x1U << EXTI2_EMR2_EM59_Pos)                 /*!< 0x08000000 */
#define EXTI2_EMR2_EM59             EXTI2_EMR2_EM59_Msk                           /*!< Interrupt Mask on line 59 */
#define EXTI2_EMR2_EM60_Pos         (28U)
#define EXTI2_EMR2_EM60_Msk         (0x1U << EXTI2_EMR2_EM60_Pos)                 /*!< 0100000000 */
#define EXTI2_EMR2_EM60             EXTI2_EMR2_EM60_Msk                           /*!< Interrupt Mask on line 60 */
#define EXTI2_EMR2_EM61_Pos         (29U)
#define EXTI2_EMR2_EM61_Msk         (0x1U << EXTI2_EMR2_EM61_Pos)                 /*!< 0x20000000 */
#define EXTI2_EMR2_EM61             EXTI2_EMR2_EM61_Msk                           /*!< Interrupt Mask on line 61 */

/*******************  Bit definition for EXTI2_CmIMR3 register  *******************/
#define EXTI2_IMR3_IM64_Pos         (0U)
#define EXTI2_IMR3_IM64_Msk         (0x1U << EXTI2_IMR3_IM64_Pos)                /*!< 0x00000001 */
#define EXTI2_IMR3_IM64             EXTI2_IMR3_IM64_Msk                          /*!< Interrupt Mask on line 64 */
#define EXTI2_IMR3_IM65_Pos         (1U)
#define EXTI2_IMR3_IM65_Msk         (0x1U << EXTI2_IMR3_IM65_Pos)                /*!< 0x00000002 */
#define EXTI2_IMR3_IM65             EXTI2_IMR3_IM65_Msk                          /*!< Interrupt Mask on line 65 */
#define EXTI2_IMR3_IM66_Pos         (2U)
#define EXTI2_IMR3_IM66_Msk         (0x1U << EXTI2_IMR3_IM66_Pos)                /*!< 0x00000004 */
#define EXTI2_IMR3_IM66             EXTI2_IMR3_IM66_Msk                          /*!< Interrupt Mask on line 66 */
#define EXTI2_IMR3_IM67_Pos         (3U)
#define EXTI2_IMR3_IM67_Msk         (0x1U << EXTI2_IMR3_IM67_Pos)                /*!< 0x00000008 */
#define EXTI2_IMR3_IM67             EXTI2_IMR3_IM67_Msk                          /*!< Interrupt Mask on line 67 */
#define EXTI2_IMR3_IM68_Pos         (4U)
#define EXTI2_IMR3_IM68_Msk         (0x1U << EXTI2_IMR3_IM68_Pos)                /*!< 0x00000010 */
#define EXTI2_IMR3_IM68             EXTI2_IMR3_IM68_Msk                          /*!< Interrupt Mask on line 68 */
#define EXTI2_IMR3_IM69_Pos         (5U)
#define EXTI2_IMR3_IM69_Msk         (0x1U << EXTI2_IMR3_IM69_Pos)                /*!< 0x00000020 */
#define EXTI2_IMR3_IM69             EXTI2_IMR3_IM69_Msk                          /*!< Interrupt Mask on line 69 */
#define EXTI2_IMR3_IM70_Pos         (6U)
#define EXTI2_IMR3_IM70_Msk         (0x1U << EXTI2_IMR3_IM70_Pos)                /*!< 0x00000040 */
#define EXTI2_IMR3_IM70             EXTI2_IMR3_IM70_Msk                          /*!< Interrupt Mask on line 70 */
/* No interrupt line 71 */
/* No interrupt line 72 */
/* No interrupt line 73 */
/* No interrupt line 74 */
/* No interrupt line 75 */
#define EXTI2_IMR3_IM76_Pos         (12U)
#define EXTI2_IMR3_IM76_Msk         (0x1U << EXTI2_IMR3_IM76_Pos)                /*!< 0x00001000 */
#define EXTI2_IMR3_IM76             EXTI2_IMR3_IM76_Msk                          /*!< Interrupt Mask on line 76 */





/******************************************************************************/
/*                                                                            */
/*                            General Purpose I/O                             */
/*                          c7amba_ioport4 Rev 1.0.2                          */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for GPIO_MODER register  ******************/
#define GPIO_MODER_MODE0_Pos           (0U)
#define GPIO_MODER_MODE0_Msk           (0x3U << GPIO_MODER_MODE0_Pos)           /*!< 0x00000003 */
#define GPIO_MODER_MODE0               GPIO_MODER_MODE0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE1_Pos           (2U)
#define GPIO_MODER_MODE1_Msk           (0x3U << GPIO_MODER_MODE1_Pos)           /*!< 0x0000000C */
#define GPIO_MODER_MODE1               GPIO_MODER_MODE1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE2_Pos           (4U)
#define GPIO_MODER_MODE2_Msk           (0x3U << GPIO_MODER_MODE2_Pos)           /*!< 0x00000030 */
#define GPIO_MODER_MODE2               GPIO_MODER_MODE2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE3_Pos           (6U)
#define GPIO_MODER_MODE3_Msk           (0x3U << GPIO_MODER_MODE3_Pos)           /*!< 0x000000C0 */
#define GPIO_MODER_MODE3               GPIO_MODER_MODE3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE4_Pos           (8U)
#define GPIO_MODER_MODE4_Msk           (0x3U << GPIO_MODER_MODE4_Pos)           /*!< 0x00000300 */
#define GPIO_MODER_MODE4               GPIO_MODER_MODE4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE5_Pos           (10U)
#define GPIO_MODER_MODE5_Msk           (0x3U << GPIO_MODER_MODE5_Pos)           /*!< 0x00000C00 */
#define GPIO_MODER_MODE5               GPIO_MODER_MODE5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE6_Pos           (12U)
#define GPIO_MODER_MODE6_Msk           (0x3U << GPIO_MODER_MODE6_Pos)           /*!< 0x00003000 */
#define GPIO_MODER_MODE6               GPIO_MODER_MODE6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE7_Pos           (14U)
#define GPIO_MODER_MODE7_Msk           (0x3U << GPIO_MODER_MODE7_Pos)           /*!< 0x0000C000 */
#define GPIO_MODER_MODE7               GPIO_MODER_MODE7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE8_Pos           (16U)
#define GPIO_MODER_MODE8_Msk           (0x3U << GPIO_MODER_MODE8_Pos)           /*!< 0x00030000 */
#define GPIO_MODER_MODE8               GPIO_MODER_MODE8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE9_Pos           (18U)
#define GPIO_MODER_MODE9_Msk           (0x3U << GPIO_MODER_MODE9_Pos)           /*!< 0x000C0000 */
#define GPIO_MODER_MODE9               GPIO_MODER_MODE9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE10_Pos          (20U)
#define GPIO_MODER_MODE10_Msk          (0x3U << GPIO_MODER_MODE10_Pos)          /*!< 0x00300000 */
#define GPIO_MODER_MODE10              GPIO_MODER_MODE10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE11_Pos          (22U)
#define GPIO_MODER_MODE11_Msk          (0x3U << GPIO_MODER_MODE11_Pos)          /*!< 0x00C00000 */
#define GPIO_MODER_MODE11              GPIO_MODER_MODE11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE12_Pos          (24U)
#define GPIO_MODER_MODE12_Msk          (0x3U << GPIO_MODER_MODE12_Pos)          /*!< 0x03000000 */
#define GPIO_MODER_MODE12              GPIO_MODER_MODE12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE13_Pos          (26U)
#define GPIO_MODER_MODE13_Msk          (0x3U << GPIO_MODER_MODE13_Pos)          /*!< 0x0C000000 */
#define GPIO_MODER_MODE13              GPIO_MODER_MODE13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE14_Pos          (28U)
#define GPIO_MODER_MODE14_Msk          (0x3U << GPIO_MODER_MODE14_Pos)          /*!< 0x30000000 */
#define GPIO_MODER_MODE14              GPIO_MODER_MODE14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_MODER_MODE15_Pos          (30U)
#define GPIO_MODER_MODE15_Msk          (0x3U << GPIO_MODER_MODE15_Pos)          /*!< 0xC0000000 */
#define GPIO_MODER_MODE15              GPIO_MODER_MODE15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OTYPER register  ******************/
#define GPIO_OTYPER_OT0_Pos            (0U)
#define GPIO_OTYPER_OT0_Msk            (0x1U << GPIO_OTYPER_OT0_Pos)            /*!< 0x00000001 */
#define GPIO_OTYPER_OT0                GPIO_OTYPER_OT0_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT1_Pos            (1U)
#define GPIO_OTYPER_OT1_Msk            (0x1U << GPIO_OTYPER_OT1_Pos)            /*!< 0x00000002 */
#define GPIO_OTYPER_OT1                GPIO_OTYPER_OT1_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT2_Pos            (2U)
#define GPIO_OTYPER_OT2_Msk            (0x1U << GPIO_OTYPER_OT2_Pos)            /*!< 0x00000004 */
#define GPIO_OTYPER_OT2                GPIO_OTYPER_OT2_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT3_Pos            (3U)
#define GPIO_OTYPER_OT3_Msk            (0x1U << GPIO_OTYPER_OT3_Pos)            /*!< 0x00000008 */
#define GPIO_OTYPER_OT3                GPIO_OTYPER_OT3_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT4_Pos            (4U)
#define GPIO_OTYPER_OT4_Msk            (0x1U << GPIO_OTYPER_OT4_Pos)            /*!< 0x00000010 */
#define GPIO_OTYPER_OT4                GPIO_OTYPER_OT4_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT5_Pos            (5U)
#define GPIO_OTYPER_OT5_Msk            (0x1U << GPIO_OTYPER_OT5_Pos)            /*!< 0x00000020 */
#define GPIO_OTYPER_OT5                GPIO_OTYPER_OT5_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT6_Pos            (6U)
#define GPIO_OTYPER_OT6_Msk            (0x1U << GPIO_OTYPER_OT6_Pos)            /*!< 0x00000040 */
#define GPIO_OTYPER_OT6                GPIO_OTYPER_OT6_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT7_Pos            (7U)
#define GPIO_OTYPER_OT7_Msk            (0x1U << GPIO_OTYPER_OT7_Pos)            /*!< 0x00000080 */
#define GPIO_OTYPER_OT7                GPIO_OTYPER_OT7_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT8_Pos            (8U)
#define GPIO_OTYPER_OT8_Msk            (0x1U << GPIO_OTYPER_OT8_Pos)            /*!< 0x00000100 */
#define GPIO_OTYPER_OT8                GPIO_OTYPER_OT8_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT9_Pos            (9U)
#define GPIO_OTYPER_OT9_Msk            (0x1U << GPIO_OTYPER_OT9_Pos)            /*!< 0x00000200 */
#define GPIO_OTYPER_OT9                GPIO_OTYPER_OT9_Msk                      /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT10_Pos           (10U)
#define GPIO_OTYPER_OT10_Msk           (0x1U << GPIO_OTYPER_OT10_Pos)           /*!< 0x00000400 */
#define GPIO_OTYPER_OT10               GPIO_OTYPER_OT10_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT11_Pos           (11U)
#define GPIO_OTYPER_OT11_Msk           (0x1U << GPIO_OTYPER_OT11_Pos)           /*!< 0x00000800 */
#define GPIO_OTYPER_OT11               GPIO_OTYPER_OT11_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT12_Pos           (12U)
#define GPIO_OTYPER_OT12_Msk           (0x1U << GPIO_OTYPER_OT12_Pos)           /*!< 0x00001000 */
#define GPIO_OTYPER_OT12               GPIO_OTYPER_OT12_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT13_Pos           (13U)
#define GPIO_OTYPER_OT13_Msk           (0x1U << GPIO_OTYPER_OT13_Pos)           /*!< 0x00002000 */
#define GPIO_OTYPER_OT13               GPIO_OTYPER_OT13_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT14_Pos           (14U)
#define GPIO_OTYPER_OT14_Msk           (0x1U << GPIO_OTYPER_OT14_Pos)           /*!< 0x00004000 */
#define GPIO_OTYPER_OT14               GPIO_OTYPER_OT14_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OTYPER_OT15_Pos           (15U)
#define GPIO_OTYPER_OT15_Msk           (0x1U << GPIO_OTYPER_OT15_Pos)           /*!< 0x00008000 */
#define GPIO_OTYPER_OT15               GPIO_OTYPER_OT15_Msk                     /*!< Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output type.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_OSPEEDR register  *****************/
#define GPIO_OSPEEDR_OSPEED0_Pos       (0U)
#define GPIO_OSPEEDR_OSPEED0_Msk       (0x3U << GPIO_OSPEEDR_OSPEED0_Pos)       /*!< 0x00000003 */
#define GPIO_OSPEEDR_OSPEED0           GPIO_OSPEEDR_OSPEED0_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED1_Pos       (2U)
#define GPIO_OSPEEDR_OSPEED1_Msk       (0x3U << GPIO_OSPEEDR_OSPEED1_Pos)       /*!< 0x0000000C */
#define GPIO_OSPEEDR_OSPEED1           GPIO_OSPEEDR_OSPEED1_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED2_Pos       (4U)
#define GPIO_OSPEEDR_OSPEED2_Msk       (0x3U << GPIO_OSPEEDR_OSPEED2_Pos)       /*!< 0x00000030 */
#define GPIO_OSPEEDR_OSPEED2           GPIO_OSPEEDR_OSPEED2_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED3_Pos       (6U)
#define GPIO_OSPEEDR_OSPEED3_Msk       (0x3U << GPIO_OSPEEDR_OSPEED3_Pos)       /*!< 0x000000C0 */
#define GPIO_OSPEEDR_OSPEED3           GPIO_OSPEEDR_OSPEED3_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED4_Pos       (8U)
#define GPIO_OSPEEDR_OSPEED4_Msk       (0x3U << GPIO_OSPEEDR_OSPEED4_Pos)       /*!< 0x00000300 */
#define GPIO_OSPEEDR_OSPEED4           GPIO_OSPEEDR_OSPEED4_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED5_Pos       (10U)
#define GPIO_OSPEEDR_OSPEED5_Msk       (0x3U << GPIO_OSPEEDR_OSPEED5_Pos)       /*!< 0x00000C00 */
#define GPIO_OSPEEDR_OSPEED5           GPIO_OSPEEDR_OSPEED5_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED6_Pos       (12U)
#define GPIO_OSPEEDR_OSPEED6_Msk       (0x3U << GPIO_OSPEEDR_OSPEED6_Pos)       /*!< 0x00003000 */
#define GPIO_OSPEEDR_OSPEED6           GPIO_OSPEEDR_OSPEED6_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED7_Pos       (14U)
#define GPIO_OSPEEDR_OSPEED7_Msk       (0x3U << GPIO_OSPEEDR_OSPEED7_Pos)       /*!< 0x0000C000 */
#define GPIO_OSPEEDR_OSPEED7           GPIO_OSPEEDR_OSPEED7_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED8_Pos       (16U)
#define GPIO_OSPEEDR_OSPEED8_Msk       (0x3U << GPIO_OSPEEDR_OSPEED8_Pos)       /*!< 0x00030000 */
#define GPIO_OSPEEDR_OSPEED8           GPIO_OSPEEDR_OSPEED8_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED9_Pos       (18U)
#define GPIO_OSPEEDR_OSPEED9_Msk       (0x3U << GPIO_OSPEEDR_OSPEED9_Pos)       /*!< 0x000C0000 */
#define GPIO_OSPEEDR_OSPEED9           GPIO_OSPEEDR_OSPEED9_Msk                 /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED10_Pos      (20U)
#define GPIO_OSPEEDR_OSPEED10_Msk      (0x3U << GPIO_OSPEEDR_OSPEED10_Pos)      /*!< 0x00300000 */
#define GPIO_OSPEEDR_OSPEED10          GPIO_OSPEEDR_OSPEED10_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED11_Pos      (22U)
#define GPIO_OSPEEDR_OSPEED11_Msk      (0x3U << GPIO_OSPEEDR_OSPEED11_Pos)      /*!< 0x00C00000 */
#define GPIO_OSPEEDR_OSPEED11          GPIO_OSPEEDR_OSPEED11_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED12_Pos      (24U)
#define GPIO_OSPEEDR_OSPEED12_Msk      (0x3U << GPIO_OSPEEDR_OSPEED12_Pos)      /*!< 0x03000000 */
#define GPIO_OSPEEDR_OSPEED12          GPIO_OSPEEDR_OSPEED12_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED13_Pos      (26U)
#define GPIO_OSPEEDR_OSPEED13_Msk      (0x3U << GPIO_OSPEEDR_OSPEED13_Pos)      /*!< 0x0C000000 */
#define GPIO_OSPEEDR_OSPEED13          GPIO_OSPEEDR_OSPEED13_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED14_Pos      (28U)
#define GPIO_OSPEEDR_OSPEED14_Msk      (0x3U << GPIO_OSPEEDR_OSPEED14_Pos)      /*!< 0x30000000 */
#define GPIO_OSPEEDR_OSPEED14          GPIO_OSPEEDR_OSPEED14_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_OSPEEDR_OSPEED15_Pos      (30U)
#define GPIO_OSPEEDR_OSPEED15_Msk      (0x3U << GPIO_OSPEEDR_OSPEED15_Pos)      /*!< 0xC0000000 */
#define GPIO_OSPEEDR_OSPEED15          GPIO_OSPEEDR_OSPEED15_Msk                /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O output speed.Note: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_PUPDR register  ******************/
#define GPIO_PUPDR_PUPD0_Pos           (0U)
#define GPIO_PUPDR_PUPD0_Msk           (0x3U << GPIO_PUPDR_PUPD0_Pos)           /*!< 0x00000003 */
#define GPIO_PUPDR_PUPD0               GPIO_PUPDR_PUPD0_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD1_Pos           (2U)
#define GPIO_PUPDR_PUPD1_Msk           (0x3U << GPIO_PUPDR_PUPD1_Pos)           /*!< 0x0000000C */
#define GPIO_PUPDR_PUPD1               GPIO_PUPDR_PUPD1_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD2_Pos           (4U)
#define GPIO_PUPDR_PUPD2_Msk           (0x3U << GPIO_PUPDR_PUPD2_Pos)           /*!< 0x00000030 */
#define GPIO_PUPDR_PUPD2               GPIO_PUPDR_PUPD2_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD3_Pos           (6U)
#define GPIO_PUPDR_PUPD3_Msk           (0x3U << GPIO_PUPDR_PUPD3_Pos)           /*!< 0x000000C0 */
#define GPIO_PUPDR_PUPD3               GPIO_PUPDR_PUPD3_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD4_Pos           (8U)
#define GPIO_PUPDR_PUPD4_Msk           (0x3U << GPIO_PUPDR_PUPD4_Pos)           /*!< 0x00000300 */
#define GPIO_PUPDR_PUPD4               GPIO_PUPDR_PUPD4_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD5_Pos           (10U)
#define GPIO_PUPDR_PUPD5_Msk           (0x3U << GPIO_PUPDR_PUPD5_Pos)           /*!< 0x00000C00 */
#define GPIO_PUPDR_PUPD5               GPIO_PUPDR_PUPD5_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD6_Pos           (12U)
#define GPIO_PUPDR_PUPD6_Msk           (0x3U << GPIO_PUPDR_PUPD6_Pos)           /*!< 0x00003000 */
#define GPIO_PUPDR_PUPD6               GPIO_PUPDR_PUPD6_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD7_Pos           (14U)
#define GPIO_PUPDR_PUPD7_Msk           (0x3U << GPIO_PUPDR_PUPD7_Pos)           /*!< 0x0000C000 */
#define GPIO_PUPDR_PUPD7               GPIO_PUPDR_PUPD7_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD8_Pos           (16U)
#define GPIO_PUPDR_PUPD8_Msk           (0x3U << GPIO_PUPDR_PUPD8_Pos)           /*!< 0x00030000 */
#define GPIO_PUPDR_PUPD8               GPIO_PUPDR_PUPD8_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD9_Pos           (18U)
#define GPIO_PUPDR_PUPD9_Msk           (0x3U << GPIO_PUPDR_PUPD9_Pos)           /*!< 0x000C0000 */
#define GPIO_PUPDR_PUPD9               GPIO_PUPDR_PUPD9_Msk                     /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD10_Pos          (20U)
#define GPIO_PUPDR_PUPD10_Msk          (0x3U << GPIO_PUPDR_PUPD10_Pos)          /*!< 0x00300000 */
#define GPIO_PUPDR_PUPD10              GPIO_PUPDR_PUPD10_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD11_Pos          (22U)
#define GPIO_PUPDR_PUPD11_Msk          (0x3U << GPIO_PUPDR_PUPD11_Pos)          /*!< 0x00C00000 */
#define GPIO_PUPDR_PUPD11              GPIO_PUPDR_PUPD11_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD12_Pos          (24U)
#define GPIO_PUPDR_PUPD12_Msk          (0x3U << GPIO_PUPDR_PUPD12_Pos)          /*!< 0x03000000 */
#define GPIO_PUPDR_PUPD12              GPIO_PUPDR_PUPD12_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD13_Pos          (26U)
#define GPIO_PUPDR_PUPD13_Msk          (0x3U << GPIO_PUPDR_PUPD13_Pos)          /*!< 0x0C000000 */
#define GPIO_PUPDR_PUPD13              GPIO_PUPDR_PUPD13_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD14_Pos          (28U)
#define GPIO_PUPDR_PUPD14_Msk          (0x3U << GPIO_PUPDR_PUPD14_Pos)          /*!< 0x30000000 */
#define GPIO_PUPDR_PUPD14              GPIO_PUPDR_PUPD14_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_PUPDR_PUPD15_Pos          (30U)
#define GPIO_PUPDR_PUPD15_Msk          (0x3U << GPIO_PUPDR_PUPD15_Pos)          /*!< 0xC0000000 */
#define GPIO_PUPDR_PUPD15              GPIO_PUPDR_PUPD15_Msk                    /*!< [1:0]: Port x configuration I/O pin y (y=0 to 15)These bits are written by software to configure the I/O pull-up or pull-downSuccessful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_IDR register  *******************/
#define GPIO_IDR_ID0_Pos               (0U)
#define GPIO_IDR_ID0_Msk               (0x1U << GPIO_IDR_ID0_Pos)               /*!< 0x00000001 */
#define GPIO_IDR_ID0                   GPIO_IDR_ID0_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID1_Pos               (1U)
#define GPIO_IDR_ID1_Msk               (0x1U << GPIO_IDR_ID1_Pos)               /*!< 0x00000002 */
#define GPIO_IDR_ID1                   GPIO_IDR_ID1_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID2_Pos               (2U)
#define GPIO_IDR_ID2_Msk               (0x1U << GPIO_IDR_ID2_Pos)               /*!< 0x00000004 */
#define GPIO_IDR_ID2                   GPIO_IDR_ID2_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID3_Pos               (3U)
#define GPIO_IDR_ID3_Msk               (0x1U << GPIO_IDR_ID3_Pos)               /*!< 0x00000008 */
#define GPIO_IDR_ID3                   GPIO_IDR_ID3_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID4_Pos               (4U)
#define GPIO_IDR_ID4_Msk               (0x1U << GPIO_IDR_ID4_Pos)               /*!< 0x00000010 */
#define GPIO_IDR_ID4                   GPIO_IDR_ID4_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID5_Pos               (5U)
#define GPIO_IDR_ID5_Msk               (0x1U << GPIO_IDR_ID5_Pos)               /*!< 0x00000020 */
#define GPIO_IDR_ID5                   GPIO_IDR_ID5_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID6_Pos               (6U)
#define GPIO_IDR_ID6_Msk               (0x1U << GPIO_IDR_ID6_Pos)               /*!< 0x00000040 */
#define GPIO_IDR_ID6                   GPIO_IDR_ID6_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID7_Pos               (7U)
#define GPIO_IDR_ID7_Msk               (0x1U << GPIO_IDR_ID7_Pos)               /*!< 0x00000080 */
#define GPIO_IDR_ID7                   GPIO_IDR_ID7_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID8_Pos               (8U)
#define GPIO_IDR_ID8_Msk               (0x1U << GPIO_IDR_ID8_Pos)               /*!< 0x00000100 */
#define GPIO_IDR_ID8                   GPIO_IDR_ID8_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID9_Pos               (9U)
#define GPIO_IDR_ID9_Msk               (0x1U << GPIO_IDR_ID9_Pos)               /*!< 0x00000200 */
#define GPIO_IDR_ID9                   GPIO_IDR_ID9_Msk                         /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID10_Pos              (10U)
#define GPIO_IDR_ID10_Msk              (0x1U << GPIO_IDR_ID10_Pos)              /*!< 0x00000400 */
#define GPIO_IDR_ID10                  GPIO_IDR_ID10_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID11_Pos              (11U)
#define GPIO_IDR_ID11_Msk              (0x1U << GPIO_IDR_ID11_Pos)              /*!< 0x00000800 */
#define GPIO_IDR_ID11                  GPIO_IDR_ID11_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID12_Pos              (12U)
#define GPIO_IDR_ID12_Msk              (0x1U << GPIO_IDR_ID12_Pos)              /*!< 0x00001000 */
#define GPIO_IDR_ID12                  GPIO_IDR_ID12_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID13_Pos              (13U)
#define GPIO_IDR_ID13_Msk              (0x1U << GPIO_IDR_ID13_Pos)              /*!< 0x00002000 */
#define GPIO_IDR_ID13                  GPIO_IDR_ID13_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID14_Pos              (14U)
#define GPIO_IDR_ID14_Msk              (0x1U << GPIO_IDR_ID14_Pos)              /*!< 0x00004000 */
#define GPIO_IDR_ID14                  GPIO_IDR_ID14_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */
#define GPIO_IDR_ID15_Pos              (15U)
#define GPIO_IDR_ID15_Msk              (0x1U << GPIO_IDR_ID15_Pos)              /*!< 0x00008000 */
#define GPIO_IDR_ID15                  GPIO_IDR_ID15_Msk                        /*!< Port x input data I/O pin y (y=0 to 15)These bits are read-only. They contain the input value of the corresponding I/O port.Successful read to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. */

/*******************  Bit definition for GPIO_ODR register  *******************/
#define GPIO_ODR_OD0_Pos               (0U)
#define GPIO_ODR_OD0_Msk               (0x1U << GPIO_ODR_OD0_Pos)               /*!< 0x00000001 */
#define GPIO_ODR_OD0                   GPIO_ODR_OD0_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD1_Pos               (1U)
#define GPIO_ODR_OD1_Msk               (0x1U << GPIO_ODR_OD1_Pos)               /*!< 0x00000002 */
#define GPIO_ODR_OD1                   GPIO_ODR_OD1_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD2_Pos               (2U)
#define GPIO_ODR_OD2_Msk               (0x1U << GPIO_ODR_OD2_Pos)               /*!< 0x00000004 */
#define GPIO_ODR_OD2                   GPIO_ODR_OD2_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD3_Pos               (3U)
#define GPIO_ODR_OD3_Msk               (0x1U << GPIO_ODR_OD3_Pos)               /*!< 0x00000008 */
#define GPIO_ODR_OD3                   GPIO_ODR_OD3_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD4_Pos               (4U)
#define GPIO_ODR_OD4_Msk               (0x1U << GPIO_ODR_OD4_Pos)               /*!< 0x00000010 */
#define GPIO_ODR_OD4                   GPIO_ODR_OD4_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD5_Pos               (5U)
#define GPIO_ODR_OD5_Msk               (0x1U << GPIO_ODR_OD5_Pos)               /*!< 0x00000020 */
#define GPIO_ODR_OD5                   GPIO_ODR_OD5_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD6_Pos               (6U)
#define GPIO_ODR_OD6_Msk               (0x1U << GPIO_ODR_OD6_Pos)               /*!< 0x00000040 */
#define GPIO_ODR_OD6                   GPIO_ODR_OD6_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD7_Pos               (7U)
#define GPIO_ODR_OD7_Msk               (0x1U << GPIO_ODR_OD7_Pos)               /*!< 0x00000080 */
#define GPIO_ODR_OD7                   GPIO_ODR_OD7_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD8_Pos               (8U)
#define GPIO_ODR_OD8_Msk               (0x1U << GPIO_ODR_OD8_Pos)               /*!< 0x00000100 */
#define GPIO_ODR_OD8                   GPIO_ODR_OD8_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD9_Pos               (9U)
#define GPIO_ODR_OD9_Msk               (0x1U << GPIO_ODR_OD9_Pos)               /*!< 0x00000200 */
#define GPIO_ODR_OD9                   GPIO_ODR_OD9_Msk                         /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD10_Pos              (10U)
#define GPIO_ODR_OD10_Msk              (0x1U << GPIO_ODR_OD10_Pos)              /*!< 0x00000400 */
#define GPIO_ODR_OD10                  GPIO_ODR_OD10_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD11_Pos              (11U)
#define GPIO_ODR_OD11_Msk              (0x1U << GPIO_ODR_OD11_Pos)              /*!< 0x00000800 */
#define GPIO_ODR_OD11                  GPIO_ODR_OD11_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD12_Pos              (12U)
#define GPIO_ODR_OD12_Msk              (0x1U << GPIO_ODR_OD12_Pos)              /*!< 0x00001000 */
#define GPIO_ODR_OD12                  GPIO_ODR_OD12_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD13_Pos              (13U)
#define GPIO_ODR_OD13_Msk              (0x1U << GPIO_ODR_OD13_Pos)              /*!< 0x00002000 */
#define GPIO_ODR_OD13                  GPIO_ODR_OD13_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD14_Pos              (14U)
#define GPIO_ODR_OD14_Msk              (0x1U << GPIO_ODR_OD14_Pos)              /*!< 0x00004000 */
#define GPIO_ODR_OD14                  GPIO_ODR_OD14_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ODR_OD15_Pos              (15U)
#define GPIO_ODR_OD15_Msk              (0x1U << GPIO_ODR_OD15_Pos)              /*!< 0x00008000 */
#define GPIO_ODR_OD15                  GPIO_ODR_OD15_Msk                        /*!< Port x output data I/O pin y (y=0 to 15)These bits can be read and written by software.Note: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR or GPIOx_BRR registers.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_BSRR register  *******************/
#define GPIO_BSRR_BS0_Pos              (0U)
#define GPIO_BSRR_BS0_Msk              (0x1U << GPIO_BSRR_BS0_Pos)              /*!< 0x00000001 */
#define GPIO_BSRR_BS0                  GPIO_BSRR_BS0_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS1_Pos              (1U)
#define GPIO_BSRR_BS1_Msk              (0x1U << GPIO_BSRR_BS1_Pos)              /*!< 0x00000002 */
#define GPIO_BSRR_BS1                  GPIO_BSRR_BS1_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS2_Pos              (2U)
#define GPIO_BSRR_BS2_Msk              (0x1U << GPIO_BSRR_BS2_Pos)              /*!< 0x00000004 */
#define GPIO_BSRR_BS2                  GPIO_BSRR_BS2_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS3_Pos              (3U)
#define GPIO_BSRR_BS3_Msk              (0x1U << GPIO_BSRR_BS3_Pos)              /*!< 0x00000008 */
#define GPIO_BSRR_BS3                  GPIO_BSRR_BS3_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS4_Pos              (4U)
#define GPIO_BSRR_BS4_Msk              (0x1U << GPIO_BSRR_BS4_Pos)              /*!< 0x00000010 */
#define GPIO_BSRR_BS4                  GPIO_BSRR_BS4_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS5_Pos              (5U)
#define GPIO_BSRR_BS5_Msk              (0x1U << GPIO_BSRR_BS5_Pos)              /*!< 0x00000020 */
#define GPIO_BSRR_BS5                  GPIO_BSRR_BS5_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS6_Pos              (6U)
#define GPIO_BSRR_BS6_Msk              (0x1U << GPIO_BSRR_BS6_Pos)              /*!< 0x00000040 */
#define GPIO_BSRR_BS6                  GPIO_BSRR_BS6_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS7_Pos              (7U)
#define GPIO_BSRR_BS7_Msk              (0x1U << GPIO_BSRR_BS7_Pos)              /*!< 0x00000080 */
#define GPIO_BSRR_BS7                  GPIO_BSRR_BS7_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS8_Pos              (8U)
#define GPIO_BSRR_BS8_Msk              (0x1U << GPIO_BSRR_BS8_Pos)              /*!< 0x00000100 */
#define GPIO_BSRR_BS8                  GPIO_BSRR_BS8_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS9_Pos              (9U)
#define GPIO_BSRR_BS9_Msk              (0x1U << GPIO_BSRR_BS9_Pos)              /*!< 0x00000200 */
#define GPIO_BSRR_BS9                  GPIO_BSRR_BS9_Msk                        /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS10_Pos             (10U)
#define GPIO_BSRR_BS10_Msk             (0x1U << GPIO_BSRR_BS10_Pos)             /*!< 0x00000400 */
#define GPIO_BSRR_BS10                 GPIO_BSRR_BS10_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS11_Pos             (11U)
#define GPIO_BSRR_BS11_Msk             (0x1U << GPIO_BSRR_BS11_Pos)             /*!< 0x00000800 */
#define GPIO_BSRR_BS11                 GPIO_BSRR_BS11_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS12_Pos             (12U)
#define GPIO_BSRR_BS12_Msk             (0x1U << GPIO_BSRR_BS12_Pos)             /*!< 0x00001000 */
#define GPIO_BSRR_BS12                 GPIO_BSRR_BS12_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS13_Pos             (13U)
#define GPIO_BSRR_BS13_Msk             (0x1U << GPIO_BSRR_BS13_Pos)             /*!< 0x00002000 */
#define GPIO_BSRR_BS13                 GPIO_BSRR_BS13_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS14_Pos             (14U)
#define GPIO_BSRR_BS14_Msk             (0x1U << GPIO_BSRR_BS14_Pos)             /*!< 0x00004000 */
#define GPIO_BSRR_BS14                 GPIO_BSRR_BS14_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BS15_Pos             (15U)
#define GPIO_BSRR_BS15_Msk             (0x1U << GPIO_BSRR_BS15_Pos)             /*!< 0x00008000 */
#define GPIO_BSRR_BS15                 GPIO_BSRR_BS15_Msk                       /*!< Port x set I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR0_Pos              (16U)
#define GPIO_BSRR_BR0_Msk              (0x1U << GPIO_BSRR_BR0_Pos)              /*!< 0x00010000 */
#define GPIO_BSRR_BR0                  GPIO_BSRR_BR0_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR1_Pos              (17U)
#define GPIO_BSRR_BR1_Msk              (0x1U << GPIO_BSRR_BR1_Pos)              /*!< 0x00020000 */
#define GPIO_BSRR_BR1                  GPIO_BSRR_BR1_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR2_Pos              (18U)
#define GPIO_BSRR_BR2_Msk              (0x1U << GPIO_BSRR_BR2_Pos)              /*!< 0x00040000 */
#define GPIO_BSRR_BR2                  GPIO_BSRR_BR2_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR3_Pos              (19U)
#define GPIO_BSRR_BR3_Msk              (0x1U << GPIO_BSRR_BR3_Pos)              /*!< 0x00080000 */
#define GPIO_BSRR_BR3                  GPIO_BSRR_BR3_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR4_Pos              (20U)
#define GPIO_BSRR_BR4_Msk              (0x1U << GPIO_BSRR_BR4_Pos)              /*!< 0x00100000 */
#define GPIO_BSRR_BR4                  GPIO_BSRR_BR4_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR5_Pos              (21U)
#define GPIO_BSRR_BR5_Msk              (0x1U << GPIO_BSRR_BR5_Pos)              /*!< 0x00200000 */
#define GPIO_BSRR_BR5                  GPIO_BSRR_BR5_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR6_Pos              (22U)
#define GPIO_BSRR_BR6_Msk              (0x1U << GPIO_BSRR_BR6_Pos)              /*!< 0x00400000 */
#define GPIO_BSRR_BR6                  GPIO_BSRR_BR6_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR7_Pos              (23U)
#define GPIO_BSRR_BR7_Msk              (0x1U << GPIO_BSRR_BR7_Pos)              /*!< 0x00800000 */
#define GPIO_BSRR_BR7                  GPIO_BSRR_BR7_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR8_Pos              (24U)
#define GPIO_BSRR_BR8_Msk              (0x1U << GPIO_BSRR_BR8_Pos)              /*!< 0x01000000 */
#define GPIO_BSRR_BR8                  GPIO_BSRR_BR8_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR9_Pos              (25U)
#define GPIO_BSRR_BR9_Msk              (0x1U << GPIO_BSRR_BR9_Pos)              /*!< 0x02000000 */
#define GPIO_BSRR_BR9                  GPIO_BSRR_BR9_Msk                        /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR10_Pos             (26U)
#define GPIO_BSRR_BR10_Msk             (0x1U << GPIO_BSRR_BR10_Pos)             /*!< 0x04000000 */
#define GPIO_BSRR_BR10                 GPIO_BSRR_BR10_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR11_Pos             (27U)
#define GPIO_BSRR_BR11_Msk             (0x1U << GPIO_BSRR_BR11_Pos)             /*!< 0x08000000 */
#define GPIO_BSRR_BR11                 GPIO_BSRR_BR11_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR12_Pos             (28U)
#define GPIO_BSRR_BR12_Msk             (0x1U << GPIO_BSRR_BR12_Pos)             /*!< 0x10000000 */
#define GPIO_BSRR_BR12                 GPIO_BSRR_BR12_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR13_Pos             (29U)
#define GPIO_BSRR_BR13_Msk             (0x1U << GPIO_BSRR_BR13_Pos)             /*!< 0x20000000 */
#define GPIO_BSRR_BR13                 GPIO_BSRR_BR13_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR14_Pos             (30U)
#define GPIO_BSRR_BR14_Msk             (0x1U << GPIO_BSRR_BR14_Pos)             /*!< 0x40000000 */
#define GPIO_BSRR_BR14                 GPIO_BSRR_BR14_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BSRR_BR15_Pos             (31U)
#define GPIO_BSRR_BR15_Msk             (0x1U << GPIO_BSRR_BR15_Pos)             /*!< 0x80000000 */
#define GPIO_BSRR_BR15                 GPIO_BSRR_BR15_Msk                       /*!< Port x reset I/O pin y (y=0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Note: If both BSx and BRx are set, BSx has priority.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/******************  Bit definition for GPIO_LCKR register  *******************/
#define GPIO_LCKR_LCK0_Pos             (0U)
#define GPIO_LCKR_LCK0_Msk             (0x1U << GPIO_LCKR_LCK0_Pos)             /*!< 0x00000001 */
#define GPIO_LCKR_LCK0                 GPIO_LCKR_LCK0_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK1_Pos             (1U)
#define GPIO_LCKR_LCK1_Msk             (0x1U << GPIO_LCKR_LCK1_Pos)             /*!< 0x00000002 */
#define GPIO_LCKR_LCK1                 GPIO_LCKR_LCK1_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK2_Pos             (2U)
#define GPIO_LCKR_LCK2_Msk             (0x1U << GPIO_LCKR_LCK2_Pos)             /*!< 0x00000004 */
#define GPIO_LCKR_LCK2                 GPIO_LCKR_LCK2_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK3_Pos             (3U)
#define GPIO_LCKR_LCK3_Msk             (0x1U << GPIO_LCKR_LCK3_Pos)             /*!< 0x00000008 */
#define GPIO_LCKR_LCK3                 GPIO_LCKR_LCK3_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK4_Pos             (4U)
#define GPIO_LCKR_LCK4_Msk             (0x1U << GPIO_LCKR_LCK4_Pos)             /*!< 0x00000010 */
#define GPIO_LCKR_LCK4                 GPIO_LCKR_LCK4_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK5_Pos             (5U)
#define GPIO_LCKR_LCK5_Msk             (0x1U << GPIO_LCKR_LCK5_Pos)             /*!< 0x00000020 */
#define GPIO_LCKR_LCK5                 GPIO_LCKR_LCK5_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK6_Pos             (6U)
#define GPIO_LCKR_LCK6_Msk             (0x1U << GPIO_LCKR_LCK6_Pos)             /*!< 0x00000040 */
#define GPIO_LCKR_LCK6                 GPIO_LCKR_LCK6_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK7_Pos             (7U)
#define GPIO_LCKR_LCK7_Msk             (0x1U << GPIO_LCKR_LCK7_Pos)             /*!< 0x00000080 */
#define GPIO_LCKR_LCK7                 GPIO_LCKR_LCK7_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK8_Pos             (8U)
#define GPIO_LCKR_LCK8_Msk             (0x1U << GPIO_LCKR_LCK8_Pos)             /*!< 0x00000100 */
#define GPIO_LCKR_LCK8                 GPIO_LCKR_LCK8_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK9_Pos             (9U)
#define GPIO_LCKR_LCK9_Msk             (0x1U << GPIO_LCKR_LCK9_Pos)             /*!< 0x00000200 */
#define GPIO_LCKR_LCK9                 GPIO_LCKR_LCK9_Msk                       /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK10_Pos            (10U)
#define GPIO_LCKR_LCK10_Msk            (0x1U << GPIO_LCKR_LCK10_Pos)            /*!< 0x00000400 */
#define GPIO_LCKR_LCK10                GPIO_LCKR_LCK10_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK11_Pos            (11U)
#define GPIO_LCKR_LCK11_Msk            (0x1U << GPIO_LCKR_LCK11_Pos)            /*!< 0x00000800 */
#define GPIO_LCKR_LCK11                GPIO_LCKR_LCK11_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK12_Pos            (12U)
#define GPIO_LCKR_LCK12_Msk            (0x1U << GPIO_LCKR_LCK12_Pos)            /*!< 0x00001000 */
#define GPIO_LCKR_LCK12                GPIO_LCKR_LCK12_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK13_Pos            (13U)
#define GPIO_LCKR_LCK13_Msk            (0x1U << GPIO_LCKR_LCK13_Pos)            /*!< 0x00002000 */
#define GPIO_LCKR_LCK13                GPIO_LCKR_LCK13_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK14_Pos            (14U)
#define GPIO_LCKR_LCK14_Msk            (0x1U << GPIO_LCKR_LCK14_Pos)            /*!< 0x00004000 */
#define GPIO_LCKR_LCK14                GPIO_LCKR_LCK14_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCK15_Pos            (15U)
#define GPIO_LCKR_LCK15_Msk            (0x1U << GPIO_LCKR_LCK15_Pos)            /*!< 0x00008000 */
#define GPIO_LCKR_LCK15                GPIO_LCKR_LCK15_Msk                      /*!< Port x lock I/O pin y (y=0 to 15)These bits are read/write but can only be written when the LCKK bit is '0â.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LCKR_LCKK_Pos             (16U)
#define GPIO_LCKR_LCKK_Msk             (0x1U << GPIO_LCKR_LCKK_Pos)             /*!< 0x00010000 */
#define GPIO_LCKR_LCKK                 GPIO_LCKR_LCKK_Msk                       /*!< Lock key */

/******************  Bit definition for GPIO_AFRL register  *******************/
#define GPIO_AFRL_AFSEL0_Pos           (0U)
#define GPIO_AFRL_AFSEL0_Msk           (0xFU << GPIO_AFRL_AFSEL0_Pos)           /*!< 0x0000000F */
#define GPIO_AFRL_AFSEL0               GPIO_AFRL_AFSEL0_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL1_Pos           (4U)
#define GPIO_AFRL_AFSEL1_Msk           (0xFU << GPIO_AFRL_AFSEL1_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRL_AFSEL1               GPIO_AFRL_AFSEL1_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL2_Pos           (8U)
#define GPIO_AFRL_AFSEL2_Msk           (0xFU << GPIO_AFRL_AFSEL2_Pos)           /*!< 0x00000F00 */
#define GPIO_AFRL_AFSEL2               GPIO_AFRL_AFSEL2_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL3_Pos           (12U)
#define GPIO_AFRL_AFSEL3_Msk           (0xFU << GPIO_AFRL_AFSEL3_Pos)           /*!< 0x0000F000 */
#define GPIO_AFRL_AFSEL3               GPIO_AFRL_AFSEL3_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL4_Pos           (16U)
#define GPIO_AFRL_AFSEL4_Msk           (0xFU << GPIO_AFRL_AFSEL4_Pos)           /*!< 0x000F0000 */
#define GPIO_AFRL_AFSEL4               GPIO_AFRL_AFSEL4_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL5_Pos           (20U)
#define GPIO_AFRL_AFSEL5_Msk           (0xFU << GPIO_AFRL_AFSEL5_Pos)           /*!< 0x00F00000 */
#define GPIO_AFRL_AFSEL5               GPIO_AFRL_AFSEL5_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL6_Pos           (24U)
#define GPIO_AFRL_AFSEL6_Msk           (0xFU << GPIO_AFRL_AFSEL6_Pos)           /*!< 0x0F000000 */
#define GPIO_AFRL_AFSEL6               GPIO_AFRL_AFSEL6_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRL_AFSEL7_Pos           (28U)
#define GPIO_AFRL_AFSEL7_Msk           (0xFU << GPIO_AFRL_AFSEL7_Pos)           /*!< 0xF0000000 */
#define GPIO_AFRL_AFSEL7               GPIO_AFRL_AFSEL7_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 0 to 7)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/******************  Bit definition for GPIO_AFRH register  *******************/
#define GPIO_AFRH_AFSEL8_Pos           (0U)
#define GPIO_AFRH_AFSEL8_Msk           (0xFU << GPIO_AFRH_AFSEL8_Pos)           /*!< 0x0000000F */
#define GPIO_AFRH_AFSEL8               GPIO_AFRH_AFSEL8_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL9_Pos           (4U)
#define GPIO_AFRH_AFSEL9_Msk           (0xFU << GPIO_AFRH_AFSEL9_Pos)           /*!< 0x000000F0 */
#define GPIO_AFRH_AFSEL9               GPIO_AFRH_AFSEL9_Msk                     /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL10_Pos          (8U)
#define GPIO_AFRH_AFSEL10_Msk          (0xFU << GPIO_AFRH_AFSEL10_Pos)          /*!< 0x00000F00 */
#define GPIO_AFRH_AFSEL10              GPIO_AFRH_AFSEL10_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL11_Pos          (12U)
#define GPIO_AFRH_AFSEL11_Msk          (0xFU << GPIO_AFRH_AFSEL11_Pos)          /*!< 0x0000F000 */
#define GPIO_AFRH_AFSEL11              GPIO_AFRH_AFSEL11_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL12_Pos          (16U)
#define GPIO_AFRH_AFSEL12_Msk          (0xFU << GPIO_AFRH_AFSEL12_Pos)          /*!< 0x000F0000 */
#define GPIO_AFRH_AFSEL12              GPIO_AFRH_AFSEL12_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL13_Pos          (20U)
#define GPIO_AFRH_AFSEL13_Msk          (0xFU << GPIO_AFRH_AFSEL13_Pos)          /*!< 0x00F00000 */
#define GPIO_AFRH_AFSEL13              GPIO_AFRH_AFSEL13_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL14_Pos          (24U)
#define GPIO_AFRH_AFSEL14_Msk          (0xFU << GPIO_AFRH_AFSEL14_Pos)          /*!< 0x0F000000 */
#define GPIO_AFRH_AFSEL14              GPIO_AFRH_AFSEL14_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_AFRH_AFSEL15_Pos          (28U)
#define GPIO_AFRH_AFSEL15_Msk          (0xFU << GPIO_AFRH_AFSEL15_Pos)          /*!< 0xF0000000 */
#define GPIO_AFRH_AFSEL15              GPIO_AFRH_AFSEL15_Msk                    /*!< [3:0]: Alternate function selection for port x I/O pin y (y = 8 to 15)These bits are written by software to configure alternate function I/Os.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*******************  Bit definition for GPIO_BRR register  *******************/
#define GPIO_BRR_BR0_Pos               (0U)
#define GPIO_BRR_BR0_Msk               (0x1U << GPIO_BRR_BR0_Pos)               /*!< 0x00000001 */
#define GPIO_BRR_BR0                   GPIO_BRR_BR0_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR1_Pos               (1U)
#define GPIO_BRR_BR1_Msk               (0x1U << GPIO_BRR_BR1_Pos)               /*!< 0x00000002 */
#define GPIO_BRR_BR1                   GPIO_BRR_BR1_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR2_Pos               (2U)
#define GPIO_BRR_BR2_Msk               (0x1U << GPIO_BRR_BR2_Pos)               /*!< 0x00000004 */
#define GPIO_BRR_BR2                   GPIO_BRR_BR2_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR3_Pos               (3U)
#define GPIO_BRR_BR3_Msk               (0x1U << GPIO_BRR_BR3_Pos)               /*!< 0x00000008 */
#define GPIO_BRR_BR3                   GPIO_BRR_BR3_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR4_Pos               (4U)
#define GPIO_BRR_BR4_Msk               (0x1U << GPIO_BRR_BR4_Pos)               /*!< 0x00000010 */
#define GPIO_BRR_BR4                   GPIO_BRR_BR4_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR5_Pos               (5U)
#define GPIO_BRR_BR5_Msk               (0x1U << GPIO_BRR_BR5_Pos)               /*!< 0x00000020 */
#define GPIO_BRR_BR5                   GPIO_BRR_BR5_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR6_Pos               (6U)
#define GPIO_BRR_BR6_Msk               (0x1U << GPIO_BRR_BR6_Pos)               /*!< 0x00000040 */
#define GPIO_BRR_BR6                   GPIO_BRR_BR6_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR7_Pos               (7U)
#define GPIO_BRR_BR7_Msk               (0x1U << GPIO_BRR_BR7_Pos)               /*!< 0x00000080 */
#define GPIO_BRR_BR7                   GPIO_BRR_BR7_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR8_Pos               (8U)
#define GPIO_BRR_BR8_Msk               (0x1U << GPIO_BRR_BR8_Pos)               /*!< 0x00000100 */
#define GPIO_BRR_BR8                   GPIO_BRR_BR8_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR9_Pos               (9U)
#define GPIO_BRR_BR9_Msk               (0x1U << GPIO_BRR_BR9_Pos)               /*!< 0x00000200 */
#define GPIO_BRR_BR9                   GPIO_BRR_BR9_Msk                         /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR10_Pos              (10U)
#define GPIO_BRR_BR10_Msk              (0x1U << GPIO_BRR_BR10_Pos)              /*!< 0x00000400 */
#define GPIO_BRR_BR10                  GPIO_BRR_BR10_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR11_Pos              (11U)
#define GPIO_BRR_BR11_Msk              (0x1U << GPIO_BRR_BR11_Pos)              /*!< 0x00000800 */
#define GPIO_BRR_BR11                  GPIO_BRR_BR11_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR12_Pos              (12U)
#define GPIO_BRR_BR12_Msk              (0x1U << GPIO_BRR_BR12_Pos)              /*!< 0x00001000 */
#define GPIO_BRR_BR12                  GPIO_BRR_BR12_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR13_Pos              (13U)
#define GPIO_BRR_BR13_Msk              (0x1U << GPIO_BRR_BR13_Pos)              /*!< 0x00002000 */
#define GPIO_BRR_BR13                  GPIO_BRR_BR13_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR14_Pos              (14U)
#define GPIO_BRR_BR14_Msk              (0x1U << GPIO_BRR_BR14_Pos)              /*!< 0x00004000 */
#define GPIO_BRR_BR14                  GPIO_BRR_BR14_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */
#define GPIO_BRR_BR15_Pos              (15U)
#define GPIO_BRR_BR15_Msk              (0x1U << GPIO_BRR_BR15_Pos)              /*!< 0x00008000 */
#define GPIO_BRR_BR15                  GPIO_BRR_BR15_Msk                        /*!< Port x reset IO pin y (y= 0 to 15)These bits are write-only. A read to these bits returns the value 0x0000.Successful write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can write this bit, as described in Section1.4: IO pin allocation to compartments. */

/*******************  Bit definition for GPIO_OR register  ********************/

/*****************  Bit definition for GPIO_SECCFGR register  *****************/
#define GPIO_SECCFGR_SEC0_Pos          (0U)
#define GPIO_SECCFGR_SEC0_Msk          (0x1U << GPIO_SECCFGR_SEC0_Pos)          /*!< 0x00000001 */
#define GPIO_SECCFGR_SEC0              GPIO_SECCFGR_SEC0_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC1_Pos          (1U)
#define GPIO_SECCFGR_SEC1_Msk          (0x1U << GPIO_SECCFGR_SEC1_Pos)          /*!< 0x00000002 */
#define GPIO_SECCFGR_SEC1              GPIO_SECCFGR_SEC1_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC2_Pos          (2U)
#define GPIO_SECCFGR_SEC2_Msk          (0x1U << GPIO_SECCFGR_SEC2_Pos)          /*!< 0x00000004 */
#define GPIO_SECCFGR_SEC2              GPIO_SECCFGR_SEC2_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC3_Pos          (3U)
#define GPIO_SECCFGR_SEC3_Msk          (0x1U << GPIO_SECCFGR_SEC3_Pos)          /*!< 0x00000008 */
#define GPIO_SECCFGR_SEC3              GPIO_SECCFGR_SEC3_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC4_Pos          (4U)
#define GPIO_SECCFGR_SEC4_Msk          (0x1U << GPIO_SECCFGR_SEC4_Pos)          /*!< 0x00000010 */
#define GPIO_SECCFGR_SEC4              GPIO_SECCFGR_SEC4_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC5_Pos          (5U)
#define GPIO_SECCFGR_SEC5_Msk          (0x1U << GPIO_SECCFGR_SEC5_Pos)          /*!< 0x00000020 */
#define GPIO_SECCFGR_SEC5              GPIO_SECCFGR_SEC5_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC6_Pos          (6U)
#define GPIO_SECCFGR_SEC6_Msk          (0x1U << GPIO_SECCFGR_SEC6_Pos)          /*!< 0x00000040 */
#define GPIO_SECCFGR_SEC6              GPIO_SECCFGR_SEC6_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC7_Pos          (7U)
#define GPIO_SECCFGR_SEC7_Msk          (0x1U << GPIO_SECCFGR_SEC7_Pos)          /*!< 0x00000080 */
#define GPIO_SECCFGR_SEC7              GPIO_SECCFGR_SEC7_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC8_Pos          (8U)
#define GPIO_SECCFGR_SEC8_Msk          (0x1U << GPIO_SECCFGR_SEC8_Pos)          /*!< 0x00000100 */
#define GPIO_SECCFGR_SEC8              GPIO_SECCFGR_SEC8_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC9_Pos          (9U)
#define GPIO_SECCFGR_SEC9_Msk          (0x1U << GPIO_SECCFGR_SEC9_Pos)          /*!< 0x00000200 */
#define GPIO_SECCFGR_SEC9              GPIO_SECCFGR_SEC9_Msk                    /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC10_Pos         (10U)
#define GPIO_SECCFGR_SEC10_Msk         (0x1U << GPIO_SECCFGR_SEC10_Pos)         /*!< 0x00000400 */
#define GPIO_SECCFGR_SEC10             GPIO_SECCFGR_SEC10_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC11_Pos         (11U)
#define GPIO_SECCFGR_SEC11_Msk         (0x1U << GPIO_SECCFGR_SEC11_Pos)         /*!< 0x00000800 */
#define GPIO_SECCFGR_SEC11             GPIO_SECCFGR_SEC11_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC12_Pos         (12U)
#define GPIO_SECCFGR_SEC12_Msk         (0x1U << GPIO_SECCFGR_SEC12_Pos)         /*!< 0x00001000 */
#define GPIO_SECCFGR_SEC12             GPIO_SECCFGR_SEC12_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC13_Pos         (13U)
#define GPIO_SECCFGR_SEC13_Msk         (0x1U << GPIO_SECCFGR_SEC13_Pos)         /*!< 0x00002000 */
#define GPIO_SECCFGR_SEC13             GPIO_SECCFGR_SEC13_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC14_Pos         (14U)
#define GPIO_SECCFGR_SEC14_Msk         (0x1U << GPIO_SECCFGR_SEC14_Pos)         /*!< 0x00004000 */
#define GPIO_SECCFGR_SEC14             GPIO_SECCFGR_SEC14_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_SECCFGR_SEC15_Pos         (15U)
#define GPIO_SECCFGR_SEC15_Msk         (0x1U << GPIO_SECCFGR_SEC15_Pos)         /*!< 0x00008000 */
#define GPIO_SECCFGR_SEC15             GPIO_SECCFGR_SEC15_Msk                   /*!< Port x secure I/O pin y (y= 0 to 15)These bits are written by software to enabled the secure mode for I/O port pin y.If the system is not secure (TZEN=0) write to this bit is ignored.This bit can only be written by secure application. If corresponding PRIVy bit is set in GPIOx_PRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled by setting CFEN bit in GPIOx_CIDCFGRy, only an allowed compartment can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_PRIVCFGR register  *****************/
#define GPIO_PRIVCFGR_PRIV0_Pos        (0U)
#define GPIO_PRIVCFGR_PRIV0_Msk        (0x1U << GPIO_PRIVCFGR_PRIV0_Pos)        /*!< 0x00000001 */
#define GPIO_PRIVCFGR_PRIV0            GPIO_PRIVCFGR_PRIV0_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV1_Pos        (1U)
#define GPIO_PRIVCFGR_PRIV1_Msk        (0x1U << GPIO_PRIVCFGR_PRIV1_Pos)        /*!< 0x00000002 */
#define GPIO_PRIVCFGR_PRIV1            GPIO_PRIVCFGR_PRIV1_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV2_Pos        (2U)
#define GPIO_PRIVCFGR_PRIV2_Msk        (0x1U << GPIO_PRIVCFGR_PRIV2_Pos)        /*!< 0x00000004 */
#define GPIO_PRIVCFGR_PRIV2            GPIO_PRIVCFGR_PRIV2_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV3_Pos        (3U)
#define GPIO_PRIVCFGR_PRIV3_Msk        (0x1U << GPIO_PRIVCFGR_PRIV3_Pos)        /*!< 0x00000008 */
#define GPIO_PRIVCFGR_PRIV3            GPIO_PRIVCFGR_PRIV3_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV4_Pos        (4U)
#define GPIO_PRIVCFGR_PRIV4_Msk        (0x1U << GPIO_PRIVCFGR_PRIV4_Pos)        /*!< 0x00000010 */
#define GPIO_PRIVCFGR_PRIV4            GPIO_PRIVCFGR_PRIV4_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV5_Pos        (5U)
#define GPIO_PRIVCFGR_PRIV5_Msk        (0x1U << GPIO_PRIVCFGR_PRIV5_Pos)        /*!< 0x00000020 */
#define GPIO_PRIVCFGR_PRIV5            GPIO_PRIVCFGR_PRIV5_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV6_Pos        (6U)
#define GPIO_PRIVCFGR_PRIV6_Msk        (0x1U << GPIO_PRIVCFGR_PRIV6_Pos)        /*!< 0x00000040 */
#define GPIO_PRIVCFGR_PRIV6            GPIO_PRIVCFGR_PRIV6_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV7_Pos        (7U)
#define GPIO_PRIVCFGR_PRIV7_Msk        (0x1U << GPIO_PRIVCFGR_PRIV7_Pos)        /*!< 0x00000080 */
#define GPIO_PRIVCFGR_PRIV7            GPIO_PRIVCFGR_PRIV7_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV8_Pos        (8U)
#define GPIO_PRIVCFGR_PRIV8_Msk        (0x1U << GPIO_PRIVCFGR_PRIV8_Pos)        /*!< 0x00000100 */
#define GPIO_PRIVCFGR_PRIV8            GPIO_PRIVCFGR_PRIV8_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV9_Pos        (9U)
#define GPIO_PRIVCFGR_PRIV9_Msk        (0x1U << GPIO_PRIVCFGR_PRIV9_Pos)        /*!< 0x00000200 */
#define GPIO_PRIVCFGR_PRIV9            GPIO_PRIVCFGR_PRIV9_Msk                  /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV10_Pos       (10U)
#define GPIO_PRIVCFGR_PRIV10_Msk       (0x1U << GPIO_PRIVCFGR_PRIV10_Pos)       /*!< 0x00000400 */
#define GPIO_PRIVCFGR_PRIV10           GPIO_PRIVCFGR_PRIV10_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV11_Pos       (11U)
#define GPIO_PRIVCFGR_PRIV11_Msk       (0x1U << GPIO_PRIVCFGR_PRIV11_Pos)       /*!< 0x00000800 */
#define GPIO_PRIVCFGR_PRIV11           GPIO_PRIVCFGR_PRIV11_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV12_Pos       (12U)
#define GPIO_PRIVCFGR_PRIV12_Msk       (0x1U << GPIO_PRIVCFGR_PRIV12_Pos)       /*!< 0x00001000 */
#define GPIO_PRIVCFGR_PRIV12           GPIO_PRIVCFGR_PRIV12_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV13_Pos       (13U)
#define GPIO_PRIVCFGR_PRIV13_Msk       (0x1U << GPIO_PRIVCFGR_PRIV13_Pos)       /*!< 0x00002000 */
#define GPIO_PRIVCFGR_PRIV13           GPIO_PRIVCFGR_PRIV13_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV14_Pos       (14U)
#define GPIO_PRIVCFGR_PRIV14_Msk       (0x1U << GPIO_PRIVCFGR_PRIV14_Pos)       /*!< 0x00004000 */
#define GPIO_PRIVCFGR_PRIV14           GPIO_PRIVCFGR_PRIV14_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_PRIVCFGR_PRIV15_Pos       (15U)
#define GPIO_PRIVCFGR_PRIV15_Msk       (0x1U << GPIO_PRIVCFGR_PRIV15_Pos)       /*!< 0x00008000 */
#define GPIO_PRIVCFGR_PRIV15           GPIO_PRIVCFGR_PRIV15_Msk                 /*!< Port x privileged I/O pin y (y= 0 to 15)These bits are written by software to enabled the privileged mode for I/O port pin y.This bit can only be written by privileged application. If corresponding SECy bit is set in GPIOx_SECCFGR this bit can only be written by secure privileged application.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit in GPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write this bit, on top of secure and privileged restriction. Authorized compartment value depends on the value of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit in GPIOx_SEMCRy. See the bits descriptions for details. */

/****************  Bit definition for GPIO_RCFGLOCKR register  ****************/
#define GPIO_RCFGLOCKR_RLOCK0_Pos      (0U)
#define GPIO_RCFGLOCKR_RLOCK0_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK0_Pos)      /*!< 0x00000001 */
#define GPIO_RCFGLOCKR_RLOCK0          GPIO_RCFGLOCKR_RLOCK0_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK1_Pos      (1U)
#define GPIO_RCFGLOCKR_RLOCK1_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK1_Pos)      /*!< 0x00000002 */
#define GPIO_RCFGLOCKR_RLOCK1          GPIO_RCFGLOCKR_RLOCK1_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK2_Pos      (2U)
#define GPIO_RCFGLOCKR_RLOCK2_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK2_Pos)      /*!< 0x00000004 */
#define GPIO_RCFGLOCKR_RLOCK2          GPIO_RCFGLOCKR_RLOCK2_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK3_Pos      (3U)
#define GPIO_RCFGLOCKR_RLOCK3_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK3_Pos)      /*!< 0x00000008 */
#define GPIO_RCFGLOCKR_RLOCK3          GPIO_RCFGLOCKR_RLOCK3_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK4_Pos      (4U)
#define GPIO_RCFGLOCKR_RLOCK4_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK4_Pos)      /*!< 0x00000010 */
#define GPIO_RCFGLOCKR_RLOCK4          GPIO_RCFGLOCKR_RLOCK4_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK5_Pos      (5U)
#define GPIO_RCFGLOCKR_RLOCK5_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK5_Pos)      /*!< 0x00000020 */
#define GPIO_RCFGLOCKR_RLOCK5          GPIO_RCFGLOCKR_RLOCK5_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK6_Pos      (6U)
#define GPIO_RCFGLOCKR_RLOCK6_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK6_Pos)      /*!< 0x00000040 */
#define GPIO_RCFGLOCKR_RLOCK6          GPIO_RCFGLOCKR_RLOCK6_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK7_Pos      (7U)
#define GPIO_RCFGLOCKR_RLOCK7_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK7_Pos)      /*!< 0x00000080 */
#define GPIO_RCFGLOCKR_RLOCK7          GPIO_RCFGLOCKR_RLOCK7_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK8_Pos      (8U)
#define GPIO_RCFGLOCKR_RLOCK8_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK8_Pos)      /*!< 0x00000100 */
#define GPIO_RCFGLOCKR_RLOCK8          GPIO_RCFGLOCKR_RLOCK8_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK9_Pos      (9U)
#define GPIO_RCFGLOCKR_RLOCK9_Msk      (0x1U << GPIO_RCFGLOCKR_RLOCK9_Pos)      /*!< 0x00000200 */
#define GPIO_RCFGLOCKR_RLOCK9          GPIO_RCFGLOCKR_RLOCK9_Msk                /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK10_Pos     (10U)
#define GPIO_RCFGLOCKR_RLOCK10_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK10_Pos)     /*!< 0x00000400 */
#define GPIO_RCFGLOCKR_RLOCK10         GPIO_RCFGLOCKR_RLOCK10_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK11_Pos     (11U)
#define GPIO_RCFGLOCKR_RLOCK11_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK11_Pos)     /*!< 0x00000800 */
#define GPIO_RCFGLOCKR_RLOCK11         GPIO_RCFGLOCKR_RLOCK11_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK12_Pos     (12U)
#define GPIO_RCFGLOCKR_RLOCK12_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK12_Pos)     /*!< 0x00001000 */
#define GPIO_RCFGLOCKR_RLOCK12         GPIO_RCFGLOCKR_RLOCK12_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK13_Pos     (13U)
#define GPIO_RCFGLOCKR_RLOCK13_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK13_Pos)     /*!< 0x00002000 */
#define GPIO_RCFGLOCKR_RLOCK13         GPIO_RCFGLOCKR_RLOCK13_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK14_Pos     (14U)
#define GPIO_RCFGLOCKR_RLOCK14_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK14_Pos)     /*!< 0x00004000 */
#define GPIO_RCFGLOCKR_RLOCK14         GPIO_RCFGLOCKR_RLOCK14_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */
#define GPIO_RCFGLOCKR_RLOCK15_Pos     (15U)
#define GPIO_RCFGLOCKR_RLOCK15_Msk     (0x1U << GPIO_RCFGLOCKR_RLOCK15_Pos)     /*!< 0x00008000 */
#define GPIO_RCFGLOCKR_RLOCK15         GPIO_RCFGLOCKR_RLOCK15_Msk               /*!< Port x security/privilege configuration lock for I/O pin y (y= 0 to 15)This bit can only be written by secure privileged application. This bit is cleared by default andonce set it cannot be reset until global GPIOx reset.If compartment filtering for this I/O pin is enabled (resp. disabled) using CFEN bit inGPIOx_CIDCFGRy, only an authorized compartment (resp. any compartment) can write thisbit, on top of secure and privileged restriction. Authorized compartment value depends on thevalue of SEM_EN bit in GPIOx_CIDCFGRy and optionally the SEM_MUTEX bit inGPIOx_SEMCRy. See the bits descriptions for details. */

/*******************  Bit definition for GPIO_LKR register  *******************/
#define GPIO_LKR_LK0_Pos               (0U)
#define GPIO_LKR_LK0_Msk               (0x1U << GPIO_LKR_LK0_Pos)               /*!< 0x00000001 */
#define GPIO_LKR_LK0                   GPIO_LKR_LK0_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK1_Pos               (1U)
#define GPIO_LKR_LK1_Msk               (0x1U << GPIO_LKR_LK1_Pos)               /*!< 0x00000002 */
#define GPIO_LKR_LK1                   GPIO_LKR_LK1_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK2_Pos               (2U)
#define GPIO_LKR_LK2_Msk               (0x1U << GPIO_LKR_LK2_Pos)               /*!< 0x00000004 */
#define GPIO_LKR_LK2                   GPIO_LKR_LK2_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK3_Pos               (3U)
#define GPIO_LKR_LK3_Msk               (0x1U << GPIO_LKR_LK3_Pos)               /*!< 0x00000008 */
#define GPIO_LKR_LK3                   GPIO_LKR_LK3_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK4_Pos               (4U)
#define GPIO_LKR_LK4_Msk               (0x1U << GPIO_LKR_LK4_Pos)               /*!< 0x00000010 */
#define GPIO_LKR_LK4                   GPIO_LKR_LK4_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK5_Pos               (5U)
#define GPIO_LKR_LK5_Msk               (0x1U << GPIO_LKR_LK5_Pos)               /*!< 0x00000020 */
#define GPIO_LKR_LK5                   GPIO_LKR_LK5_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK6_Pos               (6U)
#define GPIO_LKR_LK6_Msk               (0x1U << GPIO_LKR_LK6_Pos)               /*!< 0x00000040 */
#define GPIO_LKR_LK6                   GPIO_LKR_LK6_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK7_Pos               (7U)
#define GPIO_LKR_LK7_Msk               (0x1U << GPIO_LKR_LK7_Pos)               /*!< 0x00000080 */
#define GPIO_LKR_LK7                   GPIO_LKR_LK7_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK8_Pos               (8U)
#define GPIO_LKR_LK8_Msk               (0x1U << GPIO_LKR_LK8_Pos)               /*!< 0x00000100 */
#define GPIO_LKR_LK8                   GPIO_LKR_LK8_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK9_Pos               (9U)
#define GPIO_LKR_LK9_Msk               (0x1U << GPIO_LKR_LK9_Pos)               /*!< 0x00000200 */
#define GPIO_LKR_LK9                   GPIO_LKR_LK9_Msk                         /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK10_Pos              (10U)
#define GPIO_LKR_LK10_Msk              (0x1U << GPIO_LKR_LK10_Pos)              /*!< 0x00000400 */
#define GPIO_LKR_LK10                  GPIO_LKR_LK10_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK11_Pos              (11U)
#define GPIO_LKR_LK11_Msk              (0x1U << GPIO_LKR_LK11_Pos)              /*!< 0x00000800 */
#define GPIO_LKR_LK11                  GPIO_LKR_LK11_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK12_Pos              (12U)
#define GPIO_LKR_LK12_Msk              (0x1U << GPIO_LKR_LK12_Pos)              /*!< 0x00001000 */
#define GPIO_LKR_LK12                  GPIO_LKR_LK12_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK13_Pos              (13U)
#define GPIO_LKR_LK13_Msk              (0x1U << GPIO_LKR_LK13_Pos)              /*!< 0x00002000 */
#define GPIO_LKR_LK13                  GPIO_LKR_LK13_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK14_Pos              (14U)
#define GPIO_LKR_LK14_Msk              (0x1U << GPIO_LKR_LK14_Pos)              /*!< 0x00004000 */
#define GPIO_LKR_LK14                  GPIO_LKR_LK14_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_LKR_LK15_Pos              (15U)
#define GPIO_LKR_LK15_Msk              (0x1U << GPIO_LKR_LK15_Pos)              /*!< 0x00008000 */
#define GPIO_LKR_LK15                  GPIO_LKR_LK15_Msk                        /*!< Port x latch keeper for I/O pin y (y= 0 to 15)These bits are written by software to control the I/O latch, to keep PU/PD value even in standby mode.Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRL register  *****************/
#define GPIO_DELAYRL_DLY0_Pos        (0U)
#define GPIO_DELAYRL_DLY0_Msk        (0xFU << GPIO_DELAYRL_DLY0_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRL_DLY0            GPIO_DELAYRL_DLY0_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY1_Pos        (4U)
#define GPIO_DELAYRL_DLY1_Msk        (0xFU << GPIO_DELAYRL_DLY1_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRL_DLY1            GPIO_DELAYRL_DLY1_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY2_Pos        (8U)
#define GPIO_DELAYRL_DLY2_Msk        (0xFU << GPIO_DELAYRL_DLY2_Pos)        /*!< 0x00000F00 */
#define GPIO_DELAYRL_DLY2            GPIO_DELAYRL_DLY2_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY3_Pos        (12U)
#define GPIO_DELAYRL_DLY3_Msk        (0xFU << GPIO_DELAYRL_DLY3_Pos)        /*!< 0x0000F000 */
#define GPIO_DELAYRL_DLY3            GPIO_DELAYRL_DLY3_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY4_Pos        (16U)
#define GPIO_DELAYRL_DLY4_Msk        (0xFU << GPIO_DELAYRL_DLY4_Pos)        /*!< 0x000F0000 */
#define GPIO_DELAYRL_DLY4            GPIO_DELAYRL_DLY4_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY5_Pos        (20U)
#define GPIO_DELAYRL_DLY5_Msk        (0xFU << GPIO_DELAYRL_DLY5_Pos)        /*!< 0x00F00000 */
#define GPIO_DELAYRL_DLY5            GPIO_DELAYRL_DLY5_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY6_Pos        (24U)
#define GPIO_DELAYRL_DLY6_Msk        (0xFU << GPIO_DELAYRL_DLY6_Pos)        /*!< 0x0F000000 */
#define GPIO_DELAYRL_DLY6            GPIO_DELAYRL_DLY6_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRL_DLY7_Pos        (28U)
#define GPIO_DELAYRL_DLY7_Msk        (0xFU << GPIO_DELAYRL_DLY7_Pos)        /*!< 0xF0000000 */
#define GPIO_DELAYRL_DLY7            GPIO_DELAYRL_DLY7_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/*****************  Bit definition for GPIO_DELAYRH register  *****************/
#define GPIO_DELAYRH_DLY8_Pos        (0U)
#define GPIO_DELAYRH_DLY8_Msk        (0xFU << GPIO_DELAYRH_DLY8_Pos)        /*!< 0x0000000F */
#define GPIO_DELAYRH_DLY8            GPIO_DELAYRH_DLY8_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY9_Pos        (4U)
#define GPIO_DELAYRH_DLY9_Msk        (0xFU << GPIO_DELAYRH_DLY9_Pos)        /*!< 0x000000F0 */
#define GPIO_DELAYRH_DLY9            GPIO_DELAYRH_DLY9_Msk                  /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY10_Pos       (8U)
#define GPIO_DELAYRH_DLY10_Msk       (0xFU << GPIO_DELAYRH_DLY10_Pos)       /*!< 0x00000F00 */
#define GPIO_DELAYRH_DLY10           GPIO_DELAYRH_DLY10_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY11_Pos       (12U)
#define GPIO_DELAYRH_DLY11_Msk       (0xFU << GPIO_DELAYRH_DLY11_Pos)       /*!< 0x0000F000 */
#define GPIO_DELAYRH_DLY11           GPIO_DELAYRH_DLY11_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY12_Pos       (16U)
#define GPIO_DELAYRH_DLY12_Msk       (0xFU << GPIO_DELAYRH_DLY12_Pos)       /*!< 0x000F0000 */
#define GPIO_DELAYRH_DLY12           GPIO_DELAYRH_DLY12_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY13_Pos       (20U)
#define GPIO_DELAYRH_DLY13_Msk       (0xFU << GPIO_DELAYRH_DLY13_Pos)       /*!< 0x00F00000 */
#define GPIO_DELAYRH_DLY13           GPIO_DELAYRH_DLY13_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY14_Pos       (24U)
#define GPIO_DELAYRH_DLY14_Msk       (0xFU << GPIO_DELAYRH_DLY14_Pos)       /*!< 0x0F000000 */
#define GPIO_DELAYRH_DLY14           GPIO_DELAYRH_DLY14_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_DELAYRH_DLY15_Pos       (28U)
#define GPIO_DELAYRH_DLY15_Msk       (0xFU << GPIO_DELAYRH_DLY15_Pos)       /*!< 0xF0000000 */
#define GPIO_DELAYRH_DLY15           GPIO_DELAYRH_DLY15_Msk                 /*!< [3:0]: Port x IO pin y delay setup (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */

/****************  Bit definition for GPIO_PIOCFGRL register  *****************/
#define GPIO_ADVCFGRL_0_Pos      	(0U)
#define GPIO_ADVCFGRL_0_Msk    	  	(0xFU << GPIO_ADVCFGRL_0_Pos)      /*!< 0x0000000F */
#define GPIO_ADVCFGRL_0          	GPIO_ADVCFGRL_0_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH0      (0x1UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000001 */
#define GPIO_ADVCFGRL_DE0           (0x2UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000002 */
#define GPIO_ADVCFGRL_INVCLK0       (0x4UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000004 */
#define GPIO_ADVCFGRL_RET0          (0x8UL << GPIO_ADVCFGRL_0_Pos)          /*!< 0x00000008 */
#define GPIO_ADVCFGRL_1_Pos      	(4U)
#define GPIO_ADVCFGRL_1_Msk      	(0xFU << GPIO_ADVCFGRL_1_Pos)      /*!< 0x000000F0 */
#define GPIO_ADVCFGRL_1          	GPIO_ADVCFGRL_1_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH1      (0x1UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000010 */
#define GPIO_ADVCFGRL_DE1           (0x2UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000020 */
#define GPIO_ADVCFGRL_INVCLK1       (0x4UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000040 */
#define GPIO_ADVCFGRL_RET1          (0x8UL << GPIO_ADVCFGRL_1_Pos)          /*!< 0x00000080 */
#define GPIO_ADVCFGRL_2_Pos      	(8U)
#define GPIO_ADVCFGRL_2_Msk      	(0xFU << GPIO_ADVCFGRL_2_Pos)      /*!< 0x00000F00 */
#define GPIO_ADVCFGRL_2          	GPIO_ADVCFGRL_2_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH2      (0x1UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000100 */
#define GPIO_ADVCFGRL_DE2           (0x2UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000200 */
#define GPIO_ADVCFGRL_INVCLK2       (0x4UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000400 */
#define GPIO_ADVCFGRL_RET2          (0x8UL << GPIO_ADVCFGRL_2_Pos)          /*!< 0x00000800 */
#define GPIO_ADVCFGRL_3_Pos      	(12U)
#define GPIO_ADVCFGRL_3_Msk      	(0xFU << GPIO_ADVCFGRL_3_Pos)      /*!< 0x0000F000 */
#define GPIO_ADVCFGRL_3          	GPIO_ADVCFGRL_3_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH3      (0x1UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00001000 */
#define GPIO_ADVCFGRL_DE3           (0x2UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00002000 */
#define GPIO_ADVCFGRL_INVCLK3       (0x4UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00004000 */
#define GPIO_ADVCFGRL_RET3          (0x8UL << GPIO_ADVCFGRL_3_Pos)          /*!< 0x00008000 */
#define GPIO_ADVCFGRL_4_Pos      	(16U)
#define GPIO_ADVCFGRL_4_Msk      	(0xFU << GPIO_ADVCFGRL_4_Pos)      /*!< 0x000F0000 */
#define GPIO_ADVCFGRL_4          	GPIO_ADVCFGRL_4_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH4      (0x1UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00010000 */
#define GPIO_ADVCFGRL_DE4           (0x2UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00020000 */
#define GPIO_ADVCFGRL_INVCLK4       (0x4UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00040000 */
#define GPIO_ADVCFGRL_RET4          (0x8UL << GPIO_ADVCFGRL_4_Pos)          /*!< 0x00080000 */
#define GPIO_ADVCFGRL_5_Pos      	(20U)
#define GPIO_ADVCFGRL_5_Msk      	(0xFU << GPIO_ADVCFGRL_5_Pos)      /*!< 0x00F00000 */
#define GPIO_ADVCFGRL_5          	GPIO_ADVCFGRL_5_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH5      (0x1UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00100000 */
#define GPIO_ADVCFGRL_DE5           (0x2UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00200000 */
#define GPIO_ADVCFGRL_INVCLK5       (0x4UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00400000 */
#define GPIO_ADVCFGRL_RET5          (0x8UL << GPIO_ADVCFGRL_5_Pos)          /*!< 0x00800000 */
#define GPIO_ADVCFGRL_6_Pos      	(24U)
#define GPIO_ADVCFGRL_6_Msk      	(0xFU << GPIO_ADVCFGRL_6_Pos)      /*!< 0x0F000000 */
#define GPIO_ADVCFGRL_6          	GPIO_ADVCFGRL_6_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH6      (0x1UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x01000000 */
#define GPIO_ADVCFGRL_DE6           (0x2UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x02000000 */
#define GPIO_ADVCFGRL_INVCLK6       (0x4UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x04000000 */
#define GPIO_ADVCFGRL_RET6          (0x8UL << GPIO_ADVCFGRL_6_Pos)          /*!< 0x08000000 */
#define GPIO_ADVCFGRL_7_Pos      	(28U)
#define GPIO_ADVCFGRL_7_Msk      	(0xFU << GPIO_ADVCFGRL_7_Pos)      /*!< 0xF0000000 */
#define GPIO_ADVCFGRL_7          	GPIO_ADVCFGRL_7_Msk                /*!< [3:0]: Port x IO pin configuration (y = 0 to 7)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRL_DLYPATH7      (0x1UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x10000000 */
#define GPIO_ADVCFGRL_DE7           (0x2UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x20000000 */
#define GPIO_ADVCFGRL_INVCLK7       (0x4UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x40000000 */
#define GPIO_ADVCFGRL_RET7          (0x8UL << GPIO_ADVCFGRL_7_Pos)          /*!< 0x80000000 */

/****************  Bit definition for GPIO_PIOCFGRH register  *****************/
#define GPIO_ADVCFGRH_8_Pos      	(0U)
#define GPIO_ADVCFGRH_8_Msk      	(0xFU << GPIO_ADVCFGRH_8_Pos)      /*!< 0x0000000F */
#define GPIO_ADVCFGRH_8          	GPIO_ADVCFGRH_8_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH8      (0x1UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000001 */
#define GPIO_ADVCFGRH_DE8           (0x2UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000002 */
#define GPIO_ADVCFGRH_INVCLK8       (0x4UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000004 */
#define GPIO_ADVCFGRH_RET8          (0x8UL << GPIO_ADVCFGRH_8_Pos)          /*!< 0x00000008 */
#define GPIO_ADVCFGRH_9_Pos      	(4U)
#define GPIO_ADVCFGRH_9_Msk      	(0xFU << GPIO_ADVCFGRH_9_Pos)      /*!< 0x000000F0 */
#define GPIO_ADVCFGRH_9          	GPIO_ADVCFGRH_9_Msk                /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH9      (0x1UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000010 */
#define GPIO_ADVCFGRH_DE9           (0x2UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000020 */
#define GPIO_ADVCFGRH_INVCLK9       (0x4UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000040 */
#define GPIO_ADVCFGRH_RET9          (0x8UL << GPIO_ADVCFGRH_9_Pos)          /*!< 0x00000080 */
#define GPIO_ADVCFGRH_10_Pos     	(8U)
#define GPIO_ADVCFGRH_10_Msk     	(0xFU << GPIO_ADVCFGRH_10_Pos)     /*!< 0x00000F00 */
#define GPIO_ADVCFGRH_10         	GPIO_ADVCFGRH_10_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH10     (0x1UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000100 */
#define GPIO_ADVCFGRH_DE10          (0x2UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000200 */
#define GPIO_ADVCFGRH_INVCLK10      (0x4UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000400 */
#define GPIO_ADVCFGRH_RET10         (0x8UL << GPIO_ADVCFGRH_10_Pos)         /*!< 0x00000800 */
#define GPIO_ADVCFGRH_11_Pos     	(12U)
#define GPIO_ADVCFGRH_11_Msk     	(0xFU << GPIO_ADVCFGRH_11_Pos)     /*!< 0x0000F000 */
#define GPIO_ADVCFGRH_11         	GPIO_ADVCFGRH_11_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH11     (0x1UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00001000 */
#define GPIO_ADVCFGRH_DE11          (0x2UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00002000 */
#define GPIO_ADVCFGRH_INVCLK11      (0x4UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00004000 */
#define GPIO_ADVCFGRH_RET11         (0x8UL << GPIO_ADVCFGRH_11_Pos)         /*!< 0x00008000 */
#define GPIO_ADVCFGRH_12_Pos    	(16U)
#define GPIO_ADVCFGRH_12_Msk     	(0xFU << GPIO_ADVCFGRH_12_Pos)     /*!< 0x000F0000 */
#define GPIO_ADVCFGRH_12         	GPIO_ADVCFGRH_12_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH12     (0x1UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00010000 */
#define GPIO_ADVCFGRH_DE12          (0x2UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00020000 */
#define GPIO_ADVCFGRH_INVCLK12      (0x4UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00040000 */
#define GPIO_ADVCFGRH_RET12         (0x8UL << GPIO_ADVCFGRH_12_Pos)         /*!< 0x00080000 */
#define GPIO_ADVCFGRH_13_Pos     	(20U)
#define GPIO_ADVCFGRH_13_Msk     	(0xFU << GPIO_ADVCFGRH_13_Pos)     /*!< 0x00F00000 */
#define GPIO_ADVCFGRH_13         	GPIO_ADVCFGRH_13_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH13     (0x1UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00100000 */
#define GPIO_ADVCFGRH_DE13          (0x2UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00200000 */
#define GPIO_ADVCFGRH_INVCLK13      (0x4UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00400000 */
#define GPIO_ADVCFGRH_RET13         (0x8UL << GPIO_ADVCFGRH_13_Pos)         /*!< 0x00800000 */
#define GPIO_ADVCFGRH_14_Pos     	(24U)
#define GPIO_ADVCFGRH_14_Msk     	(0xFU << GPIO_ADVCFGRH_14_Pos)     /*!< 0x0F000000 */
#define GPIO_ADVCFGRH_14         	GPIO_ADVCFGRH_14_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH14     (0x1UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x01000000 */
#define GPIO_ADVCFGRH_DE14          (0x2UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x02000000 */
#define GPIO_ADVCFGRH_INVCLK14      (0x4UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x04000000 */
#define GPIO_ADVCFGRH_RET14         (0x8UL << GPIO_ADVCFGRH_14_Pos)         /*!< 0x08000000 */
#define GPIO_ADVCFGRH_15_Pos     	(28U)
#define GPIO_ADVCFGRH_15_Msk     	(0xFU << GPIO_ADVCFGRH_15_Pos)     /*!< 0xF0000000 */
#define GPIO_ADVCFGRH_15         	GPIO_ADVCFGRH_15_Msk               /*!< [3:0]: Port x IO pin y configuration (y = 8 to 15)Successful read or write to this bit must be secure if SECy bit is set in GPIOx_SECCFGR, and must be privileged if PRIVy bit is set in GPIOx_PRIVCFGR.Only authorized CPU can read or write this bit, as described in Section1.4: IO pin allocation to compartments. Illegal read returns zero. Illegal write is ignored. */
#define GPIO_ADVCFGRH_DLYPATH15     (0x1UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x10000000 */
#define GPIO_ADVCFGRH_DE15          (0x2UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x20000000 */
#define GPIO_ADVCFGRH_INVCLK15      (0x4UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x40000000 */
#define GPIO_ADVCFGRH_RET15         (0x8UL << GPIO_ADVCFGRH_15_Pos)         /*!< 0x80000000 */

/****************  Bit definition for GPIO_CIDCFGR0 register  *****************/
#define GPIO_CIDCFGR0_CFEN_Pos         (0U)
#define GPIO_CIDCFGR0_CFEN_Msk         (0x1U << GPIO_CIDCFGR0_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR0_CFEN             GPIO_CIDCFGR0_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR0_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR0_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR0_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR0_SEM_EN           GPIO_CIDCFGR0_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR0_SCID_Pos         (4U)
#define GPIO_CIDCFGR0_SCID_Msk         (0x3U << GPIO_CIDCFGR0_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR0_SCID             GPIO_CIDCFGR0_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR0_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR0_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR0_SEMWLC0          GPIO_CIDCFGR0_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR0_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR0_SEMWLC1          GPIO_CIDCFGR0_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR0_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR0_SEMWLC2          GPIO_CIDCFGR0_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR0_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR0_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR0_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR0_SEMWLC3          GPIO_CIDCFGR0_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR0 register  ******************/
#define GPIO_SEMCR0_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR0_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR0_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR0_SEM_MUTEX          GPIO_SEMCR0_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR0_SEMCID_Pos         (4U)
#define GPIO_SEMCR0_SEMCID_Msk         (0x3U << GPIO_SEMCR0_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR0_SEMCID             GPIO_SEMCR0_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR1 register  *****************/
#define GPIO_CIDCFGR1_CFEN_Pos         (0U)
#define GPIO_CIDCFGR1_CFEN_Msk         (0x1U << GPIO_CIDCFGR1_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR1_CFEN             GPIO_CIDCFGR1_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR1_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR1_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR1_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR1_SEM_EN           GPIO_CIDCFGR1_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR1_SCID_Pos         (4U)
#define GPIO_CIDCFGR1_SCID_Msk         (0x3U << GPIO_CIDCFGR1_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR1_SCID             GPIO_CIDCFGR1_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR1_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR1_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR1_SEMWLC0          GPIO_CIDCFGR1_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR1_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR1_SEMWLC1          GPIO_CIDCFGR1_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR1_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR1_SEMWLC2          GPIO_CIDCFGR1_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR1_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR1_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR1_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR1_SEMWLC3          GPIO_CIDCFGR1_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR1 register  ******************/
#define GPIO_SEMCR1_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR1_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR1_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR1_SEM_MUTEX          GPIO_SEMCR1_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR1_SEMCID_Pos         (4U)
#define GPIO_SEMCR1_SEMCID_Msk         (0x3U << GPIO_SEMCR1_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR1_SEMCID             GPIO_SEMCR1_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR2 register  *****************/
#define GPIO_CIDCFGR2_CFEN_Pos         (0U)
#define GPIO_CIDCFGR2_CFEN_Msk         (0x1U << GPIO_CIDCFGR2_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR2_CFEN             GPIO_CIDCFGR2_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR2_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR2_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR2_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR2_SEM_EN           GPIO_CIDCFGR2_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR2_SCID_Pos         (4U)
#define GPIO_CIDCFGR2_SCID_Msk         (0x3U << GPIO_CIDCFGR2_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR2_SCID             GPIO_CIDCFGR2_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR2_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR2_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR2_SEMWLC0          GPIO_CIDCFGR2_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR2_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR2_SEMWLC1          GPIO_CIDCFGR2_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR2_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR2_SEMWLC2          GPIO_CIDCFGR2_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR2_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR2_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR2_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR2_SEMWLC3          GPIO_CIDCFGR2_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR2 register  ******************/
#define GPIO_SEMCR2_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR2_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR2_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR2_SEM_MUTEX          GPIO_SEMCR2_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR2_SEMCID_Pos         (4U)
#define GPIO_SEMCR2_SEMCID_Msk         (0x3U << GPIO_SEMCR2_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR2_SEMCID             GPIO_SEMCR2_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR3 register  *****************/
#define GPIO_CIDCFGR3_CFEN_Pos         (0U)
#define GPIO_CIDCFGR3_CFEN_Msk         (0x1U << GPIO_CIDCFGR3_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR3_CFEN             GPIO_CIDCFGR3_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR3_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR3_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR3_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR3_SEM_EN           GPIO_CIDCFGR3_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR3_SCID_Pos         (4U)
#define GPIO_CIDCFGR3_SCID_Msk         (0x3U << GPIO_CIDCFGR3_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR3_SCID             GPIO_CIDCFGR3_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR3_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR3_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR3_SEMWLC0          GPIO_CIDCFGR3_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR3_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR3_SEMWLC1          GPIO_CIDCFGR3_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR3_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR3_SEMWLC2          GPIO_CIDCFGR3_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR3_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR3_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR3_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR3_SEMWLC3          GPIO_CIDCFGR3_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR3 register  ******************/
#define GPIO_SEMCR3_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR3_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR3_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR3_SEM_MUTEX          GPIO_SEMCR3_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR3_SEMCID_Pos         (4U)
#define GPIO_SEMCR3_SEMCID_Msk         (0x3U << GPIO_SEMCR3_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR3_SEMCID             GPIO_SEMCR3_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR4 register  *****************/
#define GPIO_CIDCFGR4_CFEN_Pos         (0U)
#define GPIO_CIDCFGR4_CFEN_Msk         (0x1U << GPIO_CIDCFGR4_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR4_CFEN             GPIO_CIDCFGR4_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR4_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR4_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR4_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR4_SEM_EN           GPIO_CIDCFGR4_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR4_SCID_Pos         (4U)
#define GPIO_CIDCFGR4_SCID_Msk         (0x3U << GPIO_CIDCFGR4_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR4_SCID             GPIO_CIDCFGR4_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR4_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR4_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR4_SEMWLC0          GPIO_CIDCFGR4_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR4_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR4_SEMWLC1          GPIO_CIDCFGR4_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR4_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR4_SEMWLC2          GPIO_CIDCFGR4_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR4_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR4_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR4_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR4_SEMWLC3          GPIO_CIDCFGR4_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR4 register  ******************/
#define GPIO_SEMCR4_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR4_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR4_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR4_SEM_MUTEX          GPIO_SEMCR4_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR4_SEMCID_Pos         (4U)
#define GPIO_SEMCR4_SEMCID_Msk         (0x3U << GPIO_SEMCR4_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR4_SEMCID             GPIO_SEMCR4_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR5 register  *****************/
#define GPIO_CIDCFGR5_CFEN_Pos         (0U)
#define GPIO_CIDCFGR5_CFEN_Msk         (0x1U << GPIO_CIDCFGR5_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR5_CFEN             GPIO_CIDCFGR5_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR5_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR5_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR5_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR5_SEM_EN           GPIO_CIDCFGR5_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR5_SCID_Pos         (4U)
#define GPIO_CIDCFGR5_SCID_Msk         (0x3U << GPIO_CIDCFGR5_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR5_SCID             GPIO_CIDCFGR5_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR5_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR5_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR5_SEMWLC0          GPIO_CIDCFGR5_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR5_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR5_SEMWLC1          GPIO_CIDCFGR5_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR5_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR5_SEMWLC2          GPIO_CIDCFGR5_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR5_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR5_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR5_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR5_SEMWLC3          GPIO_CIDCFGR5_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR5 register  ******************/
#define GPIO_SEMCR5_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR5_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR5_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR5_SEM_MUTEX          GPIO_SEMCR5_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR5_SEMCID_Pos         (4U)
#define GPIO_SEMCR5_SEMCID_Msk         (0x3U << GPIO_SEMCR5_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR5_SEMCID             GPIO_SEMCR5_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR6 register  *****************/
#define GPIO_CIDCFGR6_CFEN_Pos         (0U)
#define GPIO_CIDCFGR6_CFEN_Msk         (0x1U << GPIO_CIDCFGR6_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR6_CFEN             GPIO_CIDCFGR6_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR6_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR6_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR6_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR6_SEM_EN           GPIO_CIDCFGR6_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR6_SCID_Pos         (4U)
#define GPIO_CIDCFGR6_SCID_Msk         (0x3U << GPIO_CIDCFGR6_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR6_SCID             GPIO_CIDCFGR6_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR6_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR6_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR6_SEMWLC0          GPIO_CIDCFGR6_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR6_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR6_SEMWLC1          GPIO_CIDCFGR6_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR6_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR6_SEMWLC2          GPIO_CIDCFGR6_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR6_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR6_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR6_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR6_SEMWLC3          GPIO_CIDCFGR6_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR6 register  ******************/
#define GPIO_SEMCR6_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR6_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR6_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR6_SEM_MUTEX          GPIO_SEMCR6_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR6_SEMCID_Pos         (4U)
#define GPIO_SEMCR6_SEMCID_Msk         (0x3U << GPIO_SEMCR6_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR6_SEMCID             GPIO_SEMCR6_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR7 register  *****************/
#define GPIO_CIDCFGR7_CFEN_Pos         (0U)
#define GPIO_CIDCFGR7_CFEN_Msk         (0x1U << GPIO_CIDCFGR7_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR7_CFEN             GPIO_CIDCFGR7_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR7_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR7_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR7_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR7_SEM_EN           GPIO_CIDCFGR7_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR7_SCID_Pos         (4U)
#define GPIO_CIDCFGR7_SCID_Msk         (0x3U << GPIO_CIDCFGR7_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR7_SCID             GPIO_CIDCFGR7_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR7_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR7_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR7_SEMWLC0          GPIO_CIDCFGR7_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR7_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR7_SEMWLC1          GPIO_CIDCFGR7_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR7_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR7_SEMWLC2          GPIO_CIDCFGR7_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR7_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR7_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR7_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR7_SEMWLC3          GPIO_CIDCFGR7_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR7 register  ******************/
#define GPIO_SEMCR7_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR7_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR7_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR7_SEM_MUTEX          GPIO_SEMCR7_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR7_SEMCID_Pos         (4U)
#define GPIO_SEMCR7_SEMCID_Msk         (0x3U << GPIO_SEMCR7_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR7_SEMCID             GPIO_SEMCR7_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR8 register  *****************/
#define GPIO_CIDCFGR8_CFEN_Pos         (0U)
#define GPIO_CIDCFGR8_CFEN_Msk         (0x1U << GPIO_CIDCFGR8_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR8_CFEN             GPIO_CIDCFGR8_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR8_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR8_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR8_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR8_SEM_EN           GPIO_CIDCFGR8_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR8_SCID_Pos         (4U)
#define GPIO_CIDCFGR8_SCID_Msk         (0x3U << GPIO_CIDCFGR8_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR8_SCID             GPIO_CIDCFGR8_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR8_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR8_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR8_SEMWLC0          GPIO_CIDCFGR8_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR8_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR8_SEMWLC1          GPIO_CIDCFGR8_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR8_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR8_SEMWLC2          GPIO_CIDCFGR8_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR8_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR8_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR8_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR8_SEMWLC3          GPIO_CIDCFGR8_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR8 register  ******************/
#define GPIO_SEMCR8_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR8_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR8_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR8_SEM_MUTEX          GPIO_SEMCR8_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR8_SEMCID_Pos         (4U)
#define GPIO_SEMCR8_SEMCID_Msk         (0x3U << GPIO_SEMCR8_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR8_SEMCID             GPIO_SEMCR8_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR9 register  *****************/
#define GPIO_CIDCFGR9_CFEN_Pos         (0U)
#define GPIO_CIDCFGR9_CFEN_Msk         (0x1U << GPIO_CIDCFGR9_CFEN_Pos)         /*!< 0x00000001 */
#define GPIO_CIDCFGR9_CFEN             GPIO_CIDCFGR9_CFEN_Msk                   /*!< CID filtering enable */
#define GPIO_CIDCFGR9_SEM_EN_Pos       (1U)
#define GPIO_CIDCFGR9_SEM_EN_Msk       (0x1U << GPIO_CIDCFGR9_SEM_EN_Pos)       /*!< 0x00000002 */
#define GPIO_CIDCFGR9_SEM_EN           GPIO_CIDCFGR9_SEM_EN_Msk                 /*!< Semaphore enable */
#define GPIO_CIDCFGR9_SCID_Pos         (4U)
#define GPIO_CIDCFGR9_SCID_Msk         (0x3U << GPIO_CIDCFGR9_SCID_Pos)         /*!< 0x00000030 */
#define GPIO_CIDCFGR9_SCID             GPIO_CIDCFGR9_SCID_Msk                   /*!< Static CID */
#define GPIO_CIDCFGR9_SEMWLC0_Pos      (16U)
#define GPIO_CIDCFGR9_SEMWLC0_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC0_Pos)      /*!< 0x00010000 */
#define GPIO_CIDCFGR9_SEMWLC0          GPIO_CIDCFGR9_SEMWLC0_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC1_Pos      (17U)
#define GPIO_CIDCFGR9_SEMWLC1_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC1_Pos)      /*!< 0x00020000 */
#define GPIO_CIDCFGR9_SEMWLC1          GPIO_CIDCFGR9_SEMWLC1_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC2_Pos      (18U)
#define GPIO_CIDCFGR9_SEMWLC2_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC2_Pos)      /*!< 0x00040000 */
#define GPIO_CIDCFGR9_SEMWLC2          GPIO_CIDCFGR9_SEMWLC2_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR9_SEMWLC3_Pos      (19U)
#define GPIO_CIDCFGR9_SEMWLC3_Msk      (0x1U << GPIO_CIDCFGR9_SEMWLC3_Pos)      /*!< 0x00080000 */
#define GPIO_CIDCFGR9_SEMWLC3          GPIO_CIDCFGR9_SEMWLC3_Msk                /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR9 register  ******************/
#define GPIO_SEMCR9_SEM_MUTEX_Pos      (0U)
#define GPIO_SEMCR9_SEM_MUTEX_Msk      (0x1U << GPIO_SEMCR9_SEM_MUTEX_Pos)      /*!< 0x00000001 */
#define GPIO_SEMCR9_SEM_MUTEX          GPIO_SEMCR9_SEM_MUTEX_Msk                /*!< Semaphore Mutex */
#define GPIO_SEMCR9_SEMCID_Pos         (4U)
#define GPIO_SEMCR9_SEMCID_Msk         (0x3U << GPIO_SEMCR9_SEMCID_Pos)         /*!< 0x00000030 */
#define GPIO_SEMCR9_SEMCID             GPIO_SEMCR9_SEMCID_Msk                   /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR10 register  ****************/
#define GPIO_CIDCFGR10_CFEN_Pos        (0U)
#define GPIO_CIDCFGR10_CFEN_Msk        (0x1U << GPIO_CIDCFGR10_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR10_CFEN            GPIO_CIDCFGR10_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR10_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR10_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR10_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR10_SEM_EN          GPIO_CIDCFGR10_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR10_SCID_Pos        (4U)
#define GPIO_CIDCFGR10_SCID_Msk        (0x3U << GPIO_CIDCFGR10_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR10_SCID            GPIO_CIDCFGR10_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR10_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR10_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR10_SEMWLC0         GPIO_CIDCFGR10_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR10_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR10_SEMWLC1         GPIO_CIDCFGR10_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR10_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR10_SEMWLC2         GPIO_CIDCFGR10_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR10_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR10_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR10_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR10_SEMWLC3         GPIO_CIDCFGR10_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR10 register  *****************/
#define GPIO_SEMCR10_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR10_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR10_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR10_SEM_MUTEX         GPIO_SEMCR10_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR10_SEMCID_Pos        (4U)
#define GPIO_SEMCR10_SEMCID_Msk        (0x3U << GPIO_SEMCR10_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR10_SEMCID            GPIO_SEMCR10_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR11 register  ****************/
#define GPIO_CIDCFGR11_CFEN_Pos        (0U)
#define GPIO_CIDCFGR11_CFEN_Msk        (0x1U << GPIO_CIDCFGR11_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR11_CFEN            GPIO_CIDCFGR11_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR11_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR11_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR11_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR11_SEM_EN          GPIO_CIDCFGR11_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR11_SCID_Pos        (4U)
#define GPIO_CIDCFGR11_SCID_Msk        (0x3U << GPIO_CIDCFGR11_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR11_SCID            GPIO_CIDCFGR11_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR11_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR11_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR11_SEMWLC0         GPIO_CIDCFGR11_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR11_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR11_SEMWLC1         GPIO_CIDCFGR11_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR11_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR11_SEMWLC2         GPIO_CIDCFGR11_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR11_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR11_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR11_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR11_SEMWLC3         GPIO_CIDCFGR11_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR11 register  *****************/
#define GPIO_SEMCR11_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR11_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR11_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR11_SEM_MUTEX         GPIO_SEMCR11_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR11_SEMCID_Pos        (4U)
#define GPIO_SEMCR11_SEMCID_Msk        (0x3U << GPIO_SEMCR11_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR11_SEMCID            GPIO_SEMCR11_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR12 register  ****************/
#define GPIO_CIDCFGR12_CFEN_Pos        (0U)
#define GPIO_CIDCFGR12_CFEN_Msk        (0x1U << GPIO_CIDCFGR12_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR12_CFEN            GPIO_CIDCFGR12_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR12_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR12_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR12_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR12_SEM_EN          GPIO_CIDCFGR12_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR12_SCID_Pos        (4U)
#define GPIO_CIDCFGR12_SCID_Msk        (0x3U << GPIO_CIDCFGR12_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR12_SCID            GPIO_CIDCFGR12_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR12_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR12_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR12_SEMWLC0         GPIO_CIDCFGR12_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR12_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR12_SEMWLC1         GPIO_CIDCFGR12_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR12_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR12_SEMWLC2         GPIO_CIDCFGR12_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR12_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR12_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR12_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR12_SEMWLC3         GPIO_CIDCFGR12_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR12 register  *****************/
#define GPIO_SEMCR12_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR12_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR12_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR12_SEM_MUTEX         GPIO_SEMCR12_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR12_SEMCID_Pos        (4U)
#define GPIO_SEMCR12_SEMCID_Msk        (0x3U << GPIO_SEMCR12_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR12_SEMCID            GPIO_SEMCR12_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR13 register  ****************/
#define GPIO_CIDCFGR13_CFEN_Pos        (0U)
#define GPIO_CIDCFGR13_CFEN_Msk        (0x1U << GPIO_CIDCFGR13_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR13_CFEN            GPIO_CIDCFGR13_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR13_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR13_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR13_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR13_SEM_EN          GPIO_CIDCFGR13_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR13_SCID_Pos        (4U)
#define GPIO_CIDCFGR13_SCID_Msk        (0x3U << GPIO_CIDCFGR13_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR13_SCID            GPIO_CIDCFGR13_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR13_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR13_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR13_SEMWLC0         GPIO_CIDCFGR13_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR13_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR13_SEMWLC1         GPIO_CIDCFGR13_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR13_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR13_SEMWLC2         GPIO_CIDCFGR13_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR13_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR13_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR13_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR13_SEMWLC3         GPIO_CIDCFGR13_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR13 register  *****************/
#define GPIO_SEMCR13_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR13_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR13_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR13_SEM_MUTEX         GPIO_SEMCR13_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR13_SEMCID_Pos        (4U)
#define GPIO_SEMCR13_SEMCID_Msk        (0x3U << GPIO_SEMCR13_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR13_SEMCID            GPIO_SEMCR13_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR14 register  ****************/
#define GPIO_CIDCFGR14_CFEN_Pos        (0U)
#define GPIO_CIDCFGR14_CFEN_Msk        (0x1U << GPIO_CIDCFGR14_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR14_CFEN            GPIO_CIDCFGR14_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR14_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR14_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR14_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR14_SEM_EN          GPIO_CIDCFGR14_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR14_SCID_Pos        (4U)
#define GPIO_CIDCFGR14_SCID_Msk        (0x3U << GPIO_CIDCFGR14_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR14_SCID            GPIO_CIDCFGR14_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR14_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR14_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR14_SEMWLC0         GPIO_CIDCFGR14_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR14_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR14_SEMWLC1         GPIO_CIDCFGR14_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR14_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR14_SEMWLC2         GPIO_CIDCFGR14_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR14_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR14_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR14_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR14_SEMWLC3         GPIO_CIDCFGR14_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR14 register  *****************/
#define GPIO_SEMCR14_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR14_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR14_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR14_SEM_MUTEX         GPIO_SEMCR14_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR14_SEMCID_Pos        (4U)
#define GPIO_SEMCR14_SEMCID_Msk        (0x3U << GPIO_SEMCR14_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR14_SEMCID            GPIO_SEMCR14_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_CIDCFGR15 register  ****************/
#define GPIO_CIDCFGR15_CFEN_Pos        (0U)
#define GPIO_CIDCFGR15_CFEN_Msk        (0x1U << GPIO_CIDCFGR15_CFEN_Pos)        /*!< 0x00000001 */
#define GPIO_CIDCFGR15_CFEN            GPIO_CIDCFGR15_CFEN_Msk                  /*!< CID filtering enable */
#define GPIO_CIDCFGR15_SEM_EN_Pos      (1U)
#define GPIO_CIDCFGR15_SEM_EN_Msk      (0x1U << GPIO_CIDCFGR15_SEM_EN_Pos)      /*!< 0x00000002 */
#define GPIO_CIDCFGR15_SEM_EN          GPIO_CIDCFGR15_SEM_EN_Msk                /*!< Semaphore enable */
#define GPIO_CIDCFGR15_SCID_Pos        (4U)
#define GPIO_CIDCFGR15_SCID_Msk        (0x3U << GPIO_CIDCFGR15_SCID_Pos)        /*!< 0x00000030 */
#define GPIO_CIDCFGR15_SCID            GPIO_CIDCFGR15_SCID_Msk                  /*!< Static CID */
#define GPIO_CIDCFGR15_SEMWLC0_Pos     (16U)
#define GPIO_CIDCFGR15_SEMWLC0_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC0_Pos)     /*!< 0x00010000 */
#define GPIO_CIDCFGR15_SEMWLC0         GPIO_CIDCFGR15_SEMWLC0_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC1_Pos     (17U)
#define GPIO_CIDCFGR15_SEMWLC1_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC1_Pos)     /*!< 0x00020000 */
#define GPIO_CIDCFGR15_SEMWLC1         GPIO_CIDCFGR15_SEMWLC1_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC2_Pos     (18U)
#define GPIO_CIDCFGR15_SEMWLC2_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC2_Pos)     /*!< 0x00040000 */
#define GPIO_CIDCFGR15_SEMWLC2         GPIO_CIDCFGR15_SEMWLC2_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */
#define GPIO_CIDCFGR15_SEMWLC3_Pos     (19U)
#define GPIO_CIDCFGR15_SEMWLC3_Msk     (0x1U << GPIO_CIDCFGR15_SEMWLC3_Pos)     /*!< 0x00080000 */
#define GPIO_CIDCFGR15_SEMWLC3         GPIO_CIDCFGR15_SEMWLC3_Msk               /*!< Semaphore whitelist for compartment y (y=0 to 3) */

/*****************  Bit definition for GPIO_SEMCR15 register  *****************/
#define GPIO_SEMCR15_SEM_MUTEX_Pos     (0U)
#define GPIO_SEMCR15_SEM_MUTEX_Msk     (0x1U << GPIO_SEMCR15_SEM_MUTEX_Pos)     /*!< 0x00000001 */
#define GPIO_SEMCR15_SEM_MUTEX         GPIO_SEMCR15_SEM_MUTEX_Msk               /*!< Semaphore Mutex */
#define GPIO_SEMCR15_SEMCID_Pos        (4U)
#define GPIO_SEMCR15_SEMCID_Msk        (0x3U << GPIO_SEMCR15_SEMCID_Pos)        /*!< 0x00000030 */
#define GPIO_SEMCR15_SEMCID            GPIO_SEMCR15_SEMCID_Msk                  /*!< Semaphore current CID */

/****************  Bit definition for GPIO_HWCFGR10 register  *****************/
#define GPIO_HWCFGR10_AHB_IOP_Pos      (0U)
#define GPIO_HWCFGR10_AHB_IOP_Msk      (0xFU << GPIO_HWCFGR10_AHB_IOP_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR10_AHB_IOP          GPIO_HWCFGR10_AHB_IOP_Msk                /*!< Bus interface configuration */
#define GPIO_HWCFGR10_AFSIZE_CFG_Pos   (4U)
#define GPIO_HWCFGR10_AFSIZE_CFG_Msk   (0xFU << GPIO_HWCFGR10_AFSIZE_CFG_Pos)   /*!< 0x000000F0 */
#define GPIO_HWCFGR10_AFSIZE_CFG       GPIO_HWCFGR10_AFSIZE_CFG_Msk             /*!< Number of AF available for each I/O */
#define GPIO_HWCFGR10_SPEED_CFG_Pos    (8U)
#define GPIO_HWCFGR10_SPEED_CFG_Msk    (0xFU << GPIO_HWCFGR10_SPEED_CFG_Pos)    /*!< 0x00000F00 */
#define GPIO_HWCFGR10_SPEED_CFG        GPIO_HWCFGR10_SPEED_CFG_Msk              /*!< Number of speed lines for each I/O */
#define GPIO_HWCFGR10_LOCK_CFG_Pos     (12U)
#define GPIO_HWCFGR10_LOCK_CFG_Msk     (0xFU << GPIO_HWCFGR10_LOCK_CFG_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR10_LOCK_CFG         GPIO_HWCFGR10_LOCK_CFG_Msk               /*!< Lock mechanism activation */
#define GPIO_HWCFGR10_SEC_CFG_Pos      (16U)
#define GPIO_HWCFGR10_SEC_CFG_Msk      (0xFU << GPIO_HWCFGR10_SEC_CFG_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR10_SEC_CFG          GPIO_HWCFGR10_SEC_CFG_Msk                /*!< Security activation */
#define GPIO_HWCFGR10_OR_CFG_Pos       (20U)
#define GPIO_HWCFGR10_OR_CFG_Msk       (0xFU << GPIO_HWCFGR10_OR_CFG_Pos)       /*!< 0x00F00000 */
#define GPIO_HWCFGR10_OR_CFG           GPIO_HWCFGR10_OR_CFG_Msk                 /*!< Option register configuration */

/*****************  Bit definition for GPIO_HWCFGR9 register  *****************/
#define GPIO_HWCFGR9_EN_IO_Pos         (0U)
#define GPIO_HWCFGR9_EN_IO_Msk         (0xFFFFU << GPIO_HWCFGR9_EN_IO_Pos)      /*!< 0x0000FFFF */
#define GPIO_HWCFGR9_EN_IO             GPIO_HWCFGR9_EN_IO_Msk                   /*!< Presence granularity, each bit indicate the presence of the IO */

/*****************  Bit definition for GPIO_HWCFGR8 register  *****************/
#define GPIO_HWCFGR8_AF_PRIO8_Pos      (0U)
#define GPIO_HWCFGR8_AF_PRIO8_Msk      (0xFU << GPIO_HWCFGR8_AF_PRIO8_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR8_AF_PRIO8          GPIO_HWCFGR8_AF_PRIO8_Msk                /*!< Indicate the priority AF for I/O8 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO9_Pos      (4U)
#define GPIO_HWCFGR8_AF_PRIO9_Msk      (0xFU << GPIO_HWCFGR8_AF_PRIO9_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR8_AF_PRIO9          GPIO_HWCFGR8_AF_PRIO9_Msk                /*!< Indicate the priority AF for I/O9 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO10_Pos     (8U)
#define GPIO_HWCFGR8_AF_PRIO10_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO10_Pos)     /*!< 0x00000F00 */
#define GPIO_HWCFGR8_AF_PRIO10         GPIO_HWCFGR8_AF_PRIO10_Msk               /*!< Indicate the priority AF for I/O10 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO11_Pos     (12U)
#define GPIO_HWCFGR8_AF_PRIO11_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO11_Pos)     /*!< 0x0000F000 */
#define GPIO_HWCFGR8_AF_PRIO11         GPIO_HWCFGR8_AF_PRIO11_Msk               /*!< Indicate the priority AF for I/O11 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO12_Pos     (16U)
#define GPIO_HWCFGR8_AF_PRIO12_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO12_Pos)     /*!< 0x000F0000 */
#define GPIO_HWCFGR8_AF_PRIO12         GPIO_HWCFGR8_AF_PRIO12_Msk               /*!< Indicate the priority AF for I/O12 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO13_Pos     (20U)
#define GPIO_HWCFGR8_AF_PRIO13_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO13_Pos)     /*!< 0x00F00000 */
#define GPIO_HWCFGR8_AF_PRIO13         GPIO_HWCFGR8_AF_PRIO13_Msk               /*!< Indicate the priority AF for I/O13 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO14_Pos     (24U)
#define GPIO_HWCFGR8_AF_PRIO14_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO14_Pos)     /*!< 0x0F000000 */
#define GPIO_HWCFGR8_AF_PRIO14         GPIO_HWCFGR8_AF_PRIO14_Msk               /*!< Indicate the priority AF for I/O14 (0 to F) */
#define GPIO_HWCFGR8_AF_PRIO15_Pos     (28U)
#define GPIO_HWCFGR8_AF_PRIO15_Msk     (0xFU << GPIO_HWCFGR8_AF_PRIO15_Pos)     /*!< 0xF0000000 */
#define GPIO_HWCFGR8_AF_PRIO15         GPIO_HWCFGR8_AF_PRIO15_Msk               /*!< Indicate the priority AF for I/O15 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR7 register  *****************/
#define GPIO_HWCFGR7_AF_PRIO0_Pos      (0U)
#define GPIO_HWCFGR7_AF_PRIO0_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO0_Pos)      /*!< 0x0000000F */
#define GPIO_HWCFGR7_AF_PRIO0          GPIO_HWCFGR7_AF_PRIO0_Msk                /*!< Indicate the priority AF for I/O0 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO1_Pos      (4U)
#define GPIO_HWCFGR7_AF_PRIO1_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO1_Pos)      /*!< 0x000000F0 */
#define GPIO_HWCFGR7_AF_PRIO1          GPIO_HWCFGR7_AF_PRIO1_Msk                /*!< Indicate the priority AF for I/O1 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO2_Pos      (8U)
#define GPIO_HWCFGR7_AF_PRIO2_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO2_Pos)      /*!< 0x00000F00 */
#define GPIO_HWCFGR7_AF_PRIO2          GPIO_HWCFGR7_AF_PRIO2_Msk                /*!< Indicate the priority AF for I/O2 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO3_Pos      (12U)
#define GPIO_HWCFGR7_AF_PRIO3_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO3_Pos)      /*!< 0x0000F000 */
#define GPIO_HWCFGR7_AF_PRIO3          GPIO_HWCFGR7_AF_PRIO3_Msk                /*!< Indicate the priority AF for I/O3 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO4_Pos      (16U)
#define GPIO_HWCFGR7_AF_PRIO4_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO4_Pos)      /*!< 0x000F0000 */
#define GPIO_HWCFGR7_AF_PRIO4          GPIO_HWCFGR7_AF_PRIO4_Msk                /*!< Indicate the priority AF for I/O4 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO5_Pos      (20U)
#define GPIO_HWCFGR7_AF_PRIO5_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO5_Pos)      /*!< 0x00F00000 */
#define GPIO_HWCFGR7_AF_PRIO5          GPIO_HWCFGR7_AF_PRIO5_Msk                /*!< Indicate the priority AF for I/O5 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO6_Pos      (24U)
#define GPIO_HWCFGR7_AF_PRIO6_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO6_Pos)      /*!< 0x0F000000 */
#define GPIO_HWCFGR7_AF_PRIO6          GPIO_HWCFGR7_AF_PRIO6_Msk                /*!< Indicate the priority AF for I/O6 (0 to F) */
#define GPIO_HWCFGR7_AF_PRIO7_Pos      (28U)
#define GPIO_HWCFGR7_AF_PRIO7_Msk      (0xFU << GPIO_HWCFGR7_AF_PRIO7_Pos)      /*!< 0xF0000000 */
#define GPIO_HWCFGR7_AF_PRIO7          GPIO_HWCFGR7_AF_PRIO7_Msk                /*!< Indicate the priority AF for I/O7 (0 to F) */

/*****************  Bit definition for GPIO_HWCFGR6 register  *****************/
#define GPIO_HWCFGR6_MODER_RES_Pos     (0U)
#define GPIO_HWCFGR6_MODER_RES_Msk     (0xFFFFFFFFU << GPIO_HWCFGR6_MODER_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR6_MODER_RES         GPIO_HWCFGR6_MODER_RES_Msk               /*!< MODER register reset value */

/*****************  Bit definition for GPIO_HWCFGR5 register  *****************/
#define GPIO_HWCFGR5_PUPDR_RES_Pos     (0U)
#define GPIO_HWCFGR5_PUPDR_RES_Msk     (0xFFFFFFFFU << GPIO_HWCFGR5_PUPDR_RES_Pos)  /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR5_PUPDR_RES         GPIO_HWCFGR5_PUPDR_RES_Msk               /*!< Pull-up / pull-down register reset value */

/*****************  Bit definition for GPIO_HWCFGR4 register  *****************/
#define GPIO_HWCFGR4_OSPEED_RES_Pos    (0U)
#define GPIO_HWCFGR4_OSPEED_RES_Msk    (0xFFFFFFFFU << GPIO_HWCFGR4_OSPEED_RES_Pos)   /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR4_OSPEED_RES        GPIO_HWCFGR4_OSPEED_RES_Msk              /*!< OSPEED register reset value */

/*****************  Bit definition for GPIO_HWCFGR3 register  *****************/
#define GPIO_HWCFGR3_ODR_RES_Pos       (0U)
#define GPIO_HWCFGR3_ODR_RES_Msk       (0xFFFFU << GPIO_HWCFGR3_ODR_RES_Pos)    /*!< 0x0000FFFF */
#define GPIO_HWCFGR3_ODR_RES           GPIO_HWCFGR3_ODR_RES_Msk                 /*!< Output data register reset value */
#define GPIO_HWCFGR3_OTYPER_RES_Pos    (16U)
#define GPIO_HWCFGR3_OTYPER_RES_Msk    (0xFFFFU << GPIO_HWCFGR3_OTYPER_RES_Pos) /*!< 0xFFFF0000 */
#define GPIO_HWCFGR3_OTYPER_RES        GPIO_HWCFGR3_OTYPER_RES_Msk              /*!< Output type register reset value */

/*****************  Bit definition for GPIO_HWCFGR2 register  *****************/
#define GPIO_HWCFGR2_AFRL_RES_Pos      (0U)
#define GPIO_HWCFGR2_AFRL_RES_Msk      (0xFFFFFFFFU << GPIO_HWCFGR2_AFRL_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR2_AFRL_RES          GPIO_HWCFGR2_AFRL_RES_Msk                /*!< AF register low reset value */

/*****************  Bit definition for GPIO_HWCFGR1 register  *****************/
#define GPIO_HWCFGR1_AFRH_RES_Pos      (0U)
#define GPIO_HWCFGR1_AFRH_RES_Msk      (0xFFFFFFFFU << GPIO_HWCFGR1_AFRH_RES_Pos) /*!< 0xFFFFFFFF */
#define GPIO_HWCFGR1_AFRH_RES          GPIO_HWCFGR1_AFRH_RES_Msk                /*!< AF register high reset value */

/*****************  Bit definition for GPIO_HWCFGR0 register  *****************/
#define GPIO_HWCFGR0_OR_RES_Pos        (0U)
#define GPIO_HWCFGR0_OR_RES_Msk        (0xFFFFU << GPIO_HWCFGR0_OR_RES_Pos)     /*!< 0x0000FFFF */
#define GPIO_HWCFGR0_OR_RES            GPIO_HWCFGR0_OR_RES_Msk                  /*!< Option register reset value */

/******************  Bit definition for GPIO_VERR register  *******************/
#define GPIO_VERR_MINREV_Pos           (0U)
#define GPIO_VERR_MINREV_Msk           (0xFU << GPIO_VERR_MINREV_Pos)           /*!< 0x0000000F */
#define GPIO_VERR_MINREV               GPIO_VERR_MINREV_Msk                     /*!< Minor revision */
#define GPIO_VERR_MAJREV_Pos           (4U)
#define GPIO_VERR_MAJREV_Msk           (0xFU << GPIO_VERR_MAJREV_Pos)           /*!< 0x000000F0 */
#define GPIO_VERR_MAJREV               GPIO_VERR_MAJREV_Msk                     /*!< Major revision */

/******************  Bit definition for GPIO_IPIDR register  ******************/
#define GPIO_IPIDR_IPID_Pos            (0U)
#define GPIO_IPIDR_IPID_Msk            (0xFFFFFFFFU << GPIO_IPIDR_IPID_Pos)     /*!< 0xFFFFFFFF */
#define GPIO_IPIDR_IPID                GPIO_IPIDR_IPID_Msk                      /*!< IP identifier */

/******************  Bit definition for GPIO_SIDR register  *******************/
#define GPIO_SIDR_SID_Pos              (0U)
#define GPIO_SIDR_SID_Msk              (0xFFFFFFFFU << GPIO_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define GPIO_SIDR_SID                  GPIO_SIDR_SID_Msk                        /*!< Size identifier */

/******************************************************************************/
/*                                                                            */
/*                            HW Semaphore (HSEM)                             */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for HSEM_R register  *********************/
#define HSEM_R_PROCID_Pos               (0U)
#define HSEM_R_PROCID_Msk               (0xFFU << HSEM_R_PROCID_Pos)              /*!< 0x000000FF */
#define HSEM_R_PROCID                   HSEM_R_PROCID_Msk                         /*!< Semaphore PROCID. */
#define HSEM_R_LOCKID_Pos               (8U)
#define HSEM_R_LOCKID_Msk               (0xFU << HSEM_R_LOCKID_Pos)               /*!< 0x00000F00 */
#define HSEM_R_LOCKID                   HSEM_R_LOCKID_Msk                         /*!< Semaphore LOCKID. */
#define HSEM_R_SEC_Pos                  (12U)
#define HSEM_R_SEC_Msk                  (0x1U << HSEM_R_SEC_Pos)                  /*!< 0x00001000 */
#define HSEM_R_SEC                      HSEM_R_SEC_Msk                            /*!< Semaphore secure. */
#define HSEM_R_PRIV_Pos                 (13U)
#define HSEM_R_PRIV_Msk                 (0x1U << HSEM_R_PRIV_Pos)                 /*!< 0x00002000 */
#define HSEM_R_PRIV                     HSEM_R_PRIV_Msk                           /*!< Semaphore privilege. */
#define HSEM_R_CFEN_Pos                 (30U)
#define HSEM_R_CFEN_Msk                 (0x1U << HSEM_R_CFEN_Pos)                 /*!< 0x40000000 */
#define HSEM_R_CFEN                     HSEM_R_CFEN_Msk                           /*!< Semaphore CID filter indication. */
#define HSEM_R_LOCK_Pos                 (31U)
#define HSEM_R_LOCK_Msk                 (0x1U << HSEM_R_LOCK_Pos)                 /*!< 0x80000000 */
#define HSEM_R_LOCK                     HSEM_R_LOCK_Msk                           /*!< Lock indication. */

/******************  Bit definition for HSEM_RLR register  ********************/
#define HSEM_RLR_PROCID_Pos             (0U)
#define HSEM_RLR_PROCID_Msk             (0xFFU << HSEM_RLR_PROCID_Pos)            /*!< 0x000000FF */
#define HSEM_RLR_PROCID                 HSEM_RLR_PROCID_Msk                       /*!< Semaphore PROCID. */
#define HSEM_RLR_LOCKID_Pos             (8U)
#define HSEM_RLR_LOCKID_Msk             (0xFU << HSEM_RLR_LOCKID_Pos)             /*!< 0x00000F00 */
#define HSEM_RLR_LOCKID                 HSEM_RLR_LOCKID_Msk                       /*!< Semaphore LOCKID. */
#define HSEM_RLR_SEC_Pos                (12U)
#define HSEM_RLR_SEC_Msk                (0x1U << HSEM_RLR_SEC_Pos)                /*!< 0x00001000 */
#define HSEM_RLR_SEC                    HSEM_RLR_SEC_Msk                          /*!< Semaphore secure. */
#define HSEM_RLR_PRIV_Pos               (13U)
#define HSEM_RLR_PRIV_Msk               (0x1U << HSEM_RLR_PRIV_Pos)               /*!< 0x00002000 */
#define HSEM_RLR_PRIV                   HSEM_RLR_PRIV_Msk                         /*!< Semaphore privilege. */
#define HSEM_RLR_CFEN_Pos               (30U)
#define HSEM_RLR_CFEN_Msk               (0x1U << HSEM_RLR_CFEN_Pos)               /*!< 0x40000000 */
#define HSEM_RLR_CFEN                   HSEM_RLR_CFEN_Msk                         /*!< Semaphore CID filter indication. */
#define HSEM_RLR_LOCK_Pos               (31U)
#define HSEM_RLR_LOCK_Msk               (0x1U << HSEM_RLR_LOCK_Pos)               /*!< 0x80000000 */
#define HSEM_RLR_LOCK                   HSEM_RLR_LOCK_Msk                         /*!< Lock indication. */

/******************  Bit definition for HSEM_C1IER register  ******************/
#define HSEM_C1IER_ISE_Pos              (0U)
#define HSEM_C1IER_ISE_Msk              (0xFFFFU << HSEM_C1IER_ISE_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1IER_ISE                  HSEM_C1IER_ISE_Msk                        /*!< non-secure Interrupt(n) semaphore x enable bit. (x = 0 to 15) */

#define HSEM_C1IER_ISE0_Pos             (0U)
#define HSEM_C1IER_ISE0_Msk             (0x1UL << HSEM_C1IER_ISE0_Pos)               /*!< 0x00000001 */
#define HSEM_C1IER_ISE0                 HSEM_C1IER_ISE0_Msk                          /*!<semaphore 0 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE1_Pos             (1U)
#define HSEM_C1IER_ISE1_Msk             (0x1UL << HSEM_C1IER_ISE1_Pos)               /*!< 0x00000002 */
#define HSEM_C1IER_ISE1                 HSEM_C1IER_ISE1_Msk                          /*!<semaphore 1 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE2_Pos             (2U)
#define HSEM_C1IER_ISE2_Msk             (0x1UL << HSEM_C1IER_ISE2_Pos)               /*!< 0x00000004 */
#define HSEM_C1IER_ISE2                 HSEM_C1IER_ISE2_Msk                          /*!<semaphore 2 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE3_Pos             (3U)
#define HSEM_C1IER_ISE3_Msk             (0x1UL << HSEM_C1IER_ISE3_Pos)               /*!< 0x00000008 */
#define HSEM_C1IER_ISE3                 HSEM_C1IER_ISE3_Msk                          /*!<semaphore 3 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE4_Pos             (4U)
#define HSEM_C1IER_ISE4_Msk             (0x1UL << HSEM_C1IER_ISE4_Pos)               /*!< 0x00000010 */
#define HSEM_C1IER_ISE4                 HSEM_C1IER_ISE4_Msk                          /*!<semaphore 4 , interrupt 0 enable bit.  */
#define HSEM_C1IER_ISE5_Pos             (5U)
#define HSEM_C1IER_ISE5_Msk             (0x1UL << HSEM_C1IER_ISE5_Pos)               /*!< 0x00000020 */
#define HSEM_C1IER_ISE5                 HSEM_C1IER_ISE5_Msk                          /*!<semaphore 5 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE6_Pos             (6U)
#define HSEM_C1IER_ISE6_Msk             (0x1UL << HSEM_C1IER_ISE6_Pos)               /*!< 0x00000040 */
#define HSEM_C1IER_ISE6                 HSEM_C1IER_ISE6_Msk                          /*!<semaphore 6 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE7_Pos             (7U)
#define HSEM_C1IER_ISE7_Msk             (0x1UL << HSEM_C1IER_ISE7_Pos)               /*!< 0x00000080 */
#define HSEM_C1IER_ISE7                 HSEM_C1IER_ISE7_Msk                          /*!<semaphore 7 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE8_Pos             (8U)
#define HSEM_C1IER_ISE8_Msk             (0x1UL << HSEM_C1IER_ISE8_Pos)               /*!< 0x00000100 */
#define HSEM_C1IER_ISE8                 HSEM_C1IER_ISE8_Msk                          /*!<semaphore 8 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE9_Pos             (9U)
#define HSEM_C1IER_ISE9_Msk             (0x1UL << HSEM_C1IER_ISE9_Pos)               /*!< 0x00000200 */
#define HSEM_C1IER_ISE9                 HSEM_C1IER_ISE9_Msk                          /*!<semaphore 9 interrupt 0 enable bit.    */
#define HSEM_C1IER_ISE10_Pos            (10U)
#define HSEM_C1IER_ISE10_Msk            (0x1UL << HSEM_C1IER_ISE10_Pos)              /*!< 0x00000400 */
#define HSEM_C1IER_ISE10                HSEM_C1IER_ISE10_Msk                         /*!<semaphore 10 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE11_Pos            (11U)
#define HSEM_C1IER_ISE11_Msk            (0x1UL << HSEM_C1IER_ISE11_Pos)              /*!< 0x00000800 */
#define HSEM_C1IER_ISE11                HSEM_C1IER_ISE11_Msk                         /*!<semaphore 11 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE12_Pos            (12U)
#define HSEM_C1IER_ISE12_Msk            (0x1UL << HSEM_C1IER_ISE12_Pos)              /*!< 0x00001000 */
#define HSEM_C1IER_ISE12                HSEM_C1IER_ISE12_Msk                         /*!<semaphore 12 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE13_Pos            (13U)
#define HSEM_C1IER_ISE13_Msk            (0x1UL << HSEM_C1IER_ISE13_Pos)              /*!< 0x00002000 */
#define HSEM_C1IER_ISE13                HSEM_C1IER_ISE13_Msk                         /*!<semaphore 13 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE14_Pos            (14U)
#define HSEM_C1IER_ISE14_Msk            (0x1UL << HSEM_C1IER_ISE14_Pos)              /*!< 0x00004000 */
#define HSEM_C1IER_ISE14                HSEM_C1IER_ISE14_Msk                         /*!<semaphore 14 interrupt 0 enable bit.   */
#define HSEM_C1IER_ISE15_Pos            (15U)
#define HSEM_C1IER_ISE15_Msk            (0x1UL << HSEM_C1IER_ISE15_Pos)              /*!< 0x00008000 */
#define HSEM_C1IER_ISE15                HSEM_C1IER_ISE15_Msk                         /*!<semaphore 15 interrupt 0 enable bit. */

/******************  Bit definition for HSEM_C1ICR register  ******************/
#define HSEM_C1ICR_ISC_Pos              (0U)
#define HSEM_C1ICR_ISC_Msk              (0xFFFFU << HSEM_C1ICR_ISC_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1ICR_ISC                  HSEM_C1ICR_ISC_Msk                        /*!< non-secure Interrupt(n) semaphore x clear bit. (x = 0 to 15) */

/******************  Bit definition for HSEM_C1ISR register  ******************/
#define HSEM_C1ISR_ISF_Pos              (0U)
#define HSEM_C1ISR_ISF_Msk              (0xFFFFU << HSEM_C1ISR_ISF_Pos)           /*!< 0x0000FFFF */
#define HSEM_C1ISR_ISF                  HSEM_C1ISR_ISF_Msk                        /*!< non-secure Interrupt(n) semaphore x status bit before enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_C1MISR register  ******************/
#define HSEM_C1MISR_MISF_Pos            (0U)
#define HSEM_C1MISR_MISF_Msk            (0xFFFFU << HSEM_C1MISR_MISF_Pos)         /*!< 0x0000FFFF */
#define HSEM_C1MISR_MISF                HSEM_C1MISR_MISF_Msk                      /*!< masked non-secure interrupt(n) semaphore x status bit after enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1IER register  ******************/
#define HSEM_SC1IER_SISE_Pos            (0U)
#define HSEM_SC1IER_SISE_Msk            (0xFFFFU << HSEM_SC1IER_SISE_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1IER_SISE                HSEM_SC1IER_SISE_Msk                      /*!< Secure interrupt(n) semaphore x enable bit. (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1ICR register  ******************/
#define HSEM_SC1ICR_SISC_Pos            (0U)
#define HSEM_SC1ICR_SISC_Msk            (0xFFFFU << HSEM_SC1ICR_SISC_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1ICR_SISC                HSEM_SC1ICR_SISC_Msk                      /*!< Secure interrupt(n) semaphore x clear bit. (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1ISR register  ******************/
#define HSEM_SC1ISR_SISF_Pos            (0U)
#define HSEM_SC1ISR_SISF_Msk            (0xFFFFU << HSEM_SC1ISR_SISF_Pos)         /*!< 0x0000FFFF */
#define HSEM_SC1ISR_SISF                HSEM_SC1ISR_SISF_Msk                      /*!< Secure interrupt(n) semaphore x status bit before enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SC1MISR register  *****************/
#define HSEM_SC1MISR_SMISF_Pos          (0U)
#define HSEM_SC1MISR_SMISF_Msk          (0xFFFFU << HSEM_SC1MISR_SMISF_Pos)       /*!< 0x0000FFFF */
#define HSEM_SC1MISR_SMISF              HSEM_SC1MISR_SMISF_Msk                    /*!< Secure masked interrupt(n) semaphore x status bit after enable (mask). (x = 0 to 15) */

/*****************  Bit definition for HSEM_SECCFGR register  *****************/
#define HSEM_SECCFGR_SEC_Pos            (0U)
#define HSEM_SECCFGR_SEC_Msk            (0xFFFFU << HSEM_SECCFGR_SEC_Pos)         /*!< 0x0000FFFF */
#define HSEM_SECCFGR_SEC                HSEM_SECCFGR_SEC_Msk                      /*!< Semaphore x security attribute. (x = 0 to 15) */

/****************  Bit definition for HSEM_PRIVCFGR register  *****************/
#define HSEM_PRIVCFGR_PRIV_Pos          (0U)
#define HSEM_PRIVCFGR_PRIV_Msk          (0xFFFFU << HSEM_PRIVCFGR_PRIV_Pos)       /*!< 0x0000FFFF */
#define HSEM_PRIVCFGR_PRIV              HSEM_PRIVCFGR_PRIV_Msk                    /*!< Semaphore x privilege attribute. (x = 0 to 15) */

/****************  Bit definition for HSEM_C1CIDCFGR register  ****************/
#define HSEM_C1CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C1CIDCFGR_CFEN_Msk         (0x1U << HSEM_C1CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C1CIDCFGR_CFEN             HSEM_C1CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C1CIDCFGR_CID_Pos          (4U)
#define HSEM_C1CIDCFGR_CID_Msk          (0xFU << HSEM_C1CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C1CIDCFGR_CID              HSEM_C1CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/****************  Bit definition for HSEM_C2CIDCFGR register  ****************/
#define HSEM_C2CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C2CIDCFGR_CFEN_Msk         (0x1U << HSEM_C2CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C2CIDCFGR_CFEN             HSEM_C2CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C2CIDCFGR_CID_Pos          (4U)
#define HSEM_C2CIDCFGR_CID_Msk          (0xFU << HSEM_C2CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C2CIDCFGR_CID              HSEM_C2CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/****************  Bit definition for HSEM_C3CIDCFGR register  ****************/
#define HSEM_C3CIDCFGR_CFEN_Pos         (0U)
#define HSEM_C3CIDCFGR_CFEN_Msk         (0x1U << HSEM_C3CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_C3CIDCFGR_CFEN             HSEM_C3CIDCFGR_CFEN_Msk                   /*!< CPUn CID filtering enabled for HSEM_(S)CnIER, HSEM_(S)CnICR, HSEM_(S)CnISR, and HSEM_(S)CnMISR registers and for white list filter usage in HSEM_GpCIDCFGR.SEM_WLIST_Cn */
#define HSEM_C3CIDCFGR_CID_Pos          (4U)
#define HSEM_C3CIDCFGR_CID_Msk          (0xFU << HSEM_C3CIDCFGR_CID_Pos)          /*!< 0x000000F0 */
#define HSEM_C3CIDCFGR_CID              HSEM_C3CIDCFGR_CID_Msk                    /*!< CPUn CID domain identification */

/*******************  Bit definition for HSEM_CR register  ********************/
#define HSEM_CR_CFEN_Pos                (0U)
#define HSEM_CR_CFEN_Msk                (0x1U << HSEM_CR_CFEN_Pos)                /*!< 0x00000001 */
#define HSEM_CR_CFEN                    HSEM_CR_CFEN_Msk                          /*!< Semaphore CID filtered. */
#define HSEM_CR_LOCKID_Pos              (8U)
#define HSEM_CR_LOCKID_Msk              (0xFU << HSEM_CR_LOCKID_Pos)              /*!< 0x00000F00 */
#define HSEM_CR_LOCKID                  HSEM_CR_LOCKID_Msk                        /*!< LOCKID of semaphores to be cleared. */
#define HSEM_CR_SEC_Pos                 (12U)
#define HSEM_CR_SEC_Msk                 (0x1U << HSEM_CR_SEC_Pos)                 /*!< 0x00001000 */
#define HSEM_CR_SEC                     HSEM_CR_SEC_Msk                           /*!< SEC value of semaphores to be cleared. */
#define HSEM_CR_PRIV_Pos                (13U)
#define HSEM_CR_PRIV_Msk                (0x1U << HSEM_CR_PRIV_Pos)                /*!< 0x00002000 */
#define HSEM_CR_PRIV                    HSEM_CR_PRIV_Msk                          /*!< PRIV value of semaphores to be cleared. */
#define HSEM_CR_KEY_Pos                 (16U)
#define HSEM_CR_KEY_Msk                 (0xFFFFU << HSEM_CR_KEY_Pos)              /*!< 0xFFFF0000 */
#define HSEM_CR_KEY                     HSEM_CR_KEY_Msk                           /*!< Semaphore clear Key. */

/****************  Bit redefinition for legacy compatibility ******************/
#define HSEM_CR_COREID_Pos              HSEM_CR_LOCKID_Pos
#define HSEM_CR_COREID_Msk              HSEM_CR_LOCKID_Msk
#define HSEM_CR_COREID                  HSEM_CR_LOCKID

/******************  Bit definition for HSEM_KEYR register  *******************/
#define HSEM_KEYR_KEY_Pos               (16U)
#define HSEM_KEYR_KEY_Msk               (0xFFFFU << HSEM_KEYR_KEY_Pos)            /*!< 0xFFFF0000 */
#define HSEM_KEYR_KEY                   HSEM_KEYR_KEY_Msk                         /*!< Semaphore Clear Key. */

/****************  Bit definition for HSEM_G0CIDCFGR register  ****************/
#define HSEM_G0CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G0CIDCFGR_CFEN_Msk         (0x1U << HSEM_G0CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G0CIDCFGR_CFEN             HSEM_G0CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G0CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G0CIDCFGR_SEM_WLIST_C_Msk  (0x7U << HSEM_G0CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G0CIDCFGR_SEM_WLIST_C      HSEM_G0CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G1CIDCFGR register  ****************/
#define HSEM_G1CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G1CIDCFGR_CFEN_Msk         (0x1U << HSEM_G1CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G1CIDCFGR_CFEN             HSEM_G1CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G1CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G1CIDCFGR_SEM_WLIST_C_Msk  (0x7U << HSEM_G1CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G1CIDCFGR_SEM_WLIST_C      HSEM_G1CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G2CIDCFGR register  ****************/
#define HSEM_G2CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G2CIDCFGR_CFEN_Msk         (0x1U << HSEM_G2CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G2CIDCFGR_CFEN             HSEM_G2CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G2CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G2CIDCFGR_SEM_WLIST_C_Msk  (0x7U << HSEM_G2CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G2CIDCFGR_SEM_WLIST_C      HSEM_G2CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/****************  Bit definition for HSEM_G3CIDCFGR register  ****************/
#define HSEM_G3CIDCFGR_CFEN_Pos         (0U)
#define HSEM_G3CIDCFGR_CFEN_Msk         (0x1U << HSEM_G3CIDCFGR_CFEN_Pos)         /*!< 0x00000001 */
#define HSEM_G3CIDCFGR_CFEN             HSEM_G3CIDCFGR_CFEN_Msk                   /*!< Semaphore group p global CID filtering enable. */
#define HSEM_G3CIDCFGR_SEM_WLIST_C_Pos  (16U)
#define HSEM_G3CIDCFGR_SEM_WLIST_C_Msk  (0x7U << HSEM_G3CIDCFGR_SEM_WLIST_C_Pos)  /*!< 0x00070000 */
#define HSEM_G3CIDCFGR_SEM_WLIST_C      HSEM_G3CIDCFGR_SEM_WLIST_C_Msk            /*!< Semaphore group p CID filtering enable. */

/*****************  Bit definition for HSEM_HWCFGR2 register  *****************/
#define HSEM_HWCFGR2_MASTERID1_Pos      (0U)
#define HSEM_HWCFGR2_MASTERID1_Msk      (0xFU << HSEM_HWCFGR2_MASTERID1_Pos)      /*!< 0x0000000F */
#define HSEM_HWCFGR2_MASTERID1          HSEM_HWCFGR2_MASTERID1_Msk                /*!< Hardware configuration valid bus masters ID1 */
#define HSEM_HWCFGR2_MASTERID2_Pos      (4U)
#define HSEM_HWCFGR2_MASTERID2_Msk      (0xFU << HSEM_HWCFGR2_MASTERID2_Pos)      /*!< 0x000000F0 */
#define HSEM_HWCFGR2_MASTERID2          HSEM_HWCFGR2_MASTERID2_Msk                /*!< Hardware configuration valid bus masters ID2 */
#define HSEM_HWCFGR2_MASTERID3_Pos      (8U)
#define HSEM_HWCFGR2_MASTERID3_Msk      (0xFU << HSEM_HWCFGR2_MASTERID3_Pos)      /*!< 0x00000F00 */
#define HSEM_HWCFGR2_MASTERID3          HSEM_HWCFGR2_MASTERID3_Msk                /*!< Hardware configuration valid bus masters ID3 */
#define HSEM_HWCFGR2_MASTERID4_Pos      (12U)
#define HSEM_HWCFGR2_MASTERID4_Msk      (0xFU << HSEM_HWCFGR2_MASTERID4_Pos)      /*!< 0x0000F000 */
#define HSEM_HWCFGR2_MASTERID4          HSEM_HWCFGR2_MASTERID4_Msk                /*!< Hardware configuration valid bus masters ID4 */

/*****************  Bit definition for HSEM_HWCFGR1 register  *****************/
#define HSEM_HWCFGR1_NBSEM_Pos          (0U)
#define HSEM_HWCFGR1_NBSEM_Msk          (0xFFU << HSEM_HWCFGR1_NBSEM_Pos)         /*!< 0x000000FF */
#define HSEM_HWCFGR1_NBSEM              HSEM_HWCFGR1_NBSEM_Msk                    /*!< Hardware configuration number of semaphores */
#define HSEM_HWCFGR1_NBINT_Pos          (8U)
#define HSEM_HWCFGR1_NBINT_Msk          (0xFU << HSEM_HWCFGR1_NBINT_Pos)          /*!< 0x00000F00 */
#define HSEM_HWCFGR1_NBINT              HSEM_HWCFGR1_NBINT_Msk                    /*!< Hardware configuration number of interrupts/supported number of master ID */
#define HSEM_HWCFGR1_CID_WIDTH_Pos      (12U)
#define HSEM_HWCFGR1_CID_WIDTH_Msk      (0xFU << HSEM_HWCFGR1_CID_WIDTH_Pos)      /*!< 0x0000F000 */
#define HSEM_HWCFGR1_CID_WIDTH          HSEM_HWCFGR1_CID_WIDTH_Msk                /*!< Hardware Configuration compartment isolation bus width */
#define HSEM_HWCFGR1_SECEN_Pos          (16U)
#define HSEM_HWCFGR1_SECEN_Msk          (0x1U << HSEM_HWCFGR1_SECEN_Pos)          /*!< 0x00010000 */
#define HSEM_HWCFGR1_SECEN              HSEM_HWCFGR1_SECEN_Msk                    /*!< Hardware Configuration security protection enable */
#define HSEM_HWCFGR1_PRIVEN_Pos         (17U)
#define HSEM_HWCFGR1_PRIVEN_Msk         (0x1U << HSEM_HWCFGR1_PRIVEN_Pos)         /*!< 0x00020000 */
#define HSEM_HWCFGR1_PRIVEN             HSEM_HWCFGR1_PRIVEN_Msk                   /*!< Hardware Configuration privilege protection enable */
#define HSEM_HWCFGR1_CFEN_Pos           (18U)
#define HSEM_HWCFGR1_CFEN_Msk           (0x1U << HSEM_HWCFGR1_CFEN_Pos)           /*!< 0x00040000 */
#define HSEM_HWCFGR1_CFEN               HSEM_HWCFGR1_CFEN_Msk                     /*!< Hardware Configuration compartment filtering enable */

/******************  Bit definition for HSEM_VERR register  *******************/
#define HSEM_VERR_MINREV_Pos            (0U)
#define HSEM_VERR_MINREV_Msk            (0xFU << HSEM_VERR_MINREV_Pos)            /*!< 0x0000000F */
#define HSEM_VERR_MINREV                HSEM_VERR_MINREV_Msk                      /*!< IP minor revision number */
#define HSEM_VERR_MAJREV_Pos            (4U)
#define HSEM_VERR_MAJREV_Msk            (0xFU << HSEM_VERR_MAJREV_Pos)            /*!< 0x000000F0 */
#define HSEM_VERR_MAJREV                HSEM_VERR_MAJREV_Msk                      /*!< IP major revision number */

/******************  Bit definition for HSEM_IPIDR register  ******************/
#define HSEM_IPIDR_IPID_Pos             (0U)
#define HSEM_IPIDR_IPID_Msk             (0xFFFFFFFFU << HSEM_IPIDR_IPID_Pos)      /*!< 0xFFFFFFFF */
#define HSEM_IPIDR_IPID                 HSEM_IPIDR_IPID_Msk                       /*!< IP identification */

/******************  Bit definition for HSEM_SIDR register  *******************/
#define HSEM_SIDR_SID_Pos               (0U)
#define HSEM_SIDR_SID_Msk               (0xFFFFFFFFU << HSEM_SIDR_SID_Pos)        /*!< 0xFFFFFFFF */
#define HSEM_SIDR_SID                   HSEM_SIDR_SID_Msk                         /*!< IP size identification */

/******************************************************************************/
/*                                                                            */
/*                      Inter-integrated Circuit Interface (I2C)              */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for I2C_CR1 register  *******************/
#define I2C_CR1_PE_Pos               (0U)
#define I2C_CR1_PE_Msk               (0x1U << I2C_CR1_PE_Pos)                  /*!< 0x00000001 */
#define I2C_CR1_PE                   I2C_CR1_PE_Msk                            /*!< Peripheral enable */
#define I2C_CR1_TXIE_Pos             (1U)
#define I2C_CR1_TXIE_Msk             (0x1U << I2C_CR1_TXIE_Pos)                /*!< 0x00000002 */
#define I2C_CR1_TXIE                 I2C_CR1_TXIE_Msk                          /*!< TX interrupt enable */
#define I2C_CR1_RXIE_Pos             (2U)
#define I2C_CR1_RXIE_Msk             (0x1U << I2C_CR1_RXIE_Pos)                /*!< 0x00000004 */
#define I2C_CR1_RXIE                 I2C_CR1_RXIE_Msk                          /*!< RX interrupt enable */
#define I2C_CR1_ADDRIE_Pos           (3U)
#define I2C_CR1_ADDRIE_Msk           (0x1U << I2C_CR1_ADDRIE_Pos)              /*!< 0x00000008 */
#define I2C_CR1_ADDRIE               I2C_CR1_ADDRIE_Msk                        /*!< Address match interrupt enable */
#define I2C_CR1_NACKIE_Pos           (4U)
#define I2C_CR1_NACKIE_Msk           (0x1U << I2C_CR1_NACKIE_Pos)              /*!< 0x00000010 */
#define I2C_CR1_NACKIE               I2C_CR1_NACKIE_Msk                        /*!< NACK received interrupt enable */
#define I2C_CR1_STOPIE_Pos           (5U)
#define I2C_CR1_STOPIE_Msk           (0x1U << I2C_CR1_STOPIE_Pos)              /*!< 0x00000020 */
#define I2C_CR1_STOPIE               I2C_CR1_STOPIE_Msk                        /*!< STOP detection interrupt enable */
#define I2C_CR1_TCIE_Pos             (6U)
#define I2C_CR1_TCIE_Msk             (0x1U << I2C_CR1_TCIE_Pos)                /*!< 0x00000040 */
#define I2C_CR1_TCIE                 I2C_CR1_TCIE_Msk                          /*!< Transfer complete interrupt enable */
#define I2C_CR1_ERRIE_Pos            (7U)
#define I2C_CR1_ERRIE_Msk            (0x1U << I2C_CR1_ERRIE_Pos)               /*!< 0x00000080 */
#define I2C_CR1_ERRIE                I2C_CR1_ERRIE_Msk                         /*!< Errors interrupt enable */
#define I2C_CR1_DNF_Pos              (8U)
#define I2C_CR1_DNF_Msk              (0xFU << I2C_CR1_DNF_Pos)                 /*!< 0x00000F00 */
#define I2C_CR1_DNF                  I2C_CR1_DNF_Msk                           /*!< Digital noise filter */
#define I2C_CR1_ANFOFF_Pos           (12U)
#define I2C_CR1_ANFOFF_Msk           (0x1U << I2C_CR1_ANFOFF_Pos)              /*!< 0x00001000 */
#define I2C_CR1_ANFOFF               I2C_CR1_ANFOFF_Msk                        /*!< Analog noise filter OFF */
#define I2C_CR1_SWRST_Pos            (13U)
#define I2C_CR1_SWRST_Msk            (0x1U << I2C_CR1_SWRST_Pos)               /*!< 0x00002000 */
#define I2C_CR1_SWRST                I2C_CR1_SWRST_Msk                         /*!< Software reset */
#define I2C_CR1_TXDMAEN_Pos          (14U)
#define I2C_CR1_TXDMAEN_Msk          (0x1U << I2C_CR1_TXDMAEN_Pos)             /*!< 0x00004000 */
#define I2C_CR1_TXDMAEN              I2C_CR1_TXDMAEN_Msk                       /*!< DMA transmission requests enable */
#define I2C_CR1_RXDMAEN_Pos          (15U)
#define I2C_CR1_RXDMAEN_Msk          (0x1U << I2C_CR1_RXDMAEN_Pos)             /*!< 0x00008000 */
#define I2C_CR1_RXDMAEN              I2C_CR1_RXDMAEN_Msk                       /*!< DMA reception requests enable */
#define I2C_CR1_SBC_Pos              (16U)
#define I2C_CR1_SBC_Msk              (0x1U << I2C_CR1_SBC_Pos)                 /*!< 0x00010000 */
#define I2C_CR1_SBC                  I2C_CR1_SBC_Msk                           /*!< Slave byte control */
#define I2C_CR1_NOSTRETCH_Pos        (17U)
#define I2C_CR1_NOSTRETCH_Msk        (0x1U << I2C_CR1_NOSTRETCH_Pos)           /*!< 0x00020000 */
#define I2C_CR1_NOSTRETCH            I2C_CR1_NOSTRETCH_Msk                     /*!< Clock stretching disable */
#define I2C_CR1_WUPEN_Pos            (18U)
#define I2C_CR1_WUPEN_Msk            (0x1U << I2C_CR1_WUPEN_Pos)               /*!< 0x00040000 */
#define I2C_CR1_WUPEN                I2C_CR1_WUPEN_Msk                         /*!< Wakeup from STOP enable */
#define I2C_CR1_GCEN_Pos             (19U)
#define I2C_CR1_GCEN_Msk             (0x1U << I2C_CR1_GCEN_Pos)                /*!< 0x00080000 */
#define I2C_CR1_GCEN                 I2C_CR1_GCEN_Msk                          /*!< General call enable */
#define I2C_CR1_SMBHEN_Pos           (20U)
#define I2C_CR1_SMBHEN_Msk           (0x1U << I2C_CR1_SMBHEN_Pos)              /*!< 0x00100000 */
#define I2C_CR1_SMBHEN               I2C_CR1_SMBHEN_Msk                        /*!< SMBus host address enable */
#define I2C_CR1_SMBDEN_Pos           (21U)
#define I2C_CR1_SMBDEN_Msk           (0x1U << I2C_CR1_SMBDEN_Pos)              /*!< 0x00200000 */
#define I2C_CR1_SMBDEN               I2C_CR1_SMBDEN_Msk                        /*!< SMBus device default address enable */
#define I2C_CR1_ALERTEN_Pos          (22U)
#define I2C_CR1_ALERTEN_Msk          (0x1U << I2C_CR1_ALERTEN_Pos)             /*!< 0x00400000 */
#define I2C_CR1_ALERTEN              I2C_CR1_ALERTEN_Msk                       /*!< SMBus alert enable */
#define I2C_CR1_PECEN_Pos            (23U)
#define I2C_CR1_PECEN_Msk            (0x1U << I2C_CR1_PECEN_Pos)               /*!< 0x00800000 */
#define I2C_CR1_PECEN                I2C_CR1_PECEN_Msk                         /*!< PEC enable */
#define I2C_CR1_FMP_Pos              (24U)
#define I2C_CR1_FMP_Msk              (0x1U << I2C_CR1_FMP_Pos)                 /*!< 0x01000000 */
#define I2C_CR1_FMP                  I2C_CR1_FMP_Msk                           /*!< Fast-mode Plus 20mA drive enable */
#define I2C_CR1_ADDRACLR_Pos         (30U)
#define I2C_CR1_ADDRACLR_Msk         (0x1U << I2C_CR1_ADDRACLR_Pos)            /*!< 0x40000000 */
#define I2C_CR1_ADDRACLR             I2C_CR1_ADDRACLR_Msk                      /*!< Address match flag (ADDR) automatic clear */
#define I2C_CR1_STOPFACLR_Pos        (31U)
#define I2C_CR1_STOPFACLR_Msk        (0x1U << I2C_CR1_STOPFACLR_Pos)           /*!< 0x80000000 */
#define I2C_CR1_STOPFACLR            I2C_CR1_STOPFACLR_Msk                     /*!< STOP detection flag (STOPF) automatic clear */

/******************  Bit definition for I2C_CR2 register  ********************/
#define I2C_CR2_SADD_Pos             (0U)
#define I2C_CR2_SADD_Msk             (0x3FFU << I2C_CR2_SADD_Pos)              /*!< 0x000003FF */
#define I2C_CR2_SADD                 I2C_CR2_SADD_Msk                          /*!< Slave address (master mode) */
#define I2C_CR2_RD_WRN_Pos           (10U)
#define I2C_CR2_RD_WRN_Msk           (0x1U << I2C_CR2_RD_WRN_Pos)              /*!< 0x00000400 */
#define I2C_CR2_RD_WRN               I2C_CR2_RD_WRN_Msk                        /*!< Transfer direction (master mode) */
#define I2C_CR2_ADD10_Pos            (11U)
#define I2C_CR2_ADD10_Msk            (0x1U << I2C_CR2_ADD10_Pos)               /*!< 0x00000800 */
#define I2C_CR2_ADD10                I2C_CR2_ADD10_Msk                         /*!< 10-bit addressing mode (master mode) */
#define I2C_CR2_HEAD10R_Pos          (12U)
#define I2C_CR2_HEAD10R_Msk          (0x1U << I2C_CR2_HEAD10R_Pos)             /*!< 0x00001000 */
#define I2C_CR2_HEAD10R              I2C_CR2_HEAD10R_Msk                       /*!< 10-bit address header only read direction (master mode) */
#define I2C_CR2_START_Pos            (13U)
#define I2C_CR2_START_Msk            (0x1U << I2C_CR2_START_Pos)               /*!< 0x00002000 */
#define I2C_CR2_START                I2C_CR2_START_Msk                         /*!< START generation */
#define I2C_CR2_STOP_Pos             (14U)
#define I2C_CR2_STOP_Msk             (0x1U << I2C_CR2_STOP_Pos)                /*!< 0x00004000 */
#define I2C_CR2_STOP                 I2C_CR2_STOP_Msk                          /*!< STOP generation (master mode) */
#define I2C_CR2_NACK_Pos             (15U)
#define I2C_CR2_NACK_Msk             (0x1U << I2C_CR2_NACK_Pos)                /*!< 0x00008000 */
#define I2C_CR2_NACK                 I2C_CR2_NACK_Msk                          /*!< NACK generation (slave mode) */
#define I2C_CR2_NBYTES_Pos           (16U)
#define I2C_CR2_NBYTES_Msk           (0xFFU << I2C_CR2_NBYTES_Pos)             /*!< 0x00FF0000 */
#define I2C_CR2_NBYTES               I2C_CR2_NBYTES_Msk                        /*!< Number of bytes */
#define I2C_CR2_RELOAD_Pos           (24U)
#define I2C_CR2_RELOAD_Msk           (0x1U << I2C_CR2_RELOAD_Pos)              /*!< 0x01000000 */
#define I2C_CR2_RELOAD               I2C_CR2_RELOAD_Msk                        /*!< NBYTES reload mode */
#define I2C_CR2_AUTOEND_Pos          (25U)
#define I2C_CR2_AUTOEND_Msk          (0x1U << I2C_CR2_AUTOEND_Pos)             /*!< 0x02000000 */
#define I2C_CR2_AUTOEND              I2C_CR2_AUTOEND_Msk                       /*!< Automatic end mode (master mode) */
#define I2C_CR2_PECBYTE_Pos          (26U)
#define I2C_CR2_PECBYTE_Msk          (0x1U << I2C_CR2_PECBYTE_Pos)             /*!< 0x04000000 */
#define I2C_CR2_PECBYTE              I2C_CR2_PECBYTE_Msk                       /*!< Packet error checking byte */

/*******************  Bit definition for I2C_OAR1 register  ******************/
#define I2C_OAR1_OA1_Pos             (0U)
#define I2C_OAR1_OA1_Msk             (0x3FFU << I2C_OAR1_OA1_Pos)              /*!< 0x000003FF */
#define I2C_OAR1_OA1                 I2C_OAR1_OA1_Msk                          /*!< Interface own address 1 */
#define I2C_OAR1_OA1MODE_Pos         (10U)
#define I2C_OAR1_OA1MODE_Msk         (0x1U << I2C_OAR1_OA1MODE_Pos)            /*!< 0x00000400 */
#define I2C_OAR1_OA1MODE             I2C_OAR1_OA1MODE_Msk                      /*!< Own address 1 10-bit mode */
#define I2C_OAR1_OA1EN_Pos           (15U)
#define I2C_OAR1_OA1EN_Msk           (0x1U << I2C_OAR1_OA1EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR1_OA1EN               I2C_OAR1_OA1EN_Msk                        /*!< Own address 1 enable */

/*******************  Bit definition for I2C_OAR2 register  ******************/
#define I2C_OAR2_OA2_Pos             (1U)
#define I2C_OAR2_OA2_Msk             (0x7FU << I2C_OAR2_OA2_Pos)               /*!< 0x000000FE */
#define I2C_OAR2_OA2                 I2C_OAR2_OA2_Msk                          /*!< Interface own address 2 */
#define I2C_OAR2_OA2MSK_Pos          (8U)
#define I2C_OAR2_OA2MSK_Msk          (0x7U << I2C_OAR2_OA2MSK_Pos)             /*!< 0x00000700 */
#define I2C_OAR2_OA2MSK              I2C_OAR2_OA2MSK_Msk                       /*!< Own address 2 masks */
#define I2C_OAR2_OA2NOMASK           0x00000000UL                              /*!< No mask */
#define I2C_OAR2_OA2MASK01_Msk       (0x1UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000100 */
#define I2C_OAR2_OA2MASK01           I2C_OAR2_OA2MASK01_Msk                    /*!< OA2[1] is masked, Only OA2[7:2] are compared */
#define I2C_OAR2_OA2MASK02_Msk       (0x2UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000200 */
#define I2C_OAR2_OA2MASK02           I2C_OAR2_OA2MASK02_Msk                    /*!< OA2[2:1] is masked, Only OA2[7:3] are compared */
#define I2C_OAR2_OA2MASK03_Msk       (0x3UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000300 */
#define I2C_OAR2_OA2MASK03           I2C_OAR2_OA2MASK03_Msk                    /*!< OA2[3:1] is masked, Only OA2[7:4] are compared */
#define I2C_OAR2_OA2MASK04_Msk       (0x4UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000400 */
#define I2C_OAR2_OA2MASK04           I2C_OAR2_OA2MASK04_Msk                    /*!< OA2[4:1] is masked, Only OA2[7:5] are compared */
#define I2C_OAR2_OA2MASK05_Msk       (0x5UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000500 */
#define I2C_OAR2_OA2MASK05           I2C_OAR2_OA2MASK05_Msk                    /*!< OA2[5:1] is masked, Only OA2[7:6] are compared */
#define I2C_OAR2_OA2MASK06_Msk       (0x6UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000600 */
#define I2C_OAR2_OA2MASK06           I2C_OAR2_OA2MASK06_Msk                    /*!< OA2[6:1] is masked, Only OA2[7] are compared */
#define I2C_OAR2_OA2MASK07_Msk       (0x7UL << I2C_OAR2_OA2MSK_Pos)            /*!< 0x00000700 */
#define I2C_OAR2_OA2MASK07           I2C_OAR2_OA2MASK07_Msk                    /*!< OA2[7:1] is masked, No comparison is done */
#define I2C_OAR2_OA2EN_Pos           (15U)
#define I2C_OAR2_OA2EN_Msk           (0x1U << I2C_OAR2_OA2EN_Pos)              /*!< 0x00008000 */
#define I2C_OAR2_OA2EN               I2C_OAR2_OA2EN_Msk                        /*!< Own address 2 enable */

/*******************  Bit definition for I2C_TIMINGR register *******************/
#define I2C_TIMINGR_SCLL_Pos         (0U)
#define I2C_TIMINGR_SCLL_Msk         (0xFFU << I2C_TIMINGR_SCLL_Pos)           /*!< 0x000000FF */
#define I2C_TIMINGR_SCLL             I2C_TIMINGR_SCLL_Msk                      /*!< SCL low period (master mode) */
#define I2C_TIMINGR_SCLH_Pos         (8U)
#define I2C_TIMINGR_SCLH_Msk         (0xFFU << I2C_TIMINGR_SCLH_Pos)           /*!< 0x0000FF00 */
#define I2C_TIMINGR_SCLH             I2C_TIMINGR_SCLH_Msk                      /*!< SCL high period (master mode) */
#define I2C_TIMINGR_SDADEL_Pos       (16U)
#define I2C_TIMINGR_SDADEL_Msk       (0xFU << I2C_TIMINGR_SDADEL_Pos)          /*!< 0x000F0000 */
#define I2C_TIMINGR_SDADEL           I2C_TIMINGR_SDADEL_Msk                    /*!< Data hold time */
#define I2C_TIMINGR_SCLDEL_Pos       (20U)
#define I2C_TIMINGR_SCLDEL_Msk       (0xFU << I2C_TIMINGR_SCLDEL_Pos)          /*!< 0x00F00000 */
#define I2C_TIMINGR_SCLDEL           I2C_TIMINGR_SCLDEL_Msk                    /*!< Data setup time */
#define I2C_TIMINGR_PRESC_Pos        (28U)
#define I2C_TIMINGR_PRESC_Msk        (0xFU << I2C_TIMINGR_PRESC_Pos)           /*!< 0xF0000000 */
#define I2C_TIMINGR_PRESC            I2C_TIMINGR_PRESC_Msk                     /*!< Timings prescaler */

/******************* Bit definition for I2C_TIMEOUTR register *******************/
#define I2C_TIMEOUTR_TIMEOUTA_Pos    (0U)
#define I2C_TIMEOUTR_TIMEOUTA_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTA_Pos)     /*!< 0x00000FFF */
#define I2C_TIMEOUTR_TIMEOUTA        I2C_TIMEOUTR_TIMEOUTA_Msk                 /*!< Bus timeout A */
#define I2C_TIMEOUTR_TIDLE_Pos       (12U)
#define I2C_TIMEOUTR_TIDLE_Msk       (0x1U << I2C_TIMEOUTR_TIDLE_Pos)          /*!< 0x00001000 */
#define I2C_TIMEOUTR_TIDLE           I2C_TIMEOUTR_TIDLE_Msk                    /*!< Idle clock timeout detection */
#define I2C_TIMEOUTR_TIMOUTEN_Pos    (15U)
#define I2C_TIMEOUTR_TIMOUTEN_Msk    (0x1U << I2C_TIMEOUTR_TIMOUTEN_Pos)       /*!< 0x00008000 */
#define I2C_TIMEOUTR_TIMOUTEN        I2C_TIMEOUTR_TIMOUTEN_Msk                 /*!< Clock timeout enable */
#define I2C_TIMEOUTR_TIMEOUTB_Pos    (16U)
#define I2C_TIMEOUTR_TIMEOUTB_Msk    (0xFFFU << I2C_TIMEOUTR_TIMEOUTB_Pos)     /*!< 0x0FFF0000 */
#define I2C_TIMEOUTR_TIMEOUTB        I2C_TIMEOUTR_TIMEOUTB_Msk                 /*!< Bus timeout B*/
#define I2C_TIMEOUTR_TEXTEN_Pos      (31U)
#define I2C_TIMEOUTR_TEXTEN_Msk      (0x1U << I2C_TIMEOUTR_TEXTEN_Pos)         /*!< 0x80000000 */
#define I2C_TIMEOUTR_TEXTEN          I2C_TIMEOUTR_TEXTEN_Msk                   /*!< Extended clock timeout enable */

/******************  Bit definition for I2C_ISR register  *********************/
#define I2C_ISR_TXE_Pos              (0U)
#define I2C_ISR_TXE_Msk              (0x1U << I2C_ISR_TXE_Pos)                 /*!< 0x00000001 */
#define I2C_ISR_TXE                  I2C_ISR_TXE_Msk                           /*!< Transmit data register empty */
#define I2C_ISR_TXIS_Pos             (1U)
#define I2C_ISR_TXIS_Msk             (0x1U << I2C_ISR_TXIS_Pos)                /*!< 0x00000002 */
#define I2C_ISR_TXIS                 I2C_ISR_TXIS_Msk                          /*!< Transmit interrupt status */
#define I2C_ISR_RXNE_Pos             (2U)
#define I2C_ISR_RXNE_Msk             (0x1U << I2C_ISR_RXNE_Pos)                /*!< 0x00000004 */
#define I2C_ISR_RXNE                 I2C_ISR_RXNE_Msk                          /*!< Receive data register not empty */
#define I2C_ISR_ADDR_Pos             (3U)
#define I2C_ISR_ADDR_Msk             (0x1U << I2C_ISR_ADDR_Pos)                /*!< 0x00000008 */
#define I2C_ISR_ADDR                 I2C_ISR_ADDR_Msk                          /*!< Address matched (slave mode)*/
#define I2C_ISR_NACKF_Pos            (4U)
#define I2C_ISR_NACKF_Msk            (0x1U << I2C_ISR_NACKF_Pos)               /*!< 0x00000010 */
#define I2C_ISR_NACKF                I2C_ISR_NACKF_Msk                         /*!< NACK received flag */
#define I2C_ISR_STOPF_Pos            (5U)
#define I2C_ISR_STOPF_Msk            (0x1U << I2C_ISR_STOPF_Pos)               /*!< 0x00000020 */
#define I2C_ISR_STOPF                I2C_ISR_STOPF_Msk                         /*!< STOP detection flag */
#define I2C_ISR_TC_Pos               (6U)
#define I2C_ISR_TC_Msk               (0x1U << I2C_ISR_TC_Pos)                  /*!< 0x00000040 */
#define I2C_ISR_TC                   I2C_ISR_TC_Msk                            /*!< Transfer complete (master mode) */
#define I2C_ISR_TCR_Pos              (7U)
#define I2C_ISR_TCR_Msk              (0x1U << I2C_ISR_TCR_Pos)                 /*!< 0x00000080 */
#define I2C_ISR_TCR                  I2C_ISR_TCR_Msk                           /*!< Transfer complete reload */
#define I2C_ISR_BERR_Pos             (8U)
#define I2C_ISR_BERR_Msk             (0x1U << I2C_ISR_BERR_Pos)                /*!< 0x00000100 */
#define I2C_ISR_BERR                 I2C_ISR_BERR_Msk                          /*!< Bus error */
#define I2C_ISR_ARLO_Pos             (9U)
#define I2C_ISR_ARLO_Msk             (0x1U << I2C_ISR_ARLO_Pos)                /*!< 0x00000200 */
#define I2C_ISR_ARLO                 I2C_ISR_ARLO_Msk                          /*!< Arbitration lost */
#define I2C_ISR_OVR_Pos              (10U)
#define I2C_ISR_OVR_Msk              (0x1U << I2C_ISR_OVR_Pos)                 /*!< 0x00000400 */
#define I2C_ISR_OVR                  I2C_ISR_OVR_Msk                           /*!< Overrun/Underrun */
#define I2C_ISR_PECERR_Pos           (11U)
#define I2C_ISR_PECERR_Msk           (0x1U << I2C_ISR_PECERR_Pos)              /*!< 0x00000800 */
#define I2C_ISR_PECERR               I2C_ISR_PECERR_Msk                        /*!< PEC error in reception */
#define I2C_ISR_TIMEOUT_Pos          (12U)
#define I2C_ISR_TIMEOUT_Msk          (0x1U << I2C_ISR_TIMEOUT_Pos)             /*!< 0x00001000 */
#define I2C_ISR_TIMEOUT              I2C_ISR_TIMEOUT_Msk                       /*!< Timeout or Tlow detection flag */
#define I2C_ISR_ALERT_Pos            (13U)
#define I2C_ISR_ALERT_Msk            (0x1U << I2C_ISR_ALERT_Pos)               /*!< 0x00002000 */
#define I2C_ISR_ALERT                I2C_ISR_ALERT_Msk                         /*!< SMBus alert */
#define I2C_ISR_BUSY_Pos             (15U)
#define I2C_ISR_BUSY_Msk             (0x1U << I2C_ISR_BUSY_Pos)                /*!< 0x00008000 */
#define I2C_ISR_BUSY                 I2C_ISR_BUSY_Msk                          /*!< Bus busy */
#define I2C_ISR_DIR_Pos              (16U)
#define I2C_ISR_DIR_Msk              (0x1U << I2C_ISR_DIR_Pos)                 /*!< 0x00010000 */
#define I2C_ISR_DIR                  I2C_ISR_DIR_Msk                           /*!< Transfer direction (slave mode) */
#define I2C_ISR_ADDCODE_Pos          (17U)
#define I2C_ISR_ADDCODE_Msk          (0x7FU << I2C_ISR_ADDCODE_Pos)            /*!< 0x00FE0000 */
#define I2C_ISR_ADDCODE              I2C_ISR_ADDCODE_Msk                       /*!< Address match code (slave mode) */

/******************  Bit definition for I2C_ICR register  *********************/
#define I2C_ICR_ADDRCF_Pos           (3U)
#define I2C_ICR_ADDRCF_Msk           (0x1U << I2C_ICR_ADDRCF_Pos)              /*!< 0x00000008 */
#define I2C_ICR_ADDRCF               I2C_ICR_ADDRCF_Msk                        /*!< Address matched clear flag */
#define I2C_ICR_NACKCF_Pos           (4U)
#define I2C_ICR_NACKCF_Msk           (0x1U << I2C_ICR_NACKCF_Pos)              /*!< 0x00000010 */
#define I2C_ICR_NACKCF               I2C_ICR_NACKCF_Msk                        /*!< NACK clear flag */
#define I2C_ICR_STOPCF_Pos           (5U)
#define I2C_ICR_STOPCF_Msk           (0x1U << I2C_ICR_STOPCF_Pos)              /*!< 0x00000020 */
#define I2C_ICR_STOPCF               I2C_ICR_STOPCF_Msk                        /*!< STOP detection clear flag */
#define I2C_ICR_BERRCF_Pos           (8U)
#define I2C_ICR_BERRCF_Msk           (0x1U << I2C_ICR_BERRCF_Pos)              /*!< 0x00000100 */
#define I2C_ICR_BERRCF               I2C_ICR_BERRCF_Msk                        /*!< Bus error clear flag */
#define I2C_ICR_ARLOCF_Pos           (9U)
#define I2C_ICR_ARLOCF_Msk           (0x1U << I2C_ICR_ARLOCF_Pos)              /*!< 0x00000200 */
#define I2C_ICR_ARLOCF               I2C_ICR_ARLOCF_Msk                        /*!< Arbitration lost clear flag */
#define I2C_ICR_OVRCF_Pos            (10U)
#define I2C_ICR_OVRCF_Msk            (0x1U << I2C_ICR_OVRCF_Pos)               /*!< 0x00000400 */
#define I2C_ICR_OVRCF                I2C_ICR_OVRCF_Msk                         /*!< Overrun/Underrun clear flag */
#define I2C_ICR_PECCF_Pos            (11U)
#define I2C_ICR_PECCF_Msk            (0x1U << I2C_ICR_PECCF_Pos)               /*!< 0x00000800 */
#define I2C_ICR_PECCF                I2C_ICR_PECCF_Msk                         /*!< PAC error clear flag */
#define I2C_ICR_TIMOUTCF_Pos         (12U)
#define I2C_ICR_TIMOUTCF_Msk         (0x1U << I2C_ICR_TIMOUTCF_Pos)            /*!< 0x00001000 */
#define I2C_ICR_TIMOUTCF             I2C_ICR_TIMOUTCF_Msk                      /*!< Timeout clear flag */
#define I2C_ICR_ALERTCF_Pos          (13U)
#define I2C_ICR_ALERTCF_Msk          (0x1U << I2C_ICR_ALERTCF_Pos)             /*!< 0x00002000 */
#define I2C_ICR_ALERTCF              I2C_ICR_ALERTCF_Msk                       /*!< Alert clear flag */

/******************  Bit definition for I2C_PECR register  *********************/
#define I2C_PECR_PEC_Pos             (0U)
#define I2C_PECR_PEC_Msk             (0xFFU << I2C_PECR_PEC_Pos)               /*!< 0x000000FF */
#define I2C_PECR_PEC                 I2C_PECR_PEC_Msk                          /*!< PEC register */

/******************  Bit definition for I2C_RXDR register  *********************/
#define I2C_RXDR_RXDATA_Pos          (0U)
#define I2C_RXDR_RXDATA_Msk          (0xFFU << I2C_RXDR_RXDATA_Pos)            /*!< 0x000000FF */
#define I2C_RXDR_RXDATA              I2C_RXDR_RXDATA_Msk                       /*!< 8-bit receive data */

/******************  Bit definition for I2C_TXDR register  *********************/
#define I2C_TXDR_TXDATA_Pos          (0U)
#define I2C_TXDR_TXDATA_Msk          (0xFFU << I2C_TXDR_TXDATA_Pos)            /*!< 0x000000FF */
#define I2C_TXDR_TXDATA              I2C_TXDR_TXDATA_Msk                       /*!< 8-bit transmit data */

/******************  Bit definition for I2C_AUTOCR register  ********************/
#define I2C_AUTOCR_TCDMAEN_Pos              (6U)
#define I2C_AUTOCR_TCDMAEN_Msk              (0x1UL << I2C_AUTOCR_TCDMAEN_Pos)       /*!< 0x00000040 */
#define I2C_AUTOCR_TCDMAEN                  I2C_AUTOCR_TCDMAEN_Msk                  /*!< DMA request enable on Transfer Complete event */
#define I2C_AUTOCR_TCRDMAEN_Pos             (7U)
#define I2C_AUTOCR_TCRDMAEN_Msk             (0x1UL << I2C_AUTOCR_TCRDMAEN_Pos)      /*!< 0x00000080 */
#define I2C_AUTOCR_TCRDMAEN                 I2C_AUTOCR_TCRDMAEN_Msk                 /*!< DMA request enable on Transfer Complete Reload event */
#define I2C_AUTOCR_TRIGSEL_Pos              (16U)
#define I2C_AUTOCR_TRIGSEL_Msk              (0xFUL << I2C_AUTOCR_TRIGSEL_Pos)       /*!< 0x000F0000 */
#define I2C_AUTOCR_TRIGSEL                  I2C_AUTOCR_TRIGSEL_Msk                  /*!< Trigger selection */
#define I2C_AUTOCR_TRIGPOL_Pos              (20U)
#define I2C_AUTOCR_TRIGPOL_Msk              (0x1UL << I2C_AUTOCR_TRIGPOL_Pos)       /*!< 0x000100000 */
#define I2C_AUTOCR_TRIGPOL                  I2C_AUTOCR_TRIGPOL_Msk                  /*!< Trigger polarity */
#define I2C_AUTOCR_TRIGEN_Pos               (21U)
#define I2C_AUTOCR_TRIGEN_Msk               (0x1UL << I2C_AUTOCR_TRIGEN_Pos)        /*!< 0x000200000 */
#define I2C_AUTOCR_TRIGEN                   I2C_AUTOCR_TRIGEN_Msk                   /*!< Trigger enable */

/********************  Bit definition for I2C_VERR register***********************/
#define I2C_VERR_MINREV_Pos          (0U)
#define I2C_VERR_MINREV_Msk          (0xFU << I2C_VERR_MINREV_Pos)             /*!< 0x0000000F */
#define I2C_VERR_MINREV              I2C_VERR_MINREV_Msk                       /*!< Minor Revision of the IP */
#define I2C_VERR_MAJREV_Pos          (4U)
#define I2C_VERR_MAJREV_Msk          (0xFU << I2C_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define I2C_VERR_MAJREV              I2C_VERR_MAJREV_Msk                       /*!< Major Revision of the IP */

/********************  Bit definition for I2C_IPIDR register**********************/
#define I2C_IPIDR_ID_Pos             (0U)
#define I2C_IPIDR_ID_Msk             (0xFFFFFFFFU << I2C_IPIDR_ID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_IPIDR_ID                 I2C_IPIDR_ID_Msk                          /*!< IP Identifier */

/********************  Bit definition for I2C_SIDR register**********************/
#define I2C_SIDR_SID_Pos             (0U)
#define I2C_SIDR_SID_Msk             (0xFFFFFFFFU << I2C_SIDR_SID_Pos)         /*!< 0xFFFFFFFF */
#define I2C_SIDR_SID                 I2C_SIDR_SID_Msk                          /*!< Size Identifier */

/******************************************************************************/
/*                                                                            */
/*                    Inter-integrated Circuit Interface (I3C)                */
/*                                                                            */
/******************************************************************************/
/********************  Bit definition for I3C_CR register  ********************/
#define I3C_CR_DCNT_Pos              (0U)
#define I3C_CR_DCNT_Msk              (0xFFFFU << I3C_CR_DCNT_Pos)          /*!< 0x0000FFFF */
#define I3C_CR_DCNT                  I3C_CR_DCNT_Msk                       /*!< count of data to transfer during a read or write message, in bytes (whatever I3C is acting as contr */
#define I3C_CR_RNW_Pos               (16U)
#define I3C_CR_RNW_Msk               (0x1U << I3C_CR_RNW_Pos)              /*!< 0x00010000 */
#define I3C_CR_RNW                   I3C_CR_RNW_Msk                        /*!< read / non-write message (when I3C is acting as controller) */
#define I3C_CR_CCC_Pos               (16U)
#define I3C_CR_CCC_Msk               (0xFFUL << I3C_CR_CCC_Pos)            /*!< 0x00FF0000 */
#define I3C_CR_CCC                   I3C_CR_CCC_Msk                        /*!< 8-Bit CCC code */
#define I3C_CR_ADD_Pos               (17U)
#define I3C_CR_ADD_Msk               (0x7FU << I3C_CR_ADD_Pos)             /*!< 0x00FE0000 */
#define I3C_CR_ADD                   I3C_CR_ADD_Msk                        /*!< 7-bit I3C dynamic / I2C static target address (when I3C is acting as controller) */
#define I3C_CR_MTYPE_Pos             (27U)
#define I3C_CR_MTYPE_Msk             (0xFU << I3C_CR_MTYPE_Pos)            /*!< 0x78000000 */
#define I3C_CR_MTYPE                 I3C_CR_MTYPE_Msk                      /*!< message type (whatever I3C is acting as controller/target) */
#define I3C_CR_MTYPE_0               (0x1UL << I3C_CR_MTYPE_Pos)           /*!< 0x08000000 */
#define I3C_CR_MTYPE_1               (0x2UL << I3C_CR_MTYPE_Pos)           /*!< 0x10000000 */
#define I3C_CR_MTYPE_2               (0x4UL << I3C_CR_MTYPE_Pos)           /*!< 0x20000000 */
#define I3C_CR_MTYPE_3               (0x8UL << I3C_CR_MTYPE_Pos)           /*!< 0x40000000 */
#define I3C_CR_MEND_Pos              (31U)
#define I3C_CR_MEND_Msk              (0x1U << I3C_CR_MEND_Pos)             /*!< 0x80000000 */
#define I3C_CR_MEND                  I3C_CR_MEND_Msk                       /*!< message end type (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_CFGR register  *******************/
#define I3C_CFGR_EN_Pos              (0U)
#define I3C_CFGR_EN_Msk              (0x1U << I3C_CFGR_EN_Pos)             /*!< 0x00000001 */
#define I3C_CFGR_EN                  I3C_CFGR_EN_Msk                       /*!< I3C enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_CRINIT_Pos          (1U)
#define I3C_CFGR_CRINIT_Msk          (0x1U << I3C_CFGR_CRINIT_Pos)         /*!< 0x00000002 */
#define I3C_CFGR_CRINIT              I3C_CFGR_CRINIT_Msk                   /*!< initial controller/target role */
#define I3C_CFGR_NOARBH_Pos          (2U)
#define I3C_CFGR_NOARBH_Msk          (0x1U << I3C_CFGR_NOARBH_Pos)         /*!< 0x00000004 */
#define I3C_CFGR_NOARBH              I3C_CFGR_NOARBH_Msk                   /*!< no arbitrable header after a START (when I3C is acting as a controller) */
#define I3C_CFGR_RSTPTRN_Pos         (3U)
#define I3C_CFGR_RSTPTRN_Msk         (0x1U << I3C_CFGR_RSTPTRN_Pos)        /*!< 0x00000008 */
#define I3C_CFGR_RSTPTRN             I3C_CFGR_RSTPTRN_Msk                  /*!< HDR reset pattern enable (when I3C is acting as a controller) */
#define I3C_CFGR_EXITPTRN_Pos        (4U)
#define I3C_CFGR_EXITPTRN_Msk        (0x1U << I3C_CFGR_EXITPTRN_Pos)       /*!< 0x00000010 */
#define I3C_CFGR_EXITPTRN            I3C_CFGR_EXITPTRN_Msk                 /*!< HDR Exit Pattern enable (when I3C is acting as a controller) */
#define I3C_CFGR_HKSDAEN_Pos         (5U)
#define I3C_CFGR_HKSDAEN_Msk         (0x1U << I3C_CFGR_HKSDAEN_Pos)        /*!< 0x00000020 */
#define I3C_CFGR_HKSDAEN             I3C_CFGR_HKSDAEN_Msk                  /*!< High-keeper enable on SDA line (when I3C is acting as a controller) */
#define I3C_CFGR_HJACK_Pos           (7U)
#define I3C_CFGR_HJACK_Msk           (0x1U << I3C_CFGR_HJACK_Pos)          /*!< 0x00000080 */
#define I3C_CFGR_HJACK               I3C_CFGR_HJACK_Msk                    /*!< Hot Join request acknowledge (when I3C is acting as a controller) */
#define I3C_CFGR_RXDMAEN_Pos         (8U)
#define I3C_CFGR_RXDMAEN_Msk         (0x1U << I3C_CFGR_RXDMAEN_Pos)        /*!< 0x00000100 */
#define I3C_CFGR_RXDMAEN             I3C_CFGR_RXDMAEN_Msk                  /*!< RX-FIFO DMA request enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_RXFLUSH_Pos         (9U)
#define I3C_CFGR_RXFLUSH_Msk         (0x1U << I3C_CFGR_RXFLUSH_Pos)        /*!< 0x00000200 */
#define I3C_CFGR_RXFLUSH             I3C_CFGR_RXFLUSH_Msk                  /*!< RX-FIFO flush (whatever I3C is acting as controller/target) */
#define I3C_CFGR_RXTHRES_Pos         (10U)
#define I3C_CFGR_RXTHRES_Msk         (0x1U << I3C_CFGR_RXTHRES_Pos)        /*!< 0x00000400 */
#define I3C_CFGR_RXTHRES             I3C_CFGR_RXTHRES_Msk                  /*!< RX-FIFO threshold (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXDMAEN_Pos         (12U)
#define I3C_CFGR_TXDMAEN_Msk         (0x1U << I3C_CFGR_TXDMAEN_Pos)        /*!< 0x00001000 */
#define I3C_CFGR_TXDMAEN             I3C_CFGR_TXDMAEN_Msk                  /*!< TX-FIFO DMA request enable (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXFLUSH_Pos         (13U)
#define I3C_CFGR_TXFLUSH_Msk         (0x1U << I3C_CFGR_TXFLUSH_Pos)        /*!< 0x00002000 */
#define I3C_CFGR_TXFLUSH             I3C_CFGR_TXFLUSH_Msk                  /*!< TX-FIFO flush (whatever I3C is acting as controller/target) */
#define I3C_CFGR_TXTHRES_Pos         (14U)
#define I3C_CFGR_TXTHRES_Msk         (0x1U << I3C_CFGR_TXTHRES_Pos)        /*!< 0x00004000 */
#define I3C_CFGR_TXTHRES             I3C_CFGR_TXTHRES_Msk                  /*!< TX-FIFO threshold (whatever I3C is acting as controller/target) */
#define I3C_CFGR_SDMAEN_Pos          (16U)
#define I3C_CFGR_SDMAEN_Msk          (0x1U << I3C_CFGR_SDMAEN_Pos)         /*!< 0x00010000 */
#define I3C_CFGR_SDMAEN              I3C_CFGR_SDMAEN_Msk                   /*!< S-FIFO DMA request enable (when I3C is acting as controller) */
#define I3C_CFGR_SFLUSH_Pos          (17U)
#define I3C_CFGR_SFLUSH_Msk          (0x1U << I3C_CFGR_SFLUSH_Pos)         /*!< 0x00020000 */
#define I3C_CFGR_SFLUSH              I3C_CFGR_SFLUSH_Msk                   /*!< S-FIFO flush (when I3C is acting as controller) */
#define I3C_CFGR_SMODE_Pos           (18U)
#define I3C_CFGR_SMODE_Msk           (0x1U << I3C_CFGR_SMODE_Pos)          /*!< 0x00040000 */
#define I3C_CFGR_SMODE               I3C_CFGR_SMODE_Msk                    /*!< S-FIFO enable / status receive mode (when I3C is acting as controller) */
#define I3C_CFGR_TMODE_Pos           (19U)
#define I3C_CFGR_TMODE_Msk           (0x1U << I3C_CFGR_TMODE_Pos)          /*!< 0x00080000 */
#define I3C_CFGR_TMODE               I3C_CFGR_TMODE_Msk                    /*!< transmit mode (when I3C is acting as controller) */
#define I3C_CFGR_CDMAEN_Pos          (20U)
#define I3C_CFGR_CDMAEN_Msk          (0x1U << I3C_CFGR_CDMAEN_Pos)         /*!< 0x00100000 */
#define I3C_CFGR_CDMAEN              I3C_CFGR_CDMAEN_Msk                   /*!< C-FIFO DMA request enable (when I3C is acting as controller) */
#define I3C_CFGR_CFLUSH_Pos          (21U)
#define I3C_CFGR_CFLUSH_Msk          (0x1U << I3C_CFGR_CFLUSH_Pos)         /*!< 0x00200000 */
#define I3C_CFGR_CFLUSH              I3C_CFGR_CFLUSH_Msk                   /*!< C-FIFO flush (when I3C is acting as controller) */
#define I3C_CFGR_TSFSET_Pos          (30U)
#define I3C_CFGR_TSFSET_Msk          (0x1U << I3C_CFGR_TSFSET_Pos)         /*!< 0x40000000 */
#define I3C_CFGR_TSFSET              I3C_CFGR_TSFSET_Msk                   /*!< frame transfer set (a */

/*******************  Bit definition for I3C_RDR register  ********************/
#define I3C_RDR_RDB0_Pos             (0U)
#define I3C_RDR_RDB0_Msk             (0xFFU << I3C_RDR_RDB0_Pos)           /*!< 0x000000FF */
#define I3C_RDR_RDB0                 I3C_RDR_RDB0_Msk                      /*!< 8-bit received data on I3C bus */

/*******************  Bit definition for I3C_RDWR register  *******************/
#define I3C_RDWR_RDBx_Pos            (0U)
#define I3C_RDWR_RDBx_Msk            (0xFFFFFFFFUL << I3C_RDWR_RDBx_Pos)  /*!< 0xFFFFFFFF */
#define I3C_RDWR_RDBx                I3C_RDWR_RDBx_Msk                    /*!< 32-bit received data */
#define I3C_RDWR_RDB0_Pos            (0U)
#define I3C_RDWR_RDB0_Msk            (0xFFU << I3C_RDWR_RDB0_Pos)          /*!< 0x000000FF */
#define I3C_RDWR_RDB0                I3C_RDWR_RDB0_Msk                     /*!< 8-bit received data (earliest byte on I3C bus) */
#define I3C_RDWR_RDB1_Pos            (8U)
#define I3C_RDWR_RDB1_Msk            (0xFFU << I3C_RDWR_RDB1_Pos)          /*!< 0x0000FF00 */
#define I3C_RDWR_RDB1                I3C_RDWR_RDB1_Msk                     /*!< 8-bit received data (next byte after RDB0 on I3C bus) */
#define I3C_RDWR_RDB2_Pos            (16U)
#define I3C_RDWR_RDB2_Msk            (0xFFU << I3C_RDWR_RDB2_Pos)          /*!< 0x00FF0000 */
#define I3C_RDWR_RDB2                I3C_RDWR_RDB2_Msk                     /*!< 8-bit received data (next byte after RDB1 on I3C bus) */
#define I3C_RDWR_RDB3_Pos            (24U)
#define I3C_RDWR_RDB3_Msk            (0xFFU << I3C_RDWR_RDB3_Pos)          /*!< 0xFF000000 */
#define I3C_RDWR_RDB3                I3C_RDWR_RDB3_Msk                     /*!< 8-bit received data (latest byte on I3C bus) */

/*******************  Bit definition for I3C_TDR register  ********************/
#define I3C_TDR_TDB0_Pos             (0U)
#define I3C_TDR_TDB0_Msk             (0xFFU << I3C_TDR_TDB0_Pos)           /*!< 0x000000FF */
#define I3C_TDR_TDB0                 I3C_TDR_TDB0_Msk                      /*!< 8-bit data to transmit on I3C bus */

/*******************  Bit definition for I3C_TDWR register  *******************/
#define I3C_TDWR_TDBx_Pos            (0U)
#define I3C_TDWR_TDBx_Msk            (0xFFFFFFFFUL << I3C_TDWR_TDBx_Pos)   /*!< 0xFFFFFFFF */
#define I3C_TDWR_TDBx                I3C_TDWR_TDBx_Msk                     /*!< 32-bit transmit data */
#define I3C_TDWR_TDB0_Pos            (0U)
#define I3C_TDWR_TDB0_Msk            (0xFFU << I3C_TDWR_TDB0_Pos)          /*!< 0x000000FF */
#define I3C_TDWR_TDB0                I3C_TDWR_TDB0_Msk                     /*!< 8-bit transmit data (earliest byte on I3C bus) */
#define I3C_TDWR_TDB1_Pos            (8U)
#define I3C_TDWR_TDB1_Msk            (0xFFU << I3C_TDWR_TDB1_Pos)          /*!< 0x0000FF00 */
#define I3C_TDWR_TDB1                I3C_TDWR_TDB1_Msk                     /*!< 8-bit transmit data (next byte after TDB0[7:0] on I3C bus) */
#define I3C_TDWR_TDB2_Pos            (16U)
#define I3C_TDWR_TDB2_Msk            (0xFFU << I3C_TDWR_TDB2_Pos)          /*!< 0x00FF0000 */
#define I3C_TDWR_TDB2                I3C_TDWR_TDB2_Msk                     /*!< 8-bit transmit data (next byte after TDB1[7:0] on I3C bus) */
#define I3C_TDWR_TDB3_Pos            (24U)
#define I3C_TDWR_TDB3_Msk            (0xFFU << I3C_TDWR_TDB3_Pos)          /*!< 0xFF000000 */
#define I3C_TDWR_TDB3                I3C_TDWR_TDB3_Msk                     /*!< 8-bit transmit data (latest byte on I3C bus) */

/******************  Bit definition for I3C_IBIDR register  *******************/
#define I3C_IBIDR_IBIDBx_Pos         (0U)
#define I3C_IBIDR_IBIDBx_Msk         (0xFFFFFFFFUL << I3C_IBIDR_IBIDBx_Pos)/*!< 0xFFFFFFFF */
#define I3C_IBIDR_IBIDBx             I3C_IBIDR_IBIDBx_Msk                  /*!< 32-bit IBI payload data */
#define I3C_IBIDR_IBIDB0_Pos         (0U)
#define I3C_IBIDR_IBIDB0_Msk         (0xFFU << I3C_IBIDR_IBIDB0_Pos)       /*!< 0x000000FF */
#define I3C_IBIDR_IBIDB0             I3C_IBIDR_IBIDB0_Msk                  /*!< 8-bit IBI payload data (earliest byte on I3C bus, i */
#define I3C_IBIDR_IBIDB1_Pos         (8U)
#define I3C_IBIDR_IBIDB1_Msk         (0xFFU << I3C_IBIDR_IBIDB1_Pos)       /*!< 0x0000FF00 */
#define I3C_IBIDR_IBIDB1             I3C_IBIDR_IBIDB1_Msk                  /*!< 8-bit IBI payload data (next byte on I3C bus after IBIDB0[7:0]) */
#define I3C_IBIDR_IBIDB2_Pos         (16U)
#define I3C_IBIDR_IBIDB2_Msk         (0xFFU << I3C_IBIDR_IBIDB2_Pos)       /*!< 0x00FF0000 */
#define I3C_IBIDR_IBIDB2             I3C_IBIDR_IBIDB2_Msk                  /*!< 8-bit IBI payload data (next byte on I3C bus after IBIDB1[7:0]) */
#define I3C_IBIDR_IBIDB3_Pos         (24U)
#define I3C_IBIDR_IBIDB3_Msk         (0xFFU << I3C_IBIDR_IBIDB3_Pos)       /*!< 0xFF000000 */
#define I3C_IBIDR_IBIDB3             I3C_IBIDR_IBIDB3_Msk                  /*!< 8-bit IBI payload data (latest byte on I3C bus) */

/******************  Bit definition for I3C_TGTTDR register  ******************/
#define I3C_TGTTDR_TGTTDCNT_Pos      (0U)
#define I3C_TGTTDR_TGTTDCNT_Msk      (0xFFFFU << I3C_TGTTDR_TGTTDCNT_Pos)  /*!< 0x0000FFFF */
#define I3C_TGTTDR_TGTTDCNT          I3C_TGTTDR_TGTTDCNT_Msk               /*!< transmit data counter, in bytes (when I3C is configured as target) */
#define I3C_TGTTDR_PRELOAD_Pos       (16U)
#define I3C_TGTTDR_PRELOAD_Msk       (0x1U << I3C_TGTTDR_PRELOAD_Pos)      /*!< 0x00010000 */
#define I3C_TGTTDR_PRELOAD           I3C_TGTTDR_PRELOAD_Msk                /*!< preload of the TX-FIFO (when I3C is configured as target) */

/********************  Bit definition for I3C_SR register  ********************/
#define I3C_SR_XDCNT_Pos             (0U)
#define I3C_SR_XDCNT_Msk             (0xFFFFU << I3C_SR_XDCNT_Pos)         /*!< 0x0000FFFF */
#define I3C_SR_XDCNT                 I3C_SR_XDCNT_Msk                      /*!< data counter */
#define I3C_SR_ABT_Pos               (17U)
#define I3C_SR_ABT_Msk               (0x1U << I3C_SR_ABT_Pos)              /*!< 0x00020000 */
#define I3C_SR_ABT                   I3C_SR_ABT_Msk                        /*!< a private read message is completed/aborted prematurely by the target (when the I3C is acting as co */
#define I3C_SR_DIR_Pos               (18U)
#define I3C_SR_DIR_Msk               (0x1U << I3C_SR_DIR_Pos)              /*!< 0x00040000 */
#define I3C_SR_DIR                   I3C_SR_DIR_Msk                        /*!< message direction */
#define I3C_SR_MID_Pos               (24U)
#define I3C_SR_MID_Msk               (0xFFU << I3C_SR_MID_Pos)             /*!< 0xFF000000 */
#define I3C_SR_MID                   I3C_SR_MID_Msk                        /*!< message identifier/counter of a given frame (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_SER register  ********************/
#define I3C_SER_CODERR_Pos           (0U)
#define I3C_SER_CODERR_Msk           (0xFU << I3C_SER_CODERR_Pos)          /*!< 0x0000000F */
#define I3C_SER_CODERR               I3C_SER_CODERR_Msk                    /*!< protocol error code/type */
#define I3C_SER_CODERR_0             (0x1UL << I3C_SER_CODERR_Pos)         /*!< 0x00000001 */
#define I3C_SER_CODERR_1             (0x2UL << I3C_SER_CODERR_Pos)         /*!< 0x00000002 */
#define I3C_SER_CODERR_2             (0x4UL << I3C_SER_CODERR_Pos)         /*!< 0x00000004 */
#define I3C_SER_CODERR_3             (0x8UL << I3C_SER_CODERR_Pos)         /*!< 0x00000008 */
#define I3C_SER_PERR_Pos             (4U)
#define I3C_SER_PERR_Msk             (0x1U << I3C_SER_PERR_Pos)            /*!< 0x00000010 */
#define I3C_SER_PERR                 I3C_SER_PERR_Msk                      /*!< protocol error */
#define I3C_SER_STALL_Pos            (5U)
#define I3C_SER_STALL_Msk            (0x1U << I3C_SER_STALL_Pos)           /*!< 0x00000020 */
#define I3C_SER_STALL                I3C_SER_STALL_Msk                     /*!< SCL stall error (when the I3C is acting as target) */
#define I3C_SER_DOVR_Pos             (6U)
#define I3C_SER_DOVR_Msk             (0x1U << I3C_SER_DOVR_Pos)            /*!< 0x00000040 */
#define I3C_SER_DOVR                 I3C_SER_DOVR_Msk                      /*!< RX-FIFO overrun or TX-FIFO underrun */
#define I3C_SER_COVR_Pos             (7U)
#define I3C_SER_COVR_Msk             (0x1U << I3C_SER_COVR_Pos)            /*!< 0x00000080 */
#define I3C_SER_COVR                 I3C_SER_COVR_Msk                      /*!< C-FIFO underrun or S-FIFO overrun (when the I3C is acting as controller) */
#define I3C_SER_ANACK_Pos            (8U)
#define I3C_SER_ANACK_Msk            (0x1U << I3C_SER_ANACK_Pos)           /*!< 0x00000100 */
#define I3C_SER_ANACK                I3C_SER_ANACK_Msk                     /*!< address not acknowledged (when the I3C is configured as controller) */
#define I3C_SER_DNACK_Pos            (9U)
#define I3C_SER_DNACK_Msk            (0x1U << I3C_SER_DNACK_Pos)           /*!< 0x00000200 */
#define I3C_SER_DNACK                I3C_SER_DNACK_Msk                     /*!< data not acknowledged (when the I3C is acting as controller) */
#define I3C_SER_DERR_Pos             (10U)
#define I3C_SER_DERR_Msk             (0x1U << I3C_SER_DERR_Pos)            /*!< 0x00000400 */
#define I3C_SER_DERR                 I3C_SER_DERR_Msk                      /*!< data error (when the I3C is acting as controller) */

/*******************  Bit definition for I3C_RMR register  ********************/
#define I3C_RMR_IBIRDCNT_Pos         (0U)
#define I3C_RMR_IBIRDCNT_Msk         (0x7U << I3C_RMR_IBIRDCNT_Pos)        /*!< 0x00000007 */
#define I3C_RMR_IBIRDCNT             I3C_RMR_IBIRDCNT_Msk                  /*!< IBI received payload data count (when the I3C is configured as controller) */
#define I3C_RMR_RCODE_Pos            (8U)
#define I3C_RMR_RCODE_Msk            (0xFFU << I3C_RMR_RCODE_Pos)          /*!< 0x0000FF00 */
#define I3C_RMR_RCODE                I3C_RMR_RCODE_Msk                     /*!< received CCC code (when the I3C is configured as target) */
#define I3C_RMR_RADD_Pos             (17U)
#define I3C_RMR_RADD_Msk             (0x7FU << I3C_RMR_RADD_Pos)           /*!< 0x00FE0000 */
#define I3C_RMR_RADD                 I3C_RMR_RADD_Msk                      /*!< received target address (when the I3C is configured as controller) */

/*******************  Bit definition for I3C_EVR register  ********************/
#define I3C_EVR_CFEF_Pos             (0U)
#define I3C_EVR_CFEF_Msk             (0x1U << I3C_EVR_CFEF_Pos)            /*!< 0x00000001 */
#define I3C_EVR_CFEF                 I3C_EVR_CFEF_Msk                      /*!< C-FIFO empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_TXFEF_Pos            (1U)
#define I3C_EVR_TXFEF_Msk            (0x1U << I3C_EVR_TXFEF_Pos)           /*!< 0x00000002 */
#define I3C_EVR_TXFEF                I3C_EVR_TXFEF_Msk                     /*!< TX-FIFO empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_CFNFF_Pos            (2U)
#define I3C_EVR_CFNFF_Msk            (0x1U << I3C_EVR_CFNFF_Pos)           /*!< 0x00000004 */
#define I3C_EVR_CFNFF                I3C_EVR_CFNFF_Msk                     /*!< C-FIFO not full flag (when the I3C is acting as controller) */
#define I3C_EVR_SFNEF_Pos            (3U)
#define I3C_EVR_SFNEF_Msk            (0x1U << I3C_EVR_SFNEF_Pos)           /*!< 0x00000008 */
#define I3C_EVR_SFNEF                I3C_EVR_SFNEF_Msk                     /*!< S-FIFO not empty flag (when the I3C is acting as controller) */
#define I3C_EVR_TXFNFF_Pos           (4U)
#define I3C_EVR_TXFNFF_Msk           (0x1U << I3C_EVR_TXFNFF_Pos)          /*!< 0x00000010 */
#define I3C_EVR_TXFNFF               I3C_EVR_TXFNFF_Msk                    /*!< TX-FIFO not full flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXFNEF_Pos           (5U)
#define I3C_EVR_RXFNEF_Msk           (0x1U << I3C_EVR_RXFNEF_Pos)          /*!< 0x00000020 */
#define I3C_EVR_RXFNEF               I3C_EVR_RXFNEF_Msk                    /*!< RX-FIFO not empty flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_TXLASTF_Pos          (6U)
#define I3C_EVR_TXLASTF_Msk          (0x1U << I3C_EVR_TXLASTF_Pos)         /*!< 0x00000040 */
#define I3C_EVR_TXLASTF              I3C_EVR_TXLASTF_Msk                   /*!< last written data byte/word flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXLASTF_Pos          (7U)
#define I3C_EVR_RXLASTF_Msk          (0x1U << I3C_EVR_RXLASTF_Pos)         /*!< 0x00000080 */
#define I3C_EVR_RXLASTF              I3C_EVR_RXLASTF_Msk                   /*!< last read data byte/word flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_FCF_Pos              (9U)
#define I3C_EVR_FCF_Msk              (0x1U << I3C_EVR_FCF_Pos)             /*!< 0x00000200 */
#define I3C_EVR_FCF                  I3C_EVR_FCF_Msk                       /*!< frame complete flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_RXTGTENDF_Pos        (10U)
#define I3C_EVR_RXTGTENDF_Msk        (0x1U << I3C_EVR_RXTGTENDF_Pos)       /*!< 0x00000400 */
#define I3C_EVR_RXTGTENDF            I3C_EVR_RXTGTENDF_Msk                 /*!< target-initiated read end flag (when the I3C is acting as controller) */
#define I3C_EVR_ERRF_Pos             (11U)
#define I3C_EVR_ERRF_Msk             (0x1U << I3C_EVR_ERRF_Pos)            /*!< 0x00000800 */
#define I3C_EVR_ERRF                 I3C_EVR_ERRF_Msk                      /*!< flag (whatever the I3C is acting as controller/target) */
#define I3C_EVR_IBIF_Pos             (15U)
#define I3C_EVR_IBIF_Msk             (0x1U << I3C_EVR_IBIF_Pos)            /*!< 0x00008000 */
#define I3C_EVR_IBIF                 I3C_EVR_IBIF_Msk                      /*!< IBI flag (when the I3C is acting as controller) */
#define I3C_EVR_IBIENDF_Pos          (16U)
#define I3C_EVR_IBIENDF_Msk          (0x1U << I3C_EVR_IBIENDF_Pos)         /*!< 0x00010000 */
#define I3C_EVR_IBIENDF              I3C_EVR_IBIENDF_Msk                   /*!< IBI end flag (when the I3C is acting as target) */
#define I3C_EVR_CRF_Pos              (17U)
#define I3C_EVR_CRF_Msk              (0x1U << I3C_EVR_CRF_Pos)             /*!< 0x00020000 */
#define I3C_EVR_CRF                  I3C_EVR_CRF_Msk                       /*!< controller-role request flag (when the I3C is acting as controller) */
#define I3C_EVR_CRUPDF_Pos           (18U)
#define I3C_EVR_CRUPDF_Msk           (0x1U << I3C_EVR_CRUPDF_Pos)          /*!< 0x00040000 */
#define I3C_EVR_CRUPDF               I3C_EVR_CRUPDF_Msk                    /*!< controller-role update flag (when the I3C is acting as target) */
#define I3C_EVR_HJF_Pos              (19U)
#define I3C_EVR_HJF_Msk              (0x1U << I3C_EVR_HJF_Pos)             /*!< 0x00080000 */
#define I3C_EVR_HJF                  I3C_EVR_HJF_Msk                       /*!< hot-join flag (when the I3C is acting as controller) */
#define I3C_EVR_WKPF_Pos             (21U)
#define I3C_EVR_WKPF_Msk             (0x1U << I3C_EVR_WKPF_Pos)            /*!< 0x00200000 */
#define I3C_EVR_WKPF                 I3C_EVR_WKPF_Msk                      /*!< wakeup/missed start flag (when the I3C is acting as target) */
#define I3C_EVR_GETF_Pos             (22U)
#define I3C_EVR_GETF_Msk             (0x1U << I3C_EVR_GETF_Pos)            /*!< 0x00400000 */
#define I3C_EVR_GETF                 I3C_EVR_GETF_Msk                      /*!< get flag (when the I3C is acting as target) */
#define I3C_EVR_STAF_Pos             (23U)
#define I3C_EVR_STAF_Msk             (0x1U << I3C_EVR_STAF_Pos)            /*!< 0x00800000 */
#define I3C_EVR_STAF                 I3C_EVR_STAF_Msk                      /*!< get status flag (when the I3C is acting as target) */
#define I3C_EVR_DAUPDF_Pos           (24U)
#define I3C_EVR_DAUPDF_Msk           (0x1U << I3C_EVR_DAUPDF_Pos)          /*!< 0x01000000 */
#define I3C_EVR_DAUPDF               I3C_EVR_DAUPDF_Msk                    /*!< dynamic address update flag (when the I3C is acting as target) */
#define I3C_EVR_MWLUPDF_Pos          (25U)
#define I3C_EVR_MWLUPDF_Msk          (0x1U << I3C_EVR_MWLUPDF_Pos)         /*!< 0x02000000 */
#define I3C_EVR_MWLUPDF              I3C_EVR_MWLUPDF_Msk                   /*!< maximum write length update flag (when the I3C is acting as target) */
#define I3C_EVR_MRLUPDF_Pos          (26U)
#define I3C_EVR_MRLUPDF_Msk          (0x1U << I3C_EVR_MRLUPDF_Pos)         /*!< 0x04000000 */
#define I3C_EVR_MRLUPDF              I3C_EVR_MRLUPDF_Msk                   /*!< maximum read length update flag (when the I3C is acting as target) */
#define I3C_EVR_RSTF_Pos             (27U)
#define I3C_EVR_RSTF_Msk             (0x1U << I3C_EVR_RSTF_Pos)            /*!< 0x08000000 */
#define I3C_EVR_RSTF                 I3C_EVR_RSTF_Msk                      /*!< reset pattern flag (when the I3C is acting as target) */
#define I3C_EVR_ASUPDF_Pos           (28U)
#define I3C_EVR_ASUPDF_Msk           (0x1U << I3C_EVR_ASUPDF_Pos)          /*!< 0x10000000 */
#define I3C_EVR_ASUPDF               I3C_EVR_ASUPDF_Msk                    /*!< activity state update flag (when the I3C is acting as target) */
#define I3C_EVR_INTUPDF_Pos          (29U)
#define I3C_EVR_INTUPDF_Msk          (0x1U << I3C_EVR_INTUPDF_Pos)         /*!< 0x20000000 */
#define I3C_EVR_INTUPDF              I3C_EVR_INTUPDF_Msk                   /*!< interrupt/controller-role/hot-join update flag (when the I3C is acting as target) */
#define I3C_EVR_DEFF_Pos             (30U)
#define I3C_EVR_DEFF_Msk             (0x1U << I3C_EVR_DEFF_Pos)            /*!< 0x40000000 */
#define I3C_EVR_DEFF                 I3C_EVR_DEFF_Msk                      /*!< DEFTGTS flag (when the I3C is acting as target) */
#define I3C_EVR_GRPF_Pos             (31U)
#define I3C_EVR_GRPF_Msk             (0x1U << I3C_EVR_GRPF_Pos)            /*!< 0x80000000 */
#define I3C_EVR_GRPF                 I3C_EVR_GRPF_Msk                      /*!< group addressing flag (when the I3C is acting as target) */

/*******************  Bit definition for I3C_IER register  ********************/
#define I3C_IER_CFNFIE_Pos           (2U)
#define I3C_IER_CFNFIE_Msk           (0x1U << I3C_IER_CFNFIE_Pos)          /*!< 0x00000004 */
#define I3C_IER_CFNFIE               I3C_IER_CFNFIE_Msk                    /*!< C-FIFO not full interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_SFNEIE_Pos           (3U)
#define I3C_IER_SFNEIE_Msk           (0x1U << I3C_IER_SFNEIE_Pos)          /*!< 0x00000008 */
#define I3C_IER_SFNEIE               I3C_IER_SFNEIE_Msk                    /*!< S-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_TXFNFIE_Pos          (4U)
#define I3C_IER_TXFNFIE_Msk          (0x1U << I3C_IER_TXFNFIE_Pos)         /*!< 0x00000010 */
#define I3C_IER_TXFNFIE              I3C_IER_TXFNFIE_Msk                   /*!< TX-FIFO not full interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_RXFNEIE_Pos          (5U)
#define I3C_IER_RXFNEIE_Msk          (0x1U << I3C_IER_RXFNEIE_Pos)         /*!< 0x00000020 */
#define I3C_IER_RXFNEIE              I3C_IER_RXFNEIE_Msk                   /*!< RX-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_FCIE_Pos             (9U)
#define I3C_IER_FCIE_Msk             (0x1U << I3C_IER_FCIE_Pos)            /*!< 0x00000200 */
#define I3C_IER_FCIE                 I3C_IER_FCIE_Msk                      /*!< frame complete interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_RXTGTENDIE_Pos       (10U)
#define I3C_IER_RXTGTENDIE_Msk       (0x1U << I3C_IER_RXTGTENDIE_Pos)      /*!< 0x00000400 */
#define I3C_IER_RXTGTENDIE           I3C_IER_RXTGTENDIE_Msk                /*!< target-initiated read end interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_ERRIE_Pos            (11U)
#define I3C_IER_ERRIE_Msk            (0x1U << I3C_IER_ERRIE_Pos)           /*!< 0x00000800 */
#define I3C_IER_ERRIE                I3C_IER_ERRIE_Msk                     /*!< error interrupt enable (whatever the I3C is acting as controller/target) */
#define I3C_IER_IBIIE_Pos            (15U)
#define I3C_IER_IBIIE_Msk            (0x1U << I3C_IER_IBIIE_Pos)           /*!< 0x00008000 */
#define I3C_IER_IBIIE                I3C_IER_IBIIE_Msk                     /*!< IBI request interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_IBIENDIE_Pos         (16U)
#define I3C_IER_IBIENDIE_Msk         (0x1U << I3C_IER_IBIENDIE_Pos)        /*!< 0x00010000 */
#define I3C_IER_IBIENDIE             I3C_IER_IBIENDIE_Msk                  /*!< IBI end interrupt enable (when the I3C is acting as target) */
#define I3C_IER_CRIE_Pos             (17U)
#define I3C_IER_CRIE_Msk             (0x1U << I3C_IER_CRIE_Pos)            /*!< 0x00020000 */
#define I3C_IER_CRIE                 I3C_IER_CRIE_Msk                      /*!< controller-role request interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_CRUPDIE_Pos          (18U)
#define I3C_IER_CRUPDIE_Msk          (0x1U << I3C_IER_CRUPDIE_Pos)         /*!< 0x00040000 */
#define I3C_IER_CRUPDIE              I3C_IER_CRUPDIE_Msk                   /*!< controller-role update interrupt enable (when the I3C is acting as target) */
#define I3C_IER_HJIE_Pos             (19U)
#define I3C_IER_HJIE_Msk             (0x1U << I3C_IER_HJIE_Pos)            /*!< 0x00080000 */
#define I3C_IER_HJIE                 I3C_IER_HJIE_Msk                      /*!< hot-join interrupt enable (when the I3C is acting as controller) */
#define I3C_IER_WKPIE_Pos            (21U)
#define I3C_IER_WKPIE_Msk            (0x1U << I3C_IER_WKPIE_Pos)           /*!< 0x00200000 */
#define I3C_IER_WKPIE                I3C_IER_WKPIE_Msk                     /*!< wakeup interrupt enable (when the I3C is acting as target) */
#define I3C_IER_GETIE_Pos            (22U)
#define I3C_IER_GETIE_Msk            (0x1U << I3C_IER_GETIE_Pos)           /*!< 0x00400000 */
#define I3C_IER_GETIE                I3C_IER_GETIE_Msk                     /*!< GETxxx CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_STAIE_Pos            (23U)
#define I3C_IER_STAIE_Msk            (0x1U << I3C_IER_STAIE_Pos)           /*!< 0x00800000 */
#define I3C_IER_STAIE                I3C_IER_STAIE_Msk                     /*!< GETSTATUS CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_DAUPDIE_Pos          (24U)
#define I3C_IER_DAUPDIE_Msk          (0x1U << I3C_IER_DAUPDIE_Pos)         /*!< 0x01000000 */
#define I3C_IER_DAUPDIE              I3C_IER_DAUPDIE_Msk                   /*!< ENTDAA/RSTDAA/SETNEWDA CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_MWLUPDIE_Pos         (25U)
#define I3C_IER_MWLUPDIE_Msk         (0x1U << I3C_IER_MWLUPDIE_Pos)        /*!< 0x02000000 */
#define I3C_IER_MWLUPDIE             I3C_IER_MWLUPDIE_Msk                  /*!< SETMWL CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_MRLUPDIE_Pos         (26U)
#define I3C_IER_MRLUPDIE_Msk         (0x1U << I3C_IER_MRLUPDIE_Pos)        /*!< 0x04000000 */
#define I3C_IER_MRLUPDIE             I3C_IER_MRLUPDIE_Msk                  /*!< SETMRL CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_RSTIE_Pos            (27U)
#define I3C_IER_RSTIE_Msk            (0x1U << I3C_IER_RSTIE_Pos)           /*!< 0x08000000 */
#define I3C_IER_RSTIE                I3C_IER_RSTIE_Msk                     /*!< reset pattern interrupt enable (when the I3C is acting as target) */
#define I3C_IER_ASUPDIE_Pos          (28U)
#define I3C_IER_ASUPDIE_Msk          (0x1U << I3C_IER_ASUPDIE_Pos)         /*!< 0x10000000 */
#define I3C_IER_ASUPDIE              I3C_IER_ASUPDIE_Msk                   /*!< ENTASx CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_INTUPDIE_Pos         (29U)
#define I3C_IER_INTUPDIE_Msk         (0x1U << I3C_IER_INTUPDIE_Pos)        /*!< 0x20000000 */
#define I3C_IER_INTUPDIE             I3C_IER_INTUPDIE_Msk                  /*!< ENEC/DISEC CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_DEFIE_Pos            (30U)
#define I3C_IER_DEFIE_Msk            (0x1U << I3C_IER_DEFIE_Pos)           /*!< 0x40000000 */
#define I3C_IER_DEFIE                I3C_IER_DEFIE_Msk                     /*!< DEFTGTS CCC interrupt enable (when the I3C is acting as target) */
#define I3C_IER_GRPIE_Pos            (31U)
#define I3C_IER_GRPIE_Msk            (0x1U << I3C_IER_GRPIE_Pos)           /*!< 0x80000000 */
#define I3C_IER_GRPIE                I3C_IER_GRPIE_Msk                     /*!< DEFGRPA CCC interrupt enable (when the I3C is acting as target) */

/*******************  Bit definition for I3C_CEVR register  *******************/
#define I3C_CEVR_CFCF_Pos            (9U)
#define I3C_CEVR_CFCF_Msk            (0x1U << I3C_CEVR_CFCF_Pos)           /*!< 0x00000200 */
#define I3C_CEVR_CFCF                I3C_CEVR_CFCF_Msk                     /*!< clear frame complete flag (whatever the I3C is acting as controller/target) */
#define I3C_CEVR_CRXTGTENDF_Pos      (10U)
#define I3C_CEVR_CRXTGTENDF_Msk      (0x1U << I3C_CEVR_CRXTGTENDF_Pos)     /*!< 0x00000400 */
#define I3C_CEVR_CRXTGTENDF          I3C_CEVR_CRXTGTENDF_Msk               /*!< clear target-initiated read end flag (when the I3C is acting as controller) */
#define I3C_CEVR_CERRF_Pos           (11U)
#define I3C_CEVR_CERRF_Msk           (0x1U << I3C_CEVR_CERRF_Pos)          /*!< 0x00000800 */
#define I3C_CEVR_CERRF               I3C_CEVR_CERRF_Msk                    /*!< clear error flag (whatever the I3C is acting as controller/target) */
#define I3C_CEVR_CIBIF_Pos           (15U)
#define I3C_CEVR_CIBIF_Msk           (0x1U << I3C_CEVR_CIBIF_Pos)          /*!< 0x00008000 */
#define I3C_CEVR_CIBIF               I3C_CEVR_CIBIF_Msk                    /*!< clear IBI request flag (when the I3C is acting as controller) */
#define I3C_CEVR_CIBIENDF_Pos        (16U)
#define I3C_CEVR_CIBIENDF_Msk        (0x1U << I3C_CEVR_CIBIENDF_Pos)       /*!< 0x00010000 */
#define I3C_CEVR_CIBIENDF            I3C_CEVR_CIBIENDF_Msk                 /*!< clear IBI end flag (when the I3C is acting as target) */
#define I3C_CEVR_CCRF_Pos            (17U)
#define I3C_CEVR_CCRF_Msk            (0x1U << I3C_CEVR_CCRF_Pos)           /*!< 0x00020000 */
#define I3C_CEVR_CCRF                I3C_CEVR_CCRF_Msk                     /*!< clear controller-role request flag (when the I3C is acting as controller) */
#define I3C_CEVR_CCRUPDF_Pos         (18U)
#define I3C_CEVR_CCRUPDF_Msk         (0x1U << I3C_CEVR_CCRUPDF_Pos)        /*!< 0x00040000 */
#define I3C_CEVR_CCRUPDF             I3C_CEVR_CCRUPDF_Msk                  /*!< clear controller-role update flag (when the I3C is acting as target) */
#define I3C_CEVR_CHJF_Pos            (19U)
#define I3C_CEVR_CHJF_Msk            (0x1U << I3C_CEVR_CHJF_Pos)           /*!< 0x00080000 */
#define I3C_CEVR_CHJF                I3C_CEVR_CHJF_Msk                     /*!< clear hot-join flag (when the I3C is acting as controller) */
#define I3C_CEVR_CWKPF_Pos           (21U)
#define I3C_CEVR_CWKPF_Msk           (0x1U << I3C_CEVR_CWKPF_Pos)          /*!< 0x00200000 */
#define I3C_CEVR_CWKPF               I3C_CEVR_CWKPF_Msk                    /*!< clear wakeup flag (when the I3C is acting as target) */
#define I3C_CEVR_CGETF_Pos           (22U)
#define I3C_CEVR_CGETF_Msk           (0x1U << I3C_CEVR_CGETF_Pos)          /*!< 0x00400000 */
#define I3C_CEVR_CGETF               I3C_CEVR_CGETF_Msk                    /*!< clear GETxxx CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CSTAF_Pos           (23U)
#define I3C_CEVR_CSTAF_Msk           (0x1U << I3C_CEVR_CSTAF_Pos)          /*!< 0x00800000 */
#define I3C_CEVR_CSTAF               I3C_CEVR_CSTAF_Msk                    /*!< clear GETSTATUS CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CDAUPDF_Pos         (24U)
#define I3C_CEVR_CDAUPDF_Msk         (0x1U << I3C_CEVR_CDAUPDF_Pos)        /*!< 0x01000000 */
#define I3C_CEVR_CDAUPDF             I3C_CEVR_CDAUPDF_Msk                  /*!< clear ENTDAA/RSTDAA/SETNEWDA CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CMWLUPDF_Pos        (25U)
#define I3C_CEVR_CMWLUPDF_Msk        (0x1U << I3C_CEVR_CMWLUPDF_Pos)       /*!< 0x02000000 */
#define I3C_CEVR_CMWLUPDF            I3C_CEVR_CMWLUPDF_Msk                 /*!< clear SETMWL CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CMRLUPDF_Pos        (26U)
#define I3C_CEVR_CMRLUPDF_Msk        (0x1U << I3C_CEVR_CMRLUPDF_Pos)       /*!< 0x04000000 */
#define I3C_CEVR_CMRLUPDF            I3C_CEVR_CMRLUPDF_Msk                 /*!< clear SETMRL CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CRSTF_Pos           (27U)
#define I3C_CEVR_CRSTF_Msk           (0x1U << I3C_CEVR_CRSTF_Pos)          /*!< 0x08000000 */
#define I3C_CEVR_CRSTF               I3C_CEVR_CRSTF_Msk                    /*!< clear reset pattern flag (when the I3C is acting as target) */
#define I3C_CEVR_CASUPDF_Pos         (28U)
#define I3C_CEVR_CASUPDF_Msk         (0x1U << I3C_CEVR_CASUPDF_Pos)        /*!< 0x10000000 */
#define I3C_CEVR_CASUPDF             I3C_CEVR_CASUPDF_Msk                  /*!< clear ENTASx CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CINTUPDF_Pos        (29U)
#define I3C_CEVR_CINTUPDF_Msk        (0x1U << I3C_CEVR_CINTUPDF_Pos)       /*!< 0x20000000 */
#define I3C_CEVR_CINTUPDF            I3C_CEVR_CINTUPDF_Msk                 /*!< clear ENEC/DISEC CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CDEFF_Pos           (30U)
#define I3C_CEVR_CDEFF_Msk           (0x1U << I3C_CEVR_CDEFF_Pos)          /*!< 0x40000000 */
#define I3C_CEVR_CDEFF               I3C_CEVR_CDEFF_Msk                    /*!< clear DEFTGTS CCC flag (when the I3C is acting as target) */
#define I3C_CEVR_CGRPF_Pos           (31U)
#define I3C_CEVR_CGRPF_Msk           (0x1U << I3C_CEVR_CGRPF_Pos)          /*!< 0x80000000 */
#define I3C_CEVR_CGRPF               I3C_CEVR_CGRPF_Msk                    /*!< clear DEFGRPA CCC flag (when the I3C is acting as target) */

/******************  Bit definition for I3C_DEVR0 register  *******************/
#define I3C_DEVR0_DAVAL_Pos          (0U)
#define I3C_DEVR0_DAVAL_Msk          (0x1U << I3C_DEVR0_DAVAL_Pos)         /*!< 0x00000001 */
#define I3C_DEVR0_DAVAL              I3C_DEVR0_DAVAL_Msk                   /*!< dynamic address is valid (when the I3C is acting as target) */
#define I3C_DEVR0_DA_Pos             (1U)
#define I3C_DEVR0_DA_Msk             (0x7FU << I3C_DEVR0_DA_Pos)           /*!< 0x000000FE */
#define I3C_DEVR0_DA                 I3C_DEVR0_DA_Msk                      /*!< 7-bit dynamic address */
#define I3C_DEVR0_IBIEN_Pos          (16U)
#define I3C_DEVR0_IBIEN_Msk          (0x1U << I3C_DEVR0_IBIEN_Pos)         /*!< 0x00010000 */
#define I3C_DEVR0_IBIEN              I3C_DEVR0_IBIEN_Msk                   /*!< IBI request enable (when the I3C is acting as target) */
#define I3C_DEVR0_CREN_Pos           (17U)
#define I3C_DEVR0_CREN_Msk           (0x1U << I3C_DEVR0_CREN_Pos)          /*!< 0x00020000 */
#define I3C_DEVR0_CREN               I3C_DEVR0_CREN_Msk                    /*!< controller-role request enable (when the I3C is acting as target) */
#define I3C_DEVR0_HJEN_Pos           (19U)
#define I3C_DEVR0_HJEN_Msk           (0x1U << I3C_DEVR0_HJEN_Pos)          /*!< 0x00080000 */
#define I3C_DEVR0_HJEN               I3C_DEVR0_HJEN_Msk                    /*!< hot-join request enable (when the I3C is acting as target) */
#define I3C_DEVR0_AS_Pos             (20U)
#define I3C_DEVR0_AS_Msk             (0x3U << I3C_DEVR0_AS_Pos)            /*!< 0x00300000 */
#define I3C_DEVR0_AS                 I3C_DEVR0_AS_Msk                      /*!< activity state (when the I3C is acting as target) */
#define I3C_DEVR0_AS_0               (0x1UL << I3C_DEVR0_AS_Pos)           /*!< 0x00100000 */
#define I3C_DEVR0_AS_1               (0x2UL << I3C_DEVR0_AS_Pos)           /*!< 0x00200000 */
#define I3C_DEVR0_RSTACT_Pos         (22U)
#define I3C_DEVR0_RSTACT_Msk         (0x3U << I3C_DEVR0_RSTACT_Pos)        /*!< 0x00C00000 */
#define I3C_DEVR0_RSTACT             I3C_DEVR0_RSTACT_Msk                  /*!< reset action/level on received reset pattern (when the I3C is acting as target) */
#define I3C_DEVR0_RSTACT_0           (0x1UL << I3C_DEVR0_RSTACT_Pos)       /*!< 0x00400000 */
#define I3C_DEVR0_RSTACT_1           (0x2UL << I3C_DEVR0_RSTACT_Pos)       /*!< 0x00800000 */
#define I3C_DEVR0_RSTVAL_Pos         (24U)
#define I3C_DEVR0_RSTVAL_Msk         (0x1U << I3C_DEVR0_RSTVAL_Pos)        /*!< 0x01000000 */
#define I3C_DEVR0_RSTVAL             I3C_DEVR0_RSTVAL_Msk                  /*!< reset action is valid (when the I3C is acting as target) */

/******************  Bit definition for I3C_DEVRX register  *******************/
#define I3C_DEVRX_DA_Pos             (1U)
#define I3C_DEVRX_DA_Msk             (0x7FU << I3C_DEVRX_DA_Pos)           /*!< 0x000000FE */
#define I3C_DEVRX_DA                 I3C_DEVRX_DA_Msk                      /*!< assigned I3C dynamic address to target x (when the I3C is acting as controller) */
#define I3C_DEVRX_IBIACK_Pos         (16U)
#define I3C_DEVRX_IBIACK_Msk         (0x1U << I3C_DEVRX_IBIACK_Pos)        /*!< 0x00010000 */
#define I3C_DEVRX_IBIACK             I3C_DEVRX_IBIACK_Msk                  /*!< IBI request acknowledge (when the I3C is acting as controller) */
#define I3C_DEVRX_CRACK_Pos          (17U)
#define I3C_DEVRX_CRACK_Msk          (0x1U << I3C_DEVRX_CRACK_Pos)         /*!< 0x00020000 */
#define I3C_DEVRX_CRACK              I3C_DEVRX_CRACK_Msk                   /*!< controller-role request acknowledge (when the I3C is acting as controller) */
#define I3C_DEVRX_IBIDEN_Pos         (18U)
#define I3C_DEVRX_IBIDEN_Msk         (0x1U << I3C_DEVRX_IBIDEN_Pos)        /*!< 0x00040000 */
#define I3C_DEVRX_IBIDEN             I3C_DEVRX_IBIDEN_Msk                  /*!< IBI data enable (when the I3C is acting as controller) */
#define I3C_DEVRX_SUSP_Pos           (19U)
#define I3C_DEVRX_SUSP_Msk           (0x1U << I3C_DEVRX_SUSP_Pos)          /*!< 0x00080000 */
#define I3C_DEVRX_SUSP               I3C_DEVRX_SUSP_Msk                    /*!< suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) */
#define I3C_DEVRX_DIS_Pos            (31U)
#define I3C_DEVRX_DIS_Msk            (0x1U << I3C_DEVRX_DIS_Pos)           /*!< 0x80000000 */
#define I3C_DEVRX_DIS                I3C_DEVRX_DIS_Msk                     /*!< DA[6:0] write disabled (when the I3C is acting as controller) */

/******************  Bit definition for I3C_MAXRLR register  ******************/
#define I3C_MAXRLR_MRL_Pos           (0U)
#define I3C_MAXRLR_MRL_Msk           (0xFFFFU << I3C_MAXRLR_MRL_Pos)       /*!< 0x0000FFFF */
#define I3C_MAXRLR_MRL               I3C_MAXRLR_MRL_Msk                    /*!< maximum data read length (when I3C is acting as target) */
#define I3C_MAXRLR_IBIP_Pos          (16U)
#define I3C_MAXRLR_IBIP_Msk          (0x7U << I3C_MAXRLR_IBIP_Pos)         /*!< 0x00070000 */
#define I3C_MAXRLR_IBIP              I3C_MAXRLR_IBIP_Msk                   /*!< IBI payload data size, in bytes (when I3C is acting as target) */
#define I3C_MAXRLR_IBIP_0            (0x1UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00010000 */
#define I3C_MAXRLR_IBIP_1            (0x2UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00020000 */
#define I3C_MAXRLR_IBIP_2            (0x4UL << I3C_MAXRLR_IBIP_Pos)        /*!< 0x00040000 */

/******************  Bit definition for I3C_MAXWLR register  ******************/
#define I3C_MAXWLR_MWL_Pos           (0U)
#define I3C_MAXWLR_MWL_Msk           (0xFFFFU << I3C_MAXWLR_MWL_Pos)       /*!< 0x0000FFFF */
#define I3C_MAXWLR_MWL               I3C_MAXWLR_MWL_Msk                    /*!< maximum data write length (when I3C is acting as target) */

/*****************  Bit definition for I3C_TIMINGR0 register  *****************/
#define I3C_TIMINGR0_SCLL_PP_Pos     (0U)
#define I3C_TIMINGR0_SCLL_PP_Msk     (0xFFU << I3C_TIMINGR0_SCLL_PP_Pos)   /*!< 0x000000FF */
#define I3C_TIMINGR0_SCLL_PP         I3C_TIMINGR0_SCLL_PP_Msk              /*!< SCL low duration in I3C push-pull phases, in number of kernel clocks cycles: */
#define I3C_TIMINGR0_SCLH_I3C_Pos    (8U)
#define I3C_TIMINGR0_SCLH_I3C_Msk    (0xFFU << I3C_TIMINGR0_SCLH_I3C_Pos)  /*!< 0x0000FF00 */
#define I3C_TIMINGR0_SCLH_I3C        I3C_TIMINGR0_SCLH_I3C_Msk             /*!< SCL high duration, used for I3C messages (both in push-pull and open-drain phases), in number of ke */
#define I3C_TIMINGR0_SCLL_OD_Pos     (16U)
#define I3C_TIMINGR0_SCLL_OD_Msk     (0xFFU << I3C_TIMINGR0_SCLL_OD_Pos)   /*!< 0x00FF0000 */
#define I3C_TIMINGR0_SCLL_OD         I3C_TIMINGR0_SCLL_OD_Msk              /*!< SCL low duration in open-drain phases, used for legacy I2C commands and for I3C open-drain phases ( */
#define I3C_TIMINGR0_SCLH_I2C_Pos    (24U)
#define I3C_TIMINGR0_SCLH_I2C_Msk    (0xFFU << I3C_TIMINGR0_SCLH_I2C_Pos)  /*!< 0xFF000000 */
#define I3C_TIMINGR0_SCLH_I2C        I3C_TIMINGR0_SCLH_I2C_Msk             /*!< SCL high duration, used for legacy I2C commands, in number of kernel clocks cycles: */

/*****************  Bit definition for I3C_TIMINGR1 register  *****************/
#define I3C_TIMINGR1_AVAL_Pos        (0U)
#define I3C_TIMINGR1_AVAL_Msk        (0xFFU << I3C_TIMINGR1_AVAL_Pos)      /*!< 0x000000FF */
#define I3C_TIMINGR1_AVAL            I3C_TIMINGR1_AVAL_Msk                 /*!< number of kernel clock cycles, that is used whatever I3C is acting as controller or target, to set  */
#define I3C_TIMINGR1_ASNCR_Pos       (8U)
#define I3C_TIMINGR1_ASNCR_Msk       (0x3U << I3C_TIMINGR1_ASNCR_Pos)      /*!< 0x00000300 */
#define I3C_TIMINGR1_ASNCR           I3C_TIMINGR1_ASNCR_Msk                /*!< activity state of the new controller (when I3C is acting as - active- controller) */
#define I3C_TIMINGR1_ASNCR_0         (0x1UL << I3C_TIMINGR1_ASNCR_Pos)     /*!< 0x00000100 */
#define I3C_TIMINGR1_ASNCR_1         (0x2UL << I3C_TIMINGR1_ASNCR_Pos)     /*!< 0x00000200 */
#define I3C_TIMINGR1_FREE_Pos        (16U)
#define I3C_TIMINGR1_FREE_Msk        (0x7FU << I3C_TIMINGR1_FREE_Pos)      /*!< 0x007F0000 */
#define I3C_TIMINGR1_FREE            I3C_TIMINGR1_FREE_Msk                 /*!< number of kernel clocks cycles that is used to set some MIPI timings like bus free condition time ( */
#define I3C_TIMINGR1_SDA_HD_Pos      (28U)
#define I3C_TIMINGR1_SDA_HD_Msk      (0x1U << I3C_TIMINGR1_SDA_HD_Pos)     /*!< 0x10000000 */
#define I3C_TIMINGR1_SDA_HD          I3C_TIMINGR1_SDA_HD_Msk               /*!< SDA hold time (when the I3C is acting as controller), in number of kernel clocks cycles (refer to M */

/*****************  Bit definition for I3C_TIMINGR2 register  *****************/
#define I3C_TIMINGR2_STALLT_Pos      (0U)
#define I3C_TIMINGR2_STALLT_Msk      (0x1U << I3C_TIMINGR2_STALLT_Pos)     /*!< 0x00000001 */
#define I3C_TIMINGR2_STALLT          I3C_TIMINGR2_STALLT_Msk               /*!< Controller clock stall on T-bit phase of Data enable */
#define I3C_TIMINGR2_STALLD_Pos      (1U)
#define I3C_TIMINGR2_STALLD_Msk      (0x1U << I3C_TIMINGR2_STALLD_Pos)     /*!< 0x00000002 */
#define I3C_TIMINGR2_STALLD          I3C_TIMINGR2_STALLD_Msk               /*!< controller clock stall on PAR phase of Data enable */
#define I3C_TIMINGR2_STALLC_Pos      (2U)
#define I3C_TIMINGR2_STALLC_Msk      (0x1U << I3C_TIMINGR2_STALLC_Pos)     /*!< 0x00000004 */
#define I3C_TIMINGR2_STALLC          I3C_TIMINGR2_STALLC_Msk               /*!< controller clock stall on PAR phase of CCC enable */
#define I3C_TIMINGR2_STALLA_Pos      (3U)
#define I3C_TIMINGR2_STALLA_Msk      (0x1U << I3C_TIMINGR2_STALLA_Pos)     /*!< 0x00000008 */
#define I3C_TIMINGR2_STALLA          I3C_TIMINGR2_STALLA_Msk               /*!< controller clock stall enable on ACK phase */
#define I3C_TIMINGR2_STALL_Pos       (8U)
#define I3C_TIMINGR2_STALL_Msk       (0xFFU << I3C_TIMINGR2_STALL_Pos)     /*!< 0x0000FF00 */
#define I3C_TIMINGR2_STALL           I3C_TIMINGR2_STALL_Msk                /*!< controller clock stall time, in number of kernel clock cycles */

/*******************  Bit definition for I3C_BCR register  ********************/
#define I3C_BCR_BCR_Pos              (0U)
#define I3C_BCR_BCR_Msk              (0xFFUL << I3C_BCR_BCR_Pos)           /*!< 0x000000FF */
#define I3C_BCR_BCR                  I3C_BCR_BCR_Msk                       /*!< Bus Characteristics */
#define I3C_BCR_BCR0_Pos             (0U)
#define I3C_BCR_BCR0_Msk             (0x1UL << I3C_BCR_BCR0_Pos)           /*!< 0x00000001 */
#define I3C_BCR_BCR0                 I3C_BCR_BCR0_Msk                      /*!< Max Data Speed Limitation */
#define I3C_BCR_BCR1_Pos             (1U)
#define I3C_BCR_BCR1_Msk             (0x1UL << I3C_BCR_BCR1_Pos)           /*!< 0x00000002 */
#define I3C_BCR_BCR1                 I3C_BCR_BCR1_Msk                      /*!< IBI Request capable */
#define I3C_BCR_BCR2_Pos             (2U)
#define I3C_BCR_BCR2_Msk             (0x1UL << I3C_BCR_BCR2_Pos)           /*!< 0x00000004 */
#define I3C_BCR_BCR2                 I3C_BCR_BCR2_Msk                      /*!< IBI Payload additional Mandatory Data Byte */
#define I3C_BCR_BCR6_Pos             (6U)
#define I3C_BCR_BCR6_Msk             (0x1UL << I3C_BCR_BCR6_Pos)           /*!< 0x00000040 */
#define I3C_BCR_BCR6                 I3C_BCR_BCR6_Msk                      /*!< Device Role shared during Dynamic Address Assignment */

/*******************  Bit definition for I3C_DCR register  ********************/
#define I3C_DCR_DCR_Pos              (0U)
#define I3C_DCR_DCR_Msk              (0xFFU << I3C_DCR_DCR_Pos)            /*!< 0x000000FF */
#define I3C_DCR_DCR                  I3C_DCR_DCR_Msk                       /*!< device characteristics ID */

/*****************  Bit definition for I3C_GETCAPR register  ******************/
#define I3C_GETCAPR_CAPPEND_Pos      (14U)
#define I3C_GETCAPR_CAPPEND_Msk      (0x1U << I3C_GETCAPR_CAPPEND_Pos)     /*!< 0x00004000 */
#define I3C_GETCAPR_CAPPEND          I3C_GETCAPR_CAPPEND_Msk               /*!< IBI MDB support for pending read notification */

/******************  Bit definition for I3C_CRCAPR register  ******************/
#define I3C_CRCAPR_CAPDHOFF_Pos      (3U)
#define I3C_CRCAPR_CAPDHOFF_Msk      (0x1U << I3C_CRCAPR_CAPDHOFF_Pos)     /*!< 0x00000008 */
#define I3C_CRCAPR_CAPDHOFF          I3C_CRCAPR_CAPDHOFF_Msk               /*!< delayed controller-role hand-off */
#define I3C_CRCAPR_CAPGRP_Pos        (9U)
#define I3C_CRCAPR_CAPGRP_Msk        (0x1U << I3C_CRCAPR_CAPGRP_Pos)       /*!< 0x00000200 */
#define I3C_CRCAPR_CAPGRP            I3C_CRCAPR_CAPGRP_Msk                 /*!< group management support (when acting as controller) */

/*****************  Bit definition for I3C_GETMXDSR register  *****************/
#define I3C_GETMXDSR_HOFFAS_Pos      (0U)
#define I3C_GETMXDSR_HOFFAS_Msk      (0x3U << I3C_GETMXDSR_HOFFAS_Pos)     /*!< 0x00000003 */
#define I3C_GETMXDSR_HOFFAS          I3C_GETMXDSR_HOFFAS_Msk               /*!< controller hand-off activity state */
#define I3C_GETMXDSR_HOFFAS_0        (0x1UL << I3C_GETMXDSR_HOFFAS_Pos)    /*!< 0x00000001 */
#define I3C_GETMXDSR_HOFFAS_1        (0x2UL << I3C_GETMXDSR_HOFFAS_Pos)    /*!< 0x00000002 */
#define I3C_GETMXDSR_FMT_Pos         (8U)
#define I3C_GETMXDSR_FMT_Msk         (0x3U << I3C_GETMXDSR_FMT_Pos)        /*!< 0x00000300 */
#define I3C_GETMXDSR_FMT             I3C_GETMXDSR_FMT_Msk                  /*!< GETMXDS CCC format */
#define I3C_GETMXDSR_FMT_0           (0x1UL << I3C_GETMXDSR_FMT_Pos)       /*!< 0x00000100 */
#define I3C_GETMXDSR_FMT_1           (0x2UL << I3C_GETMXDSR_FMT_Pos)       /*!< 0x00000200 */
#define I3C_GETMXDSR_RDTURN_Pos      (16U)
#define I3C_GETMXDSR_RDTURN_Msk      (0xFFU << I3C_GETMXDSR_RDTURN_Pos)    /*!< 0x00FF0000 */
#define I3C_GETMXDSR_RDTURN          I3C_GETMXDSR_RDTURN_Msk               /*!< programmed byte of the 3-byte MaxRdTurn (maximum read turnaround byte) */
#define I3C_GETMXDSR_TSCO_Pos        (24U)
#define I3C_GETMXDSR_TSCO_Msk        (0x1U << I3C_GETMXDSR_TSCO_Pos)       /*!< 0x01000000 */
#define I3C_GETMXDSR_TSCO            I3C_GETMXDSR_TSCO_Msk                 /*!< clock-to-data turnaround time (tSCO) */

/******************  Bit definition for I3C_EPIDR register  *******************/
#define I3C_EPIDR_MIPIID_Pos         (12U)
#define I3C_EPIDR_MIPIID_Msk         (0xFU << I3C_EPIDR_MIPIID_Pos)        /*!< 0x0000F000 */
#define I3C_EPIDR_MIPIID             I3C_EPIDR_MIPIID_Msk                  /*!< 4-bit MIPI Instance ID */
#define I3C_EPIDR_IDTSEL_Pos         (16U)
#define I3C_EPIDR_IDTSEL_Msk         (0x1U << I3C_EPIDR_IDTSEL_Pos)        /*!< 0x00010000 */
#define I3C_EPIDR_IDTSEL             I3C_EPIDR_IDTSEL_Msk                  /*!< provisioned ID type selector */
#define I3C_EPIDR_MIPIMID_Pos        (17U)
#define I3C_EPIDR_MIPIMID_Msk        (0x7FFFU << I3C_EPIDR_MIPIMID_Pos)    /*!< 0xFFFE0000 */
#define I3C_EPIDR_MIPIMID            I3C_EPIDR_MIPIMID_Msk                 /*!< 15-bit MIPI manufacturer ID */

/******************  Bit definition for I3C_HWCFGR register  ******************/
#define I3C_HWCFGR_CSIZE_Pos         (0U)
#define I3C_HWCFGR_CSIZE_Msk         (0xFU << I3C_HWCFGR_CSIZE_Pos)        /*!< 0x0000000F */
#define I3C_HWCFGR_CSIZE             I3C_HWCFGR_CSIZE_Msk                  /*!< C-FIFO size, in multiple of (32-bit) words */
#define I3C_HWCFGR_SSIZE_Pos         (4U)
#define I3C_HWCFGR_SSIZE_Msk         (0xFU << I3C_HWCFGR_SSIZE_Pos)        /*!< 0x000000F0 */
#define I3C_HWCFGR_SSIZE             I3C_HWCFGR_SSIZE_Msk                  /*!< S-FIFO size, in multiple of (32-bit) words */
#define I3C_HWCFGR_TSIZE_Pos         (8U)
#define I3C_HWCFGR_TSIZE_Msk         (0xFU << I3C_HWCFGR_TSIZE_Pos)        /*!< 0x00000F00 */
#define I3C_HWCFGR_TSIZE             I3C_HWCFGR_TSIZE_Msk                  /*!< TX-FIFO size, in multiple of 4 bytes */
#define I3C_HWCFGR_RSIZE_Pos         (12U)
#define I3C_HWCFGR_RSIZE_Msk         (0xFU << I3C_HWCFGR_RSIZE_Pos)        /*!< 0x0000F000 */
#define I3C_HWCFGR_RSIZE             I3C_HWCFGR_RSIZE_Msk                  /*!< RX-FIFO size, in multiple of 4 bytes */
#define I3C_HWCFGR_NBT_Pos           (16U)
#define I3C_HWCFGR_NBT_Msk           (0xFU << I3C_HWCFGR_NBT_Pos)          /*!< 0x000F0000 */
#define I3C_HWCFGR_NBT               I3C_HWCFGR_NBT_Msk                    /*!< number of targets whose the IBI/controller-role request can be managed in parallel by this I3C IP,  */

/*******************  Bit definition for I3C_VERR register  *******************/
#define I3C_VERR_MINREV_Pos          (0U)
#define I3C_VERR_MINREV_Msk          (0xFU << I3C_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define I3C_VERR_MINREV              I3C_VERR_MINREV_Msk                   /*!< minor IP revision */
#define I3C_VERR_MAJREV_Pos          (4U)
#define I3C_VERR_MAJREV_Msk          (0xFU << I3C_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define I3C_VERR_MAJREV              I3C_VERR_MAJREV_Msk                   /*!< major IP revision */

/******************  Bit definition for I3C_IPIDR register  *******************/
#define I3C_IPIDR_ID_Pos             (0U)
#define I3C_IPIDR_ID_Msk             (0xFFFFFFFFU << I3C_IPIDR_ID_Pos)     /*!< 0xFFFFFFFF */
#define I3C_IPIDR_ID                 I3C_IPIDR_ID_Msk                      /*!< IP identification */

/*******************  Bit definition for I3C_SIDR register  *******************/
#define I3C_SIDR_SID_Pos             (0U)
#define I3C_SIDR_SID_Msk             (0xFFFFFFFFU << I3C_SIDR_SID_Pos)     /*!< 0xFFFFFFFF */
#define I3C_SIDR_SID                 I3C_SIDR_SID_Msk                      /*!< IP address space size identification */

/******************************************************************************/
/*                                                                            */
/*              Inter-Processor Communication Controller (IPCC)               */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for IPCC_C1CR register  *******************/
#define IPCC_C1CR_RXOIE_Pos           (0U)
#define IPCC_C1CR_RXOIE_Msk           (0x1U << IPCC_C1CR_RXOIE_Pos)           /*!< 0x00000001 */
#define IPCC_C1CR_RXOIE               IPCC_C1CR_RXOIE_Msk                     /*!< Processor 1 Receive channel occupied non-secure interrupt enable */
#define IPCC_C1CR_SECRXOIE_Pos        (1U)
#define IPCC_C1CR_SECRXOIE_Msk        (0x1U << IPCC_C1CR_SECRXOIE_Pos)        /*!< 0x00000002 */
#define IPCC_C1CR_SECRXOIE            IPCC_C1CR_SECRXOIE_Msk                  /*!< Processor 1 Receive channel occupied secure interrupt enable */
#define IPCC_C1CR_TXFIE_Pos           (16U)
#define IPCC_C1CR_TXFIE_Msk           (0x1U << IPCC_C1CR_TXFIE_Pos)           /*!< 0x00010000 */
#define IPCC_C1CR_TXFIE               IPCC_C1CR_TXFIE_Msk                     /*!< Processor 1Transmit channel free non-secure interrupt enable */
#define IPCC_C1CR_SECTXFIE_Pos        (17U)
#define IPCC_C1CR_SECTXFIE_Msk        (0x1U << IPCC_C1CR_SECTXFIE_Pos)        /*!< 0x00020000 */
#define IPCC_C1CR_SECTXFIE            IPCC_C1CR_SECTXFIE_Msk                  /*!< Processor 1Transmit channel free secure interrupt enable */

/******************  Bit definition for IPCC_C1MR register  *******************/
#define IPCC_C1MR_CH1OM_Pos           (0U)
#define IPCC_C1MR_CH1OM_Msk           (0x1U << IPCC_C1MR_CH1OM_Pos)           /*!< 0x00000001 */
#define IPCC_C1MR_CH1OM               IPCC_C1MR_CH1OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH2OM_Pos           (1U)
#define IPCC_C1MR_CH2OM_Msk           (0x1U << IPCC_C1MR_CH2OM_Pos)           /*!< 0x00000002 */
#define IPCC_C1MR_CH2OM               IPCC_C1MR_CH2OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH3OM_Pos           (2U)
#define IPCC_C1MR_CH3OM_Msk           (0x1U << IPCC_C1MR_CH3OM_Pos)           /*!< 0x00000004 */
#define IPCC_C1MR_CH3OM               IPCC_C1MR_CH3OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH4OM_Pos           (3U)
#define IPCC_C1MR_CH4OM_Msk           (0x1U << IPCC_C1MR_CH4OM_Pos)           /*!< 0x00000008 */
#define IPCC_C1MR_CH4OM               IPCC_C1MR_CH4OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH5OM_Pos           (4U)
#define IPCC_C1MR_CH5OM_Msk           (0x1U << IPCC_C1MR_CH5OM_Pos)           /*!< 0x00000010 */
#define IPCC_C1MR_CH5OM               IPCC_C1MR_CH5OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH6OM_Pos           (5U)
#define IPCC_C1MR_CH6OM_Msk           (0x1U << IPCC_C1MR_CH6OM_Pos)           /*!< 0x00000020 */
#define IPCC_C1MR_CH6OM               IPCC_C1MR_CH6OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH7OM_Pos           (6U)
#define IPCC_C1MR_CH7OM_Msk           (0x1U << IPCC_C1MR_CH7OM_Pos)           /*!< 0x00000040 */
#define IPCC_C1MR_CH7OM               IPCC_C1MR_CH7OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH8OM_Pos           (7U)
#define IPCC_C1MR_CH8OM_Msk           (0x1U << IPCC_C1MR_CH8OM_Pos)           /*!< 0x00000080 */
#define IPCC_C1MR_CH8OM               IPCC_C1MR_CH8OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH9OM_Pos           (8U)
#define IPCC_C1MR_CH9OM_Msk           (0x1U << IPCC_C1MR_CH9OM_Pos)           /*!< 0x00000100 */
#define IPCC_C1MR_CH9OM               IPCC_C1MR_CH9OM_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH10OM_Pos          (9U)
#define IPCC_C1MR_CH10OM_Msk          (0x1U << IPCC_C1MR_CH10OM_Pos)          /*!< 0x00000200 */
#define IPCC_C1MR_CH10OM              IPCC_C1MR_CH10OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH11OM_Pos          (10U)
#define IPCC_C1MR_CH11OM_Msk          (0x1U << IPCC_C1MR_CH11OM_Pos)          /*!< 0x00000400 */
#define IPCC_C1MR_CH11OM              IPCC_C1MR_CH11OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH12OM_Pos          (11U)
#define IPCC_C1MR_CH12OM_Msk          (0x1U << IPCC_C1MR_CH12OM_Pos)          /*!< 0x00000800 */
#define IPCC_C1MR_CH12OM              IPCC_C1MR_CH12OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH13OM_Pos          (12U)
#define IPCC_C1MR_CH13OM_Msk          (0x1U << IPCC_C1MR_CH13OM_Pos)          /*!< 0x00001000 */
#define IPCC_C1MR_CH13OM              IPCC_C1MR_CH13OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH14OM_Pos          (13U)
#define IPCC_C1MR_CH14OM_Msk          (0x1U << IPCC_C1MR_CH14OM_Pos)          /*!< 0x00002000 */
#define IPCC_C1MR_CH14OM              IPCC_C1MR_CH14OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH15OM_Pos          (14U)
#define IPCC_C1MR_CH15OM_Msk          (0x1U << IPCC_C1MR_CH15OM_Pos)          /*!< 0x00004000 */
#define IPCC_C1MR_CH15OM              IPCC_C1MR_CH15OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH16OM_Pos          (15U)
#define IPCC_C1MR_CH16OM_Msk          (0x1U << IPCC_C1MR_CH16OM_Pos)          /*!< 0x00008000 */
#define IPCC_C1MR_CH16OM              IPCC_C1MR_CH16OM_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1MR_CH1FM_Pos           (16U)
#define IPCC_C1MR_CH1FM_Msk           (0x1U << IPCC_C1MR_CH1FM_Pos)           /*!< 0x00010000 */
#define IPCC_C1MR_CH1FM               IPCC_C1MR_CH1FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH2FM_Pos           (17U)
#define IPCC_C1MR_CH2FM_Msk           (0x1U << IPCC_C1MR_CH2FM_Pos)           /*!< 0x00020000 */
#define IPCC_C1MR_CH2FM               IPCC_C1MR_CH2FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH3FM_Pos           (18U)
#define IPCC_C1MR_CH3FM_Msk           (0x1U << IPCC_C1MR_CH3FM_Pos)           /*!< 0x00040000 */
#define IPCC_C1MR_CH3FM               IPCC_C1MR_CH3FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH4FM_Pos           (19U)
#define IPCC_C1MR_CH4FM_Msk           (0x1U << IPCC_C1MR_CH4FM_Pos)           /*!< 0x00080000 */
#define IPCC_C1MR_CH4FM               IPCC_C1MR_CH4FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH5FM_Pos           (20U)
#define IPCC_C1MR_CH5FM_Msk           (0x1U << IPCC_C1MR_CH5FM_Pos)           /*!< 0x00100000 */
#define IPCC_C1MR_CH5FM               IPCC_C1MR_CH5FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH6FM_Pos           (21U)
#define IPCC_C1MR_CH6FM_Msk           (0x1U << IPCC_C1MR_CH6FM_Pos)           /*!< 0x00200000 */
#define IPCC_C1MR_CH6FM               IPCC_C1MR_CH6FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH7FM_Pos           (22U)
#define IPCC_C1MR_CH7FM_Msk           (0x1U << IPCC_C1MR_CH7FM_Pos)           /*!< 0x00400000 */
#define IPCC_C1MR_CH7FM               IPCC_C1MR_CH7FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH8FM_Pos           (23U)
#define IPCC_C1MR_CH8FM_Msk           (0x1U << IPCC_C1MR_CH8FM_Pos)           /*!< 0x00800000 */
#define IPCC_C1MR_CH8FM               IPCC_C1MR_CH8FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH9FM_Pos           (24U)
#define IPCC_C1MR_CH9FM_Msk           (0x1U << IPCC_C1MR_CH9FM_Pos)           /*!< 0x01000000 */
#define IPCC_C1MR_CH9FM               IPCC_C1MR_CH9FM_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH10FM_Pos          (25U)
#define IPCC_C1MR_CH10FM_Msk          (0x1U << IPCC_C1MR_CH10FM_Pos)          /*!< 0x02000000 */
#define IPCC_C1MR_CH10FM              IPCC_C1MR_CH10FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH11FM_Pos          (26U)
#define IPCC_C1MR_CH11FM_Msk          (0x1U << IPCC_C1MR_CH11FM_Pos)          /*!< 0x04000000 */
#define IPCC_C1MR_CH11FM              IPCC_C1MR_CH11FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH12FM_Pos          (27U)
#define IPCC_C1MR_CH12FM_Msk          (0x1U << IPCC_C1MR_CH12FM_Pos)          /*!< 0x08000000 */
#define IPCC_C1MR_CH12FM              IPCC_C1MR_CH12FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH13FM_Pos          (28U)
#define IPCC_C1MR_CH13FM_Msk          (0x1U << IPCC_C1MR_CH13FM_Pos)          /*!< 0x10000000 */
#define IPCC_C1MR_CH13FM              IPCC_C1MR_CH13FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH14FM_Pos          (29U)
#define IPCC_C1MR_CH14FM_Msk          (0x1U << IPCC_C1MR_CH14FM_Pos)          /*!< 0x20000000 */
#define IPCC_C1MR_CH14FM              IPCC_C1MR_CH14FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH15FM_Pos          (30U)
#define IPCC_C1MR_CH15FM_Msk          (0x1U << IPCC_C1MR_CH15FM_Pos)          /*!< 0x40000000 */
#define IPCC_C1MR_CH15FM              IPCC_C1MR_CH15FM_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1MR_CH16FM_Pos          (31U)
#define IPCC_C1MR_CH16FM_Msk          (0x1U << IPCC_C1MR_CH16FM_Pos)          /*!< 0x80000000 */
#define IPCC_C1MR_CH16FM              IPCC_C1MR_CH16FM_Msk                    /*!< Processor 1 transmit channel n status set */

/******************  Bit definition for IPCC_C1SCR register  ******************/
#define IPCC_C1SCR_CH1C_Pos           (0U)
#define IPCC_C1SCR_CH1C_Msk           (0x1U << IPCC_C1SCR_CH1C_Pos)           /*!< 0x00000001 */
#define IPCC_C1SCR_CH1C               IPCC_C1SCR_CH1C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH2C_Pos           (1U)
#define IPCC_C1SCR_CH2C_Msk           (0x1U << IPCC_C1SCR_CH2C_Pos)           /*!< 0x00000002 */
#define IPCC_C1SCR_CH2C               IPCC_C1SCR_CH2C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH3C_Pos           (2U)
#define IPCC_C1SCR_CH3C_Msk           (0x1U << IPCC_C1SCR_CH3C_Pos)           /*!< 0x00000004 */
#define IPCC_C1SCR_CH3C               IPCC_C1SCR_CH3C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH4C_Pos           (3U)
#define IPCC_C1SCR_CH4C_Msk           (0x1U << IPCC_C1SCR_CH4C_Pos)           /*!< 0x00000008 */
#define IPCC_C1SCR_CH4C               IPCC_C1SCR_CH4C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH5C_Pos           (4U)
#define IPCC_C1SCR_CH5C_Msk           (0x1U << IPCC_C1SCR_CH5C_Pos)           /*!< 0x00000010 */
#define IPCC_C1SCR_CH5C               IPCC_C1SCR_CH5C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH6C_Pos           (5U)
#define IPCC_C1SCR_CH6C_Msk           (0x1U << IPCC_C1SCR_CH6C_Pos)           /*!< 0x00000020 */
#define IPCC_C1SCR_CH6C               IPCC_C1SCR_CH6C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH7C_Pos           (6U)
#define IPCC_C1SCR_CH7C_Msk           (0x1U << IPCC_C1SCR_CH7C_Pos)           /*!< 0x00000040 */
#define IPCC_C1SCR_CH7C               IPCC_C1SCR_CH7C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH8C_Pos           (7U)
#define IPCC_C1SCR_CH8C_Msk           (0x1U << IPCC_C1SCR_CH8C_Pos)           /*!< 0x00000080 */
#define IPCC_C1SCR_CH8C               IPCC_C1SCR_CH8C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH9C_Pos           (8U)
#define IPCC_C1SCR_CH9C_Msk           (0x1U << IPCC_C1SCR_CH9C_Pos)           /*!< 0x00000100 */
#define IPCC_C1SCR_CH9C               IPCC_C1SCR_CH9C_Msk                     /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH10C_Pos          (9U)
#define IPCC_C1SCR_CH10C_Msk          (0x1U << IPCC_C1SCR_CH10C_Pos)          /*!< 0x00000200 */
#define IPCC_C1SCR_CH10C              IPCC_C1SCR_CH10C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH11C_Pos          (10U)
#define IPCC_C1SCR_CH11C_Msk          (0x1U << IPCC_C1SCR_CH11C_Pos)          /*!< 0x00000400 */
#define IPCC_C1SCR_CH11C              IPCC_C1SCR_CH11C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH12C_Pos          (11U)
#define IPCC_C1SCR_CH12C_Msk          (0x1U << IPCC_C1SCR_CH12C_Pos)          /*!< 0x00000800 */
#define IPCC_C1SCR_CH12C              IPCC_C1SCR_CH12C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH13C_Pos          (12U)
#define IPCC_C1SCR_CH13C_Msk          (0x1U << IPCC_C1SCR_CH13C_Pos)          /*!< 0x00001000 */
#define IPCC_C1SCR_CH13C              IPCC_C1SCR_CH13C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH14C_Pos          (13U)
#define IPCC_C1SCR_CH14C_Msk          (0x1U << IPCC_C1SCR_CH14C_Pos)          /*!< 0x00002000 */
#define IPCC_C1SCR_CH14C              IPCC_C1SCR_CH14C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH15C_Pos          (14U)
#define IPCC_C1SCR_CH15C_Msk          (0x1U << IPCC_C1SCR_CH15C_Pos)          /*!< 0x00004000 */
#define IPCC_C1SCR_CH15C              IPCC_C1SCR_CH15C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH16C_Pos          (15U)
#define IPCC_C1SCR_CH16C_Msk          (0x1U << IPCC_C1SCR_CH16C_Pos)          /*!< 0x00008000 */
#define IPCC_C1SCR_CH16C              IPCC_C1SCR_CH16C_Msk                    /*!< Processor 1 Receive channel n status clear */
#define IPCC_C1SCR_CH1S_Pos           (16U)
#define IPCC_C1SCR_CH1S_Msk           (0x1U << IPCC_C1SCR_CH1S_Pos)           /*!< 0x00010000 */
#define IPCC_C1SCR_CH1S               IPCC_C1SCR_CH1S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH2S_Pos           (17U)
#define IPCC_C1SCR_CH2S_Msk           (0x1U << IPCC_C1SCR_CH2S_Pos)           /*!< 0x00020000 */
#define IPCC_C1SCR_CH2S               IPCC_C1SCR_CH2S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH3S_Pos           (18U)
#define IPCC_C1SCR_CH3S_Msk           (0x1U << IPCC_C1SCR_CH3S_Pos)           /*!< 0x00040000 */
#define IPCC_C1SCR_CH3S               IPCC_C1SCR_CH3S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH4S_Pos           (19U)
#define IPCC_C1SCR_CH4S_Msk           (0x1U << IPCC_C1SCR_CH4S_Pos)           /*!< 0x00080000 */
#define IPCC_C1SCR_CH4S               IPCC_C1SCR_CH4S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH5S_Pos           (20U)
#define IPCC_C1SCR_CH5S_Msk           (0x1U << IPCC_C1SCR_CH5S_Pos)           /*!< 0x00100000 */
#define IPCC_C1SCR_CH5S               IPCC_C1SCR_CH5S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH6S_Pos           (21U)
#define IPCC_C1SCR_CH6S_Msk           (0x1U << IPCC_C1SCR_CH6S_Pos)           /*!< 0x00200000 */
#define IPCC_C1SCR_CH6S               IPCC_C1SCR_CH6S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH7S_Pos           (22U)
#define IPCC_C1SCR_CH7S_Msk           (0x1U << IPCC_C1SCR_CH7S_Pos)           /*!< 0x00400000 */
#define IPCC_C1SCR_CH7S               IPCC_C1SCR_CH7S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH8S_Pos           (23U)
#define IPCC_C1SCR_CH8S_Msk           (0x1U << IPCC_C1SCR_CH8S_Pos)           /*!< 0x00800000 */
#define IPCC_C1SCR_CH8S               IPCC_C1SCR_CH8S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH9S_Pos           (24U)
#define IPCC_C1SCR_CH9S_Msk           (0x1U << IPCC_C1SCR_CH9S_Pos)           /*!< 0x01000000 */
#define IPCC_C1SCR_CH9S               IPCC_C1SCR_CH9S_Msk                     /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH10S_Pos          (25U)
#define IPCC_C1SCR_CH10S_Msk          (0x1U << IPCC_C1SCR_CH10S_Pos)          /*!< 0x02000000 */
#define IPCC_C1SCR_CH10S              IPCC_C1SCR_CH10S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH11S_Pos          (26U)
#define IPCC_C1SCR_CH11S_Msk          (0x1U << IPCC_C1SCR_CH11S_Pos)          /*!< 0x04000000 */
#define IPCC_C1SCR_CH11S              IPCC_C1SCR_CH11S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH12S_Pos          (27U)
#define IPCC_C1SCR_CH12S_Msk          (0x1U << IPCC_C1SCR_CH12S_Pos)          /*!< 0x08000000 */
#define IPCC_C1SCR_CH12S              IPCC_C1SCR_CH12S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH13S_Pos          (28U)
#define IPCC_C1SCR_CH13S_Msk          (0x1U << IPCC_C1SCR_CH13S_Pos)          /*!< 0x10000000 */
#define IPCC_C1SCR_CH13S              IPCC_C1SCR_CH13S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH14S_Pos          (29U)
#define IPCC_C1SCR_CH14S_Msk          (0x1U << IPCC_C1SCR_CH14S_Pos)          /*!< 0x20000000 */
#define IPCC_C1SCR_CH14S              IPCC_C1SCR_CH14S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH15S_Pos          (30U)
#define IPCC_C1SCR_CH15S_Msk          (0x1U << IPCC_C1SCR_CH15S_Pos)          /*!< 0x40000000 */
#define IPCC_C1SCR_CH15S              IPCC_C1SCR_CH15S_Msk                    /*!< Processor 1 transmit channel n status set */
#define IPCC_C1SCR_CH16S_Pos          (31U)
#define IPCC_C1SCR_CH16S_Msk          (0x1U << IPCC_C1SCR_CH16S_Pos)          /*!< 0x80000000 */
#define IPCC_C1SCR_CH16S              IPCC_C1SCR_CH16S_Msk                    /*!< Processor 1 transmit channel n status set */

/****************  Bit definition for IPCC_C1TOC2SR register  *****************/
#define IPCC_C1TOC2SR_CH1F_Pos        (0U)
#define IPCC_C1TOC2SR_CH1F_Msk        (0x1U << IPCC_C1TOC2SR_CH1F_Pos)        /*!< 0x00000001 */
#define IPCC_C1TOC2SR_CH1F            IPCC_C1TOC2SR_CH1F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH2F_Pos        (1U)
#define IPCC_C1TOC2SR_CH2F_Msk        (0x1U << IPCC_C1TOC2SR_CH2F_Pos)        /*!< 0x00000002 */
#define IPCC_C1TOC2SR_CH2F            IPCC_C1TOC2SR_CH2F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH3F_Pos        (2U)
#define IPCC_C1TOC2SR_CH3F_Msk        (0x1U << IPCC_C1TOC2SR_CH3F_Pos)        /*!< 0x00000004 */
#define IPCC_C1TOC2SR_CH3F            IPCC_C1TOC2SR_CH3F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH4F_Pos        (3U)
#define IPCC_C1TOC2SR_CH4F_Msk        (0x1U << IPCC_C1TOC2SR_CH4F_Pos)        /*!< 0x00000008 */
#define IPCC_C1TOC2SR_CH4F            IPCC_C1TOC2SR_CH4F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH5F_Pos        (4U)
#define IPCC_C1TOC2SR_CH5F_Msk        (0x1U << IPCC_C1TOC2SR_CH5F_Pos)        /*!< 0x00000010 */
#define IPCC_C1TOC2SR_CH5F            IPCC_C1TOC2SR_CH5F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH6F_Pos        (5U)
#define IPCC_C1TOC2SR_CH6F_Msk        (0x1U << IPCC_C1TOC2SR_CH6F_Pos)        /*!< 0x00000020 */
#define IPCC_C1TOC2SR_CH6F            IPCC_C1TOC2SR_CH6F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH7F_Pos        (6U)
#define IPCC_C1TOC2SR_CH7F_Msk        (0x1U << IPCC_C1TOC2SR_CH7F_Pos)        /*!< 0x00000040 */
#define IPCC_C1TOC2SR_CH7F            IPCC_C1TOC2SR_CH7F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH8F_Pos        (7U)
#define IPCC_C1TOC2SR_CH8F_Msk        (0x1U << IPCC_C1TOC2SR_CH8F_Pos)        /*!< 0x00000080 */
#define IPCC_C1TOC2SR_CH8F            IPCC_C1TOC2SR_CH8F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH9F_Pos        (8U)
#define IPCC_C1TOC2SR_CH9F_Msk        (0x1U << IPCC_C1TOC2SR_CH9F_Pos)        /*!< 0x00000100 */
#define IPCC_C1TOC2SR_CH9F            IPCC_C1TOC2SR_CH9F_Msk                  /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH10F_Pos       (9U)
#define IPCC_C1TOC2SR_CH10F_Msk       (0x1U << IPCC_C1TOC2SR_CH10F_Pos)       /*!< 0x00000200 */
#define IPCC_C1TOC2SR_CH10F           IPCC_C1TOC2SR_CH10F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH11F_Pos       (10U)
#define IPCC_C1TOC2SR_CH11F_Msk       (0x1U << IPCC_C1TOC2SR_CH11F_Pos)       /*!< 0x00000400 */
#define IPCC_C1TOC2SR_CH11F           IPCC_C1TOC2SR_CH11F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH12F_Pos       (11U)
#define IPCC_C1TOC2SR_CH12F_Msk       (0x1U << IPCC_C1TOC2SR_CH12F_Pos)       /*!< 0x00000800 */
#define IPCC_C1TOC2SR_CH12F           IPCC_C1TOC2SR_CH12F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH13F_Pos       (12U)
#define IPCC_C1TOC2SR_CH13F_Msk       (0x1U << IPCC_C1TOC2SR_CH13F_Pos)       /*!< 0x00001000 */
#define IPCC_C1TOC2SR_CH13F           IPCC_C1TOC2SR_CH13F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH14F_Pos       (13U)
#define IPCC_C1TOC2SR_CH14F_Msk       (0x1U << IPCC_C1TOC2SR_CH14F_Pos)       /*!< 0x00002000 */
#define IPCC_C1TOC2SR_CH14F           IPCC_C1TOC2SR_CH14F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH15F_Pos       (14U)
#define IPCC_C1TOC2SR_CH15F_Msk       (0x1U << IPCC_C1TOC2SR_CH15F_Pos)       /*!< 0x00004000 */
#define IPCC_C1TOC2SR_CH15F           IPCC_C1TOC2SR_CH15F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */
#define IPCC_C1TOC2SR_CH16F_Pos       (15U)
#define IPCC_C1TOC2SR_CH16F_Msk       (0x1U << IPCC_C1TOC2SR_CH16F_Pos)       /*!< 0x00008000 */
#define IPCC_C1TOC2SR_CH16F           IPCC_C1TOC2SR_CH16F_Msk                 /*!< Processor 1 transmit to processor 2 receive channel n status flag before masking */

/******************  Bit definition for IPCC_C2CR register  *******************/
#define IPCC_C2CR_RXOIE_Pos           (0U)
#define IPCC_C2CR_RXOIE_Msk           (0x1U << IPCC_C2CR_RXOIE_Pos)           /*!< 0x00000001 */
#define IPCC_C2CR_RXOIE               IPCC_C2CR_RXOIE_Msk                     /*!< Processor 2 non-secure Receive channel occupied interrupt enable */
#define IPCC_C2CR_SECRXOIE_Pos        (1U)
#define IPCC_C2CR_SECRXOIE_Msk        (0x1U << IPCC_C2CR_SECRXOIE_Pos)        /*!< 0x00000002 */
#define IPCC_C2CR_SECRXOIE            IPCC_C2CR_SECRXOIE_Msk                  /*!< Processor 2 secure Receive channel occupied interrupt enable */
#define IPCC_C2CR_TXFIE_Pos           (16U)
#define IPCC_C2CR_TXFIE_Msk           (0x1U << IPCC_C2CR_TXFIE_Pos)           /*!< 0x00010000 */
#define IPCC_C2CR_TXFIE               IPCC_C2CR_TXFIE_Msk                     /*!< Processor 2 non-secure Transmit channel free interrupt enable */
#define IPCC_C2CR_SECTXFIE_Pos        (17U)
#define IPCC_C2CR_SECTXFIE_Msk        (0x1U << IPCC_C2CR_SECTXFIE_Pos)        /*!< 0x00020000 */
#define IPCC_C2CR_SECTXFIE            IPCC_C2CR_SECTXFIE_Msk                  /*!< Processor 2 secure Transmit channel free interrupt enable */

/******************  Bit definition for IPCC_C2MR register  *******************/
#define IPCC_C2MR_CH1OM_Pos           (0U)
#define IPCC_C2MR_CH1OM_Msk           (0x1U << IPCC_C2MR_CH1OM_Pos)           /*!< 0x00000001 */
#define IPCC_C2MR_CH1OM               IPCC_C2MR_CH1OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH2OM_Pos           (1U)
#define IPCC_C2MR_CH2OM_Msk           (0x1U << IPCC_C2MR_CH2OM_Pos)           /*!< 0x00000002 */
#define IPCC_C2MR_CH2OM               IPCC_C2MR_CH2OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH3OM_Pos           (2U)
#define IPCC_C2MR_CH3OM_Msk           (0x1U << IPCC_C2MR_CH3OM_Pos)           /*!< 0x00000004 */
#define IPCC_C2MR_CH3OM               IPCC_C2MR_CH3OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH4OM_Pos           (3U)
#define IPCC_C2MR_CH4OM_Msk           (0x1U << IPCC_C2MR_CH4OM_Pos)           /*!< 0x00000008 */
#define IPCC_C2MR_CH4OM               IPCC_C2MR_CH4OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH5OM_Pos           (4U)
#define IPCC_C2MR_CH5OM_Msk           (0x1U << IPCC_C2MR_CH5OM_Pos)           /*!< 0x00000010 */
#define IPCC_C2MR_CH5OM               IPCC_C2MR_CH5OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH6OM_Pos           (5U)
#define IPCC_C2MR_CH6OM_Msk           (0x1U << IPCC_C2MR_CH6OM_Pos)           /*!< 0x00000020 */
#define IPCC_C2MR_CH6OM               IPCC_C2MR_CH6OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH7OM_Pos           (6U)
#define IPCC_C2MR_CH7OM_Msk           (0x1U << IPCC_C2MR_CH7OM_Pos)           /*!< 0x00000040 */
#define IPCC_C2MR_CH7OM               IPCC_C2MR_CH7OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH8OM_Pos           (7U)
#define IPCC_C2MR_CH8OM_Msk           (0x1U << IPCC_C2MR_CH8OM_Pos)           /*!< 0x00000080 */
#define IPCC_C2MR_CH8OM               IPCC_C2MR_CH8OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH9OM_Pos           (8U)
#define IPCC_C2MR_CH9OM_Msk           (0x1U << IPCC_C2MR_CH9OM_Pos)           /*!< 0x00000100 */
#define IPCC_C2MR_CH9OM               IPCC_C2MR_CH9OM_Msk                     /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH10OM_Pos          (9U)
#define IPCC_C2MR_CH10OM_Msk          (0x1U << IPCC_C2MR_CH10OM_Pos)          /*!< 0x00000200 */
#define IPCC_C2MR_CH10OM              IPCC_C2MR_CH10OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH11OM_Pos          (10U)
#define IPCC_C2MR_CH11OM_Msk          (0x1U << IPCC_C2MR_CH11OM_Pos)          /*!< 0x00000400 */
#define IPCC_C2MR_CH11OM              IPCC_C2MR_CH11OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH12OM_Pos          (11U)
#define IPCC_C2MR_CH12OM_Msk          (0x1U << IPCC_C2MR_CH12OM_Pos)          /*!< 0x00000800 */
#define IPCC_C2MR_CH12OM              IPCC_C2MR_CH12OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH13OM_Pos          (12U)
#define IPCC_C2MR_CH13OM_Msk          (0x1U << IPCC_C2MR_CH13OM_Pos)          /*!< 0x00001000 */
#define IPCC_C2MR_CH13OM              IPCC_C2MR_CH13OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH14OM_Pos          (13U)
#define IPCC_C2MR_CH14OM_Msk          (0x1U << IPCC_C2MR_CH14OM_Pos)          /*!< 0x00002000 */
#define IPCC_C2MR_CH14OM              IPCC_C2MR_CH14OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH15OM_Pos          (14U)
#define IPCC_C2MR_CH15OM_Msk          (0x1U << IPCC_C2MR_CH15OM_Pos)          /*!< 0x00004000 */
#define IPCC_C2MR_CH15OM              IPCC_C2MR_CH15OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH16OM_Pos          (15U)
#define IPCC_C2MR_CH16OM_Msk          (0x1U << IPCC_C2MR_CH16OM_Pos)          /*!< 0x00008000 */
#define IPCC_C2MR_CH16OM              IPCC_C2MR_CH16OM_Msk                    /*!< Processor 2 receive channel n occupied interrupt mask */
#define IPCC_C2MR_CH1FM_Pos           (16U)
#define IPCC_C2MR_CH1FM_Msk           (0x1U << IPCC_C2MR_CH1FM_Pos)           /*!< 0x00010000 */
#define IPCC_C2MR_CH1FM               IPCC_C2MR_CH1FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH2FM_Pos           (17U)
#define IPCC_C2MR_CH2FM_Msk           (0x1U << IPCC_C2MR_CH2FM_Pos)           /*!< 0x00020000 */
#define IPCC_C2MR_CH2FM               IPCC_C2MR_CH2FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH3FM_Pos           (18U)
#define IPCC_C2MR_CH3FM_Msk           (0x1U << IPCC_C2MR_CH3FM_Pos)           /*!< 0x00040000 */
#define IPCC_C2MR_CH3FM               IPCC_C2MR_CH3FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH4FM_Pos           (19U)
#define IPCC_C2MR_CH4FM_Msk           (0x1U << IPCC_C2MR_CH4FM_Pos)           /*!< 0x00080000 */
#define IPCC_C2MR_CH4FM               IPCC_C2MR_CH4FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH5FM_Pos           (20U)
#define IPCC_C2MR_CH5FM_Msk           (0x1U << IPCC_C2MR_CH5FM_Pos)           /*!< 0x00100000 */
#define IPCC_C2MR_CH5FM               IPCC_C2MR_CH5FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH6FM_Pos           (21U)
#define IPCC_C2MR_CH6FM_Msk           (0x1U << IPCC_C2MR_CH6FM_Pos)           /*!< 0x00200000 */
#define IPCC_C2MR_CH6FM               IPCC_C2MR_CH6FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH7FM_Pos           (22U)
#define IPCC_C2MR_CH7FM_Msk           (0x1U << IPCC_C2MR_CH7FM_Pos)           /*!< 0x00400000 */
#define IPCC_C2MR_CH7FM               IPCC_C2MR_CH7FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH8FM_Pos           (23U)
#define IPCC_C2MR_CH8FM_Msk           (0x1U << IPCC_C2MR_CH8FM_Pos)           /*!< 0x00800000 */
#define IPCC_C2MR_CH8FM               IPCC_C2MR_CH8FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH9FM_Pos           (24U)
#define IPCC_C2MR_CH9FM_Msk           (0x1U << IPCC_C2MR_CH9FM_Pos)           /*!< 0x01000000 */
#define IPCC_C2MR_CH9FM               IPCC_C2MR_CH9FM_Msk                     /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH10FM_Pos          (25U)
#define IPCC_C2MR_CH10FM_Msk          (0x1U << IPCC_C2MR_CH10FM_Pos)          /*!< 0x02000000 */
#define IPCC_C2MR_CH10FM              IPCC_C2MR_CH10FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH11FM_Pos          (26U)
#define IPCC_C2MR_CH11FM_Msk          (0x1U << IPCC_C2MR_CH11FM_Pos)          /*!< 0x04000000 */
#define IPCC_C2MR_CH11FM              IPCC_C2MR_CH11FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH12FM_Pos          (27U)
#define IPCC_C2MR_CH12FM_Msk          (0x1U << IPCC_C2MR_CH12FM_Pos)          /*!< 0x08000000 */
#define IPCC_C2MR_CH12FM              IPCC_C2MR_CH12FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH13FM_Pos          (28U)
#define IPCC_C2MR_CH13FM_Msk          (0x1U << IPCC_C2MR_CH13FM_Pos)          /*!< 0x10000000 */
#define IPCC_C2MR_CH13FM              IPCC_C2MR_CH13FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH14FM_Pos          (29U)
#define IPCC_C2MR_CH14FM_Msk          (0x1U << IPCC_C2MR_CH14FM_Pos)          /*!< 0x20000000 */
#define IPCC_C2MR_CH14FM              IPCC_C2MR_CH14FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH15FM_Pos          (30U)
#define IPCC_C2MR_CH15FM_Msk          (0x1U << IPCC_C2MR_CH15FM_Pos)          /*!< 0x40000000 */
#define IPCC_C2MR_CH15FM              IPCC_C2MR_CH15FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */
#define IPCC_C2MR_CH16FM_Pos          (31U)
#define IPCC_C2MR_CH16FM_Msk          (0x1U << IPCC_C2MR_CH16FM_Pos)          /*!< 0x80000000 */
#define IPCC_C2MR_CH16FM              IPCC_C2MR_CH16FM_Msk                    /*!< Processor 2 Transmit channel n free interrupt mask */

/******************  Bit definition for IPCC_C2SCR register  ******************/
#define IPCC_C2SCR_CH1C_Pos           (0U)
#define IPCC_C2SCR_CH1C_Msk           (0x1U << IPCC_C2SCR_CH1C_Pos)           /*!< 0x00000001 */
#define IPCC_C2SCR_CH1C               IPCC_C2SCR_CH1C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH2C_Pos           (1U)
#define IPCC_C2SCR_CH2C_Msk           (0x1U << IPCC_C2SCR_CH2C_Pos)           /*!< 0x00000002 */
#define IPCC_C2SCR_CH2C               IPCC_C2SCR_CH2C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH3C_Pos           (2U)
#define IPCC_C2SCR_CH3C_Msk           (0x1U << IPCC_C2SCR_CH3C_Pos)           /*!< 0x00000004 */
#define IPCC_C2SCR_CH3C               IPCC_C2SCR_CH3C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH4C_Pos           (3U)
#define IPCC_C2SCR_CH4C_Msk           (0x1U << IPCC_C2SCR_CH4C_Pos)           /*!< 0x00000008 */
#define IPCC_C2SCR_CH4C               IPCC_C2SCR_CH4C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH5C_Pos           (4U)
#define IPCC_C2SCR_CH5C_Msk           (0x1U << IPCC_C2SCR_CH5C_Pos)           /*!< 0x00000010 */
#define IPCC_C2SCR_CH5C               IPCC_C2SCR_CH5C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH6C_Pos           (5U)
#define IPCC_C2SCR_CH6C_Msk           (0x1U << IPCC_C2SCR_CH6C_Pos)           /*!< 0x00000020 */
#define IPCC_C2SCR_CH6C               IPCC_C2SCR_CH6C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH7C_Pos           (6U)
#define IPCC_C2SCR_CH7C_Msk           (0x1U << IPCC_C2SCR_CH7C_Pos)           /*!< 0x00000040 */
#define IPCC_C2SCR_CH7C               IPCC_C2SCR_CH7C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH8C_Pos           (7U)
#define IPCC_C2SCR_CH8C_Msk           (0x1U << IPCC_C2SCR_CH8C_Pos)           /*!< 0x00000080 */
#define IPCC_C2SCR_CH8C               IPCC_C2SCR_CH8C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH9C_Pos           (8U)
#define IPCC_C2SCR_CH9C_Msk           (0x1U << IPCC_C2SCR_CH9C_Pos)           /*!< 0x00000100 */
#define IPCC_C2SCR_CH9C               IPCC_C2SCR_CH9C_Msk                     /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH10C_Pos          (9U)
#define IPCC_C2SCR_CH10C_Msk          (0x1U << IPCC_C2SCR_CH10C_Pos)          /*!< 0x00000200 */
#define IPCC_C2SCR_CH10C              IPCC_C2SCR_CH10C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH11C_Pos          (10U)
#define IPCC_C2SCR_CH11C_Msk          (0x1U << IPCC_C2SCR_CH11C_Pos)          /*!< 0x00000400 */
#define IPCC_C2SCR_CH11C              IPCC_C2SCR_CH11C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH12C_Pos          (11U)
#define IPCC_C2SCR_CH12C_Msk          (0x1U << IPCC_C2SCR_CH12C_Pos)          /*!< 0x00000800 */
#define IPCC_C2SCR_CH12C              IPCC_C2SCR_CH12C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH13C_Pos          (12U)
#define IPCC_C2SCR_CH13C_Msk          (0x1U << IPCC_C2SCR_CH13C_Pos)          /*!< 0x00001000 */
#define IPCC_C2SCR_CH13C              IPCC_C2SCR_CH13C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH14C_Pos          (13U)
#define IPCC_C2SCR_CH14C_Msk          (0x1U << IPCC_C2SCR_CH14C_Pos)          /*!< 0x00002000 */
#define IPCC_C2SCR_CH14C              IPCC_C2SCR_CH14C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH15C_Pos          (14U)
#define IPCC_C2SCR_CH15C_Msk          (0x1U << IPCC_C2SCR_CH15C_Pos)          /*!< 0x00004000 */
#define IPCC_C2SCR_CH15C              IPCC_C2SCR_CH15C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH16C_Pos          (15U)
#define IPCC_C2SCR_CH16C_Msk          (0x1U << IPCC_C2SCR_CH16C_Pos)          /*!< 0x00008000 */
#define IPCC_C2SCR_CH16C              IPCC_C2SCR_CH16C_Msk                    /*!< Processor 2 receive channel n status clear */
#define IPCC_C2SCR_CH1S_Pos           (16U)
#define IPCC_C2SCR_CH1S_Msk           (0x1U << IPCC_C2SCR_CH1S_Pos)           /*!< 0x00010000 */
#define IPCC_C2SCR_CH1S               IPCC_C2SCR_CH1S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH2S_Pos           (17U)
#define IPCC_C2SCR_CH2S_Msk           (0x1U << IPCC_C2SCR_CH2S_Pos)           /*!< 0x00020000 */
#define IPCC_C2SCR_CH2S               IPCC_C2SCR_CH2S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH3S_Pos           (18U)
#define IPCC_C2SCR_CH3S_Msk           (0x1U << IPCC_C2SCR_CH3S_Pos)           /*!< 0x00040000 */
#define IPCC_C2SCR_CH3S               IPCC_C2SCR_CH3S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH4S_Pos           (19U)
#define IPCC_C2SCR_CH4S_Msk           (0x1U << IPCC_C2SCR_CH4S_Pos)           /*!< 0x00080000 */
#define IPCC_C2SCR_CH4S               IPCC_C2SCR_CH4S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH5S_Pos           (20U)
#define IPCC_C2SCR_CH5S_Msk           (0x1U << IPCC_C2SCR_CH5S_Pos)           /*!< 0x00100000 */
#define IPCC_C2SCR_CH5S               IPCC_C2SCR_CH5S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH6S_Pos           (21U)
#define IPCC_C2SCR_CH6S_Msk           (0x1U << IPCC_C2SCR_CH6S_Pos)           /*!< 0x00200000 */
#define IPCC_C2SCR_CH6S               IPCC_C2SCR_CH6S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH7S_Pos           (22U)
#define IPCC_C2SCR_CH7S_Msk           (0x1U << IPCC_C2SCR_CH7S_Pos)           /*!< 0x00400000 */
#define IPCC_C2SCR_CH7S               IPCC_C2SCR_CH7S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH8S_Pos           (23U)
#define IPCC_C2SCR_CH8S_Msk           (0x1U << IPCC_C2SCR_CH8S_Pos)           /*!< 0x00800000 */
#define IPCC_C2SCR_CH8S               IPCC_C2SCR_CH8S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH9S_Pos           (24U)
#define IPCC_C2SCR_CH9S_Msk           (0x1U << IPCC_C2SCR_CH9S_Pos)           /*!< 0x01000000 */
#define IPCC_C2SCR_CH9S               IPCC_C2SCR_CH9S_Msk                     /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH10S_Pos          (25U)
#define IPCC_C2SCR_CH10S_Msk          (0x1U << IPCC_C2SCR_CH10S_Pos)          /*!< 0x02000000 */
#define IPCC_C2SCR_CH10S              IPCC_C2SCR_CH10S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH11S_Pos          (26U)
#define IPCC_C2SCR_CH11S_Msk          (0x1U << IPCC_C2SCR_CH11S_Pos)          /*!< 0x04000000 */
#define IPCC_C2SCR_CH11S              IPCC_C2SCR_CH11S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH12S_Pos          (27U)
#define IPCC_C2SCR_CH12S_Msk          (0x1U << IPCC_C2SCR_CH12S_Pos)          /*!< 0x08000000 */
#define IPCC_C2SCR_CH12S              IPCC_C2SCR_CH12S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH13S_Pos          (28U)
#define IPCC_C2SCR_CH13S_Msk          (0x1U << IPCC_C2SCR_CH13S_Pos)          /*!< 0x10000000 */
#define IPCC_C2SCR_CH13S              IPCC_C2SCR_CH13S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH14S_Pos          (29U)
#define IPCC_C2SCR_CH14S_Msk          (0x1U << IPCC_C2SCR_CH14S_Pos)          /*!< 0x20000000 */
#define IPCC_C2SCR_CH14S              IPCC_C2SCR_CH14S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH15S_Pos          (30U)
#define IPCC_C2SCR_CH15S_Msk          (0x1U << IPCC_C2SCR_CH15S_Pos)          /*!< 0x40000000 */
#define IPCC_C2SCR_CH15S              IPCC_C2SCR_CH15S_Msk                    /*!< Processor 2 transmit channel n status set */
#define IPCC_C2SCR_CH16S_Pos          (31U)
#define IPCC_C2SCR_CH16S_Msk          (0x1U << IPCC_C2SCR_CH16S_Pos)          /*!< 0x80000000 */
#define IPCC_C2SCR_CH16S              IPCC_C2SCR_CH16S_Msk                    /*!< Processor 2 transmit channel n status set */

/****************  Bit definition for IPCC_C2TOC1SR register  *****************/
#define IPCC_C2TOC1SR_CH1F_Pos        (0U)
#define IPCC_C2TOC1SR_CH1F_Msk        (0x1U << IPCC_C2TOC1SR_CH1F_Pos)        /*!< 0x00000001 */
#define IPCC_C2TOC1SR_CH1F            IPCC_C2TOC1SR_CH1F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH2F_Pos        (1U)
#define IPCC_C2TOC1SR_CH2F_Msk        (0x1U << IPCC_C2TOC1SR_CH2F_Pos)        /*!< 0x00000002 */
#define IPCC_C2TOC1SR_CH2F            IPCC_C2TOC1SR_CH2F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH3F_Pos        (2U)
#define IPCC_C2TOC1SR_CH3F_Msk        (0x1U << IPCC_C2TOC1SR_CH3F_Pos)        /*!< 0x00000004 */
#define IPCC_C2TOC1SR_CH3F            IPCC_C2TOC1SR_CH3F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH4F_Pos        (3U)
#define IPCC_C2TOC1SR_CH4F_Msk        (0x1U << IPCC_C2TOC1SR_CH4F_Pos)        /*!< 0x00000008 */
#define IPCC_C2TOC1SR_CH4F            IPCC_C2TOC1SR_CH4F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH5F_Pos        (4U)
#define IPCC_C2TOC1SR_CH5F_Msk        (0x1U << IPCC_C2TOC1SR_CH5F_Pos)        /*!< 0x00000010 */
#define IPCC_C2TOC1SR_CH5F            IPCC_C2TOC1SR_CH5F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH6F_Pos        (5U)
#define IPCC_C2TOC1SR_CH6F_Msk        (0x1U << IPCC_C2TOC1SR_CH6F_Pos)        /*!< 0x00000020 */
#define IPCC_C2TOC1SR_CH6F            IPCC_C2TOC1SR_CH6F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH7F_Pos        (6U)
#define IPCC_C2TOC1SR_CH7F_Msk        (0x1U << IPCC_C2TOC1SR_CH7F_Pos)        /*!< 0x00000040 */
#define IPCC_C2TOC1SR_CH7F            IPCC_C2TOC1SR_CH7F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH8F_Pos        (7U)
#define IPCC_C2TOC1SR_CH8F_Msk        (0x1U << IPCC_C2TOC1SR_CH8F_Pos)        /*!< 0x00000080 */
#define IPCC_C2TOC1SR_CH8F            IPCC_C2TOC1SR_CH8F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH9F_Pos        (8U)
#define IPCC_C2TOC1SR_CH9F_Msk        (0x1U << IPCC_C2TOC1SR_CH9F_Pos)        /*!< 0x00000100 */
#define IPCC_C2TOC1SR_CH9F            IPCC_C2TOC1SR_CH9F_Msk                  /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH10F_Pos       (9U)
#define IPCC_C2TOC1SR_CH10F_Msk       (0x1U << IPCC_C2TOC1SR_CH10F_Pos)       /*!< 0x00000200 */
#define IPCC_C2TOC1SR_CH10F           IPCC_C2TOC1SR_CH10F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH11F_Pos       (10U)
#define IPCC_C2TOC1SR_CH11F_Msk       (0x1U << IPCC_C2TOC1SR_CH11F_Pos)       /*!< 0x00000400 */
#define IPCC_C2TOC1SR_CH11F           IPCC_C2TOC1SR_CH11F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH12F_Pos       (11U)
#define IPCC_C2TOC1SR_CH12F_Msk       (0x1U << IPCC_C2TOC1SR_CH12F_Pos)       /*!< 0x00000800 */
#define IPCC_C2TOC1SR_CH12F           IPCC_C2TOC1SR_CH12F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH13F_Pos       (12U)
#define IPCC_C2TOC1SR_CH13F_Msk       (0x1U << IPCC_C2TOC1SR_CH13F_Pos)       /*!< 0x00001000 */
#define IPCC_C2TOC1SR_CH13F           IPCC_C2TOC1SR_CH13F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH14F_Pos       (13U)
#define IPCC_C2TOC1SR_CH14F_Msk       (0x1U << IPCC_C2TOC1SR_CH14F_Pos)       /*!< 0x00002000 */
#define IPCC_C2TOC1SR_CH14F           IPCC_C2TOC1SR_CH14F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH15F_Pos       (14U)
#define IPCC_C2TOC1SR_CH15F_Msk       (0x1U << IPCC_C2TOC1SR_CH15F_Pos)       /*!< 0x00004000 */
#define IPCC_C2TOC1SR_CH15F           IPCC_C2TOC1SR_CH15F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */
#define IPCC_C2TOC1SR_CH16F_Pos       (15U)
#define IPCC_C2TOC1SR_CH16F_Msk       (0x1U << IPCC_C2TOC1SR_CH16F_Pos)       /*!< 0x00008000 */
#define IPCC_C2TOC1SR_CH16F           IPCC_C2TOC1SR_CH16F_Msk                 /*!< Processor 2 transmit to processor 1 receive channel n status flag before masking */

/****************  Bit definition for IPCC_C1SECCFGR register  ****************/
#define IPCC_C1SECCFGR_CH1SEC_Pos     (0U)
#define IPCC_C1SECCFGR_CH1SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH1SEC_Pos)     /*!< 0x00000001 */
#define IPCC_C1SECCFGR_CH1SEC         IPCC_C1SECCFGR_CH1SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH2SEC_Pos     (1U)
#define IPCC_C1SECCFGR_CH2SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH2SEC_Pos)     /*!< 0x00000002 */
#define IPCC_C1SECCFGR_CH2SEC         IPCC_C1SECCFGR_CH2SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH3SEC_Pos     (2U)
#define IPCC_C1SECCFGR_CH3SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH3SEC_Pos)     /*!< 0x00000004 */
#define IPCC_C1SECCFGR_CH3SEC         IPCC_C1SECCFGR_CH3SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH4SEC_Pos     (3U)
#define IPCC_C1SECCFGR_CH4SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH4SEC_Pos)     /*!< 0x00000008 */
#define IPCC_C1SECCFGR_CH4SEC         IPCC_C1SECCFGR_CH4SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH5SEC_Pos     (4U)
#define IPCC_C1SECCFGR_CH5SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH5SEC_Pos)     /*!< 0x00000010 */
#define IPCC_C1SECCFGR_CH5SEC         IPCC_C1SECCFGR_CH5SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH6SEC_Pos     (5U)
#define IPCC_C1SECCFGR_CH6SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH6SEC_Pos)     /*!< 0x00000020 */
#define IPCC_C1SECCFGR_CH6SEC         IPCC_C1SECCFGR_CH6SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH7SEC_Pos     (6U)
#define IPCC_C1SECCFGR_CH7SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH7SEC_Pos)     /*!< 0x00000040 */
#define IPCC_C1SECCFGR_CH7SEC         IPCC_C1SECCFGR_CH7SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH8SEC_Pos     (7U)
#define IPCC_C1SECCFGR_CH8SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH8SEC_Pos)     /*!< 0x00000080 */
#define IPCC_C1SECCFGR_CH8SEC         IPCC_C1SECCFGR_CH8SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH9SEC_Pos     (8U)
#define IPCC_C1SECCFGR_CH9SEC_Msk     (0x1U << IPCC_C1SECCFGR_CH9SEC_Pos)     /*!< 0x00000100 */
#define IPCC_C1SECCFGR_CH9SEC         IPCC_C1SECCFGR_CH9SEC_Msk               /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH10SEC_Pos    (9U)
#define IPCC_C1SECCFGR_CH10SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH10SEC_Pos)    /*!< 0x00000200 */
#define IPCC_C1SECCFGR_CH10SEC        IPCC_C1SECCFGR_CH10SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH11SEC_Pos    (10U)
#define IPCC_C1SECCFGR_CH11SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH11SEC_Pos)    /*!< 0x00000400 */
#define IPCC_C1SECCFGR_CH11SEC        IPCC_C1SECCFGR_CH11SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH12SEC_Pos    (11U)
#define IPCC_C1SECCFGR_CH12SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH12SEC_Pos)    /*!< 0x00000800 */
#define IPCC_C1SECCFGR_CH12SEC        IPCC_C1SECCFGR_CH12SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH13SEC_Pos    (12U)
#define IPCC_C1SECCFGR_CH13SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH13SEC_Pos)    /*!< 0x00001000 */
#define IPCC_C1SECCFGR_CH13SEC        IPCC_C1SECCFGR_CH13SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH14SEC_Pos    (13U)
#define IPCC_C1SECCFGR_CH14SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH14SEC_Pos)    /*!< 0x00002000 */
#define IPCC_C1SECCFGR_CH14SEC        IPCC_C1SECCFGR_CH14SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH15SEC_Pos    (14U)
#define IPCC_C1SECCFGR_CH15SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH15SEC_Pos)    /*!< 0x00004000 */
#define IPCC_C1SECCFGR_CH15SEC        IPCC_C1SECCFGR_CH15SEC_Msk              /*!< processor 1 channel n security enable */
#define IPCC_C1SECCFGR_CH16SEC_Pos    (15U)
#define IPCC_C1SECCFGR_CH16SEC_Msk    (0x1U << IPCC_C1SECCFGR_CH16SEC_Pos)    /*!< 0x00008000 */
#define IPCC_C1SECCFGR_CH16SEC        IPCC_C1SECCFGR_CH16SEC_Msk              /*!< processor 1 channel n security enable */

/***************  Bit definition for IPCC_C1PRIVCFGR register  ****************/
#define IPCC_C1PRIVCFGR_CH1PRIV_Pos   (0U)
#define IPCC_C1PRIVCFGR_CH1PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH1PRIV_Pos)   /*!< 0x00000001 */
#define IPCC_C1PRIVCFGR_CH1PRIV       IPCC_C1PRIVCFGR_CH1PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH2PRIV_Pos   (1U)
#define IPCC_C1PRIVCFGR_CH2PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH2PRIV_Pos)   /*!< 0x00000002 */
#define IPCC_C1PRIVCFGR_CH2PRIV       IPCC_C1PRIVCFGR_CH2PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH3PRIV_Pos   (2U)
#define IPCC_C1PRIVCFGR_CH3PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH3PRIV_Pos)   /*!< 0x00000004 */
#define IPCC_C1PRIVCFGR_CH3PRIV       IPCC_C1PRIVCFGR_CH3PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH4PRIV_Pos   (3U)
#define IPCC_C1PRIVCFGR_CH4PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH4PRIV_Pos)   /*!< 0x00000008 */
#define IPCC_C1PRIVCFGR_CH4PRIV       IPCC_C1PRIVCFGR_CH4PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH5PRIV_Pos   (4U)
#define IPCC_C1PRIVCFGR_CH5PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH5PRIV_Pos)   /*!< 0x00000010 */
#define IPCC_C1PRIVCFGR_CH5PRIV       IPCC_C1PRIVCFGR_CH5PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH6PRIV_Pos   (5U)
#define IPCC_C1PRIVCFGR_CH6PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH6PRIV_Pos)   /*!< 0x00000020 */
#define IPCC_C1PRIVCFGR_CH6PRIV       IPCC_C1PRIVCFGR_CH6PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH7PRIV_Pos   (6U)
#define IPCC_C1PRIVCFGR_CH7PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH7PRIV_Pos)   /*!< 0x00000040 */
#define IPCC_C1PRIVCFGR_CH7PRIV       IPCC_C1PRIVCFGR_CH7PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH8PRIV_Pos   (7U)
#define IPCC_C1PRIVCFGR_CH8PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH8PRIV_Pos)   /*!< 0x00000080 */
#define IPCC_C1PRIVCFGR_CH8PRIV       IPCC_C1PRIVCFGR_CH8PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH9PRIV_Pos   (8U)
#define IPCC_C1PRIVCFGR_CH9PRIV_Msk   (0x1U << IPCC_C1PRIVCFGR_CH9PRIV_Pos)   /*!< 0x00000100 */
#define IPCC_C1PRIVCFGR_CH9PRIV       IPCC_C1PRIVCFGR_CH9PRIV_Msk             /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH10PRIV_Pos  (9U)
#define IPCC_C1PRIVCFGR_CH10PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH10PRIV_Pos)  /*!< 0x00000200 */
#define IPCC_C1PRIVCFGR_CH10PRIV      IPCC_C1PRIVCFGR_CH10PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH11PRIV_Pos  (10U)
#define IPCC_C1PRIVCFGR_CH11PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH11PRIV_Pos)  /*!< 0x00000400 */
#define IPCC_C1PRIVCFGR_CH11PRIV      IPCC_C1PRIVCFGR_CH11PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH12PRIV_Pos  (11U)
#define IPCC_C1PRIVCFGR_CH12PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH12PRIV_Pos)  /*!< 0x00000800 */
#define IPCC_C1PRIVCFGR_CH12PRIV      IPCC_C1PRIVCFGR_CH12PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH13PRIV_Pos  (12U)
#define IPCC_C1PRIVCFGR_CH13PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH13PRIV_Pos)  /*!< 0x00001000 */
#define IPCC_C1PRIVCFGR_CH13PRIV      IPCC_C1PRIVCFGR_CH13PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH14PRIV_Pos  (13U)
#define IPCC_C1PRIVCFGR_CH14PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH14PRIV_Pos)  /*!< 0x00002000 */
#define IPCC_C1PRIVCFGR_CH14PRIV      IPCC_C1PRIVCFGR_CH14PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH15PRIV_Pos  (14U)
#define IPCC_C1PRIVCFGR_CH15PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH15PRIV_Pos)  /*!< 0x00004000 */
#define IPCC_C1PRIVCFGR_CH15PRIV      IPCC_C1PRIVCFGR_CH15PRIV_Msk            /*!< processor 1 channel n privilege enable */
#define IPCC_C1PRIVCFGR_CH16PRIV_Pos  (15U)
#define IPCC_C1PRIVCFGR_CH16PRIV_Msk  (0x1U << IPCC_C1PRIVCFGR_CH16PRIV_Pos)  /*!< 0x00008000 */
#define IPCC_C1PRIVCFGR_CH16PRIV      IPCC_C1PRIVCFGR_CH16PRIV_Msk            /*!< processor 1 channel n privilege enable */

/****************  Bit definition for IPCC_C1CIDCFGR register  ****************/
#define IPCC_C1CIDCFGR_CFEN_Pos       (0U)
#define IPCC_C1CIDCFGR_CFEN_Msk       (0x1U << IPCC_C1CIDCFGR_CFEN_Pos)       /*!< 0x00000001 */
#define IPCC_C1CIDCFGR_CFEN           IPCC_C1CIDCFGR_CFEN_Msk                 /*!< CID filtering enabled for processor 1 */
#define IPCC_C1CIDCFGR_CID_Pos        (4U)
#define IPCC_C1CIDCFGR_CID_Msk        (0xFU << IPCC_C1CIDCFGR_CID_Pos)        /*!< 0x000000F0 */
#define IPCC_C1CIDCFGR_CID            IPCC_C1CIDCFGR_CID_Msk                  /*!< processor 1 CID domain identification */

/****************  Bit definition for IPCC_C2SECCFGR register  ****************/
#define IPCC_C2SECCFGR_CH1SEC_Pos     (0U)
#define IPCC_C2SECCFGR_CH1SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH1SEC_Pos)     /*!< 0x00000001 */
#define IPCC_C2SECCFGR_CH1SEC         IPCC_C2SECCFGR_CH1SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH2SEC_Pos     (1U)
#define IPCC_C2SECCFGR_CH2SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH2SEC_Pos)     /*!< 0x00000002 */
#define IPCC_C2SECCFGR_CH2SEC         IPCC_C2SECCFGR_CH2SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH3SEC_Pos     (2U)
#define IPCC_C2SECCFGR_CH3SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH3SEC_Pos)     /*!< 0x00000004 */
#define IPCC_C2SECCFGR_CH3SEC         IPCC_C2SECCFGR_CH3SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH4SEC_Pos     (3U)
#define IPCC_C2SECCFGR_CH4SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH4SEC_Pos)     /*!< 0x00000008 */
#define IPCC_C2SECCFGR_CH4SEC         IPCC_C2SECCFGR_CH4SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH5SEC_Pos     (4U)
#define IPCC_C2SECCFGR_CH5SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH5SEC_Pos)     /*!< 0x00000010 */
#define IPCC_C2SECCFGR_CH5SEC         IPCC_C2SECCFGR_CH5SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH6SEC_Pos     (5U)
#define IPCC_C2SECCFGR_CH6SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH6SEC_Pos)     /*!< 0x00000020 */
#define IPCC_C2SECCFGR_CH6SEC         IPCC_C2SECCFGR_CH6SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH7SEC_Pos     (6U)
#define IPCC_C2SECCFGR_CH7SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH7SEC_Pos)     /*!< 0x00000040 */
#define IPCC_C2SECCFGR_CH7SEC         IPCC_C2SECCFGR_CH7SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH8SEC_Pos     (7U)
#define IPCC_C2SECCFGR_CH8SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH8SEC_Pos)     /*!< 0x00000080 */
#define IPCC_C2SECCFGR_CH8SEC         IPCC_C2SECCFGR_CH8SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH9SEC_Pos     (8U)
#define IPCC_C2SECCFGR_CH9SEC_Msk     (0x1U << IPCC_C2SECCFGR_CH9SEC_Pos)     /*!< 0x00000100 */
#define IPCC_C2SECCFGR_CH9SEC         IPCC_C2SECCFGR_CH9SEC_Msk               /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH10SEC_Pos    (9U)
#define IPCC_C2SECCFGR_CH10SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH10SEC_Pos)    /*!< 0x00000200 */
#define IPCC_C2SECCFGR_CH10SEC        IPCC_C2SECCFGR_CH10SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH11SEC_Pos    (10U)
#define IPCC_C2SECCFGR_CH11SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH11SEC_Pos)    /*!< 0x00000400 */
#define IPCC_C2SECCFGR_CH11SEC        IPCC_C2SECCFGR_CH11SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH12SEC_Pos    (11U)
#define IPCC_C2SECCFGR_CH12SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH12SEC_Pos)    /*!< 0x00000800 */
#define IPCC_C2SECCFGR_CH12SEC        IPCC_C2SECCFGR_CH12SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH13SEC_Pos    (12U)
#define IPCC_C2SECCFGR_CH13SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH13SEC_Pos)    /*!< 0x00001000 */
#define IPCC_C2SECCFGR_CH13SEC        IPCC_C2SECCFGR_CH13SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH14SEC_Pos    (13U)
#define IPCC_C2SECCFGR_CH14SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH14SEC_Pos)    /*!< 0x00002000 */
#define IPCC_C2SECCFGR_CH14SEC        IPCC_C2SECCFGR_CH14SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH15SEC_Pos    (14U)
#define IPCC_C2SECCFGR_CH15SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH15SEC_Pos)    /*!< 0x00004000 */
#define IPCC_C2SECCFGR_CH15SEC        IPCC_C2SECCFGR_CH15SEC_Msk              /*!< processor 2 channel n security enable */
#define IPCC_C2SECCFGR_CH16SEC_Pos    (15U)
#define IPCC_C2SECCFGR_CH16SEC_Msk    (0x1U << IPCC_C2SECCFGR_CH16SEC_Pos)    /*!< 0x00008000 */
#define IPCC_C2SECCFGR_CH16SEC        IPCC_C2SECCFGR_CH16SEC_Msk              /*!< processor 2 channel n security enable */

/***************  Bit definition for IPCC_C2PRIVCFGR register  ****************/
#define IPCC_C2PRIVCFGR_CH1PRIV_Pos   (0U)
#define IPCC_C2PRIVCFGR_CH1PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH1PRIV_Pos)   /*!< 0x00000001 */
#define IPCC_C2PRIVCFGR_CH1PRIV       IPCC_C2PRIVCFGR_CH1PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH2PRIV_Pos   (1U)
#define IPCC_C2PRIVCFGR_CH2PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH2PRIV_Pos)   /*!< 0x00000002 */
#define IPCC_C2PRIVCFGR_CH2PRIV       IPCC_C2PRIVCFGR_CH2PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH3PRIV_Pos   (2U)
#define IPCC_C2PRIVCFGR_CH3PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH3PRIV_Pos)   /*!< 0x00000004 */
#define IPCC_C2PRIVCFGR_CH3PRIV       IPCC_C2PRIVCFGR_CH3PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH4PRIV_Pos   (3U)
#define IPCC_C2PRIVCFGR_CH4PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH4PRIV_Pos)   /*!< 0x00000008 */
#define IPCC_C2PRIVCFGR_CH4PRIV       IPCC_C2PRIVCFGR_CH4PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH5PRIV_Pos   (4U)
#define IPCC_C2PRIVCFGR_CH5PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH5PRIV_Pos)   /*!< 0x00000010 */
#define IPCC_C2PRIVCFGR_CH5PRIV       IPCC_C2PRIVCFGR_CH5PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH6PRIV_Pos   (5U)
#define IPCC_C2PRIVCFGR_CH6PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH6PRIV_Pos)   /*!< 0x00000020 */
#define IPCC_C2PRIVCFGR_CH6PRIV       IPCC_C2PRIVCFGR_CH6PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH7PRIV_Pos   (6U)
#define IPCC_C2PRIVCFGR_CH7PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH7PRIV_Pos)   /*!< 0x00000040 */
#define IPCC_C2PRIVCFGR_CH7PRIV       IPCC_C2PRIVCFGR_CH7PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH8PRIV_Pos   (7U)
#define IPCC_C2PRIVCFGR_CH8PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH8PRIV_Pos)   /*!< 0x00000080 */
#define IPCC_C2PRIVCFGR_CH8PRIV       IPCC_C2PRIVCFGR_CH8PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH9PRIV_Pos   (8U)
#define IPCC_C2PRIVCFGR_CH9PRIV_Msk   (0x1U << IPCC_C2PRIVCFGR_CH9PRIV_Pos)   /*!< 0x00000100 */
#define IPCC_C2PRIVCFGR_CH9PRIV       IPCC_C2PRIVCFGR_CH9PRIV_Msk             /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH10PRIV_Pos  (9U)
#define IPCC_C2PRIVCFGR_CH10PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH10PRIV_Pos)  /*!< 0x00000200 */
#define IPCC_C2PRIVCFGR_CH10PRIV      IPCC_C2PRIVCFGR_CH10PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH11PRIV_Pos  (10U)
#define IPCC_C2PRIVCFGR_CH11PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH11PRIV_Pos)  /*!< 0x00000400 */
#define IPCC_C2PRIVCFGR_CH11PRIV      IPCC_C2PRIVCFGR_CH11PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH12PRIV_Pos  (11U)
#define IPCC_C2PRIVCFGR_CH12PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH12PRIV_Pos)  /*!< 0x00000800 */
#define IPCC_C2PRIVCFGR_CH12PRIV      IPCC_C2PRIVCFGR_CH12PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH13PRIV_Pos  (12U)
#define IPCC_C2PRIVCFGR_CH13PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH13PRIV_Pos)  /*!< 0x00001000 */
#define IPCC_C2PRIVCFGR_CH13PRIV      IPCC_C2PRIVCFGR_CH13PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH14PRIV_Pos  (13U)
#define IPCC_C2PRIVCFGR_CH14PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH14PRIV_Pos)  /*!< 0x00002000 */
#define IPCC_C2PRIVCFGR_CH14PRIV      IPCC_C2PRIVCFGR_CH14PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH15PRIV_Pos  (14U)
#define IPCC_C2PRIVCFGR_CH15PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH15PRIV_Pos)  /*!< 0x00004000 */
#define IPCC_C2PRIVCFGR_CH15PRIV      IPCC_C2PRIVCFGR_CH15PRIV_Msk            /*!< processor 2 channel n privilege enable */
#define IPCC_C2PRIVCFGR_CH16PRIV_Pos  (15U)
#define IPCC_C2PRIVCFGR_CH16PRIV_Msk  (0x1U << IPCC_C2PRIVCFGR_CH16PRIV_Pos)  /*!< 0x00008000 */
#define IPCC_C2PRIVCFGR_CH16PRIV      IPCC_C2PRIVCFGR_CH16PRIV_Msk            /*!< processor 2 channel n privilege enable */

/****************  Bit definition for IPCC_C2CIDCFGR register  ****************/
#define IPCC_C2CIDCFGR_CFEN_Pos       (0U)
#define IPCC_C2CIDCFGR_CFEN_Msk       (0x1U << IPCC_C2CIDCFGR_CFEN_Pos)       /*!< 0x00000001 */
#define IPCC_C2CIDCFGR_CFEN           IPCC_C2CIDCFGR_CFEN_Msk                 /*!< CID filtering enabled for processor 2 */
#define IPCC_C2CIDCFGR_CID_Pos        (4U)
#define IPCC_C2CIDCFGR_CID_Msk        (0xFU << IPCC_C2CIDCFGR_CID_Pos)        /*!< 0x000000F0 */
#define IPCC_C2CIDCFGR_CID            IPCC_C2CIDCFGR_CID_Msk                  /*!< processor 2 CID domain identification */

/*****************  Bit definition for IPCC_HWCFGR register  ******************/
#define IPCC_HWCFGR_CHANNELS_Pos      (0U)
#define IPCC_HWCFGR_CHANNELS_Msk      (0xFFU << IPCC_HWCFGR_CHANNELS_Pos)     /*!< 0x000000FF */
#define IPCC_HWCFGR_CHANNELS          IPCC_HWCFGR_CHANNELS_Msk                /*!< Number of channels per CPU supported by the IP, range 1 to 16 */
#define IPCC_HWCFGR_SECCTRL_Pos       (8U)
#define IPCC_HWCFGR_SECCTRL_Msk       (0xFU << IPCC_HWCFGR_SECCTRL_Pos)       /*!< 0x00000F00 */
#define IPCC_HWCFGR_SECCTRL           IPCC_HWCFGR_SECCTRL_Msk                 /*!< security options, range 1 to 16 */
#define IPCC_HWCFGR_OPTBITS_Pos       (16U)
#define IPCC_HWCFGR_OPTBITS_Msk       (0xFFU << IPCC_HWCFGR_OPTBITS_Pos)      /*!< 0x00FF0000 */
#define IPCC_HWCFGR_OPTBITS           IPCC_HWCFGR_OPTBITS_Msk                 /*!< reserved for future use */
#define IPCC_HWCFGR_CIDWIDTH_Pos      (24U)
#define IPCC_HWCFGR_CIDWIDTH_Msk      (0xFU << IPCC_HWCFGR_CIDWIDTH_Pos)      /*!< 0x0F000000 */
#define IPCC_HWCFGR_CIDWIDTH          IPCC_HWCFGR_CIDWIDTH_Msk                /*!< CID bit filed width range 0 to 12 */

/******************  Bit definition for IPCC_VERR register  *******************/
#define IPCC_VERR_MINREV_Pos          (0U)
#define IPCC_VERR_MINREV_Msk          (0xFU << IPCC_VERR_MINREV_Pos)          /*!< 0x0000000F */
#define IPCC_VERR_MINREV              IPCC_VERR_MINREV_Msk                    /*!< IP Minor Revision number */
#define IPCC_VERR_MAJREV_Pos          (4U)
#define IPCC_VERR_MAJREV_Msk          (0xFU << IPCC_VERR_MAJREV_Pos)          /*!< 0x000000F0 */
#define IPCC_VERR_MAJREV              IPCC_VERR_MAJREV_Msk                    /*!< IP Major Revision number */

/******************  Bit definition for IPCC_IPIDR register  ******************/
#define IPCC_IPIDR_IPID_Pos           (0U)
#define IPCC_IPIDR_IPID_Msk           (0xFFFFFFFFU << IPCC_IPIDR_IPID_Pos)    /*!< 0xFFFFFFFF */
#define IPCC_IPIDR_IPID               IPCC_IPIDR_IPID_Msk                     /*!< IP identification */

/******************  Bit definition for IPCC_SIDR register  *******************/
#define IPCC_SIDR_SID_Pos             (0U)
#define IPCC_SIDR_SID_Msk             (0xFFFFFFFFU << IPCC_SIDR_SID_Pos)      /*!< 0xFFFFFFFF */
#define IPCC_SIDR_SID                 IPCC_SIDR_SID_Msk                       /*!< IP size identification */

/**********************  Bit definition for IPCC_C1CR register  ***************/
#define IPCC_CR_RXOIE_Pos         IPCC_C1CR_RXOIE_Pos
#define IPCC_CR_RXOIE_Msk         IPCC_C1CR_RXOIE_Msk
#define IPCC_CR_RXOIE             IPCC_C1CR_RXOIE
#define IPCC_CR_SECRXOIE_Pos      IPCC_C1CR_SECRXOIE_Pos
#define IPCC_CR_SECRXOIE_Msk      IPCC_C1CR_SECRXOIE_Msk
#define IPCC_CR_SECRXOIE          IPCC_C1CR_SECRXOIE
#define IPCC_CR_TXFIE_Pos         IPCC_C1CR_TXFIE_Pos
#define IPCC_CR_TXFIE_Msk         IPCC_C1CR_TXFIE_Msk
#define IPCC_CR_TXFIE             IPCC_C1CR_TXFIE
#define IPCC_CR_SECTXFIE_Pos      IPCC_C1CR_SECTXFIE_Pos
#define IPCC_CR_SECTXFIE_Msk      IPCC_C1CR_SECTXFIE_Msk
#define IPCC_CR_SECTXFIE          IPCC_C1CR_SECTXFIE

/**********************  Bit definition for IPCC_C1MR register  **************/
#define IPCC_MR_CH1OM_Pos         IPCC_C1MR_CH1OM_Pos
#define IPCC_MR_CH1OM_Msk         IPCC_C1MR_CH1OM_Msk
#define IPCC_MR_CH1OM             IPCC_C1MR_CH1OM
#define IPCC_MR_CH2OM_Pos         IPCC_C1MR_CH2OM_Pos
#define IPCC_MR_CH2OM_Msk         IPCC_C1MR_CH2OM_Msk
#define IPCC_MR_CH2OM             IPCC_C1MR_CH2OM
#define IPCC_MR_CH3OM_Pos         IPCC_C1MR_CH3OM_Pos
#define IPCC_MR_CH3OM_Msk         IPCC_C1MR_CH3OM_Msk
#define IPCC_MR_CH3OM             IPCC_C1MR_CH3OM
#define IPCC_MR_CH4OM_Pos         IPCC_C1MR_CH4OM_Pos
#define IPCC_MR_CH4OM_Msk         IPCC_C1MR_CH4OM_Msk
#define IPCC_MR_CH4OM             IPCC_C1MR_CH4OM
#define IPCC_MR_CH5OM_Pos         IPCC_C1MR_CH5OM_Pos
#define IPCC_MR_CH5OM_Msk         IPCC_C1MR_CH5OM_Msk
#define IPCC_MR_CH5OM             IPCC_C1MR_CH5OM
#define IPCC_MR_CH6OM_Pos         IPCC_C1MR_CH6OM_Pos
#define IPCC_MR_CH6OM_Msk         IPCC_C1MR_CH6OM_Msk
#define IPCC_MR_CH6OM             IPCC_C1MR_CH6OM
#define IPCC_MR_CH7OM_Pos         IPCC_C1MR_CH7OM_Pos
#define IPCC_MR_CH7OM_Msk         IPCC_C1MR_CH7OM_Msk
#define IPCC_MR_CH7OM             IPCC_C1MR_CH7OM
#define IPCC_MR_CH8OM_Pos         IPCC_C1MR_CH8OM_Pos
#define IPCC_MR_CH8OM_Msk         IPCC_C1MR_CH8OM_Msk
#define IPCC_MR_CH8OM             IPCC_C1MR_CH8OM
#define IPCC_MR_CH9OM_Pos         IPCC_C1MR_CH9OM_Pos
#define IPCC_MR_CH9OM_Msk         IPCC_C1MR_CH9OM_Msk
#define IPCC_MR_CH9OM             IPCC_C1MR_CH9OM
#define IPCC_MR_CH10OM_Pos        IPCC_C1MR_CH10OM_Pos
#define IPCC_MR_CH10OM_Msk        IPCC_C1MR_CH10OM_Msk
#define IPCC_MR_CH10OM            IPCC_C1MR_CH10OM
#define IPCC_MR_CH11OM_Pos        IPCC_C1MR_CH11OM_Pos
#define IPCC_MR_CH11OM_Msk        IPCC_C1MR_CH11OM_Msk
#define IPCC_MR_CH11OM            IPCC_C1MR_CH11OM
#define IPCC_MR_CH12OM_Pos        IPCC_C1MR_CH12OM_Pos
#define IPCC_MR_CH12OM_Msk        IPCC_C1MR_CH12OM_Msk
#define IPCC_MR_CH12OM            IPCC_C1MR_CH12OM
#define IPCC_MR_CH13OM_Pos        IPCC_C1MR_CH13OM_Pos
#define IPCC_MR_CH13OM_Msk        IPCC_C1MR_CH13OM_Msk
#define IPCC_MR_CH13OM            IPCC_C1MR_CH13OM
#define IPCC_MR_CH14OM_Pos        IPCC_C1MR_CH14OM_Pos
#define IPCC_MR_CH14OM_Msk        IPCC_C1MR_CH14OM_Msk
#define IPCC_MR_CH14OM            IPCC_C1MR_CH14OM
#define IPCC_MR_CH15OM_Pos        IPCC_C1MR_CH15OM_Pos
#define IPCC_MR_CH15OM_Msk        IPCC_C1MR_CH15OM_Msk
#define IPCC_MR_CH15OM            IPCC_C1MR_CH15OM
#define IPCC_MR_CH16OM_Pos        IPCC_C1MR_CH16OM_Pos
#define IPCC_MR_CH16OM_Msk        IPCC_C1MR_CH16OM_Msk
#define IPCC_MR_CH16OM            IPCC_C1MR_CH16OM

#define IPCC_MR_CH1FM_Pos         IPCC_C1MR_CH1FM_Pos
#define IPCC_MR_CH1FM_Msk         IPCC_C1MR_CH1FM_Msk
#define IPCC_MR_CH1FM             IPCC_C1MR_CH1FM
#define IPCC_MR_CH2FM_Pos         IPCC_C1MR_CH2FM_Pos
#define IPCC_MR_CH2FM_Msk         IPCC_C1MR_CH2FM_Msk
#define IPCC_MR_CH2FM             IPCC_C1MR_CH2FM
#define IPCC_MR_CH3FM_Pos         IPCC_C1MR_CH3FM_Pos
#define IPCC_MR_CH3FM_Msk         IPCC_C1MR_CH3FM_Msk
#define IPCC_MR_CH3FM             IPCC_C1MR_CH3FM
#define IPCC_MR_CH4FM_Pos         IPCC_C1MR_CH4FM_Pos
#define IPCC_MR_CH4FM_Msk         IPCC_C1MR_CH4FM_Msk
#define IPCC_MR_CH4FM             IPCC_C1MR_CH4FM
#define IPCC_MR_CH5FM_Pos         IPCC_C1MR_CH5FM_Pos
#define IPCC_MR_CH5FM_Msk         IPCC_C1MR_CH5FM_Msk
#define IPCC_MR_CH5FM             IPCC_C1MR_CH5FM
#define IPCC_MR_CH6FM_Pos         IPCC_C1MR_CH6FM_Pos
#define IPCC_MR_CH6FM_Msk         IPCC_C1MR_CH6FM_Msk
#define IPCC_MR_CH6FM             IPCC_C1MR_CH6FM
#define IPCC_MR_CH7FM_Pos         IPCC_C1MR_CH7FM_Pos
#define IPCC_MR_CH7FM_Msk         IPCC_C1MR_CH7FM_Msk
#define IPCC_MR_CH7FM             IPCC_C1MR_CH7FM
#define IPCC_MR_CH8FM_Pos         IPCC_C1MR_CH8FM_Pos
#define IPCC_MR_CH8FM_Msk         IPCC_C1MR_CH8FM_Msk
#define IPCC_MR_CH8FM             IPCC_C1MR_CH8FM
#define IPCC_MR_CH9FM_Pos         IPCC_C1MR_CH9FM_Pos
#define IPCC_MR_CH9FM_Msk         IPCC_C1MR_CH9FM_Msk
#define IPCC_MR_CH9FM             IPCC_C1MR_CH9FM
#define IPCC_MR_CH10FM_Pos        IPCC_C1MR_CH10FM_Pos
#define IPCC_MR_CH10FM_Msk        IPCC_C1MR_CH10FM_Msk
#define IPCC_MR_CH10FM            IPCC_C1MR_CH10FM
#define IPCC_MR_CH11FM_Pos        IPCC_C1MR_CH11FM_Pos
#define IPCC_MR_CH11FM_Msk        IPCC_C1MR_CH11FM_Msk
#define IPCC_MR_CH11FM            IPCC_C1MR_CH11FM
#define IPCC_MR_CH12FM_Pos        IPCC_C1MR_CH12FM_Pos
#define IPCC_MR_CH12FM_Msk        IPCC_C1MR_CH12FM_Msk
#define IPCC_MR_CH12FM            IPCC_C1MR_CH12FM
#define IPCC_MR_CH13FM_Pos        IPCC_C1MR_CH13FM_Pos
#define IPCC_MR_CH13FM_Msk        IPCC_C1MR_CH13FM_Msk
#define IPCC_MR_CH13FM            IPCC_C1MR_CH13FM
#define IPCC_MR_CH14FM_Pos        IPCC_C1MR_CH14FM_Pos
#define IPCC_MR_CH14FM_Msk        IPCC_C1MR_CH14FM_Msk
#define IPCC_MR_CH14FM            IPCC_C1MR_CH14FM
#define IPCC_MR_CH15FM_Pos        IPCC_C1MR_CH15FM_Pos
#define IPCC_MR_CH15FM_Msk        IPCC_C1MR_CH15FM_Msk
#define IPCC_MR_CH15FM            IPCC_C1MR_CH15FM
#define IPCC_MR_CH16FM_Pos        IPCC_C1MR_CH16FM_Pos
#define IPCC_MR_CH16FM_Msk        IPCC_C1MR_CH16FM_Msk
#define IPCC_MR_CH16FM            IPCC_C1MR_CH16FM

/**********************  Bit definition for IPCC_C1SCR register  ***************/
#define IPCC_SCR_CH1C_Pos         IPCC_C1SCR_CH1C_Pos
#define IPCC_SCR_CH1C_Msk         IPCC_C1SCR_CH1C_Msk
#define IPCC_SCR_CH1C             IPCC_C1SCR_CH1C
#define IPCC_SCR_CH2C_Pos         IPCC_C1SCR_CH2C_Pos
#define IPCC_SCR_CH2C_Msk         IPCC_C1SCR_CH2C_Msk
#define IPCC_SCR_CH2C             IPCC_C1SCR_CH2C
#define IPCC_SCR_CH3C_Pos         IPCC_C1SCR_CH3C_Pos
#define IPCC_SCR_CH3C_Msk         IPCC_C1SCR_CH3C_Msk
#define IPCC_SCR_CH3C             IPCC_C1SCR_CH3C
#define IPCC_SCR_CH4C_Pos         IPCC_C1SCR_CH4C_Pos
#define IPCC_SCR_CH4C_Msk         IPCC_C1SCR_CH4C_Msk
#define IPCC_SCR_CH4C             IPCC_C1SCR_CH4C
#define IPCC_SCR_CH5C_Pos         IPCC_C1SCR_CH5C_Pos
#define IPCC_SCR_CH5C_Msk         IPCC_C1SCR_CH5C_Msk
#define IPCC_SCR_CH5C             IPCC_C1SCR_CH5C
#define IPCC_SCR_CH6C_Pos         IPCC_C1SCR_CH6C_Pos
#define IPCC_SCR_CH6C_Msk         IPCC_C1SCR_CH6C_Msk
#define IPCC_SCR_CH6C             IPCC_C1SCR_CH6C
#define IPCC_SCR_CH7C_Pos         IPCC_C1SCR_CH7C_Pos
#define IPCC_SCR_CH7C_Msk         IPCC_C1SCR_CH7C_Msk
#define IPCC_SCR_CH7C             IPCC_C1SCR_CH7C
#define IPCC_SCR_CH8C_Pos         IPCC_C1SCR_CH8C_Pos
#define IPCC_SCR_CH8C_Msk         IPCC_C1SCR_CH8C_Msk
#define IPCC_SCR_CH8C             IPCC_C1SCR_CH8C
#define IPCC_SCR_CH9C_Pos         IPCC_C1SCR_CH9C_Pos
#define IPCC_SCR_CH9C_Msk         IPCC_C1SCR_CH9C_Msk
#define IPCC_SCR_CH9C             IPCC_C1SCR_CH9C
#define IPCC_SCR_CH10C_Pos        IPCC_C1SCR_CH10C_Pos
#define IPCC_SCR_CH10C_Msk        IPCC_C1SCR_CH10C_Msk
#define IPCC_SCR_CH10C            IPCC_C1SCR_CH10C
#define IPCC_SCR_CH11C_Pos        IPCC_C1SCR_CH11C_Pos
#define IPCC_SCR_CH11C_Msk        IPCC_C1SCR_CH11C_Msk
#define IPCC_SCR_CH11C            IPCC_C1SCR_CH11C
#define IPCC_SCR_CH12C_Pos        IPCC_C1SCR_CH12C_Pos
#define IPCC_SCR_CH12C_Msk        IPCC_C1SCR_CH12C_Msk
#define IPCC_SCR_CH12C            IPCC_C1SCR_CH12C
#define IPCC_SCR_CH13C_Pos        IPCC_C1SCR_CH13C_Pos
#define IPCC_SCR_CH13C_Msk        IPCC_C1SCR_CH13C_Msk
#define IPCC_SCR_CH13C            IPCC_C1SCR_CH13C
#define IPCC_SCR_CH14C_Pos        IPCC_C1SCR_CH14C_Pos
#define IPCC_SCR_CH14C_Msk        IPCC_C1SCR_CH14C_Msk
#define IPCC_SCR_CH14C            IPCC_C1SCR_CH14C
#define IPCC_SCR_CH15C_Pos        IPCC_C1SCR_CH15C_Pos
#define IPCC_SCR_CH15C_Msk        IPCC_C1SCR_CH15C_Msk
#define IPCC_SCR_CH15C            IPCC_C1SCR_CH15C
#define IPCC_SCR_CH16C_Pos        IPCC_C1SCR_CH16C_Pos
#define IPCC_SCR_CH16C_Msk        IPCC_C1SCR_CH16C_Msk
#define IPCC_SCR_CH16C            IPCC_C1SCR_CH16C

#define IPCC_SCR_CH1S_Pos         IPCC_C1SCR_CH1S_Pos
#define IPCC_SCR_CH1S_Msk         IPCC_C1SCR_CH1S_Msk
#define IPCC_SCR_CH1S             IPCC_C1SCR_CH1S
#define IPCC_SCR_CH2S_Pos         IPCC_C1SCR_CH2S_Pos
#define IPCC_SCR_CH2S_Msk         IPCC_C1SCR_CH2S_Msk
#define IPCC_SCR_CH2S             IPCC_C1SCR_CH2S
#define IPCC_SCR_CH3S_Pos         IPCC_C1SCR_CH3S_Pos
#define IPCC_SCR_CH3S_Msk         IPCC_C1SCR_CH3S_Msk
#define IPCC_SCR_CH3S             IPCC_C1SCR_CH3S
#define IPCC_SCR_CH4S_Pos         IPCC_C1SCR_CH4S_Pos
#define IPCC_SCR_CH4S_Msk         IPCC_C1SCR_CH4S_Msk
#define IPCC_SCR_CH4S             IPCC_C1SCR_CH4S
#define IPCC_SCR_CH5S_Pos         IPCC_C1SCR_CH5S_Pos
#define IPCC_SCR_CH5S_Msk         IPCC_C1SCR_CH5S_Msk
#define IPCC_SCR_CH5S             IPCC_C1SCR_CH5S
#define IPCC_SCR_CH6S_Pos         IPCC_C1SCR_CH6S_Pos
#define IPCC_SCR_CH6S_Msk         IPCC_C1SCR_CH6S_Msk
#define IPCC_SCR_CH6S             IPCC_C1SCR_CH6S

/**********************  Bit definition for IPCC_C1TOC2SR register  ***************/
#define IPCC_SR_CH1F_Pos          IPCC_C1TOC2SR_CH1F_Pos
#define IPCC_SR_CH1F_Msk          IPCC_C1TOC2SR_CH1F_Msk
#define IPCC_SR_CH1F              IPCC_C1TOC2SR_CH1F
#define IPCC_SR_CH2F_Pos          IPCC_C1TOC2SR_CH2F_Pos
#define IPCC_SR_CH2F_Msk          IPCC_C1TOC2SR_CH2F_Msk
#define IPCC_SR_CH2F              IPCC_C1TOC2SR_CH2F
#define IPCC_SR_CH3F_Pos          IPCC_C1TOC2SR_CH3F_Pos
#define IPCC_SR_CH3F_Msk          IPCC_C1TOC2SR_CH3F_Msk
#define IPCC_SR_CH3F              IPCC_C1TOC2SR_CH3F
#define IPCC_SR_CH4F_Pos          IPCC_C1TOC2SR_CH4F_Pos
#define IPCC_SR_CH4F_Msk          IPCC_C1TOC2SR_CH4F_Msk
#define IPCC_SR_CH4F              IPCC_C1TOC2SR_CH4F
#define IPCC_SR_CH5F_Pos          IPCC_C1TOC2SR_CH5F_Pos
#define IPCC_SR_CH5F_Msk          IPCC_C1TOC2SR_CH5F_Msk
#define IPCC_SR_CH5F              IPCC_C1TOC2SR_CH5F
#define IPCC_SR_CH6F_Pos          IPCC_C1TOC2SR_CH6F_Pos
#define IPCC_SR_CH6F_Msk          IPCC_C1TOC2SR_CH6F_Msk
#define IPCC_SR_CH6F              IPCC_C1TOC2SR_CH6F
#define IPCC_SR_CH7F_Pos          IPCC_C1TOC2SR_CH7F_Pos
#define IPCC_SR_CH7F_Msk          IPCC_C1TOC2SR_CH7F_Msk
#define IPCC_SR_CH7F              IPCC_C1TOC2SR_CH7F
#define IPCC_SR_CH8F_Pos          IPCC_C1TOC2SR_CH8F_Pos
#define IPCC_SR_CH8F_Msk          IPCC_C1TOC2SR_CH8F_Msk
#define IPCC_SR_CH8F              IPCC_C1TOC2SR_CH8F
#define IPCC_SR_CH9F_Pos          IPCC_C1TOC2SR_CH9F_Pos
#define IPCC_SR_CH9F_Msk          IPCC_C1TOC2SR_CH9F_Msk
#define IPCC_SR_CH9F              IPCC_C1TOC2SR_CH9F
#define IPCC_SR_CH10F_Pos         IPCC_C1TOC2SR_CH10F_Pos
#define IPCC_SR_CH10F_Msk         IPCC_C1TOC2SR_CH10F_Msk
#define IPCC_SR_CH10F             IPCC_C1TOC2SR_CH10F
#define IPCC_SR_CH11F_Pos         IPCC_C1TOC2SR_CH11F_Pos
#define IPCC_SR_CH11F_Msk         IPCC_C1TOC2SR_CH11F_Msk
#define IPCC_SR_CH11F             IPCC_C1TOC2SR_CH11F
#define IPCC_SR_CH12F_Pos         IPCC_C1TOC2SR_CH12F_Pos
#define IPCC_SR_CH12F_Msk         IPCC_C1TOC2SR_CH12F_Msk
#define IPCC_SR_CH12F             IPCC_C1TOC2SR_CH12F
#define IPCC_SR_CH13F_Pos         IPCC_C1TOC2SR_CH13F_Pos
#define IPCC_SR_CH13F_Msk         IPCC_C1TOC2SR_CH13F_Msk
#define IPCC_SR_CH13F             IPCC_C1TOC2SR_CH13F
#define IPCC_SR_CH14F_Pos         IPCC_C1TOC2SR_CH14F_Pos
#define IPCC_SR_CH14F_Msk         IPCC_C1TOC2SR_CH14F_Msk
#define IPCC_SR_CH14F             IPCC_C1TOC2SR_CH14F
#define IPCC_SR_CH15F_Pos         IPCC_C1TOC2SR_CH15F_Pos
#define IPCC_SR_CH15F_Msk         IPCC_C1TOC2SR_CH15F_Msk
#define IPCC_SR_CH15F             IPCC_C1TOC2SR_CH15F
#define IPCC_SR_CH16F_Pos         IPCC_C1TOC2SR_CH16F_Pos
#define IPCC_SR_CH16F_Msk         IPCC_C1TOC2SR_CH16F_Msk
#define IPCC_SR_CH16F             IPCC_C1TOC2SR_CH16F

/******************** Number of IPCC channels ******************************/
#define IPCC_CHANNEL_NUMBER       16U

/******************************************************************************/
/*                                                                            */
/*                        Independent Watchdog (IWDG)                         */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for IWDG_KR register  ********************/
#define IWDG_KR_KEY_Pos             (0U)
#define IWDG_KR_KEY_Msk             (0xFFFFU << IWDG_KR_KEY_Pos)          /*!< 0x0000FFFF */
#define IWDG_KR_KEY                 IWDG_KR_KEY_Msk                       /*!< Key value (write only, read 0x0000) */

/*******************  Bit definition for IWDG_PR register  ********************/
#define IWDG_PR_PR_Pos              (0U)
#define IWDG_PR_PR_Msk              (0xFU << IWDG_PR_PR_Pos)              /*!< 0x0000000F */
#define IWDG_PR_PR                  IWDG_PR_PR_Msk                        /*!< Prescaler divider */
#define IWDG_PR_PR_0                (0x1U << IWDG_PR_PR_Pos)              /*!< 0x00000001 */
#define IWDG_PR_PR_1                (0x2U << IWDG_PR_PR_Pos)              /*!< 0x00000002 */
#define IWDG_PR_PR_2                (0x4U << IWDG_PR_PR_Pos)              /*!< 0x00000004 */
#define IWDG_PR_PR_3                (0x8U << IWDG_PR_PR_Pos)              /*!< 0x00000008 */

/*******************  Bit definition for IWDG_RLR register  *******************/
#define IWDG_RLR_RL_Pos             (0U)
#define IWDG_RLR_RL_Msk             (0xFFFU << IWDG_RLR_RL_Pos)           /*!< 0x00000FFF */
#define IWDG_RLR_RL                 IWDG_RLR_RL_Msk                       /*!< Watchdog counter reload value */

/*******************  Bit definition for IWDG_SR register  ********************/
#define IWDG_SR_PVU_Pos             (0U)
#define IWDG_SR_PVU_Msk             (0x1U << IWDG_SR_PVU_Pos)             /*!< 0x00000001 */
#define IWDG_SR_PVU                 IWDG_SR_PVU_Msk                       /*!< Watchdog prescaler value update */
#define IWDG_SR_RVU_Pos             (1U)
#define IWDG_SR_RVU_Msk             (0x1U << IWDG_SR_RVU_Pos)             /*!< 0x00000002 */
#define IWDG_SR_RVU                 IWDG_SR_RVU_Msk                       /*!< Watchdog counter reload value update */
#define IWDG_SR_WVU_Pos             (2U)
#define IWDG_SR_WVU_Msk             (0x1U << IWDG_SR_WVU_Pos)             /*!< 0x00000004 */
#define IWDG_SR_WVU                 IWDG_SR_WVU_Msk                       /*!< Watchdog counter window value update */
#define IWDG_SR_EWU_Pos             (3U)
#define IWDG_SR_EWU_Msk             (0x1U << IWDG_SR_EWU_Pos)             /*!< 0x00000008 */
#define IWDG_SR_EWU                 IWDG_SR_EWU_Msk                       /*!< Watchdog interrupt comparator value update */
#define IWDG_SR_ONF_Pos             (8U)
#define IWDG_SR_ONF_Msk             (0x1U << IWDG_SR_ONF_Pos)             /*!< 0x00000100 */
#define IWDG_SR_ONF                 IWDG_SR_ONF_Msk                       /*!< Watchdog Enable status bit */
#define IWDG_SR_EWIF_Pos            (15U)
#define IWDG_SR_EWIF_Msk            (0x1U << IWDG_SR_EWIF_Pos)            /*!< 0x00008000 */
#define IWDG_SR_EWIF                IWDG_SR_EWIF_Msk                      /*!< Watchdog Early Interrupt flag */

/******************  Bit definition for IWDG_WINR register  *******************/
#define IWDG_WINR_WIN_Pos           (0U)
#define IWDG_WINR_WIN_Msk           (0xFFFU << IWDG_WINR_WIN_Pos)         /*!< 0x00000FFF */
#define IWDG_WINR_WIN               IWDG_WINR_WIN_Msk                     /*!< Watchdog counter window value */

/******************  Bit definition for IWDG_EWCR register  *******************/
#define IWDG_EWCR_EWIT_Pos          (0U)
#define IWDG_EWCR_EWIT_Msk          (0xFFFU << IWDG_EWCR_EWIT_Pos)        /*!< 0x00000FFF */
#define IWDG_EWCR_EWIT              IWDG_EWCR_EWIT_Msk                    /*!< Watchdog counter window value */
#define IWDG_EWCR_EWIE_Pos          (15U)
#define IWDG_EWCR_EWIE_Msk          (0x1U << IWDG_EWCR_EWIE_Pos)          /*!< 0x00008000 */
#define IWDG_EWCR_EWIE              IWDG_EWCR_EWIE_Msk                    /*!< Watchdog early interrupt enable */

/*******************  Bit definition for IWDG_ICR register  *******************/
#define IWDG_ICR_EWIC_Pos           (15U)
#define IWDG_ICR_EWIC_Msk           (0x1U << IWDG_ICR_EWIC_Pos)           /*!< 0x00008000 */
#define IWDG_ICR_EWIC               IWDG_ICR_EWIC_Msk                     /*!< Watchdog early interrupt acknowledge */

/*****************  Bit definition for IWDG_HWCFGR register  ******************/
#define IWDG_HWCFGR_WINDOW_Pos      (0U)
#define IWDG_HWCFGR_WINDOW_Msk      (0xFU << IWDG_HWCFGR_WINDOW_Pos)      /*!< 0x0000000F */
#define IWDG_HWCFGR_WINDOW          IWDG_HWCFGR_WINDOW_Msk                /*!< Support of Window function */
#define IWDG_HWCFGR_PR_DEFAULT_Pos  (4U)
#define IWDG_HWCFGR_PR_DEFAULT_Msk  (0xFU << IWDG_HWCFGR_PR_DEFAULT_Pos)  /*!< 0x000000F0 */
#define IWDG_HWCFGR_PR_DEFAULT      IWDG_HWCFGR_PR_DEFAULT_Msk            /*!< Prescaler default value */

/******************  Bit definition for IWDG_VERR register  *******************/
#define IWDG_VERR_MINREV_Pos        (0U)
#define IWDG_VERR_MINREV_Msk        (0xFU << IWDG_VERR_MINREV_Pos)        /*!< 0x0000000F */
#define IWDG_VERR_MINREV            IWDG_VERR_MINREV_Msk                  /*!< Minor revision */
#define IWDG_VERR_MAJREV_Pos        (4U)
#define IWDG_VERR_MAJREV_Msk        (0xFU << IWDG_VERR_MAJREV_Pos)        /*!< 0x000000F0 */
#define IWDG_VERR_MAJREV            IWDG_VERR_MAJREV_Msk                  /*!< Major revision */

/*******************  Bit definition for IWDG_IDR register  *******************/
#define IWDG_IDR_ID_Pos             (0U)
#define IWDG_IDR_ID_Msk             (0xFFFFFFFFU << IWDG_IDR_ID_Pos)      /*!< 0xFFFFFFFF */
#define IWDG_IDR_ID                 IWDG_IDR_ID_Msk                       /*!< IWDG identifier */

/******************  Bit definition for IWDG_SIDR register  *******************/
#define IWDG_SIDR_SID_Pos           (0U)
#define IWDG_SIDR_SID_Msk           (0xFFFFFFFFU << IWDG_SIDR_SID_Pos)    /*!< 0xFFFFFFFF */
#define IWDG_SIDR_SID               IWDG_SIDR_SID_Msk                     /*!< IWDG size identifier */

/******************************************************************************/
/*                                                                            */
/*                          Low Power Timer (LPTIM)                           */
/*                                                                            */
/******************************************************************************/
/******************  Bit definition for LPTIM_ISR register  *******************/
#define LPTIM_ISR_CC1IF_Pos          (0U)
#define LPTIM_ISR_CC1IF_Msk          (0x1U << LPTIM_ISR_CC1IF_Pos)           /*!< 0x00000001 */
#define LPTIM_ISR_CC1IF              LPTIM_ISR_CC1IF_Msk                     /*!< Capture/Compare 1 interrupt flag */
#define LPTIM_ISR_ARRM_Pos           (1U)
#define LPTIM_ISR_ARRM_Msk           (0x1U << LPTIM_ISR_ARRM_Pos)            /*!< 0x00000002 */
#define LPTIM_ISR_ARRM               LPTIM_ISR_ARRM_Msk                      /*!< Autoreload match */
#define LPTIM_ISR_EXTTRIG_Pos        (2U)
#define LPTIM_ISR_EXTTRIG_Msk        (0x1U << LPTIM_ISR_EXTTRIG_Pos)         /*!< 0x00000004 */
#define LPTIM_ISR_EXTTRIG            LPTIM_ISR_EXTTRIG_Msk                   /*!< External trigger edge event */
#define LPTIM_ISR_CMP1OK_Pos         (3U)
#define LPTIM_ISR_CMP1OK_Msk         (0x1U << LPTIM_ISR_CMP1OK_Pos)          /*!< 0x00000008 */
#define LPTIM_ISR_CMP1OK             LPTIM_ISR_CMP1OK_Msk                    /*!< Compare register 1 update OK */
#define LPTIM_ISR_ARROK_Pos          (4U)
#define LPTIM_ISR_ARROK_Msk          (0x1U << LPTIM_ISR_ARROK_Pos)           /*!< 0x00000010 */
#define LPTIM_ISR_ARROK              LPTIM_ISR_ARROK_Msk                     /*!< Autoreload register update OK */
#define LPTIM_ISR_UP_Pos             (5U)
#define LPTIM_ISR_UP_Msk             (0x1U << LPTIM_ISR_UP_Pos)              /*!< 0x00000020 */
#define LPTIM_ISR_UP                 LPTIM_ISR_UP_Msk                        /*!< Counter direction change down to up */
#define LPTIM_ISR_DOWN_Pos           (6U)
#define LPTIM_ISR_DOWN_Msk           (0x1U << LPTIM_ISR_DOWN_Pos)            /*!< 0x00000040 */
#define LPTIM_ISR_DOWN               LPTIM_ISR_DOWN_Msk                      /*!< Counter direction change up to down */
#define LPTIM_ISR_UE_Pos             (7U)
#define LPTIM_ISR_UE_Msk             (0x1U << LPTIM_ISR_UE_Pos)              /*!< 0x00000080 */
#define LPTIM_ISR_UE                 LPTIM_ISR_UE_Msk                        /*!< LPTIM update event occurred */
#define LPTIM_ISR_REPOK_Pos          (8U)
#define LPTIM_ISR_REPOK_Msk          (0x1U << LPTIM_ISR_REPOK_Pos)           /*!< 0x00000100 */
#define LPTIM_ISR_REPOK              LPTIM_ISR_REPOK_Msk                     /*!< Repetition register update OK */
#define LPTIM_ISR_CC2IF_Pos          (9U)
#define LPTIM_ISR_CC2IF_Msk          (0x1U << LPTIM_ISR_CC2IF_Pos)           /*!< 0x00000200 */
#define LPTIM_ISR_CC2IF              LPTIM_ISR_CC2IF_Msk                     /*!< Capture/Compare 2 interrupt flag */
#define LPTIM_ISR_CC1OF_Pos          (12U)
#define LPTIM_ISR_CC1OF_Msk          (0x1U << LPTIM_ISR_CC1OF_Pos)           /*!< 0x00001000 */
#define LPTIM_ISR_CC1OF              LPTIM_ISR_CC1OF_Msk                     /*!< Capture 1 over-capture flag */
#define LPTIM_ISR_CC2OF_Pos          (13U)
#define LPTIM_ISR_CC2OF_Msk          (0x1U << LPTIM_ISR_CC2OF_Pos)           /*!< 0x00002000 */
#define LPTIM_ISR_CC2OF              LPTIM_ISR_CC2OF_Msk                     /*!< Capture 2 over-capture flag */
#define LPTIM_ISR_CMP2OK_Pos         (19U)
#define LPTIM_ISR_CMP2OK_Msk         (0x1U << LPTIM_ISR_CMP2OK_Pos)          /*!< 0x00080000 */
#define LPTIM_ISR_CMP2OK             LPTIM_ISR_CMP2OK_Msk                    /*!< Compare register 2 update OK */
#define LPTIM_ISR_DIEROK_Pos         (24U)
#define LPTIM_ISR_DIEROK_Msk         (0x1U << LPTIM_ISR_DIEROK_Pos)          /*!< 0x01000000 */
#define LPTIM_ISR_DIEROK             LPTIM_ISR_DIEROK_Msk                    /*!< Interrupt enable register update OK */

/******************  Bit definition for LPTIM_ICR register  *******************/
#define LPTIM_ICR_CC1CF_Pos          (0U)
#define LPTIM_ICR_CC1CF_Msk          (0x1U << LPTIM_ICR_CC1CF_Pos)           /*!< 0x00000001 */
#define LPTIM_ICR_CC1CF              LPTIM_ICR_CC1CF_Msk                     /*!< Capture/compare 1 clear flag */
#define LPTIM_ICR_ARRMCF_Pos         (1U)
#define LPTIM_ICR_ARRMCF_Msk         (0x1U << LPTIM_ICR_ARRMCF_Pos)          /*!< 0x00000002 */
#define LPTIM_ICR_ARRMCF             LPTIM_ICR_ARRMCF_Msk                    /*!< Autoreload match clear flag */
#define LPTIM_ICR_EXTTRIGCF_Pos      (2U)
#define LPTIM_ICR_EXTTRIGCF_Msk      (0x1U << LPTIM_ICR_EXTTRIGCF_Pos)       /*!< 0x00000004 */
#define LPTIM_ICR_EXTTRIGCF          LPTIM_ICR_EXTTRIGCF_Msk                 /*!< External trigger valid edge clear flag */
#define LPTIM_ICR_CMP1OKCF_Pos       (3U)
#define LPTIM_ICR_CMP1OKCF_Msk       (0x1U << LPTIM_ICR_CMP1OKCF_Pos)        /*!< 0x00000008 */
#define LPTIM_ICR_CMP1OKCF           LPTIM_ICR_CMP1OKCF_Msk                  /*!< Compare register 1 update OK clear flag */
#define LPTIM_ICR_ARROKCF_Pos        (4U)
#define LPTIM_ICR_ARROKCF_Msk        (0x1U << LPTIM_ICR_ARROKCF_Pos)         /*!< 0x00000010 */
#define LPTIM_ICR_ARROKCF            LPTIM_ICR_ARROKCF_Msk                   /*!< Autoreload register update OK clear flag */
#define LPTIM_ICR_UPCF_Pos           (5U)
#define LPTIM_ICR_UPCF_Msk           (0x1U << LPTIM_ICR_UPCF_Pos)            /*!< 0x00000020 */
#define LPTIM_ICR_UPCF               LPTIM_ICR_UPCF_Msk                      /*!< Direction change to UP clear flag */
#define LPTIM_ICR_DOWNCF_Pos         (6U)
#define LPTIM_ICR_DOWNCF_Msk         (0x1U << LPTIM_ICR_DOWNCF_Pos)          /*!< 0x00000040 */
#define LPTIM_ICR_DOWNCF             LPTIM_ICR_DOWNCF_Msk                    /*!< Direction change to down clear flag */
#define LPTIM_ICR_UECF_Pos           (7U)
#define LPTIM_ICR_UECF_Msk           (0x1U << LPTIM_ICR_UECF_Pos)            /*!< 0x00000080 */
#define LPTIM_ICR_UECF               LPTIM_ICR_UECF_Msk                      /*!< Update event clear flag */
#define LPTIM_ICR_REPOKCF_Pos        (8U)
#define LPTIM_ICR_REPOKCF_Msk        (0x1U << LPTIM_ICR_REPOKCF_Pos)         /*!< 0x00000100 */
#define LPTIM_ICR_REPOKCF            LPTIM_ICR_REPOKCF_Msk                   /*!< Repetition register update OK clear flag */
#define LPTIM_ICR_CC2CF_Pos          (9U)
#define LPTIM_ICR_CC2CF_Msk          (0x1U << LPTIM_ICR_CC2CF_Pos)           /*!< 0x00000200 */
#define LPTIM_ICR_CC2CF              LPTIM_ICR_CC2CF_Msk                     /*!< Capture/compare 2 clear flag */
#define LPTIM_ICR_CC1OCF_Pos         (12U)
#define LPTIM_ICR_CC1OCF_Msk         (0x1U << LPTIM_ICR_CC1OCF_Pos)          /*!< 0x00001000 */
#define LPTIM_ICR_CC1OCF             LPTIM_ICR_CC1OCF_Msk                    /*!< Capture/compare 1 over-capture clear flag */
#define LPTIM_ICR_CC2OCF_Pos         (13U)
#define LPTIM_ICR_CC2OCF_Msk         (0x1U << LPTIM_ICR_CC2OCF_Pos)          /*!< 0x00002000 */
#define LPTIM_ICR_CC2OCF             LPTIM_ICR_CC2OCF_Msk                    /*!< Capture/compare 2 over-capture clear flag */
#define LPTIM_ICR_CMP2OKCF_Pos       (19U)
#define LPTIM_ICR_CMP2OKCF_Msk       (0x1U << LPTIM_ICR_CMP2OKCF_Pos)        /*!< 0x00080000 */
#define LPTIM_ICR_CMP2OKCF           LPTIM_ICR_CMP2OKCF_Msk                  /*!< Compare register 2 update OK clear flag */
#define LPTIM_ICR_DIEROKCF_Pos       (24U)
#define LPTIM_ICR_DIEROKCF_Msk       (0x1U << LPTIM_ICR_DIEROKCF_Pos)        /*!< 0x01000000 */
#define LPTIM_ICR_DIEROKCF           LPTIM_ICR_DIEROKCF_Msk                  /*!< Interrupt enable register update OK clear flag */

/*****************  Bit definition for LPTIM_DIER register  *******************/
#define LPTIM_DIER_CC1IE_Pos         (0U)
#define LPTIM_DIER_CC1IE_Msk         (0x1U << LPTIM_DIER_CC1IE_Pos)          /*!< 0x00000001 */
#define LPTIM_DIER_CC1IE             LPTIM_DIER_CC1IE_Msk                    /*!< Capture/compare 1 interrupt enable */
#define LPTIM_DIER_ARRMIE_Pos        (1U)
#define LPTIM_DIER_ARRMIE_Msk        (0x1U << LPTIM_DIER_ARRMIE_Pos)         /*!< 0x00000002 */
#define LPTIM_DIER_ARRMIE            LPTIM_DIER_ARRMIE_Msk                   /*!< Autoreload match Interrupt Enable */
#define LPTIM_DIER_EXTTRIGIE_Pos     (2U)
#define LPTIM_DIER_EXTTRIGIE_Msk     (0x1U << LPTIM_DIER_EXTTRIGIE_Pos)      /*!< 0x00000004 */
#define LPTIM_DIER_EXTTRIGIE         LPTIM_DIER_EXTTRIGIE_Msk                /*!< External trigger valid edge Interrupt Enable */
#define LPTIM_DIER_CMP1OKIE_Pos      (3U)
#define LPTIM_DIER_CMP1OKIE_Msk      (0x1U << LPTIM_DIER_CMP1OKIE_Pos)       /*!< 0x00000008 */
#define LPTIM_DIER_CMP1OKIE          LPTIM_DIER_CMP1OKIE_Msk                 /*!< Compare register 1 update OK interrupt enable */
#define LPTIM_DIER_ARROKIE_Pos       (4U)
#define LPTIM_DIER_ARROKIE_Msk       (0x1U << LPTIM_DIER_ARROKIE_Pos)        /*!< 0x00000010 */
#define LPTIM_DIER_ARROKIE           LPTIM_DIER_ARROKIE_Msk                  /*!< Autoreload register update OK Interrupt Enable */
#define LPTIM_DIER_UPIE_Pos          (5U)
#define LPTIM_DIER_UPIE_Msk          (0x1U << LPTIM_DIER_UPIE_Pos)           /*!< 0x00000020 */
#define LPTIM_DIER_UPIE              LPTIM_DIER_UPIE_Msk                     /*!< Direction change to UP Interrupt Enable */
#define LPTIM_DIER_DOWNIE_Pos        (6U)
#define LPTIM_DIER_DOWNIE_Msk        (0x1U << LPTIM_DIER_DOWNIE_Pos)         /*!< 0x00000040 */
#define LPTIM_DIER_DOWNIE            LPTIM_DIER_DOWNIE_Msk                   /*!< Direction change to down Interrupt Enable */
#define LPTIM_DIER_UEIE_Pos          (7U)
#define LPTIM_DIER_UEIE_Msk          (0x1U << LPTIM_DIER_UEIE_Pos)           /*!< 0x00000080 */
#define LPTIM_DIER_UEIE              LPTIM_DIER_UEIE_Msk                     /*!< Update event interrupt enable */
#define LPTIM_DIER_REPOKIE_Pos       (8U)
#define LPTIM_DIER_REPOKIE_Msk       (0x1U << LPTIM_DIER_REPOKIE_Pos)        /*!< 0x00000100 */
#define LPTIM_DIER_REPOKIE           LPTIM_DIER_REPOKIE_Msk                  /*!< Repetition register update OK interrupt Enable */
#define LPTIM_DIER_CC2IE_Pos         (9U)
#define LPTIM_DIER_CC2IE_Msk         (0x1U << LPTIM_DIER_CC2IE_Pos)          /*!< 0x00000200 */
#define LPTIM_DIER_CC2IE             LPTIM_DIER_CC2IE_Msk                    /*!< Capture/compare 2 interrupt enable */
#define LPTIM_DIER_CC1OIE_Pos        (12U)
#define LPTIM_DIER_CC1OIE_Msk        (0x1U << LPTIM_DIER_CC1OIE_Pos)         /*!< 0x00001000 */
#define LPTIM_DIER_CC1OIE            LPTIM_DIER_CC1OIE_Msk                   /*!< Capture/compare 1 over-capture interrupt enable */
#define LPTIM_DIER_CC2OIE_Pos        (13U)
#define LPTIM_DIER_CC2OIE_Msk        (0x1U << LPTIM_DIER_CC2OIE_Pos)         /*!< 0x00002000 */
#define LPTIM_DIER_CC2OIE            LPTIM_DIER_CC2OIE_Msk                   /*!< Capture/compare 2 over-capture interrupt enable */
#define LPTIM_DIER_CC1DE_Pos         (16U)
#define LPTIM_DIER_CC1DE_Msk         (0x1U << LPTIM_DIER_CC1DE_Pos)          /*!< 0x00010000 */
#define LPTIM_DIER_CC1DE             LPTIM_DIER_CC1DE_Msk                    /*!< Capture/compare 1 DMA request enable */
#define LPTIM_DIER_CMP2OKIE_Pos      (19U)
#define LPTIM_DIER_CMP2OKIE_Msk      (0x1U << LPTIM_DIER_CMP2OKIE_Pos)       /*!< 0x00080000 */
#define LPTIM_DIER_CMP2OKIE          LPTIM_DIER_CMP2OKIE_Msk                 /*!< Compare register 2 update OK interrupt enable */
#define LPTIM_DIER_UEDE_Pos          (23U)
#define LPTIM_DIER_UEDE_Msk          (0x1U << LPTIM_DIER_UEDE_Pos)           /*!< 0x00800000 */
#define LPTIM_DIER_UEDE              LPTIM_DIER_UEDE_Msk                     /*!< Update event DMA request enable */
#define LPTIM_DIER_CC2DE_Pos         (25U)
#define LPTIM_DIER_CC2DE_Msk         (0x1U << LPTIM_DIER_CC2DE_Pos)          /*!< 0x02000000 */
#define LPTIM_DIER_CC2DE             LPTIM_DIER_CC2DE_Msk                    /*!< Capture/compare 2 DMA request enable */

/******************  Bit definition for LPTIM_CFGR register  ******************/
#define LPTIM_CFGR_CKSEL_Pos         (0U)
#define LPTIM_CFGR_CKSEL_Msk         (0x1U << LPTIM_CFGR_CKSEL_Pos)          /*!< 0x00000001 */
#define LPTIM_CFGR_CKSEL             LPTIM_CFGR_CKSEL_Msk                    /*!< Clock selector */
#define LPTIM_CFGR_CKPOL_Pos         (1U)
#define LPTIM_CFGR_CKPOL_Msk         (0x3U << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000006 */
#define LPTIM_CFGR_CKPOL             LPTIM_CFGR_CKPOL_Msk                    /*!< Clock Polarity */
#define LPTIM_CFGR_CKPOL_0           (0x1U << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000002 */
#define LPTIM_CFGR_CKPOL_1           (0x2U << LPTIM_CFGR_CKPOL_Pos)          /*!< 0x00000004 */
#define LPTIM_CFGR_CKFLT_Pos         (3U)
#define LPTIM_CFGR_CKFLT_Msk         (0x3U << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000018 */
#define LPTIM_CFGR_CKFLT             LPTIM_CFGR_CKFLT_Msk                    /*!< Configurable digital filter for external clock */
#define LPTIM_CFGR_CKFLT_0           (0x1U << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000008 */
#define LPTIM_CFGR_CKFLT_1           (0x2U << LPTIM_CFGR_CKFLT_Pos)          /*!< 0x00000010 */
#define LPTIM_CFGR_TRGFLT_Pos        (6U)
#define LPTIM_CFGR_TRGFLT_Msk        (0x3U << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x000000C0 */
#define LPTIM_CFGR_TRGFLT            LPTIM_CFGR_TRGFLT_Msk                   /*!< Configurable digital filter for trigger */
#define LPTIM_CFGR_TRGFLT_0          (0x1U << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x00000040 */
#define LPTIM_CFGR_TRGFLT_1          (0x2U << LPTIM_CFGR_TRGFLT_Pos)         /*!< 0x00000080 */
#define LPTIM_CFGR_PRESC_Pos         (9U)
#define LPTIM_CFGR_PRESC_Msk         (0x7U << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000E00 */
#define LPTIM_CFGR_PRESC             LPTIM_CFGR_PRESC_Msk                    /*!< Clock prescaler */
#define LPTIM_CFGR_PRESC_0           (0x1U << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000200 */
#define LPTIM_CFGR_PRESC_1           (0x2U << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000400 */
#define LPTIM_CFGR_PRESC_2           (0x4U << LPTIM_CFGR_PRESC_Pos)          /*!< 0x00000800 */
#define LPTIM_CFGR_TRIGSEL_Pos       (13U)
#define LPTIM_CFGR_TRIGSEL_Msk       (0x7U << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x0000E000 */
#define LPTIM_CFGR_TRIGSEL           LPTIM_CFGR_TRIGSEL_Msk                  /*!< Trigger selector */
#define LPTIM_CFGR_TRIGSEL_0         (0x1U << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00002000 */
#define LPTIM_CFGR_TRIGSEL_1         (0x2U << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00004000 */
#define LPTIM_CFGR_TRIGSEL_2         (0x4U << LPTIM_CFGR_TRIGSEL_Pos)        /*!< 0x00008000 */
#define LPTIM_CFGR_TRIGEN_Pos        (17U)
#define LPTIM_CFGR_TRIGEN_Msk        (0x3U << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00060000 */
#define LPTIM_CFGR_TRIGEN            LPTIM_CFGR_TRIGEN_Msk                   /*!< Trigger enable and polarity */
#define LPTIM_CFGR_TRIGEN_0          (0x1U << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00020000 */
#define LPTIM_CFGR_TRIGEN_1        (  0x2U << LPTIM_CFGR_TRIGEN_Pos)         /*!< 0x00040000 */
#define LPTIM_CFGR_TIMOUT_Pos        (19U)
#define LPTIM_CFGR_TIMOUT_Msk        (0x1U << LPTIM_CFGR_TIMOUT_Pos)         /*!< 0x00080000 */
#define LPTIM_CFGR_TIMOUT            LPTIM_CFGR_TIMOUT_Msk                   /*!< Timeout enable */
#define LPTIM_CFGR_WAVE_Pos          (20U)
#define LPTIM_CFGR_WAVE_Msk          (0x1U << LPTIM_CFGR_WAVE_Pos)           /*!< 0x00100000 */
#define LPTIM_CFGR_WAVE              LPTIM_CFGR_WAVE_Msk                     /*!< Waveform shape */
#define LPTIM_CFGR_WAVPOL_Pos        (21U)
#define LPTIM_CFGR_WAVPOL_Msk        (0x1U << LPTIM_CFGR_WAVPOL_Pos)         /*!< 0x00200000 */
#define LPTIM_CFGR_WAVPOL            LPTIM_CFGR_WAVPOL_Msk                   /*!< Waveform shape polarity */
#define LPTIM_CFGR_PRELOAD_Pos       (22U)
#define LPTIM_CFGR_PRELOAD_Msk       (0x1U << LPTIM_CFGR_PRELOAD_Pos)        /*!< 0x00400000 */
#define LPTIM_CFGR_PRELOAD           LPTIM_CFGR_PRELOAD_Msk                  /*!< Registers update mode */
#define LPTIM_CFGR_COUNTMODE_Pos     (23U)
#define LPTIM_CFGR_COUNTMODE_Msk     (0x1U << LPTIM_CFGR_COUNTMODE_Pos)      /*!< 0x00800000 */
#define LPTIM_CFGR_COUNTMODE         LPTIM_CFGR_COUNTMODE_Msk                /*!< counter mode enabled */
#define LPTIM_CFGR_ENC_Pos           (24U)
#define LPTIM_CFGR_ENC_Msk           (0x1U << LPTIM_CFGR_ENC_Pos)            /*!< 0x01000000 */
#define LPTIM_CFGR_ENC               LPTIM_CFGR_ENC_Msk                      /*!< Encoder mode enable */

/*******************  Bit definition for LPTIM_CR register  *******************/
#define LPTIM_CR_ENABLE_Pos          (0U)
#define LPTIM_CR_ENABLE_Msk          (0x1U << LPTIM_CR_ENABLE_Pos)           /*!< 0x00000001 */
#define LPTIM_CR_ENABLE              LPTIM_CR_ENABLE_Msk                     /*!< LPTIM enable */
#define LPTIM_CR_SNGSTRT_Pos         (1U)
#define LPTIM_CR_SNGSTRT_Msk         (0x1U << LPTIM_CR_SNGSTRT_Pos)          /*!< 0x00000002 */
#define LPTIM_CR_SNGSTRT             LPTIM_CR_SNGSTRT_Msk                    /*!< LPTIM start in Single mode */
#define LPTIM_CR_CNTSTRT_Pos         (2U)
#define LPTIM_CR_CNTSTRT_Msk         (0x1U << LPTIM_CR_CNTSTRT_Pos)          /*!< 0x00000004 */
#define LPTIM_CR_CNTSTRT             LPTIM_CR_CNTSTRT_Msk                    /*!< Timer start in Continuous mode */
#define LPTIM_CR_COUNTRST_Pos        (3U)
#define LPTIM_CR_COUNTRST_Msk        (0x1U << LPTIM_CR_COUNTRST_Pos)         /*!< 0x00000008 */
#define LPTIM_CR_COUNTRST            LPTIM_CR_COUNTRST_Msk                   /*!< Counter reset */
#define LPTIM_CR_RSTARE_Pos          (4U)
#define LPTIM_CR_RSTARE_Msk          (0x1U << LPTIM_CR_RSTARE_Pos)           /*!< 0x00000010 */
#define LPTIM_CR_RSTARE              LPTIM_CR_RSTARE_Msk                     /*!< Reset after read enable */

/******************  Bit definition for LPTIM_CCR1 register  ******************/
#define LPTIM_CCR1_CCR1_Pos          (0U)
#define LPTIM_CCR1_CCR1_Msk          (0xFFFFU << LPTIM_CCR1_CCR1_Pos)        /*!< 0x0000FFFF */
#define LPTIM_CCR1_CCR1              LPTIM_CCR1_CCR1_Msk                     /*!< Capture/compare 1 value */

/******************  Bit definition for LPTIM_ARR register  *******************/
#define LPTIM_ARR_ARR_Pos            (0U)
#define LPTIM_ARR_ARR_Msk            (0xFFFFU << LPTIM_ARR_ARR_Pos)          /*!< 0x0000FFFF */
#define LPTIM_ARR_ARR                LPTIM_ARR_ARR_Msk                       /*!< Auto reload value */

/******************  Bit definition for LPTIM_CNT register  *******************/
#define LPTIM_CNT_CNT_Pos            (0U)
#define LPTIM_CNT_CNT_Msk            (0xFFFFU << LPTIM_CNT_CNT_Pos)          /*!< 0x0000FFFF */
#define LPTIM_CNT_CNT                LPTIM_CNT_CNT_Msk                       /*!< Counter value */

/******************  Bit definition for LPTIM1_OR register  *******************/
#define LPTIM1_OR_OR_0_Pos            (0U)
#define LPTIM1_OR_OR_0_Msk            (0x1U << LPTIM1_OR_OR_0_Pos)           /*!< 0x00000001 */
#define LPTIM1_OR_OR_0                LPTIM1_OR_OR_0_Msk                     /*!< Option register bit 0 */

/*****************  Bit definition for LPTIM_CFGR2 register  ******************/
#define LPTIM_CFGR2_IN1SEL_Pos       (0U)
#define LPTIM_CFGR2_IN1SEL_Msk       (0x3U << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000003 */
#define LPTIM_CFGR2_IN1SEL           LPTIM_CFGR2_IN1SEL_Msk                  /*!< LPTIM input 1 selection */
#define LPTIM_CFGR2_IN1SEL_0         (0x1U << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000001 */
#define LPTIM_CFGR2_IN1SEL_1         (0x2U << LPTIM_CFGR2_IN1SEL_Pos)        /*!< 0x00000002 */
#define LPTIM_CFGR2_IN2SEL_Pos       (4U)
#define LPTIM_CFGR2_IN2SEL_Msk       (0x3U << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000030 */
#define LPTIM_CFGR2_IN2SEL           LPTIM_CFGR2_IN2SEL_Msk                  /*!< LPTIM input 2 selection */
#define LPTIM_CFGR2_IN2SEL_0         (0x1U << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000010 */
#define LPTIM_CFGR2_IN2SEL_1         (0x2U << LPTIM_CFGR2_IN2SEL_Pos)        /*!< 0x00000020 */
#define LPTIM_CFGR2_IC1SEL_Pos       (16U)
#define LPTIM_CFGR2_IC1SEL_Msk       (0x3U << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00030000 */
#define LPTIM_CFGR2_IC1SEL           LPTIM_CFGR2_IC1SEL_Msk                  /*!< LPTIM input capture 1 selection */
#define LPTIM_CFGR2_IC1SEL_0         (0x1U << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00010000 */
#define LPTIM_CFGR2_IC1SEL_1         (0x2U << LPTIM_CFGR2_IC1SEL_Pos)        /*!< 0x00020000 */
#define LPTIM_CFGR2_IC2SEL_Pos       (20U)
#define LPTIM_CFGR2_IC2SEL_Msk       (0x3U << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00300000 */
#define LPTIM_CFGR2_IC2SEL           LPTIM_CFGR2_IC2SEL_Msk                  /*!< LPTIM input capture 2 selection */
#define LPTIM_CFGR2_IC2SEL_0         (0x1U << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00100000 */
#define LPTIM_CFGR2_IC2SEL_1         (0x2U << LPTIM_CFGR2_IC2SEL_Pos)        /*!< 0x00200000 */

/******************  Bit definition for LPTIM_RCR register  *******************/
#define LPTIM_RCR_REP_Pos            (0U)
#define LPTIM_RCR_REP_Msk            (0xFFU << LPTIM_RCR_REP_Pos)            /*!< 0x000000FF */
#define LPTIM_RCR_REP                LPTIM_RCR_REP_Msk                       /*!< Repetition register value */

/*****************  Bit definition for LPTIM_CCMR1 register  ******************/
#define LPTIM_CCMR1_CC1SEL_Pos       (0U)
#define LPTIM_CCMR1_CC1SEL_Msk       (0x1U << LPTIM_CCMR1_CC1SEL_Pos)        /*!< 0x00000001 */
#define LPTIM_CCMR1_CC1SEL           LPTIM_CCMR1_CC1SEL_Msk                  /*!< Capture/compare 1 selection */
#define LPTIM_CCMR1_CC1E_Pos         (1U)
#define LPTIM_CCMR1_CC1E_Msk         (0x1U << LPTIM_CCMR1_CC1E_Pos)          /*!< 0x00000002 */
#define LPTIM_CCMR1_CC1E             LPTIM_CCMR1_CC1E_Msk                    /*!< Capture/compare 1 output enable */
#define LPTIM_CCMR1_CC1P_Pos         (2U)
#define LPTIM_CCMR1_CC1P_Msk         (0x3U << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x0000000C */
#define LPTIM_CCMR1_CC1P             LPTIM_CCMR1_CC1P_Msk                    /*!< Capture/compare 1 output polarity */
#define LPTIM_CCMR1_CC1P_0           (0x1U << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x00000004 */
#define LPTIM_CCMR1_CC1P_1           (0x2U << LPTIM_CCMR1_CC1P_Pos)          /*!< 0x00000008 */
#define LPTIM_CCMR1_IC1PSC_Pos       (8U)
#define LPTIM_CCMR1_IC1PSC_Msk       (0x3U << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000300 */
#define LPTIM_CCMR1_IC1PSC           LPTIM_CCMR1_IC1PSC_Msk                  /*!< Input capture 1 prescaler */
#define LPTIM_CCMR1_IC1PSC_0         (0x1U << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000100 */
#define LPTIM_CCMR1_IC1PSC_1         (0x2U << LPTIM_CCMR1_IC1PSC_Pos)        /*!< 0x00000200 */
#define LPTIM_CCMR1_IC1F_Pos         (12U)
#define LPTIM_CCMR1_IC1F_Msk         (0x3U << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00003000 */
#define LPTIM_CCMR1_IC1F             LPTIM_CCMR1_IC1F_Msk                    /*!< Input capture 1 filter */
#define LPTIM_CCMR1_IC1F_0           (0x1U << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00001000 */
#define LPTIM_CCMR1_IC1F_1           (0x2U << LPTIM_CCMR1_IC1F_Pos)          /*!< 0x00002000 */
#define LPTIM_CCMR1_CC2SEL_Pos       (16U)
#define LPTIM_CCMR1_CC2SEL_Msk       (0x1U << LPTIM_CCMR1_CC2SEL_Pos)        /*!< 0x00010000 */
#define LPTIM_CCMR1_CC2SEL           LPTIM_CCMR1_CC2SEL_Msk                  /*!< Capture/compare 2 selection */
#define LPTIM_CCMR1_CC2E_Pos         (17U)
#define LPTIM_CCMR1_CC2E_Msk         (0x1U << LPTIM_CCMR1_CC2E_Pos)          /*!< 0x00020000 */
#define LPTIM_CCMR1_CC2E             LPTIM_CCMR1_CC2E_Msk                    /*!< Capture/compare 2 output enable */
#define LPTIM_CCMR1_CC2P_Pos         (18U)
#define LPTIM_CCMR1_CC2P_Msk         (0x3U << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x000C0000 */
#define LPTIM_CCMR1_CC2P             LPTIM_CCMR1_CC2P_Msk                    /*!< Capture/compare 2 output polarity */
#define LPTIM_CCMR1_CC2P_0           (0x1U << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x00040000 */
#define LPTIM_CCMR1_CC2P_1           (0x2U << LPTIM_CCMR1_CC2P_Pos)          /*!< 0x00080000 */
#define LPTIM_CCMR1_IC2PSC_Pos       (24U)
#define LPTIM_CCMR1_IC2PSC_Msk       (0x3U << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x03000000 */
#define LPTIM_CCMR1_IC2PSC           LPTIM_CCMR1_IC2PSC_Msk                  /*!< Input capture 2 prescaler */
#define LPTIM_CCMR1_IC2PSC_0         (0x1U << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x01000000 */
#define LPTIM_CCMR1_IC2PSC_1         (0x2U << LPTIM_CCMR1_IC2PSC_Pos)        /*!< 0x02000000 */
#define LPTIM_CCMR1_IC2F_Pos         (28U)
#define LPTIM_CCMR1_IC2F_Msk         (0x3U << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x30000000 */
#define LPTIM_CCMR1_IC2F             LPTIM_CCMR1_IC2F_Msk                    /*!< Input capture 2 filter */
#define LPTIM_CCMR1_IC2F_0           (0x1U << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x10000000 */
#define LPTIM_CCMR1_IC2F_1           (0x2U << LPTIM_CCMR1_IC2F_Pos)          /*!< 0x20000000 */

/******************  Bit definition for LPTIM_CCR2 register  ******************/
#define LPTIM_CCR2_CCR2_Pos          (0U)
#define LPTIM_CCR2_CCR2_Msk          (0xFFFFU << LPTIM_CCR2_CCR2_Pos)        /*!< 0x0000FFFF */
#define LPTIM_CCR2_CCR2              LPTIM_CCR2_CCR2_Msk                     /*!< Capture/compare 2 value */

/****************  Bit definition for LPTIM_HWCFGR2 register  *****************/
#define LPTIM_HWCFGR2_CFG1_Pos       (0U)
#define LPTIM_HWCFGR2_CFG1_Msk       (0xFU << LPTIM_HWCFGR2_CFG1_Pos)        /*!< 0x0000000F */
#define LPTIM_HWCFGR2_CFG1           LPTIM_HWCFGR2_CFG1_Msk                  /*!< peripheral hardware configuration 1 */
#define LPTIM_HWCFGR2_CFG2_Pos       (8U)
#define LPTIM_HWCFGR2_CFG2_Msk       (0xFFU << LPTIM_HWCFGR2_CFG2_Pos)       /*!< 0x0000FF00 */
#define LPTIM_HWCFGR2_CFG2           LPTIM_HWCFGR2_CFG2_Msk                  /*!< peripheral hardware configuration 2 */
#define LPTIM_HWCFGR2_CFG3_Pos       (16U)
#define LPTIM_HWCFGR2_CFG3_Msk       (0x1U << LPTIM_HWCFGR2_CFG3_Pos)        /*!< 0x00010000 */
#define LPTIM_HWCFGR2_CFG3           LPTIM_HWCFGR2_CFG3_Msk                  /*!< peripheral hardware configuration 3 */

/****************  Bit definition for LPTIM_HWCFGR1 register  *****************/
#define LPTIM_HWCFGR1_CFG1_Pos       (0U)
#define LPTIM_HWCFGR1_CFG1_Msk       (0xFFU << LPTIM_HWCFGR1_CFG1_Pos)       /*!< 0x000000FF */
#define LPTIM_HWCFGR1_CFG1           LPTIM_HWCFGR1_CFG1_Msk                  /*!< peripheral hardware configuration 1 */
#define LPTIM_HWCFGR1_CFG2_Pos       (8U)
#define LPTIM_HWCFGR1_CFG2_Msk       (0xFFU << LPTIM_HWCFGR1_CFG2_Pos)       /*!< 0x0000FF00 */
#define LPTIM_HWCFGR1_CFG2           LPTIM_HWCFGR1_CFG2_Msk                  /*!< peripheral hardware configuration 2 */
#define LPTIM_HWCFGR1_CFG3_Pos       (16U)
#define LPTIM_HWCFGR1_CFG3_Msk       (0xFU << LPTIM_HWCFGR1_CFG3_Pos)        /*!< 0x000F0000 */
#define LPTIM_HWCFGR1_CFG3           LPTIM_HWCFGR1_CFG3_Msk                  /*!< peripheral hardware configuration 3 */
#define LPTIM_HWCFGR1_CFG4_Pos       (24U)
#define LPTIM_HWCFGR1_CFG4_Msk       (0xFFU << LPTIM_HWCFGR1_CFG4_Pos)       /*!< 0xFF000000 */
#define LPTIM_HWCFGR1_CFG4           LPTIM_HWCFGR1_CFG4_Msk                  /*!< peripheral hardware configuration 4 */

/******************  Bit definition for LPTIM_VERR register  ******************/
#define LPTIM_VERR_MINREV_Pos        (0U)
#define LPTIM_VERR_MINREV_Msk        (0xFU << LPTIM_VERR_MINREV_Pos)         /*!< 0x0000000F */
#define LPTIM_VERR_MINREV            LPTIM_VERR_MINREV_Msk                   /*!< Minor revision */
#define LPTIM_VERR_MAJREV_Pos        (4U)
#define LPTIM_VERR_MAJREV_Msk        (0xFU << LPTIM_VERR_MAJREV_Pos)         /*!< 0x000000F0 */
#define LPTIM_VERR_MAJREV            LPTIM_VERR_MAJREV_Msk                   /*!< Major revision */

/******************  Bit definition for LPTIM_PIDR register  ******************/
#define LPTIM_PIDR_P_ID_Pos          (0U)
#define LPTIM_PIDR_P_ID_Msk          (0xFFFFFFFFU << LPTIM_PIDR_P_ID_Pos)    /*!< 0xFFFFFFFF */
#define LPTIM_PIDR_P_ID              LPTIM_PIDR_P_ID_Msk                     /*!< Peripheral type identifier */

/******************  Bit definition for LPTIM_SIDR register  ******************/
#define LPTIM_SIDR_S_ID_Pos          (0U)
#define LPTIM_SIDR_S_ID_Msk          (0xFFFFFFFFU << LPTIM_SIDR_S_ID_Pos)    /*!< 0xFFFFFFFF */
#define LPTIM_SIDR_S_ID              LPTIM_SIDR_S_ID_Msk                     /*!< Registers map size identifier */

/******************************************************************************/
/*                                                                            */
/*                                 MDF/ADF                                    */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for MDF/ADF_GCR register  ********************/
#define MDF_GCR_TRGO_Pos                    (0U)
#define MDF_GCR_TRGO_Msk                    (0x1UL << MDF_GCR_TRGO_Pos)             /*!< 0x00000001 */
#define MDF_GCR_TRGO                        MDF_GCR_TRGO_Msk                        /*!<Trigger output control */
#define MDF_GCR_ILVNB_Pos                   (4U)
#define MDF_GCR_ILVNB_Msk                   (0xFUL << MDF_GCR_ILVNB_Pos)            /*!< 0x000000F0 */
#define MDF_GCR_ILVNB                       MDF_GCR_ILVNB_Msk                       /*!< Interleaved Number */

/*******************  Bit definition for MDF/ADF_CKGCR register  ********************/
#define MDF_CKGCR_CKDEN_Pos                 (0U)
#define MDF_CKGCR_CKDEN_Msk                 (0x1UL << MDF_CKGCR_CKDEN_Pos)          /*!< 0x00000001 */
#define MDF_CKGCR_CKDEN                     MDF_CKGCR_CKDEN_Msk                     /*!<CKGEN diveders enable */
#define MDF_CKGCR_CCK0EN_Pos                (1U)
#define MDF_CKGCR_CCK0EN_Msk                (0x1UL << MDF_CKGCR_CCK0EN_Pos)         /*!< 0x00000002 */
#define MDF_CKGCR_CCK0EN                    MDF_CKGCR_CCK0EN_Msk                    /*!<CCK0 clock enable */
#define MDF_CKGCR_CCK1EN_Pos                (2U)
#define MDF_CKGCR_CCK1EN_Msk                (0x1UL << MDF_CKGCR_CCK1EN_Pos)         /*!< 0x00000004 */
#define MDF_CKGCR_CCK1EN                    MDF_CKGCR_CCK1EN_Msk                    /*!<CCK1 clock enable */
#define MDF_CKGCR_CKGMOD_Pos                (4U)
#define MDF_CKGCR_CKGMOD_Msk                (0x1UL << MDF_CKGCR_CKGMOD_Pos)         /*!< 0x00000010 */
#define MDF_CKGCR_CKGMOD                    MDF_CKGCR_CKGMOD_Msk                    /*!<Clock genartor mode */
#define MDF_CKGCR_CCK0DIR_Pos               (5U)
#define MDF_CKGCR_CCK0DIR_Msk               (0x1UL << MDF_CKGCR_CCK0DIR_Pos)        /*!< 0x00000020 */
#define MDF_CKGCR_CCK0DIR                   MDF_CKGCR_CCK0DIR_Msk                   /*!<CCK0 clock direction */
#define MDF_CKGCR_CCK1DIR_Pos               (6U)
#define MDF_CKGCR_CCK1DIR_Msk               (0x1UL << MDF_CKGCR_CCK1DIR_Pos)        /*!< 0x00000040 */
#define MDF_CKGCR_CCK1DIR                   MDF_CKGCR_CCK1DIR_Msk                   /*!<CCK1 clock direction */
#define MDF_CKGCR_TRGSENS_Pos               (8U)
#define MDF_CKGCR_TRGSENS_Msk               (0x1UL << MDF_CKGCR_TRGSENS_Pos)        /*!< 0x00000100 */
#define MDF_CKGCR_TRGSENS                   MDF_CKGCR_TRGSENS_Msk                   /*!<CKGEN trigger sensitivity selection */
#define MDF_CKGCR_TRGSRC_Pos                (12U)
#define MDF_CKGCR_TRGSRC_Msk                (0xFUL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x0000F000 */
#define MDF_CKGCR_TRGSRC                    MDF_CKGCR_TRGSRC_Msk                    /*!<Digital Filter trigger signal selection */
#define MDF_CKGCR_TRGSRC_0                  (0x1UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00001000 */
#define MDF_CKGCR_TRGSRC_1                  (0x2UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00002000 */
#define MDF_CKGCR_TRGSRC_2                  (0x4UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00004000 */
#define MDF_CKGCR_TRGSRC_3                  (0x8UL << MDF_CKGCR_TRGSRC_Pos)         /*!< 0x00008000 */
#define MDF_CKGCR_CCKDIV_Pos                (16U)
#define MDF_CKGCR_CCKDIV_Msk                (0xFUL << MDF_CKGCR_CCKDIV_Pos)         /*!< 0x000F0000 */
#define MDF_CKGCR_CCKDIV                    MDF_CKGCR_CCKDIV_Msk                    /*!<Divider to controle the MDF_CCK clock */
#define MDF_CKGCR_PROCDIV_Pos               (24U)
#define MDF_CKGCR_PROCDIV_Msk               (0x7FUL << MDF_CKGCR_PROCDIV_Pos)       /*!< 0x7F000000 */
#define MDF_CKGCR_PROCDIV                   MDF_CKGCR_PROCDIV_Msk                   /*!<Divider to controle the serial interface clock */
#define MDF_CKGCR_CCKACTIVE_Pos             (31U)
#define MDF_CKGCR_CCKACTIVE_Msk             (0x1UL << MDF_CKGCR_CCKACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_CKGCR_CCKACTIVE                 MDF_CKGCR_CCKACTIVE_Msk                 /*!<Clock generator active flag */

/*******************  Bit definition for MDF/ADF_OR register  ********************/
#define MDF_OR_OPTION_Pos                   (0U)
#define MDF_OR_OPTION_Msk                   (0xFFFFFFFFUL << MDF_OR_OPTION_Pos)     /*!< 0xFFFFFFFF */
#define MDF_OR_OPTION                       MDF_OR_OPTION_Msk                       /*!<Option Controle Bits */

/*******************  Bit definition for MDF/ADF_SITFxCR register  ********************/
#define MDF_SITFCR_SITFEN_Pos               (0U)
#define MDF_SITFCR_SITFEN_Msk               (0x1UL << MDF_SITFCR_SITFEN_Pos)        /*!< 0x00000001 */
#define MDF_SITFCR_SITFEN                   MDF_SITFCR_SITFEN_Msk                   /*!<Serial interface enable */
#define MDF_SITFCR_SCKSRC_Pos               (1U)
#define MDF_SITFCR_SCKSRC_Msk               (0x3UL << MDF_SITFCR_SCKSRC_Pos)        /*!< 0x00000006 */
#define MDF_SITFCR_SCKSRC                   MDF_SITFCR_SCKSRC_Msk                   /*!<Serial clock source */
#define MDF_SITFCR_SCKSRC_0                 (0x1UL << MDF_SITFCR_SCKSRC_Pos)
#define MDF_SITFCR_SCKSRC_1                 (0x2UL << MDF_SITFCR_SCKSRC_Pos)
#define MDF_SITFCR_SITFMOD_Pos              (4U)
#define MDF_SITFCR_SITFMOD_Msk              (0x3UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000030 */
#define MDF_SITFCR_SITFMOD                  MDF_SITFCR_SITFMOD_Msk                  /*!<Serial interface type */
#define MDF_SITFCR_SITFMOD_0                (0x1UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000010 */
#define MDF_SITFCR_SITFMOD_1                (0x2UL << MDF_SITFCR_SITFMOD_Pos)       /*!< 0x00000020 */
#define MDF_SITFCR_STH_Pos                  (8U)
#define MDF_SITFCR_STH_Msk                  (0x1FUL << MDF_SITFCR_STH_Pos)          /*!< 0x00001F00 */
#define MDF_SITFCR_STH                      MDF_SITFCR_STH_Msk                      /*!<Manchester Symbol threshold / SPI threshold */
#define MDF_SITFCR_SITFACTIVE_Pos           (31U)
#define MDF_SITFCR_SITFACTIVE_Msk           (0x1UL << MDF_SITFCR_SITFACTIVE_Pos)    /*!< 0x80000000 */
#define MDF_SITFCR_SITFACTIVE               MDF_SITFCR_SITFACTIVE_Msk               /*!<Serial interface active flag */

/*******************  Bit definition for MDF/ADF_BSMXxCR register  ********************/
#define MDF_BSMXCR_BSSEL_Pos                (0U)
#define MDF_BSMXCR_BSSEL_Msk                (0x1FUL << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x0000001F */
#define MDF_BSMXCR_BSSEL                    MDF_BSMXCR_BSSEL_Msk                    /*!<Bit Streal selection */
#define MDF_BSMXCR_BSSEL_0                  (0x1UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000001 */
#define MDF_BSMXCR_BSSEL_1                  (0x2UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000002 */
#define MDF_BSMXCR_BSSEL_2                  (0x4UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000004 */
#define MDF_BSMXCR_BSSEL_3                  (0x8UL  << MDF_BSMXCR_BSSEL_Pos)        /*!< 0x00000008 */
#define MDF_BSMXCR_BSSEL_4                  (0x10UL  << MDF_BSMXCR_BSSEL_Pos)       /*!< 0x00000010 */
#define MDF_BSMXCR_BSMXACTIVATE_Pos         (31U)
#define MDF_BSMXCR_BSMXACTIVATE_Msk         (0x1UL << MDF_BSMXCR_BSMXACTIVATE_Pos)  /*!< 0x80000000 */
#define MDF_BSMXCR_BSMXACTIVATE             MDF_BSMXCR_BSMXACTIVATE_Msk             /*!<Bit Streal activation flag */

/*******************  Bit definition for MDF/ADF_DFLTxCR register  ********************/
#define MDF_DFLTCR_DFLTEN_Pos               (0U)
#define MDF_DFLTCR_DFLTEN_Msk               (0x1UL << MDF_DFLTCR_DFLTEN_Pos)        /*!< 0x00000001 */
#define MDF_DFLTCR_DFLTEN                   MDF_DFLTCR_DFLTEN_Msk                   /*!<Digital filter enable */
#define MDF_DFLTCR_DMAEN_Pos                (1U)
#define MDF_DFLTCR_DMAEN_Msk                (0x1UL << MDF_DFLTCR_DMAEN_Pos)         /*!< 0x00000002 */
#define MDF_DFLTCR_DMAEN                    MDF_DFLTCR_DMAEN_Msk                    /*!<DMA request enable */
#define MDF_DFLTCR_FTH_Pos                  (2U)
#define MDF_DFLTCR_FTH_Msk                  (0x1UL << MDF_DFLTCR_FTH_Pos)           /*!< 0x00000004 */
#define MDF_DFLTCR_FTH                      MDF_DFLTCR_FTH_Msk                      /*!<RXFIFO Threshold selection */
#define MDF_DFLTCR_ACQMOD_Pos               (4U)
#define MDF_DFLTCR_ACQMOD_Msk               (0x7UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_ACQMOD                   MDF_DFLTCR_ACQMOD_Msk                   /*!<Digital filter trigger mode */
#define MDF_DFLTCR_ACQMOD_0                 (0x1UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000010 */
#define MDF_DFLTCR_ACQMOD_1                 (0x2UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000020 */
#define MDF_DFLTCR_ACQMOD_2                 (0x4UL << MDF_DFLTCR_ACQMOD_Pos)        /*!< 0x00000040 */
#define MDF_DFLTCR_TRGSENS_Pos              (8U)
#define MDF_DFLTCR_TRGSENS_Msk              (0x1UL << MDF_DFLTCR_TRGSENS_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_TRGSENS                  MDF_DFLTCR_TRGSENS_Msk                  /*!<Digital filter trigger sensitivity selection */
#define MDF_DFLTCR_TRGSRC_Pos               (12U)
#define MDF_DFLTCR_TRGSRC_Msk               (0xFUL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_TRGSRC                   MDF_DFLTCR_TRGSRC_Msk                   /*!<Digital filter trigger signal selection */
#define MDF_DFLTCR_TRGSRC_0                 (0x1UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00001000 */
#define MDF_DFLTCR_TRGSRC_1                 (0x2UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00002000 */
#define MDF_DFLTCR_TRGSRC_2                 (0x4UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00004000 */
#define MDF_DFLTCR_TRGSRC_3                 (0x8UL << MDF_DFLTCR_TRGSRC_Pos)        /*!< 0x00008000 */
#define MDF_DFLTCR_SNPSFMT_Pos              (16U)
#define MDF_DFLTCR_SNPSFMT_Msk              (0x1UL << MDF_DFLTCR_SNPSFMT_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_SNPSFMT                  MDF_DFLTCR_SNPSFMT_Msk                  /*!<SnapShot Data format */
#define MDF_DFLTCR_NBDIS_Pos                (20U)
#define MDF_DFLTCR_NBDIS_Msk                (0xFFUL << MDF_DFLTCR_NBDIS_Pos)        /*!< 0x00000004 */
#define MDF_DFLTCR_NBDIS                    MDF_DFLTCR_NBDIS_Msk                    /*!<Number of samples to be discard */
#define MDF_DFLTCR_DFLTRUN_Pos              (30U)
#define MDF_DFLTCR_DFLTRUN_Msk              (0x1UL << MDF_DFLTCR_DFLTRUN_Pos)       /*!< 0x00000004 */
#define MDF_DFLTCR_DFLTRUN                  MDF_DFLTCR_DFLTRUN_Msk                  /*!<Digital filter run status flag */
#define MDF_DFLTCR_DFLTACTIVE_Pos           (31U)
#define MDF_DFLTCR_DFLTACTIVE_Msk           (0x1UL << MDF_DFLTCR_DFLTACTIVE_Pos)    /*!< 0x00000004 */
#define MDF_DFLTCR_DFLTACTIVE               MDF_DFLTCR_DFLTACTIVE_Msk               /*!<Digital filter active flag */

/*******************  Bit definition for MDF/ADF_DFLTxCICR register  ********************/
#define MDF_DFLTCICR_DATSRC_Pos             (0U)
#define MDF_DFLTCICR_DATSRC_Msk             (0x3UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000003 */
#define MDF_DFLTCICR_DATSRC                 MDF_DFLTCICR_DATSRC_Msk                 /*!<Source Data for the digital filter */
#define MDF_DFLTCICR_DATSRC_0               (0x1UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000001 */
#define MDF_DFLTCICR_DATSRC_1               (0x2UL << MDF_DFLTCICR_DATSRC_Pos)      /*!< 0x00000002 */
#define MDF_DFLTCICR_CICMOD_Pos             (4U)
#define MDF_DFLTCICR_CICMOD_Msk             (0x7UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000070 */
#define MDF_DFLTCICR_CICMOD                 MDF_DFLTCICR_CICMOD_Msk                 /*!<Select the CIC Mode*/
#define MDF_DFLTCICR_CICMOD_0               (0x1UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000010 */
#define MDF_DFLTCICR_CICMOD_1               (0x2UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000020 */
#define MDF_DFLTCICR_CICMOD_2               (0x4UL << MDF_DFLTCICR_CICMOD_Pos)      /*!< 0x00000030 */
#define MDF_DFLTCICR_MCICD_Pos              (8U)
#define MDF_DFLTCICR_MCICD_Msk              (0x1FFUL << MDF_DFLTCICR_MCICD_Pos)     /*!< 0x0001FF00 */
#define MDF_DFLTCICR_MCICD                  MDF_DFLTCICR_MCICD_Msk                  /*!<CIC decimation ratio selection*/
#define MDF_DFLTCICR_SCALE_Pos              (20U)
#define MDF_DFLTCICR_SCALE_Msk              (0x3FUL << MDF_DFLTCICR_SCALE_Pos)      /*!< 0x03F00000 */
#define MDF_DFLTCICR_SCALE                  MDF_DFLTCICR_SCALE_Msk                  /*!<Scaling factor selection*/

/*******************  Bit definition for MDF/ADF_DFLTxRSFR register  ********************/
#define MDF_DFLTRSFR_RSFLTBYP_Pos           (0U)
#define MDF_DFLTRSFR_RSFLTBYP_Msk           (0x1UL << MDF_DFLTRSFR_RSFLTBYP_Pos)    /*!< 0x00000001 */
#define MDF_DFLTRSFR_RSFLTBYP               MDF_DFLTRSFR_RSFLTBYP_Msk               /*!<Reshape filter bypass*/
#define MDF_DFLTRSFR_RSFLTD_Pos             (4U)
#define MDF_DFLTRSFR_RSFLTD_Msk             (0x1UL << MDF_DFLTRSFR_RSFLTD_Pos)      /*!< 0x00000010 */
#define MDF_DFLTRSFR_RSFLTD                 MDF_DFLTRSFR_RSFLTD_Msk                 /*!<Reshape filter decimation ratio*/
#define MDF_DFLTRSFR_HPFBYP_Pos             (7U)
#define MDF_DFLTRSFR_HPFBYP_Msk             (0x1UL << MDF_DFLTRSFR_HPFBYP_Pos)      /*!< 0x00000080 */
#define MDF_DFLTRSFR_HPFBYP                 MDF_DFLTRSFR_HPFBYP_Msk                 /*!<High-pass filter bypass*/
#define MDF_DFLTRSFR_HPFC_Pos               (8U)
#define MDF_DFLTRSFR_HPFC_Msk               (0x3UL << MDF_DFLTRSFR_HPFC_Pos)        /*!< 0x00000080 */
#define MDF_DFLTRSFR_HPFC                   MDF_DFLTRSFR_HPFC_Msk                   /*!<High-pass filter cut-off frequency*/
#define MDF_DFLTRSFR_HPFC_0                 (0x1UL << MDF_DFLTRSFR_HPFC_Pos)
#define MDF_DFLTRSFR_HPFC_1                 (0x2UL << MDF_DFLTRSFR_HPFC_Pos)

/*******************  Bit definition for MDF/ADF_DFLTxINTR register  ********************/
#define MDF_DFLTINTR_INTDIV_Pos             (0U)
#define MDF_DFLTINTR_INTDIV_Msk             (0x3UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000003 */
#define MDF_DFLTINTR_INTDIV                 MDF_DFLTINTR_INTDIV_Msk                 /*!<Integrator output dividion*/
#define MDF_DFLTINTR_INTDIV_0               (0x1UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000001 */
#define MDF_DFLTINTR_INTDIV_1               (0x2UL << MDF_DFLTINTR_INTDIV_Pos)      /*!< 0x00000002 */
#define MDF_DFLTINTR_INTVAL_Pos             (4U)
#define MDF_DFLTINTR_INTVAL_Msk             (0x7FUL << MDF_DFLTINTR_INTVAL_Pos)     /*!< 0x000007F0 */
#define MDF_DFLTINTR_INTVAL                 MDF_DFLTINTR_INTVAL_Msk                 /*!<Integrator value selection*/

/*******************  Bit definition for MDF/ADF_OLDxCR register  ********************/
#define MDF_OLDCR_OLDEN_Pos                 (0U)
#define MDF_OLDCR_OLDEN_Msk                 (0x1UL << MDF_OLDCR_OLDEN_Pos)          /*!< 0x00000001 */
#define MDF_OLDCR_OLDEN                     MDF_OLDCR_OLDEN_Msk                     /*!<OLD enable*/
#define MDF_OLDCR_THINB_Pos                 (1U)
#define MDF_OLDCR_THINB_Msk                 (0x1UL << MDF_OLDCR_THINB_Pos)          /*!< 0x00000002 */
#define MDF_OLDCR_THINB                     MDF_OLDCR_THINB_Msk                     /*!<OLD theshold in band*/
#define MDF_OLDCR_BKOLD_Pos                 (4U)
#define MDF_OLDCR_BKOLD_Msk                 (0xFUL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x000000F0 */
#define MDF_OLDCR_BKOLD                     MDF_OLDCR_BKOLD_Msk                     /*!<Bteak signal assignement for OLD*/
#define MDF_OLDCR_BKOLD_0                   (0x1UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000010 */
#define MDF_OLDCR_BKOLD_1                   (0x2UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000020 */
#define MDF_OLDCR_BKOLD_2                   (0x4UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000040 */
#define MDF_OLDCR_BKOLD_3                   (0x8UL << MDF_OLDCR_BKOLD_Pos)          /*!< 0x00000080 */
#define MDF_OLDCR_ACICN_Pos                 (12U)
#define MDF_OLDCR_ACICN_Msk                 (0x3UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00003000 */
#define MDF_OLDCR_ACICN                     MDF_OLDCR_ACICN_Msk                     /*!<OLD CIC order selection*/
#define MDF_OLDCR_ACICN_0                   (0x1UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00001000 */
#define MDF_OLDCR_ACICN_1                   (0x2UL << MDF_OLDCR_ACICN_Pos)          /*!< 0x00002000 */
#define MDF_OLDCR_ACICD_Pos                 (17U)
#define MDF_OLDCR_ACICD_Msk                 (0x1FUL << MDF_OLDCR_ACICD_Pos)         /*!< 0x003E0000 */
#define MDF_OLDCR_ACICD                     MDF_OLDCR_ACICD_Msk                     /*!<OLD CIC decimation ratio selection*/
#define MDF_OLDCR_OLDACTIVE_Pos             (31U)
#define MDF_OLDCR_OLDACTIVE_Msk             (0x1UL << MDF_OLDCR_OLDACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_OLDCR_OLDACTIVE                 MDF_OLDCR_OLDACTIVE_Msk                 /*!<OLD active flag*/

/*******************  Bit definition for MDF/ADF_OLDxTHLR register  ********************/
#define MDF_OLDTHLR_OLDTHL_Pos              (0U)
#define MDF_OLDTHLR_OLDTHL_Msk              (0x3FFFFFFUL << MDF_OLDTHLR_OLDTHL_Pos) /*!< 0x03FFFFFF */
#define MDF_OLDTHLR_OLDTHL                  MDF_OLDTHLR_OLDTHL_Msk                  /*!<OLD Low theshold value*/

/*******************  Bit definition for MDF/ADF_OLDxTHHR register  ********************/
#define MDF_OLDTHHR_OLDTHH_Pos              (0U)
#define MDF_OLDTHHR_OLDTHH_Msk              (0x3FFFFFFUL << MDF_OLDTHHR_OLDTHH_Pos) /*!< 0x03FFFFFF */
#define MDF_OLDTHHR_OLDTHH                  MDF_OLDTHHR_OLDTHH_Msk                  /*!<OLD High theshold value*/

/*******************  Bit definition for MDF/ADF_DLYxCR register  ********************/
#define MDF_DLYCR_SKPDLY_Pos                (0U)
#define MDF_DLYCR_SKPDLY_Msk                (0x7FUL << MDF_DLYCR_SKPDLY_Pos)        /*!< 0x0000007F */
#define MDF_DLYCR_SKPDLY                    MDF_DLYCR_SKPDLY_Msk                    /*!<Delay to apply to a bitstream*/
#define MDF_DLYCR_SKPBF_Pos                 (31U)
#define MDF_DLYCR_SKPBF_Msk                 (0x1UL << MDF_DLYCR_SKPBF_Pos)          /*!< 0x80000000 */
#define MDF_DLYCR_SKPBF                     MDF_DLYCR_SKPBF_Msk                     /*!<DSkip Busy Flag*/

/*******************  Bit definition for MDF/ADF_SCDxCR register  ********************/
#define MDF_SCDCR_SCDEN_Pos                 (0U)
#define MDF_SCDCR_SCDEN_Msk                 (0x1UL << MDF_SCDCR_SCDEN_Pos)          /*!< 0x00000001 */
#define MDF_SCDCR_SCDEN                     MDF_SCDCR_SCDEN_Msk                     /*!<Short circuit detector enable*/
#define MDF_SCDCR_BKSCD_Pos                 (4U)
#define MDF_SCDCR_BKSCD_Msk                 (0xFUL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x000000F0 */
#define MDF_SCDCR_BKSCD                     MDF_SCDCR_BKSCD_Msk                     /*!<Break signal assignement to short circuit detector */
#define MDF_SCDCR_BKSCD_0                   (0x1UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000010 */
#define MDF_SCDCR_BKSCD_1                   (0x2UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000020 */
#define MDF_SCDCR_BKSCD_2                   (0x4UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000040 */
#define MDF_SCDCR_BKSCD_3                   (0x8UL << MDF_SCDCR_BKSCD_Pos)          /*!< 0x00000080 */
#define MDF_SCDCR_SCDT_Pos                  (12U)
#define MDF_SCDCR_SCDT_Msk                  (0xFFUL << MDF_SCDCR_SCDT_Pos)          /*!< 0x00000FF00 */
#define MDF_SCDCR_SCDT                      MDF_SCDCR_SCDT_Msk                      /*!<Short circuit detector threshold*/
#define MDF_SCDCR_SCDACTIVE_Pos             (31U)
#define MDF_SCDCR_SCDACTIVE_Msk             (0x1UL << MDF_SCDCR_SCDACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_SCDCR_SCDACTIVE                 MDF_SCDCR_SCDACTIVE_Msk                 /*!<Short circuit detector active flag*/

/*******************  Bit definition for MDF/ADF_DFLTIER register  ********************/
#define MDF_DFLTIER_FTHIE_Pos               (0U)
#define MDF_DFLTIER_FTHIE_Msk               (0x1UL << MDF_DFLTIER_FTHIE_Pos)        /*!< 0x00000001 */
#define MDF_DFLTIER_FTHIE                   MDF_DFLTIER_FTHIE_Msk                   /*!<RXFIFO threshold interrupt enable*/
#define MDF_DFLTIER_DOVRIE_Pos              (1U)
#define MDF_DFLTIER_DOVRIE_Msk              (0x1UL << MDF_DFLTIER_DOVRIE_Pos)       /*!< 0x00000002 */
#define MDF_DFLTIER_DOVRIE                  MDF_DFLTIER_DOVRIE_Msk                  /*!<Data overflow interrupt enable*/
#define MDF_DFLTIER_SSDRIE_Pos              (2U)
#define MDF_DFLTIER_SSDRIE_Msk              (0x1UL << MDF_DFLTIER_SSDRIE_Pos)       /*!< 0x00000004 */
#define MDF_DFLTIER_SSDRIE                  MDF_DFLTIER_SSDRIE_Msk                  /*!<Snapshot data ready interrupt enable*/
#define MDF_DFLTIER_OLDIE_Pos               (4U)
#define MDF_DFLTIER_OLDIE_Msk               (0x1UL << MDF_DFLTIER_OLDIE_Pos)        /*!< 0x00000010 */
#define MDF_DFLTIER_OLDIE                   MDF_DFLTIER_OLDIE_Msk                   /*!<OLD interrupt enable*/
#define MDF_DFLTIER_SSOVRIE_Pos             (7U)
#define MDF_DFLTIER_SSOVRIE_Msk             (0x1UL << MDF_DFLTIER_SSOVRIE_Pos)      /*!< 0x00000080 */
#define MDF_DFLTIER_SSOVRIE                 MDF_DFLTIER_SSOVRIE_Msk                 /*!<Snapshot overrun interrupt enable*/
#define MDF_DFLTIER_SCDIE_Pos               (8U)
#define MDF_DFLTIER_SCDIE_Msk               (0x1UL << MDF_DFLTIER_SCDIE_Pos)        /*!< 0x00000100 */
#define MDF_DFLTIER_SCDIE                   MDF_DFLTIER_SCDIE_Msk                   /*!<Short circuit dtector interrupt enable*/
#define MDF_DFLTIER_SATIE_Pos               (9U)
#define MDF_DFLTIER_SATIE_Msk               (0x1UL << MDF_DFLTIER_SATIE_Pos)        /*!< 0x00000200 */
#define MDF_DFLTIER_SATIE                   MDF_DFLTIER_SATIE_Msk                   /*!<Saturation detection interrupt enable*/
#define MDF_DFLTIER_CKABIE_Pos              (10U)
#define MDF_DFLTIER_CKABIE_Msk              (0x1UL << MDF_DFLTIER_CKABIE_Pos)       /*!< 0x00000400 */
#define MDF_DFLTIER_CKABIE                  MDF_DFLTIER_CKABIE_Msk                  /*!<Clock absence detection interrupt enable*/
#define MDF_DFLTIER_RFOVRIE_Pos             (11U)
#define MDF_DFLTIER_RFOVRIE_Msk             (0x1UL << MDF_DFLTIER_RFOVRIE_Pos)      /*!< 0x00000800 */
#define MDF_DFLTIER_RFOVRIE                 MDF_DFLTIER_RFOVRIE_Msk                 /*!<reshape filter overrun interrupt enable*/
#define MDF_DFLTIER_SDDETIE_Pos             (12U)
#define MDF_DFLTIER_SDDETIE_Msk             (0x1UL << MDF_DFLTIER_SDDETIE_Pos)      /*!< 0x00001000 */
#define MDF_DFLTIER_SDDETIE                 MDF_DFLTIER_SDDETIE_Msk                 /*!<SAD interrupt enable*/
#define MDF_DFLTIER_SDLVLIE_Pos             (13U)
#define MDF_DFLTIER_SDLVLIE_Msk             (0x1UL << MDF_DFLTIER_SDLVLIE_Pos)      /*!< 0x00002000 */
#define MDF_DFLTIER_SDLVLIE                 MDF_DFLTIER_SDLVLIE_Msk                 /*!<Sound level value ready interrupt enable*/

/*******************  Bit definition for MDF/ADF_DFLTISR register  ********************/
#define MDF_DFLTISR_FTHF_Pos                (0U)
#define MDF_DFLTISR_FTHF_Msk                (0x1UL << MDF_DFLTISR_FTHF_Pos)         /*!< 0x00000001 */
#define MDF_DFLTISR_FTHF                    MDF_DFLTISR_FTHF_Msk                    /*!<RXFIFO threshold interrupt flag*/
#define MDF_DFLTISR_DOVRF_Pos               (1U)
#define MDF_DFLTISR_DOVRF_Msk               (0x1UL << MDF_DFLTISR_DOVRF_Pos)        /*!< 0x00000002 */
#define MDF_DFLTISR_DOVRF                   MDF_DFLTISR_DOVRF_Msk                   /*!<Data overflow interrupt flag*/
#define MDF_DFLTISR_SSDRF_Pos               (2U)
#define MDF_DFLTISR_SSDRF_Msk               (0x1UL << MDF_DFLTISR_SSDRF_Pos)        /*!< 0x00000004 */
#define MDF_DFLTISR_SSDRF                   MDF_DFLTISR_SSDRF_Msk                   /*!<Snapshot data ready interrupt flag*/
#define MDF_DFLTISR_RXNEF_Pos               (3U)
#define MDF_DFLTISR_RXNEF_Msk               (0x1UL << MDF_DFLTISR_RXNEF_Pos)        /*!< 0x00000008 */
#define MDF_DFLTISR_RXNEF                   MDF_DFLTISR_RXNEF_Msk                   /*!<Snapshot data ready interrupt flag*/
#define MDF_DFLTISR_OLDF_Pos                (4U)
#define MDF_DFLTISR_OLDF_Msk                (0x1UL << MDF_DFLTISR_OLDF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_OLDF                    MDF_DFLTISR_OLDF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_THLF_Pos                (5U)
#define MDF_DFLTISR_THLF_Msk                (0x1UL << MDF_DFLTISR_THLF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_THLF                    MDF_DFLTISR_THLF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_THHF_Pos                (6U)
#define MDF_DFLTISR_THHF_Msk                (0x1UL << MDF_DFLTISR_THHF_Pos)         /*!< 0x00000010 */
#define MDF_DFLTISR_THHF                    MDF_DFLTISR_THHF_Msk                    /*!<OLD interrupt flag*/
#define MDF_DFLTISR_SSOVRF_Pos              (7U)
#define MDF_DFLTISR_SSOVRF_Msk              (0x1UL << MDF_DFLTISR_SSOVRF_Pos)      /*!< 0x00000080 */
#define MDF_DFLTISR_SSOVRF                  MDF_DFLTISR_SSOVRF_Msk                  /*!<Snapshot overrun interrupt flag*/
#define MDF_DFLTISR_SCDF_Pos                (8U)
#define MDF_DFLTISR_SCDF_Msk                (0x1UL << MDF_DFLTISR_SCDF_Pos)         /*!< 0x00000100 */
#define MDF_DFLTISR_SCDF                    MDF_DFLTISR_SCDF_Msk                    /*!<Short circuit dtector interrupt flag*/
#define MDF_DFLTISR_SATF_Pos                (9U)
#define MDF_DFLTISR_SATF_Msk                (0x1UL << MDF_DFLTISR_SATF_Pos)         /*!< 0x00000200 */
#define MDF_DFLTISR_SATF                    MDF_DFLTISR_SATF_Msk                    /*!<Saturation detection interrupt flag*/
#define MDF_DFLTISR_CKABF_Pos               (10U)
#define MDF_DFLTISR_CKABF_Msk               (0x1UL << MDF_DFLTISR_CKABF_Pos)        /*!< 0x00000400 */
#define MDF_DFLTISR_CKABF                   MDF_DFLTISR_CKABF_Msk                   /*!<Clock absence detection interrupt flag*/
#define MDF_DFLTISR_RFOVRF_Pos              (11U)
#define MDF_DFLTISR_RFOVRF_Msk              (0x1UL << MDF_DFLTISR_RFOVRF_Pos)       /*!< 0x00000800 */
#define MDF_DFLTISR_RFOVRF                  MDF_DFLTISR_RFOVRF_Msk                  /*!<reshape filter overrun interrupt flag*/
#define MDF_DFLTISR_SDDETF_Pos              (12U)
#define MDF_DFLTISR_SDDETF_Msk              (0x1UL << MDF_DFLTISR_SDDETF_Pos)        /*!< 0x00001000 */
#define MDF_DFLTISR_SDDETF                  MDF_DFLTISR_SDDETF_Msk                  /*!<SAD interrupt flag*/
#define MDF_DFLTISR_SDLVLF_Pos              (13U)
#define MDF_DFLTISR_SDLVLF_Msk              (0x1UL << MDF_DFLTISR_SDLVLF_Pos)       /*!< 0x00002000 */
#define MDF_DFLTISR_SDLVLF                  MDF_DFLTISR_SDLVLF_Msk                  /*!<Sound level value ready interrupt flag*/

/*******************  Bit definition for MDF/ADF_OECCR register  ********************/
#define MDF_OECCR_OFFSET_Pos                (0U)
#define MDF_OECCR_OFFSET_Msk                (0x3FFFFFFUL << MDF_OECCR_OFFSET_Pos)   /*!< 0x03FFFFFF */
#define MDF_OECCR_OFFSET                    MDF_OECCR_OFFSET_Msk                    /*!<Short circuit detector enable*/

/*******************  Bit definition for MDF/ADF_SADCR register  ********************/
#define MDF_SADCR_SADEN_Pos                 (0U)
#define MDF_SADCR_SADEN_Msk                 (0x1UL << MDF_SADCR_SADEN_Pos)          /*!< 0x00000001 */
#define MDF_SADCR_SADEN                     MDF_SADCR_SADEN_Msk                     /*!<SAD enable*/
#define MDF_SADCR_DATCAP_Pos                (1U)
#define MDF_SADCR_DATCAP_Msk                (0x3UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000003 */
#define MDF_SADCR_DATCAP                    MDF_SADCR_DATCAP_Msk                    /*!<SAD data capture mode*/
#define MDF_SADCR_DATCAP_0                  (0x1UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000002 */
#define MDF_SADCR_DATCAP_1                  (0x2UL << MDF_SADCR_DATCAP_Pos)         /*!< 0x00000004 */
#define MDF_SADCR_DETCFG_Pos                (3U)
#define MDF_SADCR_DETCFG_Msk                (0x1UL << MDF_SADCR_DETCFG_Pos)         /*!< 0x00000008 */
#define MDF_SADCR_DETCFG                    MDF_SADCR_DETCFG_Msk                    /*!<SAD trigger event configuration*/
#define MDF_SADCR_SADST_Pos                 (4U)
#define MDF_SADCR_SADST_Msk                 (0x3UL << MDF_SADCR_SADST_Pos)          /*!< 0x00000030 */
#define MDF_SADCR_SADST                     MDF_SADCR_SADST_Msk                     /*!<SAD state*/
#define MDF_SADCR_HYSTEN_Pos                (7U)
#define MDF_SADCR_HYSTEN_Msk                (0x1UL << MDF_SADCR_HYSTEN_Pos)         /*!< 0x00000080 */
#define MDF_SADCR_HYSTEN                    MDF_SADCR_HYSTEN_Msk                    /*!<Hysteresis enable*/
#define MDF_SADCR_FRSIZE_Pos                (8U)
#define MDF_SADCR_FRSIZE_Msk                (0x7UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000700 */
#define MDF_SADCR_FRSIZE                    MDF_SADCR_FRSIZE_Msk                    /*!<Frame size*/
#define MDF_SADCR_FRSIZE_0                  (0x1UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000100 */
#define MDF_SADCR_FRSIZE_1                  (0x2UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000200 */
#define MDF_SADCR_FRSIZE_2                  (0x4UL << MDF_SADCR_FRSIZE_Pos)         /*!< 0x00000300 */
#define MDF_SADCR_SADMOD_Pos                (12U)
#define MDF_SADCR_SADMOD_Msk                (0x3UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00003000 */
#define MDF_SADCR_SADMOD                    MDF_SADCR_SADMOD_Msk                    /*!<SAD working mode*/
#define MDF_SADCR_SADMOD_0                  (0x1UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00001000 */
#define MDF_SADCR_SADMOD_1                  (0x2UL << MDF_SADCR_SADMOD_Pos)         /*!< 0x00002000 */
#define MDF_SADCR_SADACTIVE_Pos             (31U)
#define MDF_SADCR_SADACTIVE_Msk             (0x1UL << MDF_SADCR_SADACTIVE_Pos)      /*!< 0x80000000 */
#define MDF_SADCR_SADACTIVE                 MDF_SADCR_SADACTIVE_Msk                 /*!<SAD active flag*/

/*******************  Bit definition for MDF/ADF_SADCFGR register  ********************/
#define MDF_SADCFGR_SNTHR_Pos               (0U)
#define MDF_SADCFGR_SNTHR_Msk               (0xFUL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x0000000F */
#define MDF_SADCFGR_SNTHR                   MDF_SADCFGR_SNTHR_Msk                   /*!<Signal to noise threshold*/
#define MDF_SADCFGR_SNTHR_0                 (0x1UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000001 */
#define MDF_SADCFGR_SNTHR_1                 (0x2UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000002 */
#define MDF_SADCFGR_SNTHR_2                 (0x4UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000004 */
#define MDF_SADCFGR_SNTHR_3                 (0x8UL << MDF_SADCFGR_SNTHR_Pos)        /*!< 0x00000008 */
#define MDF_SADCFGR_ANSLP_Pos               (4U)
#define MDF_SADCFGR_ANSLP_Msk               (0x7UL << MDF_SADCFGR_ANSLP_Pos)        /*!< 0x00000070 */
#define MDF_SADCFGR_ANSLP                   MDF_SADCFGR_ANSLP_Msk                   /*!<Ambiant noise slope control*/
#define MDF_SADCFGR_LFRNB_Pos               (8U)
#define MDF_SADCFGR_LFRNB_Msk               (0x7UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000700 */
#define MDF_SADCFGR_LFRNB                   MDF_SADCFGR_LFRNB_Msk                   /*!<Number of learning frames*/
#define MDF_SADCFGR_LFRNB_0                 (0x1UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000100 */
#define MDF_SADCFGR_LFRNB_1                 (0x2UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000200 */
#define MDF_SADCFGR_LFRNB_2                 (0x4UL << MDF_SADCFGR_LFRNB_Pos)        /*!< 0x00000400 */
#define MDF_SADCFGR_HGOVR_Pos               (12U)
#define MDF_SADCFGR_HGOVR_Msk               (0x7UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00007000 */
#define MDF_SADCFGR_HGOVR                   MDF_SADCFGR_HGOVR_Msk                   /*!<Hangover time window*/
#define MDF_SADCFGR_HGOVR_0                 (0x1UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00001000 */
#define MDF_SADCFGR_HGOVR_1                 (0x2UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00002000 */
#define MDF_SADCFGR_HGOVR_2                 (0x4UL << MDF_SADCFGR_HGOVR_Pos)        /*!< 0x00004000 */
#define MDF_SADCFGR_ANMIN_Pos               (16U)
#define MDF_SADCFGR_ANMIN_Msk               (0x1FFFUL << MDF_SADCFGR_ANMIN_Pos)     /*!< 0x1FFF0000 */
#define MDF_SADCFGR_ANMIN                   MDF_SADCFGR_ANMIN_Msk                   /*!<Hangover time window*/

/*******************  Bit definition for MDF/ADF_SADSDLVR register  ********************/
#define MDF_SADSDLVR_SDLVL_Pos              (0U)
#define MDF_SADSDLVR_SDLVL_Msk              (0x7FFFUL << MDF_SADSDLVR_SDLVL_Pos)    /*!< 0x00007FFF */
#define MDF_SADSDLVR_SDLVL                  MDF_SADSDLVR_SDLVL_Msk                  /*!<Short term sound level*/

/*******************  Bit definition for MDF/ADF_SADANLVR register  ********************/
#define MDF_SADANLVR_ANLVL_Pos              (0U)
#define MDF_SADANLVR_ANLVL_Msk              (0x7FFFUL << MDF_SADANLVR_ANLVL_Pos)    /*!< 0x00007FFF */
#define MDF_SADANLVR_ANLVL                  MDF_SADANLVR_ANLVL_Msk                  /*!<Ambiant noise level estimation*/

/*******************  Bit definition for MDF/ADF_SNPSDR register  ********************/
#define MDF_SNPSDR_MCICDC_Pos               (0U)
#define MDF_SNPSDR_MCICDC_Msk               (0x1FFUL << MDF_SNPSDR_MCICDC_Pos)      /*!< 0x000001FF */
#define MDF_SNPSDR_MCICDC                   MDF_SNPSDR_MCICDC_Msk                   /*!<MCIC decimation counter*/
#define MDF_SNPSDR_EXTSDR_Pos               (9U)
#define MDF_SNPSDR_EXTSDR_Msk               (0x7FUL << MDF_SNPSDR_EXTSDR_Pos)       /*!< 0x0000FE00 */
#define MDF_SNPSDR_EXTSDR                   MDF_SNPSDR_EXTSDR_Msk                   /*!<Extended data size*/
#define MDF_SNPSDR_SDR_Pos                  (16U)
#define MDF_SNPSDR_SDR_Msk                  (0xFFFFUL << MDF_SNPSDR_SDR_Pos)        /*!< 0xFFFF0000 */
#define MDF_SNPSDR_SDR                      MDF_SNPSDR_SDR_Msk                      /*!<Extended data size*/

/*******************  Bit definition for MDF/ADF_DFLTDR register  ********************/
#define MDF_DFLTDR_DR_Pos                   (8U)
#define MDF_DFLTDR_DR_Msk                   (0xFFFFFFUL << MDF_DFLTDR_DR_Pos)       /*!< 0xFFFFFF00 */
#define MDF_DFLTDR_DR                       MDF_DFLTDR_DR_Msk                       /*!<MCIC decimation counter*/



/******************************************************************************/
/*                                                                            */
/*                                    (PWR)                                   */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for PWR_CR1 register  ********************/
#define PWR_CR1_VDDIO3VMEN_Pos                 (0U)
#define PWR_CR1_VDDIO3VMEN_Msk                 (0x1U << PWR_CR1_VDDIO3VMEN_Pos)
#define PWR_CR1_VDDIO3VMEN                     PWR_CR1_VDDIO3VMEN_Msk
#define PWR_CR1_VDDIO4VMEN_Pos                 (1U)
#define PWR_CR1_VDDIO4VMEN_Msk                 (0x1U << PWR_CR1_VDDIO4VMEN_Pos)
#define PWR_CR1_VDDIO4VMEN                     PWR_CR1_VDDIO4VMEN_Msk
#define PWR_CR1_USB33VMEN_Pos                  (2U)
#define PWR_CR1_USB33VMEN_Msk                  (0x1U << PWR_CR1_USB33VMEN_Pos)
#define PWR_CR1_USB33VMEN                      PWR_CR1_USB33VMEN_Msk
#define PWR_CR1_UCPDVMEN_Pos                   (3U)
#define PWR_CR1_UCPDVMEN_Msk                   (0x1U << PWR_CR1_UCPDVMEN_Pos)
#define PWR_CR1_UCPDVMEN                       PWR_CR1_UCPDVMEN_Msk
#define PWR_CR1_AVMEN_Pos                      (4U)
#define PWR_CR1_AVMEN_Msk                      (0x1U << PWR_CR1_AVMEN_Pos)
#define PWR_CR1_AVMEN                          PWR_CR1_AVMEN_Msk
#define PWR_CR1_VDDIO3SV_Pos                   (8U)
#define PWR_CR1_VDDIO3SV_Msk                   (0x1U << PWR_CR1_VDDIO3SV_Pos)
#define PWR_CR1_VDDIO3SV                       PWR_CR1_VDDIO3SV_Msk
#define PWR_CR1_VDDIO4SV_Pos                   (9U)
#define PWR_CR1_VDDIO4SV_Msk                   (0x1U << PWR_CR1_VDDIO4SV_Pos)
#define PWR_CR1_VDDIO4SV                       PWR_CR1_VDDIO4SV_Msk
#define PWR_CR1_UCPDSV_Pos                     (11U)
#define PWR_CR1_UCPDSV_Msk                     (0x1U << PWR_CR1_UCPDSV_Pos)
#define PWR_CR1_UCPDSV                         PWR_CR1_UCPDSV_Msk
#define PWR_CR1_ASV_Pos                        (12U)
#define PWR_CR1_ASV_Msk                        (0x1U << PWR_CR1_ASV_Pos)
#define PWR_CR1_ASV                            PWR_CR1_ASV_Msk
#define PWR_CR1_VDDIO3RDY_Pos                  (16U)
#define PWR_CR1_VDDIO3RDY_Msk                  (0x1U << PWR_CR1_VDDIO3RDY_Pos)
#define PWR_CR1_VDDIO3RDY                      PWR_CR1_VDDIO3RDY_Msk
#define PWR_CR1_VDDIO4RDY_Pos                  (17U)
#define PWR_CR1_VDDIO4RDY_Msk                  (0x1U << PWR_CR1_VDDIO4RDY_Pos)
#define PWR_CR1_VDDIO4RDY                      PWR_CR1_VDDIO4RDY_Msk
#define PWR_CR1_USB33RDY_Pos                   (18U)
#define PWR_CR1_USB33RDY_Msk                   (0x1U << PWR_CR1_USB33RDY_Pos)
#define PWR_CR1_USB33RDY                       PWR_CR1_USB33RDY_Msk
#define PWR_CR1_UCPDRDY_Pos                    (19U)
#define PWR_CR1_UCPDRDY_Msk                    (0x1U << PWR_CR1_UCPDRDY_Pos)
#define PWR_CR1_UCPDRDY                         PWR_CR1_UCPDRDY_Msk
#define PWR_CR1_ARDY_Pos                       (20U)
#define PWR_CR1_ARDY_Msk                       (0x1U << PWR_CR1_ARDY_Pos)
#define PWR_CR1_ARDY                           PWR_CR1_ARDY_Msk
#define PWR_CR1_VDDIOVRSEL_Pos                 (24U)
#define PWR_CR1_VDDIOVRSEL_Msk                 (0x1U << PWR_CR1_VDDIOVRSEL_Pos)
#define PWR_CR1_VDDIOVRSEL                     PWR_CR1_VDDIOVRSEL_Msk
#define PWR_CR1_VDDIO3VRSEL_Pos                (25U)
#define PWR_CR1_VDDIO3VRSEL_Msk                (0x1U << PWR_CR1_VDDIO3VRSEL_Pos)
#define PWR_CR1_VDDIO3VRSEL                    PWR_CR1_VDDIO3VRSEL_Msk
#define PWR_CR1_VDDIO4VRSEL_Pos                (26U)
#define PWR_CR1_VDDIO4VRSEL_Msk                (0x1U << PWR_CR1_VDDIO4VRSEL_Pos)
#define PWR_CR1_VDDIO4VRSEL                    PWR_CR1_VDDIO4VRSEL_Msk
#define PWR_CR1_GPVMO_Pos                      (31U)
#define PWR_CR1_GPVMO_Msk                      (0x1U << PWR_CR1_GPVMO_Pos)
#define PWR_CR1_GPVMO                          PWR_CR1_GPVMO_Msk

/* Bit fields for PWR_CR2 register */
#define PWR_CR2_MONEN_Pos                      (0U)
#define PWR_CR2_MONEN_Msk                      (0x1U << PWR_CR2_MONEN_Pos)
#define PWR_CR2_MONEN                          PWR_CR2_MONEN_Msk  /*!< VBAT and temperature monitoring enableWhen set, the VBAT supply and temperature monitoring is enabled.- 0: VBAT and temperature monitoring disabled.- 1: VBAT and temperature monitoring enabled. */
#define PWR_CR2_VBATL_Pos                      (8U)
#define PWR_CR2_VBATL_Msk                      (0x1U << PWR_CR2_VBATL_Pos)
#define PWR_CR2_VBATL                          PWR_CR2_VBATL_Msk  /*!< Monitored VBAT level above low threshold- 0: VBAT level above low threshold level, or Monitor disabled.- 1: VBAT level equal or below low threshold level. */
#define PWR_CR2_VBATH_Pos                      (9U)
#define PWR_CR2_VBATH_Msk                      (0x1U << PWR_CR2_VBATH_Pos)
#define PWR_CR2_VBATH                          PWR_CR2_VBATH_Msk  /*!< Monitored VBAT level above high threshold- 0: VBAT level below high threshold level, or Monitor disabled.- 1: VBAT level equal or above high threshold level. */
#define PWR_CR2_TEMPL_Pos                      (10U)
#define PWR_CR2_TEMPL_Msk                      (0x1U << PWR_CR2_TEMPL_Pos)
#define PWR_CR2_TEMPL                          PWR_CR2_TEMPL_Msk  /*!< Monitored temperature level above low threshold- 0: Temperature above low threshold level, or Monitor disabled.- 1: Temperature equal or below low threshold level. */
#define PWR_CR2_TEMPH_Pos                      (11U)
#define PWR_CR2_TEMPH_Msk                      (0x1U << PWR_CR2_TEMPH_Pos)
#define PWR_CR2_TEMPH                          PWR_CR2_TEMPH_Msk  /*!< Monitored temperature level above high threshold- 0: Temperature below high threshold level, or Monitor disabled.- 1: Temperature equal or above high threshold level. */

/* Bit fields for PWR_CR3 register */
#define PWR_CR3_PVDEN_Pos                      (0U)
#define PWR_CR3_PVDEN_Msk                      (0x1U << PWR_CR3_PVDEN_Pos)
#define PWR_CR3_PVDEN                          PWR_CR3_PVDEN_Msk  /*!< Programmable Voltage detector enable.This bit is read only when the SYSCFG register bit PVDL is set. (When PVDL is set, there will be no bus errors generated when writing this register).- 0: Programmable Voltage detector disabled.- 1: Programmable Voltage detector enabled. */
#define PWR_CR3_PVDO_Pos                       (8U)
#define PWR_CR3_PVDO_Msk                       (0x1U << PWR_CR3_PVDO_Pos)
#define PWR_CR3_PVDO                           PWR_CR3_PVDO_Msk  /*!< Programmable Voltage Detect OutputThis bit is set and cleared by hardware. It is valid only if PVD is enabled by the PVDEN bit.- 0: VDD or voltage level on PVD_IN is equal or higher than the PVD threshold selected with the PLS[2:0] bits.- 1: VDD or voltage level on PVD_IN is lower than the PVD threshold selected with the PLS[2:0] bits.The PVD is disabled in Standby mode and after a system reset. For this reason, this bit is equal to 0 after Standby and system reset. */


/* Bit fields for PWR_CR5 register */
#define PWR_CR5_VCOREMONEN_Pos                 (0U)
#define PWR_CR5_VCOREMONEN_Msk                 (0x1U << PWR_CR5_VCOREMONEN_Pos)
#define PWR_CR5_VCOREMONEN                     PWR_CR5_VCOREMONEN_Msk  /*!< VDDCORE monitoring enable.When set, the VDDCORE supply monitoring is enabled.- 0: VDDCORE monitoring disabled.- 1: VDDCORE monitoring enabled. */
#define PWR_CR5_VCOREL_Pos                     (8U)
#define PWR_CR5_VCOREL_Msk                     (0x1U << PWR_CR5_VCOREL_Pos)
#define PWR_CR5_VCOREL                         PWR_CR5_VCOREL_Msk  /*!< Monitored VDDCORE level above low threshold.- 0: VDDCORE level above low threshold level, or Monitor disabled.- 1: VDDCORE level equal or below low threshold level. */
#define PWR_CR5_VCOREH_Pos                     (9U)
#define PWR_CR5_VCOREH_Msk                     (0x1U << PWR_CR5_VCOREH_Pos)
#define PWR_CR5_VCOREH                         PWR_CR5_VCOREH_Msk  /*!< Monitored VDDCORE level above high threshold.- 0: VDDCORE level below high threshold level, or Monitor disabled.- 1: VDDCORE level equal or above high threshold level. */

/* Bit fields for PWR_CR6 register */
#define PWR_CR6_VCPUMONEN_Pos                  (0U)
#define PWR_CR6_VCPUMONEN_Msk                  (0x1U << PWR_CR6_VCPUMONEN_Pos)
#define PWR_CR6_VCPUMONEN                      PWR_CR6_VCPUMONEN_Msk  /*!< VDDCPU monitoring enable.When set, the VDDCPU supply monitoring is enabled.- 0: VDDCPU monitoring disabled.- 1: VDDCPU monitoring enabled. */
#define PWR_CR6_VCPULLS_Pos                    (4U)
#define PWR_CR6_VCPULLS_Msk                    (0x1U << PWR_CR6_VCPULLS_Pos)
#define PWR_CR6_VCPULLS                        PWR_CR6_VCPULLS_Msk  /*!< VDDCPU Voltage Detector low level selection.This bit select the low voltage threshold detected by the monitoring.*/
#define PWR_CR6_VCPUL_Pos                      (8U)
#define PWR_CR6_VCPUL_Msk                      (0x1U << PWR_CR6_VCPUL_Pos)
#define PWR_CR6_VCPUL                          PWR_CR6_VCPUL_Msk  /*!< Monitored VDDCPU level above low threshold.- 0: VDDCPU level above low threshold level, or Monitor disabled.- 1: VDDCPU level equal or below low threshold level. */
#define PWR_CR6_VCPUH_Pos                      (9U)
#define PWR_CR6_VCPUH_Msk                      (0x1U << PWR_CR6_VCPUH_Pos)
#define PWR_CR6_VCPUH                          PWR_CR6_VCPUH_Msk  /*!< Monitored VDDCPU level above high threshold.- 0: VDDCPU level below high threshold level, or Monitor disabled.- 1: VDDCPU level equal or above high threshold level. */

/* Bit fields for PWR_CR7 register */
#define PWR_CR7_VDDIO2VMEN_Pos                 (0U)
#define PWR_CR7_VDDIO2VMEN_Msk                 (0x1U << PWR_CR7_VDDIO2VMEN_Pos)
#define PWR_CR7_VDDIO2VMEN                     PWR_CR7_VDDIO2VMEN_Msk
#define PWR_CR7_VDDIO2SV_Pos                   (8U)
#define PWR_CR7_VDDIO2SV_Msk                   (0x1U << PWR_CR7_VDDIO2SV_Pos)
#define PWR_CR7_VDDIO2SV                       PWR_CR7_VDDIO2SV_Msk
#define PWR_CR7_VDDIO2RDY_Pos                  (16U)
#define PWR_CR7_VDDIO2RDY_Msk                  (0x1U << PWR_CR7_VDDIO2RDY_Pos)
#define PWR_CR7_VDDIO2RDY                      PWR_CR7_VDDIO2RDY_Msk
#define PWR_CR7_VDDIO2VRSEL_Pos                (24U)
#define PWR_CR7_VDDIO2VRSEL_Msk                (0x1U << PWR_CR7_VDDIO2VRSEL_Pos)
#define PWR_CR7_VDDIO2VRSEL                    PWR_CR7_VDDIO2VRSEL_Msk
#define PWR_CR7_VDDIO2VRSTBY_Pos               (25U)
#define PWR_CR7_VDDIO2VRSTBY_Msk               (0x1U << PWR_CR7_VDDIO2VRSTBY_Pos)
#define PWR_CR7_VDDIO2VRSTBY                   PWR_CR7_VDDIO2VRSTBY_Msk

/* Bit fields for PWR_CR8 register */
#define PWR_CR8_VDDIO1VMEN_Pos                 (0U)
#define PWR_CR8_VDDIO1VMEN_Msk                 (0x1U << PWR_CR8_VDDIO1VMEN_Pos)
#define PWR_CR8_VDDIO1VMEN                     PWR_CR8_VDDIO1VMEN_Msk
#define PWR_CR8_VDDIO1SV_Pos                   (8U)
#define PWR_CR8_VDDIO1SV_Msk                   (0x1U << PWR_CR8_VDDIO1SV_Pos)
#define PWR_CR8_VDDIO1SV                       PWR_CR8_VDDIO1SV_Msk
#define PWR_CR8_VDDIO1RDY_Pos                  (16U)
#define PWR_CR8_VDDIO1RDY_Msk                  (0x1U << PWR_CR8_VDDIO1RDY_Pos)
#define PWR_CR8_VDDIO1RDY                      PWR_CR8_VDDIO1RDY_Msk
#define PWR_CR8_VDDIO1VRSEL_Pos                (24U)
#define PWR_CR8_VDDIO1VRSEL_Msk                (0x1U << PWR_CR8_VDDIO1VRSEL_Pos)
#define PWR_CR8_VDDIO1VRSEL                    PWR_CR8_VDDIO1VRSEL_Msk
#define PWR_CR8_VDDIO1VRSTBY_Pos               (25U)
#define PWR_CR8_VDDIO1VRSTBY_Msk               (0x1U << PWR_CR8_VDDIO1VRSTBY_Pos)
#define PWR_CR8_VDDIO1VRSTBY                   PWR_CR8_VDDIO1VRSTBY_Msk

/* Bit fields for PWR_CR9 register */
#define PWR_CR9_BKPRBSEN_Pos                   (0U)
#define PWR_CR9_BKPRBSEN_Msk                   (0x1U << PWR_CR9_BKPRBSEN_Pos)
#define PWR_CR9_BKPRBSEN                       PWR_CR9_BKPRBSEN_Msk  /*!< Backup RAM backup supply enable (used to maintain BKP RAM content in Standby and VBAT modes).When set, the backup ram is supplied from backup regulator in Standby and VBAT modes.When reset, The backup ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 0: BKPSRAM Backup supply disable.- 1: BKPSRAM Backup supply enable. */
#define PWR_CR9_LPR1BSEN_Pos                   (4U)
#define PWR_CR9_LPR1BSEN_Msk                   (0x1U << PWR_CR9_LPR1BSEN_Pos)
#define PWR_CR9_LPR1BSEN                       PWR_CR9_LPR1BSEN_Msk  /*!< LPSRAM 1 backup supply enable (used to maintain LPSRAM1 RAM content in Standby and VBAT modes).When set, the LPSRAM1 is supplied from backup regulator in Standby and VBAT modes.When reset, The LPSRAM1 can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 0: LPSRAM1 Backup supply disable.- 1: LPSRAM1 Backup supply enable. */

/* Bit fields for PWR_CR10 register */
#define PWR_CR10_RETRBSEN_Pos                  (0U)
#define PWR_CR10_RETRBSEN_Msk                  (0x3U << PWR_CR10_RETRBSEN_Pos)
#define PWR_CR10_RETRBSEN                      PWR_CR10_RETRBSEN_Msk  /*!< Retention RAM backup supply enable (used to maintain RET RAM content in Standby and VBAT modes).When set, the retention ram is supplied from backup regulator in Standby and VBAT modes. When reset, the retention ram can still be used in Run and Stop modes but its content will be lost in Standby and VBAT modes.- 00: RETRAM Backup supply disable.- 01: RETRAM Backup supply enable in Standby and VBAT modes.- 10: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode).- 11: RETRAM Backup supply enable only in Standby mode (memory content lost in VBAT mode). */

/* Bit fields for PWR_CR11 register */
#define PWR_CR11_DDRRETDIS_Pos                 (0U)
#define PWR_CR11_DDRRETDIS_Msk                 (0x1U << PWR_CR11_DDRRETDIS_Pos)
#define PWR_CR11_DDRRETDIS                     PWR_CR11_DDRRETDIS_Msk

/* Bit fields for PWR_CR12 register */
#define PWR_CR12_GPUVMEN_Pos                   (0U)
#define PWR_CR12_GPUVMEN_Msk                   (0x1U << PWR_CR12_GPUVMEN_Pos)
#define PWR_CR12_GPUVMEN                       PWR_CR12_GPUVMEN_Msk  /*!< VDDGPU independent GPU voltage monitor enable */
#define PWR_CR12_GPULVTEN_Pos                  (1U)
#define PWR_CR12_GPULVTEN_Msk                  (0x1U << PWR_CR12_GPULVTEN_Pos)
#define PWR_CR12_GPULVTEN                      PWR_CR12_GPULVTEN_Msk  /*!< VDDGPU low voltage threshold enable */
#define PWR_CR12_GPUSV_Pos                     (8U)
#define PWR_CR12_GPUSV_Msk                     (0x1U << PWR_CR12_GPUSV_Pos)
#define PWR_CR12_GPUSV                         PWR_CR12_GPUSV_Msk  /*!< VDDGPU independent supply valid */
#define PWR_CR12_VDDGPURDY_Pos                 (16U)
#define PWR_CR12_VDDGPURDY_Msk                 (0x1U << PWR_CR12_VDDGPURDY_Pos)
#define PWR_CR12_VDDGPURDY                     PWR_CR12_VDDGPURDY_Msk  /*!< VDDGPU ready */



/* Bit fields for PWR_BDCR1 register */
#define PWR_BDCR1_DBD3P_Pos                    (0U)
#define PWR_BDCR1_DBD3P_Msk                    (0x1U << PWR_BDCR1_DBD3P_Pos)
#define PWR_BDCR1_DBD3P                        PWR_BDCR1_DBD3P_Msk  /*!< Disable backup and D3 domains write protection.In reset state, all registers in backup and D3 domains are protected against parasitic write access from D1 and D2 domains. This bit must be set to enable write access to these registers.- 0: Write access to backup and D3 domains disabled- 1: Write access to backup and D3 domains enabled */

/* Bit fields for PWR_BDCR2 register */
#define PWR_BDCR2_DBP_Pos                      (0U)
#define PWR_BDCR2_DBP_Msk                      (0x1U << PWR_BDCR2_DBP_Pos)
#define PWR_BDCR2_DBP                          PWR_BDCR2_DBP_Msk  /*!< Disable backup domain write protection.In reset state, all registers in backup domain are protected against parasitic write access from D3 domain. This bit must be set to enable write access to these registers.- 0: Write access to backup domains disabled- 1: Write access to backup domains enabled */


/* Bit fields for PWR_CPU1CR register */
#define PWR_CPU1CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU1CR_PDDS_D2_Msk                 (0x1U << PWR_CPU1CR_PDDS_D2_Pos)
#define PWR_CPU1CR_PDDS_D2                     PWR_CPU1CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the D2 / system.- 0: Keep Stop mode when CPU1 enters to CStop.- 1: Allow Standby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_PDDS_D1_Pos                 (1U)
#define PWR_CPU1CR_PDDS_D1_Msk                 (0x1U << PWR_CPU1CR_PDDS_D1_Pos)
#define PWR_CPU1CR_PDDS_D1                     PWR_CPU1CR_PDDS_D1_Msk  /*!< D1 domain Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU1 to define the Deepsleep mode for the system.- 0: Keep DStop mode when CPU1 enters to CStop.- 1: Allow DStandby mode when CPU1 enters to CStop. */
#define PWR_CPU1CR_VBF_Pos                     (4U)
#define PWR_CPU1CR_VBF_Msk                     (0x1U << PWR_CPU1CR_VBF_Pos)
#define PWR_CPU1CR_VBF                         PWR_CPU1CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU1CR_STOPF_Pos                   (5U)
#define PWR_CPU1CR_STOPF_Msk                   (0x1U << PWR_CPU1CR_STOPF_Pos)
#define PWR_CPU1CR_STOPF                       PWR_CPU1CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU1 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU1CR_SBF_Pos                     (6U)
#define PWR_CPU1CR_SBF_Msk                     (0x1U << PWR_CPU1CR_SBF_Pos)
#define PWR_CPU1CR_SBF                         PWR_CPU1CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 and CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode.- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU1CR_SBF_D1_Pos                  (7U)
#define PWR_CPU1CR_SBF_D1_Msk                  (0x1U << PWR_CPU1CR_SBF_D1_Pos)
#define PWR_CPU1CR_SBF_D1                      PWR_CPU1CR_SBF_D1_Msk  /*!< D1 DStandby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: D1 domain has not been in DStandby mode.- 1: D1 domain has been in DStandby mode. */
#define PWR_CPU1CR_SBF_D3_Pos                  (8U)
#define PWR_CPU1CR_SBF_D3_Msk                  (0x1U << PWR_CPU1CR_SBF_D3_Pos)
#define PWR_CPU1CR_SBF_D3                      PWR_CPU1CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT and Standby modes)- 0: D3 domain has not been in SStandby mode.- 1: D3 domain has been in SStandby mode. */
#define PWR_CPU1CR_CSSF_Pos                    (9U)
#define PWR_CPU1CR_CSSF_Msk                    (0x1U << PWR_CPU1CR_CSSF_Pos)
#define PWR_CPU1CR_CSSF                        PWR_CPU1CR_CSSF_Msk  /*!< Clear CPU1 STOPF, SBF_D1/_D3, SBF, VBF flags and CPU2 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU1 flags (STOPF, SBF_D1/_D3, SBF, and VBF) and CPU2 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU1CR_STANDBYWFIL2_Pos            (15U)
#define PWR_CPU1CR_STANDBYWFIL2_Msk            (0x1U << PWR_CPU1CR_STANDBYWFIL2_Pos)
#define PWR_CPU1CR_STANDBYWFIL2                PWR_CPU1CR_STANDBYWFIL2_Msk  /*!< CPU1 system idle indication.This bit is set and reset by HW based on the CPU1 operation mode.- 0: CPU1 system active.- 1: CPU1 system idle. */
#define PWR_CPU1CR_LPDS_D1_Pos                 (16U)
#define PWR_CPU1CR_LPDS_D1_Msk                 (0x1U << PWR_CPU1CR_LPDS_D1_Pos)
#define PWR_CPU1CR_LPDS_D1                     PWR_CPU1CR_LPDS_D1_Msk  /*!< Low power Deepsleep Stop mode selection for the D1 domain (DStop2).This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode.- 1: low-power stop mode selected, external regulator may enter low power mode. Further low power mode selection is provided by LVDS_D1. */
#define PWR_CPU1CR_LVDS_D1_Pos                 (17U)
#define PWR_CPU1CR_LVDS_D1_Msk                 (0x1U << PWR_CPU1CR_LVDS_D1_Pos)
#define PWR_CPU1CR_LVDS_D1                     PWR_CPU1CR_LVDS_D1_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D1 domain (DStop3).This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D1 and will change the VDDCPU domain supply reset level.- 0: LP-Stop mode VDDCPU domain supply reset level at same level as Run mode. The VDDCPU domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCPU domain supply reset level at lower level than Run mode. Allows to lower VDDCPU domain supply in LPLV-Stop mode (see datasheet for voltage levels). */

/* Bit fields for PWR_CPU2CR register */
#define PWR_CPU2CR_PDDS_D2_Pos                 (0U)
#define PWR_CPU2CR_PDDS_D2_Msk                 (0x1U << PWR_CPU2CR_PDDS_D2_Pos)
#define PWR_CPU2CR_PDDS_D2                     PWR_CPU2CR_PDDS_D2_Msk  /*!< D2 Domain / System Power Down Deepsleep selection.This bit is reset only by a VDD POR reset. (not reset when exit from Standby mode)Allows CPU2 to define the Deepsleep mode for the system / D2.- 0: Keep Stop mode when CPU2 enters to CStop.- 1: Allow Standby mode when CPU2 enters to CStop. */
#define PWR_CPU2CR_VBF_Pos                     (4U)
#define PWR_CPU2CR_VBF_Msk                     (0x1U << PWR_CPU2CR_VBF_Pos)
#define PWR_CPU2CR_VBF                         PWR_CPU2CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU1 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU2CR_STOPF_Pos                   (5U)
#define PWR_CPU2CR_STOPF_Msk                   (0x1U << PWR_CPU2CR_STOPF_Pos)
#define PWR_CPU2CR_STOPF                       PWR_CPU2CR_STOPF_Msk  /*!< System Stop FlagThis bit is set by hardware and cleared only by any system reset or by setting the CPU2 CSSF bit.- 0: System has not been in Stop mode.- 1: System has been in Stop mode, clock system has been stopped. */
#define PWR_CPU2CR_SBF_Pos                     (6U)
#define PWR_CPU2CR_SBF_Msk                     (0x1U << PWR_CPU2CR_SBF_Pos)
#define PWR_CPU2CR_SBF                         PWR_CPU2CR_SBF_Msk  /*!< System Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 and CPU1 CSSF bit. (not reset when exit from Standby mode)- 0: System has not been in Standby mode- 1: System has been in Standby mode, system contents has been lost. */
#define PWR_CPU2CR_SBF_D2_Pos                  (7U)
#define PWR_CPU2CR_SBF_D2_Msk                  (0x1U << PWR_CPU2CR_SBF_D2_Pos)
#define PWR_CPU2CR_SBF_D2                      PWR_CPU2CR_SBF_D2_Msk  /*!< D2 Standby FlagThis bit is set by hardware and cleared only by a VDD POR reset or by setting the CPU2 CSSF bit. (not reset when exit from Standby mode)- 0: D2 domain has not been in Standby mode.- 1: D2 domain has been in Standby mode. */
#define PWR_CPU2CR_SBF_D3_Pos                  (8U)
#define PWR_CPU2CR_SBF_D3_Msk                  (0x1U << PWR_CPU2CR_SBF_D3_Pos)
#define PWR_CPU2CR_SBF_D3                      PWR_CPU2CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU2 CSSF bit. (not reset when exit from VBAT and Standby modes)- 0: D3 domain has not been in SStandby mode.- 1: D3 domain has been in SStandby mode. */
#define PWR_CPU2CR_CSSF_Pos                    (9U)
#define PWR_CPU2CR_CSSF_Msk                    (0x1U << PWR_CPU2CR_CSSF_Pos)
#define PWR_CPU2CR_CSSF                        PWR_CPU2CR_CSSF_Msk  /*!< Clear CPU2 STOPF, SBF_D2, SBF_D3, SBF, VBF flags and CPU1 SBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU2 flags (STOPF, SBF_D2, SBF_D3, SBF and VBF) and CPU1 SBF flag. Register bit is cleared to 0 by hardware. */
#define PWR_CPU2CR_DEEPSLEEP_Pos               (15U)
#define PWR_CPU2CR_DEEPSLEEP_Msk               (0x1U << PWR_CPU2CR_DEEPSLEEP_Pos)
#define PWR_CPU2CR_DEEPSLEEP                   PWR_CPU2CR_DEEPSLEEP_Msk  /*!< CPU2 system idle indication.This bit is set and reset by HW based on the CPU2 operation mode.- 0: CPU2 system active.- 1: CPU2 system idle. */
#define PWR_CPU2CR_LPDS_D2_Pos                 (16U)
#define PWR_CPU2CR_LPDS_D2_Msk                 (0x1U << PWR_CPU2CR_LPDS_D2_Pos)
#define PWR_CPU2CR_LPDS_D2                     PWR_CPU2CR_LPDS_D2_Msk  /*!< Low power Deepsleep Stop mode selection for the D2 domain / System.This bit is reset on any system reset.- 0: Stop mode selected, external regulator kept in main power mode (pwr_lp=1)- 1: low-power stop mode selected, external regulator may enter low power mode (pwr_lp =0). Further low power mode selection is provided by LVDS_D2. */
#define PWR_CPU2CR_LVDS_D2_Pos                 (17U)
#define PWR_CPU2CR_LVDS_D2_Msk                 (0x1U << PWR_CPU2CR_LVDS_D2_Pos)
#define PWR_CPU2CR_LVDS_D2                     PWR_CPU2CR_LVDS_D2_Msk  /*!< Low voltage Deepsleep LPLV-Stop mode selection for the D2 domain / System.This bit is reset on any system reset.This bit has only effect when the low power stop mode is selected in LPDS_D2 and will change the VDDCORE domain supply reset level.- 0: LP-Stop mode VDDCORE domain supply reset level at same level as Run mode. The VDDCORE domain supply level in LP-Stop mode shall be kept at same level as Run mode.- 1: LPLV-Stop mode VDDCORE domain supply reset level at lower level than Run mode. Allows to lower VDDCORE domain supply in LPLV-Stop mode (see datasheet for voltage levels). */

/* Bit fields for PWR_CPU3CR register */
#define PWR_CPU3CR_VBF_Pos                     (4U)
#define PWR_CPU3CR_VBF_Msk                     (0x1U << PWR_CPU3CR_VBF_Pos)
#define PWR_CPU3CR_VBF                         PWR_CPU3CR_VBF_Msk  /*!< VBAT exit FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU3 CSSF bit. (not reset when exit from VBAT)- 0: System has not been in VBAT mode.- 1: System has been in VBAT mode. */
#define PWR_CPU3CR_SBF_D3_Pos                  (8U)
#define PWR_CPU3CR_SBF_D3_Msk                  (0x1U << PWR_CPU3CR_SBF_D3_Pos)
#define PWR_CPU3CR_SBF_D3                      PWR_CPU3CR_SBF_D3_Msk  /*!< D3 SStandby FlagThis bit is set by hardware and cleared only by a Vsw POR reset or by setting the CPU3 CSSF bit. (not reset when exit from VBAT1 or Standby modes)- 0: D3 domain has not been in SStandby mode- 1: D3 domain has been in SStandby mode */
#define PWR_CPU3CR_CSSF_Pos                    (9U)
#define PWR_CPU3CR_CSSF_Msk                    (0x1U << PWR_CPU3CR_CSSF_Pos)
#define PWR_CPU3CR_CSSF                        PWR_CPU3CR_CSSF_Msk  /*!< Clear CPU3 SBF_D3, VBF flag.(Always read as 0)This bit is reset on any system reset.- 0: No effect.- 1: When written, clear the CPU3 flag (SBF_D3 and VBF). Register bit is cleared to 0 by hardware. */
#define PWR_CPU3CR_DEEPSLEEP_Pos               (15U)
#define PWR_CPU3CR_DEEPSLEEP_Msk               (0x1U << PWR_CPU3CR_DEEPSLEEP_Pos)
#define PWR_CPU3CR_DEEPSLEEP                   PWR_CPU3CR_DEEPSLEEP_Msk  /*!< CPU3 system idle indication.This bit is set and reset by HW based on the CPU3 operation mode.- 0: CPU3 active.- 1: CPU3 idle. */

/* Bit fields for PWR_D1CR register */
#define PWR_D1CR_LPCFG_D1_Pos                  (0U)
#define PWR_D1CR_LPCFG_D1_Msk                  (0x1U << PWR_D1CR_LPCFG_D1_Pos)
#define PWR_D1CR_LPCFG_D1                      PWR_D1CR_LPCFG_D1_Msk  /*!< PWR_CPU_ON pin configuration.- 0: PWR_CPU_ON pin signals DStandby mode (PWR_CPU_ON =1 in DRun, DStop1/2/3, and 0 in DStandby). (pwr_cpu_on)- 1: PWR_CPU_ON pin signals DStandby &amp;amp; DStop2/3 modes (PWR_CPU_ON = 1 in DRun, DStop1, and 0 in DStop2/3 and DStandby). (pwr_cpu_onlp) */
#define PWR_D1CR_POPL_D1_Pos                   (8U)
#define PWR_D1CR_POPL_D1_Msk                   (0x1fU << PWR_D1CR_POPL_D1_Pos)
#define PWR_D1CR_POPL_D1                       PWR_D1CR_POPL_D1_Msk  /*!< pwr_cpu_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_cpu_on low pulse in DStandby mode. (There is no impact on the DSTOP2/3 modes).The LSI oscillator is automatically enabled when needed by the POPL_D1 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */

/* Bit fields for PWR_D2CR register */
#define PWR_D2CR_LPCFG_D2_Pos                  (0U)
#define PWR_D2CR_LPCFG_D2_Msk                  (0x1U << PWR_D2CR_LPCFG_D2_Pos)
#define PWR_D2CR_LPCFG_D2                      PWR_D2CR_LPCFG_D2_Msk  /*!< PWR_ON pin configuration.- 0: PWR_ON pin signals Standby modes (PWR_ON =1 in Run, Stop1/2, LP-Stop1/2, LPLV-Stop1/2, and 0 in Standby1/2). (pwr_on)- 1: PWR_ON pin signals Standby &amp;amp; LP-Stop, LPLV-Stop modes (PWR_ CPU_ON = 1 in Run, Stop1/2, and 0 in LP-Stop1/2, LPLV-Stop1/2 and Standby1/2). (pwr_onlp) */
#define PWR_D2CR_POPL_D2_Pos                   (8U)
#define PWR_D2CR_POPL_D2_Msk                   (0x1fU << PWR_D2CR_POPL_D2_Pos)
#define PWR_D2CR_POPL_D2                       PWR_D2CR_POPL_D2_Msk  /*!< pwr_on pulse low configuration.These bits are set and cleared by software. They define the minimum guaranteed duration of the pwr_on low pulse in Standby mode. (There is no impact on the LP-Stop and LPLV-Stop modes).The LSI oscillator is automatically enabled when needed by the POPL_D2 pulse low configuration.- 00000: No guaranteed minimum low time.- 00001: ~ 1 ms guaranteed minimum low time. (1 x 32 LSI cycles)- 00010: ~ 2 ms guaranteed minimum low time. (2 x 32 LSI cycles)...- 11111: ~ 31 ms guaranteed minimum low time. (31 x 32 LSI cycles) */
#define PWR_D2CR_LPLVDLY_D2_Pos                (16U)
#define PWR_D2CR_LPLVDLY_D2_Msk                (0x7U << PWR_D2CR_LPLVDLY_D2_Pos)
#define PWR_D2CR_LPLVDLY_D2                    PWR_D2CR_LPLVDLY_D2_Msk
#define PWR_D2CR_PODH_D2_Pos                   (24U)
#define PWR_D2CR_PODH_D2_Msk                   (0xFU << PWR_D2CR_PODH_D2_Pos)
#define PWR_D2CR_PODH_D2                       PWR_D2CR_PODH_D2_Msk

/* Bit fields for PWR_D3CR register */
#define PWR_D3CR_PDDS_D3_Pos                   (0U)
#define PWR_D3CR_PDDS_D3_Msk                   (0x1U << PWR_D3CR_PDDS_D3_Pos)
#define PWR_D3CR_PDDS_D3                       PWR_D3CR_PDDS_D3_Msk  /*!< D3 domain Power Down Deepsleep selection. This bit has only effect when the EN_D3 bit is not set.- 0: Keep SStop mode when system enters to Standby.- 1: Allow SStandby mode when system enters to Standby. */
#define PWR_D3CR_D3RDY_Pos                     (31U)
#define PWR_D3CR_D3RDY_Msk                     (0x1U << PWR_D3CR_D3RDY_Pos)
#define PWR_D3CR_D3RDY                         PWR_D3CR_D3RDY_Msk  /*!< D3 domain supply ready.This bit is set when the domain is accessible- 0: D3 domain not ready- 1: D3 domain ready. */

/* Bit fields for PWR_WKUPCR1 register */
#define PWR_WKUPCR1_WKUPC_Pos                  (0U)
#define PWR_WKUPCR1_WKUPC_Msk                  (0x1U << PWR_WKUPCR1_WKUPC_Pos)
#define PWR_WKUPCR1_WKUPC                      PWR_WKUPCR1_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR1_WKUPP_Pos                  (8U)
#define PWR_WKUPCR1_WKUPP_Msk                  (0x1U << PWR_WKUPCR1_WKUPP_Pos)
#define PWR_WKUPCR1_WKUPP                      PWR_WKUPCR1_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR1_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR1_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR1_WKUPPUPD_Pos)
#define PWR_WKUPCR1_WKUPPUPD                   PWR_WKUPCR1_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR1_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR1_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR1_WKUPENCPU1_Pos)
#define PWR_WKUPCR1_WKUPENCPU1                 PWR_WKUPCR1_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR1_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR1_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR1_WKUPENCPU2_Pos)
#define PWR_WKUPCR1_WKUPENCPU2                 PWR_WKUPCR1_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR1_WKUPF_Pos                  (31U)
#define PWR_WKUPCR1_WKUPF_Msk                  (0x1U << PWR_WKUPCR1_WKUPF_Pos)
#define PWR_WKUPCR1_WKUPF                      PWR_WKUPCR1_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR2 register */
#define PWR_WKUPCR2_WKUPC_Pos                  (0U)
#define PWR_WKUPCR2_WKUPC_Msk                  (0x1U << PWR_WKUPCR2_WKUPC_Pos)
#define PWR_WKUPCR2_WKUPC                      PWR_WKUPCR2_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR2_WKUPP_Pos                  (8U)
#define PWR_WKUPCR2_WKUPP_Msk                  (0x1U << PWR_WKUPCR2_WKUPP_Pos)
#define PWR_WKUPCR2_WKUPP                      PWR_WKUPCR2_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR2_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR2_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR2_WKUPPUPD_Pos)
#define PWR_WKUPCR2_WKUPPUPD                   PWR_WKUPCR2_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR2_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR2_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR2_WKUPENCPU1_Pos)
#define PWR_WKUPCR2_WKUPENCPU1                 PWR_WKUPCR2_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR2_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR2_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR2_WKUPENCPU2_Pos)
#define PWR_WKUPCR2_WKUPENCPU2                 PWR_WKUPCR2_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR2_WKUPF_Pos                  (31U)
#define PWR_WKUPCR2_WKUPF_Msk                  (0x1U << PWR_WKUPCR2_WKUPF_Pos)
#define PWR_WKUPCR2_WKUPF                      PWR_WKUPCR2_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR3 register */
#define PWR_WKUPCR3_WKUPC_Pos                  (0U)
#define PWR_WKUPCR3_WKUPC_Msk                  (0x1U << PWR_WKUPCR3_WKUPC_Pos)
#define PWR_WKUPCR3_WKUPC                      PWR_WKUPCR3_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR3_WKUPP_Pos                  (8U)
#define PWR_WKUPCR3_WKUPP_Msk                  (0x1U << PWR_WKUPCR3_WKUPP_Pos)
#define PWR_WKUPCR3_WKUPP                      PWR_WKUPCR3_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR3_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR3_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR3_WKUPPUPD_Pos)
#define PWR_WKUPCR3_WKUPPUPD                   PWR_WKUPCR3_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR3_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR3_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR3_WKUPENCPU1_Pos)
#define PWR_WKUPCR3_WKUPENCPU1                 PWR_WKUPCR3_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR3_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR3_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR3_WKUPENCPU2_Pos)
#define PWR_WKUPCR3_WKUPENCPU2                 PWR_WKUPCR3_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR3_WKUPF_Pos                  (31U)
#define PWR_WKUPCR3_WKUPF_Msk                  (0x1U << PWR_WKUPCR3_WKUPF_Pos)
#define PWR_WKUPCR3_WKUPF                      PWR_WKUPCR3_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR4 register */
#define PWR_WKUPCR4_WKUPC_Pos                  (0U)
#define PWR_WKUPCR4_WKUPC_Msk                  (0x1U << PWR_WKUPCR4_WKUPC_Pos)
#define PWR_WKUPCR4_WKUPC                      PWR_WKUPCR4_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR4_WKUPP_Pos                  (8U)
#define PWR_WKUPCR4_WKUPP_Msk                  (0x1U << PWR_WKUPCR4_WKUPP_Pos)
#define PWR_WKUPCR4_WKUPP                      PWR_WKUPCR4_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR4_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR4_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR4_WKUPPUPD_Pos)
#define PWR_WKUPCR4_WKUPPUPD                   PWR_WKUPCR4_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR4_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR4_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR4_WKUPENCPU1_Pos)
#define PWR_WKUPCR4_WKUPENCPU1                 PWR_WKUPCR4_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR4_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR4_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR4_WKUPENCPU2_Pos)
#define PWR_WKUPCR4_WKUPENCPU2                 PWR_WKUPCR4_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR4_WKUPF_Pos                  (31U)
#define PWR_WKUPCR4_WKUPF_Msk                  (0x1U << PWR_WKUPCR4_WKUPF_Pos)
#define PWR_WKUPCR4_WKUPF                      PWR_WKUPCR4_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR5 register */
#define PWR_WKUPCR5_WKUPC_Pos                  (0U)
#define PWR_WKUPCR5_WKUPC_Msk                  (0x1U << PWR_WKUPCR5_WKUPC_Pos)
#define PWR_WKUPCR5_WKUPC                      PWR_WKUPCR5_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR5_WKUPP_Pos                  (8U)
#define PWR_WKUPCR5_WKUPP_Msk                  (0x1U << PWR_WKUPCR5_WKUPP_Pos)
#define PWR_WKUPCR5_WKUPP                      PWR_WKUPCR5_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR5_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR5_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR5_WKUPPUPD_Pos)
#define PWR_WKUPCR5_WKUPPUPD                   PWR_WKUPCR5_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR5_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR5_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR5_WKUPENCPU1_Pos)
#define PWR_WKUPCR5_WKUPENCPU1                 PWR_WKUPCR5_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR5_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR5_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR5_WKUPENCPU2_Pos)
#define PWR_WKUPCR5_WKUPENCPU2                 PWR_WKUPCR5_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR5_WKUPF_Pos                  (31U)
#define PWR_WKUPCR5_WKUPF_Msk                  (0x1U << PWR_WKUPCR5_WKUPF_Pos)
#define PWR_WKUPCR5_WKUPF                      PWR_WKUPCR5_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_WKUPCR6 register */
#define PWR_WKUPCR6_WKUPC_Pos                  (0U)
#define PWR_WKUPCR6_WKUPC_Msk                  (0x1U << PWR_WKUPCR6_WKUPC_Pos)
#define PWR_WKUPCR6_WKUPC                      PWR_WKUPCR6_WKUPC_Msk  /*!< Clear Wakeup Flag for WKUPx pin.These bits are always read as 0.- 0: No effect- 1: Writing 1 will clear the WKUPFx Wakeup Flag. (Bit is cleared to 0 by HW) */
#define PWR_WKUPCR6_WKUPP_Pos                  (8U)
#define PWR_WKUPCR6_WKUPP_Msk                  (0x1U << PWR_WKUPCR6_WKUPP_Pos)
#define PWR_WKUPCR6_WKUPP                      PWR_WKUPCR6_WKUPP_Msk  /*!< Wakeup Polarity bit for WKUPx pinThese bits define the polarity used for event detection on external wake-up WKUPx pin- 0: Detection on high level (rising edge)- 1: Detection on low level (falling edge) */
#define PWR_WKUPCR6_WKUPPUPD_Pos               (12U)
#define PWR_WKUPCR6_WKUPPUPD_Msk               (0x3U << PWR_WKUPCR6_WKUPPUPD_Pos)
#define PWR_WKUPCR6_WKUPPUPD                   PWR_WKUPCR6_WKUPPUPD_Msk  /*!< Wakeup pull configuration for WKUPx pin.These bits define the IO pad pull configuration used when WKUPENCPU1 or/and WKUPENCPU2 = 1. (note that the associated GPIO port pull configuration shall be set to the same value or 00). The Wakeup Pin pull configuration will be maintained in Standby mode.- 00: No pulls- 01: Pull-up- 10: Pull-down- 11: Reserved */
#define PWR_WKUPCR6_WKUPENCPU1_Pos             (16U)
#define PWR_WKUPCR6_WKUPENCPU1_Msk             (0x1U << PWR_WKUPCR6_WKUPENCPU1_Pos)
#define PWR_WKUPCR6_WKUPENCPU1                 PWR_WKUPCR6_WKUPENCPU1_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU1.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU1.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU1. */
#define PWR_WKUPCR6_WKUPENCPU2_Pos             (17U)
#define PWR_WKUPCR6_WKUPENCPU2_Msk             (0x1U << PWR_WKUPCR6_WKUPENCPU2_Pos)
#define PWR_WKUPCR6_WKUPENCPU2                 PWR_WKUPCR6_WKUPENCPU2_Msk  /*!< Enable Wakeup WKUPx pin and interrupt for CPU2.- 0: An event on WKUPx pin does not wakeup the system from Standby and Stop modes, nor generate an interrupt to CPU2.- 1: A rising or falling edge on WKUPx pin wakes-up the system from Standby and Stop modes and generate an interrupt to CPU2. */
#define PWR_WKUPCR6_WKUPF_Pos                  (31U)
#define PWR_WKUPCR6_WKUPF_Msk                  (0x1U << PWR_WKUPCR6_WKUPF_Pos)
#define PWR_WKUPCR6_WKUPF                      PWR_WKUPCR6_WKUPF_Msk  /*!< Wakeup flag for WKUPx pin before enable.This bit is set by hardware and cleared only by a NRST Reset or by setting the WKUPCx bit.- 0: No wakeup event occurred- 1: A wakeup event was received from WKUPx pin */

/* Bit fields for PWR_D3WKUPENR register */
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3_Pos       (0U)
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3_Msk       (0x1U << PWR_D3WKUPENR_TAMP_WKUPEN_D3_Pos)
#define PWR_D3WKUPENR_TAMP_WKUPEN_D3           PWR_D3WKUPENR_TAMP_WKUPEN_D3_Msk  /*!< Enable Wakeup pin for D3 domain in VBAT mode.The bit is set and cleared by software.- 0: A tamper event on D3WKUP pin does not wakeup the D3 domain from SStandby in VBAT mode.- 1: A rising or falling edge on D3WKUP pin wakes-up the D3 domain from SStandby in VBAT mode. */

/* Bit fields for PWR_RSECCFGR register */
#define PWR_RSECCFGR_RSEC0_Pos                 (0U)
#define PWR_RSECCFGR_RSEC0_Msk                 (0x1U << PWR_RSECCFGR_RSEC0_Pos)
#define PWR_RSECCFGR_RSEC0                     PWR_RSECCFGR_RSEC0_Msk  /*!< Secure attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the secure mode for the local resource x.- 0: The local resource number x is non-secure. Secure access is also possible.- 1: The local resource number x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_RPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RSECCFGR_RSEC1_Pos                 (1U)
#define PWR_RSECCFGR_RSEC1_Msk                 (0x1U << PWR_RSECCFGR_RSEC1_Pos)
#define PWR_RSECCFGR_RSEC1                     PWR_RSECCFGR_RSEC1_Msk  /*!< Secure attribute reference for the local resource number x (x = 1)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC2_Pos                 (2U)
#define PWR_RSECCFGR_RSEC2_Msk                 (0x1U << PWR_RSECCFGR_RSEC2_Pos)
#define PWR_RSECCFGR_RSEC2                     PWR_RSECCFGR_RSEC2_Msk  /*!< Secure attribute reference for the local resource number x (x = 2)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC3_Pos                 (3U)
#define PWR_RSECCFGR_RSEC3_Msk                 (0x1U << PWR_RSECCFGR_RSEC3_Pos)
#define PWR_RSECCFGR_RSEC3                     PWR_RSECCFGR_RSEC3_Msk  /*!< Secure attribute reference for the local resource number x (x = 3)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC4_Pos                 (4U)
#define PWR_RSECCFGR_RSEC4_Msk                 (0x1U << PWR_RSECCFGR_RSEC4_Pos)
#define PWR_RSECCFGR_RSEC4                     PWR_RSECCFGR_RSEC4_Msk  /*!< Secure attribute reference for the local resource number x (x = 4)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC5_Pos                 (5U)
#define PWR_RSECCFGR_RSEC5_Msk                 (0x1U << PWR_RSECCFGR_RSEC5_Pos)
#define PWR_RSECCFGR_RSEC5                     PWR_RSECCFGR_RSEC5_Msk  /*!< Secure attribute reference for the local resource number x (x = 5)See RSEC0 for details. */
#define PWR_RSECCFGR_RSEC6_Pos                 (6U)
#define PWR_RSECCFGR_RSEC6_Msk                 (0x1U << PWR_RSECCFGR_RSEC6_Pos)
#define PWR_RSECCFGR_RSEC6                     PWR_RSECCFGR_RSEC6_Msk  /*!< Secure attribute reference for the local resource number x (x = 6)See RSEC0 for details. */

/* Bit fields for PWR_RPRIVCFGR register */
#define PWR_RPRIVCFGR_RPRIV0_Pos               (0U)
#define PWR_RPRIVCFGR_RPRIV0_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV0_Pos)
#define PWR_RPRIVCFGR_RPRIV0                   PWR_RPRIVCFGR_RPRIV0_Msk  /*!< Privileged attribute reference for the local resource number x (x = 0)These bits are written by software to enabled the privileged mode for the local resource x.- 0: The local resource number x is unprivileged. Secure access is also possible.- 1: The local resource number x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_RSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this local resource is enabled by setting CFEN bit in PWR_RxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction. */
#define PWR_RPRIVCFGR_RPRIV1_Pos               (1U)
#define PWR_RPRIVCFGR_RPRIV1_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV1_Pos)
#define PWR_RPRIVCFGR_RPRIV1                   PWR_RPRIVCFGR_RPRIV1_Msk  /*!< Privileged attribute reference for the local resource number x (x = 1)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV2_Pos               (2U)
#define PWR_RPRIVCFGR_RPRIV2_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV2_Pos)
#define PWR_RPRIVCFGR_RPRIV2                   PWR_RPRIVCFGR_RPRIV2_Msk  /*!< Privileged attribute reference for the local resource number x (x = 2)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV3_Pos               (3U)
#define PWR_RPRIVCFGR_RPRIV3_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV3_Pos)
#define PWR_RPRIVCFGR_RPRIV3                   PWR_RPRIVCFGR_RPRIV3_Msk  /*!< Privileged attribute reference for the local resource number x (x = 3)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV4_Pos               (4U)
#define PWR_RPRIVCFGR_RPRIV4_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV4_Pos)
#define PWR_RPRIVCFGR_RPRIV4                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 4)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV5_Pos               (5U)
#define PWR_RPRIVCFGR_RPRIV5_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV5_Pos)
#define PWR_RPRIVCFGR_RPRIV5                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 5)See RPRIV0 for details. */
#define PWR_RPRIVCFGR_RPRIV6_Pos               (6U)
#define PWR_RPRIVCFGR_RPRIV6_Msk               (0x1U << PWR_RPRIVCFGR_RPRIV6_Pos)
#define PWR_RPRIVCFGR_RPRIV6                   PWR_RPRIVCFGR_RPRIV4_Msk  /*!< Privileged attribute reference for the local resource number x (x = 6)See RPRIV0 for details. */

/* Bit fields for PWR_R0CIDCFGR register */
#define PWR_R0CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R0CIDCFGR_CFEN_Msk                 (0x1U << PWR_R0CIDCFGR_CFEN_Pos)
#define PWR_R0CIDCFGR_CFEN                     PWR_R0CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R0CIDCFGR_SCID_Pos                 (4U)
#define PWR_R0CIDCFGR_SCID_Msk                 (0x7U << PWR_R0CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R0CIDCFGR_SCID                     PWR_R0CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R1CIDCFGR register */
#define PWR_R1CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R1CIDCFGR_CFEN_Msk                 (0x1U << PWR_R1CIDCFGR_CFEN_Pos)
#define PWR_R1CIDCFGR_CFEN                     PWR_R1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R1CIDCFGR_SCID_Pos                 (4U)
#define PWR_R1CIDCFGR_SCID_Msk                 (0x7U << PWR_R1CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R1CIDCFGR_SCID                     PWR_R1CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R2CIDCFGR register */
#define PWR_R2CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R2CIDCFGR_CFEN_Msk                 (0x1U << PWR_R2CIDCFGR_CFEN_Pos)
#define PWR_R2CIDCFGR_CFEN                     PWR_R2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R2CIDCFGR_SCID_Pos                 (4U)
#define PWR_R2CIDCFGR_SCID_Msk                 (0x7U << PWR_R2CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R2CIDCFGR_SCID                     PWR_R2CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R3CIDCFGR register */
#define PWR_R3CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R3CIDCFGR_CFEN_Msk                 (0x1U << PWR_R3CIDCFGR_CFEN_Pos)
#define PWR_R3CIDCFGR_CFEN                     PWR_R3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R3CIDCFGR_SCID_Pos                 (4U)
#define PWR_R3CIDCFGR_SCID_Msk                 (0x7U << PWR_R3CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R3CIDCFGR_SCID                     PWR_R3CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R4CIDCFGR register */
#define PWR_R4CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R4CIDCFGR_CFEN_Msk                 (0x1U << PWR_R4CIDCFGR_CFEN_Pos)
#define PWR_R4CIDCFGR_CFEN                     PWR_R4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R4CIDCFGR_SCID_Pos                 (4U)
#define PWR_R4CIDCFGR_SCID_Msk                 (0x7U << PWR_R4CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R4CIDCFGR_SCID                     PWR_R4CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R5CIDCFGR register */
#define PWR_R5CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R5CIDCFGR_CFEN_Msk                 (0x1U << PWR_R5CIDCFGR_CFEN_Pos)
#define PWR_R5CIDCFGR_CFEN                     PWR_R5CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R5CIDCFGR_SCID_Pos                 (4U)
#define PWR_R5CIDCFGR_SCID_Msk                 (0x7U << PWR_R5CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R5CIDCFGR_SCID                     PWR_R5CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_R6CIDCFGR register */
#define PWR_R6CIDCFGR_CFEN_Pos                 (0U)
#define PWR_R6CIDCFGR_CFEN_Msk                 (0x1U << PWR_R6CIDCFGR_CFEN_Pos)
#define PWR_R6CIDCFGR_CFEN                     PWR_R6CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for resource number x.- 1: Compartment-based filtering is enabled for resource number x. */
#define PWR_R6CIDCFGR_SCID_Pos                 (4U)
#define PWR_R6CIDCFGR_SCID_Msk                 (0x7U << PWR_R6CIDCFGR_SCID_Pos)             /*!< 0x00000070 */
#define PWR_R6CIDCFGR_SCID                     PWR_R6CIDCFGR_SCID_Msk                       /*!< Static compartment identifier */

/* Bit fields for PWR_WIOSECCFGR register */
#define PWR_WIOSECCFGR_WIOSEC1_Pos             (0U)
#define PWR_WIOSECCFGR_WIOSEC1_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC1_Pos)
#define PWR_WIOSECCFGR_WIOSEC1                 PWR_WIOSECCFGR_WIOSEC1_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the secure mode for the wakeup IO x.- 0: The wakeup IO x is non-secure. Secure access is also possible.- 1: The wakeup IO x is secure only.This bit can only be written by secure application. If corresponding PRIVx bit is set in PWR_WIOPRIVCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOSECCFGR_WIOSEC2_Pos             (1U)
#define PWR_WIOSECCFGR_WIOSEC2_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC2_Pos)
#define PWR_WIOSECCFGR_WIOSEC2                 PWR_WIOSECCFGR_WIOSEC2_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 2)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC3_Pos             (2U)
#define PWR_WIOSECCFGR_WIOSEC3_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC3_Pos)
#define PWR_WIOSECCFGR_WIOSEC3                 PWR_WIOSECCFGR_WIOSEC3_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 3)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC4_Pos             (3U)
#define PWR_WIOSECCFGR_WIOSEC4_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC4_Pos)
#define PWR_WIOSECCFGR_WIOSEC4                 PWR_WIOSECCFGR_WIOSEC4_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 4)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC5_Pos             (4U)
#define PWR_WIOSECCFGR_WIOSEC5_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC5_Pos)
#define PWR_WIOSECCFGR_WIOSEC5                 PWR_WIOSECCFGR_WIOSEC5_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 5)See WIOSEC1 for details. */
#define PWR_WIOSECCFGR_WIOSEC6_Pos             (5U)
#define PWR_WIOSECCFGR_WIOSEC6_Msk             (0x1U << PWR_WIOSECCFGR_WIOSEC6_Pos)
#define PWR_WIOSECCFGR_WIOSEC6                 PWR_WIOSECCFGR_WIOSEC6_Msk  /*!< Secure attribute reference for the Wakeup IO x (x = 6)See WIOSEC1 for details. */

/* Bit fields for PWR_WIOPRIVCFGR register */
#define PWR_WIOPRIVCFGR_WIOPRIV1_Pos           (0U)
#define PWR_WIOPRIVCFGR_WIOPRIV1_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV1_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV1               PWR_WIOPRIVCFGR_WIOPRIV1_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 1)These bits are written by software to enabled the privileged mode for the Wakeup IO x.- 0: The Wakeup IO x is unprivileged. Privileged access is also possible.- 1: The Wakeup IO x is privileged only.This bit can only be written by privileged application. If corresponding SECx bit is set in PWR_WIOSECCFGR this bit can only be written by secure privileged application.If compartment filtering for this Wakeup IO is enabled by setting CFEN bit in PWR_WIOxCIDCFGR, only an allowed compartment can write this bit, on top of secure and privileged restriction.Authorized compartment value depends on the value of SEM_EN bit in PWR_WIOxCIDCFGR and optionally the SEM_MUTEX bit in PWR_WIOxSEMCR. */
#define PWR_WIOPRIVCFGR_WIOPRIV2_Pos           (1U)
#define PWR_WIOPRIVCFGR_WIOPRIV2_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV2_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV2               PWR_WIOPRIVCFGR_WIOPRIV2_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 2)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV3_Pos           (2U)
#define PWR_WIOPRIVCFGR_WIOPRIV3_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV3_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV3               PWR_WIOPRIVCFGR_WIOPRIV3_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 3)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV4_Pos           (3U)
#define PWR_WIOPRIVCFGR_WIOPRIV4_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV4_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV4               PWR_WIOPRIVCFGR_WIOPRIV4_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 4)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV5_Pos           (4U)
#define PWR_WIOPRIVCFGR_WIOPRIV5_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV5_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV5               PWR_WIOPRIVCFGR_WIOPRIV5_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 5)See WIOPRIV1 for details. */
#define PWR_WIOPRIVCFGR_WIOPRIV6_Pos           (5U)
#define PWR_WIOPRIVCFGR_WIOPRIV6_Msk           (0x1U << PWR_WIOPRIVCFGR_WIOPRIV6_Pos)
#define PWR_WIOPRIVCFGR_WIOPRIV6               PWR_WIOPRIVCFGR_WIOPRIV6_Msk  /*!< Privileged attribute reference for the Wakeup IO x (x = 6)See WIOPRIV1 for details. */

/* Bit fields for PWR_WIO1CIDCFGR register */
#define PWR_WIO1CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO1CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO1CIDCFGR_CFEN_Pos)
#define PWR_WIO1CIDCFGR_CFEN                   PWR_WIO1CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO1CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO1CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO1CIDCFGR_SEM_EN_Pos)
#define PWR_WIO1CIDCFGR_SEM_EN                 PWR_WIO1CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO1CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO1CIDCFGR_SCID_Msk               (0x7U << PWR_WIO1CIDCFGR_SCID_Pos)
#define PWR_WIO1CIDCFGR_SCID                   PWR_WIO1CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO1CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO1CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC0                PWR_WIO1CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO1CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC1                PWR_WIO1CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO1CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC2                PWR_WIO1CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO1CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC3                PWR_WIO1CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO1CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC4                PWR_WIO1CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO1CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC5                PWR_WIO1CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO1CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC6                PWR_WIO1CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO1CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO1CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO1CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO1CIDCFGR_SEMWLC7                PWR_WIO1CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO1SEMCR register */
#define PWR_WIO1SEMCR_SEMCID_CID1       (RIF_CID_CPU1_CA35 << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CID2       (RIF_CID_CPU2_CM33 << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CID3       (RIF_CID_CPU3_CM0  << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID_CURRENT    PWR_WIO1SEMCR_SEMCID_CID3

#define PWR_WIO1SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO1SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO1SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO1SEMCR_SEM_MUTEX                PWR_WIO1SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO1SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO1SEMCR_SEMCID_Msk               (0x7U << PWR_WIO1SEMCR_SEMCID_Pos)
#define PWR_WIO1SEMCR_SEMCID                   PWR_WIO1SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO2CIDCFGR register */
#define PWR_WIO2CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO2CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO2CIDCFGR_CFEN_Pos)
#define PWR_WIO2CIDCFGR_CFEN                   PWR_WIO2CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO2CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO2CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO2CIDCFGR_SEM_EN_Pos)
#define PWR_WIO2CIDCFGR_SEM_EN                 PWR_WIO2CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO2CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO2CIDCFGR_SCID_Msk               (0x7U << PWR_WIO2CIDCFGR_SCID_Pos)
#define PWR_WIO2CIDCFGR_SCID                   PWR_WIO2CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO2CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO2CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC0                PWR_WIO2CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO2CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC1                PWR_WIO2CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO2CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC2                PWR_WIO2CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO2CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC3                PWR_WIO2CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO2CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC4                PWR_WIO2CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO2CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC5                PWR_WIO2CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO2CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC6                PWR_WIO2CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO2CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO2CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO2CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO2CIDCFGR_SEMWLC7                PWR_WIO2CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO2SEMCR register */
#define PWR_WIO2SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO2SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO2SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO2SEMCR_SEM_MUTEX                PWR_WIO2SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO2SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO2SEMCR_SEMCID_Msk               (0x7U << PWR_WIO2SEMCR_SEMCID_Pos)
#define PWR_WIO2SEMCR_SEMCID                   PWR_WIO2SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO3CIDCFGR register */
#define PWR_WIO3CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO3CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO3CIDCFGR_CFEN_Pos)
#define PWR_WIO3CIDCFGR_CFEN                   PWR_WIO3CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO3CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO3CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO3CIDCFGR_SEM_EN_Pos)
#define PWR_WIO3CIDCFGR_SEM_EN                 PWR_WIO3CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO3CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO3CIDCFGR_SCID_Msk               (0x7U << PWR_WIO3CIDCFGR_SCID_Pos)
#define PWR_WIO3CIDCFGR_SCID                   PWR_WIO3CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO3CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO3CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC0                PWR_WIO3CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO3CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC1                PWR_WIO3CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO3CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC2                PWR_WIO3CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO3CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC3                PWR_WIO3CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO3CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC4                PWR_WIO3CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO3CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC5                PWR_WIO3CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO3CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC6                PWR_WIO3CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO3CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO3CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO3CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO3CIDCFGR_SEMWLC7                PWR_WIO3CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO3SEMCR register */
#define PWR_WIO3SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO3SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO3SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO3SEMCR_SEM_MUTEX                PWR_WIO3SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO3SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO3SEMCR_SEMCID_Msk               (0x7U << PWR_WIO3SEMCR_SEMCID_Pos)
#define PWR_WIO3SEMCR_SEMCID                   PWR_WIO3SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO4CIDCFGR register */
#define PWR_WIO4CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO4CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO4CIDCFGR_CFEN_Pos)
#define PWR_WIO4CIDCFGR_CFEN                   PWR_WIO4CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO4CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO4CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO4CIDCFGR_SEM_EN_Pos)
#define PWR_WIO4CIDCFGR_SEM_EN                 PWR_WIO4CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO4CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO4CIDCFGR_SCID_Msk               (0x7U << PWR_WIO4CIDCFGR_SCID_Pos)
#define PWR_WIO4CIDCFGR_SCID                   PWR_WIO4CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO4CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO4CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC0                PWR_WIO4CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO4CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC1                PWR_WIO4CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO4CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC2                PWR_WIO4CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO4CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC3                PWR_WIO4CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO4CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC4                PWR_WIO4CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO4CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC5                PWR_WIO4CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO4CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC6                PWR_WIO4CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO4CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO4CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO4CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO4CIDCFGR_SEMWLC7                PWR_WIO4CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO4SEMCR register */
#define PWR_WIO4SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO4SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO4SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO4SEMCR_SEM_MUTEX                PWR_WIO4SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO4SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO4SEMCR_SEMCID_Msk               (0x7U << PWR_WIO4SEMCR_SEMCID_Pos)
#define PWR_WIO4SEMCR_SEMCID                   PWR_WIO4SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO5CIDCFGR register */
#define PWR_WIO5CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO5CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO5CIDCFGR_CFEN_Pos)
#define PWR_WIO5CIDCFGR_CFEN                   PWR_WIO5CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO5CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO5CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO5CIDCFGR_SEM_EN_Pos)
#define PWR_WIO5CIDCFGR_SEM_EN                 PWR_WIO5CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO5CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO5CIDCFGR_SCID_Msk               (0x7U << PWR_WIO5CIDCFGR_SCID_Pos)
#define PWR_WIO5CIDCFGR_SCID                   PWR_WIO5CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO5CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO5CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC0                PWR_WIO5CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO5CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC1                PWR_WIO5CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO5CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC2                PWR_WIO5CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO5CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC3                PWR_WIO5CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO5CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC4                PWR_WIO5CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO5CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC5                PWR_WIO5CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO5CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC6                PWR_WIO5CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO5CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO5CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO5CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO5CIDCFGR_SEMWLC7                PWR_WIO5CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO5SEMCR register */
#define PWR_WIO5SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO5SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO5SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO5SEMCR_SEM_MUTEX                PWR_WIO5SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO5SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO5SEMCR_SEMCID_Msk               (0x7U << PWR_WIO5SEMCR_SEMCID_Pos)
#define PWR_WIO5SEMCR_SEMCID                   PWR_WIO5SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_WIO6CIDCFGR register */
#define PWR_WIO6CIDCFGR_CFEN_Pos               (0U)
#define PWR_WIO6CIDCFGR_CFEN_Msk               (0x1U << PWR_WIO6CIDCFGR_CFEN_Pos)
#define PWR_WIO6CIDCFGR_CFEN                   PWR_WIO6CIDCFGR_CFEN_Msk  /*!< Compartment ID filter enable- 0: Compartment-based filtering is disabled for Wakeup IO x.- 1: Compartment-based filtering is enabled for Wakeup IO x. */
#define PWR_WIO6CIDCFGR_SEM_EN_Pos             (1U)
#define PWR_WIO6CIDCFGR_SEM_EN_Msk             (0x1U << PWR_WIO6CIDCFGR_SEM_EN_Pos)
#define PWR_WIO6CIDCFGR_SEM_EN                 PWR_WIO6CIDCFGR_SEM_EN_Msk  /*!< Semaphore enable- 0: Access to Wakeup IO x is granted only if CID of the access equals to SCID.- 1: Access to Wakeup IO x is granted only if SEM_MUTEX=1 and CID of the access equals to SEMCID.This bit is ignored if CFEN=0. When this bit is cleared from 1 SEM_MUTEX is cleared. */
#define PWR_WIO6CIDCFGR_SCID_Pos               (4U)
#define PWR_WIO6CIDCFGR_SCID_Msk               (0x7U << PWR_WIO6CIDCFGR_SCID_Pos)
#define PWR_WIO6CIDCFGR_SCID                   PWR_WIO6CIDCFGR_SCID_Msk  /*!< Static compartment identifierTrusted domain application uses this bitfield to statically define which compartment has accessto the peripheral x when SEM_EN=0.This bit field is ignored if SEM_EN=1 or CFEN=0. */
#define PWR_WIO6CIDCFGR_SEMWLC0_Pos            (16U)
#define PWR_WIO6CIDCFGR_SEMWLC0_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC0_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC0                PWR_WIO6CIDCFGR_SEMWLC0_Msk  /*!< Semaphore compartment ID 0 enable- 0: The Compartment ID 0 agent is disabled to take the semaphore- 1: The Compartment ID 0 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC1_Pos            (17U)
#define PWR_WIO6CIDCFGR_SEMWLC1_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC1_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC1                PWR_WIO6CIDCFGR_SEMWLC1_Msk  /*!< Semaphore compartment ID 1 enable- 0: The Compartment ID 1 agent is disabled to take the semaphore- 1: The Compartment ID 1 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC2_Pos            (18U)
#define PWR_WIO6CIDCFGR_SEMWLC2_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC2_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC2                PWR_WIO6CIDCFGR_SEMWLC2_Msk  /*!< Semaphore compartment ID 2 enable- 0: The Compartment ID 2 agent is disabled to take the semaphore- 1: The Compartment ID 2 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC3_Pos            (19U)
#define PWR_WIO6CIDCFGR_SEMWLC3_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC3_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC3                PWR_WIO6CIDCFGR_SEMWLC3_Msk  /*!< Semaphore compartment ID 3 enable- 0: The Compartment ID 3 agent is disabled to take the semaphore- 1: The Compartment ID 3 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC4_Pos            (20U)
#define PWR_WIO6CIDCFGR_SEMWLC4_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC4_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC4                PWR_WIO6CIDCFGR_SEMWLC4_Msk  /*!< Semaphore compartment ID 4 enable- 0: The Compartment ID 4 agent is disabled to take the semaphore- 1: The Compartment ID 4 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC5_Pos            (21U)
#define PWR_WIO6CIDCFGR_SEMWLC5_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC5_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC5                PWR_WIO6CIDCFGR_SEMWLC5_Msk  /*!< Semaphore compartment ID 5 enable- 0: The Compartment ID 5 agent is disabled to take the semaphore- 1: The Compartment ID 5 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC6_Pos            (22U)
#define PWR_WIO6CIDCFGR_SEMWLC6_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC6_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC6                PWR_WIO6CIDCFGR_SEMWLC6_Msk  /*!< Semaphore compartment ID 6 enable- 0: The Compartment ID 6 agent is disabled to take the semaphore- 1: The Compartment ID 6 agent is enabled to take the semaphore */
#define PWR_WIO6CIDCFGR_SEMWLC7_Pos            (23U)
#define PWR_WIO6CIDCFGR_SEMWLC7_Msk            (0x1U << PWR_WIO6CIDCFGR_SEMWLC7_Pos)
#define PWR_WIO6CIDCFGR_SEMWLC7                PWR_WIO6CIDCFGR_SEMWLC7_Msk  /*!< Semaphore Compartment ID 7 enable- 0: The Compartment ID 7 agent is disabled to take the semaphore- 1: The Compartment ID 7 agent is enabled to take the semaphore */

/* Bit fields for PWR_WIO6SEMCR register */
#define PWR_WIO6SEMCR_SEM_MUTEX_Pos            (0U)
#define PWR_WIO6SEMCR_SEM_MUTEX_Msk            (0x1U << PWR_WIO6SEMCR_SEM_MUTEX_Pos)
#define PWR_WIO6SEMCR_SEM_MUTEX                PWR_WIO6SEMCR_SEM_MUTEX_Msk  /*!< Semaphore mutexApplication can set semaphore bit to get exclusive access to Wakeup IO x when SEM_EN is set in PWR_WIOxCIDCFGR (writes are ignored otherwise).Read 0: Semaphore is free to takeRead 1: Semaphore is takenWrite 0: Release semaphoreWrite 1: Acquire semaphoreWhen SEM_MUTEX=0 only applications belonging to white-listed compartments (defined with SEMWLCy bits in PWR_WIOxCIDCFGR) can acquire this semaphore.When SEM_MUTEX=1 only applications belonging to compartment SEMCID can release this semaphore.This bit is cleared when CFEN or SEM_EN are cleared from 1 in PWR_WIOxCIDCFGR. */
#define PWR_WIO6SEMCR_SEMCID_Pos               (4U)
#define PWR_WIO6SEMCR_SEMCID_Msk               (0x7U << PWR_WIO6SEMCR_SEMCID_Pos)
#define PWR_WIO6SEMCR_SEMCID                   PWR_WIO6SEMCR_SEMCID_Msk  /*!< Semaphore Current Compartment IDWhen SEM_EN=1, this read-only bit field is updated with the CID value of the latest successfulacquisition of PWR_WIOxSEMCR semaphore (SEM_MUTEX bit set to 1). */

/* Bit fields for PWR_CPU1D1SR register */
#define PWR_CPU1D1SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU1D1SR_HOLD_BOOT_Msk             (0x1U << PWR_CPU1D1SR_HOLD_BOOT_Pos)
#define PWR_CPU1D1SR_HOLD_BOOT                 PWR_CPU1D1SR_HOLD_BOOT_Msk  /*!< CPU1 HOLD_BOOT status flag.Set by hardware to indicate when the CPU1 is in HOLD_BOOT state.- 0: CPU1 is allowed to boot.- 1: CPU1 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU1D1SR_CSTATE_Pos                (2U)
#define PWR_CPU1D1SR_CSTATE_Msk                (0x3U << PWR_CPU1D1SR_CSTATE_Pos)
#define PWR_CPU1D1SR_CSTATE                    PWR_CPU1D1SR_CSTATE_Msk  /*!< CPU1 cluster state status.Set by hardware to indicate when the CPU1 is in CRun, CSleep or CStop modes.- 00: CPU1 is in reset (Hold_boot or Wfben).- 01: CPU1 is in CRun state.- 10: CPU1 is in CSleep state.- 11: CPU1 is in CStop state. */
#define PWR_CPU1D1SR_DSTATE_Pos                (8U)
#define PWR_CPU1D1SR_DSTATE_Msk                (0x7U << PWR_CPU1D1SR_DSTATE_Pos)
#define PWR_CPU1D1SR_DSTATE                    PWR_CPU1D1SR_DSTATE_Msk  /*!< D1 domain state status.Set by hardware to indicate when the D1 domain is in DRun, DStop1/2/3 or DStandby mode.- 000: DRun- 001: DStop1- 010: DStop2- 011: DStop3- 100: DStandby */

/* Bit fields for PWR_CPU2D2SR register */
#define PWR_CPU2D2SR_HOLD_BOOT_Pos             (0U)
#define PWR_CPU2D2SR_HOLD_BOOT_Msk             (0x1U << PWR_CPU2D2SR_HOLD_BOOT_Pos)
#define PWR_CPU2D2SR_HOLD_BOOT                 PWR_CPU2D2SR_HOLD_BOOT_Msk  /*!< CPU2 HOLD_BOOT status flag.Set by hardware to indicate when the CPU2 is in HOLD_BOOT state.- 0: CPU2 is allowed to boot.- 1: CPU2 is maintained in HOLD_BOOT state by hardware.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_WFBEN_Pos                 (1U)
#define PWR_CPU2D2SR_WFBEN_Msk                 (0x1U << PWR_CPU2D2SR_WFBEN_Pos)
#define PWR_CPU2D2SR_WFBEN                     PWR_CPU2D2SR_WFBEN_Msk  /*!< CPU2 Wait for boot enable status flag.Set by hardware to indicate when the CPU2 is in wait for boot enable state. Only applicable in Wakeup event mode.- 0: CPU2 is not in wait for boot enable state. Set at â0â in legacy boot mode.- 1: CPU2 is in wait for boot enable state. It will start once an event assign to him will be raised.Refer to RCC specification for details on HOLD_BOOT processor state. */
#define PWR_CPU2D2SR_CSTATE_Pos                (2U)
#define PWR_CPU2D2SR_CSTATE_Msk                (0x3U << PWR_CPU2D2SR_CSTATE_Pos)
#define PWR_CPU2D2SR_CSTATE                    PWR_CPU2D2SR_CSTATE_Msk  /*!< CPU2 cluster state status flag.Set by hardware to indicate when the CPU2 is in CRun, CSleep or CStop states.- 00: CPU2 is in reset (Hold_boot or Wfben).- 01: CPU2 is in CRun state.- 10: CPU2 is in CSleep state.- 11: CPU2 is in CStop state. */
#define PWR_CPU2D2SR_DSTATE_Pos                (8U)
#define PWR_CPU2D2SR_DSTATE_Msk                (0x7U << PWR_CPU2D2SR_DSTATE_Pos)
#define PWR_CPU2D2SR_DSTATE                    PWR_CPU2D2SR_DSTATE_Msk  /*!< System / D2 state status.Set by hardware to indicate when the system / D2 domain is in Run, Stop, LP-Stop, LPLV-Stop, Standby and VBAT modes.- 000: Run- 001: Stop- 010: LP-Stop- 011: LPLV-Stop- 100: Standby- 101: VBAT */

/* Bit fields for PWR_CPU3D3SR register */
#define PWR_CPU3D3SR_CSTATE_Pos                (2U)
#define PWR_CPU3D3SR_CSTATE_Msk                (0x3U << PWR_CPU3D3SR_CSTATE_Pos)
#define PWR_CPU3D3SR_CSTATE                    PWR_CPU3D3SR_CSTATE_Msk  /*!< CPU3 cluster state status flag.Set by hardware to indicate when the CPU3 is in CRun, CSleep or CStop states.- 00: CPU3 is in reset.- 01: CPU3 is in CRun state.- 10: CPU3 is in CSleep state.- 11: CPU3 is in CStop state. */
#define PWR_CPU3D3SR_DSTATE_Pos                (8U)
#define PWR_CPU3D3SR_DSTATE_Msk                (0x7U << PWR_CPU3D3SR_DSTATE_Pos)
#define PWR_CPU3D3SR_DSTATE                    PWR_CPU3D3SR_DSTATE_Msk  /*!< D3 state status.Set by hardware to indicate when the D3 domain is in SRun1/2/3, SStop1/2 and SStandby modes.- 000: SRun1- 001: SRun2- 010: SRun3- 011: SStop1- 100: SStop2- 101: SStandby (only accessible in Debug standby mode) */

/* Bit fields for PWR_VERR register */
#define PWR_VERR_MINREV_Pos                    (0U)
#define PWR_VERR_MINREV_Msk                    (0xfU << PWR_VERR_MINREV_Pos)
#define PWR_VERR_MINREV                        PWR_VERR_MINREV_Msk  /*!< Minor revision number. */
#define PWR_VERR_MAJREV_Pos                    (4U)
#define PWR_VERR_MAJREV_Msk                    (0xfU << PWR_VERR_MAJREV_Pos)
#define PWR_VERR_MAJREV                        PWR_VERR_MAJREV_Msk  /*!< Major revision number. */

/* Bit fields for PWR_IPIDR register */
#define PWR_IPIDR_ID_Pos                       (0U)
#define PWR_IPIDR_ID_Msk                       (0xffffffffU << PWR_IPIDR_ID_Pos)
#define PWR_IPIDR_ID                           PWR_IPIDR_ID_Msk  /*!< Identifier of the PWR */

/* Bit fields for PWR_SIDR register */
#define PWR_SIDR_SID_Pos                       (0U)
#define PWR_SIDR_SID_Msk                       (0xffffffffU << PWR_SIDR_SID_Pos)
#define PWR_SIDR_SID                           PWR_SIDR_SID_Msk  /*!< Decoding space is 1 KB */

/******************************************************************************/
/*                                                                            */
/*                                    RIF                                     */
/*                            (RIF User Spec Rev 1.0.14)                      */
/******************************************************************************/
#define  RIF_CID_CPU1_CA35 0x1U
#define  RIF_CID_CPU2_CM33 0x2U
#define  RIF_CID_CPU3_CM0  0x3U

/*******************  Bits definition for RISC_CR register ********************/
#define RISC_CR_GLOCK_Pos             (0U)
#define RISC_CR_GLOCK_Msk             (0x1U << RISC_CR_GLOCK_Pos)               /*!< 0x00000001 */
#define RISC_CR_GLOCK                 RISC_CR_GLOCK_Msk

/*******************  Bits definition for RISC_SECCFGR0 register **************/
#define RISC_SECCFGR0_SEC0_Pos        (0U)
#define RISC_SECCFGR0_SEC0_Msk        (0x1U << RISC_SECCFGR0_SEC0_Pos)          /*!< 0x00000001 */
#define RISC_SECCFGR0_SEC0            RISC_SECCFGR0_SEC0_Msk
#define RISC_SECCFGR0_SEC1_Pos        (1U)
#define RISC_SECCFGR0_SEC1_Msk        (0x1U << RISC_SECCFGR0_SEC1_Pos)          /*!< 0x00000002 */
#define RISC_SECCFGR0_SEC1            RISC_SECCFGR0_SEC1_Msk
#define RISC_SECCFGR0_SEC2_Pos        (2U)
#define RISC_SECCFGR0_SEC2_Msk        (0x1U << RISC_SECCFGR0_SEC2_Pos)          /*!< 0x00000004 */
#define RISC_SECCFGR0_SEC2            RISC_SECCFGR0_SEC2_Msk
#define RISC_SECCFGR0_SEC3_Pos        (3U)
#define RISC_SECCFGR0_SEC3_Msk        (0x1U << RISC_SECCFGR0_SEC3_Pos)          /*!< 0x00000008 */
#define RISC_SECCFGR0_SEC3            RISC_SECCFGR0_SEC3_Msk
#define RISC_SECCFGR0_SEC4_Pos        (4U)
#define RISC_SECCFGR0_SEC4_Msk        (0x1U << RISC_SECCFGR0_SEC4_Pos)          /*!< 0x00000010 */
#define RISC_SECCFGR0_SEC4            RISC_SECCFGR0_SEC4_Msk
#define RISC_SECCFGR0_SEC5_Pos        (5U)
#define RISC_SECCFGR0_SEC5_Msk        (0x1U << RISC_SECCFGR0_SEC5_Pos)          /*!< 0x00000020 */
#define RISC_SECCFGR0_SEC5            RISC_SECCFGR0_SEC5_Msk
#define RISC_SECCFGR0_SEC6_Pos        (6U)
#define RISC_SECCFGR0_SEC6_Msk        (0x1U << RISC_SECCFGR0_SEC6_Pos)          /*!< 0x00000040 */
#define RISC_SECCFGR0_SEC6            RISC_SECCFGR0_SEC6_Msk
#define RISC_SECCFGR0_SEC7_Pos        (7U)
#define RISC_SECCFGR0_SEC7_Msk        (0x1U << RISC_SECCFGR0_SEC7_Pos)          /*!< 0x00000080 */
#define RISC_SECCFGR0_SEC7            RISC_SECCFGR0_SEC7_Msk
#define RISC_SECCFGR0_SEC8_Pos        (8U)
#define RISC_SECCFGR0_SEC8_Msk        (0x1U << RISC_SECCFGR0_SEC8_Pos)          /*!< 0x00000100 */
#define RISC_SECCFGR0_SEC8            RISC_SECCFGR0_SEC8_Msk
#define RISC_SECCFGR0_SEC9_Pos        (9U)
#define RISC_SECCFGR0_SEC9_Msk        (0x1U << RISC_SECCFGR0_SEC9_Pos)          /*!< 0x00000200 */
#define RISC_SECCFGR0_SEC9            RISC_SECCFGR0_SEC9_Msk
#define RISC_SECCFGR0_SEC10_Pos       (10U)
#define RISC_SECCFGR0_SEC10_Msk       (0x1U << RISC_SECCFGR0_SEC10_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR0_SEC10           RISC_SECCFGR0_SEC10_Msk
#define RISC_SECCFGR0_SEC11_Pos       (11U)
#define RISC_SECCFGR0_SEC11_Msk       (0x1U << RISC_SECCFGR0_SEC11_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR0_SEC11           RISC_SECCFGR0_SEC11_Msk
#define RISC_SECCFGR0_SEC12_Pos       (12U)
#define RISC_SECCFGR0_SEC12_Msk       (0x1U << RISC_SECCFGR0_SEC12_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR0_SEC12           RISC_SECCFGR0_SEC12_Msk
#define RISC_SECCFGR0_SEC13_Pos       (13U)
#define RISC_SECCFGR0_SEC13_Msk       (0x1U << RISC_SECCFGR0_SEC13_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR0_SEC13           RISC_SECCFGR0_SEC13_Msk
#define RISC_SECCFGR0_SEC14_Pos       (14U)
#define RISC_SECCFGR0_SEC14_Msk       (0x1U << RISC_SECCFGR0_SEC14_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR0_SEC14           RISC_SECCFGR0_SEC14_Msk
#define RISC_SECCFGR0_SEC15_Pos       (15U)
#define RISC_SECCFGR0_SEC15_Msk       (0x1U << RISC_SECCFGR0_SEC15_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR0_SEC15           RISC_SECCFGR0_SEC15_Msk
#define RISC_SECCFGR0_SEC16_Pos       (16U)
#define RISC_SECCFGR0_SEC16_Msk       (0x1U << RISC_SECCFGR0_SEC16_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR0_SEC16           RISC_SECCFGR0_SEC16_Msk
#define RISC_SECCFGR0_SEC17_Pos       (17U)
#define RISC_SECCFGR0_SEC17_Msk       (0x1U << RISC_SECCFGR0_SEC17_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR0_SEC17           RISC_SECCFGR0_SEC17_Msk
#define RISC_SECCFGR0_SEC18_Pos       (18U)
#define RISC_SECCFGR0_SEC18_Msk       (0x1U << RISC_SECCFGR0_SEC18_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR0_SEC18           RISC_SECCFGR0_SEC18_Msk
#define RISC_SECCFGR0_SEC19_Pos       (19U)
#define RISC_SECCFGR0_SEC19_Msk       (0x1U << RISC_SECCFGR0_SEC19_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR0_SEC19           RISC_SECCFGR0_SEC19_Msk
#define RISC_SECCFGR0_SEC20_Pos       (20U)
#define RISC_SECCFGR0_SEC20_Msk       (0x1U << RISC_SECCFGR0_SEC20_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR0_SEC20           RISC_SECCFGR0_SEC20_Msk
#define RISC_SECCFGR0_SEC21_Pos       (21U)
#define RISC_SECCFGR0_SEC21_Msk       (0x1U << RISC_SECCFGR0_SEC21_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR0_SEC21           RISC_SECCFGR0_SEC21_Msk
#define RISC_SECCFGR0_SEC22_Pos       (22U)
#define RISC_SECCFGR0_SEC22_Msk       (0x1U << RISC_SECCFGR0_SEC22_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR0_SEC22           RISC_SECCFGR0_SEC22_Msk
#define RISC_SECCFGR0_SEC23_Pos       (23U)
#define RISC_SECCFGR0_SEC23_Msk       (0x1U << RISC_SECCFGR0_SEC23_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR0_SEC23           RISC_SECCFGR0_SEC23_Msk
#define RISC_SECCFGR0_SEC24_Pos       (24U)
#define RISC_SECCFGR0_SEC24_Msk       (0x1U << RISC_SECCFGR0_SEC24_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR0_SEC24           RISC_SECCFGR0_SEC24_Msk
#define RISC_SECCFGR0_SEC25_Pos       (25U)
#define RISC_SECCFGR0_SEC25_Msk       (0x1U << RISC_SECCFGR0_SEC25_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR0_SEC25           RISC_SECCFGR0_SEC25_Msk
#define RISC_SECCFGR0_SEC26_Pos       (26U)
#define RISC_SECCFGR0_SEC26_Msk       (0x1U << RISC_SECCFGR0_SEC26_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR0_SEC26           RISC_SECCFGR0_SEC26_Msk
#define RISC_SECCFGR0_SEC27_Pos       (27U)
#define RISC_SECCFGR0_SEC27_Msk       (0x1U << RISC_SECCFGR0_SEC27_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR0_SEC27           RISC_SECCFGR0_SEC27_Msk
#define RISC_SECCFGR0_SEC28_Pos       (28U)
#define RISC_SECCFGR0_SEC28_Msk       (0x1U << RISC_SECCFGR0_SEC28_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR0_SEC28           RISC_SECCFGR0_SEC28_Msk
#define RISC_SECCFGR0_SEC29_Pos       (29U)
#define RISC_SECCFGR0_SEC29_Msk       (0x1U << RISC_SECCFGR0_SEC29_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR0_SEC29           RISC_SECCFGR0_SEC29_Msk
#define RISC_SECCFGR0_SEC30_Pos       (30U)
#define RISC_SECCFGR0_SEC30_Msk       (0x1U << RISC_SECCFGR0_SEC30_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR0_SEC30           RISC_SECCFGR0_SEC30_Msk
#define RISC_SECCFGR0_SEC31_Pos       (31U)
#define RISC_SECCFGR0_SEC31_Msk       (0x1U << RISC_SECCFGR0_SEC31_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR0_SEC31           RISC_SECCFGR0_SEC31_Msk

/*******************  Bits definition for RISC_SECCFGR1 register **************/
#define RISC_SECCFGR1_SEC32_Pos       (0U)
#define RISC_SECCFGR1_SEC32_Msk       (0x1U << RISC_SECCFGR1_SEC32_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR1_SEC32           RISC_SECCFGR1_SEC32_Msk
#define RISC_SECCFGR1_SEC33_Pos       (1U)
#define RISC_SECCFGR1_SEC33_Msk       (0x1U << RISC_SECCFGR1_SEC33_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR1_SEC33           RISC_SECCFGR1_SEC33_Msk
#define RISC_SECCFGR1_SEC34_Pos       (2U)
#define RISC_SECCFGR1_SEC34_Msk       (0x1U << RISC_SECCFGR1_SEC34_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR1_SEC34           RISC_SECCFGR1_SEC34_Msk
#define RISC_SECCFGR1_SEC35_Pos       (3U)
#define RISC_SECCFGR1_SEC35_Msk       (0x1U << RISC_SECCFGR1_SEC35_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR1_SEC35           RISC_SECCFGR1_SEC35_Msk
#define RISC_SECCFGR1_SEC36_Pos       (4U)
#define RISC_SECCFGR1_SEC36_Msk       (0x1U << RISC_SECCFGR1_SEC36_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR1_SEC36           RISC_SECCFGR1_SEC36_Msk
#define RISC_SECCFGR1_SEC37_Pos       (5U)
#define RISC_SECCFGR1_SEC37_Msk       (0x1U << RISC_SECCFGR1_SEC37_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR1_SEC37           RISC_SECCFGR1_SEC37_Msk
#define RISC_SECCFGR1_SEC38_Pos       (6U)
#define RISC_SECCFGR1_SEC38_Msk       (0x1U << RISC_SECCFGR1_SEC38_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR1_SEC38           RISC_SECCFGR1_SEC38_Msk
#define RISC_SECCFGR1_SEC39_Pos       (7U)
#define RISC_SECCFGR1_SEC39_Msk       (0x1U << RISC_SECCFGR1_SEC39_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR1_SEC39           RISC_SECCFGR1_SEC39_Msk
#define RISC_SECCFGR1_SEC40_Pos       (8U)
#define RISC_SECCFGR1_SEC40_Msk       (0x1U << RISC_SECCFGR1_SEC40_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR1_SEC40           RISC_SECCFGR1_SEC40_Msk
#define RISC_SECCFGR1_SEC41_Pos       (9U)
#define RISC_SECCFGR1_SEC41_Msk       (0x1U << RISC_SECCFGR1_SEC41_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR1_SEC41           RISC_SECCFGR1_SEC41_Msk
#define RISC_SECCFGR1_SEC42_Pos       (10U)
#define RISC_SECCFGR1_SEC42_Msk       (0x1U << RISC_SECCFGR1_SEC42_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR1_SEC42           RISC_SECCFGR1_SEC42_Msk
#define RISC_SECCFGR1_SEC43_Pos       (11U)
#define RISC_SECCFGR1_SEC43_Msk       (0x1U << RISC_SECCFGR1_SEC43_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR1_SEC43           RISC_SECCFGR1_SEC43_Msk
#define RISC_SECCFGR1_SEC44_Pos       (12U)
#define RISC_SECCFGR1_SEC44_Msk       (0x1U << RISC_SECCFGR1_SEC44_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR1_SEC44           RISC_SECCFGR1_SEC44_Msk
#define RISC_SECCFGR1_SEC45_Pos       (13U)
#define RISC_SECCFGR1_SEC45_Msk       (0x1U << RISC_SECCFGR1_SEC45_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR1_SEC45           RISC_SECCFGR1_SEC45_Msk
#define RISC_SECCFGR1_SEC46_Pos       (14U)
#define RISC_SECCFGR1_SEC46_Msk       (0x1U << RISC_SECCFGR1_SEC46_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR1_SEC46           RISC_SECCFGR1_SEC46_Msk
#define RISC_SECCFGR1_SEC47_Pos       (15U)
#define RISC_SECCFGR1_SEC47_Msk       (0x1U << RISC_SECCFGR1_SEC47_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR1_SEC47           RISC_SECCFGR1_SEC47_Msk
#define RISC_SECCFGR1_SEC48_Pos       (16U)
#define RISC_SECCFGR1_SEC48_Msk       (0x1U << RISC_SECCFGR1_SEC48_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR1_SEC48           RISC_SECCFGR1_SEC48_Msk
#define RISC_SECCFGR1_SEC49_Pos       (17U)
#define RISC_SECCFGR1_SEC49_Msk       (0x1U << RISC_SECCFGR1_SEC49_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR1_SEC49           RISC_SECCFGR1_SEC49_Msk
#define RISC_SECCFGR1_SEC50_Pos       (18U)
#define RISC_SECCFGR1_SEC50_Msk       (0x1U << RISC_SECCFGR1_SEC50_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR1_SEC50           RISC_SECCFGR1_SEC50_Msk
#define RISC_SECCFGR1_SEC51_Pos       (19U)
#define RISC_SECCFGR1_SEC51_Msk       (0x1U << RISC_SECCFGR1_SEC51_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR1_SEC51           RISC_SECCFGR1_SEC51_Msk
#define RISC_SECCFGR1_SEC52_Pos       (20U)
#define RISC_SECCFGR1_SEC52_Msk       (0x1U << RISC_SECCFGR1_SEC52_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR1_SEC52           RISC_SECCFGR1_SEC52_Msk
#define RISC_SECCFGR1_SEC53_Pos       (21U)
#define RISC_SECCFGR1_SEC53_Msk       (0x1U << RISC_SECCFGR1_SEC53_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR1_SEC53           RISC_SECCFGR1_SEC53_Msk
#define RISC_SECCFGR1_SEC54_Pos       (22U)
#define RISC_SECCFGR1_SEC54_Msk       (0x1U << RISC_SECCFGR1_SEC54_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR1_SEC54           RISC_SECCFGR1_SEC54_Msk
#define RISC_SECCFGR1_SEC55_Pos       (23U)
#define RISC_SECCFGR1_SEC55_Msk       (0x1U << RISC_SECCFGR1_SEC55_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR1_SEC55           RISC_SECCFGR1_SEC55_Msk
#define RISC_SECCFGR1_SEC56_Pos       (24U)
#define RISC_SECCFGR1_SEC56_Msk       (0x1U << RISC_SECCFGR1_SEC56_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR1_SEC56           RISC_SECCFGR1_SEC56_Msk
#define RISC_SECCFGR1_SEC57_Pos       (25U)
#define RISC_SECCFGR1_SEC57_Msk       (0x1U << RISC_SECCFGR1_SEC57_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR1_SEC57           RISC_SECCFGR1_SEC57_Msk
#define RISC_SECCFGR1_SEC58_Pos       (26U)
#define RISC_SECCFGR1_SEC58_Msk       (0x1U << RISC_SECCFGR1_SEC58_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR1_SEC58           RISC_SECCFGR1_SEC58_Msk
#define RISC_SECCFGR1_SEC59_Pos       (27U)
#define RISC_SECCFGR1_SEC59_Msk       (0x1U << RISC_SECCFGR1_SEC59_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR1_SEC59           RISC_SECCFGR1_SEC59_Msk
#define RISC_SECCFGR1_SEC60_Pos       (28U)
#define RISC_SECCFGR1_SEC60_Msk       (0x1U << RISC_SECCFGR1_SEC60_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR1_SEC60           RISC_SECCFGR1_SEC60_Msk
#define RISC_SECCFGR1_SEC61_Pos       (29U)
#define RISC_SECCFGR1_SEC61_Msk       (0x1U << RISC_SECCFGR1_SEC61_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR1_SEC61           RISC_SECCFGR1_SEC61_Msk
#define RISC_SECCFGR1_SEC62_Pos       (30U)
#define RISC_SECCFGR1_SEC62_Msk       (0x1U << RISC_SECCFGR1_SEC62_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR1_SEC62           RISC_SECCFGR1_SEC62_Msk
#define RISC_SECCFGR1_SEC63_Pos       (31U)
#define RISC_SECCFGR1_SEC63_Msk       (0x1U << RISC_SECCFGR1_SEC63_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR1_SEC63           RISC_SECCFGR1_SEC63_Msk

/*******************  Bits definition for RISC_SECCFGR2 register **************/
#define RISC_SECCFGR2_SEC64_Pos       (0U)
#define RISC_SECCFGR2_SEC64_Msk       (0x1U << RISC_SECCFGR2_SEC64_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR2_SEC64           RISC_SECCFGR2_SEC64_Msk
#define RISC_SECCFGR2_SEC65_Pos       (1U)
#define RISC_SECCFGR2_SEC65_Msk       (0x1U << RISC_SECCFGR2_SEC65_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR2_SEC65           RISC_SECCFGR2_SEC65_Msk
#define RISC_SECCFGR2_SEC66_Pos       (2U)
#define RISC_SECCFGR2_SEC66_Msk       (0x1U << RISC_SECCFGR2_SEC66_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR2_SEC66           RISC_SECCFGR2_SEC66_Msk
#define RISC_SECCFGR2_SEC67_Pos       (3U)
#define RISC_SECCFGR2_SEC67_Msk       (0x1U << RISC_SECCFGR2_SEC67_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR2_SEC67           RISC_SECCFGR2_SEC67_Msk
#define RISC_SECCFGR2_SEC68_Pos       (4U)
#define RISC_SECCFGR2_SEC68_Msk       (0x1U << RISC_SECCFGR2_SEC68_Pos)         /*!< 0x00000010 */
#define RISC_SECCFGR2_SEC68           RISC_SECCFGR2_SEC68_Msk
#define RISC_SECCFGR2_SEC69_Pos       (5U)
#define RISC_SECCFGR2_SEC69_Msk       (0x1U << RISC_SECCFGR2_SEC69_Pos)         /*!< 0x00000020 */
#define RISC_SECCFGR2_SEC69           RISC_SECCFGR2_SEC69_Msk
#define RISC_SECCFGR2_SEC70_Pos       (6U)
#define RISC_SECCFGR2_SEC70_Msk       (0x1U << RISC_SECCFGR2_SEC70_Pos)         /*!< 0x00000040 */
#define RISC_SECCFGR2_SEC70           RISC_SECCFGR2_SEC70_Msk
#define RISC_SECCFGR2_SEC71_Pos       (7U)
#define RISC_SECCFGR2_SEC71_Msk       (0x1U << RISC_SECCFGR2_SEC71_Pos)         /*!< 0x00000080 */
#define RISC_SECCFGR2_SEC71            RISC_SECCFGR2_SEC71_Msk
#define RISC_SECCFGR2_SEC72_Pos       (8U)
#define RISC_SECCFGR2_SEC72_Msk       (0x1U << RISC_SECCFGR2_SEC72_Pos)         /*!< 0x00000100 */
#define RISC_SECCFGR2_SEC72           RISC_SECCFGR2_SEC72_Msk
#define RISC_SECCFGR2_SEC73_Pos       (9U)
#define RISC_SECCFGR2_SEC73_Msk       (0x1U << RISC_SECCFGR2_SEC73_Pos)         /*!< 0x00000200 */
#define RISC_SECCFGR2_SEC73           RISC_SECCFGR2_SEC73_Msk
#define RISC_SECCFGR2_SEC74_Pos       (10U)
#define RISC_SECCFGR2_SEC74_Msk       (0x1U << RISC_SECCFGR2_SEC74_Pos)         /*!< 0x00000400 */
#define RISC_SECCFGR2_SEC74           RISC_SECCFGR2_SEC74_Msk
#define RISC_SECCFGR2_SEC75_Pos       (11U)
#define RISC_SECCFGR2_SEC75_Msk       (0x1U << RISC_SECCFGR2_SEC75_Pos)         /*!< 0x00000800 */
#define RISC_SECCFGR2_SEC75           RISC_SECCFGR2_SEC75_Msk
#define RISC_SECCFGR2_SEC76_Pos       (12U)
#define RISC_SECCFGR2_SEC76_Msk       (0x1U << RISC_SECCFGR2_SEC76_Pos)         /*!< 0x00001000 */
#define RISC_SECCFGR2_SEC76           RISC_SECCFGR2_SEC76_Msk
#define RISC_SECCFGR2_SEC77_Pos       (13U)
#define RISC_SECCFGR2_SEC77_Msk       (0x1U << RISC_SECCFGR2_SEC77_Pos)         /*!< 0x00002000 */
#define RISC_SECCFGR2_SEC77           RISC_SECCFGR2_SEC77_Msk
#define RISC_SECCFGR2_SEC78_Pos       (14U)
#define RISC_SECCFGR2_SEC78_Msk       (0x1U << RISC_SECCFGR2_SEC78_Pos)         /*!< 0x00004000 */
#define RISC_SECCFGR2_SEC78           RISC_SECCFGR2_SEC78_Msk
#define RISC_SECCFGR2_SEC79_Pos       (15U)
#define RISC_SECCFGR2_SEC79_Msk       (0x1U << RISC_SECCFGR2_SEC79_Pos)         /*!< 0x00008000 */
#define RISC_SECCFGR2_SEC79           RISC_SECCFGR2_SEC79_Msk
#define RISC_SECCFGR2_SEC80_Pos       (16U)
#define RISC_SECCFGR2_SEC80_Msk       (0x1U << RISC_SECCFGR2_SEC80_Pos)         /*!< 0x00010000 */
#define RISC_SECCFGR2_SEC80           RISC_SECCFGR2_SEC80_Msk
#define RISC_SECCFGR2_SEC81_Pos       (17U)
#define RISC_SECCFGR2_SEC81_Msk       (0x1U << RISC_SECCFGR2_SEC81_Pos)         /*!< 0x00020000 */
#define RISC_SECCFGR2_SEC81           RISC_SECCFGR2_SEC81_Msk
#define RISC_SECCFGR2_SEC82_Pos       (18U)
#define RISC_SECCFGR2_SEC82_Msk       (0x1U << RISC_SECCFGR2_SEC82_Pos)         /*!< 0x00040000 */
#define RISC_SECCFGR2_SEC82           RISC_SECCFGR2_SEC82_Msk
#define RISC_SECCFGR2_SEC83_Pos       (19U)
#define RISC_SECCFGR2_SEC83_Msk       (0x1U << RISC_SECCFGR2_SEC83_Pos)         /*!< 0x00080000 */
#define RISC_SECCFGR2_SEC83           RISC_SECCFGR2_SEC83_Msk
#define RISC_SECCFGR2_SEC84_Pos       (20U)
#define RISC_SECCFGR2_SEC84_Msk       (0x1U << RISC_SECCFGR2_SEC84_Pos)         /*!< 0x00100000 */
#define RISC_SECCFGR2_SEC84           RISC_SECCFGR2_SEC84_Msk
#define RISC_SECCFGR2_SEC85_Pos       (21U)
#define RISC_SECCFGR2_SEC85_Msk       (0x1U << RISC_SECCFGR2_SEC85_Pos)         /*!< 0x00200000 */
#define RISC_SECCFGR2_SEC85           RISC_SECCFGR2_SEC85_Msk
#define RISC_SECCFGR2_SEC86_Pos       (22U)
#define RISC_SECCFGR2_SEC86_Msk       (0x1U << RISC_SECCFGR2_SEC86_Pos)         /*!< 0x00400000 */
#define RISC_SECCFGR2_SEC86           RISC_SECCFGR2_SEC86_Msk
#define RISC_SECCFGR2_SEC87_Pos       (23U)
#define RISC_SECCFGR2_SEC87_Msk       (0x1U << RISC_SECCFGR2_SEC87_Pos)         /*!< 0x00800000 */
#define RISC_SECCFGR2_SEC87           RISC_SECCFGR2_SEC87_Msk
#define RISC_SECCFGR2_SEC88_Pos       (24U)
#define RISC_SECCFGR2_SEC88_Msk       (0x1U << RISC_SECCFGR2_SEC88_Pos)         /*!< 0x01000000 */
#define RISC_SECCFGR2_SEC88           RISC_SECCFGR2_SEC88_Msk
#define RISC_SECCFGR2_SEC89_Pos       (25U)
#define RISC_SECCFGR2_SEC89_Msk       (0x1U << RISC_SECCFGR2_SEC89_Pos)         /*!< 0x02000000 */
#define RISC_SECCFGR2_SEC89           RISC_SECCFGR2_SEC89_Msk
#define RISC_SECCFGR2_SEC90_Pos       (26U)
#define RISC_SECCFGR2_SEC90_Msk       (0x1U << RISC_SECCFGR2_SEC90_Pos)         /*!< 0x04000000 */
#define RISC_SECCFGR2_SEC90           RISC_SECCFGR2_SEC90_Msk
#define RISC_SECCFGR2_SEC91_Pos       (27U)
#define RISC_SECCFGR2_SEC91_Msk       (0x1U << RISC_SECCFGR2_SEC91_Pos)         /*!< 0x08000000 */
#define RISC_SECCFGR2_SEC91           RISC_SECCFGR2_SEC91_Msk
#define RISC_SECCFGR2_SEC92_Pos       (28U)
#define RISC_SECCFGR2_SEC92_Msk       (0x1U << RISC_SECCFGR2_SEC92_Pos)         /*!< 0x10000000 */
#define RISC_SECCFGR2_SEC92           RISC_SECCFGR2_SEC92_Msk
#define RISC_SECCFGR2_SEC93_Pos       (29U)
#define RISC_SECCFGR2_SEC93_Msk       (0x1U << RISC_SECCFGR2_SEC93_Pos)         /*!< 0x20000000 */
#define RISC_SECCFGR2_SEC93           RISC_SECCFGR2_SEC93_Msk
#define RISC_SECCFGR2_SEC94_Pos       (30U)
#define RISC_SECCFGR2_SEC94_Msk       (0x1U << RISC_SECCFGR2_SEC94_Pos)         /*!< 0x40000000 */
#define RISC_SECCFGR2_SEC94           RISC_SECCFGR2_SEC94_Msk
#define RISC_SECCFGR2_SEC95_Pos       (31U)
#define RISC_SECCFGR2_SEC95_Msk       (0x1U << RISC_SECCFGR2_SEC95_Pos)         /*!< 0x80000000 */
#define RISC_SECCFGR2_SEC95           RISC_SECCFGR2_SEC95_Msk

/*******************  Bits definition for RISC_SECCFGR3 register **************/
#define RISC_SECCFGR3_SEC96_Pos       (0U)
#define RISC_SECCFGR3_SEC96_Msk       (0x1U << RISC_SECCFGR3_SEC96_Pos)         /*!< 0x00000001 */
#define RISC_SECCFGR3_SEC96           RISC_SECCFGR3_SEC96_Msk
#define RISC_SECCFGR3_SEC97_Pos       (1U)
#define RISC_SECCFGR3_SEC97_Msk       (0x1U << RISC_SECCFGR3_SEC97_Pos)         /*!< 0x00000002 */
#define RISC_SECCFGR3_SEC97           RISC_SECCFGR3_SEC97_Msk
#define RISC_SECCFGR3_SEC98_Pos       (2U)
#define RISC_SECCFGR3_SEC98_Msk       (0x1U << RISC_SECCFGR3_SEC98_Pos)         /*!< 0x00000004 */
#define RISC_SECCFGR3_SEC98           RISC_SECCFGR3_SEC98_Msk
#define RISC_SECCFGR3_SEC99_Pos       (3U)
#define RISC_SECCFGR3_SEC99_Msk       (0x1U << RISC_SECCFGR3_SEC99_Pos)         /*!< 0x00000008 */
#define RISC_SECCFGR3_SEC99           RISC_SECCFGR3_SEC99_Msk
#define RISC_SECCFGR3_SEC100_Pos      (4U)
#define RISC_SECCFGR3_SEC100_Msk      (0x1U << RISC_SECCFGR3_SEC100_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR3_SEC100          RISC_SECCFGR3_SEC100_Msk
#define RISC_SECCFGR3_SEC101_Pos      (5U)
#define RISC_SECCFGR3_SEC101_Msk      (0x1U << RISC_SECCFGR3_SEC101_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR3_SEC101          RISC_SECCFGR3_SEC101_Msk
#define RISC_SECCFGR3_SEC102_Pos      (6U)
#define RISC_SECCFGR3_SEC102_Msk      (0x1U << RISC_SECCFGR3_SEC102_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR3_SEC102          RISC_SECCFGR3_SEC102_Msk
#define RISC_SECCFGR3_SEC103_Pos      (7U)
#define RISC_SECCFGR3_SEC103_Msk      (0x1U << RISC_SECCFGR3_SEC103_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR3_SEC103          RISC_SECCFGR3_SEC103_Msk
#define RISC_SECCFGR3_SEC104_Pos      (8U)
#define RISC_SECCFGR3_SEC104_Msk      (0x1U << RISC_SECCFGR3_SEC104_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR3_SEC104          RISC_SECCFGR3_SEC104_Msk
#define RISC_SECCFGR3_SEC105_Pos      (9U)
#define RISC_SECCFGR3_SEC105_Msk      (0x1U << RISC_SECCFGR3_SEC105_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR3_SEC105          RISC_SECCFGR3_SEC105_Msk
#define RISC_SECCFGR3_SEC106_Pos      (10U)
#define RISC_SECCFGR3_SEC106_Msk      (0x1U << RISC_SECCFGR3_SEC106_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR3_SEC106          RISC_SECCFGR3_SEC106_Msk
#define RISC_SECCFGR3_SEC107_Pos      (11U)
#define RISC_SECCFGR3_SEC107_Msk      (0x1U << RISC_SECCFGR3_SEC107_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR3_SEC107          RISC_SECCFGR3_SEC107_Msk
#define RISC_SECCFGR3_SEC108_Pos      (12U)
#define RISC_SECCFGR3_SEC108_Msk      (0x1U << RISC_SECCFGR3_SEC108_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR3_SEC108          RISC_SECCFGR3_SEC108_Msk
#define RISC_SECCFGR3_SEC109_Pos      (13U)
#define RISC_SECCFGR3_SEC109_Msk      (0x1U << RISC_SECCFGR3_SEC109_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR3_SEC109          RISC_SECCFGR3_SEC109_Msk
#define RISC_SECCFGR3_SEC110_Pos      (14U)
#define RISC_SECCFGR3_SEC110_Msk      (0x1U << RISC_SECCFGR3_SEC110_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR3_SEC110          RISC_SECCFGR3_SEC110_Msk
#define RISC_SECCFGR3_SEC111_Pos      (15U)
#define RISC_SECCFGR3_SEC111_Msk      (0x1U << RISC_SECCFGR3_SEC111_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR3_SEC111          RISC_SECCFGR3_SEC111_Msk
#define RISC_SECCFGR3_SEC112_Pos      (16U)
#define RISC_SECCFGR3_SEC112_Msk      (0x1U << RISC_SECCFGR3_SEC112_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR3_SEC112          RISC_SECCFGR3_SEC112_Msk
#define RISC_SECCFGR3_SEC113_Pos      (17U)
#define RISC_SECCFGR3_SEC113_Msk      (0x1U << RISC_SECCFGR3_SEC113_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR3_SEC113          RISC_SECCFGR3_SEC113_Msk
#define RISC_SECCFGR3_SEC114_Pos      (18U)
#define RISC_SECCFGR3_SEC114_Msk      (0x1U << RISC_SECCFGR3_SEC114_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR3_SEC114          RISC_SECCFGR3_SEC114_Msk
#define RISC_SECCFGR3_SEC115_Pos      (19U)
#define RISC_SECCFGR3_SEC115_Msk      (0x1U << RISC_SECCFGR3_SEC115_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR3_SEC115          RISC_SECCFGR3_SEC115_Msk
#define RISC_SECCFGR3_SEC116_Pos      (20U)
#define RISC_SECCFGR3_SEC116_Msk      (0x1U << RISC_SECCFGR3_SEC116_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR3_SEC116          RISC_SECCFGR3_SEC116_Msk
#define RISC_SECCFGR3_SEC117_Pos      (21U)
#define RISC_SECCFGR3_SEC117_Msk      (0x1U << RISC_SECCFGR3_SEC117_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR3_SEC117          RISC_SECCFGR3_SEC117_Msk
#define RISC_SECCFGR3_SEC118_Pos      (22U)
#define RISC_SECCFGR3_SEC118_Msk      (0x1U << RISC_SECCFGR3_SEC118_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR3_SEC118          RISC_SECCFGR3_SEC118_Msk
#define RISC_SECCFGR3_SEC119_Pos      (23U)
#define RISC_SECCFGR3_SEC119_Msk      (0x1U << RISC_SECCFGR3_SEC119_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR3_SEC119          RISC_SECCFGR3_SEC119_Msk
#define RISC_SECCFGR3_SEC120_Pos      (24U)
#define RISC_SECCFGR3_SEC120_Msk      (0x1U << RISC_SECCFGR3_SEC120_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR3_SEC120          RISC_SECCFGR3_SEC120_Msk
#define RISC_SECCFGR3_SEC121_Pos      (25U)
#define RISC_SECCFGR3_SEC121_Msk      (0x1U << RISC_SECCFGR3_SEC121_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR3_SEC121          RISC_SECCFGR3_SEC121_Msk
#define RISC_SECCFGR3_SEC122_Pos      (26U)
#define RISC_SECCFGR3_SEC122_Msk      (0x1U << RISC_SECCFGR3_SEC122_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR3_SEC122          RISC_SECCFGR3_SEC122_Msk
#define RISC_SECCFGR3_SEC123_Pos      (27U)
#define RISC_SECCFGR3_SEC123_Msk      (0x1U << RISC_SECCFGR3_SEC123_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR3_SEC123          RISC_SECCFGR3_SEC123_Msk
#define RISC_SECCFGR3_SEC124_Pos      (28U)
#define RISC_SECCFGR3_SEC124_Msk      (0x1U << RISC_SECCFGR3_SEC124_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR3_SEC124          RISC_SECCFGR3_SEC124_Msk
#define RISC_SECCFGR3_SEC125_Pos      (29U)
#define RISC_SECCFGR3_SEC125_Msk      (0x1U << RISC_SECCFGR3_SEC125_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR3_SEC125          RISC_SECCFGR3_SEC125_Msk
#define RISC_SECCFGR3_SEC126_Pos      (30U)
#define RISC_SECCFGR3_SEC126_Msk      (0x1U << RISC_SECCFGR3_SEC126_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR3_SEC126          RISC_SECCFGR3_SEC126_Msk
#define RISC_SECCFGR3_SEC127_Pos      (31U)
#define RISC_SECCFGR3_SEC127_Msk      (0x1U << RISC_SECCFGR3_SEC127_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR3_SEC127          RISC_SECCFGR3_SEC127_Msk

/*******************  Bits definition for RISC_SECCFGR4 register **************/
#define RISC_SECCFGR4_SEC128_Pos      (0U)
#define RISC_SECCFGR4_SEC128_Msk      (0x1U << RISC_SECCFGR4_SEC128_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR4_SEC128          RISC_SECCFGR4_SEC128_Msk
#define RISC_SECCFGR4_SEC129_Pos      (1U)
#define RISC_SECCFGR4_SEC129_Msk      (0x1U << RISC_SECCFGR4_SEC129_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR4_SEC129          RISC_SECCFGR4_SEC129_Msk
#define RISC_SECCFGR4_SEC130_Pos      (2U)
#define RISC_SECCFGR4_SEC130_Msk      (0x1U << RISC_SECCFGR4_SEC130_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR4_SEC130          RISC_SECCFGR4_SEC130_Msk
#define RISC_SECCFGR4_SEC131_Pos      (3U)
#define RISC_SECCFGR4_SEC131_Msk      (0x1U << RISC_SECCFGR4_SEC131_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR4_SEC131          RISC_SECCFGR4_SEC131_Msk
#define RISC_SECCFGR4_SEC132_Pos      (4U)
#define RISC_SECCFGR4_SEC132_Msk      (0x1U << RISC_SECCFGR4_SEC132_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR4_SEC132          RISC_SECCFGR4_SEC132_Msk
#define RISC_SECCFGR4_SEC133_Pos      (5U)
#define RISC_SECCFGR4_SEC133_Msk      (0x1U << RISC_SECCFGR4_SEC133_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR4_SEC133          RISC_SECCFGR4_SEC133_Msk
#define RISC_SECCFGR4_SEC134_Pos      (6U)
#define RISC_SECCFGR4_SEC134_Msk      (0x1U << RISC_SECCFGR4_SEC134_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR4_SEC134          RISC_SECCFGR4_SEC134_Msk
#define RISC_SECCFGR4_SEC135_Pos      (7U)
#define RISC_SECCFGR4_SEC135_Msk      (0x1U << RISC_SECCFGR4_SEC135_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR4_SEC135          RISC_SECCFGR4_SEC135_Msk
#define RISC_SECCFGR4_SEC136_Pos      (8U)
#define RISC_SECCFGR4_SEC136_Msk      (0x1U << RISC_SECCFGR4_SEC136_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR4_SEC136          RISC_SECCFGR4_SEC136_Msk
#define RISC_SECCFGR4_SEC137_Pos      (9U)
#define RISC_SECCFGR4_SEC137_Msk      (0x1U << RISC_SECCFGR4_SEC137_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR4_SEC137          RISC_SECCFGR4_SEC137_Msk
#define RISC_SECCFGR4_SEC138_Pos      (10U)
#define RISC_SECCFGR4_SEC138_Msk      (0x1U << RISC_SECCFGR4_SEC138_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR4_SEC138          RISC_SECCFGR4_SEC138_Msk
#define RISC_SECCFGR4_SEC139_Pos      (11U)
#define RISC_SECCFGR4_SEC139_Msk      (0x1U << RISC_SECCFGR4_SEC139_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR4_SEC139          RISC_SECCFGR4_SEC139_Msk
#define RISC_SECCFGR4_SEC140_Pos      (12U)
#define RISC_SECCFGR4_SEC140_Msk      (0x1U << RISC_SECCFGR4_SEC140_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR4_SEC140          RISC_SECCFGR4_SEC140_Msk
#define RISC_SECCFGR4_SEC141_Pos      (13U)
#define RISC_SECCFGR4_SEC141_Msk      (0x1U << RISC_SECCFGR4_SEC141_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR4_SEC141          RISC_SECCFGR4_SEC141_Msk
#define RISC_SECCFGR4_SEC142_Pos      (14U)
#define RISC_SECCFGR4_SEC142_Msk      (0x1U << RISC_SECCFGR4_SEC142_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR4_SEC142          RISC_SECCFGR4_SEC142_Msk
#define RISC_SECCFGR4_SEC143_Pos      (15U)
#define RISC_SECCFGR4_SEC143_Msk      (0x1U << RISC_SECCFGR4_SEC143_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR4_SEC143          RISC_SECCFGR4_SEC143_Msk
#define RISC_SECCFGR4_SEC144_Pos      (16U)
#define RISC_SECCFGR4_SEC144_Msk      (0x1U << RISC_SECCFGR4_SEC144_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR4_SEC144          RISC_SECCFGR4_SEC144_Msk
#define RISC_SECCFGR4_SEC145_Pos      (17U)
#define RISC_SECCFGR4_SEC145_Msk      (0x1U << RISC_SECCFGR4_SEC145_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR4_SEC145          RISC_SECCFGR4_SEC145_Msk
#define RISC_SECCFGR4_SEC146_Pos      (18U)
#define RISC_SECCFGR4_SEC146_Msk      (0x1U << RISC_SECCFGR4_SEC146_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR4_SEC146          RISC_SECCFGR4_SEC146_Msk
#define RISC_SECCFGR4_SEC147_Pos      (19U)
#define RISC_SECCFGR4_SEC147_Msk      (0x1U << RISC_SECCFGR4_SEC147_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR4_SEC147          RISC_SECCFGR4_SEC147_Msk
#define RISC_SECCFGR4_SEC148_Pos      (20U)
#define RISC_SECCFGR4_SEC148_Msk      (0x1U << RISC_SECCFGR4_SEC148_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR4_SEC148          RISC_SECCFGR4_SEC148_Msk
#define RISC_SECCFGR4_SEC149_Pos      (21U)
#define RISC_SECCFGR4_SEC149_Msk      (0x1U << RISC_SECCFGR4_SEC149_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR4_SEC149          RISC_SECCFGR4_SEC149_Msk
#define RISC_SECCFGR4_SEC150_Pos      (22U)
#define RISC_SECCFGR4_SEC150_Msk      (0x1U << RISC_SECCFGR4_SEC150_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR4_SEC150          RISC_SECCFGR4_SEC150_Msk
#define RISC_SECCFGR4_SEC151_Pos      (23U)
#define RISC_SECCFGR4_SEC151_Msk      (0x1U << RISC_SECCFGR4_SEC151_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR4_SEC151          RISC_SECCFGR4_SEC151_Msk
#define RISC_SECCFGR4_SEC152_Pos      (24U)
#define RISC_SECCFGR4_SEC152_Msk      (0x1U << RISC_SECCFGR4_SEC152_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR4_SEC152          RISC_SECCFGR4_SEC152_Msk
#define RISC_SECCFGR4_SEC153_Pos      (25U)
#define RISC_SECCFGR4_SEC153_Msk      (0x1U << RISC_SECCFGR4_SEC153_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR4_SEC153          RISC_SECCFGR4_SEC153_Msk
#define RISC_SECCFGR4_SEC154_Pos      (26U)
#define RISC_SECCFGR4_SEC154_Msk      (0x1U << RISC_SECCFGR4_SEC154_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR4_SEC154          RISC_SECCFGR4_SEC154_Msk
#define RISC_SECCFGR4_SEC155_Pos      (27U)
#define RISC_SECCFGR4_SEC155_Msk      (0x1U << RISC_SECCFGR4_SEC155_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR4_SEC155          RISC_SECCFGR4_SEC155_Msk
#define RISC_SECCFGR4_SEC156_Pos      (28U)
#define RISC_SECCFGR4_SEC156_Msk      (0x1U << RISC_SECCFGR4_SEC156_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR4_SEC156          RISC_SECCFGR4_SEC156_Msk
#define RISC_SECCFGR4_SEC157_Pos      (29U)
#define RISC_SECCFGR4_SEC157_Msk      (0x1U << RISC_SECCFGR4_SEC157_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR4_SEC157          RISC_SECCFGR4_SEC157_Msk
#define RISC_SECCFGR4_SEC158_Pos      (30U)
#define RISC_SECCFGR4_SEC158_Msk      (0x1U << RISC_SECCFGR4_SEC158_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR4_SEC158          RISC_SECCFGR4_SEC158_Msk
#define RISC_SECCFGR4_SEC159_Pos      (31U)
#define RISC_SECCFGR4_SEC159_Msk      (0x1U << RISC_SECCFGR4_SEC159_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR4_SEC159          RISC_SECCFGR4_SEC159_Msk

/*******************  Bits definition for RISC_SECCFGR5 register **************/
#define RISC_SECCFGR5_SEC160_Pos      (0U)
#define RISC_SECCFGR5_SEC160_Msk      (0x1U << RISC_SECCFGR5_SEC160_Pos)        /*!< 0x00000001 */
#define RISC_SECCFGR5_SEC160          RISC_SECCFGR5_SEC160_Msk
#define RISC_SECCFGR5_SEC161_Pos      (1U)
#define RISC_SECCFGR5_SEC161_Msk      (0x1U << RISC_SECCFGR5_SEC161_Pos)        /*!< 0x00000002 */
#define RISC_SECCFGR5_SEC161          RISC_SECCFGR5_SEC161_Msk
#define RISC_SECCFGR5_SEC162_Pos      (2U)
#define RISC_SECCFGR5_SEC162_Msk      (0x1U << RISC_SECCFGR5_SEC162_Pos)        /*!< 0x00000004 */
#define RISC_SECCFGR5_SEC162          RISC_SECCFGR5_SEC162_Msk
#define RISC_SECCFGR5_SEC163_Pos      (3U)
#define RISC_SECCFGR5_SEC163_Msk      (0x1U << RISC_SECCFGR5_SEC163_Pos)        /*!< 0x00000008 */
#define RISC_SECCFGR5_SEC163          RISC_SECCFGR5_SEC163_Msk
#define RISC_SECCFGR5_SEC164_Pos      (4U)
#define RISC_SECCFGR5_SEC164_Msk      (0x1U << RISC_SECCFGR5_SEC164_Pos)        /*!< 0x00000010 */
#define RISC_SECCFGR5_SEC164          RISC_SECCFGR5_SEC164_Msk
#define RISC_SECCFGR5_SEC165_Pos      (5U)
#define RISC_SECCFGR5_SEC165_Msk      (0x1U << RISC_SECCFGR5_SEC165_Pos)        /*!< 0x00000020 */
#define RISC_SECCFGR5_SEC165          RISC_SECCFGR5_SEC165_Msk
#define RISC_SECCFGR5_SEC166_Pos      (6U)
#define RISC_SECCFGR5_SEC166_Msk      (0x1U << RISC_SECCFGR5_SEC166_Pos)        /*!< 0x00000040 */
#define RISC_SECCFGR5_SEC166          RISC_SECCFGR5_SEC166_Msk
#define RISC_SECCFGR5_SEC167_Pos      (7U)
#define RISC_SECCFGR5_SEC167_Msk      (0x1U << RISC_SECCFGR5_SEC167_Pos)        /*!< 0x00000080 */
#define RISC_SECCFGR5_SEC167          RISC_SECCFGR5_SEC167_Msk
#define RISC_SECCFGR5_SEC168_Pos      (8U)
#define RISC_SECCFGR5_SEC168_Msk      (0x1U << RISC_SECCFGR5_SEC168_Pos)        /*!< 0x00000100 */
#define RISC_SECCFGR5_SEC168          RISC_SECCFGR5_SEC168_Msk
#define RISC_SECCFGR5_SEC169_Pos      (9U)
#define RISC_SECCFGR5_SEC169_Msk      (0x1U << RISC_SECCFGR5_SEC169_Pos)        /*!< 0x00000200 */
#define RISC_SECCFGR5_SEC169          RISC_SECCFGR5_SEC169_Msk
#define RISC_SECCFGR5_SEC170_Pos      (10U)
#define RISC_SECCFGR5_SEC170_Msk      (0x1U << RISC_SECCFGR5_SEC170_Pos)        /*!< 0x00000400 */
#define RISC_SECCFGR5_SEC170          RISC_SECCFGR5_SEC170_Msk
#define RISC_SECCFGR5_SEC171_Pos      (11U)
#define RISC_SECCFGR5_SEC171_Msk      (0x1U << RISC_SECCFGR5_SEC171_Pos)        /*!< 0x00000800 */
#define RISC_SECCFGR5_SEC171          RISC_SECCFGR5_SEC171_Msk
#define RISC_SECCFGR5_SEC172_Pos      (12U)
#define RISC_SECCFGR5_SEC172_Msk      (0x1U << RISC_SECCFGR5_SEC172_Pos)        /*!< 0x00001000 */
#define RISC_SECCFGR5_SEC172          RISC_SECCFGR5_SEC172_Msk
#define RISC_SECCFGR5_SEC173_Pos      (13U)
#define RISC_SECCFGR5_SEC173_Msk      (0x1U << RISC_SECCFGR5_SEC173_Pos)        /*!< 0x00002000 */
#define RISC_SECCFGR5_SEC173          RISC_SECCFGR5_SEC173_Msk
#define RISC_SECCFGR5_SEC174_Pos      (14U)
#define RISC_SECCFGR5_SEC174_Msk      (0x1U << RISC_SECCFGR5_SEC174_Pos)        /*!< 0x00004000 */
#define RISC_SECCFGR5_SEC174          RISC_SECCFGR5_SEC174_Msk
#define RISC_SECCFGR5_SEC175_Pos      (15U)
#define RISC_SECCFGR5_SEC175_Msk      (0x1U << RISC_SECCFGR5_SEC175_Pos)        /*!< 0x00008000 */
#define RISC_SECCFGR5_SEC175          RISC_SECCFGR5_SEC175_Msk
#define RISC_SECCFGR5_SEC176_Pos      (16U)
#define RISC_SECCFGR5_SEC176_Msk      (0x1U << RISC_SECCFGR5_SEC176_Pos)        /*!< 0x00010000 */
#define RISC_SECCFGR5_SEC176          RISC_SECCFGR5_SEC176_Msk
#define RISC_SECCFGR5_SEC177_Pos      (17U)
#define RISC_SECCFGR5_SEC177_Msk      (0x1U << RISC_SECCFGR5_SEC177_Pos)        /*!< 0x00020000 */
#define RISC_SECCFGR5_SEC177          RISC_SECCFGR5_SEC177_Msk
#define RISC_SECCFGR5_SEC178_Pos      (18U)
#define RISC_SECCFGR5_SEC178_Msk      (0x1U << RISC_SECCFGR5_SEC178_Pos)        /*!< 0x00040000 */
#define RISC_SECCFGR5_SEC178          RISC_SECCFGR5_SEC178_Msk
#define RISC_SECCFGR5_SEC179_Pos      (19U)
#define RISC_SECCFGR5_SEC179_Msk      (0x1U << RISC_SECCFGR5_SEC179_Pos)        /*!< 0x00080000 */
#define RISC_SECCFGR5_SEC179          RISC_SECCFGR5_SEC179_Msk
#define RISC_SECCFGR5_SEC180_Pos      (20U)
#define RISC_SECCFGR5_SEC180_Msk      (0x1U << RISC_SECCFGR5_SEC180_Pos)        /*!< 0x00100000 */
#define RISC_SECCFGR5_SEC180          RISC_SECCFGR5_SEC180_Msk
#define RISC_SECCFGR5_SEC181_Pos      (21U)
#define RISC_SECCFGR5_SEC181_Msk      (0x1U << RISC_SECCFGR5_SEC181_Pos)        /*!< 0x00200000 */
#define RISC_SECCFGR5_SEC181          RISC_SECCFGR5_SEC181_Msk
#define RISC_SECCFGR5_SEC182_Pos      (22U)
#define RISC_SECCFGR5_SEC182_Msk      (0x1U << RISC_SECCFGR5_SEC182_Pos)        /*!< 0x00400000 */
#define RISC_SECCFGR5_SEC182          RISC_SECCFGR5_SEC182_Msk
#define RISC_SECCFGR5_SEC183_Pos      (23U)
#define RISC_SECCFGR5_SEC183_Msk      (0x1U << RISC_SECCFGR5_SEC183_Pos)        /*!< 0x00800000 */
#define RISC_SECCFGR5_SEC183          RISC_SECCFGR5_SEC183_Msk
#define RISC_SECCFGR5_SEC184_Pos      (24U)
#define RISC_SECCFGR5_SEC184_Msk      (0x1U << RISC_SECCFGR5_SEC184_Pos)        /*!< 0x01000000 */
#define RISC_SECCFGR5_SEC184          RISC_SECCFGR5_SEC184_Msk
#define RISC_SECCFGR5_SEC185_Pos      (25U)
#define RISC_SECCFGR5_SEC185_Msk      (0x1U << RISC_SECCFGR5_SEC185_Pos)        /*!< 0x02000000 */
#define RISC_SECCFGR5_SEC185          RISC_SECCFGR5_SEC185_Msk
#define RISC_SECCFGR5_SEC186_Pos      (26U)
#define RISC_SECCFGR5_SEC186_Msk      (0x1U << RISC_SECCFGR5_SEC186_Pos)        /*!< 0x04000000 */
#define RISC_SECCFGR5_SEC186          RISC_SECCFGR5_SEC186_Msk
#define RISC_SECCFGR5_SEC187_Pos      (27U)
#define RISC_SECCFGR5_SEC187_Msk      (0x1U << RISC_SECCFGR5_SEC187_Pos)        /*!< 0x08000000 */
#define RISC_SECCFGR5_SEC187          RISC_SECCFGR5_SEC187_Msk
#define RISC_SECCFGR5_SEC188_Pos      (28U)
#define RISC_SECCFGR5_SEC188_Msk      (0x1U << RISC_SECCFGR5_SEC188_Pos)        /*!< 0x10000000 */
#define RISC_SECCFGR5_SEC188          RISC_SECCFGR5_SEC188_Msk
#define RISC_SECCFGR5_SEC189_Pos      (29U)
#define RISC_SECCFGR5_SEC189_Msk      (0x1U << RISC_SECCFGR5_SEC189_Pos)        /*!< 0x20000000 */
#define RISC_SECCFGR5_SEC189          RISC_SECCFGR5_SEC189_Msk
#define RISC_SECCFGR5_SEC190_Pos      (30U)
#define RISC_SECCFGR5_SEC190_Msk      (0x1U << RISC_SECCFGR5_SEC190_Pos)        /*!< 0x40000000 */
#define RISC_SECCFGR5_SEC190          RISC_SECCFGR5_SEC190_Msk
#define RISC_SECCFGR5_SEC191_Pos      (31U)
#define RISC_SECCFGR5_SEC191_Msk      (0x1U << RISC_SECCFGR5_SEC191_Pos)        /*!< 0x80000000 */
#define RISC_SECCFGR5_SEC191          RISC_SECCFGR5_SEC191_Msk

/*******************  Bits definition for RISC_PRIVCFGR0 register *************/
#define RISC_PRIVCFGR0_PRIV0_Pos      (0U)
#define RISC_PRIVCFGR0_PRIV0_Msk      (0x1U << RISC_PRIVCFGR0_PRIV0_Pos)        /*!< 0x00000001 */
#define RISC_PRIVCFGR0_PRIV0          RISC_PRIVCFGR0_PRIV0_Msk
#define RISC_PRIVCFGR0_PRIV1_Pos      (1U)
#define RISC_PRIVCFGR0_PRIV1_Msk      (0x1U << RISC_PRIVCFGR0_PRIV1_Pos)        /*!< 0x00000002 */
#define RISC_PRIVCFGR0_PRIV1          RISC_PRIVCFGR0_PRIV1_Msk
#define RISC_PRIVCFGR0_PRIV2_Pos      (2U)
#define RISC_PRIVCFGR0_PRIV2_Msk      (0x1U << RISC_PRIVCFGR0_PRIV2_Pos)        /*!< 0x00000004 */
#define RISC_PRIVCFGR0_PRIV2          RISC_PRIVCFGR0_PRIV2_Msk
#define RISC_PRIVCFGR0_PRIV3_Pos      (3U)
#define RISC_PRIVCFGR0_PRIV3_Msk      (0x1U << RISC_PRIVCFGR0_PRIV3_Pos)        /*!< 0x00000008 */
#define RISC_PRIVCFGR0_PRIV3          RISC_PRIVCFGR0_PRIV3_Msk
#define RISC_PRIVCFGR0_PRIV4_Pos      (4U)
#define RISC_PRIVCFGR0_PRIV4_Msk      (0x1U << RISC_PRIVCFGR0_PRIV4_Pos)        /*!< 0x00000010 */
#define RISC_PRIVCFGR0_PRIV4          RISC_PRIVCFGR0_PRIV4_Msk
#define RISC_PRIVCFGR0_PRIV5_Pos      (5U)
#define RISC_PRIVCFGR0_PRIV5_Msk      (0x1U << RISC_PRIVCFGR0_PRIV5_Pos)        /*!< 0x00000020 */
#define RISC_PRIVCFGR0_PRIV5          RISC_PRIVCFGR0_PRIV5_Msk
#define RISC_PRIVCFGR0_PRIV6_Pos      (6U)
#define RISC_PRIVCFGR0_PRIV6_Msk      (0x1U << RISC_PRIVCFGR0_PRIV6_Pos)        /*!< 0x00000040 */
#define RISC_PRIVCFGR0_PRIV6          RISC_PRIVCFGR0_PRIV6_Msk
#define RISC_PRIVCFGR0_PRIV7_Pos      (7U)
#define RISC_PRIVCFGR0_PRIV7_Msk      (0x1U << RISC_PRIVCFGR0_PRIV7_Pos)        /*!< 0x00000080 */
#define RISC_PRIVCFGR0_PRIV7          RISC_PRIVCFGR0_PRIV7_Msk
#define RISC_PRIVCFGR0_PRIV8_Pos      (8U)
#define RISC_PRIVCFGR0_PRIV8_Msk      (0x1U << RISC_PRIVCFGR0_PRIV8_Pos)        /*!< 0x00000100 */
#define RISC_PRIVCFGR0_PRIV8          RISC_PRIVCFGR0_PRIV8_Msk
#define RISC_PRIVCFGR0_PRIV9_Pos      (9U)
#define RISC_PRIVCFGR0_PRIV9_Msk      (0x1U << RISC_PRIVCFGR0_PRIV9_Pos)        /*!< 0x00000200 */
#define RISC_PRIVCFGR0_PRIV9          RISC_PRIVCFGR0_PRIV9_Msk
#define RISC_PRIVCFGR0_PRIV10_Pos     (10U)
#define RISC_PRIVCFGR0_PRIV10_Msk     (0x1U << RISC_PRIVCFGR0_PRIV10_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR0_PRIV10         RISC_PRIVCFGR0_PRIV10_Msk
#define RISC_PRIVCFGR0_PRIV11_Pos     (11U)
#define RISC_PRIVCFGR0_PRIV11_Msk     (0x1U << RISC_PRIVCFGR0_PRIV11_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR0_PRIV11         RISC_PRIVCFGR0_PRIV11_Msk
#define RISC_PRIVCFGR0_PRIV12_Pos     (12U)
#define RISC_PRIVCFGR0_PRIV12_Msk     (0x1U << RISC_PRIVCFGR0_PRIV12_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR0_PRIV12         RISC_PRIVCFGR0_PRIV12_Msk
#define RISC_PRIVCFGR0_PRIV13_Pos     (13U)
#define RISC_PRIVCFGR0_PRIV13_Msk     (0x1U << RISC_PRIVCFGR0_PRIV13_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR0_PRIV13         RISC_PRIVCFGR0_PRIV13_Msk
#define RISC_PRIVCFGR0_PRIV14_Pos     (14U)
#define RISC_PRIVCFGR0_PRIV14_Msk     (0x1U << RISC_PRIVCFGR0_PRIV14_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR0_PRIV14         RISC_PRIVCFGR0_PRIV14_Msk
#define RISC_PRIVCFGR0_PRIV15_Pos     (15U)
#define RISC_PRIVCFGR0_PRIV15_Msk     (0x1U << RISC_PRIVCFGR0_PRIV15_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR0_PRIV15         RISC_PRIVCFGR0_PRIV15_Msk
#define RISC_PRIVCFGR0_PRIV16_Pos     (16U)
#define RISC_PRIVCFGR0_PRIV16_Msk     (0x1U << RISC_PRIVCFGR0_PRIV16_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR0_PRIV16         RISC_PRIVCFGR0_PRIV16_Msk
#define RISC_PRIVCFGR0_PRIV17_Pos     (17U)
#define RISC_PRIVCFGR0_PRIV17_Msk     (0x1U << RISC_PRIVCFGR0_PRIV17_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR0_PRIV17         RISC_PRIVCFGR0_PRIV17_Msk
#define RISC_PRIVCFGR0_PRIV18_Pos     (18U)
#define RISC_PRIVCFGR0_PRIV18_Msk     (0x1U << RISC_PRIVCFGR0_PRIV18_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR0_PRIV18         RISC_PRIVCFGR0_PRIV18_Msk
#define RISC_PRIVCFGR0_PRIV19_Pos     (19U)
#define RISC_PRIVCFGR0_PRIV19_Msk     (0x1U << RISC_PRIVCFGR0_PRIV19_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR0_PRIV19         RISC_PRIVCFGR0_PRIV19_Msk
#define RISC_PRIVCFGR0_PRIV20_Pos     (20U)
#define RISC_PRIVCFGR0_PRIV20_Msk     (0x1U << RISC_PRIVCFGR0_PRIV20_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR0_PRIV20         RISC_PRIVCFGR0_PRIV20_Msk
#define RISC_PRIVCFGR0_PRIV21_Pos     (21U)
#define RISC_PRIVCFGR0_PRIV21_Msk     (0x1U << RISC_PRIVCFGR0_PRIV21_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR0_PRIV21         RISC_PRIVCFGR0_PRIV21_Msk
#define RISC_PRIVCFGR0_PRIV22_Pos     (22U)
#define RISC_PRIVCFGR0_PRIV22_Msk     (0x1U << RISC_PRIVCFGR0_PRIV22_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR0_PRIV22         RISC_PRIVCFGR0_PRIV22_Msk
#define RISC_PRIVCFGR0_PRIV23_Pos     (23U)
#define RISC_PRIVCFGR0_PRIV23_Msk     (0x1U << RISC_PRIVCFGR0_PRIV23_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR0_PRIV23         RISC_PRIVCFGR0_PRIV23_Msk
#define RISC_PRIVCFGR0_PRIV24_Pos     (24U)
#define RISC_PRIVCFGR0_PRIV24_Msk     (0x1U << RISC_PRIVCFGR0_PRIV24_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR0_PRIV24         RISC_PRIVCFGR0_PRIV24_Msk
#define RISC_PRIVCFGR0_PRIV25_Pos     (25U)
#define RISC_PRIVCFGR0_PRIV25_Msk     (0x1U << RISC_PRIVCFGR0_PRIV25_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR0_PRIV25         RISC_PRIVCFGR0_PRIV25_Msk
#define RISC_PRIVCFGR0_PRIV26_Pos     (26U)
#define RISC_PRIVCFGR0_PRIV26_Msk     (0x1U << RISC_PRIVCFGR0_PRIV26_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR0_PRIV26         RISC_PRIVCFGR0_PRIV26_Msk
#define RISC_PRIVCFGR0_PRIV27_Pos     (27U)
#define RISC_PRIVCFGR0_PRIV27_Msk     (0x1U << RISC_PRIVCFGR0_PRIV27_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR0_PRIV27         RISC_PRIVCFGR0_PRIV27_Msk
#define RISC_PRIVCFGR0_PRIV28_Pos     (28U)
#define RISC_PRIVCFGR0_PRIV28_Msk     (0x1U << RISC_PRIVCFGR0_PRIV28_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR0_PRIV28         RISC_PRIVCFGR0_PRIV28_Msk
#define RISC_PRIVCFGR0_PRIV29_Pos     (29U)
#define RISC_PRIVCFGR0_PRIV29_Msk     (0x1U << RISC_PRIVCFGR0_PRIV29_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR0_PRIV29         RISC_PRIVCFGR0_PRIV29_Msk
#define RISC_PRIVCFGR0_PRIV30_Pos     (30U)
#define RISC_PRIVCFGR0_PRIV30_Msk     (0x1U << RISC_PRIVCFGR0_PRIV30_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR0_PRIV30         RISC_PRIVCFGR0_PRIV30_Msk
#define RISC_PRIVCFGR0_PRIV31_Pos     (31U)
#define RISC_PRIVCFGR0_PRIV31_Msk     (0x1U << RISC_PRIVCFGR0_PRIV31_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR0_PRIV31         RISC_PRIVCFGR0_PRIV31_Msk

/*******************  Bits definition for RISC_PRIVCFGR1 register *************/
#define RISC_PRIVCFGR1_PRIV32_Pos     (0U)
#define RISC_PRIVCFGR1_PRIV32_Msk     (0x1U << RISC_PRIVCFGR1_PRIV32_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR1_PRIV32         RISC_PRIVCFGR1_PRIV32_Msk
#define RISC_PRIVCFGR1_PRIV33_Pos     (1U)
#define RISC_PRIVCFGR1_PRIV33_Msk     (0x1U << RISC_PRIVCFGR1_PRIV33_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR1_PRIV33         RISC_PRIVCFGR1_PRIV33_Msk
#define RISC_PRIVCFGR1_PRIV34_Pos     (2U)
#define RISC_PRIVCFGR1_PRIV34_Msk     (0x1U << RISC_PRIVCFGR1_PRIV34_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR1_PRIV34         RISC_PRIVCFGR1_PRIV34_Msk
#define RISC_PRIVCFGR1_PRIV35_Pos     (3U)
#define RISC_PRIVCFGR1_PRIV35_Msk     (0x1U << RISC_PRIVCFGR1_PRIV35_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR1_PRIV35         RISC_PRIVCFGR1_PRIV35_Msk
#define RISC_PRIVCFGR1_PRIV36_Pos     (4U)
#define RISC_PRIVCFGR1_PRIV36_Msk     (0x1U << RISC_PRIVCFGR1_PRIV36_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR1_PRIV36         RISC_PRIVCFGR1_PRIV36_Msk
#define RISC_PRIVCFGR1_PRIV37_Pos     (5U)
#define RISC_PRIVCFGR1_PRIV37_Msk     (0x1U << RISC_PRIVCFGR1_PRIV37_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR1_PRIV37         RISC_PRIVCFGR1_PRIV37_Msk
#define RISC_PRIVCFGR1_PRIV38_Pos     (6U)
#define RISC_PRIVCFGR1_PRIV38_Msk     (0x1U << RISC_PRIVCFGR1_PRIV38_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR1_PRIV38         RISC_PRIVCFGR1_PRIV38_Msk
#define RISC_PRIVCFGR1_PRIV39_Pos     (7U)
#define RISC_PRIVCFGR1_PRIV39_Msk     (0x1U << RISC_PRIVCFGR1_PRIV39_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR1_PRIV39         RISC_PRIVCFGR1_PRIV39_Msk
#define RISC_PRIVCFGR1_PRIV40_Pos     (8U)
#define RISC_PRIVCFGR1_PRIV40_Msk     (0x1U << RISC_PRIVCFGR1_PRIV40_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR1_PRIV40         RISC_PRIVCFGR1_PRIV40_Msk
#define RISC_PRIVCFGR1_PRIV41_Pos     (9U)
#define RISC_PRIVCFGR1_PRIV41_Msk     (0x1U << RISC_PRIVCFGR1_PRIV41_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR1_PRIV41         RISC_PRIVCFGR1_PRIV41_Msk
#define RISC_PRIVCFGR1_PRIV42_Pos     (10U)
#define RISC_PRIVCFGR1_PRIV42_Msk     (0x1U << RISC_PRIVCFGR1_PRIV42_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR1_PRIV42         RISC_PRIVCFGR1_PRIV42_Msk
#define RISC_PRIVCFGR1_PRIV43_Pos     (11U)
#define RISC_PRIVCFGR1_PRIV43_Msk     (0x1U << RISC_PRIVCFGR1_PRIV43_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR1_PRIV43         RISC_PRIVCFGR1_PRIV43_Msk
#define RISC_PRIVCFGR1_PRIV44_Pos     (12U)
#define RISC_PRIVCFGR1_PRIV44_Msk     (0x1U << RISC_PRIVCFGR1_PRIV44_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR1_PRIV44         RISC_PRIVCFGR1_PRIV44_Msk
#define RISC_PRIVCFGR1_PRIV45_Pos     (13U)
#define RISC_PRIVCFGR1_PRIV45_Msk     (0x1U << RISC_PRIVCFGR1_PRIV45_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR1_PRIV45         RISC_PRIVCFGR1_PRIV45_Msk
#define RISC_PRIVCFGR1_PRIV46_Pos     (14U)
#define RISC_PRIVCFGR1_PRIV46_Msk     (0x1U << RISC_PRIVCFGR1_PRIV46_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR1_PRIV46         RISC_PRIVCFGR1_PRIV46_Msk
#define RISC_PRIVCFGR1_PRIV47_Pos     (15U)
#define RISC_PRIVCFGR1_PRIV47_Msk     (0x1U << RISC_PRIVCFGR1_PRIV47_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR1_PRIV47         RISC_PRIVCFGR1_PRIV47_Msk
#define RISC_PRIVCFGR1_PRIV48_Pos     (16U)
#define RISC_PRIVCFGR1_PRIV48_Msk     (0x1U << RISC_PRIVCFGR1_PRIV48_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR1_PRIV48         RISC_PRIVCFGR1_PRIV48_Msk
#define RISC_PRIVCFGR1_PRIV49_Pos     (17U)
#define RISC_PRIVCFGR1_PRIV49_Msk     (0x1U << RISC_PRIVCFGR1_PRIV49_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR1_PRIV49         RISC_PRIVCFGR1_PRIV49_Msk
#define RISC_PRIVCFGR1_PRIV50_Pos     (18U)
#define RISC_PRIVCFGR1_PRIV50_Msk     (0x1U << RISC_PRIVCFGR1_PRIV50_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR1_PRIV50         RISC_PRIVCFGR1_PRIV50_Msk
#define RISC_PRIVCFGR1_PRIV51_Pos     (19U)
#define RISC_PRIVCFGR1_PRIV51_Msk     (0x1U << RISC_PRIVCFGR1_PRIV51_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR1_PRIV51         RISC_PRIVCFGR1_PRIV51_Msk
#define RISC_PRIVCFGR1_PRIV52_Pos     (20U)
#define RISC_PRIVCFGR1_PRIV52_Msk     (0x1U << RISC_PRIVCFGR1_PRIV52_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR1_PRIV52         RISC_PRIVCFGR1_PRIV52_Msk
#define RISC_PRIVCFGR1_PRIV53_Pos     (21U)
#define RISC_PRIVCFGR1_PRIV53_Msk     (0x1U << RISC_PRIVCFGR1_PRIV53_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR1_PRIV53         RISC_PRIVCFGR1_PRIV53_Msk
#define RISC_PRIVCFGR1_PRIV54_Pos     (22U)
#define RISC_PRIVCFGR1_PRIV54_Msk     (0x1U << RISC_PRIVCFGR1_PRIV54_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR1_PRIV54         RISC_PRIVCFGR1_PRIV54_Msk
#define RISC_PRIVCFGR1_PRIV55_Pos     (23U)
#define RISC_PRIVCFGR1_PRIV55_Msk     (0x1U << RISC_PRIVCFGR1_PRIV55_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR1_PRIV55         RISC_PRIVCFGR1_PRIV55_Msk
#define RISC_PRIVCFGR1_PRIV56_Pos     (24U)
#define RISC_PRIVCFGR1_PRIV56_Msk     (0x1U << RISC_PRIVCFGR1_PRIV56_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR1_PRIV56         RISC_PRIVCFGR1_PRIV56_Msk
#define RISC_PRIVCFGR1_PRIV57_Pos     (25U)
#define RISC_PRIVCFGR1_PRIV57_Msk     (0x1U << RISC_PRIVCFGR1_PRIV57_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR1_PRIV57         RISC_PRIVCFGR1_PRIV57_Msk
#define RISC_PRIVCFGR1_PRIV58_Pos     (26U)
#define RISC_PRIVCFGR1_PRIV58_Msk     (0x1U << RISC_PRIVCFGR1_PRIV58_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR1_PRIV58         RISC_PRIVCFGR1_PRIV58_Msk
#define RISC_PRIVCFGR1_PRIV59_Pos     (27U)
#define RISC_PRIVCFGR1_PRIV59_Msk     (0x1U << RISC_PRIVCFGR1_PRIV59_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR1_PRIV59         RISC_PRIVCFGR1_PRIV59_Msk
#define RISC_PRIVCFGR1_PRIV60_Pos     (28U)
#define RISC_PRIVCFGR1_PRIV60_Msk     (0x1U << RISC_PRIVCFGR1_PRIV60_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR1_PRIV60         RISC_PRIVCFGR1_PRIV60_Msk
#define RISC_PRIVCFGR1_PRIV61_Pos     (29U)
#define RISC_PRIVCFGR1_PRIV61_Msk     (0x1U << RISC_PRIVCFGR1_PRIV61_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR1_PRIV61         RISC_PRIVCFGR1_PRIV61_Msk
#define RISC_PRIVCFGR1_PRIV62_Pos     (30U)
#define RISC_PRIVCFGR1_PRIV62_Msk     (0x1U << RISC_PRIVCFGR1_PRIV62_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR1_PRIV62         RISC_PRIVCFGR1_PRIV62_Msk
#define RISC_PRIVCFGR1_PRIV63_Pos     (31U)
#define RISC_PRIVCFGR1_PRIV63_Msk     (0x1U << RISC_PRIVCFGR1_PRIV63_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR1_PRIV63         RISC_PRIVCFGR1_PRIV63_Msk

/*******************  Bits definition for RISC_PRIVCFGR2 register *************/
#define RISC_PRIVCFGR2_PRIV64_Pos     (0U)
#define RISC_PRIVCFGR2_PRIV64_Msk     (0x1U << RISC_PRIVCFGR2_PRIV64_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR2_PRIV64         RISC_PRIVCFGR2_PRIV64_Msk
#define RISC_PRIVCFGR2_PRIV65_Pos     (1U)
#define RISC_PRIVCFGR2_PRIV65_Msk     (0x1U << RISC_PRIVCFGR2_PRIV65_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR2_PRIV65         RISC_PRIVCFGR2_PRIV65_Msk
#define RISC_PRIVCFGR2_PRIV66_Pos     (2U)
#define RISC_PRIVCFGR2_PRIV66_Msk     (0x1U << RISC_PRIVCFGR2_PRIV66_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR2_PRIV66         RISC_PRIVCFGR2_PRIV66_Msk
#define RISC_PRIVCFGR2_PRIV67_Pos     (3U)
#define RISC_PRIVCFGR2_PRIV67_Msk     (0x1U << RISC_PRIVCFGR2_PRIV67_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR2_PRIV67         RISC_PRIVCFGR2_PRIV67_Msk
#define RISC_PRIVCFGR2_PRIV68_Pos     (4U)
#define RISC_PRIVCFGR2_PRIV68_Msk     (0x1U << RISC_PRIVCFGR2_PRIV68_Pos)       /*!< 0x00000010 */
#define RISC_PRIVCFGR2_PRIV68         RISC_PRIVCFGR2_PRIV68_Msk
#define RISC_PRIVCFGR2_PRIV69_Pos     (5U)
#define RISC_PRIVCFGR2_PRIV69_Msk     (0x1U << RISC_PRIVCFGR2_PRIV69_Pos)       /*!< 0x00000020 */
#define RISC_PRIVCFGR2_PRIV69         RISC_PRIVCFGR2_PRIV69_Msk
#define RISC_PRIVCFGR2_PRIV70_Pos     (6U)
#define RISC_PRIVCFGR2_PRIV70_Msk     (0x1U << RISC_PRIVCFGR2_PRIV70_Pos)       /*!< 0x00000040 */
#define RISC_PRIVCFGR2_PRIV70         RISC_PRIVCFGR2_PRIV70_Msk
#define RISC_PRIVCFGR2_PRIV71_Pos     (7U)
#define RISC_PRIVCFGR2_PRIV71_Msk     (0x1U << RISC_PRIVCFGR2_PRIV71_Pos)       /*!< 0x00000080 */
#define RISC_PRIVCFGR2_PRIV71          RISC_PRIVCFGR2_PRIV71_Msk
#define RISC_PRIVCFGR2_PRIV72_Pos     (8U)
#define RISC_PRIVCFGR2_PRIV72_Msk     (0x1U << RISC_PRIVCFGR2_PRIV72_Pos)       /*!< 0x00000100 */
#define RISC_PRIVCFGR2_PRIV72         RISC_PRIVCFGR2_PRIV72_Msk
#define RISC_PRIVCFGR2_PRIV73_Pos     (9U)
#define RISC_PRIVCFGR2_PRIV73_Msk     (0x1U << RISC_PRIVCFGR2_PRIV73_Pos)       /*!< 0x00000200 */
#define RISC_PRIVCFGR2_PRIV73         RISC_PRIVCFGR2_PRIV73_Msk
#define RISC_PRIVCFGR2_PRIV74_Pos     (10U)
#define RISC_PRIVCFGR2_PRIV74_Msk     (0x1U << RISC_PRIVCFGR2_PRIV74_Pos)       /*!< 0x00000400 */
#define RISC_PRIVCFGR2_PRIV74         RISC_PRIVCFGR2_PRIV74_Msk
#define RISC_PRIVCFGR2_PRIV75_Pos     (11U)
#define RISC_PRIVCFGR2_PRIV75_Msk     (0x1U << RISC_PRIVCFGR2_PRIV75_Pos)       /*!< 0x00000800 */
#define RISC_PRIVCFGR2_PRIV75         RISC_PRIVCFGR2_PRIV75_Msk
#define RISC_PRIVCFGR2_PRIV76_Pos     (12U)
#define RISC_PRIVCFGR2_PRIV76_Msk     (0x1U << RISC_PRIVCFGR2_PRIV76_Pos)       /*!< 0x00001000 */
#define RISC_PRIVCFGR2_PRIV76         RISC_PRIVCFGR2_PRIV76_Msk
#define RISC_PRIVCFGR2_PRIV77_Pos     (13U)
#define RISC_PRIVCFGR2_PRIV77_Msk     (0x1U << RISC_PRIVCFGR2_PRIV77_Pos)       /*!< 0x00002000 */
#define RISC_PRIVCFGR2_PRIV77         RISC_PRIVCFGR2_PRIV77_Msk
#define RISC_PRIVCFGR2_PRIV78_Pos     (14U)
#define RISC_PRIVCFGR2_PRIV78_Msk     (0x1U << RISC_PRIVCFGR2_PRIV78_Pos)       /*!< 0x00004000 */
#define RISC_PRIVCFGR2_PRIV78         RISC_PRIVCFGR2_PRIV78_Msk
#define RISC_PRIVCFGR2_PRIV79_Pos     (15U)
#define RISC_PRIVCFGR2_PRIV79_Msk     (0x1U << RISC_PRIVCFGR2_PRIV79_Pos)       /*!< 0x00008000 */
#define RISC_PRIVCFGR2_PRIV79         RISC_PRIVCFGR2_PRIV79_Msk
#define RISC_PRIVCFGR2_PRIV80_Pos     (16U)
#define RISC_PRIVCFGR2_PRIV80_Msk     (0x1U << RISC_PRIVCFGR2_PRIV80_Pos)       /*!< 0x00010000 */
#define RISC_PRIVCFGR2_PRIV80         RISC_PRIVCFGR2_PRIV80_Msk
#define RISC_PRIVCFGR2_PRIV81_Pos     (17U)
#define RISC_PRIVCFGR2_PRIV81_Msk     (0x1U << RISC_PRIVCFGR2_PRIV81_Pos)       /*!< 0x00020000 */
#define RISC_PRIVCFGR2_PRIV81         RISC_PRIVCFGR2_PRIV81_Msk
#define RISC_PRIVCFGR2_PRIV82_Pos     (18U)
#define RISC_PRIVCFGR2_PRIV82_Msk     (0x1U << RISC_PRIVCFGR2_PRIV82_Pos)       /*!< 0x00040000 */
#define RISC_PRIVCFGR2_PRIV82         RISC_PRIVCFGR2_PRIV82_Msk
#define RISC_PRIVCFGR2_PRIV83_Pos     (19U)
#define RISC_PRIVCFGR2_PRIV83_Msk     (0x1U << RISC_PRIVCFGR2_PRIV83_Pos)       /*!< 0x00080000 */
#define RISC_PRIVCFGR2_PRIV83         RISC_PRIVCFGR2_PRIV83_Msk
#define RISC_PRIVCFGR2_PRIV84_Pos     (20U)
#define RISC_PRIVCFGR2_PRIV84_Msk     (0x1U << RISC_PRIVCFGR2_PRIV84_Pos)       /*!< 0x00100000 */
#define RISC_PRIVCFGR2_PRIV84         RISC_PRIVCFGR2_PRIV84_Msk
#define RISC_PRIVCFGR2_PRIV85_Pos     (21U)
#define RISC_PRIVCFGR2_PRIV85_Msk     (0x1U << RISC_PRIVCFGR2_PRIV85_Pos)       /*!< 0x00200000 */
#define RISC_PRIVCFGR2_PRIV85         RISC_PRIVCFGR2_PRIV85_Msk
#define RISC_PRIVCFGR2_PRIV86_Pos     (22U)
#define RISC_PRIVCFGR2_PRIV86_Msk     (0x1U << RISC_PRIVCFGR2_PRIV86_Pos)       /*!< 0x00400000 */
#define RISC_PRIVCFGR2_PRIV86         RISC_PRIVCFGR2_PRIV86_Msk
#define RISC_PRIVCFGR2_PRIV87_Pos     (23U)
#define RISC_PRIVCFGR2_PRIV87_Msk     (0x1U << RISC_PRIVCFGR2_PRIV87_Pos)       /*!< 0x00800000 */
#define RISC_PRIVCFGR2_PRIV87         RISC_PRIVCFGR2_PRIV87_Msk
#define RISC_PRIVCFGR2_PRIV88_Pos     (24U)
#define RISC_PRIVCFGR2_PRIV88_Msk     (0x1U << RISC_PRIVCFGR2_PRIV88_Pos)       /*!< 0x01000000 */
#define RISC_PRIVCFGR2_PRIV88         RISC_PRIVCFGR2_PRIV88_Msk
#define RISC_PRIVCFGR2_PRIV89_Pos     (25U)
#define RISC_PRIVCFGR2_PRIV89_Msk     (0x1U << RISC_PRIVCFGR2_PRIV89_Pos)       /*!< 0x02000000 */
#define RISC_PRIVCFGR2_PRIV89         RISC_PRIVCFGR2_PRIV89_Msk
#define RISC_PRIVCFGR2_PRIV90_Pos     (26U)
#define RISC_PRIVCFGR2_PRIV90_Msk     (0x1U << RISC_PRIVCFGR2_PRIV90_Pos)       /*!< 0x04000000 */
#define RISC_PRIVCFGR2_PRIV90         RISC_PRIVCFGR2_PRIV90_Msk
#define RISC_PRIVCFGR2_PRIV91_Pos     (27U)
#define RISC_PRIVCFGR2_PRIV91_Msk     (0x1U << RISC_PRIVCFGR2_PRIV91_Pos)       /*!< 0x08000000 */
#define RISC_PRIVCFGR2_PRIV91         RISC_PRIVCFGR2_PRIV91_Msk
#define RISC_PRIVCFGR2_PRIV92_Pos     (28U)
#define RISC_PRIVCFGR2_PRIV92_Msk     (0x1U << RISC_PRIVCFGR2_PRIV92_Pos)       /*!< 0x10000000 */
#define RISC_PRIVCFGR2_PRIV92         RISC_PRIVCFGR2_PRIV92_Msk
#define RISC_PRIVCFGR2_PRIV93_Pos     (29U)
#define RISC_PRIVCFGR2_PRIV93_Msk     (0x1U << RISC_PRIVCFGR2_PRIV93_Pos)       /*!< 0x20000000 */
#define RISC_PRIVCFGR2_PRIV93         RISC_PRIVCFGR2_PRIV93_Msk
#define RISC_PRIVCFGR2_PRIV94_Pos     (30U)
#define RISC_PRIVCFGR2_PRIV94_Msk     (0x1U << RISC_PRIVCFGR2_PRIV94_Pos)       /*!< 0x40000000 */
#define RISC_PRIVCFGR2_PRIV94         RISC_PRIVCFGR2_PRIV94_Msk
#define RISC_PRIVCFGR2_PRIV95_Pos     (31U)
#define RISC_PRIVCFGR2_PRIV95_Msk     (0x1U << RISC_PRIVCFGR2_PRIV95_Pos)       /*!< 0x80000000 */
#define RISC_PRIVCFGR2_PRIV95         RISC_PRIVCFGR2_PRIV95_Msk

/*******************  Bits definition for RISC_PRIVCFGR3 register *************/
#define RISC_PRIVCFGR3_PRIV96_Pos     (0U)
#define RISC_PRIVCFGR3_PRIV96_Msk     (0x1U << RISC_PRIVCFGR3_PRIV96_Pos)       /*!< 0x00000001 */
#define RISC_PRIVCFGR3_PRIV96         RISC_PRIVCFGR3_PRIV96_Msk
#define RISC_PRIVCFGR3_PRIV97_Pos     (1U)
#define RISC_PRIVCFGR3_PRIV97_Msk     (0x1U << RISC_PRIVCFGR3_PRIV97_Pos)       /*!< 0x00000002 */
#define RISC_PRIVCFGR3_PRIV97         RISC_PRIVCFGR3_PRIV97_Msk
#define RISC_PRIVCFGR3_PRIV98_Pos     (2U)
#define RISC_PRIVCFGR3_PRIV98_Msk     (0x1U << RISC_PRIVCFGR3_PRIV98_Pos)       /*!< 0x00000004 */
#define RISC_PRIVCFGR3_PRIV98         RISC_PRIVCFGR3_PRIV98_Msk
#define RISC_PRIVCFGR3_PRIV99_Pos     (3U)
#define RISC_PRIVCFGR3_PRIV99_Msk     (0x1U << RISC_PRIVCFGR3_PRIV99_Pos)       /*!< 0x00000008 */
#define RISC_PRIVCFGR3_PRIV99         RISC_PRIVCFGR3_PRIV99_Msk
#define RISC_PRIVCFGR3_PRIV100_Pos    (4U)
#define RISC_PRIVCFGR3_PRIV100_Msk    (0x1U << RISC_PRIVCFGR3_PRIV100_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR3_PRIV100        RISC_PRIVCFGR3_PRIV100_Msk
#define RISC_PRIVCFGR3_PRIV101_Pos    (5U)
#define RISC_PRIVCFGR3_PRIV101_Msk    (0x1U << RISC_PRIVCFGR3_PRIV101_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR3_PRIV101        RISC_PRIVCFGR3_PRIV101_Msk
#define RISC_PRIVCFGR3_PRIV102_Pos    (6U)
#define RISC_PRIVCFGR3_PRIV102_Msk    (0x1U << RISC_PRIVCFGR3_PRIV102_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR3_PRIV102        RISC_PRIVCFGR3_PRIV102_Msk
#define RISC_PRIVCFGR3_PRIV103_Pos    (7U)
#define RISC_PRIVCFGR3_PRIV103_Msk    (0x1U << RISC_PRIVCFGR3_PRIV103_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR3_PRIV103        RISC_PRIVCFGR3_PRIV103_Msk
#define RISC_PRIVCFGR3_PRIV104_Pos    (8U)
#define RISC_PRIVCFGR3_PRIV104_Msk    (0x1U << RISC_PRIVCFGR3_PRIV104_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR3_PRIV104        RISC_PRIVCFGR3_PRIV104_Msk
#define RISC_PRIVCFGR3_PRIV105_Pos    (9U)
#define RISC_PRIVCFGR3_PRIV105_Msk    (0x1U << RISC_PRIVCFGR3_PRIV105_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR3_PRIV105        RISC_PRIVCFGR3_PRIV105_Msk
#define RISC_PRIVCFGR3_PRIV106_Pos    (10U)
#define RISC_PRIVCFGR3_PRIV106_Msk    (0x1U << RISC_PRIVCFGR3_PRIV106_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR3_PRIV106        RISC_PRIVCFGR3_PRIV106_Msk
#define RISC_PRIVCFGR3_PRIV107_Pos    (11U)
#define RISC_PRIVCFGR3_PRIV107_Msk    (0x1U << RISC_PRIVCFGR3_PRIV107_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR3_PRIV107        RISC_PRIVCFGR3_PRIV107_Msk
#define RISC_PRIVCFGR3_PRIV108_Pos    (12U)
#define RISC_PRIVCFGR3_PRIV108_Msk    (0x1U << RISC_PRIVCFGR3_PRIV108_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR3_PRIV108        RISC_PRIVCFGR3_PRIV108_Msk
#define RISC_PRIVCFGR3_PRIV109_Pos    (13U)
#define RISC_PRIVCFGR3_PRIV109_Msk    (0x1U << RISC_PRIVCFGR3_PRIV109_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR3_PRIV109        RISC_PRIVCFGR3_PRIV109_Msk
#define RISC_PRIVCFGR3_PRIV110_Pos    (14U)
#define RISC_PRIVCFGR3_PRIV110_Msk    (0x1U << RISC_PRIVCFGR3_PRIV110_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR3_PRIV110        RISC_PRIVCFGR3_PRIV110_Msk
#define RISC_PRIVCFGR3_PRIV111_Pos    (15U)
#define RISC_PRIVCFGR3_PRIV111_Msk    (0x1U << RISC_PRIVCFGR3_PRIV111_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR3_PRIV111        RISC_PRIVCFGR3_PRIV111_Msk
#define RISC_PRIVCFGR3_PRIV112_Pos    (16U)
#define RISC_PRIVCFGR3_PRIV112_Msk    (0x1U << RISC_PRIVCFGR3_PRIV112_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR3_PRIV112        RISC_PRIVCFGR3_PRIV112_Msk
#define RISC_PRIVCFGR3_PRIV113_Pos    (17U)
#define RISC_PRIVCFGR3_PRIV113_Msk    (0x1U << RISC_PRIVCFGR3_PRIV113_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR3_PRIV113        RISC_PRIVCFGR3_PRIV113_Msk
#define RISC_PRIVCFGR3_PRIV114_Pos    (18U)
#define RISC_PRIVCFGR3_PRIV114_Msk    (0x1U << RISC_PRIVCFGR3_PRIV114_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR3_PRIV114        RISC_PRIVCFGR3_PRIV114_Msk
#define RISC_PRIVCFGR3_PRIV115_Pos    (19U)
#define RISC_PRIVCFGR3_PRIV115_Msk    (0x1U << RISC_PRIVCFGR3_PRIV115_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR3_PRIV115        RISC_PRIVCFGR3_PRIV115_Msk
#define RISC_PRIVCFGR3_PRIV116_Pos    (20U)
#define RISC_PRIVCFGR3_PRIV116_Msk    (0x1U << RISC_PRIVCFGR3_PRIV116_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR3_PRIV116        RISC_PRIVCFGR3_PRIV116_Msk
#define RISC_PRIVCFGR3_PRIV117_Pos    (21U)
#define RISC_PRIVCFGR3_PRIV117_Msk    (0x1U << RISC_PRIVCFGR3_PRIV117_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR3_PRIV117        RISC_PRIVCFGR3_PRIV117_Msk
#define RISC_PRIVCFGR3_PRIV118_Pos    (22U)
#define RISC_PRIVCFGR3_PRIV118_Msk    (0x1U << RISC_PRIVCFGR3_PRIV118_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR3_PRIV118        RISC_PRIVCFGR3_PRIV118_Msk
#define RISC_PRIVCFGR3_PRIV119_Pos    (23U)
#define RISC_PRIVCFGR3_PRIV119_Msk    (0x1U << RISC_PRIVCFGR3_PRIV119_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR3_PRIV119        RISC_PRIVCFGR3_PRIV119_Msk
#define RISC_PRIVCFGR3_PRIV120_Pos    (24U)
#define RISC_PRIVCFGR3_PRIV120_Msk    (0x1U << RISC_PRIVCFGR3_PRIV120_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR3_PRIV120        RISC_PRIVCFGR3_PRIV120_Msk
#define RISC_PRIVCFGR3_PRIV121_Pos    (25U)
#define RISC_PRIVCFGR3_PRIV121_Msk    (0x1U << RISC_PRIVCFGR3_PRIV121_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR3_PRIV121        RISC_PRIVCFGR3_PRIV121_Msk
#define RISC_PRIVCFGR3_PRIV122_Pos    (26U)
#define RISC_PRIVCFGR3_PRIV122_Msk    (0x1U << RISC_PRIVCFGR3_PRIV122_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR3_PRIV122        RISC_PRIVCFGR3_PRIV122_Msk
#define RISC_PRIVCFGR3_PRIV123_Pos    (27U)
#define RISC_PRIVCFGR3_PRIV123_Msk    (0x1U << RISC_PRIVCFGR3_PRIV123_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR3_PRIV123        RISC_PRIVCFGR3_PRIV123_Msk
#define RISC_PRIVCFGR3_PRIV124_Pos    (28U)
#define RISC_PRIVCFGR3_PRIV124_Msk    (0x1U << RISC_PRIVCFGR3_PRIV124_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR3_PRIV124        RISC_PRIVCFGR3_PRIV124_Msk
#define RISC_PRIVCFGR3_PRIV125_Pos    (29U)
#define RISC_PRIVCFGR3_PRIV125_Msk    (0x1U << RISC_PRIVCFGR3_PRIV125_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR3_PRIV125        RISC_PRIVCFGR3_PRIV125_Msk
#define RISC_PRIVCFGR3_PRIV126_Pos    (30U)
#define RISC_PRIVCFGR3_PRIV126_Msk    (0x1U << RISC_PRIVCFGR3_PRIV126_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR3_PRIV126        RISC_PRIVCFGR3_PRIV126_Msk
#define RISC_PRIVCFGR3_PRIV127_Pos    (31U)
#define RISC_PRIVCFGR3_PRIV127_Msk    (0x1U << RISC_PRIVCFGR3_PRIV127_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR3_PRIV127        RISC_PRIVCFGR3_PRIV127_Msk

/*******************  Bits definition for RISC_PRIVCFGR4 register *************/
#define RISC_PRIVCFGR4_PRIV128_Pos    (0U)
#define RISC_PRIVCFGR4_PRIV128_Msk    (0x1U << RISC_PRIVCFGR4_PRIV128_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR4_PRIV128        RISC_PRIVCFGR4_PRIV128_Msk
#define RISC_PRIVCFGR4_PRIV129_Pos    (1U)
#define RISC_PRIVCFGR4_PRIV129_Msk    (0x1U << RISC_PRIVCFGR4_PRIV129_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR4_PRIV129        RISC_PRIVCFGR4_PRIV129_Msk
#define RISC_PRIVCFGR4_PRIV130_Pos    (2U)
#define RISC_PRIVCFGR4_PRIV130_Msk    (0x1U << RISC_PRIVCFGR4_PRIV130_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR4_PRIV130        RISC_PRIVCFGR4_PRIV130_Msk
#define RISC_PRIVCFGR4_PRIV131_Pos    (3U)
#define RISC_PRIVCFGR4_PRIV131_Msk    (0x1U << RISC_PRIVCFGR4_PRIV131_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR4_PRIV131        RISC_PRIVCFGR4_PRIV131_Msk
#define RISC_PRIVCFGR4_PRIV132_Pos    (4U)
#define RISC_PRIVCFGR4_PRIV132_Msk    (0x1U << RISC_PRIVCFGR4_PRIV132_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR4_PRIV132        RISC_PRIVCFGR4_PRIV132_Msk
#define RISC_PRIVCFGR4_PRIV133_Pos    (5U)
#define RISC_PRIVCFGR4_PRIV133_Msk    (0x1U << RISC_PRIVCFGR4_PRIV133_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR4_PRIV133        RISC_PRIVCFGR4_PRIV133_Msk
#define RISC_PRIVCFGR4_PRIV134_Pos    (6U)
#define RISC_PRIVCFGR4_PRIV134_Msk    (0x1U << RISC_PRIVCFGR4_PRIV134_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR4_PRIV134        RISC_PRIVCFGR4_PRIV134_Msk
#define RISC_PRIVCFGR4_PRIV135_Pos    (7U)
#define RISC_PRIVCFGR4_PRIV135_Msk    (0x1U << RISC_PRIVCFGR4_PRIV135_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR4_PRIV135        RISC_PRIVCFGR4_PRIV135_Msk
#define RISC_PRIVCFGR4_PRIV136_Pos    (8U)
#define RISC_PRIVCFGR4_PRIV136_Msk    (0x1U << RISC_PRIVCFGR4_PRIV136_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR4_PRIV136        RISC_PRIVCFGR4_PRIV136_Msk
#define RISC_PRIVCFGR4_PRIV137_Pos    (9U)
#define RISC_PRIVCFGR4_PRIV137_Msk    (0x1U << RISC_PRIVCFGR4_PRIV137_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR4_PRIV137        RISC_PRIVCFGR4_PRIV137_Msk
#define RISC_PRIVCFGR4_PRIV138_Pos    (10U)
#define RISC_PRIVCFGR4_PRIV138_Msk    (0x1U << RISC_PRIVCFGR4_PRIV138_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR4_PRIV138        RISC_PRIVCFGR4_PRIV138_Msk
#define RISC_PRIVCFGR4_PRIV139_Pos    (11U)
#define RISC_PRIVCFGR4_PRIV139_Msk    (0x1U << RISC_PRIVCFGR4_PRIV139_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR4_PRIV139        RISC_PRIVCFGR4_PRIV139_Msk
#define RISC_PRIVCFGR4_PRIV140_Pos    (12U)
#define RISC_PRIVCFGR4_PRIV140_Msk    (0x1U << RISC_PRIVCFGR4_PRIV140_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR4_PRIV140        RISC_PRIVCFGR4_PRIV140_Msk
#define RISC_PRIVCFGR4_PRIV141_Pos    (13U)
#define RISC_PRIVCFGR4_PRIV141_Msk    (0x1U << RISC_PRIVCFGR4_PRIV141_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR4_PRIV141        RISC_PRIVCFGR4_PRIV141_Msk
#define RISC_PRIVCFGR4_PRIV142_Pos    (14U)
#define RISC_PRIVCFGR4_PRIV142_Msk    (0x1U << RISC_PRIVCFGR4_PRIV142_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR4_PRIV142        RISC_PRIVCFGR4_PRIV142_Msk
#define RISC_PRIVCFGR4_PRIV143_Pos    (15U)
#define RISC_PRIVCFGR4_PRIV143_Msk    (0x1U << RISC_PRIVCFGR4_PRIV143_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR4_PRIV143        RISC_PRIVCFGR4_PRIV143_Msk
#define RISC_PRIVCFGR4_PRIV144_Pos    (16U)
#define RISC_PRIVCFGR4_PRIV144_Msk    (0x1U << RISC_PRIVCFGR4_PRIV144_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR4_PRIV144        RISC_PRIVCFGR4_PRIV144_Msk
#define RISC_PRIVCFGR4_PRIV145_Pos    (17U)
#define RISC_PRIVCFGR4_PRIV145_Msk    (0x1U << RISC_PRIVCFGR4_PRIV145_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR4_PRIV145        RISC_PRIVCFGR4_PRIV145_Msk
#define RISC_PRIVCFGR4_PRIV146_Pos    (18U)
#define RISC_PRIVCFGR4_PRIV146_Msk    (0x1U << RISC_PRIVCFGR4_PRIV146_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR4_PRIV146        RISC_PRIVCFGR4_PRIV146_Msk
#define RISC_PRIVCFGR4_PRIV147_Pos    (19U)
#define RISC_PRIVCFGR4_PRIV147_Msk    (0x1U << RISC_PRIVCFGR4_PRIV147_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR4_PRIV147        RISC_PRIVCFGR4_PRIV147_Msk
#define RISC_PRIVCFGR4_PRIV148_Pos    (20U)
#define RISC_PRIVCFGR4_PRIV148_Msk    (0x1U << RISC_PRIVCFGR4_PRIV148_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR4_PRIV148        RISC_PRIVCFGR4_PRIV148_Msk
#define RISC_PRIVCFGR4_PRIV149_Pos    (21U)
#define RISC_PRIVCFGR4_PRIV149_Msk    (0x1U << RISC_PRIVCFGR4_PRIV149_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR4_PRIV149        RISC_PRIVCFGR4_PRIV149_Msk
#define RISC_PRIVCFGR4_PRIV150_Pos    (22U)
#define RISC_PRIVCFGR4_PRIV150_Msk    (0x1U << RISC_PRIVCFGR4_PRIV150_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR4_PRIV150        RISC_PRIVCFGR4_PRIV150_Msk
#define RISC_PRIVCFGR4_PRIV151_Pos    (23U)
#define RISC_PRIVCFGR4_PRIV151_Msk    (0x1U << RISC_PRIVCFGR4_PRIV151_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR4_PRIV151        RISC_PRIVCFGR4_PRIV151_Msk
#define RISC_PRIVCFGR4_PRIV152_Pos    (24U)
#define RISC_PRIVCFGR4_PRIV152_Msk    (0x1U << RISC_PRIVCFGR4_PRIV152_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR4_PRIV152        RISC_PRIVCFGR4_PRIV152_Msk
#define RISC_PRIVCFGR4_PRIV153_Pos    (25U)
#define RISC_PRIVCFGR4_PRIV153_Msk    (0x1U << RISC_PRIVCFGR4_PRIV153_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR4_PRIV153        RISC_PRIVCFGR4_PRIV153_Msk
#define RISC_PRIVCFGR4_PRIV154_Pos    (26U)
#define RISC_PRIVCFGR4_PRIV154_Msk    (0x1U << RISC_PRIVCFGR4_PRIV154_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR4_PRIV154        RISC_PRIVCFGR4_PRIV154_Msk
#define RISC_PRIVCFGR4_PRIV155_Pos    (27U)
#define RISC_PRIVCFGR4_PRIV155_Msk    (0x1U << RISC_PRIVCFGR4_PRIV155_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR4_PRIV155        RISC_PRIVCFGR4_PRIV155_Msk
#define RISC_PRIVCFGR4_PRIV156_Pos    (28U)
#define RISC_PRIVCFGR4_PRIV156_Msk    (0x1U << RISC_PRIVCFGR4_PRIV156_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR4_PRIV156        RISC_PRIVCFGR4_PRIV156_Msk
#define RISC_PRIVCFGR4_PRIV157_Pos    (29U)
#define RISC_PRIVCFGR4_PRIV157_Msk    (0x1U << RISC_PRIVCFGR4_PRIV157_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR4_PRIV157        RISC_PRIVCFGR4_PRIV157_Msk
#define RISC_PRIVCFGR4_PRIV158_Pos    (30U)
#define RISC_PRIVCFGR4_PRIV158_Msk    (0x1U << RISC_PRIVCFGR4_PRIV158_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR4_PRIV158        RISC_PRIVCFGR4_PRIV158_Msk
#define RISC_PRIVCFGR4_PRIV159_Pos    (31U)
#define RISC_PRIVCFGR4_PRIV159_Msk    (0x1U << RISC_PRIVCFGR4_PRIV159_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR4_PRIV159        RISC_PRIVCFGR4_PRIV159_Msk

/*******************  Bits definition for RISC_PRIVCFGR5 register *************/
#define RISC_PRIVCFGR5_PRIV160_Pos    (0U)
#define RISC_PRIVCFGR5_PRIV160_Msk    (0x1U << RISC_PRIVCFGR5_PRIV160_Pos)      /*!< 0x00000001 */
#define RISC_PRIVCFGR5_PRIV160        RISC_PRIVCFGR5_PRIV160_Msk
#define RISC_PRIVCFGR5_PRIV161_Pos    (1U)
#define RISC_PRIVCFGR5_PRIV161_Msk    (0x1U << RISC_PRIVCFGR5_PRIV161_Pos)      /*!< 0x00000002 */
#define RISC_PRIVCFGR5_PRIV161        RISC_PRIVCFGR5_PRIV161_Msk
#define RISC_PRIVCFGR5_PRIV162_Pos    (2U)
#define RISC_PRIVCFGR5_PRIV162_Msk    (0x1U << RISC_PRIVCFGR5_PRIV162_Pos)      /*!< 0x00000004 */
#define RISC_PRIVCFGR5_PRIV162        RISC_PRIVCFGR5_PRIV162_Msk
#define RISC_PRIVCFGR5_PRIV163_Pos    (3U)
#define RISC_PRIVCFGR5_PRIV163_Msk    (0x1U << RISC_PRIVCFGR5_PRIV163_Pos)      /*!< 0x00000008 */
#define RISC_PRIVCFGR5_PRIV163        RISC_PRIVCFGR5_PRIV163_Msk
#define RISC_PRIVCFGR5_PRIV164_Pos    (4U)
#define RISC_PRIVCFGR5_PRIV164_Msk    (0x1U << RISC_PRIVCFGR5_PRIV164_Pos)      /*!< 0x00000010 */
#define RISC_PRIVCFGR5_PRIV164        RISC_PRIVCFGR5_PRIV164_Msk
#define RISC_PRIVCFGR5_PRIV165_Pos    (5U)
#define RISC_PRIVCFGR5_PRIV165_Msk    (0x1U << RISC_PRIVCFGR5_PRIV165_Pos)      /*!< 0x00000020 */
#define RISC_PRIVCFGR5_PRIV165        RISC_PRIVCFGR5_PRIV165_Msk
#define RISC_PRIVCFGR5_PRIV166_Pos    (6U)
#define RISC_PRIVCFGR5_PRIV166_Msk    (0x1U << RISC_PRIVCFGR5_PRIV166_Pos)      /*!< 0x00000040 */
#define RISC_PRIVCFGR5_PRIV166        RISC_PRIVCFGR5_PRIV166_Msk
#define RISC_PRIVCFGR5_PRIV167_Pos    (7U)
#define RISC_PRIVCFGR5_PRIV167_Msk    (0x1U << RISC_PRIVCFGR5_PRIV167_Pos)      /*!< 0x00000080 */
#define RISC_PRIVCFGR5_PRIV167        RISC_PRIVCFGR5_PRIV167_Msk
#define RISC_PRIVCFGR5_PRIV168_Pos    (8U)
#define RISC_PRIVCFGR5_PRIV168_Msk    (0x1U << RISC_PRIVCFGR5_PRIV168_Pos)      /*!< 0x00000100 */
#define RISC_PRIVCFGR5_PRIV168        RISC_PRIVCFGR5_PRIV168_Msk
#define RISC_PRIVCFGR5_PRIV169_Pos    (9U)
#define RISC_PRIVCFGR5_PRIV169_Msk    (0x1U << RISC_PRIVCFGR5_PRIV169_Pos)      /*!< 0x00000200 */
#define RISC_PRIVCFGR5_PRIV169        RISC_PRIVCFGR5_PRIV169_Msk
#define RISC_PRIVCFGR5_PRIV170_Pos    (10U)
#define RISC_PRIVCFGR5_PRIV170_Msk    (0x1U << RISC_PRIVCFGR5_PRIV170_Pos)      /*!< 0x00000400 */
#define RISC_PRIVCFGR5_PRIV170        RISC_PRIVCFGR5_PRIV170_Msk
#define RISC_PRIVCFGR5_PRIV171_Pos    (11U)
#define RISC_PRIVCFGR5_PRIV171_Msk    (0x1U << RISC_PRIVCFGR5_PRIV171_Pos)      /*!< 0x00000800 */
#define RISC_PRIVCFGR5_PRIV171        RISC_PRIVCFGR5_PRIV171_Msk
#define RISC_PRIVCFGR5_PRIV172_Pos    (12U)
#define RISC_PRIVCFGR5_PRIV172_Msk    (0x1U << RISC_PRIVCFGR5_PRIV172_Pos)      /*!< 0x00001000 */
#define RISC_PRIVCFGR5_PRIV172        RISC_PRIVCFGR5_PRIV172_Msk
#define RISC_PRIVCFGR5_PRIV173_Pos    (13U)
#define RISC_PRIVCFGR5_PRIV173_Msk    (0x1U << RISC_PRIVCFGR5_PRIV173_Pos)      /*!< 0x00002000 */
#define RISC_PRIVCFGR5_PRIV173        RISC_PRIVCFGR5_PRIV173_Msk
#define RISC_PRIVCFGR5_PRIV174_Pos    (14U)
#define RISC_PRIVCFGR5_PRIV174_Msk    (0x1U << RISC_PRIVCFGR5_PRIV174_Pos)      /*!< 0x00004000 */
#define RISC_PRIVCFGR5_PRIV174        RISC_PRIVCFGR5_PRIV174_Msk
#define RISC_PRIVCFGR5_PRIV175_Pos    (15U)
#define RISC_PRIVCFGR5_PRIV175_Msk    (0x1U << RISC_PRIVCFGR5_PRIV175_Pos)      /*!< 0x00008000 */
#define RISC_PRIVCFGR5_PRIV175        RISC_PRIVCFGR5_PRIV175_Msk
#define RISC_PRIVCFGR5_PRIV176_Pos    (16U)
#define RISC_PRIVCFGR5_PRIV176_Msk    (0x1U << RISC_PRIVCFGR5_PRIV176_Pos)      /*!< 0x00010000 */
#define RISC_PRIVCFGR5_PRIV176        RISC_PRIVCFGR5_PRIV176_Msk
#define RISC_PRIVCFGR5_PRIV177_Pos    (17U)
#define RISC_PRIVCFGR5_PRIV177_Msk    (0x1U << RISC_PRIVCFGR5_PRIV177_Pos)      /*!< 0x00020000 */
#define RISC_PRIVCFGR5_PRIV177        RISC_PRIVCFGR5_PRIV177_Msk
#define RISC_PRIVCFGR5_PRIV178_Pos    (18U)
#define RISC_PRIVCFGR5_PRIV178_Msk    (0x1U << RISC_PRIVCFGR5_PRIV178_Pos)      /*!< 0x00040000 */
#define RISC_PRIVCFGR5_PRIV178        RISC_PRIVCFGR5_PRIV178_Msk
#define RISC_PRIVCFGR5_PRIV179_Pos    (19U)
#define RISC_PRIVCFGR5_PRIV179_Msk    (0x1U << RISC_PRIVCFGR5_PRIV179_Pos)      /*!< 0x00080000 */
#define RISC_PRIVCFGR5_PRIV179        RISC_PRIVCFGR5_PRIV179_Msk
#define RISC_PRIVCFGR5_PRIV180_Pos    (20U)
#define RISC_PRIVCFGR5_PRIV180_Msk    (0x1U << RISC_PRIVCFGR5_PRIV180_Pos)      /*!< 0x00100000 */
#define RISC_PRIVCFGR5_PRIV180        RISC_PRIVCFGR5_PRIV180_Msk
#define RISC_PRIVCFGR5_PRIV181_Pos    (21U)
#define RISC_PRIVCFGR5_PRIV181_Msk    (0x1U << RISC_PRIVCFGR5_PRIV181_Pos)      /*!< 0x00200000 */
#define RISC_PRIVCFGR5_PRIV181        RISC_PRIVCFGR5_PRIV181_Msk
#define RISC_PRIVCFGR5_PRIV182_Pos    (22U)
#define RISC_PRIVCFGR5_PRIV182_Msk    (0x1U << RISC_PRIVCFGR5_PRIV182_Pos)      /*!< 0x00400000 */
#define RISC_PRIVCFGR5_PRIV182        RISC_PRIVCFGR5_PRIV182_Msk
#define RISC_PRIVCFGR5_PRIV183_Pos    (23U)
#define RISC_PRIVCFGR5_PRIV183_Msk    (0x1U << RISC_PRIVCFGR5_PRIV183_Pos)      /*!< 0x00800000 */
#define RISC_PRIVCFGR5_PRIV183        RISC_PRIVCFGR5_PRIV183_Msk
#define RISC_PRIVCFGR5_PRIV184_Pos    (24U)
#define RISC_PRIVCFGR5_PRIV184_Msk    (0x1U << RISC_PRIVCFGR5_PRIV184_Pos)      /*!< 0x01000000 */
#define RISC_PRIVCFGR5_PRIV184        RISC_PRIVCFGR5_PRIV184_Msk
#define RISC_PRIVCFGR5_PRIV185_Pos    (25U)
#define RISC_PRIVCFGR5_PRIV185_Msk    (0x1U << RISC_PRIVCFGR5_PRIV185_Pos)      /*!< 0x02000000 */
#define RISC_PRIVCFGR5_PRIV185        RISC_PRIVCFGR5_PRIV185_Msk
#define RISC_PRIVCFGR5_PRIV186_Pos    (26U)
#define RISC_PRIVCFGR5_PRIV186_Msk    (0x1U << RISC_PRIVCFGR5_PRIV186_Pos)      /*!< 0x04000000 */
#define RISC_PRIVCFGR5_PRIV186        RISC_PRIVCFGR5_PRIV186_Msk
#define RISC_PRIVCFGR5_PRIV187_Pos    (27U)
#define RISC_PRIVCFGR5_PRIV187_Msk    (0x1U << RISC_PRIVCFGR5_PRIV187_Pos)      /*!< 0x08000000 */
#define RISC_PRIVCFGR5_PRIV187        RISC_PRIVCFGR5_PRIV187_Msk
#define RISC_PRIVCFGR5_PRIV188_Pos    (28U)
#define RISC_PRIVCFGR5_PRIV188_Msk    (0x1U << RISC_PRIVCFGR5_PRIV188_Pos)      /*!< 0x10000000 */
#define RISC_PRIVCFGR5_PRIV188        RISC_PRIVCFGR5_PRIV188_Msk
#define RISC_PRIVCFGR5_PRIV189_Pos    (29U)
#define RISC_PRIVCFGR5_PRIV189_Msk    (0x1U << RISC_PRIVCFGR5_PRIV189_Pos)      /*!< 0x20000000 */
#define RISC_PRIVCFGR5_PRIV189        RISC_PRIVCFGR5_PRIV189_Msk
#define RISC_PRIVCFGR5_PRIV190_Pos    (30U)
#define RISC_PRIVCFGR5_PRIV190_Msk    (0x1U << RISC_PRIVCFGR5_PRIV190_Pos)      /*!< 0x40000000 */
#define RISC_PRIVCFGR5_PRIV190        RISC_PRIVCFGR5_PRIV190_Msk
#define RISC_PRIVCFGR5_PRIV191_Pos    (31U)
#define RISC_PRIVCFGR5_PRIV191_Msk    (0x1U << RISC_PRIVCFGR5_PRIV191_Pos)      /*!< 0x80000000 */
#define RISC_PRIVCFGR5_PRIV191        RISC_PRIVCFGR5_PRIV191_Msk

/*******************  Bits definition for RISC_RCFGLOCKR0 register *************/
#define RISC_RCFGLOCKR0_RLOCK0_Pos     (0U)
#define RISC_RCFGLOCKR0_RLOCK0_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK0_Pos)       /*!< 0x00000001 */
#define RISC_RCFGLOCKR0_RLOCK0         RISC_RCFGLOCKR0_RLOCK0_Msk
#define RISC_RCFGLOCKR0_RLOCK1_Pos     (1U)
#define RISC_RCFGLOCKR0_RLOCK1_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK1_Pos)       /*!< 0x00000002 */
#define RISC_RCFGLOCKR0_RLOCK1         RISC_RCFGLOCKR0_RLOCK1_Msk
#define RISC_RCFGLOCKR0_RLOCK2_Pos     (2U)
#define RISC_RCFGLOCKR0_RLOCK2_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK2_Pos)       /*!< 0x00000004 */
#define RISC_RCFGLOCKR0_RLOCK2         RISC_RCFGLOCKR0_RLOCK2_Msk
#define RISC_RCFGLOCKR0_RLOCK3_Pos     (3U)
#define RISC_RCFGLOCKR0_RLOCK3_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK3_Pos)       /*!< 0x00000008 */
#define RISC_RCFGLOCKR0_RLOCK3         RISC_RCFGLOCKR0_RLOCK3_Msk
#define RISC_RCFGLOCKR0_RLOCK4_Pos     (4U)
#define RISC_RCFGLOCKR0_RLOCK4_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK4_Pos)       /*!< 0x00000010 */
#define RISC_RCFGLOCKR0_RLOCK4         RISC_RCFGLOCKR0_RLOCK4_Msk
#define RISC_RCFGLOCKR0_RLOCK5_Pos     (5U)
#define RISC_RCFGLOCKR0_RLOCK5_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK5_Pos)       /*!< 0x00000020 */
#define RISC_RCFGLOCKR0_RLOCK5         RISC_RCFGLOCKR0_RLOCK5_Msk
#define RISC_RCFGLOCKR0_RLOCK6_Pos     (6U)
#define RISC_RCFGLOCKR0_RLOCK6_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK6_Pos)       /*!< 0x00000040 */
#define RISC_RCFGLOCKR0_RLOCK6         RISC_RCFGLOCKR0_RLOCK6_Msk
#define RISC_RCFGLOCKR0_RLOCK7_Pos     (7U)
#define RISC_RCFGLOCKR0_RLOCK7_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK7_Pos)       /*!< 0x00000080 */
#define RISC_RCFGLOCKR0_RLOCK7         RISC_RCFGLOCKR0_RLOCK7_Msk
#define RISC_RCFGLOCKR0_RLOCK8_Pos     (8U)
#define RISC_RCFGLOCKR0_RLOCK8_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK8_Pos)       /*!< 0x00000100 */
#define RISC_RCFGLOCKR0_RLOCK8         RISC_RCFGLOCKR0_RLOCK8_Msk
#define RISC_RCFGLOCKR0_RLOCK9_Pos     (9U)
#define RISC_RCFGLOCKR0_RLOCK9_Msk     (0x1U << RISC_RCFGLOCKR0_RLOCK9_Pos)       /*!< 0x00000200 */
#define RISC_RCFGLOCKR0_RLOCK9         RISC_RCFGLOCKR0_RLOCK9_Msk
#define RISC_RCFGLOCKR0_RLOCK10_Pos    (10U)
#define RISC_RCFGLOCKR0_RLOCK10_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK10_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR0_RLOCK10        RISC_RCFGLOCKR0_RLOCK10_Msk
#define RISC_RCFGLOCKR0_RLOCK11_Pos    (11U)
#define RISC_RCFGLOCKR0_RLOCK11_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK11_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR0_RLOCK11        RISC_RCFGLOCKR0_RLOCK11_Msk
#define RISC_RCFGLOCKR0_RLOCK12_Pos    (12U)
#define RISC_RCFGLOCKR0_RLOCK12_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK12_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR0_RLOCK12        RISC_RCFGLOCKR0_RLOCK12_Msk
#define RISC_RCFGLOCKR0_RLOCK13_Pos    (13U)
#define RISC_RCFGLOCKR0_RLOCK13_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK13_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR0_RLOCK13        RISC_RCFGLOCKR0_RLOCK13_Msk
#define RISC_RCFGLOCKR0_RLOCK14_Pos    (14U)
#define RISC_RCFGLOCKR0_RLOCK14_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK14_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR0_RLOCK14        RISC_RCFGLOCKR0_RLOCK14_Msk
#define RISC_RCFGLOCKR0_RLOCK15_Pos    (15U)
#define RISC_RCFGLOCKR0_RLOCK15_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK15_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR0_RLOCK15        RISC_RCFGLOCKR0_RLOCK15_Msk
#define RISC_RCFGLOCKR0_RLOCK16_Pos    (16U)
#define RISC_RCFGLOCKR0_RLOCK16_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK16_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR0_RLOCK16        RISC_RCFGLOCKR0_RLOCK16_Msk
#define RISC_RCFGLOCKR0_RLOCK17_Pos    (17U)
#define RISC_RCFGLOCKR0_RLOCK17_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK17_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR0_RLOCK17        RISC_RCFGLOCKR0_RLOCK17_Msk
#define RISC_RCFGLOCKR0_RLOCK18_Pos    (18U)
#define RISC_RCFGLOCKR0_RLOCK18_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK18_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR0_RLOCK18        RISC_RCFGLOCKR0_RLOCK18_Msk
#define RISC_RCFGLOCKR0_RLOCK19_Pos    (19U)
#define RISC_RCFGLOCKR0_RLOCK19_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK19_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR0_RLOCK19        RISC_RCFGLOCKR0_RLOCK19_Msk
#define RISC_RCFGLOCKR0_RLOCK20_Pos    (20U)
#define RISC_RCFGLOCKR0_RLOCK20_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK20_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR0_RLOCK20        RISC_RCFGLOCKR0_RLOCK20_Msk
#define RISC_RCFGLOCKR0_RLOCK21_Pos    (21U)
#define RISC_RCFGLOCKR0_RLOCK21_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK21_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR0_RLOCK21        RISC_RCFGLOCKR0_RLOCK21_Msk
#define RISC_RCFGLOCKR0_RLOCK22_Pos    (22U)
#define RISC_RCFGLOCKR0_RLOCK22_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK22_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR0_RLOCK22        RISC_RCFGLOCKR0_RLOCK22_Msk
#define RISC_RCFGLOCKR0_RLOCK23_Pos    (23U)
#define RISC_RCFGLOCKR0_RLOCK23_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK23_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR0_RLOCK23        RISC_RCFGLOCKR0_RLOCK23_Msk
#define RISC_RCFGLOCKR0_RLOCK24_Pos    (24U)
#define RISC_RCFGLOCKR0_RLOCK24_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK24_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR0_RLOCK24        RISC_RCFGLOCKR0_RLOCK24_Msk
#define RISC_RCFGLOCKR0_RLOCK25_Pos    (25U)
#define RISC_RCFGLOCKR0_RLOCK25_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK25_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR0_RLOCK25        RISC_RCFGLOCKR0_RLOCK25_Msk
#define RISC_RCFGLOCKR0_RLOCK26_Pos    (26U)
#define RISC_RCFGLOCKR0_RLOCK26_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK26_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR0_RLOCK26        RISC_RCFGLOCKR0_RLOCK26_Msk
#define RISC_RCFGLOCKR0_RLOCK27_Pos    (27U)
#define RISC_RCFGLOCKR0_RLOCK27_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK27_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR0_RLOCK27        RISC_RCFGLOCKR0_RLOCK27_Msk
#define RISC_RCFGLOCKR0_RLOCK28_Pos    (28U)
#define RISC_RCFGLOCKR0_RLOCK28_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK28_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR0_RLOCK28        RISC_RCFGLOCKR0_RLOCK28_Msk
#define RISC_RCFGLOCKR0_RLOCK29_Pos    (29U)
#define RISC_RCFGLOCKR0_RLOCK29_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK29_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR0_RLOCK29        RISC_RCFGLOCKR0_RLOCK29_Msk
#define RISC_RCFGLOCKR0_RLOCK30_Pos    (30U)
#define RISC_RCFGLOCKR0_RLOCK30_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK30_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR0_RLOCK30        RISC_RCFGLOCKR0_RLOCK30_Msk
#define RISC_RCFGLOCKR0_RLOCK31_Pos    (31U)
#define RISC_RCFGLOCKR0_RLOCK31_Msk    (0x1U << RISC_RCFGLOCKR0_RLOCK31_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR0_RLOCK31        RISC_RCFGLOCKR0_RLOCK31_Msk

/*******************  Bits definition for RISC_RCFGLOCKR1 register *************/
#define RISC_RCFGLOCKR1_RLOCK32_Pos    (0U)
#define RISC_RCFGLOCKR1_RLOCK32_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK32_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR1_RLOCK32        RISC_RCFGLOCKR1_RLOCK32_Msk
#define RISC_RCFGLOCKR1_RLOCK33_Pos    (1U)
#define RISC_RCFGLOCKR1_RLOCK33_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK33_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR1_RLOCK33        RISC_RCFGLOCKR1_RLOCK33_Msk
#define RISC_RCFGLOCKR1_RLOCK34_Pos    (2U)
#define RISC_RCFGLOCKR1_RLOCK34_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK34_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR1_RLOCK34        RISC_RCFGLOCKR1_RLOCK34_Msk
#define RISC_RCFGLOCKR1_RLOCK35_Pos    (3U)
#define RISC_RCFGLOCKR1_RLOCK35_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK35_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR1_RLOCK35        RISC_RCFGLOCKR1_RLOCK35_Msk
#define RISC_RCFGLOCKR1_RLOCK36_Pos    (4U)
#define RISC_RCFGLOCKR1_RLOCK36_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK36_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCKR1_RLOCK36        RISC_RCFGLOCKR1_RLOCK36_Msk
#define RISC_RCFGLOCKR1_RLOCK37_Pos    (5U)
#define RISC_RCFGLOCKR1_RLOCK37_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK37_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCKR1_RLOCK37        RISC_RCFGLOCKR1_RLOCK37_Msk
#define RISC_RCFGLOCKR1_RLOCK38_Pos    (6U)
#define RISC_RCFGLOCKR1_RLOCK38_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK38_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCKR1_RLOCK38        RISC_RCFGLOCKR1_RLOCK38_Msk
#define RISC_RCFGLOCKR1_RLOCK39_Pos    (7U)
#define RISC_RCFGLOCKR1_RLOCK39_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK39_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCKR1_RLOCK39        RISC_RCFGLOCKR1_RLOCK39_Msk
#define RISC_RCFGLOCKR1_RLOCK40_Pos    (8U)
#define RISC_RCFGLOCKR1_RLOCK40_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK40_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCKR1_RLOCK40        RISC_RCFGLOCKR1_RLOCK40_Msk
#define RISC_RCFGLOCKR1_RLOCK41_Pos    (9U)
#define RISC_RCFGLOCKR1_RLOCK41_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK41_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCKR1_RLOCK41        RISC_RCFGLOCKR1_RLOCK41_Msk
#define RISC_RCFGLOCKR1_RLOCK42_Pos    (10U)
#define RISC_RCFGLOCKR1_RLOCK42_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK42_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR1_RLOCK42        RISC_RCFGLOCKR1_RLOCK42_Msk
#define RISC_RCFGLOCKR1_RLOCK43_Pos    (11U)
#define RISC_RCFGLOCKR1_RLOCK43_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK43_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR1_RLOCK43        RISC_RCFGLOCKR1_RLOCK43_Msk
#define RISC_RCFGLOCKR1_RLOCK44_Pos    (12U)
#define RISC_RCFGLOCKR1_RLOCK44_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK44_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR1_RLOCK44        RISC_RCFGLOCKR1_RLOCK44_Msk
#define RISC_RCFGLOCKR1_RLOCK45_Pos    (13U)
#define RISC_RCFGLOCKR1_RLOCK45_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK45_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR1_RLOCK45        RISC_RCFGLOCKR1_RLOCK45_Msk
#define RISC_RCFGLOCKR1_RLOCK46_Pos    (14U)
#define RISC_RCFGLOCKR1_RLOCK46_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK46_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR1_RLOCK46        RISC_RCFGLOCKR1_RLOCK46_Msk
#define RISC_RCFGLOCKR1_RLOCK47_Pos    (15U)
#define RISC_RCFGLOCKR1_RLOCK47_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK47_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR1_RLOCK47        RISC_RCFGLOCKR1_RLOCK47_Msk
#define RISC_RCFGLOCKR1_RLOCK48_Pos    (16U)
#define RISC_RCFGLOCKR1_RLOCK48_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK48_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR1_RLOCK48        RISC_RCFGLOCKR1_RLOCK48_Msk
#define RISC_RCFGLOCKR1_RLOCK49_Pos    (17U)
#define RISC_RCFGLOCKR1_RLOCK49_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK49_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR1_RLOCK49        RISC_RCFGLOCKR1_RLOCK49_Msk
#define RISC_RCFGLOCKR1_RLOCK50_Pos    (18U)
#define RISC_RCFGLOCKR1_RLOCK50_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK50_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR1_RLOCK50        RISC_RCFGLOCKR1_RLOCK50_Msk
#define RISC_RCFGLOCKR1_RLOCK51_Pos    (19U)
#define RISC_RCFGLOCKR1_RLOCK51_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK51_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR1_RLOCK51        RISC_RCFGLOCKR1_RLOCK51_Msk
#define RISC_RCFGLOCKR1_RLOCK52_Pos    (20U)
#define RISC_RCFGLOCKR1_RLOCK52_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK52_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR1_RLOCK52        RISC_RCFGLOCKR1_RLOCK52_Msk
#define RISC_RCFGLOCKR1_RLOCK53_Pos    (21U)
#define RISC_RCFGLOCKR1_RLOCK53_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK53_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR1_RLOCK53        RISC_RCFGLOCKR1_RLOCK53_Msk
#define RISC_RCFGLOCKR1_RLOCK54_Pos    (22U)
#define RISC_RCFGLOCKR1_RLOCK54_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK54_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR1_RLOCK54        RISC_RCFGLOCKR1_RLOCK54_Msk
#define RISC_RCFGLOCKR1_RLOCK55_Pos    (23U)
#define RISC_RCFGLOCKR1_RLOCK55_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK55_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR1_RLOCK55        RISC_RCFGLOCKR1_RLOCK55_Msk
#define RISC_RCFGLOCKR1_RLOCK56_Pos    (24U)
#define RISC_RCFGLOCKR1_RLOCK56_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK56_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR1_RLOCK56        RISC_RCFGLOCKR1_RLOCK56_Msk
#define RISC_RCFGLOCKR1_RLOCK57_Pos    (25U)
#define RISC_RCFGLOCKR1_RLOCK57_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK57_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR1_RLOCK57        RISC_RCFGLOCKR1_RLOCK57_Msk
#define RISC_RCFGLOCKR1_RLOCK58_Pos    (26U)
#define RISC_RCFGLOCKR1_RLOCK58_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK58_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR1_RLOCK58        RISC_RCFGLOCKR1_RLOCK58_Msk
#define RISC_RCFGLOCKR1_RLOCK59_Pos    (27U)
#define RISC_RCFGLOCKR1_RLOCK59_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK59_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR1_RLOCK59        RISC_RCFGLOCKR1_RLOCK59_Msk
#define RISC_RCFGLOCKR1_RLOCK60_Pos    (28U)
#define RISC_RCFGLOCKR1_RLOCK60_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK60_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR1_RLOCK60        RISC_RCFGLOCKR1_RLOCK60_Msk
#define RISC_RCFGLOCKR1_RLOCK61_Pos    (29U)
#define RISC_RCFGLOCKR1_RLOCK61_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK61_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR1_RLOCK61        RISC_RCFGLOCKR1_RLOCK61_Msk
#define RISC_RCFGLOCKR1_RLOCK62_Pos    (30U)
#define RISC_RCFGLOCKR1_RLOCK62_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK62_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR1_RLOCK62        RISC_RCFGLOCKR1_RLOCK62_Msk
#define RISC_RCFGLOCKR1_RLOCK63_Pos    (31U)
#define RISC_RCFGLOCKR1_RLOCK63_Msk    (0x1U << RISC_RCFGLOCKR1_RLOCK63_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR1_RLOCK63        RISC_RCFGLOCKR1_RLOCK63_Msk

/*******************  Bits definition for RISC_RCFGLOCKR2 register *************/
#define RISC_RCFGLOCKR2_RLOCK64_Pos    (0U)
#define RISC_RCFGLOCKR2_RLOCK64_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK64_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR2_RLOCK64        RISC_RCFGLOCKR2_RLOCK64_Msk
#define RISC_RCFGLOCKR2_RLOCK65_Pos    (1U)
#define RISC_RCFGLOCKR2_RLOCK65_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK65_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR2_RLOCK65        RISC_RCFGLOCKR2_RLOCK65_Msk
#define RISC_RCFGLOCKR2_RLOCK66_Pos    (2U)
#define RISC_RCFGLOCKR2_RLOCK66_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK66_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR2_RLOCK66        RISC_RCFGLOCKR2_RLOCK66_Msk
#define RISC_RCFGLOCKR2_RLOCK67_Pos    (3U)
#define RISC_RCFGLOCKR2_RLOCK67_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK67_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR2_RLOCK67        RISC_RCFGLOCKR2_RLOCK67_Msk
#define RISC_RCFGLOCKR2_RLOCK68_Pos    (4U)
#define RISC_RCFGLOCKR2_RLOCK68_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK68_Pos)      /*!< 0x00000010 */
#define RISC_RCFGLOCKR2_RLOCK68        RISC_RCFGLOCKR2_RLOCK68_Msk
#define RISC_RCFGLOCKR2_RLOCK69_Pos    (5U)
#define RISC_RCFGLOCKR2_RLOCK69_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK69_Pos)      /*!< 0x00000020 */
#define RISC_RCFGLOCKR2_RLOCK69        RISC_RCFGLOCKR2_RLOCK69_Msk
#define RISC_RCFGLOCKR2_RLOCK70_Pos    (6U)
#define RISC_RCFGLOCKR2_RLOCK70_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK70_Pos)      /*!< 0x00000040 */
#define RISC_RCFGLOCKR2_RLOCK70        RISC_RCFGLOCKR2_RLOCK70_Msk
#define RISC_RCFGLOCKR2_RLOCK71_Pos    (7U)
#define RISC_RCFGLOCKR2_RLOCK71_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK71_Pos)      /*!< 0x00000080 */
#define RISC_RCFGLOCKR2_RLOCK71        RISC_RCFGLOCKR2_RLOCK71_Msk
#define RISC_RCFGLOCKR2_RLOCK72_Pos    (8U)
#define RISC_RCFGLOCKR2_RLOCK72_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK72_Pos)      /*!< 0x00000100 */
#define RISC_RCFGLOCKR2_RLOCK72        RISC_RCFGLOCKR2_RLOCK72_Msk
#define RISC_RCFGLOCKR2_RLOCK73_Pos    (9U)
#define RISC_RCFGLOCKR2_RLOCK73_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK73_Pos)      /*!< 0x00000200 */
#define RISC_RCFGLOCKR2_RLOCK73        RISC_RCFGLOCKR2_RLOCK73_Msk
#define RISC_RCFGLOCKR2_RLOCK74_Pos    (10U)
#define RISC_RCFGLOCKR2_RLOCK74_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK74_Pos)      /*!< 0x00000400 */
#define RISC_RCFGLOCKR2_RLOCK74        RISC_RCFGLOCKR2_RLOCK74_Msk
#define RISC_RCFGLOCKR2_RLOCK75_Pos    (11U)
#define RISC_RCFGLOCKR2_RLOCK75_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK75_Pos)      /*!< 0x00000800 */
#define RISC_RCFGLOCKR2_RLOCK75        RISC_RCFGLOCKR2_RLOCK75_Msk
#define RISC_RCFGLOCKR2_RLOCK76_Pos    (12U)
#define RISC_RCFGLOCKR2_RLOCK76_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK76_Pos)      /*!< 0x00001000 */
#define RISC_RCFGLOCKR2_RLOCK76        RISC_RCFGLOCKR2_RLOCK76_Msk
#define RISC_RCFGLOCKR2_RLOCK77_Pos    (13U)
#define RISC_RCFGLOCKR2_RLOCK77_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK77_Pos)      /*!< 0x00002000 */
#define RISC_RCFGLOCKR2_RLOCK77        RISC_RCFGLOCKR2_RLOCK77_Msk
#define RISC_RCFGLOCKR2_RLOCK78_Pos    (14U)
#define RISC_RCFGLOCKR2_RLOCK78_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK78_Pos)      /*!< 0x00004000 */
#define RISC_RCFGLOCKR2_RLOCK78        RISC_RCFGLOCKR2_RLOCK78_Msk
#define RISC_RCFGLOCKR2_RLOCK79_Pos    (15U)
#define RISC_RCFGLOCKR2_RLOCK79_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK79_Pos)      /*!< 0x00008000 */
#define RISC_RCFGLOCKR2_RLOCK79        RISC_RCFGLOCKR2_RLOCK79_Msk
#define RISC_RCFGLOCKR2_RLOCK80_Pos    (16U)
#define RISC_RCFGLOCKR2_RLOCK80_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK80_Pos)      /*!< 0x00010000 */
#define RISC_RCFGLOCKR2_RLOCK80        RISC_RCFGLOCKR2_RLOCK80_Msk
#define RISC_RCFGLOCKR2_RLOCK81_Pos    (17U)
#define RISC_RCFGLOCKR2_RLOCK81_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK81_Pos)      /*!< 0x00020000 */
#define RISC_RCFGLOCKR2_RLOCK81        RISC_RCFGLOCKR2_RLOCK81_Msk
#define RISC_RCFGLOCKR2_RLOCK82_Pos    (18U)
#define RISC_RCFGLOCKR2_RLOCK82_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK82_Pos)      /*!< 0x00040000 */
#define RISC_RCFGLOCKR2_RLOCK82        RISC_RCFGLOCKR2_RLOCK82_Msk
#define RISC_RCFGLOCKR2_RLOCK83_Pos    (19U)
#define RISC_RCFGLOCKR2_RLOCK83_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK83_Pos)      /*!< 0x00080000 */
#define RISC_RCFGLOCKR2_RLOCK83        RISC_RCFGLOCKR2_RLOCK83_Msk
#define RISC_RCFGLOCKR2_RLOCK84_Pos    (20U)
#define RISC_RCFGLOCKR2_RLOCK84_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK84_Pos)      /*!< 0x00100000 */
#define RISC_RCFGLOCKR2_RLOCK84        RISC_RCFGLOCKR2_RLOCK84_Msk
#define RISC_RCFGLOCKR2_RLOCK85_Pos    (21U)
#define RISC_RCFGLOCKR2_RLOCK85_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK85_Pos)      /*!< 0x00200000 */
#define RISC_RCFGLOCKR2_RLOCK85        RISC_RCFGLOCKR2_RLOCK85_Msk
#define RISC_RCFGLOCKR2_RLOCK86_Pos    (22U)
#define RISC_RCFGLOCKR2_RLOCK86_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK86_Pos)      /*!< 0x00400000 */
#define RISC_RCFGLOCKR2_RLOCK86        RISC_RCFGLOCKR2_RLOCK86_Msk
#define RISC_RCFGLOCKR2_RLOCK87_Pos    (23U)
#define RISC_RCFGLOCKR2_RLOCK87_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK87_Pos)      /*!< 0x00800000 */
#define RISC_RCFGLOCKR2_RLOCK87        RISC_RCFGLOCKR2_RLOCK87_Msk
#define RISC_RCFGLOCKR2_RLOCK88_Pos    (24U)
#define RISC_RCFGLOCKR2_RLOCK88_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK88_Pos)      /*!< 0x01000000 */
#define RISC_RCFGLOCKR2_RLOCK88        RISC_RCFGLOCKR2_RLOCK88_Msk
#define RISC_RCFGLOCKR2_RLOCK89_Pos    (25U)
#define RISC_RCFGLOCKR2_RLOCK89_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK89_Pos)      /*!< 0x02000000 */
#define RISC_RCFGLOCKR2_RLOCK89        RISC_RCFGLOCKR2_RLOCK89_Msk
#define RISC_RCFGLOCKR2_RLOCK90_Pos    (26U)
#define RISC_RCFGLOCKR2_RLOCK90_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK90_Pos)      /*!< 0x04000000 */
#define RISC_RCFGLOCKR2_RLOCK90        RISC_RCFGLOCKR2_RLOCK90_Msk
#define RISC_RCFGLOCKR2_RLOCK91_Pos    (27U)
#define RISC_RCFGLOCKR2_RLOCK91_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK91_Pos)      /*!< 0x08000000 */
#define RISC_RCFGLOCKR2_RLOCK91        RISC_RCFGLOCKR2_RLOCK91_Msk
#define RISC_RCFGLOCKR2_RLOCK92_Pos    (28U)
#define RISC_RCFGLOCKR2_RLOCK92_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK92_Pos)      /*!< 0x10000000 */
#define RISC_RCFGLOCKR2_RLOCK92        RISC_RCFGLOCKR2_RLOCK92_Msk
#define RISC_RCFGLOCKR2_RLOCK93_Pos    (29U)
#define RISC_RCFGLOCKR2_RLOCK93_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK93_Pos)      /*!< 0x20000000 */
#define RISC_RCFGLOCKR2_RLOCK93        RISC_RCFGLOCKR2_RLOCK93_Msk
#define RISC_RCFGLOCKR2_RLOCK94_Pos    (30U)
#define RISC_RCFGLOCKR2_RLOCK94_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK94_Pos)      /*!< 0x40000000 */
#define RISC_RCFGLOCKR2_RLOCK94        RISC_RCFGLOCKR2_RLOCK94_Msk
#define RISC_RCFGLOCKR2_RLOCK95_Pos    (31U)
#define RISC_RCFGLOCKR2_RLOCK95_Msk    (0x1U << RISC_RCFGLOCKR2_RLOCK95_Pos)      /*!< 0x80000000 */
#define RISC_RCFGLOCKR2_RLOCK95        RISC_RCFGLOCKR2_RLOCK95_Msk

/*******************  Bits definition for RISC_RCFGLOCKR3 register *************/
#define RISC_RCFGLOCKR3_RLOCK96_Pos    (0U)
#define RISC_RCFGLOCKR3_RLOCK96_Msk    (0x1U << RISC_RCFGLOCKR3_RLOCK96_Pos)      /*!< 0x00000001 */
#define RISC_RCFGLOCKR3_RLOCK96        RISC_RCFGLOCKR3_RLOCK0_Msk
#define RISC_RCFGLOCKR3_RLOCK97_Pos    (1U)
#define RISC_RCFGLOCKR3_RLOCK97_Msk    (0x1U << RISC_RCFGLOCKR3_RLOCK97_Pos)      /*!< 0x00000002 */
#define RISC_RCFGLOCKR3_RLOCK97        RISC_RCFGLOCKR3_RLOCK97_Msk
#define RISC_RCFGLOCKR3_RLOCK98_Pos    (2U)
#define RISC_RCFGLOCKR3_RLOCK98_Msk    (0x1U << RISC_RCFGLOCKR3_RLOCK98_Pos)      /*!< 0x00000004 */
#define RISC_RCFGLOCKR3_RLOCK98        RISC_RCFGLOCKR3_RLOCK98_Msk
#define RISC_RCFGLOCKR3_RLOCK99_Pos    (3U)
#define RISC_RCFGLOCKR3_RLOCK99_Msk    (0x1U << RISC_RCFGLOCKR3_RLOCK99_Pos)      /*!< 0x00000008 */
#define RISC_RCFGLOCKR3_RLOCK99        RISC_RCFGLOCKR3_RLOCK99_Msk
#define RISC_RCFGLOCKR3_RLOCK100_Pos   (4U)
#define RISC_RCFGLOCKR3_RLOCK100_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK100_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR3_RLOCK100       RISC_RCFGLOCKR3_RLOCK100_Msk
#define RISC_RCFGLOCKR3_RLOCK101_Pos   (5U)
#define RISC_RCFGLOCKR3_RLOCK101_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK101_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR3_RLOCK101        RISC_RCFGLOCKR3_RLOCK101_Msk
#define RISC_RCFGLOCKR3_RLOCK102_Pos   (6U)
#define RISC_RCFGLOCKR3_RLOCK102_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK102_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR3_RLOCK102       RISC_RCFGLOCKR3_RLOCK102_Msk
#define RISC_RCFGLOCKR3_RLOCK103_Pos   (7U)
#define RISC_RCFGLOCKR3_RLOCK103_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK103_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR3_RLOCK103       RISC_RCFGLOCKR3_RLOCK103_Msk
#define RISC_RCFGLOCKR3_RLOCK104_Pos   (8U)
#define RISC_RCFGLOCKR3_RLOCK104_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK104_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR3_RLOCK104       RISC_RCFGLOCKR3_RLOCK104_Msk
#define RISC_RCFGLOCKR3_RLOCK105_Pos   (9U)
#define RISC_RCFGLOCKR3_RLOCK105_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK105_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR3_RLOCK105       RISC_RCFGLOCKR3_RLOCK105_Msk
#define RISC_RCFGLOCKR3_RLOCK106_Pos   (10U)
#define RISC_RCFGLOCKR3_RLOCK106_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK106_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR3_RLOCK106       RISC_RCFGLOCKR3_RLOCK106_Msk
#define RISC_RCFGLOCKR3_RLOCK107_Pos   (11U)
#define RISC_RCFGLOCKR3_RLOCK107_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK107_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR3_RLOCK107       RISC_RCFGLOCKR3_RLOCK107_Msk
#define RISC_RCFGLOCKR3_RLOCK108_Pos   (12U)
#define RISC_RCFGLOCKR3_RLOCK108_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK108_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR3_RLOCK108       RISC_RCFGLOCKR3_RLOCK108_Msk
#define RISC_RCFGLOCKR3_RLOCK109_Pos   (13U)
#define RISC_RCFGLOCKR3_RLOCK109_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK109_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR3_RLOCK109       RISC_RCFGLOCKR3_RLOCK109_Msk
#define RISC_RCFGLOCKR3_RLOCK110_Pos   (14U)
#define RISC_RCFGLOCKR3_RLOCK110_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK110_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR3_RLOCK110       RISC_RCFGLOCKR3_RLOCK110_Msk
#define RISC_RCFGLOCKR3_RLOCK111_Pos   (15U)
#define RISC_RCFGLOCKR3_RLOCK111_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK111_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR3_RLOCK111       RISC_RCFGLOCKR3_RLOCK111_Msk
#define RISC_RCFGLOCKR3_RLOCK112_Pos   (16U)
#define RISC_RCFGLOCKR3_RLOCK112_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK112_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR3_RLOCK112       RISC_RCFGLOCKR3_RLOCK112_Msk
#define RISC_RCFGLOCKR3_RLOCK113_Pos   (17U)
#define RISC_RCFGLOCKR3_RLOCK113_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK113_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR3_RLOCK113       RISC_RCFGLOCKR3_RLOCK113_Msk
#define RISC_RCFGLOCKR3_RLOCK114_Pos   (18U)
#define RISC_RCFGLOCKR3_RLOCK114_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK114_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR3_RLOCK114       RISC_RCFGLOCKR3_RLOCK114_Msk
#define RISC_RCFGLOCKR3_RLOCK115_Pos   (19U)
#define RISC_RCFGLOCKR3_RLOCK115_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK115_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR3_RLOCK115       RISC_RCFGLOCKR3_RLOCK115_Msk
#define RISC_RCFGLOCKR3_RLOCK116_Pos   (20U)
#define RISC_RCFGLOCKR3_RLOCK116_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK116_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR3_RLOCK116       RISC_RCFGLOCKR3_RLOCK116_Msk
#define RISC_RCFGLOCKR3_RLOCK117_Pos   (21U)
#define RISC_RCFGLOCKR3_RLOCK117_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK117_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR3_RLOCK117       RISC_RCFGLOCKR3_RLOCK117_Msk
#define RISC_RCFGLOCKR3_RLOCK118_Pos   (22U)
#define RISC_RCFGLOCKR3_RLOCK118_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK118_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR3_RLOCK118       RISC_RCFGLOCKR3_RLOCK118_Msk
#define RISC_RCFGLOCKR3_RLOCK119_Pos   (23U)
#define RISC_RCFGLOCKR3_RLOCK119_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK119_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR3_RLOCK119       RISC_RCFGLOCKR3_RLOCK119_Msk
#define RISC_RCFGLOCKR3_RLOCK120_Pos   (24U)
#define RISC_RCFGLOCKR3_RLOCK120_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK120_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR3_RLOCK120       RISC_RCFGLOCKR3_RLOCK120_Msk
#define RISC_RCFGLOCKR3_RLOCK121_Pos   (25U)
#define RISC_RCFGLOCKR3_RLOCK121_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK121_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR3_RLOCK121       RISC_RCFGLOCKR3_RLOCK121_Msk
#define RISC_RCFGLOCKR3_RLOCK122_Pos   (26U)
#define RISC_RCFGLOCKR3_RLOCK122_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK122_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR3_RLOCK122       RISC_RCFGLOCKR3_RLOCK122_Msk
#define RISC_RCFGLOCKR3_RLOCK123_Pos   (27U)
#define RISC_RCFGLOCKR3_RLOCK123_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK123_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR3_RLOCK123       RISC_RCFGLOCKR3_RLOCK123_Msk
#define RISC_RCFGLOCKR3_RLOCK124_Pos   (28U)
#define RISC_RCFGLOCKR3_RLOCK124_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK124_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR3_RLOCK124       RISC_RCFGLOCKR3_RLOCK124_Msk
#define RISC_RCFGLOCKR3_RLOCK125_Pos   (29U)
#define RISC_RCFGLOCKR3_RLOCK125_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK125_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR3_RLOCK125       RISC_RCFGLOCKR3_RLOCK125_Msk
#define RISC_RCFGLOCKR3_RLOCK126_Pos   (30U)
#define RISC_RCFGLOCKR3_RLOCK126_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK126_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR3_RLOCK126       RISC_RCFGLOCKR3_RLOCK126_Msk
#define RISC_RCFGLOCKR3_RLOCK127_Pos   (31U)
#define RISC_RCFGLOCKR3_RLOCK127_Msk   (0x1U << RISC_RCFGLOCKR3_RLOCK127_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR3_RLOCK127       RISC_RCFGLOCKR3_RLOCK127_Msk

/*******************  Bits definition for RISC_RCFGLOCKR4 register *************/
#define RISC_RCFGLOCKR4_RLOCK128_Pos   (0U)
#define RISC_RCFGLOCKR4_RLOCK128_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK128_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCKR4_RLOCK128       RISC_RCFGLOCKR4_RLOCK128_Msk
#define RISC_RCFGLOCKR4_RLOCK129_Pos   (1U)
#define RISC_RCFGLOCKR4_RLOCK129_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK129_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCKR4_RLOCK129       RISC_RCFGLOCKR4_RLOCK129_Msk
#define RISC_RCFGLOCKR4_RLOCK130_Pos   (2U)
#define RISC_RCFGLOCKR4_RLOCK130_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK130_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCKR4_RLOCK130       RISC_RCFGLOCKR4_RLOCK130_Msk
#define RISC_RCFGLOCKR4_RLOCK131_Pos   (3U)
#define RISC_RCFGLOCKR4_RLOCK131_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK131_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCKR4_RLOCK131       RISC_RCFGLOCKR4_RLOCK131_Msk
#define RISC_RCFGLOCKR4_RLOCK132_Pos   (4U)
#define RISC_RCFGLOCKR4_RLOCK132_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK132_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR4_RLOCK132       RISC_RCFGLOCKR4_RLOCK132_Msk
#define RISC_RCFGLOCKR4_RLOCK133_Pos   (5U)
#define RISC_RCFGLOCKR4_RLOCK133_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK133_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR4_RLOCK133       RISC_RCFGLOCKR4_RLOCK133_Msk
#define RISC_RCFGLOCKR4_RLOCK134_Pos   (6U)
#define RISC_RCFGLOCKR4_RLOCK134_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK134_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR4_RLOCK134       RISC_RCFGLOCKR4_RLOCK134_Msk
#define RISC_RCFGLOCKR4_RLOCK135_Pos   (7U)
#define RISC_RCFGLOCKR4_RLOCK135_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK135_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR4_RLOCK135      RISC_RCFGLOCKR4_RLOCK135_Msk
#define RISC_RCFGLOCKR4_RLOCK136_Pos   (8U)
#define RISC_RCFGLOCKR4_RLOCK136_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK136_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR4_RLOCK136       RISC_RCFGLOCKR4_RLOCK136_Msk
#define RISC_RCFGLOCKR4_RLOCK137_Pos   (9U)
#define RISC_RCFGLOCKR4_RLOCK137_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK137_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR4_RLOCK137       RISC_RCFGLOCKR4_RLOCK137_Msk
#define RISC_RCFGLOCKR4_RLOCK138_Pos   (10U)
#define RISC_RCFGLOCKR4_RLOCK138_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK138_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR4_RLOCK138       RISC_RCFGLOCKR4_RLOCK138_Msk
#define RISC_RCFGLOCKR4_RLOCK139_Pos   (11U)
#define RISC_RCFGLOCKR4_RLOCK139_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK139_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR4_RLOCK139       RISC_RCFGLOCKR4_RLOCK139_Msk
#define RISC_RCFGLOCKR4_RLOCK140_Pos   (12U)
#define RISC_RCFGLOCKR4_RLOCK140_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK140_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR4_RLOCK140       RISC_RCFGLOCKR4_RLOCK140_Msk
#define RISC_RCFGLOCKR4_RLOCK141_Pos   (13U)
#define RISC_RCFGLOCKR4_RLOCK141_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK141_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR4_RLOCK141       RISC_RCFGLOCKR4_RLOCK141_Msk
#define RISC_RCFGLOCKR4_RLOCK142_Pos   (14U)
#define RISC_RCFGLOCKR4_RLOCK142_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK142_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR4_RLOCK142       RISC_RCFGLOCKR4_RLOCK142_Msk
#define RISC_RCFGLOCKR4_RLOCK143_Pos   (15U)
#define RISC_RCFGLOCKR4_RLOCK143_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK143_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR4_RLOCK143       RISC_RCFGLOCKR4_RLOCK143_Msk
#define RISC_RCFGLOCKR4_RLOCK144_Pos   (16U)
#define RISC_RCFGLOCKR4_RLOCK144_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK144_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR4_RLOCK144       RISC_RCFGLOCKR4_RLOCK144_Msk
#define RISC_RCFGLOCKR4_RLOCK145_Pos   (17U)
#define RISC_RCFGLOCKR4_RLOCK145_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK145_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR4_RLOCK145       RISC_RCFGLOCKR4_RLOCK145_Msk
#define RISC_RCFGLOCKR4_RLOCK146_Pos   (18U)
#define RISC_RCFGLOCKR4_RLOCK146_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK146_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR4_RLOCK146       RISC_RCFGLOCKR4_RLOCK146_Msk
#define RISC_RCFGLOCKR4_RLOCK147_Pos   (19U)
#define RISC_RCFGLOCKR4_RLOCK147_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK147_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR4_RLOCK147       RISC_RCFGLOCKR4_RLOCK147_Msk
#define RISC_RCFGLOCKR4_RLOCK148_Pos   (20U)
#define RISC_RCFGLOCKR4_RLOCK148_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK148_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR4_RLOCK148       RISC_RCFGLOCKR4_RLOCK148_Msk
#define RISC_RCFGLOCKR4_RLOCK149_Pos   (21U)
#define RISC_RCFGLOCKR4_RLOCK149_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK149_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR4_RLOCK149       RISC_RCFGLOCKR4_RLOCK149_Msk
#define RISC_RCFGLOCKR4_RLOCK150_Pos   (22U)
#define RISC_RCFGLOCKR4_RLOCK150_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK150_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR4_RLOCK150       RISC_RCFGLOCKR4_RLOCK150_Msk
#define RISC_RCFGLOCKR4_RLOCK151_Pos   (23U)
#define RISC_RCFGLOCKR4_RLOCK151_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK151_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR4_RLOCK151       RISC_RCFGLOCKR4_RLOCK151_Msk
#define RISC_RCFGLOCKR4_RLOCK152_Pos   (24U)
#define RISC_RCFGLOCKR4_RLOCK152_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK152_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR4_RLOCK152       RISC_RCFGLOCKR4_RLOCK152_Msk
#define RISC_RCFGLOCKR4_RLOCK153_Pos   (25U)
#define RISC_RCFGLOCKR4_RLOCK153_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK153_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR4_RLOCK153       RISC_RCFGLOCKR4_RLOCK153_Msk
#define RISC_RCFGLOCKR4_RLOCK154_Pos   (26U)
#define RISC_RCFGLOCKR4_RLOCK154_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK154_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR4_RLOCK154       RISC_RCFGLOCKR4_RLOCK154_Msk
#define RISC_RCFGLOCKR4_RLOCK155_Pos   (27U)
#define RISC_RCFGLOCKR4_RLOCK155_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK155_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR4_RLOCK155       RISC_RCFGLOCKR4_RLOCK155_Msk
#define RISC_RCFGLOCKR4_RLOCK156_Pos   (28U)
#define RISC_RCFGLOCKR4_RLOCK156_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK156_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR4_RLOCK156       RISC_RCFGLOCKR4_RLOCK156_Msk
#define RISC_RCFGLOCKR4_RLOCK157_Pos   (29U)
#define RISC_RCFGLOCKR4_RLOCK157_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK157_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR4_RLOCK157       RISC_RCFGLOCKR4_RLOCK157_Msk
#define RISC_RCFGLOCKR4_RLOCK158_Pos   (30U)
#define RISC_RCFGLOCKR4_RLOCK158_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK158_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR4_RLOCK158       RISC_RCFGLOCKR4_RLOCK158_Msk
#define RISC_RCFGLOCKR4_RLOCK159_Pos   (31U)
#define RISC_RCFGLOCKR4_RLOCK159_Msk   (0x1U << RISC_RCFGLOCKR4_RLOCK159_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR4_RLOCK159       RISC_RCFGLOCKR4_RLOCK159_Msk

/*******************  Bits definition for RISC_RCFGLOCKR5 register *************/
#define RISC_RCFGLOCKR5_RLOCK160_Pos   (0U)
#define RISC_RCFGLOCKR5_RLOCK160_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK160_Pos)     /*!< 0x00000001 */
#define RISC_RCFGLOCKR5_RLOCK160       RISC_RCFGLOCKR5_RLOCK160_Msk
#define RISC_RCFGLOCKR5_RLOCK161_Pos   (1U)
#define RISC_RCFGLOCKR5_RLOCK161_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK161_Pos)     /*!< 0x00000002 */
#define RISC_RCFGLOCKR5_RLOCK161       RISC_RCFGLOCKR5_RLOCK161_Msk
#define RISC_RCFGLOCKR5_RLOCK162_Pos   (2U)
#define RISC_RCFGLOCKR5_RLOCK162_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK162_Pos)     /*!< 0x00000004 */
#define RISC_RCFGLOCKR5_RLOCK162       RISC_RCFGLOCKR5_RLOCK162_Msk
#define RISC_RCFGLOCKR5_RLOCK163_Pos   (3U)
#define RISC_RCFGLOCKR5_RLOCK163_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK163_Pos)     /*!< 0x00000008 */
#define RISC_RCFGLOCKR5_RLOCK163       RISC_RCFGLOCKR5_RLOCK163_Msk
#define RISC_RCFGLOCKR5_RLOCK164_Pos   (4U)
#define RISC_RCFGLOCKR5_RLOCK164_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK164_Pos)     /*!< 0x00000010 */
#define RISC_RCFGLOCKR5_RLOCK164       RISC_RCFGLOCKR5_RLOCK164_Msk
#define RISC_RCFGLOCKR5_RLOCK165_Pos   (5U)
#define RISC_RCFGLOCKR5_RLOCK165_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK165_Pos)     /*!< 0x00000020 */
#define RISC_RCFGLOCKR5_RLOCK165       RISC_RCFGLOCKR5_RLOCK165_Msk
#define RISC_RCFGLOCKR5_RLOCK166_Pos   (6U)
#define RISC_RCFGLOCKR5_RLOCK166_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK166_Pos)     /*!< 0x00000040 */
#define RISC_RCFGLOCKR5_RLOCK166       RISC_RCFGLOCKR5_RLOCK166_Msk
#define RISC_RCFGLOCKR5_RLOCK167_Pos   (7U)
#define RISC_RCFGLOCKR5_RLOCK167_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK167_Pos)     /*!< 0x00000080 */
#define RISC_RCFGLOCKR5_RLOCK167       RISC_RCFGLOCKR5_RLOCK167_Msk
#define RISC_RCFGLOCKR5_RLOCK168_Pos   (8U)
#define RISC_RCFGLOCKR5_RLOCK168_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK168_Pos)     /*!< 0x00000100 */
#define RISC_RCFGLOCKR5_RLOCK168        RISC_RCFGLOCKR5_RLOCK168_Msk
#define RISC_RCFGLOCKR5_RLOCK169_Pos   (9U)
#define RISC_RCFGLOCKR5_RLOCK169_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK169_Pos)     /*!< 0x00000200 */
#define RISC_RCFGLOCKR5_RLOCK169       RISC_RCFGLOCKR5_RLOCK169_Msk
#define RISC_RCFGLOCKR5_RLOCK170_Pos   (10U)
#define RISC_RCFGLOCKR5_RLOCK170_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK170_Pos)     /*!< 0x00000400 */
#define RISC_RCFGLOCKR5_RLOCK170       RISC_RCFGLOCKR5_RLOCK170_Msk
#define RISC_RCFGLOCKR5_RLOCK171_Pos   (11U)
#define RISC_RCFGLOCKR5_RLOCK171_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK171_Pos)     /*!< 0x00000800 */
#define RISC_RCFGLOCKR5_RLOCK171       RISC_RCFGLOCKR5_RLOCK171_Msk
#define RISC_RCFGLOCKR5_RLOCK172_Pos   (12U)
#define RISC_RCFGLOCKR5_RLOCK172_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK172_Pos)     /*!< 0x00001000 */
#define RISC_RCFGLOCKR5_RLOCK172       RISC_RCFGLOCKR5_RLOCK172_Msk
#define RISC_RCFGLOCKR5_RLOCK173_Pos   (13U)
#define RISC_RCFGLOCKR5_RLOCK173_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK173_Pos)     /*!< 0x00002000 */
#define RISC_RCFGLOCKR5_RLOCK173       RISC_RCFGLOCKR5_RLOCK173_Msk
#define RISC_RCFGLOCKR5_RLOCK174_Pos   (14U)
#define RISC_RCFGLOCKR5_RLOCK174_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK174_Pos)     /*!< 0x00004000 */
#define RISC_RCFGLOCKR5_RLOCK174       RISC_RCFGLOCKR5_RLOCK174_Msk
#define RISC_RCFGLOCKR5_RLOCK175_Pos   (15U)
#define RISC_RCFGLOCKR5_RLOCK175_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK175_Pos)     /*!< 0x00008000 */
#define RISC_RCFGLOCKR5_RLOCK175       RISC_RCFGLOCKR5_RLOCK175_Msk
#define RISC_RCFGLOCKR5_RLOCK176_Pos   (16U)
#define RISC_RCFGLOCKR5_RLOCK176_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK176_Pos)     /*!< 0x00010000 */
#define RISC_RCFGLOCKR5_RLOCK176       RISC_RCFGLOCKR5_RLOCK176_Msk
#define RISC_RCFGLOCKR5_RLOCK177_Pos   (17U)
#define RISC_RCFGLOCKR5_RLOCK177_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK177_Pos)     /*!< 0x00020000 */
#define RISC_RCFGLOCKR5_RLOCK177       RISC_RCFGLOCKR5_RLOCK177_Msk
#define RISC_RCFGLOCKR5_RLOCK178_Pos   (18U)
#define RISC_RCFGLOCKR5_RLOCK178_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK178_Pos)     /*!< 0x00040000 */
#define RISC_RCFGLOCKR5_RLOCK178       RISC_RCFGLOCKR5_RLOCK178_Msk
#define RISC_RCFGLOCKR5_RLOCK179_Pos   (19U)
#define RISC_RCFGLOCKR5_RLOCK179_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK179_Pos)     /*!< 0x00080000 */
#define RISC_RCFGLOCKR5_RLOCK179       RISC_RCFGLOCKR5_RLOCK179_Msk
#define RISC_RCFGLOCKR5_RLOCK180_Pos   (20U)
#define RISC_RCFGLOCKR5_RLOCK180_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK180_Pos)     /*!< 0x00100000 */
#define RISC_RCFGLOCKR5_RLOCK180       RISC_RCFGLOCKR5_RLOCK180_Msk
#define RISC_RCFGLOCKR5_RLOCK181_Pos   (21U)
#define RISC_RCFGLOCKR5_RLOCK181_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK181_Pos)     /*!< 0x00200000 */
#define RISC_RCFGLOCKR5_RLOCK181       RISC_RCFGLOCKR5_RLOCK181_Msk
#define RISC_RCFGLOCKR5_RLOCK182_Pos   (22U)
#define RISC_RCFGLOCKR5_RLOCK182_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK182_Pos)     /*!< 0x00400000 */
#define RISC_RCFGLOCKR5_RLOCK182       RISC_RCFGLOCKR5_RLOCK182_Msk
#define RISC_RCFGLOCKR5_RLOCK183_Pos   (23U)
#define RISC_RCFGLOCKR5_RLOCK183_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK183_Pos)     /*!< 0x00800000 */
#define RISC_RCFGLOCKR5_RLOCK183       RISC_RCFGLOCKR5_RLOCK183_Msk
#define RISC_RCFGLOCKR5_RLOCK184_Pos   (24U)
#define RISC_RCFGLOCKR5_RLOCK184_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK184_Pos)     /*!< 0x01000000 */
#define RISC_RCFGLOCKR5_RLOCK184       RISC_RCFGLOCKR5_RLOCK184_Msk
#define RISC_RCFGLOCKR5_RLOCK185_Pos   (25U)
#define RISC_RCFGLOCKR5_RLOCK185_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK185_Pos)     /*!< 0x02000000 */
#define RISC_RCFGLOCKR5_RLOCK185       RISC_RCFGLOCKR5_RLOCK185_Msk
#define RISC_RCFGLOCKR5_RLOCK186_Pos   (26U)
#define RISC_RCFGLOCKR5_RLOCK186_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK186_Pos)     /*!< 0x04000000 */
#define RISC_RCFGLOCKR5_RLOCK186       RISC_RCFGLOCKR5_RLOCK186_Msk
#define RISC_RCFGLOCKR5_RLOCK187_Pos   (27U)
#define RISC_RCFGLOCKR5_RLOCK187_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK187_Pos)     /*!< 0x08000000 */
#define RISC_RCFGLOCKR5_RLOCK187       RISC_RCFGLOCKR5_RLOCK187_Msk
#define RISC_RCFGLOCKR5_RLOCK188_Pos   (28U)
#define RISC_RCFGLOCKR5_RLOCK188_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK188_Pos)     /*!< 0x10000000 */
#define RISC_RCFGLOCKR5_RLOCK188       RISC_RCFGLOCKR5_RLOCK188_Msk
#define RISC_RCFGLOCKR5_RLOCK189_Pos   (29U)
#define RISC_RCFGLOCKR5_RLOCK189_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK189_Pos)     /*!< 0x20000000 */
#define RISC_RCFGLOCKR5_RLOCK189       RISC_RCFGLOCKR5_RLOCK189_Msk
#define RISC_RCFGLOCKR5_RLOCK190_Pos   (30U)
#define RISC_RCFGLOCKR5_RLOCK190_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK190_Pos)     /*!< 0x40000000 */
#define RISC_RCFGLOCKR5_RLOCK190       RISC_RCFGLOCKR5_RLOCK190_Msk
#define RISC_RCFGLOCKR5_RLOCK191_Pos   (31U)
#define RISC_RCFGLOCKR5_RLOCK191_Msk   (0x1U << RISC_RCFGLOCKR5_RLOCK191_Pos)     /*!< 0x80000000 */
#define RISC_RCFGLOCKR5_RLOCK191       RISC_RCFGLOCKR5_RLOCK191_Msk

/*******************  Bits definition for RISC_PERx_CIDCFGR register **********/
#define RISC_PERCIDCFGR_CFEN_Pos      (0U)
#define RISC_PERCIDCFGR_CFEN_Msk      (0x1U << RISC_PERCIDCFGR_CFEN_Pos)        /*!< 0x00000001 */
#define RISC_PERCIDCFGR_CFEN          RISC_PERCIDCFGR_CFEN_Msk

#define RISC_PERCIDCFGR_SEMEN_Pos     (1U)
#define RISC_PERCIDCFGR_SEMEN_Msk     (0x1U << RISC_PERCIDCFGR_SEMEN_Pos)       /*!< 0x00000002 */
#define RISC_PERCIDCFGR_SEMEN         RISC_PERCIDCFGR_SEMEN_Msk

#define RISC_PERCIDCFGR_SCID_Pos      (4U)
#define RISC_PERCIDCFGR_SCID_Msk      (0x7U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */
#define RISC_PERCIDCFGR_SCID          RISC_PERCIDCFGR_SCID_Msk
#define RISC_PERCIDCFGR_SCID0         (0x0U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000000 */
#define RISC_PERCIDCFGR_SCID1         (0x1U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000010 */
#define RISC_PERCIDCFGR_SCID2         (0x2U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000020 */
#define RISC_PERCIDCFGR_SCID3         (0x3U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000030 */
#define RISC_PERCIDCFGR_SCID4         (0x4U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000040 */
#define RISC_PERCIDCFGR_SCID5         (0x5U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000050 */
#define RISC_PERCIDCFGR_SCID6         (0x6U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000060 */
#define RISC_PERCIDCFGR_SCID7         (0x7U << RISC_PERCIDCFGR_SCID_Pos)        /*!< 0x00000070 */

#define RISC_PERCIDCFGR_SEMWL_Pos     (16U)
#define RISC_PERCIDCFGR_SEMWL_Msk     (0xFFU << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00FF0000 */
#define RISC_PERCIDCFGR_SEMWL         RISC_PERCIDCFGR_SEMWL_Msk
#define RISC_PERCIDCFGR_SEMWLC0       (0x1U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00010000 */
#define RISC_PERCIDCFGR_SEMWLC1       (0x2U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00020000 */
#define RISC_PERCIDCFGR_SEMWLC2       (0x4U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00040000 */
#define RISC_PERCIDCFGR_SEMWLC3       (0x8U << RISC_PERCIDCFGR_SEMWL_Pos)       /*!< 0x00080000 */
#define RISC_PERCIDCFGR_SEMWLC4       (0x10U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00100000 */
#define RISC_PERCIDCFGR_SEMWLC5       (0x20U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00200000 */
#define RISC_PERCIDCFGR_SEMWLC6       (0x40U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00400000 */
#define RISC_PERCIDCFGR_SEMWLC7       (0x80U << RISC_PERCIDCFGR_SEMWL_Pos)      /*!< 0x00800000 */

/*******************  Bits definition for RISC_PERx_SEMCR register ************/
#define RISC_PERSEMCR_SEMMUTEX_Pos    (0U)
#define RISC_PERSEMCR_SEMMUTEX_Msk    (0x1U << RISC_PERSEMCR_SEMMUTEX_Pos)      /*!< 0x00000001 */
#define RISC_PERSEMCR_SEMMUTEX        RISC_PERSEMCR_SEMMUTEX_Msk

#define RISC_PERSEMCR_SEMCID_Pos      (4U)
#define RISC_PERSEMCR_SEMCID_Msk      (0x7U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */
#define RISC_PERSEMCR_SEMCID          RISC_PERSEMCR_SEMCID_Msk
#define RISC_PERSEMCR_SEMCID0         (0x0U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000000 */
#define RISC_PERSEMCR_SEMCID1         (0x1U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000010 */
#define RISC_PERSEMCR_SEMCID2         (0x2U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000020 */
#define RISC_PERSEMCR_SEMCID3         (0x3U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000030 */
#define RISC_PERSEMCR_SEMCID4         (0x4U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000040 */
#define RISC_PERSEMCR_SEMCID5         (0x5U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000050 */
#define RISC_PERSEMCR_SEMCID6         (0x6U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000060 */
#define RISC_PERSEMCR_SEMCID7         (0x7U << RISC_PERSEMCR_SEMCID_Pos)        /*!< 0x00000070 */

/*******************  Bits definition for RISC_REGx_zCFGR register ************/
#define RISC_REGCFGR_SREN_Pos         (0U)
#define RISC_REGCFGR_SREN_Msk         (0x1U << RISC_REGCFGR_SREN_Pos)           /*!< 0x00000001 */
#define RISC_REGCFGR_SREN             RISC_REGCFGR_SREN_Msk

#define RISC_REGCFGR_RLOCK_Pos        (1U)
#define RISC_REGCFGR_RLOCK_Msk        (0x1U << RISC_REGCFGR_RLOCK_Pos)          /*!< 0x00000002 */
#define RISC_REGCFGR_RLOCK            RISC_REGCFGR_RLOCK_Msk

#define RISC_REGCFGR_SRCID_Pos        (4U)
#define RISC_REGCFGR_SRCID_Msk        (0x7U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */
#define RISC_REGCFGR_SRCID            RISC_REGCFGR_SRCID_Msk
#define RISC_REGCFGR_SRCID0           (0x0U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000000 */
#define RISC_REGCFGR_SRCID1           (0x1U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000010 */
#define RISC_REGCFGR_SRCID2           (0x2U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000020 */
#define RISC_REGCFGR_SRCID3           (0x3U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000030 */
#define RISC_REGCFGR_SRCID4           (0x4U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000040 */
#define RISC_REGCFGR_SRCID5           (0x5U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000050 */
#define RISC_REGCFGR_SRCID6           (0x6U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000060 */
#define RISC_REGCFGR_SRCID7           (0x7U << RISC_REGCFGR_SRCID_Pos)          /*!< 0x00000070 */

#define RISC_REGCFGR_SEC_Pos          (8U)
#define RISC_REGCFGR_SEC_Msk          (0x1U << RISC_REGCFGR_SEC_Pos)            /*!< 0x00000100 */
#define RISC_REGCFGR_SEC              RISC_REGCFGR_SEC_Msk

#define RISC_REGCFGR_PRIV_Pos         (9U)
#define RISC_REGCFGR_PRIV_Msk         (0x1U << RISC_REGCFGR_PRIV_Pos)           /*!< 0x00000200 */
#define RISC_REGCFGR_PRIV             RISC_REGCFGR_PRIV_Msk


/******************************************************************************/
/*                                                                            */
/*                           Real-Time Clock (RTC)                            */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for RTC_TR register  *******************/
#define RTC_TR_SU_Pos                (0U)
#define RTC_TR_SU_Msk                (0xFU << RTC_TR_SU_Pos)                            /*!< 0x0000000F */
#define RTC_TR_SU                    RTC_TR_SU_Msk
#define RTC_TR_SU_0                  (0x1U << RTC_TR_SU_Pos)                            /*!< 0x00000001 */
#define RTC_TR_SU_1                  (0x2U << RTC_TR_SU_Pos)                            /*!< 0x00000002 */
#define RTC_TR_SU_2                  (0x4U << RTC_TR_SU_Pos)                            /*!< 0x00000004 */
#define RTC_TR_SU_3                  (0x8U << RTC_TR_SU_Pos)                            /*!< 0x00000008 */
#define RTC_TR_ST_Pos                (4U)
#define RTC_TR_ST_Msk                (0x7U << RTC_TR_ST_Pos)                            /*!< 0x00000070 */
#define RTC_TR_ST                    RTC_TR_ST_Msk
#define RTC_TR_ST_0                  (0x1U << RTC_TR_ST_Pos)                            /*!< 0x00000010 */
#define RTC_TR_ST_1                  (0x2U << RTC_TR_ST_Pos)                            /*!< 0x00000020 */
#define RTC_TR_ST_2                  (0x4U << RTC_TR_ST_Pos)                            /*!< 0x00000040 */
#define RTC_TR_MNU_Pos               (8U)
#define RTC_TR_MNU_Msk               (0xFU << RTC_TR_MNU_Pos)                           /*!< 0x00000F00 */
#define RTC_TR_MNU                   RTC_TR_MNU_Msk
#define RTC_TR_MNU_0                 (0x1U << RTC_TR_MNU_Pos)                           /*!< 0x00000100 */
#define RTC_TR_MNU_1                 (0x2U << RTC_TR_MNU_Pos)                           /*!< 0x00000200 */
#define RTC_TR_MNU_2                 (0x4U << RTC_TR_MNU_Pos)                           /*!< 0x00000400 */
#define RTC_TR_MNU_3                 (0x8U << RTC_TR_MNU_Pos)                           /*!< 0x00000800 */
#define RTC_TR_MNT_Pos               (12U)
#define RTC_TR_MNT_Msk               (0x7U << RTC_TR_MNT_Pos)                           /*!< 0x00007000 */
#define RTC_TR_MNT                   RTC_TR_MNT_Msk
#define RTC_TR_MNT_0                 (0x1U << RTC_TR_MNT_Pos)                           /*!< 0x00001000 */
#define RTC_TR_MNT_1                 (0x2U << RTC_TR_MNT_Pos)                           /*!< 0x00002000 */
#define RTC_TR_MNT_2                 (0x4U << RTC_TR_MNT_Pos)                           /*!< 0x00004000 */
#define RTC_TR_HU_Pos                (16U)
#define RTC_TR_HU_Msk                (0xFU << RTC_TR_HU_Pos)                            /*!< 0x000F0000 */
#define RTC_TR_HU                    RTC_TR_HU_Msk
#define RTC_TR_HU_0                  (0x1U << RTC_TR_HU_Pos)                            /*!< 0x00010000 */
#define RTC_TR_HU_1                  (0x2U << RTC_TR_HU_Pos)                            /*!< 0x00020000 */
#define RTC_TR_HU_2                  (0x4U << RTC_TR_HU_Pos)                            /*!< 0x00040000 */
#define RTC_TR_HU_3                  (0x8U << RTC_TR_HU_Pos)                            /*!< 0x00080000 */
#define RTC_TR_HT_Pos                (20U)
#define RTC_TR_HT_Msk                (0x3U << RTC_TR_HT_Pos)                            /*!< 0x00300000 */
#define RTC_TR_HT                    RTC_TR_HT_Msk
#define RTC_TR_HT_0                  (0x1U << RTC_TR_HT_Pos)                            /*!< 0x00100000 */
#define RTC_TR_HT_1                  (0x2U << RTC_TR_HT_Pos)                            /*!< 0x00200000 */
#define RTC_TR_PM_Pos                (22U)
#define RTC_TR_PM_Msk                (0x1U << RTC_TR_PM_Pos)                            /*!< 0x00400000 */
#define RTC_TR_PM                    RTC_TR_PM_Msk

/********************  Bits definition for RTC_DR register  *******************/
#define RTC_DR_DU_Pos                (0U)
#define RTC_DR_DU_Msk                (0xFU << RTC_DR_DU_Pos)                            /*!< 0x0000000F */
#define RTC_DR_DU                    RTC_DR_DU_Msk
#define RTC_DR_DU_0                  (0x1U << RTC_DR_DU_Pos)                            /*!< 0x00000001 */
#define RTC_DR_DU_1                  (0x2U << RTC_DR_DU_Pos)                            /*!< 0x00000002 */
#define RTC_DR_DU_2                  (0x4U << RTC_DR_DU_Pos)                            /*!< 0x00000004 */
#define RTC_DR_DU_3                  (0x8U << RTC_DR_DU_Pos)                            /*!< 0x00000008 */
#define RTC_DR_DT_Pos                (4U)
#define RTC_DR_DT_Msk                (0x3U << RTC_DR_DT_Pos)                            /*!< 0x00000030 */
#define RTC_DR_DT                    RTC_DR_DT_Msk
#define RTC_DR_DT_0                  (0x1U << RTC_DR_DT_Pos)                            /*!< 0x00000010 */
#define RTC_DR_DT_1                  (0x2U << RTC_DR_DT_Pos)                            /*!< 0x00000020 */
#define RTC_DR_MU_Pos                (8U)
#define RTC_DR_MU_Msk                (0xFU << RTC_DR_MU_Pos)                            /*!< 0x00000F00 */
#define RTC_DR_MU                    RTC_DR_MU_Msk
#define RTC_DR_MU_0                  (0x1U << RTC_DR_MU_Pos)                            /*!< 0x00000100 */
#define RTC_DR_MU_1                  (0x2U << RTC_DR_MU_Pos)                            /*!< 0x00000200 */
#define RTC_DR_MU_2                  (0x4U << RTC_DR_MU_Pos)                            /*!< 0x00000400 */
#define RTC_DR_MU_3                  (0x8U << RTC_DR_MU_Pos)                            /*!< 0x00000800 */
#define RTC_DR_MT_Pos                (12U)
#define RTC_DR_MT_Msk                (0x1U << RTC_DR_MT_Pos)                            /*!< 0x00001000 */
#define RTC_DR_MT                    RTC_DR_MT_Msk
#define RTC_DR_WDU_Pos               (13U)
#define RTC_DR_WDU_Msk               (0x7U << RTC_DR_WDU_Pos)                           /*!< 0x0000E000 */
#define RTC_DR_WDU                   RTC_DR_WDU_Msk
#define RTC_DR_WDU_0                 (0x1U << RTC_DR_WDU_Pos)                           /*!< 0x00002000 */
#define RTC_DR_WDU_1                 (0x2U << RTC_DR_WDU_Pos)                           /*!< 0x00004000 */
#define RTC_DR_WDU_2                 (0x4U << RTC_DR_WDU_Pos)                           /*!< 0x00008000 */
#define RTC_DR_YU_Pos                (16U)
#define RTC_DR_YU_Msk                (0xFU << RTC_DR_YU_Pos)                            /*!< 0x000F0000 */
#define RTC_DR_YU                    RTC_DR_YU_Msk
#define RTC_DR_YU_0                  (0x1U << RTC_DR_YU_Pos)                            /*!< 0x00010000 */
#define RTC_DR_YU_1                  (0x2U << RTC_DR_YU_Pos)                            /*!< 0x00020000 */
#define RTC_DR_YU_2                  (0x4U << RTC_DR_YU_Pos)                            /*!< 0x00040000 */
#define RTC_DR_YU_3                  (0x8U << RTC_DR_YU_Pos)                            /*!< 0x00080000 */
#define RTC_DR_YT_Pos                (20U)
#define RTC_DR_YT_Msk                (0xFU << RTC_DR_YT_Pos)                            /*!< 0x00F00000 */
#define RTC_DR_YT                    RTC_DR_YT_Msk
#define RTC_DR_YT_0                  (0x1U << RTC_DR_YT_Pos)                            /*!< 0x00100000 */
#define RTC_DR_YT_1                  (0x2U << RTC_DR_YT_Pos)                            /*!< 0x00200000 */
#define RTC_DR_YT_2                  (0x4U << RTC_DR_YT_Pos)                            /*!< 0x00400000 */
#define RTC_DR_YT_3                  (0x8U << RTC_DR_YT_Pos)                            /*!< 0x00800000 */

/********************  Bits definition for RTC_SSR register  ******************/
#define RTC_SSR_SS_Pos               (0U)
#define RTC_SSR_SS_Msk               (0xFFFFFFFFUL << RTC_SSR_SS_Pos)                        /*!< 0xFFFFFFFF */
#define RTC_SSR_SS                   RTC_SSR_SS_Msk

/********************  Bits definition for RTC_ICSR register  ******************/
#define RTC_ICSR_WUTWF_Pos           (2U)
#define RTC_ICSR_WUTWF_Msk           (0x1UL << RTC_ICSR_WUTWF_Pos)             /*!< 0x00000004 */
#define RTC_ICSR_WUTWF               RTC_ICSR_WUTWF_Msk
#define RTC_ICSR_SHPF_Pos            (3U)
#define RTC_ICSR_SHPF_Msk            (0x1UL << RTC_ICSR_SHPF_Pos)              /*!< 0x00000008 */
#define RTC_ICSR_SHPF                RTC_ICSR_SHPF_Msk
#define RTC_ICSR_INITS_Pos           (4U)
#define RTC_ICSR_INITS_Msk           (0x1UL << RTC_ICSR_INITS_Pos)             /*!< 0x00000010 */
#define RTC_ICSR_INITS               RTC_ICSR_INITS_Msk
#define RTC_ICSR_RSF_Pos             (5U)
#define RTC_ICSR_RSF_Msk             (0x1UL << RTC_ICSR_RSF_Pos)               /*!< 0x00000020 */
#define RTC_ICSR_RSF                 RTC_ICSR_RSF_Msk
#define RTC_ICSR_INITF_Pos           (6U)
#define RTC_ICSR_INITF_Msk           (0x1UL << RTC_ICSR_INITF_Pos)             /*!< 0x00000040 */
#define RTC_ICSR_INITF               RTC_ICSR_INITF_Msk
#define RTC_ICSR_INIT_Pos            (7U)
#define RTC_ICSR_INIT_Msk            (0x1UL << RTC_ICSR_INIT_Pos)              /*!< 0x00000080 */
#define RTC_ICSR_INIT                RTC_ICSR_INIT_Msk
#define RTC_ICSR_BIN_Pos             (8U)
#define RTC_ICSR_BIN_Msk             (0x3UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000300 */
#define RTC_ICSR_BIN                 RTC_ICSR_BIN_Msk
#define RTC_ICSR_BIN_0               (0x1UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000100 */
#define RTC_ICSR_BIN_1               (0x2UL << RTC_ICSR_BIN_Pos)               /*!< 0x00000200 */
#define RTC_ICSR_BCDU_Pos            (10U)
#define RTC_ICSR_BCDU_Msk            (0x7UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001C00 */
#define RTC_ICSR_BCDU                RTC_ICSR_BCDU_Msk
#define RTC_ICSR_BCDU_0              (0x1UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000400 */
#define RTC_ICSR_BCDU_1              (0x2UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00000800 */
#define RTC_ICSR_BCDU_2              (0x4UL << RTC_ICSR_BCDU_Pos)              /*!< 0x00001000 */
#define RTC_ICSR_RECALPF_Pos         (16U)
#define RTC_ICSR_RECALPF_Msk         (0x1UL << RTC_ICSR_RECALPF_Pos)           /*!< 0x00010000 */
#define RTC_ICSR_RECALPF             RTC_ICSR_RECALPF_Msk

/********************  Bits definition for RTC_PRER register  *****************/
#define RTC_PRER_PREDIV_S_Pos        (0U)
#define RTC_PRER_PREDIV_S_Msk        (0x7FFFU << RTC_PRER_PREDIV_S_Pos)                 /*!< 0x00007FFF */
#define RTC_PRER_PREDIV_S            RTC_PRER_PREDIV_S_Msk
#define RTC_PRER_PREDIV_A_Pos        (16U)
#define RTC_PRER_PREDIV_A_Msk        (0x7FU << RTC_PRER_PREDIV_A_Pos)                   /*!< 0x007F0000 */
#define RTC_PRER_PREDIV_A            RTC_PRER_PREDIV_A_Msk

/********************  Bits definition for RTC_WUTR register  *****************/
#define RTC_WUTR_WUT_Pos             (0U)
#define RTC_WUTR_WUT_Msk             (0xFFFFU << RTC_WUTR_WUT_Pos)                      /*!< 0x0000FFFF */
#define RTC_WUTR_WUT                 RTC_WUTR_WUT_Msk
#define RTC_WUTR_WUTOCLR_Pos         (16U)
#define RTC_WUTR_WUTOCLR_Msk         (0xFFFFU << RTC_WUTR_WUTOCLR_Pos)                  /*!< 0x0000FFFF */
#define RTC_WUTR_WUTOCLR             RTC_WUTR_WUTOCLR_Msk

/********************  Bits definition for RTC_CR register  *******************/
#define RTC_CR_WUCKSEL_Pos           (0U)
#define RTC_CR_WUCKSEL_Msk           (0x7U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000007 */
#define RTC_CR_WUCKSEL               RTC_CR_WUCKSEL_Msk
#define RTC_CR_WUCKSEL_0             (0x1U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000001 */
#define RTC_CR_WUCKSEL_1             (0x2U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000002 */
#define RTC_CR_WUCKSEL_2             (0x4U << RTC_CR_WUCKSEL_Pos)                       /*!< 0x00000004 */
#define RTC_CR_TSEDGE_Pos            (3U)
#define RTC_CR_TSEDGE_Msk            (0x1U << RTC_CR_TSEDGE_Pos)                        /*!< 0x00000008 */
#define RTC_CR_TSEDGE                RTC_CR_TSEDGE_Msk
#define RTC_CR_REFCKON_Pos           (4U)
#define RTC_CR_REFCKON_Msk           (0x1U << RTC_CR_REFCKON_Pos)                       /*!< 0x00000010 */
#define RTC_CR_REFCKON               RTC_CR_REFCKON_Msk
#define RTC_CR_BYPSHAD_Pos           (5U)
#define RTC_CR_BYPSHAD_Msk           (0x1U << RTC_CR_BYPSHAD_Pos)                       /*!< 0x00000020 */
#define RTC_CR_BYPSHAD               RTC_CR_BYPSHAD_Msk
#define RTC_CR_FMT_Pos               (6U)
#define RTC_CR_FMT_Msk               (0x1U << RTC_CR_FMT_Pos)                           /*!< 0x00000040 */
#define RTC_CR_FMT                   RTC_CR_FMT_Msk
#define RTC_CR_SSRUIE_Pos            (7U)
#define RTC_CR_SSRUIE_Msk            (0x1UL << RTC_CR_SSRUIE_Pos)                      /*!< 0x00000080 */
#define RTC_CR_SSRUIE                RTC_CR_SSRUIE_Msk
#define RTC_CR_ALRAE_Pos             (8U)
#define RTC_CR_ALRAE_Msk             (0x1U << RTC_CR_ALRAE_Pos)                         /*!< 0x00000100 */
#define RTC_CR_ALRAE                 RTC_CR_ALRAE_Msk
#define RTC_CR_ALRBE_Pos             (9U)
#define RTC_CR_ALRBE_Msk             (0x1U << RTC_CR_ALRBE_Pos)                         /*!< 0x00000200 */
#define RTC_CR_ALRBE                 RTC_CR_ALRBE_Msk
#define RTC_CR_WUTE_Pos              (10U)
#define RTC_CR_WUTE_Msk              (0x1U << RTC_CR_WUTE_Pos)                          /*!< 0x00000400 */
#define RTC_CR_WUTE                  RTC_CR_WUTE_Msk
#define RTC_CR_TSE_Pos               (11U)
#define RTC_CR_TSE_Msk               (0x1U << RTC_CR_TSE_Pos)                           /*!< 0x00000800 */
#define RTC_CR_TSE                   RTC_CR_TSE_Msk
#define RTC_CR_ALRAIE_Pos            (12U)
#define RTC_CR_ALRAIE_Msk            (0x1U << RTC_CR_ALRAIE_Pos)                        /*!< 0x00001000 */
#define RTC_CR_ALRAIE                RTC_CR_ALRAIE_Msk
#define RTC_CR_ALRBIE_Pos            (13U)
#define RTC_CR_ALRBIE_Msk            (0x1U << RTC_CR_ALRBIE_Pos)                        /*!< 0x00002000 */
#define RTC_CR_ALRBIE                RTC_CR_ALRBIE_Msk
#define RTC_CR_WUTIE_Pos             (14U)
#define RTC_CR_WUTIE_Msk             (0x1U << RTC_CR_WUTIE_Pos)                         /*!< 0x00004000 */
#define RTC_CR_WUTIE                 RTC_CR_WUTIE_Msk
#define RTC_CR_TSIE_Pos              (15U)
#define RTC_CR_TSIE_Msk              (0x1U << RTC_CR_TSIE_Pos)                          /*!< 0x00008000 */
#define RTC_CR_TSIE                  RTC_CR_TSIE_Msk
#define RTC_CR_ADD1H_Pos             (16U)
#define RTC_CR_ADD1H_Msk             (0x1U << RTC_CR_ADD1H_Pos)                         /*!< 0x00010000 */
#define RTC_CR_ADD1H                 RTC_CR_ADD1H_Msk
#define RTC_CR_SUB1H_Pos             (17U)
#define RTC_CR_SUB1H_Msk             (0x1U << RTC_CR_SUB1H_Pos)                         /*!< 0x00020000 */
#define RTC_CR_SUB1H                 RTC_CR_SUB1H_Msk
#define RTC_CR_BKP_Pos               (18U)
#define RTC_CR_BKP_Msk               (0x1U << RTC_CR_BKP_Pos)                           /*!< 0x00040000 */
#define RTC_CR_BKP                   RTC_CR_BKP_Msk
#define RTC_CR_COSEL_Pos             (19U)
#define RTC_CR_COSEL_Msk             (0x1U << RTC_CR_COSEL_Pos)                         /*!< 0x00080000 */
#define RTC_CR_COSEL                 RTC_CR_COSEL_Msk
#define RTC_CR_POL_Pos               (20U)
#define RTC_CR_POL_Msk               (0x1U << RTC_CR_POL_Pos)                           /*!< 0x00100000 */
#define RTC_CR_POL                   RTC_CR_POL_Msk
#define RTC_CR_OSEL_Pos              (21U)
#define RTC_CR_OSEL_Msk              (0x3U << RTC_CR_OSEL_Pos)                          /*!< 0x00600000 */
#define RTC_CR_OSEL                  RTC_CR_OSEL_Msk
#define RTC_CR_OSEL_0                (0x1U << RTC_CR_OSEL_Pos)                          /*!< 0x00200000 */
#define RTC_CR_OSEL_1                (0x2U << RTC_CR_OSEL_Pos)                          /*!< 0x00400000 */
#define RTC_CR_COE_Pos               (23U)
#define RTC_CR_COE_Msk               (0x1U << RTC_CR_COE_Pos)                           /*!< 0x00800000 */
#define RTC_CR_COE                   RTC_CR_COE_Msk
#define RTC_CR_ITSE_Pos              (24U)
#define RTC_CR_ITSE_Msk              (0x1U << RTC_CR_ITSE_Pos)                          /*!< 0x01000000 */
#define RTC_CR_ITSE                  RTC_CR_ITSE_Msk                                    /*!<Timestamp on internal event enable  */
#define RTC_CR_TAMPTS_Pos            (25U)
#define RTC_CR_TAMPTS_Msk            (0x1U << RTC_CR_TAMPTS_Pos)                        /*!< 0x02000000 */
#define RTC_CR_TAMPTS                RTC_CR_TAMPTS_Msk                                  /*!<Activate timestamp on tamper detection event  */
#define RTC_CR_TAMPOE_Pos            (26U)
#define RTC_CR_TAMPOE_Msk            (0x1U << RTC_CR_TAMPOE_Pos)                        /*!< 0x04000000 */
#define RTC_CR_TAMPOE                RTC_CR_TAMPOE_Msk                                  /*!<Tamper detection output enable on TAMPALARM  */
#define RTC_CR_ALRACLR_Pos           (27U)
#define RTC_CR_ALRACLR_Msk           (0x1U << RTC_CR_ALRACLR_Pos)                       /*!< 0x8000000 */
#define RTC_CR_ALRACLR               RTC_CR_ALRACLR_Msk                                 /*!<Alarm A mask */
#define RTC_CR_ALRBCLR_Pos           (28U)
#define RTC_CR_ALRBCLR_Msk           (0x1U << RTC_CR_ALRBCLR_Pos)                       /*!< 0x10000000 */
#define RTC_CR_ALRBCLR               RTC_CR_ALRBCLR_Msk                                 /*!<Alarm B mask */
#define RTC_CR_TAMPALRM_PU_Pos       (29U)
#define RTC_CR_TAMPALRM_PU_Msk       (0x1U << RTC_CR_TAMPALRM_PU_Pos)                   /*!< 0x20000000 */
#define RTC_CR_TAMPALRM_PU           RTC_CR_TAMPALRM_PU_Msk                             /*!<TAMPALARM output pull-up config */
#define RTC_CR_TAMPALRM_TYPE_Pos     (30U)
#define RTC_CR_TAMPALRM_TYPE_Msk     (0x1U << RTC_CR_TAMPALRM_TYPE_Pos)                 /*!< 0x40000000 */
#define RTC_CR_TAMPALRM_TYPE         RTC_CR_TAMPALRM_TYPE_Msk                           /*!<TAMPALARM output type  */
#define RTC_CR_OUT2EN_Pos            (31U)
#define RTC_CR_OUT2EN_Msk            (0x1UL << RTC_CR_OUT2EN_Pos)                        /*!< 0x80000000 */
#define RTC_CR_OUT2EN                RTC_CR_OUT2EN_Msk                                  /*!<RTC_OUT2 output enable */

/********************  Bits definition for RTC_PRIVCR register  *****************/
#define RTC_PRIVCR_ALRAPRIV_Pos      (0U)
#define RTC_PRIVCR_ALRAPRIV_Msk      (0x1U << RTC_PRIVCR_ALRAPRIV_Pos)                  /*!< 0x00000001 */
#define RTC_PRIVCR_ALRAPRIV          RTC_PRIVCR_ALRAPRIV_Msk
#define RTC_PRIVCR_ALRBPRIV_Pos      (1U)
#define RTC_PRIVCR_ALRBPRIV_Msk      (0x1U << RTC_PRIVCR_ALRBPRIV_Pos)                  /*!< 0x00000002 */
#define RTC_PRIVCR_ALRBPRIV          RTC_PRIVCR_ALRBPRIV_Msk
#define RTC_PRIVCR_WUTPRIV_Pos       (2U)
#define RTC_PRIVCR_WUTPRIV_Msk       (0x1U << RTC_PRIVCR_WUTPRIV_Pos)                   /*!< 0x00000004 */
#define RTC_PRIVCR_WUTPRIV           RTC_PRIVCR_WUTPRIV_Msk
#define RTC_PRIVCR_TSPRIV_Pos        (3U)
#define RTC_PRIVCR_TSPRIV_Msk        (0x1U << RTC_PRIVCR_TSPRIV_Pos)                    /*!< 0x00000008 */
#define RTC_PRIVCR_TSPRIV            RTC_PRIVCR_TSPRIV_Msk
#define RTC_PRIVCR_CALPRIV_Pos       (13U)
#define RTC_PRIVCR_CALPRIV_Msk       (0x1U << RTC_PRIVCR_CALPRIV_Pos)                   /*!< 0x00002000 */
#define RTC_PRIVCR_CALPRIV           RTC_PRIVCR_CALPRIV_Msk
#define RTC_PRIVCR_INITPRIV_Pos      (14U)
#define RTC_PRIVCR_INITPRIV_Msk      (0x1U << RTC_PRIVCR_INITPRIV_Pos)                  /*!< 0x00004000 */
#define RTC_PRIVCR_INITPRIV          RTC_PRIVCR_INITPRIV_Msk
#define RTC_PRIVCR_PRIV_Pos          (15U)
#define RTC_PRIVCR_PRIV_Msk          (0x1U << RTC_PRIVCR_PRIV_Pos)                      /*!< 0x00008000 */
#define RTC_PRIVCR_PRIV              RTC_PRIVCR_PRIV_Msk

/********************  Bits definition for RTC_SECCFGR register  ******************/
#define RTC_SECCFGR_ALRASEC_Pos       (0U)
#define RTC_SECCFGR_ALRASEC_Msk       (0x1U << RTC_SECCFGR_ALRASEC_Pos)                   /*!< 0x00000001 */
#define RTC_SECCFGR_ALRASEC           RTC_SECCFGR_ALRASEC_Msk
#define RTC_SECCFGR_ALRBSEC_Pos       (1U)
#define RTC_SECCFGR_ALRBSEC_Msk       (0x1U << RTC_SECCFGR_ALRBSEC_Pos)                   /*!< 0x00000002 */
#define RTC_SECCFGR_ALRBSEC           RTC_SECCFGR_ALRBSEC_Msk
#define RTC_SECCFGR_WUTSEC_Pos        (2U)
#define RTC_SECCFGR_WUTSEC_Msk        (0x1U << RTC_SECCFGR_WUTSEC_Pos)                    /*!< 0x00000004 */
#define RTC_SECCFGR_WUTSEC            RTC_SECCFGR_WUTSEC_Msk
#define RTC_SECCFGR_TSSEC_Pos         (3U)
#define RTC_SECCFGR_TSSEC_Msk         (0x1U << RTC_SECCFGR_TSSEC_Pos)                     /*!< 0x00000008 */
#define RTC_SECCFGR_TSSEC             RTC_SECCFGR_TSSEC_Msk
#define RTC_SECCFGR_CALSEC_Pos        (13U)
#define RTC_SECCFGR_CALSEC_Msk        (0x1U << RTC_SECCFGR_CALSEC_Pos)                    /*!< 0x00002000 */
#define RTC_SECCFGR_CALSEC            RTC_SECCFGR_CALSEC_Msk
#define RTC_SECCFGR_INITSEC_Pos       (14U)
#define RTC_SECCFGR_INITSEC_Msk       (0x1U << RTC_SECCFGR_INITSEC_Pos)                   /*!< 0x00004000 */
#define RTC_SECCFGR_INITSEC           RTC_SECCFGR_INITSEC_Msk
#define RTC_SECCFGR_SEC_Pos           (15U)
#define RTC_SECCFGR_SEC_Msk           (0x1U << RTC_SECCFGR_SEC_Pos)                       /*!< 0x00008000 */
#define RTC_SECCFGR_SEC               RTC_SECCFGR_SEC_Msk

/********************  Bits definition for RTC_WPR register  ******************/
#define RTC_WPR_KEY_Pos              (0U)
#define RTC_WPR_KEY_Msk              (0xFFU << RTC_WPR_KEY_Pos)                         /*!< 0x000000FF */
#define RTC_WPR_KEY                  RTC_WPR_KEY_Msk

/********************  Bits definition for RTC_CALR register  *****************/
#define RTC_CALR_CALM_Pos            (0U)
#define RTC_CALR_CALM_Msk            (0x1FFU << RTC_CALR_CALM_Pos)                      /*!< 0x000001FF */
#define RTC_CALR_CALM                RTC_CALR_CALM_Msk
#define RTC_CALR_CALM_0              (0x001U << RTC_CALR_CALM_Pos)                      /*!< 0x00000001 */
#define RTC_CALR_CALM_1              (0x002U << RTC_CALR_CALM_Pos)                      /*!< 0x00000002 */
#define RTC_CALR_CALM_2              (0x004U << RTC_CALR_CALM_Pos)                      /*!< 0x00000004 */
#define RTC_CALR_CALM_3              (0x008U << RTC_CALR_CALM_Pos)                      /*!< 0x00000008 */
#define RTC_CALR_CALM_4              (0x010U << RTC_CALR_CALM_Pos)                      /*!< 0x00000010 */
#define RTC_CALR_CALM_5              (0x020U << RTC_CALR_CALM_Pos)                      /*!< 0x00000020 */
#define RTC_CALR_CALM_6              (0x040U << RTC_CALR_CALM_Pos)                      /*!< 0x00000040 */
#define RTC_CALR_CALM_7              (0x080U << RTC_CALR_CALM_Pos)                      /*!< 0x00000080 */
#define RTC_CALR_CALM_8              (0x100U << RTC_CALR_CALM_Pos)                      /*!< 0x00000100 */
#define RTC_CALR_LPCAL_Pos           (12U)
#define RTC_CALR_LPCAL_Msk           (0x1U << RTC_CALR_LPCAL_Pos)                       /*!< 0x00001000 */
#define RTC_CALR_LPCAL               RTC_CALR_LPCAL_Msk
#define RTC_CALR_CALW16_Pos          (13U)
#define RTC_CALR_CALW16_Msk          (0x1U << RTC_CALR_CALW16_Pos)                      /*!< 0x00002000 */
#define RTC_CALR_CALW16              RTC_CALR_CALW16_Msk
#define RTC_CALR_CALW8_Pos           (14U)
#define RTC_CALR_CALW8_Msk           (0x1U << RTC_CALR_CALW8_Pos)                       /*!< 0x00004000 */
#define RTC_CALR_CALW8               RTC_CALR_CALW8_Msk
#define RTC_CALR_CALP_Pos            (15U)
#define RTC_CALR_CALP_Msk            (0x1U << RTC_CALR_CALP_Pos)                        /*!< 0x00008000 */
#define RTC_CALR_CALP                RTC_CALR_CALP_Msk

/********************  Bits definition for RTC_SHIFTR register  ***************/
#define RTC_SHIFTR_SUBFS_Pos         (0U)
#define RTC_SHIFTR_SUBFS_Msk         (0x7FFFU << RTC_SHIFTR_SUBFS_Pos)                  /*!< 0x00007FFF */
#define RTC_SHIFTR_SUBFS             RTC_SHIFTR_SUBFS_Msk
#define RTC_SHIFTR_ADD1S_Pos         (31U)
#define RTC_SHIFTR_ADD1S_Msk         (0x1U << RTC_SHIFTR_ADD1S_Pos)                     /*!< 0x80000000 */
#define RTC_SHIFTR_ADD1S             RTC_SHIFTR_ADD1S_Msk

/********************  Bits definition for RTC_TSTR register  *****************/
#define RTC_TSTR_SU_Pos              (0U)
#define RTC_TSTR_SU_Msk              (0xFU << RTC_TSTR_SU_Pos)                          /*!< 0x0000000F */
#define RTC_TSTR_SU                  RTC_TSTR_SU_Msk
#define RTC_TSTR_SU_0                (0x1U << RTC_TSTR_SU_Pos)                          /*!< 0x00000001 */
#define RTC_TSTR_SU_1                (0x2U << RTC_TSTR_SU_Pos)                          /*!< 0x00000002 */
#define RTC_TSTR_SU_2                (0x4U << RTC_TSTR_SU_Pos)                          /*!< 0x00000004 */
#define RTC_TSTR_SU_3                (0x8U << RTC_TSTR_SU_Pos)                          /*!< 0x00000008 */
#define RTC_TSTR_ST_Pos              (4U)
#define RTC_TSTR_ST_Msk              (0x7U << RTC_TSTR_ST_Pos)                          /*!< 0x00000070 */
#define RTC_TSTR_ST                  RTC_TSTR_ST_Msk
#define RTC_TSTR_ST_0                (0x1U << RTC_TSTR_ST_Pos)                          /*!< 0x00000010 */
#define RTC_TSTR_ST_1                (0x2U << RTC_TSTR_ST_Pos)                          /*!< 0x00000020 */
#define RTC_TSTR_ST_2                (0x4U << RTC_TSTR_ST_Pos)                          /*!< 0x00000040 */
#define RTC_TSTR_MNU_Pos             (8U)
#define RTC_TSTR_MNU_Msk             (0xFU << RTC_TSTR_MNU_Pos)                         /*!< 0x00000F00 */
#define RTC_TSTR_MNU                 RTC_TSTR_MNU_Msk
#define RTC_TSTR_MNU_0               (0x1U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000100 */
#define RTC_TSTR_MNU_1               (0x2U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000200 */
#define RTC_TSTR_MNU_2               (0x4U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000400 */
#define RTC_TSTR_MNU_3               (0x8U << RTC_TSTR_MNU_Pos)                         /*!< 0x00000800 */
#define RTC_TSTR_MNT_Pos             (12U)
#define RTC_TSTR_MNT_Msk             (0x7U << RTC_TSTR_MNT_Pos)                         /*!< 0x00007000 */
#define RTC_TSTR_MNT                 RTC_TSTR_MNT_Msk
#define RTC_TSTR_MNT_0               (0x1U << RTC_TSTR_MNT_Pos)                         /*!< 0x00001000 */
#define RTC_TSTR_MNT_1               (0x2U << RTC_TSTR_MNT_Pos)                         /*!< 0x00002000 */
#define RTC_TSTR_MNT_2               (0x4U << RTC_TSTR_MNT_Pos)                         /*!< 0x00004000 */
#define RTC_TSTR_HU_Pos              (16U)
#define RTC_TSTR_HU_Msk              (0xFU << RTC_TSTR_HU_Pos)                          /*!< 0x000F0000 */
#define RTC_TSTR_HU                  RTC_TSTR_HU_Msk
#define RTC_TSTR_HU_0                (0x1U << RTC_TSTR_HU_Pos)                          /*!< 0x00010000 */
#define RTC_TSTR_HU_1                (0x2U << RTC_TSTR_HU_Pos)                          /*!< 0x00020000 */
#define RTC_TSTR_HU_2                (0x4U << RTC_TSTR_HU_Pos)                          /*!< 0x00040000 */
#define RTC_TSTR_HU_3                (0x8U << RTC_TSTR_HU_Pos)                          /*!< 0x00080000 */
#define RTC_TSTR_HT_Pos              (20U)
#define RTC_TSTR_HT_Msk              (0x3U << RTC_TSTR_HT_Pos)                          /*!< 0x00300000 */
#define RTC_TSTR_HT                  RTC_TSTR_HT_Msk
#define RTC_TSTR_HT_0                (0x1U << RTC_TSTR_HT_Pos)                          /*!< 0x00100000 */
#define RTC_TSTR_HT_1                (0x2U << RTC_TSTR_HT_Pos)                          /*!< 0x00200000 */
#define RTC_TSTR_PM_Pos              (22U)
#define RTC_TSTR_PM_Msk              (0x1U << RTC_TSTR_PM_Pos)                          /*!< 0x00400000 */
#define RTC_TSTR_PM                  RTC_TSTR_PM_Msk

/********************  Bits definition for RTC_TSDR register  *****************/
#define RTC_TSDR_DU_Pos              (0U)
#define RTC_TSDR_DU_Msk              (0xFU << RTC_TSDR_DU_Pos)                          /*!< 0x0000000F */
#define RTC_TSDR_DU                  RTC_TSDR_DU_Msk
#define RTC_TSDR_DU_0                (0x1U << RTC_TSDR_DU_Pos)                          /*!< 0x00000001 */
#define RTC_TSDR_DU_1                (0x2U << RTC_TSDR_DU_Pos)                          /*!< 0x00000002 */
#define RTC_TSDR_DU_2                (0x4U << RTC_TSDR_DU_Pos)                          /*!< 0x00000004 */
#define RTC_TSDR_DU_3                (0x8U << RTC_TSDR_DU_Pos)                          /*!< 0x00000008 */
#define RTC_TSDR_DT_Pos              (4U)
#define RTC_TSDR_DT_Msk              (0x3U << RTC_TSDR_DT_Pos)                          /*!< 0x00000030 */
#define RTC_TSDR_DT                  RTC_TSDR_DT_Msk
#define RTC_TSDR_DT_0                (0x1U << RTC_TSDR_DT_Pos)                          /*!< 0x00000010 */
#define RTC_TSDR_DT_1                (0x2U << RTC_TSDR_DT_Pos)                          /*!< 0x00000020 */
#define RTC_TSDR_MU_Pos              (8U)
#define RTC_TSDR_MU_Msk              (0xFU << RTC_TSDR_MU_Pos)                          /*!< 0x00000F00 */
#define RTC_TSDR_MU                  RTC_TSDR_MU_Msk
#define RTC_TSDR_MU_0                (0x1U << RTC_TSDR_MU_Pos)                          /*!< 0x00000100 */
#define RTC_TSDR_MU_1                (0x2U << RTC_TSDR_MU_Pos)                          /*!< 0x00000200 */
#define RTC_TSDR_MU_2                (0x4U << RTC_TSDR_MU_Pos)                          /*!< 0x00000400 */
#define RTC_TSDR_MU_3                (0x8U << RTC_TSDR_MU_Pos)                          /*!< 0x00000800 */
#define RTC_TSDR_MT_Pos              (12U)
#define RTC_TSDR_MT_Msk              (0x1U << RTC_TSDR_MT_Pos)                          /*!< 0x00001000 */
#define RTC_TSDR_MT                  RTC_TSDR_MT_Msk
#define RTC_TSDR_WDU_Pos             (13U)
#define RTC_TSDR_WDU_Msk             (0x7U << RTC_TSDR_WDU_Pos)                         /*!< 0x0000E000 */
#define RTC_TSDR_WDU                 RTC_TSDR_WDU_Msk
#define RTC_TSDR_WDU_0               (0x1U << RTC_TSDR_WDU_Pos)                         /*!< 0x00002000 */
#define RTC_TSDR_WDU_1               (0x2U << RTC_TSDR_WDU_Pos)                         /*!< 0x00004000 */
#define RTC_TSDR_WDU_2               (0x4U << RTC_TSDR_WDU_Pos)                         /*!< 0x00008000 */

/********************  Bits definition for RTC_TSSSR register  ****************/
#define RTC_TSSSR_SS_Pos             (0U)
#define RTC_TSSSR_SS_Msk             (0xFFFFFFFFUL << RTC_TSSSR_SS_Pos)            /*!< 0xFFFFFFFF */
#define RTC_TSSSR_SS                 RTC_TSSSR_SS_Msk                             /*!< rtc timestamp sub second > */

/********************  Bits definition for RTC_ALRMAR register  ***************/
#define RTC_ALRMAR_SU_Pos            (0U)
#define RTC_ALRMAR_SU_Msk            (0xFU << RTC_ALRMAR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMAR_SU                RTC_ALRMAR_SU_Msk
#define RTC_ALRMAR_SU_0              (0x1U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMAR_SU_1              (0x2U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMAR_SU_2              (0x4U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMAR_SU_3              (0x8U << RTC_ALRMAR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMAR_ST_Pos            (4U)
#define RTC_ALRMAR_ST_Msk            (0x7U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMAR_ST                RTC_ALRMAR_ST_Msk
#define RTC_ALRMAR_ST_0              (0x1U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMAR_ST_1              (0x2U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMAR_ST_2              (0x4U << RTC_ALRMAR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMAR_MSK1_Pos          (7U)
#define RTC_ALRMAR_MSK1_Msk          (0x1U << RTC_ALRMAR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMAR_MSK1              RTC_ALRMAR_MSK1_Msk
#define RTC_ALRMAR_MNU_Pos           (8U)
#define RTC_ALRMAR_MNU_Msk           (0xFU << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMAR_MNU               RTC_ALRMAR_MNU_Msk
#define RTC_ALRMAR_MNU_0             (0x1U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMAR_MNU_1             (0x2U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMAR_MNU_2             (0x4U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMAR_MNU_3             (0x8U << RTC_ALRMAR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMAR_MNT_Pos           (12U)
#define RTC_ALRMAR_MNT_Msk           (0x7U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMAR_MNT               RTC_ALRMAR_MNT_Msk
#define RTC_ALRMAR_MNT_0             (0x1U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMAR_MNT_1             (0x2U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMAR_MNT_2             (0x4U << RTC_ALRMAR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMAR_MSK2_Pos          (15U)
#define RTC_ALRMAR_MSK2_Msk          (0x1U << RTC_ALRMAR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMAR_MSK2              RTC_ALRMAR_MSK2_Msk
#define RTC_ALRMAR_HU_Pos            (16U)
#define RTC_ALRMAR_HU_Msk            (0xFU << RTC_ALRMAR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMAR_HU                RTC_ALRMAR_HU_Msk
#define RTC_ALRMAR_HU_0              (0x1U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMAR_HU_1              (0x2U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMAR_HU_2              (0x4U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMAR_HU_3              (0x8U << RTC_ALRMAR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMAR_HT_Pos            (20U)
#define RTC_ALRMAR_HT_Msk            (0x3U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMAR_HT                RTC_ALRMAR_HT_Msk
#define RTC_ALRMAR_HT_0              (0x1U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMAR_HT_1              (0x2U << RTC_ALRMAR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMAR_PM_Pos            (22U)
#define RTC_ALRMAR_PM_Msk            (0x1U << RTC_ALRMAR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMAR_PM                RTC_ALRMAR_PM_Msk
#define RTC_ALRMAR_MSK3_Pos          (23U)
#define RTC_ALRMAR_MSK3_Msk          (0x1U << RTC_ALRMAR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMAR_MSK3              RTC_ALRMAR_MSK3_Msk
#define RTC_ALRMAR_DU_Pos            (24U)
#define RTC_ALRMAR_DU_Msk            (0xFU << RTC_ALRMAR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMAR_DU                RTC_ALRMAR_DU_Msk
#define RTC_ALRMAR_DU_0              (0x1U << RTC_ALRMAR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMAR_DU_1              (0x2U << RTC_ALRMAR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMAR_DU_2              (0x4U << RTC_ALRMAR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMAR_DU_3              (0x8U << RTC_ALRMAR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMAR_DT_Pos            (28U)
#define RTC_ALRMAR_DT_Msk            (0x3U << RTC_ALRMAR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMAR_DT                RTC_ALRMAR_DT_Msk
#define RTC_ALRMAR_DT_0              (0x1U << RTC_ALRMAR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMAR_DT_1              (0x2U << RTC_ALRMAR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMAR_WDSEL_Pos         (30U)
#define RTC_ALRMAR_WDSEL_Msk         (0x1U << RTC_ALRMAR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMAR_WDSEL             RTC_ALRMAR_WDSEL_Msk
#define RTC_ALRMAR_MSK4_Pos          (31U)
#define RTC_ALRMAR_MSK4_Msk          (0x1U << RTC_ALRMAR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMAR_MSK4              RTC_ALRMAR_MSK4_Msk

/********************  Bits definition for RTC_ALRMASSR register  *************/
#define RTC_ALRMASSR_SS_Pos          (0U)
#define RTC_ALRMASSR_SS_Msk          (0x7FFFU << RTC_ALRMASSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMASSR_SS              RTC_ALRMASSR_SS_Msk
#define RTC_ALRMASSR_MASKSS_Pos      (24U)
#define RTC_ALRMASSR_MASKSS_Msk      (0x3FU << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMASSR_MASKSS          RTC_ALRMASSR_MASKSS_Msk
#define RTC_ALRMASSR_MASKSS_0        (0x1U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMASSR_MASKSS_1        (0x2U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMASSR_MASKSS_2        (0x4U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMASSR_MASKSS_3        (0x8U << RTC_ALRMASSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_4        (0x10U << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_MASKSS_5        (0x20U << RTC_ALRMASSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMASSR_SSCLR_Pos       (31U)
#define RTC_ALRMASSR_SSCLR_Msk       (0x1UL << RTC_ALRMASSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMASSR_SSCLR           RTC_ALRMASSR_SSCLR_Msk

/********************  Bits definition for RTC_ALRMBR register  ***************/
#define RTC_ALRMBR_SU_Pos            (0U)
#define RTC_ALRMBR_SU_Msk            (0xFU << RTC_ALRMBR_SU_Pos)                        /*!< 0x0000000F */
#define RTC_ALRMBR_SU                RTC_ALRMBR_SU_Msk
#define RTC_ALRMBR_SU_0              (0x1U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000001 */
#define RTC_ALRMBR_SU_1              (0x2U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000002 */
#define RTC_ALRMBR_SU_2              (0x4U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000004 */
#define RTC_ALRMBR_SU_3              (0x8U << RTC_ALRMBR_SU_Pos)                        /*!< 0x00000008 */
#define RTC_ALRMBR_ST_Pos            (4U)
#define RTC_ALRMBR_ST_Msk            (0x7U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000070 */
#define RTC_ALRMBR_ST                RTC_ALRMBR_ST_Msk
#define RTC_ALRMBR_ST_0              (0x1U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000010 */
#define RTC_ALRMBR_ST_1              (0x2U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000020 */
#define RTC_ALRMBR_ST_2              (0x4U << RTC_ALRMBR_ST_Pos)                        /*!< 0x00000040 */
#define RTC_ALRMBR_MSK1_Pos          (7U)
#define RTC_ALRMBR_MSK1_Msk          (0x1U << RTC_ALRMBR_MSK1_Pos)                      /*!< 0x00000080 */
#define RTC_ALRMBR_MSK1              RTC_ALRMBR_MSK1_Msk
#define RTC_ALRMBR_MNU_Pos           (8U)
#define RTC_ALRMBR_MNU_Msk           (0xFU << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000F00 */
#define RTC_ALRMBR_MNU               RTC_ALRMBR_MNU_Msk
#define RTC_ALRMBR_MNU_0             (0x1U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000100 */
#define RTC_ALRMBR_MNU_1             (0x2U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000200 */
#define RTC_ALRMBR_MNU_2             (0x4U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000400 */
#define RTC_ALRMBR_MNU_3             (0x8U << RTC_ALRMBR_MNU_Pos)                       /*!< 0x00000800 */
#define RTC_ALRMBR_MNT_Pos           (12U)
#define RTC_ALRMBR_MNT_Msk           (0x7U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00007000 */
#define RTC_ALRMBR_MNT               RTC_ALRMBR_MNT_Msk
#define RTC_ALRMBR_MNT_0             (0x1U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00001000 */
#define RTC_ALRMBR_MNT_1             (0x2U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00002000 */
#define RTC_ALRMBR_MNT_2             (0x4U << RTC_ALRMBR_MNT_Pos)                       /*!< 0x00004000 */
#define RTC_ALRMBR_MSK2_Pos          (15U)
#define RTC_ALRMBR_MSK2_Msk          (0x1U << RTC_ALRMBR_MSK2_Pos)                      /*!< 0x00008000 */
#define RTC_ALRMBR_MSK2              RTC_ALRMBR_MSK2_Msk
#define RTC_ALRMBR_HU_Pos            (16U)
#define RTC_ALRMBR_HU_Msk            (0xFU << RTC_ALRMBR_HU_Pos)                        /*!< 0x000F0000 */
#define RTC_ALRMBR_HU                RTC_ALRMBR_HU_Msk
#define RTC_ALRMBR_HU_0              (0x1U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00010000 */
#define RTC_ALRMBR_HU_1              (0x2U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00020000 */
#define RTC_ALRMBR_HU_2              (0x4U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00040000 */
#define RTC_ALRMBR_HU_3              (0x8U << RTC_ALRMBR_HU_Pos)                        /*!< 0x00080000 */
#define RTC_ALRMBR_HT_Pos            (20U)
#define RTC_ALRMBR_HT_Msk            (0x3U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00300000 */
#define RTC_ALRMBR_HT                RTC_ALRMBR_HT_Msk
#define RTC_ALRMBR_HT_0              (0x1U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00100000 */
#define RTC_ALRMBR_HT_1              (0x2U << RTC_ALRMBR_HT_Pos)                        /*!< 0x00200000 */
#define RTC_ALRMBR_PM_Pos            (22U)
#define RTC_ALRMBR_PM_Msk            (0x1U << RTC_ALRMBR_PM_Pos)                        /*!< 0x00400000 */
#define RTC_ALRMBR_PM                RTC_ALRMBR_PM_Msk
#define RTC_ALRMBR_MSK3_Pos          (23U)
#define RTC_ALRMBR_MSK3_Msk          (0x1U << RTC_ALRMBR_MSK3_Pos)                      /*!< 0x00800000 */
#define RTC_ALRMBR_MSK3              RTC_ALRMBR_MSK3_Msk
#define RTC_ALRMBR_DU_Pos            (24U)
#define RTC_ALRMBR_DU_Msk            (0xFU << RTC_ALRMBR_DU_Pos)                        /*!< 0x0F000000 */
#define RTC_ALRMBR_DU                RTC_ALRMBR_DU_Msk
#define RTC_ALRMBR_DU_0              (0x1U << RTC_ALRMBR_DU_Pos)                        /*!< 0x01000000 */
#define RTC_ALRMBR_DU_1              (0x2U << RTC_ALRMBR_DU_Pos)                        /*!< 0x02000000 */
#define RTC_ALRMBR_DU_2              (0x4U << RTC_ALRMBR_DU_Pos)                        /*!< 0x04000000 */
#define RTC_ALRMBR_DU_3              (0x8U << RTC_ALRMBR_DU_Pos)                        /*!< 0x08000000 */
#define RTC_ALRMBR_DT_Pos            (28U)
#define RTC_ALRMBR_DT_Msk            (0x3U << RTC_ALRMBR_DT_Pos)                        /*!< 0x30000000 */
#define RTC_ALRMBR_DT                RTC_ALRMBR_DT_Msk
#define RTC_ALRMBR_DT_0              (0x1U << RTC_ALRMBR_DT_Pos)                        /*!< 0x10000000 */
#define RTC_ALRMBR_DT_1              (0x2U << RTC_ALRMBR_DT_Pos)                        /*!< 0x20000000 */
#define RTC_ALRMBR_WDSEL_Pos         (30U)
#define RTC_ALRMBR_WDSEL_Msk         (0x1U << RTC_ALRMBR_WDSEL_Pos)                     /*!< 0x40000000 */
#define RTC_ALRMBR_WDSEL             RTC_ALRMBR_WDSEL_Msk
#define RTC_ALRMBR_MSK4_Pos          (31U)
#define RTC_ALRMBR_MSK4_Msk          (0x1U << RTC_ALRMBR_MSK4_Pos)                      /*!< 0x80000000 */
#define RTC_ALRMBR_MSK4              RTC_ALRMBR_MSK4_Msk

/********************  Bits definition for RTC_ALRMBSSR register  *************/
#define RTC_ALRMBSSR_SS_Pos          (0U)
#define RTC_ALRMBSSR_SS_Msk          (0x7FFFU << RTC_ALRMBSSR_SS_Pos)                   /*!< 0x00007FFF */
#define RTC_ALRMBSSR_SS              RTC_ALRMBSSR_SS_Msk
#define RTC_ALRMBSSR_MASKSS_Pos      (24U)
#define RTC_ALRMBSSR_MASKSS_Msk      (0x3FU << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x3F000000 */
#define RTC_ALRMBSSR_MASKSS          RTC_ALRMBSSR_MASKSS_Msk
#define RTC_ALRMBSSR_MASKSS_0        (0x1U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x01000000 */
#define RTC_ALRMBSSR_MASKSS_1        (0x2U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x02000000 */
#define RTC_ALRMBSSR_MASKSS_2        (0x4U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x04000000 */
#define RTC_ALRMBSSR_MASKSS_3        (0x8U << RTC_ALRMBSSR_MASKSS_Pos)                  /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_4        (0x10U << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_MASKSS_5        (0x20U << RTC_ALRMBSSR_MASKSS_Pos)                 /*!< 0x08000000 */
#define RTC_ALRMBSSR_SSCLR_Pos       (31U)
#define RTC_ALRMBSSR_SSCLR_Msk       (0x1UL << RTC_ALRMBSSR_SSCLR_Pos)                  /*!< 0x80000000 */
#define RTC_ALRMBSSR_SSCLR           RTC_ALRMBSSR_SSCLR_Msk

/********************  Bits definition for RTC_SR register  *******************/
#define RTC_SR_ALRAF_Pos             (0U)
#define RTC_SR_ALRAF_Msk             (0x1U << RTC_SR_ALRAF_Pos)                         /*!< 0x00000001 */
#define RTC_SR_ALRAF                 RTC_SR_ALRAF_Msk
#define RTC_SR_ALRBF_Pos             (1U)
#define RTC_SR_ALRBF_Msk             (0x1U << RTC_SR_ALRBF_Pos)                         /*!< 0x00000002 */
#define RTC_SR_ALRBF                 RTC_SR_ALRBF_Msk
#define RTC_SR_WUTF_Pos              (2U)
#define RTC_SR_WUTF_Msk              (0x1U << RTC_SR_WUTF_Pos)                          /*!< 0x00000004 */
#define RTC_SR_WUTF                  RTC_SR_WUTF_Msk
#define RTC_SR_TSF_Pos               (3U)
#define RTC_SR_TSF_Msk               (0x1U << RTC_SR_TSF_Pos)                           /*!< 0x00000008 */
#define RTC_SR_TSF                   RTC_SR_TSF_Msk
#define RTC_SR_TSOVF_Pos             (4U)
#define RTC_SR_TSOVF_Msk             (0x1U << RTC_SR_TSOVF_Pos)                         /*!< 0x00000010 */
#define RTC_SR_TSOVF                 RTC_SR_TSOVF_Msk
#define RTC_SR_ITSF_Pos              (5U)
#define RTC_SR_ITSF_Msk              (0x1U << RTC_SR_ITSF_Pos)                          /*!< 0x00000020 */
#define RTC_SR_ITSF                  RTC_SR_ITSF_Msk
#define RTC_SR_SSRUF_Pos             (6U)
#define RTC_SR_SSRUF_Msk             (0x1UL << RTC_SR_SSRUF_Pos)                       /*!< 0x00000040 */
#define RTC_SR_SSRUF                 RTC_SR_SSRUF_Msk

/********************  Bits definition for RTC_MISR register  *****************/
#define RTC_MISR_ALRAMF_Pos          (0U)
#define RTC_MISR_ALRAMF_Msk          (0x1U << RTC_MISR_ALRAMF_Pos)                      /*!< 0x00000001 */
#define RTC_MISR_ALRAMF              RTC_MISR_ALRAMF_Msk
#define RTC_MISR_ALRBMF_Pos          (1U)
#define RTC_MISR_ALRBMF_Msk          (0x1U << RTC_MISR_ALRBMF_Pos)                      /*!< 0x00000002 */
#define RTC_MISR_ALRBMF              RTC_MISR_ALRBMF_Msk
#define RTC_MISR_WUTMF_Pos           (2U)
#define RTC_MISR_WUTMF_Msk           (0x1U << RTC_MISR_WUTMF_Pos)                       /*!< 0x00000004 */
#define RTC_MISR_WUTMF               RTC_MISR_WUTMF_Msk
#define RTC_MISR_TSMF_Pos            (3U)
#define RTC_MISR_TSMF_Msk            (0x1U << RTC_MISR_TSMF_Pos)                        /*!< 0x00000008 */
#define RTC_MISR_TSMF                RTC_MISR_TSMF_Msk
#define RTC_MISR_TSOVMF_Pos          (4U)
#define RTC_MISR_TSOVMF_Msk          (0x1U << RTC_MISR_TSOVMF_Pos)                      /*!< 0x00000010 */
#define RTC_MISR_TSOVMF              RTC_MISR_TSOVMF_Msk
#define RTC_MISR_ITSMF_Pos           (5U)
#define RTC_MISR_ITSMF_Msk           (0x1U << RTC_MISR_ITSMF_Pos)                       /*!< 0x00000020 */
#define RTC_MISR_ITSMF               RTC_MISR_ITSMF_Msk
#define RTC_MISR_SSRUMF_Pos          (6U)
#define RTC_MISR_SSRUMF_Msk          (0x1UL << RTC_MISR_SSRUMF_Pos)            /*!< 0x00000040 */
#define RTC_MISR_SSRUMF              RTC_MISR_SSRUMF_Msk

/********************  Bits definition for RTC_SMISR register  *****************/
#define RTC_SMISR_ALRAMF_Pos         (0U)
#define RTC_SMISR_ALRAMF_Msk         (0x1U << RTC_SMISR_ALRAMF_Pos)                     /*!< 0x00000001 */
#define RTC_SMISR_ALRAMF             RTC_SMISR_ALRAMF_Msk
#define RTC_SMISR_ALRBMF_Pos         (1U)
#define RTC_SMISR_ALRBMF_Msk         (0x1U << RTC_SMISR_ALRBMF_Pos)                     /*!< 0x00000002 */
#define RTC_SMISR_ALRBMF             RTC_SMISR_ALRBMF_Msk
#define RTC_SMISR_WUTMF_Pos          (2U)
#define RTC_SMISR_WUTMF_Msk          (0x1U << RTC_SMISR_WUTMF_Pos)                      /*!< 0x00000004 */
#define RTC_SMISR_WUTMF              RTC_SMISR_WUTMF_Msk
#define RTC_SMISR_TSMF_Pos           (3U)
#define RTC_SMISR_TSMF_Msk           (0x1U << RTC_SMISR_TSMF_Pos)                       /*!< 0x00000008 */
#define RTC_SMISR_TSMF               RTC_SMISR_TSMF_Msk
#define RTC_SMISR_TSOVMF_Pos         (4U)
#define RTC_SMISR_TSOVMF_Msk         (0x1U << RTC_SMISR_TSOVMF_Pos)                     /*!< 0x00000010 */
#define RTC_SMISR_TSOVMF             RTC_SMISR_TSOVMF_Msk
#define RTC_SMISR_ITSMF_Pos          (5U)
#define RTC_SMISR_ITSMF_Msk          (0x1U << RTC_SMISR_ITSMF_Pos)                      /*!< 0x00000020 */
#define RTC_SMISR_ITSMF              RTC_SMISR_ITSMF_Msk
#define RTC_SMISR_SSRUMF_Pos         (6U)
#define RTC_SMISR_SSRUMF_Msk         (0x1UL << RTC_SMISR_SSRUMF_Pos)                   /*!< 0x00000040 */
#define RTC_SMISR_SSRUMF             RTC_SMISR_SSRUMF_Msk

/********************  Bits definition for RTC_SCR register  ******************/
#define RTC_SCR_CALRAF_Pos           (0U)
#define RTC_SCR_CALRAF_Msk           (0x1U << RTC_SCR_CALRAF_Pos)                       /*!< 0x00000001 */
#define RTC_SCR_CALRAF               RTC_SCR_CALRAF_Msk
#define RTC_SCR_CALRBF_Pos           (1U)
#define RTC_SCR_CALRBF_Msk           (0x1U << RTC_SCR_CALRBF_Pos)                       /*!< 0x00000002 */
#define RTC_SCR_CALRBF               RTC_SCR_CALRBF_Msk
#define RTC_SCR_CWUTF_Pos            (2U)
#define RTC_SCR_CWUTF_Msk            (0x1U << RTC_SCR_CWUTF_Pos)                        /*!< 0x00000004 */
#define RTC_SCR_CWUTF                RTC_SCR_CWUTF_Msk
#define RTC_SCR_CTSF_Pos             (3U)
#define RTC_SCR_CTSF_Msk             (0x1U << RTC_SCR_CTSF_Pos)                         /*!< 0x00000008 */
#define RTC_SCR_CTSF                 RTC_SCR_CTSF_Msk
#define RTC_SCR_CTSOVF_Pos           (4U)
#define RTC_SCR_CTSOVF_Msk           (0x1U << RTC_SCR_CTSOVF_Pos)                       /*!< 0x00000010 */
#define RTC_SCR_CTSOVF               RTC_SCR_CTSOVF_Msk
#define RTC_SCR_CITSF_Pos            (5U)
#define RTC_SCR_CITSF_Msk            (0x1U << RTC_SCR_CITSF_Pos)                        /*!< 0x00000020 */
#define RTC_SCR_CITSF                RTC_SCR_CITSF_Msk
#define RTC_SCR_CSSRUF_Pos           (6U)
#define RTC_SCR_CSSRUF_Msk           (0x1UL << RTC_SCR_CSSRUF_Pos)                      /*!< 0x00000040 */
#define RTC_SCR_CSSRUF               RTC_SCR_CSSRUF_Msk

/*******************  Bits definition for RTC_CFGR register  ******************/
#define RTC_CFGR_OUT2_RMP_Pos        (0U)
#define RTC_CFGR_OUT2_RMP_Msk        (0x1U << RTC_CFGR_OUT2_RMP_Pos)                    /*!< 0x00000001 */
#define RTC_CFGR_OUT2_RMP            RTC_CFGR_OUT2_RMP_Msk

/********************  Bits definition for RTC_ALRABINR register  ******************/
#define RTC_ALRABINR_SS_Pos          (0U)
#define RTC_ALRABINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRABINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRABINR_SS              RTC_ALRABINR_SS_Msk

/********************  Bits definition for RTC_ALRBBINR register  ******************/
#define RTC_ALRBBINR_SS_Pos          (0U)
#define RTC_ALRBBINR_SS_Msk          (0xFFFFFFFFUL << RTC_ALRBBINR_SS_Pos)              /*!< 0xFFFFFFFF */
#define RTC_ALRBBINR_SS              RTC_ALRBBINR_SS_Msk

/********************  Bits definition for RTC_RCIDCFGR register  ******************/
#define RTC_RCIDCFGR_CFEN_Pos          (0U)
#define RTC_RCIDCFGR_CFEN_Msk          (0x1UL << RTC_RCIDCFGR_CFEN_Pos)                 /*!< 0xFFFFFFFF */
#define RTC_RCIDCFGR_CFEN              RTC_RCIDCFGR_CFEN_Msk
#define RTC_RCIDCFGR_CID_Pos           (4U)
#define RTC_RCIDCFGR_CID_Msk           (0xFUL << RTC_RCIDCFGR_CID_Pos)                  /*!< 0x000000F0 */
#define RTC_RCIDCFGR_CID               RTC_RCIDCFGR_CID_Msk

/********************  Bits definition for RTC_HWCFGR register  ******************/
#define RTC_HWCFGR_ALARMB_Pos          (0U)
#define RTC_HWCFGR_ALARMB_Msk          (0xFUL << RTC_HWCFGR_ALARMB_Pos)                 /*!< 0x0000000F */
#define RTC_HWCFGR_ALARMB              RTC_HWCFGR_ALARMB_Msk
#define RTC_HWCFGR_WAKEUP_Pos          (4U)
#define RTC_HWCFGR_WAKEUP_Msk          (0xFUL << RTC_HWCFGR_WAKEUP_Pos)                 /*!< 0x000000F0 */
#define RTC_HWCFGR_WAKEUP              RTC_HWCFGR_WAKEUP_Msk
#define RTC_HWCFGR_SMOOTH_CALIB_Pos    (8U)
#define RTC_HWCFGR_SMOOTH_CALIB_Msk    (0xFUL << RTC_HWCFGR_SMOOTH_CALIB_Pos)           /*!< 0x00000F00 */
#define RTC_HWCFGR_SMOOTH_CALIB        RTC_HWCFGR_SMOOTH_CALIB_Msk
#define RTC_HWCFGR_TIMESTAMP_Pos       (12U)
#define RTC_HWCFGR_TIMESTAMP_Msk       (0xFUL << RTC_HWCFGR_TIMESTAMP_Pos)              /*!< 0x00000F000 */
#define RTC_HWCFGR_TIMESTAMP           RTC_HWCFGR_TIMESTAMP_Msk
#define RTC_HWCFGR_OPTIONREG_OUT_Pos   (16U)
#define RTC_HWCFGR_OPTIONREG_OUT_Msk   (0xFFUL << RTC_HWCFGR_OPTIONREG_OUT_Pos)         /*!< 0x00FF0000 */
#define RTC_HWCFGR_OPTIONREG_OUT       RTC_HWCFGR_OPTIONREG_OUT_Msk
#define RTC_HWCFGR_TRUST_ZONE_Pos      (24U)
#define RTC_HWCFGR_TRUST_ZONE_Msk      (0xFUL << RTC_HWCFGR_TRUST_ZONE_Pos)             /*!< 0x0F000000 */
#define RTC_HWCFGR_TRUST_ZONE          RTC_HWCFGR_TRUST_ZONE_Msk
#define RTC_HWCFGR_RIF_Pos             (24U)
#define RTC_HWCFGR_RIF_Msk             (0xFUL << RTC_HWCFGR_RIF_Pos)                    /*!< 0xF0000000 */
#define RTC_HWCFGR_RIF                 RTC_HWCFGR_RIF_Msk

/*******************  Bits definition for RTC_VERR register  **************/
#define RTC_VERR_MINREV_Pos            (0U)
#define RTC_VERR_MINREV_Msk            (0x4UL << RTC_VERR_MINREV_Pos)                   /*!< 0x0000000F */
#define RTC_VERR_MINREV                RTC_VERR_MINREV_Msk                              /*!< RTC Minor version */
#define RTC_VERR_MAJREV_Pos            (4U)
#define RTC_VERR_MAJREV_Msk            (0x4UL << RTC_VERR_MAJREV_Pos)                   /*!< 0x000000F0 */
#define RTC_VERR_MAJREV                RTC_VERR_MAJREV_Msk                              /*!< RTC Major version */

/*******************  Bits definition for RTC_IPIDR register  **************/
#define RTC_IPIDR_ID_Pos               (0U)
#define RTC_IPIDR_ID_Msk               (0xFFFFFFFFUL << RTC_IPIDR_ID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_IPIDR_ID                   RTC_IPIDR_ID_Msk                                 /*!< RTC ID */

/*******************  Bits definition for RTC_SIDR register  **************/
#define RTC_SIDR_SID_Pos               (0U)
#define RTC_SIDR_SID_Msk               (0xFFFFFFFFUL << RTC_SIDR_SID_Pos)               /*!< 0xFFFFFFFF */
#define RTC_SIDR_SID                   RTC_SIDR_SID_Msk                                 /*!< RTC Size ID */


/**********************************************************************************/
/*                                                                                */
/*     Serial Peripheral Interface and Integrated Interchip Sound  (SPI/I2S)      */
/*                                                                                */
/**********************************************************************************/
/********************  Bits definition for SPI_CR1 register      ******************/
#define SPI_CR1_SPE_Pos                     (0U)
#define SPI_CR1_SPE_Msk                     (0x1UL << SPI_CR1_SPE_Pos)              /*!< 0x00000001 */
#define SPI_CR1_SPE                         SPI_CR1_SPE_Msk                         /*!<Serial Peripheral Enable */
#define SPI_CR1_MASRX_Pos                   (8U)
#define SPI_CR1_MASRX_Msk                   (0x1UL << SPI_CR1_MASRX_Pos)            /*!< 0x00000100 */
#define SPI_CR1_MASRX                       SPI_CR1_MASRX_Msk                       /*!<Master automatic suspension in Receive mode */
#define SPI_CR1_CSTART_Pos                  (9U)
#define SPI_CR1_CSTART_Msk                  (0x1UL << SPI_CR1_CSTART_Pos)           /*!< 0x00000200 */
#define SPI_CR1_CSTART                      SPI_CR1_CSTART_Msk                      /*!<Master transfer start  */
#define SPI_CR1_CSUSP_Pos                   (10U)
#define SPI_CR1_CSUSP_Msk                   (0x1UL << SPI_CR1_CSUSP_Pos)            /*!< 0x00000400 */
#define SPI_CR1_CSUSP                       SPI_CR1_CSUSP_Msk                       /*!<Master SUSPend request */
#define SPI_CR1_HDDIR_Pos                   (11U)
#define SPI_CR1_HDDIR_Msk                   (0x1UL << SPI_CR1_HDDIR_Pos)            /*!< 0x00000800 */
#define SPI_CR1_HDDIR                       SPI_CR1_HDDIR_Msk                       /*!<Rx/Tx direction at Half-duplex mode */
#define SPI_CR1_SSI_Pos                     (12U)
#define SPI_CR1_SSI_Msk                     (0x1UL << SPI_CR1_SSI_Pos)              /*!< 0x00001000 */
#define SPI_CR1_SSI                         SPI_CR1_SSI_Msk                         /*!<Internal SS signal input level */
#define SPI_CR1_CRC33_17_Pos                (13U)
#define SPI_CR1_CRC33_17_Msk                (0x1UL << SPI_CR1_CRC33_17_Pos)         /*!< 0x00002000 */
#define SPI_CR1_CRC33_17                    SPI_CR1_CRC33_17_Msk                    /*!<32-bit CRC polynomial configuration */
#define SPI_CR1_RCRCINI_Pos                 (14U)
#define SPI_CR1_RCRCINI_Msk                 (0x1UL << SPI_CR1_RCRCINI_Pos)          /*!< 0x00004000 */
#define SPI_CR1_RCRCINI                     SPI_CR1_RCRCINI_Msk                     /*!<CRC calculation initialization pattern control for receiver */
#define SPI_CR1_TCRCINI_Pos                 (15U)
#define SPI_CR1_TCRCINI_Msk                 (0x1UL << SPI_CR1_TCRCINI_Pos)          /*!< 0x00008000 */
#define SPI_CR1_TCRCINI                     SPI_CR1_TCRCINI_Msk                     /*!<CRC calculation initialization pattern control for transmitter */
#define SPI_CR1_IOLOCK_Pos                  (16U)
#define SPI_CR1_IOLOCK_Msk                  (0x1UL << SPI_CR1_IOLOCK_Pos)           /*!< 0x00010000 */
#define SPI_CR1_IOLOCK                      SPI_CR1_IOLOCK_Msk                      /*!<Locking the AF configuration of associated IOs */

/********************  Bits definition for SPI_CR2 register      ******************/
#define SPI_CR2_TSIZE_Pos                   (0U)
#define SPI_CR2_TSIZE_Msk                   (0xFFFFUL << SPI_CR2_TSIZE_Pos)         /*!< 0x0000FFFF */
#define SPI_CR2_TSIZE                       SPI_CR2_TSIZE_Msk                       /*!<Number of data at current transfer */

/********************  Bits definition for SPI_CFG1 register     ******************/
#define SPI_CFG1_DSIZE_Pos                  (0U)
#define SPI_CFG1_DSIZE_Msk                  (0x1FUL << SPI_CFG1_DSIZE_Pos)          /*!< 0x0000001F */
#define SPI_CFG1_DSIZE                      SPI_CFG1_DSIZE_Msk                      /*!<DSIZE[4:0]: Bits number in single SPI data frame */
#define SPI_CFG1_DSIZE_0                    (0x01UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000001 */
#define SPI_CFG1_DSIZE_1                    (0x02UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000002 */
#define SPI_CFG1_DSIZE_2                    (0x04UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000004 */
#define SPI_CFG1_DSIZE_3                    (0x08UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000008 */
#define SPI_CFG1_DSIZE_4                    (0x10UL << SPI_CFG1_DSIZE_Pos)          /*!< 0x00000010 */
#define SPI_CFG1_FTHLV_Pos                  (5U)
#define SPI_CFG1_FTHLV_Msk                  (0xFUL << SPI_CFG1_FTHLV_Pos)           /*!< 0x000001E0 */
#define SPI_CFG1_FTHLV                      SPI_CFG1_FTHLV_Msk                      /*!<FTHVL [3:0]: FIFO threshold level */
#define SPI_CFG1_FTHLV_0                    (0x1UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000020 */
#define SPI_CFG1_FTHLV_1                    (0x2UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000040 */
#define SPI_CFG1_FTHLV_2                    (0x4UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000080 */
#define SPI_CFG1_FTHLV_3                    (0x8UL << SPI_CFG1_FTHLV_Pos)           /*!< 0x00000100 */
#define SPI_CFG1_UDRCFG_Pos                 (9U)
#define SPI_CFG1_UDRCFG_Msk                 (0x1UL << SPI_CFG1_UDRCFG_Pos)          /*!< 0x00000600 */
#define SPI_CFG1_UDRCFG                     SPI_CFG1_UDRCFG_Msk                     /*!<Behavior of Slave transmitter at underrun condition */
#define SPI_CFG1_RXDMAEN_Pos                (14U)
#define SPI_CFG1_RXDMAEN_Msk                (0x1UL << SPI_CFG1_RXDMAEN_Pos)         /*!< 0x00004000 */
#define SPI_CFG1_RXDMAEN                    SPI_CFG1_RXDMAEN_Msk                    /*!<Rx DMA stream enable */
#define SPI_CFG1_TXDMAEN_Pos                (15U)
#define SPI_CFG1_TXDMAEN_Msk                (0x1UL << SPI_CFG1_TXDMAEN_Pos)         /*!< 0x00008000 */
#define SPI_CFG1_TXDMAEN                    SPI_CFG1_TXDMAEN_Msk                    /*!<Tx DMA stream enable */
#define SPI_CFG1_CRCSIZE_Pos                (16U)
#define SPI_CFG1_CRCSIZE_Msk                (0x1FUL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x001F0000 */
#define SPI_CFG1_CRCSIZE                    SPI_CFG1_CRCSIZE_Msk                    /*!<CRCSIZE [4:0]: Length of CRC frame to be transacted and compared */
#define SPI_CFG1_CRCSIZE_0                  (0x01UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00010000 */
#define SPI_CFG1_CRCSIZE_1                  (0x02UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00020000 */
#define SPI_CFG1_CRCSIZE_2                  (0x04UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00040000 */
#define SPI_CFG1_CRCSIZE_3                  (0x08UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00080000 */
#define SPI_CFG1_CRCSIZE_4                  (0x10UL << SPI_CFG1_CRCSIZE_Pos)        /*!< 0x00100000 */
#define SPI_CFG1_CRCEN_Pos                  (22U)
#define SPI_CFG1_CRCEN_Msk                  (0x1UL << SPI_CFG1_CRCEN_Pos)           /*!< 0x00400000 */
#define SPI_CFG1_CRCEN                      SPI_CFG1_CRCEN_Msk                      /*!<Hardware CRC computation enable */
#define SPI_CFG1_MBR_Pos                    (28U)
#define SPI_CFG1_MBR_Msk                    (0x7UL << SPI_CFG1_MBR_Pos)             /*!< 0x70000000 */
#define SPI_CFG1_MBR                        SPI_CFG1_MBR_Msk                        /*!<Master baud rate prescaler setting*/
#define SPI_CFG1_MBR_0                      (0x1UL << SPI_CFG1_MBR_Pos)             /*!< 0x10000000 */
#define SPI_CFG1_MBR_1                      (0x2UL << SPI_CFG1_MBR_Pos)             /*!< 0x20000000 */
#define SPI_CFG1_MBR_2                      (0x4UL << SPI_CFG1_MBR_Pos)             /*!< 0x40000000 */
#define SPI_CFG1_BPASS_Pos                  (31U)
#define SPI_CFG1_BPASS_Msk                  (0x1UL << SPI_CFG1_BPASS_Pos)           /*!< 0x80000000 */
#define SPI_CFG1_BPASS                      SPI_CFG1_BPASS_Msk                      /*!<Bypass of the prescaler at master baud rate clock generator */

/********************  Bits definition for SPI_CFG2 register     ******************/
#define SPI_CFG2_MSSI_Pos                   (0U)
#define SPI_CFG2_MSSI_Msk                   (0xFUL << SPI_CFG2_MSSI_Pos)            /*!< 0x0000000F */
#define SPI_CFG2_MSSI                       SPI_CFG2_MSSI_Msk                       /*!<Master SS Idleness */
#define SPI_CFG2_MSSI_0                     (0x1UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000001 */
#define SPI_CFG2_MSSI_1                     (0x2UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000002 */
#define SPI_CFG2_MSSI_2                     (0x4UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000004 */
#define SPI_CFG2_MSSI_3                     (0x8UL << SPI_CFG2_MSSI_Pos)            /*!< 0x00000008 */
#define SPI_CFG2_MIDI_Pos                   (4U)
#define SPI_CFG2_MIDI_Msk                   (0xFUL << SPI_CFG2_MIDI_Pos)            /*!< 0x000000F0 */
#define SPI_CFG2_MIDI                       SPI_CFG2_MIDI_Msk                       /*!<Master Inter-Data Idleness */
#define SPI_CFG2_MIDI_0                     (0x1UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000010 */
#define SPI_CFG2_MIDI_1                     (0x2UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000020 */
#define SPI_CFG2_MIDI_2                     (0x4UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000040 */
#define SPI_CFG2_MIDI_3                     (0x8UL << SPI_CFG2_MIDI_Pos)            /*!< 0x00000080 */
#define SPI_CFG2_RDIMM_Pos                  (13U)
#define SPI_CFG2_RDIMM_Msk                  (0x1UL << SPI_CFG2_RDIMM_Pos)           /*!< 0x00002000 */
#define SPI_CFG2_RDIMM                      SPI_CFG2_RDIMM_Msk                      /*!<RDY signal input master management */
#define SPI_CFG2_RDIOP_Pos                  (14U)
#define SPI_CFG2_RDIOP_Msk                  (0x1UL << SPI_CFG2_RDIOP_Pos)           /*!< 0x00004000 */
#define SPI_CFG2_RDIOP                      SPI_CFG2_RDIOP_Msk                      /*!<RDY signal input/output polarity */
#define SPI_CFG2_IOSWP_Pos                  (15U)
#define SPI_CFG2_IOSWP_Msk                  (0x1UL << SPI_CFG2_IOSWP_Pos)           /*!< 0x00008000 */
#define SPI_CFG2_IOSWP                      SPI_CFG2_IOSWP_Msk                      /*!<Swap functionality of MISO and MOSI pins */
#define SPI_CFG2_COMM_Pos                   (17U)
#define SPI_CFG2_COMM_Msk                   (0x3UL << SPI_CFG2_COMM_Pos)            /*!< 0x00060000 */
#define SPI_CFG2_COMM                       SPI_CFG2_COMM_Msk                       /*!<COMM [1:0]: SPI Communication Mode*/
#define SPI_CFG2_COMM_0                     (0x1UL << SPI_CFG2_COMM_Pos)            /*!< 0x00020000 */
#define SPI_CFG2_COMM_1                     (0x2UL << SPI_CFG2_COMM_Pos)            /*!< 0x00040000 */
#define SPI_CFG2_SP_Pos                     (19U)
#define SPI_CFG2_SP_Msk                     (0x7UL << SPI_CFG2_SP_Pos)              /*!< 0x00380000 */
#define SPI_CFG2_SP                         SPI_CFG2_SP_Msk                         /*!<SP[2:0]: Serial Protocol */
#define SPI_CFG2_SP_0                       (0x1UL << SPI_CFG2_SP_Pos)              /*!< 0x00080000 */
#define SPI_CFG2_SP_1                       (0x2UL << SPI_CFG2_SP_Pos)              /*!< 0x00100000 */
#define SPI_CFG2_SP_2                       (0x4UL << SPI_CFG2_SP_Pos)              /*!< 0x00200000 */
#define SPI_CFG2_MASTER_Pos                 (22U)
#define SPI_CFG2_MASTER_Msk                 (0x1UL << SPI_CFG2_MASTER_Pos)          /*!< 0x00400000 */
#define SPI_CFG2_MASTER                     SPI_CFG2_MASTER_Msk                     /*!<SPI Master */
#define SPI_CFG2_LSBFRST_Pos                (23U)
#define SPI_CFG2_LSBFRST_Msk                (0x1UL << SPI_CFG2_LSBFRST_Pos)         /*!< 0x00800000 */
#define SPI_CFG2_LSBFRST                    SPI_CFG2_LSBFRST_Msk                    /*!<Data frame format */
#define SPI_CFG2_CPHA_Pos                   (24U)
#define SPI_CFG2_CPHA_Msk                   (0x1UL << SPI_CFG2_CPHA_Pos)            /*!< 0x01000000 */
#define SPI_CFG2_CPHA                       SPI_CFG2_CPHA_Msk                       /*!<Clock Phase */
#define SPI_CFG2_CPOL_Pos                   (25U)
#define SPI_CFG2_CPOL_Msk                   (0x1UL << SPI_CFG2_CPOL_Pos)            /*!< 0x02000000 */
#define SPI_CFG2_CPOL                       SPI_CFG2_CPOL_Msk                       /*!<Clock Polarity */
#define SPI_CFG2_SSM_Pos                    (26U)
#define SPI_CFG2_SSM_Msk                    (0x1UL << SPI_CFG2_SSM_Pos)             /*!< 0x04000000 */
#define SPI_CFG2_SSM                        SPI_CFG2_SSM_Msk                        /*!<Software management of SS signal input */
#define SPI_CFG2_SSIOP_Pos                  (28U)
#define SPI_CFG2_SSIOP_Msk                  (0x1UL << SPI_CFG2_SSIOP_Pos)           /*!< 0x10000000 */
#define SPI_CFG2_SSIOP                      SPI_CFG2_SSIOP_Msk                      /*!<SS input/output polarity */
#define SPI_CFG2_SSOE_Pos                   (29U)
#define SPI_CFG2_SSOE_Msk                   (0x1UL << SPI_CFG2_SSOE_Pos)            /*!< 0x20000000 */
#define SPI_CFG2_SSOE                       SPI_CFG2_SSOE_Msk                       /*!<SS output enable */
#define SPI_CFG2_SSOM_Pos                   (30U)
#define SPI_CFG2_SSOM_Msk                   (0x1UL << SPI_CFG2_SSOM_Pos)            /*!< 0x40000000 */
#define SPI_CFG2_SSOM                       SPI_CFG2_SSOM_Msk                       /*!<SS output management in master mode */
#define SPI_CFG2_AFCNTR_Pos                 (31U)
#define SPI_CFG2_AFCNTR_Msk                 (0x1UL << SPI_CFG2_AFCNTR_Pos)          /*!< 0x80000000 */
#define SPI_CFG2_AFCNTR                     SPI_CFG2_AFCNTR_Msk                     /*!<Alternate function GPIOs control */

/********************  Bits definition for SPI_IER register      ******************/
#define SPI_IER_RXPIE_Pos                   (0U)
#define SPI_IER_RXPIE_Msk                   (0x1UL << SPI_IER_RXPIE_Pos)            /*!< 0x00000001 */
#define SPI_IER_RXPIE                       SPI_IER_RXPIE_Msk                       /*!<RXP Interrupt Enable */
#define SPI_IER_TXPIE_Pos                   (1U)
#define SPI_IER_TXPIE_Msk                   (0x1UL << SPI_IER_TXPIE_Pos)            /*!< 0x00000002 */
#define SPI_IER_TXPIE                       SPI_IER_TXPIE_Msk                       /*!<TXP interrupt enable */
#define SPI_IER_DXPIE_Pos                   (2U)
#define SPI_IER_DXPIE_Msk                   (0x1UL << SPI_IER_DXPIE_Pos)            /*!< 0x00000004 */
#define SPI_IER_DXPIE                       SPI_IER_DXPIE_Msk                       /*!<DXP interrupt enable */
#define SPI_IER_EOTIE_Pos                   (3U)
#define SPI_IER_EOTIE_Msk                   (0x1UL << SPI_IER_EOTIE_Pos)            /*!< 0x00000008 */
#define SPI_IER_EOTIE                       SPI_IER_EOTIE_Msk                       /*!<EOT/SUSP/TXC interrupt enable */
#define SPI_IER_TXTFIE_Pos                  (4U)
#define SPI_IER_TXTFIE_Msk                  (0x1UL << SPI_IER_TXTFIE_Pos)           /*!< 0x00000010 */
#define SPI_IER_TXTFIE                      SPI_IER_TXTFIE_Msk                      /*!<TXTF interrupt enable */
#define SPI_IER_UDRIE_Pos                   (5U)
#define SPI_IER_UDRIE_Msk                   (0x1UL << SPI_IER_UDRIE_Pos)            /*!< 0x00000020 */
#define SPI_IER_UDRIE                       SPI_IER_UDRIE_Msk                       /*!<UDR interrupt enable */
#define SPI_IER_OVRIE_Pos                   (6U)
#define SPI_IER_OVRIE_Msk                   (0x1UL << SPI_IER_OVRIE_Pos)            /*!< 0x00000040 */
#define SPI_IER_OVRIE                       SPI_IER_OVRIE_Msk                       /*!<OVR interrupt enable */
#define SPI_IER_CRCEIE_Pos                  (7U)
#define SPI_IER_CRCEIE_Msk                  (0x1UL << SPI_IER_CRCEIE_Pos)           /*!< 0x00000080 */
#define SPI_IER_CRCEIE                      SPI_IER_CRCEIE_Msk                      /*!<CRC error interrupt enable */
#define SPI_IER_TIFREIE_Pos                 (8U)
#define SPI_IER_TIFREIE_Msk                 (0x1UL << SPI_IER_TIFREIE_Pos)          /*!< 0x00000100 */
#define SPI_IER_TIFREIE                     SPI_IER_TIFREIE_Msk                     /*!<TI Frame Error interrupt enable */
#define SPI_IER_MODFIE_Pos                  (9U)
#define SPI_IER_MODFIE_Msk                  (0x1UL << SPI_IER_MODFIE_Pos)           /*!< 0x00000200 */
#define SPI_IER_MODFIE                      SPI_IER_MODFIE_Msk                      /*!<Mode Fault interrupt enable */

/********************  Bits definition for SPI_SR register       ******************/
#define SPI_SR_RXP_Pos                      (0U)
#define SPI_SR_RXP_Msk                      (0x1UL << SPI_SR_RXP_Pos)               /*!< 0x00000001 */
#define SPI_SR_RXP                          SPI_SR_RXP_Msk                          /*!<Rx-Packet available */
#define SPI_SR_TXP_Pos                      (1U)
#define SPI_SR_TXP_Msk                      (0x1UL << SPI_SR_TXP_Pos)               /*!< 0x00000002 */
#define SPI_SR_TXP                          SPI_SR_TXP_Msk                          /*!<Tx-Packet space available */
#define SPI_SR_DXP_Pos                      (2U)
#define SPI_SR_DXP_Msk                      (0x1UL << SPI_SR_DXP_Pos)               /*!< 0x00000004 */
#define SPI_SR_DXP                          SPI_SR_DXP_Msk                          /*!<Duplex Packet available */
#define SPI_SR_EOT_Pos                      (3U)
#define SPI_SR_EOT_Msk                      (0x1UL << SPI_SR_EOT_Pos)               /*!< 0x00000008 */
#define SPI_SR_EOT                          SPI_SR_EOT_Msk                          /*!<End of transfer */
#define SPI_SR_TXTF_Pos                     (4U)
#define SPI_SR_TXTF_Msk                     (0x1UL << SPI_SR_TXTF_Pos)              /*!< 0x00000010 */
#define SPI_SR_TXTF                         SPI_SR_TXTF_Msk                         /*!<Transmission Transfer Filled */
#define SPI_SR_UDR_Pos                      (5U)
#define SPI_SR_UDR_Msk                      (0x1UL << SPI_SR_UDR_Pos)               /*!< 0x00000020 */
#define SPI_SR_UDR                          SPI_SR_UDR_Msk                          /*!<Underrun at Slave transmission mode*/
#define SPI_SR_OVR_Pos                      (6U)
#define SPI_SR_OVR_Msk                      (0x1UL << SPI_SR_OVR_Pos)               /*!< 0x00000040 */
#define SPI_SR_OVR                          SPI_SR_OVR_Msk                          /*!<Overrun Error Detected */
#define SPI_SR_CRCE_Pos                     (7U)
#define SPI_SR_CRCE_Msk                     (0x1UL << SPI_SR_CRCE_Pos)              /*!< 0x00000080 */
#define SPI_SR_CRCE                         SPI_SR_CRCE_Msk                         /*!<CRC Error Detected */
#define SPI_SR_TIFRE_Pos                    (8U)
#define SPI_SR_TIFRE_Msk                    (0x1UL << SPI_SR_TIFRE_Pos)             /*!< 0x00000100 */
#define SPI_SR_TIFRE                        SPI_SR_TIFRE_Msk                        /*!<TI frame format error Detected */
#define SPI_SR_MODF_Pos                     (9U)
#define SPI_SR_MODF_Msk                     (0x1UL << SPI_SR_MODF_Pos)              /*!< 0x00000200 */
#define SPI_SR_MODF                         SPI_SR_MODF_Msk                         /*!<Mode Fault Detected */
#define SPI_SR_SUSP_Pos                     (11U)
#define SPI_SR_SUSP_Msk                     (0x1UL << SPI_SR_SUSP_Pos)              /*!< 0x00000800 */
#define SPI_SR_SUSP                         SPI_SR_SUSP_Msk                         /*!<Suspension status, SUSP is set by hardware */
#define SPI_SR_TXC_Pos                      (12U)
#define SPI_SR_TXC_Msk                      (0x1UL << SPI_SR_TXC_Pos)               /*!< 0x00001000 */
#define SPI_SR_TXC                          SPI_SR_TXC_Msk                          /*!<TxFIFO transmission complete */
#define SPI_SR_RXPLVL_Pos                   (13U)
#define SPI_SR_RXPLVL_Msk                   (0x3UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00006000 */
#define SPI_SR_RXPLVL                       SPI_SR_RXPLVL_Msk                       /*!<RxFIFO Packing Level */
#define SPI_SR_RXPLVL_0                     (0x1UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00002000 */
#define SPI_SR_RXPLVL_1                     (0x2UL << SPI_SR_RXPLVL_Pos)            /*!< 0x00004000 */
#define SPI_SR_RXWNE_Pos                    (15U)
#define SPI_SR_RXWNE_Msk                    (0x1UL << SPI_SR_RXWNE_Pos)             /*!< 0x00008000 */
#define SPI_SR_RXWNE                        SPI_SR_RXWNE_Msk                        /*!<Rx FIFO Word Not Empty */
#define SPI_SR_CTSIZE_Pos                   (16U)
#define SPI_SR_CTSIZE_Msk                   (0xFFFFUL << SPI_SR_CTSIZE_Pos)         /*!< 0xFFFF0000 */
#define SPI_SR_CTSIZE                       SPI_SR_CTSIZE_Msk                       /*!<Number of data frames remaining in TSIZE */

/********************  Bits definition for SPI_IFCR register     ******************/
#define SPI_IFCR_EOTC_Pos                   (3U)
#define SPI_IFCR_EOTC_Msk                   (0x1UL << SPI_IFCR_EOTC_Pos)            /*!< 0x00000008 */
#define SPI_IFCR_EOTC                       SPI_IFCR_EOTC_Msk                       /*!<End Of Transfer flag clear */
#define SPI_IFCR_TXTFC_Pos                  (4U)
#define SPI_IFCR_TXTFC_Msk                  (0x1UL << SPI_IFCR_TXTFC_Pos)           /*!< 0x00000010 */
#define SPI_IFCR_TXTFC                      SPI_IFCR_TXTFC_Msk                      /*!<Transmission Transfer Filled flag clear */
#define SPI_IFCR_UDRC_Pos                   (5U)
#define SPI_IFCR_UDRC_Msk                   (0x1UL << SPI_IFCR_UDRC_Pos)            /*!< 0x00000020 */
#define SPI_IFCR_UDRC                       SPI_IFCR_UDRC_Msk                       /*!<Underrun flag clear */
#define SPI_IFCR_OVRC_Pos                   (6U)
#define SPI_IFCR_OVRC_Msk                   (0x1UL << SPI_IFCR_OVRC_Pos)            /*!< 0x00000040 */
#define SPI_IFCR_OVRC                       SPI_IFCR_OVRC_Msk                       /*!<Overrun flag clear */
#define SPI_IFCR_CRCEC_Pos                  (7U)
#define SPI_IFCR_CRCEC_Msk                  (0x1UL << SPI_IFCR_CRCEC_Pos)           /*!< 0x00000080 */
#define SPI_IFCR_CRCEC                      SPI_IFCR_CRCEC_Msk                      /*!<CRC Error flag clear */
#define SPI_IFCR_TIFREC_Pos                 (8U)
#define SPI_IFCR_TIFREC_Msk                 (0x1UL << SPI_IFCR_TIFREC_Pos)          /*!< 0x00000100 */
#define SPI_IFCR_TIFREC                     SPI_IFCR_TIFREC_Msk                     /*!<TI frame format error flag clear */
#define SPI_IFCR_MODFC_Pos                  (9U)
#define SPI_IFCR_MODFC_Msk                  (0x1UL << SPI_IFCR_MODFC_Pos)           /*!< 0x00000200 */
#define SPI_IFCR_MODFC                      SPI_IFCR_MODFC_Msk                      /*!<Mode Fault flag clear */
#define SPI_IFCR_SUSPC_Pos                  (11U)
#define SPI_IFCR_SUSPC_Msk                  (0x1UL << SPI_IFCR_SUSPC_Pos)           /*!< 0x00000800 */
#define SPI_IFCR_SUSPC                      SPI_IFCR_SUSPC_Msk                      /*!<SUSPend flag clear */

/********************  Bits definition for SPI_AUTOCR register   ******************/
#define SPI_AUTOCR_TRIGSEL_Pos              (16U)
#define SPI_AUTOCR_TRIGSEL_Msk              (0xFUL << SPI_AUTOCR_TRIGSEL_Pos)       /*!< 0x000F0000 */
#define SPI_AUTOCR_TRIGSEL                  SPI_AUTOCR_TRIGSEL_Msk                  /*!<CTRIGSEL [3:0]: Trigger selection */
#define SPI_AUTOCR_TRIGSEL_0                (0x01UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00010000 */
#define SPI_AUTOCR_TRIGSEL_1                (0x02UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00020000 */
#define SPI_AUTOCR_TRIGSEL_2                (0x04UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00040000 */
#define SPI_AUTOCR_TRIGSEL_3                (0x08UL << SPI_AUTOCR_TRIGSEL_Pos)      /*!< 0x00080000 */
#define SPI_AUTOCR_TRIGPOL_Pos              (20U)
#define SPI_AUTOCR_TRIGPOL_Msk              (0x1UL << SPI_AUTOCR_TRIGPOL_Pos)       /*!< 0x00100000 */
#define SPI_AUTOCR_TRIGPOL                  SPI_AUTOCR_TRIGPOL_Msk                  /*!<Trigger polarity */
#define SPI_AUTOCR_TRIGEN_Pos               (21U)
#define SPI_AUTOCR_TRIGEN_Msk               (0x1UL << SPI_AUTOCR_TRIGEN_Pos)        /*!< 0x00200000 */
#define SPI_AUTOCR_TRIGEN                   SPI_AUTOCR_TRIGEN_Msk                   /*!<Trigger of CSTART control enable */

/********************  Bits definition for SPI_TXDR register     ******************/
#define SPI_TXDR_TXDR_Pos                   (0U)
#define SPI_TXDR_TXDR_Msk                   (0xFFFFFFFFUL << SPI_TXDR_TXDR_Pos)     /*!< 0xFFFFFFFF */
#define SPI_TXDR_TXDR                       SPI_TXDR_TXDR_Msk                       /* Transmit Data Register */

/********************  Bits definition for SPI_RXDR register     ******************/
#define SPI_RXDR_RXDR_Pos                   (0U)
#define SPI_RXDR_RXDR_Msk                   (0xFFFFFFFFUL << SPI_RXDR_RXDR_Pos)     /*!< 0xFFFFFFFF */
#define SPI_RXDR_RXDR                       SPI_RXDR_RXDR_Msk                       /* Receive Data Register */

/********************  Bits definition for SPI_CRCPOLY register  ******************/
#define SPI_CRCPOLY_CRCPOLY_Pos             (0U)
#define SPI_CRCPOLY_CRCPOLY_Msk             (0xFFFFFFFFUL << SPI_CRCPOLY_CRCPOLY_Pos) /*!< 0xFFFFFFFF */
#define SPI_CRCPOLY_CRCPOLY                 SPI_CRCPOLY_CRCPOLY_Msk                 /* CRC Polynomial register */

/********************  Bits definition for SPI_TXCRC register    ******************/
#define SPI_TXCRC_TXCRC_Pos                 (0U)
#define SPI_TXCRC_TXCRC_Msk                 (0xFFFFFFFFUL << SPI_TXCRC_TXCRC_Pos)   /*!< 0xFFFFFFFF */
#define SPI_TXCRC_TXCRC                     SPI_TXCRC_TXCRC_Msk                     /* CRC Register for transmitter */

/********************  Bits definition for SPI_RXCRC register    ******************/
#define SPI_RXCRC_RXCRC_Pos                 (0U)
#define SPI_RXCRC_RXCRC_Msk                 (0xFFFFFFFFUL << SPI_RXCRC_RXCRC_Pos)   /*!< 0xFFFFFFFF */
#define SPI_RXCRC_RXCRC                     SPI_RXCRC_RXCRC_Msk                     /* CRC Register for receiver */

/********************  Bits definition for SPI_UDRDR register    ******************/
#define SPI_UDRDR_UDRDR_Pos                 (0U)
#define SPI_UDRDR_UDRDR_Msk                 (0xFFFFFFFFUL << SPI_UDRDR_UDRDR_Pos)   /*!< 0xFFFFFFFF */
#define SPI_UDRDR_UDRDR                     SPI_UDRDR_UDRDR_Msk                     /* Data at slave underrun condition */

/********************  Bits definition for SPI_I2SCFGR register  ******************/
#define SPI_I2SCFGR_I2SMOD_Pos      (0U)
#define SPI_I2SCFGR_I2SMOD_Msk      (0x1U << SPI_I2SCFGR_I2SMOD_Pos)           /*!< 0x00000001 */
#define SPI_I2SCFGR_I2SMOD          SPI_I2SCFGR_I2SMOD_Msk                     /*!<I2S mode selection */
#define SPI_I2SCFGR_I2SCFG_Pos      (1U)
#define SPI_I2SCFGR_I2SCFG_Msk      (0x7U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x0000000E */
#define SPI_I2SCFGR_I2SCFG          SPI_I2SCFGR_I2SCFG_Msk                     /*!<I2SCFGR[1:0] bits (I2S configuration mode) */
#define SPI_I2SCFGR_I2SCFG_0        (0x1U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000002 */
#define SPI_I2SCFGR_I2SCFG_1        (0x2U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000004 */
#define SPI_I2SCFGR_I2SCFG_2        (0x4U << SPI_I2SCFGR_I2SCFG_Pos)           /*!< 0x00000008 */
#define SPI_I2SCFGR_I2SSTD_Pos      (4U)
#define SPI_I2SCFGR_I2SSTD_Msk      (0x3U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000030 */
#define SPI_I2SCFGR_I2SSTD          SPI_I2SCFGR_I2SSTD_Msk                     /*!<I2SSTD[1:0] I2S standard selection */
#define SPI_I2SCFGR_I2SSTD_0        (0x1U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000010 */
#define SPI_I2SCFGR_I2SSTD_1        (0x2U << SPI_I2SCFGR_I2SSTD_Pos)           /*!< 0x00000020 */
#define SPI_I2SCFGR_PCMSYNC_Pos     (7U)
#define SPI_I2SCFGR_PCMSYNC_Msk     (0x1U << SPI_I2SCFGR_PCMSYNC_Pos)          /*!< 0x00000080 */
#define SPI_I2SCFGR_PCMSYNC         SPI_I2SCFGR_PCMSYNC_Msk                    /*!<PCM frame synchronization */
#define SPI_I2SCFGR_DATLEN_Pos      (8U)
#define SPI_I2SCFGR_DATLEN_Msk      (0x3U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000300 */
#define SPI_I2SCFGR_DATLEN          SPI_I2SCFGR_DATLEN_Msk                     /*!<DATLEN[1:0] Data length to be transferred */
#define SPI_I2SCFGR_DATLEN_0        (0x1U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000100 */
#define SPI_I2SCFGR_DATLEN_1        (0x2U << SPI_I2SCFGR_DATLEN_Pos)           /*!< 0x00000200 */
#define SPI_I2SCFGR_CHLEN_Pos       (10U)
#define SPI_I2SCFGR_CHLEN_Msk       (0x1U << SPI_I2SCFGR_CHLEN_Pos)            /*!< 0x00000400 */
#define SPI_I2SCFGR_CHLEN           SPI_I2SCFGR_CHLEN_Msk                      /*!<Channel length (number of bits per audio channel) */
#define SPI_I2SCFGR_CKPOL_Pos       (11U)
#define SPI_I2SCFGR_CKPOL_Msk       (0x1U << SPI_I2SCFGR_CKPOL_Pos)            /*!< 0x00000800 */
#define SPI_I2SCFGR_CKPOL           SPI_I2SCFGR_CKPOL_Msk                      /*!<Serial audio clock polarity */
#define SPI_I2SCFGR_FIXCH_Pos       (12U)
#define SPI_I2SCFGR_FIXCH_Msk       (0x1U << SPI_I2SCFGR_FIXCH_Pos)            /*!< 0x00001000 */
#define SPI_I2SCFGR_FIXCH           SPI_I2SCFGR_FIXCH_Msk                      /*!<Fixed channel length in SLAVE */
#define SPI_I2SCFGR_WSINV_Pos       (13U)
#define SPI_I2SCFGR_WSINV_Msk       (0x1U << SPI_I2SCFGR_WSINV_Pos)            /*!< 0x00002000 */
#define SPI_I2SCFGR_WSINV           SPI_I2SCFGR_WSINV_Msk                      /*!<Word select inversion */
#define SPI_I2SCFGR_DATFMT_Pos      (14U)
#define SPI_I2SCFGR_DATFMT_Msk      (0x1U << SPI_I2SCFGR_DATFMT_Pos)           /*!< 0x00003000 */
#define SPI_I2SCFGR_DATFMT          SPI_I2SCFGR_DATFMT_Msk                     /*!<Data format */
#define SPI_I2SCFGR_I2SDIV_Pos      (16U)
#define SPI_I2SCFGR_I2SDIV_Msk      (0xFFU << SPI_I2SCFGR_I2SDIV_Pos)          /*!< 0x00FF0000 */
#define SPI_I2SCFGR_I2SDIV          SPI_I2SCFGR_I2SDIV_Msk                     /*!<I2S Linear prescaler */
#define SPI_I2SCFGR_ODD_Pos         (24U)
#define SPI_I2SCFGR_ODD_Msk         (0x1U << SPI_I2SCFGR_ODD_Pos)              /*!< 0x01000000 */
#define SPI_I2SCFGR_ODD             SPI_I2SCFGR_ODD_Msk                        /*!<Odd factor for the prescaler */
#define SPI_I2SCFGR_MCKOE_Pos       (25U)
#define SPI_I2SCFGR_MCKOE_Msk       (0x1U << SPI_I2SCFGR_MCKOE_Pos)            /*!< 0x02000000 */
#define SPI_I2SCFGR_MCKOE           SPI_I2SCFGR_MCKOE_Msk                      /*!<Master Clock Output Enable */

/********************  Bits definition for SPI_HWCFGR2 register  ******************/
#define SPI_HWCFGR2_OPBCFG_Pos    (0U)
#define SPI_HWCFGR2_OPBCFG_Msk    (0xFFU << SPI_HWCFGR2_OPBCFG_Pos)            /*!< 0x000000FF */
#define SPI_HWCFGR2_OPBCFG        SPI_HWCFGR2_OPBCFG_Msk                       /*!< Number of option bits available 0 to 31 */

/********************  Bits definition for SPI_HWCFGR1 register  ******************/
#define SPI_HWCFGR1_TXFCFG_Pos    (0U)
#define SPI_HWCFGR1_TXFCFG_Msk    (0xFU << SPI_HWCFGR1_TXFCFG_Pos)             /*!< 0x0000000F */
#define SPI_HWCFGR1_TXFCFG        SPI_HWCFGR1_TXFCFG_Msk                       /*!< TxFIFO size */
#define SPI_HWCFGR1_RXFCFG_Pos    (4U)
#define SPI_HWCFGR1_RXFCFG_Msk    (0xFU << SPI_HWCFGR1_RXFCFG_Pos)             /*!< 0x000000F0 */
#define SPI_HWCFGR1_RXFCFG        SPI_HWCFGR1_RXFCFG_Msk                       /*!< RxFIFO size */
#define SPI_HWCFGR1_CRCCFG_Pos    (8U)
#define SPI_HWCFGR1_CRCCFG_Msk    (0xFU << SPI_HWCFGR1_CRCCFG_Pos)             /*!< 0x00000F00 */
#define SPI_HWCFGR1_CRCCFG        SPI_HWCFGR1_CRCCFG_Msk                       /*!< CRC configuration for SPI */
#define SPI_HWCFGR1_I2SCFG_Pos    (12U)
#define SPI_HWCFGR1_I2SCFG_Msk    (0xFU << SPI_HWCFGR1_I2SCFG_Pos)             /*!< 0x0000F000 */
#define SPI_HWCFGR1_I2SCFG        SPI_HWCFGR1_I2SCFG_Msk                       /*!< I2S configuration */
#define SPI_HWCFGR1_DSCFG_Pos     (16U)
#define SPI_HWCFGR1_DSCFG_Msk     (0xFU << SPI_HWCFGR1_DSCFG_Pos)              /*!< 0x000F0000 */
#define SPI_HWCFGR1_DSCFG         SPI_HWCFGR1_DSCFG_Msk                        /*!< SPI data size configuration */

#define SPI_HWCFGR1_TRGCFG_Pos    (20U)
#define SPI_HWCFGR1_TRGCFG_Msk    (0xFU << SPI_HWCFGR1_TRGCFG_Pos)             /*!< 0x00F00000 */
#define SPI_HWCFGR1_TRGCFG        SPI_HWCFGR1_TRGCFG_Msk                       /*!< Autonomous trigger feature configuration */

#define SPI_HWCFGR1_FULLCFG_Pos   (24U)
#define SPI_HWCFGR1_FULLCFG_Msk   (0xFU << SPI_HWCFGR1_FULLCFG_Pos)            /*!< 0x0F000000 */
#define SPI_HWCFGR1_FULLCFG       SPI_HWCFGR1_FULLCFG_Msk                      /*!< SPI2S full feature version configuration */

/********************  Bits definition for SPI_VERR register     ******************/
#define SPI_VERR_MINREV_Pos      (0U)
#define SPI_VERR_MINREV_Msk      (0xFU << SPI_VERR_MINREV_Pos)               /*!< 0x0000000F */
#define SPI_VERR_MINREV          SPI_VERR_MINREV_Msk                         /*!< Minor Revision of the IP */
#define SPI_VERR_MAJREV_Pos      (4U)
#define SPI_VERR_MAJREV_Msk      (0xFU << SPI_VERR_MAJREV_Pos)               /*!< 0x000000F0 */
#define SPI_VERR_MAJREV          SPI_VERR_MAJREV_Msk                         /*!< Major Revision of the IP */

/********************  Bits definition for SPI_IPIDR register    ******************/
#define SPI_IPIDR_ID_Pos       (0U)
#define SPI_IPIDR_ID_Msk       (0xFFFFFFFFU << SPI_IPIDR_ID_Pos)             /*!< 0xFFFFFFFF */
#define SPI_IPIDR_ID           SPI_IPIDR_ID_Msk                              /*!< MCD identification code which identifies the IP */
/********************  Bits definition for SPI_SIDR register     ******************/
#define SPI_SIDR_SID_Pos         (0U)
#define SPI_SIDR_SID_Msk         (0xFFFFFFFFU << SPI_SIDR_SID_Pos)           /*!< 0xFFFFFFFF */
#define SPI_SIDR_SID             SPI_SIDR_SID_Msk                            /*!< Size identification */

/******************************************************************************/
/*                                                                            */
/*                     Tamper and backup register (TAMP)                      */
/*                                                                            */
/******************************************************************************/
/********************  Bits definition for TAMP_CR1 register  *****************/
#define TAMP_CR1_TAMP1E_Pos          (0U)
#define TAMP_CR1_TAMP1E_Msk          (0x1U << TAMP_CR1_TAMP1E_Pos)                      /*!< 0x00000001U */
#define TAMP_CR1_TAMP1E              TAMP_CR1_TAMP1E_Msk
#define TAMP_CR1_TAMP2E_Pos          (1U)
#define TAMP_CR1_TAMP2E_Msk          (0x1U << TAMP_CR1_TAMP2E_Pos)                      /*!< 0x00000002U */
#define TAMP_CR1_TAMP2E              TAMP_CR1_TAMP2E_Msk
#define TAMP_CR1_TAMP3E_Pos          (2U)
#define TAMP_CR1_TAMP3E_Msk          (0x1U << TAMP_CR1_TAMP3E_Pos)                      /*!< 0x00000004U */
#define TAMP_CR1_TAMP3E              TAMP_CR1_TAMP3E_Msk
#define TAMP_CR1_TAMP4E_Pos          (3U)
#define TAMP_CR1_TAMP4E_Msk          (0x1U << TAMP_CR1_TAMP4E_Pos)                      /*!< 0x00000008U */
#define TAMP_CR1_TAMP4E              TAMP_CR1_TAMP4E_Msk
#define TAMP_CR1_TAMP5E_Pos          (4U)
#define TAMP_CR1_TAMP5E_Msk          (0x1U << TAMP_CR1_TAMP5E_Pos)                      /*!< 0x00000010U */
#define TAMP_CR1_TAMP5E              TAMP_CR1_TAMP5E_Msk
#define TAMP_CR1_TAMP6E_Pos          (5U)
#define TAMP_CR1_TAMP6E_Msk          (0x1U << TAMP_CR1_TAMP6E_Pos)                      /*!< 0x00000020U */
#define TAMP_CR1_TAMP6E              TAMP_CR1_TAMP6E_Msk
#define TAMP_CR1_TAMP7E_Pos          (6U)
#define TAMP_CR1_TAMP7E_Msk          (0x1U << TAMP_CR1_TAMP7E_Pos)                      /*!< 0x00000040U */
#define TAMP_CR1_TAMP7E              TAMP_CR1_TAMP7E_Msk
#define TAMP_CR1_TAMP8E_Pos          (7U)
#define TAMP_CR1_TAMP8E_Msk          (0x1U << TAMP_CR1_TAMP8E_Pos)                      /*!< 0x00000080U */
#define TAMP_CR1_TAMP8E              TAMP_CR1_TAMP8E_Msk
#define TAMP_CR1_ITAMP1E_Pos         (16U)
#define TAMP_CR1_ITAMP1E_Msk         (0x1U << TAMP_CR1_ITAMP1E_Pos)                     /*!< 0x00010000U */
#define TAMP_CR1_ITAMP1E             TAMP_CR1_ITAMP1E_Msk
#define TAMP_CR1_ITAMP2E_Pos         (17U)
#define TAMP_CR1_ITAMP2E_Msk         (0x1U << TAMP_CR1_ITAMP2E_Pos)                     /*!< 0x00040000U */
#define TAMP_CR1_ITAMP2E             TAMP_CR1_ITAMP2E_Msk
#define TAMP_CR1_ITAMP3E_Pos         (18U)
#define TAMP_CR1_ITAMP3E_Msk         (0x1U << TAMP_CR1_ITAMP3E_Pos)                     /*!< 0x00040000U */
#define TAMP_CR1_ITAMP3E             TAMP_CR1_ITAMP3E_Msk
#define TAMP_CR1_ITAMP4E_Pos         (19U)
#define TAMP_CR1_ITAMP4E_Msk         (0x1U << TAMP_CR1_ITAMP4E_Pos)                     /*!< 0x00080000U */
#define TAMP_CR1_ITAMP4E             TAMP_CR1_ITAMP4E_Msk
#define TAMP_CR1_ITAMP5E_Pos         (20U)
#define TAMP_CR1_ITAMP5E_Msk         (0x1U << TAMP_CR1_ITAMP5E_Pos)                     /*!< 0x00100000U */
#define TAMP_CR1_ITAMP5E             TAMP_CR1_ITAMP5E_Msk
#define TAMP_CR1_ITAMP6E_Pos         (21U)
#define TAMP_CR1_ITAMP6E_Msk         (0x1U << TAMP_CR1_ITAMP6E_Pos)                     /*!< 0x00200000U */
#define TAMP_CR1_ITAMP6E             TAMP_CR1_ITAMP6E_Msk
#define TAMP_CR1_ITAMP7E_Pos         (22U)
#define TAMP_CR1_ITAMP7E_Msk         (0x1U << TAMP_CR1_ITAMP7E_Pos)                     /*!< 0x00400000U */
#define TAMP_CR1_ITAMP7E             TAMP_CR1_ITAMP7E_Msk
#define TAMP_CR1_ITAMP8E_Pos         (23U)
#define TAMP_CR1_ITAMP8E_Msk         (0x1U << TAMP_CR1_ITAMP8E_Pos)                     /*!< 0x00800000U */
#define TAMP_CR1_ITAMP8E             TAMP_CR1_ITAMP8E_Msk
#define TAMP_CR1_ITAMP9E_Pos         (24U)
#define TAMP_CR1_ITAMP9E_Msk         (0x1U << TAMP_CR1_ITAMP9E_Pos)                     /*!< 0x01000000U */
#define TAMP_CR1_ITAMP9E             TAMP_CR1_ITAMP9E_Msk
#define TAMP_CR1_ITAMP10E_Pos        (25U)
#define TAMP_CR1_ITAMP10E_Msk        (0x1U << TAMP_CR1_ITAMP10E_Pos)                    /*!< 0x02000000U */
#define TAMP_CR1_ITAMP10E            TAMP_CR1_ITAMP10E_Msk
#define TAMP_CR1_ITAMP11E_Pos        (26U)
#define TAMP_CR1_ITAMP11E_Msk        (0x1U << TAMP_CR1_ITAMP11E_Pos)                    /*!< 0x04000000U */
#define TAMP_CR1_ITAMP11E            TAMP_CR1_ITAMP11E_Msk
#define TAMP_CR1_ITAMP12E_Pos        (27U)
#define TAMP_CR1_ITAMP12E_Msk        (0x1U << TAMP_CR1_ITAMP12E_Pos)                    /*!< 0x08000000U */
#define TAMP_CR1_ITAMP12E            TAMP_CR1_ITAMP12E_Msk
#define TAMP_CR1_ITAMP14E_Pos        (29U)
#define TAMP_CR1_ITAMP14E_Msk        (0x1U << TAMP_CR1_ITAMP14E_Pos)                    /*!< 0x20000000U */
#define TAMP_CR1_ITAMP14E            TAMP_CR1_ITAMP14E_Msk
#define TAMP_CR1_ITAMP15E_Pos        (30U)
#define TAMP_CR1_ITAMP15E_Msk        (0x1U << TAMP_CR1_ITAMP15E_Pos)                    /*!< 0x40000000U */
#define TAMP_CR1_ITAMP15E            TAMP_CR1_ITAMP15E_Msk

/********************  Bits definition for TAMP_CR2 register  *****************/
#define TAMP_CR2_TAMP1NOER_Pos       (0U)
#define TAMP_CR2_TAMP1NOER_Msk       (0x1U << TAMP_CR2_TAMP1NOER_Pos)                   /*!< 0x00000001U */
#define TAMP_CR2_TAMP1NOER           TAMP_CR2_TAMP1NOER_Msk
#define TAMP_CR2_TAMP2NOER_Pos       (1U)
#define TAMP_CR2_TAMP2NOER_Msk       (0x1U << TAMP_CR2_TAMP2NOER_Pos)                   /*!< 0x00000002U */
#define TAMP_CR2_TAMP2NOER           TAMP_CR2_TAMP2NOER_Msk
#define TAMP_CR2_TAMP3NOER_Pos       (2U)
#define TAMP_CR2_TAMP3NOER_Msk       (0x1U << TAMP_CR2_TAMP3NOER_Pos)                   /*!< 0x00000004U */
#define TAMP_CR2_TAMP3NOER           TAMP_CR2_TAMP3NOER_Msk
#define TAMP_CR2_TAMP4NOER_Pos       (3U)
#define TAMP_CR2_TAMP4NOER_Msk       (0x1U << TAMP_CR2_TAMP4NOER_Pos)                   /*!< 0x00000008U */
#define TAMP_CR2_TAMP4NOER           TAMP_CR2_TAMP4NOER_Msk
#define TAMP_CR2_TAMP5NOER_Pos       (4U)
#define TAMP_CR2_TAMP5NOER_Msk       (0x1U << TAMP_CR2_TAMP5NOER_Pos)                   /*!< 0x00000010U */
#define TAMP_CR2_TAMP5NOER           TAMP_CR2_TAMP5NOER_Msk
#define TAMP_CR2_TAMP6NOER_Pos       (5U)
#define TAMP_CR2_TAMP6NOER_Msk       (0x1U << TAMP_CR2_TAMP6NOER_Pos)                   /*!< 0x00000020U */
#define TAMP_CR2_TAMP6NOER           TAMP_CR2_TAMP6NOER_Msk
#define TAMP_CR2_TAMP7NOER_Pos       (6U)
#define TAMP_CR2_TAMP7NOER_Msk       (0x1U << TAMP_CR2_TAMP7NOER_Pos)                   /*!< 0x00000040U */
#define TAMP_CR2_TAMP7NOER           TAMP_CR2_TAMP7NOER_Msk
#define TAMP_CR2_TAMP8NOER_Pos       (7U)
#define TAMP_CR2_TAMP8NOER_Msk       (0x1U << TAMP_CR2_TAMP8NOER_Pos)                   /*!< 0x00000080U */
#define TAMP_CR2_TAMP8NOER           TAMP_CR2_TAMP8NOER_Msk
#define TAMP_CR2_TAMP1MSK_Pos        (16U)
#define TAMP_CR2_TAMP1MSK_Msk        (0x1U << TAMP_CR2_TAMP1MSK_Pos)                    /*!< 0x00010000U */
#define TAMP_CR2_TAMP1MSK            TAMP_CR2_TAMP1MSK_Msk
#define TAMP_CR2_TAMP2MSK_Pos        (17U)
#define TAMP_CR2_TAMP2MSK_Msk        (0x1U << TAMP_CR2_TAMP2MSK_Pos)                    /*!< 0x00020000U */
#define TAMP_CR2_TAMP2MSK            TAMP_CR2_TAMP2MSK_Msk
#define TAMP_CR2_TAMP3MSK_Pos        (18U)
#define TAMP_CR2_TAMP3MSK_Msk        (0x1U << TAMP_CR2_TAMP3MSK_Pos)                    /*!< 0x00040000U */
#define TAMP_CR2_TAMP3MSK            TAMP_CR2_TAMP3MSK_Msk
#define TAMP_CR2_BKERASE_Pos         (23U)
#define TAMP_CR2_BKERASE_Msk         (0x1U << TAMP_CR2_BKERASE_Pos)                     /*!< 0x00800000U */
#define TAMP_CR2_BKERASE             TAMP_CR2_BKERASE_Msk
#define TAMP_CR2_TAMP1TRG_Pos        (24U)
#define TAMP_CR2_TAMP1TRG_Msk        (0x1U << TAMP_CR2_TAMP1TRG_Pos)                    /*!< 0x01000000U */
#define TAMP_CR2_TAMP1TRG            TAMP_CR2_TAMP1TRG_Msk
#define TAMP_CR2_TAMP2TRG_Pos        (25U)
#define TAMP_CR2_TAMP2TRG_Msk        (0x1U << TAMP_CR2_TAMP2TRG_Pos)                    /*!< 0x02000000U */
#define TAMP_CR2_TAMP2TRG            TAMP_CR2_TAMP2TRG_Msk
#define TAMP_CR2_TAMP3TRG_Pos        (26U)
#define TAMP_CR2_TAMP3TRG_Msk        (0x1U << TAMP_CR2_TAMP3TRG_Pos)                    /*!< 0x04000000U */
#define TAMP_CR2_TAMP3TRG            TAMP_CR2_TAMP3TRG_Msk
#define TAMP_CR2_TAMP4TRG_Pos        (27U)
#define TAMP_CR2_TAMP4TRG_Msk        (0x1U << TAMP_CR2_TAMP4TRG_Pos)                    /*!< 0x08000000U */
#define TAMP_CR2_TAMP4TRG            TAMP_CR2_TAMP4TRG_Msk
#define TAMP_CR2_TAMP5TRG_Pos        (28U)
#define TAMP_CR2_TAMP5TRG_Msk        (0x1U << TAMP_CR2_TAMP5TRG_Pos)                    /*!< 0x10000000U */
#define TAMP_CR2_TAMP5TRG            TAMP_CR2_TAMP5TRG_Msk
#define TAMP_CR2_TAMP6TRG_Pos        (29U)
#define TAMP_CR2_TAMP6TRG_Msk        (0x1U << TAMP_CR2_TAMP6TRG_Pos)                    /*!< 0x20000000U */
#define TAMP_CR2_TAMP6TRG            TAMP_CR2_TAMP6TRG_Msk
#define TAMP_CR2_TAMP7TRG_Pos        (30U)
#define TAMP_CR2_TAMP7TRG_Msk        (0x1U << TAMP_CR2_TAMP7TRG_Pos)                    /*!< 0x40000000U */
#define TAMP_CR2_TAMP7TRG            TAMP_CR2_TAMP7TRG_Msk
#define TAMP_CR2_TAMP8TRG_Pos        (31U)
#define TAMP_CR2_TAMP8TRG_Msk        (0x1U << TAMP_CR2_TAMP8TRG_Pos)                    /*!< 0x80000000U */
#define TAMP_CR2_TAMP8TRG            TAMP_CR2_TAMP8TRG_Msk

/********************  Bits definition for TAMP_CR3 register  *****************/
#define TAMP_CR3_ITAMP1NOER_Pos      (0U)
#define TAMP_CR3_ITAMP1NOER_Msk      (0x1U << TAMP_CR3_ITAMP1NOER_Pos)                  /*!< 0x00000001U */
#define TAMP_CR3_ITAMP1NOER          TAMP_CR3_ITAMP1NOER_Msk
#define TAMP_CR3_ITAMP2NOER_Pos      (1U)
#define TAMP_CR3_ITAMP2NOER_Msk      (0x1U << TAMP_CR3_ITAMP2NOER_Pos)                  /*!< 0x00000002U */
#define TAMP_CR3_ITAMP2NOER          TAMP_CR3_ITAMP2NOER_Msk
#define TAMP_CR3_ITAMP3NOER_Pos      (2U)
#define TAMP_CR3_ITAMP3NOER_Msk      (0x1U << TAMP_CR3_ITAMP3NOER_Pos)                  /*!< 0x00000004U */
#define TAMP_CR3_ITAMP3NOER          TAMP_CR3_ITAMP3NOER_Msk
#define TAMP_CR3_ITAMP4NOER_Pos      (3U)
#define TAMP_CR3_ITAMP4NOER_Msk      (0x1U << TAMP_CR3_ITAMP4NOER_Pos)                  /*!< 0x00000008U */
#define TAMP_CR3_ITAMP4NOER          TAMP_CR3_ITAMP4NOER_Msk
#define TAMP_CR3_ITAMP5NOER_Pos      (4U)
#define TAMP_CR3_ITAMP5NOER_Msk      (0x1U << TAMP_CR3_ITAMP5NOER_Pos)                  /*!< 0x00000010U */
#define TAMP_CR3_ITAMP5NOER          TAMP_CR3_ITAMP5NOER_Msk
#define TAMP_CR3_ITAMP6NOER_Pos      (5U)
#define TAMP_CR3_ITAMP6NOER_Msk      (0x1U << TAMP_CR3_ITAMP6NOER_Pos)                  /*!< 0x00000020U */
#define TAMP_CR3_ITAMP6NOER          TAMP_CR3_ITAMP6NOER_Msk
#define TAMP_CR3_ITAMP7NOER_Pos      (6U)
#define TAMP_CR3_ITAMP7NOER_Msk      (0x1U << TAMP_CR3_ITAMP7NOER)                      /*!< 0x00000040U */
#define TAMP_CR3_ITAMP7NOER          TAMP_CR3_ITAMP7NOER_Msk
#define TAMP_CR3_ITAMP8NOER_Pos      (7U)
#define TAMP_CR3_ITAMP8NOER_Msk      (0x1U << TAMP_CR3_ITAMP8NOER_Pos)                  /*!< 0x00000080U */
#define TAMP_CR3_ITAMP8NOER          TAMP_CR3_ITAMP8NOER_Msk
#define TAMP_CR3_ITAMP9NOER_Pos      (8U)
#define TAMP_CR3_ITAMP9NOER_Msk      (0x1U << TAMP_CR3_ITAMP9NOER_Pos)                  /*!< 0x00000100U */
#define TAMP_CR3_ITAMP9NOER          TAMP_CR3_ITAMP9NOER_Msk
#define TAMP_CR3_ITAMP10NOER_Pos     (9U)
#define TAMP_CR3_ITAMP10NOER_Msk     (0x1U << TAMP_CR3_ITAMP10NOER_Pos)                 /*!< 0x00000200U */
#define TAMP_CR3_ITAMP10NOER         TAMP_CR3_ITAMP10NOER_Msk
#define TAMP_CR3_ITAMP11NOER_Pos     (10U)
#define TAMP_CR3_ITAMP11NOER_Msk     (0x1U << TAMP_CR3_ITAMP11NOER_Pos)                 /*!< 0x00000400U */
#define TAMP_CR3_ITAMP11NOER         TAMP_CR3_ITAMP11NOER_Msk
#define TAMP_CR3_ITAMP12NOER_Pos     (11U)
#define TAMP_CR3_ITAMP12NOER_Msk     (0x1U << TAMP_CR3_ITAMP12NOER_Pos)                 /*!< 0x00000800U */
#define TAMP_CR3_ITAMP12NOER         TAMP_CR3_ITAMP12NOER_Msk
#define TAMP_CR3_ITAMP14NOER_Pos     (13U)
#define TAMP_CR3_ITAMP14NOER_Msk     (0x1U << TAMP_CR3_ITAMP14NOER_Pos)                 /*!< 0x00002000U */
#define TAMP_CR3_ITAMP14NOER         TAMP_CR3_ITAMP14NOER_Msk
#define TAMP_CR3_ITAMP15NOER_Pos     (14U)
#define TAMP_CR3_ITAMP15NOER_Msk     (0x1U << TAMP_CR3_ITAMP15NOER_Pos)                 /*!< 0x00004000U */
#define TAMP_CR3_ITAMP15NOER         TAMP_CR3_ITAMP15NOER_Msk

/********************  Bits definition for TAMP_FLTCR register  ***************/
#define TAMP_FLTCR_TAMPFREQ_Pos      (0U)
#define TAMP_FLTCR_TAMPFREQ_Msk      (0x7U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000007U */
#define TAMP_FLTCR_TAMPFREQ          TAMP_FLTCR_TAMPFREQ_Msk
#define TAMP_FLTCR_TAMPFREQ_0        (0x1U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000001U */
#define TAMP_FLTCR_TAMPFREQ_1        (0x2U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000002U */
#define TAMP_FLTCR_TAMPFREQ_2        (0x4U << TAMP_FLTCR_TAMPFREQ_Pos)                  /*!< 0x00000004U */
#define TAMP_FLTCR_TAMPFLT_Pos       (3U)
#define TAMP_FLTCR_TAMPFLT_Msk       (0x3U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000018U */
#define TAMP_FLTCR_TAMPFLT           TAMP_FLTCR_TAMPFLT_Msk
#define TAMP_FLTCR_TAMPFLT_0         (0x1U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000008U */
#define TAMP_FLTCR_TAMPFLT_1         (0x2U << TAMP_FLTCR_TAMPFLT_Pos)                   /*!< 0x00000010U */
#define TAMP_FLTCR_TAMPPRCH_Pos      (5U)
#define TAMP_FLTCR_TAMPPRCH_Msk      (0x3U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000060U */
#define TAMP_FLTCR_TAMPPRCH          TAMP_FLTCR_TAMPPRCH_Msk
#define TAMP_FLTCR_TAMPPRCH_0        (0x1U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000020U */
#define TAMP_FLTCR_TAMPPRCH_1        (0x2U << TAMP_FLTCR_TAMPPRCH_Pos)                  /*!< 0x00000040U */
#define TAMP_FLTCR_TAMPPUDIS_Pos     (7U)
#define TAMP_FLTCR_TAMPPUDIS_Msk     (0x1U << TAMP_FLTCR_TAMPPUDIS_Pos)                 /*!< 0x00000080U */
#define TAMP_FLTCR_TAMPPUDIS         TAMP_FLTCR_TAMPPUDIS_Msk

/********************  Bits definition for TAMP_ATCR1 register  ***************/
#define TAMP_ATCR1_TAMP1AM_Pos       (0U)
#define TAMP_ATCR1_TAMP1AM_Msk       (0x1U<<TAMP_ATCR1_TAMP1AM_Pos)                     /*!< 0x00000001U */
#define TAMP_ATCR1_TAMP1AM           TAMP_ATCR1_TAMP1AM_Msk
#define TAMP_ATCR1_TAMP2AM_Pos       (1U)
#define TAMP_ATCR1_TAMP2AM_Msk       (0x1U<<TAMP_ATCR1_TAMP2AM_Pos)                     /*!< 0x00000002U */
#define TAMP_ATCR1_TAMP2AM           TAMP_ATCR1_TAMP2AM_Msk
#define TAMP_ATCR1_TAMP3AM_Pos       (2U)
#define TAMP_ATCR1_TAMP3AM_Msk       (0x1U<<TAMP_ATCR1_TAMP3AM_Pos)                     /*!< 0x00000004U */
#define TAMP_ATCR1_TAMP3AM           TAMP_ATCR1_TAMP3AM_Msk
#define TAMP_ATCR1_TAMP4AM_Pos       (3U)
#define TAMP_ATCR1_TAMP4AM_Msk       (0x1U<<TAMP_ATCR1_TAMP4AM_Pos)                     /*!< 0x00000008U */
#define TAMP_ATCR1_TAMP4AM           TAMP_ATCR1_TAMP4AM_Msk
#define TAMP_ATCR1_TAMP5AM_Pos       (4U)
#define TAMP_ATCR1_TAMP5AM_Msk       (0x1U<<TAMP_ATCR1_TAMP5AM_Pos)                     /*!< 0x00000010U */
#define TAMP_ATCR1_TAMP5AM           TAMP_ATCR1_TAMP5AM_Msk
#define TAMP_ATCR1_TAMP6AM_Pos       (5U)
#define TAMP_ATCR1_TAMP6AM_Msk       (0x1U<<TAMP_ATCR1_TAMP6AM_Pos)                     /*!< 0x00000010U */
#define TAMP_ATCR1_TAMP6AM           TAMP_ATCR1_TAMP6AM_Msk
#define TAMP_ATCR1_TAMP7AM_Pos       (6U)
#define TAMP_ATCR1_TAMP7AM_Msk       (0x1U<<TAMP_ATCR1_TAMP7AM_Pos)                     /*!< 0x00000040U */
#define TAMP_ATCR1_TAMP7AM           TAMP_ATCR1_TAMP7AM_Msk
#define TAMP_ATCR1_TAMP8AM_Pos       (7U)
#define TAMP_ATCR1_TAMP8AM_Msk       (0x1U<<TAMP_ATCR1_TAMP8AM_Pos)                     /*!< 0x00000080U */
#define TAMP_ATCR1_TAMP8AM           TAMP_ATCR1_TAMP8AM_Msk
#define TAMP_ATCR1_ATOSEL1_Pos       (8U)
#define TAMP_ATCR1_ATOSEL1_Msk       (0x3U<<TAMP_ATCR1_ATOSEL1_Pos)                     /*!< 0x00000300U */
#define TAMP_ATCR1_ATOSEL1            TAMP_ATCR1_ATOSEL1_Msk
#define TAMP_ATCR1_ATOSEL1_0         (0x1U << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000100U */
#define TAMP_ATCR1_ATOSEL1_1         (0x2U << TAMP_ATCR1_ATOSEL1_Pos)                   /*!< 0x00000200U */
#define TAMP_ATCR1_ATOSEL2_Pos       (10U)
#define TAMP_ATCR1_ATOSEL2_Msk       (0x3U<<TAMP_ATCR1_ATOSEL2_Pos)                     /*!< 0x00000C00U */
#define TAMP_ATCR1_ATOSEL2            TAMP_ATCR1_ATOSEL2_Msk
#define TAMP_ATCR1_ATOSEL2_0         (0x1U << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000400U */
#define TAMP_ATCR1_ATOSEL2_1         (0x2U << TAMP_ATCR1_ATOSEL2_Pos)                   /*!< 0x00000800U */
#define TAMP_ATCR1_ATOSEL3_Pos       (12U)
#define TAMP_ATCR1_ATOSEL3_Msk       (0x3U<<TAMP_ATCR1_ATOSEL3_Pos)                     /*!< 0x00003000U */
#define TAMP_ATCR1_ATOSEL3            TAMP_ATCR1_ATOSEL3_Msk
#define TAMP_ATCR1_ATOSEL3_0         (0x1U << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00001000U */
#define TAMP_ATCR1_ATOSEL3_1         (0x2U << TAMP_ATCR1_ATOSEL3_Pos)                   /*!< 0x00002000U */
#define TAMP_ATCR1_ATOSEL4_Pos       (14U)
#define TAMP_ATCR1_ATOSEL4_Msk       (0x3U<<TAMP_ATCR1_ATOSEL4_Pos)                     /*!< 0x0000C000U */
#define TAMP_ATCR1_ATOSEL4            TAMP_ATCR1_ATOSEL4_Msk
#define TAMP_ATCR1_ATOSEL4_0         (0x1U << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00004000U */
#define TAMP_ATCR1_ATOSEL4_1         (0x2U << TAMP_ATCR1_ATOSEL4_Pos)                   /*!< 0x00008000U */
#define TAMP_ATCR1_ATCKSEL_Pos       (16U)
#define TAMP_ATCR1_ATCKSEL_Msk       (0x7U<<TAMP_ATCR1_ATCKSEL_Pos)                     /*!< 0x00070000U */
#define TAMP_ATCR1_ATCKSEL            TAMP_ATCR1_ATCKSEL_Msk
#define TAMP_ATCR1_ATCKSEL_0         (0x1U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00010000U */
#define TAMP_ATCR1_ATCKSEL_1         (0x2U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00020000U */
#define TAMP_ATCR1_ATCKSEL_2         (0x4U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00040000U */
#define TAMP_ATCR1_ATCKSEL_3         (0x8U << TAMP_ATCR1_ATCKSEL_Pos)                   /*!< 0x00080000U */
#define TAMP_ATCR1_ATPER_Pos         (24U)
#define TAMP_ATCR1_ATPER_Msk         (0xFU<<TAMP_ATCR1_ATPER_Pos)                       /*!< 0x0F000000U */
#define TAMP_ATCR1_ATPER              TAMP_ATCR1_ATPER_Msk
#define TAMP_ATCR1_ATPER_0           (0x1U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x01000000U */
#define TAMP_ATCR1_ATPER_1           (0x2U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x02000000U */
#define TAMP_ATCR1_ATPER_2           (0x4U << TAMP_ATCR1_ATPER_Pos)                     /*!< 0x04000000U */
#define TAMP_ATCR1_ATOSHARE_Pos      (30U)
#define TAMP_ATCR1_ATOSHARE_Msk      (0x1U<<TAMP_ATCR1_ATOSHARE_Pos)                    /*!< 0x40000000U */
#define TAMP_ATCR1_ATOSHARE          TAMP_ATCR1_ATOSHARE_Msk
#define TAMP_ATCR1_FLTEN_Pos         (31U)
#define TAMP_ATCR1_FLTEN_Msk         (0x1U<<TAMP_ATCR1_FLTEN_Pos)                       /*!< 0x80000000U */
#define TAMP_ATCR1_FLTEN             TAMP_ATCR1_FLTEN_Msk

/********************  Bits definition for TAMP_ATSEEDR register  ******************/
#define TAMP_ATSEEDR_SEED_Pos        (0U)
#define TAMP_ATSEEDR_SEED_Msk        (0xFFFFFFFFU << TAMP_ATSEEDR_SEED_Pos)             /*!< 0xFFFFFFFFU */
#define TAMP_ATSEEDR_SEED            TAMP_ATSEEDR_SEED_Msk

/********************  Bits definition for TAMP_ATOR register  ******************/
#define TAMP_ATOR_PRNG_Pos           (0U)
#define TAMP_ATOR_PRNG_Msk           (0xFFU << TAMP_ATOR_PRNG_Pos)                      /*!< 0x000000FFU */
#define TAMP_ATOR_PRNG               TAMP_ATOR_PRNG_Msk
#define TAMP_ATOR_PRNG_0             (0x1U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000001U */
#define TAMP_ATOR_PRNG_1             (0x2U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000002U */
#define TAMP_ATOR_PRNG_2             (0x4U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000004U */
#define TAMP_ATOR_PRNG_3             (0x8U << TAMP_ATOR_PRNG_Pos)                      /*!< 0x00000008U */
#define TAMP_ATOR_PRNG_4             (0x10U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000010U */
#define TAMP_ATOR_PRNG_5             (0x20U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000020U */
#define TAMP_ATOR_PRNG_6             (0x40U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000040U */
#define TAMP_ATOR_PRNG_7             (0x80U << TAMP_ATOR_PRNG_Pos)                     /*!< 0x00000080U */
#define TAMP_ATOR_SEEDF_Pos          (14U)
#define TAMP_ATOR_SEEDF_Msk          (1U << TAMP_ATOR_SEEDF_Pos)                       /*!< 0x00004000U */
#define TAMP_ATOR_SEEDF              TAMP_ATOR_SEEDF_Msk
#define TAMP_ATOR_INITS_Pos          (15U)
#define TAMP_ATOR_INITS_Msk          (1U << TAMP_ATOR_INITS_Pos)                       /*!< 0x00008000U */
#define TAMP_ATOR_INITS              TAMP_ATOR_INITS_Msk

/********************  Bits definition for TAMP_ATCR2 register  ***************/
#define TAMP_ATCR2_ATOSEL1_Pos       (8U)
#define TAMP_ATCR2_ATOSEL1_Msk       (0x7U<<TAMP_ATCR2_ATOSEL1_Pos)                    /*!< 0x00000700U */
#define TAMP_ATCR2_ATOSEL1            TAMP_ATCR2_ATOSEL1_Msk
#define TAMP_ATCR2_ATOSEL1_0         (0x1U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000100U */
#define TAMP_ATCR2_ATOSEL1_1         (0x2U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000200U */
#define TAMP_ATCR2_ATOSEL1_2         (0x4U << TAMP_ATCR2_ATOSEL1_Pos)                  /*!< 0x00000400U */
#define TAMP_ATCR2_ATOSEL2_Pos       (11U)
#define TAMP_ATCR2_ATOSEL2_Msk       (0x7U<<TAMP_ATCR2_ATOSEL2_Pos)                    /*!< 0x00003800U */
#define TAMP_ATCR2_ATOSEL2            TAMP_ATCR2_ATOSEL2_Msk
#define TAMP_ATCR2_ATOSEL2_0         (0x1U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00000800U */
#define TAMP_ATCR2_ATOSEL2_1         (0x2U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00001000U */
#define TAMP_ATCR2_ATOSEL2_2         (0x4U << TAMP_ATCR2_ATOSEL2_Pos)                  /*!< 0x00002000U */
#define TAMP_ATCR2_ATOSEL3_Pos       (14U)
#define TAMP_ATCR2_ATOSEL3_Msk       (0x7U<<TAMP_ATCR2_ATOSEL3_Pos)                    /*!< 0x0001C000U */
#define TAMP_ATCR2_ATOSEL3            TAMP_ATCR2_ATOSEL3_Msk
#define TAMP_ATCR2_ATOSEL3_0         (0x1U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00004000U */
#define TAMP_ATCR2_ATOSEL3_1         (0x2U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00008000U */
#define TAMP_ATCR2_ATOSEL3_2         (0x4U << TAMP_ATCR2_ATOSEL3_Pos)                  /*!< 0x00010000U */
#define TAMP_ATCR2_ATOSEL4_Pos       (17U)
#define TAMP_ATCR2_ATOSEL4_Msk       (0x7U<<TAMP_ATCR2_ATOSEL4_Pos)                    /*!< 0x000E0000U */
#define TAMP_ATCR2_ATOSEL4            TAMP_ATCR2_ATOSEL4_Msk
#define TAMP_ATCR2_ATOSEL4_0         (0x1U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00020000U */
#define TAMP_ATCR2_ATOSEL4_1         (0x2U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00040000U */
#define TAMP_ATCR2_ATOSEL4_2         (0x4U << TAMP_ATCR2_ATOSEL4_Pos)                  /*!< 0x00080000U */
#define TAMP_ATCR2_ATOSEL5_Pos       (20U)
#define TAMP_ATCR2_ATOSEL5_Msk       (0x7U<<TAMP_ATCR2_ATOSEL5_Pos)                    /*!< 0x00700000U */
#define TAMP_ATCR2_ATOSEL5            TAMP_ATCR2_ATOSEL5_Msk
#define TAMP_ATCR2_ATOSEL5_0         (0x1U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00100000U */
#define TAMP_ATCR2_ATOSEL5_1         (0x2U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00200000U */
#define TAMP_ATCR2_ATOSEL5_2         (0x4U << TAMP_ATCR2_ATOSEL5_Pos)                  /*!< 0x00400000U */
#define TAMP_ATCR2_ATOSEL6_Pos       (23U)
#define TAMP_ATCR2_ATOSEL6_Msk       (0x7U<<TAMP_ATCR2_ATOSEL6_Pos)                    /*!< 0x03800000U */
#define TAMP_ATCR2_ATOSEL6            TAMP_ATCR2_ATOSEL6_Msk
#define TAMP_ATCR2_ATOSEL6_0         (0x1U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x00800000U */
#define TAMP_ATCR2_ATOSEL6_1         (0x2U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x01000000U */
#define TAMP_ATCR2_ATOSEL6_2         (0x4U << TAMP_ATCR2_ATOSEL6_Pos)                  /*!< 0x02000000U */
#define TAMP_ATCR2_ATOSEL7_Pos       (26U)
#define TAMP_ATCR2_ATOSEL7_Msk       (0x7U<<TAMP_ATCR2_ATOSEL7_Pos)                    /*!< 0x1C000000U */
#define TAMP_ATCR2_ATOSEL7            TAMP_ATCR2_ATOSEL7_Msk
#define TAMP_ATCR2_ATOSEL7_0         (0x1U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x04000000U */
#define TAMP_ATCR2_ATOSEL7_1         (0x2U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x08000000U */
#define TAMP_ATCR2_ATOSEL7_2         (0x4U << TAMP_ATCR2_ATOSEL7_Pos)                  /*!< 0x10000000U */
#define TAMP_ATCR2_ATOSEL8_Pos       (29U)
#define TAMP_ATCR2_ATOSEL8_Msk       (0x7U<<TAMP_ATCR2_ATOSEL8_Pos)                    /*!< 0xE0000000U */
#define TAMP_ATCR2_ATOSEL8            TAMP_ATCR2_ATOSEL8_Msk
#define TAMP_ATCR2_ATOSEL8_0         (0x1U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x20000000U */
#define TAMP_ATCR2_ATOSEL8_1         (0x2U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x40000000U */
#define TAMP_ATCR2_ATOSEL8_2         (0x4U << TAMP_ATCR2_ATOSEL8_Pos)                  /*!< 0x80000000U */

/********************  Bits definition for TAMP_SECCFGR register  *************/
#define TAMP_SECCFGR_BKPRWSEC_Pos     (0U)
#define TAMP_SECCFGR_BKPRWSEC_Msk     (0xFFU << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x000000FFU */
#define TAMP_SECCFGR_BKPRWSEC         TAMP_SECCFGR_BKPRWSEC_Msk
#define TAMP_SECCFGR_BKPRWSEC_0       (0x1U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000001U */
#define TAMP_SECCFGR_BKPRWSEC_1       (0x2U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000002U */
#define TAMP_SECCFGR_BKPRWSEC_2       (0x4U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000004U */
#define TAMP_SECCFGR_BKPRWSEC_3       (0x8U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000008U */
#define TAMP_SECCFGR_BKPRWSEC_4       (0x1U << TAMP_SECCFGR_BKPRWSEC_Pos)                /*!< 0x00000010U */
#define TAMP_SECCFGR_BKPRWSEC_5       (0x20U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000020U */
#define TAMP_SECCFGR_BKPRWSEC_6       (0x40U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000040U */
#define TAMP_SECCFGR_BKPRWSEC_7       (0x80U << TAMP_SECCFGR_BKPRWSEC_Pos)               /*!< 0x00000080U */
#define TAMP_SECCFGR_CNT2SEC_Pos      (14U)
#define TAMP_SECCFGR_CNT2SEC_Msk      (0x1U << TAMP_SECCFGR_CNT2SEC_Pos)                  /*!< 0x00004000U */
#define TAMP_SECCFGR_CNT2SEC          TAMP_SECCFGR_CNT2SEC_Msk
#define TAMP_SECCFGR_CNT1SEC_Pos      (15U)
#define TAMP_SECCFGR_CNT1SEC_Msk      (0x1U << TAMP_SECCFGR_CNT1SEC_Pos)                  /*!< 0x00008000U */
#define TAMP_SECCFGR_CNT1SEC          TAMP_SECCFGR_CNT1SEC_Msk
#define TAMP_SECCFGR_BKPWSEC_Pos      (16U)
#define TAMP_SECCFGR_BKPWSEC_Msk      (0xFFU << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00FF0000U */
#define TAMP_SECCFGR_BKPWSEC          TAMP_SECCFGR_BKPWSEC_Msk
#define TAMP_SECCFGR_BKPWSEC_0        (0x1U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00010000U */
#define TAMP_SECCFGR_BKPWSEC_1        (0x2U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00020000U */
#define TAMP_SECCFGR_BKPWSEC_2        (0x4U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00040000U */
#define TAMP_SECCFGR_BKPWSEC_3        (0x8U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00080000U */
#define TAMP_SECCFGR_BKPWSEC_4        (0x1U << TAMP_SECCFGR_BKPWSEC_Pos)                 /*!< 0x00100000U */
#define TAMP_SECCFGR_BKPWSEC_5        (0x20U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00200000U */
#define TAMP_SECCFGR_BKPWSEC_6        (0x40U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00400000U */
#define TAMP_SECCFGR_BKPWSEC_7        (0x80U << TAMP_SECCFGR_BKPWSEC_Pos)                /*!< 0x00800000U */
#define TAMP_SECCFGR_SMKLOCK_Pos      (30U)
#define TAMP_SECCFGR_SMKLOCK_Msk      (0x1U << TAMP_SECCFGR_SMKLOCK_Pos)                 /*!< 0x40000000U */
#define TAMP_SECCFGR_SMKLOCK          TAMP_SECCFGR_SMKLOCK_Msk
#define TAMP_SECCFGR_TAMPSEC_Pos      (31U)
#define TAMP_SECCFGR_TAMPSEC_Msk      (0x1U << TAMP_SECCFGR_TAMPSEC_Pos)                 /*!< 0x80000000U */
#define TAMP_SECCFGR_TAMPSEC          TAMP_SECCFGR_TAMPSEC_Msk

/********************  Bits definition for TAMP_PRIVCR register  ************/
#define TAMP_PRIVCR_CNT2PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT2PRIV_Msk    (0x1U << TAMP_PRIVCR_CNT2PRIV_Pos)                /*!< 0x00004000U */
#define TAMP_PRIVCR_CNT2PRIV        TAMP_PRIVCR_CNT2PRIV_Msk
#define TAMP_PRIVCR_CNT1PRIV_Pos    (15U)
#define TAMP_PRIVCR_CNT1PRIV_Msk    (0x1U << TAMP_PRIVCR_CNT1PRIV_Pos)                /*!< 0x00008000U */
#define TAMP_PRIVCR_CNT1PRIV        TAMP_PRIVCR_CNT1PRIV_Msk
#define TAMP_PRIVCR_BKPRWPRIV_Pos   (29U)
#define TAMP_PRIVCR_BKPRWPRIV_Msk   (0x1U << TAMP_PRIVCR_BKPRWPRIV_Pos)               /*!< 0x20000000U */
#define TAMP_PRIVCR_BKPRWPRIV       TAMP_PRIVCR_BKPRWPRIV_Msk
#define TAMP_PRIVCR_BKPWPRIV_Pos    (30U)
#define TAMP_PRIVCR_BKPWPRIV_Msk    (0x1U << TAMP_PRIVCR_BKPWPRIV_Pos)                /*!< 0x40000000U */
#define TAMP_PRIVCR_BKPWPRIV        TAMP_PRIVCR_BKPWPRIV_Msk
#define TAMP_PRIVCR_TAMPPRIV_Pos    (31U)
#define TAMP_PRIVCR_TAMPPRIV_Msk    (0x1U << TAMP_PRIVCR_TAMPPRIV_Pos)                /*!< 0x80000000U */
#define TAMP_PRIVCR_TAMPPRIV        TAMP_PRIVCR_TAMPPRIV_Msk

/********************  Bits definition for TAMP_IER register  *****************/
#define TAMP_IER_TAMP1IE_Pos         (0U)
#define TAMP_IER_TAMP1IE_Msk         (0x1U << TAMP_IER_TAMP1IE_Pos)                    /*!< 0x00000001U */
#define TAMP_IER_TAMP1IE             TAMP_IER_TAMP1IE_Msk
#define TAMP_IER_TAMP2IE_Pos         (1U)
#define TAMP_IER_TAMP2IE_Msk         (0x1U << TAMP_IER_TAMP2IE_Pos)                    /*!< 0x00000002U */
#define TAMP_IER_TAMP2IE             TAMP_IER_TAMP2IE_Msk
#define TAMP_IER_TAMP3IE_Pos         (2U)
#define TAMP_IER_TAMP3IE_Msk         (0x1U << TAMP_IER_TAMP3IE_Pos)                    /*!< 0x00000004U */
#define TAMP_IER_TAMP3IE             TAMP_IER_TAMP3IE_Msk
#define TAMP_IER_TAMP4IE_Pos         (3U)
#define TAMP_IER_TAMP4IE_Msk         (0x1U << TAMP_IER_TAMP4IE_Pos)                    /*!< 0x00000008U */
#define TAMP_IER_TAMP4IE             TAMP_IER_TAMP4IE_Msk
#define TAMP_IER_TAMP5IE_Pos         (4U)
#define TAMP_IER_TAMP5IE_Msk         (0x1U << TAMP_IER_TAMP5IE_Pos)                    /*!< 0x00000010U */
#define TAMP_IER_TAMP5IE             TAMP_IER_TAMP5IE_Msk
#define TAMP_IER_TAMP6IE_Pos         (5U)
#define TAMP_IER_TAMP6IE_Msk         (0x1U << TAMP_IER_TAMP6IE_Pos)                    /*!< 0x00000020U */
#define TAMP_IER_TAMP6IE             TAMP_IER_TAMP6IE_Msk
#define TAMP_IER_TAMP7IE_Pos         (6U)
#define TAMP_IER_TAMP7IE_Msk         (0x1U << TAMP_IER_TAMP7IE_Pos)                    /*!< 0x00000040U */
#define TAMP_IER_TAMP7IE             TAMP_IER_TAMP7IE_Msk
#define TAMP_IER_TAMP8IE_Pos         (7U)
#define TAMP_IER_TAMP8IE_Msk         (0x1U << TAMP_IER_TAMP8IE_Pos)                    /*!< 0x00000080U */
#define TAMP_IER_TAMP8IE             TAMP_IER_TAMP8IE_Msk
#define TAMP_IER_ITAMP1IE_Pos        (16U)
#define TAMP_IER_ITAMP1IE_Msk        (0x1U << TAMP_IER_ITAMP1IE_Pos)                   /*!< 0x00010000U */
#define TAMP_IER_ITAMP1IE            TAMP_IER_ITAMP1IE_Msk
#define TAMP_IER_ITAMP2IE_Pos        (17U)
#define TAMP_IER_ITAMP2IE_Msk        (0x1U << TAMP_IER_ITAMP2IE_Pos)                   /*!< 0x00020000U */
#define TAMP_IER_ITAMP2IE            TAMP_IER_ITAMP2IE_Msk
#define TAMP_IER_ITAMP3IE_Pos        (18U)
#define TAMP_IER_ITAMP3IE_Msk        (0x1U << TAMP_IER_ITAMP3IE_Pos)                   /*!< 0x00040000U */
#define TAMP_IER_ITAMP3IE            TAMP_IER_ITAMP3IE_Msk
#define TAMP_IER_ITAMP4IE_Pos        (19U)
#define TAMP_IER_ITAMP4IE_Msk        (0x1U << TAMP_IER_ITAMP4IE_Pos)                   /*!< 0x00040000U */
#define TAMP_IER_ITAMP4IE            TAMP_IER_ITAMP4IE_Msk
#define TAMP_IER_ITAMP5IE_Pos        (20U)
#define TAMP_IER_ITAMP5IE_Msk        (0x1U << TAMP_IER_ITAMP5IE_Pos)                   /*!< 0x00100000U */
#define TAMP_IER_ITAMP5IE            TAMP_IER_ITAMP5IE_Msk
#define TAMP_IER_ITAMP6IE_Pos        (21U)
#define TAMP_IER_ITAMP6IE_Msk        (0x1U << TAMP_IER_ITAMP6IE_Pos)                   /*!< 0x00200000U */
#define TAMP_IER_ITAMP6IE            TAMP_IER_ITAMP6IE_Msk
#define TAMP_IER_ITAMP7IE_Pos        (22U)
#define TAMP_IER_ITAMP7IE_Msk        (0x1U << TAMP_IER_ITAMP7IE_Pos)                   /*!< 0x00400000U */
#define TAMP_IER_ITAMP7IE            TAMP_IER_ITAMP7IE_Msk
#define TAMP_IER_ITAMP8IE_Pos        (23U)
#define TAMP_IER_ITAMP8IE_Msk        (0x1U << TAMP_IER_ITAMP8IE_Pos)                   /*!< 0x00800000U */
#define TAMP_IER_ITAMP8IE            TAMP_IER_ITAMP8IE_Msk
#define TAMP_IER_ITAMP9IE_Pos        (24U)
#define TAMP_IER_ITAMP9IE_Msk        (0x1U << TAMP_IER_ITAMP9IE_Pos)                   /*!< 0x01000000U */
#define TAMP_IER_ITAMP9IE            TAMP_IER_ITAMP9IE_Msk
#define TAMP_IER_ITAMP10IE_Pos       (25U)
#define TAMP_IER_ITAMP10IE_Msk       (0x1U << TAMP_IER_ITAMP10IE_Pos)                  /*!< 0x02000000U */
#define TAMP_IER_ITAMP10IE           TAMP_IER_ITAMP10IE_Msk
#define TAMP_IER_ITAMP11IE_Pos       (26U)
#define TAMP_IER_ITAMP11IE_Msk       (0x1U << TAMP_IER_ITAMP11IE_Pos)                  /*!< 0x04000000U */
#define TAMP_IER_ITAMP11IE           TAMP_IER_ITAMP11IE_Msk
#define TAMP_IER_ITAMP12IE_Pos       (27U)
#define TAMP_IER_ITAMP12IE_Msk       (0x1U << TAMP_IER_ITAMP12IE_Pos)                  /*!< 0x08000000U */
#define TAMP_IER_ITAMP12IE           TAMP_IER_ITAMP12IE_Msk
#define TAMP_IER_ITAMP14IE_Pos       (29U)
#define TAMP_IER_ITAMP14IE_Msk       (0x1U << TAMP_IER_ITAMP14IE_Pos)                  /*!< 0x20000000U */
#define TAMP_IER_ITAMP14IE           TAMP_IER_ITAMP14IE_Msk
#define TAMP_IER_ITAMP15IE_Pos       (30U)
#define TAMP_IER_ITAMP15IE_Msk       (0x1U << TAMP_IER_ITAMP15IE_Pos)                  /*!< 0x40000000U */
#define TAMP_IER_ITAMP15IE           TAMP_IER_ITAMP15IE_Msk

/********************  Bits definition for TAMP_SR register  *****************/
#define TAMP_SR_TAMP1F_Pos           (0U)
#define TAMP_SR_TAMP1F_Msk           (0x1U << TAMP_SR_TAMP1F_Pos)                      /*!< 0x00000001U */
#define TAMP_SR_TAMP1F               TAMP_SR_TAMP1F_Msk
#define TAMP_SR_TAMP2F_Pos           (1U)
#define TAMP_SR_TAMP2F_Msk           (0x1U << TAMP_SR_TAMP2F_Pos)                      /*!< 0x00000002U */
#define TAMP_SR_TAMP2F               TAMP_SR_TAMP2F_Msk
#define TAMP_SR_TAMP3F_Pos           (2U)
#define TAMP_SR_TAMP3F_Msk           (0x1U << TAMP_SR_TAMP3F_Pos)                      /*!< 0x00000004U */
#define TAMP_SR_TAMP3F               TAMP_SR_TAMP3F_Msk
#define TAMP_SR_TAMP4F_Pos           (3U)
#define TAMP_SR_TAMP4F_Msk           (0x1U << TAMP_SR_TAMP4F_Pos)                      /*!< 0x00000008U */
#define TAMP_SR_TAMP4F               TAMP_SR_TAMP4F_Msk
#define TAMP_SR_TAMP5F_Pos           (4U)
#define TAMP_SR_TAMP5F_Msk           (0x1U << TAMP_SR_TAMP5F_Pos)                      /*!< 0x00000010U */
#define TAMP_SR_TAMP5F               TAMP_SR_TAMP5F_Msk
#define TAMP_SR_TAMP6F_Pos           (5U)
#define TAMP_SR_TAMP6F_Msk           (0x1U << TAMP_SR_TAMP6F_Pos)                      /*!< 0x00000020U */
#define TAMP_SR_TAMP6F               TAMP_SR_TAMP6F_Msk
#define TAMP_SR_TAMP7F_Pos           (6U)
#define TAMP_SR_TAMP7F_Msk           (0x1U << TAMP_SR_TAMP7F_Pos)                      /*!< 0x00000040U */
#define TAMP_SR_TAMP7F               TAMP_SR_TAMP7F_Msk
#define TAMP_SR_TAMP8F_Pos           (7U)
#define TAMP_SR_TAMP8F_Msk           (0x1U << TAMP_SR_TAMP8F_Pos)                      /*!< 0x00000080U */
#define TAMP_SR_TAMP8F               TAMP_SR_TAMP8F_Msk
#define TAMP_SR_ITAMP1F_Pos          (16U)
#define TAMP_SR_ITAMP1F_Msk          (0x1U << TAMP_SR_ITAMP1F_Pos)                     /*!< 0x00010000U */
#define TAMP_SR_ITAMP1F              TAMP_SR_ITAMP1F_Msk
#define TAMP_SR_ITAMP2F_Pos          (17U)
#define TAMP_SR_ITAMP2F_Msk          (0x1U << TAMP_SR_ITAMP2F_Pos)                     /*!< 0x00020000U */
#define TAMP_SR_ITAMP2F              TAMP_SR_ITAMP2F_Msk
#define TAMP_SR_ITAMP3F_Pos          (18U)
#define TAMP_SR_ITAMP3F_Msk          (0x1U << TAMP_SR_ITAMP3F_Pos)                     /*!< 0x00040000U */
#define TAMP_SR_ITAMP3F              TAMP_SR_ITAMP3F_Msk
#define TAMP_SR_ITAMP4F_Pos          (19U)
#define TAMP_SR_ITAMP4F_Msk          (0x1U << TAMP_SR_ITAMP4F_Pos)                     /*!< 0x00040000U */
#define TAMP_SR_ITAMP4F              TAMP_SR_ITAMP4F_Msk
#define TAMP_SR_ITAMP5F_Pos          (20U)
#define TAMP_SR_ITAMP5F_Msk          (0x1U << TAMP_SR_ITAMP5F_Pos)                     /*!< 0x00100000U */
#define TAMP_SR_ITAMP5F              TAMP_SR_ITAMP5F_Msk
#define TAMP_SR_ITAMP6F_Pos          (21U)
#define TAMP_SR_ITAMP6F_Msk          (0x1U << TAMP_SR_ITAMP6F_Pos)                     /*!< 0x00200000U */
#define TAMP_SR_ITAMP6F              TAMP_SR_ITAMP6F_Msk
#define TAMP_SR_ITAMP7F_Pos          (22U)
#define TAMP_SR_ITAMP7F_Msk          (0x1U << TAMP_SR_ITAMP7F_Pos)                     /*!< 0x00400000U */
#define TAMP_SR_ITAMP7F              TAMP_SR_ITAMP7F_Msk
#define TAMP_SR_ITAMP8F_Pos          (23U)
#define TAMP_SR_ITAMP8F_Msk          (0x1U << TAMP_SR_ITAMP8F_Pos)                     /*!< 0x00800000U */
#define TAMP_SR_ITAMP8F              TAMP_SR_ITAMP8F_Msk
#define TAMP_SR_ITAMP9F_Pos          (24U)
#define TAMP_SR_ITAMP9F_Msk          (0x1U << TAMP_SR_ITAMP9F_Pos)                     /*!< 0x01000000U */
#define TAMP_SR_ITAMP9F              TAMP_SR_ITAMP9F_Msk
#define TAMP_SR_ITAMP10F_Pos         (25U)
#define TAMP_SR_ITAMP10F_Msk         (0x1U << TAMP_SR_ITAMP10F_Pos)                    /*!< 0x02000000U */
#define TAMP_SR_ITAMP10F             TAMP_SR_ITAMP10F_Msk
#define TAMP_SR_ITAMP11F_Pos         (26U)
#define TAMP_SR_ITAMP11F_Msk         (0x1U << TAMP_SR_ITAMP11F_Pos)                    /*!< 0x04000000U */
#define TAMP_SR_ITAMP11F             TAMP_SR_ITAMP11F_Msk
#define TAMP_SR_ITAMP12F_Pos         (27U)
#define TAMP_SR_ITAMP12F_Msk         (0x1U << TAMP_SR_ITAMP12F_Pos)                    /*!< 0x08000000U */
#define TAMP_SR_ITAMP12F             TAMP_SR_ITAMP12F_Msk
#define TAMP_SR_ITAMP14F_Pos         (29U)
#define TAMP_SR_ITAMP14F_Msk         (0x1U << TAMP_SR_ITAMP14F_Pos)                    /*!< 0x20000000U */
#define TAMP_SR_ITAMP14F             TAMP_SR_ITAMP14F_Msk
#define TAMP_SR_ITAMP15F_Pos         (30U)
#define TAMP_SR_ITAMP15F_Msk         (0x1U << TAMP_SR_ITAMP15F_Pos)                    /*!< 0x40000000U */
#define TAMP_SR_ITAMP15F             TAMP_SR_ITAMP15F_Msk

/********************  Bits definition for TAMP_MISR register  ****************/
#define TAMP_MISR_TAMP1MF_Pos        (0U)
#define TAMP_MISR_TAMP1MF_Msk        (0x1U << TAMP_MISR_TAMP1MF_Pos)                   /*!< 0x00000001U */
#define TAMP_MISR_TAMP1MF            TAMP_MISR_TAMP1MF_Msk
#define TAMP_MISR_TAMP2MF_Pos        (1U)
#define TAMP_MISR_TAMP2MF_Msk        (0x1U << TAMP_MISR_TAMP2MF_Pos)                   /*!< 0x00000002U */
#define TAMP_MISR_TAMP2MF            TAMP_MISR_TAMP2MF_Msk
#define TAMP_MISR_TAMP3MF_Pos        (2U)
#define TAMP_MISR_TAMP3MF_Msk        (0x1U << TAMP_MISR_TAMP3MF_Pos)                   /*!< 0x00000004U */
#define TAMP_MISR_TAMP3MF            TAMP_MISR_TAMP3MF_Msk
#define TAMP_MISR_TAMP4MF_Pos        (3U)
#define TAMP_MISR_TAMP4MF_Msk        (0x1U << TAMP_MISR_TAMP4MF_Pos)                   /*!< 0x00000008U */
#define TAMP_MISR_TAMP4MF            TAMP_MISR_TAMP4MF_Msk
#define TAMP_MISR_TAMP5MF_Pos        (4U)
#define TAMP_MISR_TAMP5MF_Msk        (0x1U << TAMP_MISR_TAMP5MF_Pos)                   /*!< 0x00000010U */
#define TAMP_MISR_TAMP5MF            TAMP_MISR_TAMP5MF_Msk
#define TAMP_MISR_TAMP6MF_Pos        (5U)
#define TAMP_MISR_TAMP6MF_Msk        (0x1U << TAMP_MISR_TAMP6MF_Pos)                   /*!< 0x00000020U */
#define TAMP_MISR_TAMP6MF            TAMP_MISR_TAMP6MF_Msk
#define TAMP_MISR_TAMP7MF_Pos        (6U)
#define TAMP_MISR_TAMP7MF_Msk        (0x1U << TAMP_MISR_TAMP7MF_Pos)                   /*!< 0x00000040U */
#define TAMP_MISR_TAMP7MF            TAMP_MISR_TAMP7MF_Msk
#define TAMP_MISR_TAMP8MF_Pos        (7U)
#define TAMP_MISR_TAMP8MF_Msk        (0x1U << TAMP_MISR_TAMP8MF_Pos)                   /*!< 0x00000080U */
#define TAMP_MISR_TAMP8MF            TAMP_MISR_TAMP8MF_Msk
#define TAMP_MISR_ITAMP1MF_Pos       (16U)
#define TAMP_MISR_ITAMP1MF_Msk       (0x1U << TAMP_MISR_ITAMP1MF_Pos)                  /*!< 0x00010000U */
#define TAMP_MISR_ITAMP1MF           TAMP_MISR_ITAMP1MF_Msk
#define TAMP_MISR_ITAMP2MF_Pos       (17U)
#define TAMP_MISR_ITAMP2MF_Msk       (0x1U << TAMP_MISR_ITAMP2MF_Pos)                  /*!< 0x00020000U */
#define TAMP_MISR_ITAMP2MF           TAMP_MISR_ITAMP2MF_Msk
#define TAMP_MISR_ITAMP3MF_Pos       (18U)
#define TAMP_MISR_ITAMP3MF_Msk       (0x1U << TAMP_MISR_ITAMP3MF_Pos)                  /*!< 0x00040000U */
#define TAMP_MISR_ITAMP3MF           TAMP_MISR_ITAMP3MF_Msk
#define TAMP_MISR_ITAMP4MF_Pos       (19U)
#define TAMP_MISR_ITAMP4MF_Msk       (0x1U << TAMP_MISR_ITAMP4MF_Pos)                  /*!< 0x00080000U */
#define TAMP_MISR_ITAMP4MF           TAMP_MISR_ITAMP4MF_Msk
#define TAMP_MISR_ITAMP5MF_Pos       (20U)
#define TAMP_MISR_ITAMP5MF_Msk       (0x1U << TAMP_MISR_ITAMP5MF_Pos)                  /*!< 0x00100000U */
#define TAMP_MISR_ITAMP5MF           TAMP_MISR_ITAMP5MF_Msk
#define TAMP_MISR_ITAMP6MF_Pos       (21U)
#define TAMP_MISR_ITAMP6MF_Msk       (0x1U << TAMP_MISR_ITAMP6MF_Pos)                  /*!< 0x00200000U */
#define TAMP_MISR_ITAMP6MF           TAMP_MISR_ITAMP6MF_Msk
#define TAMP_MISR_ITAMP7MF_Pos       (22U)
#define TAMP_MISR_ITAMP7MF_Msk       (0x1U << TAMP_MISR_ITAMP7MF_Pos)                  /*!< 0x00400000U */
#define TAMP_MISR_ITAMP7MF           TAMP_MISR_ITAMP7MF_Msk
#define TAMP_MISR_ITAMP8MF_Pos       (23U)
#define TAMP_MISR_ITAMP8MF_Msk       (0x1U << TAMP_MISR_ITAMP8MF_Pos)                  /*!< 0x00800000U */
#define TAMP_MISR_ITAMP8MF           TAMP_MISR_ITAMP8MF_Msk
#define TAMP_MISR_ITAMP9MF_Pos       (24U)
#define TAMP_MISR_ITAMP9MF_Msk       (0x1U << TAMP_MISR_ITAMP9MF_Pos)                  /*!< 0x01000000U */
#define TAMP_MISR_ITAMP9MF           TAMP_MISR_ITAMP9MF_Msk
#define TAMP_MISR_ITAMP10MF_Pos      (25U)
#define TAMP_MISR_ITAMP10MF_Msk      (0x1U << TAMP_MISR_ITAMP10MF_Pos)                 /*!< 0x02000000U */
#define TAMP_MISR_ITAMP10MF          TAMP_MISR_ITAMP10MF_Msk
#define TAMP_MISR_ITAMP11MF_Pos      (26U)
#define TAMP_MISR_ITAMP11MF_Msk      (0x1U << TAMP_MISR_ITAMP11MF_Pos)                 /*!< 0x04000000U */
#define TAMP_MISR_ITAMP11MF          TAMP_MISR_ITAMP11MF_Msk
#define TAMP_MISR_ITAMP12MF_Pos      (27U)
#define TAMP_MISR_ITAMP12MF_Msk      (0x1U << TAMP_MISR_ITAMP12MF_Pos)                 /*!< 0x08000000U */
#define TAMP_MISR_ITAMP12MF          TAMP_MISR_ITAMP12MF_Msk
#define TAMP_MISR_ITAMP14MF_Pos      (29U)
#define TAMP_MISR_ITAMP14MF_Msk      (0x1U << TAMP_MISR_ITAMP14MF_Pos)                 /*!< 0x20000000U */
#define TAMP_MISR_ITAMP14MF          TAMP_MISR_ITAMP14MF_Msk
#define TAMP_MISR_ITAMP15MF_Pos      (30U)
#define TAMP_MISR_ITAMP15MF_Msk      (0x1U << TAMP_MISR_ITAMP15MF_Pos)                 /*!< 0x40000000U */
#define TAMP_MISR_ITAMP15MF          TAMP_MISR_ITAMP15MF_Msk

/********************  Bits definition for TAMP_SMISR register  ************ *****/
#define TAMP_SMISR_TAMP1MF_Pos       (0U)
#define TAMP_SMISR_TAMP1MF_Msk       (0x1U << TAMP_SMISR_TAMP1MF_Pos)                  /*!< 0x00000001U */
#define TAMP_SMISR_TAMP1MF           TAMP_SMISR_TAMP1MF_Msk
#define TAMP_SMISR_TAMP2MF_Pos       (1U)
#define TAMP_SMISR_TAMP2MF_Msk       (0x1U << TAMP_SMISR_TAMP2MF_Pos)                  /*!< 0x00000002U */
#define TAMP_SMISR_TAMP2MF           TAMP_SMISR_TAMP2MF_Msk
#define TAMP_SMISR_TAMP3MF_Pos       (2U)
#define TAMP_SMISR_TAMP3MF_Msk       (0x1U << TAMP_SMISR_TAMP3MF_Pos)                  /*!< 0x00000004U */
#define TAMP_SMISR_TAMP3MF           TAMP_SMISR_TAMP3MF_Msk
#define TAMP_SMISR_TAMP4MF_Pos       (3U)
#define TAMP_SMISR_TAMP4MF_Msk       (0x1U << TAMP_SMISR_TAMP4MF_Pos)                  /*!< 0x00000008U */
#define TAMP_SMISR_TAMP4MF           TAMP_SMISR_TAMP4MF_Msk
#define TAMP_SMISR_TAMP5MF_Pos       (4U)
#define TAMP_SMISR_TAMP5MF_Msk       (0x1U << TAMP_SMISR_TAMP5MF_Pos)                  /*!< 0x00000010U */
#define TAMP_SMISR_TAMP5MF           TAMP_SMISR_TAMP5MF_Msk
#define TAMP_SMISR_TAMP6MF_Pos       (5U)
#define TAMP_SMISR_TAMP6MF_Msk       (0x1U << TAMP_SMISR_TAMP6MF_Pos)                  /*!< 0x00000020U */
#define TAMP_SMISR_TAMP6MF           TAMP_SMISR_TAMP6MF_Msk
#define TAMP_SMISR_TAMP7MF_Pos       (6U)
#define TAMP_SMISR_TAMP7MF_Msk       (0x1U << TAMP_SMISR_TAMP7MF_Pos)                  /*!< 0x00000040U */
#define TAMP_SMISR_TAMP7MF           TAMP_SMISR_TAMP7MF_Msk
#define TAMP_SMISR_TAMP8MF_Pos       (7U)
#define TAMP_SMISR_TAMP8MF_Msk       (0x1U << TAMP_SMISR_TAMP8MF_Pos)                  /*!< 0x00000080U */
#define TAMP_SMISR_TAMP8MF           TAMP_SMISR_TAMP8MF_Msk
#define TAMP_SMISR_ITAMP1MF_Pos      (16U)
#define TAMP_SMISR_ITAMP1MF_Msk      (0x1U << TAMP_SMISR_ITAMP1MF_Pos)                 /*!< 0x00010000U */
#define TAMP_SMISR_ITAMP1MF          TAMP_SMISR_ITAMP1MF_Msk
#define TAMP_SMISR_ITAMP2MF_Pos      (17U)
#define TAMP_SMISR_ITAMP2MF_Msk      (0x1U << TAMP_SMISR_ITAMP2MF_Pos)                 /*!< 0x00020000U */
#define TAMP_SMISR_ITAMP2MF          TAMP_SMISR_ITAMP2MF_Msk
#define TAMP_SMISR_ITAMP3MF_Pos      (18U)
#define TAMP_SMISR_ITAMP3MF_Msk      (0x1U << TAMP_SMISR_ITAMP3MF_Pos)                 /*!< 0x00040000U */
#define TAMP_SMISR_ITAMP3MF          TAMP_SMISR_ITAMP3MF_Msk
#define TAMP_SMISR_ITAMP4MF_Pos      (19U)
#define TAMP_SMISR_ITAMP4MF_Msk      (0x1U << TAMP_SMISR_ITAMP4MF_Pos)                 /*!< 0x00080000U */
#define TAMP_SMISR_ITAMP4MF          TAMP_SMISR_ITAMP4MF_Msk
#define TAMP_SMISR_ITAMP5MF_Pos      (20U)
#define TAMP_SMISR_ITAMP5MF_Msk      (0x1U << TAMP_SMISR_ITAMP5MF_Pos)                 /*!< 0x00100000U */
#define TAMP_SMISR_ITAMP5MF          TAMP_SMISR_ITAMP5MF_Msk
#define TAMP_SMISR_ITAMP6MF_Pos      (21U)
#define TAMP_SMISR_ITAMP6MF_Msk      (0x1U << TAMP_SMISR_ITAMP6MF_Pos)                 /*!< 0x00200000U */
#define TAMP_SMISR_ITAMP6MF          TAMP_SMISR_ITAMP6MF_Msk
#define TAMP_SMISR_ITAMP7MF_Pos      (22U)
#define TAMP_SMISR_ITAMP7MF_Msk      (0x1U << TAMP_SMISR_ITAMP7MF_Pos)                 /*!< 0x00400000U */
#define TAMP_SMISR_ITAMP7MF          TAMP_SMISR_ITAMP7MF_Msk
#define TAMP_SMISR_ITAMP8MF_Pos      (23U)
#define TAMP_SMISR_ITAMP8MF_Msk      (0x1U << TAMP_SMISR_ITAMP8MF_Pos)                 /*!< 0x00800000U */
#define TAMP_SMISR_ITAMP8MF          TAMP_SMISR_ITAMP8MF_Msk
#define TAMP_SMISR_ITAMP9MF_Pos      (24U)
#define TAMP_SMISR_ITAMP9MF_Msk      (0x1U << TAMP_SMISR_ITAMP9MF_Pos)                 /*!< 0x01000000U */
#define TAMP_SMISR_ITAMP9MF          TAMP_SMISR_ITAMP9MF_Msk
#define TAMP_SMISR_ITAMP10MF_Pos     (25U)
#define TAMP_SMISR_ITAMP10MF_Msk     (0x1U << TAMP_SMISR_ITAMP10MF_Pos)                /*!< 0x020400000U */
#define TAMP_SMISR_ITAMP10MF         TAMP_SMISR_ITAMP10MF_Msk
#define TAMP_SMISR_ITAMP11MF_Pos     (26U)
#define TAMP_SMISR_ITAMP11MF_Msk     (0x1U << TAMP_SMISR_ITAMP11MF_Pos)                /*!< 0x020400000U */
#define TAMP_SMISR_ITAMP11MF         TAMP_SMISR_ITAMP11MF_Msk
#define TAMP_SMISR_ITAMP12MF_Pos     (27U)
#define TAMP_SMISR_ITAMP12MF_Msk     (0x1U << TAMP_SMISR_ITAMP12MF_Pos)                /*!< 0x080000000U */
#define TAMP_SMISR_ITAMP12MF         TAMP_SMISR_ITAMP12MF_Msk
#define TAMP_SMISR_ITAMP14MF_Pos     (29U)
#define TAMP_SMISR_ITAMP14MF_Msk     (0x1U << TAMP_SMISR_ITAMP14MF_Pos)                /*!< 0x200000000U */
#define TAMP_SMISR_ITAMP14MF         TAMP_SMISR_ITAMP14MF_Msk
#define TAMP_SMISR_ITAMP15MF_Pos     (30U)
#define TAMP_SMISR_ITAMP15MF_Msk     (0x1U << TAMP_SMISR_ITAMP15MF_Pos)                /*!< 0x400000000U */
#define TAMP_SMISR_ITAMP15MF         TAMP_SMISR_ITAMP15MF_Msk

/********************  Bits definition for TAMP_SCR register  *****************/
#define TAMP_SCR_CTAMP1F_Pos         (0U)
#define TAMP_SCR_CTAMP1F_Msk         (0x1U << TAMP_SCR_CTAMP1F_Pos)                    /*!< 0x00000001U */
#define TAMP_SCR_CTAMP1F             TAMP_SCR_CTAMP1F_Msk
#define TAMP_SCR_CTAMP2F_Pos         (1U)
#define TAMP_SCR_CTAMP2F_Msk         (0x1U << TAMP_SCR_CTAMP2F_Pos)                    /*!< 0x00000002U */
#define TAMP_SCR_CTAMP2F             TAMP_SCR_CTAMP2F_Msk
#define TAMP_SCR_CTAMP3F_Pos         (2U)
#define TAMP_SCR_CTAMP3F_Msk         (0x1U << TAMP_SCR_CTAMP3F_Pos)                    /*!< 0x00000004U */
#define TAMP_SCR_CTAMP3F             TAMP_SCR_CTAMP3F_Msk
#define TAMP_SCR_CTAMP4F_Pos         (3U)
#define TAMP_SCR_CTAMP4F_Msk         (0x1U << TAMP_SCR_CTAMP4F_Pos)                    /*!< 0x00000008U */
#define TAMP_SCR_CTAMP4F             TAMP_SCR_CTAMP4F_Msk
#define TAMP_SCR_CTAMP5F_Pos         (4U)
#define TAMP_SCR_CTAMP5F_Msk         (0x1U << TAMP_SCR_CTAMP5F_Pos)                    /*!< 0x00000010U */
#define TAMP_SCR_CTAMP5F             TAMP_SCR_CTAMP5F_Msk
#define TAMP_SCR_CTAMP6F_Pos         (5U)
#define TAMP_SCR_CTAMP6F_Msk         (0x1U << TAMP_SCR_CTAMP6F_Pos)                    /*!< 0x00000020U */
#define TAMP_SCR_CTAMP6F             TAMP_SCR_CTAMP6F_Msk
#define TAMP_SCR_CTAMP7F_Pos         (6U)
#define TAMP_SCR_CTAMP7F_Msk         (0x1U << TAMP_SCR_CTAMP7F_Pos)                    /*!< 0x00000040U */
#define TAMP_SCR_CTAMP7F             TAMP_SCR_CTAMP7F_Msk
#define TAMP_SCR_CTAMP8F_Pos         (7U)
#define TAMP_SCR_CTAMP8F_Msk         (0x1U << TAMP_SCR_CTAMP8F_Pos)                    /*!< 0x00000080U */
#define TAMP_SCR_CTAMP8F             TAMP_SCR_CTAMP8F_Msk
#define TAMP_SCR_CITAMP1F_Pos        (16U)
#define TAMP_SCR_CITAMP1F_Msk        (0x1U << TAMP_SCR_CITAMP1F_Pos)                   /*!< 0x00010000U */
#define TAMP_SCR_CITAMP1F            TAMP_SCR_CITAMP1F_Msk
#define TAMP_SCR_CITAMP2F_Pos        (17U)
#define TAMP_SCR_CITAMP2F_Msk        (0x1U << TAMP_SCR_CITAMP2F_Pos)                   /*!< 0x00020000U */
#define TAMP_SCR_CITAMP2F            TAMP_SCR_CITAMP2F_Msk
#define TAMP_SCR_CITAMP3F_Pos        (18U)
#define TAMP_SCR_CITAMP3F_Msk        (0x1U << TAMP_SCR_CITAMP3F_Pos)                   /*!< 0x00040000U */
#define TAMP_SCR_CITAMP3F            TAMP_SCR_CITAMP3F_Msk
#define TAMP_SCR_CITAMP4F_Pos        (19U)
#define TAMP_SCR_CITAMP4F_Msk        (0x1U << TAMP_SCR_CITAMP4F_Pos)                   /*!< 0x00080000U */
#define TAMP_SCR_CITAMP4F            TAMP_SCR_CITAMP4F_Msk
#define TAMP_SCR_CITAMP5F_Pos        (20U)
#define TAMP_SCR_CITAMP5F_Msk        (0x1U << TAMP_SCR_CITAMP5F_Pos)                   /*!< 0x00100000U */
#define TAMP_SCR_CITAMP5F            TAMP_SCR_CITAMP5F_Msk
#define TAMP_SCR_CITAMP6F_Pos        (21U)
#define TAMP_SCR_CITAMP6F_Msk        (0x1U << TAMP_SCR_CITAMP6F_Pos)                   /*!< 0x00200000U */
#define TAMP_SCR_CITAMP6F            TAMP_SCR_CITAMP6F_Msk
#define TAMP_SCR_CITAMP7F_Pos        (22U)
#define TAMP_SCR_CITAMP7F_Msk        (0x1U << TAMP_SCR_CITAMP7F_Pos)                   /*!< 0x00400000U */
#define TAMP_SCR_CITAMP7F            TAMP_SCR_CITAMP7F_Msk
#define TAMP_SCR_CITAMP8F_Pos        (23U)
#define TAMP_SCR_CITAMP8F_Msk        (0x1U << TAMP_SCR_CITAMP8F_Pos)                   /*!< 0x00800000U */
#define TAMP_SCR_CITAMP8F            TAMP_SCR_CITAMP8F_Msk
#define TAMP_SCR_CITAMP9F_Pos        (24U)
#define TAMP_SCR_CITAMP9F_Msk        (0x1U << TAMP_SCR_CITAMP9F_Pos)                   /*!< 0x01000000U */
#define TAMP_SCR_CITAMP9F            TAMP_SCR_CITAMP9F_Msk
#define TAMP_SCR_CITAMP10F_Pos       (25U)
#define TAMP_SCR_CITAMP10F_Msk       (0x1U << TAMP_SCR_CITAMP10F_Pos)                  /*!< 0x02000000U */
#define TAMP_SCR_CITAMP10F           TAMP_SCR_CITAMP10F_Msk
#define TAMP_SCR_CITAMP11F_Pos       (26U)
#define TAMP_SCR_CITAMP11F_Msk       (0x1U << TAMP_SCR_CITAMP11F_Pos)                  /*!< 0x04000000U */
#define TAMP_SCR_CITAMP11F           TAMP_SCR_CITAMP11F_Msk
#define TAMP_SCR_CITAMP12F_Pos       (27U)
#define TAMP_SCR_CITAMP12F_Msk       (0x1U << TAMP_SCR_CITAMP12F_Pos)                  /*!< 0x08000000U */
#define TAMP_SCR_CITAMP12F           TAMP_SCR_CITAMP12F_Msk
#define TAMP_SCR_CITAMP14F_Pos       (29U)
#define TAMP_SCR_CITAMP14F_Msk       (0x1U << TAMP_SCR_CITAMP14F_Pos)                  /*!< 0x20000000U */
#define TAMP_SCR_CITAMP14F           TAMP_SCR_CITAMP14F_Msk
#define TAMP_SCR_CITAMP15F_Pos       (30U)
#define TAMP_SCR_CITAMP15F_Msk       (0x1U << TAMP_SCR_CITAMP15F_Pos)                  /*!< 0x40000000U */
#define TAMP_SCR_CITAMP15F           TAMP_SCR_CITAMP15F_Msk

/*******************  Bits definition for TAMP_COUNT1R register  **************/
#define TAMP_COUNT1R_Pos              (0U)
#define TAMP_COUNT1R_Msk              (0xFFFFFFFFUL << TAMP_COUNT1R_Pos)               /*!< 0xFFFFFFFFU */
#define TAMP_COUNT1R                  TAMP_COUNT1R_Msk

/*******************  Bits definition for TAMP_COUNT2R register  **************/
#define TAMP_COUNT2R_Pos              (0U)
#define TAMP_COUNT2R_Msk              (0xFFFFFFFFUL << TAMP_COUNT2R_Pos)               /*!< 0xFFFFFFFFU */
#define TAMP_COUNT2R                  TAMP_COUNT2R_Msk

/*******************  Bits definition for TAMP_OR register  **************/
#define TAMP_IN1_RMP_Pos              (0U)
#define TAMP_IN1_RMP_Msk              (0x1U << TAMP_IN1_RMP_Pos)                       /*!< 0x1U */
#define TAMP_IN1_RMP                  TAMP_IN1_RMP_Msk
#define TAMP_IN3_RMP_Pos              (1U)
#define TAMP_IN3_RMP_Msk              (0x1U << TAMP_IN3_RMP_Pos)                       /*!< 0x2U */
#define TAMP_IN3_RMP                  TAMP_IN3_RMP_Msk
#define TAMP_IN5_RMP_Pos              (2U)
#define TAMP_IN5_RMP_Msk              (0x1U << TAMP_IN5_RMP_Pos)                       /*!< 0x4U */
#define TAMP_IN5_RMP                  TAMP_IN5_RMP_Msk
#define TAMP_BSDIS_Pos                (3U)
#define TAMP_BSDIS_Msk                (0x1U << TAMP_BSDIS_Pos)                         /*!< 0x8U */
#define TAMP_BSDIS                    TAMP_BSDIS_Msk

/*******************  Bits definition for TAMP_ERCFGR register  **************/
#define TAMP_ERCFG0_Pos               (0U)
#define TAMP_ERCFG0_Msk               (0x1U << TAMP_ERCFG0_Pos)                        /*!< 0x1U */
#define TAMP_ERCFG0                   TAMP_ERCFG0_Msk

/*******************  Bits definition for TAMP_BKPRIFR1 register  *************/
#define TAMP_BKPRIFR1_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR1_BKPRWRIF_Msk    (0xFFU << TAMP_BKPRIFR1_BKPRWRIF_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR1_BKPRWRIF        TAMP_BKPRIFR1_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR2 register  *************/
#define TAMP_BKPRIFR2_BKPRWRIF_Pos    (0U)
#define TAMP_BKPRIFR2_BKPRWRIF_Msk    (0xFFU << TAMP_BKPRIFR2_BKPRWRIF_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR2_BKPRWRIF        TAMP_BKPRIFR2_BKPRWRIF_Msk

/*******************  Bits definition for TAMP_BKPRIFR3 register  *************/
#define TAMP_BKPRIFR3_BKPRWRIF1_Pos   (0U)
#define TAMP_BKPRIFR3_BKPRWRIF1_Msk   (0xFFU << TAMP_BKPRIFR3_BKPRWRIF1_Pos)            /*!< 0x000000FFU */
#define TAMP_BKPRIFR3_BKPRWRIF1       TAMP_BKPRIFR3_BKPRWRIF1_Msk
#define TAMP_BKPRIFR3_BKPRWRIF2_Pos   (16U)
#define TAMP_BKPRIFR3_BKPRWRIF2_Msk   (0xFFU << TAMP_BKPRIFR3_BKPRWRIF2_Pos)            /*!< 0x00FF0000U */
#define TAMP_BKPRIFR3_BKPRWRIF2       TAMP_BKPRIFR3_BKPRWRIF2_Msk

/*******************  Bits definition for TAMP_RCIDCFGR register  *************/
#define TAMP_RCIDCFGR_CFEN_Pos       (0U)
#define TAMP_RCIDCFGR_CFEN_Msk       (0x1U << TAMP_RCIDCFGR_CFEN_Pos)                   /*!< 0x00000001U */
#define TAMP_RCIDCFGR_CFEN           TAMP_RCIDCFGR_CFEN_Msk
#define TAMP_RCIDCFGR_CID_Pos       (4U)
#define TAMP_RCIDCFGR_CID_Msk       (0xFU << TAMP_RCIDCFGR_CID_Pos)                     /*!< 0x000000F0U */
#define TAMP_RCIDCFGR_CID           TAMP_RCIDCFGR_CID_Msk

/********************  Bits definition for TAMP_BKP0R register  ***************/
#define TAMP_BKP0R_Pos               (0U)
#define TAMP_BKP0R_Msk               (0xFFFFFFFFU << TAMP_BKP0R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP0R                   TAMP_BKP0R_Msk

/********************  Bits definition for TAMP_BKP1R register  ****************/
#define TAMP_BKP1R_Pos               (0U)
#define TAMP_BKP1R_Msk               (0xFFFFFFFFU << TAMP_BKP1R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP1R                   TAMP_BKP1R_Msk

/********************  Bits definition for TAMP_BKP2R register  ****************/
#define TAMP_BKP2R_Pos               (0U)
#define TAMP_BKP2R_Msk               (0xFFFFFFFFU << TAMP_BKP2R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP2R                   TAMP_BKP2R_Msk

/********************  Bits definition for TAMP_BKP3R register  ****************/
#define TAMP_BKP3R_Pos               (0U)
#define TAMP_BKP3R_Msk               (0xFFFFFFFFU << TAMP_BKP3R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP3R                   TAMP_BKP3R_Msk

/********************  Bits definition for TAMP_BKP4R register  ****************/
#define TAMP_BKP4R_Pos               (0U)
#define TAMP_BKP4R_Msk               (0xFFFFFFFFU << TAMP_BKP4R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP4R                   TAMP_BKP4R_Msk

/********************  Bits definition for TAMP_BKP5R register  ****************/
#define TAMP_BKP5R_Pos               (0U)
#define TAMP_BKP5R_Msk               (0xFFFFFFFFU << TAMP_BKP5R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP5R                   TAMP_BKP5R_Msk

/********************  Bits definition for TAMP_BKP6R register  ****************/
#define TAMP_BKP6R_Pos               (0U)
#define TAMP_BKP6R_Msk               (0xFFFFFFFFU << TAMP_BKP6R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP6R                   TAMP_BKP6R_Msk

/********************  Bits definition for TAMP_BKP7R register  ****************/
#define TAMP_BKP7R_Pos               (0U)
#define TAMP_BKP7R_Msk               (0xFFFFFFFFU << TAMP_BKP7R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP7R                   TAMP_BKP7R_Msk

/********************  Bits definition for TAMP_BKP8R register  ****************/
#define TAMP_BKP8R_Pos               (0U)
#define TAMP_BKP8R_Msk               (0xFFFFFFFFU << TAMP_BKP8R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP8R                   TAMP_BKP8R_Msk

/********************  Bits definition for TAMP_BKP9R register  ****************/
#define TAMP_BKP9R_Pos               (0U)
#define TAMP_BKP9R_Msk               (0xFFFFFFFFU << TAMP_BKP9R_Pos)                   /*!< 0xFFFFFFFFU */
#define TAMP_BKP9R                   TAMP_BKP9R_Msk

/********************  Bits definition for TAMP_BKP10R register  ***************/
#define TAMP_BKP10R_Pos              (0U)
#define TAMP_BKP10R_Msk              (0xFFFFFFFFU << TAMP_BKP10R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP10R                  TAMP_BKP10R_Msk

/********************  Bits definition for TAMP_BKP11R register  ***************/
#define TAMP_BKP11R_Pos              (0U)
#define TAMP_BKP11R_Msk              (0xFFFFFFFFU << TAMP_BKP11R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP11R                  TAMP_BKP11R_Msk

/********************  Bits definition for TAMP_BKP12R register  ***************/
#define TAMP_BKP12R_Pos              (0U)
#define TAMP_BKP12R_Msk              (0xFFFFFFFFU << TAMP_BKP12R_Pos)                  /*!< 0xFFFFFFFFU */
#define TAMP_BKP12R                  TAMP_BKP12R_Msk

/********************  Bits definition for TAMP_BKP13R register  ***************/
#define TAMP_BKP13R_Pos              (0U)
#define TAMP_BKP13R_Msk              (0xFFFFFFFFU << TAMP_BKP13R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP13R                  TAMP_BKP13R_Msk

/********************  Bits definition for TAMP_BKP14R register  ***************/
#define TAMP_BKP14R_Pos              (0U)
#define TAMP_BKP14R_Msk              (0xFFFFFFFFU << TAMP_BKP14R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP14R                  TAMP_BKP14R_Msk

/********************  Bits definition for TAMP_BKP15R register  ***************/
#define TAMP_BKP15R_Pos              (0U)
#define TAMP_BKP15R_Msk              (0xFFFFFFFFU << TAMP_BKP15R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP15R                  TAMP_BKP15R_Msk

/********************  Bits definition for TAMP_BKP16R register  ***************/
#define TAMP_BKP16R_Pos              (0U)
#define TAMP_BKP16R_Msk              (0xFFFFFFFFU << TAMP_BKP16R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP16R                  TAMP_BKP16R_Msk

/********************  Bits definition for TAMP_BKP17R register  ***************/
#define TAMP_BKP17R_Pos              (0U)
#define TAMP_BKP17R_Msk              (0xFFFFFFFFU << TAMP_BKP17R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP17R                  TAMP_BKP17R_Msk

/********************  Bits definition for TAMP_BKP18R register  ***************/
#define TAMP_BKP18R_Pos              (0U)
#define TAMP_BKP18R_Msk              (0xFFFFFFFFU << TAMP_BKP18R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP18R                  TAMP_BKP18R_Msk

/********************  Bits definition for TAMP_BKP19R register  ***************/
#define TAMP_BKP19R_Pos              (0U)
#define TAMP_BKP19R_Msk              (0xFFFFFFFFU << TAMP_BKP19R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP19R                  TAMP_BKP19R_Msk

/********************  Bits definition for TAMP_BKP20R register  ***************/
#define TAMP_BKP20R_Pos              (0U)
#define TAMP_BKP20R_Msk              (0xFFFFFFFFU << TAMP_BKP20R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP20R                  TAMP_BKP20R_Msk

/********************  Bits definition for TAMP_BKP21R register  ***************/
#define TAMP_BKP21R_Pos              (0U)
#define TAMP_BKP21R_Msk              (0xFFFFFFFFU << TAMP_BKP21R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP21R                  TAMP_BKP21R_Msk

/********************  Bits definition for TAMP_BKP22R register  ***************/
#define TAMP_BKP22R_Pos              (0U)
#define TAMP_BKP22R_Msk              (0xFFFFFFFFU << TAMP_BKP22R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP22R                  TAMP_BKP22R_Msk

/********************  Bits definition for TAMP_BKP23R register  ***************/
#define TAMP_BKP23R_Pos              (0U)
#define TAMP_BKP23R_Msk              (0xFFFFFFFFU << TAMP_BKP23R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP23R                  TAMP_BKP23R_Msk

/********************  Bits definition for TAMP_BKP24R register  ***************/
#define TAMP_BKP24R_Pos              (0U)
#define TAMP_BKP24R_Msk              (0xFFFFFFFFU << TAMP_BKP24R_Pos)                 /*!< 0xFFFFFFFFU */
#define TAMP_BKP24R                  TAMP_BKP24R_Msk

/********************  Bits definition for TAMP_BKP25R register  ***************/
#define TAMP_BKP25R_Pos              (0U)
#define TAMP_BKP25R_Msk              (0xFFFFFFFFU << TAMP_BKP25R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP25R                  TAMP_BKP25R_Msk

/********************  Bits definition for TAMP_BKP26R register  ***************/
#define TAMP_BKP26R_Pos              (0U)
#define TAMP_BKP26R_Msk              (0xFFFFFFFFU << TAMP_BKP26R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP26R                  TAMP_BKP26R_Msk

/********************  Bits definition for TAMP_BKP27R register  ***************/
#define TAMP_BKP27R_Pos              (0U)
#define TAMP_BKP27R_Msk              (0xFFFFFFFFU << TAMP_BKP27R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP27R                  TAMP_BKP27R_Msk

/********************  Bits definition for TAMP_BKP28R register  ***************/
#define TAMP_BKP28R_Pos              (0U)
#define TAMP_BKP28R_Msk              (0xFFFFFFFFU << TAMP_BKP28R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP28R                  TAMP_BKP28R_Msk

/********************  Bits definition for TAMP_BKP29R register  ***************/
#define TAMP_BKP29R_Pos              (0U)
#define TAMP_BKP29R_Msk              (0xFFFFFFFFU << TAMP_BKP29R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP29R                  TAMP_BKP29R_Msk

/********************  Bits definition for TAMP_BKP30R register  ***************/
#define TAMP_BKP30R_Pos              (0U)
#define TAMP_BKP30R_Msk              (0xFFFFFFFFU << TAMP_BKP30R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP30R                  TAMP_BKP30R_Msk

/********************  Bits definition for TAMP_BKP31R register  ***************/
#define TAMP_BKP31R_Pos              (0U)
#define TAMP_BKP31R_Msk              (0xFFFFFFFFU << TAMP_BKP31R_Pos)                /*!< 0xFFFFFFFFU */
#define TAMP_BKP31R                  TAMP_BKP31R_Msk

/****  Bits definition for TAMP_BKP32R to 128 not added because never user ****/

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR2_OPTIONREG_OUT_Pos  (0U)
#define TAMP_HWCFGR2_OPTIONREG_OUT_Msk  (0xFFUL << TAMP_HWCFGR2_OPTIONREG_OUT_Pos)   /*!< 0x000000FFU */
#define TAMP_HWCFGR2_OPTIONREG_OUT      TAMP_HWCFGR2_OPTIONREG_OUT_Msk
#define TAMP_HWCFGR2_TRUST_ZONE_Pos     (8U)
#define TAMP_HWCFGR2_TRUST_ZONE_Msk     (0xFUL << TAMP_HWCFGR2_TRUST_ZONE_Pos)       /*!< 0x00000F00U */
#define TAMP_HWCFGR2_TRUST_ZONE         TAMP_HWCFGR2_TRUST_ZONE_Msk
#define TAMP_HWCFGR2_RIF_Pos            (12)
#define TAMP_HWCFGR2_RIF_Msk            (0xFUL << TAMP_HWCFGR2_RIF_Pos)              /*!< 0x0000F000U */
#define TAMP_HWCFGR2_RIF                TAMP_HWCFGR2_RIF_Msk

/********************  Bits definition for TAMP_HWCFGR register  ******************/
#define TAMP_HWCFGR1_BACKUP_REGS_Pos    (0U)
#define TAMP_HWCFGR1_BACKUP_REGS_Msk    (0xFFUL << TAMP_HWCFGR1_BACKUP_REGS_Pos)     /*!< 0x000000FFU */
#define TAMP_HWCFGR1_BACKUP_REGS        TAMP_HWCFGR1_BACKUP_REGS_Msk
#define TAMP_HWCFGR1_TAMPER_Pos         (8U)
#define TAMP_HWCFGR1_TAMPER_Msk         (0xFUL << TAMP_HWCFGR1_TAMPER_Pos)           /*!< 0x00000F00U */
#define TAMP_HWCFGR1_TAMPER             TAMP_HWCFGR1_TAMPER_Msk
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Pos  (12U)
#define TAMP_HWCFGR1_ACTIVE_TAMPER_Msk  (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0x0000F000U */
#define TAMP_HWCFGR1_ACTIVE_TAMPER      TAMP_HWCFGR1_ACTIVE_TAMPER_Msk
#define TAMP_HWCFGR1_INT_TAMPER_Pos     (8U)
#define TAMP_HWCFGR1_INT_TAMPER_Msk     (0xFUL << TAMP_HWCFGR1_ACTIVE_TAMPER_Pos)    /*!< 0xFFFF0000U */
#define TAMP_HWCFGR1_INT_TAMPER         TAMP_HWCFGR1_ACTIVE_TAMPER_Msk

/*******************  Bits definition for TAMP_VERR register  **************/
#define TAMP_VERR_MINREV_Pos            (0U)
#define TAMP_VERR_MINREV_Msk            (0x4UL << TAMP_VERR_MINREV_Pos)              /*!< 0x0000000F */
#define TAMP_VERR_MINREV                TAMP_VERR_MINREV_Msk                         /*!< TAMP Minor version */
#define TAMP_VERR_MAJREV_Pos            (4U)
#define TAMP_VERR_MAJREV_Msk            (0x4UL << TAMPC_VERR_MAJREV_Pos)             /*!< 0x000000F0 */
#define TAMP_VERR_MAJREV                TAMP_VERR_MAJREV_Msk                         /*!< TAMP Major version */

/*******************  Bits definition for TAMP_IPIDR register  **************/
#define TAMP_IPIDR_ID_Pos               (0U)
#define TAMP_IPIDR_ID_Msk               (0xFFFFFFFFUL << TAMP_IPIDR_ID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_IPIDR_ID                   TAMP_IPIDR_ID_Msk                            /*!< TAMP ID */

/*******************  Bits definition for TAMP_SIDR register  **************/
#define TAMP_SIDR_SID_Pos               (0U)
#define TAMP_SIDR_SID_Msk               (0xFFFFFFFFUL << TAMP_SIDR_SID_Pos)          /*!< 0xFFFFFFFF */
#define TAMP_SIDR_SID                   TAMP_SIDR_SID_Msk                            /*!< TAMP Size ID */

/******************************************************************************/
/*                                                                            */
/*      Universal Synchronous Asynchronous Receiver Transmitter (USART)       */
/*                                                                            */
/******************************************************************************/
/* c7amba_sci3_v3.0 */
/******************  Bit definition for USART_CR1 register  *******************/
/******************  Bit definition for USART_CR1 register  *******************/
#define USART_CR1_UE_Pos               (0U)
#define USART_CR1_UE_Msk               (0x1U << USART_CR1_UE_Pos)  /*!< 0x00000001 */
#define USART_CR1_UE                   USART_CR1_UE_Msk            /*!< USART enable */
#define USART_CR1_UESM_Pos             (1U)
#define USART_CR1_UESM_Msk             (0x1U << USART_CR1_UESM_Pos)/*!< 0x00000002 */
#define USART_CR1_UESM                 USART_CR1_UESM_Msk          /*!< USART enable in low-power mode  */
#define USART_CR1_RE_Pos               (2U)
#define USART_CR1_RE_Msk               (0x1U << USART_CR1_RE_Pos)  /*!< 0x00000004 */
#define USART_CR1_RE                   USART_CR1_RE_Msk            /*!< Receiver enable */
#define USART_CR1_TE_Pos               (3U)
#define USART_CR1_TE_Msk               (0x1U << USART_CR1_TE_Pos)  /*!< 0x00000008 */
#define USART_CR1_TE                   USART_CR1_TE_Msk            /*!< Transmitter enable */
#define USART_CR1_IDLEIE_Pos           (4U)
#define USART_CR1_IDLEIE_Msk           (0x1U << USART_CR1_IDLEIE_Pos)  /*!< 0x00000010 */
#define USART_CR1_IDLEIE               USART_CR1_IDLEIE_Msk        /*!< IDLE interrupt enable */
#define USART_CR1_RXFNEIE_Pos          (5U)
#define USART_CR1_RXFNEIE_Msk          (0x1U << USART_CR1_RXFNEIE_Pos)   /*!< 0x00000020 */
#define USART_CR1_RXFNEIE              USART_CR1_RXFNEIE_Msk       /*!< RXFIFO not empty interrupt enable */
#define USART_CR1_RXNEIE_RXFNEIE_Pos   USART_CR1_RXFNEIE_Pos
#define USART_CR1_RXNEIE_RXFNEIE_Msk   USART_CR1_RXFNEIE_Msk                      /*!< 0x00000020 */
#define USART_CR1_RXNEIE_RXFNEIE       USART_CR1_RXFNEIE_Msk                      /*!< RXNE and RX FIFO Not Empty Interrupt Enable */
#define USART_CR1_TCIE_Pos             (6U)
#define USART_CR1_TCIE_Msk             (0x1U << USART_CR1_TCIE_Pos)/*!< 0x00000040 */
#define USART_CR1_TCIE                 USART_CR1_TCIE_Msk          /*!< Transmission complete interrupt enable */
#define USART_CR1_TXFNFIE_Pos          (7U)
#define USART_CR1_TXFNFIE_Msk          (0x1U << USART_CR1_TXFNFIE_Pos)   /*!< 0x00000080 */
#define USART_CR1_TXFNFIE              USART_CR1_TXFNFIE_Msk       /*!< TXFIFO not full interrupt enable */
#define USART_CR1_TXEIE_TXFNFIE_Pos    USART_CR1_TXFNFIE_Pos
#define USART_CR1_TXEIE_TXFNFIE_Msk    USART_CR1_TXFNFIE_Msk                       /*!< 0x00000080 */
#define USART_CR1_TXEIE_TXFNFIE        USART_CR1_TXFNFIE_Msk                       /*!< TXE and TX FIFO Not Full Interrupt Enable */
#define USART_CR1_PEIE_Pos             (8U)
#define USART_CR1_PEIE_Msk             (0x1U << USART_CR1_PEIE_Pos)/*!< 0x00000100 */
#define USART_CR1_PEIE                 USART_CR1_PEIE_Msk          /*!< PE interrupt enable */
#define USART_CR1_PS_Pos               (9U)
#define USART_CR1_PS_Msk               (0x1U << USART_CR1_PS_Pos)  /*!< 0x00000200 */
#define USART_CR1_PS                   USART_CR1_PS_Msk            /*!< Parity selection */
#define USART_CR1_PCE_Pos              (10U)
#define USART_CR1_PCE_Msk              (0x1U << USART_CR1_PCE_Pos) /*!< 0x00000400 */
#define USART_CR1_PCE                  USART_CR1_PCE_Msk           /*!< Parity control enable */
#define USART_CR1_WAKE_Pos             (11U)
#define USART_CR1_WAKE_Msk             (0x1U << USART_CR1_WAKE_Pos)/*!< 0x00000800 */
#define USART_CR1_WAKE                 USART_CR1_WAKE_Msk          /*!< Receiver wakeup method */
#define USART_CR1_M_Pos                (12U)
#define USART_CR1_M_Msk                (0x10001U << USART_CR1_M_Pos)             /*!< 0x10001000 */
#define USART_CR1_M                    USART_CR1_M_Msk                           /*!< Word length */
#define USART_CR1_M0_Pos               (12U)
#define USART_CR1_M0_Msk               (0x1U << USART_CR1_M0_Pos)  /*!< 0x00001000 */
#define USART_CR1_M0                   USART_CR1_M0_Msk            /*!< Word length */
#define USART_CR1_MME_Pos              (13U)
#define USART_CR1_MME_Msk              (0x1U << USART_CR1_MME_Pos) /*!< 0x00002000 */
#define USART_CR1_MME                  USART_CR1_MME_Msk           /*!< Mute mode enable */
#define USART_CR1_CMIE_Pos             (14U)
#define USART_CR1_CMIE_Msk             (0x1U << USART_CR1_CMIE_Pos)/*!< 0x00004000 */
#define USART_CR1_CMIE                 USART_CR1_CMIE_Msk          /*!< Character match interrupt enable */
#define USART_CR1_OVER8_Pos            (15U)
#define USART_CR1_OVER8_Msk            (0x1U << USART_CR1_OVER8_Pos) /*!< 0x00008000 */
#define USART_CR1_OVER8                USART_CR1_OVER8_Msk         /*!< Oversampling mode */
#define USART_CR1_DEDT_Pos             (16U)
#define USART_CR1_DEDT_Msk             (0x1FU << USART_CR1_DEDT_Pos) /*!< 0x001F0000 */
#define USART_CR1_DEDT                 USART_CR1_DEDT_Msk          /*!< Driver Enable deassertion time */
#define USART_CR1_DEAT_Pos             (21U)
#define USART_CR1_DEAT_Msk             (0x1FU << USART_CR1_DEAT_Pos) /*!< 0x03E00000 */
#define USART_CR1_DEAT                 USART_CR1_DEAT_Msk          /*!< Driver Enable assertion time */
#define USART_CR1_RTOIE_Pos            (26U)
#define USART_CR1_RTOIE_Msk            (0x1U << USART_CR1_RTOIE_Pos) /*!< 0x04000000 */
#define USART_CR1_RTOIE                USART_CR1_RTOIE_Msk         /*!< Receiver timeout interrupt enable */
#define USART_CR1_EOBIE_Pos            (27U)
#define USART_CR1_EOBIE_Msk            (0x1U << USART_CR1_EOBIE_Pos) /*!< 0x08000000 */
#define USART_CR1_EOBIE                USART_CR1_EOBIE_Msk         /*!< End of Block interrupt enable */
#define USART_CR1_M1_Pos               (28U)
#define USART_CR1_M1_Msk               (0x1U << USART_CR1_M1_Pos)  /*!< 0x10000000 */
#define USART_CR1_M1                   USART_CR1_M1_Msk            /*!< Word length */
#define USART_CR1_FIFOEN_Pos           (29U)
#define USART_CR1_FIFOEN_Msk           (0x1U << USART_CR1_FIFOEN_Pos)  /*!< 0x20000000 */
#define USART_CR1_FIFOEN               USART_CR1_FIFOEN_Msk        /*!< FIFO mode enable */
#define USART_CR1_TXFEIE_Pos           (30U)
#define USART_CR1_TXFEIE_Msk           (0x1U << USART_CR1_TXFEIE_Pos)  /*!< 0x40000000 */
#define USART_CR1_TXFEIE               USART_CR1_TXFEIE_Msk        /*!< TXFIFO empty interrupt enable */
#define USART_CR1_RXFFIE_Pos           (31U)
#define USART_CR1_RXFFIE_Msk           (0x1U << USART_CR1_RXFFIE_Pos)  /*!< 0x80000000 */
#define USART_CR1_RXFFIE               USART_CR1_RXFFIE_Msk        /*!< RXFIFO Full interrupt enable */

/******************  Bit definition for USART_CR2 register  *******************/
#define USART_CR2_SLVEN_Pos            (0U)
#define USART_CR2_SLVEN_Msk            (0x1U << USART_CR2_SLVEN_Pos) /*!< 0x00000001 */
#define USART_CR2_SLVEN                USART_CR2_SLVEN_Msk         /*!< Synchronous Slave mode enable */
#define USART_CR2_DIS_NSS_Pos          (3U)
#define USART_CR2_DIS_NSS_Msk          (0x1U << USART_CR2_DIS_NSS_Pos)   /*!< 0x00000008 */
#define USART_CR2_DIS_NSS              USART_CR2_DIS_NSS_Msk       /*!< When the DIS_NSS bit is set, the NSS pin input is ignored */
#define USART_CR2_ADDM7_Pos            (4U)
#define USART_CR2_ADDM7_Msk            (0x1U << USART_CR2_ADDM7_Pos) /*!< 0x00000010 */
#define USART_CR2_ADDM7                USART_CR2_ADDM7_Msk         /*!< 7-bit Address Detection/4-bit Address Detection */
#define USART_CR2_LBDL_Pos             (5U)
#define USART_CR2_LBDL_Msk             (0x1U << USART_CR2_LBDL_Pos)/*!< 0x00000020 */
#define USART_CR2_LBDL                 USART_CR2_LBDL_Msk          /*!< LIN break detection length */
#define USART_CR2_LBDIE_Pos            (6U)
#define USART_CR2_LBDIE_Msk            (0x1U << USART_CR2_LBDIE_Pos) /*!< 0x00000040 */
#define USART_CR2_LBDIE                USART_CR2_LBDIE_Msk         /*!< LIN break detection interrupt enable */
#define USART_CR2_LBCL_Pos             (8U)
#define USART_CR2_LBCL_Msk             (0x1U << USART_CR2_LBCL_Pos)/*!< 0x00000100 */
#define USART_CR2_LBCL                 USART_CR2_LBCL_Msk          /*!< Last bit clock pulse */
#define USART_CR2_CPHA_Pos             (9U)
#define USART_CR2_CPHA_Msk             (0x1U << USART_CR2_CPHA_Pos)/*!< 0x00000200 */
#define USART_CR2_CPHA                 USART_CR2_CPHA_Msk          /*!< Clock phase */
#define USART_CR2_CPOL_Pos             (10U)
#define USART_CR2_CPOL_Msk             (0x1U << USART_CR2_CPOL_Pos)/*!< 0x00000400 */
#define USART_CR2_CPOL                 USART_CR2_CPOL_Msk          /*!< Clock polarity */
#define USART_CR2_CLKEN_Pos            (11U)
#define USART_CR2_CLKEN_Msk            (0x1U << USART_CR2_CLKEN_Pos) /*!< 0x00000800 */
#define USART_CR2_CLKEN                USART_CR2_CLKEN_Msk         /*!< Clock enable */
#define USART_CR2_STOP_Pos             (12U)
#define USART_CR2_STOP_Msk             (0x3U << USART_CR2_STOP_Pos)/*!< 0x00003000 */
#define USART_CR2_STOP                 USART_CR2_STOP_Msk          /*!< stop bits */
#define USART_CR2_STOP_0               (0x1U << USART_CR2_STOP_Pos)              /*!< 0x00001000 */
#define USART_CR2_STOP_1               (0x2U << USART_CR2_STOP_Pos)              /*!< 0x00002000 */
#define USART_CR2_LINEN_Pos            (14U)
#define USART_CR2_LINEN_Msk            (0x1U << USART_CR2_LINEN_Pos) /*!< 0x00004000 */
#define USART_CR2_LINEN                USART_CR2_LINEN_Msk         /*!< LIN mode enable */
#define USART_CR2_SWAP_Pos             (15U)
#define USART_CR2_SWAP_Msk             (0x1U << USART_CR2_SWAP_Pos)/*!< 0x00008000 */
#define USART_CR2_SWAP                 USART_CR2_SWAP_Msk          /*!< Swap TX/RX pins */
#define USART_CR2_RXINV_Pos            (16U)
#define USART_CR2_RXINV_Msk            (0x1U << USART_CR2_RXINV_Pos) /*!< 0x00010000 */
#define USART_CR2_RXINV                USART_CR2_RXINV_Msk         /*!< RX pin active level inversion */
#define USART_CR2_TXINV_Pos            (17U)
#define USART_CR2_TXINV_Msk            (0x1U << USART_CR2_TXINV_Pos) /*!< 0x00020000 */
#define USART_CR2_TXINV                USART_CR2_TXINV_Msk         /*!< TX pin active level inversion */
#define USART_CR2_DATAINV_Pos          (18U)
#define USART_CR2_DATAINV_Msk          (0x1U << USART_CR2_DATAINV_Pos)   /*!< 0x00040000 */
#define USART_CR2_DATAINV              USART_CR2_DATAINV_Msk       /*!< Binary data inversion */
#define USART_CR2_MSBFIRST_Pos         (19U)
#define USART_CR2_MSBFIRST_Msk         (0x1U << USART_CR2_MSBFIRST_Pos)    /*!< 0x00080000 */
#define USART_CR2_MSBFIRST             USART_CR2_MSBFIRST_Msk      /*!< Most significant bit first */
#define USART_CR2_ABREN_Pos            (20U)
#define USART_CR2_ABREN_Msk            (0x1U << USART_CR2_ABREN_Pos) /*!< 0x00100000 */
#define USART_CR2_ABREN                USART_CR2_ABREN_Msk         /*!< Auto baud rate enable */
#define USART_CR2_ABRMODE_Pos           (21U)
#define USART_CR2_ABRMODE_Msk           (0x3U << USART_CR2_ABRMODE_Pos)  /*!< 0x00600000 */
#define USART_CR2_ABRMODE               USART_CR2_ABRMODE_Msk        /*!< Auto baud rate mode */
#define USART_CR2_ABRMODE_0            (0x1U << USART_CR2_ABRMODE_Pos)           /*!< 0x00200000 */
#define USART_CR2_ABRMODE_1            (0x2U << USART_CR2_ABRMODE_Pos)           /*!< 0x00400000 */
#define USART_CR2_RTOEN_Pos            (23U)
#define USART_CR2_RTOEN_Msk            (0x1U << USART_CR2_RTOEN_Pos) /*!< 0x00800000 */
#define USART_CR2_RTOEN                USART_CR2_RTOEN_Msk         /*!< Receiver timeout enable */
#define USART_CR2_ADD_Pos              (24U)
#define USART_CR2_ADD_Msk              (0xFFU << USART_CR2_ADD_Pos)/*!< 0xFF000000 */
#define USART_CR2_ADD                  USART_CR2_ADD_Msk           /*!< Address of the USART node  */

/******************  Bit definition for USART_CR3 register  *******************/
#define USART_CR3_EIE_Pos              (0U)
#define USART_CR3_EIE_Msk              (0x1U << USART_CR3_EIE_Pos) /*!< 0x00000001 */
#define USART_CR3_EIE                  USART_CR3_EIE_Msk           /*!< Error interrupt enable */
#define USART_CR3_IREN_Pos             (1U)
#define USART_CR3_IREN_Msk             (0x1U << USART_CR3_IREN_Pos)/*!< 0x00000002 */
#define USART_CR3_IREN                 USART_CR3_IREN_Msk          /*!< IrDA mode enable */
#define USART_CR3_IRLP_Pos             (2U)
#define USART_CR3_IRLP_Msk             (0x1U << USART_CR3_IRLP_Pos)/*!< 0x00000004 */
#define USART_CR3_IRLP                 USART_CR3_IRLP_Msk          /*!< IrDA low-power */
#define USART_CR3_HDSEL_Pos            (3U)
#define USART_CR3_HDSEL_Msk            (0x1U << USART_CR3_HDSEL_Pos) /*!< 0x00000008 */
#define USART_CR3_HDSEL                USART_CR3_HDSEL_Msk         /*!< Half-duplex selection */
#define USART_CR3_NACK_Pos             (4U)
#define USART_CR3_NACK_Msk             (0x1U << USART_CR3_NACK_Pos)/*!< 0x00000010 */
#define USART_CR3_NACK                 USART_CR3_NACK_Msk          /*!< Smartcard NACK enable */
#define USART_CR3_SCEN_Pos             (5U)
#define USART_CR3_SCEN_Msk             (0x1U << USART_CR3_SCEN_Pos)/*!< 0x00000020 */
#define USART_CR3_SCEN                 USART_CR3_SCEN_Msk          /*!< Smartcard mode enable */
#define USART_CR3_DMAR_Pos             (6U)
#define USART_CR3_DMAR_Msk             (0x1U << USART_CR3_DMAR_Pos)/*!< 0x00000040 */
#define USART_CR3_DMAR                 USART_CR3_DMAR_Msk          /*!< DMA enable receiver */
#define USART_CR3_DMAT_Pos             (7U)
#define USART_CR3_DMAT_Msk             (0x1U << USART_CR3_DMAT_Pos)/*!< 0x00000080 */
#define USART_CR3_DMAT                 USART_CR3_DMAT_Msk          /*!< DMA enable transmitter */
#define USART_CR3_RTSE_Pos             (8U)
#define USART_CR3_RTSE_Msk             (0x1U << USART_CR3_RTSE_Pos)/*!< 0x00000100 */
#define USART_CR3_RTSE                 USART_CR3_RTSE_Msk          /*!< RTS enable */
#define USART_CR3_CTSE_Pos             (9U)
#define USART_CR3_CTSE_Msk             (0x1U << USART_CR3_CTSE_Pos)/*!< 0x00000200 */
#define USART_CR3_CTSE                 USART_CR3_CTSE_Msk          /*!< CTS enable */
#define USART_CR3_CTSIE_Pos            (10U)
#define USART_CR3_CTSIE_Msk            (0x1U << USART_CR3_CTSIE_Pos) /*!< 0x00000400 */
#define USART_CR3_CTSIE                USART_CR3_CTSIE_Msk         /*!< CTS interrupt enable */
#define USART_CR3_ONEBIT_Pos           (11U)
#define USART_CR3_ONEBIT_Msk           (0x1U << USART_CR3_ONEBIT_Pos)  /*!< 0x00000800 */
#define USART_CR3_ONEBIT               USART_CR3_ONEBIT_Msk        /*!< One sample bit method enable */
#define USART_CR3_OVRDIS_Pos           (12U)
#define USART_CR3_OVRDIS_Msk           (0x1U << USART_CR3_OVRDIS_Pos)  /*!< 0x00001000 */
#define USART_CR3_OVRDIS               USART_CR3_OVRDIS_Msk        /*!< Overrun Disable */
#define USART_CR3_DDRE_Pos             (13U)
#define USART_CR3_DDRE_Msk             (0x1U << USART_CR3_DDRE_Pos)/*!< 0x00002000 */
#define USART_CR3_DDRE                 USART_CR3_DDRE_Msk          /*!< DMA Disable on Reception Error */
#define USART_CR3_DEM_Pos              (14U)
#define USART_CR3_DEM_Msk              (0x1U << USART_CR3_DEM_Pos) /*!< 0x00004000 */
#define USART_CR3_DEM                  USART_CR3_DEM_Msk           /*!< Driver enable mode  */
#define USART_CR3_DEP_Pos              (15U)
#define USART_CR3_DEP_Msk              (0x1U << USART_CR3_DEP_Pos) /*!< 0x00008000 */
#define USART_CR3_DEP                  USART_CR3_DEP_Msk           /*!< Driver enable polarity selection */
#define USART_CR3_SCARCNT_Pos          (17U)
#define USART_CR3_SCARCNT_Msk          (0x7U << USART_CR3_SCARCNT_Pos)   /*!< 0x000E0000 */
#define USART_CR3_SCARCNT              USART_CR3_SCARCNT_Msk       /*!< Smartcard auto-retry count */
#define USART_CR3_TXFTIE_Pos           (23U)
#define USART_CR3_TXFTIE_Msk           (0x1U << USART_CR3_TXFTIE_Pos)  /*!< 0x00800000 */
#define USART_CR3_TXFTIE               USART_CR3_TXFTIE_Msk        /*!< TXFIFO threshold interrupt enable */
#define USART_CR3_TCBGTIE_Pos          (24U)
#define USART_CR3_TCBGTIE_Msk          (0x1U << USART_CR3_TCBGTIE_Pos)   /*!< 0x01000000 */
#define USART_CR3_TCBGTIE              USART_CR3_TCBGTIE_Msk       /*!< Transmission Complete before guard time, interrupt enable */
#define USART_CR3_RXFTCFG_Pos          (25U)
#define USART_CR3_RXFTCFG_Msk          (0x7U << USART_CR3_RXFTCFG_Pos)   /*!< 0x0E000000 */
#define USART_CR3_RXFTCFG              USART_CR3_RXFTCFG_Msk       /*!< Receive FIFO threshold configuration */
#define USART_CR3_RXFTCFG_0            (0x1U << USART_CR3_RXFTCFG_Pos)           /*!< 0x02000000 */
#define USART_CR3_RXFTCFG_1            (0x2U << USART_CR3_RXFTCFG_Pos)           /*!< 0x04000000 */
#define USART_CR3_RXFTCFG_2            (0x4U << USART_CR3_RXFTCFG_Pos)           /*!< 0x08000000 */
#define USART_CR3_RXFTIE_Pos           (28U)
#define USART_CR3_RXFTIE_Msk           (0x1U << USART_CR3_RXFTIE_Pos)  /*!< 0x10000000 */
#define USART_CR3_RXFTIE               USART_CR3_RXFTIE_Msk        /*!< RXFIFO threshold interrupt enable */
#define USART_CR3_TXFTCFG_Pos          (29U)
#define USART_CR3_TXFTCFG_Msk          (0x7U << USART_CR3_TXFTCFG_Pos)   /*!< 0xE0000000 */
#define USART_CR3_TXFTCFG              USART_CR3_TXFTCFG_Msk       /*!< TXFIFO threshold configuration */
#define USART_CR3_TXFTCFG_0            (0x1U << USART_CR3_TXFTCFG_Pos)           /*!< 0x20000000 */
#define USART_CR3_TXFTCFG_1            (0x2U << USART_CR3_TXFTCFG_Pos)           /*!< 0x40000000 */
#define USART_CR3_TXFTCFG_2            (0x4U << USART_CR3_TXFTCFG_Pos)           /*!< 0x80000000 */

/******************  Bit definition for USART_BRR register  *******************/
#define USART_BRR_LPUART_Pos              (0U)
#define USART_BRR_LPUART_Msk              (0xFFFFFU << USART_BRR_LPUART_Pos)   /*!< 0x000FFFFF */
#define USART_BRR_LPUART                  USART_BRR_LPUART_Msk           /*!< LPUART baud rate division (LPUARTDIV) */
#define USART_BRR_BRR_Pos                 (0U)
#define USART_BRR_BRR_Msk                 (0xFFFFU << USART_BRR_BRR_Pos)  /*!< 0x0000FFFF */
#define USART_BRR_BRR                     USART_BRR_BRR_Msk           /*!< USART baud rate */

/******************  Bit definition for USART_GTPR register  ******************/
#define USART_GTPR_PSC_Pos             (0U)
#define USART_GTPR_PSC_Msk             (0xFFU << USART_GTPR_PSC_Pos) /*!< 0x000000FF */
#define USART_GTPR_PSC                 USART_GTPR_PSC_Msk          /*!< Prescaler value */
#define USART_GTPR_GT_Pos              (8U)
#define USART_GTPR_GT_Msk              (0xFFU << USART_GTPR_GT_Pos)/*!< 0x0000FF00 */
#define USART_GTPR_GT                  USART_GTPR_GT_Msk           /*!< Guard time value */

/*******************  Bit definition for USART_RTOR register  *****************/
#define USART_RTOR_RTO_Pos             (0U)
#define USART_RTOR_RTO_Msk             (0xFFFFFFU << USART_RTOR_RTO_Pos)     /*!< 0x00FFFFFF */
#define USART_RTOR_RTO                 USART_RTOR_RTO_Msk          /*!< Receiver timeout value */
#define USART_RTOR_BLEN_Pos            (24U)
#define USART_RTOR_BLEN_Msk            (0xFFU << USART_RTOR_BLEN_Pos)  /*!< 0xFF000000 */
#define USART_RTOR_BLEN                USART_RTOR_BLEN_Msk         /*!< Block Length  */

/*******************  Bit definition for USART_RQR register  ******************/
#define USART_RQR_ABRRQ_Pos            (0U)
#define USART_RQR_ABRRQ_Msk            (0x1U << USART_RQR_ABRRQ_Pos) /*!< 0x00000001 */
#define USART_RQR_ABRRQ                USART_RQR_ABRRQ_Msk         /*!< Auto baud rate request */
#define USART_RQR_SBKRQ_Pos            (1U)
#define USART_RQR_SBKRQ_Msk            (0x1U << USART_RQR_SBKRQ_Pos) /*!< 0x00000002 */
#define USART_RQR_SBKRQ                USART_RQR_SBKRQ_Msk         /*!< Send break request */
#define USART_RQR_MMRQ_Pos             (2U)
#define USART_RQR_MMRQ_Msk             (0x1U << USART_RQR_MMRQ_Pos)/*!< 0x00000004 */
#define USART_RQR_MMRQ                 USART_RQR_MMRQ_Msk          /*!< Mute mode request */
#define USART_RQR_RXFRQ_Pos            (3U)
#define USART_RQR_RXFRQ_Msk            (0x1U << USART_RQR_RXFRQ_Pos) /*!< 0x00000008 */
#define USART_RQR_RXFRQ                USART_RQR_RXFRQ_Msk         /*!< Receive data flush request */
#define USART_RQR_TXFRQ_Pos            (4U)
#define USART_RQR_TXFRQ_Msk            (0x1U << USART_RQR_TXFRQ_Pos) /*!< 0x00000010 */
#define USART_RQR_TXFRQ                USART_RQR_TXFRQ_Msk         /*!< Transmit data flush request */

/*******************  Bit definition for USART_ISR register  ******************/
#define USART_ISR_PE_Pos               (0U)
#define USART_ISR_PE_Msk               (0x1U << USART_ISR_PE_Pos)  /*!< 0x00000001 */
#define USART_ISR_PE                   USART_ISR_PE_Msk            /*!< Parity error */
#define USART_ISR_FE_Pos               (1U)
#define USART_ISR_FE_Msk               (0x1U << USART_ISR_FE_Pos)  /*!< 0x00000002 */
#define USART_ISR_FE                   USART_ISR_FE_Msk            /*!< Framing error */
#define USART_ISR_NE_Pos               (2U)
#define USART_ISR_NE_Msk               (0x1U << USART_ISR_NE_Pos)  /*!< 0x00000004 */
#define USART_ISR_NE                   USART_ISR_NE_Msk            /*!< Noise detection flag */
#define USART_ISR_ORE_Pos              (3U)
#define USART_ISR_ORE_Msk              (0x1U << USART_ISR_ORE_Pos) /*!< 0x00000008 */
#define USART_ISR_ORE                  USART_ISR_ORE_Msk           /*!< Overrun error */
#define USART_ISR_IDLE_Pos             (4U)
#define USART_ISR_IDLE_Msk             (0x1U << USART_ISR_IDLE_Pos)/*!< 0x00000010 */
#define USART_ISR_IDLE                 USART_ISR_IDLE_Msk          /*!< Idle line detected */
#define USART_ISR_RXFNE_Pos            (5U)
#define USART_ISR_RXFNE_Msk            (0x1U << USART_ISR_RXFNE_Pos) /*!< 0x00000020 */
#define USART_ISR_RXFNE                USART_ISR_RXFNE_Msk         /*!< RXFIFO not empty */
#define USART_ISR_RXNE_RXFNE_Pos       USART_ISR_RXFNE_Pos
#define USART_ISR_RXNE_RXFNE_Msk       USART_ISR_RXFNE_Msk                        /*!< 0x00000020 */
#define USART_ISR_RXNE_RXFNE           USART_ISR_RXFNE_Msk                        /*!< Read Data Register or RX FIFO Not Empty */
#define USART_ISR_TC_Pos               (6U)
#define USART_ISR_TC_Msk               (0x1U << USART_ISR_TC_Pos)  /*!< 0x00000040 */
#define USART_ISR_TC                   USART_ISR_TC_Msk            /*!< Transmission complete */
#define USART_ISR_TXFNF_Pos            (7U)
#define USART_ISR_TXFNF_Msk            (0x1U << USART_ISR_TXFNF_Pos) /*!< 0x00000080 */
#define USART_ISR_TXFNF                USART_ISR_TXFNF_Pos         /*!< TXFIFO not full */
#define USART_ISR_TXE_TXFNF_Pos        USART_ISR_TXE_Pos
#define USART_ISR_TXE_TXFNF_Msk        USART_ISR_TXFNF_Msk                         /*!< 0x00000080 */
#define USART_ISR_TXE_TXFNF            USART_ISR_TXFNF_Msk                         /*!< Transmit Data Register Empty or TX FIFO Not Full Flag */
#define USART_ISR_LBDF_Pos             (8U)
#define USART_ISR_LBDF_Msk             (0x1U << USART_ISR_LBDF_Pos)/*!< 0x00000100 */
#define USART_ISR_LBDF                 USART_ISR_LBDF_Msk          /*!< LIN break detection flag */
#define USART_ISR_CTSIF_Pos            (9U)
#define USART_ISR_CTSIF_Msk            (0x1U << USART_ISR_CTSIF_Pos) /*!< 0x00000200 */
#define USART_ISR_CTSIF                USART_ISR_CTSIF_Msk         /*!< CTS interrupt flag */
#define USART_ISR_CTS_Pos              (10U)
#define USART_ISR_CTS_Msk              (0x1U << USART_ISR_CTS_Pos) /*!< 0x00000400 */
#define USART_ISR_CTS                  USART_ISR_CTS_Msk           /*!< CTS flag */
#define USART_ISR_RTOF_Pos             (11U)
#define USART_ISR_RTOF_Msk             (0x1U << USART_ISR_RTOF_Pos)/*!< 0x00000800 */
#define USART_ISR_RTOF                 USART_ISR_RTOF_Msk          /*!< Receiver timeout */
#define USART_ISR_EOBF_Pos             (12U)
#define USART_ISR_EOBF_Msk             (0x1U << USART_ISR_EOBF_Pos)/*!< 0x00001000 */
#define USART_ISR_EOBF                 USART_ISR_EOBF_Msk          /*!< End of block flag */
#define USART_ISR_UDR_Pos              (13U)
#define USART_ISR_UDR_Msk              (0x1U << USART_ISR_UDR_Pos) /*!< 0x00002000 */
#define USART_ISR_UDR                  USART_ISR_UDR_Msk           /*!< SPI slave underrun error flag */
#define USART_ISR_ABRE_Pos             (14U)
#define USART_ISR_ABRE_Msk             (0x1U << USART_ISR_ABRE_Pos)/*!< 0x00004000 */
#define USART_ISR_ABRE                 USART_ISR_ABRE_Msk          /*!< Auto baud rate error */
#define USART_ISR_ABRF_Pos             (15U)
#define USART_ISR_ABRF_Msk             (0x1U << USART_ISR_ABRF_Pos)/*!< 0x00008000 */
#define USART_ISR_ABRF                 USART_ISR_ABRF_Msk          /*!< Auto baud rate flag */
#define USART_ISR_BUSY_Pos             (16U)
#define USART_ISR_BUSY_Msk             (0x1U << USART_ISR_BUSY_Pos)/*!< 0x00010000 */
#define USART_ISR_BUSY                 USART_ISR_BUSY_Msk          /*!< Busy flag */
#define USART_ISR_CMF_Pos              (17U)
#define USART_ISR_CMF_Msk              (0x1U << USART_ISR_CMF_Pos) /*!< 0x00020000 */
#define USART_ISR_CMF                  USART_ISR_CMF_Msk           /*!< Character match flag */
#define USART_ISR_SBKF_Pos             (18U)
#define USART_ISR_SBKF_Msk             (0x1U << USART_ISR_SBKF_Pos)/*!< 0x00040000 */
#define USART_ISR_SBKF                 USART_ISR_SBKF_Msk          /*!< Send break flag */
#define USART_ISR_RWU_Pos              (19U)
#define USART_ISR_RWU_Msk              (0x1U << USART_ISR_RWU_Pos) /*!< 0x00080000 */
#define USART_ISR_RWU                  USART_ISR_RWU_Msk           /*!< Receiver wakeup from Mute mode */
#define USART_ISR_TEACK_Pos            (21U)
#define USART_ISR_TEACK_Msk            (0x1U << USART_ISR_TEACK_Pos) /*!< 0x00200000 */
#define USART_ISR_TEACK                USART_ISR_TEACK_Msk         /*!< Transmit enable acknowledge flag  */
#define USART_ISR_REACK_Pos            (22U)
#define USART_ISR_REACK_Msk            (0x1U << USART_ISR_REACK_Pos) /*!< 0x00400000 */
#define USART_ISR_REACK                USART_ISR_REACK_Msk         /*!< Receive enable acknowledge flag  */
#define USART_ISR_TXFE_Pos             (23U)
#define USART_ISR_TXFE_Msk             (0x1U << USART_ISR_TXFE_Pos)/*!< 0x00800000 */
#define USART_ISR_TXFE                 USART_ISR_TXFE_Msk          /*!< TXFIFO Empty */
#define USART_ISR_RXFF_Pos             (24U)
#define USART_ISR_RXFF_Msk             (0x1U << USART_ISR_RXFF_Pos)/*!< 0x01000000 */
#define USART_ISR_RXFF                 USART_ISR_RXFF_Msk          /*!< RXFIFO Full */
#define USART_ISR_TCBGT_Pos            (25U)
#define USART_ISR_TCBGT_Msk            (0x1U << USART_ISR_TCBGT_Pos) /*!< 0x02000000 */
#define USART_ISR_TCBGT                USART_ISR_TCBGT_Msk         /*!< Transmission complete before guard time flag */
#define USART_ISR_RXFT_Pos             (26U)
#define USART_ISR_RXFT_Msk             (0x1U << USART_ISR_RXFT_Pos)/*!< 0x04000000 */
#define USART_ISR_RXFT                 USART_ISR_RXFT_Msk          /*!< RXFIFO threshold flag */
#define USART_ISR_TXFT_Pos             (27U)
#define USART_ISR_TXFT_Msk             (0x1U << USART_ISR_TXFT_Pos)/*!< 0x08000000 */
#define USART_ISR_TXFT                 USART_ISR_TXFT_Msk          /*!< TXFIFO threshold flag */

/*******************  Bit definition for USART_ICR register  ******************/
#define USART_ICR_PECF_Pos             (0U)
#define USART_ICR_PECF_Msk             (0x1U << USART_ICR_PECF_Pos)/*!< 0x00000001 */
#define USART_ICR_PECF                 USART_ICR_PECF_Msk          /*!< Parity error clear flag */
#define USART_ICR_FECF_Pos             (1U)
#define USART_ICR_FECF_Msk             (0x1U << USART_ICR_FECF_Pos)/*!< 0x00000002 */
#define USART_ICR_FECF                 USART_ICR_FECF_Msk          /*!< Framing error clear flag */
#define USART_ICR_NECF_Pos             (2U)
#define USART_ICR_NECF_Msk             (0x1U << USART_ICR_NECF_Pos)/*!< 0x00000004 */
#define USART_ICR_NECF                 USART_ICR_NECF_Msk          /*!< Noise detected clear flag */
#define USART_ICR_ORECF_Pos            (3U)
#define USART_ICR_ORECF_Msk            (0x1U << USART_ICR_ORECF_Pos) /*!< 0x00000008 */
#define USART_ICR_ORECF                USART_ICR_ORECF_Msk         /*!< Overrun error clear flag */
#define USART_ICR_IDLECF_Pos           (4U)
#define USART_ICR_IDLECF_Msk           (0x1U << USART_ICR_IDLECF_Pos)  /*!< 0x00000010 */
#define USART_ICR_IDLECF               USART_ICR_IDLECF_Msk        /*!< Idle line detected clear flag */
#define USART_ICR_TXFECF_Pos           (5U)
#define USART_ICR_TXFECF_Msk           (0x1U << USART_ICR_TXFECF_Pos)  /*!< 0x00000020 */
#define USART_ICR_TXFECF               USART_ICR_TXFECF_Msk        /*!< TXFIFO empty clear flag */
#define USART_ICR_TCCF_Pos             (6U)
#define USART_ICR_TCCF_Msk             (0x1U << USART_ICR_TCCF_Pos)/*!< 0x00000040 */
#define USART_ICR_TCCF                 USART_ICR_TCCF_Msk          /*!< Transmission complete clear flag */
#define USART_ICR_TCBGTCF_Pos          (7U)
#define USART_ICR_TCBGTCF_Msk          (0x1U << USART_ICR_TCBGTCF_Pos)   /*!< 0x00000080 */
#define USART_ICR_TCBGTCF              USART_ICR_TCBGTCF_Msk       /*!< Transmission complete before Guard time clear flag */
#define USART_ICR_LBDCF_Pos            (8U)
#define USART_ICR_LBDCF_Msk            (0x1U << USART_ICR_LBDCF_Pos) /*!< 0x00000100 */
#define USART_ICR_LBDCF                USART_ICR_LBDCF_Msk         /*!< LIN break detection clear flag */
#define USART_ICR_CTSCF_Pos            (9U)
#define USART_ICR_CTSCF_Msk            (0x1U << USART_ICR_CTSCF_Pos) /*!< 0x00000200 */
#define USART_ICR_CTSCF                USART_ICR_CTSCF_Msk         /*!< CTS clear flag */
#define USART_ICR_RTOCF_Pos            (11U)
#define USART_ICR_RTOCF_Msk            (0x1U << USART_ICR_RTOCF_Pos) /*!< 0x00000800 */
#define USART_ICR_RTOCF                USART_ICR_RTOCF_Msk         /*!< Receiver timeout clear flag */
#define USART_ICR_EOBCF_Pos            (12U)
#define USART_ICR_EOBCF_Msk            (0x1U << USART_ICR_EOBCF_Pos) /*!< 0x00001000 */
#define USART_ICR_EOBCF                USART_ICR_EOBCF_Msk         /*!< End of block clear flag */
#define USART_ICR_UDRCF_Pos            (13U)
#define USART_ICR_UDRCF_Msk            (0x1U << USART_ICR_UDRCF_Pos) /*!< 0x00002000 */
#define USART_ICR_UDRCF                USART_ICR_UDRCF_Msk         /*!< SPI slave underrun clear flag */
#define USART_ICR_CMCF_Pos             (17U)
#define USART_ICR_CMCF_Msk             (0x1U << USART_ICR_CMCF_Pos)/*!< 0x00020000 */
#define USART_ICR_CMCF                 USART_ICR_CMCF_Msk          /*!< Character match clear flag */

/*******************  Bit definition for USART_RDR register  ******************/
#define USART_RDR_RDR_Pos              (0U)
#define USART_RDR_RDR_Msk              (0x1FFU << USART_RDR_RDR_Pos) /*!< 0x000001FF */
#define USART_RDR_RDR                  USART_RDR_RDR_Msk           /*!< Receive data value */

/*******************  Bit definition for USART_TDR register  ******************/
#define USART_TDR_TDR_Pos              (0U)
#define USART_TDR_TDR_Msk              (0x1FFU << USART_TDR_TDR_Pos) /*!< 0x000001FF */
#define USART_TDR_TDR                  USART_TDR_TDR_Msk           /*!< Transmit data value */

/*******************  Bit definition for USART_PRESC register  ****************/
#define USART_PRESC_PRESCALER_Pos      (0U)
#define USART_PRESC_PRESCALER_Msk      (0xFU << USART_PRESC_PRESCALER_Pos)       /*!< 0x0000000F */
#define USART_PRESC_PRESCALER          USART_PRESC_PRESCALER_Msk   /*!< Clock prescaler */
#define USART_PRESC_PRESCALER_0        (0x1U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000001 */
#define USART_PRESC_PRESCALER_1        (0x2U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000002 */
#define USART_PRESC_PRESCALER_2        (0x4U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000004 */
#define USART_PRESC_PRESCALER_3        (0x8U << USART_PRESC_PRESCALER_Pos)       /*!< 0x00000008 */

/*******************  Bit definition for USART_AUTOCR register  ***************/
#define USART_AUTOCR_TDN_Pos           (0U)
#define USART_AUTOCR_TDN_Msk           (0xFFFFU << USART_AUTOCR_TDN_Pos)     /*!< 0x0000FFFF */
#define USART_AUTOCR_TDN               USART_AUTOCR_TDN_Msk        /*!< TDN transmission data number */
#define USART_AUTOCR_TRIGPOL_Pos       (16U)
#define USART_AUTOCR_TRIGPOL_Msk       (0x1U << USART_AUTOCR_TRIGPOL_Pos)      /*!< 0x00010000 */
#define USART_AUTOCR_TRIGPOL           USART_AUTOCR_TRIGPOL_Msk    /*!< Trigger polarity bit */
#define USART_AUTOCR_TRIGEN_Pos        (17U)
#define USART_AUTOCR_TRIGEN_Msk        (0x1U << USART_AUTOCR_TRIGEN_Pos)     /*!< 0x00020000 */
#define USART_AUTOCR_TRIGEN            USART_AUTOCR_TRIGEN_Msk     /*!< Trigger enable bit  */
#define USART_AUTOCR_IDLEDIS_Pos       (18U)
#define USART_AUTOCR_IDLEDIS_Msk       (0x1U << USART_AUTOCR_IDLEDIS_Pos)      /*!< 0x00040000 */
#define USART_AUTOCR_IDLEDIS           USART_AUTOCR_IDLEDIS_Msk    /*!< Idle frame transmission disable bit after enabling the transmitter */
#define USART_AUTOCR_TRIGSEL_Pos       (19U)
#define USART_AUTOCR_TRIGSEL_Msk       (0xFU << USART_AUTOCR_TRIGSEL_Pos)      /*!< 0x00780000 */
#define USART_AUTOCR_TRIGSEL           USART_AUTOCR_TRIGSEL_Msk    /*!< Trigger selection bits  */

/****************  Bit definition for USART_HWCFGR2 register  *****************/
#define USART_HWCFGR2_CFG1_Pos         (0U)
#define USART_HWCFGR2_CFG1_Msk         (0xFU << USART_HWCFGR2_CFG1_Pos)    /*!< 0x0000000F */
#define USART_HWCFGR2_CFG1             USART_HWCFGR2_CFG1_Msk      /*!< USART hardware configuration 1 */
#define USART_HWCFGR2_CFG2_Pos         (4U)
#define USART_HWCFGR2_CFG2_Msk         (0xFU << USART_HWCFGR2_CFG2_Pos)    /*!< 0x000000F0 */
#define USART_HWCFGR2_CFG2             USART_HWCFGR2_CFG2_Msk      /*!< USART hardware configuration 2 */
#define USART_HWCFGR2_CFG3_Pos         (8U)
#define USART_HWCFGR2_CFG3_Msk         (0xFU << USART_HWCFGR2_CFG3_Pos)    /*!< 0x00000F00 */
#define USART_HWCFGR2_CFG3             USART_HWCFGR2_CFG3_Msk      /*!< USART hardware configuration 3 */

/****************  Bit definition for USART_HWCFGR1 register  *****************/
#define USART_HWCFGR1_CFG1_Pos         (0U)
#define USART_HWCFGR1_CFG1_Msk         (0xFU << USART_HWCFGR1_CFG1_Pos)    /*!< 0x0000000F */
#define USART_HWCFGR1_CFG1             USART_HWCFGR1_CFG1_Msk      /*!< USART hardware configuration 1 */
#define USART_HWCFGR1_CFG2_Pos         (4U)
#define USART_HWCFGR1_CFG2_Msk         (0xFU << USART_HWCFGR1_CFG2_Pos)    /*!< 0x000000F0 */
#define USART_HWCFGR1_CFG2             USART_HWCFGR1_CFG2_Msk      /*!< USART hardware configuration 2 */
#define USART_HWCFGR1_CFG3_Pos         (8U)
#define USART_HWCFGR1_CFG3_Msk         (0xFU << USART_HWCFGR1_CFG3_Pos)    /*!< 0x00000F00 */
#define USART_HWCFGR1_CFG3             USART_HWCFGR1_CFG3_Msk      /*!< USART hardware configuration 3 */
#define USART_HWCFGR1_CFG4_Pos         (12U)
#define USART_HWCFGR1_CFG4_Msk         (0xFU << USART_HWCFGR1_CFG4_Pos)    /*!< 0x0000F000 */
#define USART_HWCFGR1_CFG4             USART_HWCFGR1_CFG4_Msk      /*!< USART hardware configuration 4 */
#define USART_HWCFGR1_CFG5_Pos         (16U)
#define USART_HWCFGR1_CFG5_Msk         (0xFU << USART_HWCFGR1_CFG5_Pos)    /*!< 0x000F0000 */
#define USART_HWCFGR1_CFG5             USART_HWCFGR1_CFG5_Msk      /*!< USART hardware configuration 5 */
#define USART_HWCFGR1_CFG6_Pos         (20U)
#define USART_HWCFGR1_CFG6_Msk         (0xFU << USART_HWCFGR1_CFG6_Pos)    /*!< 0x00F00000 */
#define USART_HWCFGR1_CFG6             USART_HWCFGR1_CFG6_Msk      /*!< USART hardware configuration 6 */
#define USART_HWCFGR1_CFG7_Pos         (24U)
#define USART_HWCFGR1_CFG7_Msk         (0xFU << USART_HWCFGR1_CFG7_Pos)    /*!< 0x0F000000 */
#define USART_HWCFGR1_CFG7             USART_HWCFGR1_CFG7_Msk      /*!< USART hardware configuration 7 */
#define USART_HWCFGR1_CFG8_Pos         (28U)
#define USART_HWCFGR1_CFG8_Msk         (0xFU << USART_HWCFGR1_CFG8_Pos)    /*!< 0xF0000000 */
#define USART_HWCFGR1_CFG8             USART_HWCFGR1_CFG8_Msk      /*!< USART hardware configuration 8  */

/******************  Bit definition for USART_VERR register  ******************/
#define USART_VERR_MINREV_Pos          (0U)
#define USART_VERR_MINREV_Msk          (0xFU << USART_VERR_MINREV_Pos)   /*!< 0x0000000F */
#define USART_VERR_MINREV              USART_VERR_MINREV_Msk       /*!< Minor revision */
#define USART_VERR_MAJREV_Pos          (4U)
#define USART_VERR_MAJREV_Msk          (0xFU << USART_VERR_MAJREV_Pos)   /*!< 0x000000F0 */
#define USART_VERR_MAJREV              USART_VERR_MAJREV_Msk       /*!< Major revision */

/*****************  Bit definition for USART_IPIDR register  ******************/
#define USART_IPIDR_ID_Pos             (0U)
#define USART_IPIDR_ID_Msk             (0xFFFFFFFFU << USART_IPIDR_ID_Pos)       /*!< 0xFFFFFFFF */
#define USART_IPIDR_ID                 USART_IPIDR_ID_Msk          /*!< Peripheral identifier */

/******************  Bit definition for USART_SIDR register  ******************/
#define USART_SIDR_SID_Pos             (0U)
#define USART_SIDR_SID_Msk             (0xFFFFFFFFU << USART_SIDR_SID_Pos)       /*!< 0xFFFFFFFF */
#define USART_SIDR_SID                 USART_SIDR_SID_Msk          /*!< Size identification  */

/******************************************************************************/
/*                                                                            */
/*                           Window Watchdog (WWDG)                           */
/*                                                                            */
/******************************************************************************/
/*******************  Bit definition for WWDG_CR register  ********************/
#define WWDG_CR_T_Pos           (0U)
#define WWDG_CR_T_Msk           (0x7FU << WWDG_CR_T_Pos)          /*!< 0x0000007F */
#define WWDG_CR_T               WWDG_CR_T_Msk                     /*!< 7-bit counter (MSB to LSB) */
#define WWDG_CR_T_0             (0x1U << WWDG_CR_T_Pos)           /*!< 0x00000001 */
#define WWDG_CR_T_1             (0x2U << WWDG_CR_T_Pos)           /*!< 0x00000002 */
#define WWDG_CR_T_2             (0x4U << WWDG_CR_T_Pos)           /*!< 0x00000004 */
#define WWDG_CR_T_3             (0x8U << WWDG_CR_T_Pos)           /*!< 0x00000008 */
#define WWDG_CR_T_4             (0x10U << WWDG_CR_T_Pos)          /*!< 0x00000010 */
#define WWDG_CR_T_5             (0x20U << WWDG_CR_T_Pos)          /*!< 0x00000020 */
#define WWDG_CR_T_6             (0x40U << WWDG_CR_T_Pos)          /*!< 0x00000040 */
#define WWDG_CR_WDGA_Pos        (7U)
#define WWDG_CR_WDGA_Msk        (0x1U << WWDG_CR_WDGA_Pos)        /*!< 0x00000080 */
#define WWDG_CR_WDGA            WWDG_CR_WDGA_Msk                  /*!< Activation bit */

/*******************  Bit definition for WWDG_CFR register  *******************/
#define WWDG_CFR_W_Pos          (0U)
#define WWDG_CFR_W_Msk          (0x7FU << WWDG_CFR_W_Pos)         /*!< 0x0000007F */
#define WWDG_CFR_W              WWDG_CFR_W_Msk                    /*!< 7-bit window value */
#define WWDG_CFR_W_0            (0x1U << WWDG_CFR_W_Pos)          /*!< 0x00000001 */
#define WWDG_CFR_W_1            (0x2U << WWDG_CFR_W_Pos)          /*!< 0x00000002 */
#define WWDG_CFR_W_2            (0x4U << WWDG_CFR_W_Pos)          /*!< 0x00000004 */
#define WWDG_CFR_W_3            (0x8U << WWDG_CFR_W_Pos)          /*!< 0x00000008 */
#define WWDG_CFR_W_4            (0x10U << WWDG_CFR_W_Pos)         /*!< 0x00000010 */
#define WWDG_CFR_W_5            (0x20U << WWDG_CFR_W_Pos)         /*!< 0x00000020 */
#define WWDG_CFR_W_6            (0x40U << WWDG_CFR_W_Pos)         /*!< 0x00000040 */
#define WWDG_CFR_EWI_Pos        (9U)
#define WWDG_CFR_EWI_Msk        (0x1U << WWDG_CFR_EWI_Pos)        /*!< 0x00000200 */
#define WWDG_CFR_EWI            WWDG_CFR_EWI_Msk                  /*!< Early wakeup interrupt */
#define WWDG_CFR_WDGTB_Pos      (11U)
#define WWDG_CFR_WDGTB_Msk      (0x7U << WWDG_CFR_WDGTB_Pos)      /*!< 0x00003800 */
#define WWDG_CFR_WDGTB          WWDG_CFR_WDGTB_Msk                /*!< Timer base */
#define WWDG_CFR_WDGTB_0        (0x1U << WWDG_CFR_WDGTB_Pos)    /*!< 0x00000800 */
#define WWDG_CFR_WDGTB_1        (0x2U << WWDG_CFR_WDGTB_Pos)   /*!< 0x00001000 */
#define WWDG_CFR_WDGTB_2        (0x4U << WWDG_CFR_WDGTB_Pos)   /*!< 0x00002000 */

/*******************  Bit definition for WWDG_SR register  ********************/
#define WWDG_SR_EWIF_Pos        (0U)
#define WWDG_SR_EWIF_Msk        (0x1U << WWDG_SR_EWIF_Pos)        /*!< 0x00000001 */
#define WWDG_SR_EWIF            WWDG_SR_EWIF_Msk                  /*!< Early wakeup interrupt flag */

/*****************  Bit definition for WWDG_HWCFGR register  ******************/
#define WWDG_HWCFGR_PREDIV_Pos  (0U)
#define WWDG_HWCFGR_PREDIV_Msk  (0xFFFFU << WWDG_HWCFGR_PREDIV_Pos) /*!< 0x0000FFFF */
#define WWDG_HWCFGR_PREDIV      WWDG_HWCFGR_PREDIV_Msk            /*!< The watchdog clock is prescaled by 4096 (PREDIV[15:0] + 1). */

/******************  Bit definition for WWDG_VERR register  *******************/
#define WWDG_VERR_MINREV_Pos    (0U)
#define WWDG_VERR_MINREV_Msk    (0xFU << WWDG_VERR_MINREV_Pos)    /*!< 0x0000000F */
#define WWDG_VERR_MINREV        WWDG_VERR_MINREV_Msk              /*!< IP version minor revision info */
#define WWDG_VERR_MAJREV_Pos    (4U)
#define WWDG_VERR_MAJREV_Msk    (0xFU << WWDG_VERR_MAJREV_Pos)    /*!< 0x000000F0 */
#define WWDG_VERR_MAJREV        WWDG_VERR_MAJREV_Msk              /*!< IP version major revision info */

/******************  Bit definition for WWDG_IPIDR register  ******************/
#define WWDG_IPIDR_ID_Pos       (0U)
#define WWDG_IPIDR_ID_Msk       (0xFFFFFFFFU << WWDG_IPIDR_ID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_IPIDR_ID           WWDG_IPIDR_ID_Msk                 /*!< WWDG peripheral identifier */

/******************  Bit definition for WWDG_SIDR register  *******************/
#define WWDG_SIDR_SID_Pos       (0U)
#define WWDG_SIDR_SID_Msk       (0xFFFFFFFFU << WWDG_SIDR_SID_Pos)/*!< 0xFFFFFFFF */
#define WWDG_SIDR_SID           WWDG_SIDR_SID_Msk                 /*!< The address decoding range is 1 Kbyte */


/**
  * @}
  */

/**
  * @}
  */

/** @addtogroup Exported_macros
  * @{
  */

/******************************** DMA Instances *******************************/
#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == LPDMA_Channel0)   || \
                                       ((INSTANCE) == LPDMA_Channel1)   || \
                                       ((INSTANCE) == LPDMA_Channel2)   || \
                                       ((INSTANCE) == LPDMA_Channel3))

#define IS_HPDMA_INSTANCE(INSTANCE) (0 == 1)

#define IS_LPDMA_INSTANCE(INSTANCE) (((INSTANCE) == LPDMA_Channel0)   || \
                                     ((INSTANCE) == LPDMA_Channel1)   || \
                                     ((INSTANCE) == LPDMA_Channel2)   || \
                                     ((INSTANCE) == LPDMA_Channel3))

#define IS_DMA_2D_ADDRESSING_INSTANCE(INSTANCE) (0 == 1)

#define IS_DMA_PFREQ_INSTANCE(INSTANCE) (((INSTANCE) == LPDMA_Channel0)   || \
                                         ((INSTANCE) == LPDMA_Channel1)   || \
                                         ((INSTANCE) == LPDMA_Channel2)   || \
                                         ((INSTANCE) == LPDMA_Channel3))

/******************************** EXTI Instances **********************************/
#define IS_EXTI_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == EXTI2)

/******************************* GPIO Instances *******************************/
#define IS_GPIO_ALL_INSTANCE(INSTANCE) ((INSTANCE) == GPIOZ)

/**************************** GPIO AF Instances *******************************/
/* On MP2, all GPIO Bank support AF */
#define IS_GPIO_AF_INSTANCE IS_GPIO_ALL_INSTANCE

/**************************** GPIO Lock Instances *****************************/
/* On MP2, all GPIO Bank support the Lock mechanism */
#define IS_GPIO_LOCK_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)

/******************************* HSEM Instances *******************************/
#define IS_HSEM_ALL_INSTANCE(INSTANCE) ((INSTANCE) == HSEM)
/*********************  Bit definition for HSEM_CR register  ******************/
#define HSEM_CPU1_COREID    (0x00000001U) /* Semaphore Core CA35 ID */
#define HSEM_CPU2_COREID    (0x00000002U) /* Semaphore Core CM33 ID */
#define HSEM_CPU3_COREID    (0x00000003U) /* Semaphore Core CM0PLUS ID */
#define HSEM_CR_COREID_CURRENT   (HSEM_CPU3_COREID << HSEM_CR_COREID_Pos)

#define HSEM_SEMID_MIN     (0U)       /* HSEM ID Min*/
#define HSEM_SEMID_MAX     (15U)      /* HSEM ID Max */

#define HSEM_PROCESSID_MIN (0U)       /* HSEM Process ID Min */
#define HSEM_PROCESSID_MAX (255U)     /* HSEM Process ID Max */

#define HSEM_CLEAR_KEY_MIN (0U)       /* HSEM clear Key Min value */
#define HSEM_CLEAR_KEY_MAX (0xFFFFU)  /* HSEM clear Key Max value */

/******************************** I3C Instances *******************************/
#define IS_I3C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I3C1) || \
                                       ((INSTANCE) == I3C2) || \
                                       ((INSTANCE) == I3C3) || \
                                       ((INSTANCE) == I3C4))
/******************************** I2C Instances *******************************/
#define IS_I2C_ALL_INSTANCE(INSTANCE) ((INSTANCE) == I2C8)

/******************* I2C Instances : Group belongingness *********************/
#define IS_I2C_GRP1_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)

/************** I2C Instances : wakeup capability from stop modes *************/
#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)

/************** I2C Instances : trigger input *********************************/
#define IS_I2C_TRIGGER_INPUT_INSTANCE(INSTANCE) ((INSTANCE) == I2C8)

/****************************** SMBUS Instances *******************************/
#define IS_SMBUS_ALL_INSTANCE(INSTANCE) ((INSTANCE) == I2C8)

/************** SMBUS Instances : trigger input *******************************/
#define IS_SMBUS_TRIGGER_INPUT_INSTANCE(INSTANCE) ((INSTANCE) == I2C8)

/******************************* IPCC Instances *******************************/
#define IS_IPCC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IPCC2)

/******************************* IWDG Instances *******************************/
#define IS_IWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IWDG5)

/******************************* LPTIM Instances ******************************/
#define IS_LPTIM_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM3) || \
                                     ((INSTANCE) == LPTIM4) || \
                                     ((INSTANCE) == LPTIM5))

/****************** LPTIM Instances : DMA supported instances *****************/
#define IS_LPTIM_DMA_INSTANCE(INSTANCE)  (((INSTANCE) == LPTIM3) || \
                                          ((INSTANCE) == LPTIM4))

/************* LPTIM Instances : at least 1 capture/compare channel ***********/
#define IS_LPTIM_CC1_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM3) || \
                                         ((INSTANCE) == LPTIM4) || \
                                         ((INSTANCE) == LPTIM5))

/************* LPTIM Instances : at least 2 capture/compare channel ***********/
#define IS_LPTIM_CC2_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM3) || \
                                         ((INSTANCE) == LPTIM4))

/****************** LPTIM Instances : supporting encoder interface **************/
#define IS_LPTIM_ENCODER_INTERFACE_INSTANCE(INSTANCE)  (0 == 1)

/****************** LPTIM Instances : supporting Input Capture **************/
#define IS_LPTIM_INPUT_CAPTURE_INSTANCE(INSTANCE)  (((INSTANCE) == LPTIM3) || \
                                                    ((INSTANCE) == LPTIM4))

/******************************* MDF/ADF Instances ****************************/
#define IS_MDF_ALL_INSTANCE(INSTANCE) (((INSTANCE) == ADF1_Filter0))

/******************************* RTC Instances ********************************/
#define IS_RTC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RTC)

/****************************** SPI Instances ********************************/
#define IS_SPI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == SPI8)

#define IS_SPI_FULL_INSTANCE(INSTANCE) (0 == 1)

#define IS_SPI_PARTIAL_INSTANCE(INSTANCE)    (0 == 1)

#define IS_SPI_LIMITED_INSTANCE(INSTANCE) ((INSTANCE) == SPI8)

/************** SPI Instances : trigger input *********************************/
#define IS_SPI_TRIGGER_INPUT_INSTANCE(INSTANCE) ((INSTANCE) == SPI8)

/******************** USART Instances : Synchronous mode **********************/
#define IS_USART_INSTANCE(INSTANCE) (0 == 1)

/******************** UART Instances : Asynchronous mode **********************/
#define IS_UART_INSTANCE(INSTANCE) (0 == 1)

/******************** LPUART Instance *****************************************/
#define IS_LPUART_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/******************** UART Instances : FIFO mode **********************/
#define IS_UART_FIFO_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/****************** UART Instances : Auto Baud Rate detection *****************/
#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (0 == 1)

/*********************** UART Instances : Driver Enable ***********************/
#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/********************* UART Instances : Half-Duplex mode **********************/
#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/******************* UART Instances : Hardware Flow control *******************/
#define IS_UART_HWFLOW_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/************************* UART Instances : SPI Slave mode **************************/
#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE) (0 == 1)

/************************* UART Instances : LIN mode **************************/
#define IS_UART_LIN_INSTANCE(INSTANCE) (0 == 1)

/****************** UART Instances : Wake-up from Stop mode *******************/
#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)

/************************* UART Instances : IRDA mode *************************/
#define IS_IRDA_INSTANCE(INSTANCE) (0 == 1)

/********************* USART Instances : Smard card mode **********************/
#define IS_SMARTCARD_INSTANCE(INSTANCE) (0 == 1)

/******************************* WWDG Instances *******************************/
#define IS_WWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == WWDG2)

/******************************* DMA VERSION ********************************/
#define DMA_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* EXTI VERSION ********************************/
#define EXTI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* GPIO VERSION ********************************/
#define GPIO_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* I2C VERSION ********************************/
#define I2C_VERSION(INSTANCE) ((INSTANCE)->VERR)

/******************************* IPCC VERSION ********************************/
#define IPCC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* IWDG VERSION ********************************/
#define IWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* LPTIM VERSION ********************************/
#define LPTIM_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* PWR VERSION ********************************/
#define PWR_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* RTC VERSION ********************************/
#define RTC_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* SPI/I2S VERSION ****************************/
#define SPI_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* TAMP VERSION ********************************/
#define TAMP_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* USART VERSION ********************************/
#define USART_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* WWDG VERSION ********************************/
#define WWDG_VERSION(__INSTANCE__) ((__INSTANCE__)->VERR)

/******************************* DEVICE VERSION ********************************/
#define DEVICE_REVISION() (((DBGMCU->IDCODE) & (DBGMCU_IDCODE_REV_ID_Msk)) >> DBGMCU_IDCODE_REV_ID_Pos)
#define IS_DEVICE_REV_A() (DEVICE_REVISION() == 0x1000)

/******************************* DEVICE ID  ************************************/
#define DEVICE_ID() ((DBGMCU->IDCODE) & (DBGMCU_IDCODE_DEV_ID_Msk))

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* __STM32MP251Dxx_CM0_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
